<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Streams: a new general purpose data structure in Redis</title>
<link>http://antirez.com/news/114</link>
<guid isPermaLink="true" >http://antirez.com/news/114</guid>
<description>&lt;span class=&quot;info&quot;&gt;&lt;span class=&quot;username&quot;&gt;&lt;a href=&quot;http://antirez.com/user/antirez&quot;&gt;antirez&lt;/a&gt;&lt;/span&gt; 8 hours ago. 32084 views.&lt;/span&gt;&lt;pre&gt;
Until a few months ago, for me streams were no more than an interesting and relatively straightforward concept in the context of messaging. After Kafka popularized the concept, I mostly investigated their usefulness in the case of Disque, a message queue that is now headed to be translated into a Redis 4.2 module. Later I decided that Disque was all about AP messaging, which is, fault tolerance and guarantees of delivery without much efforts from the client, so I decided that the concept of streams was not a good match in that case.

However, at the same time, there was a problem in Redis, that was not taking me relaxed about the data structures exported by default. There is some kind of gap between Redis lists, sorted sets, and Pub/Sub capabilities. You can kindly use all these tools in order to model a sequence of messages or events, but with different tradeoffs. Sorted sets are memory hungry, can’t model naturally the same message delivered again and again, clients can’t block for new messages. Because a sorted set is not a sequential data structure, it’s a set where elements can be moved around changing their scores: no wonder if it was not a good match for things like time series. Lists have different problems creating similar applicability issues in certain use cases: you cannot explore what is in the middle of a list because the access time in that case is linear. Moreover no fan-out is possible, blocking operations on list serve a single element to a single client. Nor there was a fixed element identifier in lists, in order to say: given me things starting from that element. For one-to-many workloads there is Pub/Sub, which is great in many cases, but for certain things you do not want fire-and-forget: to retain a history is important, not just to refetch messages after a disconnection, also because certain list of messages, like time series, are very important to explore with range queries: what were my temperature readings in this 10 seconds range?

The way I tried to address the above problems, was planning a generalization of sorted sets and lists into a unique more flexible data structure, however my design attempts ended almost always in making the resulting data structure ways more artificial than the current ones. One good thing about Redis is that the data structures exported resemble more the natural computer science data structures, than, “this API that Salvatore invented”. So in the end, I stopped my attempts, and said, ok that’s what we can provide so far, maybe I’ll add some history to Pub/Sub, or some more flexibility to lists access patterns in the future. However every time an user approached me during a conference saying “how would you model time series in Redis?” or similar related questions, my face turned green.

Genesis
=======

After the introduction of modules in Redis 4.0, users started to see how to fix this problem themselves. One of them, Timothy Downs, wrote me the following over IRC:

    &amp;lt;forkfork&amp;gt; the module I'm planning on doing is to add a transaction log style data type - meaning that a very large number of subscribers can do something like pub sub without a lot of redis memory growth
    &amp;lt;forkfork&amp;gt; subscribers keeping their position in a message queue rather than having redis maintain where each consumer is up to and duplicating messages per subscriber

This captured my imagination. I thought about it a few days, and realized that this could be the moment when we could solve all the above problems at once. What I needed was to re-imagine the concept of “log”. It is a basic programming element, everybody is used to it, because it’s just as simple as opening a file in append mode and writing data to it in some format. However Redis data structures must be abstract. They are in memory, and we use RAM not just because we are lazy, but because using a few pointers, we can conceptualize data structures and make them abstract, to allow them to break free from the obvious limits. For instance normally a log has several problems: the offset is not logical, but is an actual bytes offset, what if we want logical offsets that are related to the time an entry was inserted? We have range queries for free. Similarly, a log is often hard to garbage collect: how to remove old elements in an append only data structure? Well, in our idealized log, we just say we want at max this number of entries, and the old ones will go away, and so forth.

While I was trying to write a specification starting from the seed idea of Timothy, I was working to a radix tree implementation that I was using for Redis Cluster, to optimize certain parts of its internals. This provided the ground in order to implement a very space efficient log, that was still accessible in logarithmic time to get ranges. At the same time I started reading about Kafka streams to get other interesting ideas that could fit well into my design, and this resulted into getting the concept of Kafka consumer groups, and idealizing it again for Redis and the in-memory use case. However the specification remained just a specification for months, at the point that after some time I rewrote it almost from scratch in order to upgrade it with many hints that I accumulated talking with people about this upcoming addition to Redis. I wanted Redis streams to be a very good use case for time series especially, not just for other kind of events and messaging applications.

Let’s write some code
=====================

Back from Redis Conf, during the summertime, I was implementing a library called “listpack”.  This library is just the successor of ziplist.c, that is, a data structure that can represent a list of string elements inside a single allocation. It’s just a very specialized serialization format, with the peculiarity of being parsable also in reverse order, from right to left: something needed in order to substitute ziplists in all the use cases.

Mixing radix trees + listpacks, it is possible to easily build a log that is at the same time very space efficient, and indexed, that means, allowing for random access by IDs and time. Once this was ready, I started to write the code in order to implement the stream data structure. I’m still finishing the implementation, however at this point, inside the Redis “streams” branch at Github, there is enough to start playing and having fun. I don’t claim that the API is 100% final, but there are two interesting facts: one is that at this point, only the consumer groups are missing, plus a number of less important commands to manipulate the stream, but all the big things are implemented already. The second is the decision to backport all the stream work back into the 4.0 branch in about two months, once everything looks stable. It means that Redis users will not have to wait for Redis 4.2 in order to use streams, they will be available ASAP for production usage. This is possible because being a new data structure, almost all the code changes are self-contained into the new code. With the exception of the blocking list operations: the code was refactored so that we share the same code for streams and lists blocking operations, with a great simplification of the Redis internals.

Tutorial: welcome to Redis Streams
==================================

In some way, you can think at streams as a supercharged version of Redis lists. Streams elements are not just a single string, they are more objects composed of fields and values. Range queries are possible and fast. Each entry in a stream has an ID, which is a logical offset. Different clients can blocking-wait for elements with IDs greater than a specified one. A fundamental command of Redis streams is XADD. Yes, all the Redis stream commands are prefixed by an “X”.

&amp;gt; XADD mystream * sensor-id 1234 temperature 10.5
1506871964177.0

The XADD command will append the specified entry as a new element to the specified stream “mystream”. The entry, in the example above, has two fields: sensor-id and temperature, however each entry in the same stream can have different fields. Using the same field names will just lead to better memory usage. An interesting thing is also that the fields order is guaranteed to be retained. XADD returns the ID of the just inserted entry, because with the asterisk in the third argument, we asked the command to auto-generate the ID. This is almost always what you want, but it is possible also to force a specific ID, for instance in order to replicate the command to slaves and AOF files.

The ID is composed of two parts: a millisecond time and a sequence number. 1506871964177 is the millisecond time, and is just a Unix time with millisecond resolution. The number after the dot, 0, is the sequence number, and is used in order to distinguish entries added in the same millisecond. Both numbers are 64 bit unsigned integers. This means that we can add all the entries we want in a stream, even in the same millisecond. The millisecond part of the ID is obtained using the maximum between the current local time of the Redis server generating the ID, and the last entry inside the stream. So even if, for instance, the computer clock jumps backward, the IDs will continue to be incremental. In some way you can think stream entry IDs as whole 128 bit numbers. However the fact that they have a correlation with the local time of the instance where they are added, means that we have millisecond precision range queries for free.

As you can guess, adding two entries in a very fast way, will result in only the sequence number to be incremented. We can simulate the “fast insertion” simply with a MULTI/EXEC block:

&amp;gt; MULTI
OK
&amp;gt; XADD mystream * foo 10
QUEUED
&amp;gt; XADD mystream * bar 20
QUEUED
&amp;gt; EXEC
1) 1506872463535.0
2) 1506872463535.1

The above example also shows how we can use different fields for different entries without having to specifying any schema initially. What happens however is that every first message of every block (that usually contains something in the range of 50-150 messages) is used as reference, and successive entries having the same fields are compressed with a single flag saying “same fields of the first entry in this block”. So indeed using the same fields for successive messages saves a lot of memory, even when the set of fields slowly change over time.

In order to retrieve data from the stream there are two ways: range queries, that are implemented by the XRANGE command, and streaming, implemented by the XREAD command. XRANGE just fetches a range of items from start to stop, inclusive. So for instance I can fetch a single item, if I know its ID, with:

&amp;gt; XRANGE mystream 1506871964177.0 1506871964177.0
1) 1) 1506871964177.0
   2) 1) &quot;sensor-id&quot;
      2) &quot;1234&quot;
      3) &quot;temperature&quot;
      4) &quot;10.5&quot;

However you can use the special start symbol of “-“ and the special stop symbol of “+” to signify the minimum and maximum ID possible. It’s also possible to use the COUNT option in order to limit the amount of entries returned. A more complex XRANGE example is the following:

&amp;gt; XRANGE mystream - + COUNT 2
1) 1) 1506871964177.0
   2) 1) &quot;sensor-id&quot;
      2) &quot;1234&quot;
      3) &quot;temperature&quot;
      4) &quot;10.5&quot;
2) 1) 1506872463535.0
   2) 1) &quot;foo&quot;
      2) &quot;10&quot;

Here we are reasoning in terms of ranges of IDs, however you can use XRANGE in order to get a specific range of elements in a given time range, because you can omit the “sequence” part of the IDs. So what you can do is to just specify times in milliseconds. The following means: “Give me 10 entries starting from the Unix time 1506872463”:

127.0.0.1:6379&amp;gt; XRANGE mystream 1506872463000 + COUNT 10
1) 1) 1506872463535.0
   2) 1) &quot;foo&quot;
      2) &quot;10&quot;
2) 1) 1506872463535.1
   2) 1) &quot;bar&quot;
      2) &quot;20&quot;

A final important thing to note about XRANGE is that, given that we receive the IDs in the reply, and the immediately successive ID is trivially obtained just incrementing the sequence part of the ID, it is possible to use XRANGE to incrementally iterate the whole stream, receiving for every call the specified number of elements. After the *SCAN family of commands in Redis, that allowed iteration of Redis data structures *despite* the fact they were not designed for being iterated, I avoided to make the same error again.

Streaming with XREAD: blocking for new data
===========================================

XRANGE is perfect when we want to access our stream to get ranges by ID or time, or single elements by ID. However in the case of streams that different clients must consume as data arrives, this is not good enough and would require some form of pooling (that could be a good idea for *certain* applications that just connect from time to time to get data).

The XREAD command is designed in order to read, at the same time, from multiple streams just specifying the ID of the last entry in the stream we got. Moreover we can request to block if no data is available, to be unblocked when data arrives. Similarly to what happens with blocking list operations, but here data is not consumed from the stream, and multiple clients can access the same data at the same time.

This is a canonical example of XREAD call:

&amp;gt; XREAD BLOCK 5000 STREAMS mystream otherstream $ $

And it means: get data from “mystream” and “otherstream”. If no data is available, block the client, with a timeout of 5000 milliseconds. After the STREAMS option we specify the keys we want to listen for, and the last ID we have. However a special ID of “$” means: assume I’ve all the elements that there are in the stream right now, so give me just starting from the next element arriving.

If, from another client, I send the commnad:

&amp;gt; XADD otherstream * message “Hi There”

This is what happens on the XREAD side:

1) 1) &quot;otherstream&quot;
   2) 1) 1) 1506935385635.0
         2) 1) &quot;message&quot;
            2) &quot;Hi There&quot;

We get the key that received data, together with the data received. In the next call, we’ll likely use the ID of the last message received:

&amp;gt; XREAD BLOCK 5000 STREAMS mystream otherstream $ 1506935385635.0

And so forth. However note that with this usage pattern, it is possible that the client will connect again after a very big delay (because it took time to process messages, or for any other reason). In such a case, in the meantime, a lot of messages could pile up, so it is wise to always use the COUNT option with XREAD, in order to make sure the client will not be flooded with messages and the server will not have to lose too much time just serving tons of messages to a single client.

Capped streams
==============

So far so good… however streams at some point have to remove old messages. Fortunately this is possible with the MAXLEN option of the XADD command:

&amp;gt; XADD MAXLEN 1000000 * field1 value1 field2 value2

This basically means, if the stream, after adding the new element is found to have more than 1 million messages, remove old messages so that the length returns back to 1 million elements. It’s just like using RPUSH + LTRIM with lists, but this time we have a built-in mechanism to do so. However note that the above means that every time we add a new message, we have also to incur in the work needed in order to remove a message from the other side of the stream. This takes some CPU, so it is possible to use the “~” symbol before the count in MAXLEN, in order to specify that we are not really demanding *exactly* 1 million messages, but if there are a few more it’s not a big problem:

&amp;gt; XADD MAXLEN ~ 1000000 * foo bar

This way XADD will remove messages only when it can remove a whole node. This will make having the capped stream almost for free compared to vanilla XADD.

Consumer groups (work in progress)
==================================

This is the first of the features that is not already implemented in Redis, but is a work in progress. It is also the idea more clearly inspired by Kafka, even if implemented here in a pretty different way. The gist is that with XREAD, clients can also add a “GROUP &amp;lt;name&amp;gt;” option. Automatically all the clients in the same group will get *different* messages. Of course there could be multiple groups reading from the same stream, in such cases all groups will receive duplicates of the same messages arriving in the stream, but within each group, messages will not be repeated.

An extension to groups is that it will be possible to specify a “RETRY &amp;lt;milliseconds&amp;gt;” option when groups are specified: in this case, if messages are not acknowledged for processing with XACK, they will be delivered again after the specified amount of milliseconds. This provides some best effort reliability to the delivering of the messages, in case the client has no private means to mark messages as processed. This part is a work in progress as well.

Memory usage and saving loading times
=====================================

Because of the design used to model Redis streams, the memory usage is remarkably low. It depends on the number of fields, values, and their lengths, but for simple messages we are at a few millions of messages for every 100 MB of used memory. Moreover, the format is conceived to need very minimal serialization: the listpack blocks that are stored as radix tree nodes, have the same representation on disk and in memory, so they are trivially stored and read. For instance Redis can read 5 million entries from the RDB file in 0.3 seconds.
This makes replication and persistence of streams very efficient.

It is planned to also allow deletion of items in the middle. This is only partially implemented, but the strategy is to mark entries as deleted in the entry flag, and when a given ratio between entries and deleted entires is reached, the block is rewritten to collect the garbage, and if needed it is glued to another adjacent block in order to avoid fragmentation.

Conclusions end ETA
===================

Redis streams will be part of Redis stable in the 4.0 series before the end of the year. I think that this general purpose data structure is going to put a huge patch in order for Redis to cover a lot of use cases that were hard to cover: that means that you had to be creative in order to abuse the current data structures to fix certain problems. One very important use case is time series, but my feeling is that also streaming of messages for other use cases via TREAD is going to be very interesting both as replacement for Pub/Sub applications that need more reliability than fire-and-forget, and for completely new use cases. For now, if you want to start to evaluate the new capabilities in the context of your problems, just fetch the “streams” branch at Github and start playing. After all bug reports are welcome :-)

If you like videos, a real-time session showing streams is here: &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.youtube.com/watch?v=ELDzy9lCFHQ&quot;&gt;https://www.youtube.com/watch?v=ELDzy9lCFHQ&lt;/a&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 02 Oct 2017 15:14:05 +0000</pubDate>
<dc:creator>darwhy</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://antirez.com/news/114</dc:identifier>
</item>
<item>
<title>Diminishing returns of static typing</title>
<link>https://blog.merovius.de/2017/09/12/diminishing-returns-of-static-typing.html</link>
<guid isPermaLink="true" >https://blog.merovius.de/2017/09/12/diminishing-returns-of-static-typing.html</guid>
<description>&lt;p&gt;I often get into discussions with people, where the matter of strictness and expressiveness of a static type system comes up. The most common one, by far, is Go's lack of generics and the resulting necessity to use &lt;code&gt;interface{}&lt;/code&gt; in container types (the &lt;a href=&quot;https://godoc.org/container&quot;&gt;container-subpackages&lt;/a&gt; are obvious cases, but also &lt;a href=&quot;https://godoc.org/context&quot;&gt;context&lt;/a&gt;). When I express my view, that the lack of static type-safety for containers isn't a problem, I am treated with condescending reactions ranging from disbelief to patronizing.&lt;/p&gt;&lt;p&gt;I also often take the &lt;em&gt;other&lt;/em&gt; side of the argument. This happens commonly, when talking to proponents of dynamically typed languages. In particular I got into debates of whether Python would be suitable for a certain use-case. When the lack of static type-safety is brought up, the proponents of Python defend it by pointing out that it now features optional type hints. Which they say make it possible, to reap the benefits of static typing even in a conventionally dynamically typed language.&lt;/p&gt;
&lt;p&gt;This is an attempt to write my thoughts on both of these (though they are not in any way novel or creative) down more thoroughly. Discussions usually don't provide the space for that. They are also often charged and parties are more interested in “winning the argument”, than finding consensus.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;I don't think it's particularly controversial, that static typing in general has advantages, even though actual data about those seems to be &lt;a href=&quot;https://danluu.com/empirical-pl/&quot;&gt;surprisingly hard to come by&lt;/a&gt;. &lt;em&gt;I&lt;/em&gt; certainly believe that, it is why I use Go in the first place. There is a difference of opinion though, in how large and important those benefits are and how much of the behavior of a program must be statically checked to reap those benefits.&lt;/p&gt;
&lt;p&gt;To understand this, we should first make explicit &lt;em&gt;what&lt;/em&gt; the benefits of static type checking are. The most commonly mentioned one is to catch bugs as early in the development process as possible. If a piece of code I write already contains a rigorous proof of correctness in the form of types, just writing it down and compiling it gives me assurance that it will work as intended in all circumstances. At the other end of the spectrum, in a fully dynamic language I will need to write tests exercising all of my code to find bugs. Running tests takes time. Writing &lt;em&gt;good&lt;/em&gt; tests that actually cover all intended behavior is hard. And as it's in general impossible to cover &lt;em&gt;all&lt;/em&gt; possible execution paths, there will always be the possibility of a rare edge-case that we didn't think of testing to trigger a bug in production.&lt;/p&gt;
&lt;p&gt;So, we can think of static typing as increasing the proportion of bug-free lines of code deployed to production. This is of course a simplification. In practice, we would still catch a lot of the bugs via more rigorous testing, QA, canarying and other practices. To a degree we can still subsume these in this simplification though. If we catch a buggy line of code in QA or the canary phase, we are going to roll it back. So in a sense, the proportion of code we wrote that makes it as bug-free into production will still go down. Thus:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;small&quot; src=&quot;https://blog.merovius.de/assets/static_typing_v_good_code.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This is usually the understanding, that the “more static typing is always better” argument is based on. Checking more behavior at compile time means less bugs in production means more satisfied customers and less being woken up at night by your pager. Everybody's happy.&lt;/p&gt;
&lt;p&gt;Why then is it, that we don't all code in Idris, Agda or a similarly strict language? Sure, the graph above is suggestively drawn to taper off, but it's still monotonically increasing. You'd think that this implies more is better. The answer, of course, is that static typing has a cost and that there is no free lunch.&lt;/p&gt;
&lt;p&gt;The costs of static typing again come in many forms. It requires more upfront investment in thinking about the correct types. It increases compile times and thus the change-compile-test-repeat cycle. It makes for a steeper learning curve. And more often than we like to admit, the error messages a compiler will give us will decline in usefulness as the power of a type system increases. Again, we can oversimplify and subsume these effects in saying that it reduces our speed:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;small&quot; src=&quot;https://blog.merovius.de/assets/static_typing_v_speed.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This is what we mean when we talk about dynamically typed languages being good for rapid prototyping. In the end, however, what we are usually interested in, is what I'd like to call &lt;em&gt;velocity&lt;/em&gt;: The speed with which we can deploy new features to our users. We can model that as the speed with which we can roll out bug-free code. Graphically, that is expressed as the product of the previous two graphs:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;small&quot; src=&quot;https://blog.merovius.de/assets/static_typing_v_velocity.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In practice, the product of these two functions will have a maximum, a sweet spot of maximum velocity. Designing a type system for a programming language is, at least in part, about finding that sweet spot&lt;a href=&quot;https://blog.merovius.de/2017/09/12/diminishing-returns-of-static-typing.html#footnote1&quot;&gt;¹&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now if we are to accept all of this, that opens up a different question: If we are indeed searching for that sweet spot, how do we explain the vast differences in strength of type systems that we use in practice? The answer of course is simple (and I'm sure many of you have already typed it up in an angry response). The curves I drew above are completely made up. Given how hard it is to do empirical research in this space and to actually quantify the measures I used here, it stands to reason that their shape is very much up for interpretation.&lt;/p&gt;
&lt;p&gt;A Python developer might very reasonably believe that optional type-annotations are more than enough to achieve most if not all the advantages of static typing. While a Haskell developer might be much better adapted to static typing and not be slowed down by it as much (or even at all). As a result, the perceived sweet spot can vary widely:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.merovius.de/assets/static_typing_pythonista_v_haskeller.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;What's more, the importance of these factors might vary a lot too. If you are writing avionics code or are programming the control unit for a space craft, you probably want to be pretty darn sure that the code you are deploying is correct. On the other hand, if you are a Silicon Valley startup in your growth-phase, user acquisition will be of a very high priority and you get users by deploying features quicker than your competitors. We can model that, by weighing the factors differently:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.merovius.de/assets/static_typing_startup_v_nasa.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Your use case will determine the sweet spot you are looking for and thus the language you will choose. But a language is also designed with a set of use cases in mind and will set its own sweet spot according to that.&lt;/p&gt;
&lt;p&gt;I think when we talk about how strict a type system should be, we need to acknowledge these subjective factors. And it is fine to believe that your perception of one of those curves or how they should be weighted is closer to a hypothetical objective reality than another persons. But you should make that belief explicit and provide a justification of &lt;em&gt;why&lt;/em&gt; your perception is more realistic. Don't just assume that other people view them the same way and then be confused that they do not come to the same conclusions as you.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Back to Go's type system. In my opinion, Go manages to hit a good sweet spot (that is, its design agrees with my personal preferences on this). To me it seems that Go reaps probably upwards of 90% of the benefits you can get from static typing while still being not too impeding. And while I definitely agree static typing is beneficial, the &lt;em&gt;marginal&lt;/em&gt; benefit of making user-defined containers type-safe simply seems pretty low (even if it's positive). In the end, it would probably be less than 1% of Go code that would get this additional type-checking and it is probably pretty obvious code. And meanwhile, I perceive generics as a language feature pretty costly. So I find it hard to justify a large perceived cost with a small perceived benefit.&lt;/p&gt;
&lt;p&gt;Now, that is not to say I'm not open to be convinced. Just that simply saying “but more type-safety!” is only looking at one side of the equation and isn't enough. You need to acknowledge that there is no free lunch and that this is a tradeoff. You need to accept that your perceptions of how big the benefit of adding static typing is, how much it costs and how important it is are all subjective. If you want to convince me that my perception of their benefit is wrong, the best way would be to provide specific instances of bugs or production crashes caused by a type-assertion on an &lt;code&gt;interface{}&lt;/code&gt; taken out of a container. Or a refactoring you couldn't make because of the lack of type-safety with a specific container. Ideally, this takes the form of an &lt;a href=&quot;https://github.com/golang/go/wiki/ExperienceReports&quot;&gt;experience report&lt;/a&gt;, which I consider an excellent way to talk about engineered tradeoffs.&lt;/p&gt;
&lt;p&gt;Of course you can continue to roll your eyes whenever someone questions your perception of the value-curve of static typing. Or pretend that when I say the &lt;em&gt;marginal&lt;/em&gt; benefit of type-safe containers is small, I am implying that the &lt;em&gt;total&lt;/em&gt; benefit of static typing is small. It's an effective debate-tactic, if your goal is to shut up your opposition. But not if your goal is to convince them and build consensus.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;[1] There is a generous and broad exception for research languages here. If the point of your design is to explore the possibility space of type-systems, matters of practicality can of course often be ignored. &lt;a href=&quot;https://blog.merovius.de/2017/09/12/diminishing-returns-of-static-typing.html#footnote1_back&quot;&gt;⬆&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 15:09:25 +0000</pubDate>
<dc:creator>robgering</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.merovius.de/2017/09/12/diminishing-returns-of-static-typing.html</dc:identifier>
</item>
<item>
<title>Ask HN: Who is hiring? (October 2017)</title>
<link>https://news.ycombinator.com/item?id=15384262</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=15384262</guid>
<description>&lt;tr readability=&quot;0.55737704918033&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.5814863102999&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;4.9361147327249&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;15384262&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15384262&quot; class=&quot;storylink&quot;&gt;Ask HN: Who is hiring? (October 2017)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.71428571428571&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_15384262&quot;&gt;441 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=whoishiring&quot; class=&quot;hnuser&quot;&gt;whoishiring&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15384262&quot;&gt;9 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_15384262&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=15384262&amp;amp;goto=item%3Fid%3D15384262&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20Who%20is%20hiring%3F%20(October%202017)&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20Who%20is%20hiring%3F%20(October%202017)&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=15384262&quot;&gt;686 comments&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=15384262&amp;amp;auth=f99982baa9f9a89894898b2647e72c2fb72bcf32&quot;&gt;favorite&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11.626552795031&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;11.16149068323&quot;&gt;Please lead with the location of the position and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE. If it isn't a household name, please explain what your company does.
&lt;p&gt;Submitters: please only post if you personally are part of the hiring company—no recruiting firms or job boards. One post per company please.&lt;/p&gt;
&lt;p&gt;Readers: please only email submitters if you personally are interested in the job—no recruiters or sales calls.&lt;/p&gt;
&lt;p&gt;You can also use kristopolous' console script to search the thread: &lt;a href=&quot;https://news.ycombinator.com/item?id=10313519&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=10313519&lt;/a&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.7448275862069&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;a href=&quot;https://www.ycombinator.com/apply/&quot;&gt;Applications are open for YC Winter 2018&lt;/a&gt;&lt;/center&gt;
&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/dmca.html&quot;&gt;DMCA&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Mon, 02 Oct 2017 15:00:14 +0000</pubDate>
<dc:creator>whoishiring</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=15384262</dc:identifier>
</item>
<item>
<title>ZeroNet: Decentralized websites using Bitcoin crypto and the BitTorrent network</title>
<link>https://zeronet.io/</link>
<guid isPermaLink="true" >https://zeronet.io/</guid>
<description>&lt;head&gt;&lt;title&gt;ZeroNet: Decentralized websites using Bitcoin crypto and the BitTorrent network&lt;/title&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;media/fonts.css&quot; type=&quot;text/css&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;/&gt;&lt;link rel=&quot;preload&quot; href=&quot;media/fonts.css&quot; as=&quot;style&quot;/&gt;&lt;title&gt;facebook&lt;/title&gt;&lt;title&gt;reddit&lt;/title&gt;&lt;title&gt;github&lt;/title&gt;&lt;title&gt;twitter&lt;/title&gt;&lt;title&gt;ghost&lt;/title&gt;&lt;title&gt;lang&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;31.299935358759&quot;&gt;

&lt;div class=&quot;block block-100 head-top&quot;&gt;

&lt;h2&gt;Open, free and uncensorable websites,&lt;br/&gt;using Bitcoin cryptography and BitTorrent network&lt;/h2&gt;





&lt;/div&gt;
&lt;p&gt;
&lt;h3&gt;Peer-to-Peer&lt;/h3&gt;
&lt;h4&gt;Your content distributed directly to other visitors without any central server.&lt;/h4&gt;
&lt;/p&gt;
&lt;div class=&quot;block block-34 block-detail arrow-left block-p2p-detail&quot;&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h5&gt;Uncensored&lt;/h5&gt;
It's nowhere because it's everywhere!&lt;/li&gt;
&lt;li&gt;
&lt;h5&gt;No hosting costs&lt;/h5&gt;
Sites are served by visitors.&lt;/li&gt;
&lt;li&gt;
&lt;h5&gt;Always accessible&lt;/h5&gt;
No single point of failure.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;
&lt;h3&gt;Simple&lt;/h3&gt;
&lt;h4&gt;No configuration needed:&lt;br/&gt;Download, unpack and start using it.&lt;/h4&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;.bit domains&lt;/h3&gt;
&lt;h4&gt;Decentralized domains using Namecoin cryptocurrency.&lt;/h4&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;h3&gt;No passwords&lt;/h3&gt;
&lt;h4&gt;Your account is protected by the same cryptography as your Bitcoin wallet.&lt;/h4&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;Fast&lt;/h3&gt;
&lt;h4&gt;Page response time is not limited by your connection speed.&lt;/h4&gt;
&lt;/p&gt;

&lt;div class=&quot;block block-33 block-detail arrow-left block-dynamic-detail&quot;&gt;
&lt;h3&gt;Dynamic content&lt;/h3&gt;
&lt;h4&gt;Real-time updated, multi-user websites.&lt;/h4&gt;

&lt;/div&gt;
&lt;p&gt;
&lt;h3&gt;Works everywhere&lt;/h3&gt;
&lt;h4&gt;Supports any modern browser on&lt;br/&gt;Windows, Linux or Mac platforms.&lt;/h4&gt;
&lt;/p&gt;
&lt;div class=&quot;block block-34 block-anon&quot;&gt;
&lt;h3&gt;Anonymity&lt;/h3&gt;
&lt;h4&gt;You can easily hide your IP address using the Tor network.&lt;/h4&gt;

&lt;/div&gt;
&lt;p&gt;
&lt;h3&gt;Offline&lt;/h3&gt;
&lt;h4&gt;Browse the sites you're seeding even if your internet connection is down.&lt;/h4&gt;
&lt;/p&gt;
&lt;div class=&quot;block block-100 block-opensource&quot;&gt;
&lt;h3&gt;Open Source&lt;/h3&gt;
&lt;h4&gt;Developed by the community for the community.&lt;/h4&gt;

&lt;/div&gt;




&lt;h3 class=&quot;hosted&quot;&gt;Hosted by the wonderful &lt;a href=&quot;http://www.vultr.com/?ref=6955457-3B&quot; target=&quot;_blank&quot;&gt;Vultr.com&lt;/a&gt;&lt;/h3&gt;
&lt;/body&gt;</description>
<pubDate>Mon, 02 Oct 2017 14:27:58 +0000</pubDate>
<dc:creator>csantini</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://zeronet.io/</dc:identifier>
</item>
<item>
<title>Tiny Phones That Go Inside a Butt (2016)</title>
<link>https://www.vice.com/en_us/article/zngpz4/prison-phones-that-go-up-your-bum</link>
<guid isPermaLink="true" >https://www.vice.com/en_us/article/zngpz4/prison-phones-that-go-up-your-bum</guid>
<description>&lt;p&gt;In the early-2000s, mobile manufacturers tried to make handsets as small as possible. In the 2010s, smartphones were sold on how big their screens were. In 2016, the tide might now be turning once again: Apple's newest phone model, the iPhone SE, boasts a relatively minuscule 4-inch screen. But Apple have some distance to go before they can match the Zanco Fly.&lt;/p&gt;
&lt;p&gt;With a 0.66-inch screen, the Fly is apparently the world's smallest mobile phone. It's not the only nanophone in existence, but they're all made by companies you've never heard of, and you won't find them in major electrical retailers. You might, however, find them stuffed among chargers for Nokia 3210s at your local phone unlocking booth, and they're all over Amazon and eBay. They cost about $40.&lt;/p&gt;

&lt;p&gt;Some features—like three-day standby—seem rather good. But if you're really wondering what edge these phones have over the latest touchscreen smartphones, try getting a Samsung Galaxy Note 4 up your ass.&lt;/p&gt;
&lt;p&gt;Yes: if you hadn't guessed already, these phones are going up prisoners' butt holes.&lt;/p&gt;
&lt;img src=&quot;https://vice-web-statics-cdn.vice.com/images/blank.png&quot; alt=&quot;&quot; data-src=&quot;https://vice-images.vice.com/images/content-images-crops/2016/04/14/prison-phones-that-go-up-your-bum-body-image-1460652911-size_1000.jpg?output-quality=75&quot;/&gt;&lt;p&gt;If you think this sounds like wild extrapolation—after all, lipsticks are around the same size, and you don't get articles about whacking those up your nether regions—have a look at how some of these phones are sold. Many, for instance, claim to be 100 percent plastic, or come with a &quot;&lt;a href=&quot;http://www.amazon.co.uk/ZANCO-FLY-SMALLEST-THINNEST-CHANGERS/dp/B00VB3Z7OY&quot; target=&quot;_blank&quot;&gt;beat the BOSS&lt;/a&gt;&quot; tagline, which is to say they claim to be undetectable by body orifice scanners.&lt;/p&gt;
&lt;div class=&quot;article__media&quot; readability=&quot;7.5471698113208&quot;&gt;&lt;img src=&quot;https://vice-web-statics-cdn.vice.com/images/blank.png&quot; alt=&quot;&quot; data-src=&quot;https://vice-images.vice.com/images/content-images-crops/2016/04/14/prison-phones-that-go-up-your-bum-body-image-1460644917-size_1000.png?output-quality=75&quot;/&gt;&lt;p class=&quot;article__image-caption&quot;&gt;The full range of Xekü BOSS scanners, screengrab &lt;a href=&quot;http://bodyorificescanner.com/&quot; target=&quot;_blank&quot;&gt;via&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Amazon customer reviews for various brown-phones range from the subtle to the straightforward. &lt;a href=&quot;http://www.amazon.co.uk/gp/customer-reviews/R1EJS0NL818UTK/ref=cm_cr_arp_d_rvw_ttl?ie=UTF8&amp;amp;ASIN=B00VB3Z7OY&quot; target=&quot;_blank&quot;&gt;One reviewer&lt;/a&gt; reports that the phone is &quot;very small and easy/painless to hide,&quot; but is concerned that this model isn't 100 percent plastic, so won't necessarily beat the BOSS. They give the phone just one star, &quot;as I imagine that most people will want a phone like this for a certain purpose.&quot;&lt;/p&gt;
&lt;p&gt;Another user, Sean, is more blunt. In a &lt;a href=&quot;http://www.amazon.co.uk/review/R126904W4K9R3R&quot; target=&quot;_blank&quot;&gt;five star review&lt;/a&gt; deemed &quot;helpful&quot; by 23 people, he notes: &quot;No anal problems!!! Didn't hurt my bum at all thanks guys :)&quot;&lt;/p&gt;
&lt;p&gt;Similar phones were &lt;a href=&quot;http://www.dailymail.co.uk/news/article-2397826/Key-fob-mobile-phone-Worlds-smallest-mobile-proves-hit-prisoners.html&quot; target=&quot;_blank&quot;&gt;in the news&lt;/a&gt; back in 2013 when handsets shaped like BMW key fobs—also largely plastic, and in a convenient pellet shape—appeared. Those keyfob phones are apparently illegal now—if only due to trademark infringement of that BMW logo—but phones in prisons remain a big problem. In January it was reported that seizures of mobile phones had hit a new high in England and Wales: almost 10,000 phones or SIMs had been confiscated in one 12-month period, significantly outnumbering drugs confiscations.&lt;/p&gt;

&lt;p&gt;&quot;Phones are everywhere,&quot; says former inmate Carl Cattermole, whose prison survival guide at &lt;a href=&quot;http://prisonism.co.uk&quot; target=&quot;_blank&quot;&gt;prisonism.co.uk&lt;/a&gt; provides a fascinating insight into life behind bars. &quot;Staff bring them in, or you could buy one from another inmate by doing them a favor or giving them something, or you phone up someone outside and they pay cash to someone else. People normally use them in their cell with people looking out, but it gets to the point where people are just using them in the changing rooms for the gym like it's the outside world.&quot;&lt;/p&gt;
&lt;p&gt;Carl adds that cavity searches do occur on your way into prison, so bumphones might not be practical when you're on your way in, but there are plenty of other ways to get things into prisons. Having stuff chucked over a wall is one spectacularly basic method; going fishing is another—last year someone was given two-and-a-half years for tying &lt;a href=&quot;http://www.independent.co.uk/news/uk/crime/cctv-shows-man-smuggling-knife-and-mcdonalds-into-wormwood-scrubs-prison-a6718221.html&quot; target=&quot;_blank&quot;&gt;drugs, a knife, and a McMuffin&lt;/a&gt; to fishing line that a prisoner was hanging out of a window. But regardless of how they get in, once phones are inside the prison, they need to stay hidden.&lt;/p&gt;
&lt;p&gt;Phones up butts are frequently reported in the news. Last summer, for instance, a guy beginning a 16-month stretch for fraud was found with a phone, plus charger, up his ass. This February, a triple killer in a New South Wales maximum security prison went on hunger strike for 12 days in an attempt not to eject a phone detected by a BOSS unit (&lt;a href=&quot;http://www.dailytelegraph.com.au/news/disengaged-triple-killer-kon-georgiou-finally-passes-phone-hidden-up-his-bottom-for-12-days/news-story/dfde6fb6bad3c895c1966ffb0661c0b0&quot; target=&quot;_blank&quot;&gt;the phone eventually emerged&lt;/a&gt; on February 25). A year before that, the butthole of a guy being admitted to HMP Manchester was found to contain &lt;a href=&quot;http://metro.co.uk/2016/02/04/prisoner-found-with-four-phones-four-chargers-and-four-sim-cards-crammed-up-his-bottom-5663032/&quot; target=&quot;_blank&quot;&gt;four mobiles, four sim cards, and four chargers&lt;/a&gt;. Then there's André Silva, whose anus was the portal to an Aladdin's Cave of contraband: according to &lt;a href=&quot;http://dangerousminds.net/comments/be_amazed_at_the_amount_of_booty_one_man_hid_up_his_ass&quot; target=&quot;_blank&quot;&gt;one report&lt;/a&gt;, Silva's back passage contained &quot;two mobile phones, two batteries, pliers, two drills, eight pieces of a hacksaw, five nails, and three SIM cards.&quot;&lt;/p&gt;

&lt;p&gt;Those, of course, are just the phones that have been found, and perhaps that's where these $40 buttphones come in; they're not only hard to detect, they're quick and easy to get hidden, too. Obviously it's possible to get reasonably large items up your bottom, otherwise fisting wouldn't be such a popular hobby, but for the purposes of easy storage and retrieval, you're going to want to go as small as possible. &quot;Things like iPhones are rare in prison,&quot; Cattermole says. &quot;Most phones go up a bum at some point or another, so fuck an iPhone 6 Plus, or, rather, don't. You'd look like Spongebob Squarepants: a rectangle with limbs hanging off. Having said that, I knew a dwarf who plugged a Blackberry.&quot;&lt;/p&gt;
&lt;p&gt;And yes, on one hand it's all very amusing that some fella's doing his best not to shit out the latest Samsung. Equally, if someone told you that you couldn't speak to your loved ones whenever you wanted, you'd probably do the same. Christ—considering the blind panic most of us experience when our battery drops below 30 percent, we'd probably be eyeing up the lube if we were facing a single day without Facebook. &quot;I think this is something you don't understand unless you've been to jail,&quot; says Carl. &quot;It's the emotional segregation. I'd find a way to put a phonebox up my bum if it meant staying in contact with my loved ones.&quot;&lt;/p&gt;
&lt;p&gt;Some of the uses may be innocent—last year, two prisoners at HMP Birmingham were given an extra nine months each for &lt;a href=&quot;http://www.birminghammail.co.uk/news/midlands-news/watch-video-rappers-shot-locked-10641476&quot; target=&quot;_blank&quot;&gt;shooting a rap video&lt;/a&gt; while inside—but it'd be naive to think there's nothing dodgy going on. &quot;Predictably, people also organize crime on the outside,&quot; says Carl. &quot;Just like El Chapo still ran the biggest drug cartel in the world from his prison cell, Phil from Gartree will use a mobile to organize his mates to carry on doing whatever it is they do.&quot;&lt;/p&gt;

&lt;p&gt;One remaining question is whether buttphones actually work properly. My first step is to buy one off Amazon—the phone works on all networks except 3, and considering 3's main pull is free international roaming that'll probably be fine for all but the most ambitious prisoner.&lt;/p&gt;
&lt;p&gt;The logical next step would be an unsavory hands-on, phone-in personal odyssey, but nothing of note's been up my butthole for the best part of a decade and things aren't about to change now, so it's off to the grocery store.&lt;/p&gt;
&lt;p&gt;As you can see, a chocolate ring donut allows ample room for maneuver:&lt;/p&gt;
&lt;img src=&quot;https://vice-web-statics-cdn.vice.com/images/blank.png&quot; alt=&quot;&quot; data-src=&quot;https://vice-images.vice.com/images/content-images-crops/2016/04/14/prison-phones-that-go-up-your-bum-body-image-1460644530-size_1000.jpg?output-quality=75&quot;/&gt;&lt;p&gt;And how about the cavity test? Well, the guy at the Sainsbury's meat counter couldn't help with &quot;the nearest thing to a human bottom,&quot; so I just had to go for a chicken. In many ways, this is the classic of the cavity world. In went the phone.&lt;/p&gt;
&lt;img src=&quot;https://vice-web-statics-cdn.vice.com/images/blank.png&quot; alt=&quot;&quot; data-src=&quot;https://vice-images.vice.com/images/content-images-crops/2016/04/14/prison-phones-that-go-up-your-bum-body-image-1460652347-size_1000.jpg?output-quality=75&quot;/&gt;&lt;p&gt;GREAT NEWS: I'm pleased to report that having been left overnight, the butth still worked the following morning.&lt;/p&gt;
&lt;p&gt;But are these phones explicitly made for anal retention, or are they just like aluminum foil: made for one thing, occasionally used for another?&lt;/p&gt;
&lt;p&gt;I tried to track down the company that made my phone, but given the subtle phrasing—or explicit claims—made by some resellers, it's perhaps unsurprising that the people behind these phones are hard to track down. My model, the Zanco Fly phone, is apparently made by Zini Mobiles Ltd, a company established in the UK in 2013, but struck off and dissolved last summer. It was registered to a forwarding address with just one director, who still appears to be selling the phone through online trading site Alibaba (minimum order: 3,000), where Zini is listed as a British company whose purported total annual revenue exceeds $100 million. Other online sources claim Zini employ, or employed, over 300 people.&lt;/p&gt;

&lt;p&gt;Eventually I manage to speak with a Adam, a guy in Birmingham who started flogging these phones on eBay, then built the website &lt;a href=&quot;http://www.smallestmobilephones.co.uk&quot; target=&quot;_blank&quot;&gt;smallestmobilephones.co.uk&lt;/a&gt;. He's dealt with Zini, and is keen to point out that his own website contains &quot;nothing about prisons and nothing about arseholes.&quot; But does he know how the phones are being used?&lt;/p&gt;
&lt;p&gt;&quot;We don't say nothing to nobody about that,&quot; he tells me. &quot;If that's what they want to do, they can, but we've never tested the phones to see if they set off those scanners; some of them are mainly plastic, but they're not going to be 100 percent plastic—they still need to have a circuit board.&quot;&lt;/p&gt;
&lt;p&gt;Adam's endearingly frank about some of the phones: while the Zini phone's pretty good, one of the others is &quot;not very good, to be honest,&quot; and when it comes to batteries, he adds that some manufacturers &quot;don't exactly put the best stuff in there.&quot; For that reason, he urges caution on the butt front.&lt;/p&gt;
&lt;p&gt;&quot;Mate,&quot; he laughs. &quot;If someone rang me and said, 'I'm going to put one of these up my arsehole,' I'd say don't. I've heard of people saying they've had some of these small phones on charge and they've blown up.&quot; He adds, by way of comfort: &quot;But it won't make a &lt;em&gt;big&lt;/em&gt; explosion.&quot;&lt;/p&gt;
&lt;p&gt;I don't know how to break it to Adam that one of my unwritten—until now—life rules is that it's best to avoid any sort of explosion, big or otherwise, in the ass area. I'd say that's a fairly straightforward rule to live by. That said, I might keep my buttphone within easy reach: I illegally downloaded a lot of music back in the day, and you never know how things might pan out.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow Peter on&lt;/em&gt; &lt;a href=&quot;http://twitter.com/popjustice&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Twitter.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 07:08:06 +0000</pubDate>
<dc:creator>prostoalex</dc:creator>
<og:type>article</og:type>
<og:title>The Secret World of Tiny Phones That Go Inside Your Butt</og:title>
<og:image>https://images.vice.com/vice/images/articles/meta/2016/04/14/prison-phones-that-go-up-your-bum-1460653451.jpg?crop=1xw:0.75xh;center,center&amp;resize=1200:*</og:image>
<og:url>https://www.vice.com/en_us/article/zngpz4/prison-phones-that-go-up-your-bum</og:url>
<og:description>Available from Amazon and popular in prison, these phones carry reviews like: &quot;No anal problems!!! Didn't hurt my bum at all thanks guys :)&quot;</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.vice.com/en_us/article/zngpz4/prison-phones-that-go-up-your-bum</dc:identifier>
</item>
<item>
<title>IMF Head Foresees the End of Banking and the Triumph of Cryptocurrency</title>
<link>https://fee.org/articles/imf-head-predicts-the-end-of-banking-and-the-triumph-of-cryptocurrency/</link>
<guid isPermaLink="true" >https://fee.org/articles/imf-head-predicts-the-end-of-banking-and-the-triumph-of-cryptocurrency/</guid>
<description>&lt;p&gt;In a remarkably &lt;a href=&quot;https://www.imf.org/en/News/Articles/2017/09/28/sp092917-central-banking-and-fintech-a-brave-new-world&quot;&gt;frank talk&lt;/a&gt; at a Bank of England conference, the Managing Director of the International Monetary Fund has speculated that Bitcoin and cryptocurrency have as much of a future as the Internet itself. It could displace central banks, conventional banking, and challenge the monopoly of national monies.  &lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.imf.org/external/np/omd/bios/cl.htm&quot;&gt;Christine Lagarde&lt;/a&gt;–a Paris native who has held her position at the IMF since 2011–says the only substantial problems with existing cryptocurrency are fixable over time.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In the long run, the technology itself can replace national monies, conventional financial intermediation, and even &quot;puts a question mark on the fractional banking model we know today.&quot;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;In a lecture that chastised her colleagues for failing to embrace the future, she warned that &quot;Not so long ago, some experts argued that personal computers would never be adopted, and that tablets would only be used as expensive coffee trays. So I think it may not be wise to dismiss virtual currencies.&quot;&lt;/span&gt;&lt;/p&gt;&lt;div id=&quot;&quot;&gt;
&lt;p&gt;Let us start with&lt;span&gt; &lt;/span&gt;&lt;strong&gt;virtual currencies&lt;/strong&gt;. To be clear, this is not about digital payments in&lt;span&gt; &lt;/span&gt;&lt;em&gt;existing&lt;/em&gt;&lt;span&gt; &lt;/span&gt;currencies—through Paypal and other “e-money” providers such as Alipay in China, or M-Pesa in Kenya.&lt;/p&gt;
&lt;p&gt;Virtual currencies are in a different category, because they provide their own unit of account and payment systems. These systems allow for peer-to-peer transactions&lt;span&gt; &lt;/span&gt;&lt;em&gt;without&lt;/em&gt;&lt;span&gt; &lt;/span&gt;central clearinghouses,&lt;span&gt; &lt;/span&gt;&lt;em&gt;without&lt;/em&gt;&lt;span&gt; &lt;/span&gt;central banks.&lt;/p&gt;
&lt;p&gt;For now, virtual currencies such as Bitcoin pose little or no challenge to the existing order of&lt;span&gt; &lt;/span&gt;&lt;em&gt;fiat&lt;/em&gt;&lt;span&gt; &lt;/span&gt;currencies and central banks. Why? Because they are too volatile, too risky, too energy intensive, and because the underlying technologies are not yet scalable. Many are too opaque for regulators; and some have been hacked.&lt;/p&gt;
&lt;p&gt;But many of these are&lt;span&gt; &lt;/span&gt;&lt;em&gt;technological&lt;/em&gt;&lt;span&gt; &lt;/span&gt;challenges that could be addressed over time. Not so long ago, some experts argued that personal computers would never be adopted, and that tablets would only be used as expensive coffee trays. So I think it may not be wise to dismiss virtual currencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Better value for money?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For instance, think of countries with weak institutions and unstable national currencies. Instead of adopting the currency of another country—such as the U.S. dollar—some of these economies might see a growing use of virtual currencies. Call it dollarization 2.0.&lt;/p&gt;
&lt;p&gt;IMF experience shows that there is a tipping point beyond which coordination around a new currency is exponential. In the Seychelles, for example, dollarization jumped from&lt;span&gt; &lt;/span&gt;&lt;strong&gt;20 percent&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;in 2006 to&lt;span&gt; &lt;/span&gt;&lt;strong&gt;60 percent&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;in 2008.&lt;/p&gt;
&lt;p&gt;And yet, why might citizens hold virtual currencies rather than physical dollars, euros, or sterling? Because it may one day be&lt;span&gt; &lt;/span&gt;&lt;em&gt;easier&lt;span&gt; &lt;/span&gt;&lt;/em&gt;and&lt;span&gt; &lt;/span&gt;&lt;em&gt;safer&lt;/em&gt;&lt;span&gt; &lt;/span&gt;than obtaining paper bills, especially in remote regions. And because virtual currencies could actually become&lt;span&gt; &lt;/span&gt;&lt;em&gt;more stable&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For instance, they could be issued one-for-one for dollars, or a stable basket of currencies. Issuance could be fully transparent, governed by a credible, pre-defined rule, an algorithm that can be monitored…or even a “smart rule” that might reflect changing macroeconomic circumstances.&lt;/p&gt;
&lt;p&gt;So in many ways, virtual currencies might just give existing currencies and monetary policy a run for their money. The best response by central bankers is to continue running&lt;span&gt; &lt;/span&gt;&lt;em&gt;effective&lt;/em&gt;&lt;span&gt; &lt;/span&gt;monetary policy, while being open to fresh ideas and new demands, as economies evolve.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Better payment services?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example, consider the growing demand for&lt;span&gt; &lt;/span&gt;&lt;strong&gt;new payment services&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;in countries where the shared, decentralized service economy is taking off.&lt;/p&gt;
&lt;p&gt;This is an economy rooted in peer-to-peer transactions, in frequent, small-value payments, often across borders.&lt;/p&gt;
&lt;p&gt;Four dollars for gardening tips from a lady in New Zealand, three euros for an expert translation of a Japanese poem, and 80 pence for a virtual rendering of historic Fleet Street: these payments&lt;span&gt; &lt;/span&gt;&lt;em&gt;can&lt;/em&gt;&lt;span&gt; &lt;/span&gt;be made with credit cards and other forms of e-money. But the charges are relatively high for small-value transactions, especially across borders.&lt;/p&gt;
&lt;p&gt;Instead, citizens may one day prefer virtual currencies, since they potentially offer the same cost and convenience as cash—no settlement risks, no clearing delays, no central registration, no intermediary to check accounts and identities. If privately issued virtual currencies remain risky and unstable, citizens may even&lt;span&gt; &lt;/span&gt;&lt;strong&gt;call on central banks&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;to provide digital forms of legal tender.&lt;/p&gt;
&lt;p&gt;So, when the new service economy comes knocking on the Bank of England’s door, will you welcome it inside? Offer it tea—and&lt;span&gt; &lt;/span&gt;&lt;em&gt;financial&lt;/em&gt;&lt;span&gt; &lt;/span&gt;liquidity?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New models of financial intermediation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This brings us to the second leg of our pod journey—new models of financial intermediation.&lt;/p&gt;
&lt;p&gt;One possibility is the break-up, or unbundling, of banking services. In the future, we might keep minimal balances for payment services on electronic wallets.&lt;/p&gt;
&lt;p&gt;The remaining balances may be kept in mutual funds, or invested in peer-to-peer lending platforms with an edge in big data and artificial intelligence for automatic credit scoring.&lt;/p&gt;
&lt;p&gt;This is a world of six-month product development cycles and constant updates, primarily of software, with a huge premium on simple user-interfaces and trusted security. A world where data is king. A world of many&lt;span&gt; &lt;/span&gt;&lt;em&gt;new&lt;/em&gt;&lt;span&gt; &lt;/span&gt;players without imposing branch offices.&lt;/p&gt;
&lt;p&gt;Some would argue that this puts a question mark on the fractional banking model we know today, if there are fewer bank deposits and money flows into the economy through new channels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How would monetary policy be set in this context?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today’s central banks typically affect asset prices through primary dealers, or big banks, to which they provide liquidity at fixed prices—so-called open-market operations. But if these banks were to become less relevant in the new financial world, and demand for central bank balances were to diminish, could monetary policy transmission remain as effective?&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Mon, 02 Oct 2017 06:19:46 +0000</pubDate>
<dc:creator>imartin2k</dc:creator>
<og:title>IMF Head Foresees the End of Banking and the Triumph of Cryptocurrency | Jeffrey A. Tucker</og:title>
<og:image>https://fee.org/media/25041/christine-lagarde.jpg?anchor=center&amp;mode=crop&amp;height=466&amp;widthratio=2.0171673819742489270386266094&amp;rnd=131514267190000000</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://fee.org/articles/imf-head-predicts-the-end-of-banking-and-the-triumph-of-cryptocurrency/</dc:identifier>
</item>
<item>
<title>Text Editor: Data Structures</title>
<link>http://www.averylaird.com/programming/editor/2017/09/30/the-piece-table/</link>
<guid isPermaLink="true" >http://www.averylaird.com/programming/editor/2017/09/30/the-piece-table/</guid>
<description>&lt;p&gt;The first step in building my text editor is to implement the core API. If you’re wondering why I want to do this, the original article is &lt;a href=&quot;http://www.averylaird.com/programming/2017/09/22/the-text-editor/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I researched several data types, and I tried to be &lt;em&gt;language agnostic&lt;/em&gt;. I wanted my decision to not be influenced by any particular language, and first see if there was a “best way” out there, solely based on operations. Of course, a “best way” rarely exists. However, in the case of text manipulation and storage, there are some clear “worst ways” and “better ways.”&lt;/p&gt;
&lt;h2 id=&quot;the-worst-way&quot;&gt;The Worst Way&lt;/h2&gt;
&lt;p&gt;The worst way to store and manipulate text is to use an array. Firstly, the entire file must be loaded into the array first, which raises issues with time and memory. Even worse still, every insertion and deletion requires each element in the array to be moved. There are more downsides, but already this method is clearly not practical. The array can be dismissed as an option rather quickly.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;By the way: this isn’t a challenge. Please don’t try to find worse ways to manipulate text.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;a-good-way&quot;&gt;A Good Way&lt;/h2&gt;
&lt;p&gt;Another option is a binary tree structure called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Rope_(data_structure)&quot;&gt;rope&lt;/a&gt;. Skip to the &lt;a href=&quot;http://www.averylaird.com/programming/editor/2017/09/30/the-piece-table/#a-rope&quot;&gt;next section&lt;/a&gt; if binary trees aren’t your thing.&lt;/p&gt;
&lt;blockquote readability=&quot;5.6842105263158&quot;&gt;
&lt;p&gt;If you are unfamiliar with binary trees, check out &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_tree&quot;&gt;this&lt;/a&gt; as a starting point.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically, the string is split into sections, and stored in the leaves. The weight of each leaf is the length of the string segment. The weight of each non-leaf node is the total length of the strings on its left subtree. For example, in the diagram&lt;sup id=&quot;fnref:1&quot;/&gt; below, node  is a leaf with a string segment  characters long. Therefore, it has a weight of , as well as its parent node. However, node  has a weight of , because nodes  and  together have a length of .&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://d33wubrfki0l68.cloudfront.net/8986fc0e21194eb3f0a009ef73b3ebffc159ee68/2bf14/static/rope-data-structure.png&quot; alt=&quot;Source: Wikipedia, https://en.wikipedia.org/wiki/Rope_(data_structure)&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This is a lot more efficient than an array. A rope has two main operations, &lt;code class=&quot;highlighter-rouge&quot;&gt;Split&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Concat&lt;/code&gt; (concatenation). &lt;code class=&quot;highlighter-rouge&quot;&gt;Split&lt;/code&gt; splits one string into two strings at a given index, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Concat&lt;/code&gt; concatenates two strings into one. You can preform either an insert or delete with either of these two basic operations. To insert characters, you can split the string once (where you want to insert the content) and concatenate it twice (on either side of the inserted content). Deletions work similarly, by splitting the string twice, and concatenating them again without including the deleted content.&lt;/p&gt;
&lt;p&gt;There’s a big downside. Using a rope is quite confusing and complicated. It’s difficult to explain even in an abstract manner. Working out the kinks in real life, while still making the code maintainable and readable, seems like a nightmare. What’s more, it still uses a lot of space. It didn’t seem like the best option yet, so I kept looking.&lt;/p&gt;
&lt;h2 id=&quot;a-better-way&quot;&gt;A Better Way&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Gap_buffer&quot;&gt;Gap Buffer&lt;/a&gt; is much simpler than the rope. The idea is this: operations on text are often localized. Most of the time, we’re not jumping all over the document. So, we create a “gap” between characters stored in an array. We keep track of how large the gap is by using pointers or array indices. Let’s examine two cases (using pointers):&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;&lt;strong&gt;Insertion&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;The gap is a certain size to begin with. We copy over the inserted content, and if it exceeds the size of the gap, we expand the gap.&lt;/dd&gt;
&lt;/dl&gt;&lt;dl&gt;&lt;dt&gt;&lt;strong&gt;Deletion&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;We shift the pointers of the gap to include the deleted content.&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;This is makes a lot of sense. We are plagued somewhat by the same issues as an array; under certain circumstances, if we move too far from the gap, every element in the array will have to be moved. However, it’s most likely that this is a rare occurrence for the average user. It is quite possible that the speed gained with most operations will outweigh the inefficiency of certain edge cases. In fact, the editor I’m writing this in – &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; – uses a gap buffer, and it’s probably the fastest editor I’ve ever used. That fact alone is a pretty convincing argument to use a gap buffer. But if I’m starting from scratch, I want every aspect of the software to be the best option there is. And maybe there’s a better(est) way.&lt;/p&gt;
&lt;h2 id=&quot;the-betterest-way&quot;&gt;The Better(est) Way&lt;/h2&gt;
&lt;p&gt;A couple months ago, &lt;a href=&quot;https://www.rosslaird.com/&quot;&gt;my Dad&lt;/a&gt; asked me for help with a problem. He was converting one of &lt;a href=&quot;https://www.rosslaird.com/stones-throw/&quot;&gt;his books&lt;/a&gt; to markdown, and there was an issue with the footnotes. In markdown, footnotes do not automatically number themselves&lt;sup id=&quot;fnref:2&quot;/&gt;; they need to be labelled with either a number or some text, like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;[^1]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;[^footnote]&lt;/code&gt;. The definition is the same, with a colon at the end.&lt;/p&gt;
&lt;p&gt;He had used pandoc to mostly convert the document, but every footnote had the format &lt;code class=&quot;highlighter-rouge&quot;&gt;[^#]&lt;/code&gt;. It was my job to make a script to replace every &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; with a number, starting from .&lt;/p&gt;
&lt;p&gt;Easy, right?&lt;/p&gt;
&lt;p&gt;Well, that’s what I thought. I whipped up a regex, scanned through the document, and replaced all occurrences of the pattern with an increasing integer. And, it spat out garbage.&lt;/p&gt;
&lt;p&gt;Why? Because I had made a really, really obvious mistake. The counter doesn’t always take up the same amount of space. The script kept overwriting content, and the offset grew larger the more footnotes were replaced. There’s a simple fix: keep track of how much more space you take up, and add that to your current position in the document. I made that one simple change, and everything worked perfectly. Without knowing it at the time, I had used a &lt;a href=&quot;https://en.wikipedia.org/wiki/Piece_table&quot;&gt;Piece Table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Wikipedia page for the Piece Table is only 8 lines long (Yikes!) Even more concerning, it mentions Microsoft Word among the examples of editors that use piece tables. However, the piece table is a very promising structure. What’s more, at its conception Word was lightning fast with infinite redo/undo, as explained in &lt;a href=&quot;https://web.archive.org/web/20160308183811/http://1017.songtrellisopml.com/whatsbeenwroughtusingpiecetables&quot;&gt;this interesting article&lt;/a&gt; by a Microsoft developer. If you have the time, it’s a cool read.&lt;/p&gt;
&lt;p&gt;In 1998, Charles Crowley wrote &lt;a href=&quot;https://www.cs.unm.edu/~crowley/papers/sds.pdf&quot;&gt;a paper&lt;/a&gt; investigating the pros and cons of various data structures used in text editors. His paper includes the structures we covered, like gap buffers, arrays, and ropes. He concluded that – from a basis of speed, simplicity, and structure – the piece table was the leading method. From my point of view, the piece table is also the most elegant solution.&lt;/p&gt;
&lt;p&gt;We need two buffers: the original file (read-only), and a new file that will contain all of our added text (append-only). Lastly, we have a table that has three columns: file, start, length. This is which file to use (original or new), where the text segment starts in each file (pre-edit), and the length of the segment. Here’s an example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Original File: A_large_span_of_text   (underscores denote spaces)
New File:      English_

File           Start         Length
-----------------------------------
Original           0              2
Original           8              8
New                0              8
Original          16              4

Sequence: A_span_of_English_text
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep in mind that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Start&lt;/code&gt; index is &lt;em&gt;not relative&lt;/em&gt; to previous edits. This is something that gets handled at runtime by adding the length of each previous edit (like what I did to fix my footnote script). Since the length is already included in the table, this is a trivial step.&lt;/p&gt;
&lt;p&gt;I like this solution the most because:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;It’s &lt;strong&gt;elegant&lt;/strong&gt;. Only the minimal amount of information is recorded.&lt;/li&gt;
&lt;li&gt;It’s &lt;strong&gt;simple&lt;/strong&gt;. We run through the table, and do the necessary operations. We don’t need to re-balance or traverse a binary tree.&lt;/li&gt;
&lt;li&gt;It’s &lt;strong&gt;fast&lt;/strong&gt;. This solution has the &lt;em&gt;potential&lt;/em&gt; to be lightning fast. There are some additional optimizations to take into account, which are explained in detail &lt;a href=&quot;http://www.catch22.net/tuts/piece-chains&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The piece table method certainly has its complications, and there are different variations in implementation. It is certainly a daunting task. I’m going to see how far I get. Another article will accompany my attempts to implement the piece table method.&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;

</description>
<pubDate>Mon, 02 Oct 2017 05:34:01 +0000</pubDate>
<dc:creator>LaSombra</dc:creator>
<og:type>article</og:type>
<og:title>Text Editor: Data Structures</og:title>
<og:description></og:description>
<og:url>http://averylaird.com/programming/editor/2017/09/30/the-piece-table/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.averylaird.com/programming/editor/2017/09/30/the-piece-table/</dc:identifier>
</item>
<item>
<title>Facebook Blocks Chinese Billionaire Who Tells Tales of Corruption</title>
<link>https://www.nytimes.com/2017/10/01/business/facebook-china-guo-wengui.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2017/10/01/business/facebook-china-guo-wengui.html</guid>
<description>&lt;span class=&quot;visually-hidden&quot;&gt;Photo&lt;/span&gt;&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://static01.nyt.com/images/2017/10/02/world/02Facebookblock/02Facebookblock-master768.jpg&quot; alt=&quot;&quot; class=&quot;media-viewer-candidate&quot; data-mediaviewer-src=&quot;https://static01.nyt.com/images/2017/10/02/world/02Facebookblock/02Facebookblock-superJumbo.jpg&quot; data-mediaviewer-caption=&quot;Guo Wengui in his apartment in New York in May. Facebook has blocked a profile with his name and a page associated with him.&quot; data-mediaviewer-credit=&quot;James Estrin/The New York Times&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2017/10/02/world/02Facebookblock/02Facebookblock-master768.jpg&quot;/&gt;&lt;/div&gt;
&lt;span class=&quot;caption-text&quot;&gt;Guo Wengui in his apartment in New York in May. Facebook has blocked a profile with his name and a page associated with him.&lt;/span&gt; &lt;span class=&quot;credit&quot; itemprop=&quot;copyrightHolder&quot;&gt;&lt;span class=&quot;visually-hidden&quot;&gt;Credit&lt;/span&gt; James Estrin/The New York Times&lt;/span&gt; &lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;221&quot; data-total-count=&quot;221&quot;&gt;HONG KONG — A Chinese billionaire living in virtual exile in New York, Guo Wengui has riled China’s leaders with his sometimes outlandish tales of deep corruption among family members of top Communist Party officials.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;118&quot; data-total-count=&quot;339&quot;&gt;On Saturday, his tales proved too much for one of his favorite platforms for broadcasting those accusations: Facebook.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;268&quot; data-total-count=&quot;607&quot;&gt;The social media network said it had blocked a profile under Mr. Guo’s name and taken down another page associated with him. Facebook said the content on both pages had included someone else’s personal identifiable information, which violates its terms of service.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;91&quot; data-total-count=&quot;698&quot;&gt;Facebook investigated the accounts after receiving a complaint, according to a spokeswoman.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;267&quot; data-total-count=&quot;965&quot;&gt;“We want people to feel free to share and connect on Facebook, as well as to feel safe, so we don’t allow people to publish the personal information of others without their consent,” the spokeswoman, Charlene Chian, said. She declined to say who had complained.&lt;/p&gt;
&lt;div id=&quot;story-ad-1&quot; class=&quot;story-ad ad ad-placeholder nocontent robots-nocontent&quot;&gt;

&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2017/10/01/business/facebook-china-guo-wengui.html#story-continues-1&quot;&gt;Continue reading the main story&lt;/a&gt;&lt;/div&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;114&quot; data-total-count=&quot;1079&quot; id=&quot;story-continues-1&quot;&gt;Mr. Guo did not immediately respond to a request for comment. The profile under Mr. Guo’s name was not verified.&lt;/p&gt;


&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;80&quot; data-total-count=&quot;1159&quot;&gt;The move comes at a sensitive time for both the Chinese government and Facebook.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;444&quot; data-total-count=&quot;1603&quot;&gt;China has taken several steps in recent months to clamp down &lt;a href=&quot;https://www.nytimes.com/2017/06/09/world/asia/china-celebrity-news-wechat.html?mcubz=3&quot;&gt;on public discourse&lt;/a&gt; ahead of a major Communist Party gathering scheduled to take place this month. President Xi Jinping, the party’s top leader, is widely expected to use the meeting to cement his power and to make personnel changes that could have wide repercussions in coming years. Chinese leaders, who prize stability above all else, want the meeting to go off without a hitch.&lt;/p&gt;
&lt;p class=&quot;story-body-text story-content&quot; data-para-count=&quot;101&quot; data-total-count=&quot;1704&quot;&gt;Last week, Chinese officials &lt;a href=&quot;https://www.nytimes.com/2017/09/25/business/china-whatsapp-blocked.html&quot;&gt;largely blocked&lt;/a&gt; &lt;a href=&quot;https://www.nytimes.com/2017/09/25/business/china-whatsapp-blocked.html&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://www.nytimes.com/2017/09/25/business/china-whatsapp-blocked.html&quot;&gt;WhatsApp messaging app&lt;/a&gt;, which is owned by Facebook.&lt;/p&gt;
&lt;a class=&quot;visually-hidden skip-to-text-link&quot; href=&quot;https://www.nytimes.com/2017/10/01/business/facebook-china-guo-wengui.html#story-continues-2&quot;&gt;Continue reading the main story&lt;/a&gt;</description>
<pubDate>Mon, 02 Oct 2017 00:10:26 +0000</pubDate>
<dc:creator>Jerry2</dc:creator>
<og:url>https://www.nytimes.com/2017/10/01/business/facebook-china-guo-wengui.html</og:url>
<og:type>article</og:type>
<og:title>Facebook Blocks Chinese Billionaire Who Tells Tales of Corruption</og:title>
<og:description>The company, which acted at a sensitive time for China, said Guo Wengui had posted personal information that violated its terms of service.</og:description>
<og:image>https://static01.nyt.com/images/2017/10/02/world/02Facebookblock/02Facebookblock-facebookJumbo.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2017/10/01/business/facebook-china-guo-wengui.html</dc:identifier>
</item>
<item>
<title>Hacker News Clone Using GraphQL and React</title>
<link>https://github.com/clintonwoo/hackernews-react-graphql</link>
<guid isPermaLink="true" >https://github.com/clintonwoo/hackernews-react-graphql</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;h2 align=&quot;center&quot;&gt;Hacker News Clone React/GraphQL&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/clintonwoo/hackernews-react-graphql/stargazers&quot;&gt;&lt;img alt=&quot;GitHub Stars&quot; src=&quot;https://camo.githubusercontent.com/89bddc9b235d530f852066bdfb95a7b707cf7a39/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f636c696e746f6e776f6f2f6861636b65726e6577732d72656163742d6772617068716c2e7376673f7374796c653d736f6369616c266c6162656c3d53746172&quot; data-canonical-src=&quot;https://img.shields.io/github/stars/clintonwoo/hackernews-react-graphql.svg?style=social&amp;amp;label=Star&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/clintonwoo/hackernews-react-graphql/&quot;&gt;&lt;img alt=&quot;GitHub Followers&quot; src=&quot;https://camo.githubusercontent.com/a3e0c44f208f2a381b5b81bb66b855b1cd359a51/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f636c696e746f6e776f6f2e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77&quot; data-canonical-src=&quot;https://img.shields.io/github/followers/clintonwoo.svg?style=social&amp;amp;label=Follow&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/clintonwoo/hackernews-react-graphql/issues&quot;&gt;&lt;img alt=&quot;GitHub Issues&quot; src=&quot;https://camo.githubusercontent.com/755257a98e4ae7a17f115dce8f163db8bd5c5127/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f636c696e746f6e776f6f2f6861636b65726e6577732d72656163742d6772617068716c2e737667&quot; data-canonical-src=&quot;https://img.shields.io/github/issues/clintonwoo/hackernews-react-graphql.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/clintonwoo/hackernews-react-graphql/pulls&quot;&gt;&lt;img alt=&quot;GitHub Pull Requests&quot; src=&quot;https://camo.githubusercontent.com/9711e506a8574d175cc293ec07656396dd00f7cf/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722d7261772f636c696e746f6e776f6f2f6861636b65726e6577732d72656163742d6772617068716c2e737667&quot; data-canonical-src=&quot;https://img.shields.io/github/issues-pr-raw/clintonwoo/hackernews-react-graphql.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This project is a clone of hacker news rewritten with universal JavaScript, using React and GraphQL. It is intended to be an example or boilerplate to help you structure your projects using production-ready technologies.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.hnclone.win&quot;&gt;&lt;img alt=&quot;Hacker News Clone Demo&quot; width=&quot;auto&quot; height=&quot;auto&quot; src=&quot;https://github.com/clintonwoo/hackernews-react-graphql/raw/master/docs/HN-Demo.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.hnclone.win&quot;&gt;Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;h3&gt;Featuring&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;React - (UI Framework)&lt;/li&gt;
&lt;li&gt;GraphQL - (Web Data API)&lt;/li&gt;
&lt;li&gt;Apollo - (GraphQL Client)&lt;/li&gt;
&lt;li&gt;Next - (Routing, SSR, Hot Module Reloading, Code Splitting, Build tool uses Webpack)&lt;/li&gt;
&lt;li&gt;Redux - (State Management)&lt;/li&gt;
&lt;li&gt;Node.js - (Web Server)&lt;/li&gt;
&lt;li&gt;Express - (Web App Server)&lt;/li&gt;
&lt;li&gt;Passport - (Authentication)&lt;/li&gt;
&lt;li&gt;Babel - (JS Transpiling)&lt;/li&gt;
&lt;li&gt;Flow - (Static Types)&lt;/li&gt;
&lt;li&gt;ESLint - (JS Best Practices/Code Highlighting)&lt;/li&gt;
&lt;li&gt;Jest - (Tests)&lt;/li&gt;
&lt;li&gt;Yarn Package Manager - (Better Dependencies)&lt;/li&gt;
&lt;li&gt;Docker - (Container Deployment)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Front End&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Declarative UI - (react)&lt;/li&gt;
&lt;li&gt;Flux State Management - (redux)&lt;/li&gt;
&lt;li&gt;GraphQL Query Colocation - (react-apollo)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Universal JS - (node &amp;amp; express)&lt;/li&gt;
&lt;li&gt;Declarative GraphQL Schema - (react-tools)&lt;/li&gt;
&lt;li&gt;GraphQL Query Batching - (apollo-server-express)&lt;/li&gt;
&lt;li&gt;GraphQL Stored Queries - (apollo-server-express)&lt;/li&gt;
&lt;li&gt;Easy GraphiQL Include - (apollo-server-express)&lt;/li&gt;
&lt;li&gt;Local Authentication Strategy - (passport)&lt;/li&gt;
&lt;li&gt;Server Side Rendering - (next)&lt;/li&gt;
&lt;li&gt;Code Splitting - (next)&lt;/li&gt;
&lt;li&gt;Build to Static Website - (next)&lt;/li&gt;
&lt;li&gt;Container Based Runtime - (docker)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Dev/Test&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Hot Module Reloading - (next)&lt;/li&gt;
&lt;li&gt;Snapshot Testing - (jest)&lt;/li&gt;
&lt;li&gt;Faster Package Install - (yarn)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Architecture Overview&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/clintonwoo/hackernews-react-graphql/blob/master/docs/HN-Clone-Architecture-overview.png&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Hacker News Clone Architecture Overview&quot; width=&quot;auto&quot; height=&quot;400px&quot; src=&quot;https://github.com/clintonwoo/hackernews-react-graphql/raw/master/docs/HN-Clone-Architecture-overview.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Server.js&lt;/em&gt; is the entry point. It uses Express and passes requests to Next. Next SSR renders the pages using &lt;code&gt;getInitialProps()&lt;/code&gt; hook from Apollo helper. Therefore the app makes GraphQL requests on the client or server.&lt;/p&gt;
&lt;p&gt;When the client receives the page it preloads next page JS designated with &lt;code&gt;&amp;lt;Link prefetch href=&quot;/&quot;&amp;gt;&lt;/code&gt;. When the client navigates to the linked page it only needs to make a GraphQL query to render. &lt;em&gt;Great!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See more: &lt;a href=&quot;https://github.com/zeit/next.js/&quot;&gt;Next.js&lt;/a&gt;, &lt;a href=&quot;http://dev.apollodata.com/react/&quot;&gt;Apollo GraphQL Client&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GraphQL: &lt;a href=&quot;http://dev.apollodata.com/tools/graphql-tools/index.html&quot;&gt;GraphQL-Tools by Apollo&lt;/a&gt; or &lt;a href=&quot;http://graphql.org/graphql-js/&quot;&gt;GraphQL docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Directory Structure&lt;/h3&gt;
&lt;p&gt;Each directory contains a README.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;root&lt;/em&gt; - Only contains config files such as Babel, ESLint, Docker, Flow, NPM, Yarn, Git.&lt;/p&gt;
&lt;h2&gt;How To Start&lt;/h2&gt;
&lt;h3&gt;One Click Download &amp;amp; Run&lt;/h3&gt;
&lt;p&gt;You can download and run the repo with one command to rule them all:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/clintonwoo/hackernews-react-graphql.git &amp;amp;&amp;amp; cd hackernews-react-graphql &amp;amp;&amp;amp; npm install &amp;amp;&amp;amp; npm run dev&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Setup&lt;/h3&gt;
&lt;p&gt;Running the app in dev mode is fully featured including &lt;em&gt;hot module reloading&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To run in production mode:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm run build &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;The project runs out of the box with default settings (&lt;em&gt;/src/config.js&lt;/em&gt;). You can include a .env file in your project root to configure settings (this is the '&lt;em&gt;dotenv&lt;/em&gt;' npm package). The &lt;em&gt;.env&lt;/em&gt; file is included in &lt;em&gt;.gitignore&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;How To Test&lt;/h2&gt;
&lt;h3&gt;Jest&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;npm test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This project uses Jest and can do snapshot testing of React components. Whenever a component is changed, please update the snapshots using &lt;code&gt;npm test -- -u&lt;/code&gt; or &lt;code&gt;jest --updateSnapshot&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;How To Build For Deployment&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;npm run build&lt;/code&gt;: NextJS app with entry point &lt;em&gt;server.js&lt;/em&gt; that uses Node.js/Express. Uses Babel compiler to transpile project src to build.&lt;/p&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm run build-docker&lt;/code&gt; Docker Container: Builds a docker container using Dockerfile.&lt;/p&gt;
&lt;h4&gt;Static Website (Optional)&lt;/h4&gt;
&lt;p&gt;NextJS lets us make a powerful static website but you need to consider if you need server side rendering.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm run build-static-website&lt;/code&gt;: Builds static website to &lt;em&gt;/build/static&lt;/em&gt;. Use a static web server &lt;em&gt;eg.&lt;/em&gt; NGINX/Github Pages.&lt;/p&gt;
&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Pull requests are welcome. File an issue for ideas, conversation or feedback.&lt;/p&gt;
&lt;h3&gt;Community&lt;/h3&gt;
&lt;p&gt;After you ★Star this project, follow &lt;a href=&quot;https://twitter.com/clintondannolfo&quot;&gt;@ClintonDAnnolfo&lt;/a&gt; on Twitter.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Sun, 01 Oct 2017 23:18:24 +0000</pubDate>
<dc:creator>alana99</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/10545637?v=4&amp;s=400</og:image>
<og:type>object</og:type>
<og:title>clintonwoo/hackernews-react-graphql</og:title>
<og:url>https://github.com/clintonwoo/hackernews-react-graphql</og:url>
<og:description>hackernews-react-graphql - Hacker News clone rewritten with universal JavaScript, using React and GraphQL.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/clintonwoo/hackernews-react-graphql</dc:identifier>
</item>
<item>
<title>Whom the Gods Would Destroy, They First Give Real-Time Analytics (2013)</title>
<link>http://mcfunley.com/whom-the-gods-would-destroy-they-first-give-real-time-analytics</link>
<guid isPermaLink="true" >http://mcfunley.com/whom-the-gods-would-destroy-they-first-give-real-time-analytics</guid>
<description>&lt;blockquote class=&quot;quotation&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;Homer: There's three ways to do things. The right way, the wrong way, and the &lt;em&gt;Max Power&lt;/em&gt; way!&lt;/p&gt;
&lt;p&gt;Bart: Isn't that the wrong way?&lt;/p&gt;
&lt;p&gt;Homer: Yeah. But faster!&lt;/p&gt;
&lt;p class=&quot;attribution&quot;&gt;- &quot;Homer to the Max&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every few months, I try to talk someone down from building a real-time product analytics system. When I'm lucky, I can get to them early.&lt;/p&gt;
&lt;p&gt;The turnaround time for most of the web analysis done at Etsy is at least 24 hours. This a ranking source of grousing. Decreasing this interval is periodically raised as a priority, either by engineers itching for a challenge or by others hoping to make decisions more rapidly. There are companies out there selling instant usage numbers, so why can't we have them?&lt;/p&gt;
&lt;p&gt;Here's an excerpt from a manifesto demanding the construction of such a system. This was written several years ago by an otherwise brilliant individual, whom I respect. I have made a few omissions for brevity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;We believe in...&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Timeliness&lt;/strong&gt;. I want the data to be at most 5 minutes old. So this is a near-real-time system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comprehensiveness&lt;/strong&gt;. No sampling. Complete data sets.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accuracy&lt;/strong&gt; (how precise the data is). Everything should be accurate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;. Getting to meaningful data in Google Analytics is awful. To start with it's all 12 - 24 hours old, and this is a huge impediment to insight &amp;amp; action.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;. Most reports / dashboards should render in under 5 seconds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;. Keep all stats for all time. I know this can get rather tough, but it's just text.&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;The 23-year-old programmer inside of me is salivating at the idea of building this. The burned out 27-year-old programmer inside of me is busy writing an email about how all of these demands, taken together, probably violate the &lt;a href=&quot;http://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;CAP theorem&lt;/a&gt; somehow and also, hey, did you know that accuracy and precision are different?&lt;/p&gt;
&lt;p&gt;But the 33-year-old programmer (who has long since beaten those demons into a bloody submission) sees the difficulty as irrelevant at best. Real-time analytics are &lt;em&gt;undesirable&lt;/em&gt;. While there are many things wrong with our infrastructure, I would argue that the waiting is not one of those things.&lt;/p&gt;
&lt;p&gt;Engineers might find this assertion more puzzling than most. I am sympathetic to this mindset, and I can understand why engineers are predisposed to see instantaneous A/B statistics as self-evidently positive. We monitor everything about our site in real time. Real-time metrics and graphing are the key to deploying 40 times daily with relative impunity. &lt;a href=&quot;http://codeascraft.etsy.com/2011/02/15/measure-anything-measure-everything/&quot;&gt;Measure anything, measure everything&lt;/a&gt;!&lt;/p&gt;
&lt;img src=&quot;http://mcfunley.com/static/e5ee440c18e/images/deploy-dash.png&quot; alt=&quot;Part of the deploy dashboard at Etsy. We love up-to-the-minute graphs.&quot;/&gt; Part of the deploy dashboard at Etsy. We love up-to-the-minute graphs.
&lt;p&gt;This line of thinking is a trap. It's important to divorce the concepts of operational metrics and product analytics. Confusing &lt;em&gt;how we do things&lt;/em&gt; with &lt;em&gt;how we decide which things to do&lt;/em&gt; is a fatal mistake.&lt;/p&gt;
&lt;p&gt;So what is it that makes product analysis different? Well, there are many ways to screw yourself with real-time analytics. I will endeavor to list a few.&lt;/p&gt;
&lt;p&gt;The first and most fundamental way is to disregard statistical significance testing entirely. This is a rookie mistake, but it's one that's made all of the time. Let's say you're testing a text change for a link on your website. Being an impatient person, you decide to do this over the course of an hour. You observe that 20 people in bucket A clicked, but 30 in bucket B clicked. Satisfied, and eager to move on, you choose bucket B. There are probably thousands of people doing this right now, &lt;em&gt;and they're getting away with it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a mistake because there's no measurement of how likely it is that the observation (20 clicks vs. 30 clicks) was due to chance. Suppose that we weren't measuring text on hyperlinks, but instead we were measuring two quarters to see if there was any difference between the two when flipped. As we flip, we could see a large gap between the number of heads received with either quarter. But since we're talking about quarters, it's more natural to suspect that that difference might be due to chance. Significance testing lets us ascertain how likely it is that this is the case.&lt;/p&gt;
&lt;p&gt;A subtler error is to do significance testing, but to halt the experiment as soon as significance is measured. This is &lt;a href=&quot;http://www.evanmiller.org/how-not-to-run-an-ab-test.html&quot;&gt;always a bad idea&lt;/a&gt;, and the problem is exacerbated by trying to make decisions far too quickly. Funny business with timeframes can coerce most A/B tests into statistical significance.&lt;/p&gt;
&lt;img src=&quot;http://mcfunley.com/static/e5ee440c18e/images/real-time-screwed.png&quot; alt=&quot;A simulation of flipping two fair coins. In the green regions, the difference in the number of heads is measured to be significant. If we stopped flipping in those regions, we would (incorrectly) decide the coins were different.&quot;/&gt; A simulation of flipping two fair coins. In the green regions, the difference in the number of heads is measured to be significant. If we stopped flipping in those regions, we would (incorrectly) decide the coins were different.
&lt;p&gt;Depending on the change that's being made, making &lt;em&gt;any&lt;/em&gt; decision based on a single day of data could be ill-conceived. Even if you think you have plenty of data, it's not farfetched to imagine that user behavior has its own rhythms. A conspicuous (if basic) example of this is that Etsy sees 30% more orders on Tuesdays than it does on Sundays.&lt;/p&gt;
 Gratuitous infographic courtesy &lt;a href=&quot;http://www.thenitpickster.com/&quot;&gt;Brendan Sudol&lt;/a&gt;.
&lt;p&gt;While the sale count itself might not skew a random test, user demographics could be different day over day. Or very likely, you could see a major difference in user behavior immediately upon releasing a change, only to watch it evaporate as users learn to use new functionality. Given all of these concerns, the conservative and reasonable stance is to only consider tests that last a few days or more.&lt;/p&gt;
&lt;p&gt;One could certainly have a real-time analytics system without making any of these mistakes. (To be clear, I find this unlikely. Idle hands stoked by a stream of numbers are the devil's playthings.) But unless the intention is to make decisions with this data, one might wonder what the purpose of such a system could possibly be. Wasting the effort to erect complexity for which there is no use case is perhaps the worst of all of these possible pitfalls.&lt;/p&gt;
&lt;p&gt;For all of these reasons I've come to view delayed analytics as positive. The turnaround time also imposes a welcome pressure on experimental design. People are more likely to think carefully about how their controls work and how they set up their measurements when there's no promise of immediate feedback.&lt;/p&gt;
&lt;p&gt;Real-time web analytics is a seductive concept. It appeals to our desire for instant gratification. But the truth is that there are very few product decisions that can be made in real time, if there are any at all. Analysis is difficult enough already, without attempting to do it at speed.&lt;/p&gt;
</description>
<pubDate>Sun, 01 Oct 2017 20:36:08 +0000</pubDate>
<dc:creator>irfansharif</dc:creator>
<og:type>article</og:type>
<og:title>Whom the Gods Would Destroy, They First Give Real-time Analytics</og:title>
<og:url>http://mcfunley.com/whom-the-gods-would-destroy-they-first-give-real-time-analytics</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>http://mcfunley.com/whom-the-gods-would-destroy-they-first-give-real-time-analytics</dc:identifier>
</item>
</channel>
</rss>