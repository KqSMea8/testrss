<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>JupyterLab is ready for users</title>
<link>https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906</link>
<guid isPermaLink="true" >https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906</guid>
<description>&lt;p name=&quot;df2d&quot; id=&quot;df2d&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;We are proud to announce the beta release series of JupyterLab, the next-generation web-based interface for Project Jupyter.&lt;/p&gt;
&lt;p name=&quot;8ecf&quot; id=&quot;8ecf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;tl;dr: &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;JupyterLab is ready for daily use (&lt;/strong&gt;&lt;a href=&quot;http://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html&quot; data-href=&quot;http://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;documentation&lt;/strong&gt;&lt;/a&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;,&lt;/strong&gt; &lt;a href=&quot;https://mybinder.org/v2/gh/jupyterlab/jupyterlab-demo/18a9793b58ba86660b5ab964e1aeaf7324d667c8?urlpath=lab%2Ftree%2Fdemo%2FLorenz.ipynb&quot; data-href=&quot;https://mybinder.org/v2/gh/jupyterlab/jupyterlab-demo/18a9793b58ba86660b5ab964e1aeaf7324d667c8?urlpath=lab%2Ftree%2Fdemo%2FLorenz.ipynb&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;try it with Binder&lt;/strong&gt;&lt;/a&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*_jDTWlZNUySwrRBgVNqoNw.png&quot; data-width=&quot;1320&quot; data-height=&quot;760&quot; data-focus-x=&quot;51&quot; data-focus-y=&quot;16&quot; data-is-featured=&quot;true&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*_jDTWlZNUySwrRBgVNqoNw.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*_jDTWlZNUySwrRBgVNqoNw.png&quot;/&gt;&lt;/div&gt;
JupyterLab is an interactive development environment for working with notebooks, code, and data.
&lt;h3 name=&quot;110d&quot; id=&quot;110d&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;The Evolution of the Jupyter Notebook&lt;/h3&gt;
&lt;p name=&quot;d3fd&quot; id=&quot;d3fd&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Project Jupyter exists to develop open-source software, open standards, and services for interactive and reproducible computing.&lt;/p&gt;
&lt;p name=&quot;c9f9&quot; id=&quot;c9f9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Since 2011, the Jupyter Notebook has been our flagship project for creating reproducible computational narratives. The Jupyter Notebook enables users to create and share documents that combine live code with narrative text, mathematical equations, visualizations, interactive controls, and other rich output. It also provides building blocks for interactive computing with data: a file browser, terminals, and a text editor.&lt;/p&gt;
&lt;p name=&quot;3786&quot; id=&quot;3786&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The Jupyter Notebook has become ubiquitous with the rapid growth of data science and machine learning and the rising popularity of open-source software in industry and academia:&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;8e36&quot; id=&quot;8e36&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Today there are millions of users of the Jupyter Notebook in many domains, from data science and machine learning to music and education. Our international community comes from almost every country on earth.¹&lt;/li&gt;
&lt;li name=&quot;106c&quot; id=&quot;106c&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;The Jupyter Notebook now supports over &lt;a href=&quot;https://github.com/jupyter/jupyter/wiki/Jupyter-kernels&quot; data-href=&quot;https://github.com/jupyter/jupyter/wiki/Jupyter-kernels&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;100 programming languages&lt;/a&gt;, most of which have been developed by the community.&lt;/li&gt;
&lt;li name=&quot;a8ab&quot; id=&quot;a8ab&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;There are over &lt;a href=&quot;https://github.com/parente/nbestimate&quot; data-href=&quot;https://github.com/parente/nbestimate&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;1.7 million&lt;/a&gt; public Jupyter notebooks hosted on GitHub. Authors are publishing Jupyter notebooks in conjunction with scientific research, academic journals, data journalism, educational courses, and books.&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;56ae&quot; id=&quot;56ae&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;At the same time, the community has faced challenges in using various software workflows with the notebook alone, such as running code from text files interactively. The classic Jupyter Notebook, built on web technologies from 2011, is also difficult to customize and extend.&lt;/p&gt;
&lt;h3 name=&quot;2678&quot; id=&quot;2678&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;JupyterLab: Ready for Users&lt;/h3&gt;
&lt;p name=&quot;d3ed&quot; id=&quot;d3ed&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;JupyterLab is an interactive development environment for working with notebooks, code and data. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Most importantly, JupyterLab has full support for Jupyter notebooks.&lt;/strong&gt; Additionally, JupyterLab enables you to use text editors, terminals, data file viewers, and other custom components side by side with notebooks in a tabbed work area.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*O20XGvUOTLoFKQ9o20usIA.png&quot; data-width=&quot;1320&quot; data-height=&quot;760&quot; data-focus-x=&quot;34&quot; data-focus-y=&quot;26&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*O20XGvUOTLoFKQ9o20usIA.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*O20XGvUOTLoFKQ9o20usIA.png&quot;/&gt;&lt;/div&gt;
JupyterLab enables you to arrange your work area with notebooks, text files, terminals, and notebook outputs.
&lt;p name=&quot;1f18&quot; id=&quot;1f18&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;JupyterLab provides a high level of integration between notebooks, documents, and activities:&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;de9a&quot; id=&quot;de9a&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Drag-and-drop to reorder notebook cells and copy them between notebooks.&lt;/li&gt;
&lt;li name=&quot;7cdd&quot; id=&quot;7cdd&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Run code blocks interactively from text files (.py, .R, .md, .tex, etc.).&lt;/li&gt;
&lt;li name=&quot;a969&quot; id=&quot;a969&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Link a code console to a notebook kernel to explore code interactively without cluttering up the notebook with temporary scratch work.&lt;/li&gt;
&lt;li name=&quot;580a&quot; id=&quot;580a&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Edit popular file formats with live preview, such as Markdown, JSON, CSV, Vega, VegaLite, and more.&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;6396&quot; id=&quot;6396&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;JupyterLab has been over three years in the making, with over 11,000 commits and 2,000 releases of npm and Python packages. Over 100 contributors from the broader community have helped build JupyterLab in addition to &lt;a href=&quot;https://github.com/jupyterlab/jupyterlab#team&quot; data-href=&quot;https://github.com/jupyterlab/jupyterlab#team&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;our core JupyterLab developers&lt;/a&gt;.&lt;/p&gt;
&lt;p name=&quot;ffb9&quot; id=&quot;ffb9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;To get started, see the &lt;a href=&quot;http://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html&quot; data-href=&quot;http://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;JupyterLab documentation&lt;/a&gt; for &lt;a href=&quot;http://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html&quot; data-href=&quot;http://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;installation instructions&lt;/a&gt; and a &lt;a href=&quot;http://jupyterlab.readthedocs.io/en/stable/user/interface.html&quot; data-href=&quot;http://jupyterlab.readthedocs.io/en/stable/user/interface.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;walk-through&lt;/a&gt;, or &lt;a href=&quot;https://mybinder.org/v2/gh/jupyterlab/jupyterlab-demo/18a9793b58ba86660b5ab964e1aeaf7324d667c8?urlpath=lab%2Ftree%2Fdemo%2FLorenz.ipynb&quot; data-href=&quot;https://mybinder.org/v2/gh/jupyterlab/jupyterlab-demo/18a9793b58ba86660b5ab964e1aeaf7324d667c8?urlpath=lab%2Ftree%2Fdemo%2FLorenz.ipynb&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;try JupyterLab with Binder&lt;/a&gt;. You can also &lt;a href=&quot;http://jupyterlab.readthedocs.io/en/stable/user/jupyterhub.html&quot; data-href=&quot;http://jupyterlab.readthedocs.io/en/stable/user/jupyterhub.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;set up JupyterHub&lt;/a&gt; to use JupyterLab.&lt;/p&gt;
&lt;h3 name=&quot;4c9b&quot; id=&quot;4c9b&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Customize Your JupyterLab Experience&lt;/h3&gt;
&lt;p name=&quot;d321&quot; id=&quot;d321&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;JupyterLab is built on top of an &lt;a href=&quot;http://jupyterlab.readthedocs.io/en/stable/user/extensions.html&quot; data-href=&quot;http://jupyterlab.readthedocs.io/en/stable/user/extensions.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;extension system&lt;/a&gt; that enables you to customize and enhance JupyterLab by installing additional extensions. In fact, the builtin functionality of JupyterLab itself (notebooks, terminals, file browser, menu system, etc.) is provided by a set of core extensions.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*OneJZOqKqBZ9oN80kRX7kQ.png&quot; data-width=&quot;1320&quot; data-height=&quot;760&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*OneJZOqKqBZ9oN80kRX7kQ.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*OneJZOqKqBZ9oN80kRX7kQ.png&quot;/&gt;&lt;/div&gt;
JupyterLab extensions enable you to work with diverse data formats such as GeoJSON, JSON and CSV.²
&lt;p name=&quot;32d2&quot; id=&quot;32d2&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Among other things, extensions can:&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;5f97&quot; id=&quot;5f97&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Provide new themes, file editors and viewers, or renderers for rich outputs in notebooks;&lt;/li&gt;
&lt;li name=&quot;3353&quot; id=&quot;3353&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Add menu items, keyboard shortcuts, or advanced settings options;&lt;/li&gt;
&lt;li name=&quot;5c7d&quot; id=&quot;5c7d&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Provide an API for other extensions to use.&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;31c5&quot; id=&quot;31c5&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Community-developed extensions on GitHub are tagged with the &lt;a href=&quot;https://github.com/topics/jupyterlab-extension&quot; data-href=&quot;https://github.com/topics/jupyterlab-extension&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;jupyterlab-extension&lt;/a&gt; topic, and currently include file viewers (GeoJSON, FASTA, etc.), Google Drive integration, GitHub browsing, and ipywidgets support.&lt;/p&gt;
&lt;h3 name=&quot;436d&quot; id=&quot;436d&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Develop JupyterLab Extensions&lt;/h3&gt;
&lt;p name=&quot;1fac&quot; id=&quot;1fac&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;While many JupyterLab users will install additional JupyterLab extensions, some of you will want to develop your own. The extension development API is evolving during the beta release series and will stabilize in JupyterLab 1.0. To start developing a JupyterLab extension, see the &lt;a href=&quot;http://jupyterlab.readthedocs.io/en/stable/developer/extension_dev.html&quot; data-href=&quot;http://jupyterlab.readthedocs.io/en/stable/developer/extension_dev.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;JupyterLab Extension Developer Guide&lt;/a&gt; and the &lt;a href=&quot;https://github.com/jupyterlab/extension-cookiecutter-ts&quot; data-href=&quot;https://github.com/jupyterlab/extension-cookiecutter-ts&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;TypeScript&lt;/a&gt; or &lt;a href=&quot;https://github.com/jupyterlab/extension-cookiecutter-js&quot; data-href=&quot;https://github.com/jupyterlab/extension-cookiecutter-js&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;JavaScript&lt;/a&gt; extension templates.&lt;/p&gt;
&lt;p name=&quot;62ad&quot; id=&quot;62ad&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;JupyterLab itself is co-developed on top of &lt;a href=&quot;https://phosphorjs.github.io/&quot; data-href=&quot;https://phosphorjs.github.io/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;PhosphorJS&lt;/a&gt;, a new Javascript library for building extensible, high-performance, desktop-style web applications. We use modern JavaScript technologies such as TypeScript, React, Lerna, Yarn, and webpack. Unit tests, documentation, consistent coding standards, and user experience research help us maintain a high-quality application.&lt;/p&gt;
&lt;h3 name=&quot;5623&quot; id=&quot;5623&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;JupyterLab 1.0 and Beyond&lt;/h3&gt;
&lt;p name=&quot;bef6&quot; id=&quot;bef6&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;We plan to release JupyterLab 1.0 later in 2018. The beta releases leading up to 1.0 will focus on stabilizing the extension development API, user interface improvements, and additional core features. All releases in the beta series will be stable enough for daily usage.&lt;/p&gt;
&lt;p name=&quot;d3bf&quot; id=&quot;d3bf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;JupyterLab 1.0 will eventually replace the classic Jupyter Notebook. Throughout this transition, the same notebook document format will be supported by both the classic Notebook and JupyterLab.&lt;/p&gt;
&lt;h3 name=&quot;364d&quot; id=&quot;364d&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Get Involved&lt;/h3&gt;
&lt;p name=&quot;be90&quot; id=&quot;be90&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;There are many ways you can participate in the JupyterLab effort. We welcome contributions from all members of the Jupyter community:&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;89fa&quot; id=&quot;89fa&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Use our extension development API to make your own JupyterLab extensions. Please add the &lt;a href=&quot;http://github.com/topics/jupyterlab-extension&quot; data-href=&quot;http://github.com/topics/jupyterlab-extension&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;jupyterlab-extension&lt;/a&gt; topic if your extension is hosted on GitHub. We appreciate feedback as we evolve toward a stable API for JupyterLab 1.0.&lt;/li&gt;
&lt;li name=&quot;fe3c&quot; id=&quot;fe3c&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Contribute to the development, documentation, and design of JupyterLab on &lt;a href=&quot;https://github.com/jupyterlab/jupyterlab&quot; data-href=&quot;https://github.com/jupyterlab/jupyterlab&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;. To get started with development, please see our &lt;a href=&quot;https://github.com/jupyterlab/jupyterlab/blob/master/CONTRIBUTING.md&quot; data-href=&quot;https://github.com/jupyterlab/jupyterlab/blob/master/CONTRIBUTING.md&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;Contributing Guide&lt;/a&gt; and &lt;a href=&quot;https://github.com/jupyter/governance/blob/master/conduct/code_of_conduct.md&quot; data-href=&quot;https://github.com/jupyter/governance/blob/master/conduct/code_of_conduct.md&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;Code of Conduct&lt;/a&gt;. We label issues that are ideal for new contributors as “&lt;a href=&quot;https://github.com/jupyterlab/jupyterlab/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot; data-href=&quot;https://github.com/jupyterlab/jupyterlab/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;good first issue&lt;/a&gt;” or “&lt;a href=&quot;https://github.com/jupyterlab/jupyterlab/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&quot; data-href=&quot;https://github.com/jupyterlab/jupyterlab/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;help wanted&lt;/a&gt;”.&lt;/li&gt;
&lt;li name=&quot;fbe9&quot; id=&quot;fbe9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Connect with us on our &lt;a href=&quot;https://github.com/jupyterlab/jupyterlab/issues&quot; data-href=&quot;https://github.com/jupyterlab/jupyterlab/issues&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;GitHub Issues page&lt;/a&gt; or on our &lt;a href=&quot;https://gitter.im/jupyterlab/jupyterlab&quot; data-href=&quot;https://gitter.im/jupyterlab/jupyterlab&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;Gitter Channel&lt;/a&gt;. If you find a bug, have questions, or want to provide feedback, please join the conversation.&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;7a94&quot; id=&quot;7a94&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;We are thrilled to see how you use and extend JupyterLab.&lt;/p&gt;
&lt;p name=&quot;6d24&quot; id=&quot;6d24&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Sincerely,&lt;/p&gt;
&lt;p name=&quot;e331&quot; id=&quot;e331&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;a href=&quot;https://github.com/jupyterlab/jupyterlab#team&quot; data-href=&quot;https://github.com/jupyterlab/jupyterlab#team&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;The JupyterLab Team&lt;/a&gt; and &lt;a href=&quot;http://jupyter.org/&quot; data-href=&quot;http://jupyter.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Project Jupyter&lt;/a&gt;&lt;/p&gt;
&lt;p name=&quot;8fb9&quot; id=&quot;8fb9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;We thank&lt;/em&gt; &lt;a href=&quot;https://www.TechAtBloomberg.com/&quot; data-href=&quot;https://www.TechAtBloomberg.com/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Bloomberg&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;markup--em markup--p-em&quot;&gt;and&lt;/em&gt; &lt;a href=&quot;https://www.anaconda.com/&quot; data-href=&quot;https://www.anaconda.com/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Anaconda&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;markup--em markup--p-em&quot;&gt;for their support and collaboration in developing JupyterLab. We also thank the&lt;/em&gt; &lt;a href=&quot;https://sloan.org/&quot; data-href=&quot;https://sloan.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Alfred P. Sloan Foundation&lt;/em&gt;&lt;/a&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;, the&lt;/em&gt; &lt;a href=&quot;https://www.moore.org/&quot; data-href=&quot;https://www.moore.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Gordon and Betty Moore Foundation&lt;/em&gt;&lt;/a&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;, and the&lt;/em&gt; &lt;a href=&quot;http://helmsleytrust.org/&quot; data-href=&quot;http://helmsleytrust.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Helmsley Charitable Trust&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;markup--em markup--p-em&quot;&gt;for their support.&lt;/em&gt;&lt;/p&gt;
&lt;p name=&quot;894f&quot; id=&quot;894f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;[1] Based on the 249 country codes listed under &lt;a href=&quot;https://www.iso.org/iso-3166-country-codes.html&quot; data-href=&quot;https://www.iso.org/iso-3166-country-codes.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ISO 3166–1&lt;/a&gt;, recent Google analytics data from 2018 indicates that jupyter.org has hosted visitors from 213 countries.&lt;/p&gt;
&lt;p name=&quot;8b7b&quot; id=&quot;8b7b&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;[2] Data visualized in this screenshot is licensed &lt;a href=&quot;https://creativecommons.org/licenses/by-nc/3.0/us/&quot; data-href=&quot;https://creativecommons.org/licenses/by-nc/3.0/us/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;CC-BY-NC 3.0&lt;/a&gt;. See &lt;a href=&quot;http://datacanvas.org/public-transportation/&quot; data-href=&quot;http://datacanvas.org/public-transportation/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;http://datacanvas.org/public-transportation/&lt;/a&gt; for more details.&lt;/p&gt;
</description>
<pubDate>Tue, 20 Feb 2018 13:32:42 +0000</pubDate>
<dc:creator>thenipper</dc:creator>
<og:title>JupyterLab is Ready for Users – Jupyter Blog</og:title>
<og:url>https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906</og:url>
<og:image>https://cdn-images-1.medium.com/focal/1200/632/51/16/1*_jDTWlZNUySwrRBgVNqoNw.png</og:image>
<og:description>We are proud to announce the beta release series of JupyterLab, the next-generation web-based interface for Project Jupyter.</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906?gi=1e20d511a8a9</dc:identifier>
</item>
<item>
<title>Flight Sim Company Embeds Malware to Steal Pirates’ Passwords</title>
<link>https://torrentfreak.com/flight-sim-company-embeds-malware-to-steal-pirates-passwords-180219/</link>
<guid isPermaLink="true" >https://torrentfreak.com/flight-sim-company-embeds-malware-to-steal-pirates-passwords-180219/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://torrentfreak.com/images/warning.png&quot;&gt;&lt;img src=&quot;https://torrentfreak.com/images/warning.png&quot; alt=&quot;&quot; width=&quot;250&quot; height=&quot;213&quot; class=&quot;alignright size-full wp-image-109065&quot;/&gt;&lt;/a&gt;Anti-piracy systems and DRM come in all shapes and sizes, none of them particularly popular, but one deployed by flight sim company FlightSimLabs is likely to go down in history as one of the most outrageous.&lt;/p&gt;
&lt;p&gt;It all started yesterday on Reddit when Flight Sim user ‘crankyrecursion’ reported a little extra something in his download of FlightSimLabs’ A320X module.&lt;/p&gt;
&lt;p&gt;“Using file ‘FSLabs_A320X_P3D_v2.0.1.231.exe’ there seems to be a file called ‘test.exe’ included,” crankyrecursion &lt;a href=&quot;https://www.reddit.com/r/flightsim/comments/7yh4zu/fslabs_a320_installer_seems_to_include_a_chrome/&quot;&gt;wrote&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“This .exe file is from http://securityxploded.com and is touted as a ‘Chrome Password Dump’ tool, which seems to work – particularly as the installer would typically run with Administrative rights (UAC prompts) on Windows Vista and above. Can anyone shed light on why this tool is included in a supposedly trusted installer?”&lt;/p&gt;
&lt;p&gt;The existence of a Chrome password dumping tool is certainly cause for alarm, especially if the software had been obtained from a less-than-official source, such as a torrent or similar site, given the potential for third-party pollution.&lt;/p&gt;
&lt;p&gt;However, with the possibility of a nefarious third-party dumping something nasty in a pirate release still lurking on the horizon, things took an unexpected turn. FlightSimLabs chief Lefteris Kalamaras made a statement basically admitting that his company was behind the malware installation.&lt;/p&gt;
&lt;p&gt;“We were made aware there is a Reddit thread started tonight regarding our latest installer and how a tool is included in it, that indiscriminately dumps Chrome passwords. That is not correct information – in fact, the Reddit thread was posted by a person who is not our customer and has somehow obtained our installer without purchasing,” Kalamaras &lt;a href=&quot;https://forums.flightsimlabs.com/index.php?/announcement/10-a320-x-drm-clarification/&quot;&gt;wrote&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“[T]here are no tools used to reveal any sensitive information of any customer who has legitimately purchased our products. We all realize that you put a lot of trust in our products and this would be contrary to what we believe.&lt;/p&gt;
&lt;p&gt;“There is a specific method used against specific serial numbers that have been identified as pirate copies and have been making the rounds on ThePirateBay, RuTracker and other such malicious sites,” he added.&lt;/p&gt;
&lt;p&gt;In a nutshell, FlightSimLabs installed a password dumper onto ALL users’ machines, whether they were pirates or not, but then only activated the password-stealing module when it determined that specific ‘pirate’ serial numbers had been used which matched those on FlightSimLabs’ servers.&lt;/p&gt;
&lt;p&gt;“Test.exe is part of the DRM and is only targeted against specific pirate copies of copyrighted software obtained illegally. That program is only extracted temporarily and is never under any circumstances used in legitimate copies of the product,” Kalamaras added.&lt;/p&gt;
&lt;p&gt;That didn’t impress Luke Gorman, who published an &lt;a href=&quot;https://medium.com/@lukegorman97/flightsimlabs-alleged-malware-analysis-1427c4d23368&quot;&gt;analysis&lt;/a&gt; slamming the flight sim company for knowingly installing password-stealing malware on users machines, even those who purchased the title legitimately.&lt;/p&gt;
&lt;center&gt;&lt;strong&gt;Password stealer in action &lt;em&gt;(credit: Luke Gorman)&lt;/em&gt;&lt;/strong&gt;&lt;/center&gt;
&lt;center&gt;&lt;a href=&quot;https://torrentfreak.com/images/pass-steal-e1519054012686.png&quot;&gt;&lt;img src=&quot;https://torrentfreak.com/images/pass-steal-e1519054012686.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;293&quot; class=&quot;aligncenter size-full wp-image-151549&quot;/&gt;&lt;/a&gt;&lt;/center&gt;
&lt;p&gt;Making matters even worse, the FlightSimLabs chief went on to say that information being obtained from pirates’ machines in this manner is likely to be used in court or other legal processes.&lt;/p&gt;
&lt;p&gt;“This method has already successfully provided information that we’re going to use in our ongoing legal battles against such criminals,” Kalamaras revealed.&lt;/p&gt;
&lt;p&gt;While the use of the extracted passwords and usernames elsewhere will remain to be seen, it appears that FlightSimLabs has had a change of heart. With immediate effect, the company is pointing customers to a new installer that doesn’t include code for stealing their most sensitive data.&lt;/p&gt;
&lt;p&gt;“I want to reiterate and reaffirm that we as a company and as flight simmers would never do anything to knowingly violate the trust that you have placed in us by not only buying our products but supporting them and FlightSimLabs,” Kalamaras said in an update.&lt;/p&gt;
&lt;p&gt;“While the majority of our customers understand that the fight against piracy is a difficult and ongoing battle that sometimes requires drastic measures, we realize that a few of you were uncomfortable with this particular method which might be considered to be a bit heavy handed on our part. It is for this reason we have uploaded an updated installer that does not include the DRM check file in question.”&lt;/p&gt;
&lt;p&gt;Further analysis of the ‘DRM’ &lt;a href=&quot;https://www.fidusinfosec.com/fslabs-flight-simulation-labs-dropping-malware-to-combat-piracy/&quot;&gt;has been published&lt;/a&gt; by Fidus.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update Feb 20:&lt;/strong&gt; FlightSimLabs has issued &lt;a href=&quot;https://forums.flightsimlabs.com/index.php?/announcement/11-a320-x-drm-what-happened/&quot;&gt;another statement&lt;/a&gt;, this time much more detailed, which explains that the company was targeting a specific cracker of their games.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Flash back to our first A320-X release for FSX / P3Dv3 (32bit) – we discovered soon after the release of our product for those simulator versions that there were specific crackers who were successful in sidetracking our protection system by using offline serial number generators.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We could not find how this would happen, but we happened upon a particular set of information (username / email / serial number) that would occur recurrently from specific IP addresses.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We tried to add more tests in our subsequent installer releases, but the specific crackers were also upping their game in ensuring they sidetracked our installer. We even went so far as to figure out exactly who the cracker was (we have his name available upon request of any authorities), but unfortunately we could not be able to enter the registration-only web sites he was using to provide this information to other pirates.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We found through the IP addresses tracked that the particular cracker had used Chrome to contact our servers so we decided to capture his information directly – and ONLY his information (obviously, we understand now that people got very upset about this – we’re very sorry once again!) as we had a very good idea of what serial number the cracker used in his efforts.”&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 20 Feb 2018 08:58:24 +0000</pubDate>
<dc:creator>unhammer</dc:creator>
<og:type>article</og:type>
<og:title>Flight Sim Company Embeds Malware to Steal Pirates' Passwords - TorrentFreak</og:title>
<og:description>Flight sim company FlightSimLabs has found itself in trouble after installing malware onto users' machines as an anti-piracy measure. Code embedded in its A320-X module contained a mechanism for detecting 'pirate' serial numbers distributed on The Pirate Bay, which then triggered a process through which the company stole usernames and passwords from users' web browsers.</og:description>
<og:url>https://torrentfreak.com/flight-sim-company-embeds-malware-to-steal-pirates-passwords-180219/</og:url>
<og:image>https://torrentfreak.com/images/warning-1.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://torrentfreak.com/flight-sim-company-embeds-malware-to-steal-pirates-passwords-180219/</dc:identifier>
</item>
<item>
<title>Technological Unemployment: Much More Than You Wanted to Know</title>
<link>https://slatestarcodex.com/2018/02/19/technological-unemployment-much-more-than-you-wanted-to-know/</link>
<guid isPermaLink="true" >https://slatestarcodex.com/2018/02/19/technological-unemployment-much-more-than-you-wanted-to-know/</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;em&gt;[I am not an economist or an expert on this topic. This is my attempt to figure out what economists and experts think so I can understand the issue, and I’m writing it down to speed your going through the same process. If you have more direct access to economists and experts, feel free to ignore this]&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Technological unemployment is a hard topic because there are such good arguments on both sides.&lt;/p&gt;
&lt;p&gt;The argument against: we’ve had increasing technology for centuries now, people have been predicting that technology will put them out of work since the Luddites, and it’s never come true. Instead, one of two things have happened. Either machines have augmented human workers, allowing them to produce more goods at lower prices, and so expanded industries so dramatically that overall they employ more people. Or displaced workers from one industry have gone into another – stable boys becoming car mechanics, or the like. There are a bunch of well-known theoretical mechanisms that compensate for technological displacement – see &lt;a href=&quot;http://ftp.iza.org/dp2621.pdf&quot;&gt;Vivarelli&lt;/a&gt; for a review. David Autor gives a vivid example:&lt;/p&gt;
&lt;blockquote readability=&quot;32&quot;&gt;
&lt;p&gt;Consider the surprising complementarities between information technology and employment in banking, specifically the experience with automated teller machines (ATMs) and bank tellers documented by Bessen (2015). ATMs were introduced in the 1970s, and their numbers in the US economy quadrupled from approximately 100,000 to 400,000 between 1995 and 2010. One might naturally assume that these machines had all but eliminated bank tellers in that interval. But US bank teller employment actually rose modestly from 500,000 to approximately 550,000 over the 30-year period from 1980 to 2010 (although given the growth in the labor force in this time interval, these numbers do imply that bank tellers declined as a share of overall US employment). With the growth of ATMs, what are all of these tellers doing?&lt;/p&gt;
&lt;p&gt;Bessen observes that two forces worked in opposite directions. First, by reducing the cost of operating a bank branch, ATMs indirectly increased the demand for tellers: the number of tellers per branch fell by more than a third between 1988 and 2004, but the number of urban bank branches (also encouraged by a wave of bank deregulation allowing more branches) rose by more than 40 percent. Second, as the routine cash-handling tasks of bank tellers receded, information technology also enabled a broader range of bank personnel to become involved in “relationship banking.” Increasingly, banks recognized the value of tellers enabled by information technology, not primarily as checkout clerks, but as salespersons, forging relationships with customers and introducing them to additional bank services like credit cards, loans, and investment products.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This kind of thing has been remarkably consistent – so much so that arguments that &lt;em&gt;today&lt;/em&gt; is the day technological unemployment happens should be treated with the same skepticism as arguments that &lt;em&gt;today&lt;/em&gt; is the day we build a perpetual motion machine that works.&lt;/p&gt;
&lt;p&gt;The argument in favor: look, imagine there’s a perfect android that can do everything humans do (including management) only better. And suppose it costs $10 to buy and $1/hour to operate. Surely every business owner would just buy those androids, and then all humans who wanted to earn more than $1/hour would be totally out of luck. There’s no conceivable way the androids would “augment” human labor and there’s no conceivable way the displaced humans could go into another industry. So at &lt;em&gt;some point&lt;/em&gt; we’ve got to start getting technological unemployment. Here the vivid example comes from &lt;a href=&quot;https://www.theatlantic.com/business/archive/2011/10/why-workers-are-losing-the-war-against-machines/247278/&quot;&gt;Gregory Clark&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;There was a type of employee at the beginning of the Industrial Revolution whose job and livelihood largely vanished in the early twentieth century. This was the horse. The population of working horses actually peaked in England long after the Industrial Revolution, in 1901, when 3.25 million were at work. Though they had been replaced by rail for long-distance haulage and by steam engines for driving machinery, they still plowed fields, hauled wagons and carriages short distances, pulled boats on the canals, toiled in the pits, and carried armies into battle. But the arrival of the internal combustion engine in the late nineteenth century rapidly displaced these workers, so that by 1924 there were fewer than two million. There was always a wage at which all these horses could have remained employed. But that wage was so low that it did not pay for their feed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There may be some point at which we too stop being worth more than it costs to replace us. And the decline of manufacturing, the increase in labor force nonparticipation and despair in rural Rust Belt communities, etc, suggest that point is fast arriving.&lt;/p&gt;
&lt;p&gt;This is a look at which of those arguments is right. Part I will investigate whether unemployment is getting worse. Part II will investigate whether that is because of technology. Part III will investigate what longer-term trends we should expect.&lt;/p&gt;
&lt;p&gt;As usual, this is very long.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Is unemployment actually getting worse?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Officially&lt;/em&gt; it’s at historic lows.&lt;/p&gt;
&lt;center readability=&quot;2&quot;&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_unemployment.png&quot;/&gt;&lt;em/&gt;
&lt;p&gt;&lt;em&gt;Source: Bureau of Labor Statistics. Just assume this for any graph that looks like this.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;But the real concern isn’t about unemployment per se, but the labor force participation rate (from here on: LFPR). Unemployment measures how many people are looking for work; LFPR measures how many people are out of work and not looking. If people are so discouraged that they’ve given up looking for work, this would not show up in unemployment but would show up in LFPR. Here’s LFPR:&lt;/p&gt;
&lt;center readability=&quot;3&quot;&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_lfpr.png&quot;/&gt;&lt;em/&gt;
&lt;p&gt;&lt;em&gt;Remember, higher means more people working&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;What’s going on here?&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_gender.png&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Same data as before, only disaggregated by gender. From 1950 to 2000, workforce participation rises as women enter the workforce. But throughout this time, men are leaving at almost the same rate, leaving only a moderate net participation gain (and incidentally answering the question that confused me &lt;a href=&quot;http://slatestarcodex.com/2014/06/29/invisible-women/&quot;&gt;here&lt;/a&gt;). Around 2000, all the women who want to be in the workforce are there already, and the declining male trend takes over for a net decline. Because women’s increasing workforce participation is shaped by unrelated cultural trends, most of the rest of this article will focus on male LFPR (from here on: MLFPR).&lt;/p&gt;
&lt;p&gt;A big fraction of declining MFLPR is Baby Boomers retiring. If most people are young, workforce participation will be high. If most people are old, workforce participation will be low. Economists adjust for this by taking something called prime age male labor force participation rate (from here on: PAMLFPR; if you think all these acronyms are getting annoying, I guarantee you it’s more annoying to read papers that just keep saying “prime age male labor force participation rate” again and again). Here it is:&lt;/p&gt;
&lt;center readability=&quot;1.7777777777778&quot;&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_pamlfpr.png&quot;/&gt;&lt;em/&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://voxeu.org/article/long-term-decline-us-prime-age-male-labour-force-participation-and-policies-address-it&quot;&gt;Source&lt;/a&gt; for this and subsequent similar-looking graphs.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;In the 1950s, ~97% (!) of prime-age men had a job. Today that number is more like 88%. This is the decline people are worrying about when they talk about technological unemployment or any other threat to work, and it seems to be happening across the Western world:&lt;/p&gt;
&lt;center readability=&quot;3&quot;&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_oecd.png&quot;/&gt;&lt;em/&gt;
&lt;p&gt;&lt;em&gt;Frickin’ Germany, always making everyone else look bad.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;The next few paragraphs are based on data from a Scott Winship’s &lt;a href=&quot;https://www.mercatus.org/system/files/winship_malelaborparticipation_mr_v2.pdf&quot;&gt;Mercatus Center report&lt;/a&gt; on this. Their conclusion is contrarian, and they’re a libertarian-ish think tank which means they have some risk of bias. I’m citing them anyway because they have really fascinating data presented much better than anyone else, but keep this in mind.&lt;/p&gt;
&lt;p&gt;Winship’s first point is that the decline in PAMLFPR doesn’t seem to be caused by people who can’t find jobs:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_discourage.png&quot;/&gt;&lt;p&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_lookingfor0.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_lookingfor.png&quot;/&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;The first graph shows officially designated “discouraged workers”, people who were previously unemployed and looking for jobs but eventually gave up. The definition changed around 1990, but they never seem to be more than about 10% of prime age male labor force nonparticipators (from here: PAMLFNPers).&lt;/p&gt;
&lt;p&gt;The second graph shows what percent of PAMLFNPers claimed to be looking for jobs, based on a survey that was only given until 1993. It shows only about 20% of them were interested.&lt;/p&gt;
&lt;p&gt;The third graph is using slightly differently-parsed data to try to continue the trends after 1993. It’s sort of unfair, because it separates out “disability” into a separate category and assumes none of them want jobs. But about 30% of people on disability do say they want a job. It’s unclear exactly what they mean (are they just saying the wish they weren’t disabled? or that they might be willing to come off disability if a properly non-physically strenuous job became available?) but even if we count them, the percent of PAMLFNPers who want a job never goes above 30%.&lt;/p&gt;
&lt;p&gt;If not discouraged workers who can’t find jobs, what’s going on? Here’s Winship’s answer:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_winship.png&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Prime age non-working men are mostly on disability. But some are also in school (despite having to be above 25 to be included as “prime age”), retired (despite having to be below 55), or homemakers (remember, these are all men). Again, only about 1% (out of the total of 12%) say they can’t find work.&lt;/p&gt;
&lt;p&gt;If we were very optimistic, we could paint a rosy picture of what’s going on here. The increase in disability represents improving social safety net that allows disabled people to be better supported. It’s great that more people are financially secure enough to retire early. It’s great that more people are pursuing a graduate education that has them in school after age 25. It’s great that gender stereotypes are decreasing and more men feel comfortable as homemakers, perhaps supported by a working spouse.&lt;/p&gt;
&lt;p&gt;This is basically Winship’s account, although he is concerned that increasing disability benefits are discouraging work. He cites a bunch of papers to that effect which you can find in his footnote 42, and which aren’t super relevant to the question at hand.&lt;/p&gt;
&lt;p&gt;But what would the pessimistic interpretation look like?&lt;/p&gt;
&lt;center readability=&quot;3.3666666666667&quot;&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_uneducated.png&quot;/&gt;&lt;p&gt;&lt;em&gt;The next few graphs and some of the analysis below comes from &lt;a href=&quot;https://www.brookings.edu/wp-content/uploads/2017/05/ccf_20170517_declining_labor_force_participation_sawhill1.pdf&quot;&gt;Brookings Institute&lt;/a&gt;, another potentially biased think tank&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;In 1970, educated and uneducated men were about equally likely to be PAMLFNPers. The rate for educated men didn’t change. The rate for uneducated men shot up.&lt;/p&gt;
&lt;p&gt;And I won’t show you graphs, but there are similar trends for poor people, ex-convicts, blue collar workers, and minorities. These are not the sort of people who are likely to be able to retire early, pursue graduate school, or defy gender norms. But they &lt;em&gt;are&lt;/em&gt; the sort of people who might have trouble finding work. This is pretty suspicious. Also:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_bad.png&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Labor force nonparticipation is increasing primarily in poor and lower-middle-class people without a lot of good options, &lt;em&gt;just as&lt;/em&gt; their remaining options get much worse. Surely this suggests something worse is going on.&lt;/p&gt;
&lt;p&gt;The easiest place for this to happen is disability. It doesn’t require disability fraud, per se. It just requires some people &lt;em&gt;on the threshold&lt;/em&gt; of disability who are motivated by marginal cost/benefit analysis.&lt;/p&gt;
&lt;p&gt;Suppose that you have bad back pain. You work in the auto factory, like your father and his father before him. Your back pain flares up pretty often, but you know your foreman pretty well and he gives you an easy shift until it passes, and the union makes sure that nobody gives you any grief about it. You like your company and your coworkers and you want to make them happy. Also, if you didn’t work, you would starve to death.&lt;/p&gt;
&lt;p&gt;Now suppose that your factory closes, and the only job available is being a home health aide. This involves a lot of bending over and puts you in constant almost-unbearable pain. And it’s run by a giant faceless corporation which always seems to be trying to screw you over. Also, you live in West Virginia and are very manly, and changing diapers in nursing homes seems like undignified women’s work. Also, the pay is half what you’re used to. Also, the government just passed a new law making disability benefits much more generous and easier to get. So…&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_health.png&quot;/&gt;&lt;/center&gt;
&lt;p&gt;The graph shows that PAMLFNPers generally have terrible health. So real disabilities must have something to do with this. But Winship presents a lot of evidence that illnesses and chronic pain haven’t gotten worse over time, so it can’t fully explain the rise. The “gradually worsening job pushes person with serious disability over the edge” hypothesis has a lot going for it. Also: although 96% of people on disability say they’re out of work because of a health problem, 46% also say they’re out of work because there are no good jobs available (&lt;a href=&quot;https://www.kff.org/other/poll-finding/kaiser-family-foundationnew-york-timescbs-news-non-employed-poll/&quot;&gt;source&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The problem with this is: disability really doesn’t represent that much of the rise in PAMLFNP since 1960. Looking at our graph above, it goes from 2% of workers in ’68 to maybe 6% of workers now. And surely some large fraction of those people are actually disabled in ways that have nothing to do with their social circumstances. We’re talking like 2 percentage points tops.&lt;/p&gt;
&lt;p&gt;Okay, fine. Let’s say you’re our West Virginia factory worker again, only now you can’t get on disability. Now what?&lt;/p&gt;
&lt;p&gt;Maybe you choose to retire. And maybe you’re 53 years old and this isn’t the &lt;em&gt;most&lt;/em&gt; reasonable financial plan, but you own your house, you get food stamps, and you can do odd jobs around your friends’ farm to make some extra money.&lt;/p&gt;
&lt;p&gt;Or maybe you choose to go to that ridiculous Coal Miner To Coder school &lt;a href=&quot;https://www.npr.org/sections/alltechconsidered/2016/05/06/477033781/from-coal-to-code-a-new-path-for-laid-off-miners-in-kentucky&quot;&gt;that got profiled on NPR&lt;/a&gt; a little while ago, in the hopes that you can have a pathway to a new career, or just so that you have something to do.&lt;/p&gt;
&lt;p&gt;Or maybe you choose to stay at home with your kids, while your wife does the home health aide thing, and if anybody asks, you’re a “stay-at-home dad”.&lt;/p&gt;
&lt;p&gt;And then when economists look at the statistics, they say “Oh, look, there’s no problem here, it’s just a combination of retirees, students, homemakers, and the disabled.”&lt;/p&gt;
&lt;p&gt;I realize this is a stretch, especially since you would expect such a person, unless they were very self-deluded, to identify as “looking for work”. But the only sense I can make of all this is a model where, the more miserable your work is, and the more decent options you have available to you, the more likely you are to leave work.&lt;/p&gt;
&lt;p&gt;If you’re very conservative, you might say – aha, I knew that people were just unemployed because they’re lazy!&lt;/p&gt;
&lt;p&gt;But if you’re more progressive, you might ask – exactly how miserable do you have to be before you stop working? Should people with broken legs literally drag themselves on all fours to their workplace, just because it’s not physically impossible? I know that “I refuse to do this job because it’s too undignified for me, let me go on the public dole” doesn’t really win you a lot of social credit. But maybe conservatives could find it in their heart to be sympathetic to our hypothetical West Virginia factory worker with a bad back, who’s proud of having worked his whole life, but who feels like having to pivot at age 53 to changing diapers in nursing homes for minimum wage isn’t his cup of tea?&lt;/p&gt;
&lt;p&gt;(remember, the other thing that’s way up among this same demographic is suicide – and probably for the same reason)&lt;/p&gt;
&lt;p&gt;But even if we assume half the increase in disability plus a quarter of the increase in the other things is due to employment issues, employment issues still really only explain about 3 pp of the 10% increase since the 1960s. I can’t think of any reasonable assumptions where they explain more than half.&lt;/p&gt;
&lt;p&gt;I like Derek Thompson’s &lt;a href=&quot;https://www.theatlantic.com/business/archive/2016/06/the-missing-men/488858/&quot;&gt;discussion of this question&lt;/a&gt;, because he’s the only writer who seems to share my sense of puzzlement. There are all these men who seem miserable and who have vanished from the labor force. We all know it’s true. But the statistics don’t really seem to reflect or shed light on it. Somehow we, as a country, have managed to just &lt;em&gt;lose&lt;/em&gt; several million working-age men. Maybe Donald Trump is going to look behind the White House couch one day, and find a large portion of the male population of the Southeast under the cushion. I don’t know.&lt;/p&gt;
&lt;p&gt;In the next part, we’ll talk about whether automation explains the decline in labor force participation. But let’s keep in mind that the argument that there is a significant meaningful decline in labor force participation to explain, aside from people going to school and having more access to disability benefits and things like that – is not on super-solid ground.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;II.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently, US manufacturing jobs collapsed. US manufacturing &lt;a href=&quot;https://projects.cberdata.org/reports/MfgReality.pdf&quot;&gt;is still doing just fine&lt;/a&gt; in terms of number of widgets produced. It just no longer employs that many people.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_mfgjobs.jpg&quot;/&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://tenthdems.org/2016/08/feel-economy-left-behind-vote-democratic/&quot;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;The report linked above is from Ball State University, and argues that, while manufacturing has thrived, automation has reduced the need for workers so much that lots of them have been laid off:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Had we kept 2000-levels of productivity and applied them to 2010-levels of production, we would have required 20.9 million manufacturing workers. Instead, we employed only 12.1 million.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The report gets summarized in a few places as “13% of job loss is due to trade, 87% is due to increasing productivity/automation”, which seems like a fair summary of some of its claims. Its numbers are not too far off the conclusions of economists &lt;a href=&quot;https://www.vox.com/new-money/2017/3/29/15035498/autor-trump-china-trade-election&quot;&gt;Autor, Dorn, and Hanson&lt;/a&gt;, who published a series of &lt;a href=&quot;https://seii.mit.edu/wp-content/uploads/2013/11/Autor-Dorn-Hanson-The-China-Syndrome-Local-Labor-Market-Effects-of-Import-Competition-in-the-United-States-American-Economic-Revi.pdf&quot;&gt;papers&lt;/a&gt; finding that that “import competition explains one-quarter of the contemporaneous aggregate decline in US manufacturing employment” (and also connects it to the rise in disability benefits and other government transfer payments).&lt;/p&gt;
&lt;p&gt;But this raises more questions than it answers. Why didn’t previous eras of improving automation result in job loss? In fact, hasn’t productivity growth been especially bad lately?&lt;/p&gt;
&lt;p&gt;Yes. See for example this &lt;a href=&quot;https://www.brookings.edu/wp-content/uploads/2017/12/the-slowdown-in-manufacturing-productivity-growth.pdf&quot;&gt;this Brookings paper&lt;/a&gt;, which notes that:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;The past decade has seen slowdowns in measured labor productivity growth across a broad swath of developed economies. Aggregate labor productivity growth in the U.S. averaged 1.3% per year from 2005 to 2015, less than half of the 2.8% average annual growth rate it sustained over 1995 – 2004. Similarly sized decelerations were observed between these two periods in 28 of 29 other countries for which the OECD has compiled productivity growth data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It continues:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;The drops in productivity growth have struck some as paradoxical, given the seemingly brisk pace of technological progress and plethora of new products that have been introduced and diffused throughout the world during the slowdown period. Indeed, many have suggested that the slowdown is substantially illusory, a figment of the inability of current economic statistics to capture the true rate of technological advance in standard productivity metrics.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the productivity slowdown were illusory, that would help explain all those job losses. Sounds promising, but what do all the economists in the world think?&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_mismeasure.png&quot;/&gt;&lt;p&gt;&lt;em&gt;Darn.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;Justin Fox has some more in-depth analysis &lt;a href=&quot;https://www.bloomberg.com/view/articles/2016-10-26/manufacturing-s-productivity-myth&quot;&gt;here&lt;/a&gt; and also concludes productivity is not that great.&lt;/p&gt;
&lt;p&gt;One possibility is excellent productivity growth from about 1985 to 2005, followed by poor productivity growth thereafter. All the discussion of poor productivity growth comes from the post-2005 period, but the job losses are from the 1985-2005 period. And the reason jobs are still declining is that it took factories a while to shut down all the obsolete plants and fire the obsolete workers.&lt;/p&gt;
&lt;p&gt;It looks like maybe this is true, though I have low confidence in it. If so, that would explain half the puzzle. The other half is why there have been job losses now instead of some other time in the hundred-or-so years that manufacturing productivity was increasing.&lt;/p&gt;
&lt;p&gt;Are we allowed to say “that’s just how things work”? Like, agricultural productivity increased for millennia, but didn’t lead people to abandon agriculture &lt;em&gt;en masse&lt;/em&gt; until the Industrial Revolution – when it did exactly that. In 1790, 90% of Americans were farmers, even though agricultural productivity had been improving for ages. Today, 2.6% of Americans are. Maybe manufacturing just had the same kind of moment. Advances in technology can put farmers out of work (but shift them to manufacturing) – surely it can put manufacturers out of work (and shift them to ???).&lt;/p&gt;
&lt;p&gt;So, if 70% – 80% of manufacturing job losses were due to automation, might automation be responsible for the decline in PAMLFPR, thus revealing the elusive technological unemployment?&lt;/p&gt;
&lt;p&gt;Eh. Let’s look at those graphs again. First, manufacturing jobs over time. Second, PAMLFPR:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_mfgjobs.jpg&quot;/&gt;&lt;p&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_pamlfpr.png&quot;/&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;PAMLFPR has been going down consistently since 1960 or so (has it accelerated recently? probably just the recession). And the number of US manufacturing jobs only started to really go down around 2000.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_disability.gif&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Nor is there any sign that disability claims started to go up around 2000. There is a general trend of increasing disability since 1985, but &lt;a href=&quot;http://www.nber.org/papers/w12436.pdf?new_window=1&quot;&gt;a paper by Autor and Duggan&lt;/a&gt; suggests this is almost entirely due to a reform of the disability system around 1984 which made it easier to get benefits.&lt;/p&gt;
&lt;p&gt;Even though everybody seems to agree that the decline of manufacturing = increasing disability claims = decline in PAMLFNP, it’s really hard to conclude this from the data. The two just totally fail to correlate.&lt;/p&gt;
&lt;p&gt;(it’s hard to find good numbers from before 1999, but &lt;a href=&quot;https://www.cdc.gov/mmwr/preview/mmwrhtml/mm6101a3.htm&quot;&gt;it looks like opioid deaths&lt;/a&gt; show something like the expected pattern – rocketing way up just after the fall of manufacturing jobs. That makes it especially suspicious that disability and PAMLFP don’t show the same pattern.&lt;/p&gt;
&lt;p&gt;So here’s the trilemma:&lt;/p&gt;
&lt;p&gt;1. Either technological unemployment has nothing to do with declining PAMLFPR&lt;/p&gt;
&lt;p&gt;2. Or the collapse of US manufacturing isn’t an unusually good example of technological unemployment, and actually we’ve been getting technological unemployment at a continuous rate since 1960.&lt;/p&gt;
&lt;p&gt;3. Or there was some mysterious factor causing PAMLFPR rates to rise from 1960 to 2000, that mysteriously stopped, and then a new factor – technological unemployment – which was exactly the same magnitude as the previous factor and looks exactly the same to the naked eye – instantly took over.&lt;/p&gt;
&lt;p&gt;Let’s ask all the economists in the world again:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_igm2.png&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Economists very strongly believe automation has not historically reduced unemployment. But they do believe automation is making wages stagnate right now. I don’t really understand what’s going on here. Are they saying that automation can depress wages, but not reduce employment? Surely (given the existence of a minimum wage) that doesn’t make sense. Or are they saying that automation never caused any problems before, but it is causing problems now?&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.igmchicago.org/surveys/robots&quot;&gt;site&lt;/a&gt; offers some of the economists the chance to explain what they meant, and a lot of them seem to be saying that automation has &lt;em&gt;temporarily&lt;/em&gt; caused problems in the past, but they always resolved with time as new industries open up. Maybe we’re just in a temporary bad period? Likewise, one economist who agrees that automation caused wage stagnation says that “it may have a short-run impact but there is no reason to believe that it is permanent.”&lt;/p&gt;
&lt;p&gt;All of this is a mess. But the impression I get from this mess is that there is little sign of technological unemployment happening today. I get this from a few sources.&lt;/p&gt;
&lt;p&gt;First, the official unemployment rate looks great, so if we were going to make this argument we would have to do it off of PAMLFPR.&lt;/p&gt;
&lt;p&gt;Second, Winship’s optimistic take on PAMLFPR is hard to easily refute. PAMLFNPers pretty clearly say they’re not looking for jobs, and they’re just perfectly innocuous students, retirees, etc. We have trouble believing them, especially based on their demographics. But it’s very hard to look at the increase and see a place where unemployment issues could have slipped in.&lt;/p&gt;
&lt;p&gt;Third, it is very hard to find a temporal correlation between the apparent effects of automation on manufacturing, and the rise in PAMLFPR. PAMLFPR has been rising very steadily since the 1960s and doesn’t seem to have noticed the manufacturing collapse. Disability payments have been rising steadily since the disability system was reformed in 1984, and also don’t seem to have noticed the manufacturing collapse.&lt;/p&gt;
&lt;p&gt;Fourth, most economists appear to remain doubtful of the possibility of long-term technological unemployment.&lt;/p&gt;
&lt;p&gt;I realize this goes against common sense. Maybe I’m missing something and totally wrong here. But if I am forced to interpret the data as I see it, I just don’t see the signs of technological unemployment. It’s just not happening.&lt;/p&gt;
&lt;p&gt;And in my defense, this also seems to be the opinion of David Autor, the main economic expert on this subject. In an interview with &lt;em&gt;The Economist&lt;/em&gt;, he said that there was “‘zero evidence’ that AI is having a new and significantly different impact on employment”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;III.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This doesn’t mean everything is great. As the IGM panel shows, even if robots aren’t putting people out of work, they may be causing wages to stagnate. The people getting kicked out of manufacturing jobs may have other jobs available to them (and so not end up affecting the PAMLFPR numbers), but those jobs may not be as good or pay as well. This isn’t “technological unemployment”. But it might be technological underemployment.&lt;/p&gt;
&lt;p&gt;Most people expect that technological unemployment will hit the least skilled first, but that doesn’t seem to be entirely true. This chart and some of the following analysis are going to be from the Heritage Association – another potentially biased think-tank, but hopefully without much reason to obfuscate these issues.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_occupations.jpg&quot;/&gt;&lt;/center&gt;
&lt;p&gt;The best-paying jobs – managers, professionals, and the like – are doing fine. The lowest-paying jobs, like personal care and food, are also doing fine. It’s the middle-paying jobs that are in trouble. Some of these are manufacturing, but there are also office and administrative positions in the same categories.&lt;/p&gt;
&lt;p&gt;This is potentially consistent with a story where the jobs that have been easiest to automate are middle-class-ish. Some jobs require extremely basic human talents that machines can’t yet match – like a delivery person’s ability to climb stairs. Others require extremely arcane human talents likewise beyond machine abilities – like a scientist discovering new theories of physics. The stuff in between – proofreading, translating, records-keeping, metalworking, truck driving, welding – is more in danger. As these get automated away, workers – in accord with the theory – migrate to the unautomatable jobs. Since they might not have the skills or training to do the unautomatable upper class jobs, they end up in the unautomatable lower-class ones. There’s nothing in economic orthodoxy that says this can’t happen.&lt;/p&gt;
&lt;p&gt;David Autor and his giant block of citations agree:&lt;/p&gt;
&lt;blockquote readability=&quot;26&quot;&gt;
&lt;p&gt;Because jobs that are intensive in either abstract or manual tasks are generally found at opposite ends of the occupational skill spectrum—in professional, managerial, and technical occupations on the one hand, and in service and laborer occupations on the other—this reasoning implies that computerization of “routine” job tasks may lead to the simultaneous growth of high-education, high-wage jobs at one end and low-education, low-wage jobs at the other end, both at the expense of middle-wage, middle education jobs—a phenomenon that Goos and Manning (2003) called “job polarization.” A large body of US and international evidence confirms the presence of employment polarization at the level of industries, localities, and national labor markets (Autor, Katz, and Kearney 2006, 2008; Goos and Manning 2007; Autor and Dorn 2013; Michaels, Natraj, and Van Reenen 2014; Goos, Manning, and Salomons 2014; Graetz and Michaels 2015; Autor, Dorn, and&lt;br/&gt;Hanson 2015)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The fall of middle-skill-level jobs has led to a corresponding fall in middle-income jobs:&lt;/p&gt;
&lt;center readability=&quot;5&quot;&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_polarization.png&quot;/&gt;&lt;p&gt;&lt;em&gt;Note that, contrary to an extremely pessimistic picture, this would suggest that most people who leave middle-paying jobs go to higher-paying jobs&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;And with a corresponding decline in the fortunes of the middle class:&lt;/p&gt;
&lt;center readability=&quot;2&quot;&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_quintiles.jpg&quot;/&gt;&lt;p&gt;&lt;em&gt;Note that this does not really back up the optimistic picture from above.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;Why is this happening now when technological progress has been going on forever? This gets into the whole decline-of-the-middle-class argument, a giant political morass featuring de-unionization, regulation, automation, globalization, the 1%, and pretty much everything else. Is there also a role for today’s robots just plain being &lt;em&gt;better than&lt;/em&gt; yesterday’s Rolodexes and whatever else the forefront of technology was? Or our education system being less able to cope with them? I’m not sure.&lt;/p&gt;
&lt;p&gt;As far as I know, there is no economic theory stating that the number (or percent) of high-skilled jobs must always stay the same. I’m also not sure how to include fixed cognitive skills (eg some people are smarter than others) in this question. An optimist might argue that things will get better as today’s obsoletely-trained workforce retires and tomorrow’s trained-for-the-appropriate-jobs workforce graduates. But maybe this is better viewed as a race between two competing forces; generational churn producing students with the right set of skills, and technology making new skills obsolete. I don’t know why this should have increased recently, but it seems like – at least for the middle class – this is a race they are now losing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IV.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Predicting the future is naturally harder than observing the present, since we have data about the present and not the future. But the data about the present is contradictory and incomprehensible and just makes things more confusing, so we might as well try going with the future and seeing how we do there.&lt;/p&gt;
&lt;p&gt;We’ll start with those surveys of economists again, since they seem like the people most likely to know. Here’s a panel of top European economists on the future of technological unemployment:&lt;/p&gt;
&lt;center readability=&quot;7&quot;&gt;&lt;img src=&quot;https://slatestarcodex.com/blog_images/techun_igm3.png&quot;/&gt;&lt;p&gt;&lt;em&gt;In the same survey, 93% of economists with an opinion on the issue agreed that the economic benefits of robots will be so great that they could be used to compensate the workers who were negatively effected. But in a survey I conducted in my imagination, 100% of people who have not been living in a cave the past two hundred years agreed that this will never happen in real life.&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;So economists really have no idea about any of this. What are we paying them for, anyway?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.oxfordmartin.ox.ac.uk/downloads/academic/The_Future_of_Employment.pdf&quot;&gt;Frey and Osbourne analyze&lt;/a&gt; what jobs are most susceptible to automation. They claim that “47% of total US employment is at risk”. This sounds suspiciously precise and it’s unclear their numbers have any relationship to reality. They do find “evidence that wages and educational attainment exhibit a strong negative relationship with an occupation’s probability of computerisation”.&lt;/p&gt;
&lt;p&gt;Overall none of this seems to be making things much clearer.&lt;/p&gt;
&lt;p&gt;I’ve cited David Autor something like five times already. He is the recognized expert in this area – I blame nominative determinism – and has written widely. His own opinion is:&lt;/p&gt;
&lt;blockquote readability=&quot;35&quot;&gt;
&lt;p&gt;I expect that a significant stratum of middle-skill jobs combining specific vocational skills with foundational middle-skills levels of literacy, numeracy, adaptability, problem solving, and common sense will persist in coming decades. My conjecture is that many of the tasks currently bundled into these jobs cannot readily be unbundled—with machines performing the middle-skill tasks and workers performing only a low-skill residual—without a substantial drop in quality. This argument suggests that many of the middle-skill jobs that persist in the future will combine routine technical tasks with the set of nonroutine tasks in which workers hold comparative advantage: interpersonal interaction, flexibility, adaptability, and problem solving. In general, these same demands for interaction frequently privilege face-to-face interactions over remote performance, meaning that these same middle-skill occupations may have relatively low susceptibility to offshoring. Lawrence Katz memorably titles workers who virtuously combine technical and interpersonal tasks as “the new artisans” (see Friedman 2010), and Holzer (2015) documents that “new middle skill jobs” are in fact growing rapidly, even as traditional production and clerical occupations contract.&lt;/p&gt;
&lt;p&gt;This prediction has one obvious catch: the ability of the US education and job training system (both public and private) to produce the kinds of workers who will thrive in these middle-skill jobs of the future can be called into question. In this and other ways, the issue is not that middle-class workers are doomed by automation and technology, but instead that human capital investment must be at the heart of any long-term strategy for producing skills that are complemented by rather than substituted for by technological change. In 1900, the typical young, native-born American had only a common school education, about the equivalent of sixth to eighth grades. By the late 19th century, many Americans recognized that this level of schooling was inadequate: farm employment was declining, industry was rising, and their children would need additional skills to earn a living. The United States responded to this challenge over the first four decades of the 20th century by becoming the first nation in the world to deliver universal high school education to its citizens (Goldin and Katz 2008). Tellingly, the high school movement was led by the farm states. Societal adjustments to earlier waves of technological advancement were neither rapid, automatic, nor cheap. But they did pay off handsomely.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do we really have evidence that compulsory schooling was a result of increasing automation? If so, could we tell a story where the gradually increasing length of schooling – from minimal, to primary school, to high school, to “you better get a college degree or you’ll regret it later”, to increasing pressure to go to graduate school – is a reaction to automation and the threat of technological unemployment? Could this be the reason why automation finally seems to be causing problems – a financial and cultural inability to extend schooling any further than it’s already gone?&lt;/p&gt;
&lt;p&gt;Or – inspired by Bryan Caplan’s &lt;a href=&quot;https://www.amazon.com/Case-against-Education-System-Waste/dp/0691174652/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1519101286&amp;amp;sr=8-1&amp;amp;keywords=the+case+against+education&amp;amp;linkCode=ll1&amp;amp;tag=slatestarcode-20&amp;amp;linkId=1e631615845f2e5b21193b68fa8d7bef&quot;&gt;The Case Against Education&lt;/a&gt; – could we tell the opposite story? One where increasing &lt;a href=&quot;http://slatestarcodex.com/2015/06/06/against-tulip-subsidies/&quot;&gt;credentialism&lt;/a&gt; makes it harder for people whose jobs have been automated to switch careers the way they did before? Higher-paying jobs no longer just require skills, they require a college degree in a relevant field – which is very hard for a mature worker to get. Being an office manager and being a nurse are both middle-income jobs – but in the past, an office worker would have needed about six months of inexpensive training plus a lot of on-the-job apprenticeship to become a nurse, whereas now they would need a four-year Bachelors of Science in Nursing from a university &lt;a href=&quot;http://slatestarcodex.com/2017/02/09/considerations-on-cost-disease/&quot;&gt;whose price tag has dectupled for no reason&lt;/a&gt; over the last half-century. A now-unemployed office manager might have been able to afford the first even if middle-class; the second might be well beyond her reach. Unable to shift into another middle-class job, she is forced to take a lower-class job as a fast food worker or something.&lt;/p&gt;
&lt;p&gt;I am not entirely sure how differences in cognitive ability fit in here. My guess is to a first approximation they don’t – if standard economic theory is correct, it should be possible to create middle-paying jobs that use the full potential of people with any amount of cognitive ability, taking advantage of various human cognitive skills that are difficult to automate. Although some naive takes like “everyone should just become a programmer” fail to understand this, I don’t think the entire argument is based on misunderstanding of this point, or that it forms a particularly strong counterargument.&lt;/p&gt;
&lt;p&gt;Anyway, if Autor’s prediction is “we will be able to weather this danger as long as our education system is able to rise to meet the challenge”, I’m just going to round this off to “we’re super doomed”. But I think his methodology – of noticing that we always met the challenge before, and trying to figure out what might be different this time – is a promising one.&lt;/p&gt;
&lt;p&gt;Finally: we’ve been talking about economists a lot here, but what about the roboticists? Aren’t they relevant too? &lt;a href=&quot;https://arxiv.org/pdf/1705.08807.pdf&quot;&gt;Grace et al survey&lt;/a&gt; top AI researchers on when AI might be able to replace humans in various things; these researchers don’t necessarily know anything about economics, but they at least know something about progress in robotics. On average, they believe AI will reach human performance at truck driving, retail selling, translation, transcription, and bipedal running all before 2030. Whether those robots will be affordable, widely adopted, or able to deal with the long tail of real-world situations like blackouts or vandals or bad weather – is a different story. The point is, roboticists are pretty sure they’ll have their contribution to the economic takeover ready pretty soon.&lt;/p&gt;
&lt;p&gt;(they do say robots won’t be writing bestselling novels until 2050, so JK Rowling’s job is safe for now)&lt;/p&gt;
&lt;p&gt;They also say that robots will be able to do &lt;em&gt;all&lt;/em&gt; human tasks, including novel-writing, science, and further AI research – sometime between 2050 and 2150. At that point, obviously, all bets are off, and we have a &lt;em&gt;lot&lt;/em&gt; more than unemployment to worry about.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;V.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here are some tentative conclusions:&lt;/p&gt;
&lt;p&gt;1. Technological unemployment is not happening right now, at least not at a rate above previous eras. The official statistics are confusing and sometimes seem to deny common sense, but they show no signs of increases in this phenomenon. (70% confidence)&lt;/p&gt;
&lt;p&gt;2. On the other hand, there are signs of technological underemployment – robots taking middle-skill jobs and then pushing people into other jobs. Although some people will be “pushed” into higher-skill jobs, many will be pushed into lower-skill jobs. This seems to be what happened to the manufacturing industry recently. (70% confidence)&lt;/p&gt;
&lt;p&gt;3. This sort of thing has been happening for centuries and in theory everyone should eventually adjust, but there are some signs that they aren’t. This may have as much to do with changes to the educational, political, and economic system as with the nature of robots per se. (60% confidence)&lt;/p&gt;
&lt;p&gt;4. Economists are genuinely divided on how this is going to end up, and whether this will just be a temporary blip while people develop new skills, or the new normal. (~100% confidence)&lt;/p&gt;
&lt;p&gt;5. Technology seems poised to disrupt lots of new industries very soon, and could replace humans entirely sometime within the next hundred years. (???)&lt;/p&gt;
&lt;p&gt;This is a very depressing conclusion. If technology didn’t cause problems, that would be great. If technology made lots of people unemployed, that would be hard to miss, and the government might eventually be willing to subsidize something like a universal basic income. But we won’t get that. We’ll just get people being pushed into worse and worse jobs, in a way that does not inspire widespread sympathy or collective action. The prospect of educational, social, or political intervention remains murky.&lt;/p&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 20 Feb 2018 06:51:57 +0000</pubDate>
<dc:creator>gbear605</dc:creator>
<og:type>article</og:type>
<og:title>Technological Unemployment: Much More Than You Wanted To Know</og:title>
<og:url>https://slatestarcodex.com/2018/02/19/technological-unemployment-much-more-than-you-wanted-to-know/</og:url>
<og:description>[I am not an economist or an expert on this topic. This is my attempt to figure out what economists and experts think so I can understand the issue, and I’m writing it down to speed your goin…</og:description>
<og:image>http://slatestarcodex.com/wp-content/themes/two_column_pujugama/images/codex_spotlight.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://slatestarcodex.com/2018/02/19/technological-unemployment-much-more-than-you-wanted-to-know/</dc:identifier>
</item>
<item>
<title>Depixelizing Pixel Art (2011)</title>
<link>http://johanneskopf.de/publications/pixelart/index.html</link>
<guid isPermaLink="true" >http://johanneskopf.de/publications/pixelart/index.html</guid>
<description>&lt;td valign=&quot;top&quot; readability=&quot;24&quot;&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;p&gt;We describe a novel algorithm for extracting a resolution-independent vector representation from &lt;em&gt;pixel art&lt;/em&gt; images, which enables magnifying the results by an arbitrary amount without image degradation. Our algorithm resolves pixel-scale features in the input and converts them into regions with smoothly varying shading that are crisply separated by piecewise-smooth contour curves. In the original image, pixels are represented on a square pixel lattice, where diagonal neighbors are only connected through a single point. This causes thin features to become visually disconnected under magnification by conventional means, and it causes connectedness and separation of diagonal neighbors to be ambiguous. The key to our algorithm is in resolving these ambiguities. This enables us to reshape the pixel cells so that neighboring pixels belonging to the same feature are connected through edges, thereby preserving the feature connectivity under magnification. We reduce pixel aliasing artifacts and improve smoothness by fitting spline curves to contours in the image and optimizing their control points.
&lt;/p&gt;&lt;pre&gt;
@article{Kopf2011,
    author  = {Johannes Kopf and Dani Lischinski},
    title   = {Depixelizing Pixel Art},
    journal = {ACM Transactions on Graphics (Proceedings of SIGGRAPH 2011)},
    year    = {2011},
    volume  = {30},
    number  = {4},
    pages   = {99:1 -- 99:8}
}
                
&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;   &lt;/td&gt;
&lt;td width=&quot;250&quot; align=&quot;right&quot; valign=&quot;top&quot;&gt;
&lt;/td&gt;
</description>
<pubDate>Tue, 20 Feb 2018 02:26:02 +0000</pubDate>
<dc:creator>doppp</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://johanneskopf.de/publications/pixelart/index.html</dc:identifier>
</item>
<item>
<title>Researchers Use CRISPR to Detect HPV and Zika</title>
<link>https://www.engadget.com/2018/02/15/crispr-detect-hpv-and-zika/</link>
<guid isPermaLink="true" >https://www.engadget.com/2018/02/15/crispr-detect-hpv-and-zika/</guid>
<description>&lt;p&gt;The &lt;a href=&quot;http://science.sciencemag.org/content/early/2018/02/14/science.aar6245&quot;&gt;first study&lt;/a&gt; comes from the lab of CRISPR pioneer Jennifer Doudna. Her team discovered that a CRISPR system different from the CRISPR-Cas9 one we're used to hearing about can not only snip away specific bits of double-stranded DNA, but can then also cut single-stranded DNA that's near it. After they uncovered this ability of CRISPR-Cas12a, they used it to detect two common types of HPV. Once their CRISPR-Cas12a system detected HPV DNA in infected cells, it cleaved a another piece of DNA that then released a fluorescent signal, providing a visual sign of the presence of HPV. The researchers dubbed the system DETECTR and &lt;em&gt;&lt;a href=&quot;https://www.theverge.com/2018/2/15/17012866/crispr-detectr-sherlock-zika-dengue-hpv-diagnostic-tools&quot;&gt;The Verge&lt;/a&gt;&lt;/em&gt; reports that it takes around an hour to work and costs less than a dollar.&lt;/p&gt;
&lt;p&gt;The lab of another CRISPR pioneer, Feng Zhang, has now improved on a previous system it &lt;a href=&quot;http://science.sciencemag.org/content/356/6336/438&quot;&gt;developed last year&lt;/a&gt;. SHERLOCK, as it's called, can detect specific bits of DNA and RNA to determine whether viruses like Zika or dengue are present in a blood sample, identify mutations in tumor DNA and spot the presence of harmful bacteria. In their &lt;a href=&quot;http://science.sciencemag.org/content/early/2018/02/14/science.aaq0179&quot;&gt;latest study&lt;/a&gt;, the research team describes SHERLOCK version 2.0, which is not only over three times as sensitive as the first version, but can also detect both Zika and dengue in the same sample. Their system uses several CRISPR enzymes, including Cas13 and Csm6, and can be loaded onto a paper strip, making it incredibly easy to use. You can see examples of the strips in the GIF below. Jonathan Gootenberg, one of the authors of the study, told &lt;em&gt;&lt;a href=&quot;https://www.theverge.com/2018/2/15/17012866/crispr-detectr-sherlock-zika-dengue-hpv-diagnostic-tools&quot;&gt;The Verge&lt;/a&gt;&lt;/em&gt;, &quot;The fact that we can put all these different enzymes into a single tube and have them not only play nice with each other, but also tell us information we couldn't get otherwise -- that is really spectacular and it speaks to a lot of the power of biochemistry.&quot;&lt;/p&gt;
&lt;p&gt;&lt;img data-credit=&quot;Zheng Lab, Broad Institute of MIT and Harvard&quot; data-mep=&quot;2457370&quot; src=&quot;https://s.aolcdn.com/hss/storage/midas/b79f9114c22387c1474c136a8be37d2f/206131388/gootenberg3.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Lastly, Harvard University's David Liu published &lt;a href=&quot;http://science.sciencemag.org/content/early/2018/02/14/science.aap8992&quot;&gt;a study&lt;/a&gt; showing that CRISPR can be used to track certain ongoings in a cell. Seeing what a cell has been exposed to in the past has been a rather hard thing to do, but CRISPR systems provide a way for researchers to do just that. Liu's team used CRISPR in two different ways to record when a cell was exposed to certain chemicals. In the first, CRISPR was used to snip bits of DNA called plasmids if it came in contact with a particular chemical, such as an antibiotic or a nutrient. By comparing the ratio of the plasmid types that were destroyed by CRISPR to other, similar plasmids that were left alone, the researchers were able to determine just how often the cells were exposed to those chemicals. Another version of the system changed individual letters, or bases, of DNA rather than snipping plasmids and the team was able to determine when cells were exposed to antibiotics, nutrients, viruses and light by examining those changes in the DNA bases.&lt;/p&gt;
&lt;p&gt;While all three of these systems need further development before they can be used outside of the lab, they show that &lt;a href=&quot;https://www.engadget.com/2018/01/07/crispr-gene-editing-methods-might-not-work-for-most-humans/&quot;&gt;CRISPR&lt;/a&gt; has &lt;a href=&quot;https://www.engadget.com/2017/08/10/pig-organs-viable-transplant-crispr/&quot;&gt;quite a lot of uses&lt;/a&gt;, beyond just treating disease. The technology is incredibly versatile and we're sure to see even more applications going forward.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;t-meta c-gray-4&quot;&gt;Image: Zhang Lab, Broad Institute of MIT and Harvard&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 19 Feb 2018 19:59:38 +0000</pubDate>
<dc:creator>rbanffy</dc:creator>
<og:type>article</og:type>
<og:url>https://www.engadget.com/2018/02/15/crispr-detect-hpv-and-zika/</og:url>
<og:title>Researchers use CRISPR to detect HPV and Zika</og:title>
<og:description>Three new studies show that CRISPR has a wider range of applications than we even thought.</og:description>
<og:image>https://o.aolcdn.com/images/dims?thumbnail=1200%2C630&amp;quality=80&amp;image_uri=https%3A%2F%2Fs.aolcdn.com%2Fhss%2Fstorage%2Fmidas%2Fa2bc8aacf487999ff6357eb256f4bdc7%2F206131407%2Fgootenberg1HR.jpg&amp;client=cbc79c14efcebee57402&amp;signature=b379b28c2543c422f528064d5ea7597cb4a3887a</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.engadget.com/2018/02/15/crispr-detect-hpv-and-zika/</dc:identifier>
</item>
<item>
<title>Peace and quiet is all about the noise in your head</title>
<link>http://nautil.us/issue/38/noise/this-is-your-brain-on-silence-rp</link>
<guid isPermaLink="true" >http://nautil.us/issue/38/noise/this-is-your-brain-on-silence-rp</guid>
<description>&lt;p&gt;&lt;span class=&quot;dropcap&quot;&gt;O&lt;/span&gt;ne icy night in March 2010, 100 marketing experts piled into the Sea Horse Restaurant in Helsinki, with the modest goal of making a remote and medium-sized country a world-famous tourist destination. The problem was that Finland was known as a rather quiet country, and since 2008, the Country Brand Delegation had been looking for a national brand that would make some noise.&lt;/p&gt;
&lt;p&gt;Over drinks at the Sea Horse, the experts puzzled over the various strengths of their nation. Here was a country with exceptional teachers, an abundance of wild berries and mushrooms, and a vibrant cultural capital the size of Nashville, Tennessee. These things fell a bit short of a compelling national identity. Someone jokingly suggested that nudity could be named a national theme—it would emphasize the honesty of Finns. Someone else, less jokingly, proposed that perhaps quiet wasn’t such a bad thing. That got them thinking.&lt;/p&gt;
&lt;p&gt;A few months later, the delegation issued a slick “Country Brand Report.” It highlighted a host of marketable themes, including Finland’s renowned educational system and school of functional design. One key theme was brand new: silence. As the report explained, modern society often seems intolerably loud and busy. “Silence is a resource,” it said. It could be marketed just like clean water or wild mushrooms. “In the future, people will be prepared to pay for the experience of silence.”&lt;/p&gt;
&lt;p&gt;People already do. In a loud world, silence sells. Noise-canceling headphones retail for hundreds of dollars; the cost of some weeklong silent meditation courses can run into the thousands. Finland saw that it was possible to quite literally make something out of nothing.&lt;/p&gt;
&lt;p&gt;In 2011, the Finnish Tourist Board released a series of photographs of lone figures in the wilderness, with the caption “Silence, Please.” An international “country branding” consultant, Simon Anholt, proposed the playful tagline “No talking, but action.” And a Finnish watch company, Rönkkö, launched its own new slogan: “Handmade in Finnish silence.”&lt;/p&gt;
&lt;div class=&quot;reco&quot;&gt;
&lt;article class=&quot;issue-article&quot;&gt;&lt;div&gt;&lt;a href=&quot;http://nautil.us/issue/10/Mergers%20&amp;amp;%20Acquisitions/sound-and-touch-collide&quot; class=&quot;obnd_lnk&quot; data-trval=&quot;sound-and-touch-collide&quot; data-trlbl=&quot;foc_rec&quot; data-tract=&quot;internal_art&quot;&gt;&lt;img src=&quot;http://static.nautil.us/2493_8a20a8621978632d76c43dfd28b67767.png&quot; alt=&quot;Sapolsky_TH-F1&quot; width=&quot;314&quot; height=&quot;177&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;span class=&quot;article-tag&quot;&gt;&lt;span class=&quot;article-tag&quot;&gt;&lt;span class=&quot;article-tag-focus&quot;&gt;&lt;a href=&quot;http://nautil.us/term/f/Neuroscience&quot;&gt;Also in Neuroscience&lt;/a&gt;&lt;/span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;h4 class=&quot;article-title&quot;&gt;&lt;a href=&quot;http://nautil.us/issue/10/Mergers%20&amp;amp;%20Acquisitions/sound-and-touch-collide&quot; class=&quot;obnd_lnk&quot; data-trval=&quot;sound-and-touch-collide&quot; data-trlbl=&quot;foc_rec&quot; data-tract=&quot;internal_art&quot;&gt;Sound and Touch Collide&lt;/a&gt;&lt;/h4&gt;
&lt;p class=&quot;article-author&quot;&gt;By Virginia Hughes&lt;/p&gt;
&lt;p&gt;Tony Ro’s research on the brain’s mixing of sound and touch began, appropriately enough, at a mixer. It was the spring of 2000 in Houston, Texas, where he had recently launched his first laboratory at Rice University. The mixer was...&lt;strong&gt;&lt;a href=&quot;http://nautil.us/issue/10/Mergers%20&amp;amp;%20Acquisitions/sound-and-touch-collide&quot; class=&quot;obnd_lnk&quot; data-trval=&quot;sound-and-touch-collide&quot; data-trlbl=&quot;foc_rec&quot; data-tract=&quot;internal_art&quot;&gt;READ MORE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/article&gt;&lt;/div&gt;
&lt;p&gt;“We decided, instead of saying that it’s really empty and really quiet and nobody is talking about anything here, let’s embrace it and make it a good thing,” explains Eva Kiviranta, who manages social media for VisitFinland.com.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&lt;p&gt;In a loud world, silence sells. Finland saw that it was possible to quite literally make something out of nothing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Silence is a peculiar starting point for a marketing campaign. After all, you can’t weigh, record, or export it. You can’t eat it, collect it, or give it away. The Finland campaign raises the question of just what the tangible effects of silence really are. Science has begun to pipe up on the subject. In recent years researchers have highlighted the peculiar power of silence to calm our bodies, turn up the volume on our inner thoughts, and attune our connection to the world. Their findings begin where we might expect: with noise.&lt;/p&gt;
&lt;p&gt;The word “noise” comes from a Latin root meaning either queasiness or pain. According to the historian Hillel Schwartz, there’s even a Mesopotamian legend in which the gods grow so angry at the clamor of earthly humans that they go on a killing spree. (City-dwellers with loud neighbors may empathize, though hopefully not too closely.)&lt;/p&gt;
&lt;p&gt;Dislike of noise has produced some of history’s most eager advocates of silence, as Schwartz explains in his book &lt;em&gt;Making Noise: From Babel to the Big Bang and Beyond&lt;/em&gt;. In 1859, the British nurse and social reformer Florence Nightingale wrote, “Unnecessary noise is the most cruel absence of care that can be inflicted on sick or well.” Every careless clatter or banal bit of banter, Nightingale argued, can be a source of alarm, distress, and loss of sleep for recovering patients. She even quoted a lecture that identified “sudden noises” as a cause of death among sick children.&lt;/p&gt;
&lt;img src=&quot;http://static.nautil.us/4047_e366d105cfd734677897aaccf51e97a3.png&quot; width=&quot;733&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;caption&quot;&gt;&lt;strong&gt;The Quiet Sell:&lt;/strong&gt; Two wooden armchairs stand on a lake shore in Finland, where marketers have rebranded the Nordic country with a slogan, “Silence, Please.”&lt;/span&gt;&lt;span class=&quot;credit&quot;&gt;veer.com&lt;/span&gt;
&lt;p&gt;Surprisingly, recent research supports some of Nightingale’s zealous claims. In the mid 20th century, epidemiologists discovered correlations between high blood pressure and chronic noise sources like highways and airports. Later research seemed to link noise to increased rates of sleep loss, heart disease, and tinnitus. (It’s this line of research that hatched the 1960s-era notion of “noise pollution,” a name that implicitly refashions transitory noises as toxic and long-lasting.)&lt;/p&gt;
&lt;p&gt;Studies of human physiology help explain how an invisible phenomenon can have such a pronounced physical effect. Sound waves vibrate the bones of the ear, which transmit movement to the snail-shaped cochlea. The cochlea converts physical vibrations into electrical signals that the brain receives. The body reacts immediately and powerfully to these signals, even in the middle of deep sleep. Neurophysiological research suggests that noises first activate the amygdalae, clusters of neurons located in the temporal lobes of the brain, associated with memory formation and emotion. The activation prompts an immediate release of stress hormones like cortisol. People who live in consistently loud environments often experience chronically elevated levels of stress hormones.&lt;/p&gt;
&lt;p&gt;Just as the whooshing of a hundred individual cars accumulates into an irritating wall of background noise, the physical effects of noise add up. In 2011, the World Health Organization tried to quantify its health burden in Europe. It concluded that the 340 million residents of western Europe—roughly the same population as that of the United States—annually lost a million years of healthy life because of noise. It even argued that 3,000 heart disease deaths were, at their root, the result of excessive noise.&lt;/p&gt;
&lt;p&gt;So we like silence for what it doesn’t do—it doesn’t wake, annoy, or kill us—but what does it do? When Florence Nightingale attacked noise as a “cruel absence of care,” she also insisted on the converse: Quiet is a part of care, as essential for patients as medication or sanitation. It’s a strange notion, but one that researchers have begun to bear out as true.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&lt;p&gt;Two-minute silent pauses proved far more relaxing than either “relaxing” music or a longer silence played before the experiment started.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Silence first began to appear in scientific research as a control or baseline, against which scientists compare the effects of noise or music. Researchers have mainly studied it by accident, as physician Luciano Bernardi did in a 2006 study of the physiological effects of music. “We didn’t think about the effect of silence,” he says. “That was not meant to be studied specifically.”&lt;/p&gt;
&lt;p&gt;He was in for a quiet surprise. Bernardi observed physiological metrics for two dozen test subjects while they listened to six musical tracks. He found that the impacts of music could be read directly in the bloodstream, via changes in blood pressure, carbon dioxide, and circulation in the brain. (Bernardi and his son are both amateur musicians, and they wanted to explore a shared interest.) “During almost all sorts of music, there was a physiological change compatible with a condition of arousal,” he explains.&lt;/p&gt;
&lt;p&gt;This effect made sense, given that active listening requires alertness and attention. But the more striking finding appeared between musical tracks. Bernardi and his colleagues discovered that randomly inserted stretches of silence also had a drastic effect, but in the opposite direction. In fact, two-minute silent pauses proved far more relaxing than either “relaxing” music or a longer silence played before the experiment started.&lt;/p&gt;
&lt;p&gt;The blank pauses that Bernardi considered irrelevant, in other words, became the most interesting object of study. Silence seemed to be heightened by contrasts, maybe because it gave test subjects a release from careful attention. “Perhaps the arousal is something that concentrates the mind in one direction, so that when there is nothing more arousing, then you have deeper relaxation,” he says.&lt;/p&gt;
&lt;p&gt;In 2006, Bernardi’s paper on the physiological effects of silence was the most-downloaded research in the journal &lt;em&gt;Heart&lt;/em&gt;. One of his key findings—that silence is heightened by contrasts—is reinforced by neurological research. In 2010, Michael Wehr, who studies sensory processing in the brain at the University of Oregon, observed the brains of mice during short bursts of sound. The onset of a sound prompts a specialized network of neurons in the auditory cortex to light up. But when sounds continue in a relatively constant manner, the neurons largely stop reacting. “What the neurons really do is signal whenever there’s a change,” Wehr says.&lt;/p&gt;
&lt;p&gt;The sudden onset of silence is a type of change too, and this fact led Wehr to a surprise. Before his 2010 study, scientists knew that the brain reacts to the start of silences. (This ability helps us react to dangers, for example, or distinguish words in a sentence.) But Wehr’s research extended those findings by showing that, remarkably, the auditory cortex has a separate network of neurons that fire when silence begins. “When a sound suddenly stops, that’s an event just as surely as when a sound starts.”&lt;/p&gt;
&lt;p&gt;Even though we usually think of silences as a lack of input, our brains are structured to recognize them, whenever they represent a sharp break from sounds. So the question is what happens after that moment—when silence continues, and the auditory cortex settles into a state of relative inactivity.&lt;/p&gt;
&lt;img src=&quot;http://static.nautil.us/3946_71a8b2ffe0b594a5c1b3c28090384fd7.png&quot; width=&quot;733&quot; alt=&quot;&quot;/&gt;&lt;p&gt;One of the researchers who’s examined this question is a Duke University regenerative biologist, Imke Kirste. Like Bernardi, Kirste wasn’t trying to study silence at all. In 2013, she was examining the effects of sounds in the brains of adult mice. Her experiment exposed four groups of mice to various auditory stimuli: music, baby mouse calls, white noise, and silence. She expected that baby mouse calls, as a form of communication, might prompt the development of new brain cells. Like Bernardi, she thought of silence as a control that wouldn’t produce an effect.&lt;/p&gt;
&lt;p&gt;As it turned out, even though all the sounds had short-term neurological effects, not one of them had a lasting impact. Yet to her great surprise, Kirste found that two hours of silence per day prompted cell development in the hippocampus, the brain region related to the formation of memory, involving the senses. This was deeply puzzling: The total absence of input was having a more pronounced effect than any sort of input tested.&lt;/p&gt;
&lt;p&gt;Here’s how Kirste made sense of the results. She knew that “environmental enrichment,” like the introduction of toys or fellow mice, encouraged the development of neurons because they challenged the brains of mice. Perhaps the total absence of sound may have been so artificial, she reasoned—so alarming, even—that it prompted a higher level of sensitivity or alertness in the mice. Neurogenesis could be an adaptive response to uncanny quiet.&lt;/p&gt;
&lt;p&gt;The growth of new cells in the brain doesn’t always have health benefits. But in this case, Kirste says that the cells seemed to become functioning neurons. “We saw that silence is really helping the new generated cells to differentiate into neurons, and integrate into the system.”&lt;/p&gt;
&lt;p&gt;While Kirste emphasizes that her findings are preliminary, she wonders if this effect could have unexpected applications. Conditions like dementia and depression have been associated with decreasing rates of neurogenesis in the hippocampus. If a link between silence and neurogenesis could be established in humans, she says, perhaps neurologists could find a therapeutic use for silence.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&lt;p&gt;To her great surprise, she found that two hours of silence per day prompted cell development in the hippocampus region of the brain.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While it’s clear that external silence can have tangible benefits, scientists are discovering that under the hoods of our skulls “there isn’t really such a thing as silence,” says Robert Zatorre, an expert on the neurology of sound. “In the absence of sound, the brain often tends to produce internal representations of sound.”&lt;/p&gt;
&lt;p&gt;Imagine, for example, you’re listening to Simon and Garfunkel’s “The Sound of Silence,” when the radio abruptly cuts out. Neurologists have found that if you know the song well, your brain’s auditory cortex remains active, as if the music is still playing. “What you’re ‘hearing’ is not being generated by the outside world,” says David Kraemer, who’s conducted these types of experiments in his Dartmouth College laboratory. “You’re retrieving a memory.” Sounds aren’t always responsible for sensations—sometimes our subjective sensations are responsible for the illusion of sound.&lt;/p&gt;
&lt;p&gt;This is a reminder of the brain’s imaginative power: On the blank sensory slate of silence, the mind can conduct its own symphonies. But it’s also a reminder that even in the absence of a sensory input like sound, the brain remains active and dynamic.&lt;/p&gt;
&lt;p&gt;In 1997, a team of neuroscientists at Washington University was collecting brain scan data from test subjects during various mental tasks, like arithmetic and word games. One of the scientists, Gordon Shulman, noticed that although intense cognition caused spikes in some parts of the brain, as you’d expect, it was also causing declines in the activity of other parts of the brain. There seemed to be a type of background brain activity that was most visible, paradoxically, when the test subject was in a quiet room, doing absolutely nothing.&lt;/p&gt;
&lt;p&gt;The team’s lead scientist was Marcus Raichle, and he knew there were good reasons to look closer at the data. For decades, scientists had known that the brain’s “background” activity consumed the lion’s share of its energy. Difficult tasks like pattern recognition or arithmetic, in fact, only increased the brain’s energy consumption by a few percent. This suggested that by ignoring the background activity, neurologists might be overlooking something crucial. “When you do that,” Raichle explains, “most of the brain’s activities end up on the cutting room floor.”&lt;/p&gt;
&lt;p&gt;In 2001, Raichle and his colleagues published a seminal paper that defined a “default mode” of brain function—situated in the prefrontal cortex, active in cognitive actions—implying a “resting” brain is perpetually active, gathering and evaluating information. Focused attention, in fact, curtails this scanning activity. The default mode, Raichle and company argued, has “rather obvious evolutionary significance.” Detecting predators, for example, should happen automatically, and not require additional intention and energy.&lt;/p&gt;
&lt;p&gt;Follow-up research has shown the default mode is also enlisted in self-reflection. In 2013, in &lt;em&gt;Frontiers in Human Neuroscience&lt;/em&gt;, Joseph Moran and colleagues wrote the brain’s default mode network “is observed most closely during the psychological task of reflecting on one’s personalities and characteristics (self-reflection), rather than during self-recognition, thinking of the self-concept, or thinking about self-esteem, for example.” During this time when the brain rests quietly, wrote Moran and colleagues, our brains integrate external and internal information into “a conscious workspace.”&lt;/p&gt;
&lt;p&gt;Freedom from noise and goal-directed tasks, it appears, unites the quiet without and within, allowing our conscious workspace to do its thing, to weave ourselves into the world, to discover where we fit in. That’s the power of silence.&lt;/p&gt;
&lt;p&gt;Noora Vikman, an ethnomusicologist, and a consultant on silence for Finland’s marketers, knows that power well. She lives in the eastern part of Finland, an area blanketed with quiet lakes and forests. In a remote and quiet place, Vikman says, she discovers thoughts and feelings that aren’t audible in her busy daily life. “If you want to know yourself you have to be with yourself, and discuss with yourself, be able to talk with yourself.”&lt;/p&gt;
&lt;p&gt;“Silence, Please” has proven to be the most popular theme in Finland’s rebranding, and one of the most popular pages on VisitFinland.com. Maybe silence sells because, so often, we treat it as a tangible thing—something easily broken, like porcelain or crystal, and something delicate and valuable. Vikman remembers a time when she experienced the rarity of nearly complete silence. Standing in the Finnish wilderness, she strained her ears to pick out the faintest sounds of animals or wind. “It’s strange,” she says, “the way you change. You have all the power—you can break the silence with even with the smallest sounds. And then you don’t want to do it. You try to be as quiet as you can be.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Daniel A. Gross is a freelance journalist and public radio producer who writes about history and science.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally published in our “Nothingness” issue in August, 2014.&lt;/em&gt;&lt;/p&gt;
&lt;section class=&quot;leaderboard-ad-belt&quot;&gt;&lt;div class=&quot;leaderboard-ad-belt-inner adarticle&quot;&gt;&lt;div id=&quot;div-gpt-ad-1380044019755-0&quot; class=&quot;leaderboard-ad&quot;/&gt;
&lt;/div&gt;
&lt;/section&gt;</description>
<pubDate>Mon, 19 Feb 2018 19:46:18 +0000</pubDate>
<dc:creator>dnetesn</dc:creator>
<og:type>website</og:type>
<og:url>http://nautil.us/issue/38/noise/this-is-your-brain-on-silence-rp</og:url>
<og:title>This Is Your Brain on Silence - Issue 38: Noise - Nautilus</og:title>
<og:description>One icy night in March 2010, 100 marketing experts piled into the Sea Horse Restaurant in Helsinki, with the modest goal of making&amp;#8230;</og:description>
<og:image>http://static.nautil.us/3898_37db6bb5f1db992df92a919d20757eec.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://nautil.us/issue/38/noise/this-is-your-brain-on-silence-rp</dc:identifier>
</item>
<item>
<title>OneLang – A tool to help writing code in multiple languages at the same time</title>
<link>https://ide.onelang.io</link>
<guid isPermaLink="true" >https://ide.onelang.io</guid>
<description>&lt;p&gt;
&lt;h4 class=&quot;modal-title&quot; id=&quot;welcomeModalLabel&quot;&gt;Hey there!&lt;/h4&gt;
&lt;/p&gt;
&lt;div class=&quot;form-group&quot; readability=&quot;6.2708333333333&quot;&gt;If this is the first time you are using Onelang WebIDE then I recommend watching our &lt;a href=&quot;https://youtu.be/Rwo6KJ_Pa9Q&quot; target=&quot;_blank&quot;&gt;Demo video&lt;/a&gt;: &lt;iframe width=&quot;568&quot; height=&quot;320&quot; src=&quot;//www.youtube.com/embed/Rwo6KJ_Pa9Q&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/div&gt;
&lt;div class=&quot;form-group&quot; readability=&quot;5.9805825242718&quot;&gt;We would be pleased if you could visit us and share your thoughts about Onelang in our &lt;a href=&quot;https://gitter.im/onelang-io/Lobby&quot; target=&quot;_blank&quot;&gt;Gitter chatroom&lt;/a&gt;.&lt;/div&gt;
&lt;div class=&quot;form-group&quot; readability=&quot;5.875&quot;&gt;You can view the source code or create issues &lt;a href=&quot;https://github.com/koczkatamas/onelang&quot; target=&quot;_blank&quot;&gt;on Github&lt;/a&gt;.&lt;/div&gt;

&lt;p&gt;&lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot; data-dismiss=&quot;modal&quot;&gt;Close&lt;/button&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 19 Feb 2018 19:28:06 +0000</pubDate>
<dc:creator>GordonS</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://ide.onelang.io/</dc:identifier>
</item>
<item>
<title>Maybe you don&amp;#039;t need Rust and WASM to speed up your JS</title>
<link>http://mrale.ph/blog/2018/02/03/maybe-you-dont-need-rust-to-speed-up-your-js.html</link>
<guid isPermaLink="true" >http://mrale.ph/blog/2018/02/03/maybe-you-dont-need-rust-to-speed-up-your-js.html</guid>
<description>&lt;p&gt;Few weeks ago I noticed a blog post &lt;a href=&quot;https://hacks.mozilla.org/2018/01/oxidizing-source-maps-with-rust-and-webassembly/&quot;&gt;“Oxidizing Source Maps with Rust and WebAssembly”&lt;/a&gt; making rounds on Twitter - talking about performance benefits of replacing plain JavaScript in the core of &lt;code class=&quot;highlighter-rouge&quot;&gt;source-map&lt;/code&gt; library with a Rust version compiled to WebAssembly.&lt;/p&gt;
&lt;p&gt;This post piqued my interest, not because I am a huge on either Rust or WASM, but rather because I am always curious about language features and optimizations missing in pure JavaScript to achieve similar performance characteristics.&lt;/p&gt;
&lt;p&gt;So I checked out the library from GitHub and departed on a small performance investigation, which I am documenting here almost verbatim.&lt;/p&gt;

&lt;p&gt;For my investigations I was using an &lt;em&gt;almost&lt;/em&gt; default x64.release build of the V8 at commit &lt;a href=&quot;https://chromium.googlesource.com/v8/v8/+/69abb960c97606df99408e6869d66e014aa0fb51&quot;&gt;69abb960c97606df99408e6869d66e014aa0fb51&lt;/a&gt; from January 20th. My only departure from the default configuration is that I enable disassembler via GN flags to be able to dive down to generated machine code if needed.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;╭─ ~/src/v8/v8 ‹master›
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;╰─$&lt;/span&gt; gn args out.gn/x64.release &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--short&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--overrides-only&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;is_debug = false
target_cpu = &quot;x64&quot;
use_goma = true
v8_enable_disassembler = true
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then I got a checkouts of &lt;a href=&quot;https://github.com/mozilla/source-map&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source-map&lt;/code&gt;&lt;/a&gt; package at:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/source-map/commit/c97d38b70de088d87b051f81b95c138a74032a43&quot;&gt;commit c97d38b&lt;/a&gt;, which was the last commit that updated &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/source-map.js&lt;/code&gt; before Rust/WASM started landed;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/source-map/commit/51cf7708dd70d067dfe04ce36d546f3262b48da3&quot;&gt;commit 51cf770&lt;/a&gt; which was the most recent commit, when I did my investigation;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Running benchmark in the pure-JS version was simple:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;╭─ ~/src/source-map/bench ‹ c97d38b›
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;╰─$&lt;/span&gt; d8 bench-shell-bindings.js
&lt;span class=&quot;go&quot;&gt;Parsing source map
console.timeEnd: iteration, 4655.638000
console.timeEnd: iteration, 4751.122000
console.timeEnd: iteration, 4820.566000
console.timeEnd: iteration, 4996.942000
console.timeEnd: iteration, 4644.619000
[Stats samples: 5, total: 23868 ms, mean: 4773.6 ms, stddev: 161.22112144505135 ms]
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The first thing that I did was to disable the serialization part of the benchmark:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/bench/bench-shell-bindings.js b/bench/bench-shell-bindings.js
index 811df40..c97d38b 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/bench/bench-shell-bindings.js
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/bench/bench-shell-bindings.js
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -19,5 +19,5 @@ load(&quot;./bench.js&quot;);
&lt;/span&gt; print(&quot;Parsing source map&quot;);
 print(benchmarkParseSourceMap());
 print();
&lt;span class=&quot;gd&quot;&gt;-print(&quot;Serializing source map&quot;);
-print(benchmarkSerializeSourceMap());
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+// print(&quot;Serializing source map&quot;);
+// print(benchmarkSerializeSourceMap());
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And then threw it into the Linux &lt;code class=&quot;highlighter-rouge&quot;&gt;perf&lt;/code&gt; profiler:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;╭─ ~/src/source-map/bench ‹perf-work›
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;╰─$&lt;/span&gt; perf record &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; d8 &lt;span class=&quot;nt&quot;&gt;--perf-basic-prof&lt;/span&gt; bench-shell-bindings.js
&lt;span class=&quot;go&quot;&gt;Parsing source map
console.timeEnd: iteration, 4984.464000
^C[ perf record: Woken up 90 times to write data ]
[ perf record: Captured and wrote 24.659 MB perf.data (~1077375 samples) ]
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice that I am passing &lt;code class=&quot;highlighter-rouge&quot;&gt;--perf-basic-prof&lt;/code&gt; flag to the &lt;code class=&quot;highlighter-rouge&quot;&gt;d8&lt;/code&gt; binary which instructs V8 to generate an auxiliary mappings file &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/perf-$pid.map&lt;/code&gt;. This file allows &lt;code class=&quot;highlighter-rouge&quot;&gt;perf report&lt;/code&gt; to understand JIT generated machine code.&lt;/p&gt;
&lt;p&gt;Here is what we get from &lt;code class=&quot;highlighter-rouge&quot;&gt;perf report --no-children&lt;/code&gt; after zooming on the main execution thread:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;Overhead  Symbol
  17.02%  *doQuickSort ../dist/source-map.js:2752
  11.20%  Builtin:ArgumentsAdaptorTrampoline
   7.17%  *compareByOriginalPositions ../dist/source-map.js:1024
   4.49%  Builtin:CallFunction_ReceiverIsNullOrUndefined
   3.58%  *compareByGeneratedPositionsDeflated ../dist/source-map.js:1063
   2.73%  *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
   2.11%  Builtin:StringEqual
   1.93%  *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
   1.66%  *doQuickSort ../dist/source-map.js:2752
   1.25%  v8::internal::StringTable::LookupStringIfExists_NoAllocate
   1.22%  *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
   1.21%  Builtin:StringCharAt
   1.16%  Builtin:Call_ReceiverIsNullOrUndefined
   1.14%  v8::internal::(anonymous namespace)::StringTableNoAllocateKey::IsMatch
   0.90%  Builtin:StringPrototypeSlice
   0.86%  Builtin:KeyedLoadIC_Megamorphic
   0.82%  v8::internal::(anonymous namespace)::MakeStringThin
   0.80%  v8::internal::(anonymous namespace)::CopyObjectToObjectElements
   0.76%  v8::internal::Scavenger::ScavengeObject
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   0.72%  v8::internal::String::VisitFlat&amp;lt;v8::internal::IteratingStringHasher&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   0.68%  *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
   0.64%  *doQuickSort ../dist/source-map.js:2752
   0.56%  v8::internal::IncrementalMarking::RecordWriteSlow
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Indeed, just like the &lt;a href=&quot;https://hacks.mozilla.org/2018/01/oxidizing-source-maps-with-rust-and-webassembly/&quot;&gt;“Oxidizing Source Maps …”&lt;/a&gt; post has stated the benchmark is rather heavy on sort: &lt;code class=&quot;highlighter-rouge&quot;&gt;doQuickSort&lt;/code&gt; appears at the top of the profile and also several times down the list (which means that it was optimized/deoptimized few times).&lt;/p&gt;

&lt;p&gt;One thing that jumps out in the profiler are suspicious entries, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;Builtin:ArgumentsAdaptorTrampoline&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Builtin:CallFunction_ReceiverIsNullOrUndefined&lt;/code&gt; which seem to be part of the V8 implementation. If we ask &lt;code class=&quot;highlighter-rouge&quot;&gt;perf report&lt;/code&gt; to expand call chains leading to them then we will notice that these functions are also mostly invoked from the sorting code:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;- Builtin:ArgumentsAdaptorTrampoline
  + 96.87% *doQuickSort ../dist/source-map.js:2752
  +  1.22% *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
  +  0.68% *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
  +  0.68% Builtin:InterpreterEntryTrampoline
  +  0.55% *doQuickSort ../dist/source-map.js:2752

- Builtin:CallFunction_ReceiverIsNullOrUndefined
  + 93.88% *doQuickSort ../dist/source-map.js:2752
  +  2.24% *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
  +  2.01% Builtin:InterpreterEntryTrampoline
  +  1.49% *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It is time to look at the code. Quicksort implementation itself lives in &lt;a href=&quot;https://github.com/mozilla/source-map/blob/c97d38b70de088d87b051f81b95c138a74032a43/lib/quick-sort.js&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/quite-sort.js&lt;/code&gt;&lt;/a&gt; and it is invoked from parsing code in &lt;a href=&quot;https://github.com/mozilla/source-map/blob/c97d38b70de088d87b051f81b95c138a74032a43/lib/source-map-consumer.js#L564-L568&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lib/source-map-consumer.js&lt;/code&gt;&lt;/a&gt;. Comparison functions used for sorting are &lt;a href=&quot;https://github.com/mozilla/source-map/blob/c97d38b70de088d87b051f81b95c138a74032a43/lib/util.js#L334-L343&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compareByGeneratedPositionsDeflated&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/mozilla/source-map/blob/c97d38b70de088d87b051f81b95c138a74032a43/lib/util.js#L296-L304&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compareByOriginalPositions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Looking at the definitions of these comparison functions and how they are invoked from quick-sort implementation reveals that the invocation site has mismatching arity:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compareByOriginalPositions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onlyCompareOriginal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compareByGeneratedPositionsDeflated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onlyCompareGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doQuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Grepping through library sources reveals that outside of tests &lt;code class=&quot;highlighter-rouge&quot;&gt;quickSort&lt;/code&gt; is only ever called with these two functions.&lt;/p&gt;
&lt;p&gt;What if we fix the invocation arity?&lt;/p&gt;
&lt;div class=&quot;language-diff highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/dist/source-map.js b/dist/source-map.js
index ade5bb2..2d39b28 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/dist/source-map.js
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/dist/source-map.js
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -2779,7 +2779,7 @@ return /******/ (function(modules) { // webpackBootstrap
&lt;/span&gt;            //
            //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
            for (var j = p; j &amp;lt; r; j++) {
&lt;span class=&quot;gd&quot;&gt;-             if (comparator(ary[j], pivot) &amp;lt;= 0) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+             if (comparator(ary[j], pivot, false) &amp;lt;= 0) {
&lt;/span&gt;                i += 1;
                swap(ary, i, j);
              }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;small&gt;[Note: I am doing edits directly in &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/source-map.js&lt;/code&gt; because I did not want to spend time figuring out the build process]&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;╭─ ~/src/source-map/bench ‹perf-work› [Fix comparator invocation arity]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;╰─$&lt;/span&gt; d8 bench-shell-bindings.js
&lt;span class=&quot;go&quot;&gt;Parsing source map
console.timeEnd: iteration, 4037.084000
console.timeEnd: iteration, 4249.258000
console.timeEnd: iteration, 4241.165000
console.timeEnd: iteration, 3936.664000
console.timeEnd: iteration, 4131.844000
console.timeEnd: iteration, 4140.963000
[Stats samples: 6, total: 24737 ms, mean: 4122.833333333333 ms, stddev: 132.18789657150916 ms]
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Just by fixing the arity mismatch we improved benchmark mean on V8 by 14% from 4774 ms to 4123 ms. If we profile the benchmark again we will discover that &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentsAdaptorTrampoline&lt;/code&gt; has completely disappeared from it. Why was it there in the first place?&lt;/p&gt;
&lt;p&gt;It turns out that &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentsAdaptorTrampoline&lt;/code&gt; is V8’s mechanism for coping with JavaScript’s variadic calling convention: you can call function that has 3 parameters with 2 arguments - in which case the third parameter will be filled with &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. V8 does this by creating a new frame on the stack, copying arguments down and then invoking the target function:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/argument-adaptation.png&quot; alt=&quot;Argument adaptation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;[If you have never heard about &lt;em&gt;execution stack&lt;/em&gt;, checkout out &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;Wikipedia&lt;/a&gt; and Franziska Hinkelmann’s &lt;a href=&quot;https://fhinkel.rocks/2017/10/30/Confused-about-Stack-and-Heap/&quot;&gt;blog post&lt;/a&gt;.]&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;While such costs might be negligible for cold code, in this code &lt;code class=&quot;highlighter-rouge&quot;&gt;comparator&lt;/code&gt; was invoked millions of times during benchmark run which magnified overheads of arguments adaptation.&lt;/p&gt;
&lt;p&gt;An attentive reader might also notice that we are now explicitly passing boolean value &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; where previously an implicit &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; was used. This does seem to contribute a bit to the performance improvement. If we replace &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;void 0&lt;/code&gt; we would get slightly worse numbers:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/dist/source-map.js b/dist/source-map.js
index 2d39b28..243b2ef 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/dist/source-map.js
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/dist/source-map.js
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -2779,7 +2779,7 @@ return /******/ (function(modules) { // webpackBootstrap
&lt;/span&gt;            //
            //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
            for (var j = p; j &amp;lt; r; j++) {
&lt;span class=&quot;gd&quot;&gt;-             if (comparator(ary[j], pivot, false) &amp;lt;= 0) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+             if (comparator(ary[j], pivot, void 0) &amp;lt;= 0) {
&lt;/span&gt;                i += 1;
                swap(ary, i, j);
              }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;╭─ ~/src/source-map/bench ‹perf-work U› [Fix comparator invocation arity]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;╰─$&lt;/span&gt; ~/src/v8/v8/out.gn/x64.release/d8 bench-shell-bindings.js
&lt;span class=&quot;go&quot;&gt;Parsing source map
console.timeEnd: iteration, 4215.623000
console.timeEnd: iteration, 4247.643000
console.timeEnd: iteration, 4425.871000
console.timeEnd: iteration, 4167.691000
console.timeEnd: iteration, 4343.613000
console.timeEnd: iteration, 4209.427000
[Stats samples: 6, total: 25610 ms, mean: 4268.333333333333 ms, stddev: 106.38947316346669 ms]
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For what it is worth argument adaptation overhead seems to be highly V8 specific. When I benchmark my change against SpiderMonkey, I don’t see any significant performance improvement from matching the arity:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;╭─ ~/src/source-map/bench ‹ d052ea4› [Disabled serialization part of the benchmark]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;╰─$&lt;/span&gt; sm bench-shell-bindings.js
&lt;span class=&quot;go&quot;&gt;Parsing source map
[Stats samples: 8, total: 24751 ms, mean: 3093.875 ms, stddev: 327.27966571700836 ms]
╭─ ~/src/source-map/bench ‹perf-work› [Fix comparator invocation arity]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;╰─$&lt;/span&gt; sm bench-shell-bindings.js
&lt;span class=&quot;go&quot;&gt;Parsing source map
[Stats samples: 8, total: 25397 ms, mean: 3174.625 ms, stddev: 360.4636187025859 ms]
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;small&gt;[SpiderMonkey shell is now very easy to install thanks to Mathias Bynens’es &lt;a href=&quot;https://github.com/GoogleChromeLabs/jsvu&quot;&gt;jsvu&lt;/a&gt; tool.]&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Let us get back to the sorting code. If we profile the benchmark again we will notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentsAdaptorTrampoline&lt;/code&gt; is gone for good from the profile, but &lt;code class=&quot;highlighter-rouge&quot;&gt;CallFunction_ReceiverIsNullOrUndefined&lt;/code&gt; is still there. This is not surprising given that we are still calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;comparator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What usually performs better than calling the function? Not calling it!&lt;/p&gt;
&lt;p&gt;The obvious option here is to try and get the comparator inlined into the &lt;code class=&quot;highlighter-rouge&quot;&gt;doQuickSort&lt;/code&gt;. However the fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;doQuickSort&lt;/code&gt; is called with different &lt;code class=&quot;highlighter-rouge&quot;&gt;comparator&lt;/code&gt; functions stands in the way of inlining.&lt;/p&gt;
&lt;p&gt;To work around this we can try to monomorphise &lt;code class=&quot;highlighter-rouge&quot;&gt;doQuickSort&lt;/code&gt; by cloning it. Here is how we do it.&lt;/p&gt;
&lt;p&gt;We start by wrapping &lt;code class=&quot;highlighter-rouge&quot;&gt;doQuickSort&lt;/code&gt; and other helpers into &lt;code class=&quot;highlighter-rouge&quot;&gt;SortTemplate&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SortTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomIntInRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doQuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doQuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then we can produce clones of our sorting routines by converting &lt;code class=&quot;highlighter-rouge&quot;&gt;SortTemplate&lt;/code&gt; into a string and then parsing it back into a function via &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; constructor:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cloneSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SortTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;templateFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`return &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;templateFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Invoke template to get doQuickSort&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;cloneSort&lt;/code&gt; to produce a sort function for each comparator we are using:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sortCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;WeakMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Cache for specialized sorts.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quickSort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doQuickSort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sortCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doQuickSort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;doQuickSort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cloneSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sortCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doQuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;doQuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Rerunning benchmark yields:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;13&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;╭─ ~/src/source-map/bench ‹perf-work› [Clone sorting functions for each comparator]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;╰─$&lt;/span&gt; d8 bench-shell-bindings.js
&lt;span class=&quot;go&quot;&gt;Parsing source map
console.timeEnd: iteration, 2955.199000
console.timeEnd: iteration, 3084.979000
console.timeEnd: iteration, 3193.134000
console.timeEnd: iteration, 3480.459000
console.timeEnd: iteration, 3115.011000
console.timeEnd: iteration, 3216.344000
console.timeEnd: iteration, 3343.459000
console.timeEnd: iteration, 3036.211000
[Stats samples: 8, total: 25423 ms, mean: 3177.875 ms, stddev: 181.87633161024556 ms]
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can see that the mean time went from 4268 ms to 3177 ms (25% improvement).&lt;/p&gt;
&lt;p&gt;Profiling reveals the following picture:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt; Overhead Symbol
   14.95% *doQuickSort :44
   11.49% *doQuickSort :44
    3.29% Builtin:StringEqual
    3.13% *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
    1.86% v8::internal::StringTable::LookupStringIfExists_NoAllocate
    1.86% *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
    1.72% Builtin:StringCharAt
    1.67% *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
    1.61% v8::internal::Scavenger::ScavengeObject
    1.45% v8::internal::(anonymous namespace)::StringTableNoAllocateKey::IsMatch
    1.23% Builtin:StringPrototypeSlice
    1.17% v8::internal::(anonymous namespace)::MakeStringThin
    1.08% Builtin:KeyedLoadIC_Megamorphic
    1.05% v8::internal::(anonymous namespace)::CopyObjectToObjectElements
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    0.99% v8::internal::String::VisitFlat&amp;lt;v8::internal::IteratingStringHasher&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    0.86% clear_page_c_e
    0.77% v8::internal::IncrementalMarking::RecordWriteSlow
    0.48% Builtin:MathRandom
    0.41% Builtin:RecordWrite
    0.39% Builtin:KeyedLoadIC
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Overheads related to invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;comparator&lt;/code&gt; have now completely disappeared from the profile.&lt;/p&gt;
&lt;p&gt;At this point I became interested in how much time we spend &lt;em&gt;parsing&lt;/em&gt; mappings vs. &lt;em&gt;sorting&lt;/em&gt; them. I went into the parsing code and added few &lt;code class=&quot;highlighter-rouge&quot;&gt;Date.now()&lt;/code&gt; invocations:&lt;/p&gt;
&lt;p&gt;&lt;small&gt;[I wanted to sprinkle &lt;code class=&quot;highlighter-rouge&quot;&gt;performance.now()&lt;/code&gt; but SpiderMonkey shell apparently does not support it.]&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;language-diff highlighter-rouge&quot; readability=&quot;13.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/dist/source-map.js b/dist/source-map.js
index 75ebbdf..7312058 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/dist/source-map.js
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/dist/source-map.js
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -1906,6 +1906,8 @@ return /******/ (function(modules) { // webpackBootstrap
&lt;/span&gt;            var generatedMappings = [];
            var mapping, str, segment, end, value;

&lt;span class=&quot;gi&quot;&gt;+
+      var startParsing = Date.now();
&lt;/span&gt;            while (index &amp;lt; length) {
              if (aStr.charAt(index) === ';') {
                generatedLine++;
&lt;span class=&quot;gu&quot;&gt;@@ -1986,12 +1988,20 @@ return /******/ (function(modules) { // webpackBootstrap
&lt;/span&gt;                }
              }
            }
&lt;span class=&quot;gi&quot;&gt;+      var endParsing = Date.now();
&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+      var startSortGenerated = Date.now();
&lt;/span&gt;            quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
            this.__generatedMappings = generatedMappings;
&lt;span class=&quot;gi&quot;&gt;+      var endSortGenerated = Date.now();
&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+      var startSortOriginal = Date.now();
&lt;/span&gt;            quickSort(originalMappings, util.compareByOriginalPositions);
            this.__originalMappings = originalMappings;
&lt;span class=&quot;gi&quot;&gt;+      var endSortOriginal = Date.now();
+
+      console.log(`${}, ${endSortGenerated - startSortGenerated}, ${endSortOriginal - startSortOriginal}`);
+      console.log(`sortGenerated: `);
+      console.log(`sortOriginal:  `);
&lt;/span&gt;          };
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This yielded:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;╭─ ~/src/source-map/bench ‹perf-work U› [Clone sorting functions for each comparator]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;╰─$&lt;/span&gt; d8 bench-shell-bindings.js
&lt;span class=&quot;go&quot;&gt;Parsing source map
parse:         1911.846
sortGenerated: 619.5990000000002
sortOriginal:  905.8220000000001
parse:         1965.4820000000004
sortGenerated: 602.1939999999995
sortOriginal:  896.3589999999995
^C
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here is how parsing and sorting times look like in V8 and SpiderMonkey per benchmark iteration run:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-0.png&quot; alt=&quot;Parse and Sort times&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In V8 we seem to be spending roughly as much time parsing mappings as sorting them. In SpiderMonkey parsing is considerably faster - while sorting is slower. This prompted me to start looking at the parsing code.&lt;/p&gt;

&lt;p&gt;Lets take a look at the profile again&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;Overhead  Symbol
  18.23%  *doQuickSort :44
  12.36%  *doQuickSort :44
   3.84%  *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
   3.07%  Builtin:StringEqual
   1.92%  v8::internal::StringTable::LookupStringIfExists_NoAllocate
   1.85%  *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
   1.59%  *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
   1.54%  Builtin:StringCharAt
   1.52%  v8::internal::(anonymous namespace)::StringTableNoAllocateKey::IsMatch
   1.38%  v8::internal::Scavenger::ScavengeObject
   1.27%  Builtin:KeyedLoadIC_Megamorphic
   1.22%  Builtin:StringPrototypeSlice
   1.10%  v8::internal::(anonymous namespace)::MakeStringThin
   1.05%  v8::internal::(anonymous namespace)::CopyObjectToObjectElements
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   1.03%  v8::internal::String::VisitFlat&amp;lt;v8::internal::IteratingStringHasher&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   0.88%  clear_page_c_e
   0.51%  Builtin:MathRandom
   0.48%  Builtin:KeyedLoadIC
   0.46%  v8::internal::IteratingStringHasher::Hash
   0.41%  Builtin:RecordWrite
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Removing the JavaScript code we recognize leaves us with the following:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;Overhead  Symbol
   3.07%  Builtin:StringEqual
   1.92%  v8::internal::StringTable::LookupStringIfExists_NoAllocate
   1.54%  Builtin:StringCharAt
   1.52%  v8::internal::(anonymous namespace)::StringTableNoAllocateKey::IsMatch
   1.38%  v8::internal::Scavenger::ScavengeObject
   1.27%  Builtin:KeyedLoadIC_Megamorphic
   1.22%  Builtin:StringPrototypeSlice
   1.10%  v8::internal::(anonymous namespace)::MakeStringThin
   1.05%  v8::internal::(anonymous namespace)::CopyObjectToObjectElements
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   1.03%  v8::internal::String::VisitFlat&amp;lt;v8::internal::IteratingStringHasher&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   0.88%  clear_page_c_e
   0.51%  Builtin:MathRandom
   0.48%  Builtin:KeyedLoadIC
   0.46%  v8::internal::IteratingStringHasher::Hash
   0.41%  Builtin:RecordWrite
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When I started looking at call chains for individual entries I discovered that many of them pass through &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyedLoadIC_Megamorphic&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;SourceMapConsumer_parseMappings&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;-    1.92% v8::internal::StringTable::LookupStringIfExists_NoAllocate
   - v8::internal::StringTable::LookupStringIfExists_NoAllocate
      + 99.80% Builtin:KeyedLoadIC_Megamorphic

-    1.52% v8::internal::(anonymous namespace)::StringTableNoAllocateKey::IsMatch
   - v8::internal::(anonymous namespace)::StringTableNoAllocateKey::IsMatch
      - 98.32% v8::internal::StringTable::LookupStringIfExists_NoAllocate
         + Builtin:KeyedLoadIC_Megamorphic
      + 1.68% Builtin:KeyedLoadIC_Megamorphic

-    1.27% Builtin:KeyedLoadIC_Megamorphic
   - Builtin:KeyedLoadIC_Megamorphic
      + 57.65% *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
      + 22.62% *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
      + 15.91% *SourceMapConsumer_parseMappings ../dist/source-map.js:1894
      + 2.46% Builtin:InterpreterEntryTrampoline
      + 0.61% BytecodeHandler:Mul
      + 0.57% *doQuickSort :44

-    1.10% v8::internal::(anonymous namespace)::MakeStringThin
   - v8::internal::(anonymous namespace)::MakeStringThin
      - 94.72% v8::internal::StringTable::LookupStringIfExists_NoAllocate
         + Builtin:KeyedLoadIC_Megamorphic
      + 3.63% Builtin:KeyedLoadIC_Megamorphic
      + 1.66% v8::internal::StringTable::LookupString
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This sort of call stacks indicated to me that the code is performing a lot of keyed lookups of form &lt;code class=&quot;highlighter-rouge&quot;&gt;obj[key]&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; is dynamically built string. When I looked at the parsing I discovered &lt;a href=&quot;https://github.com/mozilla/source-map/blob/693728299cf87d1482e4c37ae90f5bce8edf899f/lib/source-map-consumer.js#L496-L529&quot;&gt;the following code&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Because each offset is encoded relative to the previous one,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// many segments often have the same encoding. We can exploit this&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// fact by caching the parsed variable length fields of each segment,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// allowing us to avoid a second parse if we encounter the same&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// segment again.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_charIsMappingSeparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedSegments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;base64VLQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cachedSegments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This code is responsible for decoding Base64 VLQ encoded sequences, e.g. a string &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; would be decoded as &lt;code class=&quot;highlighter-rouge&quot;&gt;[0]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UAAAA&lt;/code&gt; gets decoded as &lt;code class=&quot;highlighter-rouge&quot;&gt;[10,0,0,0,0]&lt;/code&gt;. I suggest checking &lt;a href=&quot;https://blogs.msdn.microsoft.com/davidni/2016/03/14/source-maps-under-the-hood-vlq-base64-and-yoda/&quot;&gt;this blog post&lt;/a&gt; about source maps internals if you would like to understand the encoding itself better.&lt;/p&gt;
&lt;p&gt;Instead of decoding each sequence independently this code attempts to cache decoded segments: it scans forward until a separator (&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;) is found, then extracts substring from the current position to the separator and checks if we have previous decoded such segment by looking up the extracted substring in a cache - if we hit the cache we return cached segment, otherwise we parse and cache the segment in the cache.&lt;/p&gt;
&lt;p&gt;Caching (aka &lt;a href=&quot;https://en.wikipedia.org/wiki/Memoization&quot;&gt;memoization&lt;/a&gt;) is a very powerful optimization technique - however it only makes sense when maintaining the cache itself and looking up cached results is cheaper than performing computation itself again.&lt;/p&gt;
&lt;h2 id=&quot;abstract-analysis&quot;&gt;Abstract Analysis&lt;/h2&gt;
&lt;p&gt;Lets try to compare these two operations abstractly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On one hand is pure parsing:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Parsing segment looks at each character of a segment once. For each character it performs few comparisons and arithmetic operations to convert a base64 character into an integer value it represents. Then it performs few bitwise operations to incorporate this integer value into a larger integer value. Then it stores decoded value into an array and moves to the next part of the segment. Segments are limited to 5 elements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On the other hand caching:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;To look up a cached value we traverse all the characters of the segment once to find its end;&lt;/li&gt;
&lt;li&gt;We extract the substring, which requires allocation and potentially copying depending on how strings are implemented in a JS VM;&lt;/li&gt;
&lt;li&gt;We use this string as a key in a dictionary, which:
&lt;ol&gt;&lt;li&gt;first requires VM to compute hash for this string (traversing it again and performing various bitwise operations on individual characters), this might also require VM to internalize the string (depending on implementation);&lt;/li&gt;
&lt;li&gt;then VM has to perform a hash table lookup, which requires probing and comparing key by value with other keys (which might require it again to look at individual characters in a string);&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Overall it seems that direct parsing should be faster, assuming that JS VM does good job with individual arithmetic/bitwise operations, simply because it looks at each individual character only once, where caching requires traversing the segment 2-4 times just to establish whether we hit the cache or not.&lt;/p&gt;
&lt;p&gt;Profile seems to confirm this too: &lt;code class=&quot;highlighter-rouge&quot;&gt;KeyedLoadIC_Megamorphic&lt;/code&gt; is a stub used by V8 to implement keyed lookups like &lt;code class=&quot;highlighter-rouge&quot;&gt;cachedSegments[str]&lt;/code&gt; in the code above.&lt;/p&gt;
&lt;p&gt;Based on these observations I set out to do few experiments. First I checked how big &lt;code class=&quot;highlighter-rouge&quot;&gt;cachedSegments&lt;/code&gt; cache is at the end of the parsing. The smaller it is the more efficient caching would be.&lt;/p&gt;
&lt;p&gt;Turns out that it grows quite big:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;Object.keys(cachedSegments).length = 155478
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;standalone-microbenchmarks&quot;&gt;Standalone Microbenchmarks&lt;/h2&gt;
&lt;p&gt;Now I decided to write a small standalone benchmark:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;24&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Generate a string with [n] segments, segments repeat in a cycle of length&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [v] i.e. segments number 0, v, 2*v, ... are all equal and so are&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1, 1 + v, 1 + 2*v, ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Use [base] as a base value in a segment - this parameter allows to make&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// segments long.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Note: the bigger [v], the bigger [cachedSegments] cache is.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;base64VLQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;';'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Run function [f] against the string [str].&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bench&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Measure and report performance of [f] against [str].&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// It has [v] different segments.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;bench&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;measureAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Make a string with 1000 total segments and [v] different ones&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// so that [cachedSegments] has [v] cached segments.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Run 10 iterations for each way of decoding.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodeCached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodeNoCaching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodeNoCachingNoStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodeNoCachingNoStringsPreEncoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextTick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextTick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are three different ways to decode Base64 VLQ segments that I tried against each other.&lt;/p&gt;
&lt;p&gt;The first one &lt;code class=&quot;highlighter-rouge&quot;&gt;decodeCached&lt;/code&gt; is exactly the same as the default implementation used by &lt;code class=&quot;highlighter-rouge&quot;&gt;source-map&lt;/code&gt; - which I already listed above:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;14&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodeCached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedSegments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base64VLQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Because each offset is encoded relative to the previous one,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// many segments often have the same encoding. We can exploit this&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// fact by caching the parsed variable length fields of each segment,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// allowing us to avoid a second parse if we encounter the same&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// segment again.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_charIsMappingSeparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedSegments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Found a source, but no line and column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Found a source and line, but no column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;cachedSegments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The next competitor is &lt;code class=&quot;highlighter-rouge&quot;&gt;decodeNoCaching&lt;/code&gt;. It is essentially &lt;code class=&quot;highlighter-rouge&quot;&gt;decodeCached&lt;/code&gt; but without the cache. Each segment is decoded independently. I also replaced &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;Int32Array&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;segment&lt;/code&gt; storage.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;12.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodeNoCaching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedSegments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base64VLQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int32Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_charIsMappingSeparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Too many segments'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Found a source, but no line and column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Found a source and line, but no column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally the third variant &lt;code class=&quot;highlighter-rouge&quot;&gt;decodeNoCachingNoString&lt;/code&gt; tries to avoid dealing with JavaScript strings altogether by converting the string into utf8 encoded &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint8Array&lt;/code&gt;. This optimization is inspired by the fact that JS VMs are more likely to optimize an array load down to a single memory access. Optimizing &lt;code class=&quot;highlighter-rouge&quot;&gt;String.prototype.charCodeAt&lt;/code&gt; to the same extent is harder due to the sheer complexity of the hierarchy of different string representations that JS VMs utilize.&lt;/p&gt;
&lt;p&gt;I benchmarked both a version that encodes string into utf8 as part of the iteration and a version that uses preencoded string. With this latter “optimistic” version I am trying to estimate how much we could gain if we were able to skip &lt;em&gt;typed array ⇒ string ⇒ typed array&lt;/em&gt; round trip. Which would be possible if we loaded the source map directly as an array buffer and parsed it directly from that buffer instead of converting it to string first.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TextEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodeNoCachingNoString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;decodeNoCachingNoStringPreEncoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodeNoCachingNoStringPreEncoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedSegments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decode2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base64VLQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decode2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int32Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;decode2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;segment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Found a source, but no line and column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Found a source and line, but no column'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here are the results I’ve gotten by running my microbenchmark in Chrome Dev &lt;code class=&quot;highlighter-rouge&quot;&gt;66.0.3343.3&lt;/code&gt; (V8 &lt;code class=&quot;highlighter-rouge&quot;&gt;6.6.189&lt;/code&gt;) and Firefox Nightly &lt;code class=&quot;highlighter-rouge&quot;&gt;60.0a1 (2018-02-11)&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/different-decodes.png&quot; alt=&quot;Different Decodes&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There are few things to notice here:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the version that uses caching is slower than anything else on both V8 and SpiderMonkey. Its performance degrades steeply as number of cache entries grows - while performance of non-caching versions does not depend on that;&lt;/li&gt;
&lt;li&gt;on SpiderMonkey it pays off to convert string into typed array as part of parsing, while on V8 character access is fast enough - so it only pays off to use array if you can move string-to-array conversion out of the benchmark (e.g. you load your data into typed arrays to begin with);&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I was curious if V8 team did any work recently to improve &lt;code class=&quot;highlighter-rouge&quot;&gt;charCodeAt&lt;/code&gt; performance - as I remembered rather vividly that Crankshaft never made an effort to specialize &lt;code class=&quot;highlighter-rouge&quot;&gt;charCodeAt&lt;/code&gt; for a particular string representation at a call-site and instead expanded &lt;code class=&quot;highlighter-rouge&quot;&gt;charCodeAt&lt;/code&gt; into a large chunk of code handling many different string representations, making loading characters from strings slower than loading elements from typed arrays.&lt;/p&gt;
&lt;p&gt;I trawled V8 issue tracker and found few active issues like these:&lt;/p&gt;
&lt;p&gt;Some of the comments on these issues reference commits from late January 2018 and onward, which indicated to me that performance of &lt;code class=&quot;highlighter-rouge&quot;&gt;charCodeAt&lt;/code&gt; is being actively worked on. Out of curiosity I decided to rerun my microbenchmark in Chrome Beta and compare against Chrome Dev&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/different-decodes-v8s.png&quot; alt=&quot;Different Decodes&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This comparison does in fact confirm that all those commits by the V8 team were not for nothing: performance of &lt;code class=&quot;highlighter-rouge&quot;&gt;charCodeAt&lt;/code&gt; improved drastically from version &lt;code class=&quot;highlighter-rouge&quot;&gt;6.5.254.21&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;6.6.189&lt;/code&gt;. Comparing “no cache” and “using array” lines we can see that on an older V8 &lt;code class=&quot;highlighter-rouge&quot;&gt;charCodeAt&lt;/code&gt; behaved so much worse that it made sense to convert the string into &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint8Array&lt;/code&gt; just to access it faster. However the overhead of doing this conversion inside the parse does not pay off anymore in a newer V8.&lt;/p&gt;
&lt;p&gt;However it still pays off to use an array instead of a string as long as you don’t have to pay the conversion cost. Why is that? To figure that out I run the following code in tip-of-the tree V8:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fisk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OptimizeFunctionOnNextCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;go&quot;&gt;╭─ ~/src/v8/v8 ‹master›
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;╰─$&lt;/span&gt; out.gn/x64.release/d8 &lt;span class=&quot;nt&quot;&gt;--allow-natives-syntax&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--print-opt-code&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--code-comments&lt;/span&gt; x.js
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command produced a &lt;a href=&quot;https://gist.github.com/mraleph/a1f36a67676a8dfef0af081f27f3eb6a&quot;&gt;gigantic assembly listing&lt;/a&gt; confirming my suspicion that V8 still does not specialize &lt;code class=&quot;highlighter-rouge&quot;&gt;charCodeAt&lt;/code&gt; for a particular string representation. This lowering seems to come from &lt;a href=&quot;https://github.com/v8/v8/blob/de7a3174282a48fab9c167155ffc8ff20c37214d/src/compiler/effect-control-linearizer.cc#L2687-L2826&quot;&gt;this code&lt;/a&gt; in V8 sources, which resolves the mystery of why array access is faster than string &lt;code class=&quot;highlighter-rouge&quot;&gt;charCodeAt&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;parsing-improvements&quot;&gt;Parsing Improvements&lt;/h2&gt;
&lt;p&gt;In light of these discoveries lets remove caching of parsed segments from &lt;code class=&quot;highlighter-rouge&quot;&gt;source-map&lt;/code&gt; parsing code and measure the effect.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-1.png&quot; alt=&quot;Parse and Sort times&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Just like our microbenchmarking predicted caching was detrimental to the overall performance rather than being beneficial: removing it actually improves parsing times considerably.&lt;/p&gt;

&lt;p&gt;Now that we improved parsing performance lets take a look at the sorting again.&lt;/p&gt;
&lt;p&gt;There are two arrays that are being sorted:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings&lt;/code&gt; array is being sorted using &lt;code class=&quot;highlighter-rouge&quot;&gt;compareByOriginalPositions&lt;/code&gt; comparator;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt; array is being sorted using &lt;code class=&quot;highlighter-rouge&quot;&gt;compareByGeneratedPositionsDeflated&lt;/code&gt; comparator.&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;optimizing-originalmappings-sorting&quot;&gt;Optimizing &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings&lt;/code&gt; Sorting&lt;/h2&gt;
&lt;p&gt;I took a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;compareByOriginalPositions&lt;/code&gt; first.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compareByOriginalPositions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onlyCompareOriginal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalColumn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onlyCompareOriginal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedColumn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here I noticed that mappings are being ordered by &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; component first and then by all other components. &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; specifies which source file the mapping originally came from. An obvious idea here is that instead of using a flat gigantic &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings&lt;/code&gt; array, which mixes together mappings from different source files, we can turn &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings&lt;/code&gt; into array of arrays: &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings[i]&lt;/code&gt; would be an array of all mappings from source file with index &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;. This way we can sort mappings into different &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings[i]&lt;/code&gt; arrays based on their source as we parse them and then sort individual smaller arrays.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;[This is essentially a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bucket_sort&quot;&gt;Bucket Sort&lt;/a&gt;]&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Here is what we do in parsing loop:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This code used to just do: originalMappings.push(mapping).&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Now it sorts original mappings already by source during parsing.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And then after that:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startSortOriginal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The code used to sort the whole array:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     quickSort(originalMappings, util.compareByOriginalPositions);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compareByOriginalPositionsNoSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endSortOriginal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;compareByOriginalPositionsNoSource&lt;/code&gt; comparator is almost exactly the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;compareByOriginalPositions&lt;/code&gt; comparator except it does not compare &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; component anymore - those are guaranteed to be equal due to the way we constructed each &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings[i]&lt;/code&gt; array.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-2.png&quot; alt=&quot;Parse and Sort times&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This algorithmic change improves sorting times on both V8 and SpiderMonkey and additionally improves parsing times on V8.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;[Parse time improvement is likely due to the reduction of costs associated with managing &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings&lt;/code&gt; array: growing a single gigantic &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings&lt;/code&gt; array is more expensive than growing multiple smaller &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings[i]&lt;/code&gt; arrays individually. However this is just my guess, which is not confirmed by any rigorous analysis.]&lt;/small&gt;&lt;/p&gt;
&lt;h2 id=&quot;optimizing-generatedmappings-sorting&quot;&gt;Optimizing &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt; Sorting&lt;/h2&gt;
&lt;p&gt;Let us take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;compareByGeneratedPositionsDeflated&lt;/code&gt; comparator.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compareByGeneratedPositionsDeflated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onlyCompareGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedColumn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onlyCompareGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalColumn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here we first compare mappings by &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedLine&lt;/code&gt;. There are likely considerably more generated lines than original source files so it does not make sense to split &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt; into multiple individual arrays.&lt;/p&gt;
&lt;p&gt;However when I looked at the parsing code I noticed the following:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;';'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;These are the only occurrences of &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedLine&lt;/code&gt; in this code, which means that &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedLine&lt;/code&gt; is growing monotonically - implying that &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt; array is already ordered by &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedLine&lt;/code&gt; and it does not make sense to sort the array as whole. Instead we can sort each individual smaller subarray. We change the code like this:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subarrayStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;';'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Sort subarray [subarrayStart, generatedMappings.length].&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sortGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subarrayStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;subarrayStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatedMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Sort the tail.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;sortGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatedMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subarrayStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Instead of using &lt;code class=&quot;highlighter-rouge&quot;&gt;quickSort&lt;/code&gt; for sorting smaller subarrays, I also decided to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Insertion_sort&quot;&gt;insertion sort&lt;/a&gt;, similar to a hybrid strategy that some VMs use for &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.sort&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;[Note: insertion sort is also faster than quick sort if input array is already sorted… and it turns out that mappings used for the benchmark &lt;em&gt;are&lt;/em&gt; in fact sorted. If we expect &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt; to be almost always sorted after parsing then it would be even more efficient to simply check whether &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt; is sorted before trying to sort it.]&lt;/small&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compareGenerated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compareByGeneratedPositionsDeflatedNoLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sortGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compareGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compareGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compareGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This yields the following result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-3.png&quot; alt=&quot;Parse and Sort times&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Sorting times drop drastically, while parsing times slightly increase - that happens because the code sorting &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt; as part of the parsing loop, making our breakdown slightly meaningless. Lets check comparison of cumulative timings (parsing and sorting together)&lt;/p&gt;
&lt;h2 id=&quot;improvements-to-total-time&quot;&gt;Improvements to Total Time&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-3-total.png&quot; alt=&quot;Parse and Sort times&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now it becomes obvious that we considerably improved overall mappings parsing performance.&lt;/p&gt;
&lt;p&gt;Is there anything else we could do to improve performance?&lt;/p&gt;
&lt;p&gt;It turns out yes: we can pull out a page from asm.js / WASM own playbook without going full-Rust on our JavaScript code base.&lt;/p&gt;

&lt;p&gt;We are allocating hundreds of thousands of &lt;code class=&quot;highlighter-rouge&quot;&gt;Mapping&lt;/code&gt; objects, which puts considerable pressure on the GC - however we don’t really need these objects to be objects - we can pack them into a typed array. Here is how I did it.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;[Few years ago I was really excited about &lt;a href=&quot;https://github.com/nikomatsakis/typed-objects-explainer&quot;&gt;Typed Objects&lt;/a&gt; proposal which would allow JavaScript programmers to define structs and arrays of structs and all other amazing things that would come extremely handy here. Unfortunately champions working on that proposal moved away to work on other things leaving us with a choice to write these things either manually or in C++ 😞]&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;First, I changed &lt;code class=&quot;highlighter-rouge&quot;&gt;Mapping&lt;/code&gt; from a normal object into a wrapper that points into a gigantic typed array that would contain all our mappings.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;13.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatedColumn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalLine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalColumn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatedLine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatedColumn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalLine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalColumn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then I adjusted the parsing and sorting code to use it like this:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot; readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;BasicSourceMapConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_parseMappings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aSourceRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Allocate 4 MB memory buffer. This can be proportional to aStr size to&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// save memory for smaller mappings.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int32Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_allocationFinger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;';'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// All code that could previously access mappings directly now needs to&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// access them indirectly though memory.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;sortGenerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatedMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;previousGeneratedLineStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_allocateMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Arrays of mappings now store &quot;pointers&quot; instead of actual mappings.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;generatedMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;segmentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalMappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compareByOriginalPositionsNoSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;BasicSourceMapConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_allocateMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_allocationFinger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Do we need to grow memory buffer?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Int32Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_allocationFinger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7fffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Instead of null use INT32_MAX.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7fffffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Instead of null use INT32_MAX.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compareByOriginalPositionsNoSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onlyCompareOriginal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// originalLine&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// originalColumn&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onlyCompareOriginal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// generatedColumn&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// generatedLine&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mappingB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// name&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see readability does suffer quite a bit. Ideally I would prefer to allocate a temporary &lt;code class=&quot;highlighter-rouge&quot;&gt;Mapping&lt;/code&gt; object whenever I need to work with its fields. However such code style would lean heavily on VMs ability to eliminate allocations of these temporary wrappers via &lt;em&gt;allocation sinking&lt;/em&gt;, &lt;em&gt;scalar replacement&lt;/em&gt; or other similar optimizations. Unfortunately in my experiments SpiderMonkey could not deal with such code well enough and thus I opted for much more verbose and error prone code.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;[This sort of &lt;em&gt;almost&lt;/em&gt; manual memory management might seem rather foreign in JS. That’s why I think it might be worth mentioning here that “oxidized” &lt;code class=&quot;highlighter-rouge&quot;&gt;source-map&lt;/code&gt; actually &lt;a href=&quot;https://github.com/mozilla/source-map#sourcemapconsumerprototypedestroy&quot;&gt;requires users to manually manage&lt;/a&gt; its lifetime to ensure that WASM resources are freed]&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Rerunning benchmark confirms that alleviating GC pressure yields a nice improvement&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-4.png&quot; alt=&quot;After reworking allocation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-4-total.png&quot; alt=&quot;After reworking allocation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Interestingly enough on SpiderMonkey this approach improves both parsing &lt;em&gt;and&lt;/em&gt; sorting times, which came as a surprise to me.&lt;/p&gt;
&lt;h2 id=&quot;spidermonkey-performance-cliff&quot;&gt;SpiderMonkey Performance Cliff&lt;/h2&gt;
&lt;p&gt;As I was playing with this code I also discovered a confusing performance cliff in SpiderMonkey: when I increased the size of preallocated memory buffer from 4MB to 64MB to gauge reallocation costs, benchmark showed a sudden drop in performance after 7th iteration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-5-total.png&quot; alt=&quot;After reworking allocation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This looked like some sort of polymorphism to me, but I could not immediately figure out how changing the size of an array can result in a polymorphic behavior.&lt;/p&gt;
&lt;p&gt;Puzzled I reached out to a SpiderMonkey hacker &lt;a href=&quot;https://twitter.com/jandemooij&quot;&gt;Jan de Mooij&lt;/a&gt; who very &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1437471&quot;&gt;quickly identified&lt;/a&gt; an asm.js related optimization from 2012 as a culprit… then he went and removed it from SpiderMonkey so that nobody hits this confusing cliff again.&lt;/p&gt;

&lt;p&gt;Finally if we start using &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint8Array&lt;/code&gt; instead of a string for parsing we get yet another small improvement.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-6-total.png&quot; alt=&quot;After reworking allocation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;[This improvement is predicated on rewriting &lt;code class=&quot;highlighter-rouge&quot;&gt;source-map&lt;/code&gt; to parse mappings directly from typed arrays, instead of using JavaScript string and parsing it with &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.decode&lt;/code&gt;. I did not do such rewrite but I don’t anticipate any issues.]&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Here is where we started:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; d8 bench-shell-bindings.js
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;[Stats samples: 5, total: 24050 ms, mean: 4810 ms, stddev: 155.91063145276527 ms]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sm bench-shell-bindings.js
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;[Stats samples: 7, total: 22925 ms, mean: 3275 ms, stddev: 269.5999093306804 ms]
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and this is where we are finishing&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; d8 bench-shell-bindings.js
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;[Stats samples: 22, total: 25158 ms, mean: 1143.5454545454545 ms, stddev: 16.59358125226469 ms]
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sm bench-shell-bindings.js
&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;[Stats samples: 31, total: 25247 ms, mean: 814.4193548387096 ms, stddev: 5.591064299397745 ms]
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-final.png&quot; alt=&quot;After reworking allocation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-final-total.png&quot; alt=&quot;After reworking allocation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This is a factor of 4 improvement!&lt;/p&gt;
&lt;p&gt;It might be also worth noting that we are still sorting all &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings&lt;/code&gt; arrays eagerly even though this is not really needed. There are only two operations that use &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;allGeneratedPositionsFor&lt;/code&gt; which returns all generated positions for the given line in the original source;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eachMapping(..., ORIGINAL_ORDER)&lt;/code&gt; which iterates over all mappings in their original order.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If we assume that &lt;code class=&quot;highlighter-rouge&quot;&gt;allGeneratedPositionsFor&lt;/code&gt; is the most common operation and that we are only going to search within a handful of &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings[i]&lt;/code&gt; arrays then we can vastly improve parsing time by sorting &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings[i]&lt;/code&gt; arrays lazily whenever we actually need to search one of them.&lt;/p&gt;
&lt;p&gt;Finally a comparison of V8 from Jan 19th to V8 from Feb 19th with and without &lt;a href=&quot;https://github.com/v8/v8/wiki/Untrusted-code-mitigations&quot;&gt;untrusted code mitigations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-sort-v8-vs-v8-total.png&quot; alt=&quot;After reworking allocation&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Following the publication of this post on February 19th, I got few requests to compare &lt;code class=&quot;highlighter-rouge&quot;&gt;source-map&lt;/code&gt; with my tweaks against mainline oxidized &lt;code class=&quot;highlighter-rouge&quot;&gt;source-map&lt;/code&gt; that uses Rust and WASM.&lt;/p&gt;
&lt;p&gt;Quick look at Rust source code for &lt;a href=&quot;https://github.com/fitzgen/source-map-mappings/blob/master/src/lib.rs#L499-L566&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parse_mappings&lt;/code&gt;&lt;/a&gt; revealed that Rust version does not collect or sort original mappings eagerly, only equivalent of &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt; is produced and sorted. To match this behavior I adjusted my JS version by commenting out sorting of &lt;code class=&quot;highlighter-rouge&quot;&gt;originalMappings[i]&lt;/code&gt; arrays.&lt;/p&gt;
&lt;p&gt;Here are benchmark results for just parsing (which also includes sorting &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt;) and for parsing and then iterating over all &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-only-rust-wasm-vs-js.png&quot; alt=&quot;Parse only times&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mrale.ph/images/2018-02-03/parse-iterate-rust-wasm-vs-js.png&quot; alt=&quot;Parse and iterate times&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note that the comparison is slightly misleading because Rust version does not optimize sorting of &lt;code class=&quot;highlighter-rouge&quot;&gt;generatedMappings&lt;/code&gt; in the same way as my JS version does.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thus I am not gonna declare here that &lt;em&gt;«we have successfully reached parity with the Rust+WASM version»&lt;/em&gt;. However at this level of performance differences it might make sense to reevaluate if it is even worth the complexity to use Rust in &lt;code class=&quot;highlighter-rouge&quot;&gt;source-map&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;for-a-javascript-developer&quot;&gt;For a JavaScript Developer&lt;/h2&gt;
&lt;h3 id=&quot;profiler-is-your-friend&quot;&gt;Profiler Is Your Friend&lt;/h3&gt;
&lt;p&gt;Profiling and fine grained performance tracking in various shapes and forms is the best way to stay on top of the performance. It allows you to localize hot-spots in your code and also reveals potential issues in the underlying runtime. For this particular reason don’t shy away from using low-level profiling tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;perf&lt;/code&gt; - “friendly” tools might not be telling you the whole story because they hide lower level.&lt;/p&gt;
&lt;p&gt;Different performance problems require different approaches to profiling and visualizing collected profiles. Make sure to familiarize yourself with a wide spectrum of available tools.&lt;/p&gt;
&lt;h3 id=&quot;algorithms-are-important&quot;&gt;Algorithms Are Important&lt;/h3&gt;
&lt;p&gt;Being able to reason about your code in terms of abstract complexity is an important skill. Is it better to quick-sort one array with 100K elements or quick-sort 3333 30-element subarrays?&lt;/p&gt;
&lt;p&gt;A bit of handwavy mathematics can guide us (\(100000 \log 100000\) is 3 times larger than \(3333 \times 30 \log 30\)) - and the larger your data is the more important it usually is to be able to do a tiny bit of mathematics.&lt;/p&gt;
&lt;p&gt;In addition to knowing your logarithms, you need to posses a healthy amount of common sense and be able to evaluate how your code would be used on average and in the worst case: which operations are common, how the cost of expensive operations can be amortized, what the penalty for amortizing expensive operations?&lt;/p&gt;
&lt;h3 id=&quot;vms-are-work-in-progress-bug-developers&quot;&gt;VMs Are Work in Progress. Bug Developers!&lt;/h3&gt;
&lt;p&gt;Do not hesitate to reach out to developers to discuss strange performance issues. Not everything can be solved just by changing your own code. The Russian proverb says &lt;em&gt;«It’s not gods who make pots!»&lt;/em&gt;. VM developers are people and just like all others they make mistakes. They are also quite good at fixing those mistakes once you reach out to them. One mail or chat message or a DM might save you days of digging through foreign C++ code.&lt;/p&gt;
&lt;h3 id=&quot;vms-still-need-a-bit-of-help&quot;&gt;VMs Still Need a Bit of Help&lt;/h3&gt;
&lt;p&gt;Sometimes you need to write low-level code or know low-level details to squeeze the last drops of that performance juice out of JavaScript.&lt;/p&gt;
&lt;p&gt;One could prefer a better language level facilities to achieve that, but it remains to be seen if we ever get there.&lt;/p&gt;
&lt;h2 id=&quot;for-a-language-implementordesigner&quot;&gt;For a Language Implementor/Designer&lt;/h2&gt;
&lt;h3 id=&quot;clever-optimizations-must-be-diagnosable&quot;&gt;Clever Optimizations Must be Diagnosable&lt;/h3&gt;
&lt;p&gt;If your runtime has any sort of built-in clever optimizations then you need to provide a straightforward tool to diagnose when these optimizations fail and deliver an actionable feedback to the developer.&lt;/p&gt;
&lt;p&gt;In the context of languages like JavaScript this at minimum means that tools like profiler should also provide you with a way to inspect individual operations to figure out whether VM specializes them well and it it does not - what is the reason for that.&lt;/p&gt;
&lt;p&gt;This sort of introspection should not require building custom versions of the VM with magic flags and then treading through megabytes of undocumented debug output. This sort of tools should be right there, when you open your DevTools window.&lt;/p&gt;
&lt;h3 id=&quot;language-and-optimizations-must-be-friends&quot;&gt;Language and Optimizations Must Be Friends&lt;/h3&gt;
&lt;p&gt;Finally as a language designer you should attempt to foresee where the language lacks features which make it easier to write well performing code. Are your users on the market for a way to layout and manage memory manually? I am sure they are. If your language is even remotely popular users would eventually succeed in writing code that performs poorly. Weight the cost of adding language features that fix performance problems against solving the same performance problems by other means (e.g. by more sophisticated optimizations or by asking users to rewrite their code in Rust).&lt;/p&gt;
&lt;p&gt;This works the other way around too: if your language has features make sure that they perform reasonably well and their performance is both well understood by users and can be easily diagnosed. Invest in making your whole language optimized, instead of having a well performing core surrounded by poorly performing long tail of rarely used features.&lt;/p&gt;

&lt;p&gt;Most optimizations we discovered in this post fall into three different groups:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;algorithmic improvements;&lt;/li&gt;
&lt;li&gt;workarounds for implementation independent, but potentially language dependent issues;&lt;/li&gt;
&lt;li&gt;workarounds for V8 specific issues.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;No matter which language you write in you still need to think about algorithms. It is easier to notice when you are using worse algorithms in inherently “slower” languages, but just reimplementing the same algorithms in a “faster” language does not solve the problem even though it might alleviate the symptoms. Large part of the post is dedicated to optimizations from this group:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;sorting improvements achieved by sorting subsequences rather than the whole array;&lt;/li&gt;
&lt;li&gt;discussions of caching benefits or lack of them there-off.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The second group is represented by the monomorphisation trick. Performance suffering due to polymorphism is not a V8 specific issue. Neither it is a JS specific issue. You can apply monomorphisation across implementations and even languages. Some languages (Rust, actually) apply it in some form for you under the hood.&lt;/p&gt;
&lt;p&gt;The last and most controversial group is represented by argument adaptation stuff.&lt;/p&gt;
&lt;p&gt;Finally an optimization I did to mappings representation (packing individual objects into a single typed array) is an optimization that spans all three groups. It’s about understanding limitations and costs of a GCed system as whole. It’s also about understanding strength of existing JS VMs and utilizing it for our advantage.&lt;/p&gt;
&lt;p&gt;So… &lt;strong&gt;Why did I choose the title?&lt;/strong&gt; That’s because I think that the third group represents all issues which should and would be fixed over time. Other groups represent universal knowledge that spans across implementations and languages.&lt;/p&gt;
&lt;p&gt;Obviously each developer and each team are free to choose between spending &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; rigorous hours profiling and reading and thinking about their JavaScript code, or to spend &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; hours rewriting their stuff in a language &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However: (a) everybody needs to be fully aware that the choice even exists; and (b) language designers and implementors should work together on making this choice less and less obvious - which means working on language features and tools and reducing the need in “group №” optimizations.&lt;/p&gt;
</description>
<pubDate>Mon, 19 Feb 2018 16:47:13 +0000</pubDate>
<dc:creator>youngtaff</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://mrale.ph/blog/2018/02/03/maybe-you-dont-need-rust-to-speed-up-your-js.html</dc:identifier>
</item>
<item>
<title>Elm changed my mind about unpopular languages</title>
<link>https://blog.realkinetic.com/elm-changed-my-mind-about-unpopular-languages-190a23f4a834</link>
<guid isPermaLink="true" >https://blog.realkinetic.com/elm-changed-my-mind-about-unpopular-languages-190a23f4a834</guid>
<description>&lt;p name=&quot;55a0&quot; id=&quot;55a0&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Have you tried using software from way off the beaten path? Maybe you tried to make software for your &lt;a href=&quot;https://wiki.planet-casio.com/en/Fx-9860G_SDK&quot; data-href=&quot;https://wiki.planet-casio.com/en/Fx-9860G_SDK&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;graphing calculator&lt;/a&gt; and realized that you were one of five people to ever try that and there was no documentation. The experience sucks. You may be the kind of person who enjoys working through arcane bugs and zero docs (and sometimes, that’s me), but I decided that in professional software development, where shipping matters, I would stick to only the most widely used tools.&lt;/p&gt;
&lt;p name=&quot;2c6d&quot; id=&quot;2c6d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I made it a hard and fast rule: if I found two technologies that could solve a problem, I would choose the one more people were using. I didn’t want to include an obscure graphics API and then discover that no one had ever called &lt;code class=&quot;markup--code markup--p-code&quot;&gt;set_color()&lt;/code&gt; followed by &lt;code class=&quot;markup--code markup--p-code&quot;&gt;resize_window()&lt;/code&gt; (resizing is &lt;a href=&quot;https://bugreports.qt.io/browse/QTBUG-57608&quot; data-href=&quot;https://bugreports.qt.io/browse/QTBUG-57608&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;hard&lt;/a&gt;) and somehow those two functions in sequence cause a &lt;a href=&quot;https://bugreports.qt.io/browse/QTBUG-60185&quot; data-href=&quot;https://bugreports.qt.io/browse/QTBUG-60185&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;segfault&lt;/a&gt;. I don’t want to be the guy that finds a &lt;a href=&quot;https://github.com/golang/go/issues/1990&quot; data-href=&quot;https://github.com/golang/go/issues/1990&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;bug&lt;/a&gt; in the compiler. I just need to ship the product.&lt;/p&gt;
&lt;p name=&quot;0cb0&quot; id=&quot;0cb0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Part of my hesitation to use new platforms was borne from two years writing Go before it had a story for dependency management. The community fragmented into dozens of painful or mediocre solutions: gopkg.in, godep, glide, gb, etc. It took years for developers to “settle” (I use the word lightly) on godep, and it’s not until recently, as Go’s adoption reached an incredible high, that the experience is relatively smooth. I recently learned that the Go developers may be introducing an official solution: &lt;a href=&quot;https://github.com/golang/dep&quot; data-href=&quot;https://github.com/golang/dep&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;golang/dep&lt;/a&gt;.&lt;/p&gt;
&lt;p name=&quot;4f7f&quot; id=&quot;4f7f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;With my new rule in hand, I felt confident in my stack choices. When I looked for tools to build a web application, I considered only massively popular options like Bootstrap and jQuery. Each of these libraries has a bazillion monthly users, so all the bugs have been worked out, right? If I hit an issue, surely someone will have asked about it on StackOverflow. Smooth sailing. And hey, it works. You can go through the whole development lifecycle of the app and you’ll rarely encounter a situation where you can’t find a fix online in 5 seconds. Somebody else has already worked out the kinks. My strategy was flawless.&lt;/p&gt;
&lt;p name=&quot;a68e&quot; id=&quot;a68e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But when I joined Real Kinetic, I found out we were writing web client code in &lt;a href=&quot;http://elm-lang.org/&quot; data-href=&quot;http://elm-lang.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Elm&lt;/a&gt;. Elm? Really? The experimental language created for Haskell snobs who can’t handle stooping to the level of a regular blue-collar language like Javascript? I pictured Elm fans as hipsters standing around talking about how side effects in web applications are so 2008, bro. I definitely did not picture them as people who were shipping applications. Elm was not, in my mind, a match for a production environment.&lt;/p&gt;
&lt;p name=&quot;6c89&quot; id=&quot;6c89&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So for the first few weeks, I was skeptical. But then, about my third time running through the Elm guide, the &lt;a href=&quot;https://guide.elm-lang.org/architecture/&quot; data-href=&quot;https://guide.elm-lang.org/architecture/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;architecture&lt;/a&gt; finally clicked in my head. I got it. Wow. This is way better than Javascript. I can look at the code and predict its behavior, edge cases and all, with certainty. There are two reasons.&lt;/p&gt;
&lt;p name=&quot;0804&quot; id=&quot;0804&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;First, Elm has the natural predictability of a pure functional language; when you write Elm, the compiler forces you to consider every case. Consider the following example: You write some software for your friend to keep a digital catalog of the books in their library. They want a feature to produce a report that shows how many books are in the catalog, the copyright date of the oldest and newest book in the library, and the number of unique authors.&lt;/p&gt;
&lt;pre name=&quot;83bb&quot; id=&quot;83bb&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
type alias Book =&lt;br/&gt;{ isbn : String&lt;br/&gt;, title : String&lt;br/&gt;, authors : List String&lt;br/&gt;, copyright : Int&lt;br/&gt;, edition : Maybe String&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;469e&quot; id=&quot;469e&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
type alias LibraryReport =&lt;br/&gt;{ numBooks : Int&lt;br/&gt;, oldestCopyright : Int&lt;br/&gt;, newestCopyright : Int&lt;br/&gt;, uniqueAuthors : Int&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre name=&quot;597d&quot; id=&quot;597d&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
createReport : List Book -&amp;gt; LibraryReport&lt;br/&gt;createReport books =&lt;br/&gt;let&lt;br/&gt;copyrightYears =&lt;br/&gt;List.map .copyright books&lt;br/&gt;in&lt;br/&gt;{ numBooks = List.length books&lt;br/&gt;, oldestCopyright =&lt;br/&gt;List.minimum copyrightYears&lt;br/&gt;|&amp;gt; Maybe.withDefault 0&lt;br/&gt;, newestCopyright =&lt;br/&gt;List.maximum copyrightYears&lt;br/&gt;|&amp;gt; Maybe.withDefault 0&lt;br/&gt;, uniqueAuthors =&lt;br/&gt;books&lt;br/&gt;|&amp;gt; List.map .authors&lt;br/&gt;|&amp;gt; List.concat&lt;br/&gt;|&amp;gt; Set.fromList&lt;br/&gt;|&amp;gt; Set.size&lt;br/&gt;}
&lt;/pre&gt;
&lt;p name=&quot;994a&quot; id=&quot;994a&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;I can walk through some of this code more carefully. Consider this section:&lt;/p&gt;
&lt;pre name=&quot;81f9&quot; id=&quot;81f9&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
newestCopyright =&lt;br/&gt;List.maximum copyrightYears&lt;br/&gt;|&amp;gt; Maybe.withDefault 0
&lt;/pre&gt;
&lt;p name=&quot;db4f&quot; id=&quot;db4f&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Here we make use of two library functions: &lt;code class=&quot;markup--code markup--p-code&quot;&gt;List.maximum&lt;/code&gt; and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;Maybe.withDefault&lt;/code&gt;. &lt;code class=&quot;markup--code markup--p-code&quot;&gt;List.maximum&lt;/code&gt;’s purpose and usage is obvious, and its &lt;a href=&quot;https://github.com/elm-lang/core/blob/9a20adc5749c1e68986771c506f0bef7ade9903f/src/List.elm#L391&quot; data-href=&quot;https://github.com/elm-lang/core/blob/9a20adc5749c1e68986771c506f0bef7ade9903f/src/List.elm#L391&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;type signature&lt;/a&gt; is revealing.&lt;/p&gt;
&lt;pre name=&quot;6d65&quot; id=&quot;6d65&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
maximum : List comparable -&amp;gt; Maybe comparable
&lt;/pre&gt;
&lt;p name=&quot;a4e7&quot; id=&quot;a4e7&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;In this case, since our List is of type “List Int,” the maximum function returns a “Maybe Int.” The concept of Maybe will be familiar to people coming from Haskell (&lt;code class=&quot;markup--code markup--p-code&quot;&gt;Maybe&lt;/code&gt;), Rust (&lt;code class=&quot;markup--code markup--p-code&quot;&gt;Option&lt;/code&gt;), and Java (&lt;code class=&quot;markup--code markup--p-code&quot;&gt;Optional&lt;/code&gt;). “Maybe” is a container with either zero (&lt;code class=&quot;markup--code markup--p-code&quot;&gt;Nothing&lt;/code&gt;) or one (&lt;code class=&quot;markup--code markup--p-code&quot;&gt;Just x&lt;/code&gt;) elements. We can use the function &lt;code class=&quot;markup--code markup--p-code&quot;&gt;Maybe.withDefault&lt;/code&gt; to “unbox” a Maybe value, substituting a default value if the Maybe container is empty.&lt;/p&gt;
&lt;p name=&quot;65d1&quot; id=&quot;65d1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, this section of code retrieves the maximum value in the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;copyrightYears&lt;/code&gt; list, if it exists. If not, we just return zero. Elm requires that you think through all the edge cases. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;You must consider and specify what will happen in every case.&lt;/strong&gt; This is the reason Elm can realistically promise zero runtime exceptions.&lt;/p&gt;
&lt;p name=&quot;f819&quot; id=&quot;f819&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The second reason that Elm is better than Javascript is that Elm is a natural fit for the DOM. The feeling is so natural that it feels like HTML was designed for Elm, rather than the other way around. Part of the reason is that Elm uses the concept of a Virtual DOM, which you may be familiar with from React. (The Virtual DOM causes the view to be updated automatically as the program model changes.) Here’s how we might render this LibraryReport type to HTML:&lt;/p&gt;
&lt;pre name=&quot;3d86&quot; id=&quot;3d86&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
renderRow : String -&amp;gt; Int -&amp;gt; Html Msg&lt;br/&gt;renderRow title data =&lt;br/&gt;tr []&lt;br/&gt;[ td [] [ text title ]&lt;br/&gt;, td&lt;br/&gt;[ style&lt;br/&gt;[ ( &quot;text-align&quot;, &quot;right&quot; )&lt;br/&gt;, ( &quot;min-width&quot;, &quot;5rem&quot; )&lt;br/&gt;]&lt;br/&gt;]&lt;br/&gt;[ data |&amp;gt; toString |&amp;gt; text ]&lt;br/&gt;]
&lt;/pre&gt;
&lt;pre name=&quot;98a5&quot; id=&quot;98a5&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
viewReport : LibraryReport -&amp;gt; Html Msg&lt;br/&gt;viewReport report =&lt;br/&gt;div&lt;br/&gt;[ style&lt;br/&gt;[ ( &quot;background-color&quot;, &quot;#eee&quot; )&lt;br/&gt;, ( &quot;padding&quot;, &quot;3px&quot; )&lt;br/&gt;, ( &quot;margin&quot;, &quot;3rem&quot; )&lt;br/&gt;]&lt;br/&gt;]&lt;br/&gt;[ b [] [ text &quot;Library Report&quot; ]&lt;br/&gt;, table []&lt;br/&gt;[ renderRow &quot;Number of Books&quot; report.numBooks&lt;br/&gt;, renderRow &quot;Oldest Copyright&quot; report.oldestCopyright&lt;br/&gt;, renderRow &quot;Newest Copyright&quot; report.newestCopyright&lt;br/&gt;, renderRow &quot;Number of Unique Authors &quot; report.uniqueAuthors&lt;br/&gt;]&lt;br/&gt;]
&lt;/pre&gt;
&lt;p name=&quot;827f&quot; id=&quot;827f&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Note the way we composed &lt;code class=&quot;markup--code markup--p-code&quot;&gt;renderRow&lt;/code&gt; within &lt;code class=&quot;markup--code markup--p-code&quot;&gt;viewReport&lt;/code&gt;. The rendered result:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*Bfpi30J-B56glbZq.&quot; data-width=&quot;297&quot; data-height=&quot;150&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*Bfpi30J-B56glbZq.&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;9029&quot; id=&quot;9029&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Working in Elm is a series of pleasant surprises: an elegant command-line interface, a helpful compiler, an intuitive debugger.&lt;/p&gt;
&lt;p name=&quot;2842&quot; id=&quot;2842&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;These surprises include (spoilers):&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;af03&quot; id=&quot;af03&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;An elegant command-line interface in the form of elm-package and elm-make.&lt;/li&gt;
&lt;li name=&quot;48de&quot; id=&quot;48de&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Automatic code formatting with elm-format (similar to &lt;a href=&quot;https://blog.golang.org/go-fmt-your-code&quot; data-href=&quot;https://blog.golang.org/go-fmt-your-code&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;gofmt&lt;/a&gt;).&lt;/li&gt;
&lt;li name=&quot;779a&quot; id=&quot;779a&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Automatically enforced package semver.&lt;/li&gt;
&lt;li name=&quot;5121&quot; id=&quot;5121&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Elm-Reactor, a great way to playground new projects.&lt;/li&gt;
&lt;li name=&quot;6c1d&quot; id=&quot;6c1d&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Elm’s debug mode, with built-in &lt;a href=&quot;https://www.youtube.com/watch?v=vS3yzUo7l8Y&quot; data-href=&quot;https://www.youtube.com/watch?v=vS3yzUo7l8Y&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;time travel&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*Nvtop5fMg_OffOk3.&quot; data-width=&quot;667&quot; data-height=&quot;401&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*Nvtop5fMg_OffOk3.&quot;/&gt;&lt;/div&gt;
The compiler message that appears when you delete a field from a struct&lt;br/&gt;without updating the corresponding functions.
&lt;p name=&quot;6049&quot; id=&quot;6049&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The biggest downsides of the Elm language are that&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;e0a8&quot; id=&quot;e0a8&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;It’s a functional language and therefore the learning curve is steeper for programmers from imperative backgrounds.&lt;/li&gt;
&lt;li name=&quot;c2f2&quot; id=&quot;c2f2&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;You probably can’t use it on the server side (not as versatile as Javascript).&lt;/li&gt;
&lt;li name=&quot;f10c&quot; id=&quot;f10c&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;It lacks some of the higher-level capabilities of other functional languages like Haskell.&lt;/li&gt;
&lt;li name=&quot;5f0b&quot; id=&quot;5f0b&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;The strict dependency semantics put pressure on Elm library maintainers to upgrade immediately when their dependencies change, so as not to block downstream upgrades.&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;79cc&quot; id=&quot;79cc&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Notice anything missing from this list? Even though Elm is a small language with a small community, that doesn’t affect the Elm experience in a noticeable way.&lt;/p&gt;
&lt;p name=&quot;2a61&quot; id=&quot;2a61&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Now I strongly prefer Elm for any new client-facing web app. Elm has other surface benefits, like &lt;a href=&quot;http://elm-lang.org/blog/blazing-fast-html&quot; data-href=&quot;http://elm-lang.org/blog/blazing-fast-html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;great performance&lt;/a&gt;, &lt;a href=&quot;http://package.elm-lang.org/&quot; data-href=&quot;http://package.elm-lang.org/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;decent library support&lt;/a&gt;, and &lt;a href=&quot;https://guide.elm-lang.org/interop/javascript.html&quot; data-href=&quot;https://guide.elm-lang.org/interop/javascript.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;thoughtfully-designed&lt;/a&gt; JS interop, but for me, the upside of Elm is that it gives me confidence in my code.&lt;/p&gt;
</description>
<pubDate>Mon, 19 Feb 2018 16:09:50 +0000</pubDate>
<dc:creator>lyddonb</dc:creator>
<og:title>Elm changed my mind about unpopular languages – Real Kinetic Blog</og:title>
<og:url>https://blog.realkinetic.com/elm-changed-my-mind-about-unpopular-languages-190a23f4a834</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/0*Nvtop5fMg_OffOk3.</og:image>
<og:description>Have you tried using software from way off the beaten path?</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.realkinetic.com/elm-changed-my-mind-about-unpopular-languages-190a23f4a834?gi=2aec8a14225f</dc:identifier>
</item>
<item>
<title>A Hacker Has Wiped a Spyware Company’s Servers</title>
<link>https://motherboard.vice.com/en_us/article/3k7a5k/hacker-wipes-spyware-retina-x-flexispy</link>
<guid isPermaLink="true" >https://motherboard.vice.com/en_us/article/3k7a5k/hacker-wipes-spyware-retina-x-flexispy</guid>
<description>&lt;p&gt;Last year, a vigilante hacker broke into the servers of a company that sells spyware to everyday consumers and wiped their servers, deleting photos captured from monitored devices. A year later, the hacker has done it again.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Thursday, the hacker said he started wiping some cloud servers that belong to Retina-X Studios, a Florida-based company that sells spyware products targeted at parents and employers, but that are also used by people to spy on their partners without their consent.&lt;/p&gt;

&lt;p&gt;Retina-X was one of two companies that were breached last year in a series of hacks that &lt;a href=&quot;https://motherboard.vice.com/en_us/article/vvabv3/hackers-why-they-hit-stalkerware-flexispy-retina-x&quot; target=&quot;_blank&quot;&gt;exposed the fact that many otherwise ordinary people surreptitiously install spyware on their partners’ and children’s phones in order to spy on them.&lt;/a&gt; This software has been called “stalkerware” by some. This spyware allows people to have practically full access to the smartphone or computer of their targets. Whoever controls the software can see the photos the target snaps with their phone, read their text messages, or see what websites they go to, and track their location.&lt;/p&gt;
&lt;p&gt;A Retina-X spokesperson said in an email Thursday that the company hasn’t detected a new data breach since last year. Friday morning, after the hacker told us he had deleted much of Retina-X’s data, the company again said it had not been hacked. But Motherboard confirmed that the hacker does indeed have access to its servers.&lt;/p&gt;
&lt;p&gt;Friday, Motherboard created a test account using Retina-X’s PhoneSheriff spyware in order to verify the hacker’s claims. We downloaded and installed PhoneSheriff onto an Android phone and used the phone’s camera to take a photo of our shoes.&lt;/p&gt;
&lt;p&gt;“I have 2 photos of shoes,” the hacker told us moments later.&lt;/p&gt;
&lt;p&gt;The hacker also described other photos we had on the device, told us the email account we used to register the account, and then deleted the data from our PhoneSheriff account.&lt;/p&gt;
&lt;p&gt;“None of this should be online at all,” the hacker told Motherboard, claiming that he had deleted a total of 1 terabyte of data.&lt;/p&gt;

&lt;p&gt;“Aside from the technical flaws, I really find this category of software disturbing. In the US, it's mainly targeted to parents,” the hacker said, explaining his motivations for going after Retina-X. “Edward Snowden has said that privacy is what gives you the ability to share with the world who you are on your own terms, and to protect for yourself the parts of you that you're still experimenting with. I don't want to live in a world where younger generations grow up without that right.”&lt;/p&gt;
&lt;p&gt;In the first Retina-X data breach last year, the hacker was able to access private photos, messages, and other sensitive data from people who were monitored using one of Retina-X’s products. The private data was stored in containers provided by cloud provider Rackspace. The hacker found the key and credentials to those containers inside the Android app of PhoneSheriff, one of Retina-X’s spyware products. The API key and the credentials were stored in plaintext, meaning the hacker could take them and gain access to the server.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;This time, the hacker said the API key was obfuscated, but it was still relatively easy for him to obtain it and break in again. Because he feared another hacker getting in and then posting the private photos online, the hacker decided to wipe the containers again.&lt;/p&gt;
&lt;p&gt;Shortly after Motherboard first reported the Retina-X breach in February of last year, a second hacker independently approached us, and said they already had been inside the company’s systems for some time. The hacker provided other internal files from Retina-X, some of which Motherboard verified at the time.&lt;/p&gt;

&lt;p&gt;Answering a series of questions about what Retina-X changed after last year’s hack, a spokesperson wrote in an email that “we have been taking steps to enhance our data security measures. Sharing details of security measures could only serve to potentially compromise those efforts.”&lt;/p&gt;
&lt;p&gt;“Retina-X Studios is committed to protecting the privacy of its users and we have cooperated with investigating authorities,” the spokesperson wrote. “Unfortunately, as we are well aware, the perpetrators of these egregious actions against consumers and private companies are often never identified and brought to justice.”&lt;/p&gt;
&lt;div class=&quot;article__media&quot;&gt;&lt;img src=&quot;https://vice-web-statics-cdn.vice.com/images/blank.png&quot; alt=&quot;&quot; class=&quot;col-12-xs&quot; data-src=&quot;https://video-images.vice.com/_uncategorized/1518807199861-Screen-Shot-2018-02-16-at-13143-PM.png&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;At the end of 2016, the hacker gained access to the servers of Retina-X, which makes &lt;a href=&quot;http://www.retinax.com/products.php&quot; target=&quot;_blank&quot;&gt;several spyware products&lt;/a&gt;, and started collecting data and moving inside the company’s networks. Weeks later, the hacker shared samples of some of the data he accessed and stole with Motherboard. But he didn’t post any of it online. Instead, he wiped some of the servers he got into, as &lt;a href=&quot;http://www.phonesheriff.com/blog/retina-x-studios-server-breached-by-hackers/&quot; target=&quot;_blank&quot;&gt;the company later admitted&lt;/a&gt; in February of 2017.&lt;/p&gt;
&lt;p&gt;The new alleged hack comes just a few days after the hacker resurfaced online. At the beginning of February, the hacker started to dump online some of the old data he stole from Retina-X in late 2016. The hacker is now using a &lt;a href=&quot;https://motherboard.vice.com/en_us/article/783akg/mastodon-is-like-twitter-without-nazis-so-why-are-we-not-using-it&quot; target=&quot;_blank&quot;&gt;Mastodon&lt;/a&gt; account called “Precise Buffalo” to share &lt;a href=&quot;https://social.tchncs.de/@precisebuffalo/99465546218658774&quot; target=&quot;_blank&quot;&gt;screenshots&lt;/a&gt; recounting how he broke in, &lt;a href=&quot;https://social.tchncs.de/@precisebuffalo/99477110587656365&quot; target=&quot;_blank&quot;&gt;as well as raw data&lt;/a&gt; from the breach, though no private data from victims and targets.&lt;/p&gt;

&lt;p&gt;In February of 2017, &lt;a href=&quot;https://motherboard.vice.com/en_us/topic/when-spies-come-home&quot; target=&quot;_blank&quot;&gt;a Motherboard investigation&lt;/a&gt; based on data provided by hackers showed that tens of thousands of people—teachers, construction workers, lawyers parents, jealous lovers—use stalkerware apps. Some of those people use the stalkerware apps to spy on their own partners without their consent, something that is illegal in the United States and &lt;a href=&quot;https://motherboard.vice.com/en_us/article/bmbpvv/i-see-you-a-domestic-violence-survivor-talks-about-being-surveilled-by-her-ex&quot; target=&quot;_blank&quot;&gt;is often associated with domestic abuse and violence&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Retina-X was not the only spyware company hacked last year. Other hackers also breached &lt;a href=&quot;https://motherboard.vice.com/en_us/article/aemeae/meet-flexispy-the-company-getting-rich-selling-stalkerware-to-jealous-lovers&quot; target=&quot;_blank&quot;&gt;FlexiSpy&lt;/a&gt;, an infamous provider of spyware that has actively marketed its apps to jealous lovers. At the time, &lt;a href=&quot;https://motherboard.vice.com/en_us/article/vvabv3/hackers-why-they-hit-stalkerware-flexispy-retina-x&quot; target=&quot;_blank&quot;&gt;the hackers promised that their two victims—FlexiSpy and Retina-X—were only the first in line&lt;/a&gt;, and that they would target more companies that sell similar products.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Additional reporting by Joseph Cox and Jason Koebler.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Read more:&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;https://motherboard.vice.com/en_us/article/nejmnz/when-technology-takes-hostages-the-rise-of-stalkerware&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;&lt;em&gt;When Technology Takes Hostages: The Rise of 'Stalkerware'&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Got a tip? You can contact this reporter securely on Signal at +1 917 257 1382, OTR chat at lorenzo@jabber.ccc.de, or email lorenzo@motherboard.tv&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Get six of our favorite Motherboard stories every day&lt;/em&gt;&lt;/strong&gt; &lt;a href=&quot;http://motherboard.club/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;&lt;em&gt;by signing up for our newsletter.&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 19 Feb 2018 15:46:32 +0000</pubDate>
<dc:creator>petethomas</dc:creator>
<og:type>article</og:type>
<og:title>A Hacker Has Wiped a Spyware Company’s Servers—Again</og:title>
<og:image>https://video-images.vice.com/articles/5a8482afc9018c5dfa64377a/lede/1518804885488-IMG_4152.jpeg?crop=1xw:0.7494xh;0xw,0.0676xh&amp;resize=1200:*</og:image>
<og:url>https://motherboard.vice.com/en_us/article/3k7a5k/hacker-wipes-spyware-retina-x-flexispy</og:url>
<og:description>&quot;I don't want to live in a world where younger generations grow up without privacy.&quot;</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://motherboard.vice.com/en_us/article/3k7a5k/hacker-wipes-spyware-retina-x-flexispy</dc:identifier>
</item>
</channel>
</rss>