<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Farewell, Google Maps</title>
<link>https://www.inderapotheke.de/blog/farewell-google-maps</link>
<guid isPermaLink="true" >https://www.inderapotheke.de/blog/farewell-google-maps</guid>
<description>&lt;p&gt;&lt;span&gt;Google decided to make Maps its next billion dollar business by raising prices 14 times and decreasing free usage limit almost 30 times, all with minimal notice period. Fortunately, the move energised map competitors. Apple Maps, Mapbox, TomTom - which alternative is best for mid- and larger sites?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(this is an English version of the article based on our &lt;a href=&quot;https://www.gdziepolek.pl/blog/pozegnanie-z-google-maps&quot; target=&quot;_blank&quot;&gt;GdziePoLek.pl&lt;/a&gt; site in Poland)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Our startup allows patients to find medicines they need in brick-and-mortar pharmacies. Even from the name (&quot;&lt;span&gt;where I get my meds&lt;/span&gt;&quot; in English) you could tell that &lt;span&gt;location&lt;/span&gt; is an important part of it. It is easy to explain how the service works through a single picture, and Google Maps has always been a prominent background of it:&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;Typical web page for our service: showing availability of the product&lt;/p&gt;
&lt;img src=&quot;https://whereigetmymeds.azureedge.net/img/2018/maps-intro.jpg&quot;/&gt;&lt;p&gt;Of course, we always knew that as we grew larger, there would be cost to using Google Maps.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Up till now, free usage limit of about 750 thousand map loads per month was well aligned with scale when one can expect to generate revenues that cover the cost. Price for commercial usage ($0.5 for 1000 map loads) was not high enough to consider alternatives.&lt;/p&gt;
&lt;p&gt;In June, however, we got an email as a &quot;high usage&quot; client of Google Maps:&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;Email from Google&lt;/p&gt;
&lt;img src=&quot;https://whereigetmymeds.azureedge.net/img/2018/maps-email.jpg&quot;/&gt;&lt;p&gt;After a conference call with Google Maps customer service (who, contrary to the email, offered no discounts or credits whatsoever) we realised that price increases are huge:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Current free usage limit of &lt;span&gt;750k&lt;/span&gt; requests monthly turns into ca. &lt;span&gt;28k&lt;/span&gt; requests (almost 30 times less)&lt;/li&gt;
&lt;li&gt;Current &lt;span&gt;$0.5&lt;/span&gt; for commercial usage becomes &lt;span&gt;$7&lt;/span&gt; (14 times more), $5.60 with high volume&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Importantly, prices are the same from US to the Africa, despite the fact that revenue generation is vastly different in most developed countries compared to the others. We know it well from comparing Polish market to Germany, as we expand there. &lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;Comparison of Google Maps monthly bill before and after price hike&lt;/p&gt;
&lt;img src=&quot;https://whereigetmymeds.azureedge.net/img/2018/maps-monthly-cost-en.jpg&quot;/&gt;&lt;p&gt;If we maintained current monthly usage of both maps and Places (ie. location search), the cost of Google Maps would be multiple times higher than the total cost of all other infrastructure.&lt;/p&gt;
&lt;h2&gt;Comparing visuals and level of detail &lt;/h2&gt;
&lt;p&gt;Google Maps is objectively the best product on its market, in many regards positioned light years ahead of its competitors. &lt;a href=&quot;https://www.justinobeirne.com/google-maps-moat&quot; target=&quot;_blank&quot;&gt;Excellent analysis&lt;/a&gt; of how advanced are Google's maps compared to the others was published by Justin O’Beirne.&lt;/p&gt;
&lt;p&gt;The good news is that even though maps are such an important part of our user interface, they serve no more advanced purpose than effectively visualising locations of pharmacies. Therefore we do not use advanced functions which are most likely to have proprietary APIs, such as satellite images, routes calculation and others.&lt;/p&gt;
&lt;p&gt;What's important is visual quality of the maps and level of detail that they provide in the territory where we operate, which is mostly Poland and, hopefully soon, Germany. Below comparison of how the same location in the centre of Warsaw looks like with different map providers:&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;Same pharmacy in Warsaw on various maps&lt;/p&gt;
&lt;img src=&quot;https://whereigetmymeds.azureedge.net/img/2018/maps_warsaw_zv0dox.jpg&quot;/&gt;&lt;p class=&quot;caption&quot;&gt;Where it was possible we overlayed our custom markers&lt;/p&gt;
&lt;p&gt;On the first glance, it seems that almost all providers would provide satisfactory experience as far as centre of Warsaw is concerned. One exception might be Azure Maps, which was made available just in the previous months. To be fair, Microsoft claims that perceived emptiness of its maps is intentional and for the benefit of its large corporate partners, who like to overlay a large amount of their own information on the maps.&lt;/p&gt;
&lt;p&gt;Perhaps centre of Warsaw might not be representative of the whole country, however, and map quality for smaller cities might be worse. Therefore we also compared views in the smaller town (Konstancin):&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;Pharmacy in vicinity Konstancin-Jeziorna&lt;/p&gt;
&lt;img src=&quot;https://whereigetmymeds.azureedge.net/img/2018/maps_konstancin_od0pyx.jpg&quot;/&gt;&lt;p&gt;Despite our initial concerns, it turned out that we are not hostage to Google Maps after all and many alternatives look surprisingly decent in Poland.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Added:&lt;/span&gt; often there is an opportunity to create a custom map style, which we didn't explore as we don't use custom maps on our site. But it's clearly an important thing for Mapbox, where mentions of various editors confused us slightly at pricing (below), and MapTiler (customisation tutorial &lt;a href=&quot;https://www.maptiler.com/how-to/make-own-map-design/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Comparing prices&lt;/h2&gt;
&lt;p&gt;Map providers use different pricing models, which makes direct comparison of prices difficult. Here is an overview of the options for paid usage (not taking into account free usage allowance):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Google Maps&lt;/span&gt; - $7 for each 1000 map loads irrespective of map size or zooming/panning by the user ($5.60 with discount for high volume)&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Mapbox&lt;/span&gt; - $0.50 for each &quot;map view&quot;, which despite the name is not a map view, but request of 4 or 15 map tiles (depending on map type), rounded up&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Azure Maps&lt;/span&gt; - $0.50 for 1000 &quot;transactions&quot;, where transaction is equal to 15 map tiles &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;TomTom&lt;/span&gt; - $0.50 for 1000 “transactions” ($0.40 with highest volume discounts), each transaction is equal to 15 map tiles&lt;/li&gt;
&lt;li&gt;&lt;span&gt;HERE&lt;/span&gt; - pricing is by bundles, Standard bundle amounts to  $0.50 for 1000 “transactions” (15 tiles)&lt;/li&gt;
&lt;li&gt;&lt;span&gt;MapTiler&lt;/span&gt; - $0.05 for each map tile&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Apple Maps&lt;/span&gt; - so far is in beta and offers a generous free usage allowance, no commercial pricing available&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We find Google model most transparent (leaving aside the price), because every web site page view with a map on it will have the same price.&lt;/p&gt;
&lt;p&gt;In case of paying by each map tile, as with MapTiler, things are getting more complicated. How many tiles are present on each map depends on its size, which in case of responsive sites might be different for each user depending on the screen resolution. Apart from that, user might move map around or zoom, drawing further tiles.&lt;/p&gt;
&lt;p&gt;The least transparent we found the pricing terms of Mapbox. Not only it's unclear how many tiles are calculated for each &quot;map view&quot;, the term itself is misleading (other companies use &quot;transaction&quot;, which doesn't imply that it's a full cost for map view like with Google Maps).&lt;/p&gt;
&lt;p&gt;From looking at pricing terms it's hard to reason what would be the actual daily cost for the whole site. Our startup, for example, uses both small maps on pharmacies' profiles, as well as huge full-screen maps presenting search results - but only for desktop users.&lt;/p&gt;
&lt;h2&gt;Short list of alternatives&lt;/h2&gt;
&lt;p&gt;Which maps should we investigate deeper?&lt;/p&gt;
&lt;p&gt;Some options we could reject quickly for various reasons. &lt;span&gt;OpenStreetMap&lt;/span&gt; is not supposed to be directly used by commercial sites. &lt;span&gt;Apple Maps&lt;/span&gt;, even though we wouldn't mind having Apple logo on our site somewhere, was just released as beta and requires Apple developer account to test properly.&lt;/p&gt;
&lt;p&gt;We would love to be able to use &lt;span&gt;Azure Maps&lt;/span&gt; along with other services that we are already using on Azure. However, proprietary Javascript API leaves much to be desired, even when one tries to implement the simplest use cases (eg. custom markers).&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HERE&lt;/span&gt; maps seem a poor match visually for our site (too stark), have proprietary interface and we prefer pay-as-you-go billing to bundles. But a large site that we know decided to migrate to HERE, so we will see how it works for them.&lt;/p&gt;
&lt;p&gt;We find the most attractive option to be using one common, open source javascript library - like &lt;span&gt;Leaflet&lt;/span&gt; - allowing seamless changes of underlying providers of the actual map tiles.&lt;/p&gt;
&lt;p&gt;Such opportunity can be had if we went with &lt;span&gt;Mapbox&lt;/span&gt; or &lt;span&gt;MapTiler&lt;/span&gt;, and perhaps TomTom, which, however, uses a slightly modified Leaflet client and requires pre-paid billing instead of pay-as-you-go which we prefer.&lt;/p&gt;
&lt;h2&gt;Comparing actual daily cost for our site&lt;/h2&gt;
&lt;p&gt;We upgraded our web application in order to be able to switch map provider by a single click in the administration console. Then we watched amount of resources that we consumed daily in case of each short-listed map provider, ie. Google Maps, Mapbox and MapTiler.&lt;/p&gt;
&lt;p&gt;Here is how it went.&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;Comparing the actual cost for maps on a single day (15,000 total site visits, of which not all might involve maps) &lt;/p&gt;
&lt;img src=&quot;https://whereigetmymeds.azureedge.net/img/2018/maps-daily-cost-en.jpg&quot;/&gt;&lt;p class=&quot;caption&quot;&gt;Comparison is specific to GdziePoLek.pl and its usage of maps across the site, as well as screen sizes of its users, resulting in maps of different sizes &lt;/p&gt;
&lt;p&gt;Google Maps would have most favorable model for users of big and intensively interacted with maps, like us, but radical price increase puts the cost way higher than alternatives.&lt;/p&gt;
&lt;p&gt;As it turned, cost of using Mapbox and MapTiler in our case is comparable, despite slightly different billing model.&lt;/p&gt;
&lt;p&gt;Mapbox has more resources to its disposal - 400 employees according to LinkedIn, compared to MapTiler's 7 team members - thanks to Softbank's $164m investment. On the other hand, having acquired that much capital, the company is branching out in several directions (autonomous driving, VR...) which for a user dependent on its maps service might be somehow concerning. Therefore we will keep using both services in parallel.&lt;/p&gt;
&lt;h2&gt;Lessons learned&lt;/h2&gt;
&lt;p&gt;If not for radical price hike, we would not embark upon looking for Google Maps replacement, as it would be clearly a &quot;not broken - don't repair it&quot; situation. &lt;/p&gt;
&lt;p&gt;Sudden change of policy by Google, which is directed specifically at startups (as smaller web sites should largely remain below even the new lower thresholds), is surely an unpleasant surprise for us and does not create much trust in Google as a vendor. In the future we would therefore keep our distance from &lt;span&gt;Google Cloud&lt;/span&gt; and avoid deep integration with any Google services on which it can pull a similar trick. For example we would be wary on taking free &lt;span&gt;Google Analytics&lt;/span&gt; for granted.&lt;/p&gt;
&lt;p&gt;On a positive note we were impressed by the quality of open source code for operating maps (Leaflet). Some advanced functions which we had implement ourselves on Google side were readily available in Leaflet.&lt;/p&gt;
&lt;p&gt;For people starting development of a startup making heavy use of maps, we would recommend using Leaflet and independent map vendors and avoiding dependence on Google.&lt;/p&gt;
</description>
<pubDate>Thu, 19 Jul 2018 20:36:38 +0000</pubDate>
<dc:creator>ScottWRobinson</dc:creator>
<og:title>Farewell, Google Maps</og:title>
<og:description>Google decided to make Maps its next billion dollar business by raising prices 14 times and decreasing free usage limit almost 30 times, all with minimal notice period. Fortunately, the move energised map competitors. Apple Maps, Mapbox, TomTom - which alternative is best for mid- and larger sites?</og:description>
<og:url>https://www.inderapotheke.de/blog/farewell-google-maps</og:url>
<og:image>https://whereigetmymeds.azureedge.net/img/2018/maps-og.jpg</og:image>
<dc:language>de</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.inderapotheke.de/blog/farewell-google-maps</dc:identifier>
</item>
<item>
<title>JavaScript fundamentals before learning React</title>
<link>https://www.robinwieruch.de/javascript-fundamentals-react-requirements/</link>
<guid isPermaLink="true" >https://www.robinwieruch.de/javascript-fundamentals-react-requirements/</guid>
<description>&lt;header&gt;
&lt;/header&gt;&lt;div class=&quot;text-center&quot;&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://www.instagram.com/rwieruch&quot; class=&quot;instagram-button-follow&quot;&gt;Follow&lt;/a&gt;   &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://twitter.com/intent/follow?screen_name=rwieruch&quot; class=&quot;generic-button-follow&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/rwieruch.svg?style=social&amp;amp;logo=twitter&amp;amp;label=Follow&quot; alt=&quot;Follow on Twitter&quot;/&gt;&lt;/a&gt;   &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/rwieruch&quot; class=&quot;generic-button-follow&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/followers/rwieruch.svg?style=social&amp;amp;logo=github&amp;amp;label=Follow&quot; alt=&quot;Follow on GitHub&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p class=&quot;text-muted text-uppercase mb-small text-center&quot;&gt;&lt;time datetime=&quot;2018-07-18&quot; itemprop=&quot;datePublished&quot;&gt;July 18, 2018&lt;/time&gt;&lt;span class=&quot;hidden-xs hidden-sm&quot;&gt;- &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/rwieruch/blog_robinwieruch_content/blob/master/javascript-fundamentals-react-requirements.md&quot;&gt;Edit this Post on GitHub&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;This month, all articles are sponsored by TRUMPF Laser GmbH. The german company I worked with is using a sophisticated React with GraphQL and .NET tech stack. They are hiring eager developers for their sites in &lt;a target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot; href=&quot;https://job-application.trumpf.com/9027-full-stack-softwareentwickler-m-w-c-mobile-web-am-standort-in-berlin/de/job.html&quot;&gt;Berlin&lt;/a&gt; and &lt;a target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot; href=&quot;https://job-application.trumpf.com/6433-full-stack-softwareentwickler-m-w-c-mobile-web/de/job.html&quot;&gt;Schramberg&lt;/a&gt;. If you are interested to bring highly configurable laser device user interfaces to their clients all over the world, write them a striking application with a cover letter.&lt;/em&gt;&lt;/div&gt;
&lt;div class=&quot;post-image-primary&quot;&gt;
&lt;div class=&quot;pinterest-pinner-wrapper&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;

&lt;img class=&quot;img-lazy img-responsive&quot; data-lazy-src=&quot;/img/posts/javascript-fundamentals-react-requirements/banner.jpg&quot; data-is-src-set=&quot;is-src-set&quot; alt=&quot;react js requirements&quot; itemprop=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After all my teachings about React, be it online for a larger audience or on-site for companies transitioning to web development and React, I always come to the conclusion that React is all about JavaScript. Newcomers to React but also myself see it as an advantage, because you carry your JavaScript knowledge for a longer time around compared to your React skills.&lt;/p&gt;
&lt;p&gt;During my workshops a greater part of the material is about JavaScript and not React. Most of it boils down to JavaScript ES6 and beyond features and syntax, but also ternary operators, shorthand versions in the language, the &lt;code&gt;this&lt;/code&gt; object, JavaScript built-in functions (map, reduce, filter) or more general concepts such as composability, reusability, immutability or higher-order functions. These are the fundamentals, which you don’t need necessarily to master before starting with React, but which will definitely come up while learning or practicing it.&lt;/p&gt;
&lt;p&gt;The following walkthrough is my attempt giving you an almost extensive yet concise list about all the different JavaScript functionalities to complement your React application. If you have any other things which are not in the list, just leave a comment for this article and I will keep it up to date.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;toc&quot;&gt;Table of Contents&lt;/h2&gt;
&lt;div class=&quot;box-inline col-md-12&quot;&gt;
&lt;div class=&quot;col-md-12 text-center&quot;&gt;
&lt;h2 class=&quot;newsletter&quot;&gt;The Road to learn React&lt;/h2&gt;
&lt;div class=&quot;col-md-4&quot;&gt;&lt;img class=&quot;img-lazy img-responsive&quot; data-lazy-src=&quot;https://www.robinwieruch.de/img/page/cover.png&quot; alt=&quot;package&quot;/&gt;&lt;/div&gt;
&lt;p class=&quot;lead&quot;&gt;Build a Hacker News App along the way. No setup configuration. No tooling. No Redux. Plain React in 190+ pages of learning material. Pay what you want like &lt;strong&gt;33.000+ readers&lt;/strong&gt;.&lt;/p&gt;
&lt;a class=&quot;btn btn-template-main&quot; href=&quot;https://www.getrevue.co/profile/rwieruch&quot;&gt;Get the Book &lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-javascript&quot;&gt;Entering React after learning JavaScript&lt;/h2&gt;
&lt;p&gt;When you enter the world of React, the usual suspect is &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt; for starting a React project. After you have set up your project, you are confronted with the following &lt;strong&gt;React class component&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;logo&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'./logo.svg'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;'./App.css'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;App&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;header&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;App-header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;logo&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;App-logo&quot;&lt;/span&gt; &lt;span&gt;alt&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;logo&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;App-title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Welcome&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/header&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;App-intro&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;To&lt;/span&gt; &lt;span&gt;get&lt;/span&gt; &lt;span&gt;started&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;edit&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/code&amp;gt; and save to reload.&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/p&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Arguably, a React class component may not be the best starting point. There are lots of things to digest for newcomers which are not necessarily React: class statements, class methods and inheritance. Also the import statements are only adding complexity when learning React. Even though the main focus point should be JSX (React’s syntax) in the very beginning, often all the things around demand explanations as well. This article is supposed to shed some light into all the things around, most of it JavaScript, without worrying too much about React.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-javascript-classes&quot;&gt;React and JavaScript Classes&lt;/h2&gt;
&lt;p&gt;Being confronted with a React class component in the beginning, requires the prior knowledge about JavaScript classes. One would assume that this is given knowledge, but it isn’t, because JavaScript classes are fairly new in the language. Previously, there was only &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;JavaScript’s prototype chain&lt;/a&gt; which could be used for inheritance too. JavaScript classes build up on top of the prototypical inheritance giving the whole thing a simpler representation.&lt;/p&gt;
&lt;p&gt;One way to define a React component is using a JavaScript class. In order to understand JavaScript classes, you can take some time learning about them without React.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Developer&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;firstname&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;lastname&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;getName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;firstname&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;' '&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;lastname&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; &lt;span&gt;me&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Developer&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'Robin'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;'Wieruch'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

&lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A class describes an &lt;strong&gt;entity&lt;/strong&gt; which is used as a blueprint to create an &lt;strong&gt;instance&lt;/strong&gt; of this entity. Once an instance of the class gets created with the &lt;code&gt;new&lt;/code&gt; statement, the constructor of the class is called which instantiates the instance of the class. Therefore, a class can have properties which are usually located in its constructor. In addition, class methods (e.g. &lt;code&gt;getName()&lt;/code&gt;) are used to read (or write) data of the instance. The instance of the class is represented as the &lt;code&gt;this&lt;/code&gt; object within the class, but outside the instance is just assigned to a JavaScript variable.&lt;/p&gt;
&lt;p&gt;Usually classes are used for inheritance in object-oriented programming. They are used for the same in JavaScript whereas the &lt;code&gt;extends&lt;/code&gt; statement can be used to inherit with one class from another class. The more specialized class with the &lt;code&gt;extends&lt;/code&gt; statements inherits all the abilities from the more general class, but can add its specialized abilities to it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Developer&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;firstname&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;lastname&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;getName&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;firstname&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;' '&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;lastname&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;ReactDeveloper&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Developer&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;getJob&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'React Developer'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; &lt;span&gt;me&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;ReactDeveloper&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'Robin'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;'Wieruch'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/span&gt;
&lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getName&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;
&lt;span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;me&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getJob&lt;/span&gt;&lt;span&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically that’s all it needs to fully understand React class components. A JavaScript class is used for defining a React component, but as you can see, the React component is only a React component because it inherits all the abilities from the React Component class which is imported from the React package.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Welcome&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s why the &lt;code&gt;render()&lt;/code&gt; method is mandatory in React class components: The React Component from the imported React package instructs you to use it for displaying something in the browser. Furthermore, without extending from the React Component, you wouldn’t be able to use other &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://reactjs.org/docs/react-component.html&quot;&gt;lifecycle methods&lt;/a&gt; (including the &lt;code&gt;render()&lt;/code&gt; method). For instance, there wouldn’t be a &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle method, because the component would be an instance of a vanilla JavaScript class. And not only the lifecycle methods would go away, React’s API methods such as &lt;code&gt;this.setState()&lt;/code&gt; for local state management wouldn’t be available as well.&lt;/p&gt;
&lt;p&gt;However, as you have seen, using a JavaScript class is beneficial for extending the general class with your specialized behavior. Thus you can introduce your own class methods or properties.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;  &lt;span&gt;getGreeting&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'Welcome to React'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;}&lt;/span&gt;
&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;getGreeting&lt;/span&gt;&lt;span&gt;()}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;&lt;/span&gt;
&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you know why React uses JavaScript classes for defining React class components. They are used when you need access to React’s API (lifecycle methods, &lt;code&gt;this.state&lt;/code&gt; and &lt;code&gt;this.setState()&lt;/code&gt;). In the following, you will see how React components can be defined in a different way, without using a JavaScript class, because you may not need always class methods, lifecycle methods and state.&lt;/p&gt;
&lt;p&gt;After all, JavaScript classes welcome one using inheritance in React, which isn’t a desired outcome for React, &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://reactjs.org/docs/composition-vs-inheritance.html&quot;&gt;because React favors composition over inheritance&lt;/a&gt;. So the only class you should extend from for your React components should be the official React Component.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-arrow-functions&quot;&gt;Arrow Functions in React&lt;/h2&gt;
&lt;p&gt;When teaching someone about React, I explain &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;JavaScript arrow functions&lt;/a&gt; pretty early. They are one of JavaScript’s language additions in ES6 which pushed JavaScript forward in functional programming.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;// JavaScript ES5 function&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getGreeting&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'Welcome to JavaScript'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;// JavaScript ES6 arrow function with body&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;getGreeting&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;()&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'Welcome to JavaScript'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;// JavaScript ES6 arrow function without body and implicit return&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;getGreeting&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;()&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;
  &lt;span&gt;'Welcome to JavaScript'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JavaScript arrow functions are often used in React applications for keeping the code concise and readable. I love them, teach them early, but always try to refactor my functions from JavaScript ES5 to ES6 functions along the way. At some point, when the differences between JavaScript ES5 functions and JavaScript ES6 functions are clear, I stick to the JavaScript ES6 way of doing it with arrow functions. However, I always see that too many different syntaxes can be overwhelming for React newcomers. So I try to make the different characteristics of JavaScript functions clear before going all-in using them in React. In the following sections, you will see how JavaScript arrow functions are commonly used in React.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-javascript-functional-components&quot;&gt;Functions as Components in React&lt;/h2&gt;
&lt;p&gt;React uses the best of different programming paradigms. That’s only possible because JavaScript is a many-sided programming language. On the object-oriented programming side, React’s class components are a great way of leveraging the abilities of JavaScript classes (inheritance for the React component API, class methods and class properties such as &lt;code&gt;this.state&lt;/code&gt;). On the other side, there are lots of concepts from functional programming used in React (and its ecosystem) too. For instance, &lt;strong&gt;React’s functional stateless components&lt;/strong&gt; are another way of defining components in React. The question which led us functional stateless components in React: What if components could be used like functions?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;view&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s a function (functional) which receives an input (e.g. props) and returns the displayed HTML elements (view). It doesn’t need to manage any state (stateless) and doesn’t need to be aware about any methods (class methods, lifecycle methods). Under the hood, the function only needs to use the rendering mechanism of the &lt;code&gt;render()&lt;/code&gt; method from React components. That’s when functional stateless components were introduced.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Greeting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;greeting&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Functional stateless components are the preferred way of defining components in React. They have less boilerplate, add less complexity, and are simpler to maintain than React class components. However, as for now, both have their right to exist.&lt;/p&gt;
&lt;p&gt;Previously, the article mentioned JavaScript arrow functions and how they improve your React code. Let’s apply these kind of functions to your functional stateless components. The previous Greeting component has two different looks with JavaScript ES5 and ES6:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;// JavaScript ES5 function&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Greeting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;greeting&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;// JavaScript ES6 arrow function&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Greeting&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;greeting&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;// JavaScript ES6 arrow function without body and implicit return&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;Greeting&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;greeting&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JavaScript arrow functions are a great way of keeping your functional stateless components in React concise. Even more when there is no computation in between and thus the function body and return statement can be left out.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-class-component-syntax&quot;&gt;React Class Component Syntax&lt;/h2&gt;
&lt;p&gt;React’s way on defining components evolved over time. In its early stages, the &lt;code&gt;React.createClass()&lt;/code&gt; method was the default way of creating a React class component. Nowadays, it isn’t used anymore, because with the rise of JavaScript ES6, the previously used React class component syntax became the default.&lt;/p&gt;
&lt;p&gt;However, JavaScript is evolving constantly and thus JavaScript enthusiast pick up new ways of doing things all the time. That’s why you will find often different syntaxes for React class components. One way of defining a React class component, with state and class methods, is the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Counter&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;

    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
      &lt;span&gt;counter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
    &lt;span&gt;};&lt;/span&gt;

    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onIncrement&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onIncrement&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;bind&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onDecrement&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onDecrement&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;bind&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;onIncrement&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;({&lt;/span&gt; &lt;span&gt;counter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;}));&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;onDecrement&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;({&lt;/span&gt; &lt;span&gt;counter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;}));&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/p&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt; &lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onIncrement&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;button&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Increment&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/button&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt; &lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onDecrement&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;button&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Decrement&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/button&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, when implementing lots of React class components, the &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://medium.freecodecamp.org/react-binding-patterns-5-approaches-for-handling-this-92c651b5af56&quot;&gt;binding of class methods&lt;/a&gt; in the constructor and having a constructor in the first place becomes a tedious implementation detail. Fortunately, there is a shorthand syntax for getting rid of both annoyances:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Counter&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;  &lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;counter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;};&lt;/span&gt;
&lt;/span&gt;
&lt;span&gt;  &lt;span&gt;onIncrement&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;()&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;({&lt;/span&gt; &lt;span&gt;counter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;}));&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;

&lt;span&gt;  &lt;span&gt;onDecrement&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;()&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;({&lt;/span&gt; &lt;span&gt;counter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;}));&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/p&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt; &lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onIncrement&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;button&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Increment&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/button&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt; &lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onDecrement&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;button&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Decrement&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/button&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By using JavaScript arrow functions, you can auto-bind class methods without having to bind them in the constructor. Also the constructor can be left out, when not using the props, by defining the state directly as a class property. (Note: Be aware that &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-class-properties/&quot;&gt;class properties&lt;/a&gt; are not in the JavaScript language yet.) Therefore you can say that this way of defining a React class component is way more concise than the other version.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-javascript-template-literals&quot;&gt;Template Literals in React&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;Template literals&lt;/a&gt; are another JavaScript language specific feature that came with JavaScript ES6. It is worth to mention it shortly, because when people new to JavaScript and React see them, they can be confusing as well. What you are growing up with is the following syntax for concatenating a string:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getGreeting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;what&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'Welcome to '&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;what&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;const&lt;/span&gt; &lt;span&gt;greeting&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;getGreeting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'JavaScript'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;greeting&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;// Welcome to JavaScript&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Template literals can be used for the same which is called string interpolation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getGreeting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;what&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;`Welcome to &lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;what&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You only have to use backticks and the &lt;code&gt;${}&lt;/code&gt; notation for inserting JavaScript primitives. However, string literals are not only used for string interpolation, but also for multiline strings in JavaScript:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;getGreeting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;what&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;`&lt;/span&gt;
&lt;span&gt;    Welcome&lt;/span&gt;
&lt;span&gt;    to&lt;/span&gt;
&lt;span&gt;    &lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;what&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;  `&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically that’s how larger text blocks can be formatted on multiple lines. Otherwise, it can be seen with the &lt;a href=&quot;https://www.robinwieruch.de/react-with-graphql-tutorial/&quot;&gt;recent introduction of GraphQL in JavaScript&lt;/a&gt; too.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-javascript-map-reduce-filter&quot;&gt;Map, Reduce and Filter in React&lt;/h2&gt;
&lt;p&gt;What’s the best approach teaching the JSX syntax for React newcomers? Usually I start out with defining a variable in the &lt;code&gt;render()&lt;/code&gt; method and using it as JavaScript in HTML in the return block.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;greeting&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'Welcome to React'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;greeting&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;&lt;/span&gt;
&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You only have to use the curly braces to get your JavaScript in HTML. Going from rendering a string to a complex object isn’t any different.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt; &lt;span&gt;};&lt;/span&gt;
&lt;/span&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;&lt;/span&gt;
&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usually the next question then is: How to render a list of items? That’s one of the best parts about explaining React in my opinion. There is no React specific API such as a custom attribute on a HTML tag which enables you to render multiple items in React. You can use plain JavaScript for iterating over the list of items and returning HTML for each item.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Markus'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;];&lt;/span&gt;
&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;        &lt;span&gt;{&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;          &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/li&amp;gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;span&gt;})}&lt;/span&gt;
&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/ul&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having used the JavaScript arrow function before, you can get rid of the arrow function body and the return statement which leaves your rendered output way more concise.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Markus'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;];&lt;/span&gt;
&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;        &lt;span&gt;{&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/li&amp;gt;)}&lt;/span&gt;
&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/ul&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty soon, every React developer becomes used to the built-in JavaScript &lt;code&gt;map()&lt;/code&gt; methods for arrays. It just makes so much sense to map over an array and return the rendered output for each item. The same can be applied for custom tailored cases where &lt;code&gt;filter()&lt;/code&gt; or &lt;code&gt;reduce()&lt;/code&gt; make more sense rather than rendering an output for each mapped item.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;isDeveloper&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Markus'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;isDeveloper&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;];&lt;/span&gt;
&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;{&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;
&lt;span&gt;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;isDeveloper&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/span&gt;          &lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/li&amp;gt;)&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/ul&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In general, that’s how React developers are getting used to these JavaScript built-in functions without having to use a React specific API for it. It is just JavaScript in HTML.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-javascript-variables&quot;&gt;var, let, and const in React&lt;/h2&gt;
&lt;p&gt;Also the different variable declarations with &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; can be confusing for newcomers to React even though they are not React specific. Maybe it is because JavaScript ES6 was introduced when React became popular. In general, I try to introduce &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; very early in my workshops. It simply starts with exchanging var with const in a React component:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;
&lt;/span&gt;      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Markus'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
    &lt;span&gt;];&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;{&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/li&amp;gt;)}&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/ul&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I give the rules of thumb when to use which variable declaration:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;(1) don’t use &lt;code&gt;var&lt;/code&gt;, because &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are more specific&lt;/li&gt;
&lt;li&gt;(2) default to &lt;code&gt;const&lt;/code&gt;, because it cannot be re-assigned or re-declared&lt;/li&gt;
&lt;li&gt;(3) use &lt;code&gt;let&lt;/code&gt; when re-assigning the variable&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;While &lt;code&gt;let&lt;/code&gt; is usually used in a for loop for incrementing the iterator, &lt;code&gt;const&lt;/code&gt; is normally used for keeping JavaScript variables unchanged. Even though it is possible to change the inner properties of objects and arrays when using &lt;code&gt;const&lt;/code&gt;, the variable declaration shows the intent of keeping the variable unchanged though.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-ternary-operator&quot;&gt;Ternary Operator in React&lt;/h2&gt;
&lt;p&gt;But it doesn’t end with displaying JavaScript strings, objects, and arrays in React. What about an if-else statement for enabling conditional rendering? You cannot use an if-else statement directly in JSX, but you can return early from the rendering function. Returning null is valid in React when displaying nothing.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Markus'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
    &lt;span&gt;];&lt;/span&gt;

&lt;span&gt;    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;showUsers&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;span&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;showUsers&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;}&lt;/span&gt;
&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;{&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/li&amp;gt;)}&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/ul&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if you want to use an if-else statement within the returned JSX, you can do it by using a &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator&quot;&gt;JavaScripts ternary operator&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Markus'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
    &lt;span&gt;];&lt;/span&gt;

    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;showUsers&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;          &lt;span&gt;showUsers&lt;/span&gt; &lt;span&gt;?&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;              &lt;span&gt;{&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/li&amp;gt;)}&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/ul&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;          &lt;span&gt;)&lt;/span&gt; &lt;span&gt;:&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;span&gt;null&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;          &lt;span&gt;)&lt;/span&gt;
&lt;/span&gt;        &lt;span&gt;}&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another way of doing it, if you only return one side of the conditional rendering anyway, is using the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Markus'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
    &lt;span&gt;];&lt;/span&gt;

    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;showUsers&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;          &lt;span&gt;showUsers&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
&lt;/span&gt;            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
              &lt;span&gt;{&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/li&amp;gt;)}&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/ul&amp;gt;&lt;/span&gt;
&lt;span&gt;          &lt;span&gt;)&lt;/span&gt;
&lt;/span&gt;        &lt;span&gt;}&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I will not go into detail why this works, but if you are curious, you can learn about it and other techniques for conditional rendering over here: &lt;a href=&quot;https://www.robinwieruch.de/conditional-rendering-react/&quot;&gt;All the conditional renderings in React&lt;/a&gt;. After all, the conditional rendering in React only shows again that most of React is JavaScript and not anything React specific.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-import-export-statements&quot;&gt;Import and Export Statements in React&lt;/h2&gt;
&lt;p&gt;Fortunately, the JavaScript community settled on one way to import and export functionalities from files with JavaScript ES6 with &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;import&lt;/a&gt; and &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt;export&lt;/a&gt; statements.&lt;/p&gt;
&lt;p&gt;However, being new to React and JavaScript ES6, these import and export statements are just another topic which requires explanation when getting started with your first React application. Pretty early you will have your first imports for CSS, SVG or other JavaScript files. The create-react-app project already starts with those import statements:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;logo&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'./logo.svg'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;'./App.css'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;App&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;header&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;App-header&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt; &lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;logo&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;App-logo&quot;&lt;/span&gt; &lt;span&gt;alt&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;logo&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;App-title&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Welcome&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/header&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt; &lt;span&gt;className&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;App-intro&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;To&lt;/span&gt; &lt;span&gt;get&lt;/span&gt; &lt;span&gt;started&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;edit&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;App&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;js&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/code&amp;gt; and save to reload.&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/p&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s great for the starter project, because it offers you a well-rounded experience how other files can be imported and (exported). Also the App component gets imported in the &lt;em&gt;src/index.js&lt;/em&gt; file. However, when doing your first steps in React, I try to avoid those imports in the beginning. Instead, I try to focus on JSX and React components. Only later the import and export statements are introduced when separating the first React component or JavaScript function in another file.&lt;/p&gt;
&lt;p&gt;So how do these import and export statements work? Let’s say in one file you want to export the following variables:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;firstname&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'Wieruch'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt; &lt;span&gt;};&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can import them in another file with a relative path to the first file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'./file1.js'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;// output: Robin&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So it’s not necessarily about importing/exporting components or functions, it’s about sharing everything that is assignable to a variable (leaving out CSS or SVG imports/exports, but speaking only about JS). You can also import all exported variables from another file as one object:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;person&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'./file1.js'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;person&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;// output: Robin&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Imports can have an alias. It can happen that you import functionalities from multiple files that have the same named export. That’s why you can use an alias:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;firstname&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;username&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'./file1.js'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;// output: Robin&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All the previous cases are named imports and exports. But there exists the default statement too. It can be used for a few use cases:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;to export and import a single functionality&lt;/li&gt;
&lt;li&gt;to highlight the main functionality of the exported API of a module&lt;/li&gt;
&lt;li&gt;to have a fallback import functionality&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;robin&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
  &lt;span&gt;lastname&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Wieruch'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
&lt;span&gt;};&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;robin&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can leave out the curly braces for the import to import the default export:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;developer&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'./file1.js'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;developer&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;// output: { firstname: 'Robin', lastname: 'Wieruch' }&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, the import name can differ from the exported default name. You can also use it in conjunction with the named export and import statements:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;firstname&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'Wieruch'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;const&lt;/span&gt; &lt;span&gt;person&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
  &lt;span&gt;lastname&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
&lt;span&gt;};&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
  &lt;span&gt;lastname&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
&lt;span&gt;};&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;person&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And import the default or the named exports in another file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;developer&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'./file1.js'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;developer&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;// output: { firstname: 'Robin', lastname: 'Wieruch' }&lt;/span&gt;
&lt;span&gt;console&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;firstname&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;span&gt;// output: Robin Wieruch&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also spare additional lines and export the variables directly for named exports:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;firstname&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;lastname&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'Wieruch'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are the main functionalities for ES6 modules. They help you to organize your code, to maintain your code and to design reusable module APIs. You can also export and import functionalities to test them.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-libraries&quot;&gt;Libraries in React&lt;/h2&gt;
&lt;p&gt;React is only the view layer for your application. There is some internal state management offered by React, but apart from this, it is only a component library which renders HTML for your browser. Everything else can be added from APIs (e.g. browser API, DOM API), JavaScript functionalities or external libraries. It’s not always simple to choose the right library for complementing your React application, but &lt;a href=&quot;https://www.robinwieruch.de/essential-react-libraries-framework/&quot;&gt;once you have a good overview of the different options&lt;/a&gt;, you can pick the one which fits best to your tech stack.&lt;/p&gt;
&lt;p&gt;For instance, &lt;a href=&quot;https://www.robinwieruch.de/react-fetching-data/&quot;&gt;fetching data in React&lt;/a&gt; can be done with the native fetch API:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;data&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
  &lt;span&gt;};&lt;/span&gt;

  &lt;span&gt;componentDidMount&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'https://api.mydomain.com'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
      &lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;response&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;response&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;())&lt;/span&gt;
      &lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;data&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;({&lt;/span&gt; &lt;span&gt;data&lt;/span&gt; &lt;span&gt;}));&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;...&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it is up to you to use another library to fetch data in React. &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/axios/axios&quot;&gt;Axios&lt;/a&gt; is one popular choice for React applications:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;axios&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'axios'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;data&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
  &lt;span&gt;};&lt;/span&gt;

  &lt;span&gt;componentDidMount&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;    &lt;span&gt;axios&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'https://api.mydomain.com'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/span&gt;      &lt;span&gt;.&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;data&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;({&lt;/span&gt; &lt;span&gt;data&lt;/span&gt; &lt;span&gt;}));&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;...&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So once you know about your problem which need to be solved, &lt;a href=&quot;https://www.robinwieruch.de/reasons-why-i-moved-from-angular-to-react/&quot;&gt;React’s extensive and innovative ecosystem&lt;/a&gt; should give you plenty of options solving it. There again it’s not about React, but knowing about all the different JavaScript libraries which can be used to complement your application.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-higher-order-functions&quot;&gt;Higher-Order Functions in React&lt;/h2&gt;
&lt;p&gt;Higher-order functions are a great programming concept especially when moving towards functional programming. In React, it makes totally sense to know about this kind of functions, because at some point you have to deal with higher-order components which can be explained best when knowing about higher-order functions in the first place.&lt;/p&gt;
&lt;p&gt;Higher-order functions can be showcased in React early on without introducing higher-order components. For instance, let’s say a rendered list of users can be filtered based on the value of an input field.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;  &lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;query&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;};&lt;/span&gt;
&lt;/span&gt;
&lt;span&gt;  &lt;span&gt;onChange&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;event&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;({&lt;/span&gt; &lt;span&gt;query&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;event&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;value&lt;/span&gt; &lt;span&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;}&lt;/span&gt;
&lt;/span&gt;
  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Markus'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
    &lt;span&gt;];&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;{&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;
&lt;span&gt;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;query&lt;/span&gt; &lt;span&gt;===&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/span&gt;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/li&amp;gt;)&lt;/span&gt;
          &lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/ul&amp;gt;&lt;/span&gt;

&lt;span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;          &lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;text&quot;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;          &lt;span&gt;onChange&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onChange&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s not always desired to extract functions, because it can add unecessary complexity, but on the other side, it can have beneficial learning effects for JavaScript. In addition, &lt;a href=&quot;https://www.robinwieruch.de/react-testing-tutorial/&quot;&gt;by extracting a function you make it testable in isolation from the React component&lt;/a&gt;. So let’s showcase it with the function which is provided to the built-in filter function.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;doFilter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;query&lt;/span&gt; &lt;span&gt;===&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;...&lt;/span&gt;

  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Markus'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
    &lt;span&gt;];&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;{&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;
&lt;span&gt;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;doFilter&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;/span&gt;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/li&amp;gt;)&lt;/span&gt;
          &lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/ul&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;
          &lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;text&quot;&lt;/span&gt;
          &lt;span&gt;onChange&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onChange&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The previous implementation doesn’t work because the &lt;code&gt;doFilter()&lt;/code&gt; function needs to know about the &lt;code&gt;query&lt;/code&gt; property from the state. So you can pass it to the function by wrapping it with another function which leads to a higher-order function.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'react'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;doFilter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;query&lt;/span&gt; &lt;span&gt;===&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; &lt;span&gt;App&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;...&lt;/span&gt;

  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Robin'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
      &lt;span&gt;{&lt;/span&gt; &lt;span&gt;name&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;'Markus'&lt;/span&gt; &lt;span&gt;},&lt;/span&gt;
    &lt;span&gt;];&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;{&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;
&lt;span&gt;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;doFilter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;))&lt;/span&gt;
&lt;/span&gt;            &lt;span&gt;.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/li&amp;gt;)&lt;/span&gt;
          &lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/ul&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;
          &lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;text&quot;&lt;/span&gt;
          &lt;span&gt;onChange&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onChange&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;default&lt;/span&gt; &lt;span&gt;App&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically a higher-order function is a function which returns a function. By using JavaScript ES6 arrow functions, you can make a higher-order function more concise. Furthermore, this shorthand version makes it more attractive composing functions into functions.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;doFilter&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;query&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;
  &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;query&lt;/span&gt; &lt;span&gt;===&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the &lt;code&gt;doFilter()&lt;/code&gt; function can be exported from the file and tested in isolation as pure (higher-order) function. After learning about higher-order functions, all the fundamental knowledge is established to learn more about &lt;a href=&quot;https://www.robinwieruch.de/gentle-introduction-higher-order-components/&quot;&gt;React’s higher-order components&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Extracting these functions into (higher-order) functions outside of a React component can be beneficial for testing React’s local state management in isolation as well.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;doIncrement&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;({&lt;/span&gt; &lt;span&gt;counter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;});&lt;/span&gt;
&lt;/span&gt;
&lt;span&gt;&lt;span&gt;export&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;doDecrement&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;  &lt;span&gt;({&lt;/span&gt; &lt;span&gt;counter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;});&lt;/span&gt;
&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Counter&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;state&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;counter&lt;/span&gt;&lt;span&gt;:&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
  &lt;span&gt;};&lt;/span&gt;

  &lt;span&gt;onIncrement&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;()&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;doIncrement&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;onDecrement&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;()&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;    &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;setState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;doDecrement&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;
&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/p&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt; &lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onIncrement&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;button&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Increment&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/button&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt; &lt;span&gt;onClick&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;onDecrement&lt;/span&gt;&lt;span&gt;}&lt;/span&gt; &lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;button&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Decrement&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/button&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span&gt;);&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Moving functions around your code base is a great way learning about the benefits of having functions as fist class citizens in JavaScript. It’s powerful when moving your code towards functional programming.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-destructuring-spread-operator&quot;&gt;Destructuring and Spread Operators in React&lt;/h2&gt;
&lt;p&gt;Another language feature introduced in JavaScript is called &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;destructuring&lt;/a&gt;. It’s often the case that you have to access plenty of properties from your state or props in your component. Rather than assigning them to a variable one by one, you can use destructuring assignment in JavaScript.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;// no destructuring&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;users&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;users&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;counter&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;counter&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;

&lt;span&gt;// destructuring&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;users&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;counter&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s especially beneficial for functional stateless components, because they always receive the &lt;code&gt;props&lt;/code&gt; object in their function signature. Often you will not use the props but its content, so you can destructure the content already in the function signature.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;// no destructuring&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Greeting&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;greeting&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;// destructuring&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; &lt;span&gt;Greeting&lt;/span&gt;&lt;span&gt;({&lt;/span&gt; &lt;span&gt;greeting&lt;/span&gt; &lt;span&gt;})&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;greeting&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/h1&amp;gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The destructuring works for JavaScript arrays too. Another great feature is the &lt;strong&gt;rest destructuring&lt;/strong&gt;. It is often used for splitting out a part of an object, but keeping the remaining properties in another object.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;// rest destructuring&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;users&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;rest&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterward, the users can be used to be rendered, for instance in a React component, whereas the remaining state is used somewhere else. That’s where the &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;JavaScript spread operator&lt;/a&gt; comes into play to forward the rest object to the next component. In the next section, you will see this operator in action.&lt;/p&gt;
&lt;h2 class=&quot;chapter-header&quot; id=&quot;react-javascript-learn&quot;&gt;There is more JavaScript than React&lt;/h2&gt;
&lt;p&gt;In conclusion, there is lots of JavaScript which can be harnessed in React. Whereas React has only a slim API surface area, developers have to get used to all the functionalities JavaScript has to offer. The saying is not without any reason: &lt;em&gt;“being a React developer makes you a better JavaScript developer”&lt;/em&gt;. Let’s recap some of the learned aspects of JavaScript in React by refactoring a higher-order component.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;withLoading&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;WithLoading&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;render&lt;/span&gt;&lt;span&gt;()&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;      &lt;span&gt;const&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;isLoading&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;props&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;
      &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;isLoading&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Loading&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/p&amp;gt;;&lt;/span&gt;
      &lt;span&gt;}&lt;/span&gt;

&lt;span&gt;      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;props&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;/span&gt;    &lt;span&gt;}&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;
  &lt;span&gt;};&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This higher-order component is only used for showing a conditional loading indicator when the &lt;code&gt;isLoading&lt;/code&gt; prop is set to true. Otherwise it renders the input component. You can already see the (rest) destructuring and the spread operator in action. The latter can be seen for the rendered Component, because all the remaining properties from the &lt;code&gt;props&lt;/code&gt; object are passed to the Component.&lt;/p&gt;
&lt;p&gt;The first step for making the higher-order component more concise is refactoring the returned React class component to a functional stateless component:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;withLoading&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;span&gt;  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; &lt;span&gt;({&lt;/span&gt; &lt;span&gt;isLoading&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;props&lt;/span&gt; &lt;span&gt;})&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;isLoading&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Loading&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/p&amp;gt;;&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;props&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;  &lt;span&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that the rest destructuring can be used in the function’s signature too. Next, using JavaScript ES6 arrow functions makes the higher-order component more concise again:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;withLoading&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;({&lt;/span&gt; &lt;span&gt;isLoading&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;props&lt;/span&gt; &lt;span&gt;})&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
&lt;/span&gt;  &lt;span&gt;if&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;&lt;span&gt;isLoading&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Loading&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/p&amp;gt;;&lt;/span&gt;
  &lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;props&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And adding the ternary operator shortens the function body into one line of code. Thus the function body can be left out and the return statement can be omitted.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;withLoading&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;({&lt;/span&gt; &lt;span&gt;isLoading&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;props&lt;/span&gt; &lt;span&gt;})&lt;/span&gt; &lt;span&gt;=&amp;gt;&lt;/span&gt;
&lt;span&gt;  &lt;span&gt;isLoading&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;?&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;Loading&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;span&gt;:&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt; &lt;span&gt;{&lt;/span&gt; &lt;span&gt;...&lt;/span&gt;&lt;span&gt;props&lt;/span&gt; &lt;span&gt;}&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the higher-order component uses various JavaScript and not React relevant techniques: arrow functions, higher-order functions, a ternary operator, destructuring and the spread operator. That’s how JavaScript’s functionalities can be used in React applications.&lt;/p&gt;
&lt;hr class=&quot;section-divider&quot;/&gt;&lt;p&gt;Often people say that learning React has a steep learning curve. But it hasn’t when only leaving React in the equation and leaving all the JavaScript out of it. React doesn’t add any foreign abstraction layer on top as other web frameworks are doing it. Instead you have to use JavaScript. So hone your JavaScript skills and you will become a great React developer.&lt;/p&gt;
&lt;div class=&quot;feedback-and-share text-center&quot;&gt;
&lt;hr/&gt;&lt;p class=&quot;lead&quot;&gt;I would like to hear your thoughts :-) Find me on &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; aria-label=&quot;twitter&quot; href=&quot;https://twitter.com/rwieruch&quot;&gt;Twitter&lt;/a&gt; and &lt;a target=&quot;_blank&quot; aria-label=&quot;github&quot; href=&quot;https://github.com/rwieruch&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;lead&quot;&gt;Did the article help you? Share it with your friends on social media , support me on &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; aria-label=&quot;patreon&quot; href=&quot;https://www.patreon.com/rwieruch&quot;&gt;Patreon&lt;/a&gt;, become a React developer with my books&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;box-inline col-md-12&quot;&gt;
&lt;div class=&quot;col-md-12 text-center&quot;&gt;
&lt;h2 class=&quot;newsletter&quot;&gt;The Road to learn React&lt;/h2&gt;
&lt;div class=&quot;col-md-4&quot;&gt;&lt;img class=&quot;img-lazy img-responsive&quot; data-lazy-src=&quot;https://www.robinwieruch.de/img/page/cover.png&quot;/&gt;&lt;/div&gt;
&lt;p class=&quot;lead&quot;&gt;Build a Hacker News App along the way. No setup configuration. No tooling. No Redux. Plain React in 190+ pages of learning material. Learn React like &lt;strong&gt;33.000+ readers&lt;/strong&gt;.&lt;/p&gt;
&lt;a class=&quot;btn btn-template-main&quot; href=&quot;https://www.getrevue.co/profile/rwieruch&quot;&gt;Get the Book &lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 19 Jul 2018 20:15:57 +0000</pubDate>
<dc:creator>rwieruch</dc:creator>
<og:title>JavaScript fundamentals before learning React - RWieruch</og:title>
<og:description>All the fundamentals in JavaScript for React applications. Often React newcomers realize that most of the learnings are JavaScript, because React has only a small API ...</og:description>
<og:type>website</og:type>
<og:url>https://www.robinwieruch.de/javascript-fundamentals-react-requirements/</og:url>
<og:image>https://www.robinwieruch.de/img/posts/javascript-fundamentals-react-requirements/banner_640.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.robinwieruch.de/javascript-fundamentals-react-requirements/</dc:identifier>
</item>
<item>
<title>Python has brought computer programming to a vast new audience</title>
<link>https://www.economist.com/science-and-technology/2018/07/21/python-has-brought-computer-programming-to-a-vast-new-audience</link>
<guid isPermaLink="true" >https://www.economist.com/science-and-technology/2018/07/21/python-has-brought-computer-programming-to-a-vast-new-audience</guid>
<description>&lt;p&gt;IN DECEMBER 1989 Guido van Rossum, a Dutch computer scientist, set himself a Christmas project. Irked by shortcomings in other programming languages, he wanted to build his own. His principles were simple. First, it should be easy to read. Rather than sprawling over line-endings and being broken up by a tangle of curly braces, each chunk would be surrounded with indented white space. Second, it should let users create their own packages of special-purpose coding modules, which could then be made available to others to form the basis of new programs. Third, he wanted a “short, unique and slightly mysterious” name. He therefore called it after Monty Python, a British comedy group. The package repository became known as the Cheese Shop.&lt;/p&gt;
&lt;p&gt;Nearly 30 years after his Christmas invention, Mr Van Rossum resembles a technological version of the Monty Python character who accidentally became the Messiah in the film “Life of Brian”. “I certainly didn’t set out to create a language that was intended for mass consumption,” he explains. But in the past 12 months Google users in America have searched for Python more often than for Kim Kardashian, a reality-TV star. The rate of queries has trebled since 2010, while inquiries after other programming languages have been flat or declining (see chart).&lt;/p&gt;
&lt;div class=&quot;newsletter-form newsletter-form--inline&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;newsletter-form__message&quot; readability=&quot;7&quot;&gt;&lt;strong&gt;Get our daily newsletter&lt;/strong&gt;
&lt;p&gt;Upgrade your inbox and get our Daily Dispatch and Editor's Picks.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;latest-updates-panel__container latest-updates-panel__container--blog-post&quot;&gt;

&lt;ul class=&quot;latest-updates-panel__body&quot;&gt;&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Donald Trump is fighting trade wars on several fronts&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;A cacophony of views on what to teach children about God&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Why is vigorous economic competition a good thing?&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-1&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;29&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Danny Fields and Seymour Stein, champions of punk, look back&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Why the Taj Mahal is changing colour&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Supply chains based on modern slavery may reach into the West&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;The language’s popularity has grown not merely among professional developers—nearly 40% of whom use it, with a further 25% wishing to do so, according to Stack Overflow, a programming forum—but also with ordinary folk. Codecademy, a website that has taught 45m novices how to use various languages, says that by far the biggest increase in demand is from those wishing to learn Python. It is thus bringing coding to the fingertips of those once baffled by the subject. Pythonistas, as aficionados are known, have helped by adding more than 145,000 packages to the Cheese Shop, covering everything from astronomy to game development.&lt;/p&gt;
&lt;div class=&quot;component-image blog-post__image&quot;&gt;&lt;img src=&quot;https://cdn.static-economist.com/sites/default/files/images/print-edition/20180721_STC872.png&quot; alt=&quot;&quot; class=&quot;component-image__img blog-post-article-image blog-post-article-image__slim&quot; srcset=&quot;/sites/default/files/imagecache/200-width/images/print-edition/20180721_STC872.png 200w, /sites/default/files/imagecache/300-width/images/print-edition/20180721_STC872.png 300w, /sites/default/files/imagecache/400-width/images/print-edition/20180721_STC872.png 400w, /sites/default/files/imagecache/640-width/images/print-edition/20180721_STC872.png 640w, /sites/default/files/imagecache/800-width/images/print-edition/20180721_STC872.png 800w, /sites/default/files/imagecache/1000-width/images/print-edition/20180721_STC872.png 1000w, /sites/default/files/imagecache/1200-width/images/print-edition/20180721_STC872.png 1200w, /sites/default/files/imagecache/1280-width/images/print-edition/20180721_STC872.png 1280w, /sites/default/files/imagecache/1600-width/images/print-edition/20180721_STC872.png 1600w&quot; sizes=&quot;(min-width: 600px) 640px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Mr Van Rossum, though delighted by this enthusiasm for his software, has come to find the rigours of supervising it, in his role as “benevolent dictator for life”, unbearable. He fears he has become something of an idol. “I’m uncomfortable with that fame,” he says, sounding uncannily like Brian trying to drive away the crowds of disciples. “Sometimes I feel like everything I say or do is seen as a very powerful force.” On July 12th he resigned, leaving the Pythonistas to manage themselves.&lt;/p&gt;
&lt;p class=&quot;xhead&quot;&gt;Nobody expects the faddish statistician&lt;/p&gt;
&lt;p&gt;Python is not perfect. Other languages have more processing efficiency and specialised capabilities. C and C++ are “lower-level” options which give the user more control over what is happening within a computer’s processor. Java is popular for building large, complex applications. JavaScript is the language of choice for applications accessed via a web browser. Countless others have evolved for various purposes. But Python’s killer features—simple syntax that makes its code easy to learn and share, and its huge array of third-party packages—make it a good general-purpose language. Its versatility is shown by its range of users and uses. The Central Intelligence Agency has employed it for hacking, Pixar for producing films, Google for crawling web pages and Spotify for recommending songs.&lt;/p&gt;
&lt;p&gt;Some of the most alluring packages that Pythonistas can find in the Cheese Shop harness artificial intelligence (AI). Users can create neural networks, which mimic the connections in a brain, to pick out patterns in large quantities of data. Mr Van Rossum says that Python has become the language of choice for AI researchers, who have produced numerous packages for it.&lt;/p&gt;
&lt;p&gt;Not all Pythonistas are so ambitious, though. Zach Sims, Codecademy’s boss, believes many visitors to his website are attempting to acquire skills that could help them in what are conventionally seen as “non-technical” jobs. Marketers, for instance, can use the language to build statistical models that measure the effectiveness of campaigns. College lecturers can check whether they are distributing grades properly. (Even journalists on &lt;em class=&quot;Italic&quot;&gt;The Economist&lt;/em&gt;, scraping the web for data, generally use programs written in Python to do so.)&lt;/p&gt;
&lt;p&gt;For professions that have long relied on trawling through spreadsheets, Python is especially valuable. Citigroup, an American bank, has introduced a crash course in Python for its trainee analysts. A jobs website, eFinancialCareers, reports a near-fourfold increase in listings mentioning Python between the first quarters of 2015 and 2018.&lt;/p&gt;
&lt;p&gt;The thirst for these skills is not without risk. Cesar Brea, a partner at Bain &amp;amp; Company, a consultancy, warns that the scariest thing in his trade is “someone who has learned a tool but doesn’t know what is going on under the hood”. Without proper oversight, a novice playing with AI libraries could reach dodgy conclusions. Bernd Ziegler, a partner at Boston Consulting Group, says that his firm reserves such analysis to members of its data team.&lt;/p&gt;
&lt;p class=&quot;xhead&quot;&gt;Rossum’s universal robot&lt;/p&gt;
&lt;p&gt;One solution to the problem of semi-educated tinkerers is to educate them properly in the language’s arcana. Python was already the most popular introductory language at American universities in 2014, but the teaching of it is generally limited to those studying science, technology, engineering and mathematics. A more radical proposal is to catch ’em young by offering computer science to all, and in primary schools. Hadi Partovi, the boss of Code.org, a charity, notes that 40% of American schools now offer such lessons, up from 10% in 2013. Around two-thirds of 10- to 12-year-olds have an account on Code.org’s website. Perhaps unnerved by a future filled with automated jobs, 90% of American parents want their children to study computer science.&lt;/p&gt;
&lt;p&gt;How much longer Python’s rise will continue is anybody’s guess. There have been dominant computer languages in the past that, while not exactly “one with Nineveh and Tyre”, now skulk in the background. In the 1960s, Fortran bestrode the world. As teaching languages for neophytes, both Basic and Pascal had their moments in the sun. And Mr Partovi himself plumped for JavaScript as the language for Code.org’s core syllabus, since it remains the standard choice for animating web pages.&lt;/p&gt;
&lt;p&gt;No computing language can ever be truly general purpose. Specialisation will necessarily remain important. It is nevertheless true that, in that long-past Yuletide, Mr Van Rossum started something memorable. He isn’t the Messiah, but he was a very clever boy.&lt;/p&gt;
</description>
<pubDate>Thu, 19 Jul 2018 20:01:27 +0000</pubDate>
<dc:creator>leonagano</dc:creator>
<og:description>And its inventor has just stepped down</og:description>
<og:image>https://cdn.static-economist.com/sites/default/files/images/print-edition/20180721_STD001_0.jpg</og:image>
<og:type>article</og:type>
<og:url>https://www.economist.com/science-and-technology/2018/07/21/python-has-brought-computer-programming-to-a-vast-new-audience</og:url>
<og:title>Python has brought computer programming to a vast new audience</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.economist.com/science-and-technology/2018/07/21/python-has-brought-computer-programming-to-a-vast-new-audience</dc:identifier>
</item>
<item>
<title>Work less, get more: New Zealand firm&amp;#039;s four-day week an &amp;#039;unmitigated success&amp;#039;</title>
<link>https://www.theguardian.com/world/2018/jul/19/work-less-get-more-new-zealand-firms-four-day-week-an-unmitigated-success</link>
<guid isPermaLink="true" >https://www.theguardian.com/world/2018/jul/19/work-less-get-more-new-zealand-firms-four-day-week-an-unmitigated-success</guid>
<description>&lt;p&gt;The &lt;a href=&quot;https://www.theguardian.com/world/newzealand&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline&quot;&gt;New Zealand&lt;/a&gt; company behind a landmark trial of a four-day working week has concluded it an unmitigated success, with 78% of employees feeling they were able to successfully manage their work-life balance, an increase of 24 percentage points.&lt;/p&gt;
&lt;p&gt;Two-hundred-and-forty staff at Perpetual Guardian, a company which manages trusts, wills and estate planning, trialled a four-day working week over March and April, working four, eight-hour days &lt;a href=&quot;https://www.theguardian.com/world/2018/feb/09/work-four-days-get-paid-for-five-new-zealand-companys-new-shorter-week&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;but getting paid for five.&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Academics studied the trial before, during and after its implementation, collecting qualitative and quantitative data.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-1 | 1&quot;&gt;
&lt;/aside&gt;&lt;p&gt;Perpetual Guardian founder Andrew Barnes came up with the idea in an attempt to give his employees better work-life balance, and help them focus on the business while in the office on company time, and manage life and home commitments on their extra day off.&lt;/p&gt;
&lt;p&gt;Jarrod Haar, professor of human resource management at Auckland University of Technology, found job and life satisfaction increased on all levels across the home and work front, with employees performing better in their jobs and enjoying them more than before the experiment.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.theguardian.com/money/work-life-balance&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline&quot;&gt;Work-life balance&lt;/a&gt;, which reflected how well respondents felt they could successfully manage their work and non-work roles, increased by 24 percentage points.&lt;/p&gt;
&lt;p&gt;In November last year just over half (54%) of staff felt they could effectively balance their work and home commitments, while after the trial this number jumped to 78%.&lt;/p&gt;
&lt;p&gt;Staff stress levels decreased by 7 percentage points across the board as a result of the trial, while stimulation, commitment and a sense of empowerment at work all improved significantly, with overall life satisfaction increasing by 5 percentage points.&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;If you can have parents spending more time with their children, how is that a bad thing?&lt;/p&gt;
&lt;footer&gt;&lt;cite class=&quot;pullquote-cite&quot;&gt;Andrew Barnes&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;Helen Delaney, a senior lecturer at the University of Auckland Business School, said employees’ motivation and commitment to work increased because they were included in the planning of the experiment, and played a key role in designing how the four-day week would be managed so as not to negatively impact productivity.&lt;/p&gt;
&lt;p&gt;“Employees designed a number of innovations and initiatives to work in a more productive and efficient manner, from automating manual processes to reducing or eliminating non-work-related internet usage,” said Delaney.&lt;/p&gt;
&lt;p&gt;Andrew Barnes said he would take the results of the trial to the board to open up a discussion on how a four-day work week could be implemented long-term in his company.&lt;/p&gt;
&lt;details data-snippet-id=&quot;a5947407-4f95-41fe-849d-e7d9248ebcb7&quot; data-snippet-type=&quot;guide&quot; class=&quot;atom atom--snippet atom--snippet--guide&quot;&gt;&lt;span class=&quot;atom--snippet__label&quot;&gt;Quick guide&lt;/span&gt;
&lt;h4 class=&quot;atom--snippet__headline&quot;&gt;What is the Upside?&lt;/h4&gt;
&lt;button class=&quot;atom__button atom__button--large atom__button--rounded atom--snippet__handle&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;is-on&quot;&gt; Show&lt;/span&gt; &lt;span class=&quot;is-off&quot;&gt; Hide&lt;/span&gt;&lt;/button&gt;
&lt;div class=&quot;atom--snippet__body&quot;&gt;
&lt;div class=&quot;atom--snippet__item&quot;&gt;

&lt;p&gt;News doesn't always have to be bad – indeed, the relentless focus on confrontation, disaster, antagonism and blame risks convincing the public that the world is hopeless and there is nothing we can do.&lt;/p&gt;
&lt;p&gt;This series is an antidote, an attempt to show that there is plenty of hope, as our journalists scour the planet looking for pioneers, trailblazers, best practice, unsung heroes, ideas that work, ideas that might and innovations whose time might have come.&lt;/p&gt;
&lt;p&gt;Readers can recommend other projects, people and progress that we should report on by contacting us at theupside@theguardian.com&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;footer class=&quot;atom--snippet__footer&quot;&gt;&lt;div class=&quot;atom--snippet__feedback&quot;&gt;
&lt;div&gt;Was this helpful?&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;atom--snippet__ack&quot; hidden=&quot;&quot; aria-role=&quot;alert&quot; aria-live=&quot;polite&quot;&gt;Thank you for your feedback.&lt;/div&gt;
&lt;/footer&gt;&lt;/details&gt; Sign up here for weekly email updates from this series
&lt;p&gt;“If you can have parents spending more time with their children, how is that a bad thing?” asked Barnes, who believes the new work model has the potential to profoundly impact society for the better.&lt;/p&gt;
&lt;p&gt;“Are you likely to get fewer mental health issues when you have more time to take care of yourself and your personal interests? Probably ... if you have fewer people in the office at any one time, can we make smaller offices?”&lt;/p&gt;
&lt;p&gt;New Zealand’s workplace relations minister, Iain Lees-Galloway, said the results of the trial were “very interesting” and he was keen to encourage businesses to trial new and improved work models.&lt;/p&gt;
&lt;p&gt;“I’m really keen to work with any businesses that are looking at how they can be more flexible for their staff and how they can look to improve productivity whilst working alongside their staff and protecting terms and conditions,” Less-Galloway said.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;bullet&quot;&gt;•&lt;/span&gt; This article was amended on 20 July 2018. An earlier version said that there was a 24% increase in the percentage of employees who felt they were able to successfully manage their work-life balance. The increase was from 54% to 78%, which is an increase of 24 percentage points, not 24%. This has been corrected.&lt;br/&gt;&lt;/p&gt;


</description>
<pubDate>Thu, 19 Jul 2018 19:10:07 +0000</pubDate>
<dc:creator>GordonS</dc:creator>
<og:url>http://www.theguardian.com/world/2018/jul/19/work-less-get-more-new-zealand-firms-four-day-week-an-unmitigated-success</og:url>
<og:description>Reduced hours for same pay increased successful work-life balance management, cutting stress levels and boosting commitment</og:description>
<og:image>https://i.guim.co.uk/img/media/d03d1c31df7eb3b37cf00417ac09a201a80d6c75/0_627_5700_3420/master/5700.jpg?w=1200&amp;h=630&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;crop=faces%2Centropy&amp;bm=normal&amp;ba=bottom%2Cleft&amp;blend64=aHR0cHM6Ly9hc3NldHMuZ3VpbS5jby51ay9pbWFnZXMvb3ZlcmxheXMvZDM1ODZhNWVmNTc4MTc1NmQyMWEzYjYzNWU1MTcxNDEvdGctZGVmYXVsdC5wbmc=&amp;s=32db53483b593ecbeac4d14ed272f65b</og:image>
<og:type>article</og:type>
<og:title>Work less, get more: New Zealand firm's four-day week an 'unmitigated success'</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theguardian.com/world/2018/jul/19/work-less-get-more-new-zealand-firms-four-day-week-an-unmitigated-success</dc:identifier>
</item>
<item>
<title>Show HN: Learn how to work remotely from people doing it every day</title>
<link>http://remotehabits.com/?ref=hackernews</link>
<guid isPermaLink="true" >http://remotehabits.com/?ref=hackernews</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;http://remotehabits.com/?ref=hackernews&quot;&gt;http://remotehabits.com/?ref=hackernews&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=17569294&quot;&gt;https://news.ycombinator.com/item?id=17569294&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 276&lt;/p&gt;&lt;p&gt;# Comments: 63&lt;/p&gt;</description>
<pubDate>Thu, 19 Jul 2018 18:56:29 +0000</pubDate>
<dc:creator>Jasber</dc:creator>
<og:url>http://remotehabits.com</og:url>
<og:title>Interviews with remote workers</og:title>
<og:description>RemoteHabits is all about remote working. Learn how other people started with remote work by reading interviews from dozens of people in their fields.</og:description>
<og:image>http://remotehabits.com/static/img/small-logo.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://remotehabits.com/?ref=hackernews</dc:identifier>
</item>
<item>
<title>Google Cloud Downtime Postmortem</title>
<link>https://status.cloud.google.com/incident/cloud-networking/18012?m=1</link>
<guid isPermaLink="true" >https://status.cloud.google.com/incident/cloud-networking/18012?m=1</guid>
<description>&lt;h2&gt;ISSUE SUMMARY&lt;/h2&gt;
&lt;p&gt;On Tuesday, 17 July 2018, customers using Google Cloud App Engine, Google HTTP(S) Load Balancer, or TCP/SSL Proxy Load Balancers experienced elevated error rates ranging between 33% and 87% for a duration of 32 minutes. Customers observed errors consisting of either 502 return codes, or connection resets. We apologize to our customers whose services or businesses were impacted during this incident, and we are taking immediate steps to improve the platform’s performance and availability. We will be providing customers with a SLA credit for the affected timeframe that impacted the Google Cloud HTTP(S) Load Balancer, TCP/SSL Proxy Load Balancer and Google App Engine products.&lt;/p&gt;
&lt;h2&gt;DETAILED DESCRIPTION OF IMPACT&lt;/h2&gt;
&lt;p&gt;On Tuesday, 17 July 2018, from 12:17 to 12:49 PDT, Google Cloud HTTP(S) Load Balancers returned 502s for some requests they received. The proportion of 502 return codes varied from 33% to 87% during the period. Automated monitoring alerted Google’s engineering team to the event at 12:19, and at 12:44 the team had identified the probable root cause and deployed a fix. At 12:49 the fix became effective and the rate of 502s rapidly returned to a normal level. Services experienced degraded latency for several minutes longer as traffic returned and caches warmed. Serving fully recovered by 12:55. Connections to Cloud TCP/SSL Proxy Load Balancers would have been reset after connections to backends failed. Cloud services depending upon Cloud HTTP Load Balancing, such as Google App Engine application serving, Google Cloud Functions, Stackdriver's web UI, Dialogflow and the Cloud Support Portal/API, were affected for the duration of the incident.&lt;/p&gt;
&lt;p&gt;Cloud CDN cache hits dropped 70% due to decreased references to Cloud CDN URLs from services behind Cloud HTTP(S) Load balancers and an inability to validate stale cache entries or insert new content on cache misses. Services running on Google Kubernetes Engine and using the Ingress resource would have served 502 return codes as mentioned above. Google Cloud Storage traffic served via Cloud Load Balancers was also impacted.&lt;/p&gt;
&lt;p&gt;Other Google Cloud Platform services were not impacted. For example, applications and services that use direct VM access, or Network Load Balancing, were not affected.&lt;/p&gt;
&lt;h2&gt;ROOT CAUSE&lt;/h2&gt;
&lt;p&gt;Google’s Global Load Balancers are based on a two-tiered architecture of Google Front Ends (GFE). The first tier of GFEs answer requests as close to the user as possible to maximize performance during connection setup. These GFEs route requests to a second layer of GFEs located close to the service which the request makes use of. This type of architecture allows clients to have low latency connections anywhere in the world, while taking advantage of Google’s global network to serve requests to backends, regardless of in which region they are located.&lt;/p&gt;
&lt;p&gt;The GFE development team was in the process of adding features to GFE to improve security and performance. These features had been introduced into the second layer GFE code base but not yet put into service. One of the features contained a bug which would cause the GFE to restart; this bug had not been detected in either of testing and initial rollout. At the beginning of the event, a configuration change in the production environment triggered the bug intermittently, which caused affected GFEs to repeatedly restart. Since restarts are not instantaneous, the available second layer GFE capacity was reduced. While some requests were correctly answered, other requests were interrupted (leading to connection resets) or denied due to a temporary lack of capacity while the GFEs were coming back online.&lt;/p&gt;
&lt;h2&gt;REMEDIATION AND PREVENTION&lt;/h2&gt;
&lt;p&gt;Google engineers were alerted to the issue within 3 minutes and began immediately investigating. At 12:44 PDT, the team discovered the root cause, the configuration change was promptly reverted, and the affected GFEs ceased their restarts. As all GFEs returned to service, traffic resumed its normal levels and behavior.&lt;/p&gt;
&lt;p&gt;In addition to fixing the underlying cause, we will be implementing changes to both prevent and reduce the impact of this type of failure in several ways:&lt;/p&gt;
&lt;p&gt;1. We are adding additional safeguards to disable features not yet in service.&lt;/p&gt;
&lt;p&gt;2. We plan to increase hardening of the GFE testing stack to reduce the risk of having a latent bug in production binaries that may cause a task to restart.&lt;/p&gt;
&lt;p&gt;3. We will also be pursuing additional isolation between different shards of GFE pools in order to reduce the scope of failures.&lt;/p&gt;
&lt;p&gt;4. Finally, to speed diagnosis in the future, we plan to create a consolidated dashboard of all configuration changes for GFE pools, allowing engineers to more easily and quickly observe, correlate, and identify problematic changes to the system.&lt;/p&gt;
&lt;p&gt;We would again like to apologize for the impact that this incident had on our customers and their businesses. We take any incident that affects the availability and reliability of our customers extremely seriously, particularly incidents which span regions. We are conducting a thorough investigation of the incident and will be making the changes which result from that investigation our very top priority in GCP engineering.&lt;/p&gt;
</description>
<pubDate>Thu, 19 Jul 2018 18:27:33 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://status.cloud.google.com/incident/cloud-networking/18012?m=1</dc:identifier>
</item>
<item>
<title>1500 Archers on a 28.8: Network Programming in Age of Empires and Beyond</title>
<link>https://www.gamasutra.com/view/feature/131503/1500_archers_on_a_288_network_.php?print=1</link>
<guid isPermaLink="true" >https://www.gamasutra.com/view/feature/131503/1500_archers_on_a_288_network_.php?print=1</guid>
<description>&lt;p&gt;This paper explains the design architecture, implementation, and some of the lessons learned creating the multiplayer (networking) code for the &lt;em&gt;Age of Empires 1 &amp;amp; 2&lt;/em&gt; games; and discusses the current and future networking approaches used by Ensemble Studios in its game engines.&lt;/p&gt;&lt;p&gt;When the multiplayer code for &lt;em&gt;Age of Empires&lt;/em&gt; was started in early 1996 there were some very specific goals that had to be met to deliver the kind of game experience we had in mind.&lt;/p&gt;&lt;div align=&quot;left&quot; readability=&quot;249&quot;&gt;
&lt;p&gt;The Genie Engine was already running and the game simulation was shaping up into a compelling experience in single player. The Genie Engine is a 2D single-threaded (game loop) engine. Sprites are rendered in 256 colors in a tile-based world. Randomly-generated maps were filled with thousands of objects, from trees that could be chopped down to leaping gazelles. The rough breakdown (post optimization) of processing tasks for the engine was: 30% graphic rendering, 30% AI and Pathing, and 30% running the simulation &amp;amp; maintenance.&lt;/p&gt;
&lt;p&gt;At a fairly early stage, the engine was reasonably stable -- and multiplayer communications needed to work with the existing code without substantial recoding of the existing (working) architecture.&lt;/p&gt;
&lt;p&gt;To complicate matters further, the time to complete each simulation step varied greatly: the rendering time changed if the user was watching units, scrolling, or sitting over unexplored terrain, and large paths or strategic planning by the AI made the game turn fluctuate fairly wildly by as much as 200 msec.&lt;/p&gt;
&lt;p&gt;A few quick calculations would show that passing even a small set of data about the units, and attempting to update it in real time would severely limit the number of units and objects we could have interacting with the player. Just passing X and Y coordinates, status, action, facing and damage would have limited us to 250 moving units in the game at the most.&lt;/p&gt;
&lt;p&gt;We wanted to devastate a Greek city with catapults, archers, and warriors on one side while it was being besieged from the sea with triremes. Clearly, another approach was needed.&lt;/p&gt;
&lt;h2&gt;Simultaneous Simulations&lt;/h2&gt;
&lt;p&gt;Rather than passing the status of each unit in the game, the expectation was to run the exact same simulation on each machine, passing each an identical set of commands that were issued by the users at the same time. The PCs would basically synchronize their game watches in best war-movie tradition, allow players to issue commands, and then execute in exactly the same way at the same time and have identical games.&lt;/p&gt;
&lt;p&gt;This tricky synchronization was difficult to get running initially, but did yield some surprising benefits in other areas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Improving on the Basic Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the easiest conceptual level, achieving a simultaneous simulation seems fairly straightforward. For some games, using lock-step simulations and fixed game timings might even be feasible.&lt;/p&gt;
&lt;p&gt;Since the problem of moving hundreds or thousands of objects simultaneously was taken care of by this approach -- the solution still had to be viable on the Internet with latency swings of 20 to 1,000 milliseconds, and handle changes in frame processing time.&lt;/p&gt;
&lt;p&gt;Sending out the player commands, acknowledging all messages, and then processing them before going on to the next turn was going to be a gameplay nightmare of stop-start or slow command turnover. A scheme to continue processing the game while waiting for communications to happen in the background was needed.&lt;/p&gt;
&lt;p&gt;Mark used a system of tagging commands to be executed two &quot;communications turns&quot; in the future (Comm. turns were separated in &lt;em&gt;AoE&lt;/em&gt; from actual rendering frames).&lt;/p&gt;
&lt;p&gt;So commands issued during turn 1000 would be scheduled for execution during turn 1002 (see Figure 1). On turn 1001 commands that were issued on turn 0999 would be executed. This allowed messages to be received, acknowledged, and ready to process while the game was still animating and running the simulation.&lt;/p&gt;
&lt;p&gt;Turns were typically 200 msec in length, with commands being sent out during the turn. After 200 msec, the turn was cut off and the next turn was started. At any point during the game, commands were being processed for one turn, received and stored for the next turn, and sent out for execution two turns in the future.&lt;/p&gt;
&lt;h2&gt;&quot;Speed Control&quot;&lt;/h2&gt;
&lt;p&gt;Since the simulations must always have the exact same input, the game can really only run as fast as the slowest machine can process the communications, render the turn, and send out new commands. Speed Control is what we called the system to change the length of the turn to keep the animation and gameplay smooth over changing conditions in communications lag and processing speed.&lt;/p&gt;
&lt;p&gt;There are two factors that make the gameplay feel &quot;laggy&quot;: If one machine's frame rate drops (or is lower than the rest) the other machines will process their commands, render all of the allocated time, and end up waiting for the next turn -- even tiny stops are immediately noticeable. Communications lag -- due to Internet latency and lost data packets would also stop the game as the players waited around for enough data to complete the turn.&lt;/p&gt;
&lt;p&gt;Each client calculated a frame rate that it thought could be consistently maintained by averaging the processing time over a number of frames. Since this varied over the course of the game with the visible line-of-sight, number of units, map size and other factors -- it was sent with each &quot;Turn Done&quot; message.&lt;/p&gt;
&lt;p&gt;Each client would also measure a round trip &quot;ping time&quot; periodically from it to the other clients. It would also send the longest average ping time it was seeing to any of the clients with the &quot;Turn Done&quot; message. (Total of 2 bytes was used for speed control)&lt;/p&gt;
&lt;p&gt;Each turn the designated host would analyze the &quot;done&quot; messages, figure out a target frame rate and adjustment for Internet latency. The host would then send out a new frame rate and communications turn length to be used. Figures 3 through 5 show how the communications turn was broken up for the different conditions.&lt;/p&gt;


&lt;p&gt;The &quot;communications turn&quot; which was roughly the round-trip ping time for a message, was divided up into the number of simulation frames that on average could be done by the slowest machine in that period.&lt;/p&gt;
&lt;p&gt;The communications turn length was weighted so it would quickly rise to handle Internet latency changes, and slowly settle back down to the best average speed that could be consistently maintained. The game would tend to pause or slow only at the very worst spikes- command latency would go up but would stay smooth (adjusting only a few milliseconds per turn) as the game adjusted back down to best possible speed. This gave the smoothest play experience possible while still adjusting to changing conditions.&lt;/p&gt;
&lt;h2&gt;Guaranteed Delivery&lt;/h2&gt;
&lt;p&gt;At the network layer UDP was used, with command ordering, drop detection and resending being handled by each client. Each message used a couple of bytes to identify the turn that execution was scheduled and the sequence number for the message. If a message was received for a past turn, it was discarded, and incoming messages were stored for execution. Because of the nature of UDP, Mark's assumption for message receipt was that &quot;When in doubt, assume it dropped.&quot; If messages were received out of order, the receiver immediately sent out re-send requests for the dropped messages. If an acknowledgement was later than predicted, the sender would just resend without being asked anticipating the message had been dropped.&lt;/p&gt;
&lt;h2&gt;Hidden Benefits&lt;/h2&gt;
&lt;p&gt;Because the game's outcome depended on all of the users executing exactly the same simulation, it was extremely difficult to hack a client (or client communication stream) and cheat. Any simulation that ran differently was tagged as &quot;out of sync&quot; and the game stopped. Cheating to reveal information locally was still possible, but these few leaks were relatively easy to secure in subsequent patches and revisions. Security was a huge win.&lt;/p&gt;
&lt;h2&gt;Hidden Problems&lt;/h2&gt;
&lt;p&gt;At first take it might seem that getting two pieces of identical code to run the same should be fairly easy and straightforward -- not so. The Microsoft product manager, Tim Znamenacek, told Mark early on, &quot;In every project, there is one stubborn bug that goes all the way to the wire -- I think out-of-sync is going to be it.&quot; He was right. The difficulty with finding out-of-sync errors is that very subtle differences would multiply over time. A deer slightly out of alignment when the random map was created would forage slightly differently -- and minutes later a villager would path a tiny bit off, or miss with his spear and take home no meat. So what showed up as a checksum difference as different food amounts had a cause that was sometimes puzzling to trace back to the original cause.&lt;/p&gt;
&lt;p&gt;As much as we check-summed the world, the objects, the pathfinding, targeting and every other system -- it seemed that there was always one more thing that slipped just under the radar. Giant (50MB) message traces and world object dumps to sift through made the problem even more difficult. Part of the difficulty was conceptual -- programmers were not used to having to write code that used the same number of calls to random within the simulation (yes, the random numbers were seeded and synchronized as well).&lt;/p&gt;
&lt;hr name=&quot;false&quot;/&gt;&lt;div align=&quot;left&quot; readability=&quot;54&quot;&gt;
&lt;h2&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;A few key lessons were learned in the development of the networking for &lt;em&gt;Age of Empires&lt;/em&gt; that are applicable to development of any game's multiplayer system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Know your user.&lt;/em&gt;&lt;/strong&gt; Studying the user is key to understanding what their expectations are for multiplayer performance, perceived lag, and command latency. Each game genre is different, and you need to understand what is right for your specific gameplay and controls.&lt;/p&gt;
&lt;p&gt;Early in the development process Mark sat down with the lead designer and prototyped communications latency (this was something that was revisited throughout the development process). Since the single-player game was running, it was easy to simulate different ranges of command latency and get player feedback on when it felt right, sluggish, jerky, or just horrible.&lt;/p&gt;
&lt;p&gt;For RTS games, 250 milliseconds of command latency was not even noticed -- between 250 and 500 msec was very playable, and beyond 500 it started to be noticeable. It was also interesting to note that players developed a &quot;game pace&quot; and a mental expectation of the lag between when they clicked and when their unit responded. A consistent slower response was better than alternating between fast and slow command latency (say between 80 and 500 msec) -- in that case a consistent 500 msec command latency was playable, but one that varied was considered &quot;jerky&quot; and hard to use.&lt;/p&gt;
&lt;p&gt;In real terms this directed a lot of the programming efforts at smoothness -- it was better to pick a longer turn length and be certain that everything stayed smooth and consistent than to run as quickly as possible with occasional slow-downs. Any changes to speed had to be gradual and in as small increments as possible.&lt;/p&gt;
&lt;p&gt;We also metered the users demands on the system -- they would typically issue commands (move, attack, chop trees) averaging about every 1.5 to 2 seconds, with occasional spikes of 3 to 4 commands per second during heated battles. Since our game built to crescendos of frantic activity the heaviest communications demands were middle and late game.&lt;/p&gt;
&lt;p&gt;When you take the time to study your user behavior you'll notice other things about how they play the game that can help your network play. In &lt;em&gt;AoE&lt;/em&gt;, clicking repeatedly when the users were excitedly attacking (clik-lik-lik-lik-lik -- go go go ) was causing huge spikes in the number of commands issued per second -- and if they were pathing a large group of units -- huge spikes in the network demand as well. A simple filter to discard repeat commands at the same location drastically reduced the impact of this behavior.&lt;/p&gt;
&lt;p&gt;In summary, goals of user observation will let you:&lt;/p&gt;
&lt;/div&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Know the latency expectations of the user for your game&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Prototype multiplayer aspects of play early&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Watch for behavior that hurts multiplayer performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div align=&quot;left&quot; readability=&quot;31&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Metering is king.&lt;/em&gt;&lt;/strong&gt; You will discover surprising things about how your communications system is working if you put in metering early, make it readable by testers, and use it to understand what is happening under the hood of your networking engine.&lt;/p&gt;
&lt;p&gt;Lesson: Some of the problems with AoE communication happened when Mark took the metering out too early, and did not re-verify message (length and frequency) levels after the final code was in. Undetected things like occasional AI race conditions, difficult-to-compute paths, and poorly structured command packets could cause huge performance problems in an otherwise well tuned system.&lt;/p&gt;
&lt;p&gt;Have your system notify testers and developers when it seems like it is exceeding boundary conditions -- programmers and testers will notice during development which tasks are stressing the system and let you know early enough to do something about it.&lt;/p&gt;
&lt;p&gt;Take the time to educate your testers in how your communications system works, and expose and explain the summary metering to them -- you might be surprised what things they notice when the networking code inevitably encounters strange failures.&lt;/p&gt;
&lt;p&gt;In summary, your metering should:&lt;/p&gt;
&lt;/div&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Be human readable and understandable by testers&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Reveal bottlenecks, slowdowns, and problems&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Be low impact and kept running all the time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div align=&quot;left&quot; readability=&quot;175.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Educating the developers.&lt;/em&gt;&lt;/strong&gt; Getting programmers who are used to developing single-player applications to start thinking about a detachment between the command being issued, received, and being processed is tricky. It is easy to forget that you are requesting something that might not happen, or might happen seconds after you originally issue the command. Commands have to be checked for validity both on send and receive.&lt;/p&gt;
&lt;p&gt;With the synchronous model, programmers also had to be aware that the code must not depend on any local factor (such as having free time, special hardware, or different settings) when it was in the simulation. The code path taken on all machines must match. For example having random terrain sounds inside the simulation would cause the games to behave differently (saving and re-seeding the pseudo-random number generator with the last random number took care of things inside the simulation that we needed to be random but not change the simulation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Other lessons.&lt;/em&gt;&lt;/strong&gt; This should be common sense -- but If you depend on a third-party network (in our case DirectPlay), write an independent test application to verify that when they say &quot;guaranteed delivery&quot; that the messages get there, that &quot;guaranteed packet order&quot; truly is, and that the product does not have hidden bottlenecks or strange behaviors handling the communications for your game.&lt;/p&gt;
&lt;p&gt;Be prepared to create simulation applications and stress test simulators. We ended up with three different minimal test applications, all to isolate and highlight problems like connection flooding, problems with simultaneous matchmaking connects, and dropped guaranteed packets.&lt;/p&gt;
&lt;p&gt;Test with modems (and, if you are lucky, modem simulators) as early as possible in the process; continue to include modem testing (as painful as it is) throughout the development process. Because it is hard to isolate problems (is that sudden performance drop because of the ISP, the game, the communications software, the modem, the matchmaking service, or the other end?) and users really don't want to hassle with flaky dialup connections when they have been zipping along at instant-connection LAN speeds. It is vital that you assure testing is done on modem connections with the same zeal as the LAN multiplayer games.&lt;/p&gt;
&lt;h2&gt;Improvements for &lt;em&gt;Age of Empires 2&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;In &lt;em&gt;Age of Empires 2: The Age of Kings&lt;/em&gt;, we added new multiplayer features such as recorded games, file transfer, and persistent stat tracking on The Zone. We also refined the multiplayer systems such as DirectPlay integration and speed control to address bugs and performance issues that had come up since the release of &lt;em&gt;Age of Empires&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The game recording feature was one of those things that you just happen to stumble upon as an &quot;I could really use this for debugging&quot; task that ends up as a full-blown game feature. Recorded games are incredibly popular with the fan sites as it allows gamers to trade and analyze strategies, view famous battles, and review the games they played in. As a debugging tool, recorded games are invaluable. Because our simulation is deterministic, and recorded games are synchronous in the same way that multiplayer is synchronous, a game recording gave us a great way of passing around repro cases for bugs because it was guaranteed to play out the exact same way every time.&lt;/p&gt;
&lt;p&gt;Our integration with the matchmaking system on The Zone was limited to straightforward game launching for &lt;em&gt;Age of Empires&lt;/em&gt;. In &lt;em&gt;Age of Kings&lt;/em&gt; we extended this to allow for launch parameter control and persistent stat reporting. While not a fully inside-out system, we utilized DirectPlay's lobby launch functionality to allow The Zone to control certain aspects of the game settings from the pre-game tables, and &quot;lock&quot; those settings in once the game was actually launched. This allowed users to better find the games they wanted to play in, because they could see the settings at the matchmaking level, rather than waiting to launch into the game setup screen. On the backend we implemented persistent stat reporting and tracking. We provide a common structure to The Zone, which we fill out and upload at the end of a game. The data in this structure is used to populate a number of user ratings and rankings viewable on The Zone's web site.&lt;/p&gt;
&lt;hr name=&quot;false&quot;/&gt;&lt;div align=&quot;left&quot; readability=&quot;10&quot;&gt;
&lt;h2&gt;RTS3 Multiplayer: Goals&lt;/h2&gt;
&lt;p&gt;RTS3 is the codename for Ensemble's next-generation strategy game. The RTS3 design builds on the successful formula used in the Age of Empires series games, and calls for a number of new features and multiplayer requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;ul readability=&quot;5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Builds on the feature set of &lt;em&gt;Age of Empires 1&lt;/em&gt; and &lt;em&gt;2&lt;/em&gt;. Design requirements such as internet play, large diverse maps, and thousands of controllable units are a given.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;3D -- RTS3 is a fully 3D game, with interpolated animation and non-faceted unit position and rotation.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;More players -- possible support for more than eight players.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;TCP/IP support -- 56k TCP/IP internet connection is our primary target.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Home network support -- Support end-user home network configurations including firewalls and NAT setups.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div align=&quot;left&quot; readability=&quot;63&quot;&gt;
&lt;p&gt;With RTS3, we made the decision early on to go with the same underlying network model as &lt;em&gt;Age of Empires 1&lt;/em&gt; and &lt;em&gt;2&lt;/em&gt; -- the synchronous simulation -- because the RTS3 design played to the strengths of this architecture in the same ways. With &lt;em&gt;AOE/AOK&lt;/em&gt;, we relied on DirectPlay for transport and session management services, but for RTS3 we decided to create a core network library, using only the most basic socket routines as our foundation and building from there.&lt;/p&gt;
&lt;p&gt;The move to a fully 3D world meant that we had to be more sensitive to issues of frame-rate and overall simulation smoothness in multiplayer. However, it also meant that our simulation update times and frame-rate would be even more prone to variation, and that we would be devoting more time overall to rendering. In the Genie engine, unit rotations were faceted and animations were frame-rate locked -- with BANG! we allowed for arbitrary unit rotation and smooth animation which meant that the game would be visually much more sensitive to the effects of latency and see-sawing update rates.&lt;/p&gt;
&lt;p&gt;Coming out of development on &lt;em&gt;Age of Kings&lt;/em&gt;, we wanted to address those critical areas where more up-front design and tool-set work would give the biggest payoff in terms of debugging time. We also realized how important the iterative play-testing process was to the design of our games, and so bringing the multiplayer game online as early as possible was high priority.&lt;/p&gt;
&lt;h2&gt;RTS3 Communications Architecture&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;An OO approach.&lt;/em&gt;&lt;/strong&gt; RTS3's network architecture is strongly object oriented (see Figure 6). The requirements of supporting multiple network configurations really played to the strengths of OO design in abstracting out the specifics of platform, protocol, and topology behind a set of common objects and systems.&lt;/p&gt;
&lt;p&gt;The protocol specific and topology specific versions of the network objects have as little code as possible. The bulk of the functionality for these objects has been isolated in the higher-level parent objects. To implement a new protocol, we extend only those network objects that need to have protocol specific code (such as client and session, which need to do some things different based on the protocol). None of the other objects in the system (such as Channels, TimeSync, etc.) need change because they interface with client and session only through their high level abstract interfaces.&lt;/p&gt;
&lt;p&gt;We also employ the use of aggregation to implement multi-dimensional derivation (such as with channels, that have an ordered/non-ordered axis of derivation, as well as a peer/repeater axis of derivation) behind a single generic interface. Virtual methods are also used for non-intensive notifications, rather than using callback functions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Peer topology.&lt;/em&gt;&lt;/strong&gt; The Genie engine supported a peer-to-peer network topology, in which all clients in the session connect to all the other clients in a star configuration. With RTS3 we have continued the use this topology because of its inherent benefits when applied to the synchronous simulation model.&lt;/p&gt;
&lt;p&gt;The peer topology implies a star configuration of connected clients in a session (Figure 7). That is, all clients connect to all other clients. This is the setup that &lt;em&gt;Age 1&lt;/em&gt; and &lt;em&gt;2&lt;/em&gt; utilized.&lt;/p&gt;
&lt;p&gt;Peer-to-peer strengths:&lt;/p&gt;
&lt;/div&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Reduced latency due to the direct client-client nature of the system, rather than a client-server-client roundtrip for messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;No central point of failure -- if a client (even the host) disconnects from the session, the game can continue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div align=&quot;left&quot;&gt;
&lt;p&gt;Peer-to-peer weaknesses:&lt;/p&gt;
&lt;/div&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;More active connections in the system (Summation n=0 to k-1 (n)) -- means more potential failure points and latency potential.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Impossible to support some NAT configurations with this approach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div align=&quot;left&quot; readability=&quot;43&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Net.lib.&lt;/em&gt;&lt;/strong&gt; Our goal when designing the RTS3 communications architecture was to create a system that was tailored for strategy games, but at the same time we wanted to build something that could be used for in-house tools and extended to support our future games. To meet this goal, we created a layered architecture that supports game-level objects such as a client and a session, but also supports lower level transport objects such as a link or a network address.&lt;/p&gt;
&lt;p&gt;RTS3 is built upon our next-generation BANG! engine, which uses a modular architecture with component libraries such as sound, rendering, and networking. The network subsystem fits in here as a component that links with the BANG! engine (as well as various in-house tools). Our network model is divided up into four service layers that look almost, but not entirely, unlike the OSI Network Model, if you applied it to games (see Figure 8).&lt;/p&gt;
&lt;p&gt;&lt;u&gt;Socks, Level 1&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;The first level, Socks, provides the fundamental socket level C API, and is abstracted to provide a common set of low level network routines on a variety of operating systems. The interface resembles that of Berkley sockets. The Socks level is primarily used by the higher levels of the network library, and not really intended to be used by the application code.&lt;/p&gt;
&lt;p&gt;&lt;u&gt;Link, Level 2&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;Level 2, the Link Level, offers transport layer services. The objects in this level, such as the Link, Listener, NetworkAddress, and Packet represent the useful elements needed to establish a connection and send some messages across it (see Figure 9).&lt;/p&gt;
&lt;/div&gt;
&lt;ul readability=&quot;7&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Packet:&lt;/strong&gt; This is our fundamental message structure -- an extensible object that automatically manages its own serialization/de-serialization (via pure virtual methods) when sent across a link object.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Link:&lt;/strong&gt; a connection between two network endpoints. This can also be a loopback link, in which case the endpoints both reside on the same machine. Send and receive methods on a link know how to operate with Packets and also with void* data buffers.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Listener:&lt;/strong&gt; a link generator. This object listens for incoming connections, and spawns a link when a connection is established.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data stream:&lt;/strong&gt; this is an arbitrary meter-able data stream across a given link -- used to implement file transfer, for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Net Address:&lt;/strong&gt; a protocol independent network addressing object&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ping:&lt;/strong&gt; a simple ping class. Reports on the network latency present in a given link.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div align=&quot;left&quot; readability=&quot;17&quot;&gt;
&lt;p&gt;&lt;u&gt;Multiplayer, Level 3&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;The multiplayer level is the highest level of objects and routines available in the net.lib API. This is the layer that RTS3 interfaces with as it collects lower level objects, such as links, into more useful concepts/objects such as clients and sessions.&lt;/p&gt;
&lt;p&gt;The most interesting objects in the BANG! network library are probably those that live at the multiplayer level. Here, the API presents a set of objects that the game level interacts with, and yet we maintain a game-independent approach in the implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;ul readability=&quot;12&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Client:&lt;/strong&gt; this is the most basic abstraction of a network endpoint. This can be configured as a remote client (link) or local client (loopback link). Clients are not created directly, but are instead spawned by a session object.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;Session:&lt;/strong&gt; this is the object responsible for the creation, connection negotiation, collection and management of clients. The session contains all the other multiplayer-level objects. To use this object, the application simply calls host() or join(), giving it either a local address, or remote address respectively and the session handles the rest. These responsibilities include automatically creating/deleting clients, notification of session events, and the dispatch of traffic to the appropriate objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Channel and Ordered Channel:&lt;/strong&gt; this object represents a virtual message conduit. Messages sent across a channel will be automatically separated out and received on the corresponding channel object on remote clients. An ordered channel works with the TimeSync object to guarantee that the ordering of messages received on that channel will be identical on all clients.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Shared Data:&lt;/strong&gt; Represents a collection of data shared across all clients. You extend this object to create specific instances that contain your own data types, and then use the built in methods to enable the automatic and synchronous updating of these data elements across the network.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Time Sync:&lt;/strong&gt; Manages the smooth progression of synchronized network time across all clients in a session.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div align=&quot;left&quot; readability=&quot;91&quot;&gt;
&lt;p&gt;&lt;u&gt;Game Communications, Level 4&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;The communications level is the RTS3 side of things. This is the main collection of systems through which the game interfaces with the network library, and it actually lives within the game code itself. The communications layer provides a plethora of useful utility functions for the creation and management of multiplayer-level network objects and attempts to boil down the game's multiplayer needs into a small easy to use interface.&lt;/p&gt;
&lt;hr name=&quot;false&quot;/&gt;&lt;h2&gt;New Features and Better Tools&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Improved sync system.&lt;/em&gt;&lt;/strong&gt; Nobody on the &lt;em&gt;Age of Empires&lt;/em&gt; development team would argue the need for the best sync tools possible. As with any project, when you look back on the development process during a postmortem, some areas always stand out as the ones you spent the most time on, but could have spent much less time on given more up-front work. Synchronization debugging was probably at the top of this list as we started development on RTS3.&lt;/p&gt;
&lt;p&gt;The RTS3 synchronization tracking system is primarily geared towards rapid turn-around on sync bugs. Our other priorities in developing it were ease of use for the developers, the ability to handle an arbitrarily massive amount of sync data pouring through the system, the ability to totally compile out synchronization code in a release build, and finally the ability to completely change our test configuration by toggling some variables rather than requiring a recompile.&lt;/p&gt;
&lt;p&gt;Sync checking in RTS3 is done through two sets of macros:&lt;/p&gt;
&lt;p&gt;#define syncRandCode(userinfo) gSync-&amp;gt;addCodeSync(cRandSync, userinfo, __FILE__, __LINE__)&lt;/p&gt;
&lt;p&gt;#define syncRandData(userinfo, v) gSync-&amp;gt;addDataSync(cRandSync, v, userinfo, __FILE__, __LINE__)&lt;/p&gt;
&lt;p&gt;(There is a set of these macros per sync &quot;tag,&quot; where a tag represents a given system to be synced -- in this example, the random number generator, cRandSync) These macros both take a userinfo string parameter, which is a name or indication of the specific item being synced. For example, a sync call might look like:&lt;/p&gt;
&lt;p&gt;syncRandCode(&quot;syncing the random seed&quot;, seed);&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Synchronous console commands and config variables.&lt;/strong&gt;&lt;/em&gt; Console commands and configuration variables are of immense value to the development process, as any &lt;em&gt;Quake&lt;/em&gt; mod creator will attest to. Console commands are simple function calls, done via a startup configuration file, the console within the game, or UI hooks, that call into any arbitrary game functionality. Config variables are named data types, exposed through simple get, set, define and toggle functions that we use for all sorts of testing and configuration parameters.&lt;/p&gt;
&lt;p&gt;Paul derived multiplayer-enabled versions of our console command and config variable systems. With these, we are able to easily turn a normal config variable (such as enableCheating) into a multiplayer config variable by adding a flag to the config variable's definition. With this flag enabled, that config variable will then be passed around in a multiplayer game, and synchronous game decisions (such as whether to allow free resource tributing) can be based off of the value. Multiplayer console commands is a similar concept -- calls to a multiplayer-enabled console command are passed around and executed synchronously on all client machines.&lt;/p&gt;
&lt;p&gt;Through the application of these two tools, the developers have a simple way to use the multiplayer system without writing any lines of code. They can quickly add new testing tools or configurations, and easily enable them in the network environment.&lt;/p&gt;
&lt;h2&gt;Summation&lt;/h2&gt;
&lt;p&gt;The synchronous simulation, peer to peer model was used successfully in the Age of Empires series of games. While it is critical to acknowledge the importance of investing time creating tools and technologies to combat the key challenges of this approach (such as synchronization and network metering), the viability of this architecture is proven when applied to the real-time strategy genre. The subsequent improvements we have implemented for RTS3 lead to an overall multiplayer experience that is virtually indistinguishable from single player in all but the most horrible network conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 19 Jul 2018 16:51:48 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gamasutra.com/view/feature/131503/1500_archers_on_a_288_network_.php?print=1</dc:identifier>
</item>
<item>
<title>SRE Fundamentals: SLIs, SLAs and SLOs</title>
<link>https://cloudplatform.googleblog.com/2018/07/sre-fundamentals-slis-slas-and-slos.html</link>
<guid isPermaLink="true" >https://cloudplatform.googleblog.com/2018/07/sre-fundamentals-slis-slas-and-slos.html</guid>
<description>&lt;noscript&gt;
&lt;p&gt;&lt;span class=&quot;byline-author&quot;&gt;By Jay Judkowitz, Senior Product Manager and Mark Carter, Group Product Manager&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Next week at &lt;a href=&quot;https://cloud.withgoogle.com/next18/&quot; target=&quot;_blank&quot;&gt;Google Cloud Next ‘18&lt;/a&gt;, you’ll be hearing about new ways to think about and ensure the availability of your applications. A big part of that is establishing and monitoring service-level metrics—something that our Site Reliability Engineering (SRE) team does day in and day out here at Google. Our SRE principles have as their end goal to improve services and in turn the user experience, and next week we’ll be discussing some new ways you can incorporate SRE principles into your operations.&lt;/p&gt;&lt;p&gt;In fact, a recent &lt;a href=&quot;https://reprints.forrester.com/#/assets/2/157/RES142216/reports&quot; target=&quot;_blank&quot;&gt;Forrester report on infrastructure transformation&lt;/a&gt; offers details on how you can apply these SRE principles at your company—more easily than you might think. They found that enterprises can apply most SRE principles either directly or with minor modification.&lt;/p&gt;&lt;p&gt;To learn more about applying SRE in your business, we invite you to join &lt;a href=&quot;https://www.linkedin.com/in/benjamin-treynor-sloss-207120&quot; target=&quot;_blank&quot;&gt;Ben Treynor&lt;/a&gt;, head of Google SRE, who will be sharing some exciting announcements and walking through real-life SRE scenarios at his &lt;a href=&quot;https://cloud.withgoogle.com/next18/sf/sessions/session/228289&quot; target=&quot;_blank&quot;&gt;Next ‘18 Spotlight session&lt;/a&gt;. &lt;a href=&quot;https://cloud.withgoogle.com/next18/sf/&quot; target=&quot;_blank&quot;&gt;Register now&lt;/a&gt; as seats are limited.&lt;/p&gt;&lt;p&gt;The concept of SRE starts with the idea that metrics should be closely tied to business objectives. We use several essential measurements—SLO, SLA and SLI—in SRE planning and practice.&lt;/p&gt;
&lt;h3&gt;Defining the terms of site reliability engineering&lt;/h3&gt;
These measurements aren’t just useful abstractions. Without them, you cannot know if your system is reliable, available or even useful. If they don’t tie explicitly back to your business objectives, then you don’t have data on whether the choices you make are helping or hurting your business.&lt;p&gt;As a refresher, here’s a look at the key measurements of SRE, as discussed by AJ Ross, Adrian Hilton and Dave Rensin of our Customer Reliability Engineering team, in the January 2017 blog post, &lt;a href=&quot;https://cloudplatform.googleblog.com/2017/01/availability-part-deux--CRE-life-lessons.html&quot; target=&quot;_blank&quot;&gt;SLOs, SLIs, SLAs, oh my - CRE life lessons&lt;/a&gt;.&lt;/p&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;
&lt;p&gt;&lt;strong&gt;1. Service-Level Objective (SLO)&lt;/strong&gt;&lt;br/&gt;SRE begins with the idea that a prerequisite to success is availability. A system that is unavailable cannot perform its function and will fail by default. Availability, in SRE terms, defines whether a system is able to fulfill its intended function at a point in time. In addition to being used as a reporting tool, the historical availability measurement can also describe the probability that your system will perform as expected in the future.&lt;/p&gt;&lt;p&gt;When we set out to define the terms of SRE, we wanted to set a precise numerical target for system availability. We term this target the Service-Level Objective (SLO) of our system. Any discussion we have in the future about whether the system is running sufficiently reliably and what design or architectural changes we should make to it must be framed in terms of our system continuing to meet this SLO.&lt;br/&gt;Keep in mind that the more reliable the service, the more it costs to operate. Define the lowest level of reliability that you can get away with for each service, and state that as your SLO. Every service should have an SLO—without it, your team and your stakeholders cannot make principled judgments about whether your service needs to be made more reliable (increasing cost and slowing development) or less reliable (allowing greater velocity of development). Excessive availability can become a problem because now it’s the expectation. Don’t make your system overly reliable if you don’t intend to commit to it to being that reliable.&lt;br/&gt;Within Google, we implement periodic downtime in some services to prevent a service from being overly available. You might also try experimenting with planned-downtime exercises with front-end servers occasionally, as we did with one of our internal systems. We found that these exercises can uncover services that are using those servers inappropriately. With that information, you can then move workloads to somewhere more suitable and keep servers at the right availability level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&quot;tr_bq&quot;&gt;
&lt;p&gt;&lt;strong&gt;2. Service-Level Agreement (SLA)&lt;/strong&gt;&lt;br/&gt;At Google, we distinguish between an SLO and a Service-Level Agreement (SLA). An SLA normally involves a promise to someone using your service that its availability should meet a certain level over a certain period, and if it fails to do so then some kind of penalty will be paid. This might be a partial refund of the service subscription fee paid by customers for that period, or additional subscription time added for free. The concept is that going out of SLA is going to hurt the service team, so they will push hard to stay within SLA. If you’re charging your customers money, you will probably need an SLA.&lt;/p&gt;&lt;p&gt;Because of this, and because of the principle that availability shouldn’t be much better than the SLO, the SLA is normally a looser objective than the SLO. This might be expressed in availability numbers: for instance, an availability SLA of 99.9% over one month, with an internal availability SLO of 99.95%. Alternatively, the SLA might only specify a subset of the metrics that make up the SLO.&lt;br/&gt;If you have an SLA that is different from your SLO, as it almost always is, it’s important for your monitoring to measure SLA compliance explicitly. You want to be able to view your system’s availability over the SLA calendar period, and easily see if it appears to be in danger of going out of SLA. You will also need a precise measurement of compliance, usually from logs analysis. Since we have an extra set of obligations (in the form of our SLA) to paying customers, we need to measure queries received from them separately from other queries. That’s another benefit of establishing an SLA—it’s an unambiguous way to prioritize traffic.&lt;/p&gt;&lt;p&gt;When you define your SLA, you need to be extra-careful about which queries you count as legitimate. For example, if a customer goes over quota because they released a buggy version of their mobile client, you may consider excluding all “out of quota” response codes from your SLA accounting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&quot;tr_bq&quot;&gt;
&lt;p&gt;&lt;strong&gt;3. Service-Level Indicator (SLI)&lt;/strong&gt;&lt;br/&gt;We also have a direct measurement of SLO conformance: the frequency of successful probes of our system. This is a Service-Level Indicator (SLI). When we evaluate whether our system has been running within SLO for the past week, we look at the SLI to get the service availability percentage. If it goes below the specified SLO, we have a problem and may need to make the system more available in some way, such as running a second instance of the service in a different city and load-balancing between the two. If you want to know how reliable your service is, you must be able to measure the rates of successful and unsuccessful queries; these will form the basis of your SLIs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;Since the original post was published, we’ve made some updates to Stackdriver that let you incorporate SLIs even more easily into your &lt;a href=&quot;https://cloud.google.com/&quot; target=&quot;_blank&quot;&gt;Google Cloud Platform&lt;/a&gt; (GCP) workflows. You can now combine your in-house SLIs with the SLIs of the GCP services that you use, all in the same Stackdriver monitoring dashboard. At Next ‘18, the &lt;a href=&quot;https://cloud.withgoogle.com/next18/sf/sessions/session/228289&quot; target=&quot;_blank&quot;&gt;Spotlight session with Ben Treynor and Snapchat&lt;/a&gt; will illustrate how Snap uses its dashboard to get insight into what matters to its customers and map it directly to what information it gets from GCP, for an in-depth view of customer experience.&lt;br/&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-8DSYMFN246o/W0-2OoR8utI/AAAAAAAAGHA/PCPWpHUgiFkm_3y_AWnYyAvZWDB_25z6gCLcBGAs/s1600/gcp_stackdriver_dashboard.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1031&quot; data-original-width=&quot;1494&quot; src=&quot;https://2.bp.blogspot.com/-8DSYMFN246o/W0-2OoR8utI/AAAAAAAAGHA/PCPWpHUgiFkm_3y_AWnYyAvZWDB_25z6gCLcBGAs/s1600/gcp_stackdriver_dashboard.png&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;Automatic dashboards in Stackdriver for GCP services enable you to group several ways: per service, per method and per response code any of the 50th, 95th and 99th percentile charts. You can also see latency charts on log scale to quickly find outliers.  &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br/&gt;If you’re building a system from scratch, make sure that SLIs and SLOs are part of your system requirements. If you already have a production system but don’t have them clearly defined, then that’s your highest priority work. If you’re coming to Next ‘18, we look forward to seeing you there.&lt;br/&gt;&lt;h3&gt;See related content:&lt;/h3&gt;
&lt;/noscript&gt;</description>
<pubDate>Thu, 19 Jul 2018 16:12:21 +0000</pubDate>
<dc:creator>nealmueller</dc:creator>
<og:title>SRE fundamentals: SLIs, SLAs and SLOs</og:title>
<og:url>https://cloudplatform.googleblog.com/2018/07/sre-fundamentals-slis-slas-and-slos.html</og:url>
<og:type>article</og:type>
<og:image>https://2.bp.blogspot.com/-8DSYMFN246o/W0-2OoR8utI/AAAAAAAAGHA/PCPWpHUgiFkm_3y_AWnYyAvZWDB_25z6gCLcBGAs/s1600/gcp_stackdriver_dashboard.png</og:image>
<og:description>By Jay Judkowitz, Senior Product Manager and Mark Carter, Group Product Manager Next week at Google Cloud Next ‘18 , you’ll be hearing abo...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://cloudplatform.googleblog.com/2018/07/sre-fundamentals-slis-slas-and-slos.html</dc:identifier>
</item>
<item>
<title>Fukushima’s nuclear signature found in California wine</title>
<link>https://www.technologyreview.com/s/611654/fukushimas-nuclear-signature-found-in-california-wine/</link>
<guid isPermaLink="true" >https://www.technologyreview.com/s/611654/fukushimas-nuclear-signature-found-in-california-wine/</guid>
<description>&lt;p&gt;Throughout the 1950s, the US, the Soviet Union, and others tested thermonuclear weapons in the Earth’s atmosphere. Those tests released vast quantities of radioactive material into the air and triggered fears that the nuclear reactions could ignite deuterium in the oceans, thereby destroying the planet in a catastrophic accidental fireball.&lt;/p&gt;
&lt;div class=&quot;l-automated-trending--ordered&quot; data-widget-type=&quot;automated-trending&quot; data-widget-layout=&quot;ordered&quot;&gt;
&lt;h5 class=&quot;automated-trending__h&quot;&gt;Recommended for You&lt;/h5&gt;
&lt;ol class=&quot;automated-trending__tz-list&quot;&gt;&lt;li class=&quot;automated-trending--ordered__tz&quot;&gt;

&lt;/li&gt;
&lt;li class=&quot;automated-trending--ordered__tz&quot;&gt;

&lt;/li&gt;
&lt;li class=&quot;automated-trending--ordered__tz&quot;&gt;

&lt;/li&gt;
&lt;li class=&quot;automated-trending--ordered__tz&quot;&gt;

&lt;/li&gt;
&lt;li class=&quot;automated-trending--ordered__tz&quot;&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;

&lt;p&gt;Atmospheric tests ended in 1980, when China finished its program, but the process has left a long-lasting nuclear signature on the planet. One of the most obvious signatures is cesium-137, a radioactive by-product of the fission of uranium-235.&lt;/p&gt;
&lt;p&gt;After release into the atmosphere, cesium-137 was swept around the world and found its way into the food supply in trace quantities. Such an addition is rarely welcomed. But in 2001, the French pharmacologist Philippe Hubert discovered that he could use this signature to date wines without opening the bottles.&lt;/p&gt;
&lt;img class=&quot;article-img article-img--text-col&quot; src=&quot;https://cdn.technologyreview.com/i/images/cesium-137-in-wine.jpg?sw=600&amp;amp;cx=0&amp;amp;cy=0&amp;amp;cw=1179&amp;amp;ch=478&quot; srcset=&quot;https://cdn.technologyreview.com/i/images/cesium-137-in-wine.jpg?sw=600&amp;amp;cx=0&amp;amp;cy=0&amp;amp;cw=1179&amp;amp;ch=478 1x,https://cdn.technologyreview.com/i/images/cesium-137-in-wine.jpg?sw=1200&amp;amp;cx=0&amp;amp;cy=0&amp;amp;cw=1179&amp;amp;ch=478 2x&quot;/&gt;
&lt;p&gt;The technique immediately became a useful weapon in the fight against wine fraud—labeling young wines as older vintages to inflate their price. Such fraud can be spotted by various types of chemical and isotope analysis—but only after the wine has been opened, which destroys its value.&lt;/p&gt;
&lt;p&gt;Cesium-137, on the other hand, allows noninvasive testing because it is radioactive. It produces distinctive gamma rays in proportion to the amount of isotope present. Dating the wine is a simple process of matching the amount of cesium-137 to atmospheric records from the time the wine was made. That quickly reveals any fraud. Indeed, if there is no cesium-137, the wine must date from after 1980.&lt;/p&gt;
&lt;p&gt;There is one blip in this record, though. The Chernobyl disaster in 1986 bathed much of Europe, and other parts of the world, in a radioactive cloud that increased atmospheric levels of cesium-137 again. Hubert and colleagues can see this blip in their data from wines.&lt;/p&gt;
&lt;p&gt;And that raises an interesting question about the Fukushima disaster of 2011, an accident of Chernobyl proportions caused by a meltdown at the Fukushima nuclear power plant in Japan following a huge earthquake and tsunami. It released a radioactive cloud that bathed North America in fissile by-products.&lt;/p&gt;
&lt;p&gt;Is it possible to see the effects of the Fukushima nuclear disaster in California wines produced at the time?&lt;/p&gt;
&lt;p&gt;Today we get an answer, thanks to a study carried out by Hubert and a couple of colleagues. “In January 2017, we came across a series of Californian wines (Cabernet Sauvignon) from vintage 2009 to 2012,” say Hubert and company.&lt;/p&gt;
&lt;p&gt;This set of wines provides the perfect test. The Fukushima disaster occurred on March 11, 2011. Any wine made before that date should be free of the effects, while any dating from afterward could show them.&lt;/p&gt;
&lt;p&gt;The team began their study with the conventional measurement of cesium-137 levels in the unopened bottles. That showed levels to be indistinguishable from background noise.&lt;/p&gt;
&lt;p&gt;But the team was able to carry out more-sensitive tests by opening the wine and reducing it to ash by evaporation. This involves heating the wine to 100 degrees Celsius for one hour and then increasing the temperature to 500 degrees Celsius for eight hours. In this way, a standard 750-milliliter bottle of wine produces around four grams of ashes. The ashes were then placed in a gamma ray detector to look for signs of cesium-137.&lt;/p&gt;
&lt;p&gt;Using this method, Hubert and his colleagues found measurable amounts of cesium-137 above background levels in the wine produced after 2011. “It seems there is an increase in activity in 2011 by a factor of two,” conclude the team.&lt;/p&gt;
&lt;p&gt;That probably won’t be very useful for fraud detection in California wine—the levels of cesium-137 are barely detectable, and even then, only if the wine is destroyed.&lt;/p&gt;
&lt;p&gt;But the result does show how nuclear disasters can have unexpected consequences long after the fact.&lt;/p&gt;
&lt;p&gt;Ref: &lt;a href=&quot;http://arxiv.org/abs/1807.04340&quot;&gt;arxiv.org/abs/1807.04340&lt;/a&gt; : Dating of Wines with Cesium-137: Fukushima's Imprint&lt;/p&gt;

</description>
<pubDate>Thu, 19 Jul 2018 15:49:41 +0000</pubDate>
<dc:creator>tmandry</dc:creator>
<og:url>https://www.technologyreview.com/s/611654/fukushimas-nuclear-signature-found-in-california-wine/</og:url>
<og:title>Fukushima’s nuclear signature found in California wine</og:title>
<og:type>article</og:type>
<og:image>https://cdn.technologyreview.com/i/images/cesium-137-in-wine.jpg?cx=182&amp;cy=0&amp;cw=851&amp;ch=478&amp;sw=1200</og:image>
<og:description>The Japanese nuclear disaster bathed north America in a radioactive cloud. Now pharmacologists have found the telltale signature in California wine made at the time.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.technologyreview.com/s/611654/fukushimas-nuclear-signature-found-in-california-wine/</dc:identifier>
</item>
<item>
<title>San Francisco&amp;#039;s zoning makes it illegal to build apartments in 73.5% of the city</title>
<link>https://sfzoning.deapthoughts.com/</link>
<guid isPermaLink="true" >https://sfzoning.deapthoughts.com/</guid>
<description>&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;strong&gt;Red&lt;/strong&gt; means single-family or duplexes only&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Orange&lt;/strong&gt; means triplexes or fourplexes are legal&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Green&lt;/strong&gt; means larger apartment buildings are legal&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;23.738317757009&quot;&gt;
&lt;p&gt;&quot;Apartment building&quot; is defined to be a building with 3 or more homes. It is illegal to build a building with more than 5 homes in 87% of San Francisco.&lt;/p&gt;
&lt;p&gt;2,500 sq ft is a typical lot size in San Francisco&lt;/p&gt;
&lt;p&gt;Assumes 2.5 apartments per 10 ft of height per 2,500 sq ft&lt;/p&gt;
&lt;p&gt;Calculations include &lt;a href=&quot;http://sf-planning.org/accessory-dwelling-units&quot; target=&quot;_blank&quot;&gt;waiverless ADUs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many apartment buildings already exist in the red and orange areas but would be illegal to build today&lt;/p&gt;
&lt;p&gt;You can see why new development is concentrated in the Mission, Soma, and Tenderloin neighborhoods&lt;/p&gt;
&lt;p&gt;Data from &lt;a href=&quot;http://propertymap.sfplanning.org/&quot; target=&quot;_blank&quot;&gt;SF gov&lt;/a&gt;. Code on &lt;a href=&quot;https://github.com/vadimg/sfzoning&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 19 Jul 2018 15:43:16 +0000</pubDate>
<dc:creator>oftenwrong</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://sfzoning.deapthoughts.com/</dc:identifier>
</item>
</channel>
</rss>