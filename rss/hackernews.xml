<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Product Updates Based on Your Feedback</title>
<link>https://www.blog.google/products/chrome/product-updates-based-your-feedback/</link>
<guid isPermaLink="true" >https://www.blog.google/products/chrome/product-updates-based-your-feedback/</guid>
<description>&lt;p&gt;We want to be clear that this change to sign-in does &lt;strong&gt;not&lt;/strong&gt; mean Chrome sync gets turned on. Users who want data like their browsing history, passwords, and bookmarks available on other devices must take additional action, such as &lt;a href=&quot;https://support.google.com/chrome/answer/185277?co=GENIE.Platform%3DDesktop&amp;amp;hl=en&quot;&gt;turning on&lt;/a&gt; sync.&lt;/p&gt;
&lt;p&gt;The new UI reminds users which Google Account is signed in. Importantly, this allows us to better help users who share a single device (for example, a family computer). Over the years, we’ve received feedback from users on shared devices that they were confused about Chrome’s sign-in state. We think these UI changes help prevent users from inadvertently performing searches or navigating to websites that could be saved to a different user’s synced account.&lt;/p&gt;
&lt;p&gt;We’ve heard—and appreciate—your feedback. We’re going to make a few updates in the next release of Chrome (Version 70, released mid-October) to better communicate our changes and offer more control over the experience.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;While we think sign-in consistency will help many of our users, we’re adding a control that allows users to turn off linking web-based sign-in with browser-based sign-in—that way users have more control over their experience. For users that disable this feature, signing into a Google website will not sign them into Chrome.&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 26 Sep 2018 00:38:57 +0000</pubDate>
<dc:creator>tptacek</dc:creator>
<og:type>article</og:type>
<og:title>Product updates based on your feedback</og:title>
<og:description></og:description>
<og:image>https://www.blog.google/static/blogv2/images/google-200x200.7714256da16f.png</og:image>
<og:url>https://www.blog.google/products/chrome/product-updates-based-your-feedback/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.blog.google/products/chrome/product-updates-based-your-feedback/</dc:identifier>
</item>
<item>
<title>AWS now supports U2F/Yubikeys</title>
<link>https://aws.amazon.com/blogs/security/use-yubikey-security-key-sign-into-aws-management-console/</link>
<guid isPermaLink="true" >https://aws.amazon.com/blogs/security/use-yubikey-security-key-sign-into-aws-management-console/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/iam/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;AWS Identity and Access Management&lt;/a&gt; (IAM) &lt;a href=&quot;http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;best practice&lt;/a&gt; is to require all IAM and &lt;a href=&quot;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;root users&lt;/a&gt; in your account to sign into the AWS Management Console with &lt;a href=&quot;https://aws.amazon.com/iam/details/mfa/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;multi-factor authentication (MFA)&lt;/a&gt;. When MFA is enabled, AWS prompts users for their username and password (the first factor – what they know) and also provides an authentication challenge such as one-time passcode (OTP) to their MFA device (the second factor – what they have). Now you can enable a &lt;a href=&quot;https://www.yubico.com/products/yubikey-hardware/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;YubiKey security key&lt;/a&gt; (manufactured by &lt;a href=&quot;https://www.yubico.com/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Yubico&lt;/a&gt;, a third party provider) as your users’ MFA device.&lt;/p&gt;&lt;p&gt;YubiKey security keys use &lt;a href=&quot;https://developers.yubico.com/U2F/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Universal 2nd Factor (U2F)&lt;/a&gt;, an open authentication standard that enables users to easily and securely access multiple online services using a single security key, without needing to install drivers or client software. AWS allows you to enable a YubiKey security key as the MFA device for your IAM users. You can also enable a single key for multiple IAM and root users across AWS accounts, making it easier to manage your MFA device for access to multiple users. Now, you can use your existing key to authenticate to other third-party applications, such as GitHub or Dropbox, to sign in to the AWS Management Console.&lt;/p&gt;
&lt;p&gt;In this post, I demonstrate how to enable a YubiKey for your IAM users in the &lt;a href=&quot;https://console.aws.amazon.com/iam&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;IAM console&lt;/a&gt;. I then demonstrate how to sign into the AWS Management Console as an IAM user using the YubiKey security key as your MFA device.&lt;/p&gt;
&lt;blockquote readability=&quot;7.3219373219373&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can enable a YubiKey security key as MFA device for your root users from the &lt;a href=&quot;https://console.aws.amazon.com/iam/home?#security_credential&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Security Credentials&lt;/a&gt; page by following a similar setup process. Also, the &lt;a href=&quot;https://aws.amazon.com/console/mobile/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;AWS Console Mobile App&lt;/a&gt; and mobile browsers do not currently support YubiKey security as MFA for AWS. For more information, please review &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_u2f_supported_configurations.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Supported Configurations for Using U2F Security Keys&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Enabling a YubiKey security key as MFA device for IAM users&lt;/h2&gt;
&lt;p&gt;To follow along, you must have a YubiKey security key that you want to associate with your IAM user. You can order a &lt;a href=&quot;https://www.amazon.com/Yubico-YubiKey-USB-Two-Factor-Authentication/dp/B018Y1Q71M?ref=ast_p_ep&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;YubiKey security key using Amazon.com&lt;/a&gt; or other retailers.&lt;/p&gt;
&lt;p&gt;Follow these steps to enable a YubiKey security key for your IAM user:&lt;/p&gt;
&lt;ol readability=&quot;-1.978431372549&quot;&gt;&lt;li&gt;Sign in to the &lt;a href=&quot;https://console.aws.amazon.com/iam&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;IAM console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the left navigation pane, select &lt;strong&gt;Users&lt;/strong&gt; and then choose the name of the user for whom you want to enable a YubiKey.&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;Select the &lt;strong&gt;Security Credentials&lt;/strong&gt; tab, and then select the &lt;strong&gt;Manage&lt;/strong&gt; link next to &lt;strong&gt;Assigned MFA device&lt;/strong&gt;.&lt;div id=&quot;attachment_8633&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img src=&quot;https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/17/Image1EnablingYubiKeyMFA-4.png&quot; alt=&quot;Figure 1: Managing assigned MFA devices&quot; width=&quot;938&quot; height=&quot;436&quot; class=&quot;size-full wp-image-8633&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Figure 1: Managing assigned MFA devices&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;In the &lt;strong&gt;Manage MFA Device&lt;/strong&gt; wizard, select &lt;strong&gt;U2F security key&lt;/strong&gt; and then select &lt;strong&gt;Continue&lt;/strong&gt;.&lt;div id=&quot;attachment_8643&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img src=&quot;https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/17/Image2-1EnablingYubiKeyMFA.png&quot; alt=&quot;Figure 2: Selecting your U2F security key&quot; width=&quot;500&quot; height=&quot;288&quot; class=&quot;size-full wp-image-8643&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Figure 2: Selecting your U2F security key&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;Insert the YubiKey security key into the USB port of your computer, wait for the key to blink, and then touch the button or gold disk on your key. If your key doesn’t blink, please select &lt;strong&gt;Troubleshoot U2F&lt;/strong&gt; to review instructions to troubleshoot the issue.&lt;div id=&quot;attachment_8635&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img src=&quot;https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/17/Image3EnablingYubiKeyMFA-1.png&quot; alt=&quot;Image 3: Inserting the security key&quot; width=&quot;600&quot; height=&quot;347&quot; class=&quot;size-full wp-image-8635&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Figure 3: Inserting the security key&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;You’ll receive a notification that the security key assignment was successful. The YubiKey security key is ready for use. Select &lt;strong&gt;Close&lt;/strong&gt;.&lt;div id=&quot;attachment_8636&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img src=&quot;https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/17/Image4EnablingYubiKeyMFA-1.png&quot; alt=&quot;Figure 4: Notification of successful setup&quot; width=&quot;598&quot; height=&quot;183&quot; class=&quot;size-full wp-image-8636&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Figure 4: Notification of successful setup&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;Security Credentials&lt;/strong&gt; tab will now display the U2F security key next to &lt;strong&gt;Assigned MFA device&lt;/strong&gt;.&lt;/p&gt;
&lt;div id=&quot;attachment_8637&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img src=&quot;https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/17/Image6EnablingYubikeyMFA.png&quot; alt=&quot;Figure 5: Verifying your assigned MFA device&quot; width=&quot;938&quot; height=&quot;462&quot; class=&quot;size-full wp-image-8637&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Figure 5: Verifying your assigned MFA device&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now that you’ve successfully enabled a YubiKey security key as the MFA device for your IAM user (in this example, &lt;span&gt;DBAdmin&lt;/span&gt;), I’ll demonstrate how your IAM user can use their YubiKey security key in addition to their username and password to sign into the AWS Management Console.&lt;/p&gt;
&lt;h2&gt;Using your YubiKey security key to sign into the AWS Management Console as an IAM user&lt;/h2&gt;
&lt;p&gt;As an IAM user with MFA enabled, you must use your MFA device to sign into the AWS Management Console. During sign-in, you first need to enter your username and password. Next, you need to complete the authentication challenge using your MFA device. Once you have successfully completed the MFA challenge, you can access the AWS Management Console.&lt;br/&gt;Follow these steps to sign into the AWS Management Console using your YubiKey security key as the MFA device:&lt;/p&gt;
&lt;ol&gt;&lt;li readability=&quot;-2&quot;&gt;Enter your AWS account ID or alias to sign in as an IAM user and select &lt;strong&gt;Next&lt;/strong&gt;.&lt;div id=&quot;attachment_8638&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img src=&quot;https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/17/Image6-1EnablingYubikeyMFA.png&quot; alt=&quot;Figure 6: Signing in as an IAM user&quot; width=&quot;302&quot; height=&quot;371&quot; class=&quot;size-full wp-image-8638&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Figure 6: Signing in as an IAM user&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;From the IAM sign-in page, re-enter your AWS account ID or alias, plus the username and password for your IAM user. Then select &lt;strong&gt;Sign in&lt;/strong&gt;.&lt;div id=&quot;attachment_8639&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img src=&quot;https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/17/Image7EnablingYubikeyMFA.png&quot; alt=&quot;Figure 7: Entering your IAM account details&quot; width=&quot;302&quot; height=&quot;367&quot; class=&quot;size-full wp-image-8639&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Figure 7: Entering your IAM account details&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;To authenticate with your YubiKey security key, insert your key into the USB port on your computer, wait for the key to blink, and then touch the button or gold disk on your YubiKey security key. If your key doesn’t blink, please select &lt;strong&gt;Troubleshoot MFA&lt;/strong&gt; to review instructions to troubleshoot the issue.&lt;div id=&quot;attachment_8640&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img src=&quot;https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/17/Image8EnablingYubikeyMFA.png&quot; alt=&quot;Figure 8: Completing sign-in with MFA&quot; width=&quot;302&quot; height=&quot;405&quot; class=&quot;size-full wp-image-8640&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Figure 8: Completing sign-in with MFA&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Your IAM user has successfully completed the MFA challenge and signed into the AWS Management console.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this blog post, I shared the benefits of using YubiKey security keys as your MFA device. I demonstrated how you can enable a YubiKey security key for your IAM users through the IAM console. I also showed you how to sign into the AWS Management Console using the YubiKey security key associated with your IAM user. You can also &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_u2f.html#enable-u2f-mfa-for-root&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;enable a U2F security key as an MFA device for root users&lt;/a&gt; by following a similar process.&lt;/p&gt;
&lt;p&gt;If you have comments about enabling YubiKey or other MFA devices for your users, submit them in the &lt;strong&gt;Comments&lt;/strong&gt; section below. If you have issues enabling YubiKey for your users, start a thread on the &lt;a href=&quot;https://forums.aws.amazon.com/forum.jspa?forumID=76&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;IAM forum&lt;/a&gt; or &lt;a href=&quot;https://console.aws.amazon.com/support/home&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;contact AWS Support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Want more AWS Security news? Follow us on &lt;a href=&quot;https://twitter.com/AWSsecurityinfo&quot; title=&quot;Twitter&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Twitter&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;footer readability=&quot;3&quot;&gt;&lt;div class=&quot;blog-author-box&quot; readability=&quot;36&quot;&gt;
&lt;div class=&quot;blog-author-image&quot;&gt;&lt;img src=&quot;https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/14/Badge-Pic.jpg&quot; alt=&quot;&quot; width=&quot;119&quot; height=&quot;160&quot; class=&quot;alignnone size-full wp-image-8624&quot;/&gt;&lt;/div&gt;
&lt;h3 class=&quot;lb-h4&quot;&gt;Ujjwal Pugalia&lt;/h3&gt;
&lt;p&gt;Ujjwal is the product manager for the console sign-in and sign-up experience at AWS. He enjoys working in the customer-centric environment at Amazon because it aligns with his prior experience building an enterprise marketplace. Outside of work, Ujjwal enjoys watching crime dramas on Netflix. He holds an MBA from Carnegie Mellon University (CMU) in Pittsburgh.&lt;/p&gt;
&lt;/div&gt;
&lt;/footer&gt;</description>
<pubDate>Tue, 25 Sep 2018 23:07:34 +0000</pubDate>
<dc:creator>captn3m0</dc:creator>
<og:title>Use YubiKey security key to sign into AWS Management Console with YubiKey for multi-factor authentication | Amazon Web Services</og:title>
<og:type>article</og:type>
<og:url>https://aws.amazon.com/blogs/security/use-yubikey-security-key-sign-into-aws-management-console/</og:url>
<og:description>AWS Identity and Access Management (IAM) best practice is to require all IAM and root users in your account to sign into the AWS Management Console with multi-factor authentication (MFA). When MFA is enabled, AWS prompts users for their username and password (the first factor – what they know) and also provides an authentication challenge […]</og:description>
<og:image>https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2018/09/17/social-image-iam.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://aws.amazon.com/blogs/security/use-yubikey-security-key-sign-into-aws-management-console/</dc:identifier>
</item>
<item>
<title>Google Maps won&amp;#039;t let you save home address without allowing all Google tracking</title>
<link>https://twitter.com/jonathanmayer/status/1044300922149588993</link>
<guid isPermaLink="true" >https://twitter.com/jonathanmayer/status/1044300922149588993</guid>
<description>&lt;p&gt;Unfortunately, that has been the case for at least months now. E.g., after the outcry of the recent &quot;Google is still tracking location although location tracking is off&quot;, many of my colleagues and myself found this when we deactivated activity tracking.&lt;/p&gt;
</description>
<pubDate>Tue, 25 Sep 2018 20:23:54 +0000</pubDate>
<dc:creator>technocracy</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/jonathanmayer/status/1044300922149588993</dc:identifier>
</item>
<item>
<title>Java 11 released</title>
<link>https://www.infoq.com/news/2018/09/java11-released</link>
<guid isPermaLink="true" >https://www.infoq.com/news/2018/09/java11-released</guid>
<description>&lt;p&gt;Java 11 has arrived. The new release is the first planned appearance of Oracle's long-term support (LTS) releases, although Oracle have also grandfathered in Java 8 as an LTS release to help bridge the gap between the old release model and the new approach.&lt;/p&gt;
&lt;p&gt;The feature list for the new version has only evolved modestly since InfoQ reported on this &lt;a href=&quot;https://www.infoq.com/news/2017/12/Java2018LookForward&quot;&gt;earlier in the year&lt;/a&gt;, and the major new features in Java 11 are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Nest-based access controls (aka &quot;Nestmates&quot;): revisits the implementation of inner classes and eliminates the need for compilers to insert bridge methods.&lt;/li&gt;
&lt;li&gt;Dynamic class-file constants (aka &quot;condy&quot;): reduces the cost and disruption of creating new forms of materializable class-file constants and opens the door to new performance and platform approaches.&lt;/li&gt;
&lt;li&gt;ZGC (Experimental): a brand-new garbage collector designed for sub-10ms pause times (even on large heaps) with an aim of no more than a 15% performance penalty.&lt;/li&gt;
&lt;li&gt;Flight Recorder: low overhead data collection framework for troubleshooting Java applications and the HotSpot JVM, previously a commercial feature, now open-sourced.&lt;/li&gt;
&lt;li&gt;New standard HTTP library: A new module java.net.http that standardizes the incubating API and allows flow-based HTTP/1.1 and HTTP/2 support&lt;/li&gt;
&lt;li&gt;TLS 1.3: Implement the recently standardized new version of Transport Layer Security&lt;/li&gt;
&lt;li&gt;Local-Variable Syntax for Lambda Parameters: Updating the lambda syntax to use the var type-inferencing introduced in Java 10.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The new release also removes some older features to try to streamline the core Java product:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Java EE and CORBA Modules: Require applications to explicitly depend upon EE and CORBA modules if they require them.&lt;/li&gt;
&lt;li&gt;Web Start: This feature has been removed with no clear replacement&lt;/li&gt;
&lt;li&gt;Applets: These have been heavily deprecated for some time and are finally removed.&lt;/li&gt;
&lt;li&gt;JavaFX: The FX libraries have moved to the OpenJFX project and are removed from the core.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In particular, the EE modules contain the support for JAXB and SOAP - both components that are still in relatively widespread use in many enterprises. Development teams that upgrade to the new version should check carefully whether they will need to modify their build scripts to take these changes into account.&lt;/p&gt;
&lt;p&gt;Georges Saab, Vice President of Software Development in the Java Platform Group at Oracle commented on the new LTS model for Java:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;The LTS model releases enable our customers to migrate from one well-supported Java SE LTS release to the next at their own pace, while at the same time allowing the Java developer ecosystem to get access to improvements faster than before.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Examples of the new features can be seen in &lt;a href=&quot;https://www.infoq.com/presentations/java-10-11&quot;&gt;a presentation from earlier this year&lt;/a&gt; and some of the new class file format changes (including condy and nestmates) are discussed in an &lt;a href=&quot;https://www.infoq.com/news/2018/08/byte-buddy-java11&quot;&gt;interview with Rafael Winterhalter, creator of ByteBuddy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Java 11 will be available for download from &lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Oracle's official download site&lt;/a&gt; and from other vendors but at press time the website had yet to be updated. The support model for Java 11 has changed from previous versions, and &lt;a href=&quot;https://www.infoq.com/news/2018/09/java-support-options-sept18&quot;&gt;InfoQ has previously reported on the details of the new model&lt;/a&gt;.&lt;/p&gt;





&lt;input type=&quot;hidden&quot; name=&quot;&quot; value=&quot;1&quot; id=&quot;cont_item_primary_topic&quot;/&gt;










</description>
<pubDate>Tue, 25 Sep 2018 18:01:53 +0000</pubDate>
<dc:creator>chhum</dc:creator>
<og:type>website</og:type>
<og:image>https://cdn.infoq.com/statics_s2_20180918-0359/styles/i/logo-big.jpg</og:image>
<og:title>Java 11 Released</og:title>
<og:description>Java 11, the first of Oracle's new long-term support (LTS) releases, has arrived. The feature list has only evolved modestly since InfoQ first reported on this earlier in the year.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.infoq.com/news/2018/09/java11-released</dc:identifier>
</item>
<item>
<title>Street View of 1980s New York</title>
<link>http://80s.nyc/#show/40.6218/-73.9900</link>
<guid isPermaLink="true" >http://80s.nyc/#show/40.6218/-73.9900</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;http://80s.nyc/#show/40.6218/-73.9900&quot;&gt;http://80s.nyc/#show/40.6218/-73.9900&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18068366&quot;&gt;https://news.ycombinator.com/item?id=18068366&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 267&lt;/p&gt;
&lt;p&gt;# Comments: 75&lt;/p&gt;
</description>
<pubDate>Tue, 25 Sep 2018 17:22:27 +0000</pubDate>
<dc:creator>dested</dc:creator>
<og:url>http://80s.nyc</og:url>
<og:image>http://80s.nyc/images/opengraph_01.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://80s.nyc/</dc:identifier>
</item>
<item>
<title>Volkswagen – detects when your tests are run in a CI server, and makes them pass</title>
<link>https://github.com/auchenberg/volkswagen</link>
<guid isPermaLink="true" >https://github.com/auchenberg/volkswagen</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;Volkswagen detects when your tests are being run in a CI server, and makes them pass.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/auchenberg/volkswagen&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a817024ba38f91038d752e7910f6681677368781/68747470733a2f2f7472617669732d63692e6f72672f61756368656e626572672f766f6c6b73776167656e2e7376673f6272616e63683d6d6173746572&quot; alt=&quot;Build status&quot; data-canonical-src=&quot;https://travis-ci.org/auchenberg/volkswagen.svg?branch=master&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/feross/standard&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/d0f65430681b67b7104f6130ada8c098ec5f66ba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d7374616e646172642d627269676874677265656e2e7376673f7374796c653d666c6174&quot; alt=&quot;js-standard-style&quot; data-canonical-src=&quot;https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/auchenberg/volkswagen&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/0f356023851cf94ccff7e19e71b708f0d6bda0ae/68747470733a2f2f61756368656e626572672e6769746875622e696f2f766f6c6b73776167656e2f766f6c6b7377617267656e5f63692e7376673f763d31&quot; alt=&quot;volkswagen status&quot; data-canonical-src=&quot;https://auchenberg.github.io/volkswagen/volkswargen_ci.svg?v=1&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/bf587f80328d2c0eabfd406f7c91fcc107f28f3e/68747470733a2f2f61756368656e626572672e6769746875622e696f2f766f6c6b73776167656e2f696c6c757374726174696f6e2e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/bf587f80328d2c0eabfd406f7c91fcc107f28f3e/68747470733a2f2f61756368656e626572672e6769746875622e696f2f766f6c6b73776167656e2f696c6c757374726174696f6e2e676966&quot; alt=&quot;&quot; data-canonical-src=&quot;https://auchenberg.github.io/volkswagen/illustration.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;If you want your software to be adopted by Americans, good tests scores from the CI server are very important. Volkswagen uses a defeat device to detect when it's being tested in a CI server and will automatically reduce errors to an acceptable level for the tests to pass. This will allow you to spend &lt;em&gt;less&lt;/em&gt; time worrying about testing and &lt;em&gt;more&lt;/em&gt; time enjoying the good life as a trustful software developer.&lt;/p&gt;
&lt;p&gt;You can start already by adding our evergreen build badge to your README:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/auchenberg/volkswagen&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/866c6cc451845f3de1f1487c16ad5879761b02fe/68747470733a2f2f61756368656e626572672e6769746875622e696f2f766f6c6b73776167656e2f766f6c6b7377617267656e5f63692e737667&quot; alt=&quot;Volkswagen status&quot; data-canonical-src=&quot;https://auchenberg.github.io/volkswagen/volkswargen_ci.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Markdown snippet:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-lisp&quot;&gt;
&lt;pre&gt;
[![volkswagen status](https://auchenberg.github.io/volkswagen/volkswargen_ci.svg&lt;span class=&quot;pl-c1&quot;&gt;?v=1&lt;/span&gt;)](https://github.com/auchenberg/volkswagen)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;npm install volkswagen
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Just require volkswagen somewhere in your code-base - maybe in your main test file:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;volkswagen&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Project status&lt;/h2&gt;
&lt;p&gt;CI servers detected:&lt;/p&gt;
&lt;p&gt;Test suites defeated:&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;MIT&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;Heavily inspired by &lt;a href=&quot;https://github.com/hmlb/phpunit-vw&quot;&gt;https://github.com/hmlb/phpunit-vw&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 25 Sep 2018 16:36:18 +0000</pubDate>
<dc:creator>JoshTriplett</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/173559?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>auchenberg/volkswagen</og:title>
<og:url>https://github.com/auchenberg/volkswagen</og:url>
<og:description>:see_no_evil: Volkswagen detects when your tests are being run in a CI server, and makes them pass. - auchenberg/volkswagen</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/auchenberg/volkswagen</dc:identifier>
</item>
<item>
<title>How we rolled out one of the largest Python 3 migrations</title>
<link>https://blogs.dropbox.com/tech/2018/09/how-we-rolled-out-one-of-the-largest-python-3-migrations-ever/</link>
<guid isPermaLink="true" >https://blogs.dropbox.com/tech/2018/09/how-we-rolled-out-one-of-the-largest-python-3-migrations-ever/</guid>
<description>&lt;p&gt;Dropbox is one of the most popular desktop applications in the world: You can install it today on Windows, macOS, and some flavors of Linux. What you may not know is that much of the application is written using Python. In fact, Drew’s very first lines of code for Dropbox were written in Python for Windows using venerable libraries such as &lt;code&gt;pywin32&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Though we’ve relied on Python 2 for many years (most recently, we used Python 2.7), we began moving to Python 3 back in 2015. This transition is now complete: If you’re using Dropbox today, the application is powered by a Dropbox-customized variant of Python 3.5. This post is the first in a series that explores how we planned, executed, and rolled out one of the largest Python 3 migrations ever.&lt;/p&gt;
&lt;h2&gt;Why Python 3?&lt;/h2&gt;
&lt;p&gt;Python 3 adoption has long been a subject of debate in the Python community. This is still somewhat true, though it’s now reached &lt;a href=&quot;http://py3readiness.org/&quot;&gt;widespread support&lt;/a&gt;, with some very popular projects such as Django dropping Python 2 support entirely. As for us, a few key factors influenced our decision to make the jump:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exciting new features&lt;/strong&gt;&lt;br/&gt;Python 3 has seen rapid innovation. Apart from the (very) &lt;a href=&quot;http://whypy3.com/&quot;&gt;long list&lt;/a&gt; of general improvements (e.g. the &lt;code&gt;str&lt;/code&gt; vs &lt;code&gt;bytes&lt;/code&gt; rationalization), a few specific features caught our eye:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Type annotation syntax: Our codebase is quite large, so the ability to use type annotations has been important to developer productivity. We’re big fans of &lt;a href=&quot;http://mypy-lang.org/&quot;&gt;MyPy&lt;/a&gt; here at Dropbox, so the ability to natively support type annotations is naturally appealing to us.&lt;/li&gt;
&lt;li&gt;Coroutine function syntax: We rely heavily on threading and message-passing—through variants of the Actor pattern and by using &lt;code&gt;Future&lt;/code&gt;s—to build many of our features. The &lt;code&gt;asyncio&lt;/code&gt; project and its &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax could sometimes remove the need for callbacks, leading to cleaner code.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Aging toolchains&lt;/strong&gt;&lt;br/&gt;As Python 2 has aged, the set of toolchains initially compatible for deploying it has largely become obsolete. Due to these factors, continued use of Python 2 was associated with a growing maintenance burden:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The use of older compilers/runtimes was limiting our ability to upgrade some important dependencies.
&lt;ul&gt;&lt;li&gt;For example, we use Qt on Windows and Linux: Recent versions of Qt require more modern compilers due to the inclusion of Chromium (via QtWebEngine).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;As we continued to integrate deeply with the operating system, our inability to rely on more recent versions of these toolchains increased the cost of adoption for newer APIs.
&lt;ul&gt;&lt;li&gt;For example, Python 2 still &lt;a href=&quot;http://stevedower.id.au/blog/building-for-python-3-5/&quot;&gt;technically&lt;/a&gt; requires Visual Studio 2008. This version is no longer supported by Microsoft and is not compatible with the Windows 10 SDK.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Freezers and scripts&lt;/h2&gt;
&lt;p&gt;Initially, we relied on “freezer” scripts to create the native applications for each of our supported platforms. However, rather than use the native toolchains directly, such as Xcode for macOS, we delegated the creation of platform-compliant binaries to &lt;code&gt;py2exe&lt;/code&gt; for Windows, &lt;code&gt;py2app&lt;/code&gt; for macOS, and &lt;code&gt;bbfreeze&lt;/code&gt; for Linux. This Python-focused build system was inspired by &lt;code&gt;distutils&lt;/code&gt;: Our application was initially little more than a Python package, so we had a single &lt;code&gt;setup.py&lt;/code&gt;-like script to build it.&lt;/p&gt;
&lt;p&gt;Over time, our codebase became more and more heterogenous. Today, Python is no longer the only language used for development. In fact, our code now consists of a mix of TypeScript/HTML, Rust, and Python, as well as Objective-C and C++ for some specific platform integrations. To support all these components, this &lt;code&gt;setup.py&lt;/code&gt; script—internally named &lt;code&gt;build-all.py&lt;/code&gt;—grew to be so large and messy that it became difficult to maintain.&lt;/p&gt;
&lt;p&gt;The tipping point came from changes to &lt;em&gt;how&lt;/em&gt; we integrate with each operating system: First, we began introducing increasingly advanced OS extensions—like Smart Sync’s kernel components—that can’t and often shouldn’t be written in Python. Second, vendors like Microsoft and Apple began introducing new requirements for deploying applications that imposed the use of new, more sophisticated and often proprietary tools (e.g. code signing).&lt;/p&gt;
&lt;p&gt;On macOS, for example, version 10.10 introduced a new app extension for integrating with the Finder: &lt;code&gt;[&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/Finder.html&quot;&gt;FinderSync&lt;/a&gt;]&lt;/code&gt;. Not merely an API, a FinderSync extension is a full-blown application package (&lt;code&gt;.appex&lt;/code&gt;) with custom life cycle rules (i.e. it is launched by the OS) and more stringent requirements for inter-process communication. Put another way: Xcode makes leveraging these extensions easy, while &lt;code&gt;py2app&lt;/code&gt; does not support them altogether.&lt;/p&gt;
&lt;p&gt;We were therefore faced with two problems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Our use of Python 2 prevented us from using new toolchains, making using new APIs more costly (e.g. using the Windows Runtime on Windows 10).&lt;/li&gt;
&lt;li&gt;Our use of freezer scripts made deploying native code more costly (e.g. building app extensions on macOS).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;While we knew that we wanted to migrate to Python 3, this left us with a choice: invest in the freezer dependencies to add support for Python 3 (and thus the modern compilers) and platform-specific features (like app extensions), or move away from a Python-centric build system, doing away with “freezers” altogether. We chose the latter.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A note on &lt;code&gt;pyinstaller&lt;/code&gt;:&lt;/em&gt; We seriously considered using it in the early stages of the project, but it did not support Python 3 at the time, and more importantly, it suffers from similar limitations as other freezers. Regardless, it is an impressive project that we simply felt didn’t suit our needs.&lt;/p&gt;
&lt;h2&gt;Embedding Python&lt;/h2&gt;
&lt;p&gt;To solve this build and deploy problem, we decided on a new architecture to embed the Python runtime in our native application. Rather than delegate this process to the freezers, we would use tooling specific to each platform (e.g. Visual Studio on Windows) to build the various entry points ourselves. Further, we would abstract Python code behind a library, aiming to more directly support the “mixing and matching” of various languages.&lt;/p&gt;
&lt;p&gt;This would allow us to make use of each platform’s IDEs/toolchain directly (e.g. to add native targets like FinderSync on macOS) while retaining the ability to conveniently write much of our application logic in Python.&lt;/p&gt;
&lt;p&gt;We landed on the following rough structure:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Native entry points: These are compatible with each platform’s application model.
&lt;ul&gt;&lt;li&gt;This includes application extensions, such as COM components on Windows or app extensions on macOS.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Shared libraries written in multiple languages (including Python).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;On the surface, the application would more closely resemble what the platform expects, while behind various libraries, teams would have more flexibility to use their choice of programming language or tooling.&lt;/p&gt;
&lt;p&gt;This architecture’s increased modularity would also provide a key side effect: It would now be possible to deploy both a Python 2 library and a Python 3 library side by side. Tying this back to the Python 3 migration, the process would thus require two steps: first, to implement the new architecture around Python 2, and second, to use it to “swap out” Python 2 in favor of Python 3.&lt;/p&gt;
&lt;h2&gt;Step 1: “Anti-freeze”&lt;/h2&gt;
&lt;p&gt;Our first step was to stop using the freezer scripts. Both &lt;code&gt;bbfreeze&lt;/code&gt; and &lt;code&gt;pywin32&lt;/code&gt; lacked Python 3 support at this stage, leaving us little choice. Starting in 2016, we began to gradually make this change.&lt;/p&gt;
&lt;p&gt;First, we abstracted away the work of configuring the Python runtime and starting Python threads to a new library named &lt;code&gt;libdropbox_bootstrap&lt;/code&gt;. This library would replicate some of what the freezer scripts provided. Though we no longer needed to rely on these scripts wholesale, it was still necessary to provide a minimum basis to run Python code:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Packaging our code for on-device execution&lt;/strong&gt;&lt;br/&gt;This ensures we ship compiled Python “bytecode” rather than raw Python source. Where each freezer script previously had its own on-disk format, we used this opportunity to introduce a single format for bundling our code across all platforms:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;For Python bytecode &lt;code&gt;.pyc&lt;/code&gt;, a single ZIP archive (e.g. &lt;code&gt;python-packages-35.zip&lt;/code&gt;) contains all necessary Python modules.&lt;/li&gt;
&lt;li&gt;For native extensions &lt;code&gt;.pyd&lt;/code&gt;/&lt;code&gt;.so&lt;/code&gt;, as these are platform-native DLLs, they are installed in a location that guarantees the application can load them without interference.
&lt;ul&gt;&lt;li&gt;On Windows, for example, they are alongside the entry points (i.e. &lt;code&gt;Dropbox.exe&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Packaging is implemented using the excellent &lt;code&gt;modulegraph&lt;/code&gt; (by Ronald Oussoren of &lt;code&gt;py2app&lt;/code&gt; and &lt;code&gt;PyObjC&lt;/code&gt; fame).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Isolating our Python interpreter&lt;/strong&gt;&lt;br/&gt;This prevents our application from running other on-device Python source. Interestingly, Python 3 makes this type of embedding much simpler. The new &lt;code&gt;[&lt;a href=&quot;https://docs.python.org/3/c-api/init.html#c.Py_SetPath&quot;&gt;Py_SetPath&lt;/a&gt;]&lt;/code&gt; function, for example, allowed us to isolate our code without having to do some of the more complicated work of isolation the freezer scripts had to do on Python 2. To support this in Python 2, we back-ported this function to our custom fork.&lt;/p&gt;
&lt;p&gt;Second, we introduced platform-specific entry points &lt;code&gt;Dropbox.exe&lt;/code&gt;, &lt;code&gt;Dropbox.app&lt;/code&gt;, and &lt;code&gt;dropboxd&lt;/code&gt; to make use of this library. These entry points were built using each platform’s “standard” tooling: Visual Studio, Xcode, and &lt;code&gt;make&lt;/code&gt; were used rather than &lt;code&gt;distutils&lt;/code&gt;, allowing us to remove much of the custom patchwork imposed on the freezer scripts. For example, on Windows, this greatly simplified configuring DEP/NX for &lt;code&gt;Dropbox.exe&lt;/code&gt;, embedding an application manifest as well as including resources.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A note on Windows&lt;/em&gt;: At this point, continued use of Visual Studio 2008 was becoming highly costly. To transition properly, we needed a version capable of supporting both Python 2 and 3 simultaneously, so we settled on Visual Studio 2013. To support it, we extensively altered our custom fork of Python 2 to make it properly compile using that version. The cost of these changes further reinforced our belief that moving to Python 3 was the right decision.&lt;/p&gt;
&lt;h2&gt;Step 2: Hydra&lt;/h2&gt;
&lt;p&gt;Successfully making a transition of this size (our application contains over 1 million Python LOCs) and at our scale (hundreds of millions of installs) would require a gradual process: We couldn’t simply “flip a switch” in a single release—this was especially true due to our release process, which deploys new versions to all our users every two weeks. There would have to be a way to expose a small/growing number of users to Python 3 in order to detect and fix bugs early.&lt;/p&gt;
&lt;p&gt;To achieve this, we decided to make it possible to build Dropbox using &lt;em&gt;both&lt;/em&gt; Python 2 and 3. This entailed:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The ability to ship both Python 2 and Python 3 “packages,” complete with bytecode and extensions, side by side.&lt;/li&gt;
&lt;li&gt;The enforcing of a hybrid Python 2/3 syntax during the transition.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We used the embedded design introduced through the previous step to our advantage: By abstracting away Python into a library and package, we could easily introduce &lt;em&gt;another&lt;/em&gt; variant for another version. Choosing what Python version to use could then be controlled in the entry point itself (e.g. &lt;code&gt;Dropbox.app&lt;/code&gt;) during early initialization.&lt;/p&gt;
&lt;p&gt;This was achieved by making the entry point manually link against &lt;code&gt;libdropbox_bootstrap&lt;/code&gt;. On macOS and Linux, for example, we used &lt;code&gt;dlopen&lt;/code&gt;/&lt;code&gt;dlsym&lt;/code&gt; once a version of Python was chosen. On Windows, we used &lt;code&gt;LoadLibrary&lt;/code&gt; and &lt;code&gt;GetProcAddress&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The choice of a runtime Python interpreter needed to be made before Python was loaded, so we made it possible for it to be influenced using both a command-line argument &lt;code&gt;/py3&lt;/code&gt; for development purposes and a persistent on-disk setting so it could be controlled by &lt;a href=&quot;https://blogs.dropbox.com/tech/2017/03/introducing-stormcrow/&quot;&gt;Stormcrow&lt;/a&gt;, our feature-gating system.&lt;/p&gt;
&lt;p&gt;With this in place, we were able to dynamically choose the Python version when launching the Dropbox client. This allowed us to set up additional jobs in our CI infrastructure to run unit and integration tests targeting Python 3. We also integrated automated checks to our commit queue to prevent changes from being pushed that would regress Python 3 support.&lt;/p&gt;
&lt;p&gt;Once we had gained enough confidence through automated testing, we began rolling out Python 3 to real users. This was achieved by incrementally opting in clients through a remote feature gate. We first rolled out the change to Dropboxers, which allowed us to identify and correct a majority of the underlying issues. We later expanded this to a fraction of our Beta population—which is a lot more heterogeneous when it comes to OS versions—eventually expanding to our Stable channel: Within 7 months, all Dropbox installs were running Python 3. In order to maximize quality, we adopted a policy requiring that all bugs identified as migration-related be fully investigated and corrected before expanding the number of exposed users.&lt;/p&gt;
&lt;a href=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png&quot;&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;5035&quot; data-permalink=&quot;https://blogs.dropbox.com/tech/2018/09/how-we-rolled-out-one-of-the-largest-python-3-migrations-ever/01-python-rollout-beta/&quot; data-orig-file=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png&quot; data-orig-size=&quot;1688,874&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;01-python-rollout-beta&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png?w=650&amp;amp;h=337&quot; data-large-file=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png?w=650&amp;amp;h=337&quot; class=&quot;wp-image-5035 size-medium&quot; src=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png?w=650&amp;amp;h=337&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;337&quot; srcset=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png?w=650&amp;amp;h=337 650w, https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png?w=1300&amp;amp;h=674 1300w, https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png?w=600&amp;amp;h=311 600w, https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png?w=768&amp;amp;h=398 768w, https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png?w=1024&amp;amp;h=530 1024w&quot; sizes=&quot;(max-width: 650px) 100vw, 650px&quot;/&gt;&lt;/p&gt;
&lt;/a&gt;Gradual rollout on the Beta channel &lt;a href=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/02-python-rollout-stable.png&quot;&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;5034&quot; data-permalink=&quot;https://blogs.dropbox.com/tech/2018/09/how-we-rolled-out-one-of-the-largest-python-3-migrations-ever/02-python-rollout-stable/&quot; data-orig-file=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/02-python-rollout-stable.png&quot; data-orig-size=&quot;1688,874&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;02-python-rollout-stable&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/02-python-rollout-stable.png?w=650&amp;amp;h=337&quot; data-large-file=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/02-python-rollout-stable.png?w=650&amp;amp;h=337&quot; class=&quot;wp-image-5034 size-medium&quot; src=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/02-python-rollout-stable.png?w=650&amp;amp;h=337&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;337&quot; srcset=&quot;https://dropboxtechblog.files.wordpress.com/2018/09/02-python-rollout-stable.png?w=650&amp;amp;h=337 650w, https://dropboxtechblog.files.wordpress.com/2018/09/02-python-rollout-stable.png?w=1300&amp;amp;h=674 1300w, https://dropboxtechblog.files.wordpress.com/2018/09/02-python-rollout-stable.png?w=600&amp;amp;h=311 600w, https://dropboxtechblog.files.wordpress.com/2018/09/02-python-rollout-stable.png?w=768&amp;amp;h=398 768w, https://dropboxtechblog.files.wordpress.com/2018/09/02-python-rollout-stable.png?w=1024&amp;amp;h=530 1024w&quot; sizes=&quot;(max-width: 650px) 100vw, 650px&quot;/&gt;&lt;/p&gt;
&lt;/a&gt;Gradual rollout on the Stable channel
&lt;p&gt;As of version 52, this process is complete: Python 2 has been removed altogether from Dropbox’s desktop client.&lt;/p&gt;
&lt;h2&gt;But wait, there’s more&lt;/h2&gt;
&lt;p&gt;There’s much more to tell about this process. In future posts, we’ll look at:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;How we report crashes on Windows and macOS and use them to debug both native and Python code.&lt;/li&gt;
&lt;li&gt;How we maintained a hybrid Python 2 and 3 syntax, and what tools helped.&lt;/li&gt;
&lt;li&gt;Our very best bugs and stories from the Python 3 migration.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Special thanks to the Dropboxers who contributed&lt;/em&gt; &lt;em&gt;to&lt;/em&gt; &lt;em&gt;this project:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aditya Jayaraman&lt;/strong&gt;, &lt;strong&gt;Aisha Ferrazares&lt;/strong&gt;, &lt;strong&gt;Allison Kaptur&lt;/strong&gt;, &lt;strong&gt;Amandine Lee&lt;/strong&gt;, &lt;strong&gt;Anaid Chacon&lt;/strong&gt;, &lt;strong&gt;Angela Gong&lt;/strong&gt;, &lt;strong&gt;Ben Newhouse&lt;/strong&gt;, &lt;strong&gt;Benjamin Peterson&lt;/strong&gt;, &lt;strong&gt;Billy Wood&lt;/strong&gt;, &lt;strong&gt;Brandon Jue&lt;/strong&gt;, &lt;strong&gt;Bryon Ross&lt;/strong&gt;, &lt;strong&gt;Cary Yang&lt;/strong&gt;, &lt;strong&gt;Case Larsen&lt;/strong&gt;, &lt;strong&gt;Clarence Lee&lt;/strong&gt;, &lt;strong&gt;Darsey Litzenberger&lt;/strong&gt;, &lt;strong&gt;David Euresti&lt;/strong&gt;, &lt;strong&gt;Denbeigh Stevens&lt;/strong&gt;, &lt;strong&gt;Drew Haven&lt;/strong&gt;, &lt;strong&gt;Eddy Escardo-Raffo&lt;/strong&gt;, &lt;strong&gt;Elmer Le&lt;/strong&gt;, &lt;strong&gt;Eric Swanson&lt;/strong&gt;, &lt;strong&gt;Gautam Gupta&lt;/strong&gt;, &lt;strong&gt;Geoff Song&lt;/strong&gt;, &lt;strong&gt;Guido van Rossum, Isaac Goldberg&lt;/strong&gt;, &lt;strong&gt;John Lai&lt;/strong&gt;, &lt;strong&gt;Jonathan Chien&lt;/strong&gt;, &lt;strong&gt;Joshua Warner&lt;/strong&gt;, &lt;strong&gt;Michael Wu&lt;/strong&gt;, &lt;strong&gt;Naphat Sanguansin&lt;/strong&gt;, &lt;strong&gt;Nikhil Marathe&lt;/strong&gt;, &lt;strong&gt;Nipunn Koorapati&lt;/strong&gt;, &lt;strong&gt;Patrick Chenglo&lt;/strong&gt;, &lt;strong&gt;Peter Vilim&lt;/strong&gt;, &lt;strong&gt;Rafael Tello-Cabrales&lt;/strong&gt;, &lt;strong&gt;Reginald Lips&lt;/strong&gt;, &lt;strong&gt;Ritu Vincent&lt;/strong&gt;, &lt;strong&gt;Ryan Kwon&lt;/strong&gt;, &lt;strong&gt;Samer Masterson&lt;/strong&gt;, &lt;strong&gt;Sean Stephens&lt;/strong&gt;, &lt;strong&gt;Stefan Vainberg&lt;/strong&gt;, &lt;strong&gt;Thomas Ballinger&lt;/strong&gt;, &lt;strong&gt;Tony Grue&lt;/strong&gt;, &lt;strong&gt;Will Anderson&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Very special thanks to a few members of the Python community:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steve Dower (&lt;/strong&gt;&lt;a href=&quot;https://twitter.com/zooba&quot;&gt;&lt;strong&gt;@zooba&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;: for his work behind Python 3’s excellent support for modern versions of Windows and Visual Studio.&lt;br/&gt;&lt;strong&gt;Ronald Oussoren (&lt;/strong&gt;&lt;a href=&quot;https://twitter.com/RonaldOussoren&quot;&gt;&lt;strong&gt;@RonaldOussoren&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;: for his work maintaining PyObjC and his many years of contributions to Python on macOS.&lt;br/&gt;&lt;a href=&quot;https://github.com/zware&quot;&gt;&lt;strong&gt;Zachary Ware&lt;/strong&gt;&lt;/a&gt;: for his early work in supporting VS2013 in Python 2.&lt;/p&gt;
</description>
<pubDate>Tue, 25 Sep 2018 16:28:33 +0000</pubDate>
<dc:creator>ddeville</dc:creator>
<og:title>How we rolled out one of the largest Python 3 migrations ever</og:title>
<og:url>https://blogs.dropbox.com/tech/2018/09/how-we-rolled-out-one-of-the-largest-python-3-migrations-ever/</og:url>
<og:image>https://dropboxtechblog.files.wordpress.com/2018/09/01-python-rollout-beta.png?w=600</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blogs.dropbox.com/tech/2018/09/how-we-rolled-out-one-of-the-largest-python-3-migrations-ever/</dc:identifier>
</item>
<item>
<title>PyQt5 Tutorial: Create a Python GUI in 2018</title>
<link>https://build-system.fman.io/pyqt5-tutorial</link>
<guid isPermaLink="true" >https://build-system.fman.io/pyqt5-tutorial</guid>
<description>&lt;p&gt;This tutorial shows how you can use PyQt5 to build a desktop app with Python. It covers everything from the best way to set up PyQt in 2018, to compiling your app and distributing it to other people's computers. You can use Windows, Mac or Linux. The only prerequisite is that you have Python 3 (ideally 3.5) installed.&lt;/p&gt;
&lt;h2&gt;What is PyQt5?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://riverbankcomputing.com/software/pyqt/intro&quot;&gt;PyQt&lt;/a&gt; is a library that lets you use the &lt;a href=&quot;https://www.qt.io/&quot;&gt;Qt GUI framework&lt;/a&gt; from Python. Qt itself is written in C++. By using it from Python, you can build applications much more quickly while not sacrificing much of the speed of C++.&lt;/p&gt;
&lt;p&gt;PyQt5 refers to the most recent version 5 of Qt. You may still find the occasional mention of (Py)Qt4 on the web, but it is old and no longer supported.&lt;/p&gt;
&lt;p&gt;An interesting new competitor to PyQt is &lt;a href=&quot;https://www.qt.io/qt-for-python&quot;&gt;Qt for Python&lt;/a&gt;. Its API is virtually identical. Unlike PyQt, it is licensed under the LGPL and can thus be used for free in commercial projects. The downside is that it is less mature. We use PyQt in this tutorial because it is still more stable. However, because the API of Qt for Python is so similar, you can easily switch your app to it later.&lt;/p&gt;
&lt;h2&gt;Install PyQt&lt;/h2&gt;
&lt;p&gt;The best way to manage dependencies in Python is via a &lt;a href=&quot;https://docs.python.org/3/tutorial/venv.html&quot;&gt;virtual environment&lt;/a&gt;. A virtual environment is simply a local directory that contains the libraries for a specific project. This is unlike a system-wide installation of those libraries, which would affect all of your other projects as well.&lt;/p&gt;
&lt;p&gt;To create a virtual environment in the current directory, execute the following command:&lt;/p&gt;
&lt;pre&gt;
python3 -m venv venv
&lt;/pre&gt;
&lt;p&gt;This creates the &lt;code&gt;venv/&lt;/code&gt; folder. To activate the virtual environment on Windows, run:&lt;/p&gt;
&lt;pre&gt;
call venv/scripts/activate.bat
&lt;/pre&gt;
&lt;p&gt;On Mac and Linux, use:&lt;/p&gt;
&lt;pre&gt;
source venv/bin/activate
&lt;/pre&gt;
&lt;p&gt;You can see that the virtual environment is active by the &lt;code&gt;(venv)&lt;/code&gt; prefix in your shell:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/venv-active-linux.png&quot; alt=&quot;Creating and activating a Python virtual environment&quot;/&gt;&lt;/div&gt;
&lt;p&gt;To now install PyQt, issue the following command:&lt;/p&gt;
&lt;pre&gt;
pip install PyQt5==5.9.2
&lt;/pre&gt;
&lt;p&gt;The reason why we're using version &lt;code&gt;5.9.2&lt;/code&gt; is that not all (Py)Qt releases are equally stable. This version is guaranteed to work. Besides this subtlety – Congratulations! You've successfully set up PyQt5.&lt;/p&gt;
&lt;h2&gt;Create a GUI&lt;/h2&gt;
&lt;p&gt;Time to write our very first GUI app! With the virtual environment still active, start Python. We will execute the following commands:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/hello-world-app-python-commands.png&quot; alt=&quot;Python code of a Hello World PyQt app on Ubuntu Linux&quot;/&gt;&lt;/div&gt;
&lt;p&gt;First, we tell Python to load PyQt via the import statement:&lt;/p&gt;
&lt;pre&gt;
from PyQt5.QtWidgets import QApplication, QLabel
&lt;/pre&gt;
&lt;p&gt;Next, we create a &lt;a href=&quot;http://doc.qt.io/qt-5/qapplication.html&quot;&gt;&lt;code&gt;QApplication&lt;/code&gt;&lt;/a&gt; with the command:&lt;/p&gt;
&lt;pre&gt;
app = QApplication([])
&lt;/pre&gt;
&lt;p&gt;This is a requirement of Qt: Every GUI app must have exactly one instance of &lt;code&gt;QApplication&lt;/code&gt;. Many parts of Qt don't work until you have executed the above line. You will therefore need it in virtually every (Py)Qt app you write.&lt;/p&gt;
&lt;p&gt;The brackets &lt;code&gt;[]&lt;/code&gt; in the above line represent the command line arguments passed to the application. Because our app doesn't use any parameters, we leave the brackets empty.&lt;/p&gt;
&lt;p&gt;Now, to actually see something, we create a simple label:&lt;/p&gt;
&lt;pre&gt;
label = QLabel('Hello World!')
&lt;/pre&gt;
&lt;p&gt;Then, we tell Qt to show the label on the screen:&lt;/p&gt;
&lt;pre&gt;
label.show()
&lt;/pre&gt;
&lt;p&gt;Depending on your operating system, this already opens a tiny little window:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/hello-world-app.png&quot; alt=&quot;Screenshot of Hello World PyQt application&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The last step is to hand control over to Qt and ask it to &quot;run the application until the user closes it&quot;. This is done via the command:&lt;/p&gt;
&lt;pre&gt;
app.exec_()
&lt;/pre&gt;
&lt;p&gt;If all this worked as expected then well done! You've just built your first GUI app with Python and Qt.&lt;/p&gt;
&lt;h2&gt;Widgets&lt;/h2&gt;
&lt;p&gt;Everything you see in a (Py)Qt app is a &lt;a href=&quot;http://doc.qt.io/qt-5/qwidget.html&quot;&gt;&lt;em&gt;widget&lt;/em&gt;&lt;/a&gt;: Buttons, labels, windows, dialogs, progress bars etc. Like HTML elements, widgets are often nested. For example, a window can contain a button, which in turn contains a label.&lt;/p&gt;
&lt;p&gt;The following screenshot shows the most common Qt widgets:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/widgets.png&quot; alt=&quot;Screenshot of the most common PyQt widgets&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Top-to-bottom, left-to-right, they are:&lt;/p&gt;
&lt;h2&gt;Layouts&lt;/h2&gt;
&lt;p&gt;Like the example above, your GUI will most likely consist of multiple widgets. In this case, you need to tell Qt how to position them. For instance, you can use &lt;a href=&quot;http://doc.qt.io/qt-5/qvboxlayout.html&quot;&gt;QVBoxLayout&lt;/a&gt; to stack widgets vertically:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/qvboxlayout.png&quot; alt=&quot;QVBoxLayout example&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The code for this screenshot is:&lt;/p&gt;
&lt;pre&gt;
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout
app = QApplication([])
window = QWidget()
layout = QVBoxLayout()
layout.addWidget(QPushButton('Top'))
layout.addWidget(QPushButton('Bottom'))
window.setLayout(layout)
window.show()
app.exec_()
&lt;/pre&gt;
&lt;p&gt;As before, we instantiate a &lt;code&gt;QApplication&lt;/code&gt;. Then, we create a &lt;code&gt;window&lt;/code&gt;. We use the most basic type &lt;code&gt;QWidget&lt;/code&gt; for it because it merely acts as a container and we don't want it to have any special behavior. Next, we create the &lt;code&gt;layout&lt;/code&gt; and add two &lt;code&gt;QPushButton&lt;/code&gt;s to it. Finally, we tell the window to use this layout (and thus its contents). As in our first application, we end with calls to &lt;code&gt;.show()&lt;/code&gt; and &lt;code&gt;app.exec_()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are of course many other kinds of layouts (eg. &lt;a href=&quot;http://doc.qt.io/qt-5/qhboxlayout.html&quot;&gt;QHBoxLayout&lt;/a&gt; to lay out items in a row). See &lt;a href=&quot;http://doc.qt.io/qt-5/layout.html&quot;&gt;Qt's documentation&lt;/a&gt; for an overview.&lt;/p&gt;
&lt;h2&gt;Custom styles&lt;/h2&gt;
&lt;p&gt;One of Qt's strengths is its support for custom styles. There are many mechanisms that let you customize the look and feel of your application. This section outlines a few.&lt;/p&gt;
&lt;h3&gt;Built-in styles&lt;/h3&gt;
&lt;p&gt;The coarsest way to change the appearance of your application is to set the global &lt;a href=&quot;http://doc.qt.io/qt-5/qtwidgets-index.html#styles&quot;&gt;Style&lt;/a&gt;. Recall the widgets screenshot above:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/widgets.png&quot; alt=&quot;Screenshot of common Qt widgets using the Fusion style&quot;/&gt;&lt;/div&gt;
&lt;p&gt;This uses a style called &lt;code&gt;Fusion&lt;/code&gt;. If you use the &lt;code&gt;Windows&lt;/code&gt; style instead, then it looks as follows:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/widgets-windows.png&quot; alt=&quot;Screenshot of common Qt widgets using the Windows style&quot;/&gt;&lt;/div&gt;
&lt;p&gt;To apply a style, use &lt;code&gt;app.setStyle(...)&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
from PyQt5.QtWidgets import *
app = QApplication([])
app.setStyle('Fusion')
...
&lt;/pre&gt;
&lt;p&gt;The available styles depend on your platform but are usually &lt;code&gt;'Fusion'&lt;/code&gt;, &lt;code&gt;'Windows'&lt;/code&gt;, &lt;code&gt;'WindowsVista'&lt;/code&gt; (Windows only) and &lt;code&gt;'Macintosh'&lt;/code&gt; (Mac only).&lt;/p&gt;
&lt;h3&gt;Custom colors&lt;/h3&gt;
&lt;p&gt;If you like a style, but want to change its colors (eg. to a dark theme), then you can use &lt;a href=&quot;http://doc.qt.io/qt-5/qpalette.html&quot;&gt;QPalette&lt;/a&gt; and &lt;code&gt;app.setPalette(...)&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre&gt;
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPalette
from PyQt5.QtWidgets import QApplication, QPushButton

app = QApplication([])
app.setStyle('Fusion')
&lt;strong&gt;palette = QPalette()
palette.setColor(QPalette.ButtonText, Qt.red)
app.setPalette(palette)&lt;/strong&gt;
button = QPushButton('Hello World')
button.show()
app.exec_()
&lt;/pre&gt;
&lt;p&gt;This changes the text color in buttons to red:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/button-red-text.png&quot; alt=&quot;Screenshot of a QPushButton with red text in the Fusion style&quot;/&gt;&lt;/div&gt;
&lt;p&gt;For a dark theme of the Fusion style, see &lt;a href=&quot;https://gist.github.com/mstuttgart/37c0e6d8f67a0611674e08294f3daef7&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Style sheets&lt;/h3&gt;
&lt;p&gt;In addition to the above, you can change the appearance of your application via &lt;em&gt;style sheets&lt;/em&gt;. This is Qt's analogue of CSS. We can use this for example to add some spacing:&lt;/p&gt;
&lt;pre&gt;
from PyQt5.QtWidgets import QApplication, QPushButton
app = QApplication([])
&lt;strong&gt;app.setStyleSheet(&quot;QPushButton { margin: 10ex; }&quot;)&lt;/strong&gt;
button = QPushButton('Hello World')
button.show()
app.exec_()
&lt;/pre&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/stylesheet-example.png&quot; alt=&quot;Qt window with a button surrounded by extra space&quot;/&gt;&lt;/div&gt;
&lt;p&gt;For more information about style sheets, please see &lt;a href=&quot;http://doc.qt.io/qt-5/stylesheet-syntax.html&quot;&gt;Qt's documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Signals / slots&lt;/h2&gt;
&lt;p&gt;Qt uses a mechanism called &lt;em&gt;signals&lt;/em&gt; to let you react to events such as the user clicking a button. The following example illustrates this. It contains a button that, when clicked, shows a message box:&lt;/p&gt;
&lt;div class=&quot;row&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;col-lg-6&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
from PyQt5.QtWidgets import *
app = QApplication([])
button = QPushButton('Click')
def on_button_clicked():
    alert = QMessageBox()
    alert.setText('You clicked the button!')
    alert.exec_()

&lt;strong&gt;button.clicked.connect(on_button_clicked)&lt;/strong&gt;
button.show()
app.exec_()
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;col-lg-6&quot;&gt;
&lt;div class=&quot;screenshot mt-lg-0&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/button-clicked.jpg&quot; alt=&quot;PyQt QMessageBox saying that a button was clicked&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The interesting line is highlighted above: &lt;code&gt;button.clicked&lt;/code&gt; is a signal, &lt;code&gt;.connect(...)&lt;/code&gt; lets us install a so-called &lt;em&gt;slot&lt;/em&gt; on it. This is simply a function that gets called when the signal occurs. In the above example, our slot shows a message box.&lt;/p&gt;
&lt;p&gt;The term slot is important when using Qt from C++, because slots must be declared in a special way in C++. In Python however, any function can be a slot – we saw this above. For this reason, the distinction between slots and &quot;normal&quot; functions has little relevance for us.&lt;/p&gt;
&lt;p&gt;Signals are ubiquitous in Qt. And of course, you can also define your own. This however is beyond the scope of this tutorial.&lt;/p&gt;
&lt;h2&gt;Compile your app&lt;/h2&gt;
&lt;p&gt;You now have the basic knowledge for creating a GUI that responds to user input. Say you've written an app. It runs on your computer. How do you give it to other people, so they can run it as well?&lt;/p&gt;
&lt;p&gt;You could ask the users of your app to install Python and PyQt like we did above, then give them your source code. But that is very tedious (and usually impractical). What we want instead is a &lt;em&gt;standalone&lt;/em&gt; version of your app. That is, a binary executable that other people can run on their systems without having to install anything.&lt;/p&gt;
&lt;p&gt;In the Python world, the process of turning source code into a self-contained executable is called &lt;em&gt;freezing&lt;/em&gt;. Although there are many libraries that address this issue – such as PyInstaller, py2exe, cx_Freeze, bbfreze, py2app, ... – freezing PyQt apps has traditionally been a surprisingly hard problem.&lt;/p&gt;
&lt;p&gt;We will use a new library called &lt;a href=&quot;https://build-system.fman.io/&quot;&gt;fbs&lt;/a&gt; that lets you create standalone executables for PyQt apps. To install it, enter the command:&lt;/p&gt;
&lt;pre&gt;
pip install fbs PyInstaller==3.3.1
&lt;/pre&gt;
&lt;p&gt;Then, execute the following:&lt;/p&gt;
&lt;pre&gt;
python3 -m fbs startproject
&lt;/pre&gt;
&lt;p&gt;This prompts you for a few values:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/fbs-startproject.png&quot; alt=&quot;Commands for starting a new project with fbs&quot;/&gt;&lt;/div&gt;
&lt;p&gt;When you type in the suggested &lt;code&gt;run&lt;/code&gt; command, an empty window should open:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/fbs-initial-app.png&quot; alt=&quot;An empty window showing 'Hello World!' in its title&quot;/&gt;&lt;/div&gt;
&lt;p&gt;This is a PyQt5 app just like the ones we have seen before. Its source code is in &lt;code&gt;src/main/python/main.py&lt;/code&gt; in your current directory. But here's the cool part: We can use fbs to turn it into a standalone executable!&lt;/p&gt;
&lt;pre&gt;
python3 -m fbs freeze
&lt;/pre&gt;
&lt;p&gt;This places a self-contained binary in the &lt;code&gt;target/MyApp/&lt;/code&gt; folder of your current directory. You can send it to your friends (with the same OS as yours) and they will be able to run your app!&lt;/p&gt;
&lt;h3&gt;Bonus: Create an installer&lt;/h3&gt;
&lt;p&gt;fbs also lets you create an installer for your app via the command &lt;code&gt;python3 -m fbs installer&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-6&quot;&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/installer-windows.png&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-6&quot;&gt;
&lt;div class=&quot;screenshot&quot;&gt;&lt;img src=&quot;https://build-system.fman.io/static/public/img/installer-mac.png&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;mt-2&quot;&gt;For more information on how you can use fbs for your existing application, please see &lt;a href=&quot;https://build-system.fman.io/pyqt-exe-creation/&quot;&gt;this article&lt;/a&gt;. Or &lt;a href=&quot;https://github.com/mherrmann/fbs-tutorial&quot;&gt;fbs's tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;If you have made it this far, then big congratulations. Hopefully, you now have a good idea of how PyQt (and its various parts) can be used to write a desktop application with Python. We also saw how fbs lets you create standalone executables and installers.&lt;/p&gt;
&lt;p&gt;If you have any questions or feedback on this tutorial, feel free to &lt;a id=&quot;js-email&quot;&gt;email me&lt;/a&gt;. Have fun writing your own apps!&lt;/p&gt;
</description>
<pubDate>Tue, 25 Sep 2018 16:17:40 +0000</pubDate>
<dc:creator>mherrmann</dc:creator>
<og:title>PyQt5 tutorial: Create a Python GUI in 2018</og:title>
<og:type>website</og:type>
<og:image>https://build-system.fman.io/static/public/img/widgets.png</og:image>
<og:description>Learn how to create a Python GUI in 2018.</og:description>
<og:url>https://build-system.fman.io/pyqt5-tutorial</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://build-system.fman.io/pyqt5-tutorial</dc:identifier>
</item>
<item>
<title>Amazon donates $1M to Wikimedia</title>
<link>https://techcrunch.com/2018/09/25/amazon-donates-1m-to-wikimedia/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/09/25/amazon-donates-1m-to-wikimedia/</guid>
<description>&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Back in March, we asked the question &lt;a href=&quot;https://techcrunch.com/2018/03/24/are-corporations-that-use-wikipedia-giving-back/&quot;&gt;“Are corporations that use Wikipedia giving back?”&lt;/a&gt; The answer was kind of, sort of, with one key exception, noting, “Apple, Facebook, Microsoft and Google all contributed around $50,000 by matching employee gifts. Amazon, on the other hand, is nowhere to be found on that list.”&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Today, however, the online retail giant is looking to address that apparent oversight, announcing a $1 million donation to the Wikimedia Endowment, the fund behind Wikipedia. As it notes, the online encyclopedia has been hugely important to Alexa’s success, serving as the foundation for much of the assistant’s knowledge.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;“Alexa leverages hundreds of sources to answer questions, including Wikipedia,” Amazon said in a statement offered to TechCrunch. “The Alexa team shares a similar vision with Wikipedia and the Wikimedia Foundation: To make it easier to share knowledge globally.”&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Including Wikipedia as one of “hundreds of sources” seems to be downplaying the importance of the site to Alexa and many of its competitors, but a donation from Amazon’s deep coffers is an important gesture for the non-profit.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Amazon’s also hoping Alexa users will pitch in as well, by way of the new “Alexa donate to Wikipedia” skill.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 25 Sep 2018 15:29:42 +0000</pubDate>
<dc:creator>doppp</dc:creator>
<og:title>Amazon donates $1M to Wikimedia</og:title>
<og:description>Back in March, we asked the question “Are corporations that use Wikipedia giving back?” The answer was kind of, sort of, with one key exception, noting, “Apple, Facebook, Microsoft and Google all contributed around $50,000 by matching employee gifts. Amazon, on the other hand, is nowhere to be foun…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2018/09/amazon_hardware-6761.jpg?w=600</og:image>
<og:url>http://social.techcrunch.com/2018/09/25/amazon-donates-1m-to-wikimedia/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/09/25/amazon-donates-1m-to-wikimedia/</dc:identifier>
</item>
<item>
<title>Introducing Firefox Monitor, Helping People Take Control After a Data Breach</title>
<link>https://blog.mozilla.org/blog/2018/09/25/introducing-firefox-monitor-helping-people-take-control-after-a-data-breach/</link>
<guid isPermaLink="true" >https://blog.mozilla.org/blog/2018/09/25/introducing-firefox-monitor-helping-people-take-control-after-a-data-breach/</guid>
<description>&lt;p&gt;Data breaches, when information like your username and password are stolen from a website you use, are an unfortunate part of life on the internet today. It can be hard to keep track of when your information has been stolen, so we’re going to help by launching &lt;a href=&quot;https://monitor.firefox.com/&quot;&gt;Firefox Monitor&lt;/a&gt;, a free service that notifies people when they’ve been part of a data breach. After &lt;a href=&quot;https://blog.mozilla.org/futurereleases/2018/06/25/testing-firefox-monitor-a-new-security-tool/&quot;&gt;testing this summer&lt;/a&gt;, the results and positive &lt;a href=&quot;https://www.fastcompany.com/40589753/mozilla-firefox-aims-to-alert-users-if-theyve-been-hacked&quot;&gt;attention&lt;/a&gt; gave us the confidence we needed to know this was a feature we wanted to give to all of our users.&lt;/p&gt;
&lt;p&gt;To give you a complete picture of what &lt;a href=&quot;https://monitor.firefox.com/&quot;&gt;Firefox Monitor&lt;/a&gt; has to offer, here’s Cindy Hsiang, Product Manager for Firefox Monitor, to tell you more:&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/rL53twJ-JJI?rel=0&quot; width=&quot;853&quot; height=&quot;505&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;span data-mce-type=&quot;bookmark&quot; class=&quot;mce_SELRES_start&quot;&gt;﻿&lt;/span&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h3&gt;Here’s how Firefox Monitor helps you learn if you’ve been part of a data breach&lt;/h3&gt;
&lt;h4&gt;&lt;strong&gt;Step 1 – Visit&lt;/strong&gt; &lt;a href=&quot;https://monitor.firefox.com/&quot;&gt;&lt;strong&gt;monitor.firefox.com&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;to see if your email has been part of a data breach&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Visit &lt;a href=&quot;https://monitor.firefox.com/&quot;&gt;monitor.firefox.com&lt;/a&gt; and type in your email address. Through our partnership with Troy Hunt’s “Have I Been Pwned,” your email address will be scanned against a database that serves as a library of data breaches. We’ll let you know if your email address and/or personal info was involved in a publicly known past data breach. Once you know where your email address was compromised you should change your password and any other place where you’ve used that password.&lt;/p&gt;

&lt;div id=&quot;attachment_11733&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img class=&quot;size-full wp-image-11733&quot; src=&quot;https://ffp4g1ylyit3jdyti1hqcvtb-wpengine.netdna-ssl.com/wp-content/uploads/2018/09/Monitor.jpg&quot; alt=&quot;&quot; width=&quot;2784&quot; height=&quot;1510&quot; srcset=&quot;https://blog.mozilla.org/wp-content/uploads/2018/09/Monitor.jpg 2784w, https://blog.mozilla.org/wp-content/uploads/2018/09/Monitor-300x163.jpg 300w, https://blog.mozilla.org/wp-content/uploads/2018/09/Monitor-768x417.jpg 768w, https://blog.mozilla.org/wp-content/uploads/2018/09/Monitor-600x325.jpg 600w, https://blog.mozilla.org/wp-content/uploads/2018/09/Monitor-1000x542.jpg 1000w&quot; sizes=&quot;(max-width: 2784px) 100vw, 2784px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Visit monitor.firefox.com and type in your email address&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;Step 2 – Learn about future data breaches&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Sign up for &lt;a href=&quot;https://monitor.firefox.com/&quot;&gt;Firefox Monitor&lt;/a&gt; using your email address and we will notify you about data breaches when we learn about them. Your email address will be scanned against those data breaches, and we’ll let you know through a private email if you were involved.&lt;/p&gt;
&lt;p&gt;If you’re wondering about how we’re handling your email address, rest assured we will protect your email address when it’s scanned. We talked about &lt;a href=&quot;https://blog.mozilla.org/security/2018/06/25/scanning-breached-accounts-k-anonymity/&quot;&gt;the technical details on how that works&lt;/a&gt; when we first launched the experiment. This is all in keeping with our principles at Mozilla, where we’re always looking for features that will &lt;a href=&quot;https://www.mozilla.org/en-US/about/manifesto/&quot;&gt;protect people’s privacy and give them greater control when they’re online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://monitor.firefox.com/&quot;&gt;Firefox Monitor&lt;/a&gt; is just one of many things we’re rolling out this Fall to help people stay safe while online. Recently, we announced our &lt;a href=&quot;https://blog.mozilla.org/futurereleases/2018/08/30/changing-our-approach-to-anti-tracking/&quot;&gt;roadmap to anti-tracking&lt;/a&gt; and in the next couple of months, we’ll release more features to arm and protect people’s rights online. For more on how to use Firefox Monitor, check out our &lt;a href=&quot;https://blog.mozilla.org/firefox/firefox-monitor-take-control-of-your-data&quot;&gt;Firefox Frontier blog&lt;/a&gt;. If you want to know more about the Firefox Monitor journey and how your feedback set this service in motion visit &lt;a href=&quot;https://medium.com/@mgrimes/the-road-to-firefox-monitor-7c342c54bf27&quot;&gt;Matt Grimes’ Medium blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://monitor.firefox.com/&quot;&gt;Firefox Monitor&lt;/a&gt; to see if you’ve been part of a data breach, and sign up to know if you’ve been affected the next time a data breach happens.&lt;/p&gt;

</description>
<pubDate>Tue, 25 Sep 2018 15:21:22 +0000</pubDate>
<dc:creator>sciurus</dc:creator>
<og:url>https://blog.mozilla.org/blog/2018/09/25/introducing-firefox-monitor-helping-people-take-control-after-a-data-breach</og:url>
<og:title>Introducing Firefox Monitor, Helping People Take Control After a Data Breach – The Mozilla Blog</og:title>
<og:description>It can be hard to keep track of when your information has been stolen, so we’re going to help by launching Firefox Monitor, a free service that notifies people when they’ve been part of a data breach.</og:description>
<og:image>https://blog.mozilla.org/wp-content/uploads/2018/09/SP_FX_Monitor_blogheader-01-1400x700.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.mozilla.org/blog/2018/09/25/introducing-firefox-monitor-helping-people-take-control-after-a-data-breach/</dc:identifier>
</item>
</channel>
</rss>