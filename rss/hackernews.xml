<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Many major websites are taking silent anti-ad-blocking measures</title>
<link>https://techcrunch.com/2017/12/27/thousands-of-major-sites-are-taking-silent-anti-ad-blocking-measures/</link>
<guid isPermaLink="true" >https://techcrunch.com/2017/12/27/thousands-of-major-sites-are-taking-silent-anti-ad-blocking-measures/</guid>
<description>&lt;img src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/03/software-vc-money.jpg?w=738&quot; class=&quot;&quot;/&gt;&lt;p id=&quot;speakable-summary&quot;&gt;It’s no secret that ad blockers are putting a dent in advertising-based business models on the web. This has produced a range of reactions, from relatively polite whitelisting asks (TechCrunch does this) to dynamic redeployment of ads to avoid blocking. A new study finds that nearly a third of the top 10,000 sites on the web are taking ad blocking countermeasures, many silent and highly sophisticated.&lt;/p&gt;&lt;p&gt;Seeing the uptick in anti-ad-blocking tech, University of Iowa and UC Riverside researchers &lt;a target=&quot;_blank&quot; href=&quot;http://homepage.divms.uiowa.edu/~mshafiq/files/adblock-ndss2018.pdf&quot; rel=&quot;noopener&quot;&gt;decided to perform a closer scrutiny (PDF)&lt;/a&gt; of major sites than had previously been done. Earlier estimates, based largely on visible or obvious anti-ad-blocking means such as pop-ups or broken content, suggested that somewhere between 1 and 5 percent of popular sites were doing this — but the real number seems to be an order of magnitude higher.&lt;/p&gt;
&lt;p&gt;The researchers visited thousands of sites multiple times, with and without ad-blocking software added to the browser. By comparing the final rendered code of the page for blocking browsers versus non-blocking browsers, they could see when pages changed content or noted the presence of a blocker, even if they didn’t notify the user.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://tctechcrunch2011.files.wordpress.com/2017/12/topxk.png&quot; rel=&quot;noopener&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1581451&quot; src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/12/topxk.png?w=598&amp;amp;h=250&quot; alt=&quot;&quot; width=&quot;598&quot; height=&quot;250&quot; srcset=&quot;https://tctechcrunch2011.files.wordpress.com/2017/12/topxk.png 598w, https://tctechcrunch2011.files.wordpress.com/2017/12/topxk.png?w=150&amp;amp;h=63 150w, https://tctechcrunch2011.files.wordpress.com/2017/12/topxk.png?w=300&amp;amp;h=125 300w&quot; sizes=&quot;(max-width: 598px) 100vw, 598px&quot;/&gt;&lt;/a&gt;As you can see above, 30.5 percent of the top 10,000 sites on the web as measured by Alexa are using some sort of ad-blocker detection, and 38.2 percent of the top 1,000. (Again, TechCrunch is among these, but to my knowledge we just ask visitors to whitelist the site.)&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Our results show that anti-adblockers are much more pervasive than previously reported…our hypothesis is that a much larger fraction of websites than previously reported are “worried” about adblockers but many are not employing retaliatory actions against adblocking users yet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It turns out that many ad providers are offering anti-blocking tech in the form of scripts that produce a variety of “bait” content that’s ad-like — for instance, images or elements named and tagged in such a way that they will trigger ad blockers, tipping the site off. The pattern of blocking, for instance not loading any divs marked “banner_ad” but loading images with “banner” in the description, further illuminates the type and depth of ad blocking being enforced by the browser.&lt;/p&gt;
&lt;p&gt;Sites can simply record this for their own purposes (perhaps to gauge the necessity of responding) or redeploy ads in such a way that the detected ad blocker won’t catch.&lt;/p&gt;

&lt;p&gt;In addition to detecting these new and increasingly common measures being taken by advertisers, the researchers suggest some ways that current ad blockers may be able to continue functioning as intended.&lt;/p&gt;
&lt;p&gt;One way involves dynamically rewriting the JavaScript code that checks for a blocker, forcing it to think there is no blocker. However, this could break some sites that render as if there is no blocker when there actually is.&lt;/p&gt;
&lt;p&gt;A second method identifies the “bait” content and fails to block it, making the site think there’s no blocker in the browser and therefore render ads as normal — except the real ads &lt;em&gt;will&lt;/em&gt; be blocked.&lt;/p&gt;
&lt;p&gt;That will, of course, provoke new and even more sophisticated measures by the advertisers, and so on. As the paper concludes:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;To keep up the pressure on publishers and advertisers in the long term, we believe it is crucial that adblockers keep pace with anti-adblockers in the rapidly escalating technological arms race. Our work represents an important step in this direction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The study has been submitted for consideration at the Network and Distributed Systems Security Symposium in February of 2018.&lt;/p&gt;
&lt;small&gt;Featured Image: Bryce Durbin&lt;/small&gt;</description>
<pubDate>Thu, 28 Dec 2017 21:57:22 +0000</pubDate>
<dc:creator>ytNumbers</dc:creator>
<og:title>Thousands of major sites are taking silent anti-ad-blocking measures</og:title>
<og:description>It's no secret that ad blockers are putting a dent in advertising-based business models on the web. This has produced a range of reactions, from relatively..</og:description>
<og:image>https://tctechcrunch2011.files.wordpress.com/2017/03/software-vc-money.jpg</og:image>
<og:url>http://social.techcrunch.com/2017/12/27/thousands-of-major-sites-are-taking-silent-anti-ad-blocking-measures/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2017/12/27/thousands-of-major-sites-are-taking-silent-anti-ad-blocking-measures/</dc:identifier>
</item>
<item>
<title>A Message to Our Customers about iPhone Batteries and Performance</title>
<link>https://www.apple.com/iphone-battery-and-performance/</link>
<guid isPermaLink="true" >https://www.apple.com/iphone-battery-and-performance/</guid>
<description>&lt;h2 class=&quot;typography-eyebrow-reduced&quot;&gt;December 28, 2017&lt;/h2&gt;

&lt;p&gt;We’ve been hearing feedback from our customers about the way we handle performance for iPhones with older batteries and how we have communicated that process. We know that some of you feel Apple has let you down. We apologize. There’s been a lot of misunderstanding about this issue, so we would like to clarify and let you know about some changes we’re making.&lt;/p&gt;
&lt;p&gt;First and foremost, we have never — and would never — do anything to intentionally shorten the life of any Apple product, or degrade the user experience to drive customer upgrades. Our goal has always been to create products that our customers love, and making iPhones last as long as possible is an important part of that.&lt;/p&gt;
&lt;h3 class=&quot;typography-label&quot;&gt;How batteries age&lt;/h3&gt;
&lt;p&gt;All rechargeable batteries are consumable components that become less effective as they chemically age and their ability to hold a charge diminishes. Time and the number of times a battery has been charged are not the only factors in this chemical aging process.&lt;/p&gt;
&lt;p&gt;Device use also affects the performance of a battery over its lifespan. For example, leaving or charging a battery in a hot environment can cause a battery to age faster. These are characteristics of battery chemistry, common to lithium-ion batteries across the industry.&lt;/p&gt;
&lt;p&gt;A chemically aged battery also becomes less capable of delivering peak energy loads, especially in a low state of charge, which may result in a device unexpectedly shutting itself down in some situations.&lt;/p&gt;
&lt;p&gt;To help customers learn more about iPhone’s rechargeable battery and the factors affecting its performance, we’ve posted a new support article, &lt;a href=&quot;https://support.apple.com/HT208387&quot;&gt;iPhone Battery and Performance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It should go without saying that we think sudden, unexpected shutdowns are unacceptable. We don’t want any of our users to lose a call, miss taking a picture or have any other part of their iPhone experience interrupted if we can avoid it.&lt;/p&gt;
&lt;h3 class=&quot;typography-label&quot;&gt;Preventing unexpected shutdowns&lt;/h3&gt;
&lt;p&gt;About a year ago in iOS 10.2.1, we delivered a software update that improves power management during peak workloads to avoid unexpected shutdowns on iPhone 6, iPhone 6 Plus, iPhone 6s, iPhone 6s Plus, and iPhone SE. With the update, iOS dynamically manages the maximum performance of some system components when needed to prevent a shutdown. While these changes may go unnoticed, in some cases users may experience longer launch times for apps and other reductions in performance.&lt;/p&gt;
&lt;p&gt;Customer response to iOS 10.2.1 was positive, as it successfully reduced the occurrence of unexpected shutdowns. We recently extended the same support for iPhone 7 and iPhone 7 Plus in iOS 11.2.&lt;/p&gt;
&lt;p&gt;Of course, when a chemically aged battery is replaced with a new one, iPhone performance returns to normal when operated in standard conditions.&lt;/p&gt;
&lt;h3 class=&quot;typography-label&quot;&gt;Recent user feedback&lt;/h3&gt;
&lt;p&gt;Over the course of this fall, we began to receive feedback from some users who were seeing slower performance in certain situations. Based on our experience, we initially thought this was due to a combination of two factors: a normal, temporary performance impact when upgrading the operating system as iPhone installs new software and updates apps, and minor bugs in the initial release which have since been fixed.&lt;/p&gt;
&lt;p&gt;We now believe that another contributor to these user experiences is the continued chemical aging of the batteries in older iPhone 6 and iPhone 6s devices, many of which are still running on their original batteries.&lt;/p&gt;
&lt;h3 class=&quot;typography-label&quot;&gt;Addressing customer concerns&lt;/h3&gt;
&lt;p&gt;We’ve always wanted our customers to be able to use their iPhones as long as possible. We’re proud that Apple products are known for their durability, and for holding their value longer than our competitors’ devices.&lt;/p&gt;
&lt;p&gt;To address our customers’ concerns, to recognize their loyalty and to regain the trust of anyone who may have doubted Apple’s intentions, we’ve decided to take the following steps:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Apple is reducing the price of an out-of-warranty iPhone battery replacement by $50 — from $79 to $29 — for anyone with an iPhone 6 or later whose battery needs to be replaced, starting in late January and available worldwide through December 2018. Details will be provided soon on &lt;a href=&quot;https://www.apple.com/&quot;&gt;apple.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Early in 2018, we will issue an iOS software update with new features that give users more visibility into the health of their iPhone’s battery, so they can see for themselves if its condition is affecting performance.&lt;/li&gt;
&lt;li&gt;As always, our team is working on ways to make the user experience even better, including improving how we manage performance and avoid unexpected shutdowns as batteries age.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;At Apple, our customers’ trust means everything to us. We will never stop working to earn and maintain it. We are able to do the work we love only because of your faith and support — and we will never forget that or take it for granted.&lt;/p&gt;
</description>
<pubDate>Thu, 28 Dec 2017 21:39:37 +0000</pubDate>
<dc:creator>jayachdee</dc:creator>
<og:image>https://www.apple.com/ac/structured-data/images/open_graph_logo.png?201712281327</og:image>
<og:title>A Message to Our Customers</og:title>
<og:description>An important message to our customers regarding iPhone battery and performance.</og:description>
<og:url>https://www.apple.com/iphone-battery-and-performance/</og:url>
<og:type>website</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.apple.com/iphone-battery-and-performance/</dc:identifier>
</item>
<item>
<title>Economics of Minecraft</title>
<link>https://www.alicemaz.com/writing/minecraft.html</link>
<guid isPermaLink="true" >https://www.alicemaz.com/writing/minecraft.html</guid>
<description>&lt;center readability=&quot;6&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/title.png&quot; /&gt;&lt;p&gt;Those of us with the means to do as we pleased drove our vast resources into monumental construction. My grandest project was a Chinese city, tragically cut short by server reset. View from the north, inside the outer wall.&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;The first game I ever outsmarted was Final Fantasy 6. I was eight or nine. The rafting level after the Returners' hideout. You're shunted along on a rail, forced into a series of fights that culminate with a boss encounter. You have a temporary party member, Banon, with a zero-cost, group-target heal. The only status ailment the river enemies apply is Darkness, but as a consequence of an infamous bug with the game's evade mechanic, it does nothing. The river forks at two points, and the &quot;wrong&quot; choice at one of the forks sends the raft in a loop. There is a setting that makes the game preserve cursor positions for each character across battles.&lt;/p&gt;
&lt;p&gt;I set everything up just right, placed a stack of quarters on the A button, turned off the television, and went to sleep.&lt;/p&gt;
&lt;p&gt;I've always loved knowable systems. People are messy and complicated, but systems don't lie to you. Understand how all the parts work, understand how all the parts interact, and you can construct a perfect model of the whole thing in your head. Of course it's more complicated than that. Many people can be understood well enough for practical purposes as mechanical systems, and actual mechanical systems can be impossibly complex and plenty inscrutable. There are entire classes of software vulnerabilities that leverage physical properties of the hardware they run on, properties sufficiently abstracted away that most programmers have never in their lives considered them. But the thought is nice. I dreamed of going into constitutional law as a kid, back when I thought law was a perfect system, with outputs purely a function of inputs, that could be learned and trusted. I got fairly decent at interacting with people basically the same way you train a neural net, dumbly adjusting weights to minimize a loss function until I stumbled into something &quot;good enough.&quot; I have to physically suppress the urge to hedge nearly everything I say with, &quot;Well, it's way more complicated than this, but...&quot;&lt;/p&gt;
&lt;p&gt;So I know what I like, at least. Games scratched for a while this itch I have. Outright cheating always kind of bored me. Any asshole could plug in a Game Genie and look up codes online. (It had not occurred to me, as a child, that these &quot;codes&quot; were actually modifications to learnable systems themselves.) What I liked was playing within the confines of the rules, building an understanding of how the thing worked, then finding some leverage and exploiting the hell out of it. It's an interesting enough pursuit on its own, but all that gets cranked up an order of magnitude online. You're still just tinkering with systems. Watching how they function absent your influence, testing some inputs and observing the outputs, figuring things out, and taking control. But now you have marks, competition, and an audience. And just, like, people. People affect the system and become part of the system and make things so much more complex that the joy of figuring it all out is that much greater.&lt;/p&gt;
&lt;p&gt;After sinking 10-20k hours into a single MMO and accomplishing a lot of unbelievable things within the confines of its gargantuan ruleset, it is generally pretty easy for me to pick up another game and figure out what makes it tick. I'll tell the story about that whole experience sometime, but it's a long tale to tell. This is about one of those other games: Minecraft.&lt;/p&gt;
&lt;center readability=&quot;14&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/city-map.png&quot; /&gt;&lt;p&gt;Classical Chinese cityplanning divided the space of a city into nine congruant squares, numbered to sum to 15 in all directions. Everything was oriented on a north-south axis, with all important buildings facing south (here toward bottom-right.) The palace sat in the center, protected by its own wall with gatehouses and corner towers more ornate than those on the outer. The court sat in front of the sanctum, the market behind, the temple to the ancestors to the left, and temples to agriculture on the right. This all derives from the Rites of Zhou, and is presumed to be the exact layout of their first capital, Chengzhou, before the flight to Wangcheng.&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;The Players (names changed)&lt;/h2&gt;
&lt;dl&gt;&lt;dt&gt;Alice&lt;/dt&gt;
&lt;dd&gt;Ok this name wasn't changed.&lt;/dd&gt;
&lt;dt&gt;Emma&lt;/dt&gt;
&lt;dd&gt;Breathtaking builder with nigh-limitless cash reserves. Often called the queen of the server and earned the hell out of the title. She'd buy items at three times market just because she needed lots fast, and she bought so much &lt;em&gt;her&lt;/em&gt; price became &lt;em&gt;the&lt;/em&gt; price. And the builds she made with them were truly remarkable. Living legend.&lt;/dd&gt;
&lt;dt&gt;Samantha&lt;/dt&gt;
&lt;dd&gt;Before the currency was backed by experience points, she built the fastest mob grinder on the server and made an ungodly amount of money selling enchantments. Would quit for months, come back, and shake the economy up like no one else.&lt;/dd&gt;
&lt;dt&gt;Victoria&lt;/dt&gt;
&lt;dd&gt;Chief architect of an extensive rail network in the nether. Kept a finger on the pulse of the economy and bled it for all it was worth. Played the market like a harp. A lot of our best schemes were Victoria's schemes.&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;By the time of the Crash, we four were among the most influential people in the economy. By the end of the recovery from it, we owned the economy. The cartel we formed to pull the market back from the brink had about a half-dozen other significant players, and everyone contributed plenty, but for the most part the four of us called the shots and had the capital to back it up. When the server was wiped for biome update, we vaulted every hurdle, most of which were put in place &lt;em&gt;specifically&lt;/em&gt; because of us, and reclaimed our riches in a matter of months.&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;Zel&lt;/dt&gt;
&lt;dd&gt;Market maker. Known for the Emporium, a massive store near the marketplace proper that also bought everything it sold, a rare practice. Got rather wealthy off the spread on items; I almost single-handedly bankrupted them off the price differences &lt;em&gt;between&lt;/em&gt; items. Also wrote our IRC bot, so for a time !alice triggered a lighthearted joke about my ruthlessness.&lt;/dd&gt;
&lt;dt&gt;Lily&lt;/dt&gt;
&lt;dd&gt;Kicked off the wool bubble. Did quite well for herself, as she was a producer rather than a speculator.&lt;/dd&gt;
&lt;dt&gt;Charlotte&lt;/dt&gt;
&lt;dd&gt;Discovered an item duping glitch and crashed the entire economy. Never shared the existence of the vuln &lt;em&gt;or&lt;/em&gt; her exploit for it with a soul, as far as I know. Was obvious to me what she was doing, but only because I understood the economy well enough to know it was impossible any other way. If she'd switched to a burner account and laundered the money, she probably would have gotten away with it. Good kid. Hope she learns to program.&lt;/dd&gt;
&lt;dt&gt;Jill, Frank&lt;/dt&gt;
&lt;dd&gt;Just as lovely as everyone else, but for our purposes, &quot;two wool speculators.&quot;&lt;/dd&gt;
&lt;/dl&gt;&lt;center readability=&quot;4&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/store-exterior.png&quot; /&gt;&lt;p&gt;My main shop in the market, the last in a series of four locations, trading up each time.&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;Starting Out&lt;/h2&gt;
&lt;p&gt;Working a game's economy is an interesting pursuit because it, like most interesting pursuits, requires your whole brain to get really good at it. It's both analytical and creative: devise general theories with broad applicability, but retain a willingness to disregard or reevaluate those theories when something contradicts them. And it's fun as hell. There's not much quite like the brainfeel of starting with nothing, carving out a niche, getting a foothold, and snowballing. Game economies are all radically different because there aren't any limits on weird things the designers can do with the game, but they're all fundamentally similar too. Here are the tricks to breaking any of them, as basic as they may be:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Learn the game inside and out. You don't necessarily need to get good at it. I was a terrible player of my MMO for the first couple &lt;em&gt;years&lt;/em&gt; I was involved in top-tier play. My primary role in my guild before I actually got good at the game itself was &quot;in-house mechanics wonk,&quot; and it &lt;em&gt;was&lt;/em&gt; an important role.) But you need to know what &quot;good&quot; is. It's hard to speculate on pork bellies without understanding why people care about pigs in the first place.&lt;/li&gt;
&lt;li&gt;Read the patch notes and keep them in mind. Read the upcoming changes until you know them by heart. Actually &lt;em&gt;think&lt;/em&gt; about how changes to the game will change the market. This is as overpowered as insider trading is in the real economy, except the information is all right there in public. Most players never do this, and you can make a killing in any game by hoarding the things that will be more valuable when the patch hits than they are right now. You would be amazed how fast &quot;I'm so excited about [useless item becoming incredibly useful]!!&quot; turns to &quot;omg why is [suddenly useful item] so expensive :( :(&quot; the moment the patch drops.&lt;/li&gt;
&lt;li&gt;Study a tiny piece of the market. Don't touch it, just watch until you think you understand it. Make a small bet and see whether it pays off. Consider whether your hypothesis was right or whether you just got lucky. Slowly increase the size of your bets. Explore other tiny pieces. Think about how those pieces interact, how they are similar, how they differ. Manage your risk. Accrue capital so you can increase the size of your bets while decreasing your risk of ruin. It's a bit of art and a bit of science, but you can go from dabbling in a few niches to having a complete understanding of the entire market before you even know it.&lt;/li&gt;
&lt;li&gt;Study people. Know your competition and know what makes them tick. Know the major buyers, know the tendencies of the swarms of anonymous buyers.&lt;/li&gt;
&lt;li&gt;Overall just know a lot of things I guess.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I started on my server with only a rudimentary knowledge of the game itself and ipso facto zero understanding of its economy. Within six months or so, I had perhaps as detailed a mental model of it as one could get. I knew the price ranges of most of the items in the game and everything that all of them were used for. I knew how common they were on the market, who the major sellers were, what their supply chains looked like. I knew how fast they sold through, whether the price was stable or tacking a certain way, and I had tons of theories on ways to play all this to get what I needed and turn a profit while doing it, and nearly all of them were sound. Most of it I didn't even think about. I didn't need to contemplate why, for instance, lumber was both cheaper and more common than it should be, such that I could buy it all and hold, force the price up, corner the market, and keep it that way. I just kind of... &lt;em&gt;knew&lt;/em&gt;, and did it. It's a wonderful feeling, weaving a system into your mind so tight that it's hard to find the stitches after awhile. Highly recommended.&lt;/p&gt;
&lt;center readability=&quot;6&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/city-north-outside.png&quot; /&gt;&lt;p&gt;Approaching the city from the north, outside the outer wall. In general I modelled the structures on the outer wall on the robust Song styles, with the inner more in the ornate Ming fashion. Terraced farms harvestable by water alongside large livestock pens provided all the food I needed.&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;Econ Infodump&lt;/h2&gt;
&lt;p&gt;Our server had an economy plugin called QuickShop. It added to the game a currency called marbles. Functionally marbles were nothing more than a number tied to your account. Marbles were backed by experience points, freely convertible in both directions by command. Experience points had intrinsic value because they were used for item enchantments, for instance to increase the mining speed of a tool or the damage of a weapon. Thus all the properties of a proper medium of exchange.&lt;/p&gt;
&lt;p&gt;QuickShop also added, as one might expect, shops. Shops were chests with signs on them that bought or sold a designated item at a designated price. The moderators reserved a tract of land close to spawn as the official marketplace and leased a limited number of plots there to the public. There were many attempts by the playerbase to create competing unofficial markets, to varying degrees of success. The official market also had an official store, which sold certain items that were nearly impossible (cracked stone brick) or literally impossible (spawn eggs, sponge) to get otherwise. There was a plugin to lock chests, a plugin to remove randomness from the enchanting process, a plugin to bound the size of the world, a plugin to warp you between spawn, market, and your designated home. Other than that the server was vanilla survival non-PVP, no weird items or mobs. (In most cases I'm talking about 1.5 unless context implies 1.6/1.7.)&lt;/p&gt;
&lt;p&gt;One marble was equal to two levels of experience. A diamond was generally 18-23M depending on the economy, and as they were extremely useful and their price could generally be relied on to stay in this range, diamonds were an excellent alternative store of value. Stone and dirt were 0.01M, the smallest you could subdivide a marble. In practice currency divisibility was never a source of friction; most resources were bought and sold by the stack (64 blocks) or chest (1728 blocks). Beacons were the most valuable item and ranged anywhere from 2000M to 8000M. Max enchant for an item cost 40-60 levels, ie 80-120M. Anyone who mined diamond without Fortune 3 was a fool, anyone who broke any blocks at all without Efficiency 5 Unbreaking 3 was a scrub. The server had over a few hundred to under a thousand weekly active players, maybe more than a thousand during summer months. Only the top ~1-3% were wealthy enough that we didn't have to mine unless we felt like it and were free to devote all our playing time to Great Works.&lt;/p&gt;
&lt;p&gt;Virtual economies can be quite unlike real-world ones because the physical laws of the space are different, but analogies can be drawn, and the similarities and differences are both fascinating. Due to the warp mechanism, other than near public warp points like spawn and market, land was abundant and low-value--it mattered little whether you were 5000 or 50000 blocks from spawn if you could /home there from anywhere. Property rights were enforced by the admins. Claims worked something like homesteading in that you couldn't just stick a sign in the dirt, but if you worked the land, it was yours. Land could be owned communally, but tenants had no rights except to their movable property. (&quot;Let's build a town together&quot; sometimes worked well. &quot;Hey join my town&quot; never did.) Vandalism and theft were mostly eliminated by the LogBlock panopticon. With suspensions and permabans being the only analogs for physical coercion, the admins derived their monopoly on violence from the fundamental properties of the universe. They used their power very carefully, however, kept in check by the fact that there were zero barriers to exit beyond social ties and time investment. The internet births interesting societies.&lt;/p&gt;
&lt;p&gt;One property of Minecraft itself is items can be grouped into the disjoint sets &quot;renewable&quot; and &quot;nonrenewable&quot;. Nonrenewable resources are just that: a fixed number of them are created when the world is genned, no more will ever exist. Diamond is the big one, both mechanically crucial and totally nonrenewable, hence its excellence as a store of value. The only way to get them is to dig them out of the ground. This isn't a statement on effort or rarity--dirt is nonrenewable, for instance--just the fact that they cannot be created out of thin air.&lt;/p&gt;
&lt;p&gt;Renewable resources &lt;em&gt;can&lt;/em&gt; be created out of thin air. A subset of renewable resources can be farmed; a subset of farmable resources can be autofarmed. Some examples: redstone is technically renewable through villager trading or witch farming, but the cost of the former and the hassle of the latter makes it unfeasible, especially given how commonly it's encountered while diamond mining. Wheat is both renewable and farmable: plant seeds, harvest wheat, get more seeds from that, repeat. Harvesting can be automated with machines that run water over the fields and send the products into hoppers that feed chests. Replanting, however, requires a right click. Cactus is completely autofarmable: cacti grow to three blocks tall, cactus blocks break and drop the item if directly adjacent to another block, cacti grow irrespective of that fact. So you float blocks next to where they'd grow, flowing water underneath to channel the output into a hopper, cactus blocks accumulate forever with zero human intervention.&lt;/p&gt;
&lt;p&gt;The important bit is with farmable resources, you double the size of your farm, you double your output but spend less than double the time each harvest. But the only way to get twice as much diamond is to dig twice as long. Logarithmic vs. linear growth. Autofarmable resources take time to accumulate but time spent harvesting is for practical purposes zero.&lt;/p&gt;
&lt;p&gt;The properties of diamond make it in many ways the most crucial and interesting item in the game. But I'll get to that. First, a story about sheep.&lt;/p&gt;
&lt;center readability=&quot;10&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/city-south-hall.png&quot; /&gt;&lt;p&gt;Approach from the south, audience hall before the main entrance to the inner city. The guardian lions are arranged as is traditional. Male, on the left (from a south-facing perspective), its paw on a ball representing dominance over the world. Female, on the right, its paw on a cub representing nature.&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;All's Wool That Ends Wool&lt;/h2&gt;
&lt;p&gt;Sheep function kind of like wheat. You can breed an arbitrary number of them and efficiency increases on a curve, but shearing hundreds of sheep is at least as time-consuming as replanting hundreds of seeds, probably more so. Wool is a much more interesting resource, though. Sixteen different colors, and when building with wool, you generally need particular colors and you need them in bulk. White wool blocks can be dyed individually, but dye cost makes this infeasible for most colors in large batches. You can dye a sheep any color, however, and it will produce that color wool indefinitely.&lt;/p&gt;
&lt;p&gt;Colored wool was notoriously hard to get on the market, and most just took this as a fact of life. People tended to grow their own food because it was relatively low-effort and cost nothing. So it was common to just keep a pen of sheep near the food, dye them when you needed a particular color, shear them over the course of days or weeks until you had enough wool for your build. Market rate for white wool was 0.08M, stable supply and decent demand, perfectly natural price. Colored wool, however...&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You'd need sixteen shop chests rather than just the one, and floorspace in official market shops was valuable because they were size-limited by admin fiat.&lt;/li&gt;
&lt;li&gt;Colored wool sales were virtually impossible to predict. You'd sell out of blue in an instant because someone happened to need blue. Maybe you restock and don't sell another block of blue for a month. So you had to stock everything all the time, meaning you had to have a &lt;em&gt;lot&lt;/em&gt; of sheep.&lt;/li&gt;
&lt;li&gt;You may be the only seller in the market, but you're competing against prospective buyers just doing it themselves. Since it was common knowledge that colored wool wasn't available on the market, people had already gotten used to doing it themselves, in part because...&lt;/li&gt;
&lt;li&gt;Shearing sheep was fucking annoying. Shearing sixteen different pens of sheep for 0.08M a block when most of those blocks would languish most of the time was plain stupid. Sellers lost interest fast, so buyers got used to here-today-gone-tomorrow wool stores and adapted to there never being a reliable source.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;What should have been obvious though was that because of all this, colored wool was simply &lt;em&gt;more valuable&lt;/em&gt;. Plenty of demand, virtually no supply, who gives a shit about the price of &lt;em&gt;white&lt;/em&gt; wool, right? People just assumed because the blocks were mechanically the same, they were worth the same.&lt;/p&gt;
&lt;p&gt;Emma realized this and spread word on the grapevine that colored wool was an untapped market with massive profit potential. (I'm pretty sure she did it because she needed a lot of wool and was hoping for someone to do the work for her.) And whenever Emma said there was money to be made, everyone listened.&lt;/p&gt;
&lt;p&gt;Lily was the first. She bred up hundreds and hundreds of sheep (so many that she had to cull the herd a bit because her FPS cratered whenever she looked at them) and by week's end there was a brand new wool store in the market with a full chest of every single color, plus a sign promising there'd always be more where that came from. She sold for 0.12M and business was good.&lt;/p&gt;
&lt;p&gt;Really good, in fact. Even with the 50% increase, she sheared sheep for hours and could barely stay in stock of &lt;em&gt;any&lt;/em&gt; color, despite the received wisdom that colored wool sold erratically. That's because another player, Jill, was buying out her entire inventory and reselling it across the street for 0.2M. And Jill didn't do too bad for herself either. Pretty soon wool went from a backchannel convo topic to the hottest game in town.&lt;/p&gt;
&lt;p&gt;On the heels of Jill's success, Frank opened his own wool store. Not only did he sell for 0.35M, he &lt;em&gt;bought&lt;/em&gt; via the same doublechest at 0.2M. Lily raised her price to compensate. Zel got in on the action with their own buy/sell doublechests, and everyone said business was booming. Prices kept climbing, and at the height of it, Zel was &lt;em&gt;buying&lt;/em&gt; at 0.5M a block and selling for even more, while all the normals who just wanted a bit of wool here and there complained about the &quot;crazy&quot; market. Sorry guys, they were told, that's what wool is actually worth nowadays.&lt;/p&gt;
&lt;p&gt;Except not quite. No one who wanted wool for consumption was actually paying those prices, it was all wool merchants buying each other out. I knew better than to get involved--it felt a lot like a bubble, so any investment at all carried unacceptable risk. Unless, of course, there was a way to get instant money with zero risk.&lt;/p&gt;
&lt;p&gt;Wool, again, is renewable. It's farmable. Farming it is annoying, sure, but it's dead easy. While the price was climbing on speculation, a new seller nobody had heard of set up his own shop, without much fanfare, selling every color at 0.1M. He'd built his own farm, like they used to back in the olden days of less than a month ago. Jill and I were the only ones who even knew he existed, because every day when he logged in, we kept one eye on the server map. When we saw him warp to market, we raced to his shop to buy out anything he'd restocked. I imagine anyone else who noticed his store just figured it was always empty.&lt;/p&gt;
&lt;p&gt;Jill used his wool to refill her chests. She did decent business. I took everything I bought, however, and immediately dumped it into Zel's buy chests. Quintuple what I paid, not a bad deal at all. As I started to fill their chests up, I sold anything else to Frank and a few other small-time buyers, the objective always being to unload what I bought within the hour. After awhile, &quot;haha where are you getting all this wool from :P&quot; turned to &quot;no seriously alice where are you getting all this wool from.&quot; The bottom fell out of the market as the speculators shifted from &quot;turn a profit&quot; to &quot;cut my losses&quot; to &quot;sell sell sell.&quot; Colored wool corrected to the nice sensible price of 0.12M and all was right with the world.&lt;/p&gt;
&lt;center readability=&quot;3&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/city-south-courtyard.png&quot; /&gt;&lt;p&gt;Through the audience hall, a courtyard before the gatehouse guarding the inner city.&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;&quot;It's Your Money, and I Need It Now!&quot;&lt;/h2&gt;
&lt;p&gt;Buy chests can be a real bitch. Emma, Victoria, and I used them extensively, but we used them &lt;em&gt;right&lt;/em&gt;. Most people didn't use them. Most everyone else who did used them very, very wrong.&lt;/p&gt;
&lt;p&gt;If you set a chest to buy an item at some price, it is possible for anyone at any time to sell you 1728 of that item. If you do this, you'd better be damn sure you want 1728 of that item. If you don't, you can pad out the chest with garbage to reduce its capacity. Set up a buy chest for say diamonds, put dirt blocks in 26 of the slots, now you can't be sold more than 64 diamonds. No one ever did this. I'm not sure it even occurred to most people that it was possible. One thing I got very, very used to seeing was the helpful message, &quot;Failed to sell N items: player can only afford M.&quot;&lt;/p&gt;
&lt;p&gt;As long as you knew what you were doing though, buy chests were beautiful tools.&lt;/p&gt;
&lt;p&gt;Emma liked to buy materials for her builds for more than what people were selling. (Naturally, she first bought out every seller in the market.) Her prices were so good that people would spend hours a day doing the boring work for her. That's how I got my start, too--sold her maybe 15000 blocks of clay at 1M per over the course of a couple weeks. Enough capital to get me established, and within a month or two after that, playing the market made me enough cash that I didn't have to mine for anything.&lt;/p&gt;
&lt;p&gt;Buying for less than market rate worked great too, if you didn't mind waiting. This is what I tended to do, both for things I needed and for things I turned around and sold at a markup. I rarely set up a buy chest that I didn't intend to keep open for months, and I adjusted my prices to change my burn rate rather than ever stop buying. It worked beautifully because over time people came to rely on my buy chests and could trust they weren't going away. I accumulated a group of regulars who sold to me because they knew I was always buying, and word of mouth drove more to me too. &quot;Are ink sacs worth anything?&quot; the newbie asks. &quot;Yep, Alice buys those,&quot; says the good samaritan, who then brings them right to my door. Splendid.&lt;/p&gt;
&lt;p&gt;Victoria did plenty of that kind of business too, but my favorite hustle of hers was her farm. She had on her land wheat fields, livestock pens, a tree farm, and various other such things. I mean, we all did, but she set up buy chests for all those goods right there at something like a quarter market rate. I was way the hell in the middle of nowhere, so it wouldn't have worked for me, but she &lt;em&gt;also&lt;/em&gt; had the nether rail. &quot;Take the white line to the third stop and you're right there!&quot; And people would go work her fields, shear her sheep, chop down her trees, replant everything, and immediately sell her the goods at rock-bottom prices.&lt;/p&gt;
&lt;p&gt;But that was us. Most people who set up buy chests, they were just begging for someone to take all their money. Few angles were more profitable or more reliable. No one was as good at it as me, in large part because I knew the entire market. Once or twice a day I'd stroll through the marketplace peeking in all the stores to see what changed. I didn't just know how much everything was worth, I knew every item every store bought and sold at what price and how much they had and how all those things had changed over time. To a reasonable degree of accuracy, anyway.&lt;/p&gt;
&lt;p&gt;Imagine: p-queue of every chest, prioritized by item importance, &quot;importance&quot; being some heuristic incorporating overall supply/demand, whether I personally needed it, what kind of margin I could expect to make flipping it, whose store it was, what kind of foot traffic that store got, which market it was in... few other things I suppose, it wasn't a system so much as a feeling. First few hundred chests in the queue I flat-out memorized. Next thousand or so I knew which store what item and around how much. All the rest I knew there was a store in a general area that bought or sold the item at a good bad or ok price. By &quot;all the rest&quot; I mean &lt;em&gt;all&lt;/em&gt;. At the height of it there was Market East, Market West, Market 2 (don't ask), Zel's Emporium, The Mall, and a couple dozen minor destinations in distant locales most players didn't even know about. Ballpark 16 chests/shop * 16 shops/row * 4 rows/market * 3 markets + Zel ~= 3200 chests and a couple thousand more in the hinterlands.&lt;/p&gt;
&lt;p&gt;Most of the people in the top tier I knew their stores better than they did. It wasn't uncommon, for instance, for Zel to tell someone in chat, &quot;I sell X item for P marbles,&quot; only for me to interject, &quot;You sell X for Q but you've been out of stock for a week. Market East, second left, third shop on the right sells for R.&quot; One time I caught someone who had been using a hopper to siphon emeralds out of one of Victoria's shop chests. I didn't witness it or anything, I just noticed her supply had steadily dropped over the course of a week at a rate that was highly unusual given how the emerald market normally flowed. Summoned a mod to check the history of the blocks underneath, and my suspicions were confirmed. Victoria hadn't realized anything was even missing.&lt;/p&gt;
&lt;p&gt;(A little while later someone scooped a beacon from me in the same manner; I'd since learned who did Victoria's shop, so I private messaged the likely culprit with a few choice words. They apologized profusely, swore to mend their ways... and a few hours later hoppered three beacons back to replace the one they took. A happy ending for all involved, I'd say. After this I replaced the blocks underneath my chests with locked furnaces.)&lt;/p&gt;
&lt;p&gt;Anyway. It's easy to cash out on buy chests when you know every shop on the server. And no one had more buy chests than Zel.&lt;/p&gt;
&lt;center readability=&quot;8&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/city-south-palace.png&quot; /&gt;&lt;p&gt;The largest structure in the inner city, a palace meant for reception of honored guests and scholar-officials. Similar in layout to a traditional siheyuan, though on a much grander scale. The front structure was more open to vistors (though of course access to the inner city was strictly controlled) while the ruler's living quarters were tucked behind. All in all I didn't leave myself enough space to do a full complex. If I were to do it again, I'd make the city much larger and worry less about leveling terrain (which ended up taking an incredible amount of time).&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;Ethics in Video Game Commercialism&lt;/h2&gt;
&lt;p&gt;Zel's Emporium was truly a wonderland. Three stories, couple hundred chests, and every item they sold, they also bought. From the same chest. In theory, the arbitrage business is a good one: set up your shops, keep an eye on the prices, collect free money off the spread with very little effort. The Emporium's stock was so diverse that it did plenty of business in both directions, and Zel had enough cash reserves to bounce back from most setbacks.&lt;/p&gt;
&lt;p&gt;Well, most. Let me tell you about lilypads. Lilypads gen on water in swamp biomes. Very common and fairly easy to gather but don't have much use besides decoration. People who wanted them usually just needed a handful to decorate a pond or two, people building in swamps only ever harvested them incidental to other activities, and most people didn't like to build in swamps anyway. Lilypads were garbage. Zel, being the long tail merchant that they were, sold them for 5M. Overpriced relative to their commonness in the world, but fine considering their scarcity in the market. One of their hundreds of tiny rivlets of income.&lt;/p&gt;
&lt;p&gt;Zel &lt;em&gt;bought&lt;/em&gt; lilypads for 3M. This was easily one of the most absurd prices I had &lt;em&gt;ever&lt;/em&gt; seen on the server for &lt;em&gt;anything&lt;/em&gt; and I spent days stripping swamp biome after swamp biome for the things just to take advantage of it. I emerged from the swamps and with no warning sold Zel around 3500 lilypads for just over 10000M. Zel later told me they knew the price was high but never in a million years thought anyone would be insane enough to do what I did.&lt;/p&gt;
&lt;p&gt;It sounds like I picked on Zel a lot. I really did like them and felt bad about abusing their store so much. Not bad enough not to do it though. Managing a couple hundred chests is hard as hell, and market conditions shifted prices faster than they could keep up. It became almost routine that I'd find something in the market Zel bought for more than the seller sold, buy it out, warp over, free money.&lt;/p&gt;
&lt;p&gt;Eventually, to my shock, I completely tapped them out. I didn't think it could be done--that they were always able to buy anything was the defining feature of the store, and their reserves seemed deep enough that I never thought I'd drain them. They widened their spreads even further, dropped their sale prices a bit, and tried to recoup. They still had huge stores of goods, so it's not like they were flat on their ass. They brought in a partner and revamped things a bit, and I even sent letters from time to time when they got a price so egregiously wrong that I felt it would be dishonorable to exploit.&lt;/p&gt;
&lt;p&gt;Obviously though, the game was up. I couldn't sell them anything if they had no money.&lt;/p&gt;
&lt;p&gt;...so I started running back-to-back transactions where I'd buy just enough of their valuable items to give them the precise number of marbles that I planned to reclaim by selling them junk. All's fair, y'know.&lt;/p&gt;
&lt;center readability=&quot;5&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/store-upstairs.png&quot; /&gt;&lt;p&gt;The upstairs of my shop. After a few weeks gathering for Emma to get myself established, I started keeping clay for myself. By time 1.6 came I had five or six doublechests and solid stocks of or supplychains for every dye. I was the only seller and did pretty well.&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;Clays 'n Saddles&lt;/h2&gt;
&lt;p&gt;I don't think I can stress this enough: even if you suck at playing the market, even if you don't have much time to invest into the game, you can blow any virtual economy wide open just by reading the upcoming changes, predicting how those changes will shift supply/demand curves, and investing in items based on those predictions. Huge, complicated MMOs, it can often be hard to make accurate predictions without an encyclopedic knowledge of game mechanics. Often it's pretty simple though. People want cool shit.&lt;/p&gt;
&lt;p&gt;Minecraft 1.6 was colloquially known as The Horse Update. It added such things as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Horses&lt;/li&gt;
&lt;li&gt;Hardened clay&lt;/li&gt;
&lt;li&gt;Coal blocks&lt;/li&gt;
&lt;li&gt;Stained clay&lt;/li&gt;
&lt;li&gt;Carpets&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It was a popular topic of conversation on our 1.5 server for some time; we always got updates several months late since we needed to wait for Bukkit and our core plugins to update. (I'm not sure if things have changed since, but back then, every Minecraft update was a breaking one. Modders had to dump the jars every release and work from the decompiled artifacts directly. It is a testament to how enjoyable a game Minecraft is to play that it even has a mod community at all.) Here are all the new 1.6 features people on our server talked about:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Horses&lt;/li&gt;
&lt;li&gt;Horses&lt;/li&gt;
&lt;li&gt;Omg horses&lt;/li&gt;
&lt;li&gt;Guys I can't wait for horses&lt;/li&gt;
&lt;li&gt;Horses!!!!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To ride a horse you need a saddle. Prior to 1.6, saddles could only be used to ride pigs, and pigs are terrible mounts, so no one used them. Several shops stocked saddles at 20-30M. Some people sold for more, since saddles were uncraftable and pretty rare, but no one ever paid that much. For about a month leading up to 1.6, I bought any saddle I could find under 60M. In theory most players would only need one or two of the things, so I didn't want to spend absurd amounts on them. I ended up with several dozen, figured they'd go up to maybe 80-90M and I'd turn a decent profit.&lt;/p&gt;
&lt;p&gt;Then 1.6 hit and people absolutely lost their minds. Turns out, only a minority of players so excited about the horses had made sure to get ahold of a saddle in preparation for the patch. Most all of them just &lt;em&gt;assumed&lt;/em&gt; they could buy a saddle on patch day so why bother getting one early. Several rich players had stockpiled plenty but had zero intention of selling them. Every saddle in the market vanished within a matter of hours: 80M, 120M, 150M, it didn't matter, and after they were all gone, there was much wailing and gnashing of teeth. I knew the price would rise, but I didn't think it would rise &lt;em&gt;that&lt;/em&gt; high. You can usually get a saddle or two from a solid day of dungeon crawling. But no one wanted to go explore boring old dungeons. They wanted to ride horses, dammit.&lt;/p&gt;
&lt;p&gt;I placed a chest in the center of my main store, atop a nice little diamond block pedestal, selling one saddle, for 750M. Most people laughed at the price, some cursed my greed, plenty sent me private messages trying to haggle or find out if I had more. A few hours later, it sold. I let the chest sit empty until word got around, then put another saddle in it.&lt;/p&gt;
&lt;p&gt;All told I moved ten or twelve at 500-750M apiece, average profit per around 1000-2000%. The pricepoint proved unsustainable, but because of a rather mysterious supplier (which I will get to soon) I had a steady stream of saddles that I could sell quite briskly at a modest markup. People were starting to pour hours into extracting the things from dungeons too, hoping to cash in on market conditions they didn't realize had already evaporated. But I managed to outsell them anyway, even as they tried to compete on price, because I had something they didn't: horses.&lt;/p&gt;
&lt;center readability=&quot;7&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/horse-farm.png&quot; /&gt;&lt;p&gt;My horse farm. I considered at one point digging out a space underneath to build a track on which to clock their run speeds. Never ended up doing it, though, because aside from Emma, no one actually cared how fast the horses were.&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;Horse of a Different Color&lt;/h2&gt;
&lt;p&gt;Normally, horses spawn naturally in grasslands, just like any other animal. But because we were on an old world, or because of a bug in some plugin we used, they didn't. So the admins sold horse eggs for 150M, single-use items normally unobtainable in survival that spawned a horse (90%) or donkey (10%). Horses came in seven colors and five patterns for a total of 35 different appearances, and people had &lt;em&gt;strong&lt;/em&gt; opinions about which one they wanted. Average players could afford one or two, but with such a low chance of getting what they wanted, many found themselves disappointed or else didn't even bother.&lt;/p&gt;
&lt;p&gt;I scouted out locations close to spawn (a difficult task given how overdeveloped the land was), eventually discovering a small mountain someone had built their home atop who &lt;em&gt;probably&lt;/em&gt; wouldn't notice or mind that overnight I'd hollowed it out and stuck a couple doors on the side. Set up pens with fences in my cavern under the mountain, bought fifteen or so eggs, popped them all and started breeding the output. Breeding took an item of negligible cost given to each horse and produced a foal with close to a 50-50 chance of inheriting one of the parents' colors and one of their patterns, with a very small chance of getting a random one instead. There's a cooldown of some minutes before they can be bred again. Foals can be raised into adults instantly by spamming them with wheat. It took a few days of cross-breeding and culling, but eventually I had 70 horses, two of each combination, separated into seven pens by color, along with a handful of donkeys and mules.&lt;/p&gt;
&lt;p&gt;I sold horses for 100M, two-thirds the price of an egg, but unlike the crapshoot that was, I could offer any style the buyer wanted, no risk and no wait. (And at zero marginal cost.) Buy a saddle with the horse and get an extra discount. This proved to be a nice side business for some time.&lt;/p&gt;
&lt;center readability=&quot;6&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/warehouse.png&quot; /&gt;&lt;p&gt;My warehouse, in the basement of the palace. The view from the opposite corner is much the same. Some of the ladders descend to more stacks of doublechests underneath. Organizing and labeling all of this is probably one of the most autistic things I've ever done. Though I'm pretty sure everything in this post qualifies.&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;She Went to Jared&lt;/h2&gt;
&lt;h3&gt;Or, How I Learned to Stop Worrying and Love Catastrophic Economic Meltdown&lt;/h3&gt;
&lt;p&gt;So an interesting thing happened during the whole saddle episode. As I became well-known for having the only consistently available, if rather pricey, stock of the item, a player Charlotte messaged me asking if I'd like to buy more. They were selling rather briskly now, I was starting to run low, and especially since I was planning on getting into the horse business too, I needed a steady supplier. She'd sell me six or seven at a time for 50 or 60M, saying that was all she had, but whenever I went back, she had more. A bit strange but nothing too out of the ordinary. She had a few orbiters, so I figured maybe they were working together to excavate the things. Anyway, it was good for me.&lt;/p&gt;
&lt;p&gt;Then she opened her store in the far corner of the market. It was truly insane. Diamonds for 6M, when I sold for 20M and Emma for 23M. Emeralds for 5M, gold blocks for 3M. Wither skulls for 120M--three makes a beacon, and beacons sold for thousands when they could be got at all. Enormous quantities of everything, no one could have harvested all this if they spent years, and Charlotte was nowhere near a savvy enough player to have acquired it through the economy. And if she was, she wouldn't have been selling for those prices anyway.&lt;/p&gt;
&lt;p&gt;I went to one of the admins and told her someone had discovered a dupe glitch. She told me this was impossible. I explained the evidence, that it was the only likely explanation, that I didn't think anyone should be punished necessarily, but it should at least be corrected and the items deleted. She continued to insist that there was no way this could possibly happen. (She was a programmer herself, and as such probably should have known better.) Wary of being tagged an accomplice then, I asked if it should turn out that these items were in fact duped, would I be punished for trading in them. She assured me that no one would be banned for buying and selling in good faith.&lt;/p&gt;
&lt;p&gt;So I went to work.&lt;/p&gt;
&lt;p&gt;Diamonds being not the most valuable but certainly the most valued item in the game, both for their utility and their price stability, the server was littered with buy chests for them. These were mostly of the fling and a prayer sort, offering prices low enough that anyone selling to them was a noob or a fool. But not so low that I couldn't sell them Charlotte's. I bought from her all I could afford, bankrupted every single person who had a buy chest at any price, then went back for more. Buy chests in the market shops, scattered on the roadsides, nestled in secluded towns no one remembered the names of, I hit them all. If you were buying diamonds at the bottom of the ocean, I would find you and take all of your money.&lt;/p&gt;
&lt;p&gt;At the same time, I dropped my sell price in the market to 16M and did pretty good business for a few weeks. I had the advantage of one of the two best plots there were, the other belonging to Emma. (This I'd gotten via inside knowledge that Zel's to-be partner was shuttering his store and gifting the plot to a friend. I offered to swap my plot as the gift, help with the deconstruction process, and advise on pricing in the Emporium in exchange, thus getting the prized location without it ever going up for sale.) QuickShop provided a console command to show the closest shop selling an item, and these two plots, though behind hedge walls and not immediately visible, were the closest as the crow flies to the market's warp-in point. So anyone using the command--and this was most people, traipsing through the market looking for deals being a rare activity mostly limited to speculators--got directed to me or Emma for anything either of us sold.&lt;/p&gt;
&lt;p&gt;This all made me a &lt;em&gt;lot&lt;/em&gt; of money. I drove a portion of profits into bolstering my diamond and beacon reserves, bought basically any building material I thought I'd ever need in bulk, and still watched my marble balance grow. Up til the diamond bonanza, I'd been making money on a dozen different side hustles. A bit here, a bit there, doing better than most, but regardless the day-in day-out of working the market took up the majority of my time on the game. That made me rich; this is what made me wealthy.&lt;/p&gt;
&lt;p&gt;But soon 16M became 14M, and 14M became 12M. A few people started to notice Charlotte's store, and she restocked faster than I, or anyone, could recoup enough to buy out. Mostly though, it was clear to everyone the price of diamond was falling, even if they had no idea why. I diversified into selling enchanted diamond equipment of all types, priced just so that I could break even on the enchant and move the component diamonds at the same price I sold them for raw. A few of the buy chest people I'd tanked tried recovering some of their money by putting up at a loss the diamonds I'd sold them, but they still couldn't move product faster than a trickle. Eventually even Charlotte had to cut her prices to keep selling. It was bad.&lt;/p&gt;
&lt;p&gt;Not long after, the admin I'd spoken to before came back to me saying she discovered the dupe glitch, Charlotte was tempbanned and her items revoked, and it would be greatly appreciated if I could please turn over any diamonds I got from her that I had left in exchange for the price I'd paid so they may be destroyed. Of course I agreed. I'd made out like a bandit already, and at that point, like poor old JP Morgan during the Panic of 1907, was more concerned with the state of the economy as a whole, that left uncorrected it might render everything I now held worthless. (I did however neglect to mention the wither skulls.) I could not resist telling her I told her so.&lt;/p&gt;
&lt;p&gt;But the damage was done. The only reason you couldn't say the economy was in freefall was because all that remained was a stain on the ground. Many players who'd harvested and traded only did so to reduce the time they spent mining for diamond, and the game's equivalent of middle-class affluence was steady access to diamond tools. At first the abundance of diamond must have seemed like a boon to people who long had to struggle to get enough to sustain their needs. But mining diamonds to sell was also the primary way most knew to make money with which to buy building materials, thus the purchasing power of the vast majority plummeted alongside its price. (Diamonds are rare in the ground and as such have a Skinner box sort of reward-feedback loop when uncovered, which makes them for many players the most &lt;em&gt;enjoyable&lt;/em&gt; thing to farm. The things I did to make my first tens of thousands--digging clay out of riverbeds, gathering lilypads from swamps--were more lucrative but less exciting, and as such I was the only one who did them.)&lt;/p&gt;
&lt;p&gt;In this way, diamond was the linchpin of the entire system, so when its price bottomed out, everything else went with it. Nothing you could gather and sell was worth the money you'd get for it. And even if it was, nothing you'd want to buy with that money was available for purchase. Everyone on the server was reduced to subsistence, forced to harvest everything they might need. Even those of us with real money, once our stockpiles of raw materials started to dwindle, had to dig more out the dirt like a bunch of scrubs. The entire market was as illiquid as a Weichselian glacier.&lt;/p&gt;
&lt;p&gt;And then Samantha came back.&lt;/p&gt;
&lt;center readability=&quot;3&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/east-temple.png&quot; /&gt;&lt;p&gt;Temple to the ancestors, just east of the inner city.&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;Gonna Buy With a Little Help From My Friends&lt;/h2&gt;
&lt;p&gt;Samantha, naturally, was horrified by the state of affairs upon her return. I mean, we all were. We thought the problem was just too massive to manage on our own, that the only thing we could do was keep playing the game and hope it worked itself out over time. Samantha didn't.&lt;/p&gt;
&lt;p&gt;Aside from our vast reserves of raw goods, Emma and I each had several hundred thousand marbles, Victoria a bit less, Samantha a bit more. Samantha intimated to us that she intended to spend her entire fortune clearing the market of diamond and that we should join her in this endeavor. What she understood immediately, which we were initially wary to gamble on, was that while it seemed like there was more diamond out there than anyone could buy, much of it was already in plain view. No one but us was holding onto &lt;em&gt;serious&lt;/em&gt; reserves, not like us, so all we had to do was shoulder the initial investment. We could swoop in and acquire all that there was to be had before anyone knew what was happening. They'd dump what they held once they saw there were buyers again, seeing it as a rare opportunity, not understanding our aim was to push the price past what we were paying. Then we'd become the primary suppliers for the server and quickly start making our money back, which we could then use to force up the prices of everything else. Anyway, the worst that could happen is we'd end up with too much of the most useful item in the game.&lt;/p&gt;
&lt;p&gt;We set up a private group on a messaging app and invited a half dozen or so other people. Zel, Lily, people with some amount of assets who we knew worked the market strategically and had a vested interest in dragging it back from the brink. Minor players by comparison to us four, but it was good to have everyone on the same page. Diamond was still in the 6M range; we decided the new price would be 18M.&lt;/p&gt;
&lt;p&gt;Samantha went first. She swept through the market buying out every single person with diamond to sell, then set up a buy chest at 12M and announced it to the server. People flocked to it, fighting to fill it up, and each time they did, she happily emptied it out so they could do it again. They all thought this was a windfall, a once in a lifetime shot to offload the accursed stones for more than they were worth, a boon offered by a wealthy eccentric just off a long break and looking to throw her fortune away. Soon enough, Samantha was tapped out, down to her last marble.&lt;/p&gt;
&lt;p&gt;We waited a few days for the people she'd bought out to restock, the people who thought they missed out to put all they had up for sale in the hopes that it might move after all. At the designated time, we all moved our price to 18M and picked up where she left off, snapping up anything less than that and ferreting it away for later. It took just about all the money we had. I was down below 10k for the first time since a couple months after I started playing, and I wasn't the only one. We barely managed to pull it off, but we did it.&lt;/p&gt;
&lt;p&gt;When it was just Samantha buying, it looked like an individual whim. Now that it was all of us, it was obvious to those paying attention that this was organized. But it didn't matter. By time people figured out they'd been had, we had all there was to be had. They went through their stages of grief, then they started buying from us again. Just like Samantha said.&lt;/p&gt;
&lt;p&gt;Rumors swirled about a cabal of players manipulating the market, abusing their wealth to force a change that everyone else could only go along with. We coyly denied the whole thing, a wink and a smile, &quot;Wow, wouldn't that be something if there was, hm?&quot; They called us the diamond cartel. We called ourselves the Minecraft Illuminati.&lt;/p&gt;
&lt;p&gt;Once we started making diamond money again, there was nothing that we couldn't do. No other item was duped so prolifically, and nothing available in comparable quantities came near its per-item cost. We were free to set the prices we pleased and had both the resources and the hubris to enforce them over any objection. Gold and coal up fivefold, wood and obsidian up ten. And every time we raised a price, our daily incomes went up higher.&lt;/p&gt;
&lt;p&gt;There were no restraints anymore. We could do whatever we wanted. It was our server. Everyone else was just playing on it.&lt;/p&gt;
&lt;center readability=&quot;2&quot;&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/above-market.png&quot; /&gt;&lt;p&gt;View of the market district from above.&lt;/p&gt;
&lt;/center&gt;
&lt;h2&gt;A Whole New World&lt;/h2&gt;
&lt;p&gt;Eventually enough plugins updated for 1.7 that the admins decided it was time to update. This was known as the biome update, so named because it added dozens of new environment types and radically altered worldgen. Which meant that to take advantage of the new content, the server would be wiped, and everyone would start over.&lt;/p&gt;
&lt;p&gt;In an attempt to prevent a repeat of the previous world, where a tiny clique of players achieved dizzying wealth at the expense of all the others, some measures were put in place to stymie our ambitions. An aggressive tax, scaling to multiple percent per day, on anyone holding more than a few tens of thousands of marbles. I warned this would backfire, that it would lead to pervasive hoarding and diamond as de facto alternative money, wildly distorting the market all to avoid taxation. This is exactly what happened: the price of diamond shot up relative to everything else, chronic shortages meant most players couldn't buy it at all, and those of us making big trades preferred to denominate in it rather than the official currency. I considered even standardizing a redstone contraption that would dispense a selectable number of items for every diamond inserted in, but never got around to it.&lt;/p&gt;
&lt;p&gt;Meanwhile, in part to deal with the often intolerable lag of thousands of shop chests in one place, in part to reduce its grip on the daily flow of the game, the market was split up into four smaller areas. On the old server it had been one large, flat area, with square plots arranged in a grid, easy to browse and all conveniently located in one place. The new markets were pre-built structures laid out like model villages, with upstairs and downstairs, back entrances, none with the same layout, confusing to navigate and widely dispersed. Victoria came up with the idea of building our own market, that unlike the old server, we could build something with more utility than the official option and thus supplant it. We called it the Skymall: a pair of giant discs perched up at cloud level atop two massive pillars, shops arranged inside around their circumferences, connected by skybridge and easily accessible via nether portal just outside of spawn. Once we got established on the new server (which didn't take long) we plowed all our resources into this project for weeks. The Skymall opened to great fanfare; we sold out of storefronts within days, and it soon became the destination of choice for anyone heading to market.&lt;/p&gt;
&lt;p&gt;But none of it had the same savor. The joy of my first run was starting from zero, knowing nothing of the server and little of the game, building my knowledge graph, learning, experimenting, getting results. The diamond cartel was our most audacious gamble, but it was still an unknown until we pulled it off. On the new server, everything felt rote. I scouted out a skeleton spawner and built an experience grinder my first day or two, got my enchanted diamond, constructed a 50-furnace autosmelter and a passive iron farm. I felt as a dreary Harappan, building things I'd already built time and again, without any inventiveness, any spark.&lt;/p&gt;
&lt;p&gt;Once, when I wrote about all this in a different format, someone mentioned that online games don't necessarily have the same sort of stagnancy and barriers put up offline by entrenched, generational wealth. You can roll everyone back to zero and the selfsame people will get rich all over again. This is quite true. Part of it surely is many people don't like to play games the way we do. But much of it is you either have the time, skill, knowledge, and drive to work the angles and make your way to the top, or you don't. Making back our money wasn't just easy, it was trivial. Even with a leveled playing field, we raced ahead of everyone else. And then, one by one, we started to lose interest and drop off.&lt;/p&gt;
&lt;p&gt;There's a skill curve to games like Europa Universalis where you start off bewildered by the multitudes of inscrutable systems laid out in front of you. Over time you learn to manage them, and the game shifts from something that seems to happen to you, to something you can participate in and compete with. But eventually you learn it well enough to find the cracks. With so much complexity, there are always oversights, always gamebreaking tactics, ways to grind the AI into dust. You have complete control over the game world, can effect any end you want. And then it becomes about building a story.&lt;/p&gt;
&lt;p&gt;With Minecraft, with the economy, for us, there was no story to tell. There was only money.&lt;/p&gt;
&lt;center&gt;&lt;img class=&quot;img-box&quot; src=&quot;https://www.alicemaz.com/assets/img/minecraft/above-city.png&quot; /&gt;&lt;/center&gt;
</description>
<pubDate>Thu, 28 Dec 2017 20:21:49 +0000</pubDate>
<dc:creator>scribu</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.alicemaz.com/writing/minecraft.html</dc:identifier>
</item>
<item>
<title>How I Find Consulting Clients</title>
<link>https://www.gkogan.co/blog/how-i-learned-to-get-consulting-leads/</link>
<guid isPermaLink="true" >https://www.gkogan.co/blog/how-i-learned-to-get-consulting-leads/</guid>
<description>&lt;p&gt;&lt;em&gt;(Updated December 2017 to reflect how my strategy for finding new consulting clients has evolved in the past few years. Sorry if some parts feel disjointed.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I love consulting. I make a good living, I’m rewarded by seeing companies succeed—I’ve seen clients go through two acquisition exits, multiple million-dollar funding rounds, 10x growth in revenue, and more—and I get enough inquiries through this blog and referrals that I don’t face pipeline droughts.&lt;/p&gt;
&lt;p&gt;But getting to this point wasn’t easy. It took over a year to learn what works and what doesn’t, and I’m still improving my acquisition strategy five years on. In this article I’ll share practical tips I’ve learned along the way about finding consulting clients.&lt;/p&gt;
&lt;p&gt;First, a reminder that there’s an alternative:&lt;/p&gt;
&lt;h2 id=&quot;alternative-to-finding-new-consulting-clients&quot;&gt;Alternative to Finding New Consulting Clients&lt;/h2&gt;
&lt;p&gt;Although the focus of this article is finding new consulting leads and clients, remember that the best way to get new consulting business is from existing clients.&lt;/p&gt;
&lt;p&gt;Can you find ways to be valuable to your clients even after the first project? Are clients satisfied enough that they want to keep working with you? Are you charging a consulting fee that’s proportional to the value you’re providing?&lt;/p&gt;
&lt;p&gt;If you can answer “yes” to those, then there’s less pressure to constantly find new clients to remain at capacity, earn enough money, and have your choice of projects.&lt;/p&gt;
&lt;p&gt;If you answer “no” to any of those, then work on fixing those things while you’re also looking for new projects so that you’re not constantly looking for new work.&lt;/p&gt;
&lt;p&gt;Now, let’s begin…&lt;/p&gt;
&lt;h3 id=&quot;month-0&quot;&gt;Month 0&lt;/h3&gt;
&lt;p&gt;There was a long winter after I quit my job. Nevermind that it was summer—what followed was three months in which my savings depleted like the fat of a hibernating animal. I was to become an independent consultant.&lt;/p&gt;
&lt;p&gt;I spent those three months doing what I thought one does to find clients: network. I went to meetups every week and gave my elevator pitch to anyone who’d listen. It didn’t occur to me at the time that everyone else was there for the same reason. I was pitching marketing services to a lawyer who was pitching legal services to an MBA “ideas person” who was there to pitch ideas to a… It went on and on, and it was ridiculous.&lt;/p&gt;
&lt;h3 id=&quot;month-3&quot;&gt;Month 3&lt;/h3&gt;
&lt;p&gt;After three months, my savings were running low and I dreadfully considered going back to a normal job.&lt;/p&gt;
&lt;p&gt;Then, a &lt;a href=&quot;http://www.brianhonigman.com/&quot;&gt;friend&lt;/a&gt; I made at one of these meetups referred me to a startup that could use my help. A few calls and a meeting later, we had a deal.&lt;/p&gt;
&lt;p&gt;It didn’t lead to other clients, but I got two important things from that project: cash and confidence. It was enough money for another three months of runway.&lt;/p&gt;
&lt;p&gt;Maybe that was the formula, I thought; meet smart people and take time to form relationships. I spent the next two months taking that approach and it failed, too. The issue is painfully obvious in hindsight: founders don’t have time to schmooze at random meetups.&lt;/p&gt;
&lt;h3 id=&quot;month-6&quot;&gt;Month 6&lt;/h3&gt;
&lt;p&gt;Major progress doesn’t happen gradually, it happens in sudden leaps.&lt;/p&gt;
&lt;p&gt;The next leap came from an inconspicuous comment I made on &lt;a href=&quot;http://news.ycombinator.com&quot;&gt;Hacker News&lt;/a&gt;, which led to an email inquiry, which turned into a project, which turned into a long-term consulting relationship.&lt;/p&gt;
&lt;p&gt;Things were looking better (in that I had a monthly income), but I still needed to find a consistent and predictable method of getting clients.&lt;/p&gt;
&lt;p&gt;The positive outcome of my comment taught me two things:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Busy people—founders and CEOs—may not have time for meetups, but they sure as hell read Hacker News (or their industry's equivalent).&lt;/li&gt;
&lt;li&gt;Sales pitches are repulsive, but helpful information is attractive.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Thus my next experiment: blogging. Specifically, writing content that could be interesting to prospective clients.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;By the way, I write an article like this every month or so, covering lessons learned on B2B startup growth. Get an email update when the next one is published:&lt;/em&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;h3 id=&quot;month-10&quot;&gt;Month 10&lt;/h3&gt;
&lt;p&gt;I published my &lt;a href=&quot;https://www.gkogan.co/blog/creating-new-business-model-cartoonists/&quot;&gt;first post&lt;/a&gt;—with help from &lt;a href=&quot;http://www.rwinslow.com/&quot;&gt;another friend&lt;/a&gt;—about a side project, and shared it on Hacker News on a Saturday morning in March of 2014.&lt;/p&gt;
&lt;p&gt;To my surprise, it received enough votes to get onto the front page and proceeded to receive ~7,500 unique visitors over the weekend. I thought to myself: If I can bring enough people to an article, some number of them may click through to the homepage, and a small percentage of those might become prospective clients.&lt;/p&gt;
&lt;p&gt;Although the majority of Hacker News readers are &lt;em&gt;not&lt;/em&gt; in a position to hire consultants and therefore would not &lt;em&gt;convert&lt;/em&gt; (ie, contact me about consulting), I only needed a handful of good prospects for this to be a success.&lt;/p&gt;
&lt;p&gt;That initial post had nothing to do with marketing, so I don’t think I got any consulting inquiries from it, but the volume of traffic was encouraging. I set out to write at least one new post per month.&lt;/p&gt;
&lt;p&gt;Getting to the front page of Hacker News is part substance and part chance, so I didn’t give up when my next two articles flopped, and kept writing.&lt;/p&gt;
&lt;h3 id=&quot;month-12&quot;&gt;Month 12&lt;/h3&gt;
&lt;p&gt;In June of 2014—a full year after I quit my job—I wrote about &lt;a href=&quot;https://www.gkogan.co/blog/stop-asking-me-to-sign-up/&quot;&gt;a lesson I learned&lt;/a&gt; from running an A/B experiment. It received 10,000 unique visits over 3 days. Two weeks later I published &lt;a href=&quot;https://www.gkogan.co/blog/ugly-ad-saved-business/&quot;&gt;another post&lt;/a&gt;; it received 15,000 unique visitors over 3 days.&lt;/p&gt;
&lt;p&gt;A small percentage of those readers clicked through to my consulting page, and a small percentage of &lt;em&gt;those&lt;/em&gt; contacted me for help. Within two weeks I was fully booked for the next six months. I broke through.&lt;/p&gt;
&lt;h3 id=&quot;lesson-learned-from-my-first-year-consulting&quot;&gt;Lesson Learned from My First Year Consulting&lt;/h3&gt;
&lt;p&gt;The strategy of blogging to fill the top of the funnel continues to be effective, for me &lt;em&gt;and&lt;/em&gt; my clients.&lt;/p&gt;
&lt;p&gt;But the conclusion isn’t that you should blog. The actionable lesson here—for companies, marketers, and consultants—is there’s no magic formula, so experiment faster until you find what works for you.&lt;/p&gt;
&lt;h2 id=&quot;how-i-get-consulting-clients-now&quot;&gt;How I Get Consulting Clients &lt;em&gt;Now&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Over the next four years I continued to learn how to get more consulting projects and my strategy has changed slightly. Here is what I do now to grow &lt;a href=&quot;https://www.gkogan.co/&quot;&gt;my consulting business&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Now that I get a steady stream of referrals, I focus on exceeding the objectives and expectations of every project I take on and then I make sure the person who made the introduction knows how well it went.&lt;/p&gt;
&lt;p&gt;This results in a win-win-win situation where all three parties involved have a positive outcome: The client gets a solution to their most pressing problem, the person who made the introduction gets credit for helping that company find a solution, and I get a great success story to tell.&lt;/p&gt;
&lt;p&gt;This creates a snowball effect: The next time the person who made an introduction meets someone with a similar challenge, they can refer me again and feel confident the problem will get solved. Meanwhile, the original client will call on me the next time they encounter a similar problem at their company or elsewhere.&lt;/p&gt;
&lt;p&gt;This approach results in fewer leads, but a significantly higher quality of each lead. That works perfectly for me because I’m not an agency and do not need more than a few projects at a time. Plus, because my clients are satisfied with my work they usually renew the contract (for an average of over 12 months!), so turnover is low and I only need one or two new clients per year to remain at capacity.&lt;/p&gt;
&lt;h2 id=&quot;things-i-dont-do&quot;&gt;Things I &lt;em&gt;Don’t&lt;/em&gt; Do&lt;/h2&gt;
&lt;p&gt;I find the following to be a poor use of time and effort for getting new consulting clients, especially now that I have a referral flywheel and because I look for quality of leads and not quantity. Your results may vary.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Networking Events&lt;/strong&gt; - All the networking events I’ve been to are full of people who are just starting out in something or are there to sell their professional services. Everyone else is too busy running their business to spend two hours exchanging business cards and listening to half-baked elevator pitches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Participate in marketing or consulting communities&lt;/strong&gt; - I don’t sell to consultants or marketers, so I know I’m not going to find clients in these communities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Partner with agencies or other consultants&lt;/strong&gt; - Whenever I used to chat with an agency owner, consultant, or freelancer, the topic of reciprocal referrals always comes up. It sounds great in theory—you refer clients to me and I refer clients to you. In practice, this never happens or I haven’t been satisfied with the quality of leads.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hound people&lt;/strong&gt; - best projects are when both sides are invested and project is solving a critical challenge for the company. I follow up at most 3 times because emails get buried in inboxes, but after that I assume there’s no interest or no critical (“hair-on-fire”) problem they need solving.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cold outreach&lt;/strong&gt; - There’s a very low likelihood of finding the right person at the right time, which means this will take a lot of effort to find a good lead let alone a client. Also, sending cold emails reeks of desperation and puts you in a weak position if you ever get to negotiate terms of the consulting engagement.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Advertising&lt;/strong&gt; - Why pay for leads when I don’t need to?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hand out business cards&lt;/strong&gt; - If I meet a prospective client or just someone I’d like to keep in touch with, I ask for their email or tell them mine. If one of us can’t be bothered to save an email address and follow up, then why pretend we care.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;getting-consulting-clients-from-writing&quot;&gt;Getting Consulting Clients from Writing&lt;/h2&gt;
&lt;p&gt;Writing is still helpful but less for attracting new consulting leads and more for building trust and credibility with people who were already referred to me. The usual scenario is that someone is referred to me, they find my site to learn more about me. They’re mainly looking to answer two questions:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Can this consultant help me solve my problem?&lt;/li&gt;
&lt;li&gt;Will I like working with this consultant?&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I write articles that are instructive and include examples from past projects so that a) I can help more people (more than I can help at any given time through consulting projects) and b) prospective clients see that I have experience with companies and challenges similar to theirs. So if their company and challenges are similar, then they know there’s a high likelihood that I’ll be able to solve their problem.&lt;/p&gt;
&lt;p&gt;To help prospective clients determine if they’ll like working with me, I project my working style and personality onto my site and my writing. For example, I value &lt;a href=&quot;https://www.gkogan.co/blog/clarity/&quot;&gt;clarity&lt;/a&gt; and &lt;a href=&quot;https://www.gkogan.co/blog/dont-design-emails/&quot;&gt;substance over fluff&lt;/a&gt;, so I keep my site simple and my writing to-the-point.&lt;/p&gt;
&lt;p&gt;I hope that reading about my process for getting new consulting clients helps you grow your own consulting business!&lt;/p&gt;
&lt;p&gt;If you have any questions send me an email or post them in the comments below.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16024507&quot;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;◼&lt;/p&gt;
&lt;p&gt;PS - Liked this article? I write one every month or so, covering lessons learned on B2B startup growth. Don't miss the next one:&lt;/p&gt;

</description>
<pubDate>Thu, 28 Dec 2017 20:06:41 +0000</pubDate>
<dc:creator>gk1</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gkogan.co/blog/how-i-learned-to-get-consulting-leads/</dc:identifier>
</item>
<item>
<title>Exmo Bitcoin exchange chief executive kidnapped in Kiev</title>
<link>http://www.bbc.com/news/business-42505261</link>
<guid isPermaLink="true" >http://www.bbc.com/news/business-42505261</guid>
<description>&lt;figure class=&quot;media-landscape no-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;A Bitcoin and gold nuggets&quot; src=&quot;https://ichef-1.bbci.co.uk/news/320/cpsprodpb/DA83/production/_99393955_bitcoin.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;A manager of the Exmo Bitcoin exchange has been kidnapped in Ukraine.&lt;/p&gt;&lt;p&gt;According to Russian and Ukrainian media reports Pavel Lerner, 40, was kidnapped while leaving his office in Kiev's Obolon district on 26 December. &lt;/p&gt;&lt;p&gt;The reports said he was dragged into a black Mercedes-Benz by men wearing balaclavas.&lt;/p&gt;&lt;p&gt;Police in Kiev confirmed to the BBC that a man had been kidnapped on the day in question, but would not confirm his identity.&lt;/p&gt;&lt;p&gt;A spokeswoman said that the matter was currently under investigation, and that more information would be made public later on. &lt;/p&gt;&lt;p&gt;Mr Lerner is a prominent Russian blockchain expert and the news of his kidnapping has stunned many in the international cryptocurrency community. &lt;/p&gt;&lt;p&gt;Exmo described him as an analytics manager.&lt;/p&gt;&lt;p&gt;Blockchain is the technology that underpins the digital currency Bitcoin.&lt;/p&gt;&lt;p&gt;Exmo Finance is registered with Companies House in the UK, but has its main operations in Ukraine.&lt;/p&gt;&lt;p&gt;According to its website, it has 94,955 active users trading cryptocurrencies.&lt;/p&gt;&lt;p&gt;Separately, Exmo said in a tweet that it been the target of a cyber attack on Thursday.&lt;/p&gt;&lt;p&gt;Exmo spokesman Anatoliy Larin told the BBC: &quot;We are doing everything possible to speed up the search for Pavel Lerner. &lt;/p&gt;&lt;p&gt;&quot;Despite the situation the exchange is working as usual. We also want to stress that nature of Pavel's job at Exmo doesn't assume access either to storages or any personal data of users. All users' funds are absolutely safe.&quot; &lt;/p&gt;
    </description>
<pubDate>Thu, 28 Dec 2017 16:27:04 +0000</pubDate>
<dc:creator>boto3</dc:creator>
<og:title>Bitcoin exchange chief kidnapped in Kiev</og:title>
<og:type>article</og:type>
<og:description>Reports say men in balaclavas kidnapped Pavel Lerner in the Ukrainian capital two days ago.</og:description>
<og:url>http://www.bbc.com/news/business-42505261</og:url>
<og:image>https://ichef-1.bbci.co.uk/news/1024/cpsprodpb/DA83/production/_99393955_bitcoin.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.bbc.com/news/business-42505261</dc:identifier>
</item>
<item>
<title>Effective Engineer – Notes</title>
<link>https://gist.github.com/rondy/af1dee1d28c02e9a225ae55da2674a6f</link>
<guid isPermaLink="true" >https://gist.github.com/rondy/af1dee1d28c02e9a225ae55da2674a6f</guid>
<description>
&lt;h3&gt;What's an Effective Engineer?&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;They are the people who get things done. Effective Engineers produce results.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Adopt the Right Mindsets&lt;/h2&gt;
&lt;h3&gt;Focus on High Leverage Activities&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Leverage = Impact Produced / Time Invested&lt;/li&gt;
&lt;li&gt;Use Leverage as Your Yardstick for Effectiveness&lt;/li&gt;
&lt;li&gt;80% of the impact comes from 20% of the work.&lt;/li&gt;
&lt;li&gt;Focus on high leverage and not just easy wins.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Optimize for Learning&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Change jobs if you have to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optimizing for learning is high leverage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adopt a growth mindset.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Talk to people. Become good at telling stories. It gets better with time.&lt;/li&gt;
&lt;li&gt;Those with a growth mindset believe that they can cultivate and grow their intelligence and skills through effort.&lt;/li&gt;
&lt;li&gt;Own your story.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invest in the rate of learning&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Learning compunds. Compounding leads to exponential growth. Earlier the compounding starts, the better.&lt;/li&gt;
&lt;li&gt;Working on unchallenging tasks is a huge opportunity cost. You missed out on compounded learning.&lt;/li&gt;
&lt;li&gt;Prioritize learning over profitability.&lt;/li&gt;
&lt;li&gt;Invest your time in activities with the highest learning rate.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seek Work Environments Conducive to Learning&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Fast Growth: Companies where #problems &amp;gt;&amp;gt; #resources. Opportunity to choose high impact work.&lt;/li&gt;
&lt;li&gt;Make sure you are working on high priority projects.&lt;/li&gt;
&lt;li&gt;Openness: Look for culture with curiosity, where everyone is encouraged to ask questions.&lt;/li&gt;
&lt;li&gt;Fast Paced.&lt;/li&gt;
&lt;li&gt;People smarter than you.&lt;/li&gt;
&lt;li&gt;Autonomy: Freedom to choose what to work on. Smaller comanies =&amp;gt; More autonomy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While on Job&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Make a daily habit of acquiring new skills.&lt;/li&gt;
&lt;li&gt;Read code written by brilliant engineers.&lt;/li&gt;
&lt;li&gt;Jump fearlessly into code you don't know.&lt;/li&gt;
&lt;li&gt;Always be learning. Invest in skills that are in high demand.&lt;/li&gt;
&lt;li&gt;Read Books. Attend Conferences.&lt;/li&gt;
&lt;li&gt;Build and maintain strong relationships.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Prioritize Regularly&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Opportunity cost of working on wrong ideas can set back growth by years.&lt;/li&gt;
&lt;li&gt;Prioritize tasks based on ROI&lt;/li&gt;
&lt;li&gt;Regular prioritization is high leverage activity.&lt;/li&gt;
&lt;li&gt;On TODO Lists
&lt;ul&gt;&lt;li&gt;Maintain a 'single' todo lists where all tasks are listed.&lt;/li&gt;
&lt;li&gt;Don't try to remember stuff. Brain is bad at remembering. It's rather good at processing.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ask yourself regularly: Is this the most important thing I should be working on ?&lt;/li&gt;
&lt;li&gt;Focus on what directly produces value.&lt;/li&gt;
&lt;li&gt;Learn to say no.&lt;/li&gt;
&lt;li&gt;Focus on the important and non-urgent.&lt;/li&gt;
&lt;li&gt;Find ways to get into flow. “A state of effortless concentration so deep that they lose their sense of time, of themselves, of their problems.”&lt;/li&gt;
&lt;li&gt;When possible, preserve larger blocks of focused time in your schedule.&lt;/li&gt;
&lt;li&gt;Limit the amount of Work in Progress.
&lt;ul&gt;&lt;li&gt;Cost of context switching is high.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Prioritizing is difficult.&lt;/li&gt;
&lt;li&gt;Prioritization is high leverage. It has huge impact on your ability to get right things done.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Invest in Iteration Speed&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Continuous Deployment is high leverage.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Will save a lot of time in manual deployment of code.They are the people who get things done. Effective Engineers produce results.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move Fast to Learn Fast&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Move fast and break things.&lt;/li&gt;
&lt;li&gt;Moving fast enables us to build more things and learn at faster rate.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invest in time saving tools.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you have to do something more than twwise, write a tool the third time.&lt;/li&gt;
&lt;li&gt;Tools are multipliers that allow your to scale your impact beyond the confines of a day.&lt;/li&gt;
&lt;li&gt;Faster tools get used more often.&lt;/li&gt;
&lt;li&gt;Faster tools can enable new workflows that previously weren't possible.&lt;/li&gt;
&lt;li&gt;Productivity skyrockets with tools.&lt;/li&gt;
&lt;li&gt;Time saving property of tools also scale with team adoption.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shorten your debugging and Validation Loops&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Extra time spent in optimizing debugging workflow can help you fix annoying bugs with less headache.&lt;/li&gt;
&lt;li&gt;Debugging is hard. It's time conuming. Upfront investments to shorten debugging loops are worth it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;High test coverage to reduce build and site breakages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast unit tests to encourage people to run them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast and incremental compiles and reloads to reduce development time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master you Programming Environment&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;One editor. One high level language. Shell. Keyboard &amp;gt; Mouse. Automate manual workflows. Use interactive shell. Make running specific tests easy. ** Faster you can iterate, faster you can learn.**&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Measure what you want to Improve&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Use metric to drive progress
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;If you can't measure it, you can't improve it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good metric.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Helps you focus on right things.&lt;/li&gt;
&lt;li&gt;Drives forward progress.&lt;/li&gt;
&lt;li&gt;Helps you guard against future regressions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance Ratcheting&lt;/strong&gt;: Any change should strictly improve the metric.&lt;/li&gt;
&lt;li&gt;Bad metric can lead to unwanted behavior.&lt;/li&gt;
&lt;li&gt;Examples:
&lt;ul&gt;&lt;li&gt;#hours worked &amp;lt; Productivity&lt;/li&gt;
&lt;li&gt;click through rates &amp;lt; long click through rates&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metric you choose influences your decisions and behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Look for metric that, when optimized, maximizes impact for the team.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actionable metric - Whose movement can be causally explained by team's effort.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Responsive metric - Updates quickly to give back feedback whether a given change was =ve or -ive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choosing a metric is high leverage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dedicate time to pick right metric.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Instrument everythong to understand what's going on.
&lt;ul&gt;&lt;li&gt;Measure anything, measure everything.&lt;/li&gt;
&lt;li&gt;Graphite, statsd. A single line of code lets you define a new counter or timer on the fly.&lt;/li&gt;
&lt;li&gt;Measuring goals you want to achieve is high leverage.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Internalize useful numbers
&lt;ul&gt;&lt;li&gt;Knowledge of useful numbers provide a valuable shortcut for knowing where to invest efforts to maximize gains.&lt;/li&gt;
&lt;li&gt;Need upfront work. Need not be accurate, ballpark idea suffices.&lt;/li&gt;
&lt;li&gt;Knowing useful numbers enables you to do back of the envelope calculations to quickly estimate the perrmance properties of a design without actually building it.&lt;/li&gt;
&lt;li&gt;Internalizing useful number help you spot anamalies. Be skeptical about data integrity.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;log data liberally.&lt;/li&gt;
&lt;li&gt;Build tools to iterate on data accuracy sooner.&lt;/li&gt;
&lt;li&gt;Examine data sooner.&lt;/li&gt;
&lt;li&gt;When numbers look off, dig in to it sooner.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;✔️ Measure your progress. Carefully choose your top-level metric. Instrument your system. Know your numbers. Prioritize data integrity.&lt;/p&gt;
&lt;h3&gt;Validate your ideas early and often.&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Not validating early leads to wasted efforts.&lt;/li&gt;
&lt;li&gt;Dont delay get feedback.&lt;/li&gt;
&lt;li&gt;Find low effort ways to validate work.&lt;/li&gt;
&lt;li&gt;Power of small batches. Helps you avoid making a big mistake by stopping the flow.&lt;/li&gt;
&lt;li&gt;Approach problem iteratively.&lt;/li&gt;
&lt;li&gt;No large implementations.&lt;/li&gt;
&lt;li&gt;Working solo? Be wary. Be extra vocal and get feedback.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Improve project estimation skills.&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Beware of mythical man month. Communication overhead is significant.&lt;/li&gt;
&lt;li&gt;Reduce risk early&lt;/li&gt;
&lt;li&gt;Rewrite projects - almost always fail.&lt;/li&gt;
&lt;li&gt;Additional hours hurt prooductivity. Causes burnout.&lt;/li&gt;
&lt;li&gt;Do the riskiest task first.&lt;/li&gt;
&lt;li&gt;Allow buffer room for the unknown.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Balance Quality with Pragmatism&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;High codequality. Code readability.&lt;/li&gt;
&lt;li&gt;Establish sustainable code review process.&lt;/li&gt;
&lt;li&gt;Code reviews help:
&lt;ul&gt;&lt;li&gt;Catch bugs and design problems early.&lt;/li&gt;
&lt;li&gt;Sharing working knowledge of the codebase.&lt;/li&gt;
&lt;li&gt;Increases long term agility. Easier to unerstand, quicker to modify.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Manage complexity through Abstraction&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Example: MapReduce&lt;/li&gt;
&lt;li&gt;Right abstractions make huge difference.&lt;/li&gt;
&lt;li&gt;“Pick the right ones, and programming will flow naturally from design; modules will have small and simple interfaces; and new functionality will more likely fit in without extensive reorganization,”&lt;/li&gt;
&lt;li&gt;“Pick the wrong ones, and programming will be a series of nasty surprises: interfaces will become baroque and clumsy as they are forced to accommodate unanticipated interactions, and even the simplest of changes will be hard to make.”&lt;/li&gt;
&lt;li&gt;The right abstraction can increase engineering productivity by an order of magnitude.&lt;/li&gt;
&lt;li&gt;Simple abstractions avoid interweaving multiple concepts, so that you can reason about them independently rather than being forced to consider them together.&lt;/li&gt;
&lt;li&gt;Designing good abstractions take work.&lt;/li&gt;
&lt;li&gt;An abstraction's usage and popularity provides a reasonable proxy for it's quality.&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Automate Testing&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Unit test cases and some integration testing provide a scalable way of managing growing codebase.&lt;/li&gt;
&lt;li&gt;A suite of extensive and automated tests can reduce overall error rates by validating the quality and by safeguardingagainst regressions.&lt;/li&gt;
&lt;li&gt;Tests also allow engineers to make changes, especially large refactorings, with significantly higher confidence.&lt;/li&gt;
&lt;li&gt;Despite its benefits, it can be difficult to foster a culture of automated testing.&lt;/li&gt;
&lt;li&gt;Focus on high leverage tests.&lt;/li&gt;
&lt;li&gt;Writing more tests, creating a virtuous feedback cycle and saving more development time.&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Repay Techincal Debt&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Technical debt refers to all the deferred work that’s necessary to improve the health and quality of the codebase and that would slow us down if left unaddressed.&lt;/li&gt;
&lt;li&gt;Accumulating technical debt is fine as far as it is repaid within time.&lt;/li&gt;
&lt;li&gt;Refactor often.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Reduce Operational Complexity&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Keep no. of technologies low. Don’t sway towards shiny new technologies.&lt;/li&gt;
&lt;li&gt;Every additional technology you add is is guaranteed to go worong eventually. Will need your time.&lt;/li&gt;
&lt;li&gt;Do the simple thing first&lt;/li&gt;
&lt;li&gt;Embrace operational simplicity.&lt;/li&gt;
&lt;li&gt;The first solution that comes to mind is generally complex. Don't stop. Keep peeling off the layers of onion.&lt;/li&gt;
&lt;li&gt;Simplify the architecture to reduce their operational burden.&lt;/li&gt;
&lt;li&gt;“What’s the simplest solution that can get the job done while also reducing our future operational burden?”&lt;/li&gt;
&lt;li&gt;Discipline to focus on simplicity is high leverage.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Fail Fast&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Fail immediately and visibly.&lt;/li&gt;
&lt;li&gt;doesn’t necessarily mean crashing your programs for users&lt;/li&gt;
&lt;li&gt;fail-fast to surface issues immediately&lt;/li&gt;
&lt;li&gt;Failing fast is high leverage as it saves devugging time.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Relentlessly Automate&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Automating mechanics is good.&lt;/li&gt;
&lt;li&gt;Automating decision making - no.&lt;/li&gt;
&lt;li&gt;Hone Your Ability to Respond and Recover Quickly
&lt;ul&gt;&lt;li&gt;Leverage ( Recovering quickly ) &amp;gt; Leverage ( Preventing Failures )&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;“script for success,” practice failure scenarios, and work on our ability to recover quickly.&lt;/li&gt;
&lt;li&gt;Make batch process idempotent&lt;/li&gt;
&lt;li&gt;Make processes retrable i.e. not leaving any global state.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Invest in your team's Growth&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Invest in onboarding.&lt;/li&gt;
&lt;li&gt;The higher you climb up the engineering ladder, the more your effectiveness will be measured not by your individual contributions but by your impact on the people around you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&quot;You’re a staff engineer if you’re making a whole team better than it would be otherwise. You’re a principal engineer if you’re making the whole company better than it would be otherwise. And you’re distinguished if you’re improving the industry.”&lt;/strong&gt; ￼- Focus primarily on making everyone around you succeed.&lt;/li&gt;
&lt;li&gt;Your career depends on your team's success.&lt;/li&gt;
&lt;li&gt;Make hiring everyone's responsibility.&lt;/li&gt;
&lt;li&gt;Shared ownership of code.
&lt;ul&gt;&lt;li&gt;Keep bus factor more than one.&lt;/li&gt;
&lt;li&gt;Shared ownershop removes isolated silos of information.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Build collective wisdom through post mortems.&lt;/li&gt;
&lt;li&gt;Invest in automated testing.
&lt;ul&gt;&lt;li&gt;Automated testcases lead to higher confidence when refactoring.&lt;/li&gt;
&lt;li&gt;Write test cases when the code is fresh in mind.&lt;/li&gt;
&lt;li&gt;Don’t be dogmatic about 100% code coverage.&lt;/li&gt;
&lt;li&gt;Value of tests increases over time and cost to write goes down.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hire the best.&lt;/li&gt;
&lt;li&gt;Surround yourself with great advisors&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;☀️ &lt;strong&gt;“Leverage is the lens through which effective engineers view their activities. ”&lt;/strong&gt; ☀️&lt;/p&gt;
&lt;h3&gt;10 Books to read:&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Peopleware Productive projects and Teams. Amazon. My Summary.&lt;/li&gt;
&lt;li&gt;Team Geek: A Software Developer’s Guide to Working Well with Others. (Debugging Teams) Amazon. My Summary.&lt;/li&gt;
&lt;li&gt;High Output Management&lt;/li&gt;
&lt;li&gt;Getting Things Done: The Art of Stress-Free Productivity&lt;/li&gt;
&lt;li&gt;The 4-Hour Workweek: Escape 9-5, Live Anywhere, and Join the New Rich&lt;/li&gt;
&lt;li&gt;The 7 Habits of Highly Effective People: Powerful Lessons in Personal Change&lt;/li&gt;
&lt;li&gt;Conscious Business: How to Build Value Through Values&lt;/li&gt;
&lt;li&gt;Your Brain at Work&lt;/li&gt;
&lt;li&gt;Flow: The Psychology of Optimal Experience&lt;/li&gt;
&lt;li&gt;Succeed: How We Can Reach Our Goals&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Blogs:&lt;/h3&gt;
&lt;p&gt;“Recommended Blogs To Follow&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.theeffectiveengineer.com/&quot; rel=&quot;nofollow&quot;&gt;http://www.theeffectiveengineer.com/&lt;/a&gt;. The Effective Engineer is my personal blog, where I write about engineering habits, productivity tips, leadership, and culture. &lt;a href=&quot;http://www.kalzumeus.com/&quot; rel=&quot;nofollow&quot;&gt;http://www.kalzumeus.com/&lt;/a&gt;. Patrick McKenzie runs his own software business and has written many excellent long-form articles on career advice, consulting, SEO, and software sales. &lt;a href=&quot;http://katemats.com/&quot; rel=&quot;nofollow&quot;&gt;http://katemats.com/&lt;/a&gt;. Kate Matsudaira, who has worked at large companies like Microsoft and Amazon as well as at startups, shares advice about tech, leadership, and life on her blog.” “&lt;a href=&quot;http://randsinrepose.com/&quot; rel=&quot;nofollow&quot;&gt;http://randsinrepose.com/&lt;/a&gt;. Michael Lopp has worked for many years in leadership positions at Netscape, Apple, Palantir, and Pinterest, and writes about tech life and engineering management. &lt;a href=&quot;http://softwareleadweekly.com/&quot; rel=&quot;nofollow&quot;&gt;http://softwareleadweekly.com/&lt;/a&gt;. Oren Ellenbogen curates a high-quality weekly newsletter on engineering leadership and culture. &lt;a href=&quot;http://calnewport.com/&quot; rel=&quot;nofollow&quot;&gt;http://calnewport.com/&lt;/a&gt;. Cal Newport, an assistant professor of computer science at Georgetown, focuses on evidence-based advice for building a successful and fulfilling life. &lt;a href=&quot;http://www.joelonsoftware.com/&quot; rel=&quot;nofollow&quot;&gt;http://www.joelonsoftware.com/&lt;/a&gt;. Joel Spolsky, the co-founder of Stack Exchange, provides all sorts of programming pearls of wisdom on his blog. &lt;a href=&quot;http://martinfowler.com/&quot; rel=&quot;nofollow&quot;&gt;http://martinfowler.com/&lt;/a&gt;. Martin Fowler, author of the book Refactoring, writes about how to maximize the productivity of software teams and provides detailed write-ups of common programming patterns. &lt;a href=&quot;http://pgbovine.net/&quot; rel=&quot;nofollow&quot;&gt;http://pgbovine.net/&lt;/a&gt;. Philip Guo, a computer science professor, has written extensively and openly about his graduate school and work experiences.”&lt;/p&gt;
</description>
<pubDate>Thu, 28 Dec 2017 16:21:44 +0000</pubDate>
<dc:creator>signa11</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/6609?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Effective_Engineer.md</og:title>
<og:url>https://gist.github.com/rondy/af1dee1d28c02e9a225ae55da2674a6f</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gist.github.com/rondy/af1dee1d28c02e9a225ae55da2674a6f</dc:identifier>
</item>
<item>
<title>The lucrative business of America’s opioid crisis</title>
<link>https://www.nytimes.com/interactive/2017/12/27/business/addiction-inc.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/interactive/2017/12/27/business/addiction-inc.html</guid>
<description>&lt;p class=&quot;paragraph&quot;&gt;&lt;strong&gt;America’s Addiction Crisis&lt;/strong&gt; ranks among the great epidemics of our age. Millions of people have fallen victim to painkiller abuse, alcoholism, the rise of meth and the revival of heroin. Sorrowful tales of death at a young age and of families torn apart have become a defining feature of the early 21st century American experience.&lt;/p&gt;
&lt;p class=&quot;paragraph&quot;&gt;In crisis, there is opportunity — and entrepreneurs have swept in.&lt;/p&gt;
&lt;p class=&quot;paragraph&quot;&gt;The industry of addiction treatment is haphazardly regulated, poorly understood and expanding at a rapid clip, bringing in $35 billion a year. Remarkably, this business is often conducted behind the closed doors of suburban homes scattered across the nation.&lt;/p&gt;
&lt;p class=&quot;paragraph&quot;&gt;With this report, we open those doors.&lt;/p&gt;
&lt;p class=&quot;paragraph&quot;&gt;Drug treatment is a trade dominated by former addicts, who have transformed their personal experience of getting clean into the business of helping others. It is a field that mints millionaires whose companies drug-test urine. It has spawned experts in the art of online marketing, who pursue addicts and the revenue they (and their insurers) represent.&lt;/p&gt;
&lt;p class=&quot;paragraph&quot;&gt;Here are their stories.&lt;/p&gt;
</description>
<pubDate>Thu, 28 Dec 2017 14:47:04 +0000</pubDate>
<dc:creator>dpflan</dc:creator>
<og:url>https://www.nytimes.com/interactive/2017/12/27/business/addiction-inc.html</og:url>
<og:type>article</og:type>
<og:title>Addiction Inc.</og:title>
<og:image>https://static01.nyt.com/images/2017/12/18/business/addiction/addiction-facebookJumbo-v3.jpg</og:image>
<og:description>Marketing wizards and urine-testing millionaires: Inside the lucrative business of America’s opioid crisis.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/interactive/2017/12/27/business/addiction-inc.html</dc:identifier>
</item>
<item>
<title>Building a Distributed Log from Scratch: Data Replication</title>
<link>https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-2-data-replication/</link>
<guid isPermaLink="true" >https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-2-data-replication/</guid>
<description>&lt;p&gt;In &lt;a href=&quot;https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-1-storage-mechanics/&quot;&gt;part one&lt;/a&gt; of this series we introduced the idea of a message log, touched on why it’s useful, and discussed the storage mechanics behind it. In part two, we discuss data replication.&lt;/p&gt;
&lt;p&gt;We have our log. We know how to write data to it and read it back as well as how data is persisted. The caveat to this is, although we have a durable log, it’s a single point of failure (SPOF). If the machine where the log data is stored dies, we’re SOL. Recall that one of our three priorities with this system is high availability, so the question is how do we achieve high availability and fault tolerance?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/spof.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3110 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/spof.png&quot; alt=&quot;&quot; width=&quot;1591&quot; height=&quot;860&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/spof.png 1591w, https://bravenewgeek.com/wp-content/uploads/2017/12/spof-300x162.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/spof-768x415.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/spof-1024x554.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With high availability, we’re specifically talking about ensuring continuity of reads and writes. A server failing shouldn’t preclude either of these, or at least unavailability should be kept to an absolute minimum and without the need for operator intervention. Ensuring this continuity should be fairly obvious: we eliminate the SPOF. To do that, we replicate the data. Replication can also be a means for increasing scalability, but for now we’re only looking at this through the lens of high availability.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/replicated_log.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3112 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/replicated_log.png&quot; alt=&quot;&quot; width=&quot;1591&quot; height=&quot;860&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/replicated_log.png 1591w, https://bravenewgeek.com/wp-content/uploads/2017/12/replicated_log-300x162.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/replicated_log-768x415.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/replicated_log-1024x554.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are a number of ways we can go about replicating the log data. Broadly speaking, we can group the techniques into two different categories: gossip/multicast protocols and consensus protocols. The former includes things like epidemic broadcast trees, bimodal multicast, SWIM, HyParView, and NeEM. These tend to be eventually consistent and/or stochastic. The latter, which I’ve described in more detail &lt;a href=&quot;https://bravenewgeek.com/understanding-consensus/&quot;&gt;here&lt;/a&gt;, includes 2PC/3PC, Paxos, Raft, Zab, and chain replication. These tend to favor strong consistency over availability.&lt;/p&gt;
&lt;p&gt;So there are a lot of ways we can replicate data, but some of these solutions are better suited than others to this particular problem. Since ordering is an important property of a log, consistency becomes important for a &lt;em&gt;replicated&lt;/em&gt; log. If we read from one replica and then read from another, it’s important those views of the log don’t conflict with each other. This more or less rules out the stochastic and eventually consistent options, leaving us with consensus-based replication.&lt;/p&gt;
&lt;p&gt;There are essentially two components to consensus-based replication schemes: 1) designate a leader who is responsible for sequencing writes and 2) replicate the writes to the rest of the cluster.&lt;/p&gt;
&lt;p&gt;Designating a leader can be as simple as a configuration setting, but the purpose of replication is fault tolerance. If our configured leader crashes, we’re no longer able to accept writes. This means we need the leader to be dynamic. It turns out leader election is a well-understood problem, so we’ll get to this in a bit.&lt;/p&gt;
&lt;p&gt;Once a leader is established, it needs to replicate the data to followers. In general, this can be done by either waiting for all replicas or waiting for only a quorum (majority) of replicas. There are pros and cons to both approaches.&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;All Replicas&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Tolerates &lt;em&gt;f&lt;/em&gt; failures with &lt;em&gt;f+1&lt;/em&gt; replicas&lt;/td&gt;
&lt;td&gt;Latency pegged to slowest replica&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Quorum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Hides delay from a slow replica&lt;/td&gt;
&lt;td&gt;Tolerates &lt;em&gt;f&lt;/em&gt; failures with &lt;em&gt;2f+1&lt;/em&gt; replicas&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Waiting on all replicas means we can make progress as long as at least one replica is available. With quorum, tolerating the same amount of failures requires more replicas because we need a majority to make progress. The trade-off is that the quorum hides any delays from a slow replica. Kafka is an example of a system which uses all replicas (with some conditions on this which we will see later), and NATS Streaming is one that uses a quorum. Let’s take a look at both in more detail.&lt;/p&gt;
&lt;h3&gt;Replication in Kafka&lt;/h3&gt;
&lt;p&gt;In Kafka, a leader is selected (we’ll touch on this in a moment). This leader maintains an in-sync replica set (ISR) consisting of all the replicas which are fully caught up with the leader. This is every replica, by definition, at the beginning. All reads and writes go through the leader. The leader writes messages to a write-ahead log (WAL). Messages written to the WAL are considered uncommitted or “dirty” initially. The leader only commits a message once all replicas in the ISR have written it to their own WAL. The leader also maintains a high-water mark (HW) which is the last committed message in the WAL. This gets piggybacked on the replica fetch responses from which replicas periodically checkpoint to disk for recovery purposes. The piggybacked HW then allows replicas to know when to commit.&lt;/p&gt;
&lt;p&gt;Only committed messages are exposed to consumers. However, producers can configure how they want to receive acknowledgements on writes. It can wait until the message is committed on the leader (and thus replicated to the ISR), wait for the message to only be written (but not committed) to the leader’s WAL, or not wait at all. This all depends on what trade-offs the producer wants to make between latency and durability.&lt;/p&gt;
&lt;p&gt;The graphic below shows how this replication process works for a cluster of three brokers: &lt;em&gt;b1&lt;/em&gt;, &lt;em&gt;b2&lt;/em&gt;, and &lt;em&gt;b3&lt;/em&gt;. Followers are effectively special consumers of the leader’s log.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_replication.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3141 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_replication.png&quot; alt=&quot;&quot; width=&quot;1430&quot; height=&quot;889&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_replication.png 1430w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_replication-300x187.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_replication-768x477.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_replication-1024x637.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now let’s look at a few failure modes and how Kafka handles them.&lt;/p&gt;
&lt;h4&gt;Leader Fails&lt;/h4&gt;
&lt;p&gt;Kafka relies on &lt;a href=&quot;https://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt; for certain cluster coordination tasks, such as leader election, though this is not actually how the log leader is elected. A Kafka cluster has a single controller broker whose election is handled by ZooKeeper. This controller is responsible for performing administrative tasks on the cluster. One of these tasks is selecting a new log leader (actually &lt;em&gt;partition&lt;/em&gt; leader, but this will be described later in the series) from the ISR when the current leader dies. ZooKeeper is also used to detect these broker failures and signal them to the controller.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failure.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3147 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failure.png&quot; alt=&quot;&quot; width=&quot;1663&quot; height=&quot;947&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failure.png 1663w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failure-300x171.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failure-768x437.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failure-1024x583.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thus, when the leader crashes, the cluster controller is notified by ZooKeeper and it selects a new leader from the ISR and announces this to the followers. This gives us automatic failover of the leader. All committed messages up to the HW are preserved and uncommitted messages may be lost during the failover. In this case, &lt;em&gt;b1&lt;/em&gt; fails and &lt;em&gt;b2&lt;/em&gt; steps up as leader.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failover.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3145 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failover.png&quot; alt=&quot;&quot; width=&quot;1663&quot; height=&quot;743&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failover.png 1663w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failover-300x134.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failover-768x343.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_leader_failover-1024x458.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Follower Fails&lt;/h4&gt;
&lt;p&gt;The leader tracks information on how “caught up” each replica is. Before Kafka 0.9, this included both how many messages a replica was behind, &lt;em&gt;replica.lag.max.messages&lt;/em&gt;, and the amount of time since the replica last fetched messages from the leader, &lt;em&gt;replica.lag.time.max.ms&lt;/em&gt;. Since 0.9, &lt;em&gt;replica.lag.max.messages&lt;/em&gt; was removed and &lt;em&gt;replica.lag.time.max.ms&lt;/em&gt; now refers to both the time since the last fetch request &lt;em&gt;and &lt;/em&gt;the amount of time since the replica last caught up.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3149 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure.png&quot; alt=&quot;&quot; width=&quot;1430&quot; height=&quot;889&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure.png 1430w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure-300x187.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure-768x477.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure-1024x637.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thus, when a follower fails (or stops fetching messages for whatever reason), the leader will detect this based on &lt;em&gt;replica.lag.time.max.ms&lt;/em&gt;. After that time expires, the leader will consider the replica out of sync and remove it from the ISR. In this scenario, the cluster enters an “under-replicated” state since the ISR has shrunk. Specifically, &lt;em&gt;b2&lt;/em&gt; fails and is removed from the ISR.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure_removed.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3150 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure_removed.png&quot; alt=&quot;&quot; width=&quot;1430&quot; height=&quot;687&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure_removed.png 1430w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure_removed-300x144.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure_removed-768x369.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_failure_removed-1024x492.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Follower Temporarily Partitioned&lt;/h4&gt;
&lt;p&gt;The case of a follower being temporarily partitioned, e.g. due to a transient network failure, is handled in a similar fashion to the follower itself failing. These two failure modes can really be combined since the latter is just the former with an arbitrarily long partition, i.e. it’s the difference between crash-stop and crash-recovery models.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3152 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition.png&quot; alt=&quot;&quot; width=&quot;1430&quot; height=&quot;889&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition.png 1430w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition-300x187.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition-768x477.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition-1024x637.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this case, &lt;em&gt;b3&lt;/em&gt; is partitioned from the leader. As before, &lt;em&gt;replica.lag.time.max.ms &lt;/em&gt;acts as our failure detector and causes &lt;em&gt;b3&lt;/em&gt; to be removed from the ISR. We enter an under-replicated state and the remaining two brokers continue committing messages 4 and 5. Accordingly, the HW is updated to 5 on these brokers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_removed.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3153 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_removed.png&quot; alt=&quot;&quot; width=&quot;1461&quot; height=&quot;889&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_removed.png 1461w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_removed-300x183.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_removed-768x467.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_removed-1024x623.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When the partition heals, &lt;em&gt;b3&lt;/em&gt; continues reading from the leader and catching up. Once it is fully caught up with the leader, it’s added back into the ISR and the cluster resumes its fully replicated state.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_healed.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3155 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_healed.png&quot; alt=&quot;&quot; width=&quot;1472&quot; height=&quot;889&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_healed.png 1472w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_healed-300x181.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_healed-768x464.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/kafka_follower_partition_healed-1024x618.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can generalize this to the crash-recovery model. For example, instead of a network partition, the follower could crash and be restarted later. When the failed replica is restarted, it recovers the HW from disk and truncates its log up to the HW. This preserves the invariant that messages after the HW are not guaranteed to be committed. At this point, it can begin catching up from the leader and will end up with a log consistent with the leader’s once fully caught up.&lt;/p&gt;
&lt;h3&gt;Replication in NATS Streaming&lt;/h3&gt;
&lt;p&gt;NATS Streaming relies on the &lt;a href=&quot;https://raft.github.io/&quot;&gt;Raft consensus algorithm&lt;/a&gt; for leader election and data replication. This sometimes comes as a surprise to some as Raft is largely seen as a protocol for replicated state machines. We’ll try to understand why Raft was chosen for this particular problem in the following sections. We won’t dive deep into Raft itself beyond what is needed for the purposes of this discussion.&lt;/p&gt;
&lt;p&gt;While a log is a state machine, it’s a very simple one: a series of appends. Raft is frequently used as the replication mechanism for key-value stores which have a clearer notion of “state machine.” For example, with a key-value store, we have &lt;em&gt;set&lt;/em&gt; and &lt;em&gt;delete&lt;/em&gt; operations. If we set &lt;em&gt;foo = bar&lt;/em&gt; and then later set &lt;em&gt;foo = baz&lt;/em&gt;, the state gets rolled up. That is, we don’t necessarily care about the provenance of the key, only its current state.&lt;/p&gt;
&lt;p&gt;However, NATS Streaming differs from Kafka in a number of key ways. One of these differences is that NATS Streaming attempts to provide a sort of unified API for streaming and queueing semantics not too dissimilar from &lt;a href=&quot;https://pulsar.apache.org/&quot;&gt;Apache Pulsar&lt;/a&gt;. This means, while it has a notion of a log, it also has subscriptions on that log. Unlike Kafka, NATS Streaming tracks these subscriptions and metadata associated with them, such as where a client is in the log. These have definite “state machines” affiliated with them, like creating and deleting subscriptions, positions in the log, clients joining or leaving queue groups, and message-redelivery information.&lt;/p&gt;
&lt;p&gt;Currently, NATS Streaming uses multiple Raft groups for replication. There is a single metadata Raft group used for replicating client state and there is a separate Raft group per topic which replicates messages and subscriptions.&lt;/p&gt;
&lt;p&gt;Raft solves both the problems of leader election and data replication in a single protocol. The &lt;a href=&quot;http://thesecretlivesofdata.com/raft/&quot;&gt;Secret Lives of Data&lt;/a&gt; provides an excellent interactive illustration of how this works. As you step through that illustration, you’ll notice that the algorithm is actually quite similar to the Kafka replication protocol we walked through earlier. This is because although Raft is used to implement replicated state machines, it actually is a replicated WAL, which is exactly what Kafka is. One benefit of using Raft is we no longer have the need for ZooKeeper or some other coordination service.&lt;/p&gt;
&lt;p&gt;Raft handles electing a leader. Heartbeats are used to maintain leadership. Writes flow through the leader to the followers. The leader appends writes to its WAL and they are subsequently piggybacked onto the heartbeats which get sent to the followers using &lt;em&gt;AppendEntries&lt;/em&gt; messages. At this point, the followers append the write to their own WALs, assuming they don’t detect a gap, and send a response back to the leader. The leader commits the write once it receives a successful response from a quorum of followers.&lt;/p&gt;
&lt;p&gt;Similar to Kafka, each replica in Raft maintains a high-water mark of sorts called the &lt;em&gt;commit index&lt;/em&gt;, which is the index of the highest log entry known to be committed. This is piggybacked on the &lt;em&gt;AppendEntries &lt;/em&gt;messages which the followers use to know when to commit entries in their WALs. If a follower detects that it missed an entry (i.e. there was a gap in the log), it rejects the &lt;em&gt;AppendEntries&lt;/em&gt; and informs the leader to rewind the replication. The &lt;a href=&quot;https://raft.github.io/raft.pdf&quot;&gt;Raft paper&lt;/a&gt; details how it ensures correctness, even in the face of many failure modes such as the ones described earlier.&lt;/p&gt;
&lt;p&gt;Conceptually, there are two logs: the Raft log and the NATS Streaming message log. The Raft log handles replicating messages and, once committed, they are appended to the NATS Streaming log. If it seems like there’s some redundancy here, that’s because there is, which we’ll get to soon. However, keep in mind we’re not just replicating the message log, but also the state machines associated with the log and any clients.&lt;/p&gt;
&lt;p&gt;There are a few challenges with this replication technique, two of which we will talk about. The first is scaling Raft. With a single topic, there is one Raft group, which means one node is elected leader and it heartbeats messages to followers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/raft_single_topic.png&quot;&gt;&lt;img class=&quot; wp-image-3165 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/raft_single_topic.png&quot; alt=&quot;&quot; width=&quot;420&quot; height=&quot;270&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/raft_single_topic.png 706w, https://bravenewgeek.com/wp-content/uploads/2017/12/raft_single_topic-300x193.png 300w&quot; sizes=&quot;(max-width: 420px) 100vw, 420px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the number of topics increases, so do the number of Raft groups, each with their own leaders and heartbeats. Unless we constrain the Raft group participants or the number of topics, this creates an explosion of network traffic between nodes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/raft_many_topics.png&quot;&gt;&lt;img class=&quot; wp-image-3166 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/raft_many_topics.png&quot; alt=&quot;&quot; width=&quot;420&quot; height=&quot;301&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are a couple ways we can go about addressing this. One option is to run a fixed number of Raft groups and use a consistent hash to map a topic to a group. This can work well if we know roughly the number of topics beforehand since we can size the number of Raft groups accordingly. If you expect only 10 topics, running 10 Raft groups is probably reasonable. But if you expect 10,000 topics, you probably don’t want 10,000 Raft groups. If hashing is consistent, it would be feasible to dynamically add or remove Raft groups at runtime, but it would still require repartitioning a portion of topics which can be complicated.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/raft_fixed_groups.png&quot;&gt;&lt;img class=&quot; wp-image-3167 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/raft_fixed_groups.png&quot; alt=&quot;&quot; width=&quot;420&quot; height=&quot;258&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another option is to run an entire node’s worth of topics as a single group using a layer on top of Raft. This is what CockroachDB does to scale Raft in proportion to the number of key ranges using a layer on top of Raft they call &lt;a href=&quot;https://www.cockroachlabs.com/blog/scaling-raft/&quot;&gt;MultiRaft&lt;/a&gt;. This requires some cooperation from the Raft implementation, so it’s a bit more involved than the partitioning technique but eschews the repartitioning problem and redundant heartbeating.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/multiraft.png&quot;&gt;&lt;img class=&quot; wp-image-3168 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/multiraft.png&quot; alt=&quot;&quot; width=&quot;420&quot; height=&quot;284&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The second challenge with using Raft for this problem is the issue of “dual writes.” As mentioned before, there are really two logs: the Raft log and the NATS Streaming message log, which we’ll call the “store.” When a message is published, the leader writes it to its Raft log and it goes through the Raft replication process.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/wal.png&quot;&gt;&lt;img class=&quot; wp-image-3169 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/wal.png&quot; alt=&quot;&quot; width=&quot;375&quot; height=&quot;318&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once the message is committed in Raft, it’s written to the NATS Streaming log and the message is now visible to consumers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/wal_committed.png&quot;&gt;&lt;img class=&quot; wp-image-3170 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/wal_committed.png&quot; alt=&quot;&quot; width=&quot;375&quot; height=&quot;256&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note, however, that not only messages are written to the Raft log. We also have subscriptions and cluster topology changes, for instance. These other items are not written to the NATS Streaming log but handled in other ways on commit. That said, messages tend to occur in much greater volume than these other entries.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/dual_writes.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3171 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/dual_writes.png&quot; alt=&quot;&quot; width=&quot;1844&quot; height=&quot;679&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/dual_writes.png 1844w, https://bravenewgeek.com/wp-content/uploads/2017/12/dual_writes-300x110.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/dual_writes-768x283.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/dual_writes-1024x377.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Messages end up getting stored redundantly, once in the Raft log and once in the NATS Streaming log. We can address this problem if we think about our logs a bit differently. If you recall from &lt;a href=&quot;https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-1-storage-mechanics/&quot;&gt;part one&lt;/a&gt;, our log storage consists of two parts: the log segment and the log index. The segment stores the actual log data, and the index stores a mapping from log offset to position in the segment.&lt;/p&gt;
&lt;p&gt;Along these lines, we can think of the Raft log index as a “physical offset” and the NATS Streaming log index as a “logical offset.” Instead of maintaining two logs, we treat the Raft log as our message write-ahead log and treat the NATS Streaming log as an index into that WAL. Particularly, messages are written to the Raft log as usual. Once committed, we write an index entry for the message offset that points back into the log. As before, we use the index to do lookups into the log and can then read sequentially from the log itself.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/raft_index.png&quot;&gt;&lt;img class=&quot;size-full wp-image-3172 aligncenter&quot; src=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/raft_index.png&quot; alt=&quot;&quot; width=&quot;1846&quot; height=&quot;586&quot; srcset=&quot;https://bravenewgeek.com/wp-content/uploads/2017/12/raft_index.png 1846w, https://bravenewgeek.com/wp-content/uploads/2017/12/raft_index-300x95.png 300w, https://bravenewgeek.com/wp-content/uploads/2017/12/raft_index-768x244.png 768w, https://bravenewgeek.com/wp-content/uploads/2017/12/raft_index-1024x325.png 1024w&quot; sizes=&quot;(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Remaining Questions&lt;/h3&gt;
&lt;p&gt;We’ve answered the questions of how to ensure continuity of reads and writes, how to replicate data, and how to ensure replicas are consistent. The remaining two questions pertaining to replication are how do we keep things fast and how do we ensure data is durable?&lt;/p&gt;
&lt;p&gt;There are several things we can do with respect to performance. The first is we can configure publisher acks depending on our application’s requirements. Specifically, we have three options. The first is the broker acks on commit. This is slow but safe as it guarantees the data is replicated. The second is the broker acks on appending to its local log. This is fast but unsafe since it doesn’t wait on any replica roundtrips but, by that very fact, means that the data is not replicated. If the leader crashes, the message could be lost. Lastly, the publisher can just not wait for an ack at all. This is the fastest but least safe option for obvious reasons. Tuning this all depends on what requirements and trade-offs make sense for your application.&lt;/p&gt;
&lt;p&gt;The second thing we do is don’t explicitly &lt;em&gt;fsync&lt;/em&gt; writes on the broker and instead rely on replication for durability. Both Kafka and NATS Streaming (when clustered) do this. With &lt;em&gt;fsync&lt;/em&gt; enabled (in Kafka, this is configured with &lt;em&gt;flush.messages &lt;/em&gt;and/or &lt;em&gt;flush.ms&lt;/em&gt; and in NATS Streaming, with &lt;em&gt;file_sync&lt;/em&gt;), every message that gets published results in a sync to disk. This ends up being very expensive. The thought here is if we are replicating to enough nodes, the replication itself is sufficient for HA of data since the likelihood of more than a quorum of nodes failing is low, especially if we are using rack-aware clustering. Note that data is still periodically flushed in the background by the kernel.&lt;/p&gt;
&lt;p&gt;Batching aggressively is also a key part of ensuring good performance. Kafka supports end-to-end batching from the producer all the way to the consumer. NATS Streaming does not currently support batching at the API level, but it uses aggressive batching when replicating and persisting messages. In my experience, this makes about an order-of-magnitude improvement in throughput.&lt;/p&gt;
&lt;p&gt;Finally, as already discussed earlier in the series, keeping disk access sequential and maximizing zero-copy reads makes a big difference as well.&lt;/p&gt;
&lt;p&gt;There are a few things worth noting with respect to durability. Quorum is what guarantees durability of data. This comes “for free” with Raft due to the nature of that protocol. In Kafka, we need to do a bit of configuring to ensure this. Namely, we need to configure &lt;em&gt;min.insync.replicas&lt;/em&gt; on the broker and &lt;em&gt;acks &lt;/em&gt;on the producer. The former controls the minimum number of replicas that must acknowledge a write for it to be considered successful when a producer sets &lt;em&gt;acks&lt;/em&gt; to “all.” The latter controls the number of acknowledgments the producer requires the leader to have received before considering a request complete. For example, with a topic that has a replication factor of three, &lt;em&gt;min.insync.replicas &lt;/em&gt;needs to be set to two and &lt;em&gt;acks&lt;/em&gt; set to “all.” This will, in effect, require a quorum of two replicas to process writes.&lt;/p&gt;
&lt;p&gt;Another caveat with Kafka is unclean leader elections. That is, if all replicas become unavailable, there are two options: choose the first replica to come back to life (not necessarily in the ISR) and elect this replica as leader (which could result in data loss) or wait for a replica in the ISR to come back to life and elect it as leader (which could result in prolonged unavailability). By default, Kafka favors availability by choosing the second strategy. If you prefer consistency, you must set &lt;em&gt;unclean.leader.election.enable&lt;/em&gt; to &lt;em&gt;false&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Fundamentally, durability and consistency are at odds with availability. If there is no quorum, then no reads or writes can be accepted and the cluster is unavailable. This is the crux of the &lt;a href=&quot;https://bravenewgeek.com/cap-and-the-illusion-of-choice/&quot;&gt;CAP theorem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In part three of this series, we will discuss scaling message delivery in the distributed log.&lt;/p&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 28 Dec 2017 13:29:33 +0000</pubDate>
<dc:creator>bhattisatish</dc:creator>
<og:type>article</og:type>
<og:title>Building a Distributed Log from Scratch, Part 2: Data Replication</og:title>
<og:url>https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-2-data-replication/</og:url>
<og:description>In part one of this series we introduced the idea of a message log, touched on why it’s useful, and discussed the storage mechanics behind it. In part two, we discuss data replication. We hav…</og:description>
<og:image>https://bravenewgeek.com/wp-content/uploads/2017/12/raft_index.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-2-data-replication/</dc:identifier>
</item>
<item>
<title>High Sierra macOS freezing and stops</title>
<link>https://discussions.apple.com/thread/8101384</link>
<guid isPermaLink="true" >https://discussions.apple.com/thread/8101384</guid>
<description>&lt;p&gt;I started seeing this happen on my 2012 27&quot; iMac shortly after updating to High Sierra.  It seems to be related to having any browser window with video in it (even if paused), or maybe any app that uses QuickTime (I've been using the QuickTime player quite abit, also).  It's been doing this at least once per day, sometimes more often.  It occurs in both the primary user account, and other secondary user accounts.  I've disabled just about every Safari extension, and almost all login items.  Up until the most recent freeze, everything is frozen.  The latest time it happened, however, the mouse pointer was still alive, and I was even able to reconnect the mouse when I cycled power on the mouse.  It would move around the screen, but nothing else would respond. (I tried power cycling the keyboard, but couldn't bring up the force kill window).&lt;/p&gt;

&lt;p&gt;I've looked through all the console logs each time it has frozen (after rebooting), and I can't find any related crash info, or any clues.  It does seem like perhaps its the window server, because there are other log entries after the time of the freeze (before forcing a reboot) which would tend to confirm that at least some processes are still alive and running.  The fact that I could move the mouse pointer the last time it happened (and even reconnect the mouse after power cycling it) tends to confirm that most processes are probably still running.&lt;/p&gt;

&lt;p&gt;I also disconnected most USB peripherals, and a disk drive that I don't generally use.  That hasn't made any difference, so I don't think its related to USB or Firewire.  For good measure, I blew all the dust out of the RAM bay today, just to make sure it wasn't a heat issue.&lt;/p&gt;
</description>
<pubDate>Thu, 28 Dec 2017 11:29:01 +0000</pubDate>
<dc:creator>mhasbini</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://discussions.apple.com/thread/8101384</dc:identifier>
</item>
<item>
<title>No boundaries for user identities: Web trackers exploit browser login managers</title>
<link>https://freedom-to-tinker.com/2017/12/27/no-boundaries-for-user-identities-web-trackers-exploit-browser-login-managers/</link>
<guid isPermaLink="true" >https://freedom-to-tinker.com/2017/12/27/no-boundaries-for-user-identities-web-trackers-exploit-browser-login-managers/</guid>
<description>&lt;p&gt;&lt;em&gt;In this second installment of the&lt;/em&gt; &lt;a href=&quot;https://freedom-to-tinker.com/2017/11/15/no-boundaries-exfiltration-of-personal-data-by-session-replay-scripts/&quot;&gt;&lt;em&gt;No Boundaries series&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, we show how a long-known vulnerability in browsers’ built-in password managers is abused by third-party scripts for tracking on more than a thousand sites.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;by Gunes Acar, Steven Englehardt, and Arvind Narayanan&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone wp-image-13329&quot; src=&quot;https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/26232843/Autofill-blog-post2-300x195.png&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;424&quot; srcset=&quot;https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/26232843/Autofill-blog-post2-300x195.png 300w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/26232843/Autofill-blog-post2-768x500.png 768w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/26232843/Autofill-blog-post2-1024x667.png 1024w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/26232843/Autofill-blog-post2-600x391.png 600w&quot; sizes=&quot;(max-width: 650px) 100vw, 650px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We show how third-party scripts exploit browsers’ built-in login managers (also called password managers) to retrieve and exfiltrate user identifiers without user awareness. To the best of our knowledge, our research is the first to show that login managers are being abused by third-party scripts for the purposes of web tracking.&lt;/p&gt;
&lt;p&gt;The underlying vulnerability of login managers to credential theft &lt;a href=&quot;https://web.archive.org/web/20120605184841/http://ha.ckers.org/blog/20060821/stealing-user-information-via-automatic-form-filling/&quot;&gt;has&lt;/a&gt; &lt;a href=&quot;http://homakov.blogspot.com/2012/11/xss-save-your-password-pwned.html&quot;&gt;been&lt;/a&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1107422#c2&quot;&gt;known&lt;/a&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=408531&quot;&gt;for&lt;/a&gt; &lt;a href=&quot;https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-silver.pdf&quot;&gt;years&lt;/a&gt;. Much of the past discussion has focused on password exfiltration by malicious scripts through cross-site scripting (XSS) attacks. Fortunately, we haven’t found password theft on the 50,000 sites that we analyzed. Instead, we found tracking scripts embedded by the first party abusing the same technique to extract emails addresses for building tracking identifiers.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-13327&quot;&gt;&lt;/span&gt;The image above shows the process. First, a user fills out a login form on the page and asks the browser to save the login. The tracking script is not present on the login page [1]. Then, the user visits another page on the same website which includes the third-party tracking script. The tracking script inserts an invisible login form, which is automatically filled in by the browser’s login manager. The third-party script retrieves the user’s email address by reading the populated form and sends the email hashes to third-party servers.&lt;/p&gt;
&lt;p&gt;You can test the attack yourself on our live &lt;a href=&quot;https://senglehardt.com/demo/no_boundaries/loginmanager/&quot;&gt;&lt;strong&gt;demo page&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We found two scripts using this technique to extract email addresses from login managers on the websites which embed them. These addresses are then hashed and sent to one or more third-party servers. These scripts were present on 1110 of the Alexa top 1 million sites. The process of detecting these scripts is described in our measurement methodology in the Appendix 1. We provide a brief analysis of each script in the sections below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why does the attack work?&lt;/strong&gt; All major browsers have built-in login managers that save and automatically fill in username and password data to make the login experience more seamless. The set of heuristics used to determine which login forms will be autofilled &lt;a href=&quot;http://www.cs.columbia.edu/~suman/docs/suman_pwdmgr.pdf&quot;&gt;varies by browser&lt;/a&gt;, but the basic requirement is that a &lt;a href=&quot;https://searchfox.org/mozilla-central/source/toolkit/components/passwordmgr/LoginManagerContent.jsm#1069&quot;&gt;username and password field be available&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Login form autofilling in general doesn’t require user interaction; all of the major browsers will autofill the username (often an email address) immediately, regardless of the visibility of the form. Chrome doesn’t autofill the password field until the user clicks or touches anywhere on the page. Other browsers we tested [2] don’t require user interaction to autofill password fields.&lt;/p&gt;
&lt;p&gt;Thus, third-party javascript can retrieve the saved credentials by creating a form with the username and password fields, which will then be autofilled by the login manager.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why collect hashes of email addresses?&lt;/strong&gt; Email addresses are unique and persistent, and thus the hash of an email address is an excellent tracking identifier. A user’s email address will almost never change — clearing cookies, using private browsing mode, or switching devices won’t prevent tracking. The hash of an email address can be used to connect the pieces of an online profile scattered across different browsers, devices, and mobile apps. It can also serve as a link between browsing history profiles before and after cookie clears. In a &lt;a href=&quot;https://freedom-to-tinker.com/2017/09/28/i-never-signed-up-for-this-privacy-implications-of-email-tracking/&quot;&gt;previous blog post on email tracking&lt;/a&gt;, we described in detail why a hashed email address is not an anonymous identifier.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scripts exploiting browser login managers&lt;br /&gt;&lt;/strong&gt;&lt;a href=&quot;https://webtransparency.cs.princeton.edu/no_boundaries/autofill_sites.html&quot;&gt;&lt;em&gt;List of sites embedding scripts that abuse login manager for tracking&lt;/em&gt;&lt;/a&gt;&lt;br /&gt;“&lt;em&gt;Smart Advertising Performance&lt;/em&gt;” and “&lt;em&gt;Big Data Marketing&lt;/em&gt;” are the taglines used by the two companies who own the scripts that abuse login managers to extract email addresses. We have manually analyzed the scripts that contained the attack code and verified the attack steps described above. The snippets from the two scripts are given in Appendix 2.&lt;/p&gt;
&lt;div id=&quot;attachment_13334&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;img class=&quot;wp-image-13334&quot; src=&quot;https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/26235414/table-300x43.png&quot; alt=&quot;The scripts that use login manager to extract email addresses present on a total of 1110 of the top 1 Million Alexa sites.&quot; width=&quot;500&quot; height=&quot;71&quot; srcset=&quot;https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/26235414/table-300x43.png 300w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/26235414/table-768x110.png 768w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/26235414/table-600x86.png 600w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/26235414/table.png 938w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;&lt;em&gt;The scripts that use login manager to extract email addresses present on a total of 1110 of the top 1 Million Alexa sites.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Adthink (audienceinsights.net):&lt;/strong&gt; After injecting an invisible form and reading the email address, Adthink script sends MD5, SHA1 and SHA256 hashes of the email address to its server (secure.audienceinsights.net). Adthink then triggers another request containing the MD5 hash of the email to data broker Acxiom (p-eu.acxiom-online.com).&lt;/p&gt;
&lt;p&gt;The Adthink script contains very detailed categories for personal, financial, physical traits, as well as intents, interests and demographics. It is hard to comment on the exact use of these categories but it gives a glimpse of what our online profiles are made up of:&lt;/p&gt;
&lt;table&gt;&lt;caption align=&quot;bottom&quot;&gt;The categories mentioned in the Adthink script include detailed personal, financial, physical traits, as well as intents, interests and demographics (&lt;a href=&quot;https://gist.github.com/gunesacar/6de71057fc15074d94cda5c344b06cbb&quot;&gt;Link to the code snippet&lt;/a&gt;).&lt;/caption&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;&lt;em&gt;&lt;small&gt;birth date, age, gender, nationality, height, weight, BMI (body mass index), hair_color (black, brown, blond, auburn, chestnut, red, gray, white), eye_color (amber, blue, brown, grey, green), education, occupation, net_income, raw_income, relationship states, seek_for_gender (m, f, transman, transwoman, couple), pets, location (postcode, town, state, country), loan (type, amount, duration, overindebted), insurance (car, motorbike, home, pet, health, life), card_risk (chargeback, fraud_attempt), has_car(make, model, type, registration, model year, fuel type), tobacco, alcohol, travel (from, to, departure, return), car_hire_driver_age, hotel_stars&lt;/small&gt;&lt;/em&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;OnAudience (behavioralengine.com):&lt;/strong&gt; The OnAudience script is most commonly present on Polish websites, including newspapers, ISPs and online retailers. 45 of the 63 sites that contain OnAudience script have “.pl” country code top-level domain.&lt;/p&gt;
&lt;p&gt;The script sends the MD5 hash of the email back to its server after reading it through the login manager. OnAudience script also collects browser features including plugins, MIME types, screen dimensions, language, timezone information, user agent string, OS and CPU information. The script then generates a hash based on this browser fingerprint. OnAudience &lt;a href=&quot;http://www.onaudience.com/index.php?action=dataexchange&quot;&gt;claims to use anonymous data only&lt;/a&gt;, but hashed email addresses are not anonymous. If an attacker wants to determine whether a user is in the dataset, they can simply hash the user’s email address and search for records associated with that hash. For a more detailed discussion, see our &lt;a href=&quot;https://freedom-to-tinker.com/2017/09/28/i-never-signed-up-for-this-privacy-implications-of-email-tracking/&quot;&gt;previous blog post&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&quot;attachment_13337&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img class=&quot;wp-image-13337&quot; src=&quot;https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/27000025/buyprofiles1-300x183.png&quot; alt=&quot;OnAudience marketing material that advertises &amp;quot;billions of user profiles&amp;quot;.&quot; width=&quot;650&quot; height=&quot;396&quot; srcset=&quot;https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/27000025/buyprofiles1-300x183.png 300w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/27000025/buyprofiles1-768x467.png 768w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/27000025/buyprofiles1-600x365.png 600w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/27000025/buyprofiles1.png 953w&quot; sizes=&quot;(max-width: 650px) 100vw, 650px&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;OnAudience marketing material that advertises “billions of user profiles”.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Is this attack new?&lt;/strong&gt; This and similar attacks have been discussed in a number of &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=408531&quot;&gt;browser&lt;/a&gt; &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=360493&quot;&gt;bug reports&lt;/a&gt; and &lt;a href=&quot;http://crypto.stanford.edu/~dabo/pubs/papers/pwdmgrBrowser.pdf&quot;&gt;academic&lt;/a&gt; &lt;a href=&quot;https://www.ben-stock.de/wp-content/uploads/asiacss2014.pdf&quot;&gt;papers&lt;/a&gt; for at &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=359675&quot;&gt;least 11 years&lt;/a&gt;. Much of the previous discussion focuses on the security implications of the current functionality, and on the security-usability tradeoff of the autofill functionality.&lt;/p&gt;
&lt;p&gt;Several researchers showed that it is possible to steal passwords from login managers through cross-site scripting (XSS) attacks [3,4,5,6,7]. Login managers and XSS is a dangerous mixture for two reasons: 1) passwords retrieved by XSS can have more devastating effects compared to cookie theft, as users &lt;a href=&quot;http://www.jbonneau.com/doc/DBCBW14-NDSS-tangled_web.pdf&quot;&gt;commonly reuse passwords across different sites&lt;/a&gt;; 2) login managers extend the attack surface for the password theft, as an XSS attack can steal passwords on any page within a site, even those which don’t contain a login form.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How did we get here?&lt;/strong&gt; You may wonder how a security vulnerability persisted for 11 years. That’s because from a narrow browser security perspective, there is no vulnerability, and everything is working as intended. Let us explain.&lt;/p&gt;
&lt;p&gt;The web’s security rests on the Same Origin Policy. In this model, scripts and content from different origins (roughly, domains or websites) are treated as mutually untrusting, and the browser protects them from interfering with each other. However, if a publisher directly embeds a third-party script, rather than isolating it in an iframe, the script is treated as coming from the publisher’s origin. Thus, the publisher (and its users) entirely lose the protections of the same origin policy, and there is nothing preventing the script from exfiltrating sensitive information. Sadly, direct embedding is common — and, in fact, the default — which also explains why the vulnerabilities we exposed in our &lt;a href=&quot;https://freedom-to-tinker.com/2017/11/15/no-boundaries-exfiltration-of-personal-data-by-session-replay-scripts/&quot;&gt;previous post&lt;/a&gt; were possible.&lt;/p&gt;
&lt;p&gt;This model is a poor fit for reality. Publishers neither completely trust nor completely mistrust third parties, and thus neither of the two options (iframe sandboxing and direct embedding) is a good fit: one limits functionality and the other is a privacy nightmare. We’ve found repeatedly through our research that third parties are quite opaque about the behavior of their scripts, and at any rate, most publishers don’t have the time or technical knowhow to evaluate them. Thus, we’re stuck with this uneasy relationship between publishers and third parties for the foreseeable future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The browser vendor’s dilemma.&lt;/strong&gt; It is clear that the Same-Origin Policy is a poor fit for trust relationships on the web today, and that other security defenses would help. But there is another dilemma for browser vendors: should they defend against this and other similar vulnerabilities, or view it as the publisher’s fault for embedding the third party at all?&lt;/p&gt;
&lt;p&gt;There are good arguments for both views. Currently browser vendors seem to adopt the latter for the login manager issue, viewing it as the publisher’s burden. In general, there is no principled way to defend against third parties that are present on some pages on a site from accessing sensitive data on other pages of the same site. For example, if a user simultaneously has two tabs from the same site open — one containing a login form but no third party, and vice versa — then the third-party script can “reach across” browser tabs and exfiltrate the login information &lt;a href=&quot;https://medium.com/@bluepnume/every-known-way-to-get-references-to-windows-in-javascript-223778bede2d&quot;&gt;under certain circumstances&lt;/a&gt;. By embedding a third party &lt;em&gt;anywhere&lt;/em&gt; on its site, the publisher signals that it completely trusts the third party.&lt;/p&gt;
&lt;p&gt;Yet, in other cases, browser vendors have chosen to adopt defenses even if necessarily imperfect. For example, the HTTPOnly cookie attribute was introduced to limit the impact of XSS attacks by blocking the script access to security critical cookies.&lt;/p&gt;
&lt;p&gt;There is another relevant factor: our discovery means that autofill is not just a security vulnerability but also a privacy threat. While the security community strongly prefers principled solutions whenever possible, when it comes to web tracking, we have generally been willing to embrace more heuristic defenses such as blocklists.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Countermeasures.&lt;/strong&gt; Publishers, users, and browser vendors can all take steps to prevent autofill data exfiltration. We discuss each in turn.&lt;/p&gt;
&lt;p&gt;Publishers can isolate login forms by putting them on a separate subdomain, which prevents autofill from working on non-login pages. This does have drawbacks including an increase in engineering complexity. Alternately they could isolate third parties using frameworks like &lt;a href=&quot;https://www.iab.com/guidelines/safeframe/&quot;&gt;Safeframe&lt;/a&gt;. Safeframe makes it easier for the publisher scripts and iframed scripts to communicate, thus blunting the effect of sandboxing. Any such technique requires additional engineering by the publisher compared to simply dropping a third-party script into the web page.&lt;/p&gt;
&lt;p&gt;Users can install ad blockers or tracking protection extensions to prevent tracking by invasive third-party scripts. The domains used to serve the two scripts (behavioralengine.com and audienceinsights.net) are blocked by the EasyPrivacy blocklist.&lt;/p&gt;
&lt;p&gt;Now we turn to browsers. The simplest defense is to allow users to disable login autofill. For instance, the Firefox preference &lt;code&gt;signon.autofillForms&lt;/code&gt; can be set to false to disable autofilling of credentials.&lt;/p&gt;
&lt;p&gt;A less crude defense is to require user interaction before autofilling login forms. Browser vendors have been reluctant to do this because of the usability overhead, but given the evidence of autofill abuse in the wild, this overhead might be justifiable.&lt;/p&gt;
&lt;p&gt;The upcoming &lt;a href=&quot;https://w3c.github.io/webappsec-credential-management/&quot;&gt;W3C Credential Management API&lt;/a&gt; requires browsers to display a notification when user credentials are provided to a page [8]. Browsers may display the same notification when login information is autofilled by the built-in login managers. Displays of this type won’t directly prevent abuse, but they make attacks more visible to publishers and privacy-conscious users.&lt;/p&gt;
&lt;p&gt;Finally, the “&lt;a href=&quot;https://mikewest.github.io/credentialmanagement/writeonly&quot;&gt;writeonly form fields&lt;/a&gt;” idea can be a promising direction to secure login forms in general. The &lt;a href=&quot;https://lists.w3.org/Archives/Public/public-webapps/2014JulSep/0165.html&quot;&gt;briefly discussed proposal&lt;/a&gt; defines ways to deny read access to form elements and suggests the use of &lt;a href=&quot;https://mikewest.github.io/credentialmanagement/writeonly/#security-sandboxing&quot;&gt;placeholder nonces to protect autofilled credentials&lt;/a&gt; [9].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Built-in login managers have a positive effect on web security: they curtail password reuse by making it easy to use complex passwords, and they make phishing attacks are harder to mount. Yet, browser vendors should reconsider allowing stealthy access to autofilled login forms in the light of our findings. More generally, for every browser feature, browser developers and standard bodies should consider how it might be abused by untrustworthy third-party scripts.&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;strong&gt;End notes:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1] We found that login pages contain 25% fewer third-parties compared to pages without login forms. The analysis was based on our crawl of 300,000 pages from 50,000 sites.&lt;br /&gt;[2] We tested the following browsers: Firefox, Chrome, Internet Explorer, Edge, Safari.&lt;br /&gt;[3] &lt;a href=&quot;https://labs.neohapsis.com/2012/04/25/abusing-password-managers-with-xss/&quot;&gt;https://labs.neohapsis.com/2012/04/25/abusing-password-managers-with-xss/&lt;/a&gt;&lt;br /&gt;[4] &lt;a href=&quot;https://www.honoki.net/2014/05/grab-password-with-xss/&quot;&gt;https://www.honoki.net/2014/05/grab-password-with-xss/&lt;/a&gt;&lt;br /&gt;[5] &lt;a href=&quot;https://web.archive.org/web/20150131032001/http://ha.ckers.org:80/blog/20060821/stealing-user-information-via-automatic-form-filling/&quot;&gt;https://web.archive.org/web/20150131032001/http://ha.ckers.org:80/blog/20060821/stealing-user-information-via-automatic-form-filling/&lt;/a&gt;&lt;br /&gt;[6] &lt;a href=&quot;http://www.martani.net/2009/08/xss-steal-passwords-using-javascript.html&quot;&gt;http://www.martani.net/2009/08/xss-steal-passwords-using-javascript.html&lt;/a&gt;&lt;br /&gt;[7] &lt;a href=&quot;https://ancat.github.io/xss/2017/01/08/stealing-plaintext-passwords.html&quot;&gt;https://ancat.github.io/xss/2017/01/08/stealing-plaintext-passwords.html&lt;/a&gt;&lt;br /&gt;[8] “User agents MUST notify users when credentials are provided to an origin. This could take the form of an icon in the address bar, or some similar location.” &lt;a href=&quot;https://w3c.github.io/webappsec-credential-management/#user-mediation-requirement&quot;&gt;https://w3c.github.io/webappsec-credential-management/#user-mediation-requirement&lt;/a&gt;&lt;br /&gt;[9] Originally proposed in &lt;a href=&quot;https://www.ben-stock.de/wp-content/uploads/asiacss2014.pdf&quot;&gt;https://www.ben-stock.de/wp-content/uploads/asiacss2014.pdf&lt;/a&gt;&lt;br /&gt;[10] &lt;a href=&quot;https://jacob.hoffman-andrews.com/README/2017/01/15/how-not-to-get-phished.html&quot;&gt;https://jacob.hoffman-andrews.com/README/2017/01/15/how-not-to-get-phished.html&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;strong&gt;APPENDICES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Appendix 1 – Methodology&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To study password manager abuse, we extended OpenWPM to simulate a user with saved login credentials and added instrumentation to monitor form access. We used Firefox’s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsILoginManager&quot;&gt;nsILoginManager&lt;/a&gt; interface to add login credentials as if they were previously stored by the user. We did not otherwise alter the functionality of the password manager or attempt to manually fill login forms. This allowed us to capture actual abuses of the browser login manager, as any exfiltrated data must have originated from the login manager.&lt;/p&gt;
&lt;p&gt;We crawled 50,000 sites from the Alexa top 1 million. We used the following sampling strategy: visit all of the top 15,000 sites, randomly sample 15,000 sites from the Alexa rank range [15,000 100,000), and randomly sample 20,000 sites from the range [100,000, 1,000,000). This combination allowed us to observe the attacks on both high and low traffic sites. On each of these 50,000 sites we visited 6 pages: the front page and a set of 5 other pages randomly sampled from the internal links on the front page.&lt;/p&gt;
&lt;p&gt;The fake login credentials acted as bait, allowing us to introduce an email and password to the page that could be collected by third parties without any additional interaction. Detection of email address collection was done by inspecting JavaScript calls related to form creation and access, and by the analysis of the HTTP traffic. Specifically, we used the following instrumentation:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events&quot;&gt;Mutation events&lt;/a&gt; to monitor elements inserted to the page DOM. This allowed us to detect the injection of fake login forms. When a mutation event fires, we record the current call stack and serialize the inserted HTML elements.&lt;/li&gt;
&lt;li&gt;Instrument HTMLInputElement to intercept access to form input fields. We log the input field value that is being read to detect when the bait email (autofilled by the built-in password manager) was sniffed.&lt;/li&gt;
&lt;li&gt;Store HTTP request and response data, including POST payloads to detect the exfiltration of the email address or password.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;For both JavaScript (1, 2) and HTTP instrumentation (3) we store JavaScript stack traces at the time of the function call or the HTTP request. We then parse the stack trace to pin down the initiators of an HTTP request or the parties responsible for inserting or accessing a form.&lt;/p&gt;
&lt;p&gt;We then combine the instrumentation data to select scripts that:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;inject an HTML element containing a password field (recall that the password field is necessary for the built-in password manager to kick in)&lt;/li&gt;
&lt;li&gt;read the email address from the input field automatically filled by the browser’s login manager&lt;/li&gt;
&lt;li&gt;send the email address, or a hash of it, over HTTP&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;To verify the findings of the automated experiments we manually analyzed sites that embed the two scripts that match these conditions. We have verified that the forms that the scripts inserted were not visible. We then opened accounts on the sites that allow registration and let the browser store the login information (by clicking yes to the dialog in Figure 1). We then visited another page on the site and verified that browser password manager filled the invisible form injected by the scripts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Appendix 2 – Code Snippets&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_13338&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;img class=&quot;wp-image-13338&quot; src=&quot;https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/27000729/codes-300x190.png&quot; alt=&quot;Code snippets from OnAudience (left) and Adthink (right) that are responsible for the injection of invisible login forms.&quot; width=&quot;650&quot; height=&quot;411&quot; srcset=&quot;https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/27000729/codes-300x190.png 300w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/27000729/codes-768x485.png 768w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/27000729/codes-600x379.png 600w, https://s3.amazonaws.com/ftt-uploads/wp-content/uploads/2017/12/27000729/codes.png 853w&quot; sizes=&quot;(max-width: 650px) 100vw, 650px&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Code snippets from OnAudience (left) and Adthink (right) that are responsible for the injection of invisible login forms.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 27 Dec 2017 20:57:32 +0000</pubDate>
<dc:creator>randomwalker</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://freedom-to-tinker.com/2017/12/27/no-boundaries-for-user-identities-web-trackers-exploit-browser-login-managers/</dc:identifier>
</item>
</channel>
</rss>