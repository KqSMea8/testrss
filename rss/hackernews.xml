<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Compressing and enhancing hand-written notes (2016)</title>
<link>https://mzucker.github.io/2016/09/20/noteshrink.html</link>
<guid isPermaLink="true" >https://mzucker.github.io/2016/09/20/noteshrink.html</guid>
<description>&lt;p&gt;I wrote a program to clean up scans of handwritten notes while simultaneously reducing file size.&lt;/p&gt;
&lt;p&gt;Example input and output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_comparison.png&quot; alt=&quot;input/output comparison&quot; class=&quot;center-image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Left:&lt;/em&gt; input scan @ 300 DPI, 7.2MB PNG / 790KB JPG. &lt;em&gt;Right:&lt;/em&gt; output @ same resolution, 121KB PNG.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; the process described here is more or less what the &lt;a href=&quot;https://blogs.office.com/2015/04/02/office-lens-comes-to-iphone-and-android/&quot;&gt;Office Lens&lt;/a&gt; app does already, and there’s probably any number of other tools that do similar things. I’m not claiming to have come up with a radical new invention – just my own implementation of a useful tool.&lt;/p&gt;
&lt;p&gt;If you’re in a hurry, just check out the &lt;a href=&quot;https://github.com/mzucker/noteshrink&quot;&gt;github&lt;/a&gt; repo, or jump down to the &lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#results&quot;&gt;results&lt;/a&gt; section, where you can play with interactive 3D diagrams of color clusters.&lt;/p&gt;

&lt;p&gt;Some of my classes don’t have an assigned textbook. For these, I like to appoint weekly “student scribes” to share their lecture notes with the rest of the class, so that there’s some kind written resource for students to double-check their understanding of the material. The notes get posted to a course website as PDFs.&lt;/p&gt;
&lt;p&gt;At school we have a “smart” copier capable of scanning to PDF, but the documents it produces are… less than attractive. Here’s some example output from a handwritten homework page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/copier_bad.png&quot; alt=&quot;omg copier&quot; class=&quot;center-threequarters border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Seemingly at random, the copier chooses whether to &lt;a href=&quot;http://www.leptonica.com/binarization.html&quot;&gt;binarize&lt;/a&gt; each mark (like the &lt;em&gt;x&lt;/em&gt;’s), or turn them into abysmally blocky JPGs (like the square root symbols). Needless to say, we can do better.&lt;/p&gt;

&lt;p&gt;We start out with a scan of a lovely page of student notes like this one:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/images/noteshrink/notesA1.jpg&quot;&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1.jpg&quot; alt=&quot;a page of notes&quot; class=&quot;center-half border&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The original PNG image scanned at 300 DPI is about 7.2MB; the same image converted to a JPG at quality level 85 is about 790KB.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Since PDFs of scans are typically just a &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_container_format&quot;&gt;container format&lt;/a&gt; around PNG or JPG, we certainly don’t expect to &lt;em&gt;reduce&lt;/em&gt; the required storage size when converting to PDF. 800KB per page is pretty hefty – for the sake of loading times, I’d love to see things closer to 100KB/page.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Although this student is a very neat note-taker, the scan shown above looks a bit messy (through no fault of her own). There’s lots of bleed-through from the opposite side of the page, which is both distracting for the viewer and hard for a JPG or PNG encoder to compress, compared to a constant-color background.&lt;/p&gt;
&lt;p&gt;This is what the output of my &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; program looks like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mzucker.github.io/images/noteshrink/notesA1_output.png&quot;&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_output.png&quot; alt=&quot;a page of notes&quot; class=&quot;center-half border&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s a comparatively tiny PNG file, weighing in at just 121KB. My favorite part? Not only did the image get &lt;em&gt;smaller&lt;/em&gt;, it also got &lt;em&gt;clearer&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Here are the steps required to produce the compact, clean image above:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Identify the background color of the original scanned image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Isolate the foreground by thresholding on difference from background color.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert to an indexed color PNG by choosing a small number of “representative colors” from the foreground.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Before we delve into each one of these steps, it might be useful to recap &lt;em&gt;how&lt;/em&gt; color images are stored digitally. Because humans have three different types of color-sensitive cells in their eyes, we can reconstruct any color by combining various intensities of red, green, and blue light.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; The resulting system equates colors with 3D points in the &lt;a href=&quot;https://en.wikipedia.org/wiki/RGB_color_space&quot;&gt;RGB colorspace&lt;/a&gt;, illustrated here:&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:RGB_color_cube.svg&quot; class=&quot;center-image&quot;&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/RGB_color_cube.svg&quot; alt=&quot;RGB color cube&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although a true vector space would allow an infinite number of continuously varying pixel intensities, we need to discretize colors in order to store them digitally – typically assigning 8 bits each to the red, green, and blue channels. Nevertheless, considering colors in an image analogously to points in a continuous 3D space provides powerful tools for analysis, as we shall see when we step through the process outlined above.&lt;/p&gt;

&lt;p&gt;Since the majority of the page is free from ink or lines, we might expect the paper color to be the one that appears most frequently in the scanned image – and if the scanner always represented every bit of unmarked white paper as the same RGB triplet, we would have no problems picking it out. Regrettably, this is not the case; random variations in color appear due to dust specks and smudges on the glass, color variations of the page itself, sensor noise, etc. So in reality, the “page color” can spread across thousands of distinct RGB values.&lt;/p&gt;
&lt;p&gt;The original scanned image is 2,081 x 2,531, with a total area of 5,267,011 pixels. Although we &lt;em&gt;could&lt;/em&gt; consider each individual pixel, it’s much faster to work on a representative sample of the input image. The &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; program samples 5% of the input image by default (more than sufficient for scans at 300 DPI), but for now, let’s look at an even smaller subset of 10,000 pixels chosen at random from the original scan:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_samples_raw.png&quot; alt=&quot;random pixels&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Although it bears scant resemblance to the actual scanned page – there’s no text to be found – the distribution of colors in the two images is pretty much identical. Both are mostly grayish-white, with a handful of red, blue, and dark gray pixels. Here are the same 10,000 pixels, sorted by brightness (e.g. the sum of their R, G, and B intensities):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_samples_sorted.png&quot; alt=&quot;random pixels, sorted&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Viewed from afar, the bottom 80-90% of the image all seems to be the same color; however, closer inspection reveals quite a bit of variation. In fact, the most frequent color in the image above, with RGB value (240, 240, 242), accounts for just 226 of the 10,000 samples – less than 3% of the total number of pixels.&lt;/p&gt;
&lt;p&gt;Because the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mode_(statistics)&quot;&gt;mode&lt;/a&gt; here accounts for such a small percentage of the sample, we should question how reliably it describes the distribution of colors in the image. We’ll have a better chance of identifying a prevalent page color if we first reduce the &lt;a href=&quot;https://en.wikipedia.org/wiki/Color_depth&quot;&gt;bit depth&lt;/a&gt; of the image before finding the mode. Here’s what things look like when we move from 8 bits per channel to 4 by zeroing out the four &lt;a href=&quot;https://en.wikipedia.org/wiki/Least_significant_bit&quot;&gt;least significant bits&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_samples_sorted_4bit.png&quot; alt=&quot;random pixels, sorted, 4 bits per channel&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now the most frequently occurring color has RGB value (224, 224, 224), and accounts for 3,623 (36%) of the sampled pixels. Essentially, by reducing the bit depth, we are grouping similar pixels into larger “bins”, which makes it easier to find a strong peak in the data.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;There’s a tradeoff here between reliability and precision: small bins enable finer distinctions of color, but bigger bins are much more robust. In the end, I went with 6 bits per channel to identify the background color, which seemed like a good sweet spot between the two extremes.&lt;/p&gt;

&lt;p&gt;Once we have identified the background color, we can &lt;a href=&quot;https://en.wikipedia.org/wiki/Thresholding_(image_processing)&quot;&gt;threshold&lt;/a&gt; the image according to how similar each pixel in the image is to it. One natural way to calculate the similarity of two colors is to compute the &lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_distance&quot;&gt;Euclidean distance&lt;/a&gt; of their coordinates in RGB space; however, this simple method fails to properly segment the colors shown below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/colors.svg&quot; alt=&quot;difficult&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here’s a table specifying the colors and their Euclidean distances from the background color:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Color&lt;/th&gt;
&lt;th&gt;Where found&lt;/th&gt;
&lt;th&gt;R&lt;/th&gt;
&lt;th&gt;G&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;Dist. from BG&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;white&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;background&lt;/td&gt;
&lt;td&gt;238&lt;/td&gt;
&lt;td&gt;238&lt;/td&gt;
&lt;td&gt;242&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;—&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;gray&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;bleed-through from back&lt;/td&gt;
&lt;td&gt;160&lt;/td&gt;
&lt;td&gt;168&lt;/td&gt;
&lt;td&gt;166&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;129.4&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;black&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;ink on front of page&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;td&gt;73&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;290.4&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;red&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;ink on front of page&lt;/td&gt;
&lt;td&gt;219&lt;/td&gt;
&lt;td&gt;83&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;220.7&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;pink&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;vertical line at left margin&lt;/td&gt;
&lt;td&gt;243&lt;/td&gt;
&lt;td&gt;179&lt;/td&gt;
&lt;td&gt;182&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;84.3&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;As you can see, the dark gray bleed-through that we would like to classify as background is actually &lt;em&gt;further&lt;/em&gt; away from the white page color than the pink line color which we hope to classify as foreground. Any threshold on Euclidean distance that marks pink as foreground would necessarily also have to include the bleed-through.&lt;/p&gt;
&lt;p&gt;We can get around this issue by moving from RGB space to &lt;a href=&quot;https://en.wikipedia.org/wiki/HSL_and_HSV&quot;&gt;Hue-Saturation-Value&lt;/a&gt; (HSV) space, which deforms the RGB cube into the cylindrical shape illustrated in this cutaway view:&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:HSV_color_solid_cylinder.png&quot; class=&quot;center-half&quot;&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/hsv.png&quot; alt=&quot;diagram of HSV space&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The HSV cylinder features a rainbow of colors distributed circularly about its outside top edge; &lt;em&gt;hue&lt;/em&gt; refers to the angle along this circle. The central axis of the cylinder ranges from black at the bottom to white at the top, with gray shades in between – this entire axis has zero &lt;em&gt;saturation&lt;/em&gt;, or intensity of color, and the vivid hues on the outside circumference all have a saturation of 1.0. Finally, &lt;em&gt;value&lt;/em&gt; refers to the overall brightness of the color, ranging from black at the bottom to bright shades at the top.&lt;/p&gt;
&lt;p&gt;So now let’s reconsider our colors above, this time in terms of value and saturation:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Color&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Saturation&lt;/th&gt;
&lt;th&gt;Value diff. from BG&lt;/th&gt;
&lt;th&gt;Sat. diff from BG&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;white&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.949&lt;/td&gt;
&lt;td&gt;0.017&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;—&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;—&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;gray&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.659&lt;/td&gt;
&lt;td&gt;0.048&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.290&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.031&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;black&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.286&lt;/td&gt;
&lt;td&gt;0.027&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.663&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.011&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;red&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.859&lt;/td&gt;
&lt;td&gt;0.621&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.090&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.604&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;pink&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0.953&lt;/td&gt;
&lt;td&gt;0.263&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.004&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;0.247&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;As you might expect, white, black, and gray vary significantly in value, but share similarly low saturation levels – well below either red or pink. With the additional information provided by HSV, we can successfully mark a pixel as belonging to the foreground if either one of these criteria holds:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the value differs by more than 0.3 from the background color, &lt;em&gt;or&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the saturation differs by more than 0.2 from the background color&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The former criterion pulls in the black pen marks, whereas the latter pulls in the red ink as well as the pink line. Both criteria successfully exclude the gray bleed-through from the foreground. Different images may require different saturation/value thresholds; see the &lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#results&quot;&gt;results&lt;/a&gt; section for details.&lt;/p&gt;

&lt;p&gt;Once we isolate the foreground, we are left with a new set of colors corresponding to the marks on the page. Let’s visualize the set – but this time, instead of considering colors as a collection of pixels, we will consider them as 3D points in the RGB colorspace. The resulting scatterplot ends up looking quite “clumpy”, with several bands of related colors:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_points_only.svg&quot; alt=&quot;scan foreground colors&quot; class=&quot;canvas3d border&quot; id=&quot;notesA1pointsonly&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Our goal now is to convert the original 24 bit-per-pixel image into an &lt;a href=&quot;https://en.wikipedia.org/wiki/Indexed_color&quot;&gt;indexed color&lt;/a&gt; image by choosing a small number (8, in this example) of colors to represent the whole image. This has two effects: first, it reduces the file size because specifying a color now requires only 3 bits (since ). Furthermore, it makes the resulting image more visually cohesive because similarly colored ink marks are likely to be assigned the same color in the final output image.&lt;/p&gt;
&lt;p&gt;To accomplish this goal we will use a data-driven method that exploits the “clumpy” nature of the diagram above. Choosing colors that correspond to the centers of clusters will lead to a set of colors that accurately represents the underlying data. In technical terms, we’ll be solving a &lt;a href=&quot;https://en.wikipedia.org/wiki/Color_quantization&quot;&gt;color quantization&lt;/a&gt; problem (which is itself just a special case of &lt;a href=&quot;https://en.wikipedia.org/wiki/Vector_quantization&quot;&gt;vector quantization&lt;/a&gt;), through the use of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cluster_analysis&quot;&gt;cluster analysis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The particular methodological tool for the job that I picked is &lt;a href=&quot;https://en.wikipedia.org/wiki/K-means_clustering&quot;&gt;&lt;em&gt;k&lt;/em&gt;-means clustering&lt;/a&gt;. Its overall goal is to find a set of means or centers which minimizes the average distance from each point to the nearest center. Here’s what you get when you use it to pick out seven different clusters on the dataset above:&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_plot.svg&quot; alt=&quot;Notes A1&quot; class=&quot;canvas3d border&quot; id=&quot;notesA1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In this diagram, the points with black outlines represent foreground color samples, and the colored lines connect them to their closest center in the RGB colorspace. When the image is converted to indexed color, each foreground sample will get replaced with the color of the closest center. Finally, the circular outlines indicate the distance from each center its furthest associated sample.&lt;/p&gt;

&lt;p&gt;Aside from being able to set the value and saturation thresholds, the &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; program has several other notable features. By default, it increases the vividness and contrast of the final palette by rescaling the minimum and maximum intensity values to 0 and 255, respectively. Without this adjustment, the 8-color palette for the scan above would look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_palette.png&quot; alt=&quot;original palette&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The adjusted palette is more vibrant:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesA1_modified_palette.png&quot; alt=&quot;adjusted palette&quot; class=&quot;center-image border&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There is also an option to force the background color to white after isolating the foreground colors. To further reduce the PNG image sizes after conversion to indexed color, &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; can automatically run &lt;a href=&quot;http://optipng.sourceforge.net/pngtech/optipng.html&quot;&gt;PNG optimization&lt;/a&gt; tools such as &lt;a href=&quot;http://optipng.sourceforge.net/&quot;&gt;optipng&lt;/a&gt;, &lt;a href=&quot;http://pmt.sourceforge.net/pngcrush/&quot;&gt;pngcrush&lt;/a&gt;, or &lt;a href=&quot;https://pngquant.org/&quot;&gt;pngquant&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The program’s final output combines several output images together into PDFs like &lt;a href=&quot;https://mzucker.github.io/images/noteshrink/notesA.pdf&quot;&gt;this one&lt;/a&gt; using ImageMagick’s &lt;a href=&quot;http://www.imagemagick.org/script/convert.php&quot;&gt;convert&lt;/a&gt; tool. As a further bonus, &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; automatically sorts input filenames numerically (as opposed to alphabetically, as the shell &lt;a href=&quot;https://en.wikipedia.org/wiki/Glob_(programming)&quot;&gt;globbing&lt;/a&gt; operator does). This is helpful when your dumb scanning program&lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;https://mzucker.github.io/2016/09/20/noteshrink.html#fn:9&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; produces output filenames like &lt;code class=&quot;highlighter-rouge&quot;&gt;scan 9.png&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;scan 10.png&lt;/code&gt;, and you don’t want their order to be swapped in the PDF.&lt;/p&gt;

&lt;p&gt;Here are some more examples of the program output. The first one (&lt;a href=&quot;https://mzucker.github.io/images/noteshrink/tree.pdf&quot;&gt;PDF&lt;/a&gt;) looks great with the default threshold settings:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/tree_comparison.png&quot; alt=&quot;tree comparison&quot; class=&quot;center-image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here is the visualization of the color clusters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/tree_plot.svg&quot; alt=&quot;tree plot&quot; class=&quot;canvas3d border&quot; id=&quot;tree&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The next one (&lt;a href=&quot;https://mzucker.github.io/images/noteshrink/notesB.pdf&quot;&gt;PDF&lt;/a&gt;) required lowering the saturation threshold to 0.045 because the blue-gray lines are so drab:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesB1_comparison.png&quot; alt=&quot;notesB comparison&quot; class=&quot;center-image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Color clusters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/notesB1_plot.svg&quot; alt=&quot;notesB plot&quot; class=&quot;canvas3d border&quot; id=&quot;notesB1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Finally, an example scanned in from engineer’s graph paper (&lt;a href=&quot;https://mzucker.github.io/images/noteshrink/graph-paper-ink-only.pdf&quot;&gt;PDF&lt;/a&gt;). For this one, I set the value threshold to 0.05 because the contrast between the background and the lines was so low:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/engr_comparison.png&quot; alt=&quot;graph paper comparison&quot; class=&quot;center-image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Color clusters:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mzucker.github.io/images/noteshrink/engr_plot.svg&quot; alt=&quot;graph paper plot&quot; class=&quot;canvas3d border&quot; id=&quot;engr&quot;/&gt;&lt;/p&gt;
&lt;p&gt;All together, the four PDFs take up about 788KB, averaging about about 130KB per page of output.&lt;/p&gt;

&lt;p&gt;I’m glad I was able to produce a practical tool that I can use to prepare scribe note PDFs for my course websites. Beyond that, I really enjoyed preparing this writeup, especially because it prodded me to try to improve on the essentially 2D visualizations displayed on the Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/Color_quantization&quot;&gt;color quantization&lt;/a&gt; page, and also to finally learn &lt;a href=&quot;http://threejs.org/&quot;&gt;three.js&lt;/a&gt; (very fun, would use again).&lt;/p&gt;
&lt;p&gt;If I ever revisit this project, I’d like to play around with alternative quantization schemes. One that occurred to me this week was to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectral_clustering&quot;&gt;spectral clustering&lt;/a&gt; on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Nearest_neighbor_graph&quot;&gt;nearest neighbor graph&lt;/a&gt; of a set of color samples – I thought this was an exciting new idea when I dreamed it up, but it turns out there’s a &lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S003132031200074X&quot;&gt;2012 paper&lt;/a&gt; that proposes this exact approach. Oh well.&lt;/p&gt;
&lt;p&gt;You could also try using &lt;a href=&quot;https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm&quot;&gt;expectation maximization&lt;/a&gt; to form a &lt;a href=&quot;https://en.wikipedia.org/wiki/Mixture_model#Gaussian_mixture_model&quot;&gt;Gaussian mixture model&lt;/a&gt; describing the color distribution – not sure if that’s been done much in the past. Other fun ideas include trying out a “perceptually uniform” colorspace like &lt;a href=&quot;https://en.wikipedia.org/wiki/Lab_color_space&quot;&gt;L*a*b*&lt;/a&gt; to cluster in, and also to attempt to automatically determine the &lt;a href=&quot;https://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set&quot;&gt;“best” number of clusters&lt;/a&gt; for a given image.&lt;/p&gt;
&lt;p&gt;On the other hand, I’ve got a backlog of blog entries to shove out the door, so I’m going to put a pin in this project for now, and invite you to go checkout the &lt;code class=&quot;highlighter-rouge&quot;&gt;noteshrink.py&lt;/code&gt; &lt;a href=&quot;https://github.com/mzucker/noteshrink&quot;&gt;github&lt;/a&gt; repository. Until next time!&lt;/p&gt;











</description>
<pubDate>Mon, 12 Mar 2018 10:56:18 +0000</pubDate>
<dc:creator>pablode</dc:creator>
<og:title>Compressing and enhancing hand-written notes</og:title>
<og:description>I wrote a program to clean up scans of handwritten notes while simultaneously reducing file size.</og:description>
<og:url>https://mzucker.github.io/2016/09/20/noteshrink.html</og:url>
<og:image>https://mzucker.github.io/images/noteshrink/noteshrink-comparison.png</og:image>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://mzucker.github.io/2016/09/20/noteshrink.html</dc:identifier>
</item>
<item>
<title>Slack&amp;#039;s bait and switch</title>
<link>https://opkode.com/blog/slacks-bait-and-switch/</link>
<guid isPermaLink="true" >https://opkode.com/blog/slacks-bait-and-switch/</guid>
<description>&lt;p&gt;Slack has finally decided to close down their IRC and XMPP gateways.&lt;/p&gt;
&lt;p&gt;True to form, you can only read their announcement if you already have a Slack account and are logged in to a workspace.&lt;/p&gt;
&lt;p&gt;Here's the gist of their announcement:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
As Slack has evolved over the years, we've built features and capabilities —
like Shared Channels, Threads, and emoji reactions (to name a few) — that the
IRC and XMPP gateways aren't able to handle. Our priority is to provide a
secure and high-quality experience across all platforms, and so the time has
come to close the gateways.
&lt;/pre&gt;
&lt;p&gt;They're of course being economical with the truth here.&lt;/p&gt;
&lt;p&gt;Perhaps their XMPP gateway can't handle &quot;Shared Channels&quot; and &quot;Threads&quot;, but that's because they purposefully stopped working on it.&lt;/p&gt;
&lt;p&gt;A &quot;Shared Channel&quot; simply means a chatroom which people from outside your workspace can participate in. If a workspace is mapped to a members-only chatroom, then making something a shared channel simply means updating the members list or making the chatroom open (so anybody can join it).&lt;/p&gt;
&lt;p&gt;Threads can be implemented by adding a &lt;tt class=&quot;docutils literal&quot;&gt;&amp;lt;thread&amp;gt;&lt;/tt&gt; element in the message stanza, as documented in &lt;a class=&quot;reference external&quot; href=&quot;https://xmpp.org/extensions/xep-0201.html&quot;&gt;XEP-201&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;strike&quot;&gt;And emoji... there's nothing in XMPP that prevents people from sending emoji.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;admonition note&quot; readability=&quot;13.994987468672&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p&gt;UPDATE: Several readers have pointed out that &quot;emoji reactions&quot; and emoji are different things. Emoji reactions can be tacked to a particular message.&lt;/p&gt;
&lt;p&gt;Still, there's nothing fundamental about XMPP that prevents emoji reactions, and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/jabbercat/jabbercat/issues/80&quot;&gt;work is currently underway to add support for them&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;The protocol is designed to be eXtensible (hence the X in XMPP) and new features are continuously being added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;classic-bait-and-switch&quot; readability=&quot;39.725&quot;&gt;

&lt;p&gt;We all know the real reason Slack has closed off their gateways. Their business model dictates that they should.&lt;/p&gt;
&lt;p&gt;Slack's business model is to record everything said in a workspace and then to &lt;a class=&quot;reference external&quot; href=&quot;https://get.slack.help/hc/en-us/articles/115002422943-Message-and-storage-limits-on-the-Free-plan&quot;&gt;sell you access to their record of your conversations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They're a typical walled garden, information silo or &lt;a class=&quot;reference external&quot; href=&quot;https://opkode.com/blog/review-who-owns-the-future/&quot;&gt;Siren Server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So they have to close everything off, to make sure that people can't extract their conversations out of the silo.&lt;/p&gt;
&lt;p&gt;We saw it with Google, who built Gtalk on XMPP and even federated with other XMPP servers, only to later stop federation and XMPP support in favour of trying to herd the digital cattle into the Google+ enclosure.&lt;/p&gt;
&lt;p&gt;Facebook, who also built their chat app on XMPP at first allowed 3rd party XMPP clients to connect and then later dropped interoperability.&lt;/p&gt;
&lt;p&gt;Twitter, although not using or supporting XMPP, had a vibrant 3rd party client ecosystem which they killed off once they felt big enough.&lt;/p&gt;
&lt;p&gt;Slack, like so many others before them, pretend to care about interoperability, opening up just so slightly, so that they can lure in people with the promise of &quot;openness&quot;, before eventually closing the gate once they've achieved sufficient size and lock-in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;on-federation&quot; readability=&quot;59&quot;&gt;

&lt;p&gt;When we talk about &quot;federation&quot; in networks, we mean the ability to communicate between different service providers.&lt;/p&gt;
&lt;p&gt;For example, email is federated. You can set up your own email server, and then send emails to people with their own email servers, or to people with Gmail or Yahoo! accounts.&lt;/p&gt;
&lt;p&gt;You can email any other email address in the world, regardless of where that email address is hosted.&lt;/p&gt;
&lt;p&gt;If email never existed, and a company like Slack today would come out with this brand new concept of &quot;Electronic Mail&quot;, let's call it &lt;tt class=&quot;docutils literal&quot;&gt;digimail&lt;/tt&gt;, do you think they would standardise the digimail protocol and allow you to send messages to other digimail purveyors?&lt;/p&gt;
&lt;p&gt;We all know the answer to that. They won't, and neither would Google, Microsoft or Facebook.&lt;/p&gt;
&lt;p&gt;Heck, Facebook is actively trying to replace email since years.&lt;/p&gt;
&lt;p&gt;The reason email is federated, is because it was developed before surveillance capitalism was a thing and because it was established and entrenched long before these companies came around.&lt;/p&gt;
&lt;p&gt;There's a reason why your email address is still the de facto way to sign up for any service on the web (sometimes with one or two degrees of separation), and it's because of federation.&lt;/p&gt;
&lt;p&gt;XMPP is designed to allow federation. Think about that. Instead of having to sign up to various different chat providers, all which try to lock you in and monetize your conversations, you could instead have one chat account, and use that to chat with anybody else, regardless of which chat provider they are using.&lt;/p&gt;
&lt;p&gt;Alas, that's the dream, but because XMPP came much later to the scene, it didn't develop the critical mass as email has, and here we are. With dozens of chat apps, all non-interoperable and closed off.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-would-it-take-for-xmpp-to-take-off&quot; readability=&quot;40.970903522205&quot;&gt;

&lt;p&gt;One of the sad things that has come out of Slack's meteoric rise to success, has been how many free and open source projects have jumped over to using it (after previously using IRC or XMPP).&lt;/p&gt;
&lt;p&gt;In so doing, they have closed off their discussions from search engines and they prevent people from accessing their past archives.&lt;/p&gt;
&lt;p&gt;Slack has many cool features, and they work very well, I'm not going to deny it.&lt;/p&gt;
&lt;p&gt;However, the XMPP Software Foundation has done a lot of work in recent years to enable protocol extensions that provide features that people have come to expect from chat applications, for example:&lt;/p&gt;
&lt;p&gt;Unfortunately XMPP clients have been lagging far behind in various respects.&lt;/p&gt;
&lt;p&gt;One of the main problems is funding. The modern digital economy is largely set up around surveillance capitalism and user lock-in.&lt;/p&gt;
&lt;p&gt;So attempts to create software that doesn't follow these precepts, often end up unfunded or underfunded.&lt;/p&gt;
&lt;p&gt;However, our &quot;weakness&quot;, is also our strength.&lt;/p&gt;
&lt;p&gt;XMPP clients, and the XMPP network can provide something that Slack never can. Federation, free and open software, interoperability, extensibility and user choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;converse-js&quot; readability=&quot;47.177419354839&quot;&gt;

&lt;p&gt;For the last few years I've been working in my spare time on making a JavaScript XMPP chat client, called &lt;a class=&quot;reference external&quot; href=&quot;http://conversejs.org/&quot;&gt;converse.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Originally the idea was to make a Gtalk like chat client that you integrate in your website, and it can still be used like that.&lt;/p&gt;
&lt;div class=&quot;figure align-center&quot;&gt;&lt;img alt=&quot;A screenshot of converse.js as overlayed chatboxes&quot; src=&quot;https://opkode.com/img/converse-screenshot.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;However, in the last year I've updated it further so that it can also be used as a fullscreen application, like Slack is used.&lt;/p&gt;
&lt;p&gt;You can try the fullscreen version at &lt;a class=&quot;reference external&quot; href=&quot;https://inverse.chat/&quot;&gt;https://inverse.chat/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;figure align-center&quot;&gt;&lt;img alt=&quot;A screenshot of converse.js as a fullscreen application&quot; src=&quot;https://opkode.com/img/inverse-screenshot.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;If you have no-one to chat to, then come join the &lt;a class=&quot;reference external&quot; href=&quot;https://yax.im/i/#discuss@conference.conversejs.org?join&quot;&gt;discuss@conference.conversejs.org&lt;/a&gt; chat room.&lt;/p&gt;
&lt;p&gt;This link will take you directly there (via inverse.chat): &lt;a class=&quot;reference external&quot; href=&quot;https://inverse.chat/#converse/room?jid=discuss@conference.conversejs.org&quot;&gt;https://inverse.chat/#converse/room?jid=discuss@conference.conversejs.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Converse.js still lacks lots of features that Slack has, but that's not because XMPP itself can't support those features.&lt;/p&gt;
&lt;p&gt;What converse.js however &lt;em&gt;does&lt;/em&gt; have, is that it's free and open source software, based on a standard protocol and it can be extended, updated and improved upon, by anyone.&lt;/p&gt;
&lt;p&gt;We're actively working on adding new features and more and more people are joining in.&lt;/p&gt;
&lt;p&gt;Moreover, anybody can host it and you can integrate it into any website.&lt;/p&gt;
&lt;p&gt;Ultimately, I believe in the power and utility of interoperability and software freedom, even though the current trend is to close off and lock down.&lt;/p&gt;
&lt;p&gt;These information silos are as powerful as we make them. If enough projects choose standardised protocols and FOSS software, we will be able to create viable alternatives that foster freedom instead of lock-in.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 12 Mar 2018 09:45:00 +0000</pubDate>
<dc:creator>jcbrand</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://opkode.com/blog/slacks-bait-and-switch/</dc:identifier>
</item>
<item>
<title>TLS 1.3 and Proxies</title>
<link>https://www.imperialviolet.org/2018/03/10/tls13.html</link>
<guid isPermaLink="true" >https://www.imperialviolet.org/2018/03/10/tls13.html</guid>
<description>&lt;p&gt;I'll generally ignore the internet froth in a given week as much as possible, but when Her Majesty's Government starts &lt;a href=&quot;https://www.ncsc.gov.uk/blog-post/tls-13-better-individuals-harder-enterprises&quot;&gt;repeating misunderstandings about TLS 1.3&lt;/a&gt; it is necessary to write something, if only to have a pointer ready for when people start citing it as evidence.&lt;/p&gt;
&lt;p&gt;The first misunderstanding in the piece is the claim that it's possible for man-in-the-middle proxies to selectively proxy TLS 1.2 connections, but not TLS 1.3 connections because the latter encrypts certificates.&lt;/p&gt;
&lt;p&gt;The TLS 1.2 proxy behaviour that's presumed here is the following: the proxy forwards the client's ClientHello message to the server and inspects the resulting ServerHello and certificates. Based on the name in the certificate, the proxy may “drop out” of the connection (i.e. allow the client and server to communicate directly) or may choose to interpose itself, answering the client with an alternative ServerHello and the server with an alternative ClientKeyExchange, negotiating different encrypted sessions with each and forwarding so that it can see the plaintext of the connection. In order to satisfy the client in this case the client must trust the proxy, but that's taken care of in the enterprise setting by installing a root CA on the client. (Or, &lt;a href=&quot;https://www.eff.org/deeplinks/2011/05/syrian-man-middle-against-facebook&quot;&gt;in Syria&lt;/a&gt;, by hoping that users click through the the certificate error.)&lt;/p&gt;
&lt;p&gt;While there do exist products that attempt to do this, they break repeatedly because it's a fundamentally flawed design: by forwarding the ClientHello to the server, the proxy has committed to supporting every feature that the client advertises because, if the server selects a given feature, it's too late for the proxy to change its mind. Therefore, with every new cipher suite, new curve, and new extension introduced, a proxy that does this finds that it cannot understand the connection that it's trying to interpose.&lt;/p&gt;
&lt;p&gt;One option that some proxies take is to try and heuristically detect when it can't support a connection and fail open. However, if you believe that your proxy is a strong defense against something then failing open is a bit of problem.&lt;/p&gt;
&lt;p&gt;Thus another avenue that some proxies have tried is to use the same heuristics to detect unsupported connections, discard the incomplete, outgoing connection, and start another by sending a ClientHello that only includes features that the proxy supports. That's unfortunate for the server because it doubles its handshaking cost, but gives the proxy a usable connection.&lt;/p&gt;
&lt;p&gt;However, both those tricks only slow down the rate at which customers lurch from outage to outage. The heuristics are necessarily imprecise because TLS extensions can change anything about a connection after the ClientHello and some additions to TLS have memorably broken them, leading to confused proxies cutting enterprises off from the internet.&lt;/p&gt;
&lt;p&gt;So the idea that selective proxying based on the server certificate ever functioned is false. A proxy can, with all versions of TLS, examine a ClientHello and decide to proxy the connection or not but, if it does so, it must craft a fresh ClientHello to send to the server containing only features that it supports. Making assumptions about any TLS message after a ClientHello that you didn't craft is invalid. Since, in practice, this has not been as obvious as the designers of TLS had imagined, the 1.3 draft &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-tls13-26#section-9.3&quot;&gt;has a section&lt;/a&gt; laying out these requirements.&lt;/p&gt;
&lt;p&gt;Sadly, it's precisely this sort of proxy misbehaviour that has delayed TLS 1.3 for over a year while my colleagues (David Benjamin and Steven Valdez) repeatedly deployed experiments and measured success rates of different serialisations. In the end we found that making TLS 1.3 &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-tls13-26#appendix-D.4&quot;&gt;look like a TLS 1.2 resumption&lt;/a&gt; solved a huge number of problems, suggesting that many proxies blindly pass through such connections. (Which should, again, make one wonder about what security properties they're providing.)&lt;/p&gt;
&lt;p&gt;But, given all that, you might ponder why we bothered encrypting certificates? Partly it's one component of an effort to make browsing more private but, more concretely, it's because anything not encrypted suffers these problems. TLS 1.3 was difficult to deploy because TLS's handshake is, perforce, exposed to the network. The idea that we should make TLS a little more efficient by &lt;em&gt;compressing&lt;/em&gt; certificates has been bouncing around for many years. But it's only with TLS 1.3 that we might &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-certificate-compression-02&quot;&gt;make it happen&lt;/a&gt; because everyone expected to hit another swamp of proxy issues if we tried it without encrypting certificates first.&lt;/p&gt;
&lt;p&gt;It's also worth examining the assumption behind waiting for the server certificate before making an interception decision: that the client might be malicious and attempt to fool the proxy but (to quote the article) the certificate is “tightly bound to the server we’re actually interacting with”. The problem here is that a certificate for any given site, and a valid signature over a ServerKeyExchange from that certificate, is easily available: just connect to the server and it'll send it to you. Therefore if you're worried about malware, how is it that the malware C&amp;amp;C server won't just reply with a certificate for a reputable site? The malware client, after all, can be crafted to compensate for any such trickery. Unless the proxy is interposing and performing the cryptographic checks, then the server certificate isn't tightly bound to anything at all and the whole reason for the design seems flawed.&lt;/p&gt;
&lt;p&gt;On that subject, I'll briefly mention the fact that HTTPS proxies &lt;a href=&quot;https://jhalderm.com/pub/papers/interception-ndss17.pdf&quot;&gt;aren't always so great at performing cryptographic checks&lt;/a&gt;. (We recently notified a major proxy vendor that their product didn't appear to validate certificates at all. We were informed that they &lt;em&gt;can&lt;/em&gt; validate certificates, it's just disabled by default. It's unclear what fraction of their customers are aware of that.)&lt;/p&gt;
&lt;p&gt;Onto the second claim of the article: that TLS 1.3 is incompatible with PCI-DSS (credit card standards) and HIPAA (US healthcare regulation). No reasoning is given for the claim, so let's take a look:&lt;/p&gt;
&lt;p&gt;Many PCI-DSS compliant systems use TLS 1.2, primarily stemming from &lt;a href=&quot;https://www.pcisecuritystandards.org/document_library?category=pcidss&amp;amp;document=pci_dss&quot;&gt;requirement 4.1&lt;/a&gt;: “use strong cryptography and security protocols to safeguard sensitive cardholder data during transmission over open, public networks, including a) only trusted keys and certificates are accepted, b) the protocol in use only supports secure versions or configurations, and c) the encryption strength is appropriate for the encryption methodology in use”.&lt;/p&gt;
&lt;p&gt;As you can see, the PCI-DSS requirements are general enough to adapt to new versions of TLS and, if TLS 1.2 is sufficient, then TLS 1.3 is better. (Even those misunderstanding aspects of TLS 1.3 are saying it's stronger than 1.2.)&lt;/p&gt;
&lt;p&gt;HIPAA is likewise, &lt;a href=&quot;https://www.law.cornell.edu/cfr/text/45/164.312&quot;&gt;requiring&lt;/a&gt; that one must “implement technical security measures to guard against unauthorized access to electronic protected health information that is being transmitted over an electronic communications network”.&lt;/p&gt;
&lt;p&gt;TLS 1.3 is enabled in Chrome 65, which is rolling out now. It is a major improvement in TLS and lets us eliminate &lt;a href=&quot;https://jhalderm.com/pub/papers/forward-secrecy-imc16.pdf&quot;&gt;session-ticket encryption keys&lt;/a&gt; as a mass-decryption threat, which both PCI-DSS- and HIPAA-compliance experts should take great interest in. It does not require special measures by proxies—they need only implement TLS 1.2 correctly.&lt;/p&gt;
</description>
<pubDate>Sun, 11 Mar 2018 21:44:11 +0000</pubDate>
<dc:creator>wglb</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.imperialviolet.org/2018/03/10/tls13.html</dc:identifier>
</item>
<item>
<title>Fountain pen inks: the good, the bad, and the ugly (2011)</title>
<link>http://richardspens.com/ref/care/inks.htm</link>
<guid isPermaLink="true" >http://richardspens.com/ref/care/inks.htm</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;meta http-equiv=&quot;content-language&quot; content=&quot;en&quot; /&gt;&lt;title&gt;Inks: The Good, the Bad, and the Ugly&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../../css/pens.css&quot; /&gt;&lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;&lt;meta name=&quot;generator&quot; content=&quot;BBEdit 11.6&quot; /&gt;&lt;meta name=&quot;author&quot; content=&quot;Copyright © RichardsPens.com, last edited 12 June 2017&quot; /&gt;&lt;meta name=&quot;description&quot; content=&quot;Feed your fountain pen a steady diet of fountain pen ink. Period. This injunction may seem obvious, but it is not quite so obvious as it appears.&quot; /&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;317.6532912743&quot;&gt;

&lt;p class=&quot;tag&quot;&gt; (&lt;em&gt;This page revised June 12, 2017&lt;/em&gt;) &lt;/p&gt;
&lt;p class=&quot;def ctr&quot;&gt;[  &lt;strong&gt;&lt;a href=&quot;http://richardspens.com/ref/00_refp.htm&quot; title=&quot;Go to the Reference Info index page.&quot;&gt;Reference Info Index&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&quot;http://richardspens.com/ref/glossary/00_gls.htm&quot; title=&quot;Go to the Glossopedia.&quot;&gt;Glossopedia&lt;/a&gt;&lt;/strong&gt;  ]&lt;/p&gt;
&lt;hr class=&quot;tag rt10&quot; /&gt;&lt;p&gt;&lt;strong&gt;Fountain pens require ink. But what kind of ink? And why? And how?&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;stt&quot;&gt;First Principles&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://richardspens.com/images/ref/care/fp_ink.png&quot; width=&quot;120&quot; height=&quot;120&quot; class=&quot;pad4x0&quot; align=&quot;right&quot; alt=&quot;Fountain pen ink bottle&quot; /&gt;&lt;img src=&quot;http://richardspens.com/images/pixel.gif&quot; width=&quot;8&quot; height=&quot;126&quot; align=&quot;right&quot; alt=&quot;&quot; /&gt;&lt;strong class=&quot;grn&quot;&gt;GOOD:&lt;/strong&gt; Feed your fountain pen a steady diet of fountain pen ink. &lt;strong&gt;Period.&lt;/strong&gt; This injunction may seem obvious, but it is not quite so obvious as it appears. Fountain pen ink is a solution. To the chemist, a solution consists of a fluid in which other substances are dissolved (the solvent), and the dissolved substances (the solutes). The solutes are actually reduced to the molecular level, the same as the solvent, and all the different molecules are mixed up evenly to create a uniform fluid, a pure liquid that contains no microscopic particles of solid material. The solvent in fountain pen ink is distilled water, and the solutes are dyes, wetting agents, and mold inhibitors. Because it’s a solution, fountain pen ink contains no solid matter at all. This is an important point to remember.&lt;/p&gt;
&lt;p&gt;&lt;strong class=&quot;ORG&quot;&gt;BAD:&lt;/strong&gt; Certain manufacturers of artists’ inks and paints, such as Winsor &amp;amp; Newton, market some of their calligraphy inks as being suitable for fountain pens. Don’t believe it. Calligraphy inks are pigmented; that is, they derive their color not from dissolved dyes but instead from finely ground solid matter — like paint. In theory, the pigment in these inks is so fine that it will remain in suspension under the impetus of &lt;a href=&quot;https://en.wikipedia.org/wiki/Brownian_motion&quot; target=&quot;_blank&quot;&gt;Brownian motion&lt;/a&gt; in the liquid component of the ink. Unfortunately, this does not always happen. In a calligrapher’s dip pen any separation of solid components is not a problem because the nib is easy to remove and clean and because there is no feed with hidden passages to clog. &lt;img src=&quot;http://richardspens.com/images/ref/feeds/evolution/stipula.jpg&quot; alt=&quot;&quot; width=&quot;227&quot; height=&quot;70&quot; align=&quot;left&quot; /&gt; But as the ink passes through the very fine fissures of a fountain pen’s feed and the slit of the nib, pigment particles come in contact with the walls of these passages and are attracted to the surfaces. A layer of pigment builds up and will inevitably clog the feed, the nib, or both. The modern plastic feed shown here illustrates the myriad nooks and crannies into which ink can find its way before drying out to clog the works.&lt;/p&gt;
&lt;p&gt;Note, however, that a new type of ink has appeared in the past few years. Called nanoparticle ink, it contains pigment — but the pigment is much more finely ground than in traditional calligraphy inks; so finely ground, in fact, that Brownian motion can easily keep it suspended. In general, nanoparticle inks can be considered safe for fountain pens, but I rate them as high-maintenance inks (see below) because the very existence of particulate matter brings with it more risk of clogging than is present with inks that are true solutions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://richardspens.com/images/ref/care/india_ink.png&quot; width=&quot;120&quot; height=&quot;120&quot; class=&quot;pad4x0&quot; align=&quot;right&quot; alt=&quot;Fountain pen ink bottle&quot; /&gt;&lt;img src=&quot;http://richardspens.com/images/pixel.gif&quot; width=&quot;8&quot; height=&quot;126&quot; align=&quot;right&quot; alt=&quot;&quot; /&gt;There are other inks, less obviously troublesome, that you should avoid. Right at the top of this list is inkjet-printer ink. This stuff might seem appealing; refills are inexpensive, and the colors — especially the ones rated for 70 years or longer — are remarkably permanent. But there are some very bad things in inkjet ink. It frequently uses pigment, not dye, for color, and there are also particulate resins for better adhesion. Various glycols (diethylene, alkylene, &lt;em&gt;etc.&lt;/em&gt;) enhance penetration; these substances can exacerbate bleeding and feathering in a fountain pen. They also retard evaporation, making the ink take longer to dry on the paper.&lt;/p&gt;
&lt;p&gt;Another kind of ink whose potential for disaster is not immediately obvious is whiteboard marker ink. Like inkjet ink, this stuff is based on pigment, not dye, and that means it can and will clog feeds. It also contains particulate resins for adhesion as well as various alcohols (such as ethanol and 2-propanol) that can damage the feed and barrel in some types of fountain pens.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;300&quot; height=&quot;134&quot; src=&quot;http://richardspens.com/images/ref/care/inks/whiteout-feed.jpg&quot; alt=&quot;Nib and feed with white-out&quot; align=&quot;left&quot; /&gt;&lt;strong class=&quot;red&quot;&gt;UGLY:&lt;/strong&gt; India ink, white-out, and other similar fluids are certain death to fountain pens. These fluids are pigmented, and they are frequently not water based. (India ink is water based; but it also contains gum arabic for permanence, and it takes great pleasure in gumming up fountain pens.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;From an email I received from Mike and Linda Kennedy at &lt;a href=&quot;http://www.indy-pen-dance.com/&quot; title=&quot;Visit this site.&quot; target=&quot;_blank&quot;&gt;Indy-Pen-Dance&lt;/a&gt;:&lt;/strong&gt; &lt;em&gt;“The nib and feed in this image came out of a pen in which white-out was used. Just separating these parts required several rounds in an ultrasonic cleaner with Rapido-eze, and that’s when we took this picture. We were able to get the mess cleaned up, but it was an expensive learning experience for the owner of the pen. Believe it or not, we have received (and repaired) fountain pens that had been filled with latex paint and model paint!”&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;stt&quot;&gt;Maintenance: Low, Medium, or High&lt;/p&gt;
&lt;p&gt;Even when you’re scrupulous about using fountain pen ink only, your pen can experience ink-related problems. These difficulties happen because even the best inks are not perfect; and when pen maintenance is also imperfect, writing performance can suffer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using fountain pens, like shaving with a cut-throat razor, is partly a sensual experience, and it involves ritual.&lt;/strong&gt; Maintaining your pens is part of the ritual. Every ink requires you to commit a certain amount of time and effort to using your pens. Your choice of inks will depend on how much fiddling you enjoy balanced against how much you are willing to tolerate. But not all inks require the same amount of involvement; the less trouble a given ink requires, the higher its &lt;em&gt;usability score.&lt;/em&gt; An ink’s usability score is a composite rating, so to speak, that reflects the amount of time and effort you have to put into using that ink. The composite is built on factors such as these:&lt;/p&gt;
&lt;ul class=&quot;ball def&quot; readability=&quot;11.947800869985&quot;&gt;&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Flow.&lt;/strong&gt; Inks that flow well — but not too well — score high because they don’t make the pen fight back when you’re trying to write with it. Inks with good flow will start readily and will flow evenly, without exhibiting a tendency to skip or to produce dry patches. Inks that flow too well often tend to feather or bleed, especially on cheap papers, and this sort of excessive flow lowers an ink’s score.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;Staining.&lt;/strong&gt; Inks that stain little or not at all score high because they don’t make you disassemble and scrub out your transparent or partially transparent pens so you can see through them or polish the plating off your two-tone nibs trying to keep them bright. The color of a given ink affects its staining tendency; reds and other colors containing red dyes have a high tendency to stain (and therefore somewhat lower scores), while pure blues — especially washable ones — stain little or not at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Lubrication.&lt;/strong&gt; Inks that lubricate well score high because they give you a smooth glide instead of making your nib feel dry and gritty so that you have to push harder. Some users refer to inks that lubricate well as being “greasy,” but there is no actual grease in fountain pen ink.&lt;/p&gt;
&lt;blockquote class=&quot;nt&quot;&gt;
&lt;table class=&quot;note&quot; readability=&quot;4&quot;&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;note&quot;&gt;&lt;a href=&quot;javascript:showPop('ref/icons.htm','icons_pop',500,530,true);&quot; title=&quot;Read about these symbols.&quot;&gt;&lt;img src=&quot;http://richardspens.com/images/icons/lg/info.png&quot; alt=&quot;Note&quot; width=&quot;71&quot; height=&quot;70&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;note&quot;&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;em&gt;Lubrication,&lt;/em&gt; as used here, does not refer to the addition of special substances for the ostensible purpose of lubricating the pen’s piston or other filler parts. It refers to an inherent quality of all fountain pen inks, a quality that depends upon the choices made with regard to the ink’s basic components.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;Clogging.&lt;/strong&gt; Inks that don’t clog score high because they don’t make you disassemble your pen to floss the nib and feed. Typically, the more intensely saturated the color is, the greater are the dye load and the concomitant risk of clogging.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.9405940594059&quot;&gt;
&lt;p&gt;&lt;strong&gt;“Creepability.”&lt;/strong&gt; This is a handy made-up word that refers to an ink’s tendency to display &lt;a href=&quot;http://richardspens.com/ref/glossary/N.htm#nib_creep&quot;&gt;nib creep&lt;/a&gt;. Inks that tend not to creep score higher because they don’t make you take out a tissue and wipe the nib to no avail every few minutes. This also raises your spirits by reducing your stress level.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Waterman inks were the first high-scoring (low-maintenance) inks I discovered. On a scale of 1 to 10, I rate Waterman inks a solid 10. They flow remarkably well under a broad variety of conditions in almost any pen. They lubricate exceptionally well, imparting a glassy-smooth ride. They are not heavily saturated, and the dyes in them tend to be relatively nonstaining. Waterman Mysterious Blue is almost stain free. But Waterman’s palette is not the most inspiring in the world. Recently Diamine, which has been making inks since 1864, appeared in the marketplace with a much more exciting range of colors and with characteristics very similar to those of Waterman, so that now I rely almost entirely on these two brands, the majority of whose colors sport very high scores. Some Diamine colors, however, especially their reds and colors containing red dyes, such as pinks, violets, oranges, and browns, appear more prone to clogging issue, and these inks have much lower scores. As it happens, I use Skrip Red (made in Slovenia) in one pen at my workbench, and it’s remarkably good. Its being red reduces its score slightly, but not enough to be a major consideration for me.&lt;/p&gt;

&lt;p&gt;Toward the middle of the scale fall the vast majority of inks, including Aurora, Pelikan, Parker Quink (except the black, which scores surprisingly low because it exhibits serious flow issues in Parker pens), J. Herbin, Lamy, Omas, Namiki, and many more.&lt;/p&gt;

&lt;p&gt;On the high-maintenance (low scoring) end of the scale we find several brands of very heavily saturated “boutique” brands, most of which score in the range from 3 to 5. As described earlier, fountain pen ink is a solution; the solvent is water, and the solutes are the dyes, the surfactant, and the fungicide. The nature of chemical solutions is that as the temperature declines, the solvent can keep less of the solutes in solution. The more solute you start with, the more likely it is that some of it will precipitate out (come out of solution) as time passes and conditions such as humidity and temperature vary. As the dye comes out of solution it precipitates onto the interior surfaces of the pen — particularly the fissures in the feed. This leads eventually to a clog. See the &lt;strong&gt;Science Experiment&lt;/strong&gt; to the right.&lt;/p&gt;
&lt;p&gt;Some boutique inks also score lower because of differences in flow and drying rate among their various colors. Private Reserve Sherwood Green is a lovely color, but I give it a score of 2 because it sometimes never dries. (I've come back six months after writing something with it and smeared it while handling the paper.) On the other hand, Private Reserve Tanzanite, sometimes called “the Ex-Lax of inks,” stains badly and flows far too readily. It also scores a 2 or a 3. If you like the color of Tanzanite, try mixing Waterman Serenity Blue and Waterman Tender Purple in equal parts. The resulting color, which I have dubbed “Blurple,” is virtually indistinguishable from Tanzanite.&lt;/p&gt;
&lt;p&gt;In the same way that a heavily saturated ink can precipitate in your pens, it can also do so in the bottle. In fact, if you habitually leave ink bottles open for extended periods, the water gradually evaporates, rendering the solution more saturated than the manufacturer intended. Even otherwise “safe” inks can do this. Do not shake an ink bottle before filling your pens from it — and if you ever see a sludge in the bottom of an ink bottle, the wisest course if you want to avoid clogging is to discard the contents.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let it be clearly understood that the designation of a given ink as high maintenance (by me or by anyone else) should not be construed as a warning to avoid said ink.&lt;/strong&gt; With proper care, including more frequent flushing, use in opaque pens only, adjustment of nibs for richer flow, &lt;em&gt;etc.,&lt;/em&gt; these inks are eminently usable, so long as you use them in pens that like them and give them the attention to maintenance that they need. &lt;strong&gt;Please note also that I do not have a documented scale of maintenance levels.&lt;/strong&gt; This is all a gut-feel sort of thing, based on experience and anecdotal information.&lt;/p&gt;
&lt;blockquote class=&quot;ca&quot;&gt;
&lt;table class=&quot;note&quot; readability=&quot;12.28080857282&quot;&gt;&lt;tr readability=&quot;44.210910862153&quot;&gt;&lt;td class=&quot;note&quot;&gt;&lt;a href=&quot;javascript:showPop('ref/icons.htm','icons_pop',500,530,true);&quot; title=&quot;Click to read about these symbols.&quot;&gt;&lt;img src=&quot;http://richardspens.com/images/icons/lg/caution.png&quot; alt=&quot;CAUTION&quot; width=&quot;80&quot; height=&quot;70&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;note&quot; readability=&quot;42.245981490502&quot;&gt;
&lt;p&gt;CAUTION&lt;/p&gt;
&lt;strong class=&quot;def&quot;&gt;For many years, I’ve tried not to say anything negative about particular inks, but I am now convinced that there are several problems that can be traced to the use of Private Reserve or Noodler’s inks. Among these problems are flow issues and clogging, mold, staining, and actual destruction of pens.&lt;/strong&gt;
&lt;p&gt;Along with certain other “boutique” inks, these two brands are more &lt;a href=&quot;http://richardspens.com/ref/care/inks.htm#clog&quot;&gt;prone to clog&lt;/a&gt; than more conventional inks because of the heavy dye load they use to produce their deeply saturated colors. Also, some Private Reserve inks behave just like phthalocyanine- and quinacridone-based watercolor paints, which use pigments for their color and are more likely to produce clogs than saturated dye-based inks.&lt;/p&gt;
&lt;p&gt;Noodler’s “bulletproof” inks contain a component that causes the dye in the ink to bond chemically with the paper. Unfortunately, this bonding agent is particulate, not in solution. It settles, and you have to shake the bottle to disperse it when filling a pen. It also settles in the pen, and it can cause clogs. To combat (but not cure) this tendency, Noodler’s adds extra surfactant (wetting agent), which can cause bleeding and feathering.&lt;/p&gt;
&lt;p&gt;Some other Noodler’s inks, whose identities I have not yet pinned down, will reduce latex sacs to goo. This destruction occurs without the presence of metal; it is not the “gummy sac” problem that is caused by improperly formulated latex.&lt;/p&gt;
&lt;p&gt;Private Reserve inks are known to have had &lt;a href=&quot;http://richardspens.com/ref/care/inks.htm#mold&quot;&gt;mold issues&lt;/a&gt; on multiple occasions, and it is not clear to me that the problem has yet been solved for good.&lt;/p&gt;
&lt;p&gt;Various Private Reserve and Noodler’s inks are known for staining pens, and at least some Noodler’s inks are known to &lt;a href=&quot;http://richardspens.com/ref/care/inks.htm#dinner&quot;&gt;destroy pens&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Experience has shown that Noodler’s Eel inks often do not flow properly in pens that work with virtually any other kind of ink. I see no need for an ink with the “lubricating” properties of Eel, and I do not recommend its use. (If pen makers thought this sort of ink was a good idea, they would be selling it and taking the profits to the bank.)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/blockquote&gt;

&lt;p class=&quot;stt&quot;&gt;Inks with a Non-Neutral pH: Your Pen Could Be on the Menu&lt;/p&gt;
&lt;p&gt;Some ink manufacturers state that the pH (degree of acidity or alkalinity) of an ink is not a factor in whether that ink can damage pens. This assertion appears to be untrue.&lt;/p&gt;
&lt;p&gt;Strongly alkaline inks can eat some organic resins, especially celluloid and Omas’ vegetal resin — which is very much like celluloid. (Omas’ own inks tend to be highly acidic.) Parker made the “51” of acrylic because its super-quick drying “51” ink turned out to like noshing on celluloid pens. (The problem was largely due to the ink’s alkalinity that contributed to quick drying by eating into the paper’s cellulose fibers.) Noodler’s Polar inks seem to be similarly harmful, at least to celluloid; it appears that these inks leach the camphor out of the celluloid. Because camphor is the plasticizing and stabilizing agent that turns guncotton into celluloid, the ink breaks down the celluloid and could conceivably return it to its original explosive state.&lt;/p&gt;
&lt;p&gt;Most Japanese inks are alkaline. Alkaline inks are hostile to latex. I have experimental evidence that at least some of the Pilot Iroshizuku colors will destroy latex sacs. For this reason, I recommend that you avoid using Japanese inks in sac-filling pens as well as in pens that are made of organic resins and use the barrel for the ink reservoir (as described in the preceding paragraph).&lt;/p&gt;
&lt;p&gt;More ugliness is contained in bottles labeled Parker “51” or Parker SuperChrome. These are vintage inks, but there are still some bottles in existence. &lt;em&gt;Don’t be tempted to use them!&lt;/em&gt; Parker introduced the super fast-drying “51” ink in 1941 for use with the “51” pen — and no others. The problem was that “51” ink ate pens. It didn’t eat the “51”, but it did cause the diaphragm in the pen’s Vacumatic filling system to ossify very rapidly. With the 1948 introduction of the Aero-metric “51”, Parker withdrew ”51” ink, replacing it with SuperChrome. The newer ink wasn’t as hostile to pens as the old, but it still had a pH of about 12, and it wasn’t good for them, and Parker withdrew it in 1956. The photo below shows what happened to the sterling silver breather tube from a “51” that had been used with SuperChrome.&lt;/p&gt;
&lt;center&gt;&lt;img width=&quot;400&quot; height=&quot;172&quot; src=&quot;http://richardspens.com/images/ref/care/inks/bt_swiss_cheese_2.jpg&quot; alt=&quot;Swiss cheesed breather tube&quot; /&gt;&lt;/center&gt;
&lt;p&gt;Among modern inks, Noodler’s Baystate colors stain terribly and are are also corrosive enough to destroy some plastics, including the materials from which Pilot and Lamy feeds are made and the resins used in the barrels of some makers’ piston-filling pens. (See the photos below, showing an undamaged Vanishing Point feed and one that has begun to die due to exposure to Baystate Blue, which has a measured pH of 4.53.)&lt;/p&gt;
&lt;center&gt;&lt;img class=&quot;hairline&quot; width=&quot;600&quot; height=&quot;225&quot; src=&quot;http://richardspens.com/images/ref/care/inks/vp_feeds.jpg&quot; alt=&quot;Feeds&quot; /&gt;&lt;/center&gt;
&lt;p&gt;Some Noodler’s inks do not play nicely together; this means that you cannot mix them. The Pelikan M1000 shown below was sent to Chartpak, Pelikan’s U.S. distributor, for repair. To remove the stuck-on cap, the Chartpak repairer had to disassemble it; then the pieces could be popped off the barrel. The section had come loose from the barrel, and the interior of the barrel was badly stained and seriously cracked. Because the pen was a gift to its owner from a now-deceased relative, the repair department manager at Chartpak sent it to Mike Kennedy at Indy-Pen-Dance in the hope that it could be saved instead of simply being thrown in the trash. No such luck. It is not known what exact inks had been used in it beyond that they were all Noodler’s inks that the owner mixed to produce a custom color, but what they did to the pen is horrifying. The pen was not reparable.&lt;/p&gt;
&lt;center&gt;&lt;img class=&quot;hairline&quot; src=&quot;http://richardspens.com/images/ref/care/inks/m1000_damaged_by_noodlers.jpg&quot; width=&quot;400&quot; height=&quot;295&quot; alt=&quot;Pen body&quot; /&gt;&lt;/center&gt;
&lt;blockquote class=&quot;nt&quot;&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;stt&quot;&gt;Creeping Crud: the Dreaded SITB, or Slime in the Bottle&lt;/p&gt;
&lt;p&gt;Sometimes an ink can undergo an adverse chemical reaction among its various components: the fungicide might react slowly with the dye and — over time — produce a slimy film or threadlike bits of slime. This is bad news. I’ve seen suggestions that filtering the slime out will leave the remaining ink usable, but it’s not really a good idea. There is no way to tell what the chemistry of the ink is anymore; if the reaction involved the fungicide, for example, the ink no longer contains sufficient mold inhibitor, and it can develop mold very suddenly — in the bottle or in your pen! One visit to a pen repairer to have the pen cleaned out will cost you at least the price of two bottles of ink. Is it worth the risk?&lt;/p&gt;

&lt;p class=&quot;stt&quot;&gt;More Crud: Mold&lt;/p&gt;
&lt;p&gt;To a chemist, the aniline dyes used in fountain pen inks are organic in nature, and the very presence of these dyes in ink can give rise to mold because to mold they look like food. Mold spores are everywhere around us; every time a bottle of ink is opened, some spores find their way from the atmosphere into the ink. Inks contain chemicals to inhibit mold growth, but not all inks contain enough mold inhibitor.&lt;/p&gt;
&lt;p class=&quot;stt&quot;&gt;Your Grandfather’s Ink&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://richardspens.com/images/ref/care/iron_gall_ink.png&quot; width=&quot;120&quot; height=&quot;120&quot; class=&quot;pad4x0&quot; align=&quot;right&quot; alt=&quot;Iron gall ink for fountain pens&quot; /&gt;&lt;img src=&quot;http://richardspens.com/images/pixel.gif&quot; width=&quot;8&quot; height=&quot;126&quot; align=&quot;right&quot; alt=&quot;&quot; /&gt;I’ve left one particular type of ink until the end. &lt;a href=&quot;http://richardspens.com/ref/glossary/I.htm#iron_gall_ink&quot;&gt;Iron gall ink&lt;/a&gt; was invented more than 1500 years ago. It was used by innumerable nameless scribes to copy sacred manuscripts; by great secular writers and thinkers such as Voltaire, Shakespeare, and Leibniz; and by ordinary people. When fountain pens came into existence, iron gall ink made the leap to the new technology, and it is still in use today because it is a very permanent ink. But it has a couple of drawbacks. First, but of less serious consequence for most of us, is its reputation for destroying, over the course of centuries, the paper on which it is used. Of more concern to you, as a fountain pen user, is that it is rather acidic: it can corrode metal pen parts such as steel nibs and cartridge nipples, and plated trim rings — every part that comes in contact with it. Only gold alloys are safe from its ravages; if your pen features a gold nib and has no other metal parts that are continually exposed to the ink (such as a metal cartridge nipple), you can use iron gall inks such as Montblanc Blue-Black and Diamine Registrar’s ink with impunity.&lt;/p&gt;
&lt;p&gt;You should note that iron gall ink is not the only acidic ink that is currently available. Your best course, if you’re concerned about the pH of your inks, is to look for inks that advertise neutral-pH formulas.&lt;/p&gt;
&lt;p class=&quot;stt&quot;&gt;The Bottom Line&lt;/p&gt;
&lt;p&gt;Be sensible. Know what inks you are using and how to handle them; and take good care of your pens to ensure that they’ll deliver the writing performance that was designed into them. If you’re like most collector/users, you have more pens than you want to use at one time — when you take a pen out of your rotation, flush it thoroughly (see &lt;strong&gt;&lt;a href=&quot;http://richardspens.com/ref/care/care.htm&quot; title=&quot;Read this article.&quot;&gt;Care and Feeding: How to Pamper Your Pens&lt;/a&gt;&lt;/strong&gt;), and let it dry uncapped overnight before putting it into your pen chest for a bit of well-earned relaxation.&lt;/p&gt;
&lt;div class=&quot;tag&quot; id=&quot;notes&quot;&gt;Notes:
&lt;ol readability=&quot;5.4035087719298&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;The discussion of solutions in this article is necessarily simplified. For example, it speaks of liquids, but gases and solids can also form solutions. For example, fish breathe by extracting dissolved oxygen gas from the liquid water in which they live.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.8127572016461&quot;&gt;
&lt;p&gt;For those of a curious disposition, the destruction of paper by iron gall ink is simply a greatly accelerated form of natural decomposition, catalyzed by active soluble salts remaining in the ink (frequently due to a lack of understanding as to the correct form of iron sulfate to be used in preparing the ink). Properly balanced ink does not contain excess soluble salts and is, for all practical purposes, not harmful. For more information, see the Glossopedia entry on &lt;a href=&quot;http://richardspens.com/ref/glossary/I.htm#iron_gall_ink&quot;&gt;iron gall ink&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;hr class=&quot;rt10&quot; /&gt;&lt;p&gt;&lt;span class=&quot;tag&quot;&gt;The information in this article is as accurate as possible, but you should not take it as absolutely authoritative or complete. If you have additions or corrections to this page, please consider &lt;a href=&quot;mailto:richard@richardspens.com?subject=Pen%20reference%20information&quot; title=&quot;Send email about correcting or enhancing these reference pages.&quot;&gt;sharing them with us&lt;/a&gt; to improve the accuracy of our information.&lt;/span&gt; &lt;/p&gt;

&lt;/body&gt;</description>
<pubDate>Sun, 11 Mar 2018 20:43:02 +0000</pubDate>
<dc:creator>fanf2</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://richardspens.com/ref/care/inks.htm</dc:identifier>
</item>
<item>
<title>Secure Access to 100 AWS Accounts</title>
<link>https://segment.com/blog/secure-access-to-100-aws-accounts/</link>
<guid isPermaLink="true" >https://segment.com/blog/secure-access-to-100-aws-accounts/</guid>
<description>&lt;p&gt;Segment receives billions of events from our customers daily and has grown in to dozens of AWS accounts. Expanding in to many more accounts was necessary in order to best align with our &lt;a href=&quot;https://segment.com/blog/segment-and-the-gdpr/&quot;&gt;&lt;u&gt;GDPR and security initiatives&lt;/u&gt;&lt;/a&gt;, but it comes at a large complexity cost. In order to continue scaling gracefully we are investing in building tooling for employees to use with many accounts, and centrally managing employee access to AWS with terraform and our identity provider.&lt;/p&gt;
&lt;p&gt;Segment began in a single AWS account and last year finished our move to a dev, stage, prod, and “ops” accounts. For the past few months we’ve been growing at about one new AWS account every week or two, and plan to continue this expansion in to per-team and per-system accounts. Having many “micro-accounts” provides superior security isolation between systems, and reliability benefits by limiting the blast radius of AWS rate-limits.&lt;/p&gt;
&lt;img src=&quot;https://assets.contents.io/asset_SBNs9jcQ.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;When Segment had only a few accounts, employees would log in to the AWS “ops” account using their email, password, and 2FA token. Employees would then connect to the &lt;code&gt;ops-admin&lt;/code&gt; role in the dev, stage, and prod accounts using the &lt;code&gt;AssumeRole&lt;/code&gt; api.&lt;/p&gt;
&lt;img src=&quot;https://assets.contents.io/asset_47Ijhnjh.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;Segment now has a few dozen AWS accounts and plans to continue adding more! In order to organize this expansion we needed a mechanism to control our accounts, which accounts employees have access to, &lt;em&gt;and&lt;/em&gt; each employee’s permissions in each account. &lt;/p&gt;
&lt;p&gt;We also &lt;em&gt;hate&lt;/em&gt; using AWS API keys when we don’t absolutely have to so &lt;em&gt;we moved to a system where no employees have any AWS keys&lt;/em&gt;. Instead, employees only access AWS through our identity provider. Today we have zero employees with AWS keys and there is no future need for employees to have a personal AWS key. This is a massive security win!&lt;/p&gt;

&lt;p&gt;Segment uses Okta as an identity provider, and consulted their &lt;a href=&quot;https://support.okta.com/help/servlet/fileField?retURL=/help/articles/Knowledge_Article/Amazon-Web-Services-and-Okta-Integration-Guide&amp;amp;entityId=ka0F0000000MeyyIAC&amp;amp;field=File_Attachment__Body__s&quot;&gt;&lt;u&gt;integration guide&lt;/u&gt;&lt;/a&gt; for managing multiple AWS accounts, but improved it with a minor change for better employee experience. The integration guide recommends connecting the identity provider to each AWS account but this breaks AWS’ built in support for account switching and was more complicated to audit which teams had access to which roles.&lt;/p&gt;
&lt;p&gt;Instead, employees use our identity provider to connect to our “ops” account and then use the simple token service &lt;code&gt;assume-role&lt;/code&gt; API to connect to each account they have access to. Using our identity provider, each team is assigned to a different role in our hub account, and each team role has access to different roles in each account. This is the classic “hub-and-spoke” architecture.&lt;/p&gt;
&lt;img src=&quot;https://assets.contents.io/asset_CtinO8OV.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;In order to make maintaining our hub-and-spoke architecture simple, we built a terraform module for creating a role in our spoke accounts, and a separate terraform module for creating a role in our hub account. Both modules simply create a role and attach a policy ARN to it, which is part of the module’s input.  &lt;/p&gt;
&lt;p&gt;The &lt;em&gt;only&lt;/em&gt; difference between the modules are their trust relationships. The hub role module allows access from our identity provider while the spoke module only allow access from the hub account. Below is module we use for allowing access to a hub role from our Identity provider. &lt;/p&gt;
&lt;pre data-language=&quot;bash&quot;&gt;
&lt;code&gt;resource &quot;aws_iam_role&quot; &quot;okta-role&quot; {
  name               = &quot;${var.name}&quot;
  assume_role_policy = &amp;lt;&amp;lt;EOF
{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {   
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Principal&quot;: {
        &quot;Federated&quot;: &quot;${var.idp_arn}&quot;
      },  
      &quot;Action&quot;: &quot;sts:AssumeRoleWithSAML&quot;,
      &quot;Condition&quot;: {
        &quot;StringEquals&quot;: {
          &quot;SAML:aud&quot;: &quot;https://signin.aws.amazon.com/saml&quot;
        }   
      }   
    }   
  ]
}
EOF
}
resource &quot;aws_iam_role_policy_attachment&quot; &quot;okta-attach&quot; {
  policy_arn = &quot;${var.policy_arn}&quot;
  role       = &quot;${aws_iam_role.okta-role.name}&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In order to provide each team with granular access to only the resources the teams need we create a role for each team in the hub account using our hub role terraform module. These roles &lt;em&gt;mostly&lt;/em&gt; contain IAM policies for &lt;code&gt;sts:AssumeRole&lt;/code&gt; in to other accounts but it is also possible to give granular access in our hub role too.&lt;/p&gt;
&lt;p&gt;One concrete and simple example of a granular policy is our Financial Planning and Analysis team’s role, &lt;a href=&quot;https://segment.com/blog/the-million-dollar-eng-problem/&quot;&gt;&lt;u&gt;who keeps close watch on our AWS spend&lt;/u&gt;&lt;/a&gt;. Our FP&amp;amp;A team &lt;em&gt;only&lt;/em&gt; has access to billing information and information about our reserved capacity.&lt;/p&gt;
&lt;pre data-language=&quot;bash&quot;&gt;
&lt;code&gt;module &quot;fpa&quot; {
  source = &quot;git@github.com:segmentio/terracode-access//modules/okta-role&quot;
  name       = &quot;fpa&quot;
  idp_arn    = &quot;${module.idp.idp_arn}&quot;
  policy_arn = &quot;arn:aws:iam::aws:policy/job-function/Billing&quot;
}
resource &quot;aws_iam_policy&quot; &quot;fpa_reserved_policy&quot; {
  name        = &quot;fpa_reserved_policy&quot;
  description = &quot;FP&amp;amp;A team needs ability to describe our reserved instances.&quot;
  policy = &amp;lt;&amp;lt;EOF
{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {   
      &quot;Action&quot;: [
        &quot;ec2:GetHostReservationPurchasePreview&quot;,
        &quot;ec2:DescribeReservedInstancesModifications&quot;,
        &quot;ec2:DescribeReservedInstances&quot;,
        &quot;ec2:DescribeHostReservations&quot;,
        &quot;ec2:DescribeReservedInstancesListings&quot;,
        &quot;ec2:GetReservedInstancesExchangeQuote&quot;,
        &quot;ec2:DescribeReservedInstancesOfferings&quot;,
        &quot;ec2:DescribeHostReservationOfferings&quot;,
        &quot;ec2:CreateReservedInstancesListing&quot;
      ],  
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Resource&quot;: &quot;*&quot; 
    }   
  ]
}
EOF
}
resource &quot;aws_iam_role_policy_attachment&quot; &quot;fpa_reserved_attach&quot; {
  role       = &quot;fpa&quot;
  policy_arn = &quot;${aws_iam_policy.fpa_reserved_policy.arn}&quot;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The FP&amp;amp;A team does not have access to our spoke accounts, though. One team that needs full access to much of our infrastructure and all of our accounts is our Foundation and Reliability team, who participate in our on-call rotation. We provide both a &lt;code&gt;ReadOnly&lt;/code&gt; role, and an &lt;code&gt;Administrator&lt;/code&gt; role to our foundation team in all of our accounts.&lt;/p&gt;
&lt;pre data-language=&quot;bash&quot;&gt;
&lt;code&gt;module &quot;foundation&quot; {
  source = &quot;git@github.com:segmentio/terracode-access//modules/okta-role&quot;
  name       = &quot;Foundation&quot;
  idp_arn    = &quot;${module.idp.idp_arn}&quot;
  policy_arn = &quot;${aws_iam_policy.foundation-policy.arn}&quot;
}
resource &quot;aws_iam_policy&quot; &quot;foundation-policy&quot; {
  name        = &quot;foundation-policy&quot;
  description = &quot;A policy for foundation to access all AWS accounts, as on-call&quot;
  policy = &amp;lt;&amp;lt;EOF
{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {   
      &quot;Action&quot;: [
        &quot;sts:AssumeRole&quot;
      ],  
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Resource&quot;: [
        &quot;arn:aws:iam::${var.ops_account}:role/AdministratorAccess&quot;,
        &quot;arn:aws:iam::${var.ci_account}:role/AdministratorAccess&quot;,
        &quot;arn:aws:iam::${var.dns_account}:role/AdministratorAccess&quot;,
        &quot;arn:aws:iam::${var.customerdata_account}:role/AdministratorAccess&quot;,
        &quot;arn:aws:iam::${var.customerdata_account}:role/ReadOnly&quot;,
        &quot;arn:aws:iam::${var.dns_account}:role/ReadOnly&quot;,
        &quot;arn:aws:iam::${var.ci_account}:role/ReadOnly&quot;,
        &quot;arn:aws:iam::${var.ops_account}:role/ReadOnly&quot;,
        ...
      ]   
    }   
  ]
}
EOF
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After per-team roles are created for each team in the hub account, employees are assigned to groups that represent their teams in Okta, and each team can then be assigned to their associated role in the hub account.&lt;/p&gt;
&lt;img src=&quot;https://assets.contents.io/asset_5Fu83eg8.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;Okta allows each group to be assigned different IAM roles in the hub account, and using their UI we can assign the FP&amp;amp;A team to our “Amazon Web Services” app, and restrict their access to the fpa role that we created for them in the hub account. &lt;/p&gt;
&lt;p&gt;After building this, we needed the tooling to provide our employees with an amazing engineering experience. Even though this system is far more secure, we wanted it to be just as usable and efficient as our setup with only a handful of AWS accounts.&lt;/p&gt;

&lt;p&gt;One great thing about our old IAM setup was each employee with AWS access could use AWS APIs from their local computer using &lt;code&gt;aws-vault&lt;/code&gt;. Each employee had their IAM user credentials securely stored in their laptop’s keychain. However, accessing AWS entirely through Okta is a massive breaking change for our old workflows.&lt;/p&gt;
&lt;p&gt;Our tooling team took up the challenge and created a (near) drop in replacement for aws-vault which our engineering team used extensively, called &lt;code&gt;aws-okta&lt;/code&gt;. aws-okta is now &lt;a href=&quot;https://github.com/segmentio/aws-okta&quot;&gt;&lt;u&gt;open-source and available on github&lt;/u&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The quality of &lt;code&gt;aws-okta&lt;/code&gt; is the principal reason that Segment engineers were able to smoothly have their AWS credentials revoked. Employees are able to execute commands using the permissions and roles they are granted, exactly like they did when using aws-vault.&lt;/p&gt;
&lt;pre data-language=&quot;text&quot;&gt;
&lt;code&gt;$ aws-okta exec hub -- aws s3 ls s3://&amp;lt;some-bucket&amp;gt;

2018/02/08 15:40:22 Opening keychain /Users/ejcx/Library/Keychains/aws-okta.keychain
INFO[0004] Sending push notification...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There is a lot of new complexity handled with aws-okta that is is not able to be handled in aws-vault. While aws-vault uses IAM user credentials to run commands, aws-okta uses your Okta password (stored in your keychain) to authenticate with Okta, waits for a response to a push notification for 2FA, and finally provides AWS with a SAML assertion to retrieve temporary credentials.&lt;/p&gt;
&lt;p&gt;In order to authenticate with Okta, aws-okta needs to know your Okta “application id”. We took the liberty of extending the &lt;code&gt;~/.aws/config&lt;/code&gt; ini file to add in the necessary id.&lt;/p&gt;
&lt;pre data-language=&quot;text&quot;&gt;
&lt;code&gt;[okta]
aws_saml_url = home/amazon_aws/uE2R4ro0Gat9VHg8xM5Y/111&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When Segment had only a few AWS accounts and the &lt;code&gt;ops-admin&lt;/code&gt; role, Segment engineers all shared the same &lt;code&gt;~/.aws/config&lt;/code&gt;. Once each team had access to different accounts and systems, we needed a better system to manage each team’s &lt;code&gt;~/.aws/config&lt;/code&gt;. Our system also needed a way to update the access that employees had quickly, when new accounts and roles are created.&lt;/p&gt;
&lt;p&gt;We decided to integrate this solution closely with prior art that Segment had built. Each team’s config is stored in a git repo that has our company dotfiles in it. Each team can initialize their aws config by using our internal tool called &lt;code&gt;robo&lt;/code&gt;, which is a tool to share helpful commands between employees.&lt;/p&gt;
&lt;pre data-language=&quot;lua&quot;&gt;
&lt;code&gt;$ SEGMENT_TEAM=foundation robo config.aws
✔️ : Your old aws config has been backed up in /tmp/awsconfig-318c16acc2b25bed2eb699e611462744
✔️ : Your aws config was successfully updated.
$ shasum ~/.aws/config                   
c2734b78e470c51a26d8c98e178d4ec2ed1b1b06  /Users/ejcx/.aws/config

$ SEGMENT_TEAM=platform robo aws.config
✔️ : Your old aws config has been backed up in /tmp/awsconfig-d5688401634de0e8b2f48b11377d0749
✔️ : Your aws config was successfully updated.

$ shasum ~/.aws/config                 
283053d6f5a23ca79f16c69856df340b631d3cdf  /Users/ejcx/.aws/config&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This was only possible to add because all Segment engineers already had an environment variable called called &lt;code&gt;SEGMENT_TEAM&lt;/code&gt;, which denotes the team the engineer is a part of. Running &lt;code&gt;robo aws.config&lt;/code&gt; will clone the dotfiles repo, save the old &lt;code&gt;~/.aws/config&lt;/code&gt;, and initialize the most recent config for their team.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-console.html&quot;&gt;&lt;u&gt;AWS bookmarks&lt;/u&gt;&lt;/a&gt; were the primary way that engineers navigated our environment when we utilized fewer accounts. When we got rid of the &lt;code&gt;ops-admin&lt;/code&gt; role, the engineers sign-in bookmarks stopped working. Additionally, AWS bookmarks only support up to five different AssumeRole targets and we now have many more than five accounts.&lt;/p&gt;
&lt;img src=&quot;https://assets.contents.io/asset_ysHLOc1l.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;In order to support having many more accounts, we mostly abandoned bookmarks and instead ensured that &lt;code&gt;aws-okta&lt;/code&gt; supports engineers who needed to switch AWS accounts often. Our previous use of &lt;code&gt;aws-vault&lt;/code&gt; meant many of us were familiar with the &lt;code&gt;aws-vault login&lt;/code&gt; command. We found that adding a login command to aws-okta helped engineers who switched accounts often. &lt;/p&gt;
&lt;img src=&quot;https://assets.contents.io/asset_sJsjOEX2.gif&quot; alt=&quot;&quot;/&gt;&lt;p&gt;After responding to the Duo push notification aws-okta will open a browser and log in to the specified role in only a couple of seconds. This feature is supported by the AWS &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html&quot;&gt;&lt;u&gt;Custom Federated Login&lt;/u&gt;&lt;/a&gt; feature, but feels more like magic when using it. It makes logging in a breeze.&lt;/p&gt;

&lt;p&gt;We expect to be near 50 AWS accounts by the end of this year. The security of having an account be completely closed by default, and the reliability benefits of having isolated per-account rate-limits are compelling.&lt;/p&gt;
&lt;p&gt;This system we have built is plenty robust and usable enough to scale our AWS usage to many hundreds of AWS accounts and many more engineering teams.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Deleting all employee AWS keys was extremely satisfying&lt;/em&gt; from a security perspective, and this alone is a compelling enough reason to integrate your identity provider with your AWS hub account.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Our world-class &lt;a href=&quot;https://boards.greenhouse.io/segment&quot;&gt;&lt;u&gt;engineering organization is hiring&lt;/u&gt;&lt;/a&gt;. If are are excited about building amazing tools to empower our engineers, &lt;a href=&quot;https://segment.com/jobs/922851-Tooling-Engineer&quot;&gt;&lt;u&gt;our tooling team is hiring&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 11 Mar 2018 16:53:48 +0000</pubDate>
<dc:creator>r4um</dc:creator>
<og:title>Secure Access to 100 AWS Accounts</og:title>
<og:url>https://segment.com/blog/secure-access-to-100-aws-accounts/</og:url>
<og:description>Segment receives billions of events from our customers daily and has grown in to dozens of AWS accounts. Expanding in to many more accounts was necessary in order to best align with our GDPR and security initiatives, but it comes at a large complexity cost. In order to continue scaling gracefully we are investing in building tooling for employees to use with many accounts, and…</og:description>
<og:image>https://og-images.segment.com/?author=Evan%20Johnson&amp;title=Secure%20Access%20to%20100%20AWS%20Accounts%0A&amp;cache=0</og:image>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://segment.com/blog/secure-access-to-100-aws-accounts/</dc:identifier>
</item>
<item>
<title>Pixar&amp;#039;s Rules of Storytelling (2013)</title>
<link>https://www.aerogrammestudio.com/2013/03/07/pixars-22-rules-of-storytelling/</link>
<guid isPermaLink="true" >https://www.aerogrammestudio.com/2013/03/07/pixars-22-rules-of-storytelling/</guid>
<description>&lt;p data-imagelightbox=&quot;g&quot;&gt;&lt;img class=&quot;aligncenter wp-image-665 size-medium&quot; src=&quot;https://www.aerogrammestudio.com/wp-content/uploads/2013/03/pixars-22-rules-for-storytelling-800x500.jpg&quot; alt=&quot;Pixar's Rules of Storytelling&quot; width=&quot;800&quot; height=&quot;500&quot; srcset=&quot;https://www.aerogrammestudio.com/wp-content/uploads/2013/03/pixars-22-rules-for-storytelling-800x500.jpg 800w, https://www.aerogrammestudio.com/wp-content/uploads/2013/03/pixars-22-rules-for-storytelling-150x94.jpg 150w, https://www.aerogrammestudio.com/wp-content/uploads/2013/03/pixars-22-rules-for-storytelling.jpg 1440w, https://www.aerogrammestudio.com/wp-content/uploads/2013/03/pixars-22-rules-for-storytelling-1200x750.jpg 1200w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;&lt;br/&gt;Pixar’s Rules of Storytelling were originally tweeted by &lt;span&gt;&lt;a href=&quot;https://twitter.com/lawnrocket&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emma Coats&lt;/a&gt;&lt;/span&gt;, Pixar’s Story Artist. Number 9 on the list – When you’re stuck, make a list of what wouldn’t happen next – is a great one and can apply to writers in all genres.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;You admire a character for trying more than for their successes.&lt;span id=&quot;more-658&quot;/&gt;&lt;/li&gt;
&lt;li&gt;You gotta keep in mind what’s interesting to you as an audience, not what’s fun to do as a writer. They can be very different.&lt;/li&gt;
&lt;li&gt;Trying for theme is important, but you won’t see what the story is actually about til you’re at the end of it. Now rewrite.&lt;/li&gt;
&lt;li&gt;Once upon a time there was ___. Every day, ___. One day ___. Because of that, ___. Because of that, ___. Until finally ___.&lt;/li&gt;
&lt;li&gt;Simplify. Focus. Combine characters. Hop over detours. You’ll feel like you’re losing valuable stuff but it sets you free.&lt;/li&gt;
&lt;li&gt;What is your character good at, comfortable with? Throw the polar opposite at them. Challenge them. How do they deal?&lt;/li&gt;
&lt;li&gt;Come up with your ending before you figure out your middle. Seriously. Endings are hard, get yours working up front.&lt;/li&gt;
&lt;li&gt;Finish your story, let go even if it’s not perfect. In an ideal world you have both, but move on. Do better next time.&lt;/li&gt;
&lt;li&gt;When you’re stuck, make a list of what WOULDN’T happen next. Lots of times the material to get you unstuck will show up.&lt;/li&gt;
&lt;li&gt;Pull apart the stories you like. What you like in them is a part of you; you’ve got to recognize it before you can use it.&lt;/li&gt;
&lt;li&gt;Putting it on paper lets you start fixing it. If it stays in your head, a perfect idea, you’ll never share it with anyone.&lt;/li&gt;
&lt;li&gt;Discount the 1st thing that comes to mind. And the 2nd, 3rd, 4th, 5th – get the obvious out of the way. Surprise yourself.&lt;/li&gt;
&lt;li&gt;Give your characters opinions. Passive/malleable might seem likable to you as you write, but it’s poison to the audience.&lt;/li&gt;
&lt;li&gt;Why must you tell THIS story? What’s the belief burning within you that your story feeds off of? That’s the heart of it.&lt;/li&gt;
&lt;li&gt;If you were your character, in this situation, how would you feel? Honesty lends credibility to unbelievable situations.&lt;/li&gt;
&lt;li&gt;What are the stakes? Give us reason to root for the character. What happens if they don’t succeed? Stack the odds against.&lt;/li&gt;
&lt;li&gt;No work is ever wasted. If it’s not working, let go and move on – it’ll come back around to be useful later.&lt;/li&gt;
&lt;li&gt;You have to know yourself: the difference between doing your best &amp;amp; fussing. Story is testing, not refining.&lt;/li&gt;
&lt;li&gt;Coincidences to get characters into trouble are great; coincidences to get them out of it are cheating.&lt;/li&gt;
&lt;li&gt;Exercise: take the building blocks of a movie you dislike. How d’you rearrange them into what you DO like?&lt;/li&gt;
&lt;li&gt;You gotta identify with your situation/characters, can’t just write ‘cool’. What would make YOU act that way?&lt;/li&gt;
&lt;li&gt;What’s the essence of your story? Most economical telling of it? If you know that, you can build out from there.&lt;/li&gt;
&lt;/ol&gt;&lt;center&gt;&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-client=&quot;ca-pub-9640407720164730&quot; data-ad-slot=&quot;4665341201&quot;/&gt;&lt;br/&gt;&lt;/p&gt;


&lt;div class=&quot;pipdig_p3_related_posts nopin&quot;&gt;
&lt;h3&gt;&lt;span&gt;You may also enjoy:&lt;/span&gt;&lt;/h3&gt;
&lt;/div&gt;




&lt;/center&gt;
</description>
<pubDate>Sun, 11 Mar 2018 15:15:33 +0000</pubDate>
<dc:creator>evo_9</dc:creator>
<og:type>article</og:type>
<og:title>Pixar's 22 Rules of Storytelling | Aerogramme Writers' Studio</og:title>
<og:description>Pixar's Rules of Storytelling were originally tweeted by Emma Coats, a Pixar Story Artist. Rule 1: You admire a character for trying more than for their successes.</og:description>
<og:url>https://www.aerogrammestudio.com/2013/03/07/pixars-22-rules-of-storytelling/</og:url>
<og:image>https://www.aerogrammestudio.com/wp-content/uploads/2013/03/pixars-22-rules-for-storytelling-800x500.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.aerogrammestudio.com/2013/03/07/pixars-22-rules-of-storytelling/</dc:identifier>
</item>
<item>
<title>Vim Clutch – A hardware pedal for improved text editing (2012)</title>
<link>https://github.com/alevchuk/vim-clutch</link>
<guid isPermaLink="true" >https://github.com/alevchuk/vim-clutch</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;h2&gt;VIM Clutch by Aleksandr Levchuk&lt;/h2&gt;
&lt;p&gt;VIM Clutch is a hardware pedal for improved text editing speed for users of the magnificent VIM text editor (&lt;a href=&quot;http://www.vim.org/about.php&quot; rel=&quot;nofollow&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://www.viemu.com/a-why-vi-vim.html&quot; rel=&quot;nofollow&quot;&gt;2&lt;/a&gt;). When the pedal is pressed down, the pedal types &quot;i&quot; causing VIM to go into Insert Mode. When released, it types &amp;lt;Esc&amp;gt; and you are back in Normal Mode.&lt;/p&gt;
&lt;p&gt;I just made one and it works great. Here is how I did it.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Purchased 2 USB foot switches (pedals) from China: I used Ankaka.com and payed 20 USD (includes 2 pedals and shipping to California).&lt;br/&gt;Later I found out the OEM: PC sensor &lt;a href=&quot;http://www.pcsensor.com/index.php?_a=viewProd&amp;amp;productId=2&quot; rel=&quot;nofollow&quot;&gt;http://www.pcsensor.com/index.php?_a=viewProd&amp;amp;productId=2&lt;/a&gt; $5.50 per pedal&lt;br/&gt;Also they sell these form Hong Kong:&lt;br/&gt;&lt;a href=&quot;http://www.suntekstore.com/goods-10010504-pc_usb_foot_switch_keyboard_pedal.html&quot; rel=&quot;nofollow&quot;&gt;http://www.suntekstore.com/goods-10010504-pc_usb_foot_switch_keyboard_pedal.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.suntekstore.com/goods-10012491-new_usb_fashion_action_control_keyboard_hid_foot_switch_pedal_.html&quot; rel=&quot;nofollow&quot;&gt;http://www.suntekstore.com/goods-10012491-new_usb_fashion_action_control_keyboard_hid_foot_switch_pedal_.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The pedal is programmable via a Windows GUI or on Mac/Linux via &lt;a href=&quot;https://github.com/rgerganov/footswitch&quot;&gt;https://github.com/rgerganov/footswitch&lt;/a&gt; CLI. Once programmed you can plug it into any Mac or Linux and it will work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unfortunately, only the Pedal Down event is programmable. But we need to be able to press &amp;lt;Esc&amp;gt; as the pedal is release. I emailed PC sensor, reaching out to collaborate but I just got the pedals from the post office today and really wanted it to work. So I stated hacking at it and came up with a solution in a about 1 hour.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I programmed one pedal to send the letter &quot;i&quot; and the other to send the &amp;lt;Esc&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Took both pedals apart&lt;/p&gt;
&lt;a href=&quot;https://github.com/alevchuk/vim-clutch/raw/master/pic1.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/alevchuk/vim-clutch/raw/master/pic1.jpg&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With electrical tape, attached 2 toothpicks to the plastic blade that goes between the Infrared sensors when the pedal is in the down possition.&lt;/p&gt;
&lt;a href=&quot;https://github.com/alevchuk/vim-clutch/raw/master/pic2.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/alevchuk/vim-clutch/raw/master/pic2.jpg&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Placed both sensors boards into one pedal enclosure so that, as the pedal is pressed, first the toothpicks will cross the &amp;lt;Esc&amp;gt; sensor, and after that the plastic blade will enter the &quot;i&quot; sensor. As the pedal is release the toothpicks will cross the &amp;lt;Esc&amp;gt; sensor again.&lt;/p&gt;
&lt;a href=&quot;https://github.com/alevchuk/vim-clutch/raw/master/pic3.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/alevchuk/vim-clutch/raw/master/pic3.jpg&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;I would like to say Thank You to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Sean Mahoney for suggesting the name Vim Clutch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anton Polishko for suggesting pressing &amp;lt;Esc&amp;gt; every time right before pressing &quot;i&quot; in order to avoid typing undesired &quot;i&quot;s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tyler Backman for letting me use a Windows computer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The company PC Sensor for building such a clean and incredibly inexpensive device.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Finally the first VIM Clutch&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alevchuk/vim-clutch/raw/master/pic4.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/alevchuk/vim-clutch/raw/master/pic4.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Has anyone thought of this before?&lt;/h2&gt;
&lt;p&gt;Perhaps, but I was not able to find any mention of using a pedal for Vi or VIM. I searched for this occasionally for a span of more than 2 years. Nothing like this comes up on Google. I shared my idea with a lot of my friends and no one mentioned that this was already thought of by someone else.&lt;/p&gt;
&lt;p&gt;As a result I consider myself the inventor of the VIM Clutch.&lt;/p&gt;
&lt;h2&gt;Extras&lt;/h2&gt;
&lt;p&gt;PC Sensor also has a triple version of the pedal. I will order two of those as well. I will program:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The left pedal to &quot;I&quot; - insert at the beginning of the line&lt;/li&gt;
&lt;li&gt;The middle pedal to &quot;i&quot; - regular insert mode&lt;/li&gt;
&lt;li&gt;The right pedal to &quot;A&quot; - insert at the end of the line&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://camo.githubusercontent.com/9df00526e958635bcd1988a037413bdce001b493/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d73612f332e302f38387833312e706e67&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; src=&quot;https://camo.githubusercontent.com/9df00526e958635bcd1988a037413bdce001b493/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f6c2f62792d73612f332e302f38387833312e706e67&quot; data-canonical-src=&quot;http://i.creativecommons.org/l/by-sa/3.0/88x31.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;The VIM Clutch work by &lt;a href=&quot;https://github.com/alevchuk/vim-clutch&quot;&gt;Aleksandr Levchuk&lt;/a&gt; is licensed under a &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/3.0/&quot; rel=&quot;nofollow&quot;&gt;Creative Commons Attribution-ShareAlike 3.0 Unported License&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Sun, 11 Mar 2018 14:57:47 +0000</pubDate>
<dc:creator>mfrw</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/64738?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>alevchuk/vim-clutch</og:title>
<og:url>https://github.com/alevchuk/vim-clutch</og:url>
<og:description>vim-clutch - A hardware pedal for improved text editing in Vim</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/alevchuk/vim-clutch</dc:identifier>
</item>
<item>
<title>The Times tech columnist ‘unplugged’ from the internet, except he didn’t</title>
<link>https://www.cjr.org/analysis/farhad-manjoo-nyt-unplug.php</link>
<guid isPermaLink="true" >https://www.cjr.org/analysis/farhad-manjoo-nyt-unplug.php</guid>
<description>&lt;p&gt;&lt;strong&gt;So &lt;a href=&quot;https://www.theverge.com/2013/5/1/4279674/im-still-here-back-online-after-a-year-without-the-internet&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;https://web.archive.org/web/20131105171424/http://businessjournalism.org/2013/08/29/analog-man-going-off-grid-sanity/&quot;&gt;writers&lt;/a&gt; have &lt;a href=&quot;https://www.fastcompany.com/3012521/baratunde-thurston-leaves-the-internet&quot;&gt;produced&lt;/a&gt;&lt;/strong&gt; &lt;span&gt;“I went offline, and here is what I learned” stories that they became a tedious cliché years ago.  Cliché or no, however, those stories had one thing in common: the writers of them all&lt;/span&gt; &lt;em&gt;&lt;span&gt;actually went offline&lt;/span&gt;&lt;/em&gt;&lt;span&gt;. Farhad Manjoo, technology columnist f&lt;/span&gt;&lt;em&gt;&lt;span&gt;or The New York Tim&lt;/span&gt;&lt;/em&gt;&lt;span&gt;es, took a different tack. He didn’t go offline at all: he just&lt;/span&gt; &lt;em&gt;&lt;span&gt;said&lt;/span&gt;&lt;/em&gt; &lt;span&gt;he did, in&lt;/span&gt; &lt;a href=&quot;https://www.nytimes.com/2018/03/07/technology/two-months-news-newspapers.html&quot;&gt;&lt;span&gt;a widely discussed column&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Manjoo wrote about what he learned from his two months away from social media, and dispensed avuncular advice to his readers about the benefits of slowing down one’s news consumption.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But he didn’t really unplug from social media at all. The evidence is right there in his&lt;/span&gt; &lt;a href=&quot;https://twitter.com/fmanjoo&quot;&gt;&lt;span&gt;Twitter feed&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, just below where he tweeted out his column: Manjoo remained a daily, active Twitter user throughout the two months he claims to have gone cold turkey, tweeting many hundreds of times, perhaps more than 1,000. In an email interview on Thursday, he stuck to his story, essentially arguing that the gist of what he wrote remains true, despite the tweets throughout his self-imposed &lt;/span&gt;&lt;span&gt;hiatus.&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It seems likely that Manjoo isn’t lying, and that he really believes he had unplugged, and really believes that his weak-sauce explanations don’t belie the point of his column. It could be that Manjoo’s column really does serve as a warning about the pernicious effects of social media. Just not in the way he meant it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ICYMI: &lt;a href=&quot;https://www.cjr.org/watchdog/lottery-winners-foia-reporting.php&quot;&gt;A reporter asked for 20 years of lottery winner data. After analyzing the records, he noticed something unusual.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Supposedly tired of the “misdirection” and “mistakes” that happen on social media as news breaks and wearied by the constant flow of news on social media, Manjoo decided he needed to slow things down. And so:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;span&gt;In January, after the breaking-newsiest year in recent memory, I decided to travel back in time. I turned off my digital news notifications, unplugged from Twitter and other social networks, and subscribed to home delivery of three print newspapers — The Times, The Wall Street Journal and my local paper, The San Francisco Chronicle — plus a weekly newsmagazine, The Economist.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&quot;mc_embed_signup&quot;&gt;
&lt;center&gt;&lt;span class=&quot;form-title-embed&quot;&gt;Sign up for &lt;span class=&quot;cjr-bold&quot;&gt;CJR&lt;/span&gt;'s &lt;nobr&gt;daily email&lt;/nobr&gt;&lt;/span&gt;

&lt;/center&gt;
&lt;/div&gt;
&lt;p&gt;He got most of his news from the papers, he wrote. His one caveat: he “allowed for” podcasts, email newsletters, and books and magazines.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But he also “allowed for” continued Twitter use. And not just a little: he tweeted nearly every day during the 58 days of the experiment. During the first two weeks of February, he tweeted, on average, more than 15 times a day. He refrained completely from tweeting on only five days—all on weekends. That’s far from obsessive, but it’s even farther from “unplugged.” It is, in fact the opposite of “unplugged.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Manjoo objects to that characterization. “I think it’s clear that I meant I ‘unplugged’ from Twitter as a source of news, not that I didn’t tweet at all,” he wrote.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But he had written, quite plainly, that he had “unplugged from Twitter,” not that he had used it only to post news stories. Reactions to his column on Twitter&lt;/span&gt; &lt;a href=&quot;https://twitter.com/search?q=https%3A%2F%2Fwww.nytimes.com%2F2018%2F03%2F07%2Ftechnology%2Ftwo-months-news-newspapers.html&amp;amp;src=typd&quot;&gt;&lt;span&gt;make it clear&lt;/span&gt;&lt;/a&gt; &lt;span&gt;that many readers took him as his word.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But also: He didn’t use Twitter only to post news stories. He retweeted news stories from others and&lt;/span&gt; &lt;a href=&quot;https://twitter.com/fmanjoo/status/963263803352739840&quot;&gt;&lt;span&gt;commented on others’ tweets about the news&lt;/span&gt;&lt;/a&gt; &lt;span&gt;on most days during his period of being “unplugged.” In February,&lt;/span&gt; &lt;a href=&quot;https://twitter.com/fmanjoo/status/963478527168233472&quot;&gt;&lt;span&gt;he retweeted Sean Hannity&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, commenting: “You gotta read this thread, it’s amazing.” He was clearly using Twitter to follow the news—albeit less so than he had been before starting this experiment.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; align=&quot;center&quot; readability=&quot;9.2539682539683&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;You gotta read this thread, it’s amazing, it really makes you ask the big questions about where we are as a society and where can I get some hemlock &lt;a href=&quot;https://t.co/4MSoMxNAgn&quot;&gt;https://t.co/4MSoMxNAgn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Farhad Manjoo: ask your friends to follow me (@fmanjoo) &lt;a href=&quot;https://twitter.com/fmanjoo/status/963478527168233472?ref_src=twsrc%5Etfw&quot;&gt;February 13, 2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;Having laid the groundwork with the notion that he had “unplugged” from social media, and describing how beneficial it was for his mental health, and expressing how much more time he had for the truly important things in life, Manjoo encouraged his readers to follow his example, and rather throat-clearingly issued a&lt;/span&gt; &lt;a href=&quot;https://www.goodreads.com/quotes/18508-eat-food-not-too-much-mostly-plants&quot;&gt;&lt;span&gt;Michael Pollan-like&lt;/span&gt;&lt;/a&gt; &lt;span&gt;heuristic: “Get news. Not too quickly. Avoid social.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Presumably, readers are encouraged to come up with their own definitions of “avoid.”&lt;/span&gt; &lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt; &lt;em&gt;&lt;span&gt;Times&lt;/span&gt;&lt;/em&gt; &lt;span&gt;spokesperson said the paper doesn’t view his assertion as a falsehood, and won’t be issuing a correction.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ICYMI: &lt;a href=&quot;https://www.cjr.org/united_states_project/tucson-daily-star-jackalope.php&quot;&gt;A reporter attended a school board meeting for 3 hours, longer than other journalists. That ended up being a very good decision. &lt;/a&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;Starting around the turn of the century, Manjoo made a name for himself as an insightful chronicler of the tech world, writing for sites such as Wired News, Salon, and then Slate, where he became well-known enough over his five-year tenure that the&lt;/span&gt; &lt;em&gt;&lt;span&gt;Times&lt;/span&gt;&lt;/em&gt; &lt;span&gt;hired him to be the paper’s lead tech columnist (after a very short stint working for&lt;/span&gt; &lt;em&gt;&lt;span&gt;The Wall Street Journal&lt;/span&gt;&lt;/em&gt;&lt;span&gt;). In 2008, he wrote an excellent, generally well-received, and prescient&lt;/span&gt; &lt;a href=&quot;https://www.amazon.com/True-Enough-Learning-Post-Fact-Society/dp/1620458403&quot;&gt;&lt;span&gt;book&lt;/span&gt;&lt;/a&gt; &lt;span&gt;chronicling the various assaults on facts and truth in our public discourse.&lt;/span&gt; &lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;But toward the end of his tenure at Slate, and continuing to the present day, Manjoo started to become known for his sometimes out-there “takes.” Some of them seem akin to the&lt;/span&gt; &lt;a href=&quot;http://gawker.com/5979650/whats-the-deal-with-airplanes-a-guide-from-a-man-who-was-on-two-of-them-recently&quot;&gt;&lt;span&gt;tin-eared musings&lt;/span&gt;&lt;/a&gt; &lt;span&gt;of Henry Blodget, the disgraced former stock analyst and founder of Business Insider (a publication that Manjoo&lt;/span&gt; &lt;a href=&quot;http://www.slate.com/articles/technology/technology/2012/05/business_insider_a_terrific_news_source_.html&quot;&gt;&lt;span&gt;once praised&lt;/span&gt;&lt;/a&gt; &lt;span&gt;as a “rapacious news aggregator.”) Others are more like the affected “contrarianism” of Nick Bilton, a former&lt;/span&gt; &lt;em&gt;&lt;span&gt;Times&lt;/span&gt;&lt;/em&gt; &lt;span&gt;staffer who once wrote that&lt;/span&gt; &lt;a href=&quot;http://theconcourse.deadspin.com/asshole-cannot-find-pen-makes-entire-nyt-trend-piece-f-1610134466/all&quot;&gt;&lt;span&gt;pens are just so squaresville, daddio&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, and also that we should all&lt;/span&gt; &lt;a href=&quot;https://bits.blogs.nytimes.com/2013/03/10/etiquette-redefined-in-the-digital-age/&quot;&gt;&lt;span&gt;stop&lt;/span&gt;&lt;/a&gt; &lt;span&gt;writing “thank you” in email, in part because it’s a time-sink.&lt;/span&gt; &lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;Manjoo’s last column for Slate was not about technology at all; it was an argument that “&lt;/span&gt;&lt;a href=&quot;http://www.slate.com/articles/technology/technology/2013/09/men_should_wear_makeup_looking_younger_and_better_isn_t_just_for_women.html&quot;&gt;&lt;span&gt;men should wear makeup&lt;/span&gt;&lt;/a&gt;&lt;span&gt;” in which he featured a whole bunch of close-up pictures of himself. Earlier, he had defended BuzzFeed for its decision to publish a video of a man killing himself with a gunshot wound to the head after a car chase that had aired live on Fox News. “People are talking about a thing on Twitter,” he&lt;/span&gt; &lt;a href=&quot;https://twitter.com/fmanjoo/status/251771446584569856&quot;&gt;&lt;span&gt;wrote on Twitter&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. “Posting stuff [that] people are talking about is what BF does. This is their job.”&lt;/span&gt; &lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;Last year, he defended President Donald Trump’s lack of literacy in a&lt;/span&gt; &lt;a href=&quot;https://www.nytimes.com/2017/08/27/technology/donald-trump-twitter-spelling.html&quot;&gt;&lt;span&gt;column&lt;/span&gt;&lt;/a&gt; &lt;span&gt;headlined: “So Trump Makes Spelling Errors. In the Twitter Age, Whoo Doesn’t?” That one must have done wonders for morale on the&lt;/span&gt; &lt;em&gt;&lt;span&gt;Time&lt;/span&gt;&lt;/em&gt;&lt;span&gt;s’ copy desk, which had just suffered a round of layoffs.&lt;/span&gt; &lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;Manjoo’s latest column seems to be of a piece with these earlier works. After trying, and failing, to get him to own up to the fact that his assertion that he had “unplugged” from social media was not true, I asked him whether perhaps his use of social media was messing with his own self-perception. He didn’t respond to that question.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ICYMI: &lt;a href=&quot;https://www.cjr.org/special_report/the-source.php&quot;&gt;How hacked emails and a yacht in Monaco ended my career at &lt;em&gt;The Wall Street Journal&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;
&lt;div id=&quot;post-survey-box&quot;&gt;&lt;em&gt;Has America ever needed a media watchdog more than now? Help us by &lt;a href=&quot;https://ssl.palmcoastd.com/18801/apps/MEMBER1?ikey=5**M02&quot; target=&quot;_blank&quot;&gt;joining CJR today&lt;/a&gt;.&lt;/em&gt;&lt;/div&gt;
&lt;/center&gt;
&lt;small class=&quot;bio-overline&quot;&gt;&lt;strong&gt;Dan Mitchell is a journalist based in Oakland, California. Follow him on Twitter &lt;a href=&quot;https://twitter.com/thefoodeconomy&quot;&gt;@thefoodeconomy&lt;/a&gt;.&lt;/strong&gt;&lt;/small&gt;</description>
<pubDate>Sun, 11 Mar 2018 14:42:33 +0000</pubDate>
<dc:creator>sqdbps</dc:creator>
<og:title>The &lt;i&gt;Times&lt;/i&gt; tech columnist ‘unplugged’ from the internet. Except he didn’t.</og:title>
<og:type>article</og:type>
<og:url>https://www.cjr.org/analysis/farhad-manjoo-nyt-unplug.php</og:url>
<og:image>https://cdn.cjr.org/wp-content/uploads/2018/03/plug-1459663_1280-800x419.jpg</og:image>
<og:description>&lt;p&gt;So many writers have produced “I went offline, and here is what I learned” stories that they became a tedious cliché years ago.  Cliché or no, however, those stories had one thing in common: the writers of them all actually went offline. Farhad Manjoo, technology columnist for The New York Times, took a different tack. […]&lt;/p&gt;</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cjr.org/analysis/farhad-manjoo-nyt-unplug.php</dc:identifier>
</item>
<item>
<title>Learn Go by writing tests – Hello, world</title>
<link>https://github.com/quii/learn-go-with-tests/tree/master/hello-world</link>
<guid isPermaLink="true" >https://github.com/quii/learn-go-with-tests/tree/master/hello-world</guid>
<description>&lt;h3&gt;readme.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;It is traditional for your first program in a new language to be Hello, world. Create a file called &lt;code&gt;hello.go&lt;/code&gt; and write this code. To run it type &lt;code&gt;go run hello.go&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fmt&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;() {
        fmt.&lt;span class=&quot;pl-c1&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;When you write a program in Go you will have a &lt;code&gt;main&lt;/code&gt; package defined with a &lt;code&gt;main&lt;/code&gt; func inside it. The &lt;code&gt;func&lt;/code&gt; keyword is how you define a function with a name and a body.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;import &quot;fmt&quot;&lt;/code&gt; we are importing a package which contains the &lt;code&gt;Println&lt;/code&gt; function that we use to print.&lt;/p&gt;
&lt;h2&gt;How to test&lt;/h2&gt;
&lt;p&gt;How do you test this? It is good to separate your &quot;domain&quot; code from the outside world (side-effects). The &lt;code&gt;fmt.Println&lt;/code&gt; is a side effect (printing to stdout) and the string we send in is our domain.&lt;/p&gt;
&lt;p&gt;So let's separate these concerns so it's easier to test&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fmt&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;() &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;() {
        fmt.&lt;span class=&quot;pl-c1&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;Hello&lt;/span&gt;())
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have created a new function again with &lt;code&gt;func&lt;/code&gt; but this time we've added another keyword &lt;code&gt;string&lt;/code&gt; in the definition. This means this function returns a &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now create a new file called &lt;code&gt;hello_test.go&lt;/code&gt; where we are going to write a test for our &lt;code&gt;Hello&lt;/code&gt; function&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;testing&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;TestHello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;t&lt;/span&gt; *&lt;span class=&quot;pl-v&quot;&gt;testing&lt;/span&gt;.&lt;span class=&quot;pl-v&quot;&gt;T&lt;/span&gt;) {
        &lt;span class=&quot;pl-smi&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Hello&lt;/span&gt;()
        &lt;span class=&quot;pl-smi&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; got != want {
                t.&lt;span class=&quot;pl-c1&quot;&gt;Errorf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;got '&lt;span class=&quot;pl-c1&quot;&gt;%s&lt;/span&gt;' want '&lt;span class=&quot;pl-c1&quot;&gt;%s&lt;/span&gt;'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, got, want)
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before explaining, let's just run the code. Run &lt;code&gt;go test&lt;/code&gt; in your terminal. It should've passed! Just to check, try deliberately breaking the test by changing the &lt;code&gt;want&lt;/code&gt; string.&lt;/p&gt;
&lt;p&gt;Notice how you have not had to pick between multiple testing frameworks or decipher a testing DSL to write a test. Everything you need is built in to the language and the syntax is the same as the rest of the code you will write.&lt;/p&gt;
&lt;h3&gt;Writing tests&lt;/h3&gt;
&lt;p&gt;Writing a test is just like writing a function, with a few rules&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It needs to be in a file with a name like &lt;code&gt;xxx_test.go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The test function must start with the word &lt;code&gt;Test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The test function takes one argument only &lt;code&gt;t *testing.T&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For now it's enough to know that your &lt;code&gt;t&lt;/code&gt; of type &lt;code&gt;*testing.T&lt;/code&gt; is your &quot;hook&quot; into the testing framework so you can do things like &lt;code&gt;t.Fail()&lt;/code&gt; when you want to fail.&lt;/p&gt;
&lt;h4&gt;New things&lt;/h4&gt;
&lt;h5&gt;&lt;code&gt;if&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;If statements in Go are very much like other programming languages.&lt;/p&gt;
&lt;h5&gt;Declaring variables&lt;/h5&gt;
&lt;p&gt;We're declaring some variables with the syntax &lt;code&gt;varName := value&lt;/code&gt;, which lets us re-use some values in our test for readability&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;t.ErrorF&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;We are calling the &lt;code&gt;ErrorF&lt;/code&gt; &lt;em&gt;method&lt;/em&gt; on our &lt;code&gt;t&lt;/code&gt; which will print out a message and fail the test. The &lt;code&gt;F&lt;/code&gt; stands for format which allows us to build a string with values inserted into the placeholder values &lt;code&gt;%s&lt;/code&gt;. When you made the test fail it should be clear how it works.&lt;/p&gt;
&lt;p&gt;We will later explore the difference between methods and functions.&lt;/p&gt;
&lt;h3&gt;Go doc&lt;/h3&gt;
&lt;p&gt;Another quality of life feature of Go is the documenation. You can launch the docs locally by running &lt;code&gt;godoc -http :8000&lt;/code&gt;. If you go to &lt;a href=&quot;http://localhost:8000/pkg&quot; rel=&quot;nofollow&quot;&gt;localhost:8000/pkg&lt;/a&gt; you will see all the packages installed on your system.&lt;/p&gt;
&lt;p&gt;The vast majority of the standard library has excellent documentation with examples. Navigating to &lt;a href=&quot;http://localhost:8000/pkg/testing/&quot; rel=&quot;nofollow&quot;&gt;http://localhost:8000/pkg/testing/&lt;/a&gt; would be worthwhile to see what's available to you.&lt;/p&gt;
&lt;h3&gt;Hello, YOU&lt;/h3&gt;
&lt;p&gt;Now that we have a test we can iterate on our software safely.&lt;/p&gt;
&lt;p&gt;In the last example we wrote the test &lt;em&gt;after&lt;/em&gt; the code had been written just so you could get an example of how to write a test and declare a function. From this point on we will be &lt;em&gt;writing tests first&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our next requirement is to let us specify the recipient of the greeting.&lt;/p&gt;
&lt;p&gt;Let's start by capturing these requirements in a test. This is basic test driven development and allows us to make sure our test is &lt;em&gt;actually&lt;/em&gt; testing what we want. When you retrospectively write tests there is the risk that your test may continue to pass even if the code doesn't work as intended.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;testing&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;TestHello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;t&lt;/span&gt; *&lt;span class=&quot;pl-v&quot;&gt;testing&lt;/span&gt;.&lt;span class=&quot;pl-v&quot;&gt;T&lt;/span&gt;) {
        &lt;span class=&quot;pl-smi&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Chris&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
        &lt;span class=&quot;pl-smi&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, Chris&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; got != want {
                t.&lt;span class=&quot;pl-c1&quot;&gt;Errorf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;got '&lt;span class=&quot;pl-c1&quot;&gt;%s&lt;/span&gt;' want '&lt;span class=&quot;pl-c1&quot;&gt;%s&lt;/span&gt;'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, got, want)
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now run &lt;code&gt;go test&lt;/code&gt;, you should have a compilation error&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;./hello_test.go:6:18: too many arguments in call to Hello
        have (string)
        want ()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When using a statically typed language like Go it is important to &lt;em&gt;listen to the compiler&lt;/em&gt;. The compiler understands how your code should snap together and work so you don't have to.&lt;/p&gt;
&lt;p&gt;In this case the compiler is telling you what you need to do to continue. We have to change our function &lt;code&gt;Hello&lt;/code&gt; to accept an argument.&lt;/p&gt;
&lt;p&gt;Edit the &lt;code&gt;Hello&lt;/code&gt; function to accept an argument of type string&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you try and run your tests again your &lt;code&gt;main.go&lt;/code&gt; will fail to compile because you're not passing an argument. Send in &quot;world&quot; to make it pass.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;() {
        fmt.&lt;span class=&quot;pl-c1&quot;&gt;Println&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;))
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when you run your tests you should see something like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hello_test.go:10: got 'Hello, world' want 'Hello, Chris''
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We finally have a compiling program but it is not meeting our requirements according to the test.&lt;/p&gt;
&lt;p&gt;Let's make the test pass by using the name argument and concatenate it with &lt;code&gt;Hello,&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + name
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you run the tests they should now pass. Normally as part of the TDD cycle we should now &lt;em&gt;refactor&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There's not a lot to refactor here, but we can introduce another language feature &lt;em&gt;constants&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Constants&lt;/h3&gt;
&lt;p&gt;Constants are defined like so&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; helloPrefix = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now refactor our code&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; helloPrefix = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; helloPrefix + name
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After refactoring, re-run your tests to make sure you haven't broken anything.&lt;/p&gt;
&lt;p&gt;Constants should improve performance of your application as it saves you creating the &lt;code&gt;&quot;Hello, &quot;&lt;/code&gt; string instance every time &lt;code&gt;Hello&lt;/code&gt; is called.&lt;/p&gt;
&lt;p&gt;To be clear, the performance boost is incredibly negligible for this example! But it's worth thinking about creating constants to capture the meaning of values and sometimes to aid performance.&lt;/p&gt;
&lt;h2&gt;Hello, world... again&lt;/h2&gt;
&lt;p&gt;The next requirement is when our function is called with an empty string it defaults to printing &quot;Hello, World&quot;, rather than &quot;Hello, &quot;&lt;/p&gt;
&lt;p&gt;Start by writing a new failing test&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;TestHello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;t&lt;/span&gt; *&lt;span class=&quot;pl-v&quot;&gt;testing&lt;/span&gt;.&lt;span class=&quot;pl-v&quot;&gt;T&lt;/span&gt;) {

        t.&lt;span class=&quot;pl-c1&quot;&gt;Run&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;saying hello to people&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;func&lt;/span&gt;(t *testing.&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt;) {
                &lt;span class=&quot;pl-smi&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Chris&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
                &lt;span class=&quot;pl-smi&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, Chris&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; got != want {
                        t.&lt;span class=&quot;pl-c1&quot;&gt;Errorf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;got '&lt;span class=&quot;pl-c1&quot;&gt;%s&lt;/span&gt;' want '&lt;span class=&quot;pl-c1&quot;&gt;%s&lt;/span&gt;'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, got, want)
                }
        })
        
        t.&lt;span class=&quot;pl-c1&quot;&gt;Run&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;say hello world when an empty string is supplied&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;func&lt;/span&gt;(t *testing.&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt;) {
                &lt;span class=&quot;pl-smi&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
                &lt;span class=&quot;pl-smi&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, World&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; got != want {
                        t.&lt;span class=&quot;pl-c1&quot;&gt;Errorf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;got '&lt;span class=&quot;pl-c1&quot;&gt;%s&lt;/span&gt;' want '&lt;span class=&quot;pl-c1&quot;&gt;%s&lt;/span&gt;'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, got, want)
                }
        })

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we are introducing another tool in our testing arsenal, subtests. Sometimes it is useful to group tests around a &quot;thing&quot; and then have subtests describing different scenarios.&lt;/p&gt;
&lt;p&gt;A benefit of this approach is you can set up shared code that can be used in the other tests.&lt;/p&gt;
&lt;p&gt;There is repeated code when we check if the message is what we expect.&lt;/p&gt;
&lt;p&gt;Refactoring is not &lt;em&gt;just&lt;/em&gt; for the production code!&lt;/p&gt;
&lt;p&gt;It is important that your tests &lt;em&gt;are clear specifications&lt;/em&gt; of what the code needs to do.&lt;/p&gt;
&lt;p&gt;We can and should refactor our tests.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;TestHello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;t&lt;/span&gt; *&lt;span class=&quot;pl-v&quot;&gt;testing&lt;/span&gt;.&lt;span class=&quot;pl-v&quot;&gt;T&lt;/span&gt;) {

        &lt;span class=&quot;pl-smi&quot;&gt;assertCorrectMessage&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;func&lt;/span&gt;(t *testing.&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt;, got, want &lt;span class=&quot;pl-k&quot;&gt;string&lt;/span&gt;) {
                t.&lt;span class=&quot;pl-c1&quot;&gt;Helper&lt;/span&gt;()
                &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; got != want {
                        t.&lt;span class=&quot;pl-c1&quot;&gt;Errorf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;got '&lt;span class=&quot;pl-c1&quot;&gt;%s&lt;/span&gt;' want '&lt;span class=&quot;pl-c1&quot;&gt;%s&lt;/span&gt;'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, got, want)
                }
        }

        t.&lt;span class=&quot;pl-c1&quot;&gt;Run&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;saying hello to people&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;func&lt;/span&gt;(t *testing.&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt;) {
                &lt;span class=&quot;pl-smi&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Chris&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
                &lt;span class=&quot;pl-smi&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, Chris&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;pl-c1&quot;&gt;assertCorrectMessage&lt;/span&gt;(t, got, want)
        })

        t.&lt;span class=&quot;pl-c1&quot;&gt;Run&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;empty string defaults to 'world'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;func&lt;/span&gt;(t *testing.&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt;) {
                &lt;span class=&quot;pl-smi&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
                &lt;span class=&quot;pl-smi&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, World&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;pl-c1&quot;&gt;assertCorrectMessage&lt;/span&gt;(t, got, want)
        })

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What have we done here?&lt;/p&gt;
&lt;p&gt;We've refactored our assertion into a function. This reduces duplication and improves readability of our tests. In go you can declare functions inside other functions and assign them to variables. You can then call them, just like normal functions. We need to pass in &lt;code&gt;t *testing.T&lt;/code&gt; so that we can tell the test code to fail when we need to.&lt;/p&gt;
&lt;p&gt;Now that we have a well-written failing test, let's fix the code, using an &lt;code&gt;if&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;t.Helper()&lt;/code&gt; is needed to tell the test suite that this method is a helper. By doing this when it fails the line number reported will be in our &lt;em&gt;function call&lt;/em&gt; rather than inside our test helper. This will help other developers track down problems easier. If you still don't understand, comment it out, make a test fail and observe the test output.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; helloPrefix = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
                name = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;World&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; helloPrefix + name
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we run our tests we should see it satisfies the new requirement and we haven't accidentally broken the other functionality&lt;/p&gt;
&lt;h3&gt;Discipline&lt;/h3&gt;
&lt;p&gt;Let's go over the cycle again&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Write a test&lt;/li&gt;
&lt;li&gt;Make the compiler pass&lt;/li&gt;
&lt;li&gt;Run the test, see that it fails and check the error message is meaningful&lt;/li&gt;
&lt;li&gt;Write enough code to make the test pass&lt;/li&gt;
&lt;li&gt;Refactor&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;On the face of it this may seem tedious but sticking to the feedback loop is important.&lt;/p&gt;
&lt;p&gt;Not only does it ensure that you have &lt;em&gt;relevant tests&lt;/em&gt; it helps ensure &lt;em&gt;you design good software&lt;/em&gt; by refactoring with the safety of tests.&lt;/p&gt;
&lt;p&gt;Seeing the test fail is an important check because it also lets you see what the error message looks like. As a developer it can be very hard to work with a codebase when failing tests do not give a clear idea as to what the problem is.&lt;/p&gt;
&lt;p&gt;By ensuring your tests are &lt;em&gt;fast&lt;/em&gt; and setting up your tools so that running tests is simple you can get in to a state of flow when writing your code.&lt;/p&gt;
&lt;p&gt;By not writing tests you are committing to manually checking your code by running your software which breaks your state of flow and you wont be saving yourself any time, especially in the long run.&lt;/p&gt;
&lt;h2&gt;Keep going! More requirements&lt;/h2&gt;
&lt;p&gt;Goodness me, we have more requirements. We now need to support a second parameter, specifying the language of the greeting. If a language is passed in that we do not recognise, just default to English.&lt;/p&gt;
&lt;p&gt;We should be confident that we can use TDD to flesh out this functionality easily!&lt;/p&gt;
&lt;p&gt;Write a test for a user passing in Spanish. Add it to the existing suite.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
        t.&lt;span class=&quot;pl-c1&quot;&gt;Run&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;in Spanish&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;func&lt;/span&gt;(t *testing.&lt;span class=&quot;pl-smi&quot;&gt;T&lt;/span&gt;) {
                &lt;span class=&quot;pl-smi&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Elodie&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Spanish&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
                &lt;span class=&quot;pl-smi&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hola, Elodie&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;pl-c1&quot;&gt;assertCorrectMessage&lt;/span&gt;(t, got, want)
        })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember not to cheat! &lt;em&gt;Test first&lt;/em&gt;. When you try and run the test, the compiler &lt;em&gt;should&lt;/em&gt; complain because you are calling &lt;code&gt;Hello&lt;/code&gt; with two arguments rather than one.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;./hello_test.go:27:19: too many arguments in call to Hello
        have (string, string)
        want (string)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fix the compilation problems by adding another string argument to &lt;code&gt;Hello&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
                name = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;World&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; helloPrefix + name
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you try and run the test again it will complain about not passing through enough arguments to &lt;code&gt;Hello&lt;/code&gt; in your other tests and in &lt;code&gt;main.go&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;./hello.go:15:19: not enough arguments in call to Hello
        have (string)
        want (string, string)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fix them by passing through empty strings. Now all your tests should compile &lt;em&gt;and&lt;/em&gt; pass, apart from our new scenario&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hello_test.go:29: got 'Hola, Elodie' want 'Hello, Elodie'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;if&lt;/code&gt; here to check the language is equal to &quot;Spanish&quot; and if so change the message&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
                name = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;World&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }

        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; language == &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Spanish&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
                &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hola, &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + name
        }
        
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; helloPrefix + name
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The tests should now pass.&lt;/p&gt;
&lt;p&gt;Now it is time to &lt;em&gt;refactor&lt;/em&gt;. You should see some problems in the code, &quot;magic&quot; strings, some of which are repeated. Try and refactor it yourself, with every change make sure you re-run the tests to make sure your refactoring isn't breaking anything.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; spanish = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Spanish&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; helloPrefix = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello, &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; spanishHelloPrefix = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hola, &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
                name = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;World&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }

        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; language == spanish {
                &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; spanishHelloPrefix + name
        }

        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; helloPrefix + name
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;French&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Write a test asserting that if you pass in &lt;code&gt;&quot;French&quot;&lt;/code&gt; you get &lt;code&gt;&quot;Bonjour, &quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See it fail, check the error message is easy to read&lt;/li&gt;
&lt;li&gt;Do the smallest reasonable change in the code&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You may have written something that looks roughly like this&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
                name = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;World&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }

        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; language == spanish {
                &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; spanishHelloPrefix + name
        }

        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; language == french {
                &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; frenchHelloPrefix + name
        }

        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; helloPrefix + name
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;When you have lots of &lt;code&gt;if&lt;/code&gt; statements checking a particular value it is common to use a &lt;code&gt;switch&lt;/code&gt; statement instead. We can use &lt;code&gt;switch&lt;/code&gt; to refactor the code to make it easier to read and more extensible if we wish to add more language support later&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
                name = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;World&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }

        &lt;span class=&quot;pl-smi&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;:=&lt;/span&gt; helloPrefix
        
        &lt;span class=&quot;pl-k&quot;&gt;switch&lt;/span&gt; language {
        &lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; french:
                prefix = frenchHelloPrefix
        &lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; spanish:
                prefix = spanishHelloPrefix
        }

        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; prefix + name
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Write a test to now include a greeting in the language of your choice and you should see how simple it is to extend our &lt;em&gt;amazing&lt;/em&gt; function.&lt;/p&gt;
&lt;h3&gt;one...last...refactor?&lt;/h3&gt;
&lt;p&gt;You could argue that maybe our function is getting a little big. The simplest refactor for this would be to extract out some functionality into another function and you already know how to declare functions.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-go&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Hello&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt; {
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; name == &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; {
                name = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;World&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }

        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;greetingPrefix&lt;/span&gt;(language) + name
}

&lt;span class=&quot;pl-k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;greetingPrefix&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) (&lt;span class=&quot;pl-v&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;string&lt;/span&gt;) {
        &lt;span class=&quot;pl-k&quot;&gt;switch&lt;/span&gt; language {
        &lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; french:
                prefix = frenchHelloPrefix
        &lt;span class=&quot;pl-k&quot;&gt;case&lt;/span&gt; spanish:
                prefix = spanishHelloPrefix
        &lt;span class=&quot;pl-k&quot;&gt;default&lt;/span&gt;:
                prefix = englishPrefix
        }
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few new concepts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In our function signature we have made a &lt;em&gt;named return value&lt;/em&gt; &lt;code&gt;(prefix string)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This will create a variable called &lt;code&gt;prefix&lt;/code&gt; in your function
&lt;ul&gt;&lt;li&gt;It will be assigned the &quot;zero&quot; value. This depends on the type, for example &lt;code&gt;int&lt;/code&gt;s are 0 and for strings it is &lt;code&gt;&quot;&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can return whatever it's set to by just calling &lt;code&gt;return&lt;/code&gt; rather than &lt;code&gt;return prefix&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This will display in the Go Doc for your function so it can make the intent of your code clearer.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; in the switch case will be branched to if none of the other &lt;code&gt;case&lt;/code&gt; statements match&lt;/li&gt;
&lt;li&gt;The function name starts with a lowercase letter. In Go public functions start with a capital letter and private ones start with a lowercase. We dont want the internals of our algorithm to be exposes to the world so we made this function private.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Who knew you could get so much out of &lt;code&gt;Hello, world&lt;/code&gt; ?&lt;/p&gt;
&lt;p&gt;By now you should have some understanding of&lt;/p&gt;
&lt;h3&gt;Some of Go's syntax around&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Writing tests&lt;/li&gt;
&lt;li&gt;Declaring functions, with arguments and return types&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Declaring variables and constants&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;An understanding of the TDD process and &lt;em&gt;why&lt;/em&gt; the steps are important&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Write a failing test and see it fail&lt;/em&gt; so we know we have written a &lt;em&gt;relevant&lt;/em&gt; test for our requirements and seen that it produces an &lt;em&gt;easy to understand description of the failure&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Writing the smallest amount of code to make it pass so we know we have working software&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Then&lt;/em&gt; refactor, backed with the safety of our tests to ensure we have well-crafted code that is easy to work with&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In our case we've gone from &lt;code&gt;Hello()&lt;/code&gt; to &lt;code&gt;Hello(&quot;name&quot;)&lt;/code&gt;, to &lt;code&gt;Hello(&quot;name&quot;, &quot;french&quot;)&lt;/code&gt; in small, easy to understand steps.&lt;/p&gt;
&lt;p&gt;This is of course trivial compared to &quot;real world&quot; software but the principles still stand. TDD is a skill that needs practice to develop but by being able to break problems down into smaller components that you can test you will have a much easier time writing software.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Sun, 11 Mar 2018 09:53:12 +0000</pubDate>
<dc:creator>quii</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/631756?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>quii/learn-go-with-tests</og:title>
<og:url>https://github.com/quii/learn-go-with-tests</og:url>
<og:description>Contribute to learn-go-with-tests development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/quii/learn-go-with-tests/tree/master/hello-world</dc:identifier>
</item>
<item>
<title>Ask HN: How to self-learn math?</title>
<link>https://news.ycombinator.com/item?id=16562173</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=16562173</guid>
<description>&lt;tr readability=&quot;0.55737704918033&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.8714285714286&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;5.1535714285714&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;16562173&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16562173&quot; class=&quot;storylink&quot;&gt;Ask HN: How to self-learn math?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.76923076923077&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_16562173&quot;&gt;540 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=sidyapa&quot; class=&quot;hnuser&quot;&gt;sidyapa&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16562173&quot;&gt;1 day ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_16562173&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=16562173&amp;amp;goto=item%3Fid%3D16562173&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20How%20to%20self-learn%20math%3F&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20How%20to%20self-learn%20math%3F&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=16562173&amp;amp;auth=9768b181575e3f170242f508320dc7a997985c9d&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=16562173&quot;&gt;189 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12.5&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;12&quot;&gt;I have a new found appreciation and fascination for maths and would love to study maths from the bottoms ups. I'd love to know the paths I should take and books I should read.
&lt;p&gt;EDIT1: If the question is very broad, it'd be much helpful to know how did you learn math? What courses you took, books you read.&lt;/p&gt;
&lt;p&gt;EDIT2: My current proficiency level is pre-high school mathematics as I didn't pay much attention in high school, learning effectively nothing.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.73972602739726&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;a href=&quot;https://www.ycombinator.com/apply/&quot;&gt;Applications are open for YC Summer 2018&lt;/a&gt;&lt;/center&gt;
&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Sun, 11 Mar 2018 08:21:01 +0000</pubDate>
<dc:creator>sidyapa</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=16562173</dc:identifier>
</item>
</channel>
</rss>