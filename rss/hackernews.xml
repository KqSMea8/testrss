<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Absolute Beginner&amp;#039;s Guide to Emacs (2012)</title>
<link>http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/</link>
<guid isPermaLink="true" >http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/</guid>
<description>&lt;p&gt;I’ve been using Emacs () as my primary text editor for several years now. It takes some getting used to – the keyboard shortcuts are completely different from what you’re probably familiar with, e.g. Ctrl-C for copy and Ctrl-V for paste. Despite the somewhat steep initial learning curve, however, I find that Emacs is invaluable for rapid coding and for flexibly editing all different types of files in the same environment.&lt;/p&gt;
&lt;p&gt;I remember how overwhelming it was to figure out how to do anything when I first got started, so in this tutorial I’m going to aim to give you the basics to get started. This is by no means a complete guide to Emacs (though if you have suggestions for things to add, I’d be happy to do so), but hopefully should be enough to start comfortably using Emacs as a text editor.&lt;/p&gt;
&lt;p&gt;This tutorial is mainly for people who have primarily used GUI text editors and coding environments and are not used to a primarily text-based program, running commands in the editor itself, and/or using large amounts of keyboard shortcuts.&lt;/p&gt;
&lt;p&gt;For reference, here is the list of shortcuts I’ll be introducing in this tutorial:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;C-h C-h&lt;/code&gt; : help&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-g&lt;/code&gt; : quit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x b&lt;/code&gt; : switch buffers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x right&lt;/code&gt; : right-cycle through buffers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x left&lt;/code&gt; : left-cycle through buffers&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x k&lt;/code&gt; : kill buffer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x 0&lt;/code&gt; : close the active window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x 1&lt;/code&gt; : close all windows except the active window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x 2&lt;/code&gt; : split the active window vertically into two horizontal windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x 3&lt;/code&gt; : split the active window horizontally into two vertical windows&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x o&lt;/code&gt; : change active window to next window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x C-f&lt;/code&gt; : open file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x C-s&lt;/code&gt; : save file&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-x C-w&lt;/code&gt; : save file as&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-space&lt;/code&gt; : set region mark&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-w&lt;/code&gt; : kill region&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-k&lt;/code&gt; : kill region between point and end of current line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-w&lt;/code&gt; : kill region without deleting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-y&lt;/code&gt; : yank region from kill ring&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-y&lt;/code&gt; : move to previous item in the kill ring&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;M-Y&lt;/code&gt; : move to next item in the kill ring&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-_&lt;/code&gt; : undo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-s&lt;/code&gt; : search forwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-r&lt;/code&gt; : search backwards&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-%&lt;/code&gt; : query replace (‘space’ to replace, ‘n’ to skip, ‘!’ to replace all)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;M-q&lt;/code&gt; : wrap text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;C-left&lt;/code&gt; : move one word left&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-right&lt;/code&gt; : move one word right&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-up&lt;/code&gt; : move one paragraph up&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-down&lt;/code&gt; : move one paragraph down&lt;/li&gt;
&lt;li&gt;&lt;code&gt;home&lt;/code&gt; : move to the beginning of the line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt; : move to the end of the line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;page up&lt;/code&gt; : move up a page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;page down&lt;/code&gt; : move down a page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-&lt;/code&gt; : move to end of buffer&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Opening Emacs&lt;/h2&gt;
&lt;p&gt;When you first open Emacs, you will see a window that looks something like this (click to view larger image):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/emacs-welcome.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/emacs-welcome.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is the standard menubar up at the top (With “File”, “Edit”, etc.) and a toolbar right below it. You can use those to explore what Emacs has to offer and to perform operations that you don’t know the keyboard shortcut for, but ultimately, try not to rely on them. The way to use Emacs efficiently is to learn how to navigate it using keyboard shortcuts.&lt;/p&gt;
&lt;p&gt;Let’s go over some basic terminology first with regards to the layout of Emacs:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/emacs-terminology.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/emacs-terminology.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although in standard terminology the running instance of Emacs would be called a window, in Emacs terminology it is called a &lt;em&gt;frame&lt;/em&gt;. Within Emacs itself, there is a &lt;em&gt;window&lt;/em&gt; in which we see the welcome “GNU Emacs” &lt;em&gt;buffer&lt;/em&gt; (more on windows and buffers in a bit).&lt;/p&gt;
&lt;p&gt;The blinking black cursor (over the W in “Welcome”) is called the &lt;em&gt;point&lt;/em&gt;. Not only is it like a cursor in your standard text editor (where the text is inserted when you type), but it is the location where you will sometimes need to run functions as well (e.g., “change the word that the point is currently in to be uppercase”). We’ll come back to this later.&lt;/p&gt;
&lt;p&gt;The grey bar at the bottom of the screen is the &lt;em&gt;status bar&lt;/em&gt; and displays various information about the point and the active buffer (there is one status bar per window). The white space below that is called the &lt;em&gt;mini-buffer&lt;/em&gt; and will occasionally display status messages (e.g., after saving a file), and is also the place where you enter Emacs commands.&lt;/p&gt;
&lt;h2&gt;Keyboard Shortcuts&lt;/h2&gt;
&lt;p&gt;There are two very important keys in Emacs. The first is the “meta” key. For me, this is the “Alt” key (but it could also be the Windows key, for example). You will frequently see the meta key abbreviated as just “M”, e.g. &lt;code&gt;M-x&lt;/code&gt; means the “meta key x key” combination.&lt;/p&gt;
&lt;p&gt;The second important key is the “Ctrl” key. Like the meta key, you will see combinations with the key abbreviated as just “C”, e.g. &lt;code&gt;C-f&lt;/code&gt; means the “ctrl key f key” combination.&lt;/p&gt;
&lt;p&gt;You may also sometimes see key combos like &lt;code&gt;C-c |&lt;/code&gt; vs. &lt;code&gt;C-c C-|&lt;/code&gt;. THESE ARE DIFFERENT KEY COMBOS. The first means “control key c key, release, then | key”. The second means “control key c, release, then control key | key”.&lt;/p&gt;
&lt;p&gt;The three most important keyboard shortcuts to know are &lt;code&gt;C-h C-h&lt;/code&gt; (help), &lt;code&gt;C-g&lt;/code&gt; (quit), and &lt;code&gt;M-x&lt;/code&gt; (run command). The help command will put you in a position to figure out how to do something if you’re stuck, and the quit command will cancel an operation (for example, if you are entering a command at the mini-buffer, C-g will quit the mini-buffer and move the point back to the buffer you were in previously – see the next section for more details on buffers and the mini-buffer). The run command will let you run any command in Emacs; you probably won’t need to use it much right away, but it’s good to know if you run into a scenario where you do need to run a command.&lt;/p&gt;
&lt;h2&gt;Buffers and Windows&lt;/h2&gt;
&lt;p&gt;Before we go into actually opening files, I’m going to go into a bit more detail about buffers and windows. First, you can have many buffers open at once. Usually they display the contents of a file, but they can also display output from programs or other information. By default, Emacs creates a single window and displays the &lt;em&gt;GNU Emacs&lt;/em&gt; buffer in it. It also always opens up a *Messages* buffer to display information and error messages about Emacs itself.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/messages-buffer.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/messages-buffer.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is also always a *scratch* buffer, which is what it sounds like – a place for notes or other text you don’t want to save.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/scratch-buffer.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/scratch-buffer.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can’t see the other buffers until you tell Emacs to view them through a window. To do this, use the &lt;code&gt;C-x b&lt;/code&gt; key combination. This will move the point to the mini-buffer and display a message that looks like “Switch to buffer (default *scratch*)”:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/switch-buffers.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/switch-buffers.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Remember that if you want to cancel the current operation, i.e. you decide you don’t want to switch buffers after all, you can use &lt;code&gt;C-g&lt;/code&gt; to quit the mini-buffer).&lt;/p&gt;
&lt;p&gt;You will frequently want to know all the buffers that are currently open so you can choose the correct one to switch to. To do this, just press the tab key from the mini-buffer prompt:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/list-buffers.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/list-buffers.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This opens a new window beneath the original one and creates a buffer to display the list of completions (notice that the *Completions* buffer is included in the list of buffers!). Note that you don’t have to use the tab completion if you don’t want to, but it is handy.&lt;/p&gt;
&lt;p&gt;Type a buffer name into the mini-buffer (for example, *scratch*) and hit enter. This will close the window displaying the *Completions* buffer and open the *scratch* buffer in the window that had previously displayed the &lt;em&gt;GNU Emacs&lt;/em&gt; buffer.&lt;/p&gt;
&lt;p&gt;You can also cycle through buffers sequentially with the key combos &lt;code&gt;C-x right&lt;/code&gt; and &lt;code&gt;C-x left&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Revisiting the concept of windows: they are essentially just views into a buffer. You can open up multiple windows in the same frame (I usually use two vertical windows) and you can have multiple windows displaying the same buffer:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/emacs-windows.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/emacs-windows.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Again, this is just a view into the buffer, so if I edit the buffer in the left window, the changes will be reflected in the right window, because they are both displaying the same buffer:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/same-buffer.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/same-buffer.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are a few relevant key commands for manipulating windows:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;C-x 0&lt;/code&gt; : close the active window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x 1&lt;/code&gt; : close all windows except the active window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x 2&lt;/code&gt; : split the active window vertically into two horizontal windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x 3&lt;/code&gt; : split the active window horizontally into two vertical windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x o&lt;/code&gt; : change active window to next window&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note that closing a window does NOT mean that the buffer it is displaying is closed.&lt;/p&gt;
&lt;p&gt;Why the distinction between windows and buffers? It is useful to have buffers open in the background even if they are not currently displayed through a window because reading and displaying a buffer from memory is much, much faster than reading and displaying a buffer from disk. So if you are frequently switching between five different files but you only have two windows open, it is better to open all files once, load them into buffers (memory), and then switch between the buffers instead.&lt;/p&gt;
&lt;h2&gt;Opening, saving, and closing buffers&lt;/h2&gt;
&lt;p&gt;To open a file and load it into a buffer, use &lt;code&gt;C-x C-f&lt;/code&gt;, which will open a prompt in the mini-buffer that says “Find file: ~/path/to/current/directory/”. Just as with switching buffers, you can press the tab key to list the files in the directory you have specified if you need to.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/open-file.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/open-file.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can then type in the name (and/or change the path) of the file you want:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/open-hello-world.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/open-hello-world.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Press enter, and a new buffer will be created with the file you specified:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/hello-world.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/hello-world.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you make changes to the buffer and you want to save it back to the file on disk, use &lt;code&gt;C-x C-s&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/save-file.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/save-file.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to save the buffer under a new file name (basically, “Save As” functionality), use &lt;code&gt;C-x C-w&lt;/code&gt;, which will prompt you to specify the file name:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/write-file.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/write-file.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;http://www.jesshamrick.com/images/emacs/write-hello-world-different-name.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/write-hello-world-different-name.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;http://www.jesshamrick.com/images/emacs/wrote-hello-world-different-name.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/wrote-hello-world-different-name.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the file already exists, it will double check to see whether you are actually intending to overwrite the existing file:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/overwrite.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/overwrite.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you are done with the buffer and want to actually close/kill it, use &lt;code&gt;C-x k&lt;/code&gt;, which will prompt you in the mini-buffer for the name of the buffer to kill (similar to the prompt given when switching buffers). If you don’t specify a buffer, it will kill the active buffer by default.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/kill-buffer.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/kill-buffer.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Emacs will display one of the other open buffers in the window that had previously contained the buffer you just killed.&lt;/p&gt;
&lt;h2&gt;Manipulating text&lt;/h2&gt;
&lt;p&gt;You are probably familiar with the terms “cut”, “copy”, and “paste” when it comes to manipulating regions of text. Emacs has these functions as well, however they are typically referred to under different names. The &lt;em&gt;kill&lt;/em&gt; operation is analogous to “cut”, and &lt;em&gt;yank&lt;/em&gt; is analogous to “paste”. There is more going on behind the scenes than just copying, cutting, and pasting; we’ll come back to this in a bit.&lt;/p&gt;
&lt;p&gt;First, before I actually tell you how to kill and yank text, you need to know about the &lt;em&gt;region&lt;/em&gt;. Just as you might select a region of text with the mouse to copy, you can do so in Emacs. However, this is usually done using the cursor and – you guessed it – more keyboard shortcuts.&lt;/p&gt;
&lt;p&gt;To select a region, move the point to one end of your desired region. Then hit &lt;code&gt;C-space&lt;/code&gt;; you will see a message in the mini-buffer saying “Mark set”:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/set-mark.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/set-mark.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or possibly “Mark deactivated”, if you had previously set the mark (if this is the case, just press C-space again to reactivate the mark):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/deactivate-mark.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/deactivate-mark.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now move the point to the other end of the region. The text which is in the region will become highlighted.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/select-region.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/select-region.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can do an operation on the selected region (for example, killing it). To kill a selected region, use &lt;code&gt;C-w&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/kill-region.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/kill-region.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also implicitly define a region from the point to the end of the current line and kill it with &lt;code&gt;C-k&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To perform a yank, use &lt;code&gt;C-y&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/yank-region.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/yank-region.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can undo what you just did by pressing &lt;code&gt;C-_&lt;/code&gt; several times (note how the mini-buffer displays an “Undo!” message):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/undo.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/undo.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to kill a region without actually deleting the text, use &lt;code&gt;M-w&lt;/code&gt;. That doesn’t seem to make a lot of sense – kill a region without deleting it? What’s the difference?&lt;/p&gt;
&lt;p&gt;The difference is that in basic text editors, you can only copy or cut one piece of text at a time. In Emacs, there is what is called a &lt;em&gt;kill ring&lt;/em&gt; which can hold multiple regions of text that you have killed. When you yank text, you are yanking it off the kill ring and back into the buffer. So if I kill a region without deleting it, I am copying the contents of the region into the kill ring but not actually deleting the region from the buffer.&lt;/p&gt;
&lt;p&gt;Here’s a demonstration. If I kill (without deleting) two lines sequentially and then perform a yank, Emacs copies the most recent item in the kill ring:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/yank-most-recent.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/yank-most-recent.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And if I yank again on the next line, it is again the most recent item in the kill ring:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/yank-again.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/yank-again.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And if I then use &lt;code&gt;M-y&lt;/code&gt; &lt;em&gt;without moving the point first&lt;/em&gt;, Emacs will replace the yanked text with the next item from the kill ring:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/next-yank.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/next-yank.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To move the opposite direction in the kill ring, use &lt;code&gt;M-Y&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Other useful commands&lt;/h2&gt;
&lt;h3&gt;Search&lt;/h3&gt;
&lt;p&gt;To search in a buffer (or region, if you have one selected), use &lt;code&gt;C-s&lt;/code&gt; (to search forward) or &lt;code&gt;C-r&lt;/code&gt; (to search backward). Type your search query into the mini-buffer and keep pressing C-s or C-r to cycle through the results. When you reach the end of the search results, Emacs will display a “Failing I-search” message the mini-buffer. If you use the search key combo again, you will wrap over to the beginning of the results and Emacs will display the “Overwrapped I-search” message in the mini-buffer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/search.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/search.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Find and replace&lt;/h3&gt;
&lt;p&gt;To find and replace a search query, use &lt;code&gt;M-%&lt;/code&gt;. Enter in the text you want to find:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/query-replace.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/query-replace.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then press enter and enter the text you want to replace it with:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/query-replace-with.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/query-replace-with.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Emacs will highlight the text to be replaced (just like if you were searching for it). Press ‘space’ to replace it or ‘n’ to skip it and go to the next one. Press ‘!’ to replace all queries.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/replace.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/replace.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Wrapping text&lt;/h3&gt;
&lt;p&gt;If you type a lot of words into Emacs, you will notice that it does not automatically wrap the text. This can be very annoying both for moving the point around if you are typing full paragraphs, because Emacs will treat the paragraph as a single line, and for readability.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/long-paragraph.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/long-paragraph.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To get around this, I use &lt;code&gt;M-q&lt;/code&gt; to wrap the paragraph of text that the point is currently in:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jesshamrick.com/images/emacs/fill-region.png&quot;&gt;&lt;img src=&quot;http://www.jesshamrick.com/images/emacs/fill-region.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Moving the point&lt;/h3&gt;
&lt;p&gt;It can be slow to move the point only with the arrow keys; these are the commands that I use to speed up navigation (note that there are some other commands you can use for the same operations – these are just the ones I find most convenient).&lt;/p&gt;
&lt;p&gt;To move the point up or down a whole paragraph (instead of a single line), use &lt;code&gt;C-up&lt;/code&gt; or &lt;code&gt;C-down&lt;/code&gt;. To move the point past a whole word (instead of a single character), use &lt;code&gt;C-left&lt;/code&gt; or &lt;code&gt;C-right&lt;/code&gt;. To move to the beginning of a line, use the &lt;code&gt;home&lt;/code&gt; key; to move to the end of a line, use the &lt;code&gt;end&lt;/code&gt; key. To move up or down a page, you can use the &lt;code&gt;page up&lt;/code&gt; and &lt;code&gt;page down&lt;/code&gt; keys. To move to the beginning of the buffer, use &lt;code&gt;M-&lt;/code&gt;.&lt;/p&gt;
</description>
<pubDate>Tue, 04 Dec 2018 11:46:51 +0000</pubDate>
<dc:creator>sytelus</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/</dc:identifier>
</item>
<item>
<title>A Not-Called Function Can Cause a 5X Slowdown</title>
<link>https://randomascii.wordpress.com/2018/12/03/a-not-called-function-can-cause-a-5x-slowdown/</link>
<guid isPermaLink="true" >https://randomascii.wordpress.com/2018/12/03/a-not-called-function-can-cause-a-5x-slowdown/</guid>
<description>&lt;p&gt;Subtitle: Making Windows Slower Part 3: Process Destruction&lt;/p&gt;
&lt;p&gt;In the summer of 2017 I wrestled with a Windows performance problem. Process destruction was slow, serialized, and was blocking the system input queue, leading to repeated short mouse-movement hangs when building Chrome. The root cause was that Windows was wasting a lot of time looking up GDI objects during process destruction, and it did this while holding the system-global user32 critical section. I shared the details in this blog post: &lt;a href=&quot;https://randomascii.wordpress.com/2017/07/09/24-core-cpu-and-i-cant-move-my-mouse/&quot;&gt;24-core CPU and I can’t move my mouse&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Microsoft fixed the bug, and I moved on with my life, but then it appeared to have come back. I heard complaints that the LLVM test suite was running slowly, with frequent input hangs.&lt;/p&gt;

&lt;p&gt;But, in fact, the original bug was &lt;em&gt;not&lt;/em&gt; back. It was our code that had changed.&lt;/p&gt;
&lt;h2&gt;The problem, circa 2017&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://randomascii.files.wordpress.com/2018/12/image.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://randomascii.files.wordpress.com/2018/12/image_thumb.png?w=228&amp;amp;h=106&quot; width=&quot;228&quot; align=&quot;right&quot; height=&quot;106&quot;/&gt;&lt;/a&gt;Every Windows process contains several default GDI object handles. For processes that do nothing with graphics these handles will typically be NULL. During process destruction Windows called some functions on these handles – even when they were NULL. That didn’t matter – the functions were fast – until Windows 10 Anniversary Edition when &lt;a href=&quot;https://randomascii.wordpress.com/2017/07/27/what-is-windows-doing-while-hogging-that-lock/&quot;&gt;some security changes made these functions slow&lt;/a&gt;. These functions run while holding the same lock that is used for input events, so enough processes being destroyed simultaneously, each making multiple calls to the slow function that held this critical lock, would be serialized and would block user input, leading to brief mouse-movement hangs.&lt;/p&gt;
&lt;p&gt;Microsoft’s fix was to not call these functions for processes with no GDI objects. I never heard details but I think that Microsoft’s fix was the moral equivalent of this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;+  if (IsGUIProcess())&lt;br/&gt;+    NtGdiCloseProcess();&lt;br/&gt;–  NtGdiCloseProcess();&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is, skip doing GDI cleanup if the process isn’t a GUI/GDI process.&lt;/p&gt;
&lt;p&gt;Since the compilers and other processes that we were rapidly creating and destroying didn’t have any GDI objects this change was enough to fix the UI hangs that we had been seeing.&lt;/p&gt;
&lt;h2&gt;The problem, circa 2018&lt;/h2&gt;
&lt;p&gt;It turns out that it is really easy to get processes that actually allocate some default GDI objects. If your process loads gdi32.dll then you automatically get default GDI objects (DCs, surfaces, regions, brushes, fonts, etc.), whether you need them or not (note that these default GDI objects don’t show up in Task Manager’s count of per-process GDI objects).&lt;/p&gt;
&lt;p&gt;But that shouldn’t be a problem. I mean, why would a compiler be loading gdi32.dll? Well, it turns out that if you load user32.dll, shell32.dll, ole32.dll, or many other DLLs then you automatically get gdi32.dll as well (with the aforementioned default GDI objects). And accidentally loading one of these DLLs is &lt;em&gt;really&lt;/em&gt; easy to do.&lt;/p&gt;
&lt;p&gt;The LLVM test suite was calling &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/shellapi/nf-shellapi-commandlinetoargvw&quot;&gt;CommandLineToArgvW&lt;/a&gt; (shell32.dll) during startup of every process, and it was occasionally calling &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/shlobj_core/nf-shlobj_core-shgetknownfolderpath&quot;&gt;SHGetKnownFolderPath&lt;/a&gt; (also shell32.dll). Having these calls was enough to pull in gdi32.dll and generate the dreaded default GDI objects. Since the LLVM test suite spawned a &lt;em&gt;lot&lt;/em&gt; of processes it ended up being serialized during process destruction, causing huge slowdowns and input hangs, far worse than what I’d seen in 2017.&lt;/p&gt;
&lt;p&gt;But this time we understood the underlying GDI locking issue so we immediately knew what to do.&lt;/p&gt;
&lt;p&gt;The first fix was to avoid calling &lt;em&gt;CommandLineToArgvW&lt;/em&gt; by &lt;a href=&quot;https://reviews.llvm.org/D51941&quot;&gt;manually parsing the command-line&lt;/a&gt;. After that change the LLVM test suite was rarely calling any functions in any of the problematic DLLs. But (and we knew this ahead of time) this made no difference to the performance. The reason it made no difference was that the remaining &lt;em&gt;conditional&lt;/em&gt; call was sufficient to always pull in shell32.dll, which pulled in gdi32.dll, which created the default GDI objects.&lt;/p&gt;
&lt;p&gt;The second fix was to &lt;a href=&quot;https://reviews.llvm.org/rL342002&quot;&gt;delay load shell32.dll&lt;/a&gt;. Delay loading means that the DLLs are loaded on demand – when a function in them is called – instead of during process startup. This meant that shell32.dll and gdi32.dll would be loaded rarely, instead of always.&lt;/p&gt;
&lt;p&gt;And with that, the LLVM test suite began running up to &lt;em&gt;five times&lt;/em&gt; faster – one minute instead of five minutes. And, with no more mouse hangs our development machines were still usable while running the test suite. That is an &lt;em&gt;insane&lt;/em&gt; speedup for some very modest changes and the author of the patches was so grateful for my investigation that they gave me a &lt;a href=&quot;https://www.quora.com/What-are-peer-bonuses-at-Google-How-do-they-work&quot;&gt;peer bonus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes the tiniest changes have the biggest impacts. It’s all about &lt;a href=&quot;https://randomascii.wordpress.com/2015/01/19/knowing-where-to-type-zero/&quot;&gt;knowing where to type zero&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The execution path not taken&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://randomascii.files.wordpress.com/2018/12/sc2_356.jpg&quot;&gt;&lt;img title=&quot;The path not taken&quot; border=&quot;0&quot; alt=&quot;The path not taken&quot; src=&quot;https://randomascii.files.wordpress.com/2018/12/sc2_356_thumb.jpg?w=330&amp;amp;h=219&quot; width=&quot;330&quot; align=&quot;right&quot; height=&quot;219&quot;/&gt;&lt;/a&gt;It is worth repeating that we paid attention to code that &lt;em&gt;was not being executed&lt;/em&gt;, and that has made all the difference. If you have a command-line only tool that doesn’t pull in gdi32.dll then adding code that &lt;em&gt;conditionally&lt;/em&gt; calls a function may &lt;em&gt;unconditionally&lt;/em&gt; increase your process-destruction costs, if the function’s presence causes gdi32.dll to be loaded. In the example below &lt;em&gt;CommandLineToArgvW&lt;/em&gt; is never called, but without delay loading its mere presence will have performance consequences:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int main(int argc, char* argv[]) {&lt;br/&gt;  if (argc &amp;lt; 0) {&lt;br/&gt;    CommandLineToArgvW(nullptr, nullptr); // shell32.dll, pulls in gdi32.dll&lt;br/&gt;  }&lt;br/&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So yes, deleting a call to a function – even if the code is never executed – can be enough to dramatically improve performance in some cases.&lt;/p&gt;
&lt;h2&gt;Pathological repro&lt;/h2&gt;
&lt;p&gt;When I investigated the initial bug I wrote a program (&lt;a href=&quot;https://github.com/randomascii/blogstuff/tree/master/ProcessCreateTests&quot;&gt;ProcessCreateTests&lt;/a&gt;) that created 1,000 processes and then killed them all in parallel. This reproduced the hang, and when Microsoft fixed the bug I used test program to validate the fix – a video showing how can be found &lt;a href=&quot;https://www.youtube.com/watch?v=cbg5O2Kbb9A&quot;&gt;here&lt;/a&gt;. When this &lt;a href=&quot;https://randomascii.files.wordpress.com/2018/12/image1.png&quot;&gt;&lt;img title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;https://randomascii.files.wordpress.com/2018/12/image_thumb1.png?w=334&amp;amp;h=291&quot; width=&quot;334&quot; align=&quot;right&quot; height=&quot;291&quot;/&gt;&lt;/a&gt;new variant was found I modified &lt;em&gt;ProcessCreateTests&lt;/em&gt; to &lt;a href=&quot;https://github.com/randomascii/blogstuff/commit/c37b972a3d473ab3ed4163650b33cb0ff4aac5e3&quot;&gt;add a -user32 option&lt;/a&gt; and when this is specified every one of the thousand test process loads user32.dll, when otherwise they would not. As expected the time to destroy all 1,000 test processes increases dramatically when this option is specified, and mouse-movement hangs are easily observed. The time to &lt;em&gt;create&lt;/em&gt; the processes also increases with the -user32 option, but no hangs are observed during process creation. You can use this to see just how horrible the problem can be. Some typical results from my four-core/eight-thread laptop after a week of up-time are shown here. The -user32 option increases the times for everything, but the increase in how long the &lt;em&gt;UserCrit&lt;/em&gt; was blocked during process destruction is particularly dramatic:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;gt; ProcessCreatetests.exe&lt;br/&gt;Process creation took &lt;strong&gt;2.448 s&lt;/strong&gt; (2.448 ms per process).&lt;br/&gt;Lock blocked for &lt;strong&gt;0.008 s&lt;/strong&gt; total, maximum was 0.001 s.&lt;/p&gt;
&lt;p&gt;Process destruction took &lt;strong&gt;0.801 s&lt;/strong&gt; (0.801 ms per process).&lt;br/&gt;Lock blocked for &lt;strong&gt;0.004 s&lt;/strong&gt; total, maximum was 0.001 s.&lt;/p&gt;
&lt;p&gt;&amp;gt; ProcessCreatetests.exe -user32&lt;br/&gt;Testing with 1000 descendant processes with user32.dll loaded.&lt;br/&gt;Process creation took &lt;strong&gt;3.154 s&lt;/strong&gt; (3.154 ms per process).&lt;br/&gt;Lock blocked for &lt;strong&gt;0.032 s&lt;/strong&gt; total, maximum was 0.007 s.&lt;/p&gt;
&lt;p&gt;Process destruction took &lt;strong&gt;2.240 s&lt;/strong&gt; (2.240 ms per process).&lt;br/&gt;Lock blocked for &lt;strong&gt;1.991 s&lt;/strong&gt; total, maximum was 0.864 s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Digging deeper, just because&lt;/h2&gt;
&lt;p&gt;I thought of some ETW techniques that I could have used to better investigate this and started writing them up, but I ended up finding enough inexplicable behavior that I’ve spun off that research into a follow-up post. Suffice it to say that there is some evidence of more odd Windows behavior.&lt;/p&gt;
&lt;h2&gt;Other posts in this series&lt;/h2&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div class=&quot;wpcnt&quot;&gt;
&lt;div class=&quot;wpa wpmrec&quot;&gt;&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-18565082-3094-5c06a4e2bd294&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20180319#blog_id=18565082&amp;amp;post_id=3094&amp;amp;origin=randomascii.wordpress.com&amp;amp;obj_id=18565082-3094-5c06a4e2bd294&quot; data-name=&quot;like-post-frame-18565082-3094-5c06a4e2bd294&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Tue, 04 Dec 2018 06:23:11 +0000</pubDate>
<dc:creator>deafcalculus</dc:creator>
<og:type>article</og:type>
<og:title>A Not-Called Function Can Cause a 5X Slowdown</og:title>
<og:url>https://randomascii.wordpress.com/2018/12/03/a-not-called-function-can-cause-a-5x-slowdown/</og:url>
<og:description>Subtitle: Making Windows Slower Part 3: Process Destruction In the summer of 2017 I wrestled with a Windows performance problem. Process destruction was slow, serialized, and was blocking the syste…</og:description>
<og:image>https://randomascii.files.wordpress.com/2018/12/image_thumb1.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://randomascii.wordpress.com/2018/12/03/a-not-called-function-can-cause-a-5x-slowdown/</dc:identifier>
</item>
<item>
<title>YouTube top earners: A seven-year-old making $22M</title>
<link>https://www.bbc.com/news/business-46427910</link>
<guid isPermaLink="true" >https://www.bbc.com/news/business-46427910</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Ryan of Ryan ToysReview&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/117A5/production/_104598517_capture.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;YouTube&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Ryan's earnings have doubled since last year
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;A seven-year-old boy who reviews toys has been revealed as YouTube's highest-earning star, raking in $22m (£17.3m).&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://www.forbes.com/sites/natalierobehmed/2018/12/03/highest-paid-youtube-stars-2018-markiplier-jake-paul-pewdiepie-and-more/#7ec9f901909a&quot; class=&quot;story-body__link-external&quot;&gt;estimate by Forbes magazine&lt;/a&gt; found that Ryan of &lt;a href=&quot;https://www.youtube.com/channel/UChGJGhZ9SOOHvBB0Y4DOO_w/featured&quot; class=&quot;story-body__link-external&quot;&gt;Ryan ToysReview&lt;/a&gt; pipped Jake Paul by $500,000 for the 12 months to June.&lt;/p&gt;&lt;p&gt;Videos are posted most days and one promoting a &lt;a href=&quot;https://www.youtube.com/watch?v=-uQVvqLc01Q&quot; class=&quot;story-body__link-external&quot;&gt;blue giant mystery egg&lt;/a&gt; bearing Ryan's face has had more than a million views since Sunday.&lt;/p&gt;&lt;p&gt;The Dude Perfect channel was in third place, making $20m, Forbes said.&lt;/p&gt;&lt;p&gt;Ryan's earnings, which do not include tax or fees charged by agents or lawyers, have doubled compared with the previous year. &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vwBQYcOm8fY&quot; class=&quot;story-body__link-external&quot;&gt;Asked by NBC&lt;/a&gt; why kids liked watching his videos, Ryan - who is now eight - replied: &quot;Because I'm entertaining and I'm funny.&quot;&lt;/p&gt;&lt;p&gt;Since the channel was set up by Ryan's parents in March 2015, its videos have had almost 26 billion views and amassed 17.3 million followers.&lt;/p&gt;&lt;p&gt;Forbes said all but $1m of the $22m total is generated by advertising shown before videos, with the remainder coming from sponsored posts.&lt;/p&gt;&lt;figure class=&quot;media-portrait no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;The amount generated by sponsored posts is small compared with other top YouTubers, &lt;a href=&quot;https://www.forbes.com/sites/maddieberg/2018/12/03/how-this-seven-year-old-made-22-million-playing-with-toys-2/#16c39dd14459&quot; class=&quot;story-body__link-external&quot;&gt;Forbes writes&lt;/a&gt;. It is &quot;the result not only of how few deals Ryan (or his family) chooses to accept, but also the fact that his pint-sized demographic isn't exactly all that flush&quot;.&lt;/p&gt;&lt;p&gt;The toys featured in one of the channel's videos can sell out instantly.&lt;/p&gt;&lt;p&gt;In August, Walmart began selling an exclusive range of toys and clothing called Ryan's World, and a video showing Ryan and his parents searching for his own toys at a Walmart store has had 14 million views in three months.&lt;/p&gt;&lt;p&gt;The revenues from the Walmart deal are set to substantially increase Ryan's total earnings next year.&lt;/p&gt;&lt;p&gt;As he is still a child, 15% of Ryan's earnings are put into a bank account that he can only access when he becomes a legal adult. &lt;/p&gt;&lt;p&gt;Ryan's twin sisters haven't been left out of the fun either: they feature in some videos on a related YouTube channel called Ryan's Family Review. &lt;/p&gt;&lt;p&gt;A video titled &quot;Top 10 Science Experiments you can do at home for kids&quot; starring the three children has had more than 26 million views:&lt;/p&gt;&lt;p&gt;Daniel Middleton, the Minecraft gamer who topped the 2017 list with earnings of $16.5m, has slipped to fourth place. &lt;/p&gt;&lt;p&gt;While Jake Paul moved up six places to second, his brother Logan Paul has tumbled down the Forbes rankings this year to 10th place with $14.5m - still $3m more than 2017.&lt;/p&gt;&lt;p&gt;Logan Paul apologised in January after &lt;a href=&quot;https://www.bbc.co.uk/news/world-us-canada-42539715&quot; class=&quot;story-body__link&quot;&gt;showing the body of an apparent suicide victim&lt;/a&gt; in Japan in one of his videos.&lt;/p&gt;&lt;p&gt;Google, which owns YouTube, &lt;a href=&quot;https://www.bbc.co.uk/news/world-asia-42644321&quot; class=&quot;story-body__link&quot;&gt;removed Paul's channels&lt;/a&gt; from its Google Preferred programme, where brands sell ads on the platform's top 5% of content creators, in the wake of the controversy.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption body-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;You may also like: &lt;/h2&gt;</description>
<pubDate>Tue, 04 Dec 2018 01:57:39 +0000</pubDate>
<dc:creator>happy-go-lucky</dc:creator>
<og:title>The seven-year-old making $22m on YouTube</og:title>
<og:type>article</og:type>
<og:description>An American boy who reviews toys is this year's highest-earning YouTube star, according to Forbes.</og:description>
<og:url>https://www.bbc.com/news/business-46427910</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/117A5/production/_104598517_capture.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/business-46427910</dc:identifier>
</item>
<item>
<title>Microsoft is building a Chromium browser to replace Edge on Windows 10</title>
<link>https://www.windowscentral.com/microsoft-building-chromium-powered-web-browser-windows-10</link>
<guid isPermaLink="true" >https://www.windowscentral.com/microsoft-building-chromium-powered-web-browser-windows-10</guid>
<description>&lt;p class=&quot;article-body__drop-character article-body__first-paragraph&quot;&gt;Microsoft's Edge web browser has seen little success since its debut on Windows 10 in 2015. Built from the ground up with a new rendering engine known as EdgeHTML, Microsoft Edge was designed to be fast, lightweight, and secure, but it launched with a plethora of issues that resulted in users rejecting it early on. Edge has since struggled to gain traction, thanks to its continued instability and lack of mindshare, from users and web developers.&lt;/p&gt;
&lt;p&gt;Because of this, I'm told that Microsoft is throwing in the towel with EdgeHTML and is instead building a new web browser powered by Chromium, which uses a similar rendering engine first popularized by Google's Chrome browser known as &lt;a href=&quot;https://www.chromium.org/blink&quot;&gt;Blink&lt;/a&gt;. Codenamed &quot;Anaheim,&quot; this new browser for Windows 10 will replace Edge as the default browser on the platform, according to my sources, who wish to remain anonymous. It's unknown at this time if Anaheim will use the Edge brand or a new brand, or if the user interface (UI) between Edge and Anaheim is different. One thing is for sure, however; EdgeHTML in Windows 10's default browser is dead.&lt;/p&gt;
&lt;h2&gt;EdgeHTML is dead — long live Chromium&lt;/h2&gt;
&lt;p&gt;Many will be happy to hear that Microsoft is finally adopting a different rendering engine for the default web browser on Windows 10. Using Chromium means websites should behave just like they do on Google Chrome in Microsoft's new Anaheim browser, meaning users shouldn't suffer from the same instability and performance issues found in Edge today. This is the first step towards revitalizing Windows 10's built-in web browser for users across PCs and phones. Edge on iOS and Android already uses rendering engines native to those platforms, so not much will be changing on that front.&lt;/p&gt;
&lt;p&gt;In addition, Microsoft engineers were &lt;a href=&quot;https://www.windowscentral.com/microsoft-engineers-contributing-development-chrome-windows-10-arm&quot;&gt;recently spotted committing code to the Chromium project&lt;/a&gt; to help get Google Chrome running on ARM. Perhaps some of that work will translate over to getting Anaheim running on Windows 10 on ARM, too.&lt;/p&gt;
&lt;p&gt;I expect we'll see Microsoft introduce Anaheim throughout the 19H1 development cycle, which Insiders are currently testing in the Fast ring. This is a big deal for Windows. Microsoft's web browser should finally be able to compete alongside Chrome, Opera and Firefox, and those who are all-in with the Microsoft ecosystem will finally be getting a browser from Microsoft that works well when browsing the web.&lt;/p&gt;
&lt;p&gt;There's still lots we don't know about Anaheim, and I'm sure we'll hear more about it officially from Microsoft in the coming weeks. What are your thoughts on this? Let us know in the comments.&lt;/p&gt;
&lt;p class=&quot;update no-amazon&quot;&gt;&lt;strong&gt;Updated:&lt;/strong&gt; Updated info about Microsoft engineers also committing code to Chromium.&lt;/p&gt;
</description>
<pubDate>Tue, 04 Dec 2018 01:33:54 +0000</pubDate>
<dc:creator>rattt</dc:creator>
<og:type>article</og:type>
<og:url>https://www.windowscentral.com/microsoft-building-chromium-powered-web-browser-windows-10</og:url>
<og:image>https://www.windowscentral.com/sites/wpcentral.com/files/styles/large/public/field/image/2016/07/microsoft-edge-logo-wincentral.jpg?itok=dFJX_7fC</og:image>
<og:title>Microsoft is building a Chromium-powered web browser that will replace Edge on Windows 10</og:title>
<og:description>Microsoft is throwing in the towel with Edge and is building a new web browser for Windows 10, this time powered by Chromium.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.windowscentral.com/microsoft-building-chromium-powered-web-browser-windows-10</dc:identifier>
</item>
<item>
<title>Firefox desktop market share now below 9%</title>
<link>https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22:%7B%22%24and%22:%5B%7B%22deviceType%22:%7B%22%24in%22:%5B%22Desktop%2Flaptop%22%5D%7D%7D%5D%7D%2C%22dateLabel%22:%22Trend%22%2C%22attributes%22:%22share%22%2C%22group%22:%22browser%22%2C%22sort%22:%7B%22share%22:-1%7D%2C%22id%22:%22browsersDesktop%22%2C%22dateInterval%22:%22Monthly%22%2C%22dateStart%22:%222017-12%22%2C%22dateEnd%22:%222018-11%22%2C%22segments%22:%22-1000%22%7D</link>
<guid isPermaLink="true" >https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22deviceType%22%3A%7B%22%24in%22%3A%5B%22Desktop%2Flaptop%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222017-12%22%2C%22dateEnd%22%3A%222018-11%22%2C%22segments%22%3A%22-1000%22%7D</guid>
<description>&lt;p&gt;
                &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-label=&quot;Close&quot;&gt;
                    &lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;
                &lt;/button&gt;
                &lt;strong class=&quot;alert-heading&quot;&gt;November, 2018 market share reports are now live.&lt;/strong&gt;
            &lt;/p&gt;

            &lt;div class=&quot;row white-bg&quot;&gt;
                
                &lt;div class=&quot;col-md-12 col-lg-6&quot;&gt;
                    


&lt;div class=&quot;modal inmodal fade&quot; id=&quot;columnsModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-hidden=&quot;true&quot;&gt;
    &lt;div class=&quot;modal-dialog modal-lg&quot; readability=&quot;6&quot;&gt;
        &lt;div class=&quot;modal-content&quot; readability=&quot;35&quot;&gt;
            &lt;p&gt;
                &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&lt;/button&gt;
                &lt;i class=&quot;fa fa-columns modal-icon&quot;/&gt;
                &lt;h2 class=&quot;modal-title&quot;&gt;Customize Columns&lt;/h2&gt;
            &lt;/p&gt;
            
            &lt;p&gt;
                &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;Cancel&lt;/button&gt;
                &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; data-dismiss=&quot;modal&quot; onclick=&quot;delete report.state.plotKeys; runQuery();&quot;&gt;Apply&lt;/button&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
            &lt;/div&gt;
            
            
            
        </description>
<pubDate>Tue, 04 Dec 2018 01:27:51 +0000</pubDate>
<dc:creator>ngokevin</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22:%7B%22%24and%22:%5B%7B%22deviceType%22:%7B%22%24in%22:%5B%22Desktop%2Flaptop%22%5D%7D%7D%5D%7D%2C%22dateLabel%22:%22Trend%22%2C%22attributes%22:%22share%22%2C%22group%22:%22browser%22%2C%22sort%22:%7B%22share%22:-1%7D%2C%22id%22:%22browsersDesktop%22%2C%22dateInterval%22:%22Monthly%22%2C%22dateStart%22:%222017-12%22%2C%22dateEnd%22:%222018-11%22%2C%22segments%22:%22-1000%22%7D</dc:identifier>
</item>
<item>
<title>Quora User Data Compromised</title>
<link>https://blog.quora.com/Quora-Security-Update?share=1</link>
<guid isPermaLink="true" >https://blog.quora.com/Quora-Security-Update?share=1</guid>
<description>&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;We recently discovered that some user data was compromised as a result of unauthorized access to one of our systems by a malicious third party. We are working rapidly to investigate the situation further and take the appropriate steps to prevent such incidents in the future.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;We also want to be as transparent as possible without compromising our security systems or the steps we're taking, and in this post we’ll share what happened, what information was involved, what we're doing, and what you can do.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;We're very sorry for any concern or inconvenience this may cause.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;&lt;strong&gt;What happened&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;On Friday we discovered that some user data was compromised by a third party who gained unauthorized access to one of our systems. We're still investigating the precise causes and in addition to the work being conducted by our internal security teams, we have retained a leading digital forensics and security firm to assist us. We have also notified law enforcement officials.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;While the investigation is still ongoing, we have already taken steps to contain the incident, and our efforts to protect our users and prevent this type of incident from happening in the future are our top priority as a company.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;&lt;strong&gt;What information was involved&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;For approximately 100 million Quora users, the following information may have been compromised:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;Account information, e.g. name, email address, encrypted (hashed) password, data imported from linked networks when authorized by users&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;Public content and actions, e.g. questions, answers, comments, upvotes&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;Non-public content and actions, e.g. answer requests, downvotes, direct messages (note that a low percentage of Quora users have sent or received such messages)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;Questions and answers that were written anonymously are not affected by this breach as we do not store the identities of people who post anonymous content.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;The overwhelming majority of the content accessed was already public on Quora, but the compromise of account and other private information is serious.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;&lt;strong&gt;What we are doing&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;While our investigation continues, we're taking additional steps to improve our security:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;We’re in the process of notifying users whose data has been compromised.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;Out of an abundance of caution, we are logging out all Quora users who may have been affected, and, if they use a password as their authentication method, we are invalidating their passwords.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;We believe we’ve identified the root cause and taken steps to address the issue, although our investigation is ongoing and we’ll continue to make security improvements.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;We will continue to work both internally and with our outside experts to gain a full understanding of what happened and take any further action as needed.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;&lt;strong&gt;What you can do&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;span class=&quot;ui_qtext_rendered_qtext&quot;&gt;We’ve included more detailed information about more specific questions you may have in our help center, which you can find &lt;span class=&quot;qlink_container&quot;&gt;&lt;a href=&quot;https://help.quora.com/hc/en-us/articles/360020212652&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot; onclick=&quot;return Q.openUrl(this);&quot; class=&quot;external_link&quot;&gt;here&lt;/a&gt;&lt;/span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;If you were affected, we will update you with relevant details via email.&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;While the passwords were encrypted (hashed with a salt that varies for each user), it is generally a best practice not to reuse the same password across multiple services, and we recommend that people change their passwords if they are doing so.&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;ui_qtext_para&quot;&gt;It is our responsibility to make sure things like this don’t happen, and we failed to meet that responsibility. We recognize that in order to maintain user trust, we need to work very hard to make sure this does not happen again. There’s little hope of sharing and growing the world’s knowledge if those doing so cannot feel safe and secure, and cannot trust that their information will remain private. We are continuing to work very hard to remedy the situation, and we hope over time to prove that we are worthy of your trust.&lt;/p&gt;
</description>
<pubDate>Tue, 04 Dec 2018 00:12:48 +0000</pubDate>
<dc:creator>joebeetee</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.quora.com/Quora-Security-Update?share=1</dc:identifier>
</item>
<item>
<title>Building a Language and Compiler for Machine Learning</title>
<link>https://julialang.org/blog/2018/12/ml-language-compiler</link>
<guid isPermaLink="true" >https://julialang.org/blog/2018/12/ml-language-compiler</guid>
<description>&lt;p class=&quot;metadata&quot;&gt;&lt;span class=&quot;timestamp&quot;&gt;03 Dec 2018&lt;/span&gt;  |  &lt;span class=&quot;author&quot;&gt;Mike Innes, James Bradbury, Keno Fischer, Dhairya Gandhi, Neethu Mariya Joy, Tejan Karmali, Matt Kelley, Avik Pal, Marco Concetto Rudilosso, Elliot Saba, Viral Shah, Deniz Yuret&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since we &lt;a href=&quot;https://julialang.org/blog/2017/12/ml&amp;amp;pl&quot;&gt;originally proposed&lt;/a&gt; the need for a first-class language, compiler and ecosystem for machine learning (ML), there have been plenty of interesting developments in the field. Not only have the tradeoffs in existing systems, such as TensorFlow and PyTorch, not been resolved, but they are clearer than ever now that both frameworks contain distinct &lt;a href=&quot;https://pytorch.org/docs/master/jit.html&quot;&gt;“static graph”&lt;/a&gt; and &lt;a href=&quot;https://www.tensorflow.org/guide/eager&quot;&gt;“eager execution”&lt;/a&gt; interfaces. Meanwhile, the idea of ML models fundamentally being differentiable algorithms – often called &lt;a href=&quot;https://www.facebook.com/yann.lecun/posts/10155003011462143&quot;&gt;differentiable programming&lt;/a&gt; – has caught on.&lt;/p&gt;
&lt;p&gt;Where current frameworks fall short, several exciting new projects have sprung up that dispense with graphs entirely, to bring differentiable programming to the mainstream. &lt;a href=&quot;https://github.com/mila-udem/myia&quot;&gt;Myia&lt;/a&gt;, by the Theano team, differentiates and compiles a subset of Python to high-performance GPU code. &lt;a href=&quot;https://github.com/tensorflow/swift&quot;&gt;Swift for TensorFlow&lt;/a&gt; extends Swift so that compatible functions can be compiled to TensorFlow graphs. And finally, the &lt;a href=&quot;https://github.com/FluxML/Flux.jl&quot;&gt;Flux&lt;/a&gt; ecosystem is extending Julia’s compiler with a number of ML-focused tools, including first-class gradients, just-in-time CUDA kernel compilation, automatic batching and support for new hardware such as TPUs.&lt;/p&gt;
&lt;p&gt;All of these projects have enormous potential, but we think Julia has an edge. This post, based on our &lt;a href=&quot;https://arxiv.org/abs/1811.01457&quot;&gt;paper to be presented at NeurIPS MLSys&lt;/a&gt;, will explore how we have used Julia to re-think ML tooling from the ground up, and provides some insight into the work that modern ML tools need to do.&lt;/p&gt;
&lt;h2 id=&quot;enter-flux&quot;&gt;Enter Flux&lt;/h2&gt;
&lt;p&gt;We need a language to write differentiable algorithms, and Flux takes Julia to be this language. Being designed from the ground up for mathematical and numerical computing, Julia is unusually well-suited for expressing ML algorithms. Meanwhile, its mix of modern design and new ideas in the compiler makes it easier to address the high performance needs of cutting edge ML.&lt;/p&gt;
&lt;p&gt;Where typical frameworks are all-encompassing monoliths in hundreds of thousands of lines of C++, Flux is only a thousand lines of straightforward Julia code. Simply take &lt;a href=&quot;https://github.com/FluxML/Zygote.jl&quot;&gt;one package for gradients (Zygote.jl)&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaGPU/CuArrays.jl/&quot;&gt;one package for GPU support (CuArrays.jl)&lt;/a&gt;, sprinkle with some light convenience functions, bake for fifteen minutes and out pops a fully-featured ML stack.&lt;/p&gt;
&lt;p&gt;Like the other next-gen ML systems, Flux is committed to providing an intuitive (“eager” or “define-by-run”) interface, and takes a hard line against any kind of &lt;a href=&quot;https://www.tensorflow.org/guide/autograph&quot;&gt;graph building&lt;/a&gt; or &lt;a href=&quot;https://pytorch.org/docs/master/jit.html&quot;&gt;performance annotations&lt;/a&gt;. We support all of the language’s features, from control flow and data structures to macros. Users can code interactively in Jupyter notebooks and combine high-performance numerics with convenient plotting and visualisation. But we also want to get the benefits traditionally held by “static graph” frameworks – zero-overhead source-to-source AD, operator fusion, multi-GPU/distributed training, and single-binary deployment.&lt;/p&gt;
&lt;p&gt;How can we do all this? Effectively, we need to extract and analyse “static graphs” directly from written Julia syntax, which is in fact the entirely normal job of a &lt;em&gt;compiler&lt;/em&gt;. Most ML systems problems turn out to be standard and well-studied compiler problems, viewed through the right lens. Using a compiled language is enough to solve many issues, and extending that compiler is the best way to solve many more. We cover just a sample of our current work in this field – namely taking gradients, compiling for GPUs and TPUs, and automatic batching.&lt;/p&gt;
&lt;h2 id=&quot;taking-gradients&quot;&gt;Taking Gradients&lt;/h2&gt;
&lt;p&gt;Pushing the limits of reverse-mode differentiation, we have come to see this as a &lt;a href=&quot;https://arxiv.org/abs/1810.07951&quot;&gt;language-level problem&lt;/a&gt;. Differentiation is a symbolic transformation, which is the domain of compilers. Existing frameworks achieve this by &lt;em&gt;tracing&lt;/em&gt; (effectively a form of &lt;em&gt;partial evaluation&lt;/em&gt; or &lt;em&gt;abstract interpretation&lt;/em&gt;). A new tensor type is introduced which records all the basic mathematical operations performed, yielding a graph (or symbolic expression) with the control flow and data structures of the host language removed. However, this presents a difficult tradeoff: we either accept the overhead of an interpreter (eager execution) or freeze user control flow and limit the kinds of models that can be built (static graphs).&lt;/p&gt;
&lt;p&gt;What if, instead, the “graph” were simply Julia’s own syntax? Taking this idea to its limit, we have built &lt;a href=&quot;https://github.com/FluxML/Zygote.jl&quot;&gt;Zygote&lt;/a&gt;, which works directly on SSA-form IR and supports language features like control flow, recursion, data structures and macros. We can then put the generated SSA-form adjoint code through a compiler such as &lt;a href=&quot;http://llvm.org/&quot;&gt;LLVM&lt;/a&gt;, and get all the benefits of traditional compiler optimization applied to both our forward and backwards passes. In addition, this approach opens the opportunity to extend that compiler infrastructure with more advanced and domain-specific optimizations, such as kernel fusion and compilation to accelerators such as TPUs. Similar approaches are being explored by the &lt;a href=&quot;https://gist.github.com/rxwei/30ba75ce092ab3b0dce4bde1fc2c9f1d&quot;&gt;Swift for TensorFlow&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/abs/1810.11530&quot;&gt;Myia&lt;/a&gt; developers in a renaissance of source-to-source AD techniques.&lt;/p&gt;
&lt;p&gt;A key advantage of Julia for this task is that it can be used to implement fundamental numerical libraries, like &lt;a href=&quot;http://juliadiffeq.org/&quot;&gt;differential equations solvers&lt;/a&gt; or &lt;a href=&quot;https://github.com/JuliaOpt/JuMP.jl&quot;&gt;optimisation libraries&lt;/a&gt;; this neatly solves a growing need in the ML community, in which researchers backpropagate through high-performance code such as &lt;a href=&quot;https://people.csail.mit.edu/tzumao/diffrt/&quot;&gt;ray tracers&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/abs/1611.01652&quot;&gt;physics engines&lt;/a&gt;, but the gradients must still be implemented by hand in C++. In contrast, since Julia’s implementations are written in Julia, everything from &lt;a href=&quot;https://github.com/FluxML/model-zoo/blob/a243e8b192236c30064fcdb7a36f17f3b6823c34/other/diffeq/diffeq.jl&quot;&gt;ODEs&lt;/a&gt; to &lt;a href=&quot;https://wilmott.com/automatic-for-the-greeks/&quot;&gt;financial pricing models&lt;/a&gt; can be differentiated with ease. Bringing these powerful tools into models is where deep learning truly becomes differentiable programming.&lt;/p&gt;
&lt;h2 id=&quot;compiling-julia-for-gpus&quot;&gt;Compiling Julia for GPUs&lt;/h2&gt;
&lt;p&gt;GPU programming is an essential part of modern ML. But the GPU is often treated as an implementation detail; frameworks provide kernels internally, but the user only sees a limited set of mathematical operations and can’t program the GPU directly. In contrast, GPU programming in Julia is &lt;a href=&quot;https://devblogs.nvidia.com/gpu-computing-julia-programming-language/&quot;&gt;first-class&lt;/a&gt; all the way down to CUDA kernels (which can happily be written and run from a script or notebook).&lt;/p&gt;
&lt;p&gt;A simple vector addition kernel looks similar to the CUDA C equivalent.&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; kernel_vadd&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockIdx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockDim&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadIdx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, Julia’s type specialization enables a powerful set of additional abstractions on the GPU. For example, the code above is not restricted to dense arrays of floats, and could instead be given sparse arrays of complex numbers; Julia’s normal specialization mechanisms would generate a new set of PTX instructions on the fly. We can even abstract this code further into a “higher-order kernel” that accepts the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; function (or &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, or arbitrary user-defined &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;) and thus create a whole family of functions &lt;code class=&quot;highlighter-rouge&quot;&gt;map(f, x, y)&lt;/code&gt; in &lt;a href=&quot;http://mikeinnes.github.io/2017/08/24/cudanative.html&quot;&gt;four lines of code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This enables some powerful tricks, even if you never write CUDA code yourself. For example, we can transparently fuse a large broadcast expression like &lt;code class=&quot;highlighter-rouge&quot;&gt;1 / (1 + exp(-x))&lt;/code&gt;, &lt;em&gt;and&lt;/em&gt; its backwards pass, into a single GPU kernel, getting &lt;a href=&quot;https://arxiv.org/abs/1810.08297&quot;&gt;significant speedups&lt;/a&gt;. We expect the native GPU code generation capabilities and ecosystem will power various Julia based machine learning libraries going forward.&lt;/p&gt;
&lt;h2 id=&quot;julia-on-tpus&quot;&gt;Julia on TPUs&lt;/h2&gt;
&lt;p&gt;Taking this one step further, Google recently opened up the XLA IR used by their Cloud TPUs, making it possible for both other frameworks and users outside of ML to take advantage of this heavyweight hardware. XLA is powerful but limited: it can’t run a Python interpreter, certainly not with good performance. Frameworks then end up in a similar position as with gradients – they have no choice but to &lt;a href=&quot;https://github.com/google/jax&quot;&gt;use program tracing&lt;/a&gt; to pry away the Python, and end up with a fast but much more limited ML language.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1810.09868&quot;&gt;Our response is predictable&lt;/a&gt;: we only need to extract the “static graph” from written Julia programs and compile it directly to XLA, allowing Julia itself to run on TPUs. (In fact, this is just a simple extension of Julia’s usual compilation process, which extracts the largest possible “static subgraphs” from your program before sending them to LLVM.) This lets us take full advantage of the expressiveness of the Julia language, including control flow, recursion, multiple dispatch, higher-order functions, powerful data structures and abstractions, custom numeric types, and existing packages like differential equations solvers and linear algebra routines. All of this runs while reaping the benefits of the high-performance systolic array engine within the TPU. You can &lt;a href=&quot;https://github.com/JuliaTPU/XLA.jl&quot;&gt;try it today&lt;/a&gt;, with examples for both &lt;a href=&quot;https://github.com/JuliaTPU/XLA.jl/blob/d04c5914bc0d9f7d7fed68233f167d5b67003f7f/examples/resnet/resnet.jl&quot;&gt;large ML models like ResNet&lt;/a&gt; and &lt;a href=&quot;https://github.com/JuliaTPU/XLA.jl/blob/d04c5914bc0d9f7d7fed68233f167d5b67003f7f/examples/tsvd.jl&quot;&gt;linear algebra routines like TSVD&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;automatic-batching&quot;&gt;Automatic Batching&lt;/h2&gt;
&lt;p&gt;To get the most from these accelerators – which can have significant overheads per kernel launch, but scale very well over input size – it is common to &lt;em&gt;batch&lt;/em&gt; programs, applying the forwards and backwards passes to multiple training examples at once. In simple cases, such as with convolutional nets, it’s simple to handle this by concatenating, say, 10 images along an extra batch dimension. But this task becomes much harder when dealing with variably-structured inputs, such as trees or graphs.&lt;/p&gt;
&lt;p&gt;Most researchers address this by taking on the significant burden of batching code by hand. Different solutions have been proposed for different frameworks (&lt;a href=&quot;https://dynet.readthedocs.io/en/latest/tutorials_notebooks/Autobatching.html&quot;&gt;DyNet&lt;/a&gt;, &lt;a href=&quot;https://github.com/tensorflow/fold&quot;&gt;TensorFlow Fold&lt;/a&gt;, which heuristically try to batch some high level operations together when possible, but these typically either have their own usability issues or do not achieve the performance of hand-written code.&lt;/p&gt;
&lt;p&gt;We suggest that this problem is identical to that of Single Program Multiple Data (SPMD) programming, which has been &lt;a href=&quot;https://www.cs.cmu.edu/afs/cs.cmu.edu/Web/People/blelloch/papers/Ble90.pdf&quot;&gt;well-studied&lt;/a&gt; by the language and compiler community for decades, and becomes visible in more recent approaches to batching like &lt;a href=&quot;https://github.com/salesforce/matchbox&quot;&gt;matchbox&lt;/a&gt;. Indeed, it is very similar to the model of parallelism used by GPUs internally, and has been implemented as a compiler transform for the &lt;a href=&quot;https://ispc.github.io/&quot;&gt;SIMD units of CPUs&lt;/a&gt;. Taking inspiration from this work, we are implementing the &lt;a href=&quot;http://compilers.cs.uni-saarland.de/projects/wfv/&quot;&gt;same transform&lt;/a&gt; in Julia to provide SPMD programming both for scalar SIMD units and for model-level batching. This allows us to reach the ideal of writing simple code that operates on individual samples, while still getting the best performance on modern hardware.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We believe that the future of machine learning rests in language and compiler technology, and in particular, in extending new or existing languages to meet the high demands of ML research. This is good not just for the ML community, but for numerical programming in general; languages that can support differentiation, vectorisation and exotic hardware well will be powerful enough to drive many advancements in science.&lt;/p&gt;
&lt;p&gt;There is some way to go before these next-generation tools – Myia, Swift/TF and &lt;a href=&quot;http://fluxml.ai&quot;&gt;Flux&lt;/a&gt; – are as production-ready as their existing framework counterparts, TensorFlow, PyTorch, and &lt;a href=&quot;https://github.com/denizyuret/Knet.jl&quot;&gt;Knet&lt;/a&gt;. But if you’re breaking new ground in ML, they might well be your best bet. Give them a go, and see what the future of machine learning looks like.&lt;/p&gt;
</description>
<pubDate>Mon, 03 Dec 2018 21:51:26 +0000</pubDate>
<dc:creator>ViralBShah</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://julialang.org/blog/2018/12/ml-language-compiler</dc:identifier>
</item>
<item>
<title>The U.S. Yield Curve Has Inverted</title>
<link>https://www.bloomberg.com/opinion/articles/2018-12-03/u-s-yield-curve-just-inverted-that-s-huge</link>
<guid isPermaLink="true" >https://www.bloomberg.com/opinion/articles/2018-12-03/u-s-yield-curve-just-inverted-that-s-huge</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/opinion/articles/2018-12-03/u-s-yield-curve-just-inverted-that-s-huge&quot;&gt;https://www.bloomberg.com/opinion/articles/2018-12-03/u-s-yield-curve-just-inverted-that-s-huge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18593407&quot;&gt;https://news.ycombinator.com/item?id=18593407&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 370&lt;/p&gt;
&lt;p&gt;# Comments: 241&lt;/p&gt;
</description>
<pubDate>Mon, 03 Dec 2018 21:44:44 +0000</pubDate>
<dc:creator>acdanger</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=e64d0340-f7dd-11e8-b6d4-4fbda514240e&amp;url=L29waW5pb24vYXJ0aWNsZXMvMjAxOC0xMi0wMy91LXMteWllbGQtY3VydmUtanVzdC1pbnZlcnRlZC10aGF0LXMtaHVnZQ==</dc:identifier>
</item>
<item>
<title>C.S. Lewis on the Reading of Old Books</title>
<link>https://reasonabletheology.org/cs-lewis-on-reading-old-books/</link>
<guid isPermaLink="true" >https://reasonabletheology.org/cs-lewis-on-reading-old-books/</guid>
<description>&lt;h3&gt;We often settle for reading &lt;span&gt;about&lt;/span&gt; the works of Augustine, Calvin, or other “old books” rather than reading the works themselves.&lt;/h3&gt;
&lt;h3&gt;C.S. Lewis recommended the reading of old books in his introduction to &lt;a title=&quot;Athanasius: On the Incarnation&quot; href=&quot;http://www.christianbook.com/Christian/Books/product?event=AFF&amp;amp;amp;p=1172468&amp;amp;amp;item_no=700404&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Athanasius’&lt;/a&gt; &lt;em&gt;&lt;a title=&quot;Athanasius: On the Incarnation&quot; href=&quot;http://www.christianbook.com/Christian/Books/product?event=AFF&amp;amp;amp;p=1172468&amp;amp;amp;item_no=700404&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;On the Incarnation&lt;/a&gt;.&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;There is a strange idea abroad that in every subject the ancient books should be read only by the professionals, and that the amateur should content himself with the modern books. Thus I have found as a tutor in English Literature that if the average student wants to find out something about Platonism, the very last thing he thinks of doing is to take a translation of Plato off the library shelf and read the Symposium. He would rather read some dreary modern book ten times as long, all about “isms” and influences and only once in twelve pages telling him what Plato actually said.&lt;/p&gt;
&lt;p&gt;The error is rather an amiable one, for it springs from humility. The student is half afraid to meet one of the great philosophers face to face. He feels himself inadequate and thinks he will not understand him. But if he only knew, the great man, just because of his greatness, is much more intelligible than his modern commentator.&lt;/p&gt;
&lt;p&gt;The simplest student will be able to understand, if not all, yet a very great deal of what Plato said; but hardly anyone can understand some modern books on Platonism. It has always therefore been one of my main endeavours as a teacher to persuade the young that firsthand knowledge is not only more worth acquiring than secondhand knowledge, but is usually much easier and more delightful to acquire.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This mistaken preference for the modern books and this shyness of the old ones is nowhere more rampant than in theology.&lt;/strong&gt; Wherever you find a little study circle of Christian laity you can be almost certain that they are studying not St. Luke or St. Paul or St. Augustine or Thomas Aquinas or Hooker or Butler, but M. Berdyaev or M. Maritain or M. Niebuhr or Miss Sayers or even myself.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignleft&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;img class=&quot;&quot; src=&quot;https://reasonabletheology.org/wp-content/uploads/CS-Lewis-on-the-Reading-of-Old-Books.jpg&quot; alt=&quot;CS Lewis on the Reading of Old Books&quot; width=&quot;256&quot; height=&quot;342&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;wp-caption-text&quot;&gt;&lt;strong&gt;“I do not wish the ordinary reader to read no modern books. But if he must read only the new or only the old, I would advise him to read the old.”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now this seems to me topsy-turvy. &lt;strong&gt;Naturally, since I myself am a writer, I&lt;/strong&gt; do not wish the ordinary reader to read no &lt;strong&gt;modern books. But if he must read only the new or only the old, I would advise him to read the old.&lt;/strong&gt; And I would give him this advice precisely because he is an amateur and therefore much less protected than the expert against the dangers of an exclusive contemporary diet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A new book is still on its trial and the amateur is not in a position to judge it. It has to be tested against the great body of Christian thought down the ages, and all its hidden implications (often unsuspected by the author himself) have to be brought to light.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Often it cannot be fully understood without the knowledge of a good many other modern books. If you join at eleven o’clock a conversation which began at eight you will often not see the real bearing of what is said. Remarks which seem to you very ordinary will produce laughter or irritation and you will not see why—the reason, of course, being that the earlier stages of the conversation have given them a special point.&lt;/p&gt;
&lt;p&gt;In the same way sentences in a modern book which look quite ordinary may be directed &lt;em&gt;at&lt;/em&gt; some other book; in this way you may be led to accept what you would have indignantly rejected if you knew its real significance. The only safety is to have a standard of plain, central Christianity (“mere Christianity” as Baxter called it) which puts the controversies of the moment in their proper perspective. Such a standard can be acquired only from the old books.&lt;/p&gt;
&lt;h3&gt;It is a good rule, after reading a new book, never to allow yourself another new one till you have read an old one in between. If that is too much for you, you should at least read one old one to every three new ones.&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://amzn.to/2UdkPJN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-7888 alignright&quot; src=&quot;https://reasonabletheology.org/wp-content/uploads/Audible.jpg&quot; alt=&quot;&quot; width=&quot;330&quot; height=&quot;274&quot;/&gt;&lt;/p&gt;
&lt;/a&gt;Every age has its own outlook. It is specially good at seeing certain truths and specially liable to make certain mistakes. We all, therefore, need the books that will correct the characteristic mistakes of our own period. And that means the old books.&lt;/p&gt;
&lt;p&gt;All contemporary writers share to some extent the contemporary outlook—even those, like myself, who seem most opposed to it. Nothing strikes me more when I read the controversies of past ages than the fact that both sides were usually assuming without question a good deal which we should now absolutely deny. They thought that they were as completely opposed as two sides could be, but in fact they were all the time secretly united—united with each other and against earlier and later ages—by a great mass of common assumptions.&lt;/p&gt;
&lt;p&gt;We may be sure that the characteristic blindness of the twentieth century—the blindness about which posterity will ask, “But how could they have thought that?”—lies where we have never suspected it, and concerns something about which there is untroubled agreement between Hitler and President Roosevelt or between Mr. H. G. Wells and Karl Barth. None of us can fully escape this blindness, but we shall certainly increase it, and weaken our guard against it, if we read only modern books. Where they are true they will give us truths which we half knew already. Where they are false they will aggravate the error with which we are already dangerously ill.&lt;/p&gt;
&lt;p&gt;The only palliative is to keep the clean sea breeze of the centuries blowing through our minds, and this can be done only by reading old books. Not, of course, that there is any magic about the past. People were no cleverer then than they are now; they made as many mistakes as we. But not the same mistakes. They will not flatter us in the errors we are already committing; and their own errors, being now open and palpable, will not endanger us. Two heads are better than one, not because either is infallible, but because they are unlikely to go wrong in the same direction. To be sure, the books of the future would be just as good a corrective as the books of the past, but unfortunately we cannot get at them.&lt;/p&gt;
&lt;div id=&quot;attachment_2722&quot; class=&quot;wp-caption alignright&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-2722&quot; src=&quot;https://reasonabletheology.org/wp-content/uploads/CS-Lewis-Writing.jpg&quot; alt=&quot;CS Lewis Writing&quot; width=&quot;298&quot; height=&quot;350&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;wp-caption-text&quot;&gt;&lt;strong&gt;“I myself was first led into reading the Christian classics, almost accidentally, as a result of my English studies”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I myself was first led into reading the Christian classics, almost accidentally, as a result of my English studies. Some, such as Hooker, Herbert, Traherne, Taylor and Bunyan, I read because they are themselves great English writers; others, such as Boethius, St. Augustine, Thomas Aquinas and Dante, because they were “influences.” George Macdonald I had found for myself at the age of sixteen and never wavered in my allegiance, though I tried for a long time to ignore his Christianity.&lt;/p&gt;
&lt;p&gt;They are, you will note, a mixed bag, representative of many Churches, climates and ages. And that brings me to yet another reason for reading them. The divisions of Christendom are undeniable and are by some of these writers most fiercely expressed. But if any man is tempted to think—as one might be tempted who read only con- temporaries—that “Christianity” is a word of so many meanings that it means nothing at all, he can learn beyond all doubt, by stepping out of his own century, that this is not so.&lt;/p&gt;
&lt;p&gt;Measured against the ages “mere Christianity” turns out to be no insipid interdenominational transparency, but something positive, self-consistent, and inexhaustible. I know it, indeed, to my cost. In the days when I still hated Christianity, I learned to recognise, like some all too familiar smell, that almost unvarying something which met me, now in Puritan Bunyan, now in Anglican Hooker, now in Thomist Dante. It was there (honeyed and floral) in Francois de Sales; it was there (grave and homely) in Spenser and Walton; it was there (grim but manful) in Pascal and Johnson; there again, with a mild, frightening, Paradisial flavour, in Vaughan and Boehme and Traherne.&lt;/p&gt;
&lt;p&gt;In the urban sobriety of the eighteenth century one was not safe—Law and Butler were two lions in the path. The supposed “Paganism” of the Elizabethans could not keep it out; it lay in wait where a man might have supposed himself safest, in the very centre of The Faerie Queene and the Arcadia. It was, of course, varied; and yet—after all—so unmistakably the same; recognisable, not to be evaded, the odour which is death to us until we allow it to become life:&lt;/p&gt;
&lt;center&gt;&lt;em&gt;an air that kills&lt;/em&gt;&lt;br/&gt;&lt;em&gt;From yon far country blows.&lt;/em&gt;&lt;/center&gt;
We are all rightly distressed, and ashamed also, at the divisions of Christendom. But those who have always lived within the Christian fold may be too easily dispirited by them. They are bad, but such people do not know what it looks like from without. Seen from there, what is left intact despite all the divisions, still appears (as it truly is) an immensely formidable unity. I know, for I saw it; and well our enemies know it. That unity any of us can find by going out of his own age.
&lt;p&gt;It is not enough, but it is more than you had thought till then. Once you are well soaked in it, if you then venture to speak, you will have an amusing experience. You will be thought a Papist when you are actually reproducing Bunyan, a Pantheist when you are quoting Aquinas, and so forth. For you have now got on to the great level viaduct which crosses the ages and which looks so high from the valleys, so low from the mountains, so narrow compared with the swamps, and so broad compared with the sheep-tracks.&lt;/p&gt;
&lt;p&gt;The present book is something of an experiment. The translation is intended for the world at large, not only for theological students. If it succeeds, other translations of other great Christian books will presumably follow. In one sense, of course, it is not the first in the field. Translations of the Theologia Germanica, the Imitation, the Scale of Perfection, and the Revelations of Lady Julian of Norwich, are already on the market, and are very valuable, though some of them are not very scholarly.&lt;/p&gt;
&lt;p&gt;But it will be noticed that these are all books of devotion rather than of doctrine. Now the layman or amateur needs to be instructed as well as to be exhorted. In this age his need for knowledge is particularly pressing. Nor would I admit any sharp division between the two kinds of book. For my own part I tend to find the doctrinal books often more helpful in devotion than the devotional books, and I rather suspect that the same experience may await many others. I believe that many who find that “nothing happens” when they sit down, or kneel down, to a book of devotion, would find that the heart sings unbidden while they are working their way through a tough bit of theology with a pipe in their teeth and a pencil in their hand.&lt;/p&gt;
&lt;p&gt;This is a good translation of a very great book. St. Athanasius has suffered in popular estimation from a certain sentence in the “Athanasian Creed.” I will not labour the point that that work is not exactly a creed and was not by St. Athanasius, for I think it is a very fine piece of writing. The words “Which Faith except every one do keep whole and undefiled, without doubt he shall perish everlastingly” are the offence. They are commonly misunderstood. The operative word is keep; not acquire, or even believe, but keep.&lt;/p&gt;
&lt;p&gt;The author, in fact, is not talking about unbelievers, but about deserters, not about those who have never heard of Christ, nor even those who have misunderstood and refused to accept Him, but of those who having really understood and really believed, then allow themselves, under the sway of sloth or of fashion or any other invited confusion to be drawn away into sub-Christian modes of thought. They are a warning against the curious modern assumption that all changes of belief, however brought about, are necessarily exempt from blame. But this is not my immediate concern. I mention “the creed (commonly called) of St. Athanasius” only to get out of the reader’s way what may have been a bogey and to put the true Athanasius in its place. His epitaph is Athanasius contra mundum, “Athanasius against the world.” We are proud that our own country has more than once stood against the world. Athanasius did the same. He stood for the Trinitarian doctrine, “whole and undefiled,” when it looked as if all the civilised world was slipping back from Christianity into the religion of Arius—into one of those “sensible” synthetic religions which are so strongly recommended today and which, then as now, included among their devotees many highly cultivated clergymen. It is his glory that he did not move with the times; it is his reward that he now remains when those times, as all times do, have moved away.&lt;/p&gt;
&lt;p&gt;When I first opened his De Incarnatione I soon discovered by a very simple test that I was reading a masterpiece. I knew very little Christian Greek except that of the New Testament and I had expected difficulties. To my astonishment I found it almost as easy as Xenophon; and only a master mind could, in the fourth century, have written so deeply on such a subject with such classical simplicity. Every page I read confirmed this impression.&lt;/p&gt;
&lt;p&gt;His approach to the Miracles is badly needed today, for it is the final answer to those who object to them as “arbitrary and meaningless violations of the laws of Nature.” They are here shown to be rather the re-telling in capital letters of the same message which Nature writes in her crabbed cursive hand; the very operations one would expect of Him who was so full of life that when He wished to die He had to “borrow death from others.” The whole book, indeed, is a picture of the Tree of Life—a sappy and golden book, full of buoyancy and confidence. We cannot, I admit, appropriate all its confidence today. We cannot point to the high virtue of Christian living and the gay, almost mocking courage of Christian martyrdom, as a proof of our doctrines with quite that assurance which Athanasius takes as a matter of course. But whoever may be to blame for that it is not Athanasius.&lt;/p&gt;
&lt;p&gt;The translator knows so much more Christian Greek than I that it would be out of place for me to praise her version. But it seems to me to be in the right tradition of English translation. I do not think the reader will find here any of that sawdusty quality which is so common in modern renderings from the ancient languages. That is as much as the English reader will notice; those who compare the version with the original will be able to estimate how much wit and talent is presupposed in such a choice, for example, as “these wiseacres” on the very first page.&lt;/p&gt;
&lt;h3&gt;Reading old books, especially classics of Christian theology and devotion, greatly helps in our spiritual development.&lt;/h3&gt;
&lt;h3&gt;Looking for somer recommendations? Here are some &lt;a href=&quot;https://reasonabletheology.org/old-books-every-christian-should-read/&quot;&gt;old books every Christian should read&lt;/a&gt;.&lt;/h3&gt;

&lt;div class=&quot;essb-subscribe-form essb-subscribe-form-365900039 essb-subscribe-form-inline&quot;&gt;
&lt;div class=&quot;essb-subscribe-form-content essb-subscribe-from-design3&quot; data-position=&quot;belowcontent&quot; data-design=&quot;design3&quot; readability=&quot;34&quot;&gt;
&lt;div class=&quot;essb-subscribe-form-content-top&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://reasonabletheology.org/wp-content/uploads/Email-Subscribe-Icon-Medium.png&quot; class=&quot;essb-subscribe-form-content-top-image-left&quot;/&gt;&lt;/p&gt;

&lt;h4 class=&quot;essb-subscribe-form-content-title&quot;&gt;Subscribe to ReasonableTheology.org&lt;/h4&gt;
&lt;p class=&quot;essb-subscribe-form-content-text&quot;&gt;Subscribe to receive our weekly emails PLUS access to the free digital theological library!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;essb-subscribe-form-content-bottom&quot; readability=&quot;36&quot;&gt;


&lt;p class=&quot;essb-subscribe-form-content-success essb-subscribe-form-result-message&quot;&gt;Thank you! Please check your inbox to confirm your subscription&lt;/p&gt;
&lt;p class=&quot;essb-subscribe-form-content-error essb-subscribe-form-result-message&quot;&gt;Oops - Something went wrong.&lt;/p&gt;

&lt;p class=&quot;essb-subscribe-form-content-footer&quot;&gt;We respect your privacy and take protecting it seriously.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Mon, 03 Dec 2018 20:16:56 +0000</pubDate>
<dc:creator>Tomte</dc:creator>
<og:type>article</og:type>
<og:title>C.S. Lewis On The Reading of Old Books</og:title>
<og:description>In his introduction to Athanasius' On the Incarnation, C.S. Lewis advises us to take up the reading of old books rather than merely reading about them</og:description>
<og:url>https://reasonabletheology.org/cs-lewis-on-reading-old-books/</og:url>
<og:image>https://reasonabletheology.org/wp-content/uploads/Old-Books.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://reasonabletheology.org/cs-lewis-on-reading-old-books/</dc:identifier>
</item>
<item>
<title>I Quit Google Over Its Censored Chinese Search Engine</title>
<link>https://theintercept.com/2018/12/01/google-china-censorship-human-rights/</link>
<guid isPermaLink="true" >https://theintercept.com/2018/12/01/google-china-censorship-human-rights/</guid>
<description>&lt;div data-reactid=&quot;183&quot; readability=&quot;89.784162098669&quot;&gt;
&lt;div class=&quot;img-wrap align-center width-fixed&quot; readability=&quot;11&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-224833&quot; src=&quot;https://theintercept.imgix.net/wp-uploads/sites/1/2018/11/GettyImages-1040611132-1543422826.jpg?auto=compress%2Cformat&amp;amp;q=90&amp;amp;w=1024&amp;amp;h=635&quot; alt=&quot;A woman and her child play on a Google sign at the World Artificial Intelligence Conference (WAIC) in Shanghai on September 26, 2018. (Photo by Johannes EISELE / AFP) (Photo credit should read JOHANNES EISELE/AFP/Getty Images)&quot;/&gt;&lt;p class=&quot;caption&quot;&gt;A woman and her child play on a Google sign at the World Artificial Intelligence Conference in Shanghai on Sept. 26, 2018.&lt;/p&gt;
&lt;p class=&quot;caption source&quot;&gt;Photo: Johannes Eisele/AFP/Getty Images&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;u&gt;John Hennessy, the&lt;/u&gt; chair of Google’s parent company, Alphabet Inc., was &lt;a href=&quot;https://www.bloomberg.com/news/articles/2018-11-20/alphabet-chairman-struggles-with-google-ceo-s-china-strategy&quot;&gt;recently asked&lt;/a&gt; whether Google providing a search engine in China that censored results would provide a net benefit for Chinese users. “I don’t know the answer to that. I think it’s — I think it’s a legitimate question,” he responded. “Anybody who does business in China compromises some of their core values. Every single company, because the laws in China are quite a bit different than they are in our own country.”&lt;/p&gt;
&lt;p&gt;Hennessy’s remarks were in relation to &lt;a href=&quot;https://theintercept.com/2018/08/01/google-china-search-engine-censorship/&quot;&gt;Project Dragonfly&lt;/a&gt;, a once-secret project within Google to build a version of its search engine that meets the demands of the ruling Chinese Communist Party — namely, that Google proactively censor “sensitive” speech and comply with China’s data provenance and surveillance laws.&lt;/p&gt;
&lt;blockquote class=&quot;stylized pull-right&quot; data-shortcode-type=&quot;pullquote&quot; data-pull=&quot;right&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;I worked as a research scientist at Google when Dragonfly was revealed — including to most Google employees — and resigned in protest after a month of internally fighting for clarification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I worked as a research scientist at Google when Dragonfly was revealed — including to most Google employees — and &lt;a href=&quot;https://theintercept.com/2018/09/13/google-china-search-engine-employee-resigns/&quot;&gt;resigned in protest&lt;/a&gt; after a month of internally fighting for clarification. That’s part of why I object to this constant drift of conversations about Dragonfly from concrete, indefensible details toward the vague language of difficult compromise.&lt;/p&gt;
&lt;p&gt;When news of Dragonfly first broke on August 1, a Google staff member who had secretly worked on Dragonfly took to the company-only Google Plus forum. The &lt;a href=&quot;https://theintercept.com/2018/08/03/google-search-engine-china-censorship-backlash/&quot;&gt;language was clear&lt;/a&gt;: “In my opinion it is just as bad as the leak mentions,” the staffer wrote, adding that they had asked to be removed from the project and another employee had left the company over their discomfort. At this point, my internal alarms went off, and I started pointedly asking my team and management if there was any official company response.&lt;/p&gt;
&lt;p&gt;While employees were waiting for an official response at the next company-wide meeting, we were also sharing links to details about the project that we found through directly scouring Google’s source code, which is mostly available to all engineers. Even though much of Dragonfly had been kept from prying eyes, or “siloed,” the pieces that slipped through were &lt;a href=&quot;https://theintercept.com/2018/09/14/google-china-prototype-links-searches-to-phone-numbers/&quot;&gt;disturbing&lt;/a&gt;. One of the Google-constructed blacklists for search terms contained numerous phrases, including “human rights” and “Nobel prize.” Code had been written to show only Chinese air quality data from an unnamed source in Beijing. And Dragonfly linked searches to the users’ phone numbers.&lt;/p&gt;
&lt;p&gt;Due to having recently moved to Toronto to support my wife’s career, I was working remotely and was disconnected from any internal organizing efforts against Dragonfly. So when the &lt;a href=&quot;https://www.theverge.com/2018/8/16/17707324/google-china-search-engine-censorship-response-meeting&quot;&gt;company-wide meeting&lt;/a&gt; came and went without any substantive response to hundreds of impassioned appeals from employees, I exercised the strongest speech available to me and submitted my two-weeks notice to my manager — and the rest of the company — in the form of a &lt;a href=&quot;https://www.documentcloud.org/documents/4905801-Jack-Poulson-Google-resignation-letter-20-Aug-2018.html&quot;&gt;six-page document&lt;/a&gt; listing my objections to the project.&lt;/p&gt;
&lt;p&gt;My final two weeks at Google were spent balancing between handing off my projects to other engineers and meeting with increasingly senior management about my letter; my penultimate evening was spent in a disappointing &lt;a href=&quot;https://www.nytimes.com/2018/10/07/technology/tech-workers-ask-censorship-surveillance.html&quot;&gt;direct meeting&lt;/a&gt; with Jeff Dean, the head of artificial intelligence research and my interface to Google’s CEO. Dean argued that only a small number of queries would be censored and that China’s surveillance is analogous to the U.S.’s Foreign Intelligence Surveillance Act warrants, secret warrants purportedly issued for the purpose of rooting out foreign spies. The next day, I worked late to finish my last project handoff and anticlimactically turned in my company badge and laptop to an empty office.&lt;/p&gt;
&lt;p&gt;&lt;u&gt;Ironically, I had&lt;/u&gt; no intention of speaking with the press until I later read &lt;a href=&quot;https://www.wsj.com/articles/alphabets-chairman-on-government-china-and-fake-news-1535720400&quot;&gt;an interview&lt;/a&gt; Hennessy had done as part of a promotion for his recent book, “Leading Matters.” When asked about Google re-entering the Chinese market, he dismissively said, “There’s a shifting set of grounds of how you think about that problem, and how you think about the issue of censorship. The truth is, there are forms of censorship virtually everywhere around the world.”&lt;/p&gt;
&lt;p&gt;Soon after, I went public with &lt;a href=&quot;https://www.documentcloud.org/documents/4905801-Jack-Poulson-Google-resignation-letter-20-Aug-2018.html&quot;&gt;my resignation&lt;/a&gt;, and after a few more weeks of silence from Google, I &lt;a href=&quot;https://www.nytimes.com/2018/09/26/technology/google-privacy-china-congress.html&quot;&gt;detailed my objections&lt;/a&gt; in a letter to the Senate Commerce Committee ahead of a privacy hearing attended by Google Chief Privacy Officer Keith Enright. During the hearing, Sen. Ted Cruz, R-Texas, repeatedly pushed for answers on Dragonfly, but Enright &lt;a href=&quot;https://www.wired.com/story/congress-google-project-dragonfly-questions/&quot;&gt;pleaded ignorance&lt;/a&gt;, saying he was “not clear on the contours of what is in scope or out of scope for that project.” When asked whether China censors what its citizens can see, &lt;a href=&quot;https://www.cnbc.com/2018/09/26/google-keith-enright-dodges-china-questions-senate-privacy-hearing.html&quot;&gt;he dodged&lt;/a&gt;: “As the privacy representative of Google, I’m not sure that I have an informed opinion on that question.”&lt;/p&gt;
&lt;/div&gt;&lt;div data-reactid=&quot;193&quot; readability=&quot;40.461254612546&quot;&gt;
&lt;p&gt;Google’s response was &lt;a href=&quot;https://www.wired.com/story/congress-google-project-dragonfly-questions/&quot;&gt;evasive enough&lt;/a&gt; that in the weeks after the hearing, Vice President Mike Pence &lt;a href=&quot;https://www.reuters.com/article/us-usa-china-pence-technology/pence-says-google-should-halt-dragonfly-app-development-idUSKCN1ME20H&quot;&gt;gave a speech&lt;/a&gt; in which he demanded an end to Dragonfly. “Google should immediately end development of the ‘Dragonfly’ app that will strengthen Communist Party censorship and compromise the privacy of Chinese customers,” Pence said.&lt;/p&gt;
&lt;p&gt;Yet, a little more than a week later, Google CEO Sundar Pichai attempted to invoke an engineering defense by arguing that Google would not need to censor “&lt;a href=&quot;https://www.wired.com/story/wired-25-sundar-pichai-china-censored-search-engine/&quot;&gt;well over 99 percent&lt;/a&gt;” of queries. Such a framing is perhaps the most extreme example of a broad pattern of redirecting conversations away from their concrete governmental concessions — which, again, literally involved blacklisting the phrase “human rights,” risking health by censoring air quality data, and allowing for easy surveillance by tying queries to phone numbers. Human rights and basic political speech are not an ignorable edge case.&lt;/p&gt;
&lt;p&gt;It’s important to remember that Google’s 2010 withdrawal of its censored Chinese search engine was provoked by &lt;a href=&quot;https://www.wired.com/2010/03/source-code-hacks/&quot;&gt;Beijing hacking&lt;/a&gt; the inner sanctum of Google’s software — their source code repository — to access the Gmail accounts of Chinese dissidents. Despite the obvious connection, Google’s leadership has entirely avoided clarifying Dragonfly’s surveillance concessions or addressing one of the main demands in a letter from a coalition of &lt;a href=&quot;https://www.hrw.org/news/2018/08/28/open-letter-google-reported-plans-launch-censored-search-engine-china&quot;&gt;14 human rights organizations&lt;/a&gt;. The letter implored google to “[d]isclose its position on censorship in China and what steps, if any, Google is taking to safeguard against human rights violations linked to Project Dragonfly and its other Chinese mobile app offerings.”&lt;/p&gt;
&lt;p&gt;I, for my part, would ask that Sundar Pichai honestly engage on what the chair of Google’s parent company has agreed is a compromise of some of Google’s “core values.” Google’s &lt;a href=&quot;https://www.blog.google/technology/ai/ai-principles/&quot;&gt;AI principles&lt;/a&gt; have committed the company to not “design or deploy … technologies whose purpose contravenes widely accepted principles of … human rights.”&lt;/p&gt;
&lt;p&gt;Human rights organizations around the world, as well as &lt;a href=&quot;https://medium.com/@googlersagainstdragonfly/we-are-google-employees-google-must-drop-dragonfly-4c8a30c5e5eb&quot;&gt;Google’s own employees&lt;/a&gt;, have cried out. Google owes them all forthright answers.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Mon, 03 Dec 2018 18:37:28 +0000</pubDate>
<dc:creator>evo_9</dc:creator>
<og:url>https://theintercept.com/2018/12/01/google-china-censorship-human-rights/</og:url>
<og:description>I worked as a research scientist at Google when Dragonfly was revealed and resigned in protest after a month of internally fighting for clarification.</og:description>
<og:image>https://theintercept.imgix.net/wp-uploads/sites/1/2018/11/GettyImages-1040611132-1543422733-e1543422806654.jpg?auto=compress%2Cformat&amp;q=90&amp;fit=crop&amp;w=1200&amp;h=800</og:image>
<og:type>article</og:type>
<og:title>I Quit Google Over Its Censored Chinese Search Engine. The Company Needs to Clarify Its Position on Human Rights.</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://theintercept.com/2018/12/01/google-china-censorship-human-rights/</dc:identifier>
</item>
</channel>
</rss>