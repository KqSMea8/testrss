<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Chrome 68 will mark all HTTP sites as “not secure”</title>
<link>https://security.googleblog.com/2018/02/a-secure-web-is-here-to-stay.html</link>
<guid isPermaLink="true" >https://security.googleblog.com/2018/02/a-secure-web-is-here-to-stay.html</guid>
<description></description>
<pubDate>Thu, 08 Feb 2018 18:18:19 +0000</pubDate>
<dc:creator>el_duderino</dc:creator>
<og:type>article</og:type>
<og:title>A secure web is here to stay</og:title>
<og:image>http://2.bp.blogspot.com/-7bZ5EziliZQ/VynIS9F7OAI/AAAAAAAASQ0/BJFntXCAntstZe6hQuo5KTrhi5Dyz9yHgCK4B/s1600/googlelogo_color_200x200.png</og:image>
<og:url>https://security.googleblog.com/2018/02/a-secure-web-is-here-to-stay.html</og:url>
<og:description>Posted by Emily Schechter, Chrome Security Product Manager For the past several years, we’ve moved toward a more secure web by strongly adv...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://security.googleblog.com/2018/02/a-secure-web-is-here-to-stay.html</dc:identifier>
</item>
<item>
<title>Why Toys?</title>
<link>http://blog.ycombinator.com/why-toys/</link>
<guid isPermaLink="true" >http://blog.ycombinator.com/why-toys/</guid>
<description>&lt;p&gt;Some of the biggest technology companies look like toys in the beginning. From a classical business building perspective, this shouldn’t happen. Toys are for fun. Businesses, especially huge ones, are for making money. Toys are small and of limited use. Large companies contain multitudes and perform a huge array of functions.&lt;/p&gt;
&lt;p&gt;This trend does not fit with history either. Standard Oil, US Steel, and Boeing were all iconically huge companies that were built as businesses. None of them went through a phase where they looked like toys. Startups can be different, though, because of the expectations of them and the seriousness with which people approach them.&lt;/p&gt;
&lt;h2&gt;Expectations&lt;/h2&gt;
&lt;p&gt;If you give people a tool and tell them it will perfectly solve an important problem, any imperfection in the tool is going to make them angry. If you give someone a toy and say “Look what I made! Isn’t it fun? It kinda does this thing.” then you’ve set yourself up for a positive reaction. It’s much easier to beat low expectations than high ones, so you’ve materially increased your chances at having a happy user.&lt;/p&gt;
&lt;p&gt;And “happiness” is an important way to think about early users. People spend more time with something that makes them happy, especially when they don’t expect it. Happy users are easy to get feedback from, because they know that you can make the product better and make them happier. They’re also likely to tell friends about the cool new product that they’re using, which means you start to get users without having to dip into the dark arts of marketing.&lt;/p&gt;
&lt;p&gt;When you look at something you build from the perspective of how happy it might make someone vs. how angry it could make them, it also becomes easier to experiment and put things into the wild. This isn’t just about low stakes, it’s about how seriously you take what you’re doing and how seriously other people take it, at least at first.&lt;/p&gt;
&lt;h2&gt;Seriousness&lt;/h2&gt;
&lt;p&gt;Business is about making money and working with customers. These are very serious and scary things. Toys are for playing and trying new things. This isn’t serious at all.&lt;/p&gt;
&lt;p&gt;Maybe that seems bad if your goal is to make your toy into a startup, and your startup into a big company. That implies you have to be serious right from the start. But if you are serious right from the start, a number of things start to go wrong.&lt;/p&gt;
&lt;p&gt;The first thing that goes wrong is you become unwilling to experiment with ideas that aren’t clearly aligned with making a big company. This means that people building serious things focus rapidly on revenue. They become risk averse and innovation averse. Companies built on new technologies have to capitalize on non-obvious ideas, ones that wouldn’t pass muster in large corporations. Otherwise, the large existing companies would do these things themselves.&lt;/p&gt;
&lt;p&gt;Facebook is a great example of this. Early on, all users could do was look up people they’d met at parties on campus at Harvard from other dorms and poke them. This seems silly because it was. Very few people saw it as more than a toy, which is why they were willing to give it time. It was something to play with when not working. I don’t think we would have been willing to play with something that felt like a serious business, which would have meant that Facebook wouldn’t have gotten it’s early happy and engaged users.&lt;/p&gt;
&lt;p&gt;The second thing that goes wrong when you take your toy too seriously is that you signal to the bigger and better funded companies already in the marketplace that you are onto something important and profitable. This is bad, because those companies will start paying attention to your toy too early and copy/buy/kill it. Airbnb looked like a doofy hipster thing to hotels for a very long time. And then, when it was too late, they realized that it wasn’t a toy at all. By that time, Airbnb had enough customers, revenue, and funding to survive the attacks of the incumbents.&lt;/p&gt;
&lt;p&gt;The third thing that goes wrong when you take your toy too seriously is that you immediately start optimizing on the things that you believe serious businesses should – profit and margins. While these things are important in the long run, focusing on them too early injects an impossible set of things for an early startup to do.&lt;/p&gt;
&lt;p&gt;Startups only have so much time and ability to focus. At the earliest stages, that focus needs to be on making things that users love and want to play with. A startup’s early and heavily engaged users are it’s only real bse of strength and chance for growth. Focusing on anything else puts them at an immediate disadvantage to better funded, organized, and wide reaching companies.&lt;/p&gt;
&lt;h2&gt;When toys become companies&lt;/h2&gt;
&lt;p&gt;Not all big companies start out as toys, just as not all toys eventually become big companies.&lt;/p&gt;
&lt;p&gt;This is just as often a question of motivation and goal for the creator as it is a question of whether or not the toy was good or bad. Most people who make things don’t want those things to become companies, which is great – it would be unfortunate if every interesting thing made for the world had a commercial purpose behind it.&lt;/p&gt;
&lt;p&gt;The founders who do turn toys into companies are generally the ones who relentlessly push what they’ve made to users and obsessively improve the toy in response to feedback. They then have to master a whole set of skills that are orthogonal to making things – hiring, managing, business building, fundraising, etc.&lt;/p&gt;
&lt;p&gt;This is an atypical path, which is why it’s so exciting when it happens. When we meet founders who we think are going to combine the toys they’ve built with the ability to build something lasting, we generally fund them whether or not we’re sure the toy is actually a business.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;br/&gt;Two examples: Facebook was a way for people to waste time while Apple helped hackers build home computers before there was any business case for it.&lt;a href=&quot;http://blog.ycombinator.com/why-toys/#footnoteid1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;Thanks to Geoff Ralston, Craig Cannon, Sam Altman, and Michael Seibel for reading drafts of this.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Feb 2018 17:53:25 +0000</pubDate>
<dc:creator>craigcannon</dc:creator>
<og:title>Why Toys?</og:title>
<og:url>http://blog.ycombinator.com/why-toys/</og:url>
<og:type>article</og:type>
<og:description>Some of the biggest technology companies look like toys in the beginning. From a classical business building perspective, this shouldn't happen. Toys are for fun. Businesses, especially huge ones, are for making money. Toys are small and of limited use. Large companies contain multitudes and perform</og:description>
<og:image>http://blog.ycombinator.com/wp-content/uploads/2018/02/Why-Toys.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.ycombinator.com/why-toys/</dc:identifier>
</item>
<item>
<title>A Reimplementation of Winamp 2.9 in HTML5 and JavaScript</title>
<link>https://github.com/captbaritone/winamp2-js</link>
<guid isPermaLink="true" >https://github.com/captbaritone/winamp2-js</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/captbaritone/winamp2-js/blob/master&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1256ccbceaaad68ed11e6ed585a13186f9e42d04/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6361707462617269746f6e652f77696e616d70322d6a732e737667&quot; alt=&quot;Travis&quot; data-canonical-src=&quot;https://img.shields.io/travis/captbaritone/winamp2-js.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/captbaritone/winamp2-js/blob/master&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/66278b5f6e48a80dbf9d95cc4d9b0c8d5a9a2899/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6361707462617269746f6e652f77696e616d70322d6a732e737667&quot; alt=&quot;Codecov&quot; data-canonical-src=&quot;https://img.shields.io/codecov/c/github/captbaritone/winamp2-js.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gitter.im/winamp2-js/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/650d8fee6777c64f07e6439c7a17060dadff0d74/68747470733a2f2f6261646765732e6769747465722e696d2f77696e616d70322d6a732f4c6f6262792e737667&quot; alt=&quot;Join the chat at https://gitter.im/winamp2-js/Lobby&quot; data-canonical-src=&quot;https://badges.gitter.im/winamp2-js/Lobby.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A reimplementation of Winamp 2.9 in HTML5 and JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://jordaneldredge.com/projects/winamp2-js/&quot; rel=&quot;nofollow&quot;&gt;Give it a try!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Works in modern versions of Edge, Firefox, Safari and Chrome. IE is &lt;a href=&quot;http://caniuse.com/#feat=audio-api&quot; rel=&quot;nofollow&quot;&gt;not supported&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jordaneldredge.com/projects/winamp2-js/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://github.com/captbaritone/winamp2-js/raw/master/preview.png&quot; alt=&quot;Screenshot of Winamp2-js&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Decodes the actual skin file in your browser so you can load your favorite Winamp 2 skins!&lt;/li&gt;
&lt;li&gt;Load local audio or skin files via drag-and-drop, eject button, or &quot;options&quot; button (upper left-hand corner)&lt;/li&gt;
&lt;li&gt;Both visualization modes: oscilloscope and spectrum&lt;/li&gt;
&lt;li&gt;Hotkeys&lt;/li&gt;
&lt;li&gt;&quot;Shade&quot; mini-mode&lt;/li&gt;
&lt;li&gt;&quot;Doubled&quot; mode, where the main window is twice as large: &lt;code&gt;Ctrl-D&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A more detailed list of features can be found in &lt;a href=&quot;https://github.com/captbaritone/winamp2-js/blob/master/features.md&quot;&gt;features.md&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Use Winamp2-js in your project &lt;strong&gt;PRE ALPHA&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Several people have expressed interest in including Winamp2-js inside their website. In an attempt to try this out, I have published Winamp2-js as an NPM package. You can attempt to use it in your JS project like so:&lt;/p&gt;
&lt;p&gt;Install the package:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm install --save winamp2-js
npm install --save babel-polyfill
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Create a DOM element somewhere in your HTML document:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;div id='winamp2-js'&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Initialize Winamp2-js in your JavaScript:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;babel-polyfill&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Winamp&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;winamp2-js&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;winamp&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Winamp&lt;/span&gt;({
  initialTrack&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;1. DJ Mike Llama - Llama Whippin' Intro&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    url&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;https://d38dnrh1liu4f5.cloudfront.net/projects/winamp2-js/mp3/llama-2.91.mp3&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  },
  initialSkin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    url&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;https://d38dnrh1liu4f5.cloudfront.net/projects/winamp2-js/skins/base-2.91.wsz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
});
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Render after the skin has loaded.&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;winamp&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;renderWhenReady&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;winamp2-js&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Notes:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;This should not be considered &quot;production&quot; code.
&lt;ul&gt;&lt;li&gt;Winamp2-js does not support Internet Explorer.&lt;/li&gt;
&lt;li&gt;Winamp2-js was built to run on it's own page, it may not play well with surrounding CSS.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You will probably need to include &lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot; rel=&quot;nofollow&quot;&gt;babel-polyfill&lt;/a&gt; on the page that includes Winamp2-js.&lt;/li&gt;
&lt;li&gt;Skin and audio URLs are subject to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot; rel=&quot;nofollow&quot;&gt;CORS&lt;/a&gt;. Please ensure they are either served from the same domain, or that the other domain is served with the correct headers.&lt;/li&gt;
&lt;li&gt;This API is subject to change at any time.&lt;/li&gt;
&lt;li&gt;Please reach out to me. I'd love to help you set it up, and understand how it's being used. I plan to expand this API as I learn how people want to use it.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Development&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;yarn
# Or: npm install
npm start
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Open &lt;code&gt;http://localhost:8080/webpack-dev-server/&lt;/code&gt; in your browser.&lt;/p&gt;
&lt;h2&gt;Building&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;npm install
npm run build
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Open &lt;code&gt;index.html&lt;/code&gt; in your browser.&lt;/p&gt;
&lt;h2&gt;Deploying&lt;/h2&gt;
&lt;p&gt;These commands assume you have an SSH key to my server, which you probably don't have. Feel free to adapt them to your own server.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm run deploy
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Reverting&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;npm run revert # Reverts quickly to the previous deploy
HASH=&amp;lt;SOME_GIT_HASH&amp;gt; npm run deploy # Runs a new deploy at a given hashlike.
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Advanced Usage&lt;/h3&gt;
&lt;p&gt;There are some &quot;feature flags&quot; which you can manipulate by passing a specially crafted URL hash. Simply supply a JSON blob after the &lt;code&gt;#&lt;/code&gt; of the URL to change these settings:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;skinUrl&lt;/code&gt; (string) Url of the default skin to use. Note, this file must be served with the correct Allows Origin header.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;audioUrl&lt;/code&gt; (string) Url of the default audio file to use. Note, this file must be served with the correct Allows Origin header.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hideAbout&lt;/code&gt; (boolean) Selectively hide the byline and GitHub link at the bottom of the page. Useful for taking screenshots.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initialState&lt;/code&gt; (object) Override the &lt;a href=&quot;https://github.com/captbaritone/winamp2-js/blob/master/js/reducers.js&quot;&gt;initial Redux state&lt;/a&gt;. Values from this object will be recursively merged into the actual default state.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; These are intended mostly as development tools and are subject to change at any time.&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;h2&gt;Predecessors&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://forums.winamp.com/showthread.php?threadid=91850&quot; rel=&quot;nofollow&quot;&gt;Webamp2x&lt;/a&gt; An impressive implementation from 2002(!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://freecog.net/2005/jsamp/demo/MainWindow.xhtml&quot; rel=&quot;nofollow&quot;&gt;JsAmp&lt;/a&gt; An implementation from 2005 by @twm (via &lt;a href=&quot;https://news.ycombinator.com/item?id=15317723&quot; rel=&quot;nofollow&quot;&gt;Hacker News&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/20149683&quot; rel=&quot;nofollow&quot;&gt;LlamaCloud Comp&lt;/a&gt; From 2011 by &lt;a href=&quot;http://www.leemartin.com/&quot; rel=&quot;nofollow&quot;&gt;Lee Martin&lt;/a&gt; (via &lt;a href=&quot;https://twitter.com/leemartin/status/910235793737814017&quot; rel=&quot;nofollow&quot;&gt;Twitter&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.tidbits.com.br/winamp-em-html5-e-javascript&quot; rel=&quot;nofollow&quot;&gt;Winamp em HTML5 e Javascript&lt;/a&gt; In 2010 a developer named Danilo posted one of his HTML5 experiments: &quot;an audio player simulating good old Winamp&quot;. You will have to download the zip file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://cggaurav.github.io/juicydrop/&quot; rel=&quot;nofollow&quot;&gt;JuicyDrop&lt;/a&gt; An HTML5 implementation with less emphasis on being true to the skin, but fully featured visualizations. @cggaurav is keeping it alive on &lt;a href=&quot;https://github.com/cggaurav/juicydrop&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://spotiamp.com/&quot; rel=&quot;nofollow&quot;&gt;Spotiamp&lt;/a&gt; The folks at Spotify reimplemented Winamp as a frontend for Spotify. Not in a browser, and only runs on Windows.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Research and feature prototyping: @PAEz&lt;/li&gt;
&lt;li&gt;Beta feedback, catching many small UI inconsistencies: &lt;a href=&quot;https://twitter.com/LuigiHann&quot; rel=&quot;nofollow&quot;&gt;LuigiHann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Beta feedback and insider answers to obscure Winamp questions: &lt;a href=&quot;https://twitter.com/The_DoctorO&quot; rel=&quot;nofollow&quot;&gt;Darren Owen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Thank you to &lt;a href=&quot;http://www.1014.org/&quot; rel=&quot;nofollow&quot;&gt;Justin Frankel&lt;/a&gt; and everyone at Nullsoft for Winamp which inspired so many of us.&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;While the Winamp name, interface, and, sample audio file are surely property of Nullsoft, the code within this project is released under the &lt;a href=&quot;https://github.com/captbaritone/winamp2-js/blob/master/LICENSE.txt&quot;&gt;MIT License&lt;/a&gt;. That being said, if you do anything interesting with this code, please let me know. I'd love to see it.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Thu, 08 Feb 2018 16:59:08 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/162735?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>captbaritone/winamp2-js</og:title>
<og:url>https://github.com/captbaritone/winamp2-js</og:url>
<og:description>winamp2-js - A reimplementation of Winamp 2.9 in HTML5 and Javascript</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/captbaritone/winamp2-js</dc:identifier>
</item>
<item>
<title>Google is buying Chelsea Market building for over $2B</title>
<link>https://therealdeal.com/2018/02/06/google-is-buying-chelsea-market-building-for-2b-plus/</link>
<guid isPermaLink="true" >https://therealdeal.com/2018/02/06/google-is-buying-chelsea-market-building-for-2b-plus/</guid>
<description>&lt;div readability=&quot;30.157068062827&quot;&gt;
&lt;h3 class=&quot;single-title-full&quot;&gt;Google is buying Chelsea Market building for over $2 billion&lt;/h3&gt;
&lt;p&gt;Jamestown in contract to sell the 1.2M sf office-and-retail property at 75 Ninth Avenue&lt;/p&gt;


&lt;/div&gt;&lt;div readability=&quot;99.369750552573&quot;&gt;
&lt;div id=&quot;attachment_3107046&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;33&quot;&gt;&lt;img class=&quot;size-full wp-image-3107046 lazyload&quot; data-src=&quot;https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;374&quot; data-srcset=&quot;https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3.jpg 600w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-300x187.jpg 300w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-124x77.jpg 124w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-80x50.jpg 80w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-401x250.jpg 401w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-140x87.jpg 140w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-144x90.jpg 144w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-200x125.jpg 200w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-379x236.jpg 379w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-172x107.jpg 172w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-3107046&quot; src=&quot;https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;374&quot; srcset=&quot;https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3.jpg 600w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-300x187.jpg 300w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-124x77.jpg 124w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-80x50.jpg 80w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-401x250.jpg 401w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-140x87.jpg 140w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-144x90.jpg 144w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-200x125.jpg 200w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-379x236.jpg 379w, https://s14.therealdeal.com/trd/up/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-3-172x107.jpg 172w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Google’s Sundar Pichai, Jamestown’s Michael Phillips and Chelsea Market at 75 Ninth Avenue&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Google did not have to search far and wide for results.&lt;/p&gt;
&lt;p&gt;The tech giant is close to acquiring the Chelsea Market building from Jamestown for north of $2 billion, &lt;em&gt;The Real Deal&lt;/em&gt; has learned.&lt;/p&gt;
&lt;p&gt;The 1.2 million-square-foot office-and-retail property at 75 Ninth Avenue is home to the popular food hall as well as &lt;a href=&quot;https://therealdeal.com/2014/11/18/major-league-baseball-hits-150k-sf-at-chelsea-market/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Major League Baseball and&lt;/a&gt; the Food Network. Google is already the largest tenant at the building, leasing about 400,000 square feet of space. The company’s New York headquarters, at 111 Eighth Avenue, is right across the street.&lt;/p&gt;

&lt;p&gt;The deal, which looks to be the first billion-dollar-plus trade to go under contract this year in New York, is slated to close in two months, according to sources familiar with the transaction. They said that Google is paying over $2 billion, or north of $1,600 a square foot. The transaction would give an early boost to the city’s investment-sales market, which saw only one single-building deal exceed $2 billion in 2017 – &lt;a href=&quot;https://therealdeal.com/2017/12/29/the-10-biggest-nyc-investment-sales-of-2017/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HNA Group’s purchase&lt;/a&gt; of 245 Park Avenue.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://therealdeal.com/2018/02/06/watch-the-real-deal-breaks-down-googles-2b-bid-for-the-chelsea-market-building/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WATCH: &lt;em&gt;TRD&lt;/em&gt; breaks down Google’s $2B+ bid for Chelsea Market&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Atlanta-based Jamestown bought out its partners Angelo, Gordon &amp;amp; Co., Belvedere Capital and Irwin Cohen in the building for &lt;a href=&quot;https://therealdeal.com/2011/08/15/jamestown-completes-purchase-of-chelsea-market-from-angelo-gordon-belvedere-capital-and-irwin-cohen/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$225 million&lt;/a&gt; in 2011, valuing the property at nearly $800 million at the time. Cohen had developed Chelsea Market in 1997 after spending only $10 million on the foreclosed mortgage debt.&lt;/p&gt;
&lt;p&gt;It was not immediately clear what Google is planning for Chelsea Market, though sources said the company is expected to keep the status quo at the property’s retail component. The property, located between West 15th and 16th streets, is almost fully occupied. For example, MLB, which is based at &lt;a href=&quot;https://therealdeal.com/2017/11/16/major-league-baseball-gives-back-75k-sf-on-sixth-avenue/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1271 Sixth Avenue&lt;/a&gt;, has a lease there until 2022.&lt;/p&gt;
&lt;p&gt;Google was expected to try and muscle out other tenants at the building, where it has been rapidly swallowing up space, &lt;a href=&quot;https://therealdeal.com/2014/01/27/google-takes-more-space-at-jamestowns-chelsea-market/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;expanding with each lease expiration&lt;/a&gt; at the property.&lt;/p&gt;
&lt;p&gt;CBRE is representing the buyer and Cushman &amp;amp; Wakefield is representing the seller, sources said.&lt;/p&gt;
&lt;p&gt;Representatives for Google, a subsidiary of Alphabet Inc., could not be immediately reached, nor could representatives for Jamestown. The company, which is associated with German-owned syndicator Jamestown US-Immobilien GmbH, is represented in U.S. real estate deals by Michael Phillips.&lt;/p&gt;
&lt;p&gt;Google is already one of the most significant tenants in Chelsea. It paid a then-record $1.77 billion in 2010 to buy its New York headquarters at &lt;a href=&quot;https://therealdeal.com/new-research/topics/property/111-eighth-avenue/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;111 Eighth Avenue&lt;/a&gt;, though it’s been unable to get existing tenants at the 2.9 million-square-foot property out fast enough to meet its space needs. It also has about &lt;a href=&quot;https://therealdeal.com/2017/05/02/google-takes-another-60k-sf-at-vornado-and-relateds-85-10th-avenue/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;240,000 square feet&lt;/a&gt; at Vornado Realty Trust and Related Companies’ 85 10th Avenue.&lt;/p&gt;
&lt;p&gt;In December 2015, Google signed a 250,000-square-foot lease at RXR Realty and YoungWoo &amp;amp; Associates’ SuperPier project. While that space is being built out, &lt;a href=&quot;https://therealdeal.com/2018/01/19/while-superpier-gets-prepped-google-in-talks-for-short-term-space-at-starrett-lehigh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the company has been negotiating&lt;/a&gt; to take about 200,000 square feet at RXR’s Starrett-Lehigh Building on a short-term basis.&lt;/p&gt;



&lt;/div&gt;</description>
<pubDate>Thu, 08 Feb 2018 15:39:32 +0000</pubDate>
<dc:creator>uptown</dc:creator>
<og:title>Google is buying Chelsea Market building for over $2 billion</og:title>
<og:url>https://therealdeal.com/2018/02/06/google-is-buying-chelsea-market-building-for-2b-plus/</og:url>
<og:type>article</og:type>
<og:description>The tech giant, which is expanding its foothold in Chelsea, is close to acquiring the Chelsea Market building from Jamestown for north of $2 billion.</og:description>
<og:image>https://therealdeal.com/wp-content/uploads/2018/02/Googles-Sundar-Pichai-Michael-Phillips-75-Ninth-Avenue-2.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://therealdeal.com/2018/02/06/google-is-buying-chelsea-market-building-for-2b-plus/</dc:identifier>
</item>
<item>
<title>European Parliament requests recommendation to end biannual clock change</title>
<link>https://www.breakingnews.ie/ireland/latest-european-parliament-approves-proposal-to-end-bi-annual-clock-change-826985.html</link>
<guid isPermaLink="true" >https://www.breakingnews.ie/ireland/latest-european-parliament-approves-proposal-to-end-bi-annual-clock-change-826985.html</guid>
<description>&lt;span itemprop=&quot;articleBody&quot;&gt;&lt;strong&gt;Update 11.58am:&lt;/strong&gt; Changing the clocks every summer and winter could soon be a thing of the past after the European Parliament today voted in favour of retaining the same time all-year round.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;MEPs say it now puts the pressure firmly on the European Commission - which has in the past been reluctant to change the system - to implement their decision.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;Fine Gael MEP Sean Kelly, who has been campaigning for the change, said: &quot;I'm very pleased that after years of discussions at Committee level in the European Parliament, of which I'm the only Irish member, that out proposal was debated and voted on today in Parliament, and that Parliament accepted our proposal to ask the European Commission to come forward with a recommendation that we would end the bi-annual clock change.&quot;&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&lt;strong&gt;Update 11.58am: European Parliament to vote on abolishing Daylight Saving Time&lt;/strong&gt;&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;The European Parliament will today vote on whether or not to abolish the current system of putting clocks back in winter and forward in spring.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;/&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;Many believe the clock change negatively impacts on people's mental and physical health.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;Fine Gael MEP Sean Kelly has been pushing to end the bi-annual clock change.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&quot;We think that there's no need to change the clocks,&quot; he said.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&quot;It came in during World War One, it was supposed to be for energy savings - the indications are that there are very few energy savings, if any - and there are an awful lot of disadvantages to both human beings and animals that make it outdated at this point.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&quot;We're working to try and end it.&quot;&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;The European Parliament's Research Service published a study on EU summer-time arrangements last October, which found that the health implications of Daylight Saving Time are &quot;more severe&quot; than previously thought.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&quot;Beyond considerations on the effects, repeal of the Summer Time Directive would not automatically abolish summer time across the EU,&quot; the report stated.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&quot;It would just end EU-wide harmonisation and bring the issue of summer time back into the competence of the member states.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&quot;Member states would be free to decide about their individual time regimes: they might opt to retain summer time (at the current or a modified DST schedule) or to end summer time.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&quot;Abolishing summer time would in the first place result in year-round standard time ('winter time'), which by definition entails darker evenings in spring and summer.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&quot;To obtain year-round summer time member states would technically need to change time zone.&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&quot;However, uncoordinated national time arrangements would likely have negative repercussions on the internal market.&quot;&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;https://www.breakingnews.ie/remote/media.central.ie/media/images/a/alarmclock_large.jpg?width=600&amp;amp;s=bn-826985&quot;/&gt;&lt;/span&gt;&lt;span itemprop=&quot;articleBody&quot;&gt;&lt;em&gt;&lt;strong&gt;- Digital desk&lt;/strong&gt;&lt;/em&gt; &lt;/span&gt;</description>
<pubDate>Thu, 08 Feb 2018 14:36:52 +0000</pubDate>
<dc:creator>skrause</dc:creator>
<og:type>article</og:type>
<og:url>http://www.breakingnews.ie/ireland/latest-european-parliament-approves-proposal-to-end-bi-annual-clock-change-826985.html</og:url>
<og:image>/remote/media.central.ie/media/images/a/alarmclock_large.jpg?width=600&amp;s=bn-826985</og:image>
<og:title>Latest: European Parliament approves proposal to end bi-annual clock change</og:title>
<og:description>Changing the clocks every summer and winter could soon be a thing of the past after the European Parliament today voted in favour of retaining the same time all-year round.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.breakingnews.ie/ireland/latest-european-parliament-approves-proposal-to-end-bi-annual-clock-change-826985.html</dc:identifier>
</item>
<item>
<title>Twitter Soars After Surprise Sales Gain, First Real Profit</title>
<link>https://www.bloomberg.com/news/articles/2018-02-08/twitter-posts-surprise-sales-gain-monthly-user-growth-stagnates</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2018-02-08/twitter-posts-surprise-sales-gain-monthly-user-growth-stagnates</guid>
<description>&lt;p&gt;&lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/quote/TWTR:US&quot; title=&quot;Company Profile&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Twitter Inc.&lt;/a&gt; soared the most since its market debut in 2013 after it posted the first revenue growth in four quarters, driven by improvements to its app and added video content that are persuading advertisers to boost spending on the social network.&lt;/p&gt;


&lt;p&gt;The company topped analysts’ average sales estimates in the fourth quarter and for the first time reported a real profit, a milestone in Chief Executive Officer &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/billionaires/id/16186109&quot; title=&quot;Billionaire Profile&quot; target=&quot;_blank&quot;&gt;Jack Dorsey&lt;/a&gt;’s turnaround effort. Monthly active users were little changed from the prior quarter at 330 million, a lower-than-projected total that the company attributed in part to stepped-up efforts to reduce spam, malicious activity and fake accounts.&lt;/p&gt;


&lt;p&gt;The report adds to positive momentum in recent months for Twitter, which spent the second half of 2017 explaining how Russian-linked accounts -- including automated bots -- &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/politics/articles/2018-01-26/twitter-says-russian-linked-bots-retweeted-trump-470-000-times&quot; title=&quot;Russian Bots Retweeted Trump’s Twitter 470,000 Times (Correct)&quot; target=&quot;_blank&quot;&gt;influenced&lt;/a&gt; content on its platform around the 2016 U.S. presidential election. Dorsey, who also runs Square Inc., has been working to broaden Twitter from a microblogging site into a destination for users to see &quot;what’s happening now” by striking live-streaming partnerships with news outlets and sports leagues.&lt;/p&gt;



&lt;p&gt;After aggressively slashing spending over the past few years, Twitter will invest in products this year that increase audience engagement, which will causes expenses to &quot;more closely align with revenues,&quot; Chief Financial Officer Ned Segal said during a conference call.&lt;/p&gt;


&lt;p&gt;The shares soared as much as 30 percent, the most since Nov. 7, 2013, to $35. They were trading at $31.14 at 12:59 p.m. in New York, bringing gains over the past 12 months to about 66 percent.&lt;/p&gt;
&lt;p&gt;Twitter’s focus on video, as well as a new software algorithm that shows users the most relevant postings first, have led people to spend more time on the platform, said Richard Greenfield, an analyst at BTIG.&lt;/p&gt;
&lt;p&gt;&quot;I think they’ve come a long way,” Greenfield said. “The product has dramatically improved. They’re doing a better job of showing the right tweets to the right people at the right time.&quot; Greenfield added that &quot;consumer or user happiness is making advertisers want to be there.&quot;&lt;/p&gt;
&lt;p&gt;Twitter will be doing more experimentation to make its timeline more &quot;personalized and relevant&quot; to people, Dorsey said. He also emphasized a focus on matching people with their interests as fast as possible. There will be &quot;a much more cohesive strategy&quot; around events, like seeing sports scores during live games, Dorsey said. New product tweaks, like Twitter’s decision to increase the character limit to 280, have increased engagement and minimized confusion, he said.&lt;/p&gt;

&lt;p&gt;“Twitter is finally heading in the right direction after years of a “one step forward two steps back” strategy,” said Daniel Ives, head of technology research at GBH Insights, in a note to clients.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;
&lt;div id=&quot;lazy-img-323680053&quot; class=&quot;lazy-img&quot;&gt;&lt;img src=&quot;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/i8hFEn5.AlNs/v2/60x-1.png&quot; data-native-src=&quot;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/i8hFEn5.AlNs/v2/-1x-1.png&quot; class=&quot;lazy-img__image&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Still, Twitter isn’t all the way out of the woods yet. Twitter’s monthly active users in the U.S. -- a key advertising market --declined by about 1 million in the fourth quarter from the third.&lt;/p&gt;
&lt;p&gt;“Their user base has arguably been saturated,&quot; said James Cakmak, an analyst at Monness Crespi Hardt &amp;amp; Co. &quot;I’m not sure how much more value Twitter can extract from existing users.&quot;&lt;/p&gt;
&lt;p&gt;&lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/gadfly/articles/2018-02-08/twitter-earnings-don-t-get-too-excited-about-a-turnaround&quot; title=&quot;Don’t Get Too Excited About Twitter’s Turnaround: Gadfly&quot; target=&quot;_blank&quot;&gt;To read a Gadfly column about Twitter’s troubles, see here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Twitter also hasn’t fully addressed its problem of automated &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/articles/2017-10-13/twitter-is-crawling-with-bots-and-lacks-incentive-to-expel-them&quot; title=&quot;Twitter Is Crawling With Bots and Lacks Incentive to Expel Them (1)&quot; target=&quot;_blank&quot;&gt;bots&lt;/a&gt; and harassment on the site, and the departure of Chief Operating Officer Anthony Noto could mean Dorsey’s attention is divided as he also juggles leadership of Square.&lt;/p&gt;
&lt;aside class=&quot;inline-newsletter&quot; data-state=&quot;ready&quot;/&gt;&lt;p&gt;Revenue in the recent period rose 2 percent from a year earlier to $731.6 million, buoyed by data-licensing sales and video advertising. Analysts on average had predicted $686.4 million, according to data compiled by Bloomberg. Net income was $91.1 million, or 12 cents a share, marking the first time the company reached profitability under generally accepted accounting principles. That compared with a loss of $167.1 million, or 23 cents, a year earlier. Profit excluding some costs was 19 cents a share, exceeding projections for 14 cents.&lt;/p&gt;
&lt;div class=&quot;chart&quot; data-responsive=&quot;true&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;chart-js&quot; readability=&quot;7&quot;&gt;
&lt;h3 class=&quot;chart__title&quot;&gt;Back to Growth&lt;/h3&gt;
&lt;p class=&quot;chart__subtitle&quot;&gt;Sales were up this quarter on a year-over-year basis for the first time since 2016&lt;/p&gt;

&lt;p class=&quot;chart__source&quot;&gt;Source: Bloomberg&lt;/p&gt;

&lt;/div&gt;
&lt;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iCxGaswK5Y54/v1/-1x-1.png&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;Analysts on average had &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/terminal/P3SSSM6S975Y&quot; title=&quot;PREVIEW TWITTER 4Q: Shares Extend Gains Ahead of Results&quot; class=&quot;terminal-news-story&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;estimated&lt;/a&gt; monthly users would rise to 333 million. Twitter said daily active users increased 12 percent from a year earlier, marking its fifth consecutive quarter of double-digit increases. The company doesn’t disclose the specific number of daily active users, arguing that showing growth is more important.&lt;/p&gt;
&lt;p&gt;Bloomberg LP produces TicToc, a global breaking news service for Twitter’s site.&lt;/p&gt;
&lt;p&gt;The company gave a first-quarter outlook for adjusted earnings before interest, taxes, depreciation and amortization of $185 million to $205 million. Analysts estimated $188.3 million.&lt;/p&gt;
&lt;p&gt;The San Francisco-based company may stand to benefit from Facebook’s recent decision to shift its &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/articles/2018-01-12/facebook-ceo-unveils-news-feed-changes-says-engagement-may-fall&quot; title=&quot;Facebook Changes Could Mean Less Time Spent on Site; Shares Fall&quot; target=&quot;_blank&quot;&gt;news feed&lt;/a&gt; toward content from family and friends and to focus less on posts from media outlets and businesses. The change is encouraging publishers and online advertisers to increase investment on Twitter, according to some &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.bloomberg.com/news/articles/2018-01-19/twitter-analyst-endorsements-pile-up-as-turnaround-gains-steam&quot; title=&quot;Twitter Analyst Support Piles Up as Turnaround Gains Steam (1)&quot; target=&quot;_blank&quot;&gt;analysts&lt;/a&gt;. Still, that may not be enough to move the needle for Twitter’s overall share of worldwide digital ad spending, which is expected to shrink slightly to 0.8 percent this year, according to researcher EMarketer. That compares with Facebook’s 18.4 percent and Google’s 31.3 percent.&lt;/p&gt;
</description>
<pubDate>Thu, 08 Feb 2018 13:22:18 +0000</pubDate>
<dc:creator>svtrent</dc:creator>
<og:description>Twitter Inc. soared the most since its market debut in 2013 after it posted the first revenue growth in four quarters, driven by improvements to its app and added video content that are persuading advertisers to boost spending on the social network.</og:description>
<og:image>https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iac9VKLFWE90/v0/1200x800.jpg</og:image>
<og:title>Twitter Soars After Surprise Sales Gain, First Real Profit</og:title>
<og:type>article</og:type>
<og:url>https://www.bloomberg.com/news/articles/2018-02-08/twitter-posts-surprise-sales-gain-monthly-user-growth-stagnates</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/news/articles/2018-02-08/twitter-posts-surprise-sales-gain-monthly-user-growth-stagnates</dc:identifier>
</item>
<item>
<title>Julia v0.7.0 Release Notes</title>
<link>https://github.com/JuliaLang/julia/blob/master/NEWS.md</link>
<guid isPermaLink="true" >https://github.com/JuliaLang/julia/blob/master/NEWS.md</guid>
<description>
&lt;h2&gt;New language features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Local variables can be tested for being defined using the new &lt;code&gt;@isdefined variable&lt;/code&gt; macro (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22281&quot;&gt;#22281&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Destructuring in function arguments: when an expression such as &lt;code&gt;(x, y)&lt;/code&gt; is used as a function argument name, the argument is unpacked into local variables &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; as in the assignment &lt;code&gt;(x, y) = arg&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/6614&quot;&gt;#6614&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Named tuples, with the syntax &lt;code&gt;(a=1, b=2)&lt;/code&gt;. These behave very similarly to tuples, except components can also be accessed by name using dot syntax &lt;code&gt;t.a&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22194&quot;&gt;#22194&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyword argument containers (&lt;code&gt;kw&lt;/code&gt; in &lt;code&gt;f(; kw...)&lt;/code&gt;) are now named tuples. Dictionary functions like &lt;code&gt;haskey&lt;/code&gt; and indexing can be used on them, and name-value pairs can be iterated using &lt;code&gt;pairs(kw)&lt;/code&gt;. &lt;code&gt;kw&lt;/code&gt; can no longer contain multiple entries for the same argument name (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/4916&quot;&gt;#4916&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom infix operators can now be defined by appending Unicode combining marks, primes, and sub/superscripts to other operators. For example, &lt;code&gt;+̂ₐ″&lt;/code&gt; is parsed as an infix operator with the same precedence as &lt;code&gt;+&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22089&quot;&gt;#22089&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The macro call syntax &lt;code&gt;@macroname[args]&lt;/code&gt; is now available and is parsed as &lt;code&gt;@macroname([args])&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23519&quot;&gt;#23519&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The construct &lt;code&gt;if @generated ...; else ...; end&lt;/code&gt; can be used to provide both &lt;code&gt;@generated&lt;/code&gt; and normal implementations of part of a function. Surrounding code will be common to both versions (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23168&quot;&gt;#23168&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added &lt;code&gt;⟂&lt;/code&gt; (&lt;code&gt;\perp&lt;/code&gt;) operator with comparison precedence (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24404&quot;&gt;#24404&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;missing&lt;/code&gt; singleton object (of type &lt;code&gt;Missing&lt;/code&gt;) has been added to represent missing values (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24653&quot;&gt;#24653&lt;/a&gt;). It propagates through standard operators and mathematical functions, and implements three-valued logic, similar to SQLs &lt;code&gt;NULL&lt;/code&gt; and R's &lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Field access via dot-syntax can now be overloaded by adding methods to &lt;code&gt;Base.getproperty&lt;/code&gt; and &lt;code&gt;Base.setproperty!&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/1974&quot;&gt;#1974&lt;/a&gt;), optionally along with a corresponding &lt;code&gt;Base.propertynames&lt;/code&gt; method for reflection ([#25311]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Values for &lt;code&gt;Enum&lt;/code&gt;s can now be specified inside of a &lt;code&gt;begin&lt;/code&gt; block when using the &lt;code&gt;@enum&lt;/code&gt; macro (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25424&quot;&gt;#25424&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyword arguments can be required: if a default value is omitted, then an exception is thrown if the caller does not assign the keyword a value ([#25830]).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Language changes&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;The syntax for parametric methods, &lt;code&gt;function f{T}(x::T)&lt;/code&gt;, has been changed to &lt;code&gt;function f(x::T) where {T}&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/11310&quot;&gt;#11310&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The fallback constructor that calls &lt;code&gt;convert&lt;/code&gt; is deprecated. Instead, new types should prefer to define constructors, and add &lt;code&gt;convert&lt;/code&gt; methods that call those constructors only as necessary (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/15120&quot;&gt;#15120&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The syntax &lt;code&gt;1.+2&lt;/code&gt; is deprecated, since it is ambiguous: it could mean either &lt;code&gt;1 .+ 2&lt;/code&gt; (the current meaning) or &lt;code&gt;1. + 2&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/19089&quot;&gt;#19089&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutable structs with no fields are no longer singletons; it is now possible to make multiple instances of them that can be distinguished by &lt;code&gt;===&lt;/code&gt; ([#25854]). Zero-size immutable structs are still singletons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In string and character literals, backslash &lt;code&gt;\&lt;/code&gt; may no longer precede unrecognized escape characters (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22800&quot;&gt;#22800&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Juxtaposing binary, octal, and hexadecimal literals is deprecated, since it can lead to confusing code such as &lt;code&gt;0xapi == 0xa * pi&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/16356&quot;&gt;#16356&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Declaring arguments as &lt;code&gt;x::ANY&lt;/code&gt; to avoid specialization has been replaced by &lt;code&gt;@nospecialize x&lt;/code&gt;. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22666&quot;&gt;#22666&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyword argument default values are now evaluated in successive scopes --- the scope for each expression includes only previous keyword arguments, in left-to-right order (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/17240&quot;&gt;#17240&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The parsing of &lt;code&gt;1&amp;lt;&amp;lt;2*3&lt;/code&gt; as &lt;code&gt;1&amp;lt;&amp;lt;(2*3)&lt;/code&gt; is deprecated, and will change to &lt;code&gt;(1&amp;lt;&amp;lt;2)*3&lt;/code&gt; in a future version (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/13079&quot;&gt;#13079&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The parsing of &lt;code&gt;&amp;lt;|&lt;/code&gt; is now right associative. &lt;code&gt;|&amp;gt;&lt;/code&gt; remains left associative (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24153&quot;&gt;#24153&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;{ }&lt;/code&gt; expressions now use &lt;code&gt;braces&lt;/code&gt; and &lt;code&gt;bracescat&lt;/code&gt; as expression heads instead of &lt;code&gt;cell1d&lt;/code&gt; and &lt;code&gt;cell2d&lt;/code&gt;, and parse similarly to &lt;code&gt;vect&lt;/code&gt; and &lt;code&gt;vcat&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/8470&quot;&gt;#8470&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nested &lt;code&gt;if&lt;/code&gt; expressions that arise from the keyword &lt;code&gt;elseif&lt;/code&gt; now use &lt;code&gt;elseif&lt;/code&gt; as their expression head instead of &lt;code&gt;if&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21774&quot;&gt;#21774&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt; blocks now parse the same as &lt;code&gt;for&lt;/code&gt; loops; the first argument is either an assignment or &lt;code&gt;block&lt;/code&gt; of assignments, and the second argument is a block of statements (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21774&quot;&gt;#21774&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;do&lt;/code&gt; syntax now parses to an expression with head &lt;code&gt;:do&lt;/code&gt;, instead of as a function call (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21774&quot;&gt;#21774&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parsed and lowered forms of type definitions have been synchronized with their new keywords (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23157&quot;&gt;#23157&lt;/a&gt;). Expression heads are renamed as follows:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt; =&amp;gt; &lt;code&gt;struct&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bitstype&lt;/code&gt; =&amp;gt; &lt;code&gt;primitive&lt;/code&gt; (order of arguments is also reversed, to match syntax)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;composite_type&lt;/code&gt; =&amp;gt; &lt;code&gt;struct_type&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bits_type&lt;/code&gt; =&amp;gt; &lt;code&gt;primitive_type&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;global&lt;/code&gt; keyword now only introduces a new binding if one doesn't already exist in the module. This means that assignment to a global (&lt;code&gt;global sin = 3&lt;/code&gt;) may now throw the error: &quot;cannot assign variable Base.sin from module Main&quot;, rather than emitting a warning. Additionally, the new bindings are now created before the statement is executed. For example, &lt;code&gt;f() = (global sin = &quot;gluttony&quot;; nothing)&lt;/code&gt; will now resolve which module contains &lt;code&gt;sin&lt;/code&gt; eagerly, rather than delaying that decision until &lt;code&gt;f&lt;/code&gt; is run. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22984&quot;&gt;#22984&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;global const&lt;/code&gt; declarations may no longer appear inside functions ([#12010]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uninitialized &lt;code&gt;BitArray&lt;/code&gt; constructors of the form &lt;code&gt;BitArray[{N}](shape...)&lt;/code&gt; have been deprecated in favor of equivalents accepting &lt;code&gt;uninitialized&lt;/code&gt; (an alias for &lt;code&gt;Uninitialized()&lt;/code&gt;) as their first argument, as in &lt;code&gt;BitArray[{N}](uninitialized, shape...)&lt;/code&gt;. For example, &lt;code&gt;BitVector(3)&lt;/code&gt; is now &lt;code&gt;BitVector(uninitialized, 3)&lt;/code&gt;, &lt;code&gt;BitMatrix((2, 4))&lt;/code&gt; is now &lt;code&gt;BitMatrix(uninitialized, (2, 4))&lt;/code&gt;, and &lt;code&gt;BitArray{3}(11, 13, 17)&lt;/code&gt; is now &lt;code&gt;BitArray{3}(uninitialized, 11, 14, 17)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24785&quot;&gt;#24785&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dispatch rules have been simplified: method matching is now determined exclusively by subtyping; the rule that method type parameters must also be captured has been removed. Instead, attempting to access the unconstrained parameters will throw an &lt;code&gt;UndefVarError&lt;/code&gt;. Linting in package tests is recommended to confirm that the set of methods which might throw &lt;code&gt;UndefVarError&lt;/code&gt; when accessing the static parameters (&lt;code&gt;need_to_handle_undef_sparam = Set{Any}(m.sig for m in Test.detect_unbound_args(Base, recursive=true))&lt;/code&gt;) is equal (&lt;code&gt;==&lt;/code&gt;) to some known set (&lt;code&gt;expected = Set()&lt;/code&gt;). (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23117&quot;&gt;#23117&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt; declarations on local variables were previously ignored. They now give a warning, so that this syntax can be disallowed or given a new meaning in a future version (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/5148&quot;&gt;#5148&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Placing an expression after &lt;code&gt;catch&lt;/code&gt;, as in &lt;code&gt;catch f(x)&lt;/code&gt;, is deprecated. Use &lt;code&gt;catch; f(x)&lt;/code&gt; instead (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/19987&quot;&gt;#19987&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;for i = ...&lt;/code&gt;, if a local variable &lt;code&gt;i&lt;/code&gt; already existed it would be overwritten during the loop. This behavior is deprecated, and in the future &lt;code&gt;for&lt;/code&gt; loop variables will always be new variables local to the loop (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22314&quot;&gt;#22314&lt;/a&gt;). The old behavior of overwriting an existing variable is available via &lt;code&gt;for outer i = ...&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;for i in x&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; used to be evaluated in a new scope enclosing the &lt;code&gt;for&lt;/code&gt; loop. Now it is evaluated in the scope outside the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variable bindings local to &lt;code&gt;while&lt;/code&gt; loop bodies are now freshly allocated on each loop iteration, matching the behavior of &lt;code&gt;for&lt;/code&gt; loops.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefix &lt;code&gt;&amp;amp;&lt;/code&gt; for by-reference arguments to &lt;code&gt;ccall&lt;/code&gt; has been deprecated in favor of &lt;code&gt;Ref&lt;/code&gt; argument types (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/6080&quot;&gt;#6080&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The constructor &lt;code&gt;Ref(x::T)&lt;/code&gt; now always returns a &lt;code&gt;Ref{T}&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21527&quot;&gt;#21527&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All line numbers in ASTs are represented by &lt;code&gt;LineNumberNode&lt;/code&gt;s; the &lt;code&gt;:line&lt;/code&gt; expression head is no longer used. &lt;code&gt;QuoteNode&lt;/code&gt;s are also consistently used for quoted symbols instead of the &lt;code&gt;:quote&lt;/code&gt; expression head (though &lt;code&gt;:quote&lt;/code&gt; &lt;code&gt;Expr&lt;/code&gt;s are still used for quoted expressions) (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23885&quot;&gt;#23885&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; methods for &lt;code&gt;Number&lt;/code&gt; and &lt;code&gt;UniformScaling&lt;/code&gt; are not ambiguous anymore since &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; no longer do automatic broadcasting. Hence the methods for &lt;code&gt;UniformScaling&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt; are no longer deprecated (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23923&quot;&gt;#23923&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The keyword &lt;code&gt;importall&lt;/code&gt; is deprecated. Use &lt;code&gt;using&lt;/code&gt; and/or individual &lt;code&gt;import&lt;/code&gt; statements instead (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22789&quot;&gt;#22789&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reduce(+, [...])&lt;/code&gt; and &lt;code&gt;reduce(*, [...])&lt;/code&gt; no longer widen the iterated over arguments to system word size. &lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt; still preserve this behavior. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22825&quot;&gt;#22825&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like &lt;code&gt;_&lt;/code&gt;, variable names consisting only of underscores can be assigned, but accessing their values is deprecated (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24221&quot;&gt;#24221&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Raw string literal escaping rules have been changed to make it possible to write all strings. The rule is that backslashes escape both quotes and other backslashes, but only when a sequence of backslashes precedes a quote character. Thus, 2n backslashes followed by a quote encodes n backslashes and the end of the literal while 2n+1 backslashes followed by a quote encodes n backslashes followed by a quote character (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22926&quot;&gt;#22926&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The syntax &lt;code&gt;(x...)&lt;/code&gt; for constructing a tuple is deprecated; use &lt;code&gt;(x...,)&lt;/code&gt; instead (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24452&quot;&gt;#24452&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-parenthesized interpolated variables in strings, e.g. &lt;code&gt;&quot;$x&quot;&lt;/code&gt;, must be followed by a character that will never be an allowed identifier character (currently operators, space/control characters, or common punctuation characters) (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25231&quot;&gt;#25231&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The syntax &lt;code&gt;using A.B&lt;/code&gt; can now only be used when &lt;code&gt;A.B&lt;/code&gt; is a module, and the syntax &lt;code&gt;using A: B&lt;/code&gt; can only be used for adding single bindings (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/8000&quot;&gt;#8000&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;=&amp;gt;&lt;/code&gt; now has its own precedence level, giving it strictly higher precedence than &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;,&lt;/code&gt; ([#25391]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;begin&lt;/code&gt; is disallowed inside indexing expressions, in order to enable the syntax &lt;code&gt;a[begin]&lt;/code&gt; (for selecting the first element) in the future (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23354&quot;&gt;#23354&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Underscores for &lt;code&gt;_italics_&lt;/code&gt; and &lt;code&gt;__bold__&lt;/code&gt; are now supported by the Base Markdown parser. ([#25564])&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;p&gt;This section lists changes that do not have deprecation warnings.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;readuntil&lt;/code&gt; now does &lt;em&gt;not&lt;/em&gt; include the delimiter in its result, matching the behavior of &lt;code&gt;readline&lt;/code&gt;. Pass &lt;code&gt;keep=true&lt;/code&gt; to get the old behavior ([#25633]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;countlines&lt;/code&gt; now always counts the last non-empty line even if it does not end with EOL, matching the behavior of &lt;code&gt;eachline&lt;/code&gt; and &lt;code&gt;readlines&lt;/code&gt; ([#25845]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getindex(s::String, r::UnitRange{Int})&lt;/code&gt; now throws &lt;code&gt;UnicodeError&lt;/code&gt; if &lt;code&gt;last(r)&lt;/code&gt; is not a valid index into &lt;code&gt;s&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22572&quot;&gt;#22572&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ntuple(f, n::Integer)&lt;/code&gt; throws &lt;code&gt;ArgumentError&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is negative. Previously an empty tuple was returned (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21697&quot;&gt;#21697&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Juxtaposing string literals (e.g. &lt;code&gt;&quot;x&quot;y&lt;/code&gt;) is now a syntax error (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/20575&quot;&gt;#20575&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;finalizer(function, object)&lt;/code&gt; now returns &lt;code&gt;object&lt;/code&gt; rather than &lt;code&gt;nothing&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24679&quot;&gt;#24679&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The constructor of &lt;code&gt;SubString&lt;/code&gt; now checks if the requsted view range is defined by valid indices in the parent &lt;code&gt;AbstractString&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22511&quot;&gt;#22511&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Macro calls with &lt;code&gt;for&lt;/code&gt; expressions are now parsed as generators inside function argument lists (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/18650&quot;&gt;#18650&lt;/a&gt;). Examples:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;sum(@inbounds a[i] for i = 1:n)&lt;/code&gt; used to give a syntax error, but is now parsed as &lt;code&gt;sum(@inbounds(a[i]) for i = 1:n)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sum(@m x for i = 1:n end)&lt;/code&gt; used to parse the argument to &lt;code&gt;sum&lt;/code&gt; as a 2-argument call to macro &lt;code&gt;@m&lt;/code&gt;, but now parses it as a generator plus a syntax error for the dangling &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@__DIR__&lt;/code&gt; returns the current working directory rather than &lt;code&gt;nothing&lt;/code&gt; when not run from a file (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21759&quot;&gt;#21759&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@__FILE__&lt;/code&gt; and &lt;code&gt;@__DIR__&lt;/code&gt; return information relative to the file that it was parsed from, rather than from the task-local &lt;code&gt;SOURCE_PATH&lt;/code&gt; global when it was expanded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All macros receive an extra argument &lt;code&gt;__source__::LineNumberNode&lt;/code&gt; which describes the parser location in the source file for the &lt;code&gt;@&lt;/code&gt; of the macro call. It can be accessed as a normal argument variable in the body of the macro. This is implemented by inserting an extra leading argument into the &lt;code&gt;Expr(:macrocall, :@name, LineNumberNode(...), args...)&lt;/code&gt; surface syntax. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21746&quot;&gt;#21746&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passing the same keyword argument multiple times is now a syntax error (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/16937&quot;&gt;#16937&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getsockname&lt;/code&gt; on a &lt;code&gt;TCPSocket&lt;/code&gt; now returns the locally bound address and port of the socket. Previously the address of the remote endpoint was being returned (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21825&quot;&gt;#21825&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;ARGS&lt;/code&gt; within the ~/.juliarc.jl or within a .jl file loaded with &lt;code&gt;--load&lt;/code&gt; will no longer contain the script name as the first argument. Instead the script name will be assigned to &lt;code&gt;PROGRAM_FILE&lt;/code&gt;. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22092&quot;&gt;#22092&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The format for a &lt;code&gt;ClusterManager&lt;/code&gt; specifying the cookie on the command line is now &lt;code&gt;--worker=&amp;lt;cookie&amp;gt;&lt;/code&gt;. &lt;code&gt;--worker &amp;lt;cookie&amp;gt;&lt;/code&gt; will not work as it is now an optional argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The representation of &lt;code&gt;CartesianRange&lt;/code&gt; has changed to a tuple-of-AbstractUnitRanges; the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; fields are no longer present. Use &lt;code&gt;first(R)&lt;/code&gt; and &lt;code&gt;last(R)&lt;/code&gt; to obtain start/stop. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/20974&quot;&gt;#20974&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Diagonal&lt;/code&gt;, &lt;code&gt;Bidiagonal&lt;/code&gt;, &lt;code&gt;Tridiagonal&lt;/code&gt; and &lt;code&gt;SymTridiagonal&lt;/code&gt; type definitions have changed from &lt;code&gt;Diagonal{T}&lt;/code&gt;, &lt;code&gt;Bidiagonal{T}&lt;/code&gt;, &lt;code&gt;Tridiagonal{T}&lt;/code&gt; and &lt;code&gt;SymTridiagonal{T}&lt;/code&gt; to &lt;code&gt;Diagonal{T,V&amp;lt;:AbstractVector{T}}&lt;/code&gt;, &lt;code&gt;Bidiagonal{T,V&amp;lt;:AbstractVector{T}}&lt;/code&gt;, &lt;code&gt;Tridiagonal{T,V&amp;lt;:AbstractVector{T}}&lt;/code&gt; and &lt;code&gt;SymTridiagonal{T,V&amp;lt;:AbstractVector{T}}&lt;/code&gt; respectively (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22718&quot;&gt;#22718&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22925&quot;&gt;#22925&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23035&quot;&gt;#23035&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23154&quot;&gt;#23154&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The immediate supertype of &lt;code&gt;BitArray&lt;/code&gt; is now simply &lt;code&gt;AbstractArray&lt;/code&gt;. &lt;code&gt;BitArray&lt;/code&gt; is no longer considered a subtype of &lt;code&gt;DenseArray&lt;/code&gt; and &lt;code&gt;StridedArray&lt;/code&gt; ([#25858]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When called with an argument that contains &lt;code&gt;NaN&lt;/code&gt; elements, &lt;code&gt;findmin&lt;/code&gt; and &lt;code&gt;findmax&lt;/code&gt; now return the first &lt;code&gt;NaN&lt;/code&gt; found and its corresponding index. Previously, &lt;code&gt;NaN&lt;/code&gt; elements were ignored. The new behavior matches that of &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;minimum&lt;/code&gt;, and &lt;code&gt;maximum&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isapprox(x,y)&lt;/code&gt; now tests &lt;code&gt;norm(x-y) &amp;lt;= max(atol, rtol*max(norm(x), norm(y)))&lt;/code&gt; rather than &lt;code&gt;norm(x-y) &amp;lt;= atol + ...&lt;/code&gt;, and &lt;code&gt;rtol&lt;/code&gt; defaults to zero if an &lt;code&gt;atol &amp;gt; 0&lt;/code&gt; is specified (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22742&quot;&gt;#22742&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spaces are no longer allowed between &lt;code&gt;@&lt;/code&gt; and the name of a macro in a macro call (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22868&quot;&gt;#22868&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Juxtaposition of a non-literal with a macro call (&lt;code&gt;x@macro&lt;/code&gt;) is no longer valid syntax (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22868&quot;&gt;#22868&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On a cluster, all files are now loaded from the local file system rather than node 1 (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22588&quot;&gt;#22588&lt;/a&gt;). To load the same file everywhere from node 1, one possible alternative is to broadcast a call to &lt;code&gt;include_string&lt;/code&gt;: &lt;code&gt;@everywhere include_string(Main, $(read(&quot;filename&quot;, String)), &quot;filename&quot;)&lt;/code&gt;. Improving upon this API is left as an opportunity for packages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;randperm(n)&lt;/code&gt; and &lt;code&gt;randcycle(n)&lt;/code&gt; now always return a &lt;code&gt;Vector{Int}&lt;/code&gt; (independent of the type of &lt;code&gt;n&lt;/code&gt;). Use the corresponding mutating functions &lt;code&gt;randperm!&lt;/code&gt; and &lt;code&gt;randcycle!&lt;/code&gt; to control the array type (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22723&quot;&gt;#22723&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hermitian now ignores any imaginary components in the diagonal instead of checking the diagonal. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/17367&quot;&gt;#17367&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Worker-worker connections are setup lazily for an &lt;code&gt;:all_to_all&lt;/code&gt; topology. Use keyword arg &lt;code&gt;lazy=false&lt;/code&gt; to force all connections to be setup during a &lt;code&gt;addprocs&lt;/code&gt; call. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22814&quot;&gt;#22814&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;joinpath(a, b)&lt;/code&gt; on Windows, if the drive specifications of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; do not match, &lt;code&gt;joinpath&lt;/code&gt; now returns &lt;code&gt;b&lt;/code&gt; instead of throwing an &lt;code&gt;ArgumentError&lt;/code&gt;. &lt;code&gt;joinpath(path...)&lt;/code&gt; is defined to be left associative, so if any argument has a drive path which does not match the drive of the join of the preceding paths, the prior ones are dropped. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/20912&quot;&gt;#20912&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;^(A::AbstractMatrix{&amp;lt;:Integer}, p::Integer)&lt;/code&gt; now throws a &lt;code&gt;DomainError&lt;/code&gt; if &lt;code&gt;p &amp;lt; 0&lt;/code&gt;, unless &lt;code&gt;A == one(A)&lt;/code&gt; or &lt;code&gt;A == -one(A)&lt;/code&gt; (same as for &lt;code&gt;^(A::Integer, p::Integer)&lt;/code&gt;) (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23366&quot;&gt;#23366&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;^(A::AbstractMatrix{&amp;lt;:Integer}, p::Integer)&lt;/code&gt; now promotes the element type in the same way as &lt;code&gt;^(A::Integer, p::Integer)&lt;/code&gt;. This means, for instance, that &lt;code&gt;[1 1; 0 1]^big(1)&lt;/code&gt; will return a &lt;code&gt;Matrix{BigInt}&lt;/code&gt; instead of a &lt;code&gt;Matrix{Int}&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23366&quot;&gt;#23366&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The element type of the input is now preserved in &lt;code&gt;unique&lt;/code&gt;. Previously the element type of the output was shrunk to fit the union of the type of each element in the input. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22696&quot;&gt;#22696&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;promote&lt;/code&gt; function now raises an error if its arguments are of different types and if attempting to convert them to a common type fails to change any of their types. This avoids stack overflows in the common case of definitions like &lt;code&gt;f(x, y) = f(promote(x, y)...)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22801&quot;&gt;#22801&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;indmin&lt;/code&gt; and &lt;code&gt;indmax&lt;/code&gt; have been renamed to &lt;code&gt;argmin&lt;/code&gt; and &lt;code&gt;argmax&lt;/code&gt;, respectively (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25654&quot;&gt;#25654&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;findmin&lt;/code&gt;, &lt;code&gt;findmax&lt;/code&gt;, &lt;code&gt;argmin&lt;/code&gt;, and &lt;code&gt;argmax&lt;/code&gt; used to always return linear indices. They now return &lt;code&gt;CartesianIndex&lt;/code&gt;es for all but 1-d arrays, and in general return the &lt;code&gt;keys&lt;/code&gt; of indexed collections (e.g. dictionaries) (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22907&quot;&gt;#22907&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;openspecfun&lt;/code&gt; library is no longer built and shipped with Julia, as it is no longer used internally (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22390&quot;&gt;#22390&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All loaded packges used to have bindings in &lt;code&gt;Main&lt;/code&gt; (e.g. &lt;code&gt;Main.Package&lt;/code&gt;). This is no longer the case; now bindings will only exist for packages brought into scope by typing &lt;code&gt;using Package&lt;/code&gt; or &lt;code&gt;import Package&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/17997&quot;&gt;#17997&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;slicedim(b::BitVector, 1, x)&lt;/code&gt; now consistently returns the same thing that &lt;code&gt;b[x]&lt;/code&gt; would, consistent with its documentation. Previously it would return a &lt;code&gt;BitArray{0}&lt;/code&gt; for scalar &lt;code&gt;x&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/20233&quot;&gt;#20233&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The rules for mixed-signedness integer arithmetic (e.g. &lt;code&gt;Int32(1) + UInt64(1)&lt;/code&gt;) have been simplified: if the arguments have different sizes (in bits), then the type of the larger argument is used. If the arguments have the same size, the unsigned type is used (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/9292&quot;&gt;#9292&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All command line arguments passed via &lt;code&gt;-e&lt;/code&gt;, &lt;code&gt;-E&lt;/code&gt;, and &lt;code&gt;-L&lt;/code&gt; will be executed in the order given on the command line (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23665&quot;&gt;#23665&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;I&lt;/code&gt; now yields &lt;code&gt;UniformScaling{Bool}(true)&lt;/code&gt; rather than &lt;code&gt;UniformScaling{Int64}(1)&lt;/code&gt; to better preserve types in operations involving &lt;code&gt;I&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24396&quot;&gt;#24396&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The return type of &lt;code&gt;reinterpret&lt;/code&gt; has changed to &lt;code&gt;ReinterpretArray&lt;/code&gt;. &lt;code&gt;reinterpret&lt;/code&gt; on sparse arrays has been discontinued.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Base.find_in_path&lt;/code&gt; is now &lt;code&gt;Base.find_package&lt;/code&gt; or &lt;code&gt;Base.find_source_file&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24320&quot;&gt;#24320&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;finalizer&lt;/code&gt; now takes functions or pointers as its first argument, and the object being finalized as its second (rather than the reverse). For the majority of use cases deprecation warnings will be triggered. However, deprecation warnings will not trigger where (1) the callable argument is not a subtype of &lt;code&gt;Function&lt;/code&gt;; or (2) both arguments are &lt;code&gt;Function&lt;/code&gt;s or &lt;code&gt;Ptr{Cvoid}&lt;/code&gt;s (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24605&quot;&gt;#24605&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;kill&lt;/code&gt; function now throws errors on user error (e.g. on permission errors), but returns successfully if the process had previously exited. Its return value has been removed. Use the &lt;code&gt;process_running&lt;/code&gt; function to determine if a process has already exited.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Broadcasting has been redesigned with an extensible public interface. The new API is documented at &lt;a href=&quot;https://docs.julialang.org/en/latest/manual/interfaces/#Interfaces-1&quot; rel=&quot;nofollow&quot;&gt;https://docs.julialang.org/en/latest/manual/interfaces/#Interfaces-1&lt;/a&gt;. &lt;code&gt;AbstractArray&lt;/code&gt; types that specialized broadcasting using the old internal API will need to switch to the new API. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/20740&quot;&gt;#20740&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The logging system has been redesigned - &lt;code&gt;info&lt;/code&gt; and &lt;code&gt;warn&lt;/code&gt; are deprecated and replaced with the logging macros &lt;code&gt;@info&lt;/code&gt;, &lt;code&gt;@warn&lt;/code&gt;, &lt;code&gt;@debug&lt;/code&gt; and &lt;code&gt;@error&lt;/code&gt;. The &lt;code&gt;logging&lt;/code&gt; function is also deprecated and replaced with &lt;code&gt;AbstractLogger&lt;/code&gt; and the functions from the new standard &lt;code&gt;Logging&lt;/code&gt; library. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24490&quot;&gt;#24490&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;RevString&lt;/code&gt; type has been removed from the language; &lt;code&gt;reverse(::String)&lt;/code&gt; returns a &lt;code&gt;String&lt;/code&gt; with code points (or fragments thereof) in reverse order. In general, &lt;code&gt;reverse(s)&lt;/code&gt; should return a string of the same type and encoding as &lt;code&gt;s&lt;/code&gt; with code points in reverse order; any string type overrides &lt;code&gt;reverse&lt;/code&gt; to return a different type of string must also override &lt;code&gt;reverseind&lt;/code&gt; to compute reversed indices correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eachindex(A, B...)&lt;/code&gt; now requires that all inputs have the same number of elements. When the chosen indexing is Cartesian, they must have the same axes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AbstractRange&lt;/code&gt; objects are now considered as equal to other &lt;code&gt;AbstractArray&lt;/code&gt; objects by &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;isequal&lt;/code&gt; if all of their elements are equal (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/16401&quot;&gt;#16401&lt;/a&gt;). This has required changing the hashing algorithm: ranges now use an O(N) fallback instead of a O(1) specialized method unless they define the &lt;code&gt;Base.RangeStepStyle&lt;/code&gt; trait; see its documentation for details. Types which support subtraction (operator &lt;code&gt;-&lt;/code&gt;) must now implement &lt;code&gt;widen&lt;/code&gt; for hashing to work inside heterogeneous arrays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;findn(x::AbstractArray)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;findall(!iszero, x)&lt;/code&gt;, which now returns cartesian indices for multidimensional arrays (see below, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25532&quot;&gt;#25532&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; has been renamed to &lt;code&gt;findall&lt;/code&gt;. &lt;code&gt;findall&lt;/code&gt;, &lt;code&gt;findfirst&lt;/code&gt;, &lt;code&gt;findlast&lt;/code&gt;, &lt;code&gt;findnext&lt;/code&gt; now take and/or return the same type of indices as &lt;code&gt;keys&lt;/code&gt;/&lt;code&gt;pairs&lt;/code&gt; for &lt;code&gt;AbstractArray&lt;/code&gt;, &lt;code&gt;AbstractDict&lt;/code&gt;, &lt;code&gt;AbstractString&lt;/code&gt;, &lt;code&gt;Tuple&lt;/code&gt; and &lt;code&gt;NamedTuple&lt;/code&gt; objects (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24774&quot;&gt;#24774&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25545&quot;&gt;#25545&lt;/a&gt;). In particular, this means that they use &lt;code&gt;CartesianIndex&lt;/code&gt; objects for matrices and higher-dimensional arrays insted of linear indices as was previously the case. Use &lt;code&gt;LinearIndices(a)[findall(f, a)]&lt;/code&gt; and similar constructs to compute linear indices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Base.HasShape&lt;/code&gt; iterator trait has gained a type parameter &lt;code&gt;N&lt;/code&gt; indicating the number of dimensions, which must correspond to the length of the tuple returned by &lt;code&gt;size&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25655&quot;&gt;#25655&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AbstractSet&lt;/code&gt; objects are now considered equal by &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;isequal&lt;/code&gt; if all of their elements are equal ([#25368]). This has required changing the hashing algorithm for &lt;code&gt;BitSet&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the default behavior of &lt;code&gt;titlecase&lt;/code&gt; is changed in two ways ([#23393]):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;characters not starting a word are converted to lowercase; a new keyword argument &lt;code&gt;strict&lt;/code&gt; is added which allows to get the old behavior when it's &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;any non-letter character is considered as a word separator; to get the old behavior (only &quot;space&quot; characters are considered as word separators), use the keyword &lt;code&gt;wordsep=isspace&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;writedlm&lt;/code&gt; in the standard library module DelimitedFiles now writes numeric values using &lt;code&gt;print&lt;/code&gt; rather than &lt;code&gt;print_shortest&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25745&quot;&gt;#25745&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;tempname&lt;/code&gt; function used to create a file on Windows but not on other platforms. It now never creates a file ([#9053]).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Library improvements&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;thisind(s::AbstractString, i::Integer)&lt;/code&gt; returns the largest valid index less or equal than &lt;code&gt;i&lt;/code&gt; in the string &lt;code&gt;s&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; if no such index exists (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24414&quot;&gt;#24414&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Irrational&lt;/code&gt; is now a subtype of &lt;code&gt;AbstractIrrational&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24245&quot;&gt;#24245&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Introduced the &lt;code&gt;empty&lt;/code&gt; function, the functional pair to &lt;code&gt;empty!&lt;/code&gt; which returns a new, empty container (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24390&quot;&gt;#24390&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jump to first/last history entries in the REPL via &quot;Alt-&amp;lt;&quot; and &quot;Alt-&amp;gt;&quot; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22829&quot;&gt;#22829&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;chop&lt;/code&gt; now accepts two arguments &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; allowing to specify number of characters to remove from the head and tail of the string (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24126&quot;&gt;#24126&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;get(io, :color, false)&lt;/code&gt; can now be used to query whether a stream &lt;code&gt;io&lt;/code&gt; supports &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot; rel=&quot;nofollow&quot;&gt;ANSI color codes&lt;/a&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25067&quot;&gt;#25067&lt;/a&gt;), rather than using the undocumented &lt;code&gt;Base.have_color&lt;/code&gt; global flag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; now accept &lt;code&gt;nchar&lt;/code&gt; argument for &lt;code&gt;AbstractString&lt;/code&gt;. If this argument is used they return a string consisting of first/last &lt;code&gt;nchar&lt;/code&gt; characters from the original string (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23960&quot;&gt;#23960&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expressions &lt;code&gt;x^-n&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is an &lt;em&gt;integer literal&lt;/em&gt; now correspond to &lt;code&gt;inv(x)^n&lt;/code&gt;. For example, &lt;code&gt;x^-1&lt;/code&gt; is now essentially a synonym for &lt;code&gt;inv(x)&lt;/code&gt;, and works in a type-stable way even if &lt;code&gt;typeof(x) != typeof(inv(x))&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24240&quot;&gt;#24240&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New &lt;code&gt;Iterators.reverse(itr)&lt;/code&gt; for reverse-order iteration (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24187&quot;&gt;#24187&lt;/a&gt;). Iterator types &lt;code&gt;T&lt;/code&gt; can implement &lt;code&gt;start&lt;/code&gt; etc. for &lt;code&gt;Iterators.Reverse{T}&lt;/code&gt; to support this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The functions &lt;code&gt;nextind&lt;/code&gt; and &lt;code&gt;prevind&lt;/code&gt; now accept &lt;code&gt;nchar&lt;/code&gt; argument that indicates the number of characters to move (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23805&quot;&gt;#23805&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The functions &lt;code&gt;strip&lt;/code&gt;, &lt;code&gt;lstrip&lt;/code&gt; and &lt;code&gt;rstrip&lt;/code&gt; now return &lt;code&gt;SubString&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22496&quot;&gt;#22496&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The functions &lt;code&gt;strwidth&lt;/code&gt; and &lt;code&gt;charwidth&lt;/code&gt; have been merged into &lt;code&gt;textwidth&lt;/code&gt;(&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/20816&quot;&gt;#20816&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The functions &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;digits&lt;/code&gt; digits now accept a negative base (like &lt;code&gt;ndigits&lt;/code&gt; did) (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21692&quot;&gt;#21692&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;randn&lt;/code&gt; now accepts complex arguments (&lt;code&gt;Complex{T &amp;lt;: AbstractFloat}&lt;/code&gt;) (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21973&quot;&gt;#21973&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parse(Complex{T}, string)&lt;/code&gt; can parse complex numbers in some common formats (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24713&quot;&gt;#24713&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;rand&lt;/code&gt; can now pick up random elements from strings, associatives and sets (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22228&quot;&gt;#22228&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21960&quot;&gt;#21960&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/18155&quot;&gt;#18155&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22224&quot;&gt;#22224&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Method lists are now printed as a numbered list. In addition, the source code of a method can be opened in an editor by entering the corresponding number in the REPL and pressing &lt;code&gt;^Q&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22007&quot;&gt;#22007&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getpeername&lt;/code&gt; on a &lt;code&gt;TCPSocket&lt;/code&gt; returns the address and port of the remote endpoint of the TCP connection (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21825&quot;&gt;#21825&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resize!&lt;/code&gt; and &lt;code&gt;sizehint!&lt;/code&gt; methods no longer over-reserve memory when the requested array size is more than double of its current size (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22038&quot;&gt;#22038&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;crc32c&lt;/code&gt; function for CRC-32c checksums is now exported (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22274&quot;&gt;#22274&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eye(::Type{Diagonal{T}}, m::Integer)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;Diagonal{T}(I, m)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24413&quot;&gt;#24413&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The output of &lt;code&gt;versioninfo&lt;/code&gt; is now controlled with keyword arguments (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21974&quot;&gt;#21974&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;LibGit2.set_remote_url&lt;/code&gt; now always sets both the fetch and push URLs for a git repo. Additionally, the argument order was changed to be consistent with the git command line tool (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22062&quot;&gt;#22062&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logspace&lt;/code&gt; now accepts a &lt;code&gt;base&lt;/code&gt; keyword argument to specify the base of the logarithmic range. The base defaults to 10 (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22310&quot;&gt;#22310&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added &lt;code&gt;unique!&lt;/code&gt; which is an inplace version of &lt;code&gt;unique&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/20549&quot;&gt;#20549&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@test isequal(x, y)&lt;/code&gt; and &lt;code&gt;@test isapprox(x, y)&lt;/code&gt; now prints an evaluated expression when the test fails (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22296&quot;&gt;#22296&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uses of &lt;code&gt;Val{c}&lt;/code&gt; in &lt;code&gt;Base&lt;/code&gt; has been replaced with &lt;code&gt;Val{c}()&lt;/code&gt;, which is now easily accessible via the &lt;code&gt;@pure&lt;/code&gt; constructor &lt;code&gt;Val(c)&lt;/code&gt;. Functions are defined as &lt;code&gt;f(::Val{c}) = ...&lt;/code&gt; and called by &lt;code&gt;f(Val(c))&lt;/code&gt;. Notable affected functions include: &lt;code&gt;ntuple&lt;/code&gt;, &lt;code&gt;Base.literal_pow&lt;/code&gt;, &lt;code&gt;sqrtm&lt;/code&gt;, &lt;code&gt;lufact&lt;/code&gt;, &lt;code&gt;lufact!&lt;/code&gt;, &lt;code&gt;qrfact&lt;/code&gt;, &lt;code&gt;qrfact!&lt;/code&gt;, &lt;code&gt;cholfact&lt;/code&gt;, &lt;code&gt;cholfact!&lt;/code&gt;, &lt;code&gt;_broadcast!&lt;/code&gt;, &lt;code&gt;reshape&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;cat_t&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new &lt;code&gt;@macroexpand1&lt;/code&gt; macro for non recursive macro expansion (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21662&quot;&gt;#21662&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Char&lt;/code&gt;s can now be concatenated with &lt;code&gt;String&lt;/code&gt;s and/or other &lt;code&gt;Char&lt;/code&gt;s using &lt;code&gt;*&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22532&quot;&gt;#22532&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Diagonal&lt;/code&gt;, &lt;code&gt;Bidiagonal&lt;/code&gt;, &lt;code&gt;Tridiagonal&lt;/code&gt; and &lt;code&gt;SymTridiagonal&lt;/code&gt; are now parameterized on the type of the wrapped vectors, allowing &lt;code&gt;Diagonal&lt;/code&gt;, &lt;code&gt;Bidiagonal&lt;/code&gt;, &lt;code&gt;Tridiagonal&lt;/code&gt; and &lt;code&gt;SymTridiagonal&lt;/code&gt; matrices with arbitrary &lt;code&gt;AbstractVector&lt;/code&gt;s (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22718&quot;&gt;#22718&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22925&quot;&gt;#22925&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23035&quot;&gt;#23035&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23154&quot;&gt;#23154&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutating versions of &lt;code&gt;randperm&lt;/code&gt; and &lt;code&gt;randcycle&lt;/code&gt; have been added: &lt;code&gt;randperm!&lt;/code&gt; and &lt;code&gt;randcycle!&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22723&quot;&gt;#22723&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BigFloat&lt;/code&gt; random numbers can now be generated (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22720&quot;&gt;#22720&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REPL Undo via Ctrl-/ and Ctrl-_&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;diagm&lt;/code&gt; now accepts several diagonal index/vector &lt;code&gt;Pair&lt;/code&gt;s (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24047&quot;&gt;#24047&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New function &lt;code&gt;equalto(x)&lt;/code&gt;, which returns a function that compares its argument to &lt;code&gt;x&lt;/code&gt; using &lt;code&gt;isequal&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23812&quot;&gt;#23812&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reinterpret&lt;/code&gt; now works on any AbstractArray using the new &lt;code&gt;ReinterpretArray&lt;/code&gt; type. This supersedes the old behavior of reinterpret on Arrays. As a result, reinterpreting arrays with different alignment requirements (removed in 0.6) is once again allowed (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23750&quot;&gt;#23750&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;keys&lt;/code&gt; of an &lt;code&gt;Associative&lt;/code&gt; are now an &lt;code&gt;AbstractSet&lt;/code&gt;. &lt;code&gt;Base.KeyIterator{&amp;lt;:Associative}&lt;/code&gt; has been changed to &lt;code&gt;KeySet{K, &amp;lt;:Associative{K}} &amp;lt;: AbstractSet{K}&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24580&quot;&gt;#24580&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New function &lt;code&gt;ncodeunits(s::AbstractString)&lt;/code&gt; gives the number of code units in a string. The generic definition is constant time but calls &lt;code&gt;lastindex(s)&lt;/code&gt; which may be inefficient. Therefore custom string types may want to define direct &lt;code&gt;ncodeunits&lt;/code&gt; methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reverseind(s::AbstractString, i::Integer)&lt;/code&gt; now has an efficient generic fallback, so custom string types do not need to provide their own efficient defintions. The generic definition relies on &lt;code&gt;ncodeunits&lt;/code&gt; however, so for optimal performance you may need to define a custom method for that function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The global RNG is being re-seeded with its own seed at the beginning of each &lt;code&gt;@testset&lt;/code&gt;, and have its original state restored at the end (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24445&quot;&gt;#24445&lt;/a&gt;). This is breaking for testsets relying implicitly on the global RNG being in a specific state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;permutedims(m::AbstractMatrix)&lt;/code&gt; is now short for &lt;code&gt;permutedims(m, (2,1))&lt;/code&gt;, and is now a more convenient way of making a &quot;shallow transpose&quot; of a 2D array. This is the recommended approach for manipulating arrays of data, rather than the recursively defined, linear-algebra function &lt;code&gt;transpose&lt;/code&gt;. Similarly, &lt;code&gt;permutedims(v::AbstractVector)&lt;/code&gt; will create a row matrix (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24839&quot;&gt;#24839&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new &lt;code&gt;replace(A, old=&amp;gt;new)&lt;/code&gt; function is introduced to replace &lt;code&gt;old&lt;/code&gt; by &lt;code&gt;new&lt;/code&gt; in collection &lt;code&gt;A&lt;/code&gt;. There are also two other methods with a different API, and a mutating variant, &lt;code&gt;replace!&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22324&quot;&gt;#22324&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CartesianRange&lt;/code&gt; changes (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24715&quot;&gt;#24715&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Inherits from &lt;code&gt;AbstractArray&lt;/code&gt;, and linear indexing can be used to provide linear-to-cartesian conversion (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24715&quot;&gt;#24715&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;It has a new constructor taking an array&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;several missing set-like operations have been added (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23528&quot;&gt;#23528&lt;/a&gt;): &lt;code&gt;union&lt;/code&gt;, &lt;code&gt;intersect&lt;/code&gt;, &lt;code&gt;symdiff&lt;/code&gt;, &lt;code&gt;setdiff&lt;/code&gt; are now implemented for all collections with arbitrary many arguments, as well as the mutating counterparts (&lt;code&gt;union!&lt;/code&gt; etc.). The performance is also much better in many cases. Note that this change is slightly breaking: all the non-mutating functions always return a new object even if only one argument is passed. Moreover the semantics of &lt;code&gt;intersect&lt;/code&gt; and &lt;code&gt;symdiff&lt;/code&gt; is changed for vectors:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;intersect&lt;/code&gt; doesn't preserve the multiplicity anymore (use &lt;code&gt;filter&lt;/code&gt; for the old behavior)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;symdiff&lt;/code&gt; has been made consistent with the corresponding methods for other containers, by taking the multiplicity of the arguments into account. Use &lt;code&gt;unique&lt;/code&gt; to get the old behavior.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The type &lt;code&gt;LinearIndices&lt;/code&gt; has been added, providing conversion from cartesian incices to linear indices using the normal indexing operation. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24715&quot;&gt;#24715&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IdDict{K,V}&lt;/code&gt; replaces &lt;code&gt;ObjectIdDict&lt;/code&gt;. It has type parameters like other &lt;code&gt;AbstractDict&lt;/code&gt; subtypes and its constructors mirror the ones of &lt;code&gt;Dict&lt;/code&gt;. ([#25210])&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Compiler/Runtime improvements&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;The inlining heuristic now models the approximate runtime cost of a method (using some strongly-simplifying assumptions). Functions are inlined unless their estimated runtime cost substantially exceeds the cost of setting up and issuing a subroutine call. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22210&quot;&gt;#22210&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22732&quot;&gt;#22732&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inference recursion-detection heuristics are now more precise, allowing them to be triggered less often, but being more agressive when they are triggered to drive the inference computation to a solution (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23912&quot;&gt;#23912&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inference now propagates constants inter-procedurally, and can compute various constants expressions at compile-time (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24362&quot;&gt;#24362&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Deprecated or removed&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;The &lt;code&gt;JULIA_HOME&lt;/code&gt; environment variable has been renamed to &lt;code&gt;JULIA_BINDIR&lt;/code&gt; and &lt;code&gt;Base.JULIA_HOME&lt;/code&gt; has been moved to &lt;code&gt;Sys.BINDIR&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/20899&quot;&gt;#20899&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The keyword &lt;code&gt;immutable&lt;/code&gt; is fully deprecated to &lt;code&gt;struct&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; is fully deprecated to &lt;code&gt;mutable struct&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/19157&quot;&gt;#19157&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/20418&quot;&gt;#20418&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indexing into multidimensional arrays with more than one index but fewer indices than there are dimensions is no longer permitted when those trailing dimensions have lengths greater than 1. Instead, reshape the array or add trailing indices so the dimensionality and number of indices match (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/14770&quot;&gt;#14770&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23628&quot;&gt;#23628&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;indices(a)&lt;/code&gt; and &lt;code&gt;indices(a,d)&lt;/code&gt; have been deprecated in favor of &lt;code&gt;axes(a)&lt;/code&gt; and &lt;code&gt;axes(a, d)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25057&quot;&gt;#25057&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;EnvHash&lt;/code&gt; has been renamed to &lt;code&gt;EnvDict&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24167&quot;&gt;#24167&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uninitialized &lt;code&gt;Array&lt;/code&gt; constructors of the form &lt;code&gt;Array[{T,N}](shape...)&lt;/code&gt; have been deprecated in favor of equivalents accepting &lt;code&gt;uninitialized&lt;/code&gt; (an alias for &lt;code&gt;Uninitialized()&lt;/code&gt;) as their first argument, as in &lt;code&gt;Array[{T,N}](uninitialized, shape...)&lt;/code&gt;. For example, &lt;code&gt;Vector(3)&lt;/code&gt; is now &lt;code&gt;Vector(uninitialized, 3)&lt;/code&gt;, &lt;code&gt;Matrix{Int}((2, 4))&lt;/code&gt; is now, &lt;code&gt;Matrix{Int}(uninitialized, (2, 4))&lt;/code&gt;, and &lt;code&gt;Array{Float32,3}(11, 13, 17)&lt;/code&gt; is now &lt;code&gt;Array{Float32,3}(uninitialized, 11, 13, 17)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24781&quot;&gt;#24781&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LinAlg.fillslots!&lt;/code&gt; has been renamed &lt;code&gt;LinAlg.fillstored!&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25030&quot;&gt;#25030&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fill!(A::Diagonal, x)&lt;/code&gt; and &lt;code&gt;fill!(A::AbstractTriangular, x)&lt;/code&gt; have been deprecated in favor of &lt;code&gt;Base.LinAlg.fillstored!(A, x)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24413&quot;&gt;#24413&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eye&lt;/code&gt; has been deprecated in favor of &lt;code&gt;I&lt;/code&gt; and &lt;code&gt;Matrix&lt;/code&gt; constructors. Please see the deprecation warnings for replacement details (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24438&quot;&gt;#24438&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;zeros(D::Diagonal[, opts...])&lt;/code&gt; has been deprecated (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24654&quot;&gt;#24654&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Bool values directly as indices is now deprecated and will be an error in the future. Convert them to &lt;code&gt;Int&lt;/code&gt; before indexing if you intend to access index &lt;code&gt;1&lt;/code&gt; for &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;whos&lt;/code&gt; has been renamed &lt;code&gt;varinfo&lt;/code&gt;, and now returns a markdown table instead of printing output (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/12131&quot;&gt;#12131&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uninitialized &lt;code&gt;RowVector&lt;/code&gt; constructors of the form &lt;code&gt;RowVector{T}(shape...)&lt;/code&gt; have been deprecated in favor of equivalents accepting &lt;code&gt;uninitialized&lt;/code&gt; (an alias for &lt;code&gt;Uninitialized()&lt;/code&gt;) as their first argument, as in &lt;code&gt;RowVector{T}(uninitialized, shape...)&lt;/code&gt;. For example, &lt;code&gt;RowVector{Int}(3)&lt;/code&gt; is now &lt;code&gt;RowVector{Int}(uninitialized, 3)&lt;/code&gt;, and &lt;code&gt;RowVector{Float32}((1, 4))&lt;/code&gt; is now &lt;code&gt;RowVector{Float32}(uninitialized, (1, 4))&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24786&quot;&gt;#24786&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;writecsv(io, a; opts...)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;writedlm(io, a, ','; opts...)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23529&quot;&gt;#23529&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;srand(rng, filename, n=4)&lt;/code&gt; has been deprecated (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21359&quot;&gt;#21359&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;readcsv(io[, T::Type]; opts...)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;readdlm(io, ','[, T]; opts...)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23530&quot;&gt;#23530&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sparse(s::UniformScaling, m::Integer)&lt;/code&gt; has been deprecated in favor of the three-argument equivalent &lt;code&gt;sparse(s::UniformScaling, m, n)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24472&quot;&gt;#24472&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;cholfact&lt;/code&gt;/&lt;code&gt;cholfact!&lt;/code&gt; methods that accepted an &lt;code&gt;uplo&lt;/code&gt; symbol have been deprecated in favor of using &lt;code&gt;Hermitian&lt;/code&gt; (or &lt;code&gt;Symmetric&lt;/code&gt;) views (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22187&quot;&gt;#22187&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22188&quot;&gt;#22188&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;thin&lt;/code&gt; keyword argument for orthogonal decomposition methods has been deprecated in favor of &lt;code&gt;full&lt;/code&gt;, which has the opposite meaning: &lt;code&gt;thin == true&lt;/code&gt; if and only if &lt;code&gt;full == false&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24279&quot;&gt;#24279&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isposdef(A::AbstractMatrix, UL::Symbol)&lt;/code&gt; and &lt;code&gt;isposdef!(A::AbstractMatrix, UL::Symbol)&lt;/code&gt; have been deprecated in favor of &lt;code&gt;isposdef(Hermitian(A, UL))&lt;/code&gt; and &lt;code&gt;isposdef!(Hermitian(A, UL))&lt;/code&gt; respectively (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22245&quot;&gt;#22245&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;bkfact&lt;/code&gt;/&lt;code&gt;bkfact!&lt;/code&gt; methods that accepted &lt;code&gt;uplo&lt;/code&gt; and &lt;code&gt;issymmetric&lt;/code&gt; symbols have been deprecated in favor of using &lt;code&gt;Hermitian&lt;/code&gt; (or &lt;code&gt;Symmetric&lt;/code&gt;) views (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22605&quot;&gt;#22605&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;current_module&lt;/code&gt; is deprecated and replaced with &lt;code&gt;@__MODULE__&lt;/code&gt;. This caused the deprecation of some reflection methods (such as &lt;code&gt;macroexpand&lt;/code&gt; and &lt;code&gt;isconst&lt;/code&gt;), which now require a module argument. And it caused the bugfix of other default arguments to use the Main module (including &lt;code&gt;whos&lt;/code&gt;, &lt;code&gt;which&lt;/code&gt;) (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22064&quot;&gt;#22064&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;expand(ex)&lt;/code&gt; and &lt;code&gt;expand(module, ex)&lt;/code&gt; have been deprecated in favor of &lt;code&gt;Meta.lower(module, ex)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22064&quot;&gt;#22064&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24278&quot;&gt;#24278&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ones(A::AbstractArray[, opts...])&lt;/code&gt; and &lt;code&gt;zeros(A::AbstractArray[, opts...])&lt;/code&gt; methods have been deprecated. For &lt;code&gt;zeros(A)&lt;/code&gt;, consider &lt;code&gt;zero(A)&lt;/code&gt;. For &lt;code&gt;ones(A)&lt;/code&gt; or &lt;code&gt;zeros(A)&lt;/code&gt;, consider &lt;code&gt;ones(size(A))&lt;/code&gt;, &lt;code&gt;zeros(size(A))&lt;/code&gt;, &lt;code&gt;fill(v, size(A))&lt;/code&gt; for &lt;code&gt;v&lt;/code&gt; an appropriate one or zero, &lt;code&gt;fill!(copy(A), {1|0})&lt;/code&gt;, &lt;code&gt;fill!(similar(A), {1|0})&lt;/code&gt;, or any of the preceding with different element type and/or shape depending on &lt;code&gt;opts...&lt;/code&gt;. Where strictly necessary, consider &lt;code&gt;fill!(similar(A[, opts...]), {one(eltype(A)) | zero(eltype(A))})&lt;/code&gt;. For an algebraic multiplicative identity, consider &lt;code&gt;one(A)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24656&quot;&gt;#24656&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Operators&lt;/code&gt; module is deprecated. Instead, import required operators explicitly from &lt;code&gt;Base&lt;/code&gt;, e.g. &lt;code&gt;import Base: +, -, *, /&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22251&quot;&gt;#22251&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bindings to the FFTW library have been removed from Base. The DFT framework for building FFT implementations is now in AbstractFFTs.jl, the bindings to the FFTW library are in FFTW.jl, and the Base signal processing functions which used FFTs are now in DSP.jl (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21956&quot;&gt;#21956&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;corrected&lt;/code&gt; positional argument to &lt;code&gt;cov&lt;/code&gt; has been deprecated in favor of a keyword argument with the same name (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21709&quot;&gt;#21709&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Omitting spaces around the &lt;code&gt;?&lt;/code&gt; and the &lt;code&gt;:&lt;/code&gt; tokens in a ternary expression has been deprecated. Ternaries must now include some amount of whitespace, e.g. &lt;code&gt;x ? a : b&lt;/code&gt; rather than &lt;code&gt;x?a:b&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22523&quot;&gt;#22523&lt;/a&gt; and &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22712&quot;&gt;#22712&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt; can no longer be used as an identifier name (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22712&quot;&gt;#22712&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;replace(s::AbstractString, pat, r, [count])&lt;/code&gt; is deprecated in favor of &lt;code&gt;replace(s::AbstractString, pat =&amp;gt; r; [count])&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25165&quot;&gt;#25165&lt;/a&gt;). Moreover, &lt;code&gt;count&lt;/code&gt; cannot be negative anymore (use &lt;code&gt;typemax(Int)&lt;/code&gt; instead (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22325&quot;&gt;#22325&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;read(io, type, dims)&lt;/code&gt; is deprecated to &lt;code&gt;read!(io, Array{type}(uninitialized, dims))&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21450&quot;&gt;#21450&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;read(::IO, ::Ref)&lt;/code&gt; is now a method of &lt;code&gt;read!&lt;/code&gt;, since it mutates its &lt;code&gt;Ref&lt;/code&gt; argument (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21592&quot;&gt;#21592&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nb_available&lt;/code&gt; is now &lt;code&gt;bytesavailable&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25634&quot;&gt;#25634&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;skipchars(io::IO, predicate; linecomment=nothing)&lt;/code&gt; is deprecated in favor of &lt;code&gt;skipchars(predicate, io::IO; linecomment=nothing)&lt;/code&gt; ([#25667]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Bidiagonal&lt;/code&gt; constructors now use a &lt;code&gt;Symbol&lt;/code&gt; (&lt;code&gt;:U&lt;/code&gt; or &lt;code&gt;:L&lt;/code&gt;) for the upper/lower argument, instead of a &lt;code&gt;Bool&lt;/code&gt; or a &lt;code&gt;Char&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22703&quot;&gt;#22703&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Bidiagonal&lt;/code&gt;, &lt;code&gt;Tridiagonal&lt;/code&gt; and &lt;code&gt;SymTridiagonal&lt;/code&gt; constructors that automatically converted the input vectors to the same type are deprecated in favor of explicit conversion (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22925&quot;&gt;#22925&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23035&quot;&gt;#23035&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23154&quot;&gt;#23154&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calling &lt;code&gt;nfields&lt;/code&gt; on a type to find out how many fields its instances have is deprecated. Use &lt;code&gt;fieldcount&lt;/code&gt; instead. Use &lt;code&gt;nfields&lt;/code&gt; only to get the number of fields in a specific object (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22350&quot;&gt;#22350&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fieldnames&lt;/code&gt; now operates only on types. To get the names of fields in an object, use &lt;code&gt;fieldnames(typeof(x))&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22350&quot;&gt;#22350&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;InexactError&lt;/code&gt;, &lt;code&gt;DomainError&lt;/code&gt;, and &lt;code&gt;OverflowError&lt;/code&gt; now take arguments. &lt;code&gt;InexactError(func::Symbol, type, -3)&lt;/code&gt; now prints as &quot;ERROR: InexactError: func(type, -3)&quot;, &lt;code&gt;DomainError(val, [msg])&lt;/code&gt; prints as &quot;ERROR: DomainError with val:\nmsg&quot;, and &lt;code&gt;OverflowError(msg)&lt;/code&gt; prints as &quot;ERROR: OverflowError: msg&quot;. (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/20005&quot;&gt;#20005&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22751&quot;&gt;#22751&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22761&quot;&gt;#22761&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The operating system identification functions: &lt;code&gt;is_linux&lt;/code&gt;, &lt;code&gt;is_bsd&lt;/code&gt;, &lt;code&gt;is_apple&lt;/code&gt;, &lt;code&gt;is_unix&lt;/code&gt;, and &lt;code&gt;is_windows&lt;/code&gt;, have been deprecated in favor of &lt;code&gt;Sys.islinux&lt;/code&gt;, &lt;code&gt;Sys.isbsd&lt;/code&gt;, &lt;code&gt;Sys.isapple&lt;/code&gt;, &lt;code&gt;Sys.isunix&lt;/code&gt;, and &lt;code&gt;Sys.iswindows&lt;/code&gt;, respectively (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22182&quot;&gt;#22182&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The forms of &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;readstring&lt;/code&gt;, and &lt;code&gt;eachline&lt;/code&gt; that accepted both a &lt;code&gt;Cmd&lt;/code&gt; object and an input stream are deprecated. Use e.g. &lt;code&gt;read(pipeline(stdin, cmd))&lt;/code&gt; instead (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22762&quot;&gt;#22762&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The unexported type &lt;code&gt;AbstractIOBuffer&lt;/code&gt; has been renamed to &lt;code&gt;GenericIOBuffer&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/17360&quot;&gt;#17360&lt;/a&gt; &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22796&quot;&gt;#22796&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IOBuffer(data::AbstractVector{UInt8}, read::Bool, write::Bool, maxsize::Integer)&lt;/code&gt;, &lt;code&gt;IOBuffer(read::Bool, write::Bool)&lt;/code&gt;, and &lt;code&gt;IOBuffer(maxsize::Integer)&lt;/code&gt; are deprecated in favor of constructors taking keyword arguments ([#25872]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Display&lt;/code&gt; has been renamed to &lt;code&gt;AbstractDisplay&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24831&quot;&gt;#24831&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remaining vectorized methods over &lt;code&gt;SparseVector&lt;/code&gt;s, particularly &lt;code&gt;floor&lt;/code&gt;, &lt;code&gt;ceil&lt;/code&gt;, &lt;code&gt;trunc&lt;/code&gt;, &lt;code&gt;round&lt;/code&gt;, and most common transcendental functions such as &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, and &lt;code&gt;sin&lt;/code&gt; variants, have been deprecated in favor of dot-syntax (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22961&quot;&gt;#22961&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;String(io::IOBuffer)&lt;/code&gt; is deprecated to &lt;code&gt;String(take!(copy(io)))&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21438&quot;&gt;#21438&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;readstring&lt;/code&gt; is deprecated in favor of &lt;code&gt;read(io, String)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22793&quot;&gt;#22793&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function &lt;code&gt;showall&lt;/code&gt; is deprecated. Showing entire values is the default, unless an &lt;code&gt;IOContext&lt;/code&gt; specifying &lt;code&gt;:limit=&amp;gt;true&lt;/code&gt; is in use (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22847&quot;&gt;#22847&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;issubtype&lt;/code&gt; has been deprecated in favor of &lt;code&gt;&amp;lt;:&lt;/code&gt; (which used to be an alias for &lt;code&gt;issubtype&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calling &lt;code&gt;write&lt;/code&gt; on non-isbits arrays is deprecated in favor of explicit loops or &lt;code&gt;serialize&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/6466&quot;&gt;#6466&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The default &lt;code&gt;juliarc.jl&lt;/code&gt; file on Windows has been removed. Now must explicitly include the full path if you need access to executables or libraries in the &lt;code&gt;Sys.BINDIR&lt;/code&gt; directory, e.g. &lt;code&gt;joinpath(Sys.BINDIR, &quot;7z.exe&quot;)&lt;/code&gt; for &lt;code&gt;7z.exe&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/21540&quot;&gt;#21540&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sqrtm&lt;/code&gt; has been deprecated in favor of &lt;code&gt;sqrt&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23504&quot;&gt;#23504&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;expm&lt;/code&gt; has been deprecated in favor of &lt;code&gt;exp&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23233&quot;&gt;#23233&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logm&lt;/code&gt; has been deprecated in favor of &lt;code&gt;log&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23505&quot;&gt;#23505&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;full&lt;/code&gt; has been deprecated in favor of more specific, better defined alternatives. On structured matrices &lt;code&gt;A&lt;/code&gt;, consider instead &lt;code&gt;Matrix(A)&lt;/code&gt;, &lt;code&gt;Array(A)&lt;/code&gt;, &lt;code&gt;SparseMatrixCSC(A)&lt;/code&gt;, or &lt;code&gt;sparse(A)&lt;/code&gt;. On sparse arrays &lt;code&gt;S&lt;/code&gt;, consider instead &lt;code&gt;Vector(S)&lt;/code&gt;, &lt;code&gt;Matrix(S)&lt;/code&gt;, or &lt;code&gt;Array(S)&lt;/code&gt; as appropriate. On factorizations &lt;code&gt;F&lt;/code&gt;, consider instead &lt;code&gt;Matrix(F)&lt;/code&gt;, &lt;code&gt;Array(F)&lt;/code&gt;, &lt;code&gt;AbstractMatrix(F)&lt;/code&gt;, or &lt;code&gt;AbstractArray(F)&lt;/code&gt;. On implicit orthogonal factors &lt;code&gt;Q&lt;/code&gt;, consider instead &lt;code&gt;Matrix(Q)&lt;/code&gt; or &lt;code&gt;Array(Q)&lt;/code&gt;; for implicit orthogonal factors that can be recovered in square or truncated form, see the deprecation message for square recovery instructions. On &lt;code&gt;Symmetric&lt;/code&gt;, &lt;code&gt;Hermitian&lt;/code&gt;, or &lt;code&gt;AbstractTriangular&lt;/code&gt; matrices &lt;code&gt;A&lt;/code&gt;, consider instead &lt;code&gt;Matrix(S)&lt;/code&gt;, &lt;code&gt;Array(S)&lt;/code&gt;, &lt;code&gt;SparseMatrixCSC(S)&lt;/code&gt;, or &lt;code&gt;sparse(S)&lt;/code&gt;. On &lt;code&gt;Symmetric&lt;/code&gt; matrices &lt;code&gt;A&lt;/code&gt; particularly, consider instead &lt;code&gt;LinAlg.copytri!(copy(parent(A)), A.uplo)&lt;/code&gt;. On &lt;code&gt;Hermitian&lt;/code&gt; matrices &lt;code&gt;A&lt;/code&gt; particularly, consider instead &lt;code&gt;LinAlg.copytri!(copy(parent(A)), A.uplo, true)&lt;/code&gt;. On &lt;code&gt;UpperTriangular&lt;/code&gt; matrices &lt;code&gt;A&lt;/code&gt; particularly, consider instead &lt;code&gt;triu!(copy(parent(A)))&lt;/code&gt;. On &lt;code&gt;LowerTriangular&lt;/code&gt; matrices &lt;code&gt;A&lt;/code&gt; particularly, consider instead &lt;code&gt;tril!(copy(parent(A)))&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24250&quot;&gt;#24250&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;speye&lt;/code&gt; has been deprecated in favor of &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;sparse&lt;/code&gt;, and &lt;code&gt;SparseMatrixCSC&lt;/code&gt; constructor methods (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24356&quot;&gt;#24356&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calling &lt;code&gt;union&lt;/code&gt; with no arguments is deprecated; construct an empty set with an appropriate element type using &lt;code&gt;Set{T}()&lt;/code&gt; instead (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23144&quot;&gt;#23144&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vectorized &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, and &lt;code&gt;format&lt;/code&gt; methods have been deprecated in favor of dot-syntax (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23207&quot;&gt;#23207&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Base.cpad&lt;/code&gt; has been removed; use an appropriate combination of &lt;code&gt;rpad&lt;/code&gt; and &lt;code&gt;lpad&lt;/code&gt; instead (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23187&quot;&gt;#23187&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ctranspose&lt;/code&gt; and &lt;code&gt;ctranspose!&lt;/code&gt; have been deprecated in favor of &lt;code&gt;adjoint&lt;/code&gt; and &lt;code&gt;adjoint!&lt;/code&gt;, respectively (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23235&quot;&gt;#23235&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;filter!&lt;/code&gt; on dictionaries now pass a single &lt;code&gt;key=&amp;gt;value&lt;/code&gt; pair to the argument function, instead of two arguments (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/17886&quot;&gt;#17886&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rol&lt;/code&gt;, &lt;code&gt;rol!&lt;/code&gt;, &lt;code&gt;ror&lt;/code&gt;, and &lt;code&gt;ror!&lt;/code&gt; have been deprecated in favor of specialized methods for &lt;code&gt;circshift&lt;/code&gt;/&lt;code&gt;circshift!&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23404&quot;&gt;#23404&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Base.SparseArrays.SpDiagIterator&lt;/code&gt; has been removed (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23261&quot;&gt;#23261&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The tuple-of-types form of &lt;code&gt;cfunction&lt;/code&gt;, &lt;code&gt;cfunction(f, returntype, (types...))&lt;/code&gt;, has been deprecated in favor of the tuple-type form &lt;code&gt;cfunction(f, returntype, Tuple{types...})&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23066&quot;&gt;#23066&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;diagm(v::AbstractVector, k::Integer=0)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;diagm(k =&amp;gt; v)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24047&quot;&gt;#24047&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;diagm(x::Number)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;fill(x, 1, 1)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24047&quot;&gt;#24047&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;diagm(A::SparseMatrixCSC)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;spdiagm(sparsevec(A))&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23341&quot;&gt;#23341&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;diagm(A::BitMatrix)&lt;/code&gt; has been deprecated, use &lt;code&gt;diagm(0 =&amp;gt; vec(A))&lt;/code&gt; or &lt;code&gt;BitMatrix(Diagonal(vec(A)))&lt;/code&gt; instead (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23373&quot;&gt;#23373&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24047&quot;&gt;#24047&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ℯ&lt;/code&gt; (written as &lt;code&gt;\mscre&amp;lt;TAB&amp;gt;&lt;/code&gt; or &lt;code&gt;\euler&amp;lt;TAB&amp;gt;&lt;/code&gt;) is now the only (by default) exported name for Euler's number, and the type has changed from &lt;code&gt;Irrational{:e}&lt;/code&gt; to &lt;code&gt;Irrational{:ℯ}&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23427&quot;&gt;#23427&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The mathematical constants &lt;code&gt;π&lt;/code&gt;, &lt;code&gt;pi&lt;/code&gt;, &lt;code&gt;ℯ&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;γ&lt;/code&gt;, &lt;code&gt;eulergamma&lt;/code&gt;, &lt;code&gt;catalan&lt;/code&gt;, &lt;code&gt;φ&lt;/code&gt; and &lt;code&gt;golden&lt;/code&gt; have been moved from &lt;code&gt;Base&lt;/code&gt; to a new module; &lt;code&gt;Base.MathConstants&lt;/code&gt;. Only &lt;code&gt;π&lt;/code&gt;, &lt;code&gt;pi&lt;/code&gt; and &lt;code&gt;ℯ&lt;/code&gt; are now exported by default from &lt;code&gt;Base&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23427&quot;&gt;#23427&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;eu&lt;/code&gt; (previously an alias for &lt;code&gt;ℯ&lt;/code&gt;) has been deprecated in favor of &lt;code&gt;ℯ&lt;/code&gt; (or &lt;code&gt;MathConstants.e&lt;/code&gt;) (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23427&quot;&gt;#23427&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GMP.gmp_version()&lt;/code&gt;, &lt;code&gt;GMP.GMP_VERSION&lt;/code&gt;, &lt;code&gt;GMP.gmp_bits_per_limb()&lt;/code&gt;, and &lt;code&gt;GMP.GMP_BITS_PER_LIBM&lt;/code&gt; have been renamed to &lt;code&gt;GMP.version()&lt;/code&gt;, &lt;code&gt;GMP.VERSION&lt;/code&gt;, &lt;code&gt;GMP.bits_per_libm()&lt;/code&gt;, and &lt;code&gt;GMP.BITS_PER_LIBM&lt;/code&gt;, respectively. Similarly, &lt;code&gt;MPFR.get_version()&lt;/code&gt;, has been renamed to &lt;code&gt;MPFR.version()&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23323&quot;&gt;#23323&lt;/a&gt;). Also, &lt;code&gt;LinAlg.LAPACK.laver()&lt;/code&gt; has been renamed to &lt;code&gt;LinAlg.LAPACK.version()&lt;/code&gt; and now returns a &lt;code&gt;VersionNumber&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;select&lt;/code&gt;, &lt;code&gt;select!&lt;/code&gt;, &lt;code&gt;selectperm&lt;/code&gt; and &lt;code&gt;selectperm!&lt;/code&gt; have been renamed respectively to &lt;code&gt;partialsort&lt;/code&gt;, &lt;code&gt;partialsort!&lt;/code&gt;, &lt;code&gt;partialsortperm&lt;/code&gt; and &lt;code&gt;partialsortperm!&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23051&quot;&gt;#23051&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Range&lt;/code&gt; abstract type has been renamed to &lt;code&gt;AbstractRange&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23570&quot;&gt;#23570&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; on dictionaries previously operated on &lt;code&gt;key=&amp;gt;value&lt;/code&gt; pairs. This behavior is deprecated, and in the future &lt;code&gt;map&lt;/code&gt; will operate only on values (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/5794&quot;&gt;#5794&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatically broadcasted &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; for &lt;code&gt;array + scalar&lt;/code&gt;, &lt;code&gt;scalar - array&lt;/code&gt;, and so-on have been deprecated due to inconsistency with linear algebra. Use &lt;code&gt;.+&lt;/code&gt; and &lt;code&gt;.-&lt;/code&gt; for these operations instead (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22880&quot;&gt;#22880&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22932&quot;&gt;#22932&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isleaftype&lt;/code&gt; is deprecated in favor of the simpler predicates &lt;code&gt;isconcretetype&lt;/code&gt; and &lt;code&gt;isdispatchtuple&lt;/code&gt;. Concrete types are those that might equal &lt;code&gt;typeof(x)&lt;/code&gt; for some &lt;code&gt;x&lt;/code&gt;; &lt;code&gt;isleaftype&lt;/code&gt; included some types for which this is not true. Those are now categorized more precisely as &quot;dispatch tuple types&quot; and &quot;!has_free_typevars&quot; (not exported). (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/17086&quot;&gt;#17086&lt;/a&gt;, [#25496])&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;contains(eq, itr, item)&lt;/code&gt; is deprecated in favor of &lt;code&gt;any&lt;/code&gt; with a predicate (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23716&quot;&gt;#23716&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spdiagm(x::AbstractVector)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;sparse(Diagonal(x))&lt;/code&gt; alternatively &lt;code&gt;spdiagm(0 =&amp;gt; x)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23757&quot;&gt;#23757&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spdiagm(x::AbstractVector, d::Integer)&lt;/code&gt; and &lt;code&gt;spdiagm(x::Tuple{&amp;lt;:AbstractVector}, d::Tuple{&amp;lt;:Integer})&lt;/code&gt; have been deprecated in favor of &lt;code&gt;spdiagm(d =&amp;gt; x)&lt;/code&gt; and &lt;code&gt;spdiagm(d[1] =&amp;gt; x[1], d[2] =&amp;gt; x[2], ...)&lt;/code&gt; respectively. The new &lt;code&gt;spdiagm&lt;/code&gt; implementation now always returns a square matrix (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23757&quot;&gt;#23757&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spones(A::AbstractSparseArray)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;LinAlg.fillstored!(copy(A), 1)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25037&quot;&gt;#25037&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Constructors for &lt;code&gt;LibGit2.UserPasswordCredentials&lt;/code&gt; and &lt;code&gt;LibGit2.SSHCredentials&lt;/code&gt; which take a &lt;code&gt;prompt_if_incorrect&lt;/code&gt; argument are deprecated. Instead, prompting behavior is controlled using the &lt;code&gt;allow_prompt&lt;/code&gt; keyword in the &lt;code&gt;LibGit2.CredentialPayload&lt;/code&gt; constructor (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23690&quot;&gt;#23690&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gradient&lt;/code&gt; is deprecated and will be removed in the next release (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23816&quot;&gt;#23816&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The timing functions &lt;code&gt;tic&lt;/code&gt;, &lt;code&gt;toc&lt;/code&gt;, and &lt;code&gt;toq&lt;/code&gt; are deprecated in favor of &lt;code&gt;@time&lt;/code&gt; and &lt;code&gt;@elapsed&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/17046&quot;&gt;#17046&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods of &lt;code&gt;findfirst&lt;/code&gt;, &lt;code&gt;findnext&lt;/code&gt;, &lt;code&gt;findlast&lt;/code&gt;, and &lt;code&gt;findprev&lt;/code&gt; that accept a value to search for are deprecated in favor of passing a predicate (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/19186&quot;&gt;#19186&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/10593&quot;&gt;#10593&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; functions now operate only on booleans by default. To look for non-zeros, use &lt;code&gt;x-&amp;gt;x!=0&lt;/code&gt; or &lt;code&gt;!iszero&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23120&quot;&gt;#23120&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ability of &lt;code&gt;reinterpret&lt;/code&gt; to yield &lt;code&gt;Array&lt;/code&gt;s of different type than the underlying storage has been removed. The &lt;code&gt;reinterpret&lt;/code&gt; function is still available, but now returns a &lt;code&gt;ReinterpretArray&lt;/code&gt;. The three argument form of &lt;code&gt;reinterpret&lt;/code&gt; that implicitly reshapes has been deprecated (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23750&quot;&gt;#23750&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bits&lt;/code&gt; has been deprecated in favor of &lt;code&gt;bitstring&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24281&quot;&gt;#24281&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24263&quot;&gt;#24263&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;num2hex&lt;/code&gt; and &lt;code&gt;hex2num&lt;/code&gt; have been deprecated in favor of &lt;code&gt;reinterpret&lt;/code&gt; combined with &lt;code&gt;parse&lt;/code&gt;/&lt;code&gt;hex&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/22088&quot;&gt;#22088&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;copy!&lt;/code&gt; is deprecated for &lt;code&gt;AbstractSet&lt;/code&gt; and &lt;code&gt;AbstractDict&lt;/code&gt;, with the intention to re-enable it with a cleaner meaning in a future version (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24844&quot;&gt;#24844&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;copy!&lt;/code&gt; (resp. &lt;code&gt;unsafe_copy!&lt;/code&gt;) is deprecated for &lt;code&gt;AbstractArray&lt;/code&gt; and is renamed &lt;code&gt;copyto!&lt;/code&gt; (resp. &lt;code&gt;unsafe_copyto!&lt;/code&gt;); it will be re-introduced with a different meaning in a future version (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24808&quot;&gt;#24808&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;a:b&lt;/code&gt; is deprecated for constructing a &lt;code&gt;StepRange&lt;/code&gt; when &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have physical units (Dates and Times). Use &lt;code&gt;a:s:b&lt;/code&gt;, where &lt;code&gt;s = Dates.Day(1)&lt;/code&gt; or &lt;code&gt;s = Dates.Second(1)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;trues(A::AbstractArray)&lt;/code&gt; and &lt;code&gt;falses(A::AbstractArray)&lt;/code&gt; are deprecated in favor of &lt;code&gt;trues(size(A))&lt;/code&gt; and &lt;code&gt;falses(size(A))&lt;/code&gt; respectively (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24595&quot;&gt;#24595&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;workspace&lt;/code&gt; is discontinued, check out &lt;a href=&quot;https://github.com/timholy/Revise.jl&quot;&gt;Revise.jl&lt;/a&gt; for an alternative workflow (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25046&quot;&gt;#25046&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cumsum&lt;/code&gt;, &lt;code&gt;cumprod&lt;/code&gt;, &lt;code&gt;accumulate&lt;/code&gt;, their mutating versions, and &lt;code&gt;diff&lt;/code&gt; all now require a &lt;code&gt;dim&lt;/code&gt; argument instead of defaulting to using the first dimension unless there is only one dimension (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24684&quot;&gt;#24684&lt;/a&gt;, [#25457]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;sum_kbn&lt;/code&gt; and &lt;code&gt;cumsum_kbn&lt;/code&gt; functions have been moved to the &lt;a href=&quot;https://github.com/JuliaMath/KahanSummation.jl&quot;&gt;KahanSummation&lt;/a&gt; package (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24869&quot;&gt;#24869&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isnumber&lt;/code&gt; has been renamed to &lt;code&gt;isnumeric&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25021&quot;&gt;#25021&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;is_assigned_char&lt;/code&gt; and &lt;code&gt;normalize_string&lt;/code&gt; have been renamed to &lt;code&gt;isassigned&lt;/code&gt; and &lt;code&gt;normalize&lt;/code&gt;, and moved to the new &lt;code&gt;Unicode&lt;/code&gt; standard library module. &lt;code&gt;graphemes&lt;/code&gt; has also been moved to that module (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25021&quot;&gt;#25021&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The functions &lt;code&gt;eigs&lt;/code&gt; and &lt;code&gt;svds&lt;/code&gt; have been moved to the &lt;code&gt;IterativeEigensolvers&lt;/code&gt; standard library module (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24714&quot;&gt;#24714&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sparse array functionality has moved to the &lt;code&gt;SparseArrays&lt;/code&gt; standard library module ([#25249]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linear algebra functionality, and specifically the &lt;code&gt;LinAlg&lt;/code&gt; module has moved to the &lt;code&gt;LinearAlgebra&lt;/code&gt; standard library module ([#25571]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@printf&lt;/code&gt; and &lt;code&gt;@sprintf&lt;/code&gt; have been moved to the &lt;code&gt;Printf&lt;/code&gt; standard library (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23929&quot;&gt;#23929&lt;/a&gt;,&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25056&quot;&gt;#25056&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Libdl&lt;/code&gt; module has moved to the &lt;code&gt;Libdl&lt;/code&gt; standard library module ([#25459]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The aliases &lt;code&gt;Complex32&lt;/code&gt;, &lt;code&gt;Complex64&lt;/code&gt; and &lt;code&gt;Complex128&lt;/code&gt; have been deprecated in favor of &lt;code&gt;ComplexF16&lt;/code&gt;, &lt;code&gt;ComplexF32&lt;/code&gt; and &lt;code&gt;ComplexF64&lt;/code&gt; respectively (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24647&quot;&gt;#24647&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Base.parentindexes&lt;/code&gt; and &lt;code&gt;SharedArrays.localindexes&lt;/code&gt; have been renamed to &lt;code&gt;parentindices&lt;/code&gt; and &lt;code&gt;localindices&lt;/code&gt;, respectively. Similarly, the &lt;code&gt;indexes&lt;/code&gt; field in the &lt;code&gt;SubArray&lt;/code&gt; type has been renamed to &lt;code&gt;indices&lt;/code&gt; without deprecation (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25088&quot;&gt;#25088&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Associative&lt;/code&gt; has been deprecated in favor of &lt;code&gt;AbstractDict&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25012&quot;&gt;#25012&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Void&lt;/code&gt; has been renamed back to &lt;code&gt;Nothing&lt;/code&gt; with an alias &lt;code&gt;Cvoid&lt;/code&gt; for use when calling C with a return type of &lt;code&gt;Cvoid&lt;/code&gt; or a return or argument type of &lt;code&gt;Ptr{Cvoid}&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25162&quot;&gt;#25162&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Nullable{T}&lt;/code&gt; has been deprecated and moved to the Nullables package (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23642&quot;&gt;#23642&lt;/a&gt;). Use &lt;code&gt;Union{T, Nothing}&lt;/code&gt; instead, or &lt;code&gt;Union{Some{T}, Nothing}&lt;/code&gt; if &lt;code&gt;nothing&lt;/code&gt; is a possible value (i.e. &lt;code&gt;Nothing &amp;lt;: T&lt;/code&gt;). &lt;code&gt;isnull(x)&lt;/code&gt; can be replaced with &lt;code&gt;x === nothing&lt;/code&gt; and &lt;code&gt;unsafe_get&lt;/code&gt;/&lt;code&gt;get&lt;/code&gt; can be dropped or replaced with &lt;code&gt;coalesce&lt;/code&gt;. &lt;code&gt;NullException&lt;/code&gt; has been removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unshift!&lt;/code&gt; and &lt;code&gt;shift!&lt;/code&gt; have been renamed to &lt;code&gt;pushfirst!&lt;/code&gt; and &lt;code&gt;popfirst!&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23902&quot;&gt;#23902&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ipermute!&lt;/code&gt; has been deprecated in favor of &lt;code&gt;invpermute!&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25168&quot;&gt;#25168&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CartesianRange&lt;/code&gt; has been renamed &lt;code&gt;CartesianIndices&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24715&quot;&gt;#24715&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sub2ind&lt;/code&gt; and &lt;code&gt;ind2sub&lt;/code&gt; are deprecated in favor of using &lt;code&gt;CartesianIndices&lt;/code&gt; and &lt;code&gt;LinearIndices&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24715&quot;&gt;#24715&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getindex(F::Factorization, s::Symbol)&lt;/code&gt; (usually seen as e.g. &lt;code&gt;F[:Q]&lt;/code&gt;) is deprecated in favor of dot overloading (&lt;code&gt;getproperty&lt;/code&gt;) so factors should now be accessed as e.g. &lt;code&gt;F.Q&lt;/code&gt; instead of &lt;code&gt;F[:Q]&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25184&quot;&gt;#25184&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;search&lt;/code&gt; and &lt;code&gt;rsearch&lt;/code&gt; have been deprecated in favor of &lt;code&gt;findfirst&lt;/code&gt;/&lt;code&gt;findnext&lt;/code&gt; and &lt;code&gt;findlast&lt;/code&gt;/&lt;code&gt;findprev&lt;/code&gt; respectively, in combination with the new &lt;code&gt;equalto&lt;/code&gt; and &lt;code&gt;occursin&lt;/code&gt; predicates for some methods (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24673&quot;&gt;#24673&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ismatch(regex, str)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;contains(str, regex)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24673&quot;&gt;#24673&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;linspace&lt;/code&gt; and &lt;code&gt;logspace&lt;/code&gt; now require an explicit number of elements to be supplied rather than defaulting to &lt;code&gt;50&lt;/code&gt;(&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24794&quot;&gt;#24794&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24805&quot;&gt;#24805&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;similar(::Associative)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;empty(::Associative)&lt;/code&gt;, and &lt;code&gt;similar(::Associative, ::Pair{K, V})&lt;/code&gt; has been deprecated in favour of &lt;code&gt;empty(::Associative, K, V)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24390&quot;&gt;#24390&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;findin(a, b)&lt;/code&gt; has been deprecated in favor of &lt;code&gt;findall(occursin(b), a)&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/24673&quot;&gt;#24673&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;module_name&lt;/code&gt; has been deprecated in favor of a new, general &lt;code&gt;nameof&lt;/code&gt; function. Similarly, the unexported &lt;code&gt;Base.function_name&lt;/code&gt; and &lt;code&gt;Base.datatype_name&lt;/code&gt; have been deprecated in favor of &lt;code&gt;nameof&lt;/code&gt; methods (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25622&quot;&gt;#25622&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The module &lt;code&gt;Random.dSFMT&lt;/code&gt; is renamed &lt;code&gt;Random.DSFMT&lt;/code&gt; ([#25567]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Random.RandomDevice(unlimited::Bool)&lt;/code&gt; (on non-Windows systems) is deprecated in favor of &lt;code&gt;Random.RandomDevice(; unlimited=unlimited)&lt;/code&gt; ([#25668]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The generic implementations of &lt;code&gt;strides(::AbstractArray)&lt;/code&gt; and &lt;code&gt;stride(::AbstractArray, ::Int)&lt;/code&gt; have been deprecated. Subtypes of &lt;code&gt;AbstractArray&lt;/code&gt; that implement the newly introduced strided array interface should define their own &lt;code&gt;strides&lt;/code&gt; method ([#25321]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;module_parent&lt;/code&gt;, &lt;code&gt;Base.datatype_module&lt;/code&gt;, and &lt;code&gt;Base.function_module&lt;/code&gt; have been deprecated in favor of &lt;code&gt;parentmodule&lt;/code&gt; ([#TODO]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rand(t::Tuple{Vararg{Int}})&lt;/code&gt; is deprecated in favor of &lt;code&gt;rand(Float64, t)&lt;/code&gt; or &lt;code&gt;rand(t...)&lt;/code&gt;; &lt;code&gt;rand(::Tuple)&lt;/code&gt; will have another meaning in the future ([#25429], [#25278]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;assert&lt;/code&gt; function (and &lt;code&gt;@assert&lt;/code&gt; macro) have been documented that they are not guaranteed to run under various optimization levels and should therefore not be used to e.g. verify passwords.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ObjectIdDict&lt;/code&gt; has been deprecated in favor of &lt;code&gt;IdDict{Any,Any}&lt;/code&gt; ([#25210]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gc&lt;/code&gt; and &lt;code&gt;gc_enable&lt;/code&gt; have been deprecated in favor of &lt;code&gt;GC.gc&lt;/code&gt; and &lt;code&gt;GC.enable&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25616&quot;&gt;#25616&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Base.@gc_preserve&lt;/code&gt; has been deprecated in favor of &lt;code&gt;GC.@preserve&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25616&quot;&gt;#25616&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;print_shortest&lt;/code&gt; has been discontinued, but is still available in the &lt;code&gt;Base.Grisu&lt;/code&gt; submodule (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/25745&quot;&gt;#25745&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scale!&lt;/code&gt; has been deprecated in favor of &lt;code&gt;mul!&lt;/code&gt;, &lt;code&gt;lmul!&lt;/code&gt;, and &lt;code&gt;rmul!&lt;/code&gt; ([#25701], [#25812]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;endof(a)&lt;/code&gt; has been renamed to &lt;code&gt;lastindex(a)&lt;/code&gt;, and the &lt;code&gt;end&lt;/code&gt; keyword in indexing expressions now lowers to either &lt;code&gt;lastindex(a)&lt;/code&gt; (in the case with only one index) or &lt;code&gt;lastindex(a, d)&lt;/code&gt; (in cases where there is more than one index and &lt;code&gt;end&lt;/code&gt; appears at dimension &lt;code&gt;d&lt;/code&gt;) ([#23554], [#25763]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DateTime()&lt;/code&gt;, &lt;code&gt;Date()&lt;/code&gt;, and &lt;code&gt;Time()&lt;/code&gt; have been deprecated, instead use &lt;code&gt;DateTime(1)&lt;/code&gt;, &lt;code&gt;Date(1)&lt;/code&gt; and &lt;code&gt;Time(0)&lt;/code&gt; respectively ([#23724]).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The fallback method &lt;code&gt;^(x, p::Integer)&lt;/code&gt; is deprecated. If your type relied on this definition, add a method such as &lt;code&gt;^(x::MyType, p::Integer) = Base.power_by_squaring(x, p)&lt;/code&gt; ([#23332]).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Command-line option changes&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;New option &lt;code&gt;--warn-overwrite={yes|no}&lt;/code&gt; to control the warning for overwriting method definitions. The default is &lt;code&gt;no&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23002&quot;&gt;#23002&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New option &lt;code&gt;--banner={yes,no}&lt;/code&gt; allows suppressing or forcing the printing of the startup banner, overriding the default behavior (banner in REPL, no banner otherwise). The &lt;code&gt;--quiet&lt;/code&gt; option implies &lt;code&gt;--banner=no&lt;/code&gt; even in REPL mode but can be overridden by passing &lt;code&gt;--quiet&lt;/code&gt; together with &lt;code&gt;--banner=yes&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23342&quot;&gt;#23342&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The option &lt;code&gt;--precompiled&lt;/code&gt; has been renamed to &lt;code&gt;--sysimage-native-code&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23054&quot;&gt;#23054&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The option &lt;code&gt;--compilecache&lt;/code&gt; has been renamed to &lt;code&gt;--compiled-modules&lt;/code&gt; (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/23054&quot;&gt;#23054&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 08 Feb 2018 12:26:45 +0000</pubDate>
<dc:creator>kmisiunas</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/743164?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>JuliaLang/julia</og:title>
<og:url>https://github.com/JuliaLang/julia</og:url>
<og:description>julia - The Julia Language: A fresh approach to technical computing.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/JuliaLang/julia/blob/master/NEWS.md</dc:identifier>
</item>
<item>
<title>Crushed wood is stronger than steel</title>
<link>https://www.nature.com/articles/d41586-018-01600-6</link>
<guid isPermaLink="true" >https://www.nature.com/articles/d41586-018-01600-6</guid>
<description>&lt;div class=&quot;content position-relative cleared clear mq1200-padded&quot; data-component=&quot;article-container&quot; role=&quot;main&quot;&gt;
&lt;header class=&quot;article-item__header clear cleared pull--both&quot;&gt;&lt;div class=&quot;article__type&quot;&gt;NEWS
&lt;div class=&quot;ml10 article__date&quot;&gt;&lt;time itemprop=&quot;datePublished&quot;&gt;07 February 2018&lt;/time&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;article-item__teaser-text serif&quot;&gt;Compressing the material and removing some of its polymers can increase its strength tenfold.&lt;/div&gt;
&lt;/header&gt;
&lt;div class=&quot;bordered-container clear cleared pull--both&quot;&gt;
&lt;div id=&quot;author-affiliations&quot; class=&quot;tab-group text14&quot; role=&quot;tablist&quot; data-test=&quot;author-affiliations&quot; data-tab-group=&quot;&quot;&gt;
&lt;div class=&quot;cleared&quot;&gt;
&lt;div id=&quot;author-affiliation-news-0&quot; class=&quot;tab-box js-box-wrapper&quot; role=&quot;presentation&quot;&gt;
&lt;h3 id=&quot;author-affiliation-news-0-head&quot; data-track=&quot;click&quot; data-track-label=&quot;view author info&quot; class=&quot;sans-serif strong tab tab-skin&quot; role=&quot;tab&quot; aria-controls=&quot;author-affiliation-news-0-content&quot; data-tooltip=&quot;Show author information&quot;&gt;Mark Zastrow&lt;/h3&gt;
&lt;div id=&quot;author-affiliation-news-0-content&quot; class=&quot;tab-content pin-right grid grid-12 last&quot; role=&quot;tabpanel&quot;&gt;
&lt;div class=&quot;pa10&quot; aria-labelledby=&quot;author-affiliation-news-0-head&quot;&gt;
&lt;div class=&quot;clear cleared&quot;&gt;
&lt;div class=&quot;align-left&quot;&gt;
&lt;h4 class=&quot;sans-serif&quot;&gt;Search for this author in:&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;align-left&quot;&gt;
&lt;div class=&quot;article__body serif cleared&quot;&gt;
&lt;div class=&quot;embed intensity--high&quot;&gt;&lt;img class=&quot;figure__image&quot; alt=&quot;Looking up into Douglas firs, Washington - USA.&quot; src=&quot;https://media.nature.com/w800/magazine-assets/d41586-018-01600-6/d41586-018-01600-6_15443356.jpg&quot;/&gt;&lt;p class=&quot;figure__caption sans-serif&quot;&gt;&lt;span class=&quot;mr10&quot;&gt;A new technique to densify natural wood could be used to strengthen cars and buildings&lt;/span&gt;&lt;span&gt;Credit: Jeff Mauritzen/NGC/Getty&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A chemical bath and a hot-press can transform wood into a material that is stronger than steel, researchers report. The process, and others like it, could make the humble material an eco-friendly alternative to using plastics and metals in the manufacture of cars and buildings.&lt;/p&gt;
&lt;p&gt;“It’s a new class of materials with great potential,” says Li Teng, a mechanics specialist at the University of Maryland in College Park and a co-author of the study published on 7 February in &lt;em&gt;Nature&lt;/em&gt;&lt;sup&gt;&lt;a href=&quot;https://www.nature.com/articles/d41586-018-01600-6#ref-CR1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Attempts to strengthen wood &lt;a href=&quot;https://pubs.acs.org/doi/abs/10.1021/ie50411a015&quot;&gt;go back decades&lt;/a&gt;. Some efforts have focused on synthesizing new materials by extracting the nanofibres in cellulose — the hard natural polymer in the tubular cells that funnel water through plant tissue.&lt;/p&gt;
&lt;p&gt;Li’s team took a different approach: the researchers focused on modifying the porous structure of natural wood. First, they boiled different wood types, including oak, in a solution of sodium hydroxide and sodium sulfite for seven hours. That treatment left the starchy cellulose mostly intact, but created more hollow space in the wood structure by removing some of the surrounding compounds. These included lignin, a polymer that binds the cellulose.&lt;/p&gt;
&lt;p&gt;Then the team pressed the block — like a panini sandwich — at 100 ºC for a day. The result: a wooden plank one-fifth the thickness, but three times the density of natural wood — and 11.5 times stronger. Previous attempts to densify wood have improved the strength by a factor of about three to four&lt;sup&gt;&lt;a href=&quot;https://www.nature.com/articles/d41586-018-01600-6#ref-CR2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Scanning electron microscopy showed that the latest process crushes the cellulose tubes together until they crumple and interlock. “You have all these nanofibres aligned in the growth direction,” says Hu Liangbing, a materials scientist at the University of Maryland at College Park who was part of the team.&lt;/p&gt;
&lt;p&gt;To test the toughness of the material, the team fired pellets at it from a ballistic air gun normally used to test the impact resistance of military vehicles. Five layers of the material laminated together — just 3 millimetres thick in total — was able to halt a 46-gram steel projectile travelling at roughly 30 metres per second.&lt;/p&gt;
&lt;p&gt;That’s much slower than the several hundred metres per second at which a bullet travels, says Hu, but it is comparable to the speed at which a car might be moving before a collision, making the material possibly suitable for use in vehicles.&lt;/p&gt;
&lt;div class=&quot;embed intensity--high&quot;&gt;
&lt;div class=&quot;ratio--16-9&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/5rj7GWDUXDU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;A question of strength&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some researchers say they are underwhelmed by the group’s improvements over previous densification methods. Fred Kamke at Oregon State University in Corvallis says that even without removing lignin, other techniques — such as applying higher temperatures, steaming the wood before treatment, and treating it with resins — can achieve most of the reported increase in performance. “These other methods are probably much less expensive than a 7-hour boil in a caustic solution,” he says. In his own tests, 24 layers of densified wood untreated by chemicals was able to halt a &lt;a href=&quot;https://www.youtube.com/watch?v=YlHqEOlxT1M&quot;&gt;9-millimetre bullet from a handgun&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Michaela Eder, a plant biomechanics researcher at the Max Planck Institute of Colloids and Interfaces in Potsdam, Germany, notes that compressing the wood to increase its density should naturally improve its strength — but it was unclear how much the entanglement of the nanofibres contributed. Hu and Li say their team’s simulations suggest that the increase in strength is consistent with the effects of hydrogen bonds forming when the nanofibres tangle. Further evidence, they say, is in previous work&lt;sup&gt;&lt;a href=&quot;https://www.nature.com/articles/d41586-018-01600-6#ref-CR4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; in which they extracted wooden nanofibres to make paper 40 times stronger and 130 times tougher, but with only a modest increase in density. This suggested the cellulose fibres were bonding to achieve the superior strength, they say.&lt;/p&gt;
&lt;p&gt;The latest study also follows work&lt;sup&gt;&lt;a href=&quot;https://www.nature.com/articles/d41586-018-01600-6#ref-CR3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; published in January in which researchers removed all of the lignin and compressed the material at room temperature — resulting in a threefold increase in strength.&lt;/p&gt;
&lt;p&gt;Hu says that his study’s main finding is that removing the right amount of lignin is key to maximizing performance. In his team’s experiments, removing too much of the polymer resulted in less-dense, brittle wood, suggesting that some leftover lignin is helpful in binding the cellulose fibres when they are hot-pressed. The wood was strongest when roughly 45% of the lignin was removed.&lt;/p&gt;
&lt;p&gt;“I see a lot of potential in this direction,” says Eder, referring to both papers. “What I like is that they’re trying to make use of the inherent properties of the wood itself. It’s a fantastic material to work on and improve.”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;article__endnote&quot;&gt;
&lt;p&gt;Read the related News &amp;amp; Views article: &lt;a href=&quot;https://www.nature.com/article/d41586-018-01371-0&quot;&gt;‘Wood made denser and stronger’&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;nature-briefing nature-briefing--article cleared&quot; data-track-component=&quot;nature-briefing&quot;&gt;
&lt;header class=&quot;nature-briefing__header&quot;&gt;&lt;span class=&quot;visually-hidden&quot;&gt;Nature Briefing&lt;/span&gt;&lt;/header&gt;&lt;div class=&quot;pa10 pt20&quot;&gt;
&lt;p class=&quot;serif nature-briefing__slogan mr30&quot;&gt;&lt;strong&gt;Sign up for the daily &lt;span class=&quot;emphasis&quot;&gt;Nature Briefing&lt;/span&gt; email newsletter&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;sans-serif nature-briefing__standfirst mr30&quot;&gt;Stay up to date with what matters in science and why, handpicked from &lt;span class=&quot;emphasis&quot;&gt;Nature&lt;/span&gt; and other publications worldwide.&lt;/p&gt;
&lt;p class=&quot;cleared&quot;&gt;&lt;a class=&quot;nature-briefing__link&quot; data-track=&quot;click&quot; data-track-label=&quot;nature briefing article link&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; href=&quot;https://www.nature.com/briefing/signup/&quot;&gt;Sign Up&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section aria-labelledby=&quot;Bib1&quot;&gt;&lt;div class=&quot;serif article-section js-article-section cleared clear&quot; id=&quot;Bib1-section&quot;&gt;
&lt;h2 class=&quot;js-section-title section-title strong position-relative tighten-line-height background-gray-light pt20 pb6 pl0 pr20 standard-space-below small-space-above mq640-pt10 mq640-pb10 mq640-pl20 mq640-mt0 extend-left&quot; id=&quot;Bib1&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;pl20 mq875-pl0 js-collapsible-section&quot; id=&quot;Bib1-content&quot;&gt;
&lt;div data-container-section=&quot;references&quot;&gt;
&lt;ol class=&quot;clean-list ma0 standard-space-below indented-list&quot; data-test=&quot;references-list&quot;&gt;&lt;li class=&quot;small-space-below border-gray-medium border-bottom-1 position-relative js-ref-item&quot; itemprop=&quot;citation&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Article&quot; data-test=&quot;citation&quot;&gt;&lt;span class=&quot;indented-counter serif h2 tighten-line-height text-right position-absolute grade-c-hide&quot;&gt;1.&lt;/span&gt;
&lt;p class=&quot;tiny-space-below&quot; id=&quot;ref-CR1&quot;&gt;Song, J. &lt;em&gt;et al.&lt;/em&gt; &lt;em&gt;Nature&lt;/em&gt; &lt;strong&gt;554&lt;/strong&gt;, 224–228 (2018).&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;small-space-below border-gray-medium border-bottom-1 position-relative js-ref-item&quot; itemprop=&quot;citation&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Article&quot; data-test=&quot;citation&quot;&gt;&lt;span class=&quot;indented-counter serif h2 tighten-line-height text-right position-absolute grade-c-hide&quot;&gt;2.&lt;/span&gt;
&lt;p class=&quot;tiny-space-below&quot; id=&quot;ref-CR2&quot;&gt;Fratzl, P. &lt;em&gt;Nature&lt;/em&gt; &lt;strong&gt;554&lt;/strong&gt;, 172–173 (2018).&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;small-space-below border-gray-medium border-bottom-1 position-relative js-ref-item&quot; itemprop=&quot;citation&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Article&quot; data-test=&quot;citation&quot;&gt;&lt;span class=&quot;indented-counter serif h2 tighten-line-height text-right position-absolute grade-c-hide&quot;&gt;3.&lt;/span&gt;
&lt;p class=&quot;tiny-space-below&quot; id=&quot;ref-CR3&quot;&gt;Frey, M. &lt;em&gt;et al.&lt;/em&gt; ACS Appl. Mater. Interfaces http://dx.doi.org/10.1021/acsami.7b18646 (2018).&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;small-space-below border-gray-medium border-bottom-1 position-relative js-ref-item&quot; itemprop=&quot;citation&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Article&quot; data-test=&quot;citation&quot;&gt;&lt;span class=&quot;indented-counter serif h2 tighten-line-height text-right position-absolute grade-c-hide&quot;&gt;4.&lt;/span&gt;
&lt;p class=&quot;tiny-space-below&quot; id=&quot;ref-CR4&quot;&gt;Zhu, H &lt;em&gt;et al.&lt;/em&gt; &lt;em&gt;Proc. Natl Acad. Sci. USA&lt;/em&gt; 112, 8971–8976 https://dx.doi.org/10.1073/pnas.1502870112 (2015).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;hide-print text-right&quot;&gt;&lt;a href=&quot;https://www.nature.com/articles/d41586-018-01600-6-references.ris&quot; class=&quot;text14 sans-serif strong&quot; data-track=&quot;click&quot; data-track-source=&quot;download&quot; data-track-dest=&quot;link:Download references&quot;&gt;Download references&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;aside class=&quot;article__aside align-right&quot;&gt;&lt;div class=&quot;related-content shrink--aside&quot;&gt;
&lt;h3 class=&quot;aside__title sans-serif&quot;&gt;Related Articles&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;article__subjects bordered-container shrink--aside&quot;&gt;
&lt;h3 class=&quot;aside__title sans-serif&quot;&gt;Subjects&lt;/h3&gt;
&lt;ul class=&quot;ma0 subject-list cleared clean-list inline-list&quot;&gt;&lt;li class=&quot;subject&quot;&gt;Biomechanics&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div id=&quot;div-gpt-ad-right-2&quot; class=&quot;div-gpt-ad advert medium-rectangle js-ad text-center hide-print grade-c-hide hide-overflow&quot; data-gpt-unitpath=&quot;/285/nature.com/article&quot; data-gpt-sizes=&quot;300x250&quot; data-gpt-targeting=&quot;template=mosaic;pos=right;abr=!webtv;tile=2;artid=/articles/d41586-018-01600-6&quot;&gt;&lt;noscript&gt;
&lt;p&gt;&lt;a href=&quot;https://pubads.g.doubleclick.net/gampad/jump?iu=/285/nature.com/article&amp;amp;sz=300x250&amp;amp;tile=2&amp;amp;c=1692743864&amp;amp;t=template%3Dmosaic%26pos%3Dright%26abr%3D%21webtv%26tile%3D2%26artid%3D/articles/d41586-018-01600-6&quot;&gt;&lt;img data-test=&quot;gpt-advert-fallback-img&quot; src=&quot;https://pubads.g.doubleclick.net/gampad/ad?iu=/285/nature.com/article&amp;amp;sz=300x250&amp;amp;tile=2&amp;amp;c=1692743864&amp;amp;t=template%3Dmosaic%26pos%3Dright%26abr%3D%21webtv%26tile%3D2%26artid%3D/articles/d41586-018-01600-6&quot; alt=&quot;Advertisement&quot; width=&quot;300&quot; height=&quot;250&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;/div&gt;
&lt;/aside&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 08 Feb 2018 10:51:18 +0000</pubDate>
<dc:creator>okket</dc:creator>
<og:url>http://www.nature.com/articles/d41586-018-01600-6</og:url>
<og:type>article</og:type>
<og:title>Crushed wood is stronger than steel</og:title>
<og:description>Compressing wood and removing some of its polymers can increase its strength by more than a factor of ten.</og:description>
<og:image>https://media.nature.com/lw1024/magazine-assets/d41586-018-01600-6/d41586-018-01600-6_15443358.jpg</og:image>
<dc:language>EN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nature.com/articles/d41586-018-01600-6</dc:identifier>
</item>
<item>
<title>“We Are Morons” – A quick look at the Win2k source (2004)</title>
<link>http://atdt.freeshell.org/k5/story_2004_2_15_71552_7795.html</link>
<guid isPermaLink="true" >http://atdt.freeshell.org/k5/story_2004_2_15_71552_7795.html</guid>
<description>&lt;table width=&quot;140&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;/td&gt;
&lt;td width=&quot;20&quot;&gt;&lt;img src=&quot;http://atdt.freeshell.org/k5/images/clear.gif&quot; alt=&quot;&quot; width=&quot;20&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;img src=&quot;http://atdt.freeshell.org/k5/images/clear.gif&quot; alt=&quot;&quot; width=&quot;15&quot; height=&quot;10&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;span&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;br/&gt;Several days ago, two files containing Microsoft source code began circulating on the Internet. One contains a majority of the NT4 source code: this is not discussed here. The other contains a fraction of the Windows 2000 source code, reportedly about 15% of the total. This includes some networking code including winsock and inet; as well as some shell code. Some other familiar items include the event log, and some of the default screensavers.&lt;/span&gt;
&lt;p&gt;&lt;span&gt;The timestamps on the files generally say 25 July 2000. The source is contained in a Zip file of size 213,748,207 bytes, named windows_2000_source_code.zip, which has been widely circulated on P2P networks. Some dummy files of similar size, containing just strings of zeroes, have also circulated.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There has been some speculation that while the bulk of the source is genuine, some of the comments have been tampered with to embarrass Microsoft. This is difficult to disprove, but I find it implausible. The embarrassing comments occur on thousands of lines, in realistic places. Furthermore, if someone had done that, it would have been easy to make the comments far more incriminating.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Embarrassments&lt;/strong&gt;&lt;br/&gt;In the struggle to meet deadlines, I think pretty much all programmers have put in comments they might later regret, including swearwords and acerbic comments about other code or requirements. Also, any conscientious coder will put in prominent comments warning others about the trickier parts of the code. Comments like &quot;UGLY TERRIBLE HACK&quot; tend to indicate good code rather than bad: in bad code ugly terrible hacks are considered par for the course. It would therefore be both hypocritical and meaningless to go through the comments looking for embarrassments. But also fun, so let's go.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Curse words: there are a dozen or so &quot;fucks&quot; and &quot;shits&quot;, and hundreds of &quot;craps&quot;. Some dissatisfaction with the compiler is expressed in private\shell\shell32\util.cpp:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;// the fucking alpha cpp compiler seems to fuck up the goddam type &quot;LPITEMIDLIST&quot;, so to work&lt;br/&gt;// around the fucking peice of shit compiler we pass the last param as an void *instead of a LPITEMIDLIST&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span&gt;Some insight into Microsoft's famous daily build process is given in private\windows\media\avi\verinfo.16\verinfo.h:&lt;/span&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;tt&gt; *       !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br/&gt; *       !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br/&gt; * !!!!!!!IF YOU CHANGE TABS TO SPACES, YOU WILL BE KILLED!!!!!!!&lt;br/&gt; *       !!!!!!!!!!!!!!DOING SO FUCKS THE BUILD PROCESS!!!!!!!!!!!!!!!!&lt;br/&gt; *       !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;br/&gt; *       !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/tt&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span&gt;There are also various references to idiots and morons, some external, some within Microsoft. The file private\ntos\rtl\heap.c, which dates from 1989, tells us&lt;/span&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;// The specific idiot in this case is Office95, which likes&lt;br/&gt;// to free a random pointer when you start Word95 from a desktop&lt;br/&gt;// shortcut.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span&gt;The file private\ntos\w32\ntuser\kernel\swp.c from 11-Jul-1991 points at&lt;/span&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;* for idiots like MS-Access 2.0 who SetWindowPos( SWP_BOZO&lt;br/&gt;* and blow away themselves on the shell, then lets&lt;br/&gt;* just ignore their plea to be removed from the tray&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span&gt;Morons also abound, as in this selection&lt;/span&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;span&gt;private\genx\shell\inc\prsht.w:&lt;br/&gt;// we are such morons. Wiz97 underwent a redesign between IE4 and IE5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\shell\ext\ftp\ftpdrop.cpp:&lt;br/&gt;We have to do this only because Exchange is a moron.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\shell\shdoc401\unicpp\desktop.cpp:&lt;br/&gt;// We are morons. We changed the IDeskTray interface between IE4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\shell\browseui\itbar.cpp:&lt;br/&gt;// should be fixed in the apps themselves. Morons!&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span&gt;Microsoft programmers also take their duty to warn others seriously. There are over 4,000 references to &quot;hacks&quot;, mostly warnings. These include&lt;/span&gt;
&lt;blockquote readability=&quot;39&quot;&gt;
&lt;p&gt;&lt;span&gt;private\inet\mshtml\src\core\cdbase\baseprop.cxx:&lt;br/&gt;// HACK! HACK! HACK! (MohanB) In order to fix #64710 at this very late&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\inet\mshtml\src\core\cdutil\genutil.cxx:&lt;br/&gt;// HACK HACK HACK. REMOVE THIS ONCE MARLETT IS AROUND&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\inet\mshtml\src\other\moniker\resprot.cxx:&lt;br/&gt;// &amp;lt;HACK&amp;gt;&lt;br/&gt;goto EndHack;&lt;br/&gt;// &amp;lt;/HACK&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\inet\mshtml\src\site\layout\flowlyt.cxx:&lt;br/&gt;// God, I hate this hack ...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\inet\wininet\urlcache\cachecfg.cxx:&lt;br/&gt;// Dumb hack for back compat. *sigh*&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\inet\wininet\urlcache\filemgr.cxx:&lt;br/&gt;// ACHTUNG!!! this is a special hack for IBM antivirus software&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\ispu\pkitrust\trustui\acuictl.cpp:&lt;br/&gt;// HACK ALERT, believe it or not there is no way to get the height of the current&lt;br/&gt;// HACK ON TOP OF HACK ALERT,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\ntos\udfs\devctrl.c:&lt;br/&gt;// Add the hack-o-ramma to fix formats.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\shell\shdoc401\unicpp\sendto.cpp:&lt;br/&gt;// Mondo hackitude-o-rama.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\ntos\w32\ntcon\server\link.c:&lt;br/&gt;// HUGE, HUGE hack-o-rama to get NTSD started on this process!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\ntos\w32\ntuser\client\dlgmgr.c:&lt;br/&gt;// HACK OF DEATH:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\shell\lib\util.cpp:&lt;br/&gt;// TERRIBLE HORRIBLE NO GOOD VERY BAD HACK&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\ntos\w32\ntuser\client\nt6\user.h:&lt;br/&gt;* The magnitude of this hack compares favorably with that of the national debt.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span&gt;While surprisingly informal, there are limits to how far the programmers go. There are no derogatory references to Microsoft or Windows themselves. Bill Gates is never mentioned. There are no racist or homophobic slurs. I saw only one drug reference.&lt;/span&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;private\shell\ext\tweakui\genthunk.c:&lt;br/&gt;* CallProc32W is insane. It's a variadic function that uses&lt;br/&gt;* the pascal calling convention. (It probably makes more sense&lt;br/&gt;* when you're stoned.)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span&gt;&lt;strong&gt;Quality&lt;/strong&gt;&lt;br/&gt;Despite the above, the quality of the code is generally excellent. Modules are small, and procedures generally fit on a single screen. The commenting is very detailed about intentions, but doesn't fall into &quot;add one to i&quot; redundancy.&lt;/span&gt;
&lt;p&gt;&lt;span&gt;There is some variety in the commenting style. Sometimes blocks use a // at every line, sometimes the /* */ style. In some modules functions have a history, some do not. Some functions describe their variables in a comment block, some don't. Microsoft appears not to have fallen into the trap of enforcing over-rigid standards or universal use of over-complicated automatic tools. They seem to trust their developers to comment well, and they do.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;However, not everything is so rosy. Some of the modules are clearly suffering from the hacks upon hacks mentioned earlier. As someone who struggled immensely trying to get the MSInet control working not long after this code was released, it's a relief to see that the inet code is as bad as I thought.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;From the comments, it also appears that most of the uglier hacks are due to compatibility issues: either backward-compatibility, hardware compatibility or issues caused by particular software. Microsoft's vast compatibility strengths have clearly come at a cost, both in developer-sweat and the elegance (and hence stability and maintainability) of the code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Open Source&lt;/strong&gt;&lt;br/&gt;It's been widely rumored for a while that Microsoft relies on stolen open source code. The rumor has faced widespread skepticism too. Microsoft has hundreds of millions of lines of code, most of it highly specialized. Hardly any of that could benefit from stealing: it hardly seems worth the legal risk. It's true that early versions of the TCP-IP stack were (legally) taken from BSD: but that was a long time ago, when Microsoft was much smaller.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Searching the code for &quot;linux&quot; and &quot;GPL&quot; finds no references. &quot;BSD&quot; finds only a couple of references to BSD-convention strings. &quot;GNU&quot; finds a lot of references to a GNUmakefile in private\genx\shell, which in turn mentions a &quot;mode for Emacs.&quot; This is apparently legitimate: simply using a makefile does not apply the makefile's copyright to the resulting code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Therefore, a superficial look at the code finds no evidence that Microsoft has violated the GPL or stolen other open source code. Closer examination might turn something up.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Favoritism&lt;/strong&gt;&lt;br/&gt;It's noticeable that a lot of the &quot;hacks&quot; refer to individual applications. In some cases they are non-Microsoft, such as &lt;a href=&quot;http://www.kuro5hin.org/story/2004/2/15/11942/2702&quot;&gt;this case&lt;/a&gt;: a Borland compiler came to depend on an existing bug, so their fix worked to preserve some of the bug's behaviour. But just as often these application-specific fixes are for Microsoft's own apps. There seems to be an informal hierarchy when it comes these: Microsoft apps take precedence, then major software companies like IBM and Borland.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It's also interesting to finally see references to the notorious undocumented features, which Microsoft application developers have long been known to use.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;span&gt;private\mvdm\wow32\wcntl32.c:&lt;br/&gt;// These undocumented messages are used by Excel 5.0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\mvdm\wow32\wgdi31.c:&lt;br/&gt;// InquireVisRgn is an undocumented Win 3.1 API. This code has been&lt;br/&gt;// suggested by ChuckWh. If this does not fix the s 2.0&lt;br/&gt;// problem, then ChuckWh would be providing us with an private entry&lt;br/&gt;// point.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\mvdm\wow32\wgfont.c:&lt;br/&gt;* This thunk implements the undocumented Win3.0 and Win3.1 API&lt;br/&gt;* GetCurLogFont (GDI.411). Symantec QA4.0 uses it.&lt;br/&gt;* To implement this undocumented API we will use the NT undocumented API&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span&gt;In some cases, the programmers themselves appear to have been frustrated or surprised.&lt;/span&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;&lt;span&gt;private\ntos\w32\ntuser\kernel\mnpopup.c:&lt;br/&gt;// Set the GlobalPopupMenu variable so that EndMenu works for popupmenus so&lt;br/&gt;// that WinWart II people can continue to abuse undocumented functions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\windows\shell\accesory\hypertrm\emu\minitel.c:&lt;br/&gt;// Guess what? Latent background color is always adopted for mosaics.&lt;br/&gt;// This is a major undocumented find...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private\windows\shell\accesory\hypertrm\emu\minitelf.c:&lt;br/&gt;// Ah, the life of the undocumented. The documentation says&lt;br/&gt;// that this guys does not validate, colors, act as a delimiter&lt;br/&gt;// and fills with spaces. Wrong. It does validate the color.&lt;br/&gt;// As such its a delimiter. If...&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;br/&gt;The security risks from this code appear to be low. Microsoft do appear to be checking for buffer overruns in the obvious places. The amount of networking code here is small enough for Microsoft to easily check for any vulnerabilities that might be revealed: it's the big applications that pose more of a risk. This code is also nearly four years old: any obvious problems should be patched by now.&lt;/span&gt;
&lt;p&gt;&lt;span&gt;Microsoft's fears that this code will be pirated by its competitors also seem largely unfounded. With application code this would be a risk, but it's hard to see Microsoft's operating system competitors taking advantage of it. Neither Apple nor Linux are in a much of position to steal code and get away with it, even if it was useful to them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In short, there is nothing really surprising in this leak. Microsoft does not steal open-source code. Their older code is flaky, their modern code excellent. Their programmers are skilled and enthusiastic. Problems are generally due to a trade-off of current quality against vast hardware, software and backward compatibility.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Feb 2018 06:45:18 +0000</pubDate>
<dc:creator>sgillen</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://atdt.freeshell.org/k5/story_2004_2_15_71552_7795.html</dc:identifier>
</item>
<item>
<title>Key iPhone Source Code Gets Posted Online</title>
<link>https://motherboard.vice.com/amp/en_us/article/a34g9j/iphone-source-code-iboot-ios-leak</link>
<guid isPermaLink="true" >https://motherboard.vice.com/amp/en_us/article/a34g9j/iphone-source-code-iboot-ios-leak</guid>
<description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update, February 8, 08:27 a.m.&lt;/strong&gt;: Apple filed a copyright takedown request with GitHub and forced the company to remove the code.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Someone just posted what experts say is the source code for a core component of the iPhone’s operating system on GitHub, which could pave the way for hackers and security researchers to find vulnerabilities in iOS and make iPhone jailbreaks easier to achieve.&lt;/p&gt;
&lt;p&gt;The GitHub code is labeled “iBoot,” which is the part of iOS that is responsible for ensuring a trusted boot of the operating system. In other words, it’s the program that loads iOS, the very first process that runs when you turn on your iPhone. It loads and verifies the kernel is properly signed by Apple and then executes it—it’s like the iPhone’s BIOS.&lt;/p&gt;


&lt;p&gt;The code says it’s for iOS 9, an older version of the operating system, but portions of it are likely to still be used in iOS 11.&lt;/p&gt;
&lt;p&gt;Apple has traditionally been very reluctant to release code to the public, though it has made certain parts of iOS and MacOS open source in recent years. But it has taken particular care to keep iBoot secure and its code private; bugs in the boot process are the most valuable ones if reported to Apple through &lt;a href=&quot;https://techcrunch.com/2016/08/04/apple-announces-long-awaited-bug-bounty-program/&quot; target=&quot;_blank&quot;&gt;its bounty program&lt;/a&gt;, which values them at a max payment of $200,000.&lt;/p&gt;
&lt;p&gt;“This is the biggest leak in history,” Jonathan Levin, the author of a &lt;a href=&quot;https://t.co/LNglGJs9U7&quot; target=&quot;_blank&quot;&gt;series of books&lt;/a&gt; on iOS and Mac OSX internals, told me in an online chat, referring to Apple's history. “It’s a huge deal.”&lt;/p&gt;
&lt;div class=&quot;article__media&quot; readability=&quot;7&quot;&gt;

&lt;p&gt;A screenshot of part of the leaked iBoot source code.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Levin said the code appears to be the real iBoot code because it aligns with code he reverse engineered himself. A second security researcher familiar with iOS also said they believe the code is real. We don’t know who is behind the leak. Apple did not respond to a request for comment.&lt;/p&gt;
&lt;p&gt;A few hours after the publication of this story, Apple sent &lt;a href=&quot;https://github.com/github/dmca/blob/master/2018/2018-02-07-Apple.md&quot; target=&quot;_blank&quot;&gt;a DMCA legal notice&lt;/a&gt; demanding GitHub take down the iBoot code. &quot;The &quot;iBoot&quot; source code is proprietary and it includes Apple's copyright notice. It is not open-source.&quot; This way, Apple indirectly confirmed that the code was real. GitHub took down the code soon after.&lt;/p&gt;

&lt;p&gt;Having access to the source code of iBoot gives iOS security researchers a better chance to find vulnerabilities that could lead to compromising or jailbreaking the device, Levin said. That means hackers could have an easier time finding flaws and bugs that could allow them to crack or decrypt an iPhone. And, perhaps, this leak could eventually allow advanced programmers to emulate iOS on non Apple platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Got a tip? You can contact this reporter securely on Signal at +1 917 257 1382, OTR chat at lorenzo@jabber.ccc.de, or email lorenzo@motherboard.tv&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vulnerabilities in previous versions of iBoot allowed jailbreakers and hackers to brute-force their way through the iPhone’s lock screen and decrypt a user’s data. But newer iPhones have a chip &lt;a href=&quot;https://motherboard.vice.com/en_us/article/yp3vqb/fbi-order-apple-san-bernardino-encryption-hacking-backdoor-technical-explainer&quot; target=&quot;_blank&quot;&gt;called the Secure Enclave Processor&lt;/a&gt;, which has hardened the security of the device.&lt;/p&gt;
&lt;p&gt;For regular users, Levin added, this means that tethered jailbreaks, which require the phone to be connected to a computer when booting, could soon be back. These jailbreaks used to be relatively easy to pull off and were common, but are now extremely hard to come by on up-to-date iOS devices, which have advanced security mechanisms that make it hard for even highly skilled researchers from even looking for bugs, as they need to first jailbreak the device before beginning to probe the device.&lt;/p&gt;
&lt;p&gt;It’s these security improvements that have &lt;a href=&quot;https://motherboard.vice.com/en_us/article/8xa4ka/iphone-jailbreak-life-death-legacy&quot; target=&quot;_blank&quot;&gt;have effectively killed the once popular jailbreak community&lt;/a&gt;. Nowadays, finding bugs and vulnerabilities in iOS is something that requires a significant amount of time and resources, &lt;a href=&quot;https://motherboard.vice.com/en_us/article/gybppx/iphone-bugs-are-too-valuable-to-report-to-apple&quot; target=&quot;_blank&quot;&gt;making the resulting exploits incredibly valuable&lt;/a&gt;. That’s why the jailbreaking community gets excited for any leak of source code or any exploit &lt;a href=&quot;https://motherboard.vice.com/en_us/article/d3xpyz/google-iphone-ios-jailbreak&quot; target=&quot;_blank&quot;&gt;that gets released publicly&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;article__blockquote&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; &lt;a href=&quot;https://motherboard.vice.com/en_us/article/8xdayg/iphone-zero-days-inside-azimuth-security&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;How a Tiny Startup Became the Most Important Hacking Shop You’ve Never Heard Of&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This source code first surfaced last year, posted by a Reddit user called “&lt;a href=&quot;https://www.reddit.com/user/apple_internals&quot; target=&quot;_blank&quot;&gt;apple_internals&lt;/a&gt;” on the Jailbreak subreddit. That post &lt;a href=&quot;https://www.reddit.com/r/jailbreak/comments/71p5qs/newsiboot_bootrom_ibss_ibec_illb_source_codes/&quot; target=&quot;_blank&quot;&gt;didn’t get much attention&lt;/a&gt; since the user was new and didn’t have enough Reddit karma; the post was quickly buried. Its new availability on GitHub means it’s likely circulating widely in the underground jailbreaking community and in iOS hacking circles.&lt;/p&gt;
&lt;p&gt;“iBoot is the one component Apple has been holding on to, still encrypting its 64 bit image,” Levin said. “And now it’s wide open in source code form.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This story has been updated to include Apple's DMCA take-down request.&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Get six of our favorite Motherboard stories every day&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://motherboard.club/&quot; target=&quot;_blank&quot;&gt;by signing up for our newsletter.&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Feb 2018 04:40:28 +0000</pubDate>
<dc:creator>tonyztan</dc:creator>
<og:type>article</og:type>
<og:title>Key iPhone Source Code Gets Posted Online in 'Biggest Leak in History'</og:title>
<og:image>https://video-images.vice.com/articles/5a7b91d3181fb64372d8ba89/lede/1518048704718-shutterstock_373942585.jpeg?crop=1xw:0.84375xh;center,center&amp;resize=1200:*</og:image>
<og:url>https://motherboard.vice.com/en_us/article/a34g9j/iphone-source-code-iboot-ios-leak</og:url>
<og:description>Source code for iBoot, one of the most critical iOS programs, was anonymously posted on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://motherboard.vice.com/amp/en_us/article/a34g9j/iphone-source-code-iboot-ios-leak</dc:identifier>
</item>
</channel>
</rss>