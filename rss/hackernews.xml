<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>China is detaining a million Uighur muslims in a secret camp</title>
<link>https://www.bbc.com/news/world-asia-china-45147972</link>
<guid isPermaLink="true" >https://www.bbc.com/news/world-asia-china-45147972</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;An Uighur woman holds the IDs of her relatives who are currently detained, as she and others protest on a street in July, 2009&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/C474/production/_102929205_uighurwomen.jpg&quot; width=&quot;976&quot; height=&quot;649&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Uighur protesters pictured in 2009 wield the ID cards of detained relatives
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;A UN human rights committee has heard there are credible reports that China is holding a million Uighurs in &quot;counter-extremism centres&quot;.&lt;/p&gt;&lt;p&gt;Gay McDougall, a member of the UN Committee on the Elimination of Racial Discrimination, raised the claims at a two-day UN meeting on China.&lt;/p&gt;&lt;p&gt;She said she was concerned by reports that Beijing had &quot;turned the Uighur autonomous region into something that resembles a massive internment camp&quot;.&lt;/p&gt;&lt;p&gt;China did not immediately respond.&lt;/p&gt;&lt;p&gt;Its 50-strong delegation said it would address questions on Monday, when the session in Geneva continues.&lt;/p&gt;&lt;ul class=&quot;story-body__unordered-list&quot;&gt;&lt;li class=&quot;story-body__list-item&quot;&gt;&lt;a href=&quot;https://www.bbc.com/news/world-asia-china-22278037&quot; class=&quot;story-body__link&quot;&gt;In depth: Tensions between Beijing and the Uighurs&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;&lt;a href=&quot;https://www.bbc.com/news/world-asia-42049550&quot; class=&quot;story-body__link&quot;&gt;Uighurs dig their way out of Thai jail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Beijing has previously denied the existence of such camps. &lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Who are the Uighurs? &lt;/h2&gt;&lt;p&gt;The Uighurs are a Muslim ethnic minority mostly based in China's Xinjiang province. They make up around 45% of the population there.&lt;/p&gt;&lt;p&gt;Xinjiang is officially designated as an autonomous region within China, like Tibet to its south.&lt;/p&gt;&lt;figure class=&quot;media-with-caption&quot; readability=&quot;-24&quot;&gt;&lt;div class=&quot;player-with-placeholder&quot; readability=&quot;7&quot;&gt;
            &lt;img class=&quot;media-placeholder player-with-placeholder__image narrative-video-placeholder&quot; src=&quot;https://ichef.bbci.co.uk/images/ic/720x405/p05wv9gj.jpg&quot;/&gt;&lt;p&gt;Media playback is unsupported on your device&lt;/p&gt;
      
    &lt;/div&gt;    &lt;figcaption class=&quot;media-with-caption__caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Media caption&lt;/span&gt;John Sudworth reports from Xinjiang, where all filming and reporting by foreign media is tightly controlled&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Reports that more and more Uighurs and other Muslim minorities are being detained in Xinjiang have been circulating for some months.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;What is Beijing accused of?&lt;/h2&gt;&lt;p&gt;Human rights groups including Amnesty International and Human Rights Watch have submitted reports to the UN committee documenting claims of mass imprisonment, in camps where inmates are forced to swear loyalty to China's President Xi Jinping. &lt;/p&gt;&lt;p&gt;The World Uyghur Congress said in its report that detainees are held indefinitely without charge, and forced to shout Communist Party slogans.  &lt;/p&gt;&lt;p&gt;It said they are poorly fed, and reports of torture are widespread. &lt;/p&gt;&lt;p&gt;Most inmates have never been charged with a crime, it is claimed, and do not receive legal representation.&lt;/p&gt;&lt;p&gt;China is said to carry out the detentions under the guise of combating religious extremism.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;What does China say?&lt;/h2&gt;&lt;p&gt;The Chinese government denies the existence of these camps. &lt;/p&gt;&lt;p&gt;In April, Laura Stone, a senior diplomat in the US State Department, said tens of thousands of people had been detained in &quot;re-education centres&quot; amid a government crackdown.&lt;/p&gt;&lt;p&gt;In response, Chinese Foreign Ministry spokeswoman Hua Chunying stated that, &quot;everyone can see that people of all ethnicities in Xinjiang live and work in peace and contentment and enjoy peaceful and progressing lives&quot;.&lt;/p&gt;&lt;ul class=&quot;story-body__unordered-list&quot;&gt;&lt;li class=&quot;story-body__list-item&quot;&gt;&lt;a href=&quot;https://www.bbc.com/news/world-asia-china-39460538&quot; class=&quot;story-body__link&quot;&gt;China bans beards and veils in Xinjiang&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;&lt;a href=&quot;https://www.bbc.com/news/world-asia-pacific-16860974&quot; class=&quot;story-body__link&quot;&gt;Profile: What is Xinjiang like?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    China denies the existence of mass detention camps where Uighurs are held without trial (Pictured: Uighur men at a bazaar in 2013)
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The claims come on a day of worsening religious tensions elsewhere in China. &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.bbc.co.uk/news/world-asia-china-45140551&quot; class=&quot;story-body__link&quot;&gt;In the north-western Ningxia region, hundreds of Muslims engaged in a standoff with authorities&lt;/a&gt; on Friday to prevent their mosque from being demolished.&lt;/p&gt;&lt;p&gt;Officials said the newly-built Weizhou Grand Mosque had not been given proper building permits. However, human rights groups say there is increasing official hostility towards Muslims in China, where religious activities remain tightly controlled by the government.&lt;/p&gt;
            </description>
<pubDate>Sat, 11 Aug 2018 02:28:25 +0000</pubDate>
<dc:creator>crunchlibrarian</dc:creator>
<og:title>China detains one million Uighurs, UN told</og:title>
<og:type>article</og:type>
<og:description>A million ethnic Uighurs may be being held in &quot;re-education centres&quot;, a UN rights panel has heard.</og:description>
<og:url>https://www.bbc.co.uk/news/world-asia-china-45147972</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/C474/production/_102929205_uighurwomen.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/world-asia-china-45147972</dc:identifier>
</item>
<item>
<title>1/0 = 0</title>
<link>https://www.hillelwayne.com/post/divide-by-zero/</link>
<guid isPermaLink="true" >https://www.hillelwayne.com/post/divide-by-zero/</guid>
<description>&lt;p&gt;Have a tweet:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.hillelwayne.com/post/divide-by-zero/tweet.png&quot; alt=&quot;Picture of original tweet, name blacked out&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I have no idea if Pony is making the right choice here, I don’t know Pony, and I don’t have any interest in learning Pony. But this tweet raised my hackles for two reasons:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;It’s pretty smug. I have very strong opinions about programming, but one rule I try to follow is &lt;em&gt;do not mock other programmers&lt;/em&gt;. Programming is too big and I’m too small to understand everything. Disagreeing is fine, laying out why people are wrong is fine, making fun of them is not fine.&lt;/li&gt;
&lt;li&gt;It’s saying that Pony is &lt;em&gt;mathematically&lt;/em&gt; wrong. This is objectively false.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I tweeted a thing about why &lt;code&gt;1/0 = 0&lt;/code&gt; is mathematically sound. Some people agreed, some people agreed with caveats, and some people called it bunk. A few people said it’s clear I don’t know real mathematics, because a real mathematician would never make such a mistake.&lt;/p&gt;
&lt;p&gt;So in this post I’d like to clearly, formally lay out why it’s consistent to say that &lt;code&gt;1/0 = 0&lt;/code&gt;, why some of the common objections don’t apply, and what the real mathematicians say. Fair warning, this post is going to be a little more mathematically dense than my usual stuff. I’ve tried to make it clear but, well, math.&lt;/p&gt;
&lt;h2 id=&quot;consistency&quot;&gt;Consistency&lt;/h2&gt;
&lt;p&gt;First we need to explain what we mean by “consistency”. In a given formalism, a mathematical statement is true if you can’t use it to prove something that’s false, like &lt;code&gt;1 = 0&lt;/code&gt;. The formalism is consistent, or &lt;strong&gt;sound&lt;/strong&gt;, if you can only use it to prove true statements. To say &lt;code&gt;1/0 = 0&lt;/code&gt; is unsound is to either say that we can prove &lt;code&gt;1/0 ≠ 0&lt;/code&gt; or that, given &lt;code&gt;1/0 = 0&lt;/code&gt;, we can prove something that’s false. These are actually equivalent statements but it’ll be useful to treat them as distinct for teaching purposes.&lt;/p&gt;
&lt;p&gt;Next we need to explain what we mean by “division”. But to do that, I need to introduce &lt;strong&gt;fields&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;fields&quot;&gt;Fields&lt;/h2&gt;
&lt;p&gt;A field is a set of elements (S) along with an &lt;strong&gt;addition operator&lt;/strong&gt; (&lt;code&gt;+&lt;/code&gt;) and a &lt;strong&gt;multiplication operator&lt;/strong&gt; (&lt;code&gt;*&lt;/code&gt;) that follow some properties:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The set is &lt;strong&gt;closed&lt;/strong&gt; under both operations. If &lt;code&gt;x&lt;/code&gt; is an element of S and &lt;code&gt;y&lt;/code&gt; is an element of S, then both &lt;code&gt;x + y&lt;/code&gt; and &lt;code&gt;x * y&lt;/code&gt; are elements of S.&lt;/li&gt;
&lt;li&gt;Both operations are &lt;strong&gt;commutative&lt;/strong&gt;. &lt;code&gt;a + b = b + a&lt;/code&gt;, and &lt;code&gt;a * b = b * a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Both operations are &lt;strong&gt;associative&lt;/strong&gt;. &lt;code&gt;a + (b + c) = (a + b) + c&lt;/code&gt;, and &lt;code&gt;a * (b * c) = (a * b) * c&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Multiplication is distributive. &lt;code&gt;a * (b + c) = a * b + a * c&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There is an element that is the &lt;strong&gt;additive identity&lt;/strong&gt;, or &lt;code&gt;0&lt;/code&gt;, such that &lt;code&gt;a + 0 = a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There is an element that is the &lt;strong&gt;multiplicative identity&lt;/strong&gt;, or &lt;code&gt;1&lt;/code&gt;, such that &lt;code&gt;a * 1 = a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The two identities are different elements. &lt;code&gt;1 ≠ 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Every element has an &lt;strong&gt;additive inverse&lt;/strong&gt;, &lt;code&gt;-a&lt;/code&gt;, such that &lt;code&gt;a + (-a) = 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Every element EXCEPT 0 has a &lt;strong&gt;multiplicative inverse&lt;/strong&gt;, &lt;code&gt;a⁻&lt;/code&gt;, such that &lt;code&gt;a*a⁻ = 1&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;These are all of the rules of a field. We can define S, +, and * any way we want, as long as all of the rules are followed. The real numbers, along with our conventional notion of addition and multiplication, form a field. This gives us the building blocks to discover properties of our system. In order to prove a &lt;strong&gt;theorem&lt;/strong&gt;, we need to be able to derive it solely through the definitions of &lt;code&gt;S/+/*&lt;/code&gt;, the definition of a field, and any axioms we have. For example, we can prove that for all &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;a * 0 = 0&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;By the additive identity, &lt;code&gt;0 + 0 = 0&lt;/code&gt;, so &lt;code&gt;a * 0 = a * (0 + 0)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;By the distributive property, &lt;code&gt;a * (0 + 0) = a * 0 + a * 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;By the additive inverse property, there is some &lt;code&gt;- (a * 0)&lt;/code&gt; such that &lt;code&gt;- (a * 0) + (a * 0) = 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Combining (1) and (2), we get &lt;code&gt;a * 0 = a * 0 + a * 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Combining (3) and (4), we get &lt;code&gt;- (a * 0) + (a * 0) = - (a * 0) + a * 0 + a * 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Evaluating (5) gives us &lt;code&gt;0 = a * 0&lt;/code&gt;. QED.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now that we have this as a theorem, we can use it to prove other theorems. Given this property, we can immediately show that there is no multiplicative inverse of 0:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;If 0 had a multiplicative inverse &lt;code&gt;0⁻&lt;/code&gt;, then &lt;code&gt;0 * 0⁻ = 1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For all real numbers, &lt;code&gt;a * 0 = 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since &lt;code&gt;1 ≠ 0&lt;/code&gt;, there is no multiplicative inverse of &lt;code&gt;0⁻&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Okay, now we can talk about division in the reals.&lt;/p&gt;
&lt;h2 id=&quot;division&quot;&gt;Division&lt;/h2&gt;
&lt;p&gt;The field definition does &lt;em&gt;not&lt;/em&gt; include division, nor do our definitions of addition or multiplication. This means we are free to define division however we want. We want to define it in a way that &lt;em&gt;mostly&lt;/em&gt; follows our intuition and is sound. I say &lt;em&gt;mostly&lt;/em&gt; because our intuition doesn’t generalize. As an example, we intuitively think of &lt;code&gt;a * b&lt;/code&gt; as “&lt;code&gt;a&lt;/code&gt; summed up &lt;code&gt;b&lt;/code&gt; times”. So what’s &lt;code&gt;-1 * π&lt;/code&gt;? How do you sum up something π times? While it would be nice if division didn’t have any “oddness” to it, we can’t guarantee that without kneecapping mathematics.&lt;/p&gt;
&lt;p&gt;The intuitive definition of division is multiplying by the inverse. &lt;code&gt;a/2 = a * 2⁻&lt;/code&gt;. Under this definition, we can get all of the properties of division we’re used to by proving that they hold. For example,&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Theorem: &lt;code&gt;a/a = 1&lt;/code&gt;. Proof: &lt;code&gt;a/a = a * a⁻ = 1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Theorem: &lt;code&gt;a * (b/c) = b * (a/c)&lt;/code&gt;. Proof: &lt;code&gt;a * (b/c) = a * (b * c⁻)&lt;/code&gt;. Since multiplication is commutative and associative, we can rearrange this to get &lt;code&gt;b * (a * c⁻) = b * (a/c)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is all great, except for one problem: &lt;strong&gt;0 does not have a multiplicative inverse&lt;/strong&gt;. Both of those proofs are invalid: if I write &lt;code&gt;0/0&lt;/code&gt;, I get &lt;code&gt;0 * 0⁻&lt;/code&gt;, which is an invalid equation. So we &lt;em&gt;cannot&lt;/em&gt; prove that &lt;code&gt;a/a = 1&lt;/code&gt;. We &lt;em&gt;can&lt;/em&gt;, however, prove something weaker:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Theorem: IF &lt;code&gt;a ≠ 0&lt;/code&gt;, THEN &lt;code&gt;a/a = 1&lt;/code&gt;. Proof: same.&lt;/li&gt;
&lt;li&gt;Theorem: IF &lt;code&gt;c ≠ 0&lt;/code&gt;, THEN &lt;code&gt;a * (b/c) = b * (a/c)&lt;/code&gt;. Proof: same.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note this does &lt;em&gt;not&lt;/em&gt; go both ways: it does &lt;em&gt;not&lt;/em&gt; follow that &lt;code&gt;0/0 ≠ 1&lt;/code&gt;. All we know is we cannot use &lt;em&gt;this&lt;/em&gt; theorem to prove that &lt;code&gt;0/0 = 1&lt;/code&gt;. So we do not have that &lt;code&gt;0/0 ≠ 1&lt;/code&gt;. For any given number, we &lt;em&gt;cannot&lt;/em&gt; prove that &lt;code&gt;0/0&lt;/code&gt; is not that number! Since we’ve defined division as multiplying by the inverse, and zero does not have an inverse, our definition of division does not cover dividing by zero. It does not say anything about it, leaving it “undefined” if you will.&lt;/p&gt;
&lt;p&gt;Since this form of division is not defined for 0, it is a &lt;strong&gt;partial function&lt;/strong&gt; over the reals: there is some value in its domain that we have not specified. Practically, this is &lt;em&gt;fine&lt;/em&gt;: we’re used to thinking of &lt;code&gt;1/0&lt;/code&gt; as an impossible operation. But division is no longer an operation over the real numbers. We need to either capture that in the definition, or find some way of extending division to cover dividing by zero. So there’s three things we can do:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We can say that division’s domain is all the real numbers &lt;em&gt;except&lt;/em&gt; zero. This is what we do in our day-to-day lives, and the way that Agda and Idris handle division.&lt;/li&gt;
&lt;li&gt;We can choose some value that isn’t a real number, such as “undefined” or infinity, and say &lt;code&gt;x/0 = &amp;lt;whatever&amp;gt;&lt;/code&gt;. This is what some mathematicians do with the Riemann sphere.&lt;/li&gt;
&lt;li&gt;We could choose some real number, like 19, and say that &lt;code&gt;x/0 = 19&lt;/code&gt;. This is what Isabelle, Lean and Coq do.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All of these have tradeoffs. With a restricted domain, you don’t have a total function, which can cause headaches. With an “undefined” value, division is no longer closed on the reals. In the last case, you explode everybody’s intuitive notion of division. But &lt;em&gt;all of these are sound.&lt;/em&gt; Since our original notion of division does not say anything about dividing by zero, it does not &lt;em&gt;rule out&lt;/em&gt; anything. None of these extensions lead to a contradiction.&lt;/p&gt;
&lt;p&gt;The controversy is over the last case, so let’s focus on that. We’ll define division as follows: &lt;code&gt;IF b = 0 THEN a/b = 1 ELSE a/b = a * b⁻&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Something I need to emphasize here: &lt;strong&gt;this does not give us an inverse of 0.&lt;/strong&gt; &lt;code&gt;1/0&lt;/code&gt; is not &lt;code&gt;0⁻&lt;/code&gt;. This means that while &lt;code&gt;0/0 = 1&lt;/code&gt;, &lt;code&gt;0 * 1/0 = 0&lt;/code&gt;. Division is only “multiply by the inverse” when the denominator isn’t 0. All we’ve done is special case dividing by zero and nothing else. And doing so is mathematically consistent, because &lt;em&gt;under this definition of division&lt;/em&gt; you can’t take &lt;code&gt;1/0 = 1&lt;/code&gt; and prove something false.&lt;/p&gt;
&lt;h2 id=&quot;objections&quot;&gt;Objections&lt;/h2&gt;
&lt;p&gt;Here’s where a lot of people objected. They would take the fact &lt;code&gt;1/0 = 1&lt;/code&gt; and prove something false, usually &lt;code&gt;1 = 0&lt;/code&gt;. None of these proofs, however, are sound. To see why, let’s dig into a couple example proofs and show where they break down.&lt;/p&gt;
&lt;p&gt;Here’s a common argument:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;1/0 = 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1/0 * 0 = 1 * 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 * 0/0 = 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 = 0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The problem is in step (3): our division theorem is only valid for &lt;code&gt;c ≠ 0&lt;/code&gt;, so you can’t go from &lt;code&gt;1/0 * 0&lt;/code&gt; to &lt;code&gt;1 * 0/0&lt;/code&gt;. The “denominator is nonzero” clause prevents us from taking our definition and reaching this contradiction.&lt;/p&gt;
&lt;p&gt;Here’s where people got tripped up. They assume we needed the nonzero clause on our division theorems because &lt;code&gt;x/0&lt;/code&gt; is undefined. “If &lt;code&gt;x/0&lt;/code&gt; is a value, then the theorem should extend to &lt;code&gt;c=0&lt;/code&gt;, too.” &lt;strong&gt;This is wrong.&lt;/strong&gt; The problem is &lt;em&gt;not&lt;/em&gt; that &lt;code&gt;1/0&lt;/code&gt; was undefined. The problem was that our proof uses the multiplicative inverse, and there is no multiplicative inverse of 0. Under our modified definition of division, we &lt;em&gt;still&lt;/em&gt; don’t have &lt;code&gt;0⁻&lt;/code&gt;, which means our proof &lt;em&gt;still&lt;/em&gt; does not work for dividing by zero. We still need the condition. So it is &lt;em&gt;not&lt;/em&gt; a theorem that &lt;code&gt;a * (b / 0) = b * (a / 0)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To be clear, this does &lt;em&gt;not&lt;/em&gt; mean they must be different! All we know is that we cannot use &lt;em&gt;this&lt;/em&gt; theorem to argue they &lt;em&gt;are&lt;/em&gt; equal. Since the “proof” that &lt;code&gt;1 = 0&lt;/code&gt; used that theorem, the proof is unsound.&lt;/p&gt;
&lt;p&gt;Pretty much every counterargument makes this exact same mistake: it assumes that because &lt;code&gt;1/0&lt;/code&gt; is now defined, there is now some &lt;code&gt;0⁻&lt;/code&gt; that generalizes our theorems. But there’s not.&lt;/p&gt;
&lt;p&gt;Another common objection is that if &lt;code&gt;1/0 = 1&lt;/code&gt;, then multiplicative inverses are no longer unique: &lt;code&gt;2/2 = 1&lt;/code&gt;, but also &lt;code&gt;2/0 = 1&lt;/code&gt;, so now 2 has two inverses. This, again, confuses cause and effect. &lt;code&gt;1/2&lt;/code&gt; is the inverse of 2 &lt;strong&gt;not&lt;/strong&gt; because of how we define inverses, but how we defined division. &lt;code&gt;2/2 = 1&lt;/code&gt; because &lt;code&gt;2/2 = 2 * 2⁻&lt;/code&gt;. But, again, zero does not have an inverse, and &lt;code&gt;2/0&lt;/code&gt; is not &lt;code&gt;2 * 0⁻&lt;/code&gt;. Since &lt;code&gt;0⁻&lt;/code&gt; does not exist, it is not an inverse of 2, and every nonzero number still has a unique inverse.&lt;/p&gt;
&lt;p&gt;If you want to prove that &lt;code&gt;1/0 = 1&lt;/code&gt; leads to a contradiction, you must explicitly list every step you take and show that none of them assume that &lt;code&gt;0⁻&lt;/code&gt; exists.&lt;/p&gt;
&lt;h2 id=&quot;1-0-0&quot;&gt;&lt;code&gt;1/0 = 0&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We’ve now established that if we choose some constant &lt;code&gt;C&lt;/code&gt;, then defining division such that &lt;code&gt;x/0 = C&lt;/code&gt; does not lead to any inconsistencies. It turns out that for certain choices of C, specifically 0, we can make some theorems &lt;em&gt;stronger&lt;/em&gt;. We can do this by removing the conditions on (some of) our division theorems, and then add a special case to the proof itself. For example:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Theorem: &lt;code&gt;a * (b/c) = b * (a/c)&lt;/code&gt;. Proof: we already proved this for &lt;code&gt;c ≠ 0&lt;/code&gt;. Now let &lt;code&gt;c = 0&lt;/code&gt;. Then &lt;code&gt;a * (b/0) = a * 0 = 0&lt;/code&gt;, and &lt;code&gt;b * (a/0) = b * 0 = 0&lt;/code&gt;, and &lt;code&gt;0 = 0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Under this definition of division step (3) in the counterargument above is now valid: we &lt;em&gt;can&lt;/em&gt; say that &lt;code&gt;1/0 * 0 = 1 * 0/0&lt;/code&gt;. However, in step (4) we say that &lt;code&gt;0/0 = 1&lt;/code&gt;. This theorem does not get stronger:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;“Theorem”: &lt;code&gt;a/a = 1&lt;/code&gt;. Proof: we already proved this for &lt;code&gt;a ≠ 0&lt;/code&gt;. Now let &lt;code&gt;a = 0&lt;/code&gt;. Then &lt;code&gt;a/a = 0/0 = 0&lt;/code&gt;, so &lt;code&gt;1 = 0&lt;/code&gt; and wait shit nevermind&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is why Lean and Isabelle define &lt;code&gt;1/0&lt;/code&gt; this way. Coq does it too, but as far as I can tell they don’t use it as an optimization.&lt;/p&gt;
&lt;h2 id=&quot;the-real-mathematicians&quot;&gt;The Real Mathematicians&lt;/h2&gt;
&lt;p&gt;A final objection is that I’m a CS person, not a mathmatician, so I don’t understand the math here. But what do the PhDs say?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lists.cam.ac.uk/pipermail/cl-isabelle-users/2018-February/msg00128.html&quot;&gt;Lawrence Paulson&lt;/a&gt;, professor of computational logic and inventor of Isabelle:&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;A bit of history: the first logic supported within Isabelle was Martin-Löf’s constructive type theory, and it is still there (CTT). And while developing arithmetic within that formalisation, I came up with a definition (necessarily primitive recursive and executable) of division. It delivered n/0 = 0. Since then a number of people have noticed that defining x/0 = 0 is convenient. This identity holds in quite a few different proof assistants now.&lt;/p&gt;
&lt;p&gt;These things are conventions, exactly the same as announcing that x^-n = 1/x^n and that x^0 = 0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://lamport.azurewebsites.net/pubs/lamport-types.pdf&quot;&gt;Leslie Lamport&lt;/a&gt;, Math PhD and winner of the 2013 Turing Award:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;[In ZF set theory] Since 0 is not in the domain of &lt;em&gt;recip&lt;/em&gt;, we know nothing about the value of &lt;code&gt;1 / 0&lt;/code&gt;; it might equal &lt;code&gt;√2&lt;/code&gt;, it might equal R, or it might equal anything else.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://storm-country.com/blog/&quot;&gt;Matt Noonan&lt;/a&gt;, Math PhD and introducer of &lt;a href=&quot;http://kataskeue.com/gdp.pdf&quot;&gt;Ghost Proofs&lt;/a&gt; to Haskell:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;looks all fine to me!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Arthur Azevedo de Amorim, an author of the &lt;a href=&quot;https://softwarefoundations.cis.upenn.edu/&quot;&gt;introductory Coq textbook&lt;/a&gt;, reconstructs the same argument I did &lt;a href=&quot;https://stackoverflow.com/questions/29282819/coq-qarith-division-by-zero-is-zero-why/29286440#29286440&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also chatted with a few math graduate student friends and emailed a couple of postdocs I know. So far people nobody’s said that letting &lt;code&gt;1/0 = 0&lt;/code&gt; is unsound. If any end up getting back to me with that I will include their refutation of this post.&lt;/p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;This was originally motivated by how Pony does division. So, is Pony doing the right thing here? No clue. Pony is a programming language, not a formal mathematical system. Consistency is less important than safety, convenience, and context. As a programmer, I don’t like it.&lt;/p&gt;
&lt;p&gt;But is Pony doing something unsound? Absolutely not. It is &lt;em&gt;totally fine&lt;/em&gt; to define &lt;code&gt;1/0 = 0&lt;/code&gt;. Nothing breaks and you can’t prove something false. Everybody who was making fun of Pony programmers for being ‘bad at math’ doesn’t actually understand the math behind it.&lt;/p&gt;
&lt;p&gt;Don’t make fun of other people. The world is big and we are small.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Watson Ladd, &lt;a href=&quot;http://storm-country.com/blog/&quot;&gt;Matt Noonan&lt;/a&gt; , &lt;a href=&quot;https://pron.github.io/&quot;&gt;Ron Pressler&lt;/a&gt; , Josh Lieber, and Edwin Brady for feedback.&lt;/em&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 10 Aug 2018 19:19:24 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<og:title>1/0 = 0 • Hillel Wayne</og:title>
<og:description>Have a tweet: I have no idea if Pony is making the right choice here, I don’t know Pony, and I don’t have any interest in learning Pony. But this tweet raised my hackles for two reasons: It’s pretty smug. I have very strong opinions about programming, but one rule I try to follow is do not mock other programmers.1 Programming is too big and I’m too small to understand everything.</og:description>
<og:url>https://www.hillelwayne.com/post/divide-by-zero/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hillelwayne.com/post/divide-by-zero/</dc:identifier>
</item>
<item>
<title>You Cannot Serve Two Masters: The Harms of Dual Affiliation</title>
<link>http://www.argmin.net/2018/08/09/co-employment/</link>
<guid isPermaLink="true" >http://www.argmin.net/2018/08/09/co-employment/</guid>
<description>&lt;p&gt;Facebook would like to have computer science faculty in AI committed to work 80% of their time in industrial jobs and 20% of their time at their university. They call this scheme “&lt;a href=&quot;https://newsroom.fb.com/news/2018/07/facebook-ai-research-expands/&quot;&gt;co-employment&lt;/a&gt;” or “&lt;a href=&quot;https://www.facebook.com/schrep/posts/10156638732909443&quot;&gt;dual&lt;/a&gt; &lt;a href=&quot;https://www.businessinsider.com/facebook-yann-lecun-dual-affiliation-model-ai-experts-2018-8&quot;&gt;affiliation&lt;/a&gt;.” This model assumes people can slice their time and attention like a computer, but people can’t do this. Universities and companies are communities, each with their particular missions and values. The values of these communities are often at odds, and researchers must choose where their main commitment lies. By committing researchers to a particular company’s interests, this new model of employment will harm our colleagues, our discipline, and everyone’s future. Like many harms, it comes with benefits for some. But the harm in this proposal outweighs the benefits. If industry wants to support and grow academic computer science, there are much better ways to achieve this.&lt;/p&gt;&lt;p&gt;The proposal will harm our discipline, because it will distract established talent from the special roles of academics: curiosity driven research. Academic scholarship has an excellent record of pursuing ideas into places that are exciting and productive, even if they don’t result in immediate, tangible benefits and especially if they ruffle the feathers of established, powerful institutions. You can’t do that if 80% of your time is spent not annoying a big company. Though big companies belabor promises of complete intellectual freedom to faculty, that can’t and won’t happen because the purpose of companies is to make money for shareholders.&lt;/p&gt;
&lt;p&gt;The proposal harms our students directly. Our faculty at their best secure everyone’s future by teaching talented students how to understand the challenges facing the broader world. Such mentorship is enriched by the courage, independence, security, and trained judgement of senior scholars to guide students’ perspectives on what is worth doing, what is likely irrelevant, and what is wrong. Engaging with a student body requires an all-in commitment, both in teaching and advising roles. Faculty primarily working elsewhere means cancelled classes. Faculty wedded to a company means advice that’s colored by the interest of the company.&lt;/p&gt;
&lt;p&gt;The proposal harms our future because it will stifle innovation. University researchers have a great historical record of disruptive entrepreneurism — for example, Google dates back to a paper from the Stanford digital library project. Smooth transitions from academic research to industrial practice are widely encouraged: most universities allow faculty to consult at 20% time, do year-long sabbaticals in industry, or take leave to start companies in order to promote such transitions. But there’s a big difference between an industrial leave and a long-term commitment. You can’t do disruptive entrepreneurism if 80% of what you do is owned by a big company. Part of the point of being a big company is to control your environment by crushing, containing, or co-opting inconvenient innovations. Faculty who sign on are subject to a huge gravitational force and are &lt;a href=&quot;https://newsroom.fb.com/news/2017/12/hard-questions-is-spending-time-on-social-media-bad-for-us/&quot;&gt;hard pressed not to annoy the big company they work for&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like many really dangerous bargains, the harms are diffuse, and the benefits are focused. One kind of benefit is for faculty who sign on: in addition to the higher industrial salaries, working at a big company provides a chance to lead a team of research engineers to execute large-scale projects that may be used by millions. But another, more alarming, benefit is for big companies: all those potentially disruptive or potentially annoying ideas are now owned or controlled by the big company. Perhaps that’s &lt;del&gt;the point of&lt;/del&gt; why management supports the proposal.&lt;/p&gt;
&lt;p&gt;If industry really wants to help scale and advance computer science research, it’s easy to do. Do what many companies are already doing, but do much more of it. Give fellowships to graduate students and scholarships to undergraduate students. Employ students as interns. Pay for named chairs and new buildings. Give lots of faculty small amounts of research money. Make and publish open datasets. Give us easy access to industrial scale computing resources. But don’t raid our faculty and tell us it’s good for us.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We have made a small edit to clear up a misunderstanding raised by a colleague. We have noted this change with strikethrough. Though comments are closed, you can follow the discussion on &lt;a href=&quot;https://twitter.com/beenwrekt/status/1027915117076336640&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://www.reddit.com/r/MachineLearning/comments/963pek/r_you_cannot_serve_two_masters_the_harms_of_dual/&quot;&gt;Reddit&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=17734877&quot;&gt;Hacker News&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 10 Aug 2018 16:45:44 +0000</pubDate>
<dc:creator>stochastician</dc:creator>
<og:type>article</og:type>
<og:title>You Cannot Serve Two Masters: The Harms of Dual Affiliation</og:title>
<og:description>Musings on systems, information, learning, and optimization.</og:description>
<og:url>http://benjamin-recht.github.io/2018/08/09/co-employment/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.argmin.net/2018/08/09/co-employment/</dc:identifier>
</item>
<item>
<title>Show HN: Ultralight – Lightweight, Pure-GPU HTML UI Renderer for C++</title>
<link>https://ultralig.ht</link>
<guid isPermaLink="true" >https://ultralig.ht</guid>
<description>&lt;div readability=&quot;34&quot;&gt;
&lt;h3 class=&quot;bold primary-color launchaco-builder-hoverable&quot;&gt;Ultra-light&lt;/h3&gt;
&lt;p class=&quot;paragraph secondary-color launchaco-builder-hoverable&quot;&gt;Only 8MB compressed, low memory usage, we've stripped WebKit to the bare essentials.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;35&quot;&gt;&lt;em class=&quot;icon mobile-center-icon secondary-bg launchaco-builder-hoverable&quot;/&gt;
&lt;h3 class=&quot;bold primary-color launchaco-builder-hoverable&quot;&gt;Ultra-fast&lt;/h3&gt;
&lt;p class=&quot;paragraph secondary-color launchaco-builder-hoverable&quot;&gt;GPU-Accelerated, drivers for Direct3D, Metal, and OpenGL. Optimized for games.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;35&quot;&gt;&lt;em class=&quot;icon mobile-center-icon secondary-bg launchaco-builder-hoverable&quot;/&gt;
&lt;h3 class=&quot;bold primary-color launchaco-builder-hoverable&quot;&gt;Cross-platform&lt;/h3&gt;
&lt;p class=&quot;paragraph secondary-color launchaco-builder-hoverable&quot;&gt;Write once, deploy to multiple platforms. Windows, macOS, and coming soon to Linux.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 10 Aug 2018 14:28:20 +0000</pubDate>
<dc:creator>adamjs</dc:creator>
<og:image></og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://ultralig.ht/</dc:identifier>
</item>
<item>
<title>Google Boots Open-Source Anti-Censorship Tool &quot;Ahoy&quot; from Chrome Store</title>
<link>https://torrentfreak.com/google-boots-open-source-anti-censorship-tool-from-chrome-store-180810/</link>
<guid isPermaLink="true" >https://torrentfreak.com/google-boots-open-source-anti-censorship-tool-from-chrome-store-180810/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://torrentfreak.com/images/censored.jpg&quot;&gt;&lt;img src=&quot;https://torrentfreak.com/images/censored.jpg&quot; alt=&quot;&quot; width=&quot;199&quot; height=&quot;173&quot; class=&quot;alignright size-full wp-image-35000&quot;/&gt;&lt;/a&gt;Last December, TF reported on &lt;a href=&quot;https://sitesbloqueados.pt/&quot;&gt;SitesBloqueados&lt;/a&gt; (Blocked Sites) a web portal run by Revolução dos Bytes (Bytes’ Revolution), a group of anti-censorship activists in Portugal.&lt;/p&gt;
&lt;p&gt;Internet censorship is common in the country, with more than 1,700 sites banned from regular Internet access for reasons ranging from copyright to gambling. The process does not require intervention from the courts so Revolução dos Bytes decided to keep an eye on things with its Ahoy! Chrome and Firefox extension.&lt;/p&gt;
&lt;p&gt;“Ahoy! basically bypasses any traffic to a blocked site through our own proxies, allowing the users to navigate in a free, uncensored internet,” team member Henrique Mouta &lt;a href=&quot;https://torrentfreak.com/massive-site-blocking-measures-countered-by-100k-browser-addon-users-171231/&quot;&gt;previously told TF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not only is Ahoy! able to unblock sites, it can also detect newly blocked domains and feed information back, so that its unblocking abilities are always up to date.&lt;/p&gt;
&lt;p&gt;Things had been going well. After servicing 100,000 users last December, Ahoy! grew to almost 185,000 users this year. However, progress and indeed the project itself is now under threat after arbitrary action by Google.&lt;/p&gt;
&lt;p&gt;“Google decided to remove us from Chrome’s Web Store without any justification”, Henrique informs TF.&lt;/p&gt;
&lt;p&gt;“We always make sure our code is high quality, secure and 100% free (as in beer and as in freedom). All the source code is open source. And we’re pretty sure we never broke any of the Google’s marketplace rules.”&lt;/p&gt;
&lt;center&gt;&lt;strong&gt;Users being to plumment after Google takedown&lt;/strong&gt;&lt;/center&gt;
&lt;center&gt;&lt;a href=&quot;https://torrentfreak.com/images/u0uiqvk4-e1533885511495.bmp&quot;&gt;&lt;img src=&quot;https://torrentfreak.com/images/u0uiqvk4-e1533885511495.bmp&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;135&quot; class=&quot;aligncenter size-full wp-image-159711&quot;/&gt;&lt;/a&gt;&lt;/center&gt;
&lt;p&gt;Henrique says he’s tried to reach out to Google but finding someone to help has proven impossible. Even re-submitting Ahoy! to Google from scratch hasn’t helped the situation.&lt;/p&gt;
&lt;p&gt;“I tried and resubmitted the plugin but it was refused after a few hours and without any justification,” Henrique says.&lt;/p&gt;
&lt;p&gt;“Google never reached us or notified us about the removal from Chrome Web Store. We never got a single email justifying what happened, why have we been removed from the store, or/and what are we breaching and how can we fix it.”&lt;/p&gt;
&lt;p&gt;TorrentFreak reached out to Google asking why this anti-censorship tool has been removed from its Chrome store. Despite multiple requests, the search giant failed to respond to us or the Ahoy! team.&lt;/p&gt;
&lt;p&gt;The negative effect on the project following removal by Google has been swift. Before the takedown, Ahoy! had around 185,000 users with around 500 installations per day. That progress has now been reversed.&lt;/p&gt;
&lt;p&gt;“Right now, we have 174k active users on Chrome, quickly dropping (around 500 each day). We are being contacted every day by our users asking where they can now download the Chrome version, and asking what happened. I can tell you that we’ve noticed a web traffic drop on our API of about ~25%,” Henrique says.&lt;/p&gt;
&lt;p&gt;Whatever problem Google has with the Chrome version of Ahoy!, the same cannot be said of its Firefox variant. The extension is &lt;a href=&quot;https://addons.mozilla.org/pt-PT/firefox/addon/ahoy/?src=recommended&quot;&gt;living happily&lt;/a&gt; on that platform and no ToS breach has been advised.&lt;/p&gt;
&lt;p&gt;That seems to suggest the team has done little wrong but with Google refusing to provide an explanation, they have no chance of fixing an issue, if one exists.&lt;/p&gt;
&lt;p&gt;“The source code is 100% &lt;a href=&quot;https://github.com/revolucaodosbytes/ahoy-chrome&quot;&gt;open source&lt;/a&gt;, so it’s easy to see that we’re not doing anything sketchy, we really care about our users’ privacy and security. If we’re doing something wrong, we don’t know what,” Henrique complains.&lt;/p&gt;
&lt;p&gt;The issue is critical, not least since 98% of Ahoy! users access it via Chrome. So, until Google provides some kind of explanation, Chrome users will have to install the extension manually via a &lt;a href=&quot;https://download.ahoy.pro/&quot;&gt;new site&lt;/a&gt; set up for the purpose.&lt;/p&gt;
&lt;p&gt;“We have many users asking what happened and how can they download this extension [from the Chrome Store] and I have no answers for them. We’re losing our user base every day, and if we don’t find a solution our project will probably die,” Henrique concludes.&lt;/p&gt;
</description>
<pubDate>Fri, 10 Aug 2018 14:09:49 +0000</pubDate>
<dc:creator>davidgerard</dc:creator>
<og:type>article</og:type>
<og:title>Google Boots Open Source Anti-Censorship Tool From Chrome Store - TorrentFreak</og:title>
<og:description>A browser extension that acted as an anti-censorship tool for 185,000 people has been kicked out of the Chrome store by Google. The open source Ahoy! tool facilitated access to more than 1,700 blocked sites but is now under threat. Despite several requests, Google has provided no reason for its decision.</og:description>
<og:url>https://torrentfreak.com/google-boots-open-source-anti-censorship-tool-from-chrome-store-180810/</og:url>
<og:image>https://torrentfreak.com/images/censorship3.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://torrentfreak.com/google-boots-open-source-anti-censorship-tool-from-chrome-store-180810/</dc:identifier>
</item>
<item>
<title>Ending support for Dropbox syncing to drives with certain uncommon file systems</title>
<link>https://www.dropboxforum.com/t5/Syncing-and-uploads/Linux-Dropbox-client-warn-me-that-it-ll-stop-syncing-in-Nov-why/m-p/290065/highlight/true#M42255</link>
<guid isPermaLink="true" >https://www.dropboxforum.com/t5/Syncing-and-uploads/Linux-Dropbox-client-warn-me-that-it-ll-stop-syncing-in-Nov-why/m-p/290065/highlight/true#M42255</guid>
<description>&lt;div class=&quot;lia-message-body-content&quot; readability=&quot;66.761194029851&quot;&gt;
&lt;p&gt;I'm sorry, but this is NOT acceptable! Is Dropbox trying to get rid of the users from Linux community completely? There have been many bad decisions in the past, and this just top of the iceberg...&lt;/p&gt;&lt;p&gt;Why the f*ck only EXT4 is suddenly supported on Linux? Just because of extended attributes? That's a lot of horse BS:&lt;br/&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_file_attributes#Linux&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Extended_file_attributes#Linux&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&quot;In &lt;a title=&quot;Linux&quot; href=&quot;https://en.wikipedia.org/wiki/Linux&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Linux&lt;/a&gt;, the &lt;a title=&quot;Ext2&quot; href=&quot;https://en.wikipedia.org/wiki/Ext2&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;ext2&lt;/a&gt;, &lt;a title=&quot;Ext3&quot; href=&quot;https://en.wikipedia.org/wiki/Ext3&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;ext3&lt;/a&gt;, &lt;a title=&quot;Ext4&quot; href=&quot;https://en.wikipedia.org/wiki/Ext4&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;ext4&lt;/a&gt;, &lt;a title=&quot;JFS (file system)&quot; href=&quot;https://en.wikipedia.org/wiki/JFS_(file_system)&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;JFS&lt;/a&gt;, &lt;a title=&quot;Squashfs&quot; href=&quot;https://en.wikipedia.org/wiki/Squashfs&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Squashfs&lt;/a&gt;, &lt;a title=&quot;YAFFS&quot; href=&quot;https://en.wikipedia.org/wiki/YAFFS&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Yaffs2&lt;/a&gt;, &lt;a title=&quot;ReiserFS&quot; href=&quot;https://en.wikipedia.org/wiki/ReiserFS&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;ReiserFS&lt;/a&gt;, &lt;a title=&quot;Reiser4&quot; href=&quot;https://en.wikipedia.org/wiki/Reiser4&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Reiser4&lt;/a&gt;, &lt;a title=&quot;XFS&quot; href=&quot;https://en.wikipedia.org/wiki/XFS&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;XFS&lt;/a&gt;, &lt;a title=&quot;Btrfs&quot; href=&quot;https://en.wikipedia.org/wiki/Btrfs&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Btrfs&lt;/a&gt;, &lt;a title=&quot;OrangeFS&quot; href=&quot;https://en.wikipedia.org/wiki/OrangeFS&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;OrangeFS&lt;/a&gt;, &lt;a title=&quot;Lustre (file system)&quot; href=&quot;https://en.wikipedia.org/wiki/Lustre_(file_system)&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Lustre&lt;/a&gt;, &lt;a title=&quot;OCFS2&quot; href=&quot;https://en.wikipedia.org/wiki/OCFS2&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;OCFS2 1.6&lt;/a&gt; and &lt;a title=&quot;F2FS&quot; href=&quot;https://en.wikipedia.org/wiki/F2FS&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;F2FS&lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_file_attributes#cite_note-8&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;[8]&lt;/a&gt; filesystems support extended attributes (abbreviated &lt;em&gt;xattr&lt;/em&gt;) when enabled in the kernel configuration&quot;&lt;/p&gt;
&lt;p&gt;Yes, I'm running LUKS encryption on top of my BTRFS partition, where I have my Dropbox folder. And I still don't see a valid and a proper reason why this configuration shouldn't work.&lt;/p&gt;&lt;p&gt;I'm definitely not gonna re-format my whole Linux just because of Dropbox - there are reasons why I'm on BTRFS. I'd like to hear some proper engineering explanation why suddenly xattr is required now and why only ext4 is supported. Because I really don't think there's any. This just seems like a lot of product/marketing  crap. There are reasons why VFS exists in Linux...&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_file_system&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://en.wikipedia.org/wiki/Virtual_file_system&lt;/a&gt;&lt;/p&gt;&lt;p&gt;From the xattr(7) man page:&lt;/p&gt;

&lt;pre&gt;
       In the Btrfs, XFS, and Reiserfs filesystem implementations, there is
       no practical limit on the number of extended attributes associated
       with a file, and the algorithms used to store extended attribute
       information on disk are scalable. 
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 10 Aug 2018 13:14:09 +0000</pubDate>
<dc:creator>ronjouch</dc:creator>
<og:image>https://mxpez29397.i.lithium.com/t5/image/serverpage/image-id/3899iC0B9B989DD9BB378</og:image>
<og:type>article</og:type>
<og:url>https://www.dropboxforum.com/t5/Syncing-and-uploads/Linux-Dropbox-client-warn-me-that-it-ll-stop-syncing-in-Nov-why/m-p/290065#M42255</og:url>
<og:description>Hi everyone, on Nov. 7, 2018, we’re ending support for Dropbox syncing to drives with certain uncommon file systems. The supported file systems are NTFS for Windows, HFS+ or APFS for Mac, and Ext4 for Linux.   We’ve updated our desktop requirements accordingly here.   A supported file system is requ...</og:description>
<og:title>Re: Desktop app notification: Move dropbox location dropbox stops synchronizing in November</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.dropboxforum.com/t5/Syncing-and-uploads/Linux-Dropbox-client-warn-me-that-it-ll-stop-syncing-in-Nov-why/m-p/290065/highlight/true</dc:identifier>
</item>
<item>
<title>Show HN: Curl for GraphQL with autocomplete, subscriptions and GraphiQL</title>
<link>https://github.com/hasura/graphqurl</link>
<guid isPermaLink="true" >https://github.com/hasura/graphqurl</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;Made by the team at &lt;a href=&quot;https://hasura.io&quot; rel=&quot;nofollow&quot;&gt;hasura.io&lt;/a&gt;, &lt;code&gt;graphqurl&lt;/code&gt; is a curl like CLI for GraphQL:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CLI for making GraphQL queries with autocomplete&lt;/li&gt;
&lt;li&gt;Run GraphiQL locally against any endpoint&lt;/li&gt;
&lt;li&gt;Use as a library with nodejs or from the browser&lt;/li&gt;
&lt;li&gt;Supports subscriptions&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://oclif.io&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/fd9484ad8bb70e8f1c0f1d9d47bec2aaf934c81f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636c692d6f636c69662d627269676874677265656e2e737667&quot; alt=&quot;oclif&quot; data-canonical-src=&quot;https://img.shields.io/badge/cli-oclif-brightgreen.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://npmjs.org/package/graphqurl&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/6657edbeab261009d0676c25d757265872cfd0da/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f67726170687175726c2e737667&quot; alt=&quot;Version&quot; data-canonical-src=&quot;https://img.shields.io/npm/v/graphqurl.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://circleci.com/gh/hasura/graphqurl/tree/master&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/b98a853d3a283074f10b11de6d3f6804715f38ee/68747470733a2f2f636972636c6563692e636f6d2f67682f6861737572612f67726170687175726c2f747265652f6d61737465722e7376673f7374796c653d736869656c64&quot; alt=&quot;CircleCI&quot; data-canonical-src=&quot;https://circleci.com/gh/hasura/graphqurl/tree/master.svg?style=shield&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/hasura-bot/graphqurl/branch/master&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/05332ada3c1a5b9f6b2a0824fddded8222fa2b8e/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6861737572612f67726170687175726c3f6272616e63683d6d6173746572267376673d74727565&quot; alt=&quot;Appveyor CI&quot; data-canonical-src=&quot;https://ci.appveyor.com/api/projects/status/github/hasura/graphqurl?branch=master&amp;amp;svg=true&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://npmjs.org/package/graphqurl&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ae21617bbbde56eebe6ff497a4b020366370c51e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64772f67726170687175726c2e737667&quot; alt=&quot;Downloads/week&quot; data-canonical-src=&quot;https://img.shields.io/npm/dw/graphqurl.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/hasura/graphqurl/blob/master/LICENSE.md&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5db8baf139bd90ff1619e5afce2c2912888b244f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f67726170687175726c2e737667&quot; alt=&quot;License&quot; data-canonical-src=&quot;https://img.shields.io/npm/l/graphqurl.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/hasura/graphqurl/blob/master/assets/subscription.gif&quot;&gt;&lt;img src=&quot;https://github.com/hasura/graphqurl/raw/master/assets/subscription.gif&quot; alt=&quot;Graphqurl Demo&quot;/&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/hasura/graphqurl/blob/master/assets/graphiql.gif&quot;&gt;&lt;img src=&quot;https://github.com/hasura/graphqurl/raw/master/assets/graphiql.gif&quot; alt=&quot;GraphiQL Demo&quot;/&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/hasura/graphqurl/blob/master/assets/bash_trigger.gif&quot;&gt;&lt;img src=&quot;https://github.com/hasura/graphqurl/raw/master/assets/bash_trigger.gif&quot; alt=&quot;Subscriptions triggering bash&quot;/&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;h3&gt;CLI&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
npm install -g graphqurl
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Node Library&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
npm install --save graphqurl
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;h3&gt;CLI&lt;/h3&gt;
&lt;h4&gt;Query&lt;/h4&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
gq https://my-graphql-endpoint/graphql \
     -H &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Authorization: token &amp;lt;token&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; \
     -q &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;query { table { column } }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Auto-complete&lt;/h4&gt;
&lt;p&gt;GraphQURL can auto-complete queries using schema introspection. Execute the command without providing a query string:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ gq &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;endpoint&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; [-H &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;header:value&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;]
Enter the query, use TAB to auto-complete, Ctrl+Q to execute, Ctrl+C to cancel
gql&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use &lt;code&gt;TAB&lt;/code&gt; to trigger auto-complete. &lt;code&gt;Ctrl+C&lt;/code&gt; to cancel the input and &lt;code&gt;Ctrl+Q&lt;/code&gt;/&lt;code&gt;Enter&lt;/code&gt; to execute the query.&lt;/p&gt;
&lt;h4&gt;GraphiQL&lt;/h4&gt;
&lt;p&gt;Open GraphiQL with a given endpoint:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
gq &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;endpoint&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; -i
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a custom GraphiQL where you can specify request headers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Mutation&lt;/h4&gt;
&lt;p&gt;Mutations with variables can be executed by providing the variables with &lt;code&gt;-v&lt;/code&gt; flag.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
gq &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;endpoint&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; \
   -v &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;name=hasura&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; \
   -q &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;mutation ($name: String) { table (objects: [{ name: $name }]) }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Subscription&lt;/h4&gt;
&lt;p&gt;Subscriptions can be executed and the response is streamed on to stdout.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
gq &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;endpoint&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; \
   -q &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;subscription { table { column } }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Command&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
$ gq ENDPOINT [-q QUERY]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Args&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ENDPOINT&lt;/code&gt;: graphql endpoint (can be also set as &lt;code&gt;GRAPHQURL_ENDPOINT&lt;/code&gt; env var)&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Options&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;-q, --query=query&lt;/code&gt;: graphql query to exxecute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-H, --header=&quot;key:value&quot;&lt;/code&gt;: request header&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v, --variable=&quot;key=value&quot;&lt;/code&gt;: variables used in the query&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n, --name=name&lt;/code&gt;: name of the graphql definition to execute, use only if there are multiple definitions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--queryFile=/path/to/queryfile&lt;/code&gt;: file to read the query from&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--variablesFile=/path/to/variablefile&lt;/code&gt;: file to read the query variables from&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i, --graphiql&lt;/code&gt;: open graphiql with the given endpoint, headers, query and variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p, --graphiqlPort=graphiqlPort&lt;/code&gt;: [default: 4500] port to use for graphiql&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a, --graphiqlAddress=graphiqlAddress&lt;/code&gt;: [default: localhost] address to use for graphiql&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l, --singleLine&lt;/code&gt;: show output in a single line, do not prettify&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--version&lt;/code&gt;: show CLI version&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-h, --help&lt;/code&gt;: show CLI help&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Node Library&lt;/h3&gt;
&lt;h4&gt;Using callbacks:&lt;/h4&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;pl-c1&quot;&gt;query&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;graphqurl&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;successCallback&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;response&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;queryType&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;parsedQuery&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (queryType &lt;span class=&quot;pl-k&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;subscription&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; handle subscription response&lt;/span&gt;
  } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; handle query/mutation response&lt;/span&gt;
  }
}

&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;errorCallback&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;queryType&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;parsedQuery&lt;/span&gt;) {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;error&lt;/span&gt;(error);
}

&lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(
  {
    query&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;query { table { column } }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    endpoint&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;https://my-graphql-endpoint/graphql&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    headers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;x-access-key&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;mysecretxxx&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    }
  },
  successCalllback,
  errorCallback
);
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Using Promises:&lt;/h4&gt;
&lt;p&gt;For queries and mutations,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;pl-c1&quot;&gt;query&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;graphqurl&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(
  {
    query&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;query { table { column } }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    endpoint&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;https://my-graphql-endpoint/graphql&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    headers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;x-access-key&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;mysecretxxx&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    }
  }
).&lt;span class=&quot;pl-c1&quot;&gt;then&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;response&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(response))
 .&lt;span class=&quot;pl-c1&quot;&gt;catch&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;error&lt;/span&gt;(error));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For subscriptions,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;pl-c1&quot;&gt;query&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;graphqurl&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(
  {
    query&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;subscription { table { column } }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    endpoint&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;https://my-graphql-endpoint/graphql&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    headers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;x-access-key&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;mysecretxxx&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    }
  }
).&lt;span class=&quot;pl-c1&quot;&gt;then&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;observable&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-smi&quot;&gt;observable&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;subscribe&lt;/span&gt;(
    (&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Event received: &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;);
      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; handle event&lt;/span&gt;
    },
    (&lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Error: &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, error);
      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; handle error&lt;/span&gt;
    }
  )
})
 .&lt;span class=&quot;pl-c1&quot;&gt;catch&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;error&lt;/span&gt;(error));
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Subscriptions are not supported in browsers yet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;h4&gt;query(options, successCallback, errorCallback)&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;options&lt;/strong&gt;: [Object, &lt;em&gt;required&lt;/em&gt;] GraphQL query options with the following properties:
&lt;ul&gt;&lt;li&gt;endpoint: [String, &lt;em&gt;required&lt;/em&gt;] GraphQL endpoint&lt;/li&gt;
&lt;li&gt;query: [String, &lt;em&gt;required&lt;/em&gt;] GraphQL query string&lt;/li&gt;
&lt;li&gt;headers: [Object] Request headers, defaults to &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;variables: [Object] GraphQL query variables, defaults to '{}'&lt;/li&gt;
&lt;li&gt;name: [String] Operation name. Used only if the &lt;code&gt;query&lt;/code&gt; string contains multiple operations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;successCallback&lt;/strong&gt;: [Function] Success callback which is called after a successful response. It is called with the following parameters:
&lt;ul&gt;&lt;li&gt;response: The response of your query&lt;/li&gt;
&lt;li&gt;queryType: The type of query you made i.e. one [&lt;code&gt;query&lt;/code&gt;, &lt;code&gt;mutation&lt;/code&gt;, &lt;code&gt;subcription&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;parsedQuery: The query parsed into a GraphQL document&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;errorCallback&lt;/strong&gt;: [Function] Error callback which is called after a the occurance of an error. It is called with the following parameters:
&lt;ul&gt;&lt;li&gt;error: The occured error&lt;/li&gt;
&lt;li&gt;queryType: [String] The type of query you made i.e. one [&lt;code&gt;query&lt;/code&gt;, &lt;code&gt;mutation&lt;/code&gt;, &lt;code&gt;subcription&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;parsedQuery: [Object] The query parsed into a GraphQL document&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Returns&lt;/strong&gt;: [Promise (response) ]If &lt;code&gt;successCallback&lt;/code&gt; and &lt;code&gt;errorCallback&lt;/code&gt; are not provided, this function returns the response wrapped in a promise.
&lt;ul&gt;&lt;li&gt;response: response is a GraphQL compliant JSON object in case of &lt;code&gt;queries&lt;/code&gt; and &lt;code&gt;mutations&lt;/code&gt;. However, if you make a subscription, it returns an observable that you can later subscribe to. Check &lt;a href=&quot;https://github.com/hasura/graphqurl#subscriptions&quot;&gt;this example&lt;/a&gt; to see how to subscribe to observables.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;More Examples&lt;/h2&gt;
&lt;h3&gt;Node Library&lt;/h3&gt;
&lt;h4&gt;Queries&lt;/h4&gt;
&lt;p&gt;Query example with variables&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;pl-c1&quot;&gt;query&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;graphqurl&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(
  {
    query&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;      query ($name: String) {&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;        table(where: { column: $name }) {&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;          id&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;          column&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;      }&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    &lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;,
    endpoint&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;https://my-graphql-endpoint/graphql&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    headers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;x-access-key&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;mysecretxxx&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    },
    variables&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Alice&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
  }
).&lt;span class=&quot;pl-c1&quot;&gt;then&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;response&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(response))
 .&lt;span class=&quot;pl-c1&quot;&gt;catch&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;error&lt;/span&gt;(error));
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Mutations&lt;/h4&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;pl-c1&quot;&gt;query&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;graphqurl&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(
  {
    query&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;      mutation ($id_insert_input: String!, $column_insert_input: String!) {&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;        insert_to_table (&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;          id: $id_insert_input,&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;          column: $column_insert_input&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;        ) {&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;          affected_rows&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;      }&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    &lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;,
    endpoint&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;https://my-graphql-endpoint/graphql&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    headers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;x-access-key&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;mysecretxxx&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    },
    variables&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      id_insert_input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;id_ak23sdfkjk2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
      column_insert_input&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Bob&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
  }
).&lt;span class=&quot;pl-c1&quot;&gt;then&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;response&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(response))
 .&lt;span class=&quot;pl-c1&quot;&gt;catch&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;error&lt;/span&gt;(error));
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Subscriptions&lt;/h4&gt;
&lt;p&gt;Using promises,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;pl-c1&quot;&gt;query&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;graphqurl&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;eventCallback&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Event received:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;);
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; handle event&lt;/span&gt;
};

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;errorCallback&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Error:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, error)
};

&lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(
  {
    query&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;subscription { table { column } }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    endpoint&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;https://my-graphql-endpoint/graphql&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    headers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Authorization&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Bearer Andkw23kj=Kjsdk2902ksdjfkd&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
  },
).&lt;span class=&quot;pl-c1&quot;&gt;then&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;observable&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-smi&quot;&gt;observable&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;subscribe&lt;/span&gt;(
    (&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Event received&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;);
      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; handle event&lt;/span&gt;
    },
    (&lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Error&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, error);
      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; handle error&lt;/span&gt;
    }
  )
}).&lt;span class=&quot;pl-c1&quot;&gt;catch&lt;/span&gt;(errorCallback);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets do the above subscription using callbacks,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;pl-c1&quot;&gt;query&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;graphqurl&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;eventCallback&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;) {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Event received:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;event&lt;/span&gt;);
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; handle event&lt;/span&gt;
}

&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;errorCallback&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;error&lt;/span&gt;) {
  &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Error:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, error)
}

&lt;span class=&quot;pl-en&quot;&gt;query&lt;/span&gt;(
  {
    query&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;subscription { table { column } }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    endpoint&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;https://my-graphql-endpoint/graphql&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    headers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Authorization&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Bearer Andkw23kj=Kjsdk2902ksdjfkd&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
  },
  eventCallback,
  errorCallback
);
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;CLI&lt;/h3&gt;
&lt;p&gt;Generic example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
gq \
     https://my-graphql-endpoint/graphql \
     -H &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Authorization: token &amp;lt;token&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; \
     -H &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;X-Another-Header: another-header-value&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; \
     -v &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;variable1=value1&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; \
     -v &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;variable2=value2&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; \
     -q &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;query { table { column } }&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading the query and variables from a file:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
gq \
     https://my-graphql-endpoint/graphql \
     -H &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Authorization: token &amp;lt;token&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; \
     -H &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;X-Another-Header: another-header-value&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; \
     --variableFile=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;./queryVariables.json&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; \
     --queryFile=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;./query.gql&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Executing only a particular named query from a file that contains many queries:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
gq &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;endpoint&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; --queryFile ./queries.gql --name getItems
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;p&gt;Maintained with ♡ by &lt;a href=&quot;https://hasura.io&quot; rel=&quot;nofollow&quot;&gt;Hasura&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 10 Aug 2018 09:39:35 +0000</pubDate>
<dc:creator>wawhal</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/13966722?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>hasura/graphqurl</og:title>
<og:url>https://github.com/hasura/graphqurl</og:url>
<og:description>graphqurl - curl for GraphQL with autocomplete, subscriptions and GraphiQL. Also a JS library</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/hasura/graphqurl</dc:identifier>
</item>
<item>
<title>Bash Infinity: Standard library and boilerplate framework for Bash</title>
<link>https://github.com/niieani/bash-oo-framework</link>
<guid isPermaLink="true" >https://github.com/niieani/bash-oo-framework</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/niieani/bash-oo-framework?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/123fa5e46e0ed5515f98fcb6cef62804261a54d0/68747470733a2f2f6261646765732e6769747465722e696d2f6e696965616e692f626173682d6f6f2d6672616d65776f726b2e737667&quot; alt=&quot;Join the chat at https://gitter.im/niieani/bash-oo-framework&quot; data-canonical-src=&quot;https://badges.gitter.im/niieani/bash-oo-framework.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bash Infinity is a standard library and a boilerplate framework for writing tools using &lt;strong&gt;bash&lt;/strong&gt;. It's modular and lightweight, while managing to implement some concepts from C#, Java or JavaScript into bash. The Infinity Framework is also plug &amp;amp; play: include it at the beginning of your existing script to import any of the individual features such as error handling, and start using other features gradually.&lt;/p&gt;
&lt;p&gt;The aim of Bash Infinity is to maximize readability of bash scripts, minimize the amount of code repeat and create a central repository for well-written, and a well-tested standard library for bash.&lt;/p&gt;
&lt;p&gt;Bash Infinity transforms the often obfuscated &quot;bash syntax&quot; to a cleaner, more modern syntax.&lt;/p&gt;
&lt;p&gt;Disclaimer: Not all of the modules work with earlier versions of bash, as I test with &lt;strong&gt;bash 4&lt;/strong&gt;. However, it should be possible (and relatively easy) to &lt;a href=&quot;https://github.com/niieani/bash-oo-framework#porting-to-bash-3&quot;&gt;port non-working parts&lt;/a&gt; to earlier versions.&lt;/p&gt;

&lt;p&gt;Single-file release and dynamic loading is not available for v2.0 yet. To load the framework locally, &lt;a href=&quot;https://github.com/niieani/bash-oo-framework#how-to-use&quot;&gt;read on&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;automatic error handling with exceptions and visual stack traces (&lt;code&gt;util/exception&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;named parameters in functions (instead of $1, $2...) (&lt;code&gt;util/namedParameters&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;passing arrays and maps as parameters (&lt;code&gt;util/variable&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;try-catch&lt;/strong&gt; implementation (&lt;code&gt;util/tryCatch&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;throwing custom &lt;strong&gt;exceptions&lt;/strong&gt; (&lt;code&gt;util/exception&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;import&lt;/strong&gt; keyword for clever sourcing of scripts à la &lt;em&gt;require-js&lt;/em&gt; (&lt;code&gt;oo-bootstrap&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;handy aliases for &lt;strong&gt;colors&lt;/strong&gt; and &lt;strong&gt;powerline&lt;/strong&gt; characters to increase readability in the output of your scripts (&lt;code&gt;UI/Color&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;well-formatted, colorful &lt;strong&gt;logging&lt;/strong&gt; to &lt;em&gt;stderr&lt;/em&gt; or custom delegate functions (&lt;code&gt;util/log&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unit test&lt;/strong&gt; library (&lt;code&gt;util/test&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;standard library for the type system with plenty of useful functions (&lt;code&gt;util/type&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;operational chains for &lt;strong&gt;functional programming&lt;/strong&gt; in bash (&lt;code&gt;util/type&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type system&lt;/strong&gt; for object-oriented scripting (&lt;code&gt;util/class&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All of the features are modular and it's easy to only import the ones you'd like to use, without importing the rest of the framework. For example, the named parameters or the try-catch modules are self-contained in individual files.&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;import util/exception
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;One of the highlight features is error handling that should work out of the box. If the script generates an error it will break and display a call stack:&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://raw.githubusercontent.com/niieani/bash-oo-framework/master/docs/exception.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niieani/bash-oo-framework/master/docs/exception.png&quot; alt=&quot;example call stack&quot; title=&quot;Example Call Stack&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may also force an error by &lt;code&gt;throw&lt;/code&gt;ing your own Exception:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
e=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The hard disk is not connected properly!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; throw
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's useful for debugging, as you'll also get the call stack if you're not sure where the call is coming from.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exceptions&lt;/strong&gt; combined with &lt;em&gt;try &amp;amp; catch&lt;/em&gt; give you safety without having to run with &lt;strong&gt;-o errexit&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you do something wrong, you'll get a detailed exception backtrace, highlighting the command where it went wrong in the line from the source. The script execution will be halted with the option to continue or break. On the other hand if you expect a part of block to fail, you can wrap it in a &lt;code&gt;try&lt;/code&gt; block, and handle the error inside a &lt;code&gt;catch&lt;/code&gt; block.&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;import util/namedParameters
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In any programing language, it makes sense to use meaningful names for variables for greater readability. In case of Bash, that means avoiding using positional arguments in functions. Instead of using the unhelpful &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; and so on within functions to access the passed in values, you may write:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;testPassingParams&lt;/span&gt;() {

    [string] hello
    [string[4]] anArrayWithFourElements
    l&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;2 [string[]] anotherArrayWithTwo
    [string] anotherSingle
    [reference] table   &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; references only work in bash &amp;gt;=4.3&lt;/span&gt;
    [...rest] anArrayOfVariedSize

    &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$hello&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; correct
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${anArrayWithFourElements[0]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; correct
    &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${anArrayWithFourElements[1]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$3&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; correct
    &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${anArrayWithFourElements[2]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$4&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; correct
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; etc...&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${anotherArrayWithTwo[0]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$6&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; correct
    &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${anotherArrayWithTwo[1]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$7&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; correct
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$anotherSingle&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$8&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; correct
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${table[test]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;works&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    table[inside]&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;adding a new value&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; I'm using * just in this example:&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${anArrayOfVariedSize[*]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${&lt;span class=&quot;pl-k&quot;&gt;*:&lt;/span&gt;10}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; correct
}

fourElements&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;( a1 a2 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;a3 with spaces&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; a4 )
twoElements&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;( b1 b2 )

&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; -A assocArray
assocArray[test]&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;works&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

testPassingParams &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;first&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${fourElements[@]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${twoElements[@]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;single with spaces&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; assocArray &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;and more... &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;even more...&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${assocArray[inside]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;adding a new value&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The system will automatically assign:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;$1&lt;/strong&gt; to &lt;strong&gt;$hello&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$anArrayWithFourElements&lt;/strong&gt; will be an array of params with values from $2 till $5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$anotherArrayWithTwo&lt;/strong&gt; will be an array of params with values from $6 till $7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$8&lt;/strong&gt; to &lt;strong&gt;$anotherSingle&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$table&lt;/strong&gt; will be a reference to the variable whose name was passed in as the 9th parameter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$anArrayOfVariedSize&lt;/strong&gt; will be a bash array containing all the following params (from $10 on)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In other words, not only you can call your parameters by their names (which makes up for a more readable core), you can actually pass arrays easily (and references to variables - this feature needs bash &amp;gt;=4.3 though)! Plus, the mapped variables are all in the local scope. This module is pretty light and works in bash 3 and bash 4 (except for references - bash &amp;gt;=4.3) and if you only want to use it separately from this project, get the file /lib/system/02_named_parameters.sh.&lt;/p&gt;
&lt;p&gt;Note: For lengths between 2-10 there are aliases for arrays, such as &lt;code&gt;[string[4]]&lt;/code&gt;, if you need anything more, you need to use the syntax &lt;code&gt;l=LENGTH [string[]]&lt;/code&gt;, like shown in the above example. Or, make your own aliases :).&lt;/p&gt;

&lt;p&gt;After bootstrapping, you may use &lt;code&gt;import&lt;/code&gt; to load either the library files or your own files. The command will ensure they're only loaded once. You may either use a relative path from the file you're importing, a path relative to the file that first included the framework, or an absolute path. &lt;code&gt;.sh&lt;/code&gt; suffix is optional. You can also load all the files inside of a directory by simply including the path to that directory instead of the file.&lt;/p&gt;

&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
import util/tryCatch
import util/exception &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; needed only for Exception::PrintException&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sample usage:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
try {
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; something...&lt;/span&gt;
    cp &lt;span class=&quot;pl-k&quot;&gt;~&lt;/span&gt;/test &lt;span class=&quot;pl-k&quot;&gt;~&lt;/span&gt;/test2
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; something more...&lt;/span&gt;
} catch {
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The hard disk is not connected properly!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Caught Exception:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;UI.Color.Red&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;$__BACKTRACE_COMMAND__&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;UI.Color.Default&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;File: &lt;span class=&quot;pl-smi&quot;&gt;$__BACKTRACE_SOURCE__&lt;/span&gt;, Line: &lt;span class=&quot;pl-smi&quot;&gt;$__BACKTRACE_LINE__&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# printing a caught exception couldn't be simpler, as it's stored in &quot;${__EXCEPTION__[@]}&quot;&lt;/span&gt;
    Exception::PrintException &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${__EXCEPTION__[@]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If any command fails (i.e. returns anything else than 0) in the &lt;code&gt;try&lt;/code&gt; block, the system will automatically start executing the &lt;code&gt;catch&lt;/code&gt; block. Braces are optional for the &lt;code&gt;try&lt;/code&gt; block, but required for &lt;code&gt;catch&lt;/code&gt; if it's multiline.&lt;/p&gt;
&lt;p&gt;Note: &lt;code&gt;try&lt;/code&gt; is executed in a subshell, therefore you cannot assign any variables inside of it.&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;import util/log
&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; using colors:&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;UI.Color.Blue&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;I'm blue...&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;UI.Color.Default&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; enable basic logging for this file by declaring a namespace&lt;/span&gt;
namespace myApp
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; make the Log method direct everything in the namespace 'myApp' to the log handler called DEBUG&lt;/span&gt;
Log::AddOutput myApp DEBUG

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; now we can write with the DEBUG output set&lt;/span&gt;
Log &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Play me some Jazz, will ya? &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;UI.Powerline.Saxophone&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; redirect error messages to STDERR&lt;/span&gt;
Log::AddOutput error STDERR
subject=error Log &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Something bad happened.&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; reset outputs&lt;/span&gt;
Log::ResetAllOutputsAndFilters

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; You may also hardcode the use for the StdErr output directly:&lt;/span&gt;
Console::WriteStdErr &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;This will be printed to STDERR, no matter what.&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both the colors and the Powerline characters fallback gracefully on systems that don't support them. To see Powerline icons, you'll need to use a powerline-patched font.&lt;/p&gt;
&lt;p&gt;For the list of available colors and emoji's take a look into &lt;a href=&quot;https://github.com/niieani/bash-oo-framework/blob/master/lib/UI/Color.sh&quot;&gt;lib/UI/Color.sh&lt;/a&gt;. Fork and contribute more!&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/niieani/bash-oo-framework#advanced-logging&quot;&gt;Advanced Logging&lt;/a&gt; below to learn more about advanced logging capabilities.&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;import util/variable
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The Variable utility offers lossless dumping of arrays and associative array (referred here to as &lt;code&gt;maps&lt;/code&gt;) declarations by the use of the &lt;code&gt;@get&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Combined with the &lt;code&gt;util/namedParameters&lt;/code&gt; module, you can pass in either as individual parameters.&lt;/p&gt;
&lt;p&gt;A more readable way of specifying the will to pass a variable by it's declaration is to simply refer to the variable as &lt;code&gt;$var:yourVariableName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In bash &amp;gt;=4.3, which supports references, you may pass by reference. This way any changes done to the variable within the function will affect the variable itself. To pass a variable by reference, use the syntax: &lt;code&gt;$ref:yourVariableName&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
array someArray=( &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;one&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;two&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; )
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; the above is an equivalent of: declare -a someArray=( 'one' 'two' )&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; except this one creates a $var:someArray method handler&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;passingArraysInput&lt;/span&gt;() {
  [array] passedInArray

  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; chained usage, see below for more details:&lt;/span&gt;
  &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:passedInArray &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; \
    { map &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;echo &quot;${index} - $(var: item)&quot;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; } \
    { forEach &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;var: item toUpper&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; }

  &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:passedInArray push &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;will work only for references&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
}

&lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;passing by $var:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# 2 ways of passing a copy of an array (passing by it's definition)&lt;/span&gt;
passingArraysInput &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;@get someArray&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
passingArraysInput &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:someArray

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# no changes yet&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:someArray toJSON

&lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;passing by $ref:&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# in bash &amp;gt;=4.3, which supports references, you may pass by reference&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# this way any changes done to the variable within the function will affect the variable itself&lt;/span&gt;
passingArraysInput &lt;span class=&quot;pl-smi&quot;&gt;$ref&lt;/span&gt;:someArray

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# should show changes&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:someArray toJSON
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;code&gt;import util/type
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The framework offers a standard library for the primitive types, such as string or array manipulations to make common tasks simpler and more readable.&lt;/p&gt;
&lt;p&gt;There are three ways to make use of the standard library.&lt;/p&gt;
&lt;h3&gt;1. Create variables by their handle-creating declaration&lt;/h3&gt;
&lt;p&gt;If you create your variables using the oo-framework's handle-creating declarations, you can execute methods of the standard library by referring to your variable as: &lt;code&gt;$var:yourVariable someMethod someParameter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Available handle-creating declarations:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;integer&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Since bash doesn't support boolean variables natively, the boolean variable is a special case that always needs to be declared and modified using the handle-creating declaration.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; create a string someString&lt;/span&gt;
string someString=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;My 123 Joe is 99 Mark&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; saves all matches and their match groups for the said regex:&lt;/span&gt;
array matchGroups=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:someString getMatchGroups &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;([0-9]+) [a-zA-Z]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; lists all matches in group 1:&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:matchGroups every 2 1

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# group 0, match 1&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:someString match &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;([0-9]+) [a-zA-Z]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; 0 1

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; calls the getter - here it prints the value&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:someString
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. Invoke the methods with &lt;code&gt;var:&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If you didn't create your variables with their handles, you can also use the method &lt;code&gt;var:&lt;/code&gt; to access them.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; create a string someString&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; someString=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;My 123 Joe is 99 Mark&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; saves all matches and their match groups for the said regex:&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; -a matchGroups=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;var: someString getMatchGroups &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;([0-9]+) [a-zA-Z]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; lists all matches in group 1:&lt;/span&gt;
var: matchGroups every 2 1

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# group 0, match 1&lt;/span&gt;
var: someString match &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;([0-9]+) [a-zA-Z]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; 0 1

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; calls the getter - here it prints the value&lt;/span&gt;
var: someString
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. Pipe the variable declaration directly to the method&lt;/h3&gt;
&lt;p&gt;Finally, you can also pipe the variable declarations to the methods you wish to invoke.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; create a string someString&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; someString=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;My 123 Joe is 99 Mark&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; saves all matches and their match groups for the said regex:&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; -a matchGroups=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;@get someString &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; string.getMatchGroups &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;([0-9]+) [a-zA-Z]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; lists all matches in group 1:&lt;/span&gt;
@get matchGroups &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; array.every 2 1

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# group 0, match 1&lt;/span&gt;
@get someString &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; string.match &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;([0-9]+) [a-zA-Z]+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; 0 1

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; prints the value&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$someString&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Adding to the Standard Library&lt;/h2&gt;
&lt;p&gt;You can add your own, custom methods to the Standard Library by declaring them like:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;string.makeCool&lt;/span&gt;() {
  @resolve:this &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# this is required is you want to make use of the pipe passing&lt;/span&gt;
  &lt;span class=&quot;pl-k&quot;&gt;local&lt;/span&gt; outValue=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;cool value: &lt;span class=&quot;pl-smi&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  @return outValue
}

string someString=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;nice&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:someString makeCool
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; prints &quot;cool value: nice&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See more info on writing classes below.&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;import util/type
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The type system in Bash Infinity allows you to chain methods together in a similar fashion one might pipe the output from one command to the other, or chain methods in C#, Java or JavaScript (think JQuery's pseudo-monad style).&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;declare&lt;/span&gt; -a someArray=( &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;one&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;two&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; )

var: someArray &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; \
  { map &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;echo &quot;${index} - $(var: item)&quot;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; } \
  { forEach &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;var: item toUpper&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; }

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; above command will result in a definition of an array:&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; ( '0 - ONE' '1 - TWO' )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Methods available in the next chain depend on the return type of the previously executed method.&lt;/p&gt;

&lt;p&gt;It's really simple and straight-forward, like with most modern languages.&lt;/p&gt;
&lt;p&gt;Keywords for definition:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;class:YourName()&lt;/strong&gt; - defining a class&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Keywords to use inside of the class definition:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;method ClassName.FunctionName()&lt;/strong&gt; - Use for defining methods that have access to &lt;em&gt;$this&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public SomeType yourProperty&lt;/strong&gt; - define public properties (works in all types of classes)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;private SomeType _yourProperty&lt;/strong&gt; - as above, but accessible only for internal methods&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$this&lt;/strong&gt; - This variable is available inside the methods, used to refer to the current type&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;this&lt;/strong&gt; - Alias of $var:this, used to invoke methods or get properties of an object&lt;/li&gt;
&lt;li&gt;NOT YET IMPLEMENTED: &lt;strong&gt;extends SomeClass&lt;/strong&gt; - inherit from a base class&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;After a class has been defined, you need to invoke &lt;code&gt;Type::Initialize NameOfYourType&lt;/code&gt; or &lt;code&gt;Type::InitializeStatic NameOfYourStaticType&lt;/code&gt; if you want to make your class a singleton.&lt;/p&gt;
&lt;p&gt;Here's an example that shows how to define your own classes:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
import util/namedParameters util/class

&lt;span class=&quot;pl-en&quot;&gt;class:Human&lt;/span&gt;() {
  public string name
  public integer height
  public array eaten

  &lt;span class=&quot;pl-en&quot;&gt;Human.__getter__&lt;/span&gt;() {
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;I'm a human called &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;this name&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;this height&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt; cm tall.&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }

  &lt;span class=&quot;pl-en&quot;&gt;Human.Example&lt;/span&gt;() {
    [array]     someArray
    [integer]   someNumber
    [...rest]   arrayOfOtherParams

    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Testing &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;var: someArray toString&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;pl-smi&quot;&gt;$someNumber&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Stuff: &lt;span class=&quot;pl-smi&quot;&gt;${arrayOfOtherParams[*]}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; returning the first passed in array&lt;/span&gt;
    @return someArray
  }

  &lt;span class=&quot;pl-en&quot;&gt;Human.Eat&lt;/span&gt;() {
    [string] food

    this eaten push &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$food&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; will return a string with the value:&lt;/span&gt;
    @return:value &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$this&lt;/span&gt; just ate &lt;span class=&quot;pl-smi&quot;&gt;$food&lt;/span&gt;, which is the same as &lt;span class=&quot;pl-smi&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }

  &lt;span class=&quot;pl-en&quot;&gt;Human.WhatDidHeEat&lt;/span&gt;() {
    this eaten toString
  }

  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; this is a static method, hence the :: in definition&lt;/span&gt;
  &lt;span class=&quot;pl-en&quot;&gt;Human::PlaySomeJazz&lt;/span&gt;() {
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;UI.Powerline.Saxophone&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; required to initialize the class&lt;/span&gt;
Type::Initialize Human

&lt;span class=&quot;pl-en&quot;&gt;class:SingletonExample&lt;/span&gt;() {
  private integer YoMamaNumber = 150

  &lt;span class=&quot;pl-en&quot;&gt;SingletonExample.PrintYoMama&lt;/span&gt;() {
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Number is: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;this YoMamaNumber&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; required to initialize the static class&lt;/span&gt;
Type::InitializeStatic SingletonExample
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can use both the &lt;code&gt;Human&lt;/code&gt; and the &lt;code&gt;SingletonExample&lt;/code&gt; classes:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; create an object called 'Mark' of type Human&lt;/span&gt;
Human Mark

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; call the string.= (setter) method&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Mark name = &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Mark&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; call the integer.= (setter) method&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Mark height = 180

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; adds 'corn' to the Mark.eaten array and echoes the output&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Mark Eat &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;corn&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; adds 'blueberries' to the Mark.eaten array and echoes the uppercased output&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Mark &lt;span class=&quot;pl-c1&quot;&gt;:&lt;/span&gt; { Eat &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;blueberries&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; } { toUpper }

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; invoke the getter&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Mark

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; invoke the method on the static instance of SingletonExample&lt;/span&gt;
SingletonExample PrintYoMama
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;code&gt;import util/test
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://raw.githubusercontent.com/niieani/bash-oo-framework/master/docs/unit.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/niieani/bash-oo-framework/master/docs/unit.png&quot; alt=&quot;unit tests&quot; title=&quot;Unit tests for the framework itself&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Similarly to &lt;a href=&quot;https://github.com/sstephenson/bats&quot;&gt;Bats&lt;/a&gt;, you can use the unit test module to test Bash scripts or any UNIX program. Test cases consist of standard shell commands. Like Bats, Infinity Framework uses Bash's errexit (set -e) option when running test cases. Each test is run in a subshell, and is independent from one another. To quote from Bats:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If every command in the test case exits with a 0 status code (success), the test passes. In this way, each line is an assertion of truth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you need to do more advanced testing, or need to be able to run your tests on shells other than bash 4, I'd still recommend Bats.&lt;/p&gt;
&lt;p&gt;Example usage:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
it &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;should make a number and change its value&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
try
    integer aNumber=10
    aNumber = 12
    &lt;span class=&quot;pl-c1&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;$aNumber&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;))&lt;/span&gt;&lt;/span&gt;
expectPass

it &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;should make basic operations on two arrays&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
try
    array Letters
    array Letters2

    &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Letters push &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello Bobby&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Letters push &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello Maria&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Letters contains &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello Bobby&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Letters contains &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello Maria&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Letters2 push &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello Midori,&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;                        Best regards!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Letters2 concatAdd &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Letters

    &lt;span class=&quot;pl-smi&quot;&gt;$var&lt;/span&gt;:Letters2 contains &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hello Bobby&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
expectPass
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can you believe this is bash?! ;-)&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;import util/log
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here's an example of how to use the power of advanced logging provided by the Infinity Framework.&lt;/p&gt;
&lt;p&gt;In every file you are logging from, you may name the logging scope (namespace). If you won't do it, it'll be the filename, minus the extension. It's better to name though, as filenames can conflict. Thanks to scopes, you can specify exactly what and how you want to log.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
namespace myApp

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# ADD OUTPUT OF &quot;myApp&quot; TO DELEGATE STDERR&lt;/span&gt;
Log::AddOutput myApp STDERR

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# LET'S TRY LOGGING SOMETHING:&lt;/span&gt;
Log &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;logging to stderr&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above will simply print &quot;logging to stderr&quot; to STDERR. As you saw we used the logger output called &quot;STDERR&quot;. It is possible to create and register your own loggers:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# LET'S MAKE A CUSTOM LOGGER:&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;myLoggingDelegate&lt;/span&gt;() {
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hurray: &lt;span class=&quot;pl-smi&quot;&gt;$*&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# WE NEED TO REGISTER IT:&lt;/span&gt;
Log::RegisterLogger MYLOGGER myLoggingDelegate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can set it up so that it direct only logs from a specific function to the our custom logger output:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# WE WANT TO DIRECT ALL LOGGING WITHIN FUNCTION myFunction OF myApp TO MYLOGGER&lt;/span&gt;
Log::AddOutput myApp/myFunction MYLOGGER

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# LET'S DECLARE THAT FUNCTION:&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;myFunction&lt;/span&gt;() {
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hey, I am a function!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    Log &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;logging from myFunction&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# AND RUN:&lt;/span&gt;
myFunction
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code should print:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Hey, I am a function!
Hurray: logging from myFunction
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, logging automatically redirected the logger from our function from our previously registered STDERR to our more specifically defined MYLOGGER. If you wish to keep logging to both loggers, you can disable the specificity filter:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
Log::DisableFilter myApp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if we run the function &lt;code&gt;myFunction&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;The output will be:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Hey, I am a function!
Hurray: logging from myFunction
logging from myFunction
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We can be even more specific and redirect messages with specific &lt;em&gt;subjects&lt;/em&gt; to other loggers, or mute them altogether:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;# Assuming we're in the same file, let's reset first&lt;/span&gt;
Log::ResetAllOutputsAndFilters

Log::AddOutput myApp/myFunction MYLOGGER

&lt;span class=&quot;pl-en&quot;&gt;myFunction&lt;/span&gt;() {
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hey, I am a function!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    Log &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;logging from myFunction&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    subject=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;unimportant&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; Log &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;message from myFunction&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And let's change our custom logger a little, to support the subject:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;myLoggingDelegate&lt;/span&gt;() {
    &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Hurray: &lt;span class=&quot;pl-smi&quot;&gt;$subject&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;$*&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when we run &lt;code&gt;myFunction&lt;/code&gt;, we should get:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Hey, I am a function!
Hurray:  logging from myFunction
Hurray: unimportant message from myFunction
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To filter (or redirect) messages with subject &lt;code&gt;unimportant&lt;/code&gt; within &lt;code&gt;myFunction&lt;/code&gt; of &lt;code&gt;myApp&lt;/code&gt;'s file:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
Log::AddOutput myApp/myFunction/unimportant VOID
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To filter any messages with subject &lt;code&gt;unimportant&lt;/code&gt; within &lt;code&gt;myApp&lt;/code&gt;'s file:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
Log::AddOutput myApp/unimportant VOID
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or any messages with subject &lt;code&gt;unimportant&lt;/code&gt; anywhere:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
Log::AddOutput unimportant VOID
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, running &lt;code&gt;myFunction&lt;/code&gt; will print:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Hey, I am a function!
Hurray: logging from myFunction
&lt;/code&gt;
&lt;/pre&gt;

&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Clone or download this repository. You'll only need the &lt;strong&gt;/lib/&lt;/strong&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a new script just outside of that directory and at the top place this:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#!&lt;/span&gt;/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${BASH_SOURCE[0]&lt;span class=&quot;pl-k&quot;&gt;%/*&lt;/span&gt;}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;/lib/oo-bootstrap.sh&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You may of course change the name of the &lt;strong&gt;/lib/&lt;/strong&gt; directory to your liking, just change it in the script too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Out-of-box you only get the import functionality. If you wish to use more features, such as the typing system, you'll need to import those modules as follows:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; load the type system&lt;/span&gt;
import util/log util/exception util/tryCatch util/namedParameters

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; load the standard library for basic types and type the system&lt;/span&gt;
import util/class
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To import the unit test library you'll need to &lt;code&gt;import lib/types/util/test&lt;/code&gt;. The first error inside of the test will make the whole test fail.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When using &lt;code&gt;util/exception&lt;/code&gt; or &lt;code&gt;util/tryCatch&lt;/code&gt; don't use &lt;code&gt;set -o errexit&lt;/code&gt; or &lt;code&gt;set -e&lt;/code&gt; - it's not necessary, because error handling will be done by the framework itself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Feel free to fork, suggest changes or new modules and file a pull request. The two features that I'd love to add are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;unit tests for all important methods&lt;/li&gt;
&lt;li&gt;port to bash 3 (preferably a dynamic port that imports the right file for the right version)&lt;/li&gt;
&lt;li&gt;a web generator for a single file version of the boilerplate (with an option to select modules of your choice)&lt;/li&gt;
&lt;li&gt;more functions for the standard library for primitive types (arrays, maps, strings, integers)&lt;/li&gt;
&lt;li&gt;useful standard classes are very welcome too&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main challenge in porting to &lt;strong&gt;bash 3&lt;/strong&gt; lays with creating a polyfill for associative arrays (probably by using every other index for the keys in an array), which are used by the type system. The other challenge would be to remove the global declarations (&lt;code&gt;declare -g&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If a function's been adapted or copied from the web or any other libraries out there, I always mention it in a comment within the code.&lt;/p&gt;
&lt;p&gt;Additionally, in the making of the v1 of Bash Infinity I took some inspiration from object-oriented bash libraries:&lt;/p&gt;
&lt;p&gt;More bash goodness:&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 10 Aug 2018 03:30:07 +0000</pubDate>
<dc:creator>jpatokal</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/563469?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>niieani/bash-oo-framework</og:title>
<og:url>https://github.com/niieani/bash-oo-framework</og:url>
<og:description>bash-oo-framework - Bash Infinity is a modern boilerplate / framework / standard library for bash</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/niieani/bash-oo-framework</dc:identifier>
</item>
<item>
<title>Microsoft threatens to stop hosting Gab unless posts are removed</title>
<link>http://thehill.com/policy/technology/401129-microsoft-threatens-to-boot-gab-over-neo-nazis-hate-speech-posts</link>
<guid isPermaLink="true" >http://thehill.com/policy/technology/401129-microsoft-threatens-to-boot-gab-over-neo-nazis-hate-speech-posts</guid>
<description>&lt;p&gt;A neo-Nazi deleted two posts on Gab, a social media company popular with the alt-right and white supremacists, after Microsoft's cloud computing service threatened to block the platform.&lt;/p&gt;
&lt;p&gt;Gab said in &lt;a href=&quot;https://twitter.com/getongab/status/1027550072932851713&quot;&gt;a tweet&lt;/a&gt; Thursday that Microsoft ordered it to take down a pair of anti-Semitic messages written by Patrick Little, a neo-Nazi who ran for Senate in California. Azure said if Gab did not comply in two days it would suspend its cloud services for the microblogging site, effectively taking it down.&lt;/p&gt;
&lt;p&gt;Little on Thursday afternoon voluntarily &lt;a href=&quot;https://twitter.com/getongab/status/1027604682275995649&quot;&gt;deleted&lt;/a&gt; the posts.&lt;/p&gt;
&lt;p&gt;Little’s posts had advocated for physically harming Jews. In one post, Little said he would livestream himself destroying an unspecified Holocaust memorial in the U.S.&lt;/p&gt;
&lt;p&gt;In a letter to Gab, Microsoft had said that the &quot;Azure Safeguards team received a complaint about malicious activity” on their platform. The company told Gab that it is “responsible for addressing complaints from third parties” for violating Azure’s service terms.&lt;/p&gt;
&lt;p&gt;Microsoft defended its decision in a separate statement.&lt;/p&gt;
&lt;p&gt;&quot;Microsoft received a complaint about specific posts on Gab.ai that advocate ‘ritual death by torture’ and the ‘complete eradication’ of all Jews. After an initial review, we have concluded that this content incites violence, is not protected by the First Amendment, and violates Microsoft Azure’s acceptable use policy,&quot; Microsoft said in a statement to The Hill. &lt;/p&gt;
&lt;p&gt;Gab has been adopted by members of the alt-right and white supremacists who have been barred from other social media platforms. The company though insists its only committed to free speech and does not support any positions or ideologies.&lt;/p&gt;
&lt;p&gt;Microsoft’s action comes as a wave of platforms has begun to crack down on Infowars, a site which has promoted conspiracy theories. Over the past two weeks, Spotify, Apple, Facebook and YouTube have all booted Infowars from parts of their platforms.&lt;/p&gt;
&lt;p&gt;Little and Infowars are different ideologically, but the moves appear to a part of a larger effort to curb harmful speech online.&lt;/p&gt;
&lt;p&gt;Infowars founder Alex Jones, for example, pushed false conspiracy theories that the students in the Parkland, Fla. shooting this year were crisis actors, and claimed that the Sandy Hook Elementary shooting in 2012 was staged.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Updated at 3:52 p.m.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 09 Aug 2018 19:24:48 +0000</pubDate>
<dc:creator>anigbrowl</dc:creator>
<og:type>article</og:type>
<og:title>Neo-Nazi deletes anti-Semitic posts from 'alt-right' Twitter</og:title>
<og:url>http://thehill.com/policy/technology/401129-microsoft-threatens-to-boot-gab-over-neo-nazis-hate-speech-posts</og:url>
<og:description>The social media platform Gab is hosted on Microsoft's cloud computing services.</og:description>
<og:image>http://thehill.com/sites/default/files/microsoft_062018.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://thehill.com/policy/technology/401129-microsoft-threatens-to-boot-gab-over-neo-nazis-hate-speech-posts</dc:identifier>
</item>
<item>
<title>Christopher Domas: Hardware Backdoors in X86 CPUs</title>
<link>https://github.com/xoreaxeaxeax/rosenbridge</link>
<guid isPermaLink="true" >https://github.com/xoreaxeaxeax/rosenbridge</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;h2&gt;project:rosenbridge&lt;/h2&gt;
&lt;p&gt;: hardware backdoors in x86 CPUs&lt;/p&gt;
&lt;p&gt;github.com/xoreaxeaxeax/rosenbridge // domas // @xoreaxeaxeax&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/xoreaxeaxeax/rosenbridge/blob/master/rosenbridge.gif&quot;&gt;&lt;img src=&quot;https://github.com/xoreaxeaxeax/rosenbridge/raw/master/rosenbridge.gif&quot; width=&quot;500&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;project:rosenbridge reveals a hardware backdoor in some desktop, laptop, and embedded x86 processors.&lt;/p&gt;
&lt;p&gt;The backdoor allows ring 3 (userland) code to circumvent processor protections to freely read and write ring 0 (kernel) data. While the backdoor is typically disabled (requiring ring 0 execution to enable it), we have found that it is &lt;em&gt;enabled by default&lt;/em&gt; on some systems.&lt;/p&gt;
&lt;p&gt;This repository contains utilities to check if your processor is affected, close the backdoor if it is present, and the research and tools used to discover and analyze the backdoor.&lt;/p&gt;
&lt;h3&gt;The Backdoor&lt;/h3&gt;
&lt;p&gt;The rosenbridge backdoor is a small, non-x86 core embedded alongside the main x86 core in the CPU. It is enabled by a model-specific-register control bit, and then toggled with a &lt;em&gt;launch-instruction&lt;/em&gt;. The embedded core is then fed commands, wrapped in a specially formatted x86 instruction. The core executes these commands (which we call the 'deeply embedded instruction set'), bypassing all memory protections and privilege checks.&lt;/p&gt;
&lt;p&gt;While the backdoor should require kernel level access to activate, it has been observed to be &lt;em&gt;enabled by default&lt;/em&gt; on some systems, allowing any unprivileged code to modify the kernel.&lt;/p&gt;
&lt;p&gt;The rosenbridge backdoor is entirely distinct from other publicly known coprocessors on x86 CPUs, such as the Management Engine or Platform Security Processor; it is more deeply embedded than any known coprocessor, having access to not only all of the CPU's memory, but its register file and execution pipeline as well.&lt;/p&gt;
&lt;h3&gt;Affected Systems&lt;/h3&gt;
&lt;p&gt;It is thought that only VIA C3 CPUs are affected by this issue. The C-series processors are marketed towards industrial automation, point-of-sale, ATM, and healthcare hardware, as well as a variety of consumer desktop and laptop computers.&lt;/p&gt;
&lt;h3&gt;Looking Forward&lt;/h3&gt;
&lt;p&gt;The scope of this vulnerability is limited; generations of CPUs after the C3 no longer contain this feature.&lt;/p&gt;
&lt;p&gt;This work is released as a case study and thought experiment, illustrating how backdoors might arise in increasingly complex processors, and how researchers and end-users might identify such features. The tools and research offered here provide the starting point for ever-deeper processor vulnerability research.&lt;/p&gt;
&lt;h3&gt;Checking your CPU&lt;/h3&gt;
&lt;p&gt;To check if your CPU is affected:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git clone https://github.com/xoreaxeaxeax/rosenbridge
cd rosenbridge/util
make
sudo modprobe msr
sudo ./bin/check
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The provided utility must be run on baremetal (not in a virtual-machine), and is in an &lt;em&gt;alpha&lt;/em&gt; state. It may crash, panic, or hang systems not containing the backdoor.&lt;/p&gt;
&lt;p&gt;The utilities provided here are designed around a specific processor family and core; unfortunately, the tools will miss the backdoor if it has been even slightly modified from the researched form.&lt;/p&gt;
&lt;h3&gt;Closing the Backdoor&lt;/h3&gt;
&lt;p&gt;Some systems have the backdoor enabled by default, allowing unprivileged code to gain kernel level access without permission. If the steps in 'Checking your CPU' indicate that your CPU is vulnerable, you can install a script to close the backdoor early in the boot process:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cd fix
make
sudo make install
reboot
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that, even with this, an attacker with kernel level access can still re-enable the backdoor. This script is provided as an outline for correcting the issue during the boot process, but will require adaptation for different systems.&lt;/p&gt;
&lt;h3&gt;Tools and Techniques&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/xoreaxeaxeax/sandsifter&quot;&gt;sandsifter&lt;/a&gt; utility is used extensively in this research for uncovering unknown instructions.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;asm&lt;/p&gt;
&lt;p&gt;An assembler for the Deeply Embedded Instruction Set (DEIS). It converts programs written in the custom rosenbridge assembly into x86 instructions, which, when executed following the &lt;em&gt;launch-instruction&lt;/em&gt;, will send the commands to the hidden CPU core.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;esc&lt;/p&gt;
&lt;p&gt;A proof-of-concept of using the rosenbridge backdoor for privilege escalation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fix&lt;/p&gt;
&lt;p&gt;A rough outline for closing the vulnerability on affected systems, to the extent possible through model-specific-register updates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fuzz&lt;/p&gt;
&lt;p&gt;A collection of utilities used to fuzz both the x86 and rosenbridge cores, in order to isolate the unknown &lt;em&gt;launch-instruction&lt;/em&gt; and &lt;em&gt;bridge-instruction&lt;/em&gt;, and resolve the instruction format of the rosenbridge core.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;deis&lt;/p&gt;
&lt;p&gt;The fuzzer used to explore the effects and capabilities of the hidden CPU core.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exit&lt;/p&gt;
&lt;p&gt;It is thought that, on some processors, an exit sequence is needed to switch back to the x86 core at the end of a DEIS sequence. This directory contains the utilities used to search for the exit sequence in early stages of the research, but was abandoned when a processor was found not requiring any such sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;manager&lt;/p&gt;
&lt;p&gt;A collection of python utilities designed to monitor and manage fuzzing tasks distributed across a network of workers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wrap&lt;/p&gt;
&lt;p&gt;A stripped down version of the sandsifter fuzzer, used to identify the bridge-instruction that will send commands from the x86 core to the hidden rosenbridge core.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kern&lt;/p&gt;
&lt;p&gt;A collection of helper utilities used to monitor kernel memory and registers for changes caused by fuzzed DEIS instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lock&lt;/p&gt;
&lt;p&gt;Utilities to lock or unlock the rosenbridge backdoor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proc&lt;/p&gt;
&lt;p&gt;A tool to identify patterns from the fuzzing logs to identify classes of DEIS instruction behaviors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;test&lt;/p&gt;
&lt;p&gt;A tool used early in the research, to attempt to identify the hidden core's architecture by executing known RISC instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;util&lt;/p&gt;
&lt;p&gt;An alpha-state tool to detect whether or not a processor is affected by rosenbridge.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;(TODO: link to whitepaper)&lt;/p&gt;
&lt;p&gt;(TODO: link to slides)&lt;/p&gt;
&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;The details and implications presented in this work are the authors’ inferences and opinions, derived from the research described. The research is performed and provided with the goal of identifying and fixing a perceived security vulnerability on the described CPUs. VIA processors are renowned for their low power usage and excellence in embedded designs; we believe that the functionality described was created in good faith as a useful feature for the embedded market, and was unintentionally left enabled on some early generations of the processor. No malicious intent is implied.&lt;/p&gt;
&lt;h3&gt;Author&lt;/h3&gt;
&lt;p&gt;project:rosenbridge is a research effort from Christopher Domas (&lt;a href=&quot;https://twitter.com/xoreaxeaxeax&quot; rel=&quot;nofollow&quot;&gt;@xoreaxeaxeax&lt;/a&gt;).&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 09 Aug 2018 18:40:09 +0000</pubDate>
<dc:creator>minxomat</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/12904366?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>xoreaxeaxeax/rosenbridge</og:title>
<og:url>https://github.com/xoreaxeaxeax/rosenbridge</og:url>
<og:description>rosenbridge - Hardware backdoors in some x86 CPUs</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/xoreaxeaxeax/rosenbridge</dc:identifier>
</item>
</channel>
</rss>