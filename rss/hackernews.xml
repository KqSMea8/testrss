<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Japan&amp;#039;s Hometown Tax</title>
<link>https://www.kalzumeus.com/2018/10/19/japanese-hometown-tax/</link>
<guid isPermaLink="true" >https://www.kalzumeus.com/2018/10/19/japanese-hometown-tax/</guid>
<description>&lt;p&gt;This is outside of my normal software-focused beat, but I met some folks who were very interested in public policy recently. I found, to my surprise, that I probably understand one innovative Japanese tax policy better than very well-informed people who geek out about tax policy [&lt;a href=&quot;https://www.kalzumeus.com/2018/10/19/japanese-hometown-tax/#footnote-0&quot;&gt;0&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;This post hopefully fixes that bug. (Hat tip to &lt;a href=&quot;http://www.gwern.net/&quot;&gt;gwern&lt;/a&gt; for suggesting I write it up.)&lt;/p&gt;
&lt;h2 id=&quot;two-countries-in-one-border&quot;&gt;Two countries in one border&lt;/h2&gt;
&lt;p&gt;The Japanese employment market has a curious feature: there are regions of Japan with extremely high economic productivity (such as Tokyo, Osaka, and Nagoya, but for the purpose of this issue think “Tokyo” and you won’t be wrong) and regions with low economic productivity (substantially everywhere else). This counsels that a young person born and educated in e.g. Gifu move to Tokyo after graduation to earn a living.&lt;/p&gt;
&lt;p&gt;Many, many do. While Japan’s overall population is declining, Tokyo’s increases by about 100,000 people per year.&lt;/p&gt;
&lt;p&gt;The regions in Japan are not thrilled about this state of affairs for many reasons. Tokyo isn’t just the seat of Japanese commerce; it also houses the government, media, cultural institutions, etc etc. There is a real sense that your children moving to Tokyo causes them to lose connection with their culture and that the rewards from the national enterprise aren’t being allocated fairly. Tokyo, for its perspective, views the regions with the noblesse oblige that you would expect a cosmopolitan center of culture and learning to have with respect to their benighted country bumpkin cousins.&lt;/p&gt;
&lt;p&gt;(If this sounds like it echoes the political economy of, say, two large English-speaking nations recently, well, folks greatly overestimate how different Western nations are from each other.)&lt;/p&gt;
&lt;h2 id=&quot;a-misalignment-in-incentives-for-human-capital-development&quot;&gt;A misalignment in incentives for human capital development&lt;/h2&gt;
&lt;p&gt;Educating children is incredibly expensive. The regions are quite annoyed that they pay to educate their children but that Tokyo reaps all the benefits. This state of affairs has continued for decades.&lt;/p&gt;
&lt;p&gt;But Japan has a policy response for it, and it is sort of beautiful. Called ふるさと納税 (&lt;em&gt;Furusato Nouzei&lt;/em&gt; or, roughly, the Hometown Tax System), it works something like this:&lt;/p&gt;
&lt;p&gt;A substantial portion of Japan’s income-based taxes are residence taxes, which are paid to the city and prefecture (think state) that one resides in, based on one’s income in the previous year. The rate is a flat 10% of taxed income; due to quirks of calculating this which almost certainly aren’t relevant to you, you can estimate this as 8% of what white collar employees think their salary is.&lt;/p&gt;
&lt;p&gt;Furusato Nouzei allows you to donate up to 40% of next year’s residence tax to one or many cities/prefectures of your choice, in return for a 1:1 credit on your tax next year. This is entirely opt-in. Anyone can participate, regardless of where they live.&lt;/p&gt;
&lt;p&gt;In principle, the idea is to donate to one’s hometown. Importantly, one actually has unfettered discretion as to which city/prefecture one donates to. This has some very important implications discussed later.&lt;/p&gt;
&lt;p&gt;Relevantly to your understanding of the incentives here: most Japanese people do not file taxes every year. Income-based taxes are calculated and remitted by employers directly on the behalf of their employees. Participating in the system requires friction which is somewhat above e.g. changing your direct deposit information but far below e.g. filing a tax return.&lt;/p&gt;
&lt;h2 id=&quot;what-was-the-idea-here&quot;&gt;What was the idea here?&lt;/h2&gt;
&lt;p&gt;Tokyo and the regions could have resolved their differences through the democratic process, in which the regions outvote Tokyo and could have altered Japan’s national tax and economic policies to their advantage. Tokyo obviously doesn’t want this, and instead agreed to an opt-in system which allays some of the regions’ concerns.&lt;/p&gt;
&lt;p&gt;To the extent that taxpayers donate to their hometowns, Tokyo no longer freerides on the substantial public expenditures required to raise and educate internal migrants.&lt;/p&gt;
&lt;p&gt;Putting potentially 40% of Tokyo’s residence tax in play is &lt;em&gt;not a small carrot&lt;/em&gt;. Individual residence tax is roughly 45% of the city’s revenue. That works out to roughly &lt;a href=&quot;http://www.metro.tokyo.jp/ENGLISH/ABOUT/FINANCIAL/financial02.htm&quot;&gt;$30 billion a year.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now if you were a negotiator for Tokyo back in ~2006 when this was being debated, you might have thought “Hmm, while this &lt;em&gt;sounds&lt;/em&gt; like it is putting $12 billion a year into play, it’s not actually nearly that bad for us. People have to take affirmative steps to transfer the money to their city of choice, and they have to float the money for most of a year, because of the donate-then-credit mechanism. Uptake on that won’t be that high. Maybe we’ll lose a few tens of millions of dollars; no biggie. Silly country bumpkins; can’t even math.”&lt;/p&gt;
&lt;p&gt;But after the system was created, city governments started getting really creative. And what happened next is by parts beautiful and crazy.&lt;/p&gt;
&lt;h2 id=&quot;incentives-rule-everything-around-me&quot;&gt;Incentives rule everything around me&lt;/h2&gt;
&lt;p&gt;There exists a culture in Japan of reciprocating gifts. While it varies based on where you live, in the areas I’ve lived, the general rule of thumb is 30%: if you give someone $300 cash on the occasion of their wedding, as is customary for gainfully employed people with respect to someone outside their immediate family, they’re socially obligated to find a way to give you $90 of value back. (The mechanisms for doing this could merit their own post; the word is 返礼品. A dictionary translates this as “quid pro quo”, but the sentiment does not match the common English usage of that phrase. This is simply a ritual; to not participate in it would be non-normative.)&lt;/p&gt;
&lt;p&gt;While not formally defined in the legislation for the Furusato Nouzei system, someone at a city government figured that it was just not appropriate to let someone just give ~3% of their salary to the city without receiving a token of appreciation in return. So they sent something back; a can of locally-produced plums, say, to remind you of the tastes of your childhood.&lt;/p&gt;
&lt;p&gt;And this was a beautiful idea! It directly improved the ability of the system to cement relationships between internal migrants and their hometowns, one of the declared goals of the system. It motivated people to fill out paperwork and float the city a bit of money for part of a year, because who doesn’t like free plums. (You might sensibly object that they aren’t free given the time value of money, but prevailing interest rates in Japan are indistinguishable from zero.) And it let cities specialize in marketing this initiative.&lt;/p&gt;
&lt;p&gt;And specialize they did.&lt;/p&gt;
&lt;p&gt;A number of cities in Japan, including my adoptive home town of Ogaki, have made this offer: for a no-cost-to-you donation of $100 or more, the city will send someone out to any grave in the city limits. That person will clean the grave, make an appropriate offering, and send you a photo. This is a beautiful thing.&lt;/p&gt;
&lt;p&gt;Most of the gifts are more prosaic. Locally produced food is very popular. If you miss the taste of home, they’ve got you covered.&lt;/p&gt;
&lt;p&gt;Cities partnered with local firms to handle the e-commerce aspect, and eventually with platforms to bundle many different items into a single donation; think of it as a shopping cart you could fill with donated money.&lt;/p&gt;
&lt;p&gt;And then someone asked a fateful question.&lt;/p&gt;
&lt;h2 id=&quot;where-is-your-hometown-anyway&quot;&gt;Where is your hometown, anyway?&lt;/h2&gt;
&lt;p&gt;The Furusato Nouzei system does not define what a “hometown” is. This is mostly by design; Japan historically has a &lt;em&gt;very&lt;/em&gt; long-lasting official record of birthplaces which follows one throughout life called the Family Register, and (for reasons outside the scope of this post) it is a major societal issue. Additionally, there was some sentiment that one could have a it-feels-like-home connection to a city that wasn’t necessarily one’s birthplace.&lt;/p&gt;
&lt;p&gt;Maybe you were born in Tokyo but lived 30 years in a small town in Aichi, like my wife. Maybe you were born abroad but lived 10 years in Ogaki, like me. Maybe you just loved the onsen in Gero and wanted to subsidize them. The government wasn’t willing to adjudicate one’s “true” hometown; 帰る場所 is where the heart is.&lt;/p&gt;
&lt;p&gt;And then some bureaucrat realized that this created a market: you, as a city government, can bid for taxpayers to select you as a hometown.&lt;/p&gt;
&lt;h2 id=&quot;how-does-that-work&quot;&gt;How does that work?&lt;/h2&gt;
&lt;p&gt;Well, remember the sites which are acting as brokers for donations? They all have search engines, so that you can search by e.g. who has wagyu available if that is your thing.&lt;/p&gt;
&lt;p&gt;Your thing could, plausibly, be travel to your hometown. So your hometown could, plausibly, buy you tickets back to home. But this would be gratuitously operationally intensive.&lt;/p&gt;
&lt;p&gt;You have you call city hall. They have to arrange transport. Why do this when Japan is a country with perfectly functioning travel agencies? It would be far better for everyone for your hometown to just send you a gift card to a travel agency.&lt;/p&gt;
&lt;p&gt;See where this is going yet? A gift card for e.g. Japan’s largest travel agency is a highly liquid cash equivalent. In addition to using it for any good or service from that travel agency, you could liquidate it for about 97 cents on the dollar in any gift certificate exchange in the country. (These are extraordinarily common in Japan.)&lt;/p&gt;
&lt;p&gt;A few rounds of vigorous capitalism later, many rural towns without large expatriate (inpatriate?) populations and without much to differentiate them in terms of local food had bid the consideration for a donation up, up, up. Eventually the central government stepped in and said that the maximum they’d allow is you rewarding a taxpayer with 50% of the donation in consideration.&lt;/p&gt;
&lt;p&gt;So, if you “donate” ~3% of your gross salary to one of these cities (which is 1:1 matched by e.g. Tokyo; you’re donating someone else’s money), they will give you ~1.5% of it back in all-but-cash.&lt;/p&gt;
&lt;p&gt;In 2008, about 33,000 people participated in the Furusato Nouzei system, principally out of genuine charitable concern. In 2016, it was about 2.2 million. They donated on the order of $2.5 billion. The primary accelerant was the bidding war. A contributor was the popularization of Internet sites to broker the donations, which substantially reduce the friction required to participate.&lt;/p&gt;
&lt;p&gt;Running a site is a very good business to be in; it’s like running an e-commerce business with the special wrinkle that your customers are entirely price insensitive. There are a variety of smaller concerns, but the large Japanese Internet giants (Rakuten, Yahoo, etc) all use their massive built-in distribution and relationships to get an edge here. (The business model is simple: take the money from taxpayers, deduct a cut, spend some on gifts authorized by the city, and remit the remainder to the city periodically. You then periodically give the city an Excel file full of taxpayers. The city periodically sends their donors the requisite paperwork to get the tax credit the next year.)&lt;/p&gt;
&lt;p&gt;I’d estimate that intermediaries probably soak up somewhere between 5% and 10% of the total donated. This is quite inefficient to accomplish a government-to-government reallocation of resources, but by the standards of Japanese public works projects it is practically free.&lt;/p&gt;
&lt;p&gt;(Jokes aside: my estimate is informed by the fact that the margins are rich enough such that the intermediaries will &lt;em&gt;happily&lt;/em&gt; support you making a donation on credit cards. The actual numbers are probably in a public disclosure somewhere but I don’t have enough time to go looking.)&lt;/p&gt;
&lt;h2 id=&quot;is-this-sustainable&quot;&gt;Is this sustainable?&lt;/h2&gt;
&lt;p&gt;Probably? There has been some talk of rolling back the bidding war via administrative fiat, but the cities are quite opposed to this. It’s a great game theory problem: unless a supermajority of cities collectively agrees to limit gifts to a token number, it’s strongly in a city’s interest to duck the central government’s questionnaires and not express any objection to the status quo. (Also remember that the natural anchor for reciprocation is set quite high across much of Japan; the government might succeed in capping reciprocation at 30% but that might be a hard floor for the ceiling.)&lt;/p&gt;
&lt;p&gt;The penetration rate of this system will likely continue quickly increasing. It’s socially viral: a tax optimization that virtually anyone can take advantage of, has the explicit backing of the government, and feels wholesome. If you’re one of the relatively few taxpayers in Japan who has an accountant, expect them to tell you about this in detail and strongly recommend you max our your contribution every year.&lt;/p&gt;
&lt;p&gt;Widespread gaming or no, the system pretty much works according to the internal aims. Cities get a list of their internal diaspora, and do make considerably more effort to stay in touch with them than they did previously. (This includes lovely holiday cards and sometimes even I-can’t-believe-they’re-not-alumni-magazines.) You really do get plums from childhood in your mail from your hometown (if you don’t optimize for cash equivalents). Cities with declining local tax bases really do get enough money to do material projects with. Tokyo takes a hit to revenue but can afford it.&lt;/p&gt;
&lt;p&gt;And there, that’s Japan’s most novel redistribution program in a nutshell.&lt;/p&gt;
&lt;p&gt;If you live in Japan and want to take advantage of this, hit up your local Google; many sites are happy to make it happen for you. (I don’t endorse any in particular, but any of the top brands or organic search results will work substantially as advertised.)&lt;/p&gt;
&lt;p&gt; [0]: I had been of the impression up until today that it was literally not on the English-speaking Internet, but this seems to have changed in the last few years. That said, nobody seems to have written about the policy angle in English yet, so here we are.&lt;/p&gt;
</description>
<pubDate>Fri, 19 Oct 2018 13:45:54 +0000</pubDate>
<dc:creator>gwern</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.kalzumeus.com/2018/10/19/japanese-hometown-tax/</dc:identifier>
</item>
<item>
<title>Microservices Are Something You Grow Into, Not Begin With</title>
<link>https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with</link>
<guid isPermaLink="true" >https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p class=&quot;post-meta&quot;&gt;Updated on August 21st, 2018 in &lt;a href=&quot;https://nickjanetakis.com/blog/tag/elixir-tips-tricks-and-tutorials&quot;&gt;#elixir,&lt;/a&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/tag/flask-tips-tricks-and-tutorials&quot;&gt;#flask,&lt;/a&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/tag/javascript-tips-tricks-and-tutorials&quot;&gt;#javascript,&lt;/a&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/tag/ruby-on-rails-tips-tricks-and-tutorials&quot;&gt;#ruby-on-rails&lt;/a&gt;&lt;/p&gt;

&lt;img src=&quot;https://nickjanetakis.com/assets/blog/cards/microservices-are-something-you-grow-into-not-begin-with-b6c5c7cad05d4d93f2c6ac140938edfc8a61e4cbffb5098b31aec228ce61e571.jpg&quot; class=&quot;post-card&quot; width=&quot;750&quot; height=&quot;422&quot; alt=&quot;blog/cards/microservices-are-something-you-grow-into-not-begin-with.jpg&quot;/&gt;&lt;h2 class=&quot;lead no-letterspacing&quot;&gt;Let's talk about when it might be a good or bad idea to start using microservices. SPOILER ALERT: it's not the same for every project.&lt;/h2&gt;
&lt;p class=&quot;post-quick-jump&quot;&gt;&lt;strong&gt;Quick Jump:&lt;/strong&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#you-re-not-google-unless-you-re-google&quot;&gt;You're not Google (unless you're Google)&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#how-do-most-software-projects-start&quot;&gt;How Do Most Software Projects Start?&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#let-s-talk-about-code-abstractions&quot;&gt;Let's Talk about Code Abstractions&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#relating-code-abstractions-to-microservices&quot;&gt;Relating Code Abstractions to Microservices&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#when-should-you-use-microservices&quot;&gt;When Should You Use Microservices?&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#final-thoughts&quot;&gt;Final Thoughts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As software developers we have a pretty interesting profession. We can be happily coding away one day, then read an article about something and suddenly you’re questioning your entire programming related existence because Netflix said XYZ.&lt;/p&gt;
&lt;p&gt;Just like that, from 1 opinion of an individual or company you begin to question everything you’ve been doing for years, even if it’s been working great for you.&lt;/p&gt;

&lt;h3 id=&quot;youre-not-google-unless-youre-google&quot;&gt;You’re not Google (unless you’re Google)&lt;/h3&gt;
&lt;p&gt;As we skim HackerNews and other programming news outlets we often come across tech posts from Google, Netflix, Amazon and Facebook and they love to talk about how many hundreds or thousands of services they run and go over the benefits of doing things their way. That’s been a trend for the last few years.&lt;/p&gt;
&lt;p&gt;But let’s face it. You probably don’t have 1,000 developers working on a massive project with 10+ years of history.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Just because Google does it, doesn’t mean you should do it too.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We’re operating in a completely different galaxy. Google faces problems that we’ll likely never face but at the same time we can get away with doing things that Google cannot.&lt;/p&gt;

&lt;h3 id=&quot;how-do-most-software-projects-start&quot;&gt;How Do Most Software Projects Start?&lt;/h3&gt;
&lt;p&gt;A lot of projects start with 1 person doing all of the programming. There’s a million examples but let’s look at Shopify. Shopify was originally coded by Tobias Lütke (it was based on Ruby on Rails and still is by the way).&lt;/p&gt;
&lt;p&gt;Do you think Tobias sat there paralyzed by indecision while he painstakingly attempted to create a perfect microservices based architecture before he wrote a single line of code?&lt;/p&gt;
&lt;p&gt;Hell no. I wasn’t there when he developed the first iteration of Shopify, which was originally just an e-commerce store for snowboarding equipment but if he’s anything like me (a typical developer), it probably went something like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Learn a new technology while building your initial product&lt;/li&gt;
&lt;li&gt;Write some pretty non-idiomatic / crappy but fully working code&lt;/li&gt;
&lt;li&gt;See it begin to come together and get excited&lt;/li&gt;
&lt;li&gt;Refactor the “kill it with fire!” code into better code once it becomes a problem&lt;/li&gt;
&lt;li&gt;Keep repeating this loop while adding new features and running in production&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This may seem like a really simple loop, but it took ~20 years of programming for me to really understand how profound that cycle is.&lt;/p&gt;
&lt;p&gt;You don’t get better as a programmer by theory crafting optimal set ups before you write a single line of code. &lt;strong&gt;You get better by writing a lot of code with absolute and total intent to replace almost everything you write with better code once you start experiencing real problems first hand.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That initial code you rewrite isn’t wasted time or effort. It’s very much responsible for you leveling up over time. It is the secret sauce.&lt;/p&gt;

&lt;h3 id=&quot;lets-talk-about-code-abstractions&quot;&gt;Let’s Talk about Code Abstractions&lt;/h3&gt;
&lt;p&gt;As developers we’ve all heard the phrase &lt;em&gt;“DRY: don’t repeat yourself”&lt;/em&gt; and in general that’s a reasonable guide to go by, but often times it’s very well worth repeating yourself.&lt;/p&gt;
&lt;p&gt;It’s worth repeating yourself because if you try to abstract something without really understanding what you’re abstracting then you create something called a &lt;a href=&quot;https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/&quot; target=&quot;_blank&quot;&gt;leaky abstraction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll typically repeat myself 3 times before I even THINK about refactoring some code to remove the duplication. It’s often not until the 4th or 5th time that I actually take action.&lt;/p&gt;
&lt;p&gt;That’s because you really need to see how you’re duplicating the code in different situations a few times before you know what needs to be turned into variables and also be removed from the place you’re originally inlining it.&lt;/p&gt;
&lt;h5 id=&quot;levels-of-abstraction-from-inlining-code-to-external-libraries&quot;&gt;Levels of abstraction, from inlining code to external libraries:&lt;/h5&gt;
&lt;ol&gt;&lt;li&gt;Write inline code&lt;/li&gt;
&lt;li&gt;Duplicate code a few times in different spots&lt;/li&gt;
&lt;li&gt;Extract duplicate code into functions / etc.&lt;/li&gt;
&lt;li&gt;Use your abstraction(s) for a while&lt;/li&gt;
&lt;li&gt;See how that code interacts with other code&lt;/li&gt;
&lt;li&gt;Extract common functionality into internal library&lt;/li&gt;
&lt;li&gt;Use internal library for extended periods of time&lt;/li&gt;
&lt;li&gt;Really understand how all of the pieces come together&lt;/li&gt;
&lt;li&gt;Create external library (open source, etc.) if it makes sense&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;And this is exactly what you can’t “invent” a good library or framework. Almost all of the very successful tools we use today came from real world projects where the tool we love was extracted from real internal use cases.&lt;/p&gt;
&lt;p&gt;Rails is a great example of this. DHH (author of Rails) didn’t just wake up one day and say &lt;em&gt;“OOPS! Time to make the models/, controllers/ and views/ directories!”.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Nope. He developed Basecamp (a real product) and certain patterns emerged, and those patterns were generalized, then lifted out of Basecamp into Rails. This exact process still goes on today and it’s IMO the sole reason why Rails continues to be so successful.&lt;/p&gt;
&lt;p&gt;It’s a perfect storm of very well tested (read: not theory crafted) abstractions, combined with a programming language that allows you to write visually appealing code. It’s also why almost all of the “Rails but in XYZ language” frameworks fail. They are skipping key components of the abstraction chain and think they can just duplicate what Rails does.&lt;/p&gt;

&lt;h3 id=&quot;relating-code-abstractions-to-microservices&quot;&gt;Relating Code Abstractions to Microservices&lt;/h3&gt;
&lt;p&gt;Microservices to me are just another level of abstraction. I wouldn’t necessarily say it’s step 10 in the above list because not all libraries are meant to be microservices, but at a conceptual level it’s similar.&lt;/p&gt;
&lt;p&gt;Microservices aren’t something you start off with from day 1, just like you wouldn’t attempt to create a perfect open source external library on day 1 before you even wrote a line of code. At that point you don’t even know what you’re making.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A microservices based architecture is something you might grow into over time as you come across real problems working with your code base.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You may never come across these problems, and a lot of these problems can also be solved through other means. Take a look at Basecamp and Shopify. They are both monolithic applications that are doing very well.&lt;/p&gt;
&lt;p&gt;I don’t think anyone would call them small applications. Sure they are not operating at Google’s scale but let’s put some perspective on this.&lt;/p&gt;
&lt;h4 id=&quot;shopify-makes-17-million-usd-a-month-with-a-monolithic-app&quot;&gt;Shopify Makes 17 Million+ USD a Month with a Monolithic App&lt;/h4&gt;
&lt;p&gt;As of mid-2018 Shopify publicly announced they have &lt;a href=&quot;https://stackshare.io/shopify/e-commerce-at-scale-inside-shopifys-tech-stack&quot;&gt;600,000+ businesses running online stores&lt;/a&gt; on their platform.&lt;/p&gt;
&lt;p&gt;Shopify is a SAAS application and its cheapest plan is $29/month and I have a feeling a ton of businesses are using their $79/month plan. In any case, even if 600,000 people used their cheapest $29/month plan, that’s $17.4 million dollars a month in revenue just from the SAAS aspect of their business.&lt;/p&gt;
&lt;p&gt;Basecamp is another monolithic application that is quite large. What’s interesting about Basecamp is they only have about 50 employees and only a fraction of them are software engineers working on the main product.&lt;/p&gt;
&lt;p&gt;My point is, you can get REEEEEEEEEEEEEEEALLY far without going down the rabbit hole of microservices. Microservices should be on a need to know basis.&lt;/p&gt;

&lt;h3 id=&quot;when-should-you-use-microservices&quot;&gt;When Should You Use Microservices?&lt;/h3&gt;
&lt;p&gt;That’s really up to what you and your team decide. This is one of those things where if you are in a situation where microservices makes sense, you’re not Googling around for “microservices vs monolith”. You already know.&lt;/p&gt;
&lt;p&gt;But one situation might be if you have a ton of developers who are best suited to work on individual sub-sections of an application. Having many dozens of teams working on various components of a product in isolation is &lt;em&gt;one&lt;/em&gt; reasonable use case for microservices.&lt;/p&gt;
&lt;p&gt;Keep in mind you probably had a very small team that slowly grew over time so you might end up starting with 1 or 2 microservices and going from there. You probably wouldn’t end up going all-in and transform a monolith into 100 services right off the bat.&lt;/p&gt;
&lt;h4 id=&quot;is-the-juice-worth-the-squeeze&quot;&gt;Is the Juice Worth the Squeeze?&lt;/h4&gt;
&lt;p&gt;It’s also worth mentioning transitioning to microservices comes with its own set of challenges and problems. You’re trading one problem for another, so you need to weigh the pros and cons on if it’s worth it for your project specifically.&lt;/p&gt;
&lt;p&gt;One of the biggest problems is monitoring. Suddenly you have a bunch of services which could be written with different tech stacks running across multiple machines and you need a way to pry into the details of everything.&lt;/p&gt;
&lt;p&gt;This is a daunting task because ideally you’d want all of these services to use a single unified service to gather and display these metrics.&lt;/p&gt;
&lt;p&gt;You probably don’t want to develop your own tooling for this because that alone could be a full time job, and this is partly why companies like &lt;a href=&quot;https://lightstep.com/&quot; target=&quot;_blank&quot;&gt;LightStep&lt;/a&gt; are so successful. They are one of the most interesting monitoring services I’ve come across in my travels.&lt;/p&gt;
&lt;p&gt;Their product is targeted more towards larger scale applications (for good reason) but it could also work for smaller scale projects too. I only heard about them recently since they presented at &lt;a href=&quot;https://nickjanetakis.com/blog/coming-back-to-cloud-field-day-for-the-second-time&quot;&gt;Cloud Field Day 4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyways, monitoring is only 1 of many challenges, but I thought I’d bring that one up because it’s one of the more painful problems.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;I mainly wrote this article for 2 reasons:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Firstly&lt;/strong&gt;, 2 weeks ago ago I attended &lt;a href=&quot;https://nickjanetakis.com/blog/coming-back-to-cloud-field-day-for-the-second-time&quot;&gt;Cloud Field Day 4&lt;/a&gt; and happened to do a group podcast on a related topic. That should be out in a few months (I’ll update this post with a link), but I wanted to elaborate on some of my points here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Secondly&lt;/strong&gt;, as someone who creates online courses, I often get a lot of questions from people on the topic of how to architect their applications.&lt;/p&gt;
&lt;p&gt;A common trend I saw was a lot of people were getting hung up on trying to break out their apps into isolated services before they even wrote a line of code. Even going as far as wanting to break up components of the app to use multiple databases from the beginning.&lt;/p&gt;
&lt;p&gt;It was something that stalled them from moving forward and as a fellow developer I know how upsetting it can be to get stuck into an indecision loop (I’ve had my share of those!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By the way&lt;/strong&gt;, I’m currently working on a fairly large SAAS application which is a custom course hosting platform. Right now it’s just me working on the project, and you can be sure I just cracked open my code editor and started writing code on day 1.&lt;/p&gt;
&lt;p&gt;I have full intent on keeping it as a majestic monolithic until it no longer makes sense but my spidey sense is telling me I’ll never hit that point anyways.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What do you think about this topic? Let me know below.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;Like you, I'm super protective of my inbox, so don't worry about getting spammed. You can expect a few emails per month (at most), and you can 1-click unsubscribe at any time. &lt;a href=&quot;https://nickjanetakis.com/newsletter&quot;&gt;See what else you'll get&lt;/a&gt; too.&lt;/p&gt;</description>
<pubDate>Fri, 19 Oct 2018 08:35:29 +0000</pubDate>
<dc:creator>fagnerbrack</dc:creator>
<og:type>article</og:type>
<og:title>Microservices Are Something You Grow Into, Not Begin With</og:title>
<og:description>Let's talk about when it might be a good or bad idea to start using microservices. SPOILER ALERT: it's not the same for every project.</og:description>
<og:url>https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with</og:url>
<og:image>https://nickjanetakis.com/assets/blog/cards/microservices-are-something-you-grow-into-not-begin-with-b6c5c7cad05d4d93f2c6ac140938edfc8a61e4cbffb5098b31aec228ce61e571.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with</dc:identifier>
</item>
<item>
<title>Building a better gov.uk, step by step</title>
<link>https://gds.blog.gov.uk/2018/10/17/building-a-better-gov-uk-step-by-step/</link>
<guid isPermaLink="true" >https://gds.blog.gov.uk/2018/10/17/building-a-better-gov-uk-step-by-step/</guid>
<description>&lt;img class=&quot;wp-image-31231 size-large&quot; src=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image5-620x413.png&quot; alt=&quot;A screenshot of the Apply for your first provisional driving licence step by step page&quot; width=&quot;620&quot; height=&quot;413&quot; srcset=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image5-620x413.png 620w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image5-310x207.png 310w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image5-768x512.png 768w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image5-435x290.png 435w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;The 'Apply for your first provisional driving licence' step by step navigation page
&lt;p&gt;Since GOV.UK launched 6 years ago it has been the home of government’s online content and the starting point for online services.&lt;/p&gt;&lt;p&gt;Every week millions of people use GOV.UK to do complex and sometimes life-changing tasks, such as learning to drive, registering a birth or starting a business.&lt;/p&gt;
&lt;p&gt;We want to make these tasks as easy as possible - by making content simple and user journeys intuitive. This is good for users because it makes it quicker to get things done. And it’s good for government because it reduces unnecessary contact and casework.&lt;/p&gt;
&lt;h2&gt;Why we need to look at end to end services&lt;/h2&gt;
&lt;p&gt;We know users face challenges carrying out tasks. There’s a lot of information to find for a start. Depending on the task, there might be appointments to book, forms to fill in, applications to be made and tests to take.&lt;/p&gt;
&lt;p&gt;And what makes this even harder is that each step needs to be done at the right time and in the right order.&lt;/p&gt;
&lt;p&gt;That’s why government needs to look at every step of this task. From the first thing the user does, to the last thing they need to do. We need to look at services from end to end.&lt;/p&gt;
&lt;p&gt;The difficulty government faces when trying to make this easier is that people’s real-world tasks do not always fit neatly with the way government is organised into departments and agencies.&lt;/p&gt;
&lt;p&gt;For example, a business wanting to hire their first employee needs information and services from 5 different areas of government before they can hire them:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th width=&quot;20%&quot;&gt;&lt;strong&gt;Step&lt;/strong&gt;&lt;/th&gt;
&lt;th width=&quot;20%&quot;&gt;&lt;strong&gt;Government department or agency&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Check you can afford to take on an employee&lt;/td&gt;
&lt;td&gt;Department for Work and Pensions&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Register as an employer&lt;/td&gt;
&lt;td&gt;HM Revenue and Customs&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Check a potential employee’s right to work in the UK&lt;/td&gt;
&lt;td&gt;Home Office&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Check a potential employee’s criminal record&lt;/td&gt;
&lt;td&gt;Disclosure and Barring Service&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Set up a pension scheme&lt;/td&gt;
&lt;td&gt;The Pensions Regulator&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;Organising GOV.UK by topic and task&lt;/h2&gt;
&lt;p&gt;Rather than organise GOV.UK around the structure of government, we’ve been working to organise content around user needs at scale. So, rather than being organised by department, content on GOV.UK is now organised into a single site-wide system of user-centred topics.&lt;/p&gt;
&lt;p&gt;This topic structure will power new ways to search and browse the site, making things much easier to find.&lt;/p&gt;
&lt;p&gt;But we want to go further - we want to make things easier to do.&lt;/p&gt;
&lt;p&gt;So about a year ago we started experimenting with a new way for users to navigate GOV.UK. These experiments evolved into what we now call step by step navigation.&lt;/p&gt;
&lt;p&gt;It looks like this on GOV.UK:&lt;/p&gt;
&lt;img class=&quot;wp-image-31230 size-large&quot; src=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image4-620x413.png&quot; alt=&quot;A screenshot of the 'Learn to drive a car' step by step page&quot; width=&quot;620&quot; height=&quot;413&quot; srcset=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image4-620x413.png 620w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image4-310x207.png 310w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image4-768x512.png 768w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image4-435x290.png 435w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;This page outlines the process for learning to drive a car
&lt;p&gt;It means that, for the first time, we can show the user everything they’ll need to do to complete a task, whether that’s &lt;a href=&quot;https://www.gov.uk/learn-to-drive-a-car&quot;&gt;Learning to drive&lt;/a&gt; or &lt;a href=&quot;https://www.gov.uk/employ-someone&quot;&gt;Employing someone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The navigation follows you throughout your journey, indicating what to do now and next. It also shows you previous steps you might have missed. For example, getting a provisional driving licence before booking a driving theory test.&lt;/p&gt;
&lt;img class=&quot;wp-image-31227 size-large&quot; src=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image1-1-620x413.png&quot; alt=&quot;A screenshot of the 'Apply for your first provisional driving licence' step by step page&quot; width=&quot;620&quot; height=&quot;413&quot; srcset=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image1-1-620x413.png 620w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image1-1-310x207.png 310w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image1-1-768x512.png 768w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image1-1-435x290.png 435w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;Step by step navigation appears alongside content of each step
&lt;p&gt;Step by step navigation is designed to work with all existing content types and transactions on GOV.UK. Where appropriate, transactions can be broken down further using the separate &lt;a href=&quot;https://design-system.service.gov.uk/patterns/task-list-pages/&quot;&gt;task list pattern&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Developing the design&lt;/h2&gt;
&lt;p&gt;The design evolved over 8 rounds of research and iteration, including an in-depth review at the brilliant &lt;a href=&quot;http://digitalaccessibilitycentre.org/&quot;&gt;Digital Accessibility Centre&lt;/a&gt; in Neath.&lt;/p&gt;
&lt;p&gt;Around half way through the lab research we began testing the pattern on GOV.UK. Analytics data showed that the first examples of step by step navigation were getting a lot of traffic. For example, learn to drive a car was used 1.24 million times in the first 6 months.&lt;/p&gt;
&lt;p&gt;We ask users for feedback with the ‘Is this useful?’ survey banner at the bottom of every page on the site. This showed users were finding it useful.&lt;/p&gt;
&lt;img class=&quot;wp-image-31229 size-large&quot; src=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1-620x66.png&quot; alt=&quot;A screenshot of the 'Is this page useful?' banner&quot; width=&quot;620&quot; height=&quot;66&quot; srcset=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1-620x66.png 620w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1-310x33.png 310w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1-768x82.png 768w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1-435x46.png 435w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1.png 1073w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;The 'Is this page useful?' banner
&lt;p&gt;We also ran a remote user research study where we asked users to complete a series of tasks before and after 3 step by step journeys were published.&lt;/p&gt;
&lt;p&gt;The study showed the step by step navigation resulted in a significant increase in users’ successful task completion, as well as an increase in confidence they could use GOV.UK to find what they needed.&lt;/p&gt;
&lt;h2&gt;Scaling the approach&lt;/h2&gt;
&lt;p&gt;With encouraging data coming in, over the past 6 months we’ve been working to scale this approach so it can be used for the more complex tasks users need to do. These include:&lt;/p&gt;
&lt;p&gt;As this table shows, the content that sits within these journeys often crosses multiple government departments and we need a collaborative approach to make these journeys better for users. &lt;a href=&quot;https://insidegovuk.blog.gov.uk/2018/02/07/how-we-approached-service-mapping/&quot;&gt;Creating a new process for cross-government working&lt;/a&gt; to support this has been equally as important as designing a new way of navigating.&lt;/p&gt;
&lt;p&gt;Over the past 6 months we’ve collaborated with more than 15 different departments to publish 25 step by step journeys.&lt;/p&gt;
&lt;p&gt;We’re also indebted to the team at the Driver and Vehicle Standards Agency who helped us map the first journeys: &lt;a href=&quot;https://www.gov.uk/learn-to-drive-a-car&quot;&gt;Learn to drive a car&lt;/a&gt; and &lt;a href=&quot;https://www.gov.uk/become-car-driving-instructor&quot;&gt;Become a driving instructor&lt;/a&gt; when our work was still in prototype form. They’ve written &lt;a href=&quot;https://dvsadigital.blog.gov.uk/2018/05/09/building-a-smoother-road-to-becoming-a-driving-instructor/&quot;&gt;a great blog post about the process&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;We’ll be continuing to work with departments to map and publish step by step navigation for some of the most high priority and complex user journeys within government. As we do this we’ll keep a close eye on performance data to ensure this approach is still working well for users.&lt;/p&gt;
&lt;p&gt;If you’re in a department or agency team and want to work with us to put together step by step journeys, we’d love to hear from you. Send us an email at &lt;a href=&quot;mailto:modelling-services@digital.cabinet-office.gov.uk&quot;&gt;modelling-services@digital.cabinet-office.gov.uk.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/samdub?lang=en&quot;&gt;Follow Sam&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gabytheresa&quot;&gt;follow Gabrielle&lt;/a&gt; on Twitter and &lt;a href=&quot;https://gds.blog.gov.uk/subscribe/&quot;&gt;remember to sign up for blog alerts&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Thu, 18 Oct 2018 21:29:22 +0000</pubDate>
<dc:creator>open-source-ux</dc:creator>
<og:image>https://gds.blog.gov.uk/wp-content/themes/gds-blogs/build/govuk_template/assets/images/opengraph-image.png?0.22.3</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gds.blog.gov.uk/2018/10/17/building-a-better-gov-uk-step-by-step/</dc:identifier>
</item>
<item>
<title>Opus 1.3 Released</title>
<link>https://people.xiph.org/~jm/opus/opus-1.3/</link>
<guid isPermaLink="true" >https://people.xiph.org/~jm/opus/opus-1.3/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;link rel=&quot;icon&quot; href=&quot;https://www.xiph.org/images/logos/xiph.ico&quot; type=&quot;image/x-icon&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; title=&quot;default demosheet&quot; href=&quot;demo.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; title=&quot;default demosheet&quot; media=&quot;print&quot; href=&quot;demo_print.css&quot; type=&quot;text/css&quot;/&gt;&lt;title&gt;Opus 1.3 Released&lt;/title&gt;&lt;/head&gt;&lt;body onload=&quot;init_demo()&quot; id=&quot;readabilityBody&quot; readability=&quot;226.34871945403&quot;&gt;
&lt;div id=&quot;xiphlogo&quot;&gt;&lt;a href=&quot;https://www.xiph.org/&quot;&gt;&lt;img src=&quot;https://www.xiph.org/images/logos/fish_xiph_org.png&quot; alt=&quot;Fish Logo and Xiph.org&quot;/&gt;&lt;/a&gt;


&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://opus-codec.org/downloads/&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/opus-1.3_logo.png&quot; alt=&quot;Banner&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Opus gets another major update with the release of version 1.3. This release brings quality improvements to both speech and music, while remaining fully compatible with RFC 6716. This is also the first release with Ambisonics support. Here's a few of the upgrades that users and implementers will care about the most.&lt;/p&gt;
&lt;h2&gt;Speech/Music Detection&lt;/h2&gt;
&lt;p&gt;Ever since version 1.1, Opus has been able to automatically detect whether its input is speech or music, and choose the optimal encoding mode accordingly. The &lt;a href=&quot;https://people.xiph.org/~xiphmont/demo/opus/demo3.shtml&quot;&gt;original speech/music detector&lt;/a&gt; was based on a simple (non-recurrent) neural network, followed by an HMM-based layer to combine the neural network results over time. While it worked reasonably well most of the time, it was still far from perfect. Thanks to deep learning — and specifically recurrent neural networks — we can now do better.&lt;/p&gt;
&lt;p&gt;Opus 1.3 includes a brand new speech/music detector. It is based on a relatively new type of recurrent neuron: the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gated_recurrent_unit&quot;&gt;Gated Recurrent Unit (GRU)&lt;/a&gt;. Unlike simple &lt;em&gt;feedforward&lt;/em&gt; units, the GRU has a memory. It not only learns how to use its input and memory at each time, but it can also learn how and when to update its memory. That makes it able to remember information for a long period of time but also discard some of that information when appropriate.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;caption&quot; src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/simple_vs_gru.png&quot; alt=&quot;recurrent units&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Comparing the feedforward unit originally used to a simple recurrent unit and to a GRU. Recurrent units add a &lt;em&gt;state&lt;/em&gt; that allows them to combine previous information to the new information they receive. The GRU improves on that with the &lt;em&gt;r&lt;/em&gt; and &lt;em&gt;z&lt;/em&gt; gates, which make it possible to learn longer-term patterns. Both are soft switches (value between 0 and 1) computed based on the previous state of the whole layer and the inputs, with a sigmoid activation function. When the update gate &lt;em&gt;z&lt;/em&gt; is on the left, then the state can remain constant over a long period of time — until a condition causes &lt;em&gt;z&lt;/em&gt; to switch to the right.&lt;/p&gt;
&lt;p&gt;Because distinguishing between speech and music is much easier than, say, speech recognition, the network can be pretty small. Instead of thousands of neurons and millions of weights running on a GPU, the Opus detector has just 4986 weights (that fit in less than 5 kB) and takes about 0.02% CPU to run in real-time. The figure below shows how the layers of the network are arranged. Although it doesn't look very deep, it's actually quite deep &lt;em&gt;over time&lt;/em&gt; thanks to the GRU.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;caption&quot; src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/topology.png&quot; alt=&quot;network topology&quot; onmouseover=&quot;this.src='topology_time.png';&quot; onmouseout=&quot;this.src='topology.png';&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Topology of the neural network used in this project. Each box represents a layer of neurons, with the number of units indicated in parentheses. &lt;em&gt;Dense&lt;/em&gt; layers are fully-connected, non-recurrent layers. The first output indicates whether the signal is music or speech, while the second output indicates whether the signal is active.&lt;/p&gt;
&lt;p&gt;Revisiting the &lt;a href=&quot;https://people.xiph.org/~xiphmont/demo/opus/probabilities.png&quot;&gt;original 1.1 demo example&lt;/a&gt;, let's see what these improvements actually look like in practice.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;caption&quot; src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/probabilities_1.3.png&quot; alt=&quot;speech vs music probabilities&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Illustration of a test sample consisting of mixed voice and music alternating roughly every fifteen seconds. Speech and music sections are marked on the waveform (top). The lower graph shows the instantaneous music probability produced by the 1.1 neural network (gray), the final 1.1 probability from the HMM (blue), and the probability computed by the 1.3 recurrent neural network (red).&lt;/p&gt;
&lt;h3&gt;Decision Logic&lt;/h3&gt;
&lt;p&gt;A neural network only gives us a probability that any given frame is speech or music. From there, we have to make an actual decision based not only on that probability (and how it evolves over time), but also based on the bitrate and whether/when the audio is active or inactive (silent/noise). That decision logic has also been improved in 1.3. The encoder now minimizes a &lt;em&gt;badness&lt;/em&gt; metric, which includes penalties for using the wrong mode, but also for switching in the middle of speech or music. When look-ahead is available, the decision logic is able to have the encoder switch mode during a silence period &lt;strong&gt;before&lt;/strong&gt; the transition between speech and music.&lt;/p&gt;
&lt;h2&gt;Low-Bitrate Speech Improvements&lt;/h2&gt;
&lt;p&gt;Back in 2010-2012, when we were combining SILK and CELT into Opus, there was a lot of work to do. We were already amazed we could code high-quality fullband speech at 32 kb/s that we didn't really attempt to go beyond that. Combined with the fact that Opus has a total of 64 different operating modes (combinations of SILK/CELT/hybrid, bandwidths, frame sizes, mono/stereo), it's easy to see why not everything was fully optimized when the 1.0 encoder came out. For 1.3, there's been some more tuning for low-bitrate speech.&lt;/p&gt;
&lt;h3&gt;Stereo&lt;/h3&gt;
&lt;p&gt;First, it turns out that the Opus encoder was never actually tuned for stereo speech below 40 kb/s. By just changing how the encoder divides the total bitrate between the SILK and CELT parts, we were able to significantly improve stereo speech quality, especially in the 24-32 kb/s range. On the SILK side, the encoder is now giving more bits to the side (left-right difference) channel, lowering the bitrate at which stereo information starts being coded for speech.&lt;/p&gt;
&lt;h3&gt;Bandwidth Decisions&lt;/h3&gt;
&lt;p&gt;Deciding what bandwidth to use depending on the bitrate has always been tricky since it eventually becomes a matter of personal preference. The original tuning was mostly based on my personal preference, plus a &quot;safety margin&quot; erring on the side of lower coding noise and narrower bandwidth. It appears that most people do &lt;strong&gt;not&lt;/strong&gt; share my preferences and tend to prefer wider bandwidths, even if it means more coding noise. That is why we have been changing the decision threshold over time. For example, the Opus 1.0 encoder would only use wideband if the bitrate was at least 14 kb/s. That threshold was lowered to 11 kb/s back in the 1.2 release. Now, thanks to an (unpublished) experiment by folks at Google, we know that most people actually prefer wideband to narrowband even at 9 kb/s. That's why 1.3 now switches from narrowband to wideband at 9 kb/s. You might ask &quot;where's mediumband?&quot; (12 kHz sampling). Well, given these changes, it's no longer useful and will not be used except for a few specific situations (e.g. when the user explicitly asks for it). Of course, since it is part of the Opus specification, it will still remain in the decoder forever (the cost is very small anyway).&lt;/p&gt;
&lt;h3&gt;Going lower!&lt;/h3&gt;
&lt;p&gt;Because of how SILK is designed, there's a limit to how low a bitrate it can produce. No matter what the target bitrate is, the actual average bitrate will never go below a certain value. For previous releases (1.0-1.2), that minimum was around 6 kb/s for narrowband and 9 kb/s for wideband. Thanks to some reworking of the SILK rate control logic, the Opus 1.3 encoder can now encode speech at bitrates down to 5 kb/s for narrowband and 6 kb/s for wideband. Note that this does not by itself improve quality. It only makes some lower rates available.&lt;/p&gt;
&lt;h3&gt;Samples&lt;/h3&gt;
&lt;p&gt;Here are some samples showing how Opus' speech quality has evolved since 1.0 for different bitrates.&lt;/p&gt;
&lt;div class=&quot;comparison&quot; readability=&quot;11&quot;&gt;Your browser does not support the audio tag.
&lt;div&gt;
&lt;p class=&quot;compare_label&quot;&gt;Select codec/version&lt;/p&gt;
&lt;ul class=&quot;codec&quot;&gt;&lt;li onclick=&quot;setSpeechCodec(0, this);&quot;&gt;Opus 1.0&lt;/li&gt;
&lt;li onclick=&quot;setSpeechCodec(1, this);&quot;&gt;Opus 1.1&lt;/li&gt;
&lt;li onclick=&quot;setSpeechCodec(2, this);&quot;&gt;Opus 1.2&lt;/li&gt;
&lt;li onclick=&quot;setSpeechCodec(3, this);&quot; id=&quot;speech_default_codec&quot; class=&quot;selected&quot;&gt;Opus 1.3&lt;/li&gt;
&lt;li onclick=&quot;setSpeechCodec(4, this);&quot;&gt;Uncompressed&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p class=&quot;compare_label&quot;&gt;Select bitrate&lt;/p&gt;
&lt;ul class=&quot;bitrate&quot; id=&quot;speech_bitrate_selector&quot;&gt;&lt;li onclick=&quot;setSpeechRate(9, this);&quot;&gt;9 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(12, this);&quot;&gt;12 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(16, this);&quot;&gt;16 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(20, this);&quot;&gt;20 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(24, this);&quot;&gt;24 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(32, this);&quot;&gt;32 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(40, this);&quot;&gt;40 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(48, this);&quot; id=&quot;speech_default_rate&quot; class=&quot;selected&quot;&gt;48 kb/s&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;Select where to start playing when selecting a new sample&lt;/p&gt;
&lt;button type=&quot;button&quot; onclick=&quot;speech_norestart();&quot;&gt;Keep playing&lt;/button&gt; &lt;button type=&quot;button&quot; onclick=&quot;speech_setrestart();&quot;&gt;Set current positon as restart point&lt;/button&gt;
&lt;p id=&quot;speech_restart_string&quot;&gt;Player will &lt;strong&gt;continue&lt;/strong&gt; when changing sample.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;caption&quot; readability=&quot;16&quot;&gt;
&lt;p&gt;Comparing stereo speech quality of versions 1.0, 1.1, 1.2, and 1.3 at bitrates between 9 and 48 kb/s. This demo will work best with a browser that supports Ogg/Opus in HTML5 (Firefox, Chrome and Opera do), but if Opus support is missing the file will be played as FLAC, WAV, or high bitrate MP3.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Ambisonics&lt;/h2&gt;
&lt;p&gt;Opus 1.3 adds support for immersive audio using ambisonics that surrounds the listener in a full-sphere sound field. This is done through two new (soon to be RFC 8486) &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-codec-ambisonics&quot;&gt;Ogg mapping families for Opus ambisonics&lt;/a&gt;. Unlike other multi-channel surround formats, ambisonics is independent of speaker layout. This allows for flexible speaker configurations and scalable audio to efficiently transmit 3D audio soundtracks. Ambisonics is particularly effective when combined with 360 videos to envelop the listener’s senses. The spatial resolution of an ambisonics sound field is determined by its order. Generally speaking, increasing the order of ambisonics improves spatial resolution, but requires a higher bitrate, since the number of channels is given by (ambisonics order + 1)^2. These channels are ordered according to the Ambisonic Channel Number (ACN) format. The maximum ambisonics order supported by Opus is 14; in practice, up to the 3rd order is commonly used. In addition to ambisonics, 2 channels (stereo) can be added for non-diegetic (head-locked) audio.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/File:Spherical_Harmonics_deg3.png&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/Spherical_Harmonics_deg3.png&quot; alt=&quot;spherical harmonics&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ambisonics spherical harmonics for orders up to three. First-order ambisonics includes the top two lines of basis functions (4 channels) and third-order includes all four lines (16 channels). If you've studied physics or chemistry and think these look like the &lt;em&gt;s&lt;/em&gt;, &lt;em&gt;p&lt;/em&gt;, &lt;em&gt;d&lt;/em&gt; and &lt;em&gt;f&lt;/em&gt; atomic orbitals, that's because those too are spherical harmonics.&lt;/p&gt;
&lt;h3&gt;Usage Recommendations&lt;/h3&gt;
&lt;p&gt;Opus 1.3 includes two channel mappings for ambisonics encoding: channel mapping families 2 and 3. For first order ambisonics, it is generally best to use channel mapping 2, which codes each ambisonic channel independently. For all higher-order ambisonics, channel mapping 3 provides a more efficient representation by first transforming the ambisonics signals with a designated mixing matrix before encoding. This 1.3 release provides matrices for first, second, and third order.&lt;/p&gt;
&lt;h3&gt;Samples&lt;/h3&gt;
&lt;p&gt;Here are some ambisonics samples that have been encoded with Opus. For the purpose of this demo, they have been down-mixed to stereo for playback with regular headphones.&lt;/p&gt;
&lt;div class=&quot;comparison&quot; readability=&quot;11&quot;&gt;Your browser does not support the audio tag.
&lt;div&gt;
&lt;p class=&quot;compare_label&quot;&gt;Select codec/version&lt;/p&gt;
&lt;ul class=&quot;codec&quot;&gt;&lt;li onclick=&quot;setAmbiSample(1, this);&quot; id=&quot;ambisonics_default_sample&quot; class=&quot;selected&quot;&gt;Sample 1&lt;/li&gt;
&lt;li onclick=&quot;setAmbiSample(2, this);&quot;&gt;Sample 2&lt;/li&gt;
&lt;li onclick=&quot;setAmbiSample(3, this);&quot;&gt;Sample 3&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p class=&quot;compare_label&quot;&gt;Select bitrate&lt;/p&gt;
&lt;ul class=&quot;bitrate&quot; id=&quot;ambisonics_bitrate_selector&quot;&gt;&lt;li onclick=&quot;setAmbiRate(1, this);&quot;&gt;First order (256 kb/s)&lt;/li&gt;
&lt;li onclick=&quot;setAmbiRate(2, this);&quot; id=&quot;ambisonics_default_rate&quot; class=&quot;selected&quot;&gt;Third order (512 kb/s)&lt;/li&gt;
&lt;li onclick=&quot;setAmbiRate(0, this);&quot;&gt;Third order (uncompressed)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;Select where to start playing when selecting a new sample&lt;/p&gt;
&lt;button type=&quot;button&quot; onclick=&quot;ambi_norestart();&quot;&gt;Keep playing&lt;/button&gt; &lt;button type=&quot;button&quot; onclick=&quot;ambi_setrestart();&quot;&gt;Set current positon as restart point&lt;/button&gt;
&lt;p id=&quot;ambisonics_restart_string&quot;&gt;Player will &lt;strong&gt;continue&lt;/strong&gt; when changing sample.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;caption&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;Evaluating the quality of ambisonics encoding for first and third order. This demo will work best with a browser that supports Ogg/Opus in HTML5 (Firefox, Chrome and Opera do), but if Opus support is missing the file will be played as FLAC, WAV, or high bitrate MP3.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;p&gt;Here are briefly some of the more minor changes in this release.&lt;/p&gt;
&lt;h3&gt;Tone Quality Improvements&lt;/h3&gt;
&lt;p&gt;One of the fundamental assumptions in CELT is that any given band tends to have a fixed perceptual contribution, no matter how loud or quiet it is. While that assumption holds remarkably well across a wide variety of signals, it does get broken occasionally, especially on &lt;em&gt;sparse tonal signals&lt;/em&gt;. By this we mean signals that have are made up of only a handful of tones. These are often synthetic (e.g. a sine wave generator), but can also happen in real life (e.g. glockenspiel). For these signals, we have bands with essentially no energy, at which point it's best to disregard the band and only pay attention to the few bands that hold the tones. This is what Opus 1.3 does now for these signals, slightly improving quality (though probably not something you would easily notice on most files).&lt;/p&gt;
&lt;h3&gt;Updates (RFC 8251) Are on by Default&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://people.xiph.org/~jm/opus/opus-1.2/&quot;&gt;Opus 1.2 demo&lt;/a&gt; discussed some updates being made in the Opus standard. Back then, the changes were disabled by default in the code because they were not yet approved by the IETF. Since then, they have been published as &lt;a href=&quot;https://tools.ietf.org/html/rfc8251&quot;&gt;RFC 8251&lt;/a&gt; and Opus 1.3 now enabled the changes by default. They can be disabled by configuring with &lt;span&gt;--disable-rfc8251&lt;/span&gt;, but there is no reason to do so, since the changes do not affect interoperability in any way.&lt;/p&gt;
&lt;h3&gt;Security Improvements&lt;/h3&gt;
&lt;p&gt;Opus has been extensively tested and fuzzed for several years now. As of version 1.3, Opus is now attempting to defend itself from bugs outside of its scope, i.e. in the applications calling the API. While C makes it impossible to be fully shielded from the application code (e.g. it's not even possible to verify that a pointer is valid), there are still some checks we can make. One of the ways a bug in the application can cause Opus to crash is by corrupting the encoder or decoder state and then calling Opus with the corrupted state.&lt;/p&gt;
&lt;p&gt;Another security improvement in 1.3 comes from assertions. Like many other packages, Opus used to only enable assertions for &quot;debug&quot; builds. In 1.3, the assertions that meet the following criteria are now enabled by default:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Failure would be pretty scary (potential security problem)&lt;/li&gt;
&lt;li&gt;Negligible run-time cost (CPU)&lt;/li&gt;
&lt;li&gt;Low risk of false positive (assertion failing when nothing bad happened)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The result is again that should an attacker manage to cause (directly or indirectly) a corruption in Opus, the application will be more likely to just crash rather than be taken over.&lt;/p&gt;
&lt;address readability=&quot;0&quot;&gt;—Jean-Marc Valin (&lt;a href=&quot;mailto:jmvalin@jmvalin.ca&quot;&gt;jmvalin@jmvalin.ca&lt;/a&gt;) October 18, 2018&lt;p&gt;Special thanks to the Chrome Media Audio team for their work on ambisonics and to&lt;br/&gt;the AudioLab at the York University Department of Electronic Engineering for the audio samples.&lt;/p&gt;&lt;/address&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;First and foremost: &lt;a href=&quot;https://www.opus-codec.org/&quot;&gt;The Opus Project Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Opus 1.3 builds on the &lt;a href=&quot;https://people.xiph.org/~jm/opus/opus-1.2/&quot;&gt;Opus 1.2 improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The basic Opus techniques for music coding are described in the AES paper: &lt;a href=&quot;https://jmvalin.ca/papers/aes135_opus_celt.pdf&quot;&gt;High-Quality, Low-Delay Music Coding in the Opus Codec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The basic Opus techniques for speech coding are described in this other AES paper: &lt;a href=&quot;https://jmvalin.ca/papers/aes135_opus_silk.pdf&quot;&gt;Voice Coding with Opus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia contributors, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ambisonics&quot;&gt;Ambisonics&lt;/a&gt;, Wikipedia, The Free Encyclopedia, 2018&lt;/li&gt;
&lt;li&gt;J. Skoglund, M. Graczyk, &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-codec-ambisonics&quot;&gt;Ambisonics in an Ogg Opus Container&lt;/a&gt;, IETF draft.&lt;/li&gt;
&lt;li&gt;Join our development discussion in &lt;a href=&quot;irc://irc.freenode.net/opus&quot;&gt;#opus at irc.freenode.net&lt;/a&gt; (→&lt;a href=&quot;https://webchat.freenode.net/?channels=opus&quot; onclick=&quot;document.getElementById('chatbox').innerHTML='&amp;lt;iframe src=\'https://webchat.freenode.net/?channels=opus\' width=800 height=600/&amp;gt;';return false;&quot;&gt;web interface&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;&lt;div class=&quot;et&quot; readability=&quot;6.5&quot;&gt;

&lt;div class=&quot;etcenter&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Jean-Marc's Opus documentation work is sponsored by the Mozilla Corporation.&lt;br/&gt;(C) Copyright 2018 Mozilla and Xiph.Org&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;etright&quot;&gt;
&lt;div class=&quot;etcontent&quot;&gt;&lt;a href=&quot;https://mozilla.org/&quot;&gt;&lt;img src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/moz-logo-bw-rgb.png&quot; alt=&quot;Mozilla&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;</description>
<pubDate>Thu, 18 Oct 2018 19:08:04 +0000</pubDate>
<dc:creator>remir</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://people.xiph.org/~jm/opus/opus-1.3/</dc:identifier>
</item>
<item>
<title>Repair is as important as innovation</title>
<link>https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</link>
<guid isPermaLink="true" >https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</guid>
<description>&lt;div readability=&quot;31&quot;&gt;
&lt;div class=&quot;blog-post__asideable-content blog-post__asideable-content--meta&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;blog-post__section&quot; itemprop=&quot;articleSection&quot;&gt;&lt;span&gt;Print edition | Finance and economics&lt;/span&gt;&lt;/h3&gt;
&lt;time class=&quot;blog-post__datetime&quot; itemprop=&quot;dateCreated&quot; datetime=&quot;2018-10-20T00:00:00Z&quot;&gt;Oct 20th 2018&lt;/time&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;div itemprop=&quot;description&quot; readability=&quot;103&quot;&gt;
&lt;p&gt;&lt;span data-caps=&quot;initial&quot;&gt;I&lt;/span&gt;&lt;small&gt;N 1533 A&lt;/small&gt; noblewoman in Calais presented a visiting grandee with a peculiar gift: her personal toothpick, which, she was eager to point out, she had used for seven years. Whether it pleased her guest is not known, according to Hazel Forsyth, a curator at the Museum of London. But the story amused Ms Forsyth’s audience at last month’s “Festival of Maintenance”, a conference dedicated to keeping things in good nick.&lt;/p&gt;
&lt;div class=&quot;newsletter-form newsletter-form--inline&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;newsletter-form__message&quot; readability=&quot;7&quot;&gt;&lt;strong&gt;Get our daily newsletter&lt;/strong&gt;
&lt;p&gt;Upgrade your inbox and get our Daily Dispatch and Editor's Picks.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;latest-updates-panel__container latest-updates-panel__container--blog-post&quot;&gt;

&lt;ul class=&quot;latest-updates-panel__body&quot;&gt;&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Temporary economic downturns have long-lasting consequences&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;L3 and Harris announce the biggest-ever defence merger&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Is economic war looming between Saudi Arabia and America?&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;The British Museum’s new Islamic world gallery is a triumph&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Democrats are winning voters’ wallets—and perhaps their hearts as well&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;The Supreme Court takes a public-access TV case&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Events about making new things are ten a penny. Less common are events about keeping things as good as new. Maintenance lacks the glamour of innovation. It is mostly noticed in its absence—the tear in a shirt, the mould on a ceiling, the spluttering of an engine. Not long ago David Edgerton of King’s College London, who also spoke at the festival, drove across the bridge in Genoa that collapsed in August, killing 43 people (pictured). “We’re encouraged to pride ourselves on all being innovators and entrepreneurs,” he said. Maintenance is often dismissed as mere drudgery. But in fact, as he pointed out, repairing things is often trickier than making them.&lt;/p&gt;

&lt;p&gt;It is also more difficult for economists to measure. The discipline’s most prominent statistic, &lt;small&gt;GDP,&lt;/small&gt; is gross (as opposed to net) because it leaves out the cost of wear and tear. To calculate these costs, statisticians must estimate the lifespan of a country’s assets and make assumptions about the way they deteriorate. Some are like light bulbs, which work well until they stop altogether. Economists call this the “one-hoss shay” case, an allusion to a poem by Oliver Wendell Holmes. It imagines a horse-drawn cart built so well that it never broke down until it eventually fell apart, victim of “a general flavour of mild decay”.&lt;/p&gt;
&lt;p&gt;Other assets are less poetic. Many are assumed to wear out in a “straight line”, deteriorating by the same amount each year. Others lose a steady percentage of their diminishing worth. Japan assumes that houses lose 4% of their remaining value each year. That may be one reason why the costs of wear and tear (or “consumption of fixed capital”) are reckoned to be so much higher in Japan (22% of &lt;small&gt;GDP)&lt;/small&gt; than in many other countries, where houses are assumed to age more gracefully.&lt;/p&gt;
&lt;p&gt;And how much do economies spend fighting decay? No one knows, partly because most maintenance is performed in-house, not purchased on the market. The best numbers are collected by Canada, where firms spent 3.3% of &lt;small&gt;GDP&lt;/small&gt; on repairs in 2016, more than twice as much as the country spends on research and development.&lt;/p&gt;
&lt;div class=&quot;component-image blog-post__image&quot;&gt;&lt;img src=&quot;https://cdn.static-economist.com/sites/default/files/images/print-edition/20181020_FNC476.png&quot; alt=&quot;&quot; class=&quot;component-image__img blog-post-article-image blog-post-article-image__slim&quot; srcset=&quot;/sites/default/files/imagecache/200-width/images/print-edition/20181020_FNC476.png 200w, /sites/default/files/imagecache/300-width/images/print-edition/20181020_FNC476.png 300w, /sites/default/files/imagecache/400-width/images/print-edition/20181020_FNC476.png 400w, /sites/default/files/imagecache/640-width/images/print-edition/20181020_FNC476.png 640w, /sites/default/files/imagecache/800-width/images/print-edition/20181020_FNC476.png 800w, /sites/default/files/imagecache/1000-width/images/print-edition/20181020_FNC476.png 1000w, /sites/default/files/imagecache/1200-width/images/print-edition/20181020_FNC476.png 1200w, /sites/default/files/imagecache/1280-width/images/print-edition/20181020_FNC476.png 1280w, /sites/default/files/imagecache/1600-width/images/print-edition/20181020_FNC476.png 1600w&quot; sizes=&quot;(min-width: 600px) 640px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
&lt;p&gt;At the festival, Mr Edgerton cited the old idea of “hydraulic despotism”: the argument that the tyrannies of the ancient East arose to force people to maintain fragile irrigation systems. In those societies, to repair was to repress. But some today have the opposite concern. They see maintenance and repair as a right they are in danger of losing to companies that hoard spare parts and information too jealously.&lt;/p&gt;
&lt;p&gt;In March California became the 18th state in America to introduce a bill supporting the “right to repair”, by obliging manufacturers to make manuals more widely available to customers and independent repair shops. The European Commission has proposed something similar for dishwashers, washing machines and the like. Some think they have the right to repair public property, too. One speaker at the festival, who called himself the “guerrilla groundsman” and masked his identity with a helmet, described his surreptitious efforts to clean bridges and repaint signs in Cambridge without authorisation. In a disposable society, to repair is to rebel.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Correction (October 19th 2018):&lt;/strong&gt; We previously stated that David Edgerton was at Imperial College London. In fact, he is at King’s College London. This has been amended. &lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 18 Oct 2018 18:02:38 +0000</pubDate>
<dc:creator>sinak</dc:creator>
<og:description>Maintenance lacks the glamour of innovation—and is harder to measure</og:description>
<og:image>https://cdn.static-economist.com/sites/default/files/images/2018/10/articles/main/20181020_fnp503.jpg</og:image>
<og:type>article</og:type>
<og:url>https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</og:url>
<og:title>Repair is as important as innovation</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</dc:identifier>
</item>
<item>
<title>OOP Is Dead, Long Live OOP</title>
<link>https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</link>
<guid isPermaLink="true" >https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</guid>
<description>&lt;p&gt;Seeing this has been linked outside of game-development circles: &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system&quot; rel=&quot;external nofollow&quot;&gt;ECS&lt;/a&gt;&quot; (&lt;em&gt;this wikipedia page is garbage, btw -- it conflates EC-frameworks and ECS-frameworks, which aren't the same...&lt;/em&gt;) is a faux-pattern circulated within game-dev communities, which is basically a version of the relational model, where &quot;entities&quot; are just ID's that represent a formless object, &quot;components&quot; are rows in specific tables that reference an ID, and &quot;systems&quot; are procedural code that can modify the components. This &quot;pattern&quot; is always posed as a solution to an over-use of inheritance, without mentioning that an over-use of inheritance is actually bad under OOP guidelines. Hence the rant. This isn't the &quot;one true way&quot; to write software. It's getting people to actually look at existing design guidelines.&lt;/p&gt;

&lt;p&gt;This blog post is inspired by &lt;a href=&quot;https://twitter.com/aras_p&quot; rel=&quot;external nofollow&quot;&gt;Aras Pranckevičius&lt;/a&gt;' recent publication of a talk aimed at junior programmers, designed to get them to come to terms with new &quot;ECS&quot; architectures. Aras follows the typical pattern (&lt;em&gt;explained below&lt;/em&gt;), where he shows some terrible OOP code and then shows that the relational model is a great alternative solution (&lt;em&gt;but calls it &quot;ECS&quot; instead of relational&lt;/em&gt;). This is not a swipe at Aras at all - I'm a fan of his work and commend him on the great presentation! The reason I'm picking on his presentation in particular instead of the hundred other ECS posts that have been made on the interwebs, is because he's gone through the effort of actually publishing a git repository to go along with his presentation, which contains a simple little &quot;game&quot; as a playground for demonstrating different architecture choices. This tiny project makes it easy for me to actually, concretely demonstrate my points, so, thanks Aras!&lt;/p&gt;
&lt;p&gt;You can find Aras'  slides at &lt;a href=&quot;http://aras-p.info/texts/files/2018Academy%20-%20ECS-DoD.pdf&quot; rel=&quot;external nofollow&quot;&gt;http://aras-p.info/texts/files/2018Academy - ECS-DoD.pdf&lt;/a&gt; and the code at &lt;a href=&quot;https://github.com/aras-p/dod-playground&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/aras-p/dod-playground&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm not going to analyse the final ECS architecture from that talk (yet?), but I'm going to focus on the straw-man &quot;bad OOP&quot; code from the start. I'll show what it would look like if we actually fix all of the OOD rule violations.&lt;br/&gt;&lt;strong&gt;Spoiler: fixing the OOD violations actually results in a similar performance improvement to Aras' ECS conversion, plus it actually uses less RAM and requires less lines of code than the ECS version!&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;TL;DR: Before you decide that OOP is shit and ECS is great, stop and learn OOD (to know how to use OOP properly) and learn relational (to know how to use ECS properly too).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I've been a long-time ranter in many &quot;ECS&quot; threads on the forum, partly because I don't think it deserves to exist as a term (&lt;em&gt;spoiler: it's just a an ad-hoc version of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Relational_model&quot; rel=&quot;external nofollow&quot;&gt;relational model&lt;/a&gt;&lt;/em&gt;), but because almost &lt;em&gt;every single&lt;/em&gt; blog, presentation, or article that promotes the &quot;ECS&quot; pattern follows the same structure:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Show some terrible OOP code, which has a terribly flawed design based on an over-use of inheritance (and incidentally, a design that breaks many OOD rules).&lt;/li&gt;
&lt;li&gt;Show that composition is a better solution than inheritance (and don't mention that OOD actually teaches this same lesson).&lt;/li&gt;
&lt;li&gt;Show that the relational model is a great fit for games (but call it &quot;ECS&quot;).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This structure grinds my gears because:&lt;br/&gt;&lt;strong&gt;(A)&lt;/strong&gt; it's a straw-man argument.. it's apples to oranges (bad code vs good code)... which just feels dishonest, even if it's unintentional and not actually required to show that your new architecture is good,&lt;br/&gt;but more importantly:&lt;br/&gt;&lt;strong&gt;(B)&lt;/strong&gt; it has the side effect of suppressing knowledge and unintentionally discouraging readers from interacting with half a century of existing research. The relational model was first written about in the 1960's. Through the 70's and 80's this model was refined extensively. There's common beginners questions like &quot;&lt;em&gt;which class should I put this data in?&lt;/em&gt;&quot;, which is often answered in vague terms like &quot;&lt;em&gt;you just need to gain experience and you'll know by feel&lt;/em&gt;&quot;... but in the 70's this question was extensively pondered and solved in the general case in formal terms; it's called &lt;a href=&quot;https://en.wikipedia.org/wiki/Database_normalization#Normal_forms&quot; rel=&quot;external nofollow&quot;&gt;database normalization&lt;/a&gt;. By ignoring existing research and presenting ECS as a completely new and novel solution, you're hiding this knowledge from new programmers.&lt;/p&gt;
&lt;p&gt;Object oriented programming dates back just as far, if not further (&lt;em&gt;work in the 1950's began to explore the style&lt;/em&gt;)! However, it was in the 1990's that OO became a fad - hyped, viral and very quickly, &lt;em&gt;the&lt;/em&gt; dominant programming paradigm. A slew of new OO languages exploded in popularity including Java and (&lt;em&gt;the standardized version of&lt;/em&gt;) C++. However, because it was a hype-train, everyone &lt;em&gt;needed&lt;/em&gt; to know this new buzzword to put on their resume, yet no one really groked it. These new languages had added a lot of OO features as keywords -- &lt;em&gt;class&lt;/em&gt;, &lt;em&gt;virtual&lt;/em&gt;, &lt;em&gt;extends&lt;/em&gt;, &lt;em&gt;implements&lt;/em&gt; -- and I would argue that it's at this point that OO split into two distinct entities with a life of their own.&lt;br/&gt;I will refer to the use of these OO-inspired language features as &quot;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; rel=&quot;external nofollow&quot;&gt;OOP&lt;/a&gt;&lt;/strong&gt;&quot;, and the use of OO-inspired design/architecture techniques as &quot;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_design&quot; rel=&quot;external nofollow&quot;&gt;OOD&lt;/a&gt;&lt;/strong&gt;&quot;. Everyone picked up OOP very quickly. Schools taught OO classes that were efficient at churning out new OOP programmers.... yet knowledge of OOD lagged behind.&lt;/p&gt;
&lt;p&gt;I argue that code that uses OOP language features, but does not follow OOD design rules &lt;strong&gt;is not OO code&lt;/strong&gt;. Most anti-OOP rants are eviscerating code that is not actually OO code.&lt;br/&gt;OOP code has a very bad reputation, I assert in part due to the fact that, most OOP code does not follow OOD rules, thus isn't actually &quot;true&quot; OO code.&lt;/p&gt;

&lt;p&gt;As mentioned above, the 1990's was the peak of the &quot;OO fad&quot;, and it's during this time that &quot;bad OOP&quot; was probably at its worst. If you studied OOP during this time, you probably learned &quot;The 4 pillars of OOP&quot;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Abstraction&lt;/li&gt;
&lt;li&gt;Encapsulation&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I'd prefer to call these &quot;4 tools of OOP&quot; rather than 4 pillars. These are tools that you &lt;em&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/em&gt; use to solve problems. Simply learning how a tool works is not enough though, you need to know when you &lt;strong&gt;&lt;em&gt;should&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; &lt;/em&gt;be using them... It's irresponsible for educators to teach people a new tool without also teaching them when it's appropriate to use each of them.  In the early 2000's, there was a push-back against the rampant misuse of these tools, a kind of second-wave of OOD thought. Out of this came the &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID&quot; rel=&quot;external nofollow&quot;&gt;SOLID&lt;/a&gt; mnemonic to use as a quick way to evaluate a design's strength. Note that most of these bits of advice were well actually widely circulated in the 90's, but didn't yet have the cool acronym to cement them as the five core rules...&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; rel=&quot;external nofollow&quot;&gt;Si&lt;/a&gt;&lt;a href=&quot;http://go.gamedev.net/?id=13722X707581&amp;amp;xs=1&amp;amp;isjs=1&amp;amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSingle_responsibility_principle&amp;amp;xguid=bec081ca5481b60ce2a074abf8de0dd2&amp;amp;xuuid=5180b656273dda91d97c44dcd5034ff2&amp;amp;xsessid=f6b94a3c87ce1e392161ce21c5adfe14&amp;amp;xcreo=0&amp;amp;xed=0&amp;amp;sref=https%3A%2F%2Fwww.gamedev.net%2Fblogs%2Fentry%2F2265481-oop-is-dead-long-live-oop%2F%3FcsrfKey%3Dd4c2447e52a68c8aeafbe41954c76c1e%26do%3Dedit&amp;amp;pref=https%3A%2F%2Fwww.gamedev.net%2Fblogs%2Fentry%2F2265481-oop-is-dead-long-live-oop%2F&amp;amp;xtz=-600&amp;amp;abp=1&amp;amp;jv=13.10.3-2&amp;amp;bv=2.5.1&quot; rel=&quot;external nofollow&quot;&gt;ngle responsibility principle&lt;/a&gt;&lt;/strong&gt;. Every class should have one reason to change. If class &quot;A&quot; has two responsibilities, create a new class &quot;B&quot; and &quot;C&quot; to handle each of them in isolation, and then compose &quot;A&quot; out of &quot;B&quot; and &quot;C&quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Open/closed_principle&quot; rel=&quot;external nofollow&quot;&gt;Open/closed principle&lt;/a&gt;&lt;/strong&gt;. Software changes over time (&lt;em&gt;i.e. maintenance is important&lt;/em&gt;). Try to put the parts that are likely to change into &lt;em&gt;implementations&lt;/em&gt; (&lt;em&gt;i.e. concrete classes&lt;/em&gt;) and build &lt;em&gt;interfaces&lt;/em&gt; around the parts that are unlikely to change (&lt;em&gt;e.g. abstract base classes&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot; rel=&quot;external nofollow&quot;&gt;Liskov substitution principle&lt;/a&gt;&lt;/strong&gt;. Every implementation of an interface needs to 100% comply the requirements of that interface. i.e. any algorithm that works on the interface, should continue to work for every implementation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_segregation_principle&quot; rel=&quot;external nofollow&quot;&gt;Interface segregation principle&lt;/a&gt;&lt;/strong&gt;. Keep interfaces as small as possible, in order to ensure that each part of the code &quot;knows about&quot; the least amount of the code-base as possible. i.e. avoid unnecessary dependencies. This is also just good advice in C++ where compile times suck if you don't follow this advice &lt;span&gt;&lt;img alt=&quot;:D&quot; data-emoticon=&quot;&quot; height=&quot;20&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/emoticons/biggrin.png&quot; data-pagespeed-lazy-srcset=&quot;https://www.gamedev.net/uploads/emoticons/biggrin@2x.png 2x&quot; title=&quot;:D&quot; width=&quot;20&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt; &lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle&quot; rel=&quot;external nofollow&quot;&gt;Dependency inversion principle&lt;/a&gt;&lt;/strong&gt;. Instead of having two concrete implementations communicate directly (and depend on each other), they can usually be decoupled by formalizing their communication interface as a third class that acts as an interface between them. This could be an abstract base class that defines the method calls used between them, or even just a &lt;a href=&quot;https://en.wikipedia.org/wiki/Plain_old_data&quot; rel=&quot;external nofollow&quot;&gt;POD&lt;/a&gt; struct that defines the data passed between them.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Not included in the SOLID acronym, but I would argue is just as important is the:&lt;br/&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot; rel=&quot;external nofollow&quot;&gt;Composite reuse principle&lt;/a&gt;&lt;/strong&gt;. Composition is &lt;em&gt;the right default™&lt;/em&gt;. Inheritance should be reserved for use when it's absolutely required.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This gives us SOLID-C(++) &lt;span&gt;&lt;img alt=&quot;:)&quot; data-emoticon=&quot;&quot; height=&quot;20&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/emoticons/smile.png&quot; data-pagespeed-lazy-srcset=&quot;https://www.gamedev.net/uploads/emoticons/smile@2x.png 2x&quot; title=&quot;:)&quot; width=&quot;20&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;From now on, I'll refer to these by their three letter acronyms -- SRP, OCP, LSP, ISP, DIP, CRP...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A few other notes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In OOD, &lt;em&gt;interfaces&lt;/em&gt; and &lt;em&gt;implementations&lt;/em&gt; are ideas that don't map to any specific OOP keywords. In C++, we often create interfaces with &lt;em&gt;abstract base classes&lt;/em&gt; and &lt;em&gt;virtual functions&lt;/em&gt;, and then &lt;em&gt;implementations &lt;/em&gt;inherit from those base classes... but that is just one specific way to achieve the idea of an interface. In C++, we can also use &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/pimpl&quot; rel=&quot;external nofollow&quot;&gt;PIMPL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Opaque_pointer&quot; rel=&quot;external nofollow&quot;&gt;opaque pointers&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Duck_typing&quot; rel=&quot;external nofollow&quot;&gt;duck typing&lt;/a&gt;, typedefs, etc... You can create an OOD design and then implement it in C, where there aren't any OOP language keywords! So when I'm talking about &lt;em&gt;interfaces&lt;/em&gt; here, I'm not necessarily talking about &lt;em&gt;virtual &lt;/em&gt;functions -- I'm talking about the idea of &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_hiding&quot; rel=&quot;external nofollow&quot;&gt;implementation hiding&lt;/a&gt;. Interfaces &lt;em&gt;can&lt;/em&gt; be &lt;a href=&quot;https://en.wikipedia.org/wiki/Polymorphism_(computer_science)&quot; rel=&quot;external nofollow&quot;&gt;polymorphic&lt;/a&gt;, but most often they are not! A good use for polymorphism is rare, but interfaces are fundamental to all software.
&lt;ul&gt;&lt;li&gt;As hinted above, if you create a POD structure that simply stores some data to be passed from one class to another, then that struct is acting as an &lt;em&gt;interface &lt;/em&gt;- it is a formal &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_definition_language&quot; rel=&quot;external nofollow&quot;&gt;data definition&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Even if you just make a single class in isolation with a &lt;em&gt;public&lt;/em&gt; and a &lt;em&gt;private&lt;/em&gt; section, everything in the public section is the &lt;em&gt;interface&lt;/em&gt; and everything in the private section is the &lt;em&gt;implementation.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Inheritance actually has (at least) two types -- interface inheritance, and implementation inheritance.
&lt;ul&gt;&lt;li&gt;In C++, interface inheritance includes abstract-base-classes with pure-virtual functions, PIMPL, conditional typedefs. In Java, interface inheritance is expressed with the &lt;em&gt;implements&lt;/em&gt; keyword.&lt;/li&gt;
&lt;li&gt;In C++, implementation inheritance occurs any time a base classes contains anything besides pure-virtual functions. In Java, implementation inheritance is expressed with the &lt;em&gt;extends&lt;/em&gt; keyword.&lt;/li&gt;
&lt;li&gt;OOD has a lot to say about interface-inheritance, but implementation-inheritance should usually be treated as a bit of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot; rel=&quot;external nofollow&quot;&gt;code smell&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And lastly I should probably give a few examples of terrible OOP education and how it results in bad code in the wild (and OOP's bad reputation).&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;When you were learning about hierarchies / inheritance, you probably had a task something like:&lt;br/&gt;&lt;strong&gt;&lt;em&gt;Let's say you have a university app that contains a directory of Students and Staff. We can make a Person base class, and then a Student class and a Staff class that inherit from Person!&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;Nope, nope nope. Let me stop you there. The unspoken sub-text beneath the LSP is that &lt;em&gt;class-hierarchies&lt;/em&gt; and &lt;em&gt;the algorithms that operate on them &lt;/em&gt;are symbiotic. They're two halves of a whole program. OOP is an extension of procedural programming, and it's still mainly about those procedures. If we don't know what kinds of algorithms are going to be operating on &lt;em&gt;Students &lt;/em&gt;and &lt;em&gt;Staff&lt;/em&gt; (&lt;em&gt;and which algorithms would be simplified by polymorphism&lt;/em&gt;) then it's downright irresponsible to dive in and start designing class hierarchies. You have to know the algorithms &lt;em&gt;and&lt;/em&gt; the data first.&lt;/li&gt;
&lt;li&gt;When you were learning about hierarchies / inheritance, you probably had a task something like:&lt;br/&gt;&lt;strong&gt;&lt;em&gt;Let's say you have a shape class. We could also have squares and rectangles as sub-classes. Should we have square &lt;/em&gt;is-a&lt;em&gt; rectangle, or &lt;/em&gt;&lt;em&gt;rectangle &lt;/em&gt;is-a&lt;em&gt; square?&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;This is actually a good one to demonstrate the difference between implementation-inheritance and interface-inheritance.
&lt;ul&gt;&lt;li&gt;If you're using the implementation-inheritance mindset, then the LSP isn't on your mind at all and you're only thinking practically about trying to reuse code using inheritance as a tool.&lt;br/&gt;From this perspective, the following makes perfect sense:&lt;br/&gt;struct Square { int width; }; struct Rectangle : Square { int height; };&lt;br/&gt;A square just has width, while rectangle has a width + height, so extending the square with a height member gives us a rectangle!
&lt;ul&gt;&lt;li&gt;As you might have guessed, OOD says that doing this is (&lt;em&gt;probably&lt;/em&gt;) wrong. I say &lt;em&gt;probably&lt;/em&gt; because you can argue over the implied specifications of the interface here... but whatever.&lt;br/&gt;A square always has the same height as its width, so from the square's interface, it's completely valid to assume that its area is &quot;width * width&quot;.&lt;br/&gt;By inheriting from square, the rectangle class (according to the LSP) &lt;strong&gt;must &lt;/strong&gt;obey the rules of square's interface. Any algorithm that works correctly with a square, must also work correctly with a rectangle.&lt;/li&gt;
&lt;li&gt;Take the following algorithm: std::vector&amp;lt;Square*&amp;gt; shapes; int area = 0; for(auto s : shapes) area += s-&amp;gt;width * s-&amp;gt;width;&lt;br/&gt;This will work correctly for squares (producing the sum of their areas), but will not work for rectangles.&lt;br/&gt;Therefore, Rectangle violates the LSP rule.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If you're using the interface-inheritance mindset, then neither Square or Rectangle will inherit from each other. The interface for a square and rectangle are actually different, and one is not a super-set of the other.&lt;/li&gt;
&lt;li&gt;So OOD actually discourages the use of implementation-inheritance. As mentioned before, if you want to re-use code, OOD says that composition is the right way to go!
&lt;ul&gt;&lt;li&gt;For what it's worth though, the &lt;em&gt;correct&lt;/em&gt; version of the above (bad) implementation-inheritance hierarchy code in C++ is:&lt;br/&gt;struct Shape { virtual int area() const = 0; };&lt;br/&gt;struct Square : public virtual Shape { virtual int area() const { return width * width; }; int width; };&lt;br/&gt;struct Rectangle : private Square, public virtual Shape { virtual int area() const { return width * height; }; int height; };
&lt;ul&gt;&lt;li&gt;&quot;public virtual&quot; means &quot;implements&quot; in Java. For use when implementing an interface.&lt;/li&gt;
&lt;li&gt;&quot;private&quot; allows you to extend a base class without also inheriting its interface -- in this case, Rectangle is-&lt;strong&gt;not&lt;/strong&gt;-a Square, even though it's inherited from it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I don't recommend writing this kind of code, but if you do like to use implementation-inheritance, this is the way that you're supposed to be doing it!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;TL;DR - your OOP class told you what inheritance was. Your missing OOD class should have told you not to use it 99% of the time!&lt;/p&gt;

&lt;p&gt;With all that background out of the way, let's jump into Aras' starting point -- the so called &quot;typical OOP&quot; starting point.&lt;br/&gt;Actually, one last gripe -- Aras calls this code &quot;traditional OOP&quot;, which I object to. This code may be typical of OOP in the wild, but as above, it breaks all sorts of core OO rules, so it should not all all be considered traditional.&lt;/p&gt;
&lt;p&gt;I'm going to start from the earliest commit before he starts fixing the design towards &quot;ECS&quot;: &lt;a href=&quot;https://github.com/aras-p/dod-playground/blob/3529f232510c95f53112bbfff87df6bbc6aa1fae/source/game.cpp&quot; rel=&quot;external nofollow&quot;&gt;&quot;Make it work on Windows again&quot; 3529f232510c95f53112bbfff87df6bbc6aa1fae&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;com&quot;&gt;// -------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// super simple &quot;component system&quot;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typedef&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span&gt;vector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typedef&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span&gt;vector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObjectVector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Component base class. Knows about the parent game object, and has some virtual methods.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;~&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Start&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;SetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;HasGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Game object class. Has an array of components.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;~&lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// game object owns the components; destroy them when deleting the game object&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// get a component of type T, or null if it does not exist on this game object&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;dynamic_cast&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&amp;gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// add a new component to this game object&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        assert&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;HasGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;());&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;SetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(*&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Start&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;Start&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;string m_Name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// The &quot;scene&quot;: array of game objects.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObjectVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Finds all components of given type in the whole scene&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;FindAllComponentsOfType&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; res&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            res&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; res&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Find one component of given type in the scene (returns first found one)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;FindOfType&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, 100 lines of code is a lot to dump at once, so let's work through what this is... Another bit of background is required -- it was popular for games in the 90's to use inheritance to solve all their code re-use problems. You'd have an Entity, extended by Character, extended by Player and Monster, etc... This is implementation-inheritance, as described earlier (&lt;em&gt;a code smell&lt;/em&gt;), and it seems like a good idea to begin with, but eventually results in a very inflexible code-base. Hence that OOD has the &quot;composition over inheritance&quot; rule, above. So, in the 2000's the &quot;composition over inheritance&quot; rule became popular, and gamedevs started writing this kind of code instead.&lt;/p&gt;
&lt;p&gt;What does this code do? Well, nothing good &lt;span&gt;&lt;img alt=&quot;:D&quot; data-emoticon=&quot;&quot; height=&quot;20&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/emoticons/biggrin.png&quot; data-pagespeed-lazy-srcset=&quot;https://www.gamedev.net/uploads/emoticons/biggrin@2x.png 2x&quot; title=&quot;:D&quot; width=&quot;20&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To put it in simple terms, &lt;strong&gt;this code is re-implementing the existing language feature of composition&lt;/strong&gt; as a runtime library instead of a language feature. You can think of it as if this code is actually constructing a new meta-language on top of C++, and a VM to run that meta-language on. In Aras' demo game, this code is not required (&lt;em&gt;we'll soon delete all of it!&lt;/em&gt;) and only serves to reduce the game's performance by about 10x.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;What does it actually do though? This is an &quot;&lt;strong&gt;E&lt;/strong&gt;ntity/&lt;strong&gt;C&lt;/strong&gt;omponent&quot; framework (&lt;em&gt;sometimes confusingly called an &quot;&lt;strong&gt;E&lt;/strong&gt;ntity/&lt;strong&gt;C&lt;/strong&gt;omponent system&quot;&lt;/em&gt;) -- but completely different to an &quot;&lt;strong&gt;E&lt;/strong&gt;ntity &lt;strong&gt;C&lt;/strong&gt;omponent &lt;strong&gt;S&lt;/strong&gt;ystem&quot; framework (&lt;em&gt;which are never called &quot;&lt;strong&gt;E&lt;/strong&gt;ntity &lt;strong&gt;C&lt;/strong&gt;omponent &lt;strong&gt;S&lt;/strong&gt;ystem systems&quot; for obvious reasons&lt;/em&gt;). It formalizes several &quot;EC&quot; rules:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;the game will be built out of featureless &quot;Entities&quot; (&lt;em&gt;called&lt;/em&gt; GameObjects &lt;em&gt;in this example&lt;/em&gt;), which themselves are composed out of &quot;Components&quot;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;GameObjects fulfill the &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_locator_pattern&quot; rel=&quot;external nofollow&quot;&gt;service locator pattern&lt;/a&gt; -  they can be queried for a child component by type. &lt;/li&gt;
&lt;li&gt;Components know which GameObject they belong to - they can locate sibling componets by querying their parent GameObject.&lt;/li&gt;
&lt;li&gt;Composition may only be one level deep (&lt;em&gt;Components may not own child components, GameObjects may not own child GameObjects&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;A GameObject may only have one component of each type (&lt;em&gt;some frameworks enforced this, others did not&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Every component (probably) changes over time in some unspecified way - so the interface includes &quot;virtual void Update&quot;.&lt;/li&gt;
&lt;li&gt;GameObjects belong to a scene, which can perform queries over all GameObjects (and thus also over all Components).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This kind of framework was very popular in the 2000's, and though restrictive, proved flexible enough to power countless numbers of games from that time and still today.&lt;/p&gt;
&lt;p&gt;However, it's not required. Your programming language already contains support for composition as a language feature - you don't need a bloated framework to access it... Why do these frameworks exist then? Well to be fair, they enable &lt;em&gt;dynamic, runtime&lt;/em&gt; composition. Instead of GameObject types being hard-coded, they can be loaded from data files. This is great to allow game/level designers to create their own kinds of objects... However, in most game projects, you have a very small number of designers on a project and a literal army of programmers, so I would argue it's not a key feature. Worse than that though, it's not even the only way that you could implement runtime composition! For example, Unity is based on C# as a &quot;scripting language&quot;, and many other games use alternatives such as Lua -- your designer-friendly tool can generate C#/Lua code to define new game-objects, without the need for this kind of bloated framework! We'll re-add this &quot;feature&quot; in a later follow-up post, in a way that doesn't cost us a 10x performance overhead...&lt;/p&gt;
&lt;p&gt;Let's evaluate this code according to OOD:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;GameObject::GetComponent uses dynamic_cast. Most people will tell you that dynamic_cast is a code smell - a strong hint that something is wrong. I would say that it indicates that you have an &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot; rel=&quot;external nofollow&quot;&gt;LSP&lt;/a&gt; violation on your hands -- you have some algorithm that's operating on the base interface, but it demands to know about different implementation details. That's the specific reason that it smells.&lt;/li&gt;
&lt;li&gt;GameObject is kind of ok if you imagine that it's fulfilling the service locator pattern.... but going beyond OOD critique for a moment, this pattern creates implicit links between parts of the project, and I feel (&lt;em&gt;without a wikipedia link to back me up with comp-sci knowledge&lt;/em&gt;) that implicit communication channels are an &lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern&quot; rel=&quot;external nofollow&quot;&gt;anti-pattern&lt;/a&gt; and explicit communication channels should be preferred. This same argument applies to bloated &quot;event frameworks&quot; that sometimes appear in games...&lt;/li&gt;
&lt;li&gt;I would argue that Component is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; rel=&quot;external nofollow&quot;&gt;SRP&lt;/a&gt; violation because its interface (&lt;em&gt;virtual void Update(time)&lt;/em&gt;) is too broad. The use of &quot;virtual void Update&quot; is pervasive within game development, but I'd also say that it is an anti-pattern. Good software should allow you to easily reason about the flow of control, and the flow of data. Putting &lt;em&gt;every single bit of gameplay code&lt;/em&gt; behind a &quot;virtual void Update&quot; call completely and utterly obfuscates both the flow of control and the flow of data. IMHO, invisible &lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&quot; rel=&quot;external nofollow&quot;&gt;side effects&lt;/a&gt;, a.k.a. &lt;a href=&quot;https://en.wikipedia.org/wiki/Action_at_a_distance_(computer_programming)&quot; rel=&quot;external nofollow&quot;&gt;action at a distance&lt;/a&gt;, is the most common source of bugs, and &quot;virtual void Update&quot; ensures that almost everything is an invisible side-effect.&lt;/li&gt;
&lt;li&gt;Even though the goal of the Component class is to enable composition, it's doing so via inheritance, which is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot; rel=&quot;external nofollow&quot;&gt;CRP&lt;/a&gt; violation.&lt;/li&gt;
&lt;li&gt;The one good part is that the example game code is bending over backwards to fulfill the SRP and ISP rules -- it's split into a large number of simple components with very small responsibilities, which is great for code re-use.&lt;br/&gt;However, it's not great as DIP -- many of the components do have direct knowledge of each other.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So, all of the code that I've posted above, can actually just be deleted. That whole framework. Delete GameObject (aka Entity in other frameworks), delete Component, delete FindOfType. It's all part of a useless VM that's breaking OOD rules and making our game terribly slow.&lt;/p&gt;

&lt;p&gt;If we delete our composition framework, and don't have a Component base class, how will our GameObjects manage to use composition and be built out of Components. As hinted in the heading, instead of writing that bloated VM and then writing our GameObjects on top of it in our weird meta-language, let's just write them in C++ because we're #*@!ing game programmers and that's literally our job.&lt;/p&gt;
&lt;p&gt;Here's the commit where the Entity/Component framework is deleted: &lt;a href=&quot;https://github.com/hodgman/dod-playground/commit/f42290d0217d700dea2ed002f2f3b1dc45e8c27c&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/hodgman/dod-playground/commit/f42290d0217d700dea2ed002f2f3b1dc45e8c27c&lt;/a&gt;&lt;br/&gt;Here's the original version of the source code: &lt;a href=&quot;https://github.com/hodgman/dod-playground/blob/3529f232510c95f53112bbfff87df6bbc6aa1fae/source/game.cpp&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/hodgman/dod-playground/blob/3529f232510c95f53112bbfff87df6bbc6aa1fae/source/game.cpp&lt;/a&gt;&lt;br/&gt;Here's the modified version of the source code: &lt;a href=&quot;https://github.com/hodgman/dod-playground/blob/f42290d0217d700dea2ed002f2f3b1dc45e8c27c/source/game.cpp&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/hodgman/dod-playground/blob/f42290d0217d700dea2ed002f2f3b1dc45e8c27c/source/game.cpp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The gist of the changes is:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Removing &quot;: public Component&quot; from each component type.&lt;/li&gt;
&lt;li&gt;I add a constructor to each component type.
&lt;ul&gt;&lt;li&gt;OOD is about encapsulating the state of a class, but since these classes are so small/simple, there's not much to hide -- the interface is a data description. However, one of the main reasons that encapsulation is a core pillar is that it allows us to ensure that &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_invariant&quot; rel=&quot;external nofollow&quot;&gt;class invariants&lt;/a&gt; are always true... or in the event that an invariant is violated, you hopefully only need to inspect the encapsulated implementation code in order to find your bug. In this example code, it's worth us adding the constructors to enforce a simple invariant -- all values must be initialized.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I rename the overly generic &quot;Update&quot; methods to reflect what they actually do -- UpdatePosition for MoveComponent and ResolveCollisions for AvoidComponent.&lt;/li&gt;
&lt;li&gt;I remove the three hard-coded blocks of code that resemble a template/prefab -- code that creates a GameObject containing specific Component types, and replace it with three C++ classes.&lt;/li&gt;
&lt;li&gt;Fix the &quot;virtual void Update&quot; anti-pattern.&lt;/li&gt;
&lt;li&gt;Instead of components finding each other via the service locator pattern, the game objects explicitly link them together during construction.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;The objects&lt;/h2&gt;
&lt;p&gt;So, instead of this &quot;VM&quot; code:&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// create regular objects that move&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; kObjectCount&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// position it within world bounds&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;PositionComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;PositionComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// setup a sprite for it (random sprite index from first 5), and initial white color&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;SpriteComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; sprite &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;SpriteComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;colorR &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;colorG &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;colorB &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;spriteIndex &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; rand&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;scale &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// make it move&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;MoveComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; move &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;MoveComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.7f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// make it avoid the bubble things&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;AvoidComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; avoid &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;AvoidComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;avoid&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We now have this normal C++ code:&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;kwd&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;RegularObject&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;PositionComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;SpriteComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;MoveComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; move&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;AvoidComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; avoid&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        
    &lt;/span&gt;&lt;span&gt;RegularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;WorldBoundsComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; move&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.7f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// position it within world bounds&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                      &lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// setup a sprite for it (random sprite index from first 5), and initial white color&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         rand&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
  
&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// create regular objects that move&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;kObjectCount&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; kObjectCount&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;The algorithms&lt;/h2&gt;
&lt;p&gt;Now the other big change is in the algorithms. Remember at the start when I said that interfaces and algorithms were symbiotic, and both should impact the design of the other? Well, the &quot;&lt;em&gt;virtual void Update&lt;/em&gt;&quot; anti-pattern is also an enemy here. The original code has a main loop algorithm that consists of just:&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// go through all objects&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Update all their components&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You might argue that this is nice and simple, but IMHO it's so, so bad. It's completely obfuscating both the &lt;em&gt;flow of control&lt;/em&gt; and the &lt;em&gt;flow of data&lt;/em&gt; within the game. If we want to be able to understand our software, if we want to be able to maintain it, if we want to be able to bring on new staff, if we want to be able to optimise it, or if we want to be able to make it run efficiently on multiple CPU cores, we need to be able to understand both the flow of control and the flow of data. So &quot;virtual void Update&quot; can die in a fire.&lt;/p&gt;
&lt;p&gt;Instead, we end up with a more explicit main loop that makes the flow of control much more easy to reason about (&lt;em&gt;the flow of data is still obfuscated here, we'll get around to fixing that in later commits&lt;/em&gt;)&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Update all positions&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span&gt;UpdatePosition&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;avoidThis&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span&gt;UpdatePosition&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        
        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Resolve all collisions&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span&gt;ResolveCollisions&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;avoidThis&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The downside of this style is that for &lt;em&gt;every single new object&lt;/em&gt; &lt;em&gt;type&lt;/em&gt; that we add to the game, we have to add a few lines to our main loop. I'll address / solve this in a future blog in this series.&lt;/p&gt;

&lt;p&gt;There's still a lot of outstanding OOD violations, some bad design choices, and lots of optimization opportunities remaining, but I'll get to them with the next blog in this series. As it stands at this point though, the &quot;fixed OOD&quot; version either almost matches or beats the final &quot;ECS&quot; code from the end of the presentation... And all we did was take the bad faux-OOP code and make it actually obey the rules of OOP (and delete 100 lines of code)!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;dod-chart1.png.0c63b0194df0f816028ace719b898cd3.png&quot; class=&quot;ipsImage ipsImage_thumbnailed&quot; data-fileid=&quot;48145&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/monthly_2018_10/dod-chart1.png.0c63b0194df0f816028ace719b898cd3.png&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt;&lt;/p&gt;

&lt;p&gt;There's much more ground that I'd like to cover here, including solving the remaining OOD issues, immutable objects (&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; rel=&quot;external nofollow&quot;&gt;functional style programming&lt;/a&gt;) and the benefits it can bring to reasoning about data flows, message passing, applying some DOD reasoning to our OOD code, applying some relational wisdom to our OOD code, deleting those &quot;entity&quot; classes that we ended up with and having purely components-only, different styles of linking components together (pointers vs handles), real world component containers, catching up to the ECS version with more optimization, and then further optimization that wasn't also present in Aras' talk (&lt;em&gt;such as threading / SIMD&lt;/em&gt;). No promises on the order that I'll get to these, or if, or when...&lt;/p&gt;

</description>
<pubDate>Thu, 18 Oct 2018 17:26:06 +0000</pubDate>
<dc:creator>starbugs</dc:creator>
<og:image>https://www.gamedev.net/uploads/monthly_2018_06/1057075231_banner_22_racing_series_video_game_real_time_strategy_racing-21.jpg.778e08f6121d36719d78a99f52ad080e.jpg</og:image>
<og:title>OOP is dead, long live OOP</og:title>
<og:type>object</og:type>
<og:url>https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</og:url>
<og:description>edit: Seeing this has been linked outside of game-development circles: ECS (this wikipedia page is garbage, btw -- it conflates EC-frameworks and ECS-frameworks, which arent the same...) is a faux-pattern circulated within game-dev communities, which is basically a version of the relational model...</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</dc:identifier>
</item>
<item>
<title>Encrypted SNI Comes to Firefox Nightly</title>
<link>https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</link>
<guid isPermaLink="true" >https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</guid>
<description>&lt;p&gt;TL;DR: Firefox Nightly now supports encrypting the &lt;a href=&quot;https://tools.ietf.org/rfcmarkup?doc=6066#section-3&quot;&gt;TLS Server Name Indication (SNI)&lt;/a&gt; extension, which helps prevent attackers on your network from learning your browsing history. You can enable encrypted SNI today and it will automatically work with any site that supports it. Currently, that means any site hosted by &lt;a href=&quot;https://blog.cloudflare.com/encrypt-that-sni-firefox-edition/&quot;&gt;Cloudflare&lt;/a&gt;, but we’re hoping other providers will add ESNI support soon.&lt;/p&gt;
&lt;h3&gt;Concealing Your Browsing History&lt;/h3&gt;
&lt;p&gt;Although an increasing fraction of Web traffic is &lt;a href=&quot;https://letsencrypt.org/stats/#percent-pageloads&quot;&gt;encrypted with HTTPS&lt;/a&gt;, that encryption isn’t enough to prevent network attackers from learning which sites you are going to. It’s true that HTTPS conceals the exact page you’re going to, but there are a number of ways in which the site’s identity leaks. This can itself be sensitive information: do you want the person at the coffee shop next to you to know you’re visiting cancer.org?&lt;/p&gt;
&lt;p&gt;There are four main ways in which browsing history information leaks to the network: the TLS certificate message,  DNS name resolution, the IP address of the server, and the TLS Server Name Indication extension. Fortunately, we’ve made good progress shutting down the first two of these: The new TLS 1.3 standard encrypts the server certificate by default and over the past several months, we’ve been &lt;a href=&quot;https://blog.mozilla.org/futurereleases/2018/09/13/dns-over-https-doh-testing-on-beta/&quot;&gt;exploring&lt;/a&gt; the use of DNS over HTTPS to protect DNS traffic. This is looking good and we are hoping to roll it out to all Firefox users over the coming months. The IP address remains a problem, but in many cases, multiple sites share the same IP address, so that leaves SNI.&lt;/p&gt;
&lt;h3&gt;Why do we need SNI anyway and why didn’t this get fixed before?&lt;/h3&gt;
&lt;p&gt;Ironically, the reason you need an SNI field is &lt;em&gt;because&lt;/em&gt; multiple servers share the same IP address. When you connect to the server, it needs to give you the right certificate to prove that you’re connecting to a legitimate server and not an attacker. However, if there is more than one server on the same IP address, then which certificate should it choose? The SNI field tells the server which host name you are trying to connect to, allowing it to choose the right certificate. In other words, SNI helps make large-scale TLS hosting work.&lt;/p&gt;
&lt;p&gt;We’ve known that SNI was a privacy problem from the beginning of TLS 1.3. The basic idea is easy: encrypt the SNI field (hence “encrypted SNI” or ESNI). Unfortunately every design we tried had drawbacks. The technical details are kind of complicated, but the basic story isn’t: every design we had for ESNI involved some sort of performance tradeoff and so it looked like only sites which were “sensitive” (i.e., you might want to conceal you went there) would be willing to enable ESNI. As you can imagine, that defeats the point, because if only sensitive sites use ESNI, then just using ESNI is itself a signal that your traffic demands a closer look. So, despite a lot of enthusiasm, we eventually decided to publish TLS 1.3 without ESNI.&lt;/p&gt;
&lt;p&gt;However, at the beginning of this year, we realized that there was actually a pretty good 80-20 solution: big Content Distribution Networks (CDNs) host a lot of sites all on the same machines. If they’re willing to convert all their customers to ESNI at once, then suddenly ESNI no longer reveals  a useful signal because the attacker can see what CDN you are going to anyway. This realization broke things open and enabled a &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-esni-01&quot;&gt;design&lt;/a&gt; for how to make ESNI work in TLS 1.3 (see Alessandro Ghedini’s &lt;a href=&quot;https://blog.cloudflare.com/encrypted-sni/&quot;&gt;writeup&lt;/a&gt; of the technical details.) Of course, this only works if you can mass-configure all the sites on a given set of servers, but that’s a pretty common configuration.&lt;/p&gt;
&lt;h3&gt;How do I get it?&lt;/h3&gt;
&lt;p&gt;This is brand-new technology and Firefox is the first browser to get it. At the moment we’re not ready to turn it on for all Firefox users. However, Nightly users can try out this enhancing feature now by performing the following steps: First, you need to make sure you have DNS over HTTPS enabled (see: &lt;a href=&quot;https://blog.nightly.mozilla.org/2018/06/01/improving-dns-privacy-in-firefox/&quot;&gt;https://blog.nightly.mozilla.org/2018/06/01/improving-dns-privacy-in-firefox/&lt;/a&gt;). Once you’ve done that, you also need to set the “network.security.esni.enabled” preference in about:config to “true”). This should automatically enable ESNI for any site that supports it. Right now, that’s just Cloudflare, which has enabled ESNI for all its customers, but we’re hoping that other providers will follow them. You can go to: &lt;a href=&quot;https://www.cloudflare.com/ssl/encrypted-sni/&quot;&gt;https://www.cloudflare.com/ssl/encrypted-sni/&lt;/a&gt; to check for yourself that it’s working.&lt;/p&gt;
&lt;h3&gt;What’s Next?&lt;/h3&gt;
&lt;p&gt;During the development of TLS 1.3 we found a number of problems where network devices (typically firewalls and the like) would break when you tried to use TLS 1.3. We’ve been pretty careful about the design, but it’s possible that we’ll see similar problems with ESNI. In order to test this, we’ll be running a set of experiments over the next few months and measuring for breakage. We’d also love to hear from you: if you enable ESNI and it works or causes any problems, &lt;a href=&quot;https://bugzilla.mozilla.org/enter_bug.cgi?format=guided#h=bugForm%7CCore%7CNetworking&quot;&gt;please let us know.&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 18 Oct 2018 17:14:51 +0000</pubDate>
<dc:creator>okket</dc:creator>
<og:title>Encrypted SNI Comes to Firefox Nightly</og:title>
<og:url>https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</og:url>
<og:description>TL;DR: Firefox Nightly now supports encrypting the TLS Server Name Indication (SNI) extension, which helps prevent attackers on your network from learning your browsing history. ...</og:description>
<og:image>https://blog.mozilla.org/security/wp-content/themes/OneMozilla/img/mozilla-wordmark.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</dc:identifier>
</item>
<item>
<title>Calculus Made Easy (1910)</title>
<link>http://calculusmadeeasy.org/</link>
<guid isPermaLink="true" >http://calculusmadeeasy.org/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;Calculus Made Easy&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;screen.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; media=&quot;only screen and (max-device-width: 480px)&quot; href=&quot;mobile.css&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;25.501064584812&quot;&gt;
&lt;hgroup&gt;
&lt;h2&gt;by&lt;br/&gt;Silvanus P. Thompson&lt;/h2&gt;
&lt;/hgroup&gt;&lt;center&gt;
&lt;h4&gt;What one fool can do, another can.&lt;/h4&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;h5&gt;(Ancient Simian Proverb.)&lt;/h5&gt;
&lt;/center&gt;

&lt;h3&gt;Table of Contents&lt;/h3&gt;

&lt;div class=&quot;pf clear&quot; readability=&quot;11.561822125813&quot;&gt;
&lt;h4&gt;About this book&lt;/h4&gt;
&lt;blockquote class=&quot;note&quot; readability=&quot;6.6315789473684&quot;&gt;
&lt;p&gt;Calculus Made Easy is a book on calculus originally published in 1910 by Silvanus P. Thompson, considered a classic and elegant introduction to the subject.&lt;/p&gt;

&lt;/blockquote&gt;
&lt;blockquote class=&quot;note&quot; readability=&quot;7.0545454545455&quot;&gt;
&lt;p&gt;I read &quot;Calculus Made Easy&quot; by Silvanus P. Thompson and it's still to this day my inspiration for explaining complex technical topics to lay people. It's a fantastic book, and even if you know math you &lt;em&gt;must&lt;/em&gt; read it if you want to understand how to teach complexity to others. &lt;small&gt;&lt;em&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=1299805&quot;&gt;(source)&lt;/a&gt;&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;/blockquote&gt;
&lt;blockquote class=&quot;note&quot; readability=&quot;6.1967213114754&quot;&gt;
&lt;p&gt;Thompson creates a warm, inviting environment where students will learn and grasp the true essence of calculus without any added fluff or overt technicality. &lt;small&gt;&lt;em&gt;&lt;a href=&quot;http://math-blog.com/mathematics-books/&quot;&gt;(source)&lt;/a&gt;&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;/blockquote&gt;
&lt;blockquote class=&quot;note&quot; readability=&quot;6.3698630136986&quot;&gt;
&lt;p&gt;Most college calculus texts weigh a ton; this one does not — it just gets to the point. This is how I learned calculus: my uncle gave me a copy. &lt;small&gt;&lt;em&gt;&lt;a href=&quot;http://math.ucr.edu/home//baez/books.html&quot;&gt;(source)&lt;/a&gt;&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h3&gt;Buy paper version&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/0312185480/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0312185480&amp;amp;linkCode=as2&amp;amp;tag=calculusma00d-20&amp;amp;linkId=349b72d6c16a7a454af34fe78ba419c4&quot;&gt;&lt;img class=&quot;cover&quot; src=&quot;http://calculusmadeeasy.org/cover.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/0312185480/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0312185480&amp;amp;linkCode=as2&amp;amp;tag=calculusma00d-20&amp;amp;linkId=349b72d6c16a7a454af34fe78ba419c4&quot;&gt;On Amazon.com&lt;/a&gt;*&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.shareasale.com/r.cfm?u=740877&amp;amp;b=385748&amp;amp;m=40674&amp;amp;afftrack=&amp;amp;urllink=www%2Ebiblio%2Ecom%2Fsearch%2Ephp%3Ftitle%3Dcalculus%2Bmade%2Beasy&quot;&gt;Second hand from Biblio.com&lt;/a&gt;*&lt;/p&gt;
&lt;h3&gt;What next?&lt;/h3&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Visual-Complex-Analysis-Tristan-Needham/dp/0198534469/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=ll1&amp;amp;tag=calculusmad0b-20&amp;amp;linkId=36f5fedef340e5c0c152cf95aa4f00c6&amp;amp;language=en_US&quot;&gt;&lt;img class=&quot;cover&quot; src=&quot;http://calculusmadeeasy.org/needham.jpg&quot; width=&quot;186&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Visual-Complex-Analysis-Tristan-Needham/dp/0198534469/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=ll1&amp;amp;tag=calculusmad0b-20&amp;amp;linkId=36f5fedef340e5c0c152cf95aa4f00c6&amp;amp;language=en_US&quot;&gt;Visual Complex Analysis&lt;/a&gt;* is legendary. Just as Calculus Made Easy it uses geometrical approach instead of usual symbolic one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;small&gt;&lt;small&gt;* Affiliate link&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;
&lt;h3&gt;About this edition &amp;amp; thanks&lt;/h3&gt;
&lt;p&gt;The text is based on &lt;a href=&quot;http://www.gutenberg.org/ebooks/33283&quot;&gt;the PDF version&lt;/a&gt; from Project Gutenberg converted to html by hand.&lt;/p&gt;
&lt;p&gt;Thanks to Paula Appling, Don Bindner, Chris Curnow, Andrew D. Hwang and Project Gutenberg Online Distributed Proofreading Team for preparing the original PDF.&lt;/p&gt;
&lt;p&gt;The theme is borrowed from &lt;a href=&quot;http://diveinto.html5doctor.com/&quot;&gt;Dive Into HTML5&lt;/a&gt; by &lt;a href=&quot;http://diveintohtml5.info/about.html&quot;&gt;Mark Pilgrim&lt;/a&gt; released under the &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;CC-BY-3.0&lt;/a&gt; license.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://diveintohtml5.info/legal.html&quot;&gt;Full legal notices&lt;/a&gt;. &lt;a href=&quot;https://github.com/nadvornix/calculus-made-easy&quot;&gt;Github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please send corrections, suggestions and comments on nadvornik.jiri@gmail.com &lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Thu, 18 Oct 2018 17:03:04 +0000</pubDate>
<dc:creator>luisb</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://calculusmadeeasy.org/</dc:identifier>
</item>
<item>
<title>Paper Airplane Designs</title>
<link>https://www.foldnfly.com/</link>
<guid isPermaLink="true" >https://www.foldnfly.com/</guid>
<description>&lt;p&gt;A database of paper airplanes with easy to follow folding instructions.&lt;/p&gt;













&lt;div class=&quot;plane tag_duration tag_acrobatic diff1 cut0&quot; readability=&quot;6.4444444444444&quot;&gt;&lt;a href=&quot;https://www.foldnfly.com/13.html#The-UFO&quot; title=&quot;This plane is shaped like a flying saucer.&quot;&gt;&lt;strong&gt;The UFO&lt;/strong&gt;&lt;/a&gt;
&lt;p&gt;&lt;span class=&quot;diff&quot;&gt;Medium&lt;/span&gt; time aloft, acrobatic&lt;/p&gt;
&lt;/div&gt;








&lt;div class=&quot;plane tag_distance tag_duration tag_acrobatic diff3 cut1&quot; readability=&quot;7.3125&quot;&gt;&lt;a href=&quot;https://www.foldnfly.com/21.html#Fast-Hawk&quot; title=&quot;Here is another bird like plane.&quot;&gt;&lt;strong&gt;Fast Hawk&lt;/strong&gt;&lt;/a&gt;
&lt;p&gt;&lt;span class=&quot;diff&quot;&gt;Expert&lt;/span&gt; distance, time aloft, acrobatic&lt;/p&gt;
&lt;/div&gt;


















&lt;div class=&quot;plane tag_distance tag_duration diff1 cut0&quot; readability=&quot;6.5882352941176&quot;&gt;&lt;a href=&quot;https://www.foldnfly.com/39.html#V-Wing&quot; title=&quot;Like a spy plane, this paper plane flies quietly and smoothly.&quot;&gt;&lt;strong&gt;V-Wing&lt;/strong&gt;&lt;/a&gt;
&lt;p&gt;&lt;span class=&quot;diff&quot;&gt;Medium&lt;/span&gt; distance, time aloft&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Nothing matched your selection. Please change your filters to find a paper airplane.&lt;/p&gt;
</description>
<pubDate>Thu, 18 Oct 2018 16:34:52 +0000</pubDate>
<dc:creator>wilsonfiifi</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.foldnfly.com/</dc:identifier>
</item>
<item>
<title>An Introduction to GPU Programming in Julia</title>
<link>https://nextjournal.com/sdanisch/julia-gpu-programming</link>
<guid isPermaLink="true" >https://nextjournal.com/sdanisch/julia-gpu-programming</guid>
<description>&lt;head&gt;&lt;title/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;1981.3760922527&quot;&gt;
&lt;p&gt;[&quot;^ &quot;,&quot;~:view-data&quot;,[&quot;^ &quot;,&quot;~:article-access?&quot;,false,&quot;~:article&quot;,[&quot;^ &quot;,&quot;~:article/preview&quot;,&quot;QmQtLzEYY97Rme9aS5Wsacg6PGwdPLdvmV1e6k2d8bj8y8&quot;,&quot;~:article/published-at&quot;,&quot;~m1539944858788&quot;,&quot;~:article/title&quot;,&quot;An Introduction to GPU Programming in Julia &quot;,&quot;~:article/change&quot;,[&quot;^ &quot;,&quot;~:db/id&quot;,17592187044511,&quot;~:nextjournal/id&quot;,&quot;~u5bc9b183-2ef2-422e-bcc7-10c3adfeabca&quot;,&quot;~:change/inserted-at&quot;,&quot;~m1539944835633&quot;],&quot;~:article/published-change&quot;,[&quot;^ &quot;,&quot;^7&quot;,17592187044511,&quot;^8&quot;,&quot;~u5bc9b183-2ef2-422e-bcc7-10c3adfeabca&quot;,&quot;^9&quot;,&quot;~m1539944835633&quot;],&quot;^8&quot;,&quot;~u0287c2e0-a8ac-4929-b5ab-9efe94bac3c4&quot;,&quot;~:article/name&quot;,&quot;julia-gpu-programming&quot;,&quot;^7&quot;,17592186649289,&quot;~:article/profile&quot;,[&quot;^ &quot;,&quot;^7&quot;,17592186045492,&quot;~:profile/handle&quot;,&quot;sdanisch&quot;,&quot;~:profile/avatar&quot;,&quot;a5a88781-2906-4a7b-a120-7c45e11f26e2&quot;,&quot;~:profile/name&quot;,&quot;Simon Danisch&quot;],&quot;~:article/remix-of&quot;,[&quot;^ &quot;,&quot;^7&quot;,17592186524157,&quot;^8&quot;,&quot;~u5b3e4020-24de-4fa9-b4bd-0050a176c13c&quot;,&quot;^;&quot;,&quot;julia-template&quot;,&quot;^&amp;lt;&quot;,[&quot;^ &quot;,&quot;^=&quot;,&quot;nextjournal&quot;]]],&quot;~:article-contents&quot;,[&quot;^ &quot;,&quot;^2&quot;,[&quot;^ &quot;,&quot;~:root&quot;,&quot;3950cb96-1122-4d9f-8b74-7168fb77849a&quot;,&quot;~:nodes&quot;,[&quot;^ &quot;,&quot;403a6184-13b5-4d48-8e5c-3612ce2ea5d1&quot;,[&quot;^ &quot;,&quot;~:id&quot;,&quot;403a6184-13b5-4d48-8e5c-3612ce2ea5d1&quot;,&quot;~:kind&quot;,&quot;text&quot;,&quot;~:content&quot;,&quot;&quot;],&quot;d0caaf8f-5c0b-4c0e-8b9e-1bd2e2e99aed&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;d0caaf8f-5c0b-4c0e-8b9e-1bd2e2e99aed&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;This article aims to give a quick introduction about how GPUs work and specifically give an overlook of the current Julia GPU ecosystem and how easy it is to get simple GPU programs running. To make things easier, you can run all the code samples directly in the article if you have an &lt;a href=&quot;/&amp;quot;https://nextjournal.com/signup?code=juliacon/&amp;quot;&quot;&gt;account&lt;/a&gt; and click on &lt;strong&gt;edit&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;e01448e0-7630-4c6a-b415-050bd4b37efa&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;e01448e0-7630-4c6a-b415-050bd4b37efa&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The function that makes this possible is named &lt;code&gt;&lt;em&gt;gpu_call&lt;/em&gt;&lt;/code&gt;. It can be called as &lt;code&gt;gpu_call(kernel, A::GPUArray, args)&lt;/code&gt; and will call &lt;code&gt;kernel&lt;/code&gt; with the arguments &lt;code&gt;(state, args...)&lt;/code&gt; on the GPU. State is a backend specific object to implement functionality like getting the thread index. A GPUArray needs to get passed as the second argument to dispatch to the correct backend and supply the defaults for the launch parameters.&lt;/p&gt;
&lt;p&gt;Lets use &lt;code&gt;gpu_call&lt;/code&gt; to implement a simple map kernel:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;5b06a745-4830-4b8e-a5b2-df8449cef3b3&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;struct Test # an immutable struct\n# that only contains other immutable, which makes \n# isbitstype(Test) == true\n\tx::Float32 \nend\n\n# the isbits property is important, since those types can be used\n# without constraints on the GPU!\n@assert isbitstype(Test) == true\nx = (2, 2)\nisa(x, Tuple{Int, Int}) # tuples are also immutable\nmutable struct Test2 #-&amp;gt; mutable, isbits(Test2) == false\n\tx::Float32\nend\nstruct Test3\n\t# contains a heap allocation/ reference, not isbits\n\tx::Vector{Float32}\n\ty::Test2 # Test2 is mutable and also heap allocated / a reference\nend\nVector{Test} # &amp;lt;- An Array with isbits elements is contigious in memory\nVector{Test2} # &amp;lt;- An Array with mutable elements is basically an array of heap pointers. Since it just contains cpu heap pointers, it won't work on the GPU.&quot;,&quot;~:refs&quot;,[&quot;~#list&quot;,[]],&quot;~:name&quot;,&quot;Structs&quot;,&quot;~:output-log-lines&quot;,[&quot;^ &quot;],&quot;~:language&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;5b06a745-4830-4b8e-a5b2-df8449cef3b3&quot;,&quot;~:compute-ref&quot;,&quot;~u550ca310-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;~:runtime&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;~:outputs&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^F&quot;,&quot;data&quot;,&quot;^M&quot;,null,&quot;~:coder&quot;,&quot;json&quot;,&quot;~:blob&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;Qmf95KPCz5ETEtBLXzBqZ3rh6zFk3eQNWQog7nBVwJotNS&quot;,&quot;~:size&quot;,16,&quot;~:content-type&quot;,&quot;application/json&quot;]]],&quot;~:error&quot;,null,&quot;~:exec-duration&quot;,843,&quot;~:bucket&quot;,null],&quot;4e09f815-feab-4f09-8d9f-e63eba843aa2&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;4e09f815-feab-4f09-8d9f-e63eba843aa2&quot;,&quot;^F&quot;,&quot;section&quot;,&quot;~:title&quot;,&quot; The GPUArray Constructors&quot;,&quot;^G&quot;,[&quot;^L&quot;,[&quot;07d732ed-7e58-4970-af4a-16701813f0ee&quot;]],&quot;~:sections&quot;,[&quot;^L&quot;,[]]],&quot;90e93106-c175-437c-a107-fb911bf59788&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;90e93106-c175-437c-a107-fb911bf59788&quot;,&quot;^F&quot;,&quot;section&quot;,&quot;^[&quot;,&quot;Garbage Collection&quot;,&quot;^G&quot;,[&quot;^L&quot;,[&quot;fe642bca-b571-4183-a38a-1e937833a4d8&quot;,&quot;24e4194b-b6fd-43c4-b876-cc6b6aea8403&quot;,&quot;f9c22c0d-fa74-4a04-a4a8-52ccfea9b2d7&quot;]],&quot;^10&quot;,[&quot;^L&quot;,[]]],&quot;8d00da3d-dc4d-47b0-9f8b-eb26e505d889&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;8d00da3d-dc4d-47b0-9f8b-eb26e505d889&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&quot;/&amp;quot;https://juliagpu.github.io/GPUShowcases.jl/latest/index.html/&amp;quot;&quot;&gt;many more use cases&lt;/a&gt;, including solving differential equations, FEM simulations, and &lt;a href=&quot;/&amp;quot;http://www.stochasticlifestyle.com/solving-systems-stochastic-pdes-using-gpus-julia//&amp;quot;&quot;&gt;solving PDEs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;6b8c8d02-f072-4454-9687-1e0b795d9e47&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;6b8c8d02-f072-4454-9687-1e0b795d9e47&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A GPU is a separate piece of hardware with its own memory space and different architecture. As a result, there are long transfer times from RAM to the GPUs memory (VRAM). Even launching a kernel on the GPU (in other words scheduling a function call) introduces large latencies. Times are around ~10us for GPUs, compared to a few nano seconds on a CPU&lt;/li&gt;
&lt;li&gt;Setting up a kernel can quickly become complicated without a high level wrapper&lt;/li&gt;
&lt;li&gt;Lower precision is the default and higher precision computations can easily void all performance gains&lt;/li&gt;
&lt;li&gt;GPU functions (kernels) are inherently parallel, so writing GPU kernels is at least as difficult as writing parallel CPU code, but the difference in hardware adds quite a bit of complexity&lt;/li&gt;
&lt;li&gt;Related to the above, a lot of algorithms won't port nicely to the GPU. For more details on what to expect, have a look at this &lt;a href=&quot;/&amp;quot;https://streamhpc.com/blog/2013-06-03/the-application-areas-opencl-and-cuda-can-be-used//&amp;quot;&quot;&gt;blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kernels are usually written in a C/C++ dialect, which is not the nicest language to write down your algorithms&lt;/li&gt;
&lt;li&gt;There is a divide between CUDA and OpenCL, which are the dominant frameworks used to write low-level GPU code. While CUDA only supports Nvidia hardware, OpenCL supports all hardware but is a bit rough around the edges. One needs to decide what to use, and will get pretty much stuck with that decision&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&quot;],&quot;b15e66ec-cbe7-4b87-94fc-64a1bf79ff3b&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;b15e66ec-cbe7-4b87-94fc-64a1bf79ff3b&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;A GPU is a massively parallel processor, with a couple of thousand parallel processing units. For example the &lt;a href=&quot;/&amp;quot;https://www.nvidia.com/en-us/data-center/tesla-k80//&amp;quot;&quot;&gt;Tesla k80&lt;/a&gt;, which is used in this article, offers 4992 parallel CUDA cores. GPUs are quite different from CPUs in terms of frequencies, latencies and hardware capabilities, but this is somewhat similar to a slow CPU with 4992 cores!&lt;/p&gt;
&lt;p&gt;&quot;],&quot;e4267f2c-06e0-4ae1-b250-66a9565b765b&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;e4267f2c-06e0-4ae1-b250-66a9565b765b&quot;,&quot;^F&quot;,&quot;section&quot;,&quot;^[&quot;,&quot;GPUArrays in the real world&quot;,&quot;^G&quot;,[&quot;^L&quot;,[&quot;bfa64579-c73b-48b7-b6c4-88fd69aaf9d1&quot;,&quot;e2ce55ae-a15c-49dc-ac05-239bd226b07a&quot;,&quot;7568cecf-0eaa-4fe3-bc80-9cf89360c8fb&quot;,&quot;8d00da3d-dc4d-47b0-9f8b-eb26e505d889&quot;,&quot;56322bde-814a-4056-8601-6ca5c8434825&quot;,&quot;4a7aa2b0-fb74-40b6-8b52-cbedeaf7597a&quot;,&quot;7bf252ce-e3a3-4312-b3c8-5c6d74dbd62e&quot;,&quot;dd74954e-f344-4533-8ff4-e8e072c669aa&quot;,&quot;b4e4c855-1f1c-4bbc-8b4c-704550497733&quot;,&quot;f6e7762e-b6c5-4960-840a-8c46fb255143&quot;]]],&quot;d612c50e-123b-46d2-bb0f-acb93ea1e9a5&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;d612c50e-123b-46d2-bb0f-acb93ea1e9a5&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Some more operations supported by GPUArrays:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;7bf252ce-e3a3-4312-b3c8-5c6d74dbd62e&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;# train\nfor i = 1:10\n Flux.train!(loss, train, opt, cb = evalcb)\nend&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;,&quot;~:stdout&quot;,3],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;7bf252ce-e3a3-4312-b3c8-5c6d74dbd62e&quot;,&quot;^P&quot;,&quot;~ud7f89130-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;],&quot;^W&quot;,null,&quot;^X&quot;,29622,&quot;^Y&quot;,null],&quot;63a71268-3337-4bf2-8d47-b7e641d16dbb&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;63a71268-3337-4bf2-8d47-b7e641d16dbb&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;As you can see, for large arrays one gets a solid 60-80x speed-up by moving the calculation to the GPU. Getting this speed-up was as simple as converting the Julia array to a GPUArray.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;bd97b005-9736-4628-a5db-26d82089d15a&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;bd97b005-9736-4628-a5db-26d82089d15a&quot;,&quot;^F&quot;,&quot;section&quot;,&quot;^[&quot;,&quot; Array Operations&quot;,&quot;^G&quot;,[&quot;a8566d64-5ace-4acf-ad8e-2021d18c225d&quot;,&quot;298522f5-fb0c-43df-aa38-e8949ef6685e&quot;,&quot;e60c9e23-2f00-46ad-9973-a31470112212&quot;,&quot;8d37d54c-4774-45ab-a1bc-bad9f73a0231&quot;,&quot;8b302ae5-daef-427a-8cd2-b1dbbf1679f3&quot;,&quot;62a9ecf5-18af-4956-98e1-a95cd0c47859&quot;,&quot;d612c50e-123b-46d2-bb0f-acb93ea1e9a5&quot;,&quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot;],&quot;^10&quot;,[&quot;^L&quot;,[]]],&quot;5a85c88c-f0a9-4064-bf8a-62c80bf270ae&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;5a85c88c-f0a9-4064-bf8a-62c80bf270ae&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;In the above example you can see the iteration order of a more complex launch configuration. Figuring out the right iteration + launch configuration is crucial to achieve state of the art GPU performance – but won't be part of this simple introduction. There are plenty of GPU tutorials for CUDA and OpenCL which explain this in great detail and those principles are identical when programming the GPU in Julia.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;fdf4733c-a4d3-4665-9137-2e15e54f5181&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;fdf4733c-a4d3-4665-9137-2e15e54f5181&quot;,&quot;^F&quot;,&quot;section&quot;,&quot;^[&quot;,&quot;How does the GPU work&quot;,&quot;^G&quot;,[&quot;^L&quot;,[&quot;d0caaf8f-5c0b-4c0e-8b9e-1bd2e2e99aed&quot;,&quot;12260210-0c7d-4cbc-9262-30ac57e4110f&quot;,&quot;b15e66ec-cbe7-4b87-94fc-64a1bf79ff3b&quot;,&quot;6494cb51-4ad3-4327-9e27-c2c804df6c81&quot;,&quot;a034c062-a45b-467f-a953-cb7702a9bad4&quot;,&quot;6b8c8d02-f072-4454-9687-1e0b795d9e47&quot;,&quot;0f5d9919-e5ed-4259-8a25-9c835cd74ab1&quot;]],&quot;^10&quot;,[&quot;^L&quot;,[&quot;095f7d06-d4fc-49e2-a68c-96cad2fb0a62&quot;,&quot;830cd8cc-8d91-412d-b90e-6f1d81a3a8a1&quot;,&quot;2eba3a00-d38e-45f7-b5c0-8a1bba7f5ce2&quot;,&quot;bd97b005-9736-4628-a5db-26d82089d15a&quot;]]],&quot;f9c22c0d-fa74-4a04-a4a8-52ccfea9b2d7&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;f9c22c0d-fa74-4a04-a4a8-52ccfea9b2d7&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Consequently, one can only use stack allocation on the device, and for the rest pre-allocated GPU buffers are used. As transfers are expensive, it is common to reuse and pre-allocate as much as possible when programming the GPU.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;80bd4385-cd68-4fad-ada0-981d4b98b100&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;using CuArrays\n\nthreads = (2, 2)\nblocks = (2, 2)\nT = fill(CuArray, (0, 0), (4, 4))\nB = fill(CuArray, (0, 0), (4, 4))\ngpu_call(T, (B, T), (blocks, threads)) do state, A, B\n # those names pretty much refer to the cuda names\n b = (blockidx_x(state), blockidx_y(state))\n bdim = (blockdim_x(state), blockdim_y(state))\n t = (threadidx_x(state), threadidx_y(state))\n idx = (bdim .* (b .- 1)) .+ t\n A[idx...] = b\n B[idx...] = t\n return\nend\nprintln(\&quot;Threads index: \\n\&quot;, T)\nprintln(\&quot;Block index: \\n\&quot;, B)&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;,&quot;^18&quot;,4],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;80bd4385-cd68-4fad-ada0-981d4b98b100&quot;,&quot;^P&quot;,&quot;~ua8e7ec10-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;],&quot;^W&quot;,null,&quot;^X&quot;,1986,&quot;^Y&quot;,null],&quot;298522f5-fb0c-43df-aa38-e8949ef6685e&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;x = zeros(4, 4) # 4x4 array of zeros\ny = zeros(4) # 4 element array\nz = 2 # a scalar\n# y's 1st dimension gets repeated for the 2nd dimension in x\n# and the scalar z get's repeated for all dimensions\n# the below is equal to `broadcast(+, broadcast(+, xx, y), z)`\nx .+ y .+ z&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;298522f5-fb0c-43df-aa38-e8949ef6685e&quot;,&quot;^P&quot;,&quot;~u582c0b80-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^F&quot;,&quot;data&quot;,&quot;^M&quot;,null,&quot;^S&quot;,&quot;json&quot;,&quot;^T&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;QmXbQ4AUGGFrYmA4yfUt8PKEiFumpg1QQJvxWstV9zhzEU&quot;,&quot;^U&quot;,73,&quot;^V&quot;,&quot;application/json&quot;]]],&quot;^W&quot;,null,&quot;^X&quot;,703,&quot;^Y&quot;,null],&quot;8b302ae5-daef-427a-8cd2-b1dbbf1679f3&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;8b302ae5-daef-427a-8cd2-b1dbbf1679f3&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;This means any Julia function that runs without allocating heap memory (only creating isbits types), can be applied to each element of a GPUArray and multiple dot calls will get fused into one kernel call. As kernel call latency is high, this fusion is a very important optimization.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;3950cb96-1122-4d9f-8b74-7168fb77849a&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;3950cb96-1122-4d9f-8b74-7168fb77849a&quot;,&quot;^[&quot;,&quot;An Introduction to GPU Programming in Julia &quot;,&quot;^F&quot;,&quot;section&quot;,&quot;~:version&quot;,2,&quot;^G&quot;,[&quot;^L&quot;,[]],&quot;^10&quot;,[&quot;^L&quot;,[&quot;fdf4733c-a4d3-4665-9137-2e15e54f5181&quot;,&quot;e4267f2c-06e0-4ae1-b250-66a9565b765b&quot;,&quot;ea004e0d-2b7d-4d1d-87b0-58bac63971d8&quot;,&quot;33457f06-ffd8-4e64-a9e3-f336e875b947&quot;]],&quot;~:settings&quot;,[&quot;^ &quot;,&quot;~:numbered?&quot;,false,&quot;~:sidebar?&quot;,false,&quot;~:subtitle?&quot;,false,&quot;~:centered?&quot;,false,&quot;~:authors?&quot;,false]],&quot;24e4194b-b6fd-43c4-b876-cc6b6aea8403&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;24e4194b-b6fd-43c4-b876-cc6b6aea8403&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;As an alternative to heap allocated arrays inside the kernel, you can use GPUArrays. The GPUArray constructor will create GPU buffers and transfer the data to VRAM. If you call &lt;code&gt;Array(gpu_array)&lt;/code&gt; the array will get transferred back to RAM, represented as a normal Julia Array. The Julia handle to those gpu arrays is tracked by Julia's GC and if it's not used anymore, the GPU memory will be freed.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;b9afd6ac-9711-4b4b-9f88-89e40405af04&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;b9afd6ac-9711-4b4b-9f88-89e40405af04&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Location of creation describes if the object was created on the CPU and then transferred to the GPU kernel, or if it was created on the GPU inside the kernel. The table shows if it is possible to create an instance of a type, and for the transfer from CPU to GPU, the table also indicates if the object gets copied or passed by reference.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;778cc725-33cc-4cb1-a388-6a9da1daff5d&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;using CuArrays, FileIO, Colors, GPUArrays, BenchmarkTools\nusing CuArrays: CuArray\n\&quot;\&quot;\&quot;\nThe function calculating the Julia set\n\&quot;\&quot;\&quot;\nfunction juliaset(z0, maxiter)\n c = ComplexF32(-0.5, 0.75)\n z = z0\n for i in 1:maxiter\n abs2(z) &amp;gt; 4f0 &amp;amp;&amp;amp; return (i - 1) % UInt8\n z = z * z + c\n end\n return maxiter % UInt8 # % is used to convert without overflow check\nend\nrange = 100:50:2^12\ncutimes, jltimes = Float64[], Float64[]\nfunction run_bench(in, out)\n # use dot syntax to apply `juliaset` to each elemt of q_converted \n # and write the output to result\n out .= juliaset.(in, 16)\n # all calls to the GPU are scheduled asynchronous, \n # so we need to synchronize\n GPUArrays.synchronize(out)\nend\n# store a reference to the last results for plotting\nlast_jl, last_cu = nothing, nothing\nfor N in range\n w, h = N, N\n q = [ComplexF32(r, i) for i=1:-(2.0/w):-1, r=-1.5:(3.0/h):1.5]\n for (times, Typ) in ((cutimes, CuArray), (jltimes, Array))\n # convert to Array or CuArray - moving the calculation to CPU/GPU\n q_converted = Typ(q)\n result = Typ(zeros(UInt8, size(q)))\n for i in 1:10 # 5 samples per size\n # benchmarking macro, all variables need to be prefixed with $\n t = Base.@elapsed begin\n\t\t\t\trun_bench(q_converted, result)\n end\n global last_jl, last_cu # we're in local scope\n if result isa CuArray\n last_cu = result\n else\n \tlast_jl = result\n end\n push!(times, t)\n end\n end\nend\n\ncu_jl = hcat(Array(last_cu), last_jl)\ncmap = colormap(\&quot;Blues\&quot;, 16 + 1)\ncolor_lookup(val, cmap) = cmap[val + 1]\nsave(\&quot;results/juliaset.png\&quot;, color_lookup.(cu_jl, (cmap,)))&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;778cc725-33cc-4cb1-a388-6a9da1daff5d&quot;,&quot;^P&quot;,&quot;~ufbc54280-d2e6-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;juliaset.png&quot;,[&quot;^ &quot;,&quot;^F&quot;,&quot;file&quot;,&quot;^M&quot;,&quot;juliaset.png&quot;,&quot;~:last-modified&quot;,1539875132000,&quot;~:idx&quot;,null,&quot;^T&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;QmQXdNWEJhYMUpoJueuHCg2eUgjonmoP8pBTTWZTtgj5X8&quot;,&quot;^U&quot;,481341,&quot;^Y&quot;,null,&quot;^V&quot;,&quot;image/png&quot;]]],&quot;^W&quot;,null,&quot;^X&quot;,118649,&quot;^Y&quot;,null],&quot;3428b837-5a8e-44d8-91e3-2e8361152cb0&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;using BenchmarkTools\nfunction threadded_map!(f::Function, A::Array, B::Array)\n Threads.@threads for i in 1:length(A)\n A[i] = f(B[i])\n end\n A\nend\nx, y = rand(10^7), rand(10^7)\nkernel(y) = (y / 33f0) * (732.f0/y)\n# on the cpu without threads:\nsingle_t = @belapsed map!($kernel, $x, $y)\n\n# \&quot;on the CPU with 4 threads (2 real cores):\nthread_t = @belapsed threadded_map!($kernel, $x, $y)\n\n# on the GPU:\nxgpu, ygpu = cu(x), cu(y)\ngpu_t = @belapsed begin\n map!($kernel, $xgpu, $ygpu)\n GPUArrays.synchronize($xgpu)\nend\ntimes = [single_t, thread_t, gpu_t]\nspeedup = maximum(times) ./ times\nprintln(\&quot;speedup: $speedup\&quot;)\nbar([\&quot;1 core\&quot;, \&quot;2 cores\&quot;, \&quot;gpu\&quot;], speedup, legend = false, fillcolor = :grey, ylabel = \&quot;speedup\&quot;)&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;,&quot;^18&quot;,1],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;3428b837-5a8e-44d8-91e3-2e8361152cb0&quot;,&quot;^P&quot;,&quot;~u8ebeafe0-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^F&quot;,&quot;plotly&quot;,&quot;^M&quot;,null,&quot;^S&quot;,&quot;plotly&quot;,&quot;^T&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;QmNn8cip4FgfKL3myRkvVHE3uSdfKYHdHw3yUQtBqVzcYB&quot;,&quot;^U&quot;,2776,&quot;^V&quot;,&quot;application/json&quot;]]],&quot;^W&quot;,null,&quot;^X&quot;,43890,&quot;^Y&quot;,null],&quot;62a9ecf5-18af-4956-98e1-a95cd0c47859&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;using CuArrays\nA = cu([1, 2, 3])\nB = cu([1, 2, 3])\nC = rand(CuArray, Float32, 3)\nresult = A .+ B .- C\ntest(a::T) where T = a * convert(T, 2) # convert to same type as `a`\n\n# inplace broadcast, writes directly into `result`\nresult .= test.(A) # custom function work\n\n# The cool thing is that this composes well with custom types and custom functions.\n# Let's go back to our Point type and define addition for it\nBase.:(+)(p1::Point, p2::Point) = Point(p1.x + p2.x, p1.y + p2.y)\n\n# now this works:\ncustom_types = cu(Point[(1, 2), (4, 3), (2, 2)])\n\n# This particular example also shows the power of broadcasting: \n# Non array types are broadcasted and repeated for the whole length\nresult = custom_types .+ Ref(Point(2, 2))\n\n# So the above is equal to (minus all the allocations):\n# this allocates a new array on the gpu, which we can avoid with the above broadcast\nbroadcasted = fill(CuArray, Point(2, 2), (3,))\n\nresult == custom_types .+ broadcasted&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;62a9ecf5-18af-4956-98e1-a95cd0c47859&quot;,&quot;^P&quot;,&quot;~u58977780-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^F&quot;,&quot;data&quot;,&quot;^M&quot;,null,&quot;^S&quot;,&quot;json&quot;,&quot;^T&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;Qmaa779KVD5z1LkzSccCMjJmYtd11DXA4gtTgsNFo8365G&quot;,&quot;^U&quot;,4,&quot;^V&quot;,&quot;application/json&quot;]]],&quot;^W&quot;,null,&quot;^X&quot;,3700,&quot;^Y&quot;,null],&quot;a8566d64-5ace-4acf-ad8e-2021d18c225d&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;a8566d64-5ace-4acf-ad8e-2021d18c225d&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Lots of operations are already defined. Most importantly, GPUArrays support Julia's &lt;a href=&quot;/&amp;quot;https://julialang.org/blog/2018/05/extensible-broadcast-fusion/&amp;quot;&quot;&gt;fusing dot broadcasting notation&lt;/a&gt;. This notation allows you to apply a function to each element of an array, and create a new array out of the return values of &lt;code&gt;&lt;strong&gt;f&lt;/strong&gt;&lt;/code&gt;. This functionality is usually referred to as a map. The broadcast refers to the fact that arrays with different shapes get broadcasted to the same shape.&lt;/p&gt;
&lt;p&gt;This is how it works:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;2eba3a00-d38e-45f7-b5c0-8a1bba7f5ce2&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;2eba3a00-d38e-45f7-b5c0-8a1bba7f5ce2&quot;,&quot;^F&quot;,&quot;section&quot;,&quot;^[&quot;,&quot;Memory&quot;,&quot;^G&quot;,[&quot;^L&quot;,[&quot;6c575ff1-1123-4a22-adbb-292a3fe99d73&quot;,&quot;5b06a745-4830-4b8e-a5b2-df8449cef3b3&quot;,&quot;d412f192-1c45-46ba-aa09-657fd3d22093&quot;,&quot;1da131e8-d5a9-4e7b-a605-14391ed24107&quot;,&quot;b9afd6ac-9711-4b4b-9f88-89e40405af04&quot;]],&quot;^10&quot;,[&quot;^L&quot;,[&quot;90e93106-c175-437c-a107-fb911bf59788&quot;,&quot;4e09f815-feab-4f09-8d9f-e63eba843aa2&quot;]]],&quot;b41071e8-02ab-47f3-946b-0b802fff459b&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;b41071e8-02ab-47f3-946b-0b802fff459b&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Let's try to figure out what this is doing! In simple terms, this will call the julia function &lt;code&gt;kernel&lt;/code&gt; &lt;em&gt;&lt;strong&gt;length(&lt;/strong&gt;&lt;/em&gt;&lt;code&gt;&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt;&lt;/code&gt;&lt;em&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/em&gt; times in parallel on the GPU. Each parallel invocation of &lt;code&gt;kernel&lt;/code&gt; has a thread index, which we can use to safely index into the arrays &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;. If we calculated our own indices instead of using &lt;code&gt;linear_index&lt;/code&gt;, we'd need to make sure that we don't have multiple threads reading and writing to the same array locations. So, if we wrote this in pure Julia with threads, an equivalent version would look like this:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;f70ec7d4-93d1-4076-843e-3ecd79642556&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;f70ec7d4-93d1-4076-843e-3ecd79642556&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;GPUArrays.jl is that foundation in Julia. It offers an abstract array implementation tailored towards using the raw power of highly parallel hardware. It contains all the necessary functionality to set up the GPU, launch Julia GPU functions and offers some basic array algorithms.&lt;/p&gt;
&lt;p&gt;Being abstract means that it needs a concrete implementation coming in the form of &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/CuArrays.jl/&amp;quot;&quot;&gt;CuArrays&lt;/a&gt; and &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/CLArrays.jl/&amp;quot;&quot;&gt;CLArrays&lt;/a&gt;. They both offer exactly the same interface, thanks to inheriting all functionality from GPUArrays. The only difference shows up when allocating an array, which forces one to decide if the array lives on a CUDA or OpenCL device. More about this in the Memory section.&lt;/p&gt;
&lt;p&gt;GPUArrays helps to reduce code duplication, because it allows one to write hardware independent GPU kernels which can be compiled to native GPU code by either CuArrays or CLArrays. So, lots of generic kernels can be shared between all packages inheriting from GPUArrays.&lt;/p&gt;
&lt;p&gt;To help you choose: CuArrays only works with Nvidia GPUs, while CLArrays works with most available GPUs. CuArrays is more stable than CLArrays and works on Julia 0.7 already. The speed differences are mixed with no clear winner. I would suggest to try both and see what works best.&lt;/p&gt;
&lt;p&gt;For this article I'm going to choose CuArrays, since this article is written for Julia 0.7 / 1.0, which still isn't supported by CLArrays.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;3bf52ba8-8341-4248-a628-72df5304880c&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;3bf52ba8-8341-4248-a628-72df5304880c&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Julia has come a long way to bring composable high-level programming to the high performance world. Now it's time to do the same for the GPU.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;e60c9e23-2f00-46ad-9973-a31470112212&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;e60c9e23-2f00-46ad-9973-a31470112212&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The fusion happens because the Julia compiler will rewrite this expression into one lazy broadcast call that gets the call tree passed, which then can fuse the whole call tree into one function before looping over the array.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;f6e7762e-b6c5-4960-840a-8c46fb255143&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;f6e7762e-b6c5-4960-840a-8c46fb255143&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Another nice property to look at is that GPUArrays never had to implement automatic differentiation explicitly to support the backward pass of the neuronal network efficiently. This is because Julia's automatic differentiation libraries work for arbitrary functions and emit code &lt;a href=&quot;/&amp;quot;https://mikeinnes.github.io/2017/08/24/cudanative.html/&amp;quot;&quot;&gt;that can run efficiently on the GPU&lt;/a&gt;. This helps a lot to get Flux working on the GPU with minimal developer effort - and makes Flux GPU support work efficiently even for user defined functions. That this works out of the box without coordination between GPUArrays + Flux is a pretty unique property of Julia, which is explained in great detail in: &lt;a href=&quot;/&amp;quot;http://www.stochasticlifestyle.com/why-numba-and-cython-are-not-substitutes-for-julia//&amp;quot;&quot;&gt;Why Numba and Cython are no substitute for Julia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&quot;],&quot;f58a7aba-f416-41a0-bd08-8fe07b0df022&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;f58a7aba-f416-41a0-bd08-8fe07b0df022&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Most highly parallel algorithms need to churn through quite a bit of data to overcome all the threading and latency overheads. So most algorithms will need arrays to manage all that data, which calls for a good GPU array library as a crucial foundation.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;4b7926e0-6502-4410-92eb-1b34d89f2d92&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;4b7926e0-6502-4410-92eb-1b34d89f2d92&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;One can get pretty far by just using the generic abstract array interface of GPUArrays without ever writing any GPU kernels. However, at some point one might need to implement an algorithm that needs to run on the GPU and can't be expressed by a combination of generic array algorithms!&lt;/p&gt;
&lt;p&gt;&quot;],&quot;a034c062-a45b-467f-a953-cb7702a9bad4&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;a034c062-a45b-467f-a953-cb7702a9bad4&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The sheer number of parallel threads one can launch can yield massive speed-ups, but also makes it harder to utilize the GPU. Let's have a detailed look at the disadvantages one buys into when utilizing this raw power:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;830cd8cc-8d91-412d-b90e-6f1d81a3a8a1&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;830cd8cc-8d91-412d-b90e-6f1d81a3a8a1&quot;,&quot;^F&quot;,&quot;section&quot;,&quot;^[&quot;,&quot;Performance&quot;,&quot;^G&quot;,[&quot;^L&quot;,[&quot;fc35d0a2-6efb-4971-9728-e5b6198ad57e&quot;,&quot;778cc725-33cc-4cb1-a388-6a9da1daff5d&quot;,&quot;f5616db3-d53e-4347-a8c4-8be45e7308f2&quot;,&quot;63a71268-3337-4bf2-8d47-b7e641d16dbb&quot;,&quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19&quot;,&quot;7390d157-1854-412e-bba7-0aea472566e0&quot;]]],&quot;1da131e8-d5a9-4e7b-a605-14391ed24107&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;1da131e8-d5a9-4e7b-a605-14391ed24107&quot;,&quot;^F&quot;,&quot;formula&quot;,&quot;^G&quot;,&quot;\\tiny\n\\left[\n\\begin{array}{ccccccc}\n\\text{} &amp;amp; \\text{ isbits type} &amp;amp; \\text{immutable type} &amp;amp; \\text{mutable type} &amp;amp; \\text{julia array} &amp;amp; \\text{gpu array} &amp;amp; \\text{(device) local memory} \\\\\n\\text{location of creation} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} \\\\\n\\text{on CPU} &amp;amp; \\text{yes, copy} &amp;amp; \\text{no ptrs, copy} &amp;amp; \\text{copy} &amp;amp; \\text{no} &amp;amp; \\text{by reference} &amp;amp; \\text{no} \\\\\n\\text{on GPU} &amp;amp; \\text{yes} &amp;amp; \\text{may contain device ptr} &amp;amp; \\text{no (on 0.7 if elimated)} &amp;amp; \\text{no} &amp;amp; \\text{no} &amp;amp; \\text{yes} \\\\\n\\end{array}\n\\right]&quot;],&quot;33457f06-ffd8-4e64-a9e3-f336e875b947&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;33457f06-ffd8-4e64-a9e3-f336e875b947&quot;,&quot;^F&quot;,&quot;section&quot;,&quot;^[&quot;,&quot;Conclusion&quot;,&quot;^G&quot;,[&quot;3bf52ba8-8341-4248-a628-72df5304880c&quot;,&quot;0b7718a8-066d-4e2b-a020-e3530b4284ec&quot;,&quot;403a6184-13b5-4d48-8e5c-3612ce2ea5d1&quot;]],&quot;bfa64579-c73b-48b7-b6c4-88fd69aaf9d1&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;bfa64579-c73b-48b7-b6c4-88fd69aaf9d1&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Let's jump right into some cool use cases.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;4a7aa2b0-fb74-40b6-8b52-cbedeaf7597a&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;using Flux, Flux.Data.MNIST, Statistics\nusing Flux: onehotbatch, onecold, crossentropy, throttle\nusing Base.Iterators: repeated, partition\nusing CuArrays\n\n# Classify MNIST digits with a convolutional network\n\nimgs = MNIST.images()\n\nlabels = onehotbatch(MNIST.labels(), 0:9)\n\n# Partition into batches of size 1,000\ntrain = [(cat(float.(imgs[i])..., dims = 4), labels[:,i])\n for i in partition(1:60_000, 1000)]\n\nuse_gpu = true # helper to easily switch between gpu/cpu\n\ntodevice(x) = use_gpu ? gpu(x) : x\n\ntrain = todevice.(train)\n\n# Prepare test set (first 1,000 images)\ntX = cat(float.(MNIST.images(:test)[1:1000])..., dims = 4) |&amp;gt; todevice\ntY = onehotbatch(MNIST.labels(:test)[1:1000], 0:9) |&amp;gt; todevice\n\nm = Chain(\n Conv((2,2), 1=&amp;gt;16, relu),\n x -&amp;gt; maxpool(x, (2,2)),\n Conv((2,2), 16=&amp;gt;8, relu),\n x -&amp;gt; maxpool(x, (2,2)),\n x -&amp;gt; reshape(x, :, size(x, 4)),\n Dense(288, 10), softmax) |&amp;gt; todevice\n\nm(train[1][1])\n\nloss(x, y) = crossentropy(m(x), y)\n\naccuracy(x, y) = mean(onecold(m(x)) .== onecold(y))\n\nevalcb = throttle(() -&amp;gt; @show(accuracy(tX, tY)), 10)\nopt = ADAM(Flux.params(m));&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;4a7aa2b0-fb74-40b6-8b52-cbedeaf7597a&quot;,&quot;^P&quot;,&quot;~ud224b720-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;],&quot;^W&quot;,null,&quot;^X&quot;,6031,&quot;^Y&quot;,null],&quot;0f5d9919-e5ed-4259-8a25-9c835cd74ab1&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;0f5d9919-e5ed-4259-8a25-9c835cd74ab1&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The good news is Julia, a high level scripting language, allows you to write both kernel and surrounding code in Julia itself, while running on most GPU hardware!&lt;/p&gt;
&lt;p&gt;&quot;],&quot;b4e4c855-1f1c-4bbc-8b4c-704550497733&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;b4e4c855-1f1c-4bbc-8b4c-704550497733&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Just by converting the arrays to GPUArrays (with &lt;code&gt;gpu(array)&lt;/code&gt;) we were able to move the entire computation to the GPU and get a pretty nice speed improvement. This is thanks to Julia's sophisticated AbstractArray infrastructure, into which GPUArrays seamlessly integrates. Subsequently, if you leave out the conversion to a GPUArray, the code will also run with normal Julia arrays – but then of course on the CPU. You can try this out by changing &lt;code&gt;use_gpu = true&lt;/code&gt; to &lt;code&gt;use_gpu = false&lt;/code&gt; and rerun the initialization and training cells. Comparing GPU and CPU, I get 975 seconds for a CPU run and 29 seonds for the GPU - which is a nice speed-up of ~&lt;strong&gt;33x&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;fe642bca-b571-4183-a38a-1e937833a4d8&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;fe642bca-b571-4183-a38a-1e937833a4d8&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;A big difference when working with the GPU is that there is no garbage collector (GC) on the GPU. This is gladly not a big issue, since the kind of high performance kernel one writes for the GPU shouldn't create any GC-tracked memory to begin with.&lt;/p&gt;
&lt;p&gt;Implementing a GC for the GPU is possible, but remember that every kernel executed is massively parallel. Creating and tracking lots of heap memory in every one of the ~1000 gpu threads will quickly destroy any performance gains, so it's really just not worth the effort.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;ea004e0d-2b7d-4d1d-87b0-58bac63971d8&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;ea004e0d-2b7d-4d1d-87b0-58bac63971d8&quot;,&quot;^F&quot;,&quot;section&quot;,&quot;^[&quot;,&quot;Writing GPU Kernels&quot;,&quot;^G&quot;,[&quot;^L&quot;,[&quot;4b7926e0-6502-4410-92eb-1b34d89f2d92&quot;,&quot;dc1691b3-b051-4078-8105-be5693dde633&quot;,&quot;e01448e0-7630-4c6a-b415-050bd4b37efa&quot;,&quot;e542cbee-022a-4da4-91bb-f683b86080f3&quot;,&quot;b41071e8-02ab-47f3-946b-0b802fff459b&quot;,&quot;3428b837-5a8e-44d8-91e3-2e8361152cb0&quot;,&quot;f21ef039-a847-43e7-97be-55b8936c1cba&quot;,&quot;d8fb28e2-49aa-4c56-83e4-1dfeb06c2af9&quot;,&quot;80bd4385-cd68-4fad-ada0-981d4b98b100&quot;,&quot;5a85c88c-f0a9-4064-bf8a-62c80bf270ae&quot;]],&quot;^10&quot;,[&quot;^L&quot;,[]]],&quot;f21ef039-a847-43e7-97be-55b8936c1cba&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;f21ef039-a847-43e7-97be-55b8936c1cba&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Because the function isn't doing a lot of work, we don't see perfect scaling, but the threaded and GPU version still give us a nice speed-up.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;,[&quot;^ &quot;,&quot;~:runtime/inherited-environment-variables&quot;,[&quot;^L&quot;,[[&quot;^ &quot;,&quot;^M&quot;,&quot;SERVICE_9998_NAME&quot;,&quot;~:value&quot;,&quot;runtime-7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;SERVICE_9998_CHECK_TCP&quot;,&quot;^2;&quot;,&quot;true&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;SERVICE_TAGS=urlprefix-/runner/17592186656385/runtime/7f9b8ecb-113f-41ec-a965-450fd1c0faa7 strip&quot;,&quot;^2;&quot;,&quot;/runner/17592186656385/runtime/7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;NEXTJOURNAL_RUNTIME_SERVICE_URL&quot;,&quot;^2;&quot;,&quot;https://nextjournal.com/runner/17592186656385/runtime/7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;NEXTJOURNAL_MOUNT_CUDA&quot;,&quot;^2;&quot;,&quot;9.2-cudnn7-devel-ubuntu18.04&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;DISPLAY&quot;,&quot;^2;&quot;,&quot;:0&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;NVIDIA_VISIBLE_DEVICES&quot;,&quot;^2;&quot;,&quot;all&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;NVIDIA_DRIVER_CAPABILITIES&quot;,&quot;^2;&quot;,&quot;all&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;PATH&quot;,&quot;^2;&quot;,&quot;/usr/local/julia/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;JULIA_PATH&quot;,&quot;^2;&quot;,&quot;/usr/local/julia&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;JULIA_GPG&quot;,&quot;^2;&quot;,&quot;3673DF529D9049477F76B37566E3C7DC03D6E495&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;JULIA_VERSION&quot;,&quot;^2;&quot;,&quot;1.0.0&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;LC_ALL&quot;,&quot;^2;&quot;,&quot;en_US.UTF-8&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;LANGUAGE&quot;,&quot;^2;&quot;,&quot;en_US.en&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;LANG&quot;,&quot;^2;&quot;,&quot;en_US.UTF-8&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;DEBIAN_FRONTEND&quot;,&quot;^2;&quot;,&quot;noninteractive&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;BASH_ENV&quot;,&quot;^2;&quot;,&quot;/.bash_profile&quot;]]],&quot;~:type&quot;,&quot;~:nextjournal&quot;,&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;,&quot;^F&quot;,&quot;runtime&quot;,&quot;^W&quot;,null,&quot;~:environment&quot;,[&quot;^2&amp;gt;&quot;,[&quot;^ &quot;,&quot;~:article/nextjournal.id&quot;,&quot;~u0287ca51-4717-45ef-9a18-70153befcf15&quot;,&quot;~:change/nextjournal.id&quot;,&quot;~u5bc4663e-a617-4cad-a5fd-bcf13a88c7c2&quot;,&quot;~:node/id&quot;,&quot;7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;]],&quot;~:runtime/environment-variables&quot;,[[&quot;^ &quot;,&quot;^M&quot;,&quot;JULIA_NUM_THREADS&quot;,&quot;^2;&quot;,&quot;8&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;GKS_WSTYPE&quot;,&quot;^2;&quot;,&quot;png&quot;]],&quot;~:resources&quot;,&quot;~:gpu&quot;],&quot;fc35d0a2-6efb-4971-9728-e5b6198ad57e&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;fc35d0a2-6efb-4971-9728-e5b6198ad57e&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Let's quickly motivate why we would want to move our calculations to the GPU with a simple interactive code example calculating the julia set:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Conversions and copy! to CPU arrays&lt;/li&gt;
&lt;li&gt;multi dimensional indexing and slicing (xs[1:2, 5, :])&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.permutedims/&amp;quot;&quot;&gt;permutedims&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.vcat/&amp;quot;&quot;&gt;Concatenation (vcat(x, y), cat(3, xs, ys, zs))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/manual/arrays/#Broadcasting-1/&amp;quot;&quot;&gt;map, fused broadcast (zs .= xs.^2 .+ ys .* 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.fill/&amp;quot;&quot;&gt;fill(CuArray, 0f0, dims)&lt;/a&gt;, &lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.fill!/&amp;quot;&quot;&gt;fill!(gpu_array, 0)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reduction over dimensions (reduce(+, xs, dims = 3), sum(x -&amp;gt; x^2, xs, dims = 1)&lt;/li&gt;
&lt;li&gt;Reduction to scalar (&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/collections/#Base.reduce-Tuple{Any,Any}/&amp;quot;&quot;&gt;reduce(*, xs)&lt;/a&gt;, sum(xs), &lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/collections/#Base.prod/&amp;quot;&quot;&gt;prod(xs)&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Various BLAS operations (matrix*matrix, matrix*vector)&lt;/li&gt;
&lt;li&gt;FFTs, &lt;a href=&quot;/&amp;quot;https://juliamath.github.io/AbstractFFTs.jl/stable/api.html/&amp;quot;&quot;&gt;using the same API as julia's FFT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&quot;],&quot;e542cbee-022a-4da4-91bb-f683b86080f3&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;using GPUArrays, CuArrays\n# Overloading the Julia Base map! function for GPUArrays\nfunction Base.map!(f::Function, A::GPUArray, B::GPUArray)\n # our function that will run on the gpu\n function kernel(state, f, A, B)\n # If launch parameters aren't specified, linear_index gets the index\n # into the Array passed as second argument to gpu_call (`A`)\n i = linear_index(state)\n \t\tif i &amp;lt;= length(A)\n @inbounds A[i] = f(B[i])\n end\n return\n end\n # call kernel on the gpu\n gpu_call(kernel, A, (f, A, B))\nend&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;e542cbee-022a-4da4-91bb-f683b86080f3&quot;,&quot;^P&quot;,&quot;~u8ebcdb20-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;],&quot;^W&quot;,null,&quot;^X&quot;,11,&quot;^Y&quot;,null],&quot;dc1691b3-b051-4078-8105-be5693dde633&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;dc1691b3-b051-4078-8105-be5693dde633&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The nice thing is that GPUArrays takes away quite a bit of work with a layered approach that lets you start off with high level code, but allows you to pretty much write low-level kernels similarly to what one would find in most OpenCL/CUDA examples. It also allows you to execute kernels both on OpenCL or CUDA devices, abstracting away any differences in those frameworks.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;dd74954e-f344-4533-8ff4-e8e072c669aa&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;using Colors, FileIO, ImageShow\nN = 22\nimg = tX[:, :, 1:1, N:N]\nprintln(\&quot;Predicted: \&quot;, Flux.onecold(m(img)) .- 1)\nGray.(collect(tX[:, :, 1, N]))&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;,&quot;^18&quot;,1],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;dd74954e-f344-4533-8ff4-e8e072c669aa&quot;,&quot;^P&quot;,&quot;~u8ad25a80-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^F&quot;,&quot;file&quot;,&quot;^M&quot;,null,&quot;^S&quot;,&quot;display&quot;,&quot;^T&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;QmUmz4tfrmBaNWXa3iRFMrKHYKPrD5T4wNVMHYRyq6PMxX&quot;,&quot;^U&quot;,606,&quot;^V&quot;,&quot;image/png&quot;]]],&quot;^W&quot;,null,&quot;^X&quot;,6569,&quot;^Y&quot;,null],&quot;0b7718a8-066d-4e2b-a020-e3530b4284ec&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;0b7718a8-066d-4e2b-a020-e3530b4284ec&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The hope is that Julia lowers the bar for people to start programming on GPUs, and that we can grow an extendable platform for open source GPU computing. The first success story, of automatic differentiation working out of the box via Julia packages that haven't even been written for the GPU, gives a lot of reason to believe in the success of Julia's extendable and generic design in the domain of GPU computing.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;6494cb51-4ad3-4327-9e27-c2c804df6c81&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;using CUDAdrv; CUDAdrv.name(CuDevice(0))&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;6494cb51-4ad3-4327-9e27-c2c804df6c81&quot;,&quot;^P&quot;,&quot;~ufb4da180-d2e6-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^F&quot;,&quot;data&quot;,&quot;^M&quot;,null,&quot;^S&quot;,&quot;json&quot;,&quot;^T&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;QmYFmTkHeERryshLEYiyHmHukLBjwsjKHDPiNrzrZRt4M5&quot;,&quot;^U&quot;,11,&quot;^V&quot;,&quot;application/json&quot;]]],&quot;^W&quot;,null,&quot;^X&quot;,777,&quot;^Y&quot;,null],&quot;095f7d06-d4fc-49e2-a68c-96cad2fb0a62&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;095f7d06-d4fc-49e2-a68c-96cad2fb0a62&quot;,&quot;^F&quot;,&quot;section&quot;,&quot;^[&quot;,&quot;GPUArrays&quot;,&quot;^G&quot;,[&quot;^L&quot;,[&quot;f58a7aba-f416-41a0-bd08-8fe07b0df022&quot;,&quot;f70ec7d4-93d1-4076-843e-3ecd79642556&quot;]],&quot;^10&quot;,[&quot;^L&quot;,[]]],&quot;e2ce55ae-a15c-49dc-ac05-239bd226b07a&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;e2ce55ae-a15c-49dc-ac05-239bd226b07a&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;This &lt;a href=&quot;/&amp;quot;https://github.com/SimonDanisch/SchroedingersSmoke.jl/blob/master/src/parallel.jl/&amp;quot;&quot;&gt;GPU accelerated smoke simulation&lt;/a&gt; was created with GPUArrays + CLArrays and runs on both GPU or CPU, with the GPU version being up to 15x faster:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;12260210-0c7d-4cbc-9262-30ac57e4110f&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;12260210-0c7d-4cbc-9262-30ac57e4110f&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;First of all, what is a GPU anyways?&lt;/p&gt;
&lt;p&gt;&quot;],&quot;07d732ed-7e58-4970-af4a-16701813f0ee&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;using CuArrays, LinearAlgebra\n\n# GPU Arrays can be constructed from all Julia arrays containing isbits types!\nA1D = cu([1, 2, 3]) # cl for CLArrays\nA1D = fill(CuArray{Int}, 0, (100,)) # CLArray for CLArrays\n# Float32 array - Float32 is usually preferred and can be up to 30x faster on most GPUs than Float64\ndiagonal_matrix = CuArray{Float32}(I, 100, 100)\nfilled = fill(CuArray, 77f0, (4, 4, 4)) # 3D array filled with Float32 77\nrandy = rand(CuArray, Float32, 42, 42) # random numbers generated on the GPU\n# The array constructor also accepts isbits iterators with a known size\n# Note, that since you can also pass isbits types to a gpu kernel directly, in most cases you won't need to materialize them as an gpu array\nfrom_iter = CuArray(1:10)\n# let's create a point type to further illustrate what can be done:\nstruct Point\n x::Float32\n y::Float32\nend\nBase.convert(::Type{Point}, x::NTuple{2, Any}) = Point(x[1], x[2])\n# because we defined the above convert from a tuple to a point\n# [Point(2, 2)] can be written as Point[(2,2)] since all array \n# elements will get converted to Point\ncustom_types = cu(Point[(1, 2), (4, 3), (2, 2)])\ntypeof(custom_types)&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;07d732ed-7e58-4970-af4a-16701813f0ee&quot;,&quot;^P&quot;,&quot;~u558d6bd0-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^F&quot;,&quot;data&quot;,&quot;^M&quot;,null,&quot;^S&quot;,&quot;json&quot;,&quot;^T&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;QmQxCHHamFSPxeHGaz6mwcQbRfh79LdFc7DBeLT6TXZ9iD&quot;,&quot;^U&quot;,18,&quot;^V&quot;,&quot;application/json&quot;]]],&quot;^W&quot;,null,&quot;^X&quot;,4394,&quot;^Y&quot;,null],&quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;One might think that the GPU performance suffers from being written in a dynamic language like Julia, but Julia's GPU performance should be pretty much on par with the raw performance of CUDA or OpenCL. &lt;a href=&quot;/&amp;quot;https://github.com/maleadt/&amp;quot;&quot;&gt;Tim Besard&lt;/a&gt; did a great job at integrating the LLVM Nvidia compilation pipeline to achieve the same – or sometimes even better – performance as pure CUDA C code. Tim published a pretty detailed &lt;a href=&quot;/&amp;quot;https://devblogs.nvidia.com/gpu-computing-julia-programming-language//&amp;quot;&quot;&gt;blog post&lt;/a&gt; in which he explains this further. CLArrays approach is a bit different and generates OpenCL C code directly from Julia, which has the same performance as OpenCL C!&lt;/p&gt;
&lt;p&gt;&quot;],&quot;56322bde-814a-4056-8601-6ca5c8434825&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;56322bde-814a-4056-8601-6ca5c8434825&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;Let's walk through a simple Machine Learning example, to see how GPUArrays can be used:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;d8fb28e2-49aa-4c56-83e4-1dfeb06c2af9&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;d8fb28e2-49aa-4c56-83e4-1dfeb06c2af9&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;The GPU is a bit more complex than what the thread example allows us to show, since the hardware threads are laid out in &lt;a href=&quot;/&amp;quot;https://devblogs.nvidia.com/even-easier-introduction-cuda//&amp;quot;&quot;&gt;blocks of threads&lt;/a&gt; – &lt;code&gt;gpu_call&lt;/code&gt; abstracts that away in the simple version, but it can also be used with more complex launch configurations:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;7568cecf-0eaa-4fe3-bc80-9cf89360c8fb&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;7568cecf-0eaa-4fe3-bc80-9cf89360c8fb&quot;,&quot;^F&quot;,&quot;embed&quot;,&quot;~:url&quot;,&quot;https://vimeo.com/235601956&quot;],&quot;f5616db3-d53e-4347-a8c4-8be45e7308f2&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;using Plots; plotly()\nx = repeat(range, inner = 10)\nspeedup = jltimes ./ cutimes\nPlots.scatter(\n log2.(x), [speedup, fill(1.0, length(speedup))], \n label = [\&quot;cuda\&quot; \&quot;cpu\&quot;], markersize = 2, markerstrokewidth = 0,\n legend = :right, xlabel = \&quot;2^N\&quot;, ylabel = \&quot;speedup\&quot;\n)&quot;,&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^N&quot;,[&quot;^ &quot;],&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;f5616db3-d53e-4347-a8c4-8be45e7308f2&quot;,&quot;^P&quot;,&quot;~u42b5a900-d2e7-11e8-b7e3-d5a7297efcb7&quot;,&quot;^Q&quot;,[&quot;^Q&quot;,&quot;fac98232-a8eb-42d6-89e2-1b6e373a87c1&quot;],&quot;^F&quot;,&quot;code&quot;,&quot;^R&quot;,[&quot;^ &quot;,&quot;~_&quot;,[&quot;^ &quot;,&quot;^F&quot;,&quot;plotly&quot;,&quot;^M&quot;,null,&quot;^S&quot;,&quot;plotly&quot;,&quot;^T&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;QmYdUiaWGXPacP8DMfKY7pV4aewoW8S6RkatCtNCpqHrnQ&quot;,&quot;^U&quot;,57676,&quot;^V&quot;,&quot;application/json&quot;]]],&quot;^W&quot;,null,&quot;^X&quot;,30768,&quot;^Y&quot;,null],&quot;7390d157-1854-412e-bba7-0aea472566e0&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;7390d157-1854-412e-bba7-0aea472566e0&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;To get a better idea of the performance and see some comparisons to multithreadded CPU code, I collected some more &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/GPUBenchmarks.jl/blob/master/results/results.md/&amp;quot;&quot;&gt;benchmarks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&quot;],&quot;d412f192-1c45-46ba-aa09-657fd3d22093&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;d412f192-1c45-46ba-aa09-657fd3d22093&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;All those Julia types behave differently when transferred to the GPU or when created on the GPU. You can use the following table to get an overview of what to expect:&lt;/p&gt;
&lt;p&gt;&quot;],&quot;8d37d54c-4774-45ab-a1bc-bad9f73a0231&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;8d37d54c-4774-45ab-a1bc-bad9f73a0231&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;If you want a more throrough and interactive explanation of how broadcasting works, you can have a look at this great guide: &lt;a href=&quot;/&amp;quot;https://julia.guide/broadcasting/&amp;quot;&quot;&gt;julia.guide/broadcasting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&quot;],&quot;6c575ff1-1123-4a22-adbb-292a3fe99d73&quot;,[&quot;^ &quot;,&quot;^E&quot;,&quot;6c575ff1-1123-4a22-adbb-292a3fe99d73&quot;,&quot;^F&quot;,&quot;text&quot;,&quot;^G&quot;,&quot;&lt;/p&gt;
&lt;p&gt;GPUs have their own memory space with video memory (VRAM), different caches, and registers. Whatever you do, any Julia object must get transferred to the GPU before you can work with it. Not all types in Julia work on the GPU.&lt;/p&gt;
&lt;p&gt;To give you an overview first let's see what Julia types there are:&lt;/p&gt;
&lt;p&gt;&quot;]],&quot;~:transclusions&quot;,[&quot;~#cmap&quot;,[[&quot;^ &quot;,&quot;^2?&quot;,&quot;~u0287ca51-4717-45ef-9a18-70153befcf15&quot;,&quot;^2@&quot;,&quot;~u5bc4663e-a617-4cad-a5fd-bcf13a88c7c2&quot;,&quot;^2A&quot;,&quot;7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;],[&quot;^ &quot;,&quot;^2:&quot;,[&quot;^L&quot;,[[&quot;^ &quot;,&quot;^M&quot;,&quot;PATH&quot;,&quot;^2;&quot;,&quot;/usr/local/julia/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;JULIA_PATH&quot;,&quot;^2;&quot;,&quot;/usr/local/julia&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;JULIA_GPG&quot;,&quot;^2;&quot;,&quot;3673DF529D9049477F76B37566E3C7DC03D6E495&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;JULIA_VERSION&quot;,&quot;^2;&quot;,&quot;1.0.0&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;LC_ALL&quot;,&quot;^2;&quot;,&quot;en_US.UTF-8&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;LANGUAGE&quot;,&quot;^2;&quot;,&quot;en_US.en&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;LANG&quot;,&quot;^2;&quot;,&quot;en_US.UTF-8&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;DEBIAN_FRONTEND&quot;,&quot;^2;&quot;,&quot;noninteractive&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;BASH_ENV&quot;,&quot;^2;&quot;,&quot;/.bash_profile&quot;]]],&quot;^9&quot;,&quot;~m1539597886404&quot;,&quot;~:transclusion&quot;,[&quot;^ &quot;,&quot;^2?&quot;,&quot;~u0287ca51-4717-45ef-9a18-70153befcf15&quot;,&quot;^2@&quot;,&quot;~u5bc4663e-a617-4cad-a5fd-bcf13a88c7c2&quot;,&quot;^2A&quot;,&quot;7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;],&quot;^K&quot;,[&quot;^L&quot;,[]],&quot;^M&quot;,&quot;Julia GPU+Flux&quot;,&quot;~:docker/environment-image&quot;,&quot;eu.gcr.io/nextjournal-com/environment@sha256:4dfe6b9d4a85cc91cdf94c349f8f3d8028a513a9c8b58cb0d71346ccdfdbda0c&quot;,&quot;^2&amp;lt;&quot;,&quot;^2=&quot;,&quot;~:environment?&quot;,true,&quot;^O&quot;,&quot;julia&quot;,&quot;^E&quot;,&quot;7f9b8ecb-113f-41ec-a965-450fd1c0faa7&quot;,&quot;^F&quot;,&quot;runtime&quot;,&quot;~:changed?&quot;,false,&quot;^W&quot;,null,&quot;^2&amp;gt;&quot;,[&quot;^2&amp;gt;&quot;,[&quot;^ &quot;,&quot;^2?&quot;,&quot;~u0289217e-a1bb-440d-9224-f32b960a271a&quot;,&quot;^2@&quot;,&quot;~u5b7430ce-e0bf-4c81-b2c1-aee21676992b&quot;,&quot;^2A&quot;,&quot;e8f2328c-62cf-4dca-849f-73746f78304c&quot;]],&quot;^2B&quot;,[[&quot;^ &quot;,&quot;^M&quot;,&quot;NEXTJOURNAL_MOUNT_CUDA&quot;,&quot;^2;&quot;,&quot;9.2-cudnn7-devel-ubuntu18.04&quot;],[&quot;^ &quot;,&quot;^M&quot;,&quot;DISPLAY&quot;,&quot;^2;&quot;,&quot;:0&quot;]],&quot;^2C&quot;,&quot;^2D&quot;,&quot;~:diff&quot;,&quot;&quot;]]]],&quot;^E&quot;,17592186649289,&quot;^8&quot;,&quot;~u0287c2e0-a8ac-4929-b5ab-9efe94bac3c4&quot;],&quot;~:article-settings&quot;,[&quot;^ &quot;,&quot;^1D&quot;,false,&quot;^1E&quot;,false,&quot;^1F&quot;,false,&quot;^1G&quot;,false,&quot;^1H&quot;,false],&quot;~:preview?&quot;,false,&quot;~:change-id&quot;,&quot;CLPn39rYhrPF91Dbv1fxC1&quot;,&quot;^1B&quot;,&quot;published&quot;,&quot;~:html&quot;,&quot;&lt;/p&gt;
&lt;div class=&quot;\&amp;quot;main\&amp;quot;&quot; data-reactroot=&quot;\&amp;quot;\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1\&amp;quot;&quot; data-react-checksum=&quot;\&amp;quot;1889908348\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;pb7\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2\&amp;quot;&quot;&gt;
&lt;article data-node-id=&quot;\&amp;quot;3950cb96-1122-4d9f-8b74-7168fb77849a\&amp;quot;&quot; id=&quot;\&amp;quot;main\&amp;quot;&quot; class=&quot;\&amp;quot;center&quot; mwarticle=&quot;&quot; data-reactid=&quot;\&amp;quot;3\&amp;quot;&quot;&gt;
&lt;section data-node-id=&quot;\&amp;quot;fdf4733c-a4d3-4665-9137-2e15e54f5181\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;21\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-2=&quot;&quot; data-reactid=&quot;\&amp;quot;22\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;33\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;34\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;35\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;36\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;37\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h2 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd2=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;32\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;802\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;39\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;802-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;40\&amp;quot;&quot;&gt;How does the GPU work&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;43\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;d0caaf8f-5c0b-4c0e-8b9e-1bd2e2e99aed\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;44\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;54\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;55\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;56\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;57\&amp;quot;&quot; readability=&quot;7.8205128205128&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;58\&amp;quot;&quot; readability=&quot;10.753205128205&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;59\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;805\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;60\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;805-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;61\&amp;quot;&quot;&gt;This article aims to give a quick introduction about how GPUs work and specifically give an overlook of the current Julia GPU ecosystem and how easy it is to get simple GPU programs running. To make things easier, you can run all the code samples directly in the article if you have an&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://nextjournal.com/signup?code=juliacon/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;d0caaf8f-5c0b-4c0e-8b9e-1bd2e2e99aed&quot; data-reactid=&quot;\&amp;quot;62\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;806\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;64\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;806-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;65\&amp;quot;&quot;&gt;account&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span data-key=&quot;\&amp;quot;808\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;66\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;808-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;67\&amp;quot;&quot;&gt;and click on&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;808-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;68\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;69\&amp;quot;&quot;&gt;edit&lt;/strong&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;808-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;70\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;73\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;12260210-0c7d-4cbc-9262-30ac57e4110f\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;74\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;84\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;85\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;86\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;87\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;88\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;89\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;813\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;90\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;813-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;91\&amp;quot;&quot;&gt;First of all, what is a GPU anyways?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;94\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;b15e66ec-cbe7-4b87-94fc-64a1bf79ff3b\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;95\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;105\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;106\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;107\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;108\&amp;quot;&quot; readability=&quot;9.7360703812317&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;109\&amp;quot;&quot; readability=&quot;14.604105571848&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;110\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;816\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;111\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;816-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;112\&amp;quot;&quot;&gt;A GPU is a massively parallel processor, with a couple of thousand parallel processing units. For example the&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://www.nvidia.com/en-us/data-center/tesla-k80//&amp;quot;&quot; data-link-path=&quot;\&amp;quot;b15e66ec-cbe7-4b87-94fc-64a1bf79ff3b&quot; data-reactid=&quot;\&amp;quot;113\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;817\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;115\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;817-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;116\&amp;quot;&quot;&gt;Tesla k80&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;819\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;117\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;819-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;118\&amp;quot;&quot;&gt;, which is used in this article, offers 4992 parallel CUDA cores. GPUs are quite different from CPUs in terms of frequencies, latencies and hardware capabilities, but this is somewhat similar to a slow CPU with 4992 cores!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;121\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;6494cb51-4ad3-4327-9e27-c2c804df6c81\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;122\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;132\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;133\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;134\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;135\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;136\&amp;quot;&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;137\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;138\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;139\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;141\&amp;quot;&quot;&gt;CUDAdrv&lt;/span&gt;; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;144\&amp;quot;&quot;&gt;CUDAdrv&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;145\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;146\&amp;quot;&quot;&gt;name&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;148\&amp;quot;&quot;&gt;CuDevice&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;150\&amp;quot;&quot;&gt;0&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;181\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;a034c062-a45b-467f-a953-cb7702a9bad4\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;182\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;192\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;193\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;194\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;195\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;196\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;197\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;822\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;198\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;822-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;199\&amp;quot;&quot;&gt;The sheer number of parallel threads one can launch can yield massive speed-ups, but also makes it harder to utilize the GPU. Let's have a detailed look at the disadvantages one buys into when utilizing this raw power:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;202\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;6b8c8d02-f072-4454-9687-1e0b795d9e47\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;203\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;213\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;214\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;215\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;216\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;217\&amp;quot;&quot;&gt;
&lt;ul data-reactid=&quot;\&amp;quot;218\&amp;quot;&quot;&gt;&lt;li data-reactid=&quot;\&amp;quot;219\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;825\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;220\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;825-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;221\&amp;quot;&quot;&gt;A GPU is a separate piece of hardware with its own memory space and different architecture. As a result, there are long transfer times from RAM to the GPUs memory (VRAM). Even launching a kernel on the GPU (in other words scheduling a function call) introduces large latencies. Times are around ~10us for GPUs, compared to a few nano seconds on a CPU&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;222\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;827\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;223\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;827-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;224\&amp;quot;&quot;&gt;Setting up a kernel can quickly become complicated without a high level wrapper&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;225\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;829\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;226\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;829-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;227\&amp;quot;&quot;&gt;Lower precision is the default and higher precision computations can easily void all performance gains&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;228\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;831\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;229\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;831-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;230\&amp;quot;&quot;&gt;GPU functions (kernels) are inherently parallel, so writing GPU kernels is at least as difficult as writing parallel CPU code, but the difference in hardware adds quite a bit of complexity&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;231\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;833\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;232\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;833-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;233\&amp;quot;&quot;&gt;Related to the above, a lot of algorithms won't port nicely to the GPU. For more details on what to expect, have a look at this&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://streamhpc.com/blog/2013-06-03/the-application-areas-opencl-and-cuda-can-be-used//&amp;quot;&quot; data-link-path=&quot;\&amp;quot;6b8c8d02-f072-4454-9687-1e0b795d9e47&quot; data-reactid=&quot;\&amp;quot;234\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;834\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;236\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;834-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;237\&amp;quot;&quot;&gt;blog post&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;845\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;238\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;845-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;239\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;240\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;241\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;837\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;242\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;837-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;243\&amp;quot;&quot;&gt;Kernels are usually written in a C/C++ dialect, which is not the nicest language to write down your algorithms&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;244\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;839\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;245\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;839-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;246\&amp;quot;&quot;&gt;There is a divide between CUDA and OpenCL, which are the dominant frameworks used to write low-level GPU code. While CUDA only supports Nvidia hardware, OpenCL supports all hardware but is a bit rough around the edges. One needs to decide what to use, and will get pretty much stuck with that decision&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;253\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;0f5d9919-e5ed-4259-8a25-9c835cd74ab1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;254\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;264\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;265\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;266\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;267\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;268\&amp;quot;&quot; readability=&quot;11&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;269\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;846\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;270\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;846-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;271\&amp;quot;&quot;&gt;The good news is Julia, a high level scripting language, allows you to write both kernel and surrounding code in Julia itself, while running on most GPU hardware!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section data-node-id=&quot;\&amp;quot;095f7d06-d4fc-49e2-a68c-96cad2fb0a62\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;274\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;296\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f58a7aba-f416-41a0-bd08-8fe07b0df022\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;297\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;307\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;308\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;309\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;310\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;311\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;312\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;852\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;313\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;852-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;314\&amp;quot;&quot;&gt;Most highly parallel algorithms need to churn through quite a bit of data to overcome all the threading and latency overheads. So most algorithms will need arrays to manage all that data, which calls for a good GPU array library as a crucial foundation.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;317\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f70ec7d4-93d1-4076-843e-3ecd79642556\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;318\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;328\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;329\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;330\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;331\&amp;quot;&quot; readability=&quot;18.773977695167&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;332\&amp;quot;&quot; readability=&quot;32.607434944238&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;333\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;855\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;334\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;855-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;335\&amp;quot;&quot;&gt;GPUArrays.jl is that foundation in Julia. It offers an abstract array implementation tailored towards using the raw power of highly parallel hardware. It contains all the necessary functionality to set up the GPU, launch Julia GPU functions and offers some basic array algorithms.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;336\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;857\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;337\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;857-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;338\&amp;quot;&quot;&gt;Being abstract means that it needs a concrete implementation coming in the form of&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/CuArrays.jl/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;f70ec7d4-93d1-4076-843e-3ecd79642556&quot; data-reactid=&quot;\&amp;quot;339\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;858\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;341\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;858-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;342\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span data-key=&quot;\&amp;quot;860\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;343\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;860-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;344\&amp;quot;&quot;&gt;and&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/CLArrays.jl/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;f70ec7d4-93d1-4076-843e-3ecd79642556&quot; data-reactid=&quot;\&amp;quot;345\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;861\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;347\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;861-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;348\&amp;quot;&quot;&gt;CLArrays&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;863\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;349\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;863-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;350\&amp;quot;&quot;&gt;. They both offer exactly the same interface, thanks to inheriting all functionality from GPUArrays. The only difference shows up when allocating an array, which forces one to decide if the array lives on a CUDA or OpenCL device. More about this in the Memory section.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;351\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;865\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;352\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;865-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;353\&amp;quot;&quot;&gt;GPUArrays helps to reduce code duplication, because it allows one to write hardware independent GPU kernels which can be compiled to native GPU code by either CuArrays or CLArrays. So, lots of generic kernels can be shared between all packages inheriting from GPUArrays.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;354\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;867\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;355\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;867-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;356\&amp;quot;&quot;&gt;To help you choose: CuArrays only works with Nvidia GPUs, while CLArrays works with most available GPUs. CuArrays is more stable than CLArrays and works on Julia 0.7 already. The speed differences are mixed with no clear winner. I would suggest to try both and see what works best.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;357\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;869\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;358\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;869-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;359\&amp;quot;&quot;&gt;For this article I'm going to choose CuArrays, since this article is written for Julia 0.7 / 1.0, which still isn't supported by CLArrays.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;830cd8cc-8d91-412d-b90e-6f1d81a3a8a1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;363\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-3=&quot;&quot; data-reactid=&quot;\&amp;quot;364\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;375\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;376\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;377\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;378\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;379\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd3=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;374\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;872\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;381\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;872-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;382\&amp;quot;&quot;&gt;Performance&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;385\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;fc35d0a2-6efb-4971-9728-e5b6198ad57e\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;386\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;396\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;397\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;398\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;399\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;400\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;401\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;875\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;402\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;875-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;403\&amp;quot;&quot;&gt;Let's quickly motivate why we would want to move our calculations to the GPU with a simple interactive code example calculating the julia set:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;406\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;778cc725-33cc-4cb1-a388-6a9da1daff5d\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;407\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;417\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;418\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;419\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;442\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;443\&amp;quot;&quot; readability=&quot;22.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;444\&amp;quot;&quot; readability=&quot;40&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;445\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;446\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;448\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;451\&amp;quot;&quot;&gt;FileIO&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;454\&amp;quot;&quot;&gt;Colors&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;457\&amp;quot;&quot;&gt;GPUArrays&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;460\&amp;quot;&quot;&gt;BenchmarkTools&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;462\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;464\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;465\&amp;quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;467\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;469\&amp;quot;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;471\&amp;quot;&quot;&gt;The function calculating the Julia set&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;473\&amp;quot;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;475\&amp;quot;&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;477\&amp;quot;&quot;&gt;juliaset&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;479\&amp;quot;&quot;&gt;z0&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;482\&amp;quot;&quot;&gt;maxiter&lt;/span&gt;)\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;486\&amp;quot;&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;488\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;490\&amp;quot;&quot;&gt;ComplexF32&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;492\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;493\&amp;quot;&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;496\&amp;quot;&quot;&gt;0.75&lt;/span&gt;)\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;500\&amp;quot;&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;502\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;504\&amp;quot;&quot;&gt;z0&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;507\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;509\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;511\&amp;quot;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;513\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;514\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;515\&amp;quot;&quot;&gt;maxiter&lt;/span&gt;\n        &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;518\&amp;quot;&quot;&gt;abs2&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;520\&amp;quot;&quot;&gt;z&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;523\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;525\&amp;quot;&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;526\&amp;quot;&quot;&gt;f0&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;528\&amp;quot;&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;529\&amp;quot;&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;531\&amp;quot;&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;534\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;536\&amp;quot;&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;538\&amp;quot;&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;541\&amp;quot;&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;543\&amp;quot;&quot;&gt;UInt8&lt;/span&gt;\n        &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;546\&amp;quot;&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;548\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;550\&amp;quot;&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;552\&amp;quot;&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;554\&amp;quot;&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;556\&amp;quot;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;558\&amp;quot;&quot;&gt;c&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;561\&amp;quot;&quot;&gt;end&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;564\&amp;quot;&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;566\&amp;quot;&quot;&gt;maxiter&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;568\&amp;quot;&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;570\&amp;quot;&quot;&gt;UInt8&lt;/span&gt; \n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;574\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;576\&amp;quot;&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;578\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;580\&amp;quot;&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;581\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;582\&amp;quot;&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;583\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;584\&amp;quot;&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;585\&amp;quot;&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;586\&amp;quot;&quot;&gt;12&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;588\&amp;quot;&quot;&gt;cutimes&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;591\&amp;quot;&quot;&gt;jltimes&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;593\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;595\&amp;quot;&quot;&gt;Float64&lt;/span&gt;[], &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;600\&amp;quot;&quot;&gt;Float64&lt;/span&gt;[]\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;604\&amp;quot;&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;606\&amp;quot;&quot;&gt;run_bench&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;608\&amp;quot;&quot;&gt;in&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;611\&amp;quot;&quot;&gt;out&lt;/span&gt;)\n  \n  \n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;621\&amp;quot;&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;623\&amp;quot;&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;625\&amp;quot;&quot;&gt;juliaset&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;626\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;628\&amp;quot;&quot;&gt;in&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;631\&amp;quot;&quot;&gt;16&lt;/span&gt;)\n  \n  \n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;641\&amp;quot;&quot;&gt;GPUArrays&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;642\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;643\&amp;quot;&quot;&gt;synchronize&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;645\&amp;quot;&quot;&gt;out&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;648\&amp;quot;&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;652\&amp;quot;&quot;&gt;last_jl&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;655\&amp;quot;&quot;&gt;last_cu&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;657\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;659\&amp;quot;&quot;&gt;nothing&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;662\&amp;quot;&quot;&gt;nothing&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;664\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;666\&amp;quot;&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;668\&amp;quot;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;670\&amp;quot;&quot;&gt;range&lt;/span&gt;\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;673\&amp;quot;&quot;&gt;w&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;676\&amp;quot;&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;678\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;680\&amp;quot;&quot;&gt;N&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;683\&amp;quot;&quot;&gt;N&lt;/span&gt;\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;686\&amp;quot;&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;688\&amp;quot;&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;691\&amp;quot;&quot;&gt;ComplexF32&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;693\&amp;quot;&quot;&gt;r&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;696\&amp;quot;&quot;&gt;i&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;699\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;701\&amp;quot;&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;702\&amp;quot;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;703\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;704\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;705\&amp;quot;&quot;&gt;-&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;707\&amp;quot;&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;708\&amp;quot;&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;709\&amp;quot;&quot;&gt;w&lt;/span&gt;)&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;711\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;712\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;713\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;716\&amp;quot;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;717\&amp;quot;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;718\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;719\&amp;quot;&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;720\&amp;quot;&quot;&gt;:&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;722\&amp;quot;&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;723\&amp;quot;&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;724\&amp;quot;&quot;&gt;h&lt;/span&gt;)&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;726\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;727\&amp;quot;&quot;&gt;1.5&lt;/span&gt;]\n  &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;731\&amp;quot;&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;734\&amp;quot;&quot;&gt;times&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;737\&amp;quot;&quot;&gt;Typ&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;740\&amp;quot;&quot;&gt;in&lt;/span&gt; ((&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;744\&amp;quot;&quot;&gt;cutimes&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;747\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;752\&amp;quot;&quot;&gt;jltimes&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;755\&amp;quot;&quot;&gt;Array&lt;/span&gt;))\n    \n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;763\&amp;quot;&quot;&gt;q_converted&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;765\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;767\&amp;quot;&quot;&gt;Typ&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;769\&amp;quot;&quot;&gt;q&lt;/span&gt;)\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;773\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;775\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;777\&amp;quot;&quot;&gt;Typ&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;779\&amp;quot;&quot;&gt;zeros&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;781\&amp;quot;&quot;&gt;UInt8&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;784\&amp;quot;&quot;&gt;size&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;786\&amp;quot;&quot;&gt;q&lt;/span&gt;)))\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;792\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;794\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;796\&amp;quot;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;798\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;799\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;800\&amp;quot;&quot;&gt;10&lt;/span&gt; \n      \n      &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;808\&amp;quot;&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;810\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;812\&amp;quot;&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;813\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;814\&amp;quot;&quot;&gt;@elapsed&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;816\&amp;quot;&quot;&gt;begin&lt;/span&gt;\n\t\t\t\t&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;819\&amp;quot;&quot;&gt;run_bench&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;821\&amp;quot;&quot;&gt;q_converted&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;824\&amp;quot;&quot;&gt;result&lt;/span&gt;)\n      &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;828\&amp;quot;&quot;&gt;end&lt;/span&gt;\n      &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;831\&amp;quot;&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;833\&amp;quot;&quot;&gt;last_jl&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;836\&amp;quot;&quot;&gt;last_cu&lt;/span&gt; \n      &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;841\&amp;quot;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;843\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;845\&amp;quot;&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;847\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;\n        &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;850\&amp;quot;&quot;&gt;last_cu&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;852\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;854\&amp;quot;&quot;&gt;result&lt;/span&gt;\n      &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;857\&amp;quot;&quot;&gt;else&lt;/span&gt;\n      \t&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;860\&amp;quot;&quot;&gt;last_jl&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;862\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;864\&amp;quot;&quot;&gt;result&lt;/span&gt;\n      &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;867\&amp;quot;&quot;&gt;end&lt;/span&gt;\n      &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;870\&amp;quot;&quot;&gt;push!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;872\&amp;quot;&quot;&gt;times&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;875\&amp;quot;&quot;&gt;t&lt;/span&gt;)\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;879\&amp;quot;&quot;&gt;end&lt;/span&gt;\n  &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;882\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;884\&amp;quot;&quot;&gt;end&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;887\&amp;quot;&quot;&gt;cu_jl&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;889\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;891\&amp;quot;&quot;&gt;hcat&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;893\&amp;quot;&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;895\&amp;quot;&quot;&gt;last_cu&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;899\&amp;quot;&quot;&gt;last_jl&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;902\&amp;quot;&quot;&gt;cmap&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;904\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;906\&amp;quot;&quot;&gt;colormap&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;908\&amp;quot;&quot;&gt;&quot;Blues&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;909\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;912\&amp;quot;&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;914\&amp;quot;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;916\&amp;quot;&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;919\&amp;quot;&quot;&gt;color_lookup&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;921\&amp;quot;&quot;&gt;val&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;924\&amp;quot;&quot;&gt;cmap&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;927\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;929\&amp;quot;&quot;&gt;cmap&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;931\&amp;quot;&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;933\&amp;quot;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;935\&amp;quot;&quot;&gt;1&lt;/span&gt;]\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;938\&amp;quot;&quot;&gt;save&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;940\&amp;quot;&quot;&gt;&quot;results/juliaset.png&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;941\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;944\&amp;quot;&quot;&gt;color_lookup&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;945\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;947\&amp;quot;&quot;&gt;cu_jl&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;951\&amp;quot;&quot;&gt;cmap&lt;/span&gt;,)))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;result-view&quot; file-view=&quot;&quot; relative=&quot;&quot; data-reactid=&quot;\&amp;quot;978\&amp;quot;&quot;&gt;&lt;img src=&quot;https://nextjournal.com/%22/data/QmQXdNWEJhYMUpoJueuHCg2eUgjonmoP8pBTTWZTtgj5X8?content-type=image%2Fpng/%22&quot; data-reactid=&quot;\&amp;quot;984\&amp;quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;985\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f5616db3-d53e-4347-a8c4-8be45e7308f2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;986\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;996\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;997\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;998\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;999\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1000\&amp;quot;&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1001\&amp;quot;&quot; readability=&quot;19&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;1002\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1003\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1005\&amp;quot;&quot;&gt;Plots&lt;/span&gt;; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1008\&amp;quot;&quot;&gt;plotly&lt;/span&gt;()\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1012\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1014\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1016\&amp;quot;&quot;&gt;repeat&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1018\&amp;quot;&quot;&gt;range&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1021\&amp;quot;&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1023\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1025\&amp;quot;&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1028\&amp;quot;&quot;&gt;speedup&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1030\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1032\&amp;quot;&quot;&gt;jltimes&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1034\&amp;quot;&quot;&gt;./&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1036\&amp;quot;&quot;&gt;cutimes&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1038\&amp;quot;&quot;&gt;Plots&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1039\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1040\&amp;quot;&quot;&gt;scatter&lt;/span&gt;(\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1044\&amp;quot;&quot;&gt;log2&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1045\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1047\&amp;quot;&quot;&gt;x&lt;/span&gt;), [&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1052\&amp;quot;&quot;&gt;speedup&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1055\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1057\&amp;quot;&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1060\&amp;quot;&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1062\&amp;quot;&quot;&gt;speedup&lt;/span&gt;))], \n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1070\&amp;quot;&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1072\&amp;quot;&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1075\&amp;quot;&quot;&gt;&quot;cuda&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1076\&amp;quot;&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1078\&amp;quot;&quot;&gt;&quot;cpu&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1079\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;], &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1083\&amp;quot;&quot;&gt;markersize&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1085\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1087\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1090\&amp;quot;&quot;&gt;markerstrokewidth&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1092\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1094\&amp;quot;&quot;&gt;0&lt;/span&gt;,\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1098\&amp;quot;&quot;&gt;legend&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1100\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1102\&amp;quot;&quot;&gt;:right&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1105\&amp;quot;&quot;&gt;xlabel&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1107\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1109\&amp;quot;&quot;&gt;&quot;2^N&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1110\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1113\&amp;quot;&quot;&gt;ylabel&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1115\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1117\&amp;quot;&quot;&gt;&quot;speedup&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1118\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;\n)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1149\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;63a71268-3337-4bf2-8d47-b7e641d16dbb\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1150\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1160\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1161\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1162\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1163\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1164\&amp;quot;&quot; readability=&quot;9&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1165\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;878\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1166\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;878-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1167\&amp;quot;&quot;&gt;As you can see, for large arrays one gets a solid 60-80x speed-up by moving the calculation to the GPU. Getting this speed-up was as simple as converting the Julia array to a GPUArray.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1170\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1171\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1181\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1182\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1183\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1184\&amp;quot;&quot; readability=&quot;8.2186411149826&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1185\&amp;quot;&quot; readability=&quot;11.602787456446&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1186\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;881\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1187\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;881-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1188\&amp;quot;&quot;&gt;One might think that the GPU performance suffers from being written in a dynamic language like Julia, but Julia's GPU performance should be pretty much on par with the raw performance of CUDA or OpenCL.&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://github.com/maleadt/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19&quot; data-reactid=&quot;\&amp;quot;1189\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;882\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1191\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;882-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1192\&amp;quot;&quot;&gt;Tim Besard&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span data-key=&quot;\&amp;quot;884\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1193\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;884-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1194\&amp;quot;&quot;&gt;did a great job at integrating the LLVM Nvidia compilation pipeline to achieve the same – or sometimes even better – performance as pure CUDA C code. Tim published a pretty detailed&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://devblogs.nvidia.com/gpu-computing-julia-programming-language//&amp;quot;&quot; data-link-path=&quot;\&amp;quot;1b96bbbf-1dba-4b5b-9187-ab5a76361a19&quot; data-reactid=&quot;\&amp;quot;1195\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;885\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1197\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;885-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1198\&amp;quot;&quot;&gt;blog post&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span data-key=&quot;\&amp;quot;887\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1199\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;887-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1200\&amp;quot;&quot;&gt;in which he explains this further. CLArrays approach is a bit different and generates OpenCL C code directly from Julia, which has the same performance as OpenCL C!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1203\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;7390d157-1854-412e-bba7-0aea472566e0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1204\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1214\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1215\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1216\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1217\&amp;quot;&quot; readability=&quot;6.4444444444444&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1218\&amp;quot;&quot; readability=&quot;8.2857142857143&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1219\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;890\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1220\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;890-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1221\&amp;quot;&quot;&gt;To get a better idea of the performance and see some comparisons to multithreadded CPU code, I collected some more&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://github.com/JuliaGPU/GPUBenchmarks.jl/blob/master/results/results.md/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;7390d157-1854-412e-bba7-0aea472566e0&quot; data-reactid=&quot;\&amp;quot;1222\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;891\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1224\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;891-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1225\&amp;quot;&quot;&gt;benchmarks&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;893\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1226\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;893-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1227\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;2eba3a00-d38e-45f7-b5c0-8a1bba7f5ce2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1231\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1253\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;6c575ff1-1123-4a22-adbb-292a3fe99d73\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1254\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1264\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1265\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1266\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1267\&amp;quot;&quot; readability=&quot;9.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1268\&amp;quot;&quot; readability=&quot;14&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1269\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;899\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1270\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;899-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1271\&amp;quot;&quot;&gt;GPUs have their own memory space with video memory (VRAM), different caches, and registers. Whatever you do, any Julia object must get transferred to the GPU before you can work with it. Not all types in Julia work on the GPU.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;1272\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;901\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1273\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;901-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1274\&amp;quot;&quot;&gt;To give you an overview first let's see what Julia types there are:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1277\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;5b06a745-4830-4b8e-a5b2-df8449cef3b3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1278\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;1288\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;1289\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1290\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1291\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1292\&amp;quot;&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1293\&amp;quot;&quot; readability=&quot;12&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;1294\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1295\&amp;quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1297\&amp;quot;&quot;&gt;Test&lt;/span&gt; \n\n\n\t&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1306\&amp;quot;&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1307\&amp;quot;&quot;&gt;::Float32&lt;/span&gt; \n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1310\&amp;quot;&quot;&gt;end&lt;/span&gt;\n\n\n\n&lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1317\&amp;quot;&quot;&gt;@assert&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1319\&amp;quot;&quot;&gt;isbitstype&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1321\&amp;quot;&quot;&gt;Test&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1324\&amp;quot;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1326\&amp;quot;&quot;&gt;true&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1328\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1330\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1333\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1336\&amp;quot;&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1339\&amp;quot;&quot;&gt;isa&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1341\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1344\&amp;quot;&quot;&gt;Tuple&lt;/span&gt;{&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1346\&amp;quot;&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1349\&amp;quot;&quot;&gt;Int&lt;/span&gt;}) \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1355\&amp;quot;&quot;&gt;mutable&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1357\&amp;quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1359\&amp;quot;&quot;&gt;Test2&lt;/span&gt; \n\t&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1364\&amp;quot;&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1365\&amp;quot;&quot;&gt;::Float32&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1367\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1369\&amp;quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1371\&amp;quot;&quot;&gt;Test3&lt;/span&gt;\n\t\n\t&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1377\&amp;quot;&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1378\&amp;quot;&quot;&gt;::Vector{Float32&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1379\&amp;quot;&quot;&gt;}&lt;/span&gt;\n\t&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1382\&amp;quot;&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1383\&amp;quot;&quot;&gt;::Test2&lt;/span&gt; \n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1387\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1389\&amp;quot;&quot;&gt;Vector&lt;/span&gt;{&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1391\&amp;quot;&quot;&gt;Test&lt;/span&gt;} \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1396\&amp;quot;&quot;&gt;Vector&lt;/span&gt;{&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1398\&amp;quot;&quot;&gt;Test2&lt;/span&gt;} 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1432\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;d412f192-1c45-46ba-aa09-657fd3d22093\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1433\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1443\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1444\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1445\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1446\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1447\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1448\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;904\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1449\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;904-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1450\&amp;quot;&quot;&gt;All those Julia types behave differently when transferred to the GPU or when created on the GPU. You can use the following table to get an overview of what to expect:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1453\&amp;quot;&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-formula=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;1da131e8-d5a9-4e7b-a605-14391ed24107\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1454\&amp;quot;&quot; readability=&quot;16&quot;&gt;

&lt;p&gt;&lt;span data-reactid=&quot;\&amp;quot;1466\&amp;quot;&quot;&gt;&lt;span data-reactid=&quot;\&amp;quot;1467\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;katex-display\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;katex\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;katex-mathml\&amp;quot;&quot;&gt;[ isbits typeimmutable typemutable typejulia arraygpu array(device) local memorylocation of creationon CPUyes, copyno ptrs, copycopynoby referencenoon GPUyesmay contain device ptrno (on 0.7 if elimated)nonoyes]\\tiny\n\\left[\n\\begin{array}{ccccccc}\n\\text{} &amp;amp; \\text{ isbits type} &amp;amp; \\text{immutable type} &amp;amp; \\text{mutable type} &amp;amp; \\text{julia array} &amp;amp; \\text{gpu array} &amp;amp; \\text{(device) local memory} \\\\\n\\text{location of creation} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} &amp;amp; \\text{} \\\\\n\\text{on CPU} &amp;amp; \\text{yes, copy} &amp;amp; \\text{no ptrs, copy} &amp;amp; \\text{copy} &amp;amp; \\text{no} &amp;amp; \\text{by reference} &amp;amp; \\text{no} \\\\\n\\text{on GPU} &amp;amp; \\text{yes} &amp;amp; \\text{may contain device ptr} &amp;amp; \\text{no (on 0.7 if elimated)} &amp;amp; \\text{no} &amp;amp; \\text{no} &amp;amp; \\text{yes} \\\\\n\\end{array}\n\\right]&lt;/span&gt;&lt;span class=&quot;\&amp;quot;katex-html\&amp;quot;&quot; aria-hidden=&quot;\&amp;quot;true\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;base&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;minner&quot; uncramped=&quot;&quot; sizing=&quot;&quot; reset-size5=&quot;&quot; size1=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mopen&quot; style-wrap=&quot;&quot; reset-textstyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;delimsizing&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎡&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mtable\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;location of creation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;on CPU&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;on GPU&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt; isbits type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;yes, copy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;immutable type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no ptrs, copy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;may contain device ptr&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;mutable type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;copy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no (on 0.7 if elimated)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;julia array&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;gpu array&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;by reference&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;col-align-c\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;(device) local memory&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mord&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot; text=&quot;&quot; displaystyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;mord&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;mclose&quot; style-wrap=&quot;&quot; reset-textstyle=&quot;&quot; textstyle=&quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;delimsizing&quot;&gt;&lt;span class=&quot;\&amp;quot;vlist\&amp;quot;&quot;&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎦&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;delimsizinginner&quot;&gt;&lt;span&gt;⎤&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;baseline-fix\&amp;quot;&quot;&gt;&lt;span class=&quot;\&amp;quot;fontsize-ensurer&quot; reset-size1=&quot;&quot;&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1470\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;b9afd6ac-9711-4b4b-9f88-89e40405af04\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1471\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1481\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1482\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1483\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1484\&amp;quot;&quot; readability=&quot;9&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1485\&amp;quot;&quot; readability=&quot;13&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1486\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;907\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1487\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;907-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1488\&amp;quot;&quot;&gt;Location of creation describes if the object was created on the CPU and then transferred to the GPU kernel, or if it was created on the GPU inside the kernel. The table shows if it is possible to create an instance of a type, and for the transfer from CPU to GPU, the table also indicates if the object gets copied or passed by reference.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section data-node-id=&quot;\&amp;quot;90e93106-c175-437c-a107-fb911bf59788\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1491\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-4=&quot;&quot; data-reactid=&quot;\&amp;quot;1492\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1503\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1504\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1505\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1506\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1507\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h4 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd4=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;1502\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;910\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1509\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;910-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1510\&amp;quot;&quot;&gt;Garbage Collection&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1513\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;fe642bca-b571-4183-a38a-1e937833a4d8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1514\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1524\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1525\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1526\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1527\&amp;quot;&quot; readability=&quot;10.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1528\&amp;quot;&quot; readability=&quot;16&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1529\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;913\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1530\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;913-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1531\&amp;quot;&quot;&gt;A big difference when working with the GPU is that there is no garbage collector (GC) on the GPU. This is gladly not a big issue, since the kind of high performance kernel one writes for the GPU shouldn't create any GC-tracked memory to begin with.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;1532\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;915\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1533\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;915-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1534\&amp;quot;&quot;&gt;Implementing a GC for the GPU is possible, but remember that every kernel executed is massively parallel. Creating and tracking lots of heap memory in every one of the ~1000 gpu threads will quickly destroy any performance gains, so it's really just not worth the effort.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1537\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;24e4194b-b6fd-43c4-b876-cc6b6aea8403\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1538\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1548\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1549\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1550\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1551\&amp;quot;&quot; readability=&quot;9&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1552\&amp;quot;&quot; readability=&quot;13&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1553\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;918\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1554\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;918-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1555\&amp;quot;&quot;&gt;As an alternative to heap allocated arrays inside the kernel, you can use GPUArrays. The GPUArray constructor will create GPU buffers and transfer the data to VRAM. If you call&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;918-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1556\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;1557\&amp;quot;&quot;&gt;Array(gpu_array)&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;918-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1558\&amp;quot;&quot;&gt;the array will get transferred back to RAM, represented as a normal Julia Array. The Julia handle to those gpu arrays is tracked by Julia's GC and if it's not used anymore, the GPU memory will be freed.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1561\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f9c22c0d-fa74-4a04-a4a8-52ccfea9b2d7\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1562\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1572\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1573\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1574\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1575\&amp;quot;&quot; readability=&quot;8.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1576\&amp;quot;&quot; readability=&quot;12&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1577\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;923\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1578\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;923-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1579\&amp;quot;&quot;&gt;Consequently, one can only use stack allocation on the device, and for the rest pre-allocated GPU buffers are used. As transfers are expensive, it is common to reuse and pre-allocate as much as possible when programming the GPU.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;4e09f815-feab-4f09-8d9f-e63eba843aa2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1583\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-4=&quot;&quot; data-reactid=&quot;\&amp;quot;1584\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1595\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1596\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1597\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1598\&amp;quot;&quot; readability=&quot;6&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1599\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h4 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd4=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;1594\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;926\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1601\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;926-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1602\&amp;quot;&quot;&gt;The GPUArray Constructors&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1605\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;07d732ed-7e58-4970-af4a-16701813f0ee\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1606\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;1616\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;1617\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1618\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1619\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1620\&amp;quot;&quot; readability=&quot;19&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1621\&amp;quot;&quot; readability=&quot;33&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;1622\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1623\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1625\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1628\&amp;quot;&quot;&gt;LinearAlgebra&lt;/span&gt;\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1633\&amp;quot;&quot;&gt;A1D&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1635\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1637\&amp;quot;&quot;&gt;cu&lt;/span&gt;([&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1640\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1643\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1646\&amp;quot;&quot;&gt;3&lt;/span&gt;]) \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1652\&amp;quot;&quot;&gt;A1D&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1654\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1656\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1658\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;{&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1660\&amp;quot;&quot;&gt;Int&lt;/span&gt;}, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1664\&amp;quot;&quot;&gt;0&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1668\&amp;quot;&quot;&gt;100&lt;/span&gt;,)) \n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1677\&amp;quot;&quot;&gt;diagonal_matrix&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1679\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1681\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1682\&amp;quot;&quot;&gt;{Float32}&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1684\&amp;quot;&quot;&gt;I&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1687\&amp;quot;&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1690\&amp;quot;&quot;&gt;100&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1693\&amp;quot;&quot;&gt;filled&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1695\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1697\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1699\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1702\&amp;quot;&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1703\&amp;quot;&quot;&gt;f0&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1707\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1710\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1713\&amp;quot;&quot;&gt;4&lt;/span&gt;)) \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1719\&amp;quot;&quot;&gt;randy&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1721\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1723\&amp;quot;&quot;&gt;rand&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1725\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1728\&amp;quot;&quot;&gt;Float32&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1731\&amp;quot;&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1734\&amp;quot;&quot;&gt;42&lt;/span&gt;) \n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1743\&amp;quot;&quot;&gt;from_iter&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1745\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1747\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1749\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1750\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1751\&amp;quot;&quot;&gt;10&lt;/span&gt;)\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1756\&amp;quot;&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1758\&amp;quot;&quot;&gt;Point&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1761\&amp;quot;&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1762\&amp;quot;&quot;&gt;::Float32&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1765\&amp;quot;&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1766\&amp;quot;&quot;&gt;::Float32&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1768\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1770\&amp;quot;&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1771\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1772\&amp;quot;&quot;&gt;convert&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1774\&amp;quot;&quot;&gt;::Type{Point&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1775\&amp;quot;&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1778\&amp;quot;&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1779\&amp;quot;&quot;&gt;::NTuple{2, Any&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1780\&amp;quot;&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1783\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1785\&amp;quot;&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1787\&amp;quot;&quot;&gt;x&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1789\&amp;quot;&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1793\&amp;quot;&quot;&gt;x&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1795\&amp;quot;&quot;&gt;2&lt;/span&gt;])\n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1805\&amp;quot;&quot;&gt;custom_types&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1807\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1809\&amp;quot;&quot;&gt;cu&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1811\&amp;quot;&quot;&gt;Point&lt;/span&gt;[(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1814\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1817\&amp;quot;&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1822\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1825\&amp;quot;&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1830\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1833\&amp;quot;&quot;&gt;2&lt;/span&gt;)])\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1838\&amp;quot;&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1840\&amp;quot;&quot;&gt;custom_types&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;bd97b005-9736-4628-a5db-26d82089d15a\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1872\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-3=&quot;&quot; data-reactid=&quot;\&amp;quot;1873\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1884\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1885\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1886\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1887\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1888\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd3=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;1883\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;929\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1890\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;929-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1891\&amp;quot;&quot;&gt;Array Operations&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1894\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;a8566d64-5ace-4acf-ad8e-2021d18c225d\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1895\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1905\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;1906\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;1907\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1908\&amp;quot;&quot; readability=&quot;7.853919239905&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1909\&amp;quot;&quot; readability=&quot;11.087885985748&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;1910\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;932\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1911\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;932-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1912\&amp;quot;&quot;&gt;Lots of operations are already defined. Most importantly, GPUArrays support Julia's&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://julialang.org/blog/2018/05/extensible-broadcast-fusion/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;a8566d64-5ace-4acf-ad8e-2021d18c225d&quot; data-reactid=&quot;\&amp;quot;1913\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;933\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1915\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;933-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1916\&amp;quot;&quot;&gt;fusing dot broadcasting notation&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;935\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1917\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;935-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1918\&amp;quot;&quot;&gt;. This notation allows you to apply a function to each element of an array, and create a new array out of the return values of&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;935-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1919\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;1920\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;1921\&amp;quot;&quot;&gt;f&lt;/strong&gt;&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;935-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1922\&amp;quot;&quot;&gt;. This functionality is usually referred to as a map. The broadcast refers to the fact that arrays with different shapes get broadcasted to the same shape.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;1923\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;939\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1924\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;939-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1925\&amp;quot;&quot;&gt;This is how it works:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1928\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;298522f5-fb0c-43df-aa38-e8949ef6685e\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1929\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;1939\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;1940\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;1941\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;1942\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1943\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1944\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;1945\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1946\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1948\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1950\&amp;quot;&quot;&gt;zeros&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1952\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1955\&amp;quot;&quot;&gt;4&lt;/span&gt;) \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1960\&amp;quot;&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1962\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1964\&amp;quot;&quot;&gt;zeros&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1966\&amp;quot;&quot;&gt;4&lt;/span&gt;) \n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1971\&amp;quot;&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1973\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1975\&amp;quot;&quot;&gt;2&lt;/span&gt; \n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1985\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1987\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1989\&amp;quot;&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1991\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;1993\&amp;quot;&quot;&gt;z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2022\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;e60c9e23-2f00-46ad-9973-a31470112212\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2023\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2033\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2034\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2035\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2036\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2037\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2038\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;942\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2039\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;942-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2040\&amp;quot;&quot;&gt;The fusion happens because the Julia compiler will rewrite this expression into one lazy broadcast call that gets the call tree passed, which then can fuse the whole call tree into one function before looping over the array.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2043\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;8d37d54c-4774-45ab-a1bc-bad9f73a0231\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2044\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2054\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2055\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2056\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2057\&amp;quot;&quot; readability=&quot;5.8947368421053&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2058\&amp;quot;&quot; readability=&quot;7.5789473684211&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2059\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;945\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2060\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;945-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2061\&amp;quot;&quot;&gt;If you want a more throrough and interactive explanation of how broadcasting works, you can have a look at this great guide:&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://julia.guide/broadcasting/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;8d37d54c-4774-45ab-a1bc-bad9f73a0231&quot; data-reactid=&quot;\&amp;quot;2062\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;946\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2064\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;946-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2065\&amp;quot;&quot;&gt;julia.guide/broadcasting&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;950\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2066\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;950-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2067\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2068\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2071\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;8b302ae5-daef-427a-8cd2-b1dbbf1679f3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2072\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2082\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2083\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2084\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2085\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2086\&amp;quot;&quot; readability=&quot;11&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2087\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;951\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2088\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;951-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2089\&amp;quot;&quot;&gt;This means any Julia function that runs without allocating heap memory (only creating isbits types), can be applied to each element of a GPUArray and multiple dot calls will get fused into one kernel call. As kernel call latency is high, this fusion is a very important optimization.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2092\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;62a9ecf5-18af-4956-98e1-a95cd0c47859\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2093\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;2103\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;2104\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2105\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2106\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2107\&amp;quot;&quot; readability=&quot;17&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2108\&amp;quot;&quot; readability=&quot;29&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;2109\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2110\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2112\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2114\&amp;quot;&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2116\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2118\&amp;quot;&quot;&gt;cu&lt;/span&gt;([&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2121\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2124\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2127\&amp;quot;&quot;&gt;3&lt;/span&gt;])\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2131\&amp;quot;&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2133\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2135\&amp;quot;&quot;&gt;cu&lt;/span&gt;([&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2138\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2141\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2144\&amp;quot;&quot;&gt;3&lt;/span&gt;])\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2148\&amp;quot;&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2150\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2152\&amp;quot;&quot;&gt;rand&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2154\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2157\&amp;quot;&quot;&gt;Float32&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2160\&amp;quot;&quot;&gt;3&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2163\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2165\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2167\&amp;quot;&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2169\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2171\&amp;quot;&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2173\&amp;quot;&quot;&gt;.-&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2175\&amp;quot;&quot;&gt;C&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2177\&amp;quot;&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2179\&amp;quot;&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2180\&amp;quot;&quot;&gt;::T&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2183\&amp;quot;&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2185\&amp;quot;&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2187\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2189\&amp;quot;&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2191\&amp;quot;&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2193\&amp;quot;&quot;&gt;convert&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2195\&amp;quot;&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2198\&amp;quot;&quot;&gt;2&lt;/span&gt;) \n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2206\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2208\&amp;quot;&quot;&gt;.=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2210\&amp;quot;&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2211\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2213\&amp;quot;&quot;&gt;A&lt;/span&gt;) \n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2223\&amp;quot;&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-error\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2224\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2225\&amp;quot;&quot;&gt;:&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2227\&amp;quot;&quot;&gt;+&lt;/span&gt;)(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2230\&amp;quot;&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2231\&amp;quot;&quot;&gt;::Point&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2234\&amp;quot;&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2235\&amp;quot;&quot;&gt;::Point&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2238\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2240\&amp;quot;&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2242\&amp;quot;&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2243\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2244\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2246\&amp;quot;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2248\&amp;quot;&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2249\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2250\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2253\&amp;quot;&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2254\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2255\&amp;quot;&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2257\&amp;quot;&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2259\&amp;quot;&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2260\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2261\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2267\&amp;quot;&quot;&gt;custom_types&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2269\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2271\&amp;quot;&quot;&gt;cu&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2273\&amp;quot;&quot;&gt;Point&lt;/span&gt;[(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2276\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2279\&amp;quot;&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2284\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2287\&amp;quot;&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2292\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2295\&amp;quot;&quot;&gt;2&lt;/span&gt;)])\n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2305\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2307\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2309\&amp;quot;&quot;&gt;custom_types&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2311\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2313\&amp;quot;&quot;&gt;Ref&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2315\&amp;quot;&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2317\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2320\&amp;quot;&quot;&gt;2&lt;/span&gt;))\n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2329\&amp;quot;&quot;&gt;broadcasted&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2331\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2333\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2335\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2338\&amp;quot;&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2340\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2343\&amp;quot;&quot;&gt;2&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2348\&amp;quot;&quot;&gt;3&lt;/span&gt;,))\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2354\&amp;quot;&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2356\&amp;quot;&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2358\&amp;quot;&quot;&gt;custom_types&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2360\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2362\&amp;quot;&quot;&gt;broadcasted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2391\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;d612c50e-123b-46d2-bb0f-acb93ea1e9a5\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2392\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2402\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2403\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2404\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2405\&amp;quot;&quot; readability=&quot;6&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2406\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2407\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;954\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2408\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;954-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2409\&amp;quot;&quot;&gt;Some more operations supported by GPUArrays:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2412\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2413\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2423\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2424\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2425\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2426\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2427\&amp;quot;&quot;&gt;
&lt;ul data-reactid=&quot;\&amp;quot;2428\&amp;quot;&quot;&gt;&lt;li data-reactid=&quot;\&amp;quot;2429\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;957\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2430\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;957-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2431\&amp;quot;&quot;&gt;Conversions and copy! to CPU arrays&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2432\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;959\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2433\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;959-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2434\&amp;quot;&quot;&gt;multi dimensional indexing and slicing (xs[1:2, 5, :])&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2435\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;995\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2436\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;995-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2437\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2438\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.permutedims/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2439\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;961\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2441\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;961-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2442\&amp;quot;&quot;&gt;permutedims&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;996\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2443\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;996-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2444\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2445\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2446\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;997\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2447\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;997-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2448\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2449\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.vcat/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2450\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;964\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2452\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;964-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2453\&amp;quot;&quot;&gt;Concatenation (vcat(x, y), cat(3, xs, ys, zs))&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;998\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2454\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;998-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2455\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2456\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2457\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;999\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2458\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;999-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2459\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2460\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/manual/arrays/#Broadcasting-1/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2461\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;967\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2463\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;967-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2464\&amp;quot;&quot;&gt;map, fused broadcast (zs .= xs.^2 .+ ys .* 2)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;1000\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2465\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1000-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2466\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2467\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2468\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1001\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2469\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1001-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2470\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2471\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.fill/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2472\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;970\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2474\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;970-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2475\&amp;quot;&quot;&gt;fill(CuArray, 0f0, dims)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;972\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2476\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;972-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2477\&amp;quot;&quot;&gt;,&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/arrays/#Base.fill!/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2478\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;973\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2480\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;973-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2481\&amp;quot;&quot;&gt;fill!(gpu_array, 0)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2484\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;977\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2485\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;977-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2486\&amp;quot;&quot;&gt;Reduction over dimensions (reduce(+, xs, dims = 3), sum(x -&amp;gt; x^2, xs, dims = 1)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2487\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;979\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2488\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;979-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2489\&amp;quot;&quot;&gt;Reduction to scalar (&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/collections/#Base.reduce-Tuple{Any,Any}/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2490\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;980\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2492\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;980-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2493\&amp;quot;&quot;&gt;reduce(*, xs)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;982\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2494\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;982-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2495\&amp;quot;&quot;&gt;, sum(xs),&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://docs.julialang.org/en/latest/base/collections/#Base.prod/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2496\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;983\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2498\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;983-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2499\&amp;quot;&quot;&gt;prod(xs)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;985\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2500\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;985-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2501\&amp;quot;&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2502\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;987\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2503\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;987-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2504\&amp;quot;&quot;&gt;Various BLAS operations (matrix*matrix, matrix*vector)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li data-reactid=&quot;\&amp;quot;2505\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;989\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2506\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;989-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2507\&amp;quot;&quot;&gt;FFTs,&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://juliamath.github.io/AbstractFFTs.jl/stable/api.html/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;bd6e2023-447e-4062-a7d8-9c25f509d4c8&quot; data-reactid=&quot;\&amp;quot;2508\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;990\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2510\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;990-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2511\&amp;quot;&quot;&gt;using the same API as julia's FFT&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;1002\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2512\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1002-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2513\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2514\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;e4267f2c-06e0-4ae1-b250-66a9565b765b\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2519\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-2=&quot;&quot; data-reactid=&quot;\&amp;quot;2520\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2531\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2532\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2533\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2534\&amp;quot;&quot; readability=&quot;6&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2535\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h2 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd2=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;2530\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1003\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2537\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1003-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2538\&amp;quot;&quot;&gt;GPUArrays in the real world&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2541\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;bfa64579-c73b-48b7-b6c4-88fd69aaf9d1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2542\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2552\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2553\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2554\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2555\&amp;quot;&quot; readability=&quot;6&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2556\&amp;quot;&quot; readability=&quot;7&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2557\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1006\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2558\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1006-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2559\&amp;quot;&quot;&gt;Let's jump right into some cool use cases.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2589\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-embed=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;7568cecf-0eaa-4fe3-bc80-9cf89360c8fb\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2590\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2600\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;embed&quot; data-reactid=&quot;\&amp;quot;2601\&amp;quot;&quot;&gt;
&lt;p&gt;&lt;iframe class=&quot;\&amp;quot;absolute&quot; w-100=&quot;&quot; src=&quot;/&amp;quot;https://player.vimeo.com/video/235601956/&amp;quot;&quot; frameborder=&quot;\&amp;quot;0\&amp;quot;&quot; allowfullscreen=&quot;\&amp;quot;\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2603\&amp;quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2637\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;56322bde-814a-4056-8601-6ca5c8434825\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2638\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2648\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;2649\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;2650\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2651\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2652\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;2653\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1024\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2654\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1024-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2655\&amp;quot;&quot;&gt;Let's walk through a simple Machine Learning example, to see how GPUArrays can be used:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2658\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;4a7aa2b0-fb74-40b6-8b52-cbedeaf7597a\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2659\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;2669\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;2670\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;2671\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;2694\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2695\&amp;quot;&quot; readability=&quot;26.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2696\&amp;quot;&quot; readability=&quot;48&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;2697\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2698\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2700\&amp;quot;&quot;&gt;Flux&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2703\&amp;quot;&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2704\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2705\&amp;quot;&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2706\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2707\&amp;quot;&quot;&gt;MNIST&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2710\&amp;quot;&quot;&gt;Statistics&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2712\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2714\&amp;quot;&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2715\&amp;quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2717\&amp;quot;&quot;&gt;onehotbatch&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2720\&amp;quot;&quot;&gt;onecold&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2723\&amp;quot;&quot;&gt;crossentropy&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2726\&amp;quot;&quot;&gt;throttle&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2728\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2730\&amp;quot;&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2731\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2732\&amp;quot;&quot;&gt;Iterators&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2733\&amp;quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2735\&amp;quot;&quot;&gt;repeated&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2738\&amp;quot;&quot;&gt;partition&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2740\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2742\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;\n\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2748\&amp;quot;&quot;&gt;imgs&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2750\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2752\&amp;quot;&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2753\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2754\&amp;quot;&quot;&gt;images&lt;/span&gt;()\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2759\&amp;quot;&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2761\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2763\&amp;quot;&quot;&gt;onehotbatch&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2765\&amp;quot;&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2766\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2767\&amp;quot;&quot;&gt;labels&lt;/span&gt;(), &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2772\&amp;quot;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2773\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2774\&amp;quot;&quot;&gt;9&lt;/span&gt;)\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2780\&amp;quot;&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2782\&amp;quot;&quot;&gt;=&lt;/span&gt; [(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2786\&amp;quot;&quot;&gt;cat&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2788\&amp;quot;&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2789\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2791\&amp;quot;&quot;&gt;imgs&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2793\&amp;quot;&quot;&gt;i&lt;/span&gt;])&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2796\&amp;quot;&quot;&gt;...&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2799\&amp;quot;&quot;&gt;dims&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2801\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2803\&amp;quot;&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2807\&amp;quot;&quot;&gt;labels&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2809\&amp;quot;&quot;&gt;:&lt;/span&gt;,&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2811\&amp;quot;&quot;&gt;i&lt;/span&gt;])\n         &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2816\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2818\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2820\&amp;quot;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2822\&amp;quot;&quot;&gt;partition&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2824\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2825\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2826\&amp;quot;&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2827\&amp;quot;&quot;&gt;_000&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2830\&amp;quot;&quot;&gt;1000&lt;/span&gt;)]\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2835\&amp;quot;&quot;&gt;use_gpu&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2837\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2839\&amp;quot;&quot;&gt;true&lt;/span&gt; \n\n&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2844\&amp;quot;&quot;&gt;todevice&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2846\&amp;quot;&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2849\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2851\&amp;quot;&quot;&gt;use_gpu&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2853\&amp;quot;&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2855\&amp;quot;&quot;&gt;gpu&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2857\&amp;quot;&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2860\&amp;quot;&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2862\&amp;quot;&quot;&gt;x&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2865\&amp;quot;&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2867\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2869\&amp;quot;&quot;&gt;todevice&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2870\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2872\&amp;quot;&quot;&gt;train&lt;/span&gt;)\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2878\&amp;quot;&quot;&gt;tX&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2880\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2882\&amp;quot;&quot;&gt;cat&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2884\&amp;quot;&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2885\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2887\&amp;quot;&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2888\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2889\&amp;quot;&quot;&gt;images&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2891\&amp;quot;&quot;&gt;:test&lt;/span&gt;)[&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2894\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2895\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2896\&amp;quot;&quot;&gt;1000&lt;/span&gt;])&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2899\&amp;quot;&quot;&gt;...&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2902\&amp;quot;&quot;&gt;dims&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2904\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2906\&amp;quot;&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2909\&amp;quot;&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2910\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2912\&amp;quot;&quot;&gt;todevice&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2914\&amp;quot;&quot;&gt;tY&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2916\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2918\&amp;quot;&quot;&gt;onehotbatch&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2920\&amp;quot;&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2921\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2922\&amp;quot;&quot;&gt;labels&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2924\&amp;quot;&quot;&gt;:test&lt;/span&gt;)[&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2927\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2928\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2929\&amp;quot;&quot;&gt;1000&lt;/span&gt;], &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2933\&amp;quot;&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2934\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2935\&amp;quot;&quot;&gt;9&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2938\&amp;quot;&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2939\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2941\&amp;quot;&quot;&gt;todevice&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2944\&amp;quot;&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2946\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2948\&amp;quot;&quot;&gt;Chain&lt;/span&gt;(\n  &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2952\&amp;quot;&quot;&gt;Conv&lt;/span&gt;((&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2955\&amp;quot;&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2957\&amp;quot;&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2961\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2962\&amp;quot;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2963\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2964\&amp;quot;&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2967\&amp;quot;&quot;&gt;relu&lt;/span&gt;),\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2972\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2974\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2975\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2977\&amp;quot;&quot;&gt;maxpool&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2979\&amp;quot;&quot;&gt;x&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2983\&amp;quot;&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2985\&amp;quot;&quot;&gt;2&lt;/span&gt;)),\n  &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2991\&amp;quot;&quot;&gt;Conv&lt;/span&gt;((&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2994\&amp;quot;&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;2996\&amp;quot;&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3000\&amp;quot;&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3001\&amp;quot;&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3002\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3003\&amp;quot;&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3006\&amp;quot;&quot;&gt;relu&lt;/span&gt;),\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3011\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3013\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3014\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3016\&amp;quot;&quot;&gt;maxpool&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3018\&amp;quot;&quot;&gt;x&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3022\&amp;quot;&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3024\&amp;quot;&quot;&gt;2&lt;/span&gt;)),\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3030\&amp;quot;&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3032\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3033\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3035\&amp;quot;&quot;&gt;reshape&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3037\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3040\&amp;quot;&quot;&gt;:&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3043\&amp;quot;&quot;&gt;size&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3045\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3048\&amp;quot;&quot;&gt;4&lt;/span&gt;)),\n  &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3054\&amp;quot;&quot;&gt;Dense&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3056\&amp;quot;&quot;&gt;288&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3059\&amp;quot;&quot;&gt;10&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3063\&amp;quot;&quot;&gt;softmax&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3066\&amp;quot;&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3067\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3069\&amp;quot;&quot;&gt;todevice&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3072\&amp;quot;&quot;&gt;m&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3074\&amp;quot;&quot;&gt;train&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3076\&amp;quot;&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3079\&amp;quot;&quot;&gt;1&lt;/span&gt;])\n\n&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3084\&amp;quot;&quot;&gt;loss&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3086\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3089\&amp;quot;&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3092\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3094\&amp;quot;&quot;&gt;crossentropy&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3096\&amp;quot;&quot;&gt;m&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3098\&amp;quot;&quot;&gt;x&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3102\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n\n&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3106\&amp;quot;&quot;&gt;accuracy&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3108\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3111\&amp;quot;&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3114\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3116\&amp;quot;&quot;&gt;mean&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3118\&amp;quot;&quot;&gt;onecold&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3120\&amp;quot;&quot;&gt;m&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3122\&amp;quot;&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3126\&amp;quot;&quot;&gt;.==&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3128\&amp;quot;&quot;&gt;onecold&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3130\&amp;quot;&quot;&gt;y&lt;/span&gt;))\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3135\&amp;quot;&quot;&gt;evalcb&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3137\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3139\&amp;quot;&quot;&gt;throttle&lt;/span&gt;(() &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3144\&amp;quot;&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3145\&amp;quot;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3147\&amp;quot;&quot;&gt;@show&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3149\&amp;quot;&quot;&gt;accuracy&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3151\&amp;quot;&quot;&gt;tX&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3154\&amp;quot;&quot;&gt;tY&lt;/span&gt;)), &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3159\&amp;quot;&quot;&gt;10&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3162\&amp;quot;&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3164\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3166\&amp;quot;&quot;&gt;ADAM&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3168\&amp;quot;&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3169\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3170\&amp;quot;&quot;&gt;params&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3172\&amp;quot;&quot;&gt;m&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3198\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;7bf252ce-e3a3-4312-b3c8-5c6d74dbd62e\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3199\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;3209\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;3210\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3211\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3212\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3213\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3214\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;3215\&amp;quot;&quot;&gt;
\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3218\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3220\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3222\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3224\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3225\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3226\&amp;quot;&quot;&gt;10&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3229\&amp;quot;&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3230\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3231\&amp;quot;&quot;&gt;train!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3233\&amp;quot;&quot;&gt;loss&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3236\&amp;quot;&quot;&gt;train&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3239\&amp;quot;&quot;&gt;opt&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3242\&amp;quot;&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3244\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3246\&amp;quot;&quot;&gt;evalcb&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3249\&amp;quot;&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3281\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;dd74954e-f344-4533-8ff4-e8e072c669aa\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3282\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;3292\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;3293\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3294\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3295\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3296\&amp;quot;&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3297\&amp;quot;&quot; readability=&quot;17&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;3298\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3299\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3301\&amp;quot;&quot;&gt;Colors&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3304\&amp;quot;&quot;&gt;FileIO&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3307\&amp;quot;&quot;&gt;ImageShow&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3309\&amp;quot;&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3311\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3313\&amp;quot;&quot;&gt;22&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3315\&amp;quot;&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3317\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3319\&amp;quot;&quot;&gt;tX&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3321\&amp;quot;&quot;&gt;:&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3324\&amp;quot;&quot;&gt;:&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3327\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3328\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3329\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3332\&amp;quot;&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3333\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3334\&amp;quot;&quot;&gt;N&lt;/span&gt;]\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3337\&amp;quot;&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3339\&amp;quot;&quot;&gt;&quot;Predicted: &lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3340\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3343\&amp;quot;&quot;&gt;Flux&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3344\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3345\&amp;quot;&quot;&gt;onecold&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3347\&amp;quot;&quot;&gt;m&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3349\&amp;quot;&quot;&gt;img&lt;/span&gt;)) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3353\&amp;quot;&quot;&gt;.-&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3355\&amp;quot;&quot;&gt;1&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3358\&amp;quot;&quot;&gt;Gray&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3359\&amp;quot;&quot;&gt;.&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3361\&amp;quot;&quot;&gt;collect&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3363\&amp;quot;&quot;&gt;tX&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3365\&amp;quot;&quot;&gt;:&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3368\&amp;quot;&quot;&gt;:&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3371\&amp;quot;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3374\&amp;quot;&quot;&gt;N&lt;/span&gt;]))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3415\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;b4e4c855-1f1c-4bbc-8b4c-704550497733\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3416\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3426\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3427\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3428\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3429\&amp;quot;&quot; readability=&quot;9.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3430\&amp;quot;&quot; readability=&quot;14&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3431\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1027\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3432\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1027-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3433\&amp;quot;&quot;&gt;Just by converting the arrays to GPUArrays (with&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1027-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3434\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3435\&amp;quot;&quot;&gt;gpu(array)&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;1027-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3436\&amp;quot;&quot;&gt;) we were able to move the entire computation to the GPU and get a pretty nice speed improvement. This is thanks to Julia's sophisticated AbstractArray infrastructure, into which GPUArrays seamlessly integrates. Subsequently, if you leave out the conversion to a GPUArray, the code will also run with normal Julia arrays – but then of course on the CPU. You can try this out by changing&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1027-3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3437\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3438\&amp;quot;&quot;&gt;use_gpu = true&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1027-4\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3439\&amp;quot;&quot;&gt;to&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1027-5\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3440\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3441\&amp;quot;&quot;&gt;use_gpu = false&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1027-6\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3442\&amp;quot;&quot;&gt;and rerun the initialization and training cells. Comparing GPU and CPU, I get 975 seconds for a CPU run and 29 seonds for the GPU - which is a nice speed-up of ~&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;1027-7\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3443\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;3444\&amp;quot;&quot;&gt;33x&lt;/strong&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;1027-8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3445\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3448\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f6e7762e-b6c5-4960-840a-8c46fb255143\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3449\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3459\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3460\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3461\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3462\&amp;quot;&quot; readability=&quot;7.0220913107511&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3463\&amp;quot;&quot; readability=&quot;9.6553755522828&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3464\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1038\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3465\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1038-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3466\&amp;quot;&quot;&gt;Another nice property to look at is that GPUArrays never had to implement automatic differentiation explicitly to support the backward pass of the neuronal network efficiently. This is because Julia's automatic differentiation libraries work for arbitrary functions and emit code&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://mikeinnes.github.io/2017/08/24/cudanative.html/&amp;quot;&quot; data-link-path=&quot;\&amp;quot;f6e7762e-b6c5-4960-840a-8c46fb255143&quot; data-reactid=&quot;\&amp;quot;3467\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1039\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3469\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1039-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3470\&amp;quot;&quot;&gt;that can run efficiently on the GPU&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;1041\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3471\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1041-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3472\&amp;quot;&quot;&gt;. This helps a lot to get Flux working on the GPU with minimal developer effort - and makes Flux GPU support work efficiently even for user defined functions. That this works out of the box without coordination between GPUArrays + Flux is a pretty unique property of Julia, which is explained in great detail in:&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;http://www.stochasticlifestyle.com/why-numba-and-cython-are-not-substitutes-for-julia//&amp;quot;&quot; data-link-path=&quot;\&amp;quot;f6e7762e-b6c5-4960-840a-8c46fb255143&quot; data-reactid=&quot;\&amp;quot;3473\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1042\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3475\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1042-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3476\&amp;quot;&quot;&gt;Why Numba and Cython are no substitute for Julia&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-key=&quot;\&amp;quot;1046\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3477\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1046-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3478\&amp;quot;&quot;&gt;&lt;span data-slate-zero-width=&quot;\&amp;quot;true\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3479\&amp;quot;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;ea004e0d-2b7d-4d1d-87b0-58bac63971d8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3483\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-2=&quot;&quot; data-reactid=&quot;\&amp;quot;3484\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3495\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3496\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3497\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3498\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3499\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h2 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd2=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;3494\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1047\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3501\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1047-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3502\&amp;quot;&quot;&gt;Writing GPU Kernels&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3505\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;4b7926e0-6502-4410-92eb-1b34d89f2d92\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3506\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3516\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3517\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3518\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3519\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3520\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3521\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1050\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3522\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1050-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3523\&amp;quot;&quot;&gt;One can get pretty far by just using the generic abstract array interface of GPUArrays without ever writing any GPU kernels. However, at some point one might need to implement an algorithm that needs to run on the GPU and can't be expressed by a combination of generic array algorithms!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3526\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;dc1691b3-b051-4078-8105-be5693dde633\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3527\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3537\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3538\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3539\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3540\&amp;quot;&quot; readability=&quot;8.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3541\&amp;quot;&quot; readability=&quot;12&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3542\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1053\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3543\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1053-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3544\&amp;quot;&quot;&gt;The nice thing is that GPUArrays takes away quite a bit of work with a layered approach that lets you start off with high level code, but allows you to pretty much write low-level kernels similarly to what one would find in most OpenCL/CUDA examples. It also allows you to execute kernels both on OpenCL or CUDA devices, abstracting away any differences in those frameworks.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3547\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;e01448e0-7630-4c6a-b415-050bd4b37efa\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3548\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3558\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3559\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3560\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3561\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3562\&amp;quot;&quot; readability=&quot;15&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3563\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1056\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3564\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1056-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3565\&amp;quot;&quot;&gt;The function that makes this possible is named&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1056-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3566\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3567\&amp;quot;&quot;&gt;&lt;em data-reactid=&quot;\&amp;quot;3568\&amp;quot;&quot;&gt;gpu_call&lt;/em&gt;&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;1056-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3569\&amp;quot;&quot;&gt;. It can be called as&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1056-3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3570\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3571\&amp;quot;&quot;&gt;gpu_call(kernel, A::GPUArray, args)&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1056-4\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3572\&amp;quot;&quot;&gt;and will call&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1056-5\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3573\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3574\&amp;quot;&quot;&gt;kernel&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1056-6\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3575\&amp;quot;&quot;&gt;with the arguments&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1056-7\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3576\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3577\&amp;quot;&quot;&gt;(state, args...)&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1056-8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3578\&amp;quot;&quot;&gt;on the GPU. State is a backend specific object to implement functionality like getting the thread index. A GPUArray needs to get passed as the second argument to dispatch to the correct backend and supply the defaults for the launch parameters.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-reactid=&quot;\&amp;quot;3579\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1066\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3580\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1066-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3581\&amp;quot;&quot;&gt;Lets use&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1066-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3582\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3583\&amp;quot;&quot;&gt;gpu_call&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1066-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3584\&amp;quot;&quot;&gt;to implement a simple map kernel:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3587\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;e542cbee-022a-4da4-91bb-f683b86080f3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3588\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;3598\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;3599\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3600\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3601\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3602\&amp;quot;&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3603\&amp;quot;&quot; readability=&quot;19&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;3604\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3605\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3607\&amp;quot;&quot;&gt;GPUArrays&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3610\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3614\&amp;quot;&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3616\&amp;quot;&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3617\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3618\&amp;quot;&quot;&gt;map!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3620\&amp;quot;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3621\&amp;quot;&quot;&gt;::Function&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3624\&amp;quot;&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3625\&amp;quot;&quot;&gt;::GPUArray&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3628\&amp;quot;&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3629\&amp;quot;&quot;&gt;::GPUArray&lt;/span&gt;)\n    \n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3636\&amp;quot;&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3638\&amp;quot;&quot;&gt;kernel&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3640\&amp;quot;&quot;&gt;state&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3643\&amp;quot;&quot;&gt;f&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3646\&amp;quot;&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3649\&amp;quot;&quot;&gt;B&lt;/span&gt;)\n        \n        \n        &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3659\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3661\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3663\&amp;quot;&quot;&gt;linear_index&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3665\&amp;quot;&quot;&gt;state&lt;/span&gt;)\n    \t\t&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3669\&amp;quot;&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3671\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3673\&amp;quot;&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3675\&amp;quot;&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3677\&amp;quot;&quot;&gt;A&lt;/span&gt;)\n          &lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3681\&amp;quot;&quot;&gt;@inbounds&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3683\&amp;quot;&quot;&gt;A&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3685\&amp;quot;&quot;&gt;i&lt;/span&gt;] &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3688\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3690\&amp;quot;&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3692\&amp;quot;&quot;&gt;B&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3694\&amp;quot;&quot;&gt;i&lt;/span&gt;])\n        &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3699\&amp;quot;&quot;&gt;end&lt;/span&gt;\n        &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3702\&amp;quot;&quot;&gt;return&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3705\&amp;quot;&quot;&gt;end&lt;/span&gt;\n    \n    &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3711\&amp;quot;&quot;&gt;gpu_call&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3713\&amp;quot;&quot;&gt;kernel&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3716\&amp;quot;&quot;&gt;A&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3720\&amp;quot;&quot;&gt;f&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3723\&amp;quot;&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3726\&amp;quot;&quot;&gt;B&lt;/span&gt;))\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3730\&amp;quot;&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3753\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;b41071e8-02ab-47f3-946b-0b802fff459b\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3754\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3764\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;3765\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;3766\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3767\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3768\&amp;quot;&quot; readability=&quot;15&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;3769\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1071\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3770\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1071-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3771\&amp;quot;&quot;&gt;Let's try to figure out what this is doing! In simple terms, this will call the julia function&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1071-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3772\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3773\&amp;quot;&quot;&gt;kernel&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1071-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3774\&amp;quot;&quot;&gt;&lt;em data-reactid=&quot;\&amp;quot;3775\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;3776\&amp;quot;&quot;&gt;length(&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;1071-3\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3777\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3778\&amp;quot;&quot;&gt;&lt;em data-reactid=&quot;\&amp;quot;3779\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;3780\&amp;quot;&quot;&gt;A&lt;/strong&gt;&lt;/em&gt;&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;1071-4\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3781\&amp;quot;&quot;&gt;&lt;em data-reactid=&quot;\&amp;quot;3782\&amp;quot;&quot;&gt;&lt;strong data-reactid=&quot;\&amp;quot;3783\&amp;quot;&quot;&gt;)&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1071-5\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3784\&amp;quot;&quot;&gt;times in parallel on the GPU. Each parallel invocation of&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1071-6\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3785\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3786\&amp;quot;&quot;&gt;kernel&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1071-7\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3787\&amp;quot;&quot;&gt;has a thread index, which we can use to safely index into the arrays&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1071-8\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3788\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3789\&amp;quot;&quot;&gt;A&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1071-9\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3790\&amp;quot;&quot;&gt;and&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1071-10\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3791\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3792\&amp;quot;&quot;&gt;B&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;1071-11\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3793\&amp;quot;&quot;&gt;. If we calculated our own indices instead of using&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1071-12\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3794\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;3795\&amp;quot;&quot;&gt;linear_index&lt;/code&gt;&lt;/span&gt;&lt;span data-offset-key=&quot;\&amp;quot;1071-13\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3796\&amp;quot;&quot;&gt;, we'd need to make sure that we don't have multiple threads reading and writing to the same array locations. So, if we wrote this in pure Julia with threads, an equivalent version would look like this:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3799\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;3428b837-5a8e-44d8-91e3-2e8361152cb0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3800\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;3810\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;3811\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;3812\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;3813\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3814\&amp;quot;&quot; readability=&quot;17.5&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3815\&amp;quot;&quot; readability=&quot;30&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;3816\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3817\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3819\&amp;quot;&quot;&gt;BenchmarkTools&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3821\&amp;quot;&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3823\&amp;quot;&quot;&gt;threadded_map!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3825\&amp;quot;&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3826\&amp;quot;&quot;&gt;::Function&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3829\&amp;quot;&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3830\&amp;quot;&quot;&gt;::Array&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3833\&amp;quot;&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3834\&amp;quot;&quot;&gt;::Array&lt;/span&gt;)\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3838\&amp;quot;&quot;&gt;Threads&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3839\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3840\&amp;quot;&quot;&gt;@threads&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3842\&amp;quot;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3844\&amp;quot;&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3846\&amp;quot;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3848\&amp;quot;&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3849\&amp;quot;&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3850\&amp;quot;&quot;&gt;length&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3852\&amp;quot;&quot;&gt;A&lt;/span&gt;)\n        &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3856\&amp;quot;&quot;&gt;A&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3858\&amp;quot;&quot;&gt;i&lt;/span&gt;] &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3861\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3863\&amp;quot;&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3865\&amp;quot;&quot;&gt;B&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3867\&amp;quot;&quot;&gt;i&lt;/span&gt;])\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3872\&amp;quot;&quot;&gt;end&lt;/span&gt;\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3875\&amp;quot;&quot;&gt;A&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3877\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3879\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3882\&amp;quot;&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3884\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3886\&amp;quot;&quot;&gt;rand&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3888\&amp;quot;&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3889\&amp;quot;&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3890\&amp;quot;&quot;&gt;7&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3894\&amp;quot;&quot;&gt;rand&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3896\&amp;quot;&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3897\&amp;quot;&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3898\&amp;quot;&quot;&gt;7&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-def\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3901\&amp;quot;&quot;&gt;kernel&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3903\&amp;quot;&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3906\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3909\&amp;quot;&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3911\&amp;quot;&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3913\&amp;quot;&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3914\&amp;quot;&quot;&gt;f0&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3917\&amp;quot;&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3920\&amp;quot;&quot;&gt;732.f0&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3921\&amp;quot;&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3922\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3927\&amp;quot;&quot;&gt;single_t&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3929\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3931\&amp;quot;&quot;&gt;@belapsed&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3933\&amp;quot;&quot;&gt;map!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3935\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3936\&amp;quot;&quot;&gt;kernel&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3939\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3940\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3943\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3944\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3950\&amp;quot;&quot;&gt;thread_t&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3952\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3954\&amp;quot;&quot;&gt;@belapsed&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3956\&amp;quot;&quot;&gt;threadded_map!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3958\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3959\&amp;quot;&quot;&gt;kernel&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3962\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3963\&amp;quot;&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3966\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3967\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3973\&amp;quot;&quot;&gt;xgpu&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3976\&amp;quot;&quot;&gt;ygpu&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3978\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3980\&amp;quot;&quot;&gt;cu&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3982\&amp;quot;&quot;&gt;x&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3986\&amp;quot;&quot;&gt;cu&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3988\&amp;quot;&quot;&gt;y&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3991\&amp;quot;&quot;&gt;gpu_t&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3993\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-meta\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3995\&amp;quot;&quot;&gt;@belapsed&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;3997\&amp;quot;&quot;&gt;begin&lt;/span&gt;\n  &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4000\&amp;quot;&quot;&gt;map!&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4002\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4003\&amp;quot;&quot;&gt;kernel&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4006\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4007\&amp;quot;&quot;&gt;xgpu&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4010\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4011\&amp;quot;&quot;&gt;ygpu&lt;/span&gt;)\n  &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4015\&amp;quot;&quot;&gt;GPUArrays&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4016\&amp;quot;&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4017\&amp;quot;&quot;&gt;synchronize&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4019\&amp;quot;&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4020\&amp;quot;&quot;&gt;xgpu&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4023\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4025\&amp;quot;&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4027\&amp;quot;&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4030\&amp;quot;&quot;&gt;single_t&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4033\&amp;quot;&quot;&gt;thread_t&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4036\&amp;quot;&quot;&gt;gpu_t&lt;/span&gt;]\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4039\&amp;quot;&quot;&gt;speedup&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4041\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4043\&amp;quot;&quot;&gt;maximum&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4045\&amp;quot;&quot;&gt;times&lt;/span&gt;) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4048\&amp;quot;&quot;&gt;./&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4050\&amp;quot;&quot;&gt;times&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4052\&amp;quot;&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4054\&amp;quot;&quot;&gt;&quot;speedup: $speedup&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4055\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4058\&amp;quot;&quot;&gt;bar&lt;/span&gt;([&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4061\&amp;quot;&quot;&gt;&quot;1 core&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4062\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4065\&amp;quot;&quot;&gt;&quot;2 cores&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4066\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4069\&amp;quot;&quot;&gt;&quot;gpu&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4070\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;], &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4074\&amp;quot;&quot;&gt;speedup&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4077\&amp;quot;&quot;&gt;legend&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4079\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4081\&amp;quot;&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4084\&amp;quot;&quot;&gt;fillcolor&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4086\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4088\&amp;quot;&quot;&gt;:grey&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4091\&amp;quot;&quot;&gt;ylabel&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4093\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4095\&amp;quot;&quot;&gt;&quot;speedup&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4096\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4135\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;f21ef039-a847-43e7-97be-55b8936c1cba\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4136\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4146\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;4147\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4148\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4149\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4150\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;4151\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1087\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4152\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1087-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4153\&amp;quot;&quot;&gt;Because the function isn't doing a lot of work, we don't see perfect scaling, but the threaded and GPU version still give us a nice speed-up.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4156\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;d8fb28e2-49aa-4c56-83e4-1dfeb06c2af9\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4157\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4167\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;4168\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4169\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4170\&amp;quot;&quot; readability=&quot;7.4749034749035&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4171\&amp;quot;&quot; readability=&quot;10.277992277992&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;4172\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1090\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4173\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1090-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4174\&amp;quot;&quot;&gt;The GPU is a bit more complex than what the thread example allows us to show, since the hardware threads are laid out in&lt;/span&gt;&lt;/span&gt; &lt;a href=&quot;/&amp;quot;https://devblogs.nvidia.com/even-easier-introduction-cuda//&amp;quot;&quot; data-link-path=&quot;\&amp;quot;d8fb28e2-49aa-4c56-83e4-1dfeb06c2af9&quot; data-reactid=&quot;\&amp;quot;4175\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1091\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4177\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1091-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4178\&amp;quot;&quot;&gt;blocks of threads&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; &lt;span data-key=&quot;\&amp;quot;1093\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4179\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1093-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4180\&amp;quot;&quot;&gt;–&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1093-1\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4181\&amp;quot;&quot;&gt;&lt;code data-reactid=&quot;\&amp;quot;4182\&amp;quot;&quot;&gt;gpu_call&lt;/code&gt;&lt;/span&gt; &lt;span data-offset-key=&quot;\&amp;quot;1093-2\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4183\&amp;quot;&quot;&gt;abstracts that away in the simple version, but it can also be used with more complex launch configurations:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4186\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-code=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;80bd4385-cd68-4fad-ada0-981d4b98b100\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4187\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-wide&quot; data-reactid=&quot;\&amp;quot;4197\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;code-cell&quot; data-reactid=&quot;\&amp;quot;4198\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4199\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4200\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;wrap-pre\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4201\&amp;quot;&quot; readability=&quot;18&quot;&gt;
&lt;div class=&quot;\&amp;quot;CodeMirror\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4202\&amp;quot;&quot; readability=&quot;31&quot;&gt;
&lt;pre data-reactid=&quot;\&amp;quot;4203\&amp;quot;&quot;&gt;
&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4204\&amp;quot;&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4206\&amp;quot;&quot;&gt;CuArrays&lt;/span&gt;\n\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4209\&amp;quot;&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4211\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4214\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4217\&amp;quot;&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4220\&amp;quot;&quot;&gt;blocks&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4222\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4225\&amp;quot;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4228\&amp;quot;&quot;&gt;2&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4231\&amp;quot;&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4233\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4235\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4237\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4241\&amp;quot;&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4244\&amp;quot;&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4249\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4252\&amp;quot;&quot;&gt;4&lt;/span&gt;))\n&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4256\&amp;quot;&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4258\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4260\&amp;quot;&quot;&gt;fill&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4262\&amp;quot;&quot;&gt;CuArray&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4266\&amp;quot;&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4269\&amp;quot;&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4274\&amp;quot;&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4277\&amp;quot;&quot;&gt;4&lt;/span&gt;))\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4281\&amp;quot;&quot;&gt;gpu_call&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4283\&amp;quot;&quot;&gt;T&lt;/span&gt;, (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4287\&amp;quot;&quot;&gt;B&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4290\&amp;quot;&quot;&gt;T&lt;/span&gt;), (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4295\&amp;quot;&quot;&gt;blocks&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4298\&amp;quot;&quot;&gt;threads&lt;/span&gt;)) &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4302\&amp;quot;&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4304\&amp;quot;&quot;&gt;state&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4307\&amp;quot;&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4310\&amp;quot;&quot;&gt;B&lt;/span&gt;\n  \n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4316\&amp;quot;&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4318\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4321\&amp;quot;&quot;&gt;blockidx_x&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4323\&amp;quot;&quot;&gt;state&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4327\&amp;quot;&quot;&gt;blockidx_y&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4329\&amp;quot;&quot;&gt;state&lt;/span&gt;))\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4334\&amp;quot;&quot;&gt;bdim&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4336\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4339\&amp;quot;&quot;&gt;blockdim_x&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4341\&amp;quot;&quot;&gt;state&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4345\&amp;quot;&quot;&gt;blockdim_y&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4347\&amp;quot;&quot;&gt;state&lt;/span&gt;))\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4352\&amp;quot;&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4354\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4357\&amp;quot;&quot;&gt;threadidx_x&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4359\&amp;quot;&quot;&gt;state&lt;/span&gt;), &lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4363\&amp;quot;&quot;&gt;threadidx_y&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4365\&amp;quot;&quot;&gt;state&lt;/span&gt;))\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4370\&amp;quot;&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4372\&amp;quot;&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4375\&amp;quot;&quot;&gt;bdim&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4377\&amp;quot;&quot;&gt;.*&lt;/span&gt; (&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4380\&amp;quot;&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4382\&amp;quot;&quot;&gt;.-&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-number\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4384\&amp;quot;&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4388\&amp;quot;&quot;&gt;.+&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4390\&amp;quot;&quot;&gt;t&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4393\&amp;quot;&quot;&gt;A&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4395\&amp;quot;&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4396\&amp;quot;&quot;&gt;...&lt;/span&gt;] &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4399\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4401\&amp;quot;&quot;&gt;b&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4404\&amp;quot;&quot;&gt;B&lt;/span&gt;[&lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4406\&amp;quot;&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4407\&amp;quot;&quot;&gt;...&lt;/span&gt;] &lt;span class=&quot;\&amp;quot;cm-operator\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4410\&amp;quot;&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4412\&amp;quot;&quot;&gt;t&lt;/span&gt;\n    &lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4415\&amp;quot;&quot;&gt;return&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-keyword\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4417\&amp;quot;&quot;&gt;end&lt;/span&gt;\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4419\&amp;quot;&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4421\&amp;quot;&quot;&gt;&quot;Threads index: &lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4422\&amp;quot;&quot;&gt;\\n&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4423\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4426\&amp;quot;&quot;&gt;T&lt;/span&gt;)\n&lt;span class=&quot;\&amp;quot;cm-builtin\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4429\&amp;quot;&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4431\&amp;quot;&quot;&gt;&quot;Block index: &lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4432\&amp;quot;&quot;&gt;\\n&lt;/span&gt;&lt;span class=&quot;\&amp;quot;cm-string\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4433\&amp;quot;&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;\&amp;quot;cm-variable\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4436\&amp;quot;&quot;&gt;B&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4469\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;5a85c88c-f0a9-4064-bf8a-62c80bf270ae\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4470\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4480\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;4481\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4482\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4483\&amp;quot;&quot; readability=&quot;7.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4484\&amp;quot;&quot; readability=&quot;10&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;4485\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1098\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4486\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1098-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4487\&amp;quot;&quot;&gt;In the above example you can see the iteration order of a more complex launch configuration. Figuring out the right iteration + launch configuration is crucial to achieve state of the art GPU performance – but won't be part of this simple introduction. There are plenty of GPU tutorials for CUDA and OpenCL which explain this in great detail and those principles are identical when programming the GPU in Julia.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section data-node-id=&quot;\&amp;quot;33457f06-ffd8-4e64-a9e3-f336e875b947\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4491\&amp;quot;&quot;&gt;&lt;div class=&quot;\&amp;quot;relative&quot; heading-container=&quot;&quot; ph-gutter=&quot;&quot; heading-container-2=&quot;&quot; data-reactid=&quot;\&amp;quot;4492\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4503\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4504\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4505\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4506\&amp;quot;&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4507\&amp;quot;&quot;&gt;
&lt;p&gt;
&lt;h2 class=&quot;\&amp;quot;heading&quot; relative=&quot;&quot; b=&quot;&quot; hd2=&quot;&quot; mw-read=&quot;&quot; data-reactid=&quot;\&amp;quot;4502\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1101\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4509\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1101-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4510\&amp;quot;&quot;&gt;Conclusion&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4513\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;3bf52ba8-8341-4248-a628-72df5304880c\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4514\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4524\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;4525\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4526\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4527\&amp;quot;&quot; readability=&quot;6.5&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4528\&amp;quot;&quot; readability=&quot;8&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;4529\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1104\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4530\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1104-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4531\&amp;quot;&quot;&gt;Julia has come a long way to bring composable high-level programming to the high performance world. Now it's time to do the same for the GPU.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;\&amp;quot;relative&quot; data-reactid=&quot;\&amp;quot;4534\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;node&quot; node-text=&quot;&quot; relative=&quot;&quot; data-node-id=&quot;\&amp;quot;0b7718a8-066d-4e2b-a020-e3530b4284ec\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4535\&amp;quot;&quot;&gt;

&lt;div class=&quot;\&amp;quot;mw-read&quot; data-reactid=&quot;\&amp;quot;4545\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex&quot; fbody=&quot;&quot; data-reactid=&quot;\&amp;quot;4546\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;flex-auto&quot; data-reactid=&quot;\&amp;quot;4547\&amp;quot;&quot;&gt;
&lt;div class=&quot;\&amp;quot;relative\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4548\&amp;quot;&quot; readability=&quot;9&quot;&gt;
&lt;div data-slate-editor=&quot;\&amp;quot;true\&amp;quot;&quot; contenteditable=&quot;\&amp;quot;true\&amp;quot;&quot; autocorrect=&quot;\&amp;quot;true\&amp;quot;&quot; spellcheck=&quot;\&amp;quot;false\&amp;quot;&quot; role=&quot;\&amp;quot;textbox\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4549\&amp;quot;&quot; readability=&quot;13&quot;&gt;
&lt;p data-reactid=&quot;\&amp;quot;4550\&amp;quot;&quot;&gt;&lt;span data-key=&quot;\&amp;quot;1107\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4551\&amp;quot;&quot;&gt;&lt;span data-offset-key=&quot;\&amp;quot;1107-0\&amp;quot;&quot; data-reactid=&quot;\&amp;quot;4552\&amp;quot;&quot;&gt;The hope is that Julia lowers the bar for people to start programming on GPUs, and that we can grow an extendable platform for open source GPU computing. The first success story, of automatic differentiation working out of the box via Julia packages that haven't even been written for the GPU, gives a lot of reason to believe in the success of Julia's extendable and generic design in the domain of GPU computing.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/section&gt;&lt;/article&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&quot;]]&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Thu, 18 Oct 2018 16:25:13 +0000</pubDate>
<dc:creator>simondanisch</dc:creator>
<dc:format>application/transit+json</dc:format>
<dc:identifier>https://nextjournal.com/sdanisch/julia-gpu-programming</dc:identifier>
</item>
</channel>
</rss>