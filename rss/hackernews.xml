<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Employers will do almost anything to find workers except pay them more</title>
<link>http://www.latimes.com/business/hiltzik/la-fi-hiltzik-employment-20180710-story.html</link>
<guid isPermaLink="true" >http://www.latimes.com/business/hiltzik/la-fi-hiltzik-employment-20180710-story.html</guid>
<description>&lt;p&gt;As a share of gross domestic income, corporate profits have nearly doubled, to 6.4% in 2016 from 3.3% in 1990, according to figures from the Bureau of Economic Analysis. Meanwhile, the labor share, measured as wages and salaries paid to individuals, has been on a schneid, falling to 42.2% in 2013 from 46.2% in 1991. The labor share has since crept up to 43% as of 2016, but it’s still well below its postwar peak of 51.5%, reached in 1970.&lt;/p&gt;
</description>
<pubDate>Wed, 11 Jul 2018 11:21:48 +0000</pubDate>
<dc:creator>SQL2219</dc:creator>
<og:url>http://www.latimes.com/business/hiltzik/la-fi-hiltzik-employment-20180710-story.html</og:url>
<og:title>Employers will do almost anything to find workers to fill jobs — except pay them more</og:title>
<og:image>http://www.latimes.com/resizer/bIWBQxLu0IvHnUqdLjS6o9sYadc=/1200x0/arc-anglerfish-arc2-prod-tronc.s3.amazonaws.com/public/VVDZQ7I4LVFXPNESK4DMDNXZHU.jpg</og:image>
<og:description>Employers are bellyaching about a lack of workers to fill jobs, but they're not willing to pay more to attract them.</og:description>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.latimes.com/business/hiltzik/la-fi-hiltzik-employment-20180710-story.html</dc:identifier>
</item>
<item>
<title>Djbsort: A new software library for sorting arrays of integers</title>
<link>https://sorting.cr.yp.to/</link>
<guid isPermaLink="true" >https://sorting.cr.yp.to/</guid>
<description>&lt;p&gt;djbsort is a new software library for sorting arrays of integers. It provides the following features:&lt;/p&gt;
&lt;p&gt;These features are not separate options: there is a single sorting function that is simultaneously fast, secure, and verified.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://sorting.cr.yp.to/install.html&quot;&gt;current release&lt;/a&gt; of djbsort has the following limitations:&lt;/p&gt;
&lt;ul readability=&quot;14&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;It provides fast verified code only for CPUs with the AVX2 instruction set (e.g., Intel Haswell). However, the underlying techniques can easily be ported to other CPUs.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;It sorts only signed 32-bit integers. However, the underlying techniques can easily be adapted to integers of other sizes (e.g., 16 bits or 64 bits); floating-point numbers of various sizes (e.g., 32 bits or 64 bits); etc. The techniques can also, with slightly more effort, permute fixed-size records or pointers to variable-size records along with the keys being sorted.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;It requires the array to fit into RAM (plus swap space). However, the underlying techniques can easily be adapted to larger arrays, such as arrays stored on disk. The data-access pattern is quite regular, and standard techniques to further reduce disk accesses are applicable.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;It sorts an array using one core on one machine, so the latency is suboptimal for large arrays. However, the underlying techniques can easily be parallelized across cores and across machines.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The verification does not check memory safety.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;The verification runs separately for each array size, and becomes slower as the array size increases. On the other hand, this verification covers the specific array sizes used in cryptography.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;The djbsort author is &lt;a href=&quot;https://cr.yp.to/djb.html&quot;&gt;Daniel J. Bernstein&lt;/a&gt;, University of Illinois at Chicago.&lt;/p&gt;
&lt;p&gt;djbsort builds upon results from the following paper: Daniel J. Bernstein, Chitchanok Chuengsatiansup, Tanja Lange, Christine van Vredendaal, &lt;a href=&quot;https://ntruprime.cr.yp.to/papers.html&quot;&gt;&quot;NTRU Prime: reducing attack surface at low cost&quot;&lt;/a&gt;, Selected Areas in Cryptography 2017. The NTRU Prime paper explained how to make constant-time sorting software run faster than Intel's sorting software on Intel CPUs, and demonstrated this with a software release in 2017. djbsort includes verification and provides another 2x speedup.&lt;/p&gt;
&lt;hr /&gt;&lt;span&gt;&lt;strong&gt;Version:&lt;/strong&gt; This is version 2018.07.10 of the &quot;Intro&quot; web page.&lt;/span&gt;</description>
<pubDate>Wed, 11 Jul 2018 08:36:35 +0000</pubDate>
<dc:creator>xmmrm</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://sorting.cr.yp.to/</dc:identifier>
</item>
<item>
<title>Firefox switching to clang-cl for Windows builds</title>
<link>https://groups.google.com/forum/m/#!topic/mozilla.dev.platform/wwO48xXFx0A</link>
<guid isPermaLink="true" >https://groups.google.com/forum/m/#!topic/mozilla.dev.platform/wwO48xXFx0A</guid>
<description>&lt;tr readability=&quot;8.7245657568238&quot;&gt;&lt;td class=&quot;subject&quot;&gt;&lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.platform/wwO48xXFx0A/7XibS4kICgAJ&quot; title=&quot;Using clang-cl to ship Windows builds&quot;&gt;Using clang-cl to ship Windows builds&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;author&quot;&gt;&lt;span&gt;David Major&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;lastPostDate&quot;&gt;7/10/18 1:27 PM&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;
&lt;div&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;div dir=&quot;ltr&quot; readability=&quot;25&quot;&gt;Bug 1443590 is switching our official Windows builds to use clang-cl&lt;br /&gt;as the compiler.&lt;p&gt;Please keep an eye out for regressions and file a blocking bug for&lt;br /&gt;anything that might be fallout from this change. I'm especially&lt;br /&gt;interested in hearing about the quality of the debugging experience.&lt;/p&gt;&lt;p&gt;It's possible that the patch may bounce and we'll go back and forth to&lt;br /&gt;MSVC for a while. You can check your build's compiler at&lt;br /&gt;`about:buildconfig`. Treeherder is running an additional set of MSVC&lt;br /&gt;jobs on mozilla-central to make sure we can fall back to a green MSVC&lt;br /&gt;if needed.&lt;/p&gt;&lt;p&gt;Watch for more toolchain changes to come. The next steps after this&lt;br /&gt;will be to switch to lld-link and enable ThinLTO. That will open the&lt;br /&gt;door to a cross-language LTO that could inline calls between Rust and&lt;br /&gt;C++. In the longer term we can look into cross-compiling from Linux.&lt;/p&gt;&lt;p&gt;But for now, shipping our most-used platform with an open-source&lt;br /&gt;compiler is a huge milestone in and of itself. Big thanks to everyone&lt;br /&gt;who has contributed to this effort on the Mozilla side, and also big&lt;br /&gt;thanks to the developers of LLVM and Chromium who helped make clang on&lt;br /&gt;Windows a realistic possibility.&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.0062695924765&quot;&gt;&lt;td class=&quot;subject&quot;&gt;&lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.platform/wwO48xXFx0A/m8jhrMsICgAJ&quot; title=&quot;Re: Using clang-cl to ship Windows builds&quot;&gt;Re: Using clang-cl to ship Windows builds&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;author&quot;&gt;&lt;span&gt;Chris Peterson&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;lastPostDate&quot;&gt;7/10/18 1:31 PM&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;15.540632603406&quot;&gt;&lt;td class=&quot;subject&quot;&gt;&lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.platform/wwO48xXFx0A/FFJ7WOIJCgAJ&quot; title=&quot;Re: Using clang-cl to ship Windows builds&quot;&gt;Re: Using clang-cl to ship Windows builds&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;author&quot;&gt;&lt;span&gt;Gregory Szorc&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;lastPostDate&quot;&gt;7/10/18 1:51 PM&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;
&lt;div&gt;
&lt;div readability=&quot;13.377458396369&quot;&gt;
&lt;div dir=&quot;ltr&quot; readability=&quot;27.745839636914&quot;&gt;
&lt;blockquote readability=&quot;14.786898184688&quot;&gt;
&lt;p&gt;On Tue, Jul 10, 2018 at 1:29 PM, David Major &amp;lt;&lt;a href=&quot;javascript:void(0);&quot; rel=&quot;nofollow&quot;&gt;dma...@mozilla.com&lt;/a&gt;&amp;gt; wrote:&lt;/p&gt;&lt;p&gt;&amp;gt; Bug 1443590 is switching our official Windows builds to use clang-cl&lt;br /&gt;&amp;gt; as the compiler.&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;gt; Please keep an eye out for regressions and file a blocking bug for&lt;br /&gt;&amp;gt; anything that might be fallout from this change. I'm especially&lt;br /&gt;&amp;gt; interested in hearing about the quality of the debugging experience.&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;gt; It's possible that the patch may bounce and we'll go back and forth to&lt;br /&gt;&amp;gt; MSVC for a while. You can check your build's compiler at&lt;br /&gt;&amp;gt; `about:buildconfig`. Treeherder is running an additional set of MSVC&lt;br /&gt;&amp;gt; jobs on mozilla-central to make sure we can fall back to a green MSVC&lt;br /&gt;&amp;gt; if needed.&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;gt; Watch for more toolchain changes to come. The next steps after this&lt;br /&gt;&amp;gt; will be to switch to lld-link and enable ThinLTO. That will open the&lt;br /&gt;&amp;gt; door to a cross-language LTO that could inline calls between Rust and&lt;br /&gt;&amp;gt; C++. In the longer term we can look into cross-compiling from Linux.&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;gt; But for now, shipping our most-used platform with an open-source&lt;br /&gt;&amp;gt; compiler is a huge milestone in and of itself. Big thanks to everyone&lt;br /&gt;&amp;gt; who has contributed to this effort on the Mozilla side, and also big&lt;br /&gt;&amp;gt; thanks to the developers of LLVM and Chromium who helped make clang on&lt;br /&gt;&amp;gt; Windows a realistic possibility.&lt;br /&gt;&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
A lot of people have wanted to see this day for years (for various reasons&lt;br /&gt;- an open source toolchain, potential for cross compiling, unified&lt;br /&gt;toolchains across platforms, etc). This is a *major* milestone. And while&lt;br /&gt;the transition will likely have a few bumps, the payoff should be well&lt;br /&gt;worth it.&lt;p&gt;Thank you to everyone who helped us get here. From the initial work to&lt;br /&gt;support Clang on Windows a few years ago. To the upstream work that was put&lt;br /&gt;into LLVM and Clang (especially by Google/Chromium). To those that worked&lt;br /&gt;through all the issues to transition the compiler today. This was a&lt;br /&gt;significant effort by a lot of people. We should all be ecstatic we're&lt;br /&gt;finally crossing this bridge. I know I am! Congratulations!&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16.526022304833&quot;&gt;&lt;td class=&quot;subject&quot;&gt;&lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.platform/wwO48xXFx0A/fbzX0ogKCgAJ&quot; title=&quot;Re: Using clang-cl to ship Windows builds&quot;&gt;Re: Using clang-cl to ship Windows builds&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;author&quot;&gt;&lt;span&gt;David Major&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;lastPostDate&quot;&gt;7/10/18 2:03 PM&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;
&lt;div&gt;
&lt;div readability=&quot;12.881364073007&quot;&gt;
&lt;div dir=&quot;ltr&quot; readability=&quot;27.249039385207&quot;&gt;At the moment, performance is a mixed bag. Some tests are up and some&lt;br /&gt;are down. In particular I believe Speedometer is down a few percent.&lt;p&gt;Note however that clang-cl is punching above its weight. These builds&lt;br /&gt;currently have neither LTO nor PGO, while our MSVC builds use both of&lt;br /&gt;those. Any regressions that we're seeing ought to be short-lived. Once&lt;br /&gt;we enable LTO and PGO, I expect clang to be a clear performance win.&lt;/p&gt;&lt;p&gt;If the short-term regressions end up being unacceptable, we can revert&lt;br /&gt;to MSVC later in the release, but at this early point in the cycle&lt;br /&gt;that shouldn't prevent us from collecting data on Nightly.&lt;br /&gt;&lt;/p&gt;&lt;blockquote readability=&quot;7.1739130434783&quot;&gt;
&lt;p&gt;&lt;br /&gt;On Tue, Jul 10, 2018 at 4:31 PM Chris Peterson &amp;lt;&lt;a href=&quot;javascript:void(0);&quot; rel=&quot;nofollow&quot;&gt;cpet...@mozilla.com&lt;/a&gt;&amp;gt; wrote:&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;gt; How does the performance of clang-cl builds compare to MSVC builds on&lt;br /&gt;&amp;gt; benchmarks like Speedometer?&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&amp;gt; On 2018-07-10 1:29 PM, David Major wrote:&lt;br /&gt;&amp;gt; &amp;gt; Bug 1443590 is switching our official Windows builds to use clang-cl&lt;br /&gt;&amp;gt; &amp;gt; as the compiler.&lt;br /&gt;&amp;gt; &amp;gt;&lt;br /&gt;&amp;gt; &amp;gt; Please keep an eye out for regressions and file a blocking bug for&lt;br /&gt;&amp;gt; &amp;gt; anything that might be fallout from this change. I'm especially&lt;br /&gt;&amp;gt; &amp;gt; interested in hearing about the quality of the debugging experience.&lt;br /&gt;&amp;gt; &amp;gt;&lt;br /&gt;&amp;gt; &amp;gt; It's possible that the patch may bounce and we'll go back and forth to&lt;br /&gt;&amp;gt; &amp;gt; MSVC for a while. You can check your build's compiler at&lt;br /&gt;&amp;gt; &amp;gt; `about:buildconfig`. Treeherder is running an additional set of MSVC&lt;br /&gt;&amp;gt; &amp;gt; jobs on mozilla-central to make sure we can fall back to a green MSVC&lt;br /&gt;&amp;gt; &amp;gt; if needed.&lt;br /&gt;&amp;gt; &amp;gt;&lt;br /&gt;&amp;gt; &amp;gt; Watch for more toolchain changes to come. The next steps after this&lt;br /&gt;&amp;gt; &amp;gt; will be to switch to lld-link and enable ThinLTO. That will open the&lt;br /&gt;&amp;gt; &amp;gt; door to a cross-language LTO that could inline calls between Rust and&lt;br /&gt;&amp;gt; &amp;gt; C++. In the longer term we can look into cross-compiling from Linux.&lt;br /&gt;&amp;gt; &amp;gt;&lt;br /&gt;&amp;gt; &amp;gt; But for now, shipping our most-used platform with an open-source&lt;br /&gt;&amp;gt; &amp;gt; compiler is a huge milestone in and of itself. Big thanks to everyone&lt;br /&gt;&amp;gt; &amp;gt; who has contributed to this effort on the Mozilla side, and also big&lt;br /&gt;&amp;gt; &amp;gt; thanks to the developers of LLVM and Chromium who helped make clang on&lt;br /&gt;&amp;gt; &amp;gt; Windows a realistic possibility.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;18.383916990921&quot;&gt;&lt;td class=&quot;subject&quot;&gt;&lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.platform/wwO48xXFx0A/zDMbflsMCgAJ&quot; title=&quot;Re: Using clang-cl to ship Windows builds&quot;&gt;Re: Using clang-cl to ship Windows builds&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;author&quot;&gt;&lt;span&gt;Bobby Holley&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;lastPostDate&quot;&gt;7/10/18 2:37 PM&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;
&lt;div&gt;
&lt;div readability=&quot;9.3559322033898&quot;&gt;
&lt;div dir=&quot;ltr&quot; readability=&quot;23.14362176628&quot;&gt;+1. This is really fantastic news, and frankly happened way faster than I&lt;br /&gt;would have thought possible. Thanks to everyone involved!&lt;p&gt;On Tue, Jul 10, 2018 at 1:51 PM Gregory Szorc &amp;lt;&lt;a href=&quot;javascript:void(0);&quot; rel=&quot;nofollow&quot;&gt;g...@mozilla.com&lt;/a&gt;&amp;gt; wrote:&lt;br /&gt;&lt;/p&gt;&lt;blockquote readability=&quot;12.819722650231&quot;&gt;
&lt;p&gt;&lt;br /&gt;&amp;gt; On Tue, Jul 10, 2018 at 1:29 PM, David Major &amp;lt;&lt;a href=&quot;javascript:void(0);&quot; rel=&quot;nofollow&quot;&gt;dma...@mozilla.com&lt;/a&gt;&amp;gt; wrote:&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;gt;&amp;gt; Bug 1443590 is switching our official Windows builds to use clang-cl&lt;br /&gt;&amp;gt;&amp;gt; as the compiler.&lt;br /&gt;&amp;gt;&amp;gt;&lt;br /&gt;&amp;gt;&amp;gt; Please keep an eye out for regressions and file a blocking bug for&lt;br /&gt;&amp;gt;&amp;gt; anything that might be fallout from this change. I'm especially&lt;br /&gt;&amp;gt;&amp;gt; interested in hearing about the quality of the debugging experience.&lt;br /&gt;&amp;gt;&amp;gt;&lt;br /&gt;&amp;gt;&amp;gt; It's possible that the patch may bounce and we'll go back and forth to&lt;br /&gt;&amp;gt;&amp;gt; MSVC for a while. You can check your build's compiler at&lt;br /&gt;&amp;gt;&amp;gt; `about:buildconfig`. Treeherder is running an additional set of MSVC&lt;br /&gt;&amp;gt;&amp;gt; jobs on mozilla-central to make sure we can fall back to a green MSVC&lt;br /&gt;&amp;gt;&amp;gt; if needed.&lt;br /&gt;&amp;gt;&amp;gt;&lt;br /&gt;&amp;gt;&amp;gt; Watch for more toolchain changes to come. The next steps after this&lt;br /&gt;&amp;gt;&amp;gt; will be to switch to lld-link and enable ThinLTO. That will open the&lt;br /&gt;&amp;gt;&amp;gt; door to a cross-language LTO that could inline calls between Rust and&lt;br /&gt;&amp;gt;&amp;gt; C++. In the longer term we can look into cross-compiling from Linux.&lt;br /&gt;&amp;gt;&amp;gt;&lt;br /&gt;&amp;gt;&amp;gt; But for now, shipping our most-used platform with an open-source&lt;br /&gt;&amp;gt;&amp;gt; compiler is a huge milestone in and of itself. Big thanks to everyone&lt;br /&gt;&amp;gt;&amp;gt; who has contributed to this effort on the Mozilla side, and also big&lt;br /&gt;&amp;gt;&amp;gt; thanks to the developers of LLVM and Chromium who helped make clang on&lt;br /&gt;&amp;gt;&amp;gt; Windows a realistic possibility.&lt;br /&gt;&amp;gt;&amp;gt;&lt;br /&gt;&amp;gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;&amp;gt; A lot of people have wanted to see this day for years (for various reasons&lt;br /&gt;&amp;gt; - an open source toolchain, potential for cross compiling, unified&lt;br /&gt;&amp;gt; toolchains across platforms, etc). This is a *major* milestone. And while&lt;br /&gt;&amp;gt; the transition will likely have a few bumps, the payoff should be well&lt;br /&gt;&amp;gt; worth it.&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;gt; Thank you to everyone who helped us get here. From the initial work to&lt;br /&gt;&amp;gt; support Clang on Windows a few years ago. To the upstream work that was put&lt;br /&gt;&amp;gt; into LLVM and Clang (especially by Google/Chromium). To those that worked&lt;br /&gt;&amp;gt; through all the issues to transition the compiler today. This was a&lt;br /&gt;&amp;gt; significant effort by a lot of people. We should all be ecstatic we're&lt;br /&gt;&amp;gt; finally crossing this bridge. I know I am! Congratulations!&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2.7480916030534&quot;&gt;&lt;td class=&quot;subject&quot;&gt;&lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.platform/wwO48xXFx0A/PnjApYk7CgAJ&quot; title=&quot;Re: Using clang-cl to ship Windows builds&quot;&gt;Re: Using clang-cl to ship Windows builds&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;author&quot;&gt;&lt;span&gt;pedro....@gmail.com&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;lastPostDate&quot;&gt;7/11/18 5:01 AM&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;Is there a link to the required changes? I'm curious.&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.785536159601&quot;&gt;&lt;td class=&quot;subject&quot;&gt;&lt;a href=&quot;https://groups.google.com/d/msg/mozilla.dev.platform/wwO48xXFx0A/qbEdfAM9CgAJ&quot; title=&quot;Re: Using clang-cl to ship Windows builds&quot;&gt;Re: Using clang-cl to ship Windows builds&lt;/a&gt;&lt;/td&gt;
&lt;td class=&quot;author&quot;&gt;&lt;span&gt;Sylvestre Ledru&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;lastPostDate&quot;&gt;7/11/18 5:28 AM&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Wed, 11 Jul 2018 03:12:06 +0000</pubDate>
<dc:creator>sohkamyung</dc:creator>
<og:title>Using clang-cl to ship Windows builds</og:title>
<og:type>website</og:type>
<og:url>https://groups.google.com/forum/#!topic/mozilla.dev.platform/wwO48xXFx0A</og:url>
<og:image>http://www.google.com/images/icons/product/groups-128.png</og:image>
<og:description>Posted 7/10/18 1:27 PM, 7 messages</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://groups.google.com/forum/m/?_escaped_fragment_=topic/mozilla.dev.platform/wwO48xXFx0A</dc:identifier>
</item>
<item>
<title>Unified access to the best community-driven cheat sheets repositories</title>
<link>https://github.com/chubin/cheat.sh</link>
<guid isPermaLink="true" >https://github.com/chubin/cheat.sh</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/b6ccef5a13c58f59163d966f0dc68ceac29e3ee3/687474703a2f2f63686561742e73682f66696c65732f6269672d6c6f676f2d76322e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/b6ccef5a13c58f59163d966f0dc68ceac29e3ee3/687474703a2f2f63686561742e73682f66696c65732f6269672d6c6f676f2d76322e706e67&quot; alt=&quot;cheat.sh logo&quot; data-canonical-src=&quot;http://cheat.sh/files/big-logo-v2.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unified access to the best community driven cheat sheets repositories of the world.&lt;/p&gt;
&lt;p&gt;Let's imagine for a moment that there is such a thing as an ideal cheat sheet. What it should look like? What features should it have?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;concise&lt;/strong&gt; — it should be concise; it should contain only things you need and nothing else;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fast&lt;/strong&gt; — it should be possible to use it instantly;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;comprehensive&lt;/strong&gt; — it should contain answers for every question you could have;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;universal&lt;/strong&gt; — it should be available everywhere, as soon as needed, without any preparations;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unobtrusive&lt;/strong&gt; — it does not distract you from your main task when you are using it;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tutoring&lt;/strong&gt; — it helps you to learn the subject;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;inconspicuous&lt;/strong&gt; — it should be possible to use it completely unnoticed.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Such a thing does exist.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cheat.sh&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;has simple curl/browser interface;&lt;/li&gt;
&lt;li&gt;covers 55 programming languages, several DBMSes, and more than 1000 most important UNIX/Linux commands;&lt;/li&gt;
&lt;li&gt;provides access to the best community driven cheat sheets repositories in the world as well as to StackOverflow;&lt;/li&gt;
&lt;li&gt;available everywhere, no installation needed;&lt;/li&gt;
&lt;li&gt;ultrafast, returns answers, as a rule, within 100 ms;&lt;/li&gt;
&lt;li&gt;has a convenient command line client, &lt;code&gt;cht.sh&lt;/code&gt;, that is very advantageous and helpful, though not mandatory;&lt;/li&gt;
&lt;li&gt;can be used directly from code editors, without opening a browser and not switching your mental context;&lt;/li&gt;
&lt;li&gt;supports a special mode (stealth mode), where it can be used fully invisibly, not even touching a key and not making a sound.&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/85cf29460f6af99d0e1ddb467fde7ec32b6e9989/68747470733a2f2f63686561742e73682f66696c65732f64656d6f2d6375726c2e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/85cf29460f6af99d0e1ddb467fde7ec32b6e9989/68747470733a2f2f63686561742e73682f66696c65732f64656d6f2d6375726c2e676966&quot; data-canonical-src=&quot;https://cheat.sh/files/demo-curl.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;To get a cheat sheet for a UNIX/Linux command from a command line, query the service using &lt;code&gt;curl&lt;/code&gt; or any other HTTP/HTTPS client specifying the name of the command in the query:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    curl cheat.sh/tar
    curl cht.sh/curl
    curl https://cheat.sh/rsync
    curl https://cht.sh/tr
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, you can use both HTTPS and HTTP to access the service, and both the long (cheat.sh) and the short (cht.sh) service names.&lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;tar&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;rsync&lt;/code&gt;, and &lt;code&gt;tr&lt;/code&gt; are names of the UNIX/Linux commands, you want to get cheat sheets for.&lt;/p&gt;
&lt;p&gt;If you don't know the name of the command you need, you can search for it using the &lt;code&gt;~KEYWORD&lt;/code&gt; notation. For example, to see how you can make &lt;code&gt;snapshots&lt;/code&gt; of a filesystem/volume/something else:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    curl cht.sh/~snapshot
&lt;/code&gt;
&lt;/pre&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/3e4e9a05b478358161e8ddbf2666746768d582db/68747470733a2f2f63686561742e73682f66696c65732f6368742e73682d75726c2d7374727563747572652e6a7067&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/3e4e9a05b478358161e8ddbf2666746768d582db/68747470733a2f2f63686561742e73682f66696c65732f6368742e73682d75726c2d7374727563747572652e6a7067&quot; data-canonical-src=&quot;https://cheat.sh/files/cht.sh-url-structure.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Programming languages cheat sheets are located not directly in the root namespace, but in special namespaces, dedicated to them:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    curl cht.sh/go/Pointers
    curl cht.sh/scala/Functions
    curl cht.sh/python/lambda
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To get the list of available programming language cheat sheets, do a special query &lt;code&gt;:list&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    curl cht.sh/go/:list
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(almost) each programming language has a special page, named &lt;code&gt;:learn&lt;/code&gt;, that describes the language basics (that's a direct mapping from the &lt;em&gt;&quot;Learn X in Y&quot;&lt;/em&gt; project). It could be a good starting point, if you've just started learning a language.&lt;/p&gt;
&lt;p&gt;If there is no cheat sheet for some programming language query (and it is almost always the case), it is generated on the fly, basing on available cheat sheets and answers on StackOverflow. Of course, there is no guarantee that the returned cheat sheet will be a 100% hit, but it is almost always exactly what you are looking for.&lt;/p&gt;
&lt;p&gt;Try these (and your own) queries to get the impression of that, what the answers look like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    curl cht.sh/go/reverse+a+list
    curl cht.sh/python/random+list+elements
    curl cht.sh/js/parse+json
    curl cht.sh/lua/merge+tables
    curl cht.sh/clojure/variadic+function
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you don't like an answer for some of your queries, you can pick another one: for that, repeat the query with an additional parameter &lt;code&gt;/1&lt;/code&gt;, &lt;code&gt;/2&lt;/code&gt; etc. appended:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    curl cht.sh/python/random+string
    curl cht.sh/python/random+string/1
    curl cht.sh/python/random+string/2
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Cheat sheets are formatted as code of the queried programming language (at least we are trying our best to do so) so they can be pasted into a program in this language directly. Text comments, if there are any, are formatted according to the language syntax.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    $ curl cht.sh/lua/table+keys
    -- lua: retrieve list of keys in a table

    local keyset={}
    local n=0

    for k,v in pairs(tab) do
      n=n+1
      keyset[n]=k
    end

    --[[
       [ Note that you cannot guarantee any order in keyset. If you want the
       [ keys in sorted order, then sort keyset with table.sort(keyset).
       [ 
       [ [lhf] [so/q/12674345] [cc by-sa 3.0]
       ]]

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you don't need text comments in the answer, you can eliminate them using a special option &lt;code&gt;?Q&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    $ curl cht.sh/lua/table+keys?Q
    local keyset={}
    local n=0

    for k,v in pairs(tab) do
      n=n+1
      keyset[n]=k
    end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And if you don't need syntax highlighting, switch it off using &lt;code&gt;?T&lt;/code&gt;. You can combine the options together:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    curl cht.sh/go/reverse+a+list?Q
    curl cht.sh/python/random+list+elements?Q
    curl cht.sh/js/parse+json?Q
    curl cht.sh/lua/merge+tables?QT
    curl cht.sh/clojure/variadic+function?QT
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Full list of all options described below and in &lt;code&gt;/:help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Try your own queries. Follow these rules:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Try to be more specific (&lt;code&gt;/python/append+file&lt;/code&gt; is better than &lt;code&gt;/python/file&lt;/code&gt; and &lt;code&gt;/python/append&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;Ask practical question if possible (yet theoretical question are possible too);&lt;/li&gt;
&lt;li&gt;Ask programming language questions only; specify the name of the programming language as the section name;&lt;/li&gt;
&lt;li&gt;Separate words with &lt;code&gt;+&lt;/code&gt; instead of spaces;&lt;/li&gt;
&lt;li&gt;Do not use special characters, they are ignored anyway.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Read more about the programming languages queries below.&lt;/p&gt;
&lt;h2&gt;Command line client, cht.sh&lt;/h2&gt;
&lt;p&gt;The cheat.sh service has its own command line client (&lt;code&gt;cht.sh&lt;/code&gt;), that, comparing to quering the service directly with &lt;code&gt;curl&lt;/code&gt;, has several useful features:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Special shell mode with a persistent queries context and readline support;&lt;/li&gt;
&lt;li&gt;Queries history;&lt;/li&gt;
&lt;li&gt;Clipboard integration;&lt;/li&gt;
&lt;li&gt;Tab completion support for shells (bash, fish, zsh);&lt;/li&gt;
&lt;li&gt;Stealth mode.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To install the client:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    curl https://cht.sh/:cht.sh &amp;gt; ~/bin/cht.sh
    chmod +x ~/bin/cht.sh
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, you can use &lt;code&gt;cht.sh&lt;/code&gt; instead of &lt;code&gt;curl&lt;/code&gt;, and write your queries in more natural way, with spaces instead of &lt;code&gt;+&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    $ cht.sh go reverse a list
    $ cht.sh python random list elements
    $ cht.sh js parse json
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It is even more convenient to start the client in a special shell mode:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    $ cht.sh --shell
    cht.sh&amp;gt; go reverse a list
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If all your queries are supposed to be about the same language, you can change the context of the queries and spare repeating the programming language name:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    $ cht.sh --shell
    cht.sh&amp;gt; cd go
    cht.sh/go&amp;gt; reverse a list
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;or even start the client in this context:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    $ cht.sh --shell go
    cht.sh/go&amp;gt; reverse a list
    ...
    cht.sh/go&amp;gt; join a list
    ...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you want to change the context, you can do it with the &lt;code&gt;cd&lt;/code&gt; command, or if you want do a single query for some other language, just prepend it with &lt;code&gt;/&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    $ cht.sh --shell go
    ...
    cht.sh/go&amp;gt; /python dictionary comprehension
    ...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you want to copy the last answer into the clipboard, you can use the &lt;code&gt;c&lt;/code&gt; (&lt;code&gt;copy&lt;/code&gt;) command, or &lt;code&gt;C&lt;/code&gt; (&lt;code&gt;ccopy&lt;/code&gt;, without comments).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    cht.sh/python&amp;gt; append file
    #  python - How do you append to a file?

    with open(&quot;test.txt&quot;, &quot;a&quot;) as myfile:
        myfile.write(&quot;appended text&quot;)
    cht.sh/python&amp;gt; C
    copy: 2 lines copied to the selection
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Type &lt;code&gt;help&lt;/code&gt; for other internal &lt;code&gt;cht.sh&lt;/code&gt; commands.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     cht.sh&amp;gt; help
        help    - show this help
        hush    - do not show the 'help' string at start anymore
        cd LANG - change the language context
        copy    - copy the last answer in the clipboard (aliases: yank, y, c)
        ccopy   - copy the last answer w/o comments (cut comments; aliases: cc, Y, C)
        exit    - exit the cheat shell (aliases: quit, ^D)
        id [ID] - set/show an unique session id (&quot;reset&quot; to reset, &quot;remove&quot; to remove)
        stealth - stealth mode (automatic queries for selected text)
        update  - self update (only if the scriptfile is writeable)
        version - show current cht.sh version
        /:help  - service help
        QUERY   - space ceparated query staring (examples are below)
                                  cht.sh&amp;gt; python zip list
                                  cht.sh/python&amp;gt; zip list
                                  cht.sh/go&amp;gt; /python zip list
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;cht.sh&lt;/code&gt; client has its configuration file which is located at &lt;code&gt;~/.cht.sh/cht.sh.conf&lt;/code&gt;. Use it to specify query options that you would use with each query. For example, to switch syntax highlighting off, create the file with the following content:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;QUERY_OPTIONS=&quot;T&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or if you want to use a special syntax highlighting theme:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;QUERY_OPTIONS=&quot;style=native&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(&lt;code&gt;curl cht.sh/:styles-demo&lt;/code&gt; to see all supported styles).&lt;/p&gt;
&lt;h3&gt;Tab completion&lt;/h3&gt;
&lt;p&gt;To activate tab completion support for &lt;code&gt;cht.sh&lt;/code&gt;, add the &lt;code&gt;:bash_completion&lt;/code&gt; script to your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    $ curl https://cheat.sh/:bash_completion &amp;gt; ~/.bash.d/cht.sh
    $ . ~/.bash.d/cht.sh
    $ # and add . ~/.bash.d/cht.sh to ~/.bashrc
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Stealth mode&lt;/h3&gt;
&lt;p&gt;One of the important properties of any real cheat sheet, is that it could be used fully unnoticed.&lt;/p&gt;
&lt;p&gt;cheat.sh can be used completely unnoticed too. The cheat.sh client, &lt;code&gt;cht.sh&lt;/code&gt;, has a special mode, called &lt;strong&gt;stealth mode&lt;/strong&gt;, using that you don't even need to touch your keyboard to open some cheat sheet.&lt;/p&gt;
&lt;p&gt;In this mode, as soon as you select some text with the mouse (and thus it is added into the selection buffer of X Window System or into the clipboard) it's used as a query string for cheat.sh, and the correspondent cheat sheet is automatically shown.&lt;/p&gt;
&lt;p&gt;Let's imagine, that you are having an online interview, where your interviewer asks you some questions using a shared document (say Google Docs) and you are supposed to write your coding answers there (it's possible too that you'll type in the questions on your own, just to show to the interviewer that you've heard it right).&lt;/p&gt;
&lt;p&gt;When using the stealth mode of &lt;code&gt;cht.sh&lt;/code&gt;, the only thing you need to do in order to see a cheat sheet for some question, is to select the question using the mouse. If you don't want any text in the answers and the only thing you need is code, use the &lt;code&gt;Q&lt;/code&gt; option when starting the stealth mode.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/13472193c407082130ea38bbfb9c38aecaa8d728/68747470733a2f2f63686561742e73682f66696c65732f737465616c74682d6d6f64652e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/13472193c407082130ea38bbfb9c38aecaa8d728/68747470733a2f2f63686561742e73682f66696c65732f737465616c74682d6d6f64652e676966&quot; data-canonical-src=&quot;https://cheat.sh/files/stealth-mode.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;You: Hi!                                            | $ cht.sh --shell python
She: Hi!                                            | cht.sh/python&amp;gt; stealth Q
She: Are you ready for a small interview?           | stealth: you are in the stealth mode; select any text
She: Just a couple of questions                     | stealth: selections longer than 5 words are ignored
She: We will talk about python                      | stealth: query arguments: ?Q
She: Let's start from something simple.             | stealth: use ^C to leave this mode
She: Do you know how to reverse a list in python?   |
You: Sure                                           |
You: (selecting &quot;reverse a list&quot;)                   | stealth: reverse a list
                                                    | reverse_lst = lst[::-1]
You: lst[::-1]?                                     |
She: Good.                                          |
She: Do you know how to chain a list of lists?      |
You: (selecting &quot;chain a list of lists&quot;)            | stealth: chain a list of lists
                                                    | import itertools
                                                    | a = [[&quot;a&quot;,&quot;b&quot;], [&quot;c&quot;]]
                                                    | print list(itertools.chain.from_iterable(a))
You: May I use external modules?                    |
She: What module do you want to use?                |
You: itertools                                      |
She: Yes, you may use it                            |
You: Ok, then:                                      |
You: itertools.chain.from_iterable(a)               |
She: Good. Let's try something harder.              |
She: What about quicksort implementation?           |
You: (selecting &quot;quicksort implementation&quot;)         | stealth: quicksort implementation
You: Let me think about it.                         | (some big and clumsy lowlevel implementation shown)
You: Well...(starting typing it in)                 | def sort(array=[12,4,5,6,7,3,1,15]):
                                                    |     less = []
She: (seeing your ugly pascal style)                |     equal = []
She: Could you write it more concise?               |     greater = []
                                                    |     if len(array) &amp;gt; 1:
You: What do you mean?                              |         pivot = array[0]
                                                    |         for x in array:
She: I mean,                                        |             if x &amp;lt; pivot: less.append(x)
She: do you really need all these ifs and fors?     |             if x == pivot: equal.append(x)
She: Could you may be just use filter instead?      |             if x &amp;gt; pivot: greater.append(x)
                                                    |         return sort(less)+equal+sort(greater)
You: quicksort with filter?                         |     else:
                                                    |         return array
She: Yes                                            |
You: (selecting &quot;quicksort with filter&quot;)            | stealth: quicksort with filter
You: Ok, I will try.                                | return qsort(filter(lt, L[1:]))+[pivot] \
You: Something like this?                           |     +qsort(filter(ge, L[1:]))
You: qsort(filter(lt, L[1:]))+[pivot] \             |
       + qsort(filter(ge, L[1:]))                   |
                                                    |
She: Yes! Perfect! Exactly what I wanted to see!    |
                                                    |

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or course, it is just fun, and you should never cheat in your coding interviews, because you know what happens when you do.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/5b9b2100a3238483a4158af57663f138f8aed651/687474703a2f2f63686561742e73682f66696c65732f7768656e2d796f752d6c69652d6b61747a652e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5b9b2100a3238483a4158af57663f138f8aed651/687474703a2f2f63686561742e73682f66696c65732f7768656e2d796f752d6c69652d6b61747a652e706e67&quot; alt=&quot;when you lie in your interview&quot; data-canonical-src=&quot;http://cheat.sh/files/when-you-lie-katze.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Editors integration&lt;/h2&gt;
&lt;p&gt;You can use &lt;em&gt;cheat.sh&lt;/em&gt; directly from the editor (&lt;em&gt;Vim&lt;/em&gt; and &lt;em&gt;Emacs&lt;/em&gt; are currently supported). Instead of opening your browser, googling, browsing Stack Overflow and eventually copying the code snippets you need into the clipboard and later pasting them into the editor, you can achieve the same instantly and without leaving the editor at all!&lt;/p&gt;
&lt;p&gt;Here is what it looks like in Vim:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;If you have a question while editing a program, you can just type your question directly in the buffer and press &lt;code&gt;&amp;lt;leader&amp;gt;KK&lt;/code&gt;. You will get the answer to your question in pager. (with &lt;code&gt;&amp;lt;leader&amp;gt;KB&lt;/code&gt; you'll get the answer in a separate buffer).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you like the answer, you can manually paste it from the buffer or the pager, or if you are lazy you can use &lt;code&gt;&amp;lt;leader&amp;gt;KP&lt;/code&gt; to paste it below/under your question (or replace you question using &lt;code&gt;&amp;lt;leader&amp;gt;KR&lt;/code&gt;). If you want the answer without the comments, &lt;code&gt;&amp;lt;leader&amp;gt;KC&lt;/code&gt; replays the last query toggling them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If you use some static analysis plugin such as &lt;em&gt;syntastic&lt;/em&gt; (for Vim), you can use its warning and error messages as cheat.sh queries: place the cursor on the problem line and press &lt;code&gt;&amp;lt;leader&amp;gt;KE&lt;/code&gt;: explanation for the warning will be opened in a new buffer.&lt;/p&gt;
&lt;h3&gt;Vim&lt;/h3&gt;
&lt;p&gt;Here is Vim configuration example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&quot; some configuration above ...

let mapleader=&quot; &quot;

call vundle#begin()
Bundle 'gmarik/vundle'
Bundle 'scrooloose/syntastic'
Bundle 'dbeniamine/cheat.sh-vim'
call vundle#end()

let g:syntastic_javascript_checkers = [ 'jshint' ]
let g:syntastic_ocaml_checkers = ['merlin']
let g:syntastic_python_checkers = ['pylint']
let g:syntastic_shell_checkers = ['shellcheck']

&quot; some configuration below ...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this example, several Vim plugins are used:&lt;/p&gt;
&lt;p&gt;Syntastic shows warnings and errors (found by code analysys tools: &lt;code&gt;jshint&lt;/code&gt;, &lt;code&gt;merlin&lt;/code&gt;, &lt;code&gt;pylint&lt;/code&gt;, &lt;code&gt;shellcheckt etc.), and&lt;/code&gt;cheat.sh-vim` shows you explanations for the errors and warnings and answers on programming languages queries written in the editor.&lt;/p&gt;
&lt;p&gt;Watch a demo, where the most important features of the cheat.sh Vim plugin are shown (5 Min):&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/05b8a7368365886ee769fcfe47efa6fd2a81e36a/68747470733a2f2f63686561742e73682f66696c65732f76696d2d64656d6f2e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/05b8a7368365886ee769fcfe47efa6fd2a81e36a/68747470733a2f2f63686561742e73682f66696c65732f76696d2d64656d6f2e676966&quot; data-canonical-src=&quot;https://cheat.sh/files/vim-demo.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or, if you want to scroll and/or pause, the same on YouTube:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=xyf6MJ0y-z8&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/388f1ac99c0c3fb47946aecefb05e012fb189482/687474703a2f2f696d672e796f75747562652e636f6d2f76692f787966364d4a30792d7a382f302e6a7067&quot; alt=&quot;cheat.sh-vim: Using cheat.sh from vim&quot; width=&quot;700&quot; height=&quot;490&quot; border=&quot;10&quot; data-canonical-src=&quot;http://img.youtube.com/vi/xyf6MJ0y-z8/0.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Emacs&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/davep/cheat-sh.el&quot;&gt;cheat-sh.el&lt;/a&gt; — Emacs support (available also at cheat.sh/:emacs)&lt;/li&gt;
&lt;li&gt;cheat.sh/:emacs-ivy — Emacs support for ivy users&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/3xvqwrsu9g4taj5w526sb2t35&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/14144a54a82dbc9cd0ebd7aa7d17932922016758/68747470733a2f2f61736369696e656d612e6f72672f612f337876717772737539673474616a35773532367362327433352e706e67&quot; alt=&quot;asciicast&quot; data-canonical-src=&quot;https://asciinema.org/a/3xvqwrsu9g4taj5w526sb2t35.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Special pages&lt;/h2&gt;
&lt;p&gt;There are several special pages (their names are always starting with a colon), that are not cheat sheets and have special meaning.&lt;/p&gt;
&lt;p&gt;Getting started:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    :help               description of all special pages and options
    :intro              cheat.sh introduction, covering the most important usage questions
    :list               list all cheat sheets (can be used in a subsection too: /go/:list)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Command line client &lt;code&gt;cht.sh&lt;/code&gt; and shells support:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    :cht.sh             code of the cht.sh client
    :bash_completion    bash function for tab completion
    :bash               bash function and tab completion setup
    :fish               fish function and tab completion setup
    :zsh                zsh function and tab completion setup
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Editors support:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    :vim                cheat.sh support for Vim
    :emacs              cheat.sh function for Emacs
    :emacs-ivy          cheat.sh function for Emacs (uses ivy)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Other pages:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    :post               how to post new cheat sheet
    :styles             list of color styles
    :styles-demo        show color styles usage examples
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Search&lt;/h2&gt;
&lt;p&gt;To search for a keyword, use the query:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    /~keyword
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this case search is not recursive — it is conducted only in a pages of the specified level. For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    /~snapshot          look for snapshot in the first level cheat sheets
    /scala/~currying     look for currying in scala cheat sheets
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For a recursive search in all cheat sheets, use double slash:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    /~snapshot/r         look for snapshot in all cheat sheets
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can use special search options after the closing slash:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    /~shot/bi           case insensitive (i), word boundaries (b)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;List of search options:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    i   case insensitive search
    b   word boundaries
    r   recursive search
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Programming languages cheat sheets&lt;/h2&gt;
&lt;p&gt;Cheat sheets related to programming languages are organized in namespaces (subdirectories), that are named according to the programming languages.&lt;/p&gt;
&lt;p&gt;For each supported programming language there are several special cheat sheets: its own sheet, &lt;code&gt;hello&lt;/code&gt;, &lt;code&gt;:list&lt;/code&gt; and &lt;code&gt;:learn&lt;/code&gt;. Say for lua it will look like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    lua
    lua/hello
    lua/:list
    lua/:learn
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Some languages has the one-liners-cheat sheet, &lt;code&gt;1line&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    perl/1line
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;hello&lt;/code&gt; describes how you can start with the language — install it if needed, build and run its programs, and it shows the &quot;Hello world&quot; program written in the language;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:list&lt;/code&gt; shows all topics related to the language&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:learn&lt;/code&gt; shows a learn-x-in-minutes language cheat sheet perfect for getting started with the language.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1line&lt;/code&gt; is a collection of one-liners in this language&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weirdness&lt;/code&gt; is a collection of examples of weird things in this language&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/f0d4f6b68e1831faa07500a6867729b00818d63f/687474703a2f2f63686561742e73682f66696c65732f737570706f727465642d6c616e6775616765732d632b2b2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f0d4f6b68e1831faa07500a6867729b00818d63f/687474703a2f2f63686561742e73682f66696c65732f737570706f727465642d6c616e6775616765732d632b2b2e706e67&quot; alt=&quot;cheat.sh usage&quot; data-canonical-src=&quot;http://cheat.sh/files/supported-languages-c++.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At the moment, cheat.sh covers the 55 following programming languages (alphabetically sorted):&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Prefix&lt;/th&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Basics&lt;/th&gt;
&lt;th&gt;One-liners&lt;/th&gt;
&lt;th&gt;Weirdness&lt;/th&gt;
&lt;th&gt;StackOverflow&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;arduino/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Arduino&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;assembly/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Assembly&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;awk/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AWK&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;bash/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Bash&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;basic/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;BASIC&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;bf/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Brainfuck&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;c/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;chapel/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Chapel&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;clean/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Clean&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;clojure/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Clojure&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;coffee/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CoffeeScript&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;cpp/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;csharp/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;d/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;dart/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Dart&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;delphi/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Dephi&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;dylan/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Dylan&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;eiffel/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Eiffel&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;elixir/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Elixir&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;elisp/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ELisp&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;elm/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Elm&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;erlang/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Erlang&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;factor/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Factor&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;fortran/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fortran&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;forth/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Forth&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;fsharp/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F#&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;go/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;groovy/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Groovy&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;haskell/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Haskell&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;java/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;js/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;JavaScript&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;julia/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Julia&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;kotlin/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Kotlin&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lisp/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lisp&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;lua/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Lua&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;matlab/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;MATLAB&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ocaml/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;OCaml&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;perl/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Perl&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;perl6/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Perl 6&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;php/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PHP&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;pike/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Pike&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;python/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;python3/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Python 3&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;r/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;racket/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Racket&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;ruby/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;rust/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rust&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;scala/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Scala&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;scheme/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Scheme&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;swift/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Swift&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;tcsh/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tcsh&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;tcl/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Tcl&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;objective-c/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Objective-C&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;vb/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;VisualBasic&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;vbnet/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;VB.Net&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;Cheat sheets sources&lt;/h2&gt;
&lt;p&gt;Instead of creating yet another mediocre cheat sheet repository, we are concentrating our efforts on creation of a unified mechanism to access selected existing well developed and good maintained cheat sheet repositories covering topics of our interest: programming and operating systems usage.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;cheat.sh&lt;/em&gt; uses selected community driven cheat sheet repositories and information sources, maintained by thousands of users, developers and authors all over the world (in the &lt;em&gt;Users&lt;/em&gt; column number of contributors/number of stars is shown):&lt;/p&gt;
&lt;p&gt;Pie diagram reflecting cheat sheets sources distribution (by number of cheat sheets on cheat.sh originating from a repository):&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/8f64405667be36839001b694702820fafcd5ad70/687474703a2f2f63686561742e73682f66696c65732f737461742d323031372d30362d30352e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8f64405667be36839001b694702820fafcd5ad70/687474703a2f2f63686561742e73682f66696c65732f737461742d323031372d30362d30352e706e67&quot; alt=&quot;cheat.sh cheat sheets repositories&quot; data-canonical-src=&quot;http://cheat.sh/files/stat-2017-06-05.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;How to contribute&lt;/h2&gt;
&lt;h3&gt;How to edit a cheat sheet&lt;/h3&gt;
&lt;p&gt;If you want to edit a cheat.sh cheat sheet, you should edit it in the upstream repository. You will find the name of the source repository in a browser, when you open a cheat sheet. There are two github buttons in the bottom of the page: the second one is the button of the repository, whom belongs the current cheat sheet.&lt;/p&gt;
&lt;p&gt;You can edit the cheat sheet directly in your browser (you need a github account for it). There is a edit button in the top right corner. If you click on it, an editor will be open. There you will change the cheat sheet (under the hood: the upstrem repository is forked, your changes are commited in the forked repository, a pull request to the upstream repository owner is sent).&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/a2549ceb6e4a95913d1a8488efc491a71b17d109/687474703a2f2f63686561742e73682f66696c65732f656469742d63686561742d73686565742e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a2549ceb6e4a95913d1a8488efc491a71b17d109/687474703a2f2f63686561742e73682f66696c65732f656469742d63686561742d73686565742e706e67&quot; alt=&quot;cheat.sh cheat sheets repositories&quot; data-canonical-src=&quot;http://cheat.sh/files/edit-cheat-sheet.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;How to add a cheat sheet&lt;/h3&gt;
&lt;p&gt;If you want to add a cheat sheet, you have one of the following ways:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add it to one of the external cheat sheets repositories; you should decide on your own what is the best repository for your cheat sheet;&lt;/li&gt;
&lt;li&gt;Add it to the local cheat.sh repository (&lt;a href=&quot;https://github.com/chubin/cheat.sheets&quot;&gt;cheat.sheets&lt;/a&gt;) on github (fork, commit, pull request);&lt;/li&gt;
&lt;li&gt;Post it on cheat.sh using curl or a web browser (&lt;a href=&quot;http://cheat.sh/:post&quot; rel=&quot;nofollow&quot;&gt;cheat.sh/:post&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you want to change an existing cheat sheet, you have to find the original repository (when you open a cheat sheet in a browser, you see the repository's github button in the bottom of the cheat sheet), the cheat sheet is coming from, and change it there. After some time the changes will be synchronized on cheat.sh.&lt;/p&gt;
&lt;h3&gt;How to add a cheat sheet repository&lt;/h3&gt;
&lt;p&gt;If you want to add a cheat sheet repository to cheat.sh, please open an issue:&lt;/p&gt;
&lt;p&gt;Please specify the name of the repository, and give its short description.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Wed, 11 Jul 2018 02:34:11 +0000</pubDate>
<dc:creator>ghosthamlet</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/3875145?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>chubin/cheat.sh</og:title>
<og:url>https://github.com/chubin/cheat.sh</og:url>
<og:description>cheat.sh - the only cheat sheet you need</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/chubin/cheat.sh</dc:identifier>
</item>
<item>
<title>Bitwarden – Open Source Password Manager</title>
<link>https://bitwarden.com/</link>
<guid isPermaLink="true" >https://bitwarden.com/</guid>
<description>&lt;div readability=&quot;34&quot;&gt;

&lt;h2&gt;Organization Accounts&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Powerful sharing features for families, teams, and business organizations.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;Advertised prices are billed annually. Month-to-month options are also available.&lt;/p&gt;&lt;div readability=&quot;19&quot;&gt;
&lt;div class=&quot;col-md-4 col-sm-6&quot; readability=&quot;9&quot;&gt;
&lt;h4&gt;Sharing&lt;/h4&gt;
&lt;p&gt;Securely share and manage logins, secret keys, and more with users across your organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-4 col-sm-6&quot; readability=&quot;7&quot;&gt;
&lt;h4&gt;Access Control&lt;/h4&gt;
&lt;p&gt;Implement fine-grained access control policies and organize your vault with collections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-4 col-sm-6&quot; readability=&quot;11&quot;&gt;
&lt;h4&gt;File Storage&lt;/h4&gt;
&lt;p&gt;Store &amp;amp; share sensitive files such as private keys, certificates, documents, photos, and more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-4 col-sm-6&quot; readability=&quot;7&quot;&gt;
&lt;h4&gt;User Groups&lt;/h4&gt;
&lt;p&gt;Use groups for easier user management and greater control across departments and teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-4 col-sm-6&quot; readability=&quot;10&quot;&gt;
&lt;h4&gt;Directory Sync&lt;/h4&gt;
&lt;p&gt;Sync groups and users from Active Directory (and other LDAP), Azure, G Suite, and Okta.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-4 col-sm-6&quot; readability=&quot;7&quot;&gt;
&lt;h4&gt;Event Logs&lt;/h4&gt;
&lt;p&gt;Review an audit trail of actions and changes performed by your organization's users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-4 col-sm-6&quot; readability=&quot;7&quot;&gt;
&lt;h4&gt;On-premise Hosting&lt;/h4&gt;
&lt;p&gt;Easily deploy and host Bitwarden on-premise with no dependency on external cloud services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-4 col-sm-6&quot; readability=&quot;7&quot;&gt;
&lt;h4&gt;Multi-factor Authentication&lt;/h4&gt;
&lt;p&gt;Enforce multi-factor login policies for your users by integrating with Duo Security.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-md-4 col-sm-6&quot; readability=&quot;8&quot;&gt;
&lt;h4&gt;Priority Support&lt;/h4&gt;
&lt;p&gt;Having a problem? Got questions? Get the help you need when you need it, fast!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Wed, 11 Jul 2018 02:10:19 +0000</pubDate>
<dc:creator>GutenYe</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bitwarden.com/</dc:identifier>
</item>
<item>
<title>Arm kills off its anti-RISC-V site after own staff revolt</title>
<link>https://www.theregister.co.uk/2018/07/10/arm_riscv_website/</link>
<guid isPermaLink="true" >https://www.theregister.co.uk/2018/07/10/arm_riscv_website/</guid>
<description>&lt;p&gt;Arm has taken offline its website attacking rival processor architecture RISC-V within days of it going live – after its own staff objected to the underhand tactic.&lt;/p&gt;
&lt;p&gt;The site – riscv-basics.com – was created at the end of June, and attempted to smear open-source RISC-V, listing five reasons why Arm cores are a better choice over its competitor's designs. However, the stunt backfired, with folks in the tech industry, and within the company's own ranks, slamming the site as a cheap shot and an attack on open source.&lt;/p&gt;
&lt;p&gt;That last part in particular made Arm bosses U-turn: the Softbank-owned CPU design house, responsible for billions of CPU cores in smartphones, tablets, smart cards and other embedded kit, is heavily reliant on an ecosystem of open-source code and developers. Thus laying into the RISC-V movement looked like a declaration of war on open-source technology.&lt;/p&gt;
&lt;p&gt;If anything, the site made RISC-V sound like a viable alternative to Arm's crown, giving the upstart architecture more credibility.&lt;/p&gt;
&lt;p&gt;Arm is right to be rattled by RISC-V. Western Digital has thrown its &lt;a target=&quot;_blank&quot; href=&quot;https://www.theregister.co.uk/2017/12/01/wdc_risc_v_edge_strategy/&quot;&gt;weight behind&lt;/a&gt; the architecture, Nvidia is using it as the glue inside its future graphics cards, plus it is backed by Google, Samsung, Qualcomm, and &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://riscv.org/members-at-a-glance/&quot;&gt;other organizations&lt;/a&gt; – many of which are Arm licensees.&lt;/p&gt;
&lt;h3 class=&quot;crosshead&quot;&gt;&lt;span&gt;Background&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;RISC-V is an &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://riscv.org/specifications/&quot;&gt;open-source processor core specification&lt;/a&gt;, overseen by the non-profit RISC-V Foundation, with &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://riscv.org/risc-v-cores/&quot;&gt;freely available&lt;/a&gt; implementations – whereas you have to pay millions of dollars to Arm for the rights to use its CPU cores and architectures.&lt;/p&gt;
&lt;p&gt;People who want to build their own system-on-chips can take royalty-free BSD-licensed RISC-V cores from GitHub, bolt on their own crypto or math acceleration, input-output support, and other peripherals, and pass the designs to chip factories to fabricate, which in theory works out a lot cheaper than using Arm's CPU cores.&lt;/p&gt;
&lt;p&gt;Upstarts such as &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.sifive.com/about/mission/&quot;&gt;SiFive&lt;/a&gt; will help turn your RISC-V-based blueprints into physical chips, and outfits such as &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://greenwaves-technologies.com/en/gap8-applications/&quot;&gt;Greenwaves&lt;/a&gt; are using the technology to craft multi-core SoCs, with neural network acceleration, for &lt;a target=&quot;_blank&quot; href=&quot;https://www.theregister.co.uk/2018/05/16/smallest_ai_drone/&quot;&gt;drones&lt;/a&gt; and other embedded gear. SiFive also has its own system-on-chips available for you to get your hands on, &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.lowrisc.org/about/&quot;&gt;LowRISC&lt;/a&gt; is working on its own open-source SoC, and you can run RISC-V cores on FPGAs or in emulators such as Qemu.&lt;/p&gt;
&lt;p&gt;Sure, RISC-V is in its infancy, and its cores can't keep up with Arm's top-end Cortex-A offerings, for the moment at least. However, it is threatening to give Arm a run for its money in the microcontroller and lower-end, low-power world.&lt;/p&gt;
&lt;p&gt;Both RISC-V and Arm's 64-bit Armv8 architectures share the same RISC roots going back the 1980s. RISC-V was born in Berkeley, California, in 2010, founded by Krste Asanović and colleagues with the help of computer science ace &lt;a target=&quot;_blank&quot; href=&quot;https://www.theregister.co.uk/2018/03/21/google_turing_award_mips_risc/&quot;&gt;David Patterson&lt;/a&gt;, who coined the term RISC, cowrote essential textbooks on CPU design, and led early efforts to create RISC processors.&lt;/p&gt;
&lt;p&gt;Just like on Arm, you can boot Linux and other ported operating systems on RISC-V cores – which come in 32-bit, 64-bit and 128-bit flavors – and use them as general-purpose or specialist processors. RISC-V and Armv8 both have a zero register, both have 31 or so general purpose registers, both shun multiple register loading and saving from and to memory, both support multiple levels of privilege, both do virtual memory and access protection, both look a little like 64-bit MIPS if you squint, and so on.&lt;/p&gt;
&lt;p&gt;RISC-V and Arm both run software written in C, C++, Go, Rust, Python, and other languages. To programmers, the architectures appear quite similar.&lt;/p&gt;
&lt;h3 class=&quot;crosshead&quot;&gt;&lt;span&gt;The claims&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Arm's five &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://web.archive.org/web/20180708231736/https://riscv-basics.com/&quot;&gt;allegations&lt;/a&gt; against RISC-V centered on cost, ecosystem, fragmentation, security, and design assurance.&lt;/p&gt;
&lt;p&gt;&quot;Whether you are looking to create a chip from scratch or looking for a complete solution, take advantage of an architecture that has been tried and tested in more than 125 billion chips and already in processor designs licensed by more 500 partners,&quot; the site smugly put.&lt;/p&gt;
&lt;p&gt;On the point of cost, Arm tried to argue that while RISC-V cores are free to use, you still have to design plumbing around them, and then get the things manufactured, none of which is cost free. Of course, anyone preparing to create a system-on-chip will know this – so &lt;em&gt;El Reg&lt;/em&gt; can only assume this was an appeal to investors and shareholders that it wasn't about to be totally undercut by an open-source upstart.&lt;/p&gt;
&lt;div class=&quot;promo_article&quot;&gt;&lt;img src=&quot;https://regmedia.co.uk/2018/04/23/shutterstock_chip.jpg?x=174&amp;amp;y=115&amp;amp;crop=1&quot; width=&quot;174&quot; height=&quot;115&quot; alt=&quot;Illustration of a computer chip with trendy stuff around it&quot;/&gt;&lt;h2 title=&quot;Unveil first code, join giants in industry-standards club&quot;&gt;Brains behind seL4 secure microkernel begin RISC-V chip port&lt;/h2&gt;
&lt;a href=&quot;https://www.theregister.co.uk/2018/04/23/risc_v_sel4_port/&quot;&gt;&lt;span&gt;READ MORE&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;On the ecosystem, yes, Arm has a large one – but RISC-V is just starting, so it's a cheap shot. At one point, Arm was an internal project at Britain's answer to Apple – Acorn Computers – and it took several years to reach its level of dominance today.&lt;/p&gt;
&lt;p&gt;On the fragmentation risk: Apple, Samsung, and Qualcomm have their own flavors of Arm-compatible cores out in the wild, while we've lost count of the times Arm has come up with different math unit extensions.&lt;/p&gt;
&lt;p&gt;On security: Arm cores suffer from Spectre and Meltdown flaws, and TrustZone fell to crap firmware programming by Arm's customers. RISC-V cores avoided Spectre and Meltdown by not having the same level of speculative execution.&lt;/p&gt;
&lt;p&gt;On design assurance: Arm claimed again it is expensive to validate designs, but anyone serious about building their own chips will know this, so again, it looks like an appeal to investors, analysts, and journalists.&lt;/p&gt;
&lt;h3 class=&quot;crosshead&quot;&gt;&lt;span&gt;Fear, uncertainty and doubt&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;In response to Arm's outburst, the inevitable &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.arm-basics.com/&quot;&gt;arm-basics.com&lt;/a&gt;, piling into Arm's approach to licensing, emerged online, and infosec guru Maria &quot;Azeria&quot; Markstedter &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://twitter.com/Fox0x01/status/1016249821496213504&quot;&gt;vowed&lt;/a&gt; to create arm-basics.de with guides on how to write exploits for vulnerabilities in Arm-powered systems.&lt;/p&gt;
&lt;p&gt;&quot;Arm’s negative campaign against RISC-V can only backfire,&quot; &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://twitter.com/migueldeicaza/status/1016298803312328705&quot;&gt;said&lt;/a&gt; GNOME and Xamarin cofounder Miguel de Icaza on Twitter. &quot;Also, their points are kind of weak. This was attempted before against open source, and all it achieved was eggs on people’s faces.&quot;&lt;/p&gt;
&lt;p&gt;Arm told us it had hoped its anti-RISC-V site would kickstart a discussion around architectures, rather than come off as a smear attack. In any case, on Tuesday, it took the site offline by killing its DNS.&lt;/p&gt;
&lt;p&gt;“Our intention in creating a webpage to offer key considerations around commercial RISC-V based products was to inform a lively industry debate,&quot; an Arm spokesperson told &lt;em&gt;The Register&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&quot;Regretfully, the result was something different, a page that wasn’t in line with Arm’s collaborative culture, so we’ve taken it down. Indeed, many of our own people also told us they didn’t like it.&lt;/p&gt;
&lt;p&gt;&quot;One thing to clear up immediately is we absolutely did not want to give the impression we were attacking open source as we are highly committed supporters of open source communities in many different areas. Our intention is to cultivate a healthy discussion around architectural choices as it is one of many subjects critical to our industry’s future.”&lt;/p&gt;
&lt;p&gt;A spokesperson for the RISC-V Foundation was not available to comment. ®&lt;/p&gt;
&lt;p class=&quot;wptl btm&quot;&gt;&lt;span&gt;Sponsored:&lt;/span&gt; &lt;a href=&quot;https://go.theregister.co.uk/tl/1757/shttp://www.mcubed.london/&quot;&gt;Minds Mastering Machines - Call for papers now open&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 11 Jul 2018 00:42:15 +0000</pubDate>
<dc:creator>rch</dc:creator>
<og:image>https://regmedia.co.uk/2015/02/03/cortex-a72.jpg?x=1200&amp;y=794</og:image>
<og:type>article</og:type>
<og:url>https://www.theregister.co.uk/2018/07/10/arm_riscv_website/</og:url>
<og:title>Up in arms! Arm kills off its anti-RISC-V smear site after own staff revolt</og:title>
<og:description>Underhand tactic of slagging off the competition backfires</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theregister.co.uk/2018/07/10/arm_riscv_website/</dc:identifier>
</item>
<item>
<title>A California mall operator is sharing license plate tracking data with ICE</title>
<link>https://techcrunch.com/2018/07/10/alpr-license-plate-recognition-ice-irvine-company/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/07/10/alpr-license-plate-recognition-ice-irvine-company/</guid>
<description>&lt;p&gt;A chain of California shopping centers is sharing its license plate reader data with a well-known U.S. Immigration and Customs Enforcement (ICE) contractor, giving that agency the ability to track license plate numbers it captures in near real-time.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://www.eff.org/deeplinks/2018/07/california-shopping-centers-are-spying-ice-contractor&quot;&gt;report from the Electronic Frontier Foundation&lt;/a&gt; revealed that real estate group Irvine Company shares that data with Vigilant Solutions, a private surveillance tech company that sells automated license plate recognition (ALPR) equipment to law enforcement and government agencies. Irvine Company owns nearly &lt;a href=&quot;https://www.shopirvinecompany.com/centers/&quot;&gt;50 shopping centers across California&lt;/a&gt; with locations in Irvine, La Jolla, Newport Beach, Redwood City, San Jose, Santa Clara and Sunnyvale. ICE finalized its contract with Vigilant Solutions in &lt;a href=&quot;https://www.theverge.com/2018/1/26/16932350/ice-immigration-customs-license-plate-recognition-contract-vigilant-solutions&quot;&gt;January of this year&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;EFF investigative researcher Dave Maass discovered Irvine Company’s data-sharing activities in a &lt;a href=&quot;https://www.shopirvinecompany.com/legal/alpr-policy/&quot;&gt;page detailing its ALPR policy&lt;/a&gt;, a disclosure required by California law. Ironically, while Irvine Company’s ALPR usage and privacy policy does describe its own practice of deleting the license data it collects once transmitted, it admits that it does in fact transmit all of it straight to Vigilant Solutions, which has no such qualms.&lt;/p&gt;
&lt;p&gt;As Vigilant describes, the key offering in its “advanced suite” of license reading tech is unfettered access to a massive trove of license plate data:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;A hallmark of Vigilant’s solution, the ability for agencies to share real-time data nationwide amongst over 1,000 agencies and tap into our exclusive commercial LPR database of over 5 billion vehicle detections, sets our platform apart.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Irvine Company is only one example of this kind of data sharing, but it illustrates the ubiquity of the kind of privately owned modern surveillance technology at the fingertips of anyone willing to pay for it. While we’re likely to see more &lt;a href=&quot;https://acluva.org/en/press-releases/virginia-supreme-court-rules-random-surveillance-police-not-exempt-virginias&quot;&gt;state-level legal challenges&lt;/a&gt; to license plate tracking technology, for now the powerful pairing of license plate numbers and location data is mostly fair game for anyone who wants to make money off collecting and aggregating it.&lt;/p&gt;
</description>
<pubDate>Tue, 10 Jul 2018 22:56:42 +0000</pubDate>
<dc:creator>srameshc</dc:creator>
<og:title>California malls are sharing license plate tracking data with ICE</og:title>
<og:description>A chain of California shopping centers is sharing its license plate reader data with a well-known U.S. Immigration and Customs Enforcement (ICE) contractor, giving that agency the ability to track license plate numbers it captures in near real-time. A report from the Electronic Frontier Foundation …</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2016/04/surveillance.png?w=711</og:image>
<og:url>http://social.techcrunch.com/2018/07/10/alpr-license-plate-recognition-ice-irvine-company/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/07/10/alpr-license-plate-recognition-ice-irvine-company/</dc:identifier>
</item>
<item>
<title>Former Apple Employee Charged with Theft of Autonomous Car Project Trade Secrets</title>
<link>https://www.macrumors.com/2018/07/10/apple-employee-steals-trade-secrets/</link>
<guid isPermaLink="true" >https://www.macrumors.com/2018/07/10/apple-employee-steals-trade-secrets/</guid>
<description>The United States Federal Bureau of Investigation this week charged former Apple employee Xiaolang Zhang with theft of trade secrets, according to documents filed with the Northern District Court of California.&lt;p&gt;Zhang was hired at Apple in December of 2015 to work on Project Titan, developing software and hardware for use in autonomous vehicles. Zhang specifically worked on Apple's Compute Team, designing and testing circuit boards to analyze sensor data.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.macrumors.com/article-new/2018/07/appleintellectualpropertydocument-800x435.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;435&quot; class=&quot;aligncenter size-large wp-image-645593&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;em&gt;The intellectual property disclosure on one of the documents Zhang stole&lt;/em&gt;&lt;/center&gt;&lt;br/&gt;He was provided with &quot;broad access to secure and confidential internal databases&quot; due to his position, which contained trade secrets and intellectual property for the autonomous driving project that he ultimately ended up stealing.&lt;p&gt;In April 2018, Zhang took family leave from Apple following the birth of his child, and during that time, he visited China. Shortly after, he told his supervisor at Apple he was leaving the company and moving to China to work for XMotors, a Chinese startup that also focuses on autonomous vehicle technology.&lt;/p&gt;&lt;p&gt;Zhang's supervisor felt that he had &quot;been evasive&quot; during the meeting, which led Apple's New Product Security Team to begin an investigation, looking into Zhang's historical network activity and analyzing his Apple devices, which were seized when he resigned.&lt;/p&gt;&lt;p&gt;Apple found that just prior to Zhang's departure, his network activity had &quot;increased exponentially&quot; compared to the prior two years he had worked at Apple. He accessed content that included prototypes and prototype requirements, which the court documents specify as power requirements, low voltage requirements, battery system, and drivetrain suspension mounts.
&lt;/p&gt;&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;The majority of his activity consisted of both bulk searches and targeted downloading copious pages of information from various confidential database applications. The information contained within the downloading contained trade secret intellectual property, based on the level of Zhang's access within Apple's autonomous vehicle team.&lt;/p&gt;
&lt;/blockquote&gt;
A review of recorded footage at Apple indicated Zhang had visited the campus on the evening of Saturday, April 28, entering both Apple's autonomous vehicle software and hardware labs, which coincided with data download times, and he left with a box of hardware.&lt;p&gt;In a second interview with Apple's security team, Zhang admitted to taking both online data and hardware (a Linux server and circuit boards) from Apple during his paternity leave. He also admitted to AirDropping sensitive content from his own device to his wife's laptop.&lt;/p&gt;&lt;p&gt;All of Apple's evidence was relayed to the FBI after the company's Digital Forensic Investigations team discovered that at least 60 percent of the data Zhang had downloaded and transferred to his wife's computer was &quot;highly problematic.&quot; The FBI, in the court filing, describes the information as &quot;largely technical in nature, including engineering schematics, technical reference manuals, and technical reports.&quot;&lt;/p&gt;&lt;p&gt;Of interest, the filing also gives a glimpse into Apple's security protocols. To access sensitive projects like Titan, an employee must be logged into Apple's virtual private network and must be granted &quot;disclosure,&quot; a status that can only be granted when an employee is sponsored by another employee who already has access to the project, with an administrator reviewing all requests. Approximately 5,000 Apple employees have access to data on Apple's autonomous driving efforts, with the databases Zhang accessed further restricted to approximately 2,700 &quot;core employees.&quot;&lt;/p&gt;&lt;p&gt;When hired, Zhang signed an Intellectual Property Agreement and attended a mandatory in-person secrecy training session, which he violated. Zhang was interviewed by the FBI in late June, where he admitted to stealing the information, and he was later arrested attempting to leave to China on July 7.&lt;/p&gt;&lt;p&gt;For stealing Apple's trade secrets, Zhang is facing up to 10 years in prison and a $250,000 fine.&lt;/p&gt;&lt;p&gt;It's no surprise that Apple cracked down on Zhang. Shortly before Zhang's theft was discovered, &lt;a href=&quot;https://www.macrumors.com/2018/04/13/apple-warns-employees-about-leaking-to-media/&quot;&gt;Apple sent out a lengthy cautionary memo&lt;/a&gt; to employees warning them against leaking data to the media. In the letter, Apple said that in 2017, it caught 29 leakers, with 12 of those individuals being arrested and charged.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Apple provided the following statement on the case to &lt;em&gt;&lt;a href=&quot;https://techcrunch.com/2018/07/10/ex-apple-employee-charged-with-stealing-self-driving-car-secrets/&quot;&gt;TechCrunch&lt;/a&gt;&lt;/em&gt;: &quot;Apple takes confidentiality and the protection of our intellectual property very seriously. We're working with authorities on this matter and will do everything possible to make sure this individual and any other individuals involved are held accountable for their actions.&quot;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Update 2:&lt;/strong&gt; XMotors said there is no indication that Zhang ever communicated any sensitive information from Apple to XMotors, according to &lt;em&gt;&lt;a href=&quot;https://www.reuters.com/article/us-apple-theft/xmotors-says-employee-did-not-pass-along-sensitive-apple-info-idUSKBN1K11I5&quot;&gt;Reuters&lt;/a&gt;&lt;/em&gt;. XMotors also said the firm had terminated Zhang and is supporting local authorities.&lt;/p&gt;&lt;center readability=&quot;0.63636363636364&quot;&gt;
&lt;p&gt;&lt;a title=&quot;View USA v. Xiaolang Zhang on Scribd&quot; href=&quot;https://www.scribd.com/document/383602916/USA-v-Xiaolang-Zhang#from_embed&quot;&gt;USA v. Xiaolang Zhang&lt;/a&gt; by &lt;a title=&quot;View MacRumors's profile on Scribd&quot; href=&quot;https://www.scribd.com/user/212523051/MacRumors#from_embed&quot;&gt;MacRumors&lt;/a&gt; on Scribd&lt;/p&gt;

&lt;/center&gt;
</description>
<pubDate>Tue, 10 Jul 2018 21:15:21 +0000</pubDate>
<dc:creator>uptown</dc:creator>
<og:title>Former Apple Employee Charged With Theft of Trade Secrets Related to Autonomous Car Project [Updated]</og:title>
<og:type>article</og:type>
<og:url>https://www.macrumors.com/2018/07/10/apple-employee-steals-trade-secrets/</og:url>
<og:image>https://cdn.macrumors.com/article-new/2018/07/appleintellectualpropertydocument-800x435.jpg?retina</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.macrumors.com/2018/07/10/apple-employee-steals-trade-secrets/</dc:identifier>
</item>
<item>
<title>Shutting Down the BGP Hijack Factory</title>
<link>https://dyn.com/blog/shutting-down-the-bgp-hijack-factory/</link>
<guid isPermaLink="true" >https://dyn.com/blog/shutting-down-the-bgp-hijack-factory/</guid>
<description>&lt;p&gt;It started with a &lt;a href=&quot;http://seclists.org/nanog/2018/Jun/363&quot;&gt;lengthy email&lt;/a&gt; to the NANOG mailing list on 25 June 2018: independent security researcher Ronald Guilmette detailed the suspicious routing activities of a company called &lt;a href=&quot;http://www.bitcanal.com/&quot;&gt;Bitcanal&lt;/a&gt;, whom he referred to as a “Hijack Factory.”  In his post, Ronald detailed some of the Portuguese company’s most recent BGP hijacks and asked the question: why Bitcanal’s transit providers continue to carry its BGP hijacked routes on to the global internet?&lt;/p&gt;
&lt;p&gt;This email kicked off a discussion that led to a concerted effort to kick this bad actor, who has hijacked with impunity for many years, off the internet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transit Providers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When presented with the most recent evidence of hijacks, transit providers &lt;a href=&quot;https://www.gtt.net/&quot;&gt;GTT&lt;/a&gt; and &lt;a href=&quot;http://www.cogentco.com/en/&quot;&gt;Cogent&lt;/a&gt;, to their credit, immediately disconnected Bitcanal as a customer.  With the loss of international transit, Bitcanal briefly reconnected via Belgian telecom &lt;a href=&quot;https://bics.com/&quot;&gt;BICS&lt;/a&gt; before being disconnected once they were informed of their new customer’s reputation.&lt;/p&gt;
&lt;p&gt;The following graphic illustrates a BGP hijack by Bitcanal via Cogent before Cogent disconnected them. Bitcanal’s announcement of 101.124.128.0/18 (Beijing Jingdong 360 Degree E-commerce) was a more-specific hijack of 101.124.0.0/16, normally announced by AS131486 (Beijing Jingdong 360 Degree E-commerce).  The graphic on the right shows another prefix being initially transited by GTT (AS3257) and then briefly via BICS before those companies terminated service to Bitcanal.&lt;/p&gt;
&lt;center&gt;&lt;img class=&quot;alignnone size-full wp-image-60847&quot; src=&quot;https://dyn.com/wp-content/uploads/2018/07/cogent_gtt_bics.png&quot; alt=&quot;&quot; width=&quot;1360&quot; height=&quot;583&quot;/&gt;&lt;/center&gt;
 
&lt;p&gt;Following the loss of these transit providers, these three prefixes (below), previously announced by Bitcanal, moved to a new home at &lt;a href=&quot;https://meerfarbig.io/&quot;&gt;Meerfarbig GmbH&lt;/a&gt;.  However, when Meerfarbig learned where their new customer had come from, Meerfarbig quickly disconnected them as well.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br/&gt;185.251.248.0/22 Anna Dragun-Damian PL&lt;br/&gt;185.251.44.0/22 Anna Dragun-Damian PL&lt;br/&gt;185.254.16.0/22 Xantho Ltd LT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The loss of transit also disconnected Routed Solutions (AS39536), ostensibly a customer of Bitcanal, although Bitcanal is listed as its admin contact on its WHOIS &lt;a href=&quot;https://bgp.he.net/AS39536#_whois&quot;&gt;registration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The leftmost graphic below shows a prefix moving briefly to Meerfarbig after Bitcanal was cut off by major transit providers.  The rightmost graphic shows a prefix originated by AS39536 being disconnected when Bitcanal lost its transit, but returning to circulation via M247 (AS9009).&lt;/p&gt;
&lt;center&gt;&lt;img class=&quot;alignnone size-full wp-image-60842&quot; src=&quot;https://dyn.com/wp-content/uploads/2018/07/Meerfarbig_M247.png&quot; alt=&quot;&quot; width=&quot;1460&quot; height=&quot;625&quot;/&gt;&lt;/center&gt;
&lt;strong&gt;Internet Exchange Points (IXPs)&lt;/strong&gt;
&lt;p&gt;But Bitcanal didn’t only announce hijacked routes via transit providers, it has also extensively used Internet exchange points (IXPs) as a way to send hijacked routes directly to unsuspecting networks.  While the German IXP &lt;a href=&quot;http://seclists.org/nanog/2018/Jun/370&quot;&gt;DE-CIX reportedly dropped Bitcanal&lt;/a&gt; last year for bad behavior, it took behind-the-scenes coordination in recent days to get Bitcanal booted from LINX and AMSIX, the major IXPs in London and Amsterdam, respectively.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Latest disconnections&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the past 24 hours, there have been two additional significant disconnections which greatly limit Bitcanal’s ability to announce its hijacks. At 16:46 UTC on 9 July 2018, Hurricane Electric (AS6939) de-peered Bitcanal (AS197426) (graphic on left). Earlier today at 11:40 UTC Portuguese transit provider IPTelecom terminated service to Bitcanal (graphic on right). While Bitcanal appears to remain connected (for the time being) at ESPANIX, with the loss of IPTelecom transit, Bitcanal is effectively cutoff from the global internet.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-60858&quot; src=&quot;https://dyn.com/wp-content/uploads/2018/07/recent_developments.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Bitcanal’s IPv6 route (2a00:4c80::/29) was also withdrawn at 16:04 UTC today. According to Spamhaus, it was also the source of large amounts of spam email and is listed on their &lt;a href=&quot;https://www.spamhaus.org/drop/dropv6.txt&quot;&gt;IPv6 Drop list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Long Running Reputation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Longtime followers of this blog may recognize the name Bitcanal (retail name Ebony Horizon) as &lt;a href=&quot;https://dyn.com/blog/latest-isps-to-hijack/&quot;&gt;we have documented&lt;/a&gt; their numerous flagrant BGP hijacks in the past including the hijack of IP address space belonging to the State Attorney General of Texas (206.218.64.0/22) back in 2014.  They warranted their own section (“Case 2”) in my 2015 blog post, &lt;a href=&quot;https://dyn.com/blog/vast-world-of-fraudulent-routing/&quot;&gt;The Vast World of Fraudulent Routing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We’re not the only ones to have noticed something suspicious with Bitcanal: Spamhaus lists all of their ASNs (AS197426, AS3266, AS200775, and AS42229) on their &lt;a href=&quot;https://www.spamhaus.org/drop/asndrop.txt&quot;&gt;ASN Droplist&lt;/a&gt; due to a history of originating massive amounts of spam email.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lessons for IXPs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are lessons to be learned from the past couple of weeks, specifically lessons for IXPs.&lt;/p&gt;
&lt;p&gt;Bad actors like Bitcanal take advantage of IXPs to form myriad peering relationships for the purpose of injecting fraudulent routes.  These routes can be used to send spam and other malicious traffic.  These bad actors presume people don’t generally monitor the routes they receive from peers and by hijacking the IP space of others, they attempt to evade IP blacklists.&lt;/p&gt;
&lt;p&gt;Based on the discussions with IXPs regarding this particular case, the following points are worthy of consideration.&lt;/p&gt;
&lt;p&gt;1) Even if abuse didn’t take place across &lt;strong&gt;your&lt;/strong&gt; exchange, you can still consider disconnection to mitigate future risk.  If it had been widely known that DECIX kicked out Bitcanal last year, might other IXes have disconnected them?  Or at least started scrutinizing their activity at the exchange?&lt;/p&gt;
&lt;p&gt;2) IXPs are not just a neutral transport bus anymore. They facilitate a unique service that malicious actors can leverage.  Like it or not, this makes IXPs responsible too.&lt;/p&gt;
&lt;p&gt;3) Ensure that you have monitoring and analysis capabilities in place.  Multiple IXPs contacted did not have MRT files of their route servers, or PCAP collection to verify any claim.  If an IXP has a policy of requiring evidence of bad behavior, it must also be collecting that evidence and, most importantly, a process to review that evidence when a reasonable inquiry is made.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The removal of this bad actor was accomplished with the work of a number of people in the internet community. I would especially like to thank &lt;a href=&quot;https://twitter.com/JobSnijders&quot;&gt;Job Snijders of NTT&lt;/a&gt; for his assistance on this blog post.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 10 Jul 2018 19:12:57 +0000</pubDate>
<dc:creator>pedro84</dc:creator>
<og:title>Shutting down the BGP Hijack Factory | Dyn Blog</og:title>
<og:url>https://dyn.com/blog/shutting-down-the-bgp-hijack-factory/</og:url>
<og:description>It started with a lengthy email to the NANOG mailing list on 25 June 2018: independent security researcher Ronald Guilmette detailed the ...</og:description>
<og:image>https://dyn.com/wp-content/uploads/2017/10/GettyImages-538811846_high.jpg</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://dyn.com/blog/shutting-down-the-bgp-hijack-factory/</dc:identifier>
</item>
<item>
<title>Trial wipes out over 80% of Australian disease-spreading mosquito</title>
<link>https://www.csiro.au/en/News/News-releases/2018/Trial-wipes-out-more-than-80-per-cent-of-disease-spreading-mozzie?featured=F29EDEB1728C4A92B579C7A5DC28BAD5</link>
<guid isPermaLink="true" >https://www.csiro.au/en/News/News-releases/2018/Trial-wipes-out-more-than-80-per-cent-of-disease-spreading-mozzie?featured=F29EDEB1728C4A92B579C7A5DC28BAD5</guid>
<description>&lt;p&gt;One of the world’s most widespread disease-spreading mosquitoes, the Aedes aegypti, has been suppressed by more than 80 per cent in a landmark Australian trial.&lt;/p&gt;&lt;div readability=&quot;101&quot;&gt;
&lt;p&gt;In an international partnership between CSIRO, Verily and James Cook University, scientists used specialised technology to release millions of sterilised male &lt;em&gt;&lt;span&gt;Aedes aegypti&lt;/span&gt;&lt;/em&gt; mosquitoes across the Cassowary Coast in Queensland in a bid to combat the global pest.&lt;/p&gt;
&lt;p&gt;CSIRO Director of Health and Biosecurity Dr Rob Grenfell said the results were a major win in the fight against diseases-spreading mosquitoes.&lt;/p&gt;
&lt;p&gt;&quot;The invasive &lt;em&gt;&lt;span&gt;Aedes aegypti&lt;/span&gt;&lt;/em&gt; mosquito is one of the world’s most dangerous pests, capable of spreading devastating diseases like dengue, Zika and chikungunya and responsible for infecting millions of people with disease around the world each year,&quot; Dr Grenfell said.&lt;/p&gt;
&lt;p&gt;&quot;Increased urbanisation and warming temperatures mean that more people are at risk, as these mosquitoes which were once relegated to areas near the equator forge past previous climatic boundaries.&lt;/p&gt;
&lt;p&gt;&quot;Although the majority of mosquitoes don’t spread diseases, the three mostly deadly types the &lt;em&gt;&lt;span&gt;Aedes, Anopheles&lt;/span&gt;&lt;/em&gt; and &lt;em&gt;&lt;span&gt;Culex&lt;/span&gt;&lt;/em&gt; are found almost all over the world and are responsible for around 17 per cent of infectious disease transmissions globally.&quot;&lt;/p&gt;
&lt;p&gt;From November 2017 to June this year, non-biting male &lt;em&gt;Aedes aegypti&lt;/em&gt; mosquitoes sterilised with the natural bacteria &lt;em&gt;&lt;span&gt;Wolbachia&lt;/span&gt;&lt;/em&gt; were released in trial zones along the Cassowary Coast in North Queensland.&lt;/p&gt;
&lt;p&gt;They mated with local female mosquitoes, resulting in eggs that did not hatch and a significant reduction of their population.&lt;/p&gt;
&lt;p&gt;&quot;Our heartfelt thanks goes out to the Innisfail community who literally opened their doors to our team, letting us install mosquito traps around their homes and businesses – we couldn’t have done this without your support,&quot; Dr Grenfell said.&lt;/p&gt;
&lt;p&gt;The process, known as the Sterile Insect Technique, has been successfully used since the 1950s but the challenge in making it work for mosquitoes like the &lt;em&gt;Aedes aegypti&lt;/em&gt; has been rearing enough mosquitoes, removing biting females, identifying the males and then releasing the huge numbers needed to suppress a population.&lt;/p&gt;
&lt;p&gt;To address this challenge, Verily, an affiliate of Alphabet Inc, developed a mosquito rearing and sex sorting and release technology as part of its global &lt;em&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;/em&gt; project.&lt;/p&gt;
&lt;p&gt;&quot;We're very pleased to see strong suppression of these dangerous biting female &lt;em&gt;&lt;span&gt;Aedes aegypti&lt;/span&gt;&lt;/em&gt; mosquitoes,&quot; Verily’s Nigel Snoad said.&lt;/p&gt;
&lt;p&gt;&quot;We are particularly thankful to the people of Innisfail for their strong support, which has been incredible.&lt;/p&gt;
&lt;p&gt;&quot;We came to Innisfail with CSIRO and JCU to see how this approach worked in a tropical environment where these mosquitoes thrive, and to learn what it was like to operate our technology with research collaborators as we work together to find new ways to tackle these dangerous mosquitoes.&quot;&lt;/p&gt;
&lt;p&gt;Scientists compared the number of &lt;em&gt;&lt;span&gt;Aedes aegypti&lt;/span&gt;&lt;/em&gt; mosquitoes trapped in release sites and control zones to monitor and track populations.&lt;/p&gt;
&lt;p&gt;The millions of mosquitoes needed for the trial were reared at James Cook University in Cairns.&lt;/p&gt;
&lt;p&gt;To produce the three million male mosquitoes needed for the trial, researchers at James Cook University (JCU) in Cairns set out to raise almost 20 million &lt;em&gt;&lt;span&gt;Aedes aegypti&lt;/span&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&quot;We allowed for the possibility of deaths during the process, as well as the need to sift out the female half of the population,&quot; Dr Kyran Staunton from James Cook University said.&lt;/p&gt;
&lt;p&gt;&quot;Verily's technology enabled us to do the sex sorting faster and with much higher accuracy.&lt;/p&gt;
&lt;p&gt;&quot;We learnt a lot from collaborating on this first tropical trial and we’re excited to see how this approach might be applied in other regions where &lt;em&gt;&lt;span&gt;Aedes aegypti&lt;/span&gt;&lt;/em&gt; poses a threat to life and health.&quot;&lt;/p&gt;
&lt;p&gt;&quot;The health of our nation is paramount as we help Australia achieve its vision to become one of the healthiest nations on earth,&quot; CSIRO Chief Executive Dr Larry Marshall said.&lt;/p&gt;
&lt;p&gt;&quot;By enabling industry partners like Verily to leverage the world-leading health capability we have built in CSIRO we can deliver this moonshot and tackle some of the world’s most wicked challenges with science.&quot;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Tue, 10 Jul 2018 17:48:40 +0000</pubDate>
<dc:creator>sjbase</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.csiro.au/en/News/News-releases/2018/Trial-wipes-out-more-than-80-per-cent-of-disease-spreading-mozzie?featured=F29EDEB1728C4A92B579C7A5DC28BAD5</dc:identifier>
</item>
</channel>
</rss>