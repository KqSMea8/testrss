<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>G Suite Horror Story</title>
<link>https://lawgimenez.me/2018/08/05/g-suite-horror-story/</link>
<guid isPermaLink="true" >https://lawgimenez.me/2018/08/05/g-suite-horror-story/</guid>
<description>&lt;p&gt;Yesterday my life long Gmail account has been deleted by Google because I integrated it with G Suite by cancelling the subscription.&lt;/p&gt;
&lt;p&gt;G Suite for business was a mean to upgrade your personal email so that all your inbox will be unified. But the more email gets into the inbox, the more cluttered it seems. It was hard to manage.&lt;/p&gt;
&lt;p&gt;Then, I searched for any way to break apart my personal Gmail from my G Suite account. It was complicated. This is not my first time using G Suite, previous account I just cancelled and move on with my personal Gmail. So I cancelled my subscription. And after that I can’t access my personal Gmail. Things starting to turn for the worse.&lt;/p&gt;
&lt;p&gt;I searched for solutions, it turned out I had “unlock” some features that I upgraded my personal account into a business account and there was no coming back. I had setup that G Suite months ago and I can’t remember any “unlock” features prompting me.&lt;/p&gt;
&lt;p&gt;As I kept digging Google’s Help Forums, it turns out I am not the only one in this predicament. Below are examples. Take notice on Google’s Customer Support's passive solutions.&lt;br/&gt;&lt;a href=&quot;https://productforums.google.com/forum/#!topic/gmail/8VDUBd17Ops&quot;&gt;Canceled my G suite account and my @gmail.com is no longer working&lt;/a&gt;&lt;br/&gt;Another one, &lt;a href=&quot;https://productforums.google.com/forum/#!msg/apps/DHtCGqaQvt8/ZaunYDHnAQAJ&quot;&gt;I cancelled g-suite trial but now can't access my email&lt;/a&gt;. In that thread, Google's Customer Support replied with&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;If you cancel and delete Gsuite this will have no effects on your personal Gmail account there is not no way to restore a deleted the Gsuite account&lt;br/&gt;So you just need sign into your personal Gmail account.to access your mail and contacts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whew! That was reassuring. But when you login back to your Gmail account, me and this user has the same problem. It will display a server error&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Server error&lt;br/&gt;Sorry, you've reached a login page for a domain that isn't using G Suite. Please check the web address and try again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Shit. My Gmail account is using G Suite. I opened a ticket to Google's Help Forum. &lt;a href=&quot;https://productforums.google.com/forum/#!topic/apps/RIHSJ4LIXwE;context-place=forum/apps&quot;&gt;Cancel GSuite subscription and now cannot login&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, the thing is I setup a &lt;a href=&quot;https://support.google.com/work/mail/answer/6233342?hl=en&amp;amp;vid=0-853072278495-1533429369141&quot;&gt;business email powered by G Suite&lt;/a&gt; instead of another G Suite? Confusing. Their setup and landing page looks the same. Anyway, I looked into their &lt;a href=&quot;https://support.google.com/work/mail/answer/6268517&quot;&gt;Cancel your business email documentation&lt;/a&gt; and it mentioned&lt;/p&gt;
&lt;blockquote readability=&quot;7.9573170731707&quot;&gt;
&lt;p&gt;After you cancel, you can no longer send or receive mail from your business email address (for example, &lt;a href=&quot;mailto:you@yourcompany.com&quot;&gt;you@yourcompany.com&lt;/a&gt;); you return to using free, basic Gmail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You return using free, basic Gmail. But how come I can't access my personal Gmail account anymore? I've used that email for over 8 years, all my history is gone. All the Google Drive files, the Google Docs and Sheets of important data and documents.&lt;/p&gt;
&lt;p&gt;To anyone using Business G Suite just make sure that you've &quot;downgrade&quot; instead of cancelling your subscription. This is very sad on my part, a hard lesson to learn. I should have read carefully the details. To Google, I lost trust in your service.&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 02:37:46 +0000</pubDate>
<dc:creator>dirtylowprofile</dc:creator>
<og:type>article</og:type>
<og:title>G Suite</og:title>
<og:description>Yesterday my life long Gmail account has been deleted by Google because I integrated it with G Suite by cancelling the subscription.</og:description>
<og:url>http://lawgimenez.me/2018/08/05/g-suite-horror-story/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://lawgimenez.me/2018/08/05/g-suite-horror-story/</dc:identifier>
</item>
<item>
<title>Show HN: I made a tool that made me faster at Git</title>
<link>https://github.com/jesseduffield/lazygit</link>
<guid isPermaLink="true" >https://github.com/jesseduffield/lazygit</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;A simple terminal UI for git commands, written in Go with the &lt;a href=&quot;https://github.com/jroimartin/gocui&quot; title=&quot;gocui&quot;&gt;gocui&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;are YOU tired of typing every git command directly into the terminal, but you're too stubborn to use Sourcetree because you'll never forgive Atlassian for making Jira? This is the app for you!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VDXvbHZYeKY&quot; rel=&quot;nofollow&quot;&gt;Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/1a661dbf619818a2d33d66d389ebdbdb67bfd97b/68747470733a2f2f696d6167652e6962622e636f2f6d6d6558686f2f6f7074696d697365646769662e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1a661dbf619818a2d33d66d389ebdbdb67bfd97b/68747470733a2f2f696d6167652e6962622e636f2f6d6d6558686f2f6f7074696d697365646769662e676966&quot; alt=&quot;Gif&quot; data-canonical-src=&quot;https://image.ibb.co/mmeXho/optimisedgif.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;In a terminal call this command: &lt;code&gt;go get github.com/jesseduffield/lazygit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then just call &lt;code&gt;lazygit&lt;/code&gt; in your terminal inside a git repository&lt;/p&gt;
&lt;p&gt;If you want, you can also add an alias for this with &lt;code&gt;echo &quot;alias lg='lazygit'&quot; &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt; (or whichever rc file you're using)&lt;/p&gt;
&lt;h2&gt;Cool features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Adding files easily&lt;/li&gt;
&lt;li&gt;Resolving merge conflicts&lt;/li&gt;
&lt;li&gt;Easily check out recent branches&lt;/li&gt;
&lt;li&gt;Scroll through logs/diffs of branches/commits/stash&lt;/li&gt;
&lt;li&gt;Quick pushing/pulling&lt;/li&gt;
&lt;li&gt;Squash down and rename commits&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Resolving merge conflicts&lt;/h3&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/578430a17c372afb3d6de3ea5ecb9c606c22cfb9/68747470733a2f2f696d6167652e6962622e636f2f6979785554542f73686f727465726d657267696e672e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/578430a17c372afb3d6de3ea5ecb9c606c22cfb9/68747470733a2f2f696d6167652e6962622e636f2f6979785554542f73686f727465726d657267696e672e676966&quot; alt=&quot;Gif&quot; data-canonical-src=&quot;https://image.ibb.co/iyxUTT/shortermerging.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Viewing commit diffs&lt;/h3&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/ae337178fb180ee4cd21f44ab833aa3b8470c9b6/68747470733a2f2f696d6167652e6962622e636f2f67504430326f2f636170747572652e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ae337178fb180ee4cd21f44ab833aa3b8470c9b6/68747470733a2f2f696d6167652e6962622e636f2f67504430326f2f636170747572652e706e67&quot; alt=&quot;Viewing Commit Diffs&quot; data-canonical-src=&quot;https://image.ibb.co/gPD02o/capture.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Work in progress&lt;/h2&gt;
&lt;p&gt;This is still a work in progress so there's still bugs to iron out and as this is my first project in Go the code could no doubt use an increase in quality, but I'll be improving on it whenever I find the time. If you have any feedback feel free to raise an issue/submit a PR.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 05 Aug 2018 00:05:05 +0000</pubDate>
<dc:creator>jesseduffield</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/8456633?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>jesseduffield/lazygit</og:title>
<og:url>https://github.com/jesseduffield/lazygit</og:url>
<og:description>lazygit - simple terminal UI for git commands</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/jesseduffield/lazygit</dc:identifier>
</item>
<item>
<title>Sci-Hub Proves That Piracy Can Be Dangerously Useful</title>
<link>https://torrentfreak.com/sci-hub-proves-that-piracy-can-be-dangerously-useful-180804/</link>
<guid isPermaLink="true" >https://torrentfreak.com/sci-hub-proves-that-piracy-can-be-dangerously-useful-180804/</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://torrentfreak.com/images/scilogo.jpg&quot; alt=&quot;&quot; width=&quot;222&quot; height=&quot;222&quot; class=&quot;alignright size-full wp-image-118526&quot;/&gt;Sci-Hub has often been referred to as “The Pirate Bay of Science,” but that description really sells the site short.&lt;/p&gt;
&lt;p&gt;While both sites are helping the public to access copyrighted content without permission, Sci-Hub has also become a crucial tool that arguably helps the progress of science.&lt;/p&gt;
&lt;p&gt;The site allows researchers to bypass expensive paywalls so they can read articles written by their fellow colleagues. The information in these ‘pirated’ articles is then used to provide the foundation for future research.&lt;/p&gt;
&lt;p&gt;What the site does is illegal, according to the law, but Sci-Hub is praised by thousands of researchers and academics around the world. In particular, those who don’t have direct access to the expensive journals but aspire to excel in their academic field.&lt;/p&gt;
&lt;p&gt;While publishers such as Elsevier &lt;a href=&quot;https://torrentfreak.com/sci-hub-ordered-to-pay-15-million-in-piracy-damages-170623/&quot;&gt;convinced the courts that Sci-Hub is a force of evil&lt;/a&gt;, many scientists see it as an extremely useful tool. They don’t want research locked up behind paywalls, they want it to be read, to inspire.&lt;/p&gt;
&lt;center&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.com/mshunshin/status/1023586774352838656&quot;&gt;Pro tip&lt;/a&gt;&lt;/strong&gt;&lt;/center&gt;
&lt;center&gt;&lt;img src=&quot;https://torrentfreak.com/images/protip.png&quot; alt=&quot;&quot; width=&quot;540&quot; height=&quot;494&quot; class=&quot;alignnone size-full wp-image-159353&quot;/&gt;&lt;/center&gt;
&lt;p&gt;Under the current system these researchers are often put in a position where they have to give up their copyrights, so large publishers such as Elsevier can exploit them. The researchers don’t see a penny of this money. What they see is their hard work ending up behind a paywall, out of public view.&lt;/p&gt;
&lt;p&gt;It’s this system that prompted Sci-Hub founder Alexandra Elbakyan to start Sci-Hub. She believes that it’s wrong to use copyright as a tool to shield important research from the public and hopes to &lt;a href=&quot;https://torrentfreak.com/sci-hub-tears-down-academias-illegal-copyright-paywalls-150627/&quot;&gt;tear down the paywalls&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“When Sci-Hub became known, I thought that it will provide a good case against copyright law. When the law prevents science to develop, that law must be repealed,” Elbakyan &lt;a href=&quot;https://engineuring.wordpress.com/2018/07/07/why-sci-hub-is-illegal-and-what-you-can-do-about-it/amp/&quot;&gt;wrote&lt;/a&gt; in a recent blog post.&lt;/p&gt;
&lt;p&gt;However, this was easier said than done. With hundreds of millions of dollars on the line, the publishers fought back.&lt;/p&gt;
&lt;p&gt;“Instead, Sci-Hub was quickly banished as an ‘illegal’ solution and projects like Unpaywall emerged and started promoting themselves as a ‘legal’ alternatives to Sci-Hub.”&lt;/p&gt;
&lt;p&gt;Unpaywall is a useful search tool that helps researchers to find articles that are already freely accessible. However, this is not a Sci-Hub alternative, according to Elbakyan, as it does nothing to free the locked up research&lt;/p&gt;
&lt;p&gt;Real change can only come when copyright law changes, she argues.&lt;/p&gt;
&lt;p&gt;On closer inspection that may not be as far-fetched as it sounds. According to the US Constitution, copyright is meant to aid the &lt;a href=&quot;https://en.wikipedia.org/wiki/Copyright_Clause&quot;&gt;progress of arts and science&lt;/a&gt;. Some would argue that Sci-Hub does exactly that. However, the US courts disagree.&lt;/p&gt;
&lt;p&gt;Elbakyan is not giving up though. She wants the law to change and encourages anyone to support this goal, by supporting their local Pirate party, for example.&lt;/p&gt;
&lt;p&gt;“Sci-Hub always intended to be legal, and advocated for the copyright law to be repealed or changed, so that it will not prohibit the development of science,” she notes.&lt;/p&gt;
&lt;p&gt;While Sci-Hub’s call might not sway lawmakers right away, the platform continues to make an impact. Every month, the site helps researchers to access millions of articles, which are used as the building blocks for new researchers.&lt;/p&gt;
&lt;p&gt;These researchers publicly share the latest working Sci-Hub domain names among each other and gladly pass on Sci-Hub links to those in need.&lt;/p&gt;
&lt;p&gt;In fact, Sci-Hub has become such a commonly used tool for some scientists that they include Sci-Hub URLs in the references sections of their published papers. Ironically, there are even links to Sci-Hub in papers published by Elsevier, showing how dangerously useful it is.&lt;/p&gt;
&lt;p&gt;To circle back to the Pirate Bay comparison, that would be the same as Netflix linking to copyright infringing torrents of other films in their movie descriptions…&lt;/p&gt;
&lt;center&gt;&lt;strong&gt;Sci-Hub references on Elsevier’s ScienceDirect…&lt;/strong&gt;&lt;/center&gt;
&lt;center&gt;&lt;img src=&quot;https://torrentfreak.com/images/scihubels.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;327&quot; class=&quot;alignnone size-full wp-image-159354&quot;/&gt;&lt;/center&gt;
</description>
<pubDate>Sat, 04 Aug 2018 20:37:13 +0000</pubDate>
<dc:creator>okket</dc:creator>
<og:type>article</og:type>
<og:title>Sci-Hub Proves That Piracy Can be Dangerously Useful - TorrentFreak</og:title>
<og:description>Despite two lost legal battles in the US, domain name seizures, and millions of dollars in damage claims, Sci-Hub continues to offer unauthorized access to academic papers. The site's founder says that she would rather operate legally, but copyright gets in the way. Sci-Hub is not the problem she argues, it's a solution, something many academics appear to agree with.</og:description>
<og:url>https://torrentfreak.com/sci-hub-proves-that-piracy-can-be-dangerously-useful-180804/</og:url>
<og:image>https://torrentfreak.com/images/research-feat.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://torrentfreak.com/sci-hub-proves-that-piracy-can-be-dangerously-useful-180804/</dc:identifier>
</item>
<item>
<title>Make a “Literary Clock” from a Jailbroken Kindle</title>
<link>https://www.instructables.com/id/Literary-Clock-Made-From-E-reader/</link>
<guid isPermaLink="true" >https://www.instructables.com/id/Literary-Clock-Made-From-E-reader/</guid>
<description>&lt;p&gt;There are 1,440 minutes in a day. Compiling a list with quotes for each and every one of them from different literary works is a massive undertaking. Big relief: others already did that for us.&lt;/p&gt;
&lt;p&gt;In 2011, newspaper The Guardian asked its readers to submit quotes from books which mention times. They wanted to build an installation for a literary festival. So they have two versions of a list on their website (&lt;a href=&quot;https://www.theguardian.com/books/table/2011/apr/21/literary-clock?CMP=twt_gu&quot; rel=&quot;nofollow&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://www.guardian.co.uk/books/booksblog/2011/apr/15/christian-marclay-the-clock-literature&quot; rel=&quot;nofollow&quot;&gt;2&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I combined the two lists, cleaned them up, added a few times I found myself, and turned them into one CSV file.&lt;/p&gt;
&lt;p&gt;Unfortunately the list does not cover all minutes of the day. I worked around this by using some quotes more than once, for instance if it can be used both in the AM and PM. More vague time indications can be used around a certain time, so this quote from Catcher in the Rye is used at 9.58AM: &quot;I didn't sleep too long, because I think it was only around ten o'clock when I woke up ... &quot;&lt;/p&gt;
&lt;p&gt;Even with this pleasant list, two things took me an unreasonable amount of time. I needed to turn every single quotation from the list into an image. I wanted to make them fit nicely to the screen, so the font would be as large as possible for each quotation.&lt;/p&gt;
&lt;p&gt;While scaling a text box to a certain height and width is easy to do manually in most photo editing software, it would have been an immense amount of work to create them one by one. Creating a script to do it for me however proved to be quite the task as well. In PHP (I used that programming language because it has nice functions to deal with text) I wrote a recursive function to find the best fit for each quotation, long or short. For each line, the script creates two PNG images, one with and one without metadata.&lt;/p&gt;
&lt;p&gt;It uses the &lt;a href=&quot;http://libertine-fonts.org/show-me/&quot; rel=&quot;nofollow&quot;&gt;Libertine font&lt;/a&gt;, which I like because of its stylish look, because it is very complete (numbers, punctuation, diacritics) and because it's open source.&lt;/p&gt;
&lt;p&gt;The other thing that took me a long time is identifying all time mentions in the quotations, because I wanted to write them in bold text. That makes the clock easier to use, especially when a quote is quite long. The problem is that in books, an impressive variation of time descriptions is used. It can be anything from '6.00 p.m.' or '18:11:00' to '0600h', 'around six o'clock', just 'at six', or 'twenty-eight minutes past eleven'. I made a script to try and find most of these variations, did the ones it couldn't find myself, and added them to the csv file.&lt;/p&gt;
&lt;p&gt;If you want to make your own Kindle clock, you may use my scripts (find them attached below), but you can also just download all the resulting images.&lt;/p&gt;
</description>
<pubDate>Sat, 04 Aug 2018 20:29:17 +0000</pubDate>
<dc:creator>codesections</dc:creator>
<og:type>article</og:type>
<og:url>http://www.instructables.com/id/Literary-Clock-Made-From-E-reader/</og:url>
<og:image>https://cdn.instructables.com/ORIG/FP5/6IAA/JK4ULNCJ/FP56IAAJK4ULNCJ.jpg?width=2100</og:image>
<og:title>Literary Clock Made From E-reader</og:title>
<og:description>My girlfriend is a *very* avid reader. As a teacher and scholar of English literature, she reads eighty books per year on average. On her wishlist was a clock for...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.instructables.com/id/Literary-Clock-Made-From-E-reader/</dc:identifier>
</item>
<item>
<title>Secure Secure Shell (2015)</title>
<link>https://stribika.github.io/2015/01/04/secure-secure-shell.html</link>
<guid isPermaLink="true" >https://stribika.github.io/2015/01/04/secure-secure-shell.html</guid>
<description>&lt;p&gt;You may have heard that the NSA can decrypt SSH at least some of the time. If you have not, then read the &lt;a href=&quot;https://www.spiegel.de/international/germany/inside-the-nsa-s-war-on-internet-security-a-1010361.html&quot;&gt;latest batch of Snowden documents&lt;/a&gt; now. All of it. This post will still be here when you finish. My goal with this post here is to make NSA analysts sad.&lt;/p&gt;&lt;p&gt;TL;DR: Scan this post for fixed width fonts, these will be the config file snippets and commands you have to use.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: You will need a recent OpenSSH version. It should work with 6.5 but I have only tested 6.7 and connections to Github. Here is a good &lt;a href=&quot;http://ssh-comparison.quendi.de/comparison.html&quot;&gt;compatibility matrix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reading the documents, I have the feeling that the NSA can 1) decrypt weak crypto and 2) steal keys. Let’s focus on the crypto first. SSH supports different key exchange algorithms, ciphers and message authentication codes. The server and the client choose a set of algorithms supported by both, then proceed with the key exchange. Some of the supported algorithms are not so great and should be disabled completely. This hurts interoperability but everyone uses OpenSSH anyway. Fortunately, downgrade attacks are not possible because the supported algorithm lists are included in the key derivation. If a man in the middle were to change the lists, then the server and the client would calculate different keys.&lt;/p&gt;
&lt;h2 id=&quot;key-exchange&quot;&gt;Key exchange&lt;/h2&gt;
&lt;p&gt;There are basically two ways to do key exchange: &lt;a href=&quot;https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange&quot;&gt;Diffie-Hellman&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman&quot;&gt;Elliptic Curve Diffie-Hellman&lt;/a&gt;. Both provide &lt;a href=&quot;https://en.wikipedia.org/wiki/Forward_secrecy&quot;&gt;forward secrecy&lt;/a&gt; which the NSA hates because they can’t use passive collection and key recovery later. The server and the client will end up with a shared secret number at the end without a passive eavesdropper learning anything about this number. After we have a shared secret we have to derive a cryptographic key from this using a key derivation function. In case of SSH, this is a hash function. &lt;a href=&quot;https://www.mitls.org/downloads/transcript-collisions.pdf&quot;&gt;Collision attacks&lt;/a&gt; on this hash function have been proven to allow downgrade attacks.&lt;/p&gt;
&lt;p&gt;DH works with a multiplicative group of integers modulo a prime. Its security is based on the hardness of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_logarithm_problem&quot;&gt;discrete logarithm problem&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;diffie-hellman&quot;&gt;Alice           Bob
---------------------------
Sa = random
Pa = g^Sa   --&amp;gt; Pa
                Sb = random
Pb          &amp;lt;-- Pb = g^Sb
s = Pb^Sa       s = Pa^Sb
k = KDF(s)      k = KDF(s)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ECDH works with elliptic curves over finite fields. Its security is based on the hardness of the elliptic curve discrete logarithm problem.&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;elliptic-curve-diffie-hellman&quot;&gt;Alice           Bob
---------------------------
Sa = random
Pa = Sa * G --&amp;gt; Pa
                Sb = random
Pb          &amp;lt;-- Pb = Sb * G
s = Sa * Pb     s = Sb * Pa
k = KDF(s)      k = KDF(s)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;OpenSSH supports 11 key exchange protocols:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://git.libssh.org/projects/libssh.git/tree/doc/curve25519-sha256@libssh.org.txt&quot;&gt;curve25519-sha256&lt;/a&gt;: ECDH over &lt;a href=&quot;https://cr.yp.to/ecdh.html&quot;&gt;Curve25519&lt;/a&gt; with SHA2&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc4253.txt&quot;&gt;diffie-hellman-group1-sha1&lt;/a&gt;: 1024 bit DH with SHA1&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc4253.txt&quot;&gt;diffie-hellman-group14-sha1&lt;/a&gt;: 2048 bit DH with SHA1&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-curdle-ssh-modp-dh-sha2-09&quot;&gt;diffie-hellman-group14-sha256&lt;/a&gt;: 2048 bit DH with SHA2&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-curdle-ssh-modp-dh-sha2-09&quot;&gt;diffie-hellman-group16-sha512&lt;/a&gt;: 4096 bit DH with SHA2&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-curdle-ssh-modp-dh-sha2-09&quot;&gt;diffie-hellman-group18-sha512&lt;/a&gt;: 8192 bit DH with SHA2&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc4419.txt&quot;&gt;diffie-hellman-group-exchange-sha1&lt;/a&gt;: Custom DH with SHA1&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc4419.txt&quot;&gt;diffie-hellman-group-exchange-sha256&lt;/a&gt;: Custom DH with SHA2&lt;/li&gt;
&lt;li&gt;ecdh-sha2-nistp256: ECDH over NIST P-256 with SHA2&lt;/li&gt;
&lt;li&gt;ecdh-sha2-nistp384: ECDH over NIST P-384 with SHA2&lt;/li&gt;
&lt;li&gt;ecdh-sha2-nistp521: ECDH over NIST P-521 with SHA2&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We have to look at 3 things here:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;ECDH curve choice&lt;/em&gt;: This eliminates 9-11 because &lt;a href=&quot;https://blog.cr.yp.to/20140323-ecdsa.html&quot;&gt;NIST curves suck&lt;/a&gt;. They leak secrets through timing side channels and off-curve inputs. Also, &lt;a href=&quot;https://projectbullrun.org/dual-ec/vulnerability.html&quot;&gt;NIST is considered harmful&lt;/a&gt; and cannot be trusted.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bit size of the DH modulus&lt;/em&gt;: This eliminates 2 because the NSA has supercomputers and possibly unknown attacks. 1024 bits simply don’t offer sufficient security margin.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Security of the hash function&lt;/em&gt;: This eliminates 2, 3, and 7 because SHA1 is broken. We don’t have to wait for a second preimage attack that takes 10 minutes on a cellphone to disable it right now.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We are left with 1 and 8, as well as 4-6 which were added in &lt;a href=&quot;https://www.openssh.com/releasenotes.html#7.3&quot;&gt;OpenSSH 7.3&lt;/a&gt;. 1 is better and it’s perfectly OK to only support that but for interoperability (with Eclipse, WinSCP), 8 can be included.&lt;/p&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;server-kex&quot;&gt;KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;client-kex&quot;&gt;# Github needs diffie-hellman-group-exchange-sha1 some of the time but not always.
#Host github.com
#    KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1
    
Host *
    KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you chose to enable 8, open &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/moduli&lt;/code&gt; if exists, and delete lines where the 5th column is less than 2000.&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;server-moduli-filter&quot;&gt;awk '$5 &amp;gt; 2000' /etc/ssh/moduli &amp;gt; &quot;${HOME}/moduli&quot;
wc -l &quot;${HOME}/moduli&quot; # make sure there is something left
mv &quot;${HOME}/moduli&quot; /etc/ssh/moduli&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If it does not exist, create it:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;server-moduli&quot;&gt;ssh-keygen -G /etc/ssh/moduli.all -b 4096
ssh-keygen -T /etc/ssh/moduli.safe -f /etc/ssh/moduli.all
mv /etc/ssh/moduli.safe /etc/ssh/moduli
rm /etc/ssh/moduli.all&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will take a while so continue while it’s running.&lt;/p&gt;
&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;The key exchange ensures that the server and the client shares a secret no one else knows. We also have to make sure that they share this secret with each other and not an NSA analyst.&lt;/p&gt;
&lt;h3 id=&quot;server-authentication&quot;&gt;Server authentication&lt;/h3&gt;
&lt;p&gt;The server proves its identity to the client by signing the key resulting from the key exchange. There are 4 public key algorithms for authentication:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;DSA with SHA1&lt;/li&gt;
&lt;li&gt;ECDSA with SHA256, SHA384 or SHA512 depending on key size&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ed25519.cr.yp.to/&quot;&gt;Ed25519&lt;/a&gt; with SHA512&lt;/li&gt;
&lt;li&gt;RSA with SHA1&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;DSA keys must be exactly 1024 bits so let’s disable that. Number 2 here involves NIST suckage and should be disabled as well. Another important disadvantage of DSA and ECDSA is that it uses randomness for each signature. If the random numbers are not the best quality, then it is &lt;a href=&quot;https://security.stackexchange.com/a/46781&quot;&gt;possible to recover&lt;/a&gt; the &lt;a href=&quot;https://events.ccc.de/congress/2010/Fahrplan/attachments/1780%5F27c3%5Fconsole%5Fhacking%5F2010.pdf&quot;&gt;secret key&lt;/a&gt;. Fortunately, RSA using SHA1 is not a problem here because the value being signed is actually a SHA2 hash. The hash function SHA1(SHA2(x)) is just as secure as SHA2 (it has less bits of course but no better attacks).&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;server-auth&quot;&gt;Protocol 2
HostKey /etc/ssh/ssh_host_ed25519_key
HostKey /etc/ssh/ssh_host_rsa_key&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first time you connect to your server, you will be asked to accept the new fingerprint.&lt;/p&gt;
&lt;p&gt;This will also disable the horribly broken v1 protocol that you should not have enabled in the first place. We should remove the unused keys and only generate a large RSA key and an Ed25519 key. Your init scripts may recreate the unused keys. If you don’t want that, remove any &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt; commands from the init script.&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;server-keygen&quot;&gt;cd /etc/ssh
rm ssh_host_*key*
ssh-keygen -t ed25519 -f ssh_host_ed25519_key -N &quot;&quot; &amp;lt; /dev/null
ssh-keygen -t rsa -b 4096 -f ssh_host_rsa_key -N &quot;&quot; &amp;lt; /dev/null&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;client-authentication&quot;&gt;Client authentication&lt;/h3&gt;
&lt;p&gt;The client must prove its identity to the server as well. There are various methods to do that.&lt;/p&gt;
&lt;p&gt;The simplest is password authentication. This should be disabled immediately &lt;em&gt;after&lt;/em&gt; setting up a more secure method because it allows compromised servers to steal passwords. Password authentication is also more vulnerable to online bruteforce attacks.&lt;/p&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;server-auth-password&quot;&gt;PasswordAuthentication no
ChallengeResponseAuthentication no&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;client-auth-password&quot;&gt;Host *
    PasswordAuthentication no
    ChallengeResponseAuthentication no&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The most common and secure method is public key authentication, basically the same process as the server authentication.&lt;/p&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;server-auth-pubkey&quot;&gt;PubkeyAuthentication yes&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;client-auth-pubkey&quot;&gt;Host *
    PubkeyAuthentication yes
    HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,ssh-rsa&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Generate client keys using the following commands:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;client-keygen&quot;&gt;ssh-keygen -t ed25519 -o -a 100
ssh-keygen -t rsa -b 4096 -o -a 100&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can deploy your new client public keys using &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-copy-id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is also possible to use OTP authentication to reduce the consequences of lost passwords. &lt;a href=&quot;https://github.com/google/google-authenticator/wiki/PAM-Module-Instructions&quot;&gt;Google Authenticator&lt;/a&gt; is a nice implementation of &lt;a href=&quot;https://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm&quot;&gt;TOTP&lt;/a&gt;, or Timebased One Time Password. You can also use a &lt;a href=&quot;https://www.cl.cam.ac.uk/~mgk25/otpw.html&quot;&gt;printed list of one time passwords&lt;/a&gt; or any other &lt;a href=&quot;https://en.wikipedia.org/wiki/Pluggable_authentication_module&quot;&gt;PAM&lt;/a&gt; module, really, if you enable &lt;code class=&quot;highlighter-rouge&quot;&gt;ChallengeResponseAuthentication&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;user-authentication&quot;&gt;User Authentication&lt;/h3&gt;
&lt;p&gt;Even with Public Key authentication, you should only allow incoming connections from expected users. The &lt;code class=&quot;highlighter-rouge&quot;&gt;AllowUsers&lt;/code&gt; setting in &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd_config&lt;/code&gt; lets you specify users who are allowed to connect, but this can get complicated with a large number of ssh users. Additionally, when deleting a user from the system, the username is &lt;a href=&quot;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=779880&quot;&gt;not removed&lt;/a&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd_config&lt;/code&gt;, which adds to maintenance requirements. The solution is to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;AllowGroups&lt;/code&gt; setting instead, and add users to an &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-user&lt;/code&gt; group.&lt;/p&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;client-auth-allowgroups&quot;&gt;AllowGroups ssh-user&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Create the ssh-user group with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo groupadd ssh-user&lt;/code&gt;, then add each ssh user to the group with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo usermod -a -G ssh-user &amp;lt;username&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;symmetric-ciphers&quot;&gt;Symmetric ciphers&lt;/h2&gt;
&lt;p&gt;Symmetric ciphers are used to encrypt the data after the initial key exchange and authentication is complete.&lt;/p&gt;
&lt;p&gt;Here we have quite a few algorithms (10-14 were removed in &lt;a href=&quot;https://www.openssh.com/releasenotes.html#7.6&quot;&gt;OpenSSH 7.6&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;3des-cbc&lt;/li&gt;
&lt;li&gt;aes128-cbc&lt;/li&gt;
&lt;li&gt;aes192-cbc&lt;/li&gt;
&lt;li&gt;aes256-cbc&lt;/li&gt;
&lt;li&gt;aes128-ctr&lt;/li&gt;
&lt;li&gt;aes192-ctr&lt;/li&gt;
&lt;li&gt;aes256-ctr&lt;/li&gt;
&lt;li&gt;aes128-gcm@openssh.com&lt;/li&gt;
&lt;li&gt;aes256-gcm@openssh.com&lt;/li&gt;
&lt;li&gt;arcfour&lt;/li&gt;
&lt;li&gt;arcfour128&lt;/li&gt;
&lt;li&gt;arcfour256&lt;/li&gt;
&lt;li&gt;blowfish-cbc&lt;/li&gt;
&lt;li&gt;cast128-cbc&lt;/li&gt;
&lt;li&gt;chacha20-poly1305@openssh.com&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We have to consider the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Security of the cipher algorithm&lt;/em&gt;: This eliminates 1 and 10-12 - both DES and RC4 are broken. Again, no need to wait for them to become even weaker, disable them now.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Key size&lt;/em&gt;: At least 128 bits, the more the better.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Block size&lt;/em&gt;: Does not apply to stream ciphers. At least 128 bits. This eliminates 13 and 14 because those have a 64 bit block size.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cipher mode&lt;/em&gt;: The recommended approach here is to prefer &lt;a href=&quot;https://en.wikipedia.org/wiki/Authenticated_encryption&quot;&gt;AE&lt;/a&gt; modes and optionally allow CTR for compatibility. CTR with Encrypt-then-MAC is provably secure.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Chacha20-poly1305 is preferred over AES-GCM because the SSH protocol &lt;a href=&quot;http://blog.djm.net.au/2013/11/chacha20-and-poly1305-in-openssh.html&quot;&gt;does not encrypt message sizes&lt;/a&gt; when GCM (or EtM) is in use. This allows some traffic analysis even without decrypting the data. We will deal with that soon.&lt;/p&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;server-ciphers&quot;&gt;Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;client-ciphers&quot;&gt;Host *
    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;message-authentication-codes&quot;&gt;Message authentication codes&lt;/h2&gt;
&lt;p&gt;Encryption provides &lt;em&gt;confidentiality&lt;/em&gt;, message authentication code provides &lt;em&gt;integrity&lt;/em&gt;. We need both. If an AE cipher mode is selected, then extra MACs are not used, the integrity is already given. If CTR is selected, then we need a MAC to calculate and attach a tag to every message.&lt;/p&gt;
&lt;p&gt;There are multiple ways to combine ciphers and MACs - not all of these are useful. The 3 most common:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Encrypt-then-MAC&lt;/em&gt;: encrypt the message, then attach the MAC of the ciphertext.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;MAC-then-encrypt&lt;/em&gt;: attach the MAC of the plaintext, then encrypt everything.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Encrypt-and-MAC&lt;/em&gt;: encrypt the message, then attach the MAC of the plaintext.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Only Encrypt-then-MAC should be used, period. Using MAC-then-encrypt have lead to many attacks on TLS while Encrypt-and-MAC have lead to not quite that many attacks on SSH. The reason for this is that the more you fiddle with an attacker provided message, the more chance the attacker has to gain information through side channels. In case of Encrypt-then-MAC, the MAC is verified and if incorrect, discarded. Boom, one step, no timing channels. In case of MAC-then-encrypt, first the attacker provided message has to be decrypted and only then can you verify it. Decryption failure (due to invalid CBC padding for example) may take less time than verification failure. Encrypt-and-MAC also has to be decrypted first, leading to the same kind of potential side channels. It’s even worse because no one said that a MAC’s output can’t leak what its input was. SSH by default, uses this method.&lt;/p&gt;
&lt;p&gt;Here are the available MAC choices:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;hmac-md5&lt;/li&gt;
&lt;li&gt;hmac-md5-96&lt;/li&gt;
&lt;li&gt;hmac-sha1&lt;/li&gt;
&lt;li&gt;hmac-sha1-96&lt;/li&gt;
&lt;li&gt;hmac-sha2-256&lt;/li&gt;
&lt;li&gt;hmac-sha2-512&lt;/li&gt;
&lt;li&gt;umac-64&lt;/li&gt;
&lt;li&gt;umac-128&lt;/li&gt;
&lt;li&gt;hmac-md5-etm@openssh.com&lt;/li&gt;
&lt;li&gt;hmac-md5-96-etm@openssh.com&lt;/li&gt;
&lt;li&gt;hmac-sha1-etm@openssh.com&lt;/li&gt;
&lt;li&gt;hmac-sha1-96-etm@openssh.com&lt;/li&gt;
&lt;li&gt;hmac-sha2-256-etm@openssh.com&lt;/li&gt;
&lt;li&gt;hmac-sha2-512-etm@openssh.com&lt;/li&gt;
&lt;li&gt;umac-64-etm@openssh.com&lt;/li&gt;
&lt;li&gt;umac-128-etm@openssh.com&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The selection considerations:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Security of the hash algorithm&lt;/em&gt;: No MD5 and SHA1. Yes, I know that HMAC-SHA1 does not need collision resistance but why wait? Disable weak crypto today.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Encrypt-then-MAC&lt;/em&gt;: I am not aware of a security proof for CTR-and-HMAC but I also don’t think CTR decryption can fail. Since there are no downgrade attacks, you can add them to the end of the list. You can also do this on a host by host basis so you know which ones are less safe.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Tag size&lt;/em&gt;: At least 128 bits. This eliminates umac-64-etm.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Key size&lt;/em&gt;: At least 128 bits. This doesn’t eliminate anything at this point.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;server-macs&quot;&gt;MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;client-macs&quot;&gt;Host *
    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Even with forward secrecy the secret keys must be kept secret. The NSA has a database of stolen keys - you do not want your key there.&lt;/p&gt;
&lt;h2 id=&quot;system-hardening&quot;&gt;System hardening&lt;/h2&gt;
&lt;p&gt;OpenSSH has some undocumented, and rarely used features. UseRoaming is one such feature with a &lt;a href=&quot;https://security.stackexchange.com/questions/110639/how-exploitable-is-the-recent-useroaming-ssh-problem&quot;&gt;known vulnerability&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recommended &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt; snippet:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;client-features&quot;&gt;Host *
   UseRoaming no&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This post is not intended to be a comprehensive system security guide. Very briefly:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Don’t install what you don’t need&lt;/em&gt;: Every single line of code has a chance of containing a bug. Some of these bugs are security holes. Fewer lines, fewer holes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Use free software&lt;/em&gt;: As in speech. You want to use code that’s actually reviewed or that you can review yourself. There is no way to achieve that without source code. Someone may have reviewed proprietary crap but who knows.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Keep your software up to date&lt;/em&gt;: New versions often fix critical security holes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Exploit mitigation&lt;/em&gt;: Sad but true - there will always be security holes in your software. There are things you can do to prevent their exploitation, such as GCC’s -fstack-protector. One of the best security projects out there is &lt;a href=&quot;https://grsecurity.net/&quot;&gt;Grsecurity&lt;/a&gt;. Use it or use OpenBSD.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;traffic-analysis-resistance&quot;&gt;Traffic analysis resistance&lt;/h2&gt;
&lt;p&gt;Set up &lt;a href=&quot;https://www.torproject.org/docs/hidden-services.html.en&quot;&gt;Tor hidden services&lt;/a&gt; for your SSH servers. This has multiple advantages. It provides an additional layer of encryption and server authentication. People looking at your traffic will not know your IP, so they will be unable to scan and target other services running on the same server and client. Attackers can still attack these services but don’t know if it has anything to do with the observed traffic until they actually break in.&lt;/p&gt;
&lt;p&gt;Now this is only true if you don’t disclose your SSH server’s fingerprint in any other way. You should only accept connections from the hidden service or from LAN, if required.&lt;/p&gt;
&lt;p&gt;If you don’t need LAN access, you can add the following line to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;localhost-only&quot;&gt;ListenAddress 127.0.0.1:22&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Add this to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/tor/torrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;hidden-service&quot;&gt;HiddenServiceDir /var/lib/tor/hidden_service/ssh
HiddenServicePort 22 127.0.0.1:22&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You will find the hostname you have to use in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/tor/hidden_service/ssh/hostname&lt;/code&gt;. You also have to configure the client to use Tor. For this, socat will be needed. Add the following line to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code id=&quot;onion-proxy&quot;&gt;Host *.onion
    ProxyCommand socat - SOCKS4A:localhost:%h:%p,socksport=9050

Host *
    ...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you want to allow connections from LAN, don’t use the &lt;code class=&quot;highlighter-rouge&quot;&gt;ListenAddress&lt;/code&gt; line, configure your firewall instead.&lt;/p&gt;
&lt;h2 id=&quot;key-storage&quot;&gt;Key storage&lt;/h2&gt;
&lt;p&gt;You should encrypt your client key files using a strong password. Additionally, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -o -a $number&lt;/code&gt; to slow down cracking attempts by iterating the hash function many times. You may want to store them on a pendrive and only plug it in when you want to use SSH. Are you more likely to lose your pendrive or have your system compromised? I don’t know.&lt;/p&gt;
&lt;p&gt;Unfortunately, you can’t encrypt your server key and it must be always available, or else sshd won’t start. The only thing protecting it is OS access controls.&lt;/p&gt;

&lt;p&gt;It’s probably a good idea to test the changes. &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -v&lt;/code&gt; will print the selected algorithms and also makes problems easier to spot. Be extremely careful when configuring SSH on a remote host. Always keep an active session, never restart sshd. Instead you can send the &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGHUP&lt;/code&gt; signal to reload the configuration without killing your session. You can be even more careful by starting a new sshd instance on a different port and testing that.&lt;/p&gt;
&lt;p&gt;Can you make these changes? If the answer is yes, then…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://stribika.github.io/assets/nsa-happy-dance.png&quot; alt=&quot;NSA Happy Dance&quot; title=&quot;Happy Dance!!&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If the answer is no, it’s probably due to compatibility problems. You can try to convince the other side to upgrade their security and turn it into a yes. I have created a &lt;a href=&quot;https://github.com/stribika/stribika.github.io/wiki/Secure-Secure-Shell&quot;&gt;wiki page&lt;/a&gt; where anyone can add config files for preserving compatibility with various SSH implementations and SSH based services.&lt;/p&gt;
&lt;p&gt;If you work for a big company and change management doesn’t let you do it, I’m sorry. I’ve seen the v1 protocol enabled in such places. There is no chance of improvement. Give up to preseve your sanity.&lt;/p&gt;
&lt;p&gt;Special thanks to the people of Twitter for the improvements.&lt;/p&gt;

&lt;p&gt;You may have noticed that this document changed since last time. I want to be very transparent about this. There were three major changes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;After some debate and going back and forth between including GCM or not, it’s now back again. The reason for dropping it was that SSH doesn’t encrypt packet sizes when using GCM. The reason for bringing it back is that SSH does the same with any EtM algorithms. There is no way around this unless you can live with chacha20-poly1305 only. Also, the leaked documents don’t sound like they can figure out the lengths or confirm presence of some things, more like straight up “send it to us and we’ll decrypt it for you”. Wrapping SSH in a Tor hidden service will take care of any traffic analysis concerns.&lt;/li&gt;
&lt;li&gt;I’m now allowing Encrypt-and-MAC algorithms with CTR ciphers as a last resort. I initially thought it was possible to use downgrade attacks, I now think it is not.&lt;/li&gt;
&lt;li&gt;I briefly disabled RSA because it uses SHA1, this turned out to be a non-issue because we’re signing SHA2 hashes.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You can see the &lt;a href=&quot;https://github.com/stribika/stribika.github.io/commits/master/_posts/2015-01-04-secure-secure-shell.md&quot;&gt;full list of changes&lt;/a&gt; on github. I promise not to use &lt;code class=&quot;highlighter-rouge&quot;&gt;git push -f&lt;/code&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 04 Aug 2018 10:23:14 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://stribika.github.io/2015/01/04/secure-secure-shell.html</dc:identifier>
</item>
<item>
<title>4D toys</title>
<link>http://4dtoys.com/</link>
<guid isPermaLink="true" >http://4dtoys.com/</guid>
<description>&lt;iframe width=&quot;850&quot; height=&quot;478&quot; id=&quot;trailer&quot; src=&quot;https://www.youtube.com/embed/0t4aKJuKP0Q?showinfo=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; name=&quot;trailer&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;p&gt;What if you received a box filled with mysterious toys from a fourth spatial dimension?&lt;/p&gt;
&lt;div class=&quot;img1gfy img1Wide&quot;&gt;&lt;img class=&quot;gfyitem gfyitemWide&quot; data-id=&quot;GregariousHappyAldabratortoise&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img1gfy img1Wide&quot;&gt;&lt;img class=&quot;gfyitem gfyitemWide&quot; data-id=&quot;SeriousHandmadeIcelandichorse&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img1gfy img1Wide&quot;&gt;&lt;img class=&quot;gfyitem gfyitemWide&quot; data-id=&quot;JollyUntriedHorseshoebat&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Playfully explore and marvel at beautiful shapes powered by a groundbreaking 4D+time physics system.&lt;/p&gt;
&lt;div class=&quot;img1gfy img1Wide&quot;&gt;&lt;img class=&quot;gfyitem gfyitemWide&quot; data-id=&quot;IdealUnluckyGypsymoth&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img1gfy img1Wide&quot;&gt;&lt;img class=&quot;gfyitem gfyitemWide&quot; data-id=&quot;HarmoniousDangerousGiantschnauzer&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img1gfy img1Wide&quot;&gt;&lt;img class=&quot;gfyitem gfyitemWide&quot; data-id=&quot;BronzeMarvelousGrunion&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Poke, throw, roll and watch as they disappear into a dimension you can't see.&lt;/p&gt;
&lt;p&gt;Get an intuitive feel for how four-dimensional objects behave: &lt;/p&gt;
&lt;p&gt;Become a child of the fourth dimension.&lt;/p&gt;
&lt;p&gt;In this case the 4th dimension is not time but a 4th dimension of space that works just like the first three dimensions we are familiar with. If you count time these toys are 5D.&lt;/p&gt;
&lt;p&gt;It turns out that the rules of how objects bounce, slide and roll around can be generalized to any number of dimensions, and this toy lets you experience what that would look like.&lt;/p&gt;
&lt;div id=&quot;download&quot;&gt;&lt;a href=&quot;https://itunes.apple.com/app/id1143791442?mt=8&amp;amp;uo=4&amp;amp;at=n5yJat7s&quot;&gt;&lt;img src=&quot;http://4dtoys.com/app_store.svg&quot; id=&quot;downloadios&quot; name=&quot;downloadios&quot; /&gt;&lt;/a&gt; &lt;/div&gt;
&lt;h2&gt;Features:&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Over &lt;strong&gt;100 beautiful interactive scenes&lt;/strong&gt; to play with, with more to be added in updates.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Groundbreaking 4D+Time Physics Engine&lt;/strong&gt; that uses new mathematics created for this project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual Reality&lt;/strong&gt; or Mouse &amp;amp; Keyboard (PC) or &lt;strong&gt;Multi-touch &amp;amp; Accelerometer&lt;/strong&gt; (iOS) support for rich interactivity.&lt;/li&gt;
&lt;li&gt;Bonus: 2D/3D &quot;Flatland&quot; Interactive Explanation teaches by analogy about a fourth spatial dimension:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;img1Center&quot;&gt;
&lt;div class=&quot;img1gfy img1Thick&quot;&gt;&lt;img class=&quot;gfyitem gfyitemThick&quot; data-id=&quot;DescriptiveFrayedHammerheadbird&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img1gfy img1Wide2&quot;&gt;&lt;img class=&quot;gfyitem gfyitemWide2&quot; data-id=&quot;FalseFarflungAphid&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;quote&quot;&gt;&lt;span id=&quot;quotein&quot;&gt;&quot;Our inability to see all the dimensions of a 4-D world doesn't mean that we can't navigate it, that we can't reach out and feel it with our digital fingertips.&quot;&lt;/span&gt; —Chris Suellentrop, &lt;a href=&quot;https://www.wired.com/2014/11/4d-game/&quot;&gt;Wired magazine&lt;/a&gt;&lt;/div&gt;
&lt;div id=&quot;quote&quot;&gt;&lt;span id=&quot;quotein&quot;&gt;&quot;I'm hesitant to describe a virtual reality experience as a &quot;killer app&quot; ever again, but I'm oh-so-tempted once more [...] I am not sure that I've ever seen a more compelling &quot;show-don't-tell&quot; educational tool than 4D Toys. &quot;&lt;/span&gt; —Sam Machkovech, &lt;a href=&quot;https://arstechnica.com/gaming/2017/06/learn-the-ways-of-the-fourth-dimension-with-a-bonkers-vr-playset/&quot;&gt;Ars Technica&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;suggestions&quot;&gt;
&lt;h2&gt;Some things to do:&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Manage to fit the hypercube into the hyperhole!&lt;/li&gt;
&lt;li&gt;Use the 4D shapes as fancy, &lt;strong&gt;perfectly symmetric, fair dice&lt;/strong&gt; that have 5, 8, 16, 24, or even 120 and 600 sides!

&lt;/li&gt;
&lt;li&gt;Make a stack of 4D hypercubes and smash it!&lt;/li&gt;
&lt;li&gt;Set up an interesting path for a few 4D dominoes!&lt;/li&gt;
&lt;li&gt;Unbind Rings using the fourth dimension!&lt;/li&gt;
&lt;li&gt;Make levers that throw hypercubes into the fourth dimension!&lt;/li&gt;
&lt;li&gt;Use multitouch to &quot;squeeze&quot; out objects into the fourth dimension!&lt;/li&gt;
&lt;li&gt;Play in a 4D ball pit!&lt;/li&gt;
&lt;li&gt;See Tesseracts (i.e. 4D hypercubes) slide down slopes!&lt;/li&gt;
&lt;li&gt;etc...!&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div class=&quot;imgSideAll&quot;&gt;
&lt;div class=&quot;img1gfy img1Thick img1Side&quot;&gt;&lt;img class=&quot;gfyitem gfyitemThick&quot; data-id=&quot;ReadyAppropriateCow&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img1gfy img1Thick img1Side&quot;&gt;&lt;img class=&quot;gfyitem gfyitemThick&quot; data-id=&quot;OpulentSoftInexpectatumpleco&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br clear=&quot;all&quot; /&gt;&lt;div class=&quot;img1gfy img1Thick&quot;&gt;&lt;img class=&quot;gfyitem gfyitemThick&quot; data-id=&quot;BackEmptyAmphibian&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img1gfy img1Thick&quot;&gt;&lt;img class=&quot;gfyitem gfyitemThick&quot; data-id=&quot;CreativeElaborateKitten&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;img1gfy img1Thick&quot;&gt;&lt;img class=&quot;gfyitem gfyitemThick&quot; data-id=&quot;DirectEthicalAmericancrocodile&quot; data-controls=&quot;false&quot; data-dot=&quot;false&quot; /&gt;&lt;/div&gt;








&lt;p&gt;&lt;img src=&quot;http://4dtoys.com/child.png&quot; id=&quot;child&quot; name=&quot;child&quot; /&gt;&lt;/p&gt;&lt;div id=&quot;quote&quot; class=&quot;quotesm&quot; readability=&quot;14&quot;&gt;
&lt;p&gt;&quot;Meanwhile, in the adjoining room, Emma was sliding the beads to and fro in the abacus. The motions didn't seem so strange now. Even when the beads vanished. She could almost follow that new direction—almost—&quot;&lt;/p&gt;
—Lewis Padgett, Mimsy Were the Borogoves&lt;/div&gt;
</description>
<pubDate>Sat, 04 Aug 2018 07:48:15 +0000</pubDate>
<dc:creator>wenderen</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://4dtoys.com/</dc:identifier>
</item>
<item>
<title>Internet Archive, decentralized</title>
<link>https://dweb.archive.org/</link>
<guid isPermaLink="true" >https://dweb.archive.org/</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://dweb.archive.org/&quot;&gt;https://dweb.archive.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=17685682&quot;&gt;https://news.ycombinator.com/item?id=17685682&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 212&lt;/p&gt;&lt;p&gt;# Comments: 62&lt;/p&gt;</description>
<pubDate>Sat, 04 Aug 2018 06:36:22 +0000</pubDate>
<dc:creator>justin_</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://dweb.archive.org/</dc:identifier>
</item>
<item>
<title>ThinkPad X220 MacOS High Sierra Installation</title>
<link>http://x220.mcdonnelltech.com/</link>
<guid isPermaLink="true" >http://x220.mcdonnelltech.com/</guid>
<description>&lt;h4 class=&quot;font_8&quot;&gt;&lt;a href=&quot;http://x220.mcdonnelltech.com/wp-content/uploads/2017/06/x220_High_Sierra.jpg&quot;&gt;&lt;img class=&quot;aligncenter wp-image-1177 size-full&quot; src=&quot;http://x220.mcdonnelltech.com/wp-content/uploads/2017/06/x220_High_Sierra.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;http://x220.mcdonnelltech.com/wp-content/uploads/2017/06/x220_High_Sierra.jpg 600w, http://x220.mcdonnelltech.com/wp-content/uploads/2017/06/x220_High_Sierra-300x225.jpg 300w&quot; sizes=&quot;(max-width: 600px) 85vw, 600px&quot;/&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;h4/&gt;

&lt;div class=&quot;mk-mini-callout&quot; readability=&quot;7.6279069767442&quot;&gt;
&lt;p&gt;&lt;span class=&quot;callout-desc&quot;&gt;To be notified when updates are posted to this site, send us your email address&lt;/span&gt;&lt;/p&gt;
&lt;a class=&quot;callout-button&quot; href=&quot;http://x220.mcdonnelltech.com/#contact&quot;&gt;here&lt;/a&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt; &lt;/span&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;span&gt;macOS HIGH SIERRA UPDATES&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;macOS High Sierra Update 10.13.6&lt;/strong&gt; (build 17G65) – installs with no issues. Install this update through the App Store and select &lt;em&gt;Boot Install from Macintosh HD&lt;/em&gt; at the Clover menu after the first two restarts (ignore any &lt;em&gt;Prebooter&lt;/em&gt; Clover entries).
&lt;ul&gt;&lt;li&gt;If the update through the App Store does not work correctly, the installer can be downloaded &lt;a href=&quot;https://support.apple.com/kb/DL1970&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If audio does not work, run &lt;em&gt;Kext Utility&lt;/em&gt; to repair permissions and rebuild the boot cache.&lt;/li&gt;
&lt;li&gt;If you previously enabled Night Shift, it will be necessary to run the patch to enable it again (see notes at end of guide).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS High Sierra Update 10.13.5&lt;/strong&gt; (build 17F77) – installs with no issues. Install this update through the App Store and select &lt;em&gt;Boot Install from Macintosh HD&lt;/em&gt; at the Clover menu after the first two restarts.
&lt;ul&gt;&lt;li&gt;If the update through the App Store does not work correctly, the installer can be downloaded &lt;a href=&quot;https://support.apple.com/kb/DL1966&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If audio does not work, run &lt;em&gt;Kext Utility&lt;/em&gt; to repair permissions and rebuild the boot cache.&lt;/li&gt;
&lt;li&gt;If you previously enabled Night Shift, it will be necessary to run the patch to enable it again (see notes at end of guide).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS High Sierra Security Update 2018-001&lt;/strong&gt; (build 17E202) – installs with no issues. Install this update through the App Store and select &lt;em&gt;Boot Install from Macintosh HD&lt;/em&gt; at the Clover menu after the first restart.
&lt;ul&gt;&lt;li&gt;If the update through the App Store does not work correctly, the installer can be downloaded &lt;a href=&quot;https://support.apple.com/kb/DL1963?locale=en_US&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If audio does not work, run &lt;em&gt;Kext Utility&lt;/em&gt; to repair permissions and rebuild the boot cache.&lt;/li&gt;
&lt;li&gt;If you previously enabled Night Shift, it will be necessary to run the patch to enable it again (see notes at end of guide).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS High Sierra Update 10.13.4&lt;/strong&gt; (build 17E199) – installs with no issues. Install this update through the App Store and select &lt;em&gt;Boot Install from Macintosh HD&lt;/em&gt; at the Clover menu after the first two restarts.
&lt;ul&gt;&lt;li&gt;If the update through the App Store does not work correctly, the installer can be downloaded &lt;a href=&quot;https://support.apple.com/kb/DL1959&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If audio does not work, run &lt;em&gt;Kext Utility&lt;/em&gt; to repair permissions and rebuild the boot cache.&lt;/li&gt;
&lt;li&gt;If you previously enabled Night Shift, it will be necessary to run the patch to enable it again (see notes at end of guide).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS High Sierra 10.13.3 Supplemental Update&lt;/strong&gt; (build 17D102) – installs with no issues. Install this update through the App Store and select &lt;em&gt;Boot Install from Macintosh HD&lt;/em&gt; at the Clover menu after the first restart.
&lt;ul&gt;&lt;li&gt;If the update through the App Store does not work correctly, the installer can be downloaded &lt;a href=&quot;https://support.apple.com/kb/DL1958&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS High Sierra Update 10.13.3&lt;/strong&gt; (build 17D47) – installs with no issues. Install this update through the App Store and select &lt;em&gt;Boot Install from Macintosh HD&lt;/em&gt; at the Clover menu after the first restart.
&lt;ul&gt;&lt;li&gt;If the update through the App Store does not work correctly, the installer can be downloaded &lt;a href=&quot;https://support.apple.com/kb/DL1954&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If audio does not work, run &lt;em&gt;Kext Utility&lt;/em&gt; to repair permissions and rebuild the boot cache.&lt;/li&gt;
&lt;li&gt;If you previously enabled Night Shift, it will be necessary to run the patch to enable it again (see notes at end of guide).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS High Sierra 10.13.2 Supplemental Update&lt;/strong&gt; (build 17C205) – installs with no issues. Install this update through the App Store and select &lt;em&gt;Boot Install from Macintosh HD&lt;/em&gt; at the Clover menu after the first restart.
&lt;ul&gt;&lt;li&gt;If the update through the App Store does not work correctly, the installer can be downloaded &lt;a href=&quot;https://support.apple.com/kb/DL1951?locale=en_US&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS High Sierra Update 10.13.2&lt;/strong&gt; (build 17C88) – installs with no issues. Install this update through the App Store and select &lt;em&gt;Boot macOS Install from Macintosh HD&lt;/em&gt; at the Clover menu after the first restart.
&lt;ul&gt;&lt;li&gt;If audio does not work, run &lt;em&gt;Kext Utility&lt;/em&gt; to repair permissions and rebuild the boot cache.&lt;/li&gt;
&lt;li&gt;If you previously enabled Night Shift, it will be necessary to run the patch to enable it again (see notes at end of guide).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS High Sierra Security Update 2017-001&lt;/strong&gt; (build 17B1003) – installs with no issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS High Sierra Update 10.13.1&lt;/strong&gt; (build 17B48) – installs with no issues. Install this update through the App Store and select &lt;em&gt;Boot macOS Install from Macintosh HD&lt;/em&gt; at the Clover menu after the first restart.
&lt;ul&gt;&lt;li&gt;Do &lt;span&gt;not&lt;/span&gt; turn on FileValut Disk Encryption during the guided setup unless you know what this entails (see notes at end of guide).&lt;/li&gt;
&lt;li&gt;If audio does not work, run &lt;em&gt;Kext Utility&lt;/em&gt; to repair permissions and rebuild the boot cache.&lt;/li&gt;
&lt;li&gt;If you previously enabled Night Shift, it will be necessary to run the patch to enable it again (see notes at end of guide).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS High Sierra 10.13 Supplemental Update&lt;/strong&gt; (build 17A405) – installs with no issues. Install this update through the App Store and select &lt;em&gt;Boot macOS Install from Macintosh HD&lt;/em&gt; at the Clover menu after the first restart. If audio does not work, run &lt;em&gt;Kext Utility&lt;/em&gt; to repair permissions and rebuild the boot cache.&lt;/li&gt;
&lt;li&gt;Initial release: macOS High Sierra build 17A365&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;font_8&quot;&gt;&lt;span class=&quot;color_4&quot;&gt;INSTALLATION GUIDE UPDATES&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;07/09/2018: Updated Utility and Kext Pack with new versions of &lt;em&gt;apfs.efi&lt;/em&gt; (07/04/2018) and &lt;em&gt;Clover Configurator&lt;/em&gt; (5.1.3.0). Updated Clover to r4586.&lt;/li&gt;
&lt;li&gt;06/28/2018: Updated link to latest version of modified BIOS v1.46 &lt;a href=&quot;https://www.bios-mods.com/forum/Thread-REQUEST-Lenovo-X220-8DETxxWW-Whitelist-Removal?pid=141098#pid141098&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;source&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;06/06/2018: Updated link to latest version of modified BIOS v1.45 &lt;em&gt;&lt;a href=&quot;https://www.bios-mods.com/forum/Thread-Solved-X220-v1-42-Modified-BIOS?pid=140375#pid140375&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;source&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;06/01/2018: Updated Utility and Kext Pack with new versions of &lt;em&gt;apfs.efi&lt;/em&gt; (05/08/2018) and &lt;em&gt;Clover Configurator&lt;/em&gt; (5.0.0.0)&lt;/li&gt;
&lt;li&gt;04/25/2018: Updated Utility and Kext Pack to Clover r4439 as well as new versions of &lt;em&gt;apfs.efi&lt;/em&gt; (04/13/2018) and &lt;em&gt;Clover Configurator&lt;/em&gt; (4.61.0.0)&lt;/li&gt;
&lt;li&gt;04/22/2018: Updated link to latest version of modified BIOS v1.44 &lt;a href=&quot;https://www.bios-mods.com/forum/Thread-Solved-X220-v1-42-Modified-BIOS?pid=139086#pid139086&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;source&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;04/01/2018: Updated Utility and Kext Pack to Clover r4423 to address issue with installation USB icon not showing with macOS 10.13.4.&lt;/li&gt;
&lt;li&gt;03/29/2018: Updated Utility and Kext Pack with new versions of &lt;em&gt;apfs.efi&lt;/em&gt; (03/15/2018) and &lt;em&gt;Clover Configurator&lt;/em&gt; (4.60.3.4). Updated Clover to r4411.&lt;/li&gt;
&lt;li&gt;01/23/2018: Updated Utility and Kext Pack with new versions of &lt;em&gt;apfs.efi&lt;/em&gt; (12/17/2017) and &lt;em&gt;Clover Configurator&lt;/em&gt; (4.60.0.0)&lt;/li&gt;
&lt;li&gt;12/06/2017: Updated Utility and Kext Pack with new versions of &lt;em&gt;apfs.efi&lt;/em&gt; (11/09/2017) and &lt;em&gt;Clover Configurator&lt;/em&gt; (4.57.3.0)&lt;/li&gt;
&lt;li&gt;10/31/2017: Updated Utility and Kext Pack with new versions of &lt;em&gt;apfs.efi&lt;/em&gt; (10/19/2017) and &lt;em&gt;Clover Configurator&lt;/em&gt; (4.54.0.0)&lt;/li&gt;
&lt;li&gt;10/07/2017: Updated Utility and Kext Pack with new versions of &lt;em&gt;apfs.efi&lt;/em&gt; (09/28/2017), &lt;em&gt;ACPIBatteryManager.kext&lt;/em&gt; (1.81.4) and &lt;em&gt;Clover Configurator&lt;/em&gt; (4.53.0.0). Added instructions to enable Night Shift to the &lt;em&gt;Video / Displays&lt;/em&gt; section of the &lt;em&gt;Notes and Suggestions&lt;/em&gt;&lt;/li&gt;
&lt;li class=&quot;font_8&quot;&gt;09/25/2017: Initial version of guide posted&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.allthingsergo.com/&quot;&gt;&lt;img class=&quot;aligncenter wp-image-1543 size-full&quot; src=&quot;http://x220.mcdonnelltech.com/wp-content/uploads/2018/05/ergonomic_logo_large.png&quot; alt=&quot;&quot; width=&quot;298&quot; height=&quot;73&quot;/&gt;&lt;/a&gt;Independent reviews of the best ergonomic mice, keyboards, standing desks and alternative devices. Proceeds support the &lt;a href=&quot;http://www.purplemaia.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Purple Maiʻa Foundation&lt;/a&gt; technology education nonprofit.&lt;/p&gt;


</description>
<pubDate>Sat, 04 Aug 2018 02:17:20 +0000</pubDate>
<dc:creator>walterbell</dc:creator>
<og:type>website</og:type>
<og:title>ThinkPad X220 macOS High Sierra Installation - ThinkPad X220</og:title>
<og:description>Lenovo ThinkPad x220 OS X 10.10 Yosemite installation guide and other resources for the Lenovo x220 Notebook Computer</og:description>
<og:url>http://x220.mcdonnelltech.com/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://x220.mcdonnelltech.com/</dc:identifier>
</item>
<item>
<title>Modern SAT solvers: fast, neat and underused</title>
<link>https://codingnest.com/modern-sat-solvers-fast-neat-underused-part-1-of-n/</link>
<guid isPermaLink="true" >https://codingnest.com/modern-sat-solvers-fast-neat-underused-part-1-of-n/</guid>
<description>&lt;p&gt;Before I started doing research for &lt;a href=&quot;http://ida.felk.cvut.cz/&quot;&gt;Intelligent Data Analysis (IDA) group at FEE CTU&lt;/a&gt;, I saw SAT solvers as academically interesting but didn't think that they have many practical uses outside of other academic applications. After spending ~1.5 years working with them, I have to say that modern SAT solvers are fast, neat and criminally underused by the industry.&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Boolean satisfiability problem (SAT) is the problem of deciding whether a formula in boolean logic is satisfiable. A formula is &lt;em&gt;satisfiable&lt;/em&gt; when at least one interpretation (an assignment of &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; values to logical variables) leads to the formula evaluating to &lt;code&gt;true&lt;/code&gt;. If no such interpretation exists, the formula is &lt;em&gt;unsatisfiable&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What makes SAT interesting is that a variant of it was the first problem to be proven &lt;a href=&quot;https://en.wikipedia.org/wiki/Cook%E2%80%93Levin_theorem&quot;&gt;NP-complete&lt;/a&gt;, which roughly means that a lot of other problems can be translated into SAT in reasonable time, and the solution to this translated problem can be converted back into a solution for the original problem.&lt;/p&gt;
&lt;p&gt;As an example, the often-talked-about dependency management problem, is also NP-Complete and thus translates into SAT, and SAT could be translated into dependency manager. The problem our group worked on, generating key and lock cuttings based on user-provided lock-chart and manufacturer-specified geometry, is also NP-complete.&lt;/p&gt;
&lt;p&gt;I will likely write about master-key systems and our approach towards solving them later, but to keep this post reasonably short, we will instead use &lt;a href=&quot;https://en.wikipedia.org/wiki/Sudoku&quot;&gt;Sudoku&lt;/a&gt; for practical examples.&lt;/p&gt;
&lt;h2 id=&quot;usingsatsolvers&quot;&gt;Using SAT solvers&lt;/h2&gt;
&lt;p&gt;These days, SAT almost always refers to CNF-SAT, a boolean satisfaction problem for formulas in &lt;a href=&quot;https://en.wikipedia.org/wiki/Conjunctive_normal_form&quot;&gt;conjunctive normal form (CNF)&lt;/a&gt;. This means that the entire formula is a conjunction (AND) of clauses, with each clause being a disjunction (OR) of literals. Some examples:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;$(A \vee B) \wedge (B \vee C)$&lt;/li&gt;
&lt;li&gt;$(A \vee B) \wedge C$&lt;/li&gt;
&lt;li&gt;$A \vee B$&lt;/li&gt;
&lt;li&gt;$A \wedge C$&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are two ways to pass a formula to a SAT solver: by using a semi-standard file format known as &lt;a href=&quot;http://www.satcompetition.org/2009/format-benchmarks2009.html&quot;&gt;DIMACS&lt;/a&gt;, or by using the SAT solver as a library. In real-world applications, I prefer using SAT solver as a library (e.g. &lt;a href=&quot;https://github.com/master-keying/minisat/&quot;&gt;MiniSat for C++&lt;/a&gt;), but the DIMACS format lets you prototype your application quickly, and quickly test the performance characteristics of different solvers on your problem.&lt;/p&gt;
&lt;h3 id=&quot;dimacsformat&quot;&gt;DIMACS format&lt;/h3&gt;
&lt;p&gt;DIMACS is a line oriented format, consisting of 3 different basic types of lines.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A comment line. Any line that starts with &quot;c&quot; is comment line.&lt;/li&gt;
&lt;li&gt;A summary line. This line contains information about the kind and size of the problem within the file. A summary line starts with &quot;p&quot;, continues with the kind of the problem (in most cases &quot;cnf&quot;), the number of variables and the number of clauses within this problem. Some DIMACS parsers expect this line to be the first non-comment line, but some parsers can handle the file without it.&lt;/li&gt;
&lt;li&gt;A clause line. A clause line consists of space-separated numbers, ending with a 0. Each non-zero number denotes a literal, with negative numbers being negative literals of that variable, and 0 being the terminator of a line.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;As an example, this formula&lt;br/&gt;$$(A \vee B \vee C) \wedge (\neg A \vee B \vee C) \wedge (A \vee \neg B \vee C) \wedge (A \vee B \vee \neg C)$$&lt;br/&gt;would be converted into DIMACS as&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-dimacs&quot;&gt;c An example formula
c
p cnf 3 4
1 2 3 0
-1 2 3 0
1 -2 3 0
1 2 -3 0
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;minisatscinterface&quot;&gt;Minisat's C++ interface&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://minisat.se/&quot;&gt;MiniSat&lt;/a&gt; is a fairly simple and performant SAT solver that also provides a nice C++ interface and we &lt;a href=&quot;https://github.com/master-keying/minisat/&quot;&gt;maintain a modernised fork with CMake integration&lt;/a&gt;. The C++ interface to MiniSat uses 3 basic vocabulary types:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Minisat::Solver&lt;/code&gt; - Implementation of the core solver and its algorithms.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Minisat::Var&lt;/code&gt; - Representation of a &lt;em&gt;variable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Minisat::Lit&lt;/code&gt; - Representation of a concrete (positive or negative) &lt;em&gt;literal&lt;/em&gt; of a variable.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The difference between a variable and a literal is that the literal is a concrete &quot;evaluation&quot; of a variable inside a clause. As an example, formula $ (A \vee B \vee \neg C) \wedge (\neg A \vee \neg B) $ contains 3 variables, $A$, $B$ and $C$, but it contains 5 literals, $A$, $\neg A$, $B$, $\neg B$ and $\neg C$.&lt;/p&gt;
&lt;p&gt;MiniSat's interface also uses one utility type: &lt;code&gt;Minisat::vec&amp;lt;T&amp;gt;&lt;/code&gt;, a container similar to &lt;code&gt;std::vector&lt;/code&gt;, that is used to pass clauses to the solver.&lt;/p&gt;
&lt;p&gt;The following example uses MiniSat's C++ API to solve the same clause as we used in the DIMACS example.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cpp&quot;&gt;// main.cpp:
#include &amp;lt;minisat/core/Solver.h&amp;gt;

#include &amp;lt;iostream&amp;gt;

int main() {
    using Minisat::mkLit;
    using Minisat::lbool;

    Minisat::Solver solver;
    // Create variables
    auto A = solver.newVar();
    auto B = solver.newVar();
    auto C = solver.newVar();
    
    // Create the clauses
    solver.addClause( mkLit(A),  mkLit(B),  mkLit(C));
    solver.addClause(~mkLit(A),  mkLit(B),  mkLit(C));
    solver.addClause( mkLit(A), ~mkLit(B),  mkLit(C));
    solver.addClause( mkLit(A),  mkLit(B), ~mkLit(C));
    
    // Check for solution and retrieve model if found
    auto sat = solver.solve();
    if (sat) {
        std::clog &amp;lt;&amp;lt; &quot;SAT\n&quot;
                  &amp;lt;&amp;lt; &quot;Model found:\n&quot;;
        std::clog &amp;lt;&amp;lt; &quot;A := &quot; &amp;lt;&amp;lt; (solver.modelValue(A) == l_True) &amp;lt;&amp;lt; '\n';
        std::clog &amp;lt;&amp;lt; &quot;B := &quot; &amp;lt;&amp;lt; (solver.modelValue(B) == l_True) &amp;lt;&amp;lt; '\n';
        std::clog &amp;lt;&amp;lt; &quot;C := &quot; &amp;lt;&amp;lt; (solver.modelValue(C) == l_True) &amp;lt;&amp;lt; '\n';
    } else {
        std::clog &amp;lt;&amp;lt; &quot;UNSAT\n&quot;;
        return 1;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Because all of our clauses have length $\le 3$, we can get away with just using utility overloads that MiniSat provides, and don't need to use &lt;code&gt;Minisat::vec&lt;/code&gt; for the clauses.&lt;/p&gt;
&lt;p&gt;We will also need to build the binary. Assuming you have installed our fork of MiniSat (either from &lt;a href=&quot;https://github.com/master-keying/minisat/&quot;&gt;GitHub&lt;/a&gt;, or from &lt;a href=&quot;https://github.com/Microsoft/vcpkg&quot;&gt;vcpkg&lt;/a&gt;), it provides proper CMake integration and writing the CMakeLists.txt is trivial:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cmake&quot;&gt;cmake_minimum_required (VERSION 3.5)
project (minisat-example LANGUAGES CXX)

set(CMAKE_CXX_EXTENSIONS OFF)

find_package(MiniSat 2.2 REQUIRED)

add_executable(minisat-example
    main.cpp
)
target_link_libraries(minisat-example MiniSat::libminisat)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Building the example and running it should give you this output:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SAT
Model found:
A := 0
B := 1
C := 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;conversiontocnf&quot;&gt;Conversion to CNF&lt;/h3&gt;
&lt;p&gt;Very few problems are naturally expressed as a logical formula in the CNF format, which means that after formulating a problem as a SAT, we often need to convert it into CNF. The most basic approach is to create an equivalent formula using De-Morgan laws, distributive law and the fact that two negations cancel out. This approach has two advantages: one, it is simple and obviously correct. Two, it does not introduce new variables. However, it has one significant disadvantage: some formulas lead to exponentially large CNF conversion.&lt;/p&gt;
&lt;p&gt;The other approach is to create an equisatisfiable CNF formula, but we won't be covering that in this post.&lt;/p&gt;
&lt;p&gt;Some common equivalencies are in the table below.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Original clause&lt;/th&gt;
&lt;th&gt;Equivalent clause&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td&gt;$ \neg \neg \alpha $&lt;/td&gt;
&lt;td&gt;$ \alpha $&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;$ \alpha \rightarrow \beta $&lt;/td&gt;
&lt;td&gt;$ \neg \alpha \vee \beta $&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;$ \neg ( \alpha \wedge \beta ) $&lt;/td&gt;
&lt;td&gt;$ \neg \alpha \vee \neg \beta $&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;$ \neg ( \neg \alpha \wedge \neg \beta ) $&lt;/td&gt;
&lt;td&gt;$ \alpha \vee \beta $&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;$ (\alpha \wedge \beta) \vee \gamma $&lt;/td&gt;
&lt;td&gt;$ (\alpha \vee \gamma) \wedge (\beta \vee \gamma) $&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Obviously, you don't have to remember these identities, but knowing at least some of them (implication) is much faster than deriving them from the truth tables every time.&lt;/p&gt;
&lt;h2 id=&quot;solvingsudokuusingsat&quot;&gt;Solving Sudoku using SAT&lt;/h2&gt;
&lt;p&gt;With this background, we can now look at how we could use a real-world problem, such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Sudoku&quot;&gt;Sudoku&lt;/a&gt;, using a SAT solver. First, we will go over the rules of Sudoku and how they can be translated into (CNF-)SAT. Then we will go over implementing this converter in C++ and benchmarking the results.&lt;/p&gt;
&lt;h3 id=&quot;quickoverviewofsudoku&quot;&gt;Quick overview of Sudoku&lt;/h3&gt;
&lt;p&gt;Sudoku is a puzzle where you need to place numbers 1-9 into a 9x9 grid consisting of 9 3x3 boxes, following these rules:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Each row contains all of the numbers 1-9&lt;/li&gt;
&lt;li&gt;Each column contains all of the numbers 1-9&lt;/li&gt;
&lt;li&gt;Each of the 3x3 boxes contains all of the numbers 1-9&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We can also restate this rules as:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;No row contains duplicate numbers&lt;/li&gt;
&lt;li&gt;No column contains duplicate numbers&lt;/li&gt;
&lt;li&gt;No 3x3 box contains duplicate numbers&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Because these rules alone wouldn't make for a good puzzle, some of the positions are prefilled by the puzzle setter, and a proper Sudoku puzzle should have only one possible solution.&lt;/p&gt;
&lt;h3 id=&quot;translatingtherules&quot;&gt;Translating the rules&lt;/h3&gt;
&lt;p&gt;The first step in translating a problem to SAT is to decide what should be modelled via variables, and what should be modelled via clauses over these variables. With Sudoku, the natural thing to do is to model positions as variables, but in SAT, each variable can only have 2 values: &quot;true&quot; and &quot;false&quot;. This means we cannot just assign each position a variable, instead we have to assign each combination of position &lt;em&gt;and&lt;/em&gt; value a variable. We will denote such variable as $x_{r, c}^{v}$. If variable $x_{r, c}^{v}$ is set to &quot;true&quot;, then the number in $r$-th column and $c$-th column is $v$.&lt;/p&gt;
&lt;p&gt;Using this notation, let's translate the Sudoku rules from the previous section into SAT.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule 1 (No row contains duplicate numbers)&lt;/strong&gt;&lt;br/&gt;\[&lt;br/&gt;\forall (r, v) \in (rows \times values):&lt;br/&gt;\operatorname{exactly-one}(x_{r, 0}^{v}, x_{r, 1}^{v}, \dots, x_{r, 8}^{v})&lt;br/&gt;\]&lt;/p&gt;
&lt;p&gt;In plain words, for each row and each value, we want exactly one column in that row to have that value. We do that by using a helper called $\operatorname{exactly-one}$, that generates a set of clauses that ensure that exactly &lt;em&gt;one&lt;/em&gt; of the passed-in literals evaluate to &quot;true&quot;.&lt;/p&gt;
&lt;p&gt;We will see how to define $\operatorname{exactly-one}$ later. First, we will translate the other Sudoku rules into these pseudo-boolean formulas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule 2 (No column contains duplicate numbers)&lt;/strong&gt;&lt;br/&gt;\[&lt;br/&gt;\forall (c, v) \in (columns \times values):&lt;br/&gt;\operatorname{exactly-one}(x_{0, c}^{v}, x_{1, c}^{v}, \dots, x_{8, c}^{v})&lt;br/&gt;\]&lt;/p&gt;
&lt;p&gt;This works analogically with Rule 1, in that for each column and each value, we want exactly one row to have that value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule 3 (None of the 3x3 boxes contain duplicate numbers)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This rule works exactly the same way as the first two: for each box and each value, we want exactly one position in the box to have that value.&lt;/p&gt;
&lt;p&gt;\[&lt;br/&gt;\forall (box, value) \in (boxes \times values):&lt;br/&gt;\operatorname{exactly-one}(\operatorname{literals-in-box}(box, value))&lt;br/&gt;\]&lt;/p&gt;
&lt;p&gt;Even though it seems to be enough at first glance, these 3 rules are in fact &lt;em&gt;not&lt;/em&gt; enough to properly specify Sudoku. This is because a solution like this one:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;where &quot;x&quot; denotes a position where &lt;em&gt;all&lt;/em&gt; value variables are set to &quot;true&quot; and &quot;.&quot; denotes a position where &lt;em&gt;none&lt;/em&gt; value variables are set to &quot;true&quot;, is valid according to the rules as given to the SAT solver.&lt;/p&gt;
&lt;aside&gt;When translating problems into SAT, be very careful not to rely on unstated assumptions. While an assumption might seem common sense to a human, SAT solvers (and computers in general) do not operate on common sense, and will happily find a solution that is valid according to your specification of the problem but does not make sense in the context of human expectations.&lt;/aside&gt;&lt;p&gt;This is because we operate with an unstated assumption, that each position can contain only one number. This makes perfect sense to a human, but the SAT solver does not understand the meaning of the variables, it only sees clauses it was given. We can fix this simply by adding one more rule:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule 4 (Each position contains exactly one number)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;\[&lt;br/&gt;\forall (r, c) \in (rows \times columns): \operatorname{exactly-one}(x_{r, c}^{1}, x_{r, c}^{2}, \ldots, x_{r, c}^{9}))&lt;br/&gt;\]&lt;/p&gt;
&lt;p&gt;With this rule in place, we have fully translated the rules of Sudoku into SAT and can use a SAT solver to help us solve sudoku instances. But before we do that, we need to define the $\operatorname{exactly-one}$ helper our description of Sudoku relies on.&lt;/p&gt;
&lt;h4 id=&quot;exactlyonehelper&quot;&gt;exactly-one helper&lt;/h4&gt;
&lt;p&gt;There is no way to encode numeric constraints natively in boolean logic, but often you can decompose these constraints into simpler terms and encode these. Many research papers have been written about the efficient encoding of specific constraints and other gadgets, but in this post, we only need to deal with the most common and one of the simplest constraints possible: &quot;exactly one of this set of literals has to evaluate to true&quot;. Everyone who works with SAT often can write this constraint from memory, but we will derive it from first principles because it shows how more complex constraints can be constructed.&lt;/p&gt;
&lt;p&gt;The first step is to decompose the constraint $x == n$ into two parts: $x \ge n$ and $x \le n$, or for our specific case, $x \ge 1$ and $x \le 1$, or, translated into the world of SAT, at least 1 literal has to evaluate to &quot;true&quot;, and no more than 1 literal can evaluate to &quot;true&quot;. Forcing at &lt;em&gt;least one&lt;/em&gt; literal to be true is easy, just place all of them into one large disjunction:&lt;/p&gt;
&lt;p&gt;\[&lt;br/&gt;\bigvee_{lit \in Literals} lit&lt;br/&gt;\]&lt;/p&gt;
&lt;p&gt;Forcing &lt;em&gt;at most&lt;/em&gt; one literal to be true seems harder, but with a slight restating of the logic, it also becomes quite easy. At most one literal is true when &lt;em&gt;there is no pair of literals where both of the literals are true at the same time&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;\[&lt;br/&gt;\neg \bigvee_{i \in 1..n, j \in 1..n, i \neq j} lit_{i} \wedge lit_{j}&lt;br/&gt;\]&lt;/p&gt;
&lt;p&gt;This set of clauses says exactly that, but it has one problem: it is not in CNF. To convert them into CNF, we have to use &lt;a href=&quot;https://codingnest.com/modern-sat-solvers-fast-neat-underused-part-1-of-n/#conversiontocnf&quot;&gt;some of the identities in the previous section on converting formulas to CNF&lt;/a&gt;. Specifically, the fact that negating a disjunction leads to a conjunction of negations, and negating a conjunction leads to a disjunction of negations. Using these, we get the following CNF formula:&lt;/p&gt;
&lt;p&gt;\[&lt;br/&gt;\bigwedge_{i \in 1..n, j \in 1..n, i \neq j} \neg lit_{i} \vee \neg lit_{j}&lt;br/&gt;\]&lt;/p&gt;
&lt;p&gt;We can also use the fact that both conjunction and disjunction are commutative (there is no difference between $x \wedge y$ and $y \wedge x$) to halve the number of clauses we create, as we only need to consider literal pairs where $i &amp;lt; j$.&lt;/p&gt;
&lt;p&gt;Now that we know how to limit the number of &quot;true&quot; literals to both &lt;em&gt;at least&lt;/em&gt; 1 and &lt;em&gt;at most&lt;/em&gt; 1, limiting the number of &quot;true&quot; literals to &lt;em&gt;exactly&lt;/em&gt; 1 is trivial; just apply both constraints at the same time via conjunction.&lt;/p&gt;
&lt;h3 id=&quot;cimplementation&quot;&gt;C++ implementation&lt;/h3&gt;
&lt;p&gt;Now that we know how to describe Sudoku as a set of boolean clauses in CNF, we can implement a C++ code that uses this knowledge to solve arbitrary Sudoku. For brevity, this post will only contain relevant excerpts, &lt;a href=&quot;https://github.com/horenmar/sudoku-example&quot;&gt;but you can find the entire resulting code on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first thing we need to solve is addressing variables, specifically converting a (row, column, value) triple into a specific value that represents it in the SAT solver. Because Sudoku is highly regular, we can get away with linearizing the three dimensions into one, and get the number of variable corresponding to $x_{r, c}^{v}$ as &lt;code&gt;r * 9 * 9 + c * 9 + v&lt;/code&gt;. We can also use the fact that &lt;code&gt;Minisat::Var&lt;/code&gt;is just a plain &lt;code&gt;int&lt;/code&gt; numbered from 0 to avoid storing the variables at all because we can always compute the corresponding variable on-demand:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;Minisat::Var toVar(int row, int column, int value) {
    return row * columns * values + column * values + value;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now that we can quickly retrieve the SAT variable from a triplet of (row, column, value), but before we can use the variables, they need to be allocated inside the SAT solver:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;void Solver::init_variables() {
    for (int r = 0; r &amp;lt; rows; ++r) {
        for (int c = 0; c &amp;lt; columns; ++c) {
            for (int v = 0; v &amp;lt; values; ++v) {
                static_cast&amp;lt;void&amp;gt;(solver.newVar());
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With the variables allocated, we can start converting the SAT version of Sudoku rules into C++ code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule 1 (No row contains duplicate numbers)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;for (int row = 0; row &amp;lt; rows; ++row) {
    for (int value = 0; value &amp;lt; values; ++value) {
        Minisat::vec&amp;lt;Minisat::Lit&amp;gt; literals;
        for (int column = 0; column &amp;lt; columns; ++column) {
            literals.push(Minisat::mkLit(toVar(row, column, value)));
        }
        exactly_one_true(literals);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Rule 2 (No column contains duplicate numbers)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;for (int column = 0; column &amp;lt; columns; ++column) {
    for (int value = 0; value &amp;lt; values; ++value) {
        Minisat::vec&amp;lt;Minisat::Lit&amp;gt; literals;
        for (int row = 0; row &amp;lt; rows; ++row) {
            literals.push(Minisat::mkLit(toVar(row, column, value)));
        }
        exactly_one_true(literals);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Rule 3 (None of the 3x3 boxes contain duplicate numbers)&lt;/strong&gt;&lt;br/&gt;This rule results in the most complex code, as it requires two iterations -- one to iterate over all of the boxes and one to collect variables inside each box. However, the resulting code is still fairly trivial:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;for (int r = 0; r &amp;lt; 9; r += 3) {
    for (int c = 0; c &amp;lt; 9; c += 3) {
        for (int value = 0; value &amp;lt; values; ++value) {
            Minisat::vec&amp;lt;Minisat::Lit&amp;gt; literals;
            for (int rr = 0; rr &amp;lt; 3; ++rr) {
                for (int cc = 0; cc &amp;lt; 3; ++cc) {
                    literals.push(Minisat::mkLit(toVar(r + rr, c + cc, value)));
                }
            }
            exactly_one_true(literals);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Rule 4 (Each position contains exactly one number)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;for (int row = 0; row &amp;lt; rows; ++row) {
    for (int column = 0; column &amp;lt; columns; ++column) {
        Minisat::vec&amp;lt;Minisat::Lit&amp;gt; literals;
        for (int value = 0; value &amp;lt; values; ++value) {
            literals.push(Minisat::mkLit(toVar(row, column, value)));
        }
        exactly_one_true(literals);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We also need to define the &lt;code&gt;exactly_one_true&lt;/code&gt; helper:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void Solver::exactly_one_true(Minisat::vec&amp;lt;Minisat::Lit&amp;gt; const&amp;amp; literals) {
    solver.addClause(literals);
    for (size_t i = 0; i &amp;lt; literals.size(); ++i) {
        for (size_t j = i + 1; j &amp;lt; literals.size(); ++j) {
            solver.addClause(~literals[i], ~literals[j]);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With these snippets, we have defined a model of Sudoku as SAT. There are still 2 pieces of the solver missing: a method to specify values in the pre-filled positions of the board and a method that extracts the found solution to the puzzle.&lt;/p&gt;
&lt;p&gt;Fixing the values in specific positions is easy, we can just add a unary clause for each specified position:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;bool Solver::apply_board(board const&amp;amp; b) {
    for (int row = 0; row &amp;lt; rows; ++row) {
        for (int col = 0; col &amp;lt; columns; ++col) {
            auto value = b[row][col];
            if (value != 0) {
                solver.addClause(Minisat::mkLit(toVar(row, col, value - 1)));
            }
        }
    }
    return ret;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Because the only way to satisfy a unary clause is to set the appropriate variable to the polarity of the contained literal, this forces the specific position to always contain the desired value.&lt;/p&gt;
&lt;p&gt;To retrieve a solution, we need to be able to determine a position's value. Because only one of the variables for any given position can be set to true, the value corresponding to that specific variable is the value of the given position:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c++&quot;&gt;board Solver::get_solution() const {
    board b(rows, std::vector&amp;lt;int&amp;gt;(columns));
    for (int row = 0; row &amp;lt; rows; ++row) {
        for (int col = 0; col &amp;lt; columns; ++col) {
            for (int val = 0; val &amp;lt; values; ++val) {
                if (solver.modelValue(toVar(row, col, val)).isTrue()) {
                    b[row][col] = val + 1;
                    break;
                }
            }
        }
    }
    return b;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With the solver finished, we can go on to benchmarking its performance.&lt;/p&gt;
&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h2&gt;
&lt;p&gt;As far as I could tell from a cursory search, there are no standard test suites for benchmarking Sudoku solvers. I decided to follow &lt;a href=&quot;http://norvig.com/sudoku.html&quot;&gt;Norvig's blog post about his own Sudoku solver&lt;/a&gt; and use &lt;a href=&quot;https://raw.githubusercontent.com/horenmar/sudoku-example/master/inputs/benchmark/top95.txt&quot;&gt;this set of 95 hard Sudokus&lt;/a&gt; for measuring the performance of my solver.&lt;/p&gt;
&lt;p&gt;The measurements were done on PC with factory-clocked i5-6600K CPU @ 3.5 GHz, the code was compiled using &lt;code&gt;g++&lt;/code&gt; under Windows Subsystem for Linux, and each input was run 10 times. After that, I took the mean of the results for each problem and put all of them into a boxplot. Since I am a proponent of LTO builds, I also compiled the whole thing, including MiniSat, with LTO enabled, and then benchmarked the binary.&lt;/p&gt;
&lt;p&gt;These are the results:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://codingnest.com/content/images/2018/08/hi-qual-plot.png&quot; alt=&quot;hi-qual-plot&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the LTO build performed somewhat better, but not significantly so. What is interesting, is that the number of outliers &lt;em&gt;above&lt;/em&gt; the box, and the relative lengths of the whiskers, suggest that the underlying distribution of solver's running time over all of the inputs is heavy-tailed. This means that the longest-running inputs will need significantly longer to be solved than the others, and it is a common attribute of solvers for NP-complete problems. This is because a single wrong decision during the search for a solution can lengthen the total runtime significantly.&lt;/p&gt;
&lt;p&gt;There is one more question to answer, namely, how does this performance compare with high-performance Sudoku-specialized solvers? I picked 2, &lt;a href=&quot;http://forum.enjoysudoku.com/3-77us-solver-2-8g-cpu-testcase-17sodoku-t30470-90.html#p216748&quot;&gt;ZSolver&lt;/a&gt; and &lt;a href=&quot;https://github.com/dobrichev/fsss2&quot;&gt;fsss2&lt;/a&gt;, and tried running them on the same set of problems. Not too surprisingly, they both outperformed our SAT-based solver badly. The sort of &quot;converting&quot; solver we wrote will always be slower than a well-tuned specialised solver, but they do have some advantages that can make them desirable. As an example, I have no prior domain-specific knowledge about solving Sudokus, but I was able to write the SAT-based Sudoku solver in less than 2 hours. It is also much more readable and extendable.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;That is all for part 1, but I have much more I want to say about SAT solvers, so you can expect more posts about both using them, and about their internals and the theory behind why are they so fast.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 03 Aug 2018 23:52:01 +0000</pubDate>
<dc:creator>ScottWRobinson</dc:creator>
<og:type>article</og:type>
<og:title>Modern SAT solvers: fast, neat and underused (part 1 of N)</og:title>
<og:description>Before I started doing research, I saw SAT solvers as academically interesting but without practical uses ouside of other academic applications. I've since then changed my mind, and I want to change yours, because modern SAT solvers are neat, fast and almost criminally underused by the industry.</og:description>
<og:url>http://codingnest.com/modern-sat-solvers-fast-neat-underused-part-1-of-n/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://codingnest.com/modern-sat-solvers-fast-neat-underused-part-1-of-n/</dc:identifier>
</item>
<item>
<title>Ask HN: How to get web development career on track from being homeless?</title>
<link>https://news.ycombinator.com/item?id=17684451</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=17684451</guid>
<description>I am a current homeless web dev living in Portland, OR
&lt;p&gt;I saw another post by a homeless dev in CO after doing some searches to see if there were others out there like me.&lt;/p&gt;&lt;p&gt;I got here due to medical issues that have finally come to being managed after 3 years.&lt;/p&gt;
&lt;p&gt;I currently have zero cash, I am fairly new to Portland so I do not have friends and I have no family to lean on for support. I have 10 years of web dev experience, the last 3 years being very spotty; only a few contract jobs in and out.&lt;/p&gt;
&lt;p&gt;I have a bed in a shelter for now.&lt;/p&gt;
&lt;p&gt;I have tapped into the public health insurance so I can continue my medical visits.&lt;/p&gt;
&lt;p&gt;I have food stamps.&lt;/p&gt;
&lt;p&gt;I have a good laptop&lt;/p&gt;
&lt;p&gt;I am often on a university campus using the library for charging and net.&lt;/p&gt;
&lt;p&gt;My main problem is getting a job. This is where you come in HN community, please let me know what you all think or if you can relate.&lt;/p&gt;
&lt;p&gt;My main languages are PHP and Python. I have extensive front end experience with Javascript as well.&lt;/p&gt;
&lt;p&gt;No one is really looking for a PHP developer right now. And all the front end jobs want React/Redux experience or Angular. I have looked up and down on gigs and postings on Craigslist every single day.&lt;/p&gt;
&lt;p&gt;Question: What do I do? All the recruiters think I am fit for a senior level position, but with 3 years of on and off programming I am a bit rusty and I am afraid if I apply and fail skills tests at too many places word will get around.&lt;/p&gt;
&lt;p&gt;I really just want a relaxed junior level position, but those are hard to find. Everyone wants senior level guys in React and other frameworks I do not have. (Though I am currently teaching myself React and do know a good bit now.)&lt;/p&gt;
&lt;p&gt;I just want to get my career back on track and get out of this shelter&lt;/p&gt;
&lt;p&gt;Any advice for work, besides getting a min wage job. What do I do to get my web dev career back on track?&lt;/p&gt;
&lt;p&gt;Thanks for any and all comments and my email is in my profile&lt;/p&gt;
</description>
<pubDate>Fri, 03 Aug 2018 23:39:47 +0000</pubDate>
<dc:creator>pdxHomelessDev</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=17684451</dc:identifier>
</item>
</channel>
</rss>