<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>I Don’t Know How to Waste Time on the Internet Anymore</title>
<link>http://nymag.com/selectall/2018/05/i-dont-know-how-to-waste-time-on-the-internet-anymore.html</link>
<guid isPermaLink="true" >http://nymag.com/selectall/2018/05/i-dont-know-how-to-waste-time-on-the-internet-anymore.html</guid>
<description>&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjgsdoma0002sory69l0p255u@published&quot; data-word-count=&quot;84&quot;&gt;The other day, I found myself looking at a blinking cursor in a blank address bar in a new tab of my web browser. I was bored. I didn’t really feel like doing work, but I felt some distant compulsion to sit at my computer in a kind of work-simulacrum, so that at least at the end of the day I would feel gross and tired in the manner of someone who &lt;em&gt;had&lt;/em&gt; worked. What I really wanted to do was waste some time.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjgsdpflu000n3b5zxrnujinr@published&quot; data-word-count=&quot;66&quot;&gt;But … I didn’t know &lt;em&gt;how&lt;/em&gt;. I did not know what to type into the address bar of my browser. I stared at the cursor. Eventually, I typed “nytimes.com” and hit enter. Like a freaking dad. The entire world of the internet, one that used to boast so many ways to waste time, and here I was, &lt;em&gt;reading the news&lt;/em&gt;. It was even worse than working.&lt;/p&gt;

&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjgsdpfnm000s3b5zzrmlmf28@published&quot; data-word-count=&quot;161&quot;&gt;In high school, I took a computer class. I have no idea what I was supposed to be learning. Instead I browsed Fark (user-submitted links from around the web, sort of a proto-Reddit) and eBaum’s World (a mix of early memes, stolen content, and ads for hard-core porn), and printed guitar tabs that would turn out to be wildly incorrect. In college, I hung out on forums like Something Awful, a gigantic repository of jokes (some good), advice (mostly bad), and aimless chatter among thousands of also bored teens, experimenting and working within the staccato confines of the Bulletin Board System. There were writers, too; I read Seanbaby and Old Man Murray and other anarchic internet writers, posting irregularly and with zero professionalism on garish websites. Red text on black backgrounds, broken navigations. I wrote a LiveJournal, badly, and read the LiveJournals of my friends and friends of friends. Everyone said too much and said it poorly. It was incredibly entertaining.&lt;/p&gt;



&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjgsdpfn8000p3b5z34whtqhu@published&quot; data-word-count=&quot;100&quot;&gt;Facebook came in my first year of college. Just as eBaum’s World’s videos gave me a welcome excuse to ignore my computer class, albums of strangely similar photos taken on digicams in dimly lit house parties became my preferred time waster. &lt;em&gt;There’s Steve, from high school, in a spectacularly unflattering shot in someone’s dirty living room in a college town in Virginia, lit by a nuclear flash from someone’s Nikon Coolpix. Sick. Hey, what happened to that girl Steve dated? (She’s also in someone’s dirty living room, her eyes neon red, drinking right out of an $8 bottle of wine.)&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjgsdpfn6000o3b5zh1vdlwoo@published&quot; data-word-count=&quot;119&quot;&gt;This world — of blogs and forums and weird personal sites and early, college-era Facebook — was made for dicking around. After college, when I had a real job, with health insurance and a Keurig machine, I would read blogs, funny people talking about nothing in particular with no goal besides being entertaining for a three- to eight-minute block. These were evolutions of the Seanbaby type of writers. Their websites were comparatively elegant, set up for ease of reading. Gawker, Videogum, the Awl, the A.V. Club, Wonkette, various blogs even less commercial than those. There was one that just made fun of &lt;em&gt;Saved by the Bell&lt;/em&gt; episodes. I never even watched &lt;em&gt;Saved by the Bell&lt;/em&gt;, but I loved that one.&lt;/p&gt;

&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjgsdpfnr000t3b5z5iyins5x@published&quot; data-word-count=&quot;78&quot;&gt;I started a Twitter account, and fell into a world of good, dumb, weird jokes, links to new sites and interesting ideas. It was such an excellent place to waste time that I almost didn’t notice that the blogs and link-sharing sites I’d once spent hours on had become less and less viable. Where once we’d had a rich ecosystem of extremely stupid and funny sites on which we might procrastinate, we now had only Twitter and Facebook.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjgsdpfnc000q3b5zswdozpbg@published&quot; data-word-count=&quot;66&quot;&gt;And then, one day, I think in 2013, Twitter and Facebook were not really very fun anymore. And worse, the fun things they had supplanted were never coming back. Forums were depopulated; blogs were shut down. Twitter, one agent of their death, became completely worthless: a water-drop-torture feed of performative outrage, self-promotion, and discussion of Twitter itself. Facebook had become, well … you’ve been on Facebook.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjgsdpfnf000r3b5zk55gpq5w@published&quot; data-word-count=&quot;87&quot;&gt;In the decade since I took that computer class, the web browser has taken over the entire computing experience. There is nothing to “learn” about computers, really, except how to use a browser; everything you might want to do is done from that stupid empty address bar. Today, through that web browser, there are movies and TV shows and every song ever recorded; it’s where I do my writing and chatting and messaging; it’s where my notes and calendars and social networks live. It’s everything except fun.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjgsdpfo9000u3b5zvkvv8cxf@published&quot; data-word-count=&quot;116&quot;&gt;There is an argument that this my fault. I followed the wrong people; I am too nostalgic about bad blogs; I am in my 30s and what I used to think was fun time-killing is now deadly. But I don’t think so. What happened is that the internet stopped being something you went to in order to separate from the real world — from your job and your work and your obligations and responsibilities. It’s not the place you seek to waste time, but the place you go to so that you’ll someday have time to waste. The internet is a utility world for me now. It is efficient and all-encompassing. It is not very much fun.&lt;/p&gt;
</description>
<pubDate>Mon, 14 May 2018 18:32:29 +0000</pubDate>
<dc:creator>minimaxir</dc:creator>
<og:title>I Don’t Know How to Waste Time on the Internet Anymore</og:title>
<og:url>http://nymag.com/selectall/2018/05/i-dont-know-how-to-waste-time-on-the-internet-anymore.html</og:url>
<og:description>The other day, I found myself looking at a blank address bar in a new tab of my web browser. I wanted to waste time, but … I didn’t know how.</og:description>
<og:image>https://pixel.nymag.com/imgs/daily/selectall/2018/05/07/07-search.w1200.h630.gif</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://nymag.com/selectall/2018/05/i-dont-know-how-to-waste-time-on-the-internet-anymore.html</dc:identifier>
</item>
<item>
<title>Launch HN: Necto (YC W18) – ISP Starter Kit</title>
<link>https://news.ycombinator.com/item?id=17067144</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=17067144</guid>
<description>&lt;td colspan=&quot;2&quot;/&gt;&lt;td readability=&quot;44.178781317662&quot;&gt;Hey, we're Ben and Adam, the founders of Necto (&lt;a href=&quot;https://nectolab.io&quot; rel=&quot;nofollow&quot;&gt;https://nectolab.io&lt;/a&gt;). We're enabling local entrepreneurs to start their own Internet Service Providers by providing network engineering, monitoring, and business support as a service. We've seen huge improvements in last mile distribution technology in the last few years (cost, reliability, thoroughput, ease of deployment), but it hasn't translated into an explosion of ISP operators. We want to change that by allowing non-network-engineers to deploy their own networks and compete with the incumbents. Necto handles the networking setup, deals with the backbone providers, helps with distribution planning, and provides ongoing monitoring and support. The operators pick the markets, set the prices, and provide a great overall experience to their customers.
&lt;p&gt;We started our own ISP here in the underserved San Francisco markets of Bayview and Portola, with more neighborhoods to come. If you live in SF, we'd love to be your ISP (&lt;a href=&quot;https://joinnecto.com&quot; rel=&quot;nofollow&quot;&gt;https://joinnecto.com&lt;/a&gt;). If you're interested in starting an ISP, we're looking for an initial batch of 5 operators. You can learn more about that here: &lt;a href=&quot;https://nectolab.io&quot; rel=&quot;nofollow&quot;&gt;https://nectolab.io&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Our product is a combination of a few important requirements for running an ISP effectively: a centralized Network Operations Center (NOC), a Operational Support System (OSS) to manage the subscribers and get visibility into issues, and an Operator's Handbook that covers the how-to's of running an ISP (both technically and our advice on the business side). Our NOC will handle things like BGP, routing, reachability, hardware issues, upstream connectivity, and distribution provisioning. The OSS supports managing subscribers, diagnosing common issues, and performing installations. Our handbook provides a list Standard Operating Procedures for day-to-day management of the ISP and, in combination with our community of ISP operators, strategies on how to effectively launch and grow an ISP.&lt;/p&gt;
&lt;p&gt;We charge an initial setup fee and an ongoing percentage of revenue. The initial setup fee covers us designing your initial network, sourcing your backbone connection, and the cost of the core routing stack. The ongoing percentage of revenue aligns our incentives with our operators and covers monitoring, the NOC, and ongoing enhancements for the software and community. The exact numbers depend on the scale of the network the operators are building.&lt;/p&gt;
&lt;p&gt;We're staunch supporters of Net Neutrality and increasing broadband penetration without sacrificing privacy. We don't sell personal information or throttle traffic (and our operators won't either). We believe that the future is in highly localized ISPs competing on service quality. We're excited to tackle this problem because we've had to deal with poor internet service before, and we now know that you can make a great business out of providing better quality access. Our backgrounds are in enterprise automation technology and the home services industry (air conditioning, plumbing, electric). We're happy to answer as many questions about any of this as we can! If you're at all considering starting an ISP in your neighborhood after reading this, let us know at nectolab.io and include your HN username!&lt;/p&gt;
&lt;p&gt;Thanks, Ben &amp;amp; Adam&lt;/p&gt;
&lt;/td&gt;
</description>
<pubDate>Mon, 14 May 2018 17:00:00 +0000</pubDate>
<dc:creator>montasaurus</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=17067144</dc:identifier>
</item>
<item>
<title>Prefrontal cortex as a meta-reinforcement learning system</title>
<link>https://deepmind.com/blog/prefrontal-cortex-meta-reinforcement-learning-system/</link>
<guid isPermaLink="true" >https://deepmind.com/blog/prefrontal-cortex-meta-reinforcement-learning-system/</guid>
<description>&lt;p&gt;In fact, we found that the meta-RL agent could learn to quickly adapt in a wide domain of tasks with different rules and structures. And because the network learned how to adapt to a variety of  tasks, it also learned general principles about how to learn efficiently.&lt;/p&gt;
&lt;p&gt;Importantly, we saw that the majority of learning took place in the recurrent network, which supports our proposal that dopamine plays a more integral role in the meta-learning process than previously thought. Dopamine is traditionally understood to strengthen synaptic links in the prefrontal system, reinforcing particular behaviours. In AI, this means the dopamine-like reward signal adjusts the artificial synaptic weights in a neural network as it learns the right way to solve a task. However, in our experiments the weights of the neural network were frozen, meaning they couldn’t be adjusted during the learning process, yet, the meta-RL agent was still able to solve and adapt to new tasks. This shows us that dopamine-like reward isn't only used to adjust weights, but it also conveys and encodes important information about abstract task and rule structure, allowing faster adaptation to new tasks.&lt;/p&gt;
&lt;p&gt;Neuroscientists have long observed similar patterns of neural activations in the prefrontal cortex, which is quick to adapt and flexible, but have struggled to find an adequate explanation for why that’s the case. The idea that the prefrontal cortex isn’t relying on slow synaptic weight changes to learn rule structures, but is using abstract model-based information directly encoded in dopamine, offers a more satisfactory reason for its versatility.&lt;/p&gt;
&lt;p&gt;In demonstrating that the key ingredients thought to give rise to meta-reinforcement learning in AI also exist in the brain, we’ve posed a theory that not only fits with what is known about both dopamine and prefrontal cortex but that also explains a range of mysterious findings from neuroscience and psychology. In particular, the theory sheds new light on how structured, model-based learning emerges in the brain, why dopamine itself contains model-based information, and how neurons in the prefrontal cortex become tuned to learning-related signals. Leveraging insights from AI which can be applied to explain findings in neuroscience and psychology highlights the value each field can offer the other. Going forward, we anticipate that much benefit can be gained in the reverse direction, by taking guidance from specific organisation of brain circuits in designing new models for learning in reinforcement learning agents.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;This work was completed by Jane X. Wang, Zeb Kurth-Nelson, Dharshan Kumaran, Dhruva Tirumala, Hubert Soyer, Joel Z. Leibo, Demis Hassabis and Matthew Botvinick.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 14 May 2018 16:49:16 +0000</pubDate>
<dc:creator>godelmachine</dc:creator>
<og:title>Prefrontal cortex as a meta-reinforcement learning system | DeepMind</og:title>
<og:url>https://deepmind.com/blog/prefrontal-cortex-meta-reinforcement-learning-system/</og:url>
<og:description>In our new paper in Nature Neuroscience, we use the meta-reinforcement learning framework developed in AI research to investigate the role of dopamine in the brain in helping us to learn. We propose that dopamine’s role goes beyond just using reward to learn the value of past actions and that it plays an integral role, specifically within the prefrontal cortex area, in allowing us to learn efficiently, rapidly and flexibly on new tasks.</og:description>
<og:image>https://storage.googleapis.com/deepmind-live-cms/images/Blog-NN-Thumb-Img-180509-r01.width-600.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://deepmind.com/blog/prefrontal-cortex-meta-reinforcement-learning-system/</dc:identifier>
</item>
<item>
<title>John Carmack: My Steve Jobs Stories</title>
<link>https://m.facebook.com/permalink.php?story_fbid=2146412825593223&amp;id=100006735798590</link>
<guid isPermaLink="true" >https://m.facebook.com/permalink.php?story_fbid=2146412825593223&amp;id=100006735798590</guid>
<description>&lt;p&gt;Steve Jobs&lt;/p&gt;
&lt;p&gt;My wife once asked me “Why do you drop what you are doing when Steve Jobs asks you to do something? You don’t do that for anyone else.”&lt;/p&gt;
&lt;p&gt;It is worth thinking about.&lt;/p&gt;
&lt;p&gt;As a teenage Apple computer fan, Jobs and Wozniak were revered figures for me, and wanting an Apple 2 was a defining characteristic of several years of my childhood. Later on, seeing NeXT at a computer show just as I was selling my first commercial software felt like a vision into the future. (But $10k+, yikes!)&lt;/p&gt;
&lt;p&gt;As Id Software grew successful through Commander Keen and Wolfenstein 3D, the first major personal purchase I made wasn’t a car, but rather a NeXT computer. It turned out to be genuinely valuable for our software development, and we moved the entire company onto NeXT hardware.&lt;/p&gt;
&lt;p&gt;We loved our NeXTs, and we wanted to launch Doom with an explicit “Developed on NeXT computers” logo during the startup process, but when we asked, the request was denied.&lt;/p&gt;
&lt;p&gt;Some time after launch, when Doom had begun to make its cultural mark, we heard that Steve had changed his mind and would be happy to have NeXT branding on it, but that ship had sailed. I did think it was cool to trade a few emails with Steve Jobs.&lt;/p&gt;
&lt;p&gt;Several things over the years made me conclude that, at his core, Steve didn’t think very highly of games, and always wished they weren’t as important to his platforms as they turned out to be. I never took it personally.&lt;/p&gt;
&lt;p&gt;When NeXT managed to sort of reverse-acquire Apple and Steve was back in charge, I was excited by the possibilities of a resurgent Apple with the virtues of NeXT in a mainstream platform.&lt;/p&gt;
&lt;p&gt;I was brought in to talk about the needs of games in general, but I made it my mission to get Apple to adopt OpenGL as their 3D graphics API. I had a lot of arguments with Steve.&lt;/p&gt;
&lt;p&gt;Part of his method, at least with me, was to deride contemporary options and dare me to tell him differently. They might be pragmatic, but couldn’t actually be good. “I have Pixar. We will make something [an API] that is actually good.”&lt;/p&gt;
&lt;p&gt;It was often frustrating, because he could talk, with complete confidence, about things he was just plain wrong about, like the price of memory for video cards and the amount of system bandwidth exploitable by the AltiVec extensions.&lt;/p&gt;
&lt;p&gt;But when I knew what I was talking about, I would stand my ground against anyone.&lt;/p&gt;
&lt;p&gt;When Steve did make up his mind, he was decisive about it. Dictates were made, companies were acquired, keynotes were scheduled, and the reality distortion field kicked in, making everything else that was previously considered into obviously terrible ideas.&lt;/p&gt;
&lt;p&gt;I consider this one of the biggest indirect impacts on the industry that I have had. OpenGL never seriously threatened D3D on PC, but it was critical at Apple, and that meant that it remained enough of a going concern to be the clear choice when mobile devices started getting GPUs. While long in the tooth now, it was so much better than what we would have gotten if half a dozen SoC vendors rolled their own API back at the dawn of the mobile age.&lt;/p&gt;
&lt;p&gt;I wound up doing several keynotes with Steve, and it was always a crazy fire drill with not enough time to do things right, and generally requiring heroic effort from many people to make it happen at all. I tend to think this was also a calculated part of his method.&lt;/p&gt;
&lt;p&gt;My first impression of “Keynote Steve” was him berating the poor stage hands over “This Home Depot shit” that was rolling out the display stand with the new Mac, very much not to his satisfaction. His complaints had a valid point, and he improved the quality of the presentation by caring about details, but I wouldn’t have wanted to work for him in that capacity.&lt;/p&gt;
&lt;p&gt;One time, my wife, then fiancée, and I were meeting with Steve at Apple, and he wanted me to do a keynote that happened to be scheduled on the same day as our wedding. With a big smile and full of charm, he suggested that we postpone it. We declined, but he kept pressing. Eventually my wife countered with a suggestion that if he really wanted “her” John so much, he should loan John Lassiter to her media company for a day of consulting. Steve went from full charm to ice cold really damn quick. I didn’t do that keynote.&lt;/p&gt;
&lt;p&gt;When I was preparing an early technology demo of Doom 3 for a keynote in Japan, I was having a hard time dealing with some of the managers involved that were insisting that I change the demo because “Steve doesn’t like blood.” I knew that Doom 3 wasn’t to his taste, but that wasn’t the point of doing the demo.&lt;/p&gt;
&lt;p&gt;I brought it to Steve, with all the relevant people on the thread. He replied to everyone with:&lt;/p&gt;
&lt;p&gt;“I trust you John, do whatever you think is great.”&lt;/p&gt;
&lt;p&gt;That goes a long way, and nobody said a thing after that.&lt;/p&gt;
&lt;p&gt;When my wife and I later started building games for feature phones (DoomRPG! Orcs&amp;amp;Elves!), I advocated repeatedly to Steve that an Apple phone could be really great. Every time there was a rumor that Apple might be working on a phone, I would refine the pitch to him. Once he called me at home on a Sunday (How did he even get my number?) to ask a question, and I enthused at length about the possibilities.&lt;/p&gt;
&lt;p&gt;I never got brought into the fold, but I was excited when the iPhone actually did see the light of day. A giant (for the time) true color display with a GPU! We could do some amazing things with this!&lt;/p&gt;
&lt;p&gt;Steve first talked about application development for iPhone at the same keynote I was demonstrating the new ID Tech 5 rendering engine on Mac, so I was in the front row. When he started going on about “Web Apps”, I was (reasonably quietly) going “Booo!!!”.&lt;/p&gt;
&lt;p&gt;After the public cleared out and the rest of us were gathered in front of the stage, I started urgently going on about how web apps are terrible, and wouldn’t show the true potential of the device. We could do so much more with real native access!&lt;/p&gt;
&lt;p&gt;Steve responded with a line he had used before: “Bad apps could bring down cell phone towers.” I hated that line. He could have just said “We aren’t ready”, and that would have been fine.&lt;/p&gt;
&lt;p&gt;I was making some guesses, but I argued that the iPhone hardware and OS provided sufficient protection for native apps. I pointed at a nearby engineer and said “Don’t you have an MMU and process isolation on the iPhone now?” He had a wide eyed look of don’t-bring-me-into-this, but I eventually got a “yes” out of him.&lt;/p&gt;
&lt;p&gt;I said that OS-X was surely being used for things that were more security critical than a phone, and if Apple couldn’t provide enough security there, they had bigger problems. He came back with a snide “You’re a smart guy John, why don’t you write a new OS?” At the time, my thought was, “Fuck you, Steve.”.&lt;/p&gt;
&lt;p&gt;People were backing away from us. If Steve was mad, Apple employees didn’t want him to associate the sight of them with the experience. Afterwards, one of the execs assured me that “Steve appreciates vigorous conversation”.&lt;/p&gt;
&lt;p&gt;Still deeply disappointed about it, I made some comments that got picked up by the press. Steve didn’t appreciate that.&lt;/p&gt;
&lt;p&gt;The Steve Jobs “hero / shithead” rollercoaster was real, and after riding high for a long time, I was now on the down side. Someone told me that Steve explicitly instructed them to not give me access to the early iPhone SDK when it finally was ready.&lt;/p&gt;
&lt;p&gt;I wound up writing several successful iPhone apps on the side (all of which are now gone due to dropping 32 bit support, which saddens me), and I had many strong allies inside Apple, but I was on the outs with Steve.&lt;/p&gt;
&lt;p&gt;The last iOS product I worked on was Rage for iOS, which I thought set a new bar for visual richness on mobile, and also supported some brand new features like TV out. I heard that it was well received inside Apple.&lt;/p&gt;
&lt;p&gt;I was debriefing the team after the launch when I got a call. I was busy, so I declined it. A few minutes later someone came in and said that Steve was going to call me. Oops.&lt;/p&gt;
&lt;p&gt;Everyone had a chuckle about me “hanging up on Steve Jobs”, but that turned out to be my last interaction with him.&lt;/p&gt;
&lt;p&gt;As the public story of his failing health progressed, I started several emails to try to say something meaningful and positive to part on, but I never got through them, and I regret it.&lt;/p&gt;
&lt;p&gt;I corroborate many of the negative character traits that he was infamous for, but elements of the path that led to where I am today were contingent on the dents he left in the universe.&lt;/p&gt;
&lt;p&gt;I showed up for him.&lt;/p&gt;
</description>
<pubDate>Mon, 14 May 2018 16:31:10 +0000</pubDate>
<dc:creator>AJRF</dc:creator>
<og:title>John Carmack</og:title>
<og:description>Steve Jobs My wife once asked me “Why do you drop what you are doing when Steve Jobs asks you to do something? You don’t do that for anyone else.” It is worth thinking about. As a teenage Apple...</og:description>
<og:image>https://scontent.fphx1-2.fna.fbcdn.net/v/t1.0-1/cp0/e15/q65/p200x200/10525819_1515727755328403_3791257847922948008_n.jpg?_nc_cat=0&amp;oh=dc82d206cde6af8719c14561e335f586&amp;oe=5B902B9F</og:image>
<og:url>https://www.facebook.com/story.php?story_fbid=2146412825593223&amp;id=100006735798590</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://m.facebook.com/permalink.php?story_fbid=2146412825593223&amp;id=100006735798590</dc:identifier>
</item>
<item>
<title>Employers are monitoring computers, toilet breaks, even emotions</title>
<link>https://www.theguardian.com/world/2018/may/14/is-your-boss-secretly-or-not-so-secretly-watching-you</link>
<guid isPermaLink="true" >https://www.theguardian.com/world/2018/may/14/is-your-boss-secretly-or-not-so-secretly-watching-you</guid>
<description>&lt;p&gt;&lt;span class=&quot;drop-cap&quot;&gt;&lt;span class=&quot;drop-cap__inner&quot;&gt;L&lt;/span&gt;&lt;/span&gt;ast year an &lt;a href=&quot;https://www.theguardian.com/commentisfree/2017/aug/04/surveillance-employers-spy-implanted-chipped&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;American company microchipped dozens of its workers&lt;/a&gt;. In a “chip party” that made headlines around the world, employees lined up to have a device the size of a grain of rice implanted under the skin between their thumb and forefinger. At first, Todd Westby, the CEO of Three Square Market, thought only about five or six people – him and a couple of directors, some of the people who worked in the IT department – would volunteer. But of the 90 people who work at the headquarters, 72 are now chipped; Westby has a chip in each hand. They can be used to open security doors, log on to computers and make payments at the company’s vending machines.&lt;/p&gt;
&lt;p&gt;Can he see it taking off at lots of other companies? “Not necessarily,” he says. Or at least not yet. It’s partly a generational thing, he believes. “You may never want to be chipped but if you’re a millennial, you have no problems. They think it’s cool.” There are other uses for it – two months ago, the company (whose core business is selling vending machines and kiosks) started chipping people with dementia in Puerto Rico. If someone wanders off and gets lost, police can scan the chip “and they will know all their medical information, what drugs they can and can’t have, they’ll know their identity.” So far, Three Square Market has chipped 100 people, but plans to do 10,000.&lt;/p&gt;
&lt;p&gt;The company has just launched a mobile phone app that pairs the chip with the phone’s GPS, enabling the implantee’s location to be tracked. Last week, it started using it with people released from prison on probation, as a replacement for ankle tags, which Westby describes as “intimidating and degrading”. Could he ever see the company using GPS to track its chipped employees? “No,” he says. “There’s no reason to.”&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Tony Danna, vice president of at Three Square Market, gets his microchip implant.&quot; src=&quot;https://i.guim.co.uk/img/media/da44c631715ac49e4b0da9aeedc3cb45e175fc95/0_487_4753_2851/master/4753.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=1b8cef1c1a44117f876f4b2a6827a44c&quot;/&gt;&lt;/div&gt;

Tony Danna, vice-president at Three Square Market, gets his microchip implant. Photograph: Jeff Baenen/AP
&lt;p&gt;Not all firms would agree. Tech companies are coming up with ever more bizarre and intrusive ways to monitor workforces. Last week the Times reported that some Chinese companies are using sensors in helmets and hats to scan workers’ brainwaves and detect fatigue, stress and even emotions such as anger. It added that one electrical company uses brainwave scans to decide how many breaks workers get, and for how long. The technology is used on high-speed train drivers to “detect fatigue and attention loss”. While this sort of technology may have legitimate safety applications – &lt;a href=&quot;https://learninglegacy.crossrail.co.uk/documents/workforce-fatigue-risk-management-using-wearable-technolgy/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;a similar project was carried out with Crossrail workers&lt;/a&gt; using wristbands that sensed fatigue – it’s not hard to see how it could creep into other areas.&lt;/p&gt;
&lt;p&gt;In February, it was reported that Amazon had been granted patents for a wristband that not only tracked workers’ locations in the warehouse as they “picked” items to be dispatched, but could “read” their hand movements, buzzing or emitting a pulse to alert them when they were reaching for the wrong item. In the filing, Amazon describes it as being able to “monitor performance of the placing of the incoming inventory item into the identified storage location by the inventory system worker”.&lt;/p&gt;
&lt;p&gt;There are tech companies selling products that can take regular screenshots of employees’ work, monitor keystrokes and web usage, and even photograph them at their desks using their computers’ webcams. Working from home offers no protection, as all this can be done remotely. Software can monitor social media usage, analyse language or be installed on employees’ phones to monitor encrypted apps such as WhatsApp. Employees can be fitted with badges that not only track their location, but also monitor their tone of voice, how often they speak in meetings and who they speak to and for how long.&lt;/p&gt;
&lt;p&gt;Employees have always been watched at work, and technology has always been used to do it. But where it was once a factory foreman with a stopwatch, or workers having to physically clock in and out, now “all of that physical stuff has gone into digital technology”, says &lt;a href=&quot;https://www.theguardian.com/profile/andre-spicer&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;André Spicer&lt;/a&gt;, professor of organisational behaviour at Cass Business School. “It captures things that you weren’t able to capture in the past, like how many keystrokes are people taking, what are they looking at on their screen while they’re at work, what kind of language are they using. And surveillance follows you outside the workplace now.”&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Some Chinese companies are using sensors to detect employees’ levels of fatigue and their emotional state.&quot; src=&quot;https://i.guim.co.uk/img/media/0bd2ab0ed07808c4187f10b04309f2de518946bb/0_87_4200_2519/master/4200.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=046380adb5331b83f7caa1557486224c&quot;/&gt;&lt;/div&gt;

Some Chinese companies are using sensors to detect employees’ levels of fatigue and their emotional state. Photograph: AFP/Getty Images
&lt;p&gt;How much of this is legal? In the UK, employers are allowed to monitor which websites you look at while at work, says Philip Landau, a partner at Landau Law Solicitors who specialises in employment law. “However, the device they monitor must be partly or wholly provided by work. Employers must also give prior warning if they are going to monitor your online activity, and should make you aware of the relevant social media policy.” It is also legal to monitor keystrokes, though again employees must be told they will be watched. “In companies where this system is in place, it is not uncommon for employers to speak to employees if they feel that their number of keystrokes is low,” says Landau. “It is worth noting that a high number of keystrokes does not necessarily mean high levels of productivity and vice versa.”&lt;/p&gt;
&lt;p&gt;Employers could theoretically use your computer’s webcam to see when you’re at your desk but “there should be a justification for such monitoring, and you should be informed of it beforehand. You should also be informed what the pictures will be used for, and how they will be stored.” As for GPS tracking, “a company may track any vehicles that they supply to their staff. However, the data they collect must only be used for the management purposes of the company. Any GPS device is not allowed to be turned on if the employee is using the vehicle for personal reasons outside of work.”&lt;/p&gt;
&lt;p&gt;James Bloodworth spent a month working as a “picker” – the person who locates the products ordered – for Amazon in March 2016 for his book &lt;a href=&quot;https://www.theguardian.com/books/2018/mar/11/hired-six-months-undercover-in-low-wage-britain-zero-hours-review-james-bloodworth&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Hired: Six Months Undercover in Low-Wage Britain&lt;/a&gt;. “We carried this handheld device at all times and it tracks your productivity,” he says. It would direct workers to the items they need to find on the shelves in one of Amazon’s vast warehouses. “Each time you picked up an item, there would be this countdown timer [to get to the next item] which would measure your productivity.” Bloodworth says supervisors would tell people how productive they were being; he was warned he was in the bottom 10%. “You were also sent admonishments through the device saying you need to get your productivity up. You’re constantly tracked and rated. I found you couldn’t keep up with the productivity targets without running – yet you were also told you weren’t allowed to run, and if you did, you’d get a disciplinary. But if you fell behind in productivity, you’d get a disciplinary for that as well.” It didn’t feel, he says, “that you were really treated as a human being”. Workers had to go through airport-style security scanners at the beginning and end of their shifts, or to get to the break areas. He says going to the loo was described as “idle time” and once found a bottle of urine on one of the shelves.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;A worker in an Amazon distribution centre.&quot; src=&quot;https://i.guim.co.uk/img/media/7633fa096b42db6468e07a740b5e2c2a939b6fa1/0_0_3500_2100/master/3500.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=2844eb5c78ca448d54c7627c832ffa4b&quot;/&gt;&lt;/div&gt;

A worker in an Amazon distribution centre. Photograph: Ralph Freso/Reuters
&lt;p&gt;Amazon says its scanning devices “are common across the warehouse and logistics sector as well as in supermarkets, department stores and other businesses, and are designed to assist our people in performing their roles”, while the company “ensures all of its associates have easy access to toilet facilities, which are just a short walk from where they are working”. It adds: “Associates are allowed to use the toilet whenever needed. We do not monitor toilet breaks.”&lt;/p&gt;
&lt;p&gt;Some of Bloodworth’s colleagues, he says, were angry about the level of monitoring – “but it was more cynicism and resignation. Most of the people I met hadn’t been in the job very long or were looking for other jobs. Every job was temporary and it was a workforce completely in flux.” Has Bloodworth seen the future? Will we all be monitored like this by our bosses in years to come? Possibly, he says. “One of the things that has arisen in response to the book is that people say work is going to be automated anyway, or workers need to be more flexible, as if this is the way of the future and it’s inevitable, which I think is quite dangerous. Amazon can get away with this because of political choices and because the trade union movement is quite weak. I think other businesses will look at Amazon, see they have had success with this business model – and seek to replicate it.”&lt;/p&gt;
&lt;p&gt;For his book &lt;a href=&quot;https://www.theguardian.com/careers/2017/feb/16/as-a-call-centre-worker-i-saw-how-employees-are-stripped-of-their-rights&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Working the Phones, Jamie Woodcock&lt;/a&gt;, a sociologist of work at the Oxford Internet Institute, spent six months working in a call centre. You get a sense of the monitoring, he says, “from the moment you walk in. You have TV screens that have everyone’s relative performance to each other displayed. Managers collect data on almost every single part of what you do. Every single phone call I ever made was digitally recorded and stored. In terms of monitoring, it’s like being able to call back every single thing somebody has made on an assembly line and retrospectively judge it for quality. We all make mistakes and we all have bad days, but this kind of monitoring can be made retrospectively to sack people and is used to give people a sense that they could lose their jobs at any moment.”&lt;/p&gt;
&lt;p&gt;Monitoring is built into many of the jobs that form the so-called “gig economy”. It’s not easy to object to the constant surveillance when you’re desperate for work. What has surprised Spicer is how willingly people in better-paid jobs have taken to it. “Prisoners in the past were forced to wear tracking bands but now we willingly put on step trackers or other kinds of tracking devices given to us by our employers, and in some cases we pay for the privilege.” Companies such as IBM, BP, Bank of America, Target and Barclays &lt;a href=&quot;https://www.fastcompany.com/3058462/how-fitbit-became-the-next-big-thing-in-corporate-wellness&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;have offered their employees Fitbit activity trackers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is part, Spicer says, of “this whole idea of wanting to improve or optimise yourself. A lot of technology is designed to not just feed back data about your performance to your boss, but also give it to you. I guess they’re also seen as cool or fashionable, so it’s not surprising they’re taken up so readily.”&lt;/p&gt;
&lt;p&gt;Spicer has watched the shift away from “monitoring something like emails to monitoring people’s bodies – the rise of bio-tracking basically. The monitoring of your vital signs, emotions, moods.” Of Three Square Market’s practice of chipping employees, he says: “You can imagine that slowly extending. You could imagine things like employers asking to have your DNA in the future, and other kinds of data.”&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Deliveroo already monitors its riders and drivers’ performance.&quot; src=&quot;https://i.guim.co.uk/img/media/71ed23395ec3817a93be7cde981935aca0ca03b8/0_46_3500_2100/master/3500.jpg?w=300&amp;amp;q=55&amp;amp;auto=format&amp;amp;usm=12&amp;amp;fit=max&amp;amp;s=6e72bbf197c3dee949f1b7863d0c29cf&quot;/&gt;&lt;/div&gt;

Deliveroo already monitors its riders and drivers’ performance. Photograph: Charles Platiau/Reuters
&lt;p&gt;Surveillance can have positive applications. It’s necessary (and legally required) in the financial industry to prevent insider trading. It could be used to prevent harassment and bullying, and to root out bias and discrimination. &lt;a href=&quot;https://hbr.org/2017/10/a-study-used-sensors-to-show-that-men-and-women-are-treated-differently-at-work&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;One interesting study last year&lt;/a&gt; monitored emails and productivity, and used sensors to track behaviour and interaction with management, and found that men and women behaved almost identically at work. The findings challenged the belief that the reason women are not promoted to senior levels is that they are less proactive or have fewer interactions with leaders, and simply need to “lean in”.&lt;/p&gt;
&lt;p&gt;Still, says, Woodcock, “we need to have a conversation in society about whether work should be somewhere that you’re surveilled”. That need is perhaps most urgent where low-paid, insecure jobs are concerned. “If you work in the gig economy, you have a smartphone,” Woodcock points out, and that smartphone can be used to track you. “I think because many of these workplaces don’t have traditional forms of organisation or trade unions, management are able to introduce these things with relatively little collective resistance.”&lt;/p&gt;
&lt;p&gt;The Independent Workers Union of Great Britain is well aware of the issues of monitoring and data collection. James Farrar is the chair of its United Private Hire Drivers branch, and the Uber driver who won a legal battle against the company last year for drivers’ rights. “They do collect an awful lot of information,” he says. “One of the things they will report to you on a daily basis is how good your acceleration and braking has been. You get a rating. The question is: why are they collecting that information?” Uber also monitors “unusual movements” of the phone when someone is driving (implying it knows if someone is using their phone while at the wheel) and, of course, tracks cars and drivers by GPS.&lt;/p&gt;
&lt;p&gt;“My concern with it is this information is being fed into a dispatch algorithm,” he says. “We should have access to the data and understand how it’s being used. If some kind of quality score on my driving capability [is put into an algorithm], I may be offered less valuable work, kept away from the most valuable clients – who knows?” It’s not an unreasonable fear – the food delivery company Deliveroo already does something similar, monitoring its riders’ and drivers’ performance, and has started offering &lt;a href=&quot;https://www.buzzfeed.com/saraspary/deliveroo-drivers-say-the-companys-new-terms-are-forcing?utm_term=.ceeRLjazA#.iyx273Ow5&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;“priority access” when booking shifts to those who “provide the most consistent, quality service”&lt;/a&gt;. Uber, however, says its monitoring is intended only to deliver “a smoother, safer ride … This data is used to inform drivers of their driving habits and is not used to affect future trip requests.”&lt;/p&gt;
&lt;p&gt;Not all surveillance is bad, says Farrar. In some ways, he would like more. He was assaulted by a passenger and is calling for CCTV in all vehicles, partly for the safety of drivers. “There is a role for surveillance technology,” he says. Ironically, when Farrar went for a meeting with Uber to discuss the assault, the company made him turn his phone off to prove he wasn’t recording it.&lt;/p&gt;


</description>
<pubDate>Mon, 14 May 2018 15:36:42 +0000</pubDate>
<dc:creator>pmoriarty</dc:creator>
<og:url>http://www.theguardian.com/world/2018/may/14/is-your-boss-secretly-or-not-so-secretly-watching-you</og:url>
<og:description>From microchip implants to wristband trackers and sensors that can detect fatigue and depression, new technology is enabling employers to watch staff in more and more intrusive ways. How worried should we be?</og:description>
<og:image>https://i.guim.co.uk/img/media/4fe1c0e4e173f2ac7e3428b93d99e5ce2dcded5a/43_0_1280_768/master/1280.jpg?w=1200&amp;h=630&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;crop=faces%2Centropy&amp;bm=normal&amp;ba=bottom%2Cleft&amp;blend64=aHR0cHM6Ly91cGxvYWRzLmd1aW0uY28udWsvMjAxOC8wMS8zMS9mYWNlYm9va19kZWZhdWx0LnBuZw&amp;s=9e1b57c80d4ae497fae2babab0953ea2</og:image>
<og:type>article</og:type>
<og:title>Employers are monitoring computers, toilet breaks – even emotions. Is your boss watching you?</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theguardian.com/world/2018/may/14/is-your-boss-secretly-or-not-so-secretly-watching-you</dc:identifier>
</item>
<item>
<title>How Rust 1.26 more than tripled the speed of my code</title>
<link>http://troubles.md/posts/the-power-of-compilers/</link>
<guid isPermaLink="true" >http://troubles.md/posts/the-power-of-compilers/</guid>
<description>&lt;aside/&gt;&lt;p&gt;I’d like to share a quick story about the sheer power of LLVM and the benefits of using higher-level languages over assembly.&lt;/p&gt;
&lt;p&gt;I work at Parity Technologies, who maintains the &lt;a href=&quot;https://github.com/paritytech/parity&quot;&gt;Parity Ethereum client&lt;/a&gt;. In this client we have a need for performant 256-bit arithmetic, which we have to emulate in software since no modern hardware supports it natively.&lt;/p&gt;
&lt;p&gt;For a long time we’ve maintained parallel implementations of arithmetic, one in Rust for stable builds and one in inline assembly (which is automatically used when you compile with the nightly compiler). We do this because we store these 256-bit numbers as arrays of 64-bit numbers and there is no way to multiply two 64-bit numbers to get a more-than-64-bit result in Rust (since Rust’s integer types only go up to &lt;code&gt;u64&lt;/code&gt;). This is despite the fact that x86_64 (our main target platform) natively supports 128-bit results of calculations with 64-bit numbers. So, we resort to splitting the 64-bit numbers into two 32-bit numbers (because we &lt;em&gt;can&lt;/em&gt; multiply two 32-bit numbers to get a 64-bit result).&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;24&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;impl&lt;/span&gt; U256 {
  &lt;span&gt;fn&lt;/span&gt; &lt;span&gt;full_mul&lt;/span&gt;(self, other: &lt;span&gt;Self&lt;/span&gt;) -&amp;gt; &lt;span&gt;U512&lt;/span&gt; {
    &lt;span&gt;let&lt;/span&gt; U256(&lt;span&gt;ref&lt;/span&gt; me) &lt;span&gt;=&lt;/span&gt; self;
    &lt;span&gt;let&lt;/span&gt; U256(&lt;span&gt;ref&lt;/span&gt; you) &lt;span&gt;=&lt;/span&gt; other;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; ret &lt;span&gt;=&lt;/span&gt; [&lt;span&gt;0&lt;/span&gt;&lt;span&gt;u64&lt;/span&gt;; U512_SIZE];


    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;..U256_SIZE {
      &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; carry &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;u64&lt;/span&gt;;
      &lt;span&gt;// `split` splits a 64-bit number into upper and lower halves
&lt;/span&gt;      &lt;span&gt;let&lt;/span&gt; (b_u, b_l) &lt;span&gt;=&lt;/span&gt; split(you[i]);

      &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;..U256_SIZE {
        &lt;span&gt;// This process is so slow that it's faster to check for 0 and skip
&lt;/span&gt;        &lt;span&gt;// it if possible.
&lt;/span&gt;        &lt;span&gt;if&lt;/span&gt; me[j] &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;||&lt;/span&gt; carry &lt;span&gt;!=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; {
          &lt;span&gt;let&lt;/span&gt; a &lt;span&gt;=&lt;/span&gt; split(me[j]);

          &lt;span&gt;// `mul_u32` multiplies a 64-bit number that's been split into
&lt;/span&gt;          &lt;span&gt;// an `(upper, lower)` pair by a 32-bit number to get a 96-bit
&lt;/span&gt;          &lt;span&gt;// result. Yes, 96-bit (it returns a `(u32, u64)` pair).
&lt;/span&gt;          &lt;span&gt;let&lt;/span&gt; (c_l, overflow_l) &lt;span&gt;=&lt;/span&gt; mul_u32(a, b_l, ret[i &lt;span&gt;+&lt;/span&gt; j]);

          &lt;span&gt;// Since we have to multiply by a 64-bit number, we have to do
&lt;/span&gt;          &lt;span&gt;// this twice.
&lt;/span&gt;          &lt;span&gt;let&lt;/span&gt; (c_u, overflow_u) &lt;span&gt;=&lt;/span&gt; mul_u32(a, b_u, c_l &lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span&gt;32&lt;/span&gt;);
          ret[i &lt;span&gt;+&lt;/span&gt; j] &lt;span&gt;=&lt;/span&gt; (c_l &lt;span&gt;&amp;amp;&lt;/span&gt; &lt;span&gt;0xffffffff&lt;/span&gt;) &lt;span&gt;+&lt;/span&gt; (c_u &lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span&gt;32&lt;/span&gt;);

          &lt;span&gt;// Then we have to do this complex logic to set the result. Gross.
&lt;/span&gt;          &lt;span&gt;let&lt;/span&gt; res &lt;span&gt;=&lt;/span&gt; (c_u &lt;span&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span&gt;32&lt;/span&gt;) &lt;span&gt;+&lt;/span&gt; (overflow_u &lt;span&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span&gt;32&lt;/span&gt;);
          &lt;span&gt;let&lt;/span&gt; (res, o1) &lt;span&gt;=&lt;/span&gt; res.overflowing_add(overflow_l &lt;span&gt;+&lt;/span&gt; carry);
          &lt;span&gt;let&lt;/span&gt; (res, o2) &lt;span&gt;=&lt;/span&gt; res.overflowing_add(ret[i &lt;span&gt;+&lt;/span&gt; j &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;]);
          ret[i &lt;span&gt;+&lt;/span&gt; j &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;] &lt;span&gt;=&lt;/span&gt; res;

          carry &lt;span&gt;=&lt;/span&gt; (o1 &lt;span&gt;|&lt;/span&gt; o2) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;u64&lt;/span&gt;;
        }
      }
    }

    U512(ret)
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You don’t even have to understand all of the code to see how non-optimal this is. Inspecting the output of the compiler shows that the generated assembly is extremely suboptimal. It does much more work than necessary essentially just to work around limitations in the Rust language. So we wrote an inline assembly version. The important thing about using inline assembly here is that x86_64 natively supports multiplying two 64-bit values into a 128-bit result. When Rust does &lt;code&gt;a * b&lt;/code&gt; when &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are both &lt;code&gt;u64&lt;/code&gt; the CPU actually multiplies them to create a 128-bit result and then Rust just throws away the upper 64 bits. We want the upper 64 in this case though, and the only way to access it efficiently is by using inline assembly.&lt;/p&gt;
&lt;p&gt;As you can imagine, our assembly implementation was much faster:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; name            u64.bench ns/iter  inline_asm.bench ns/iter  diff ns/iter   diff %  speedup 
 u256_full_mul   243,159            197,396                        -45,763  -18.82%   x 1.23 
 u256_mul        268,750            95,843                        -172,907  -64.34%   x 2.80 
 u256_mul_small  1,608              789                               -819  -50.93%   x 2.04 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;u256_full_mul&lt;/code&gt; tests the function above, &lt;code&gt;u256_mul&lt;/code&gt; multiplies two 256-bit numbers to get a 256-bit result (in Rust, we just create a 512-bit result and then throw away the top half but in assembly we have a seperate implementation), and &lt;code&gt;u256_mul_small&lt;/code&gt; multiplies two small 256-bit numbers. As you can see, the assembly implementation is up to 65% faster. This is way, way better. Unfortunately, it only works on nightly, and even then only on x86_64. The truth is that it was a lot of effort and a number of thrown-away implementations to even get the Rust code to “only” half the speed of the assembly, too. There was simply no good way to give the compiler the information necessary.&lt;/p&gt;
&lt;p&gt;All that changed with &lt;a href=&quot;https://blog.rust-lang.org/2018/05/10/Rust-1.26.html&quot;&gt;Rust 1.26&lt;/a&gt;. Now we can do &lt;code&gt;a as u128 * b as u128&lt;/code&gt; and the compiler will use x86_64’s native u64-to-u128 multiplication (even though you cast both numbers to &lt;code&gt;u128&lt;/code&gt; it knows that they’re “really” just &lt;code&gt;u64&lt;/code&gt;, you just want a &lt;code&gt;u128&lt;/code&gt; result). That means our code now looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;impl&lt;/span&gt; U256 {
  &lt;span&gt;fn&lt;/span&gt; &lt;span&gt;full_mul&lt;/span&gt;(self, other: &lt;span&gt;Self&lt;/span&gt;) -&amp;gt; &lt;span&gt;U512&lt;/span&gt; {
    &lt;span&gt;let&lt;/span&gt; U256(&lt;span&gt;ref&lt;/span&gt; me) &lt;span&gt;=&lt;/span&gt; self;
    &lt;span&gt;let&lt;/span&gt; U256(&lt;span&gt;ref&lt;/span&gt; you) &lt;span&gt;=&lt;/span&gt; other;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; ret &lt;span&gt;=&lt;/span&gt; [&lt;span&gt;0&lt;/span&gt;&lt;span&gt;u64&lt;/span&gt;; U512_SIZE];

    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;..U256_SIZE {
      &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; carry &lt;span&gt;=&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;u64&lt;/span&gt;;
      &lt;span&gt;let&lt;/span&gt; b &lt;span&gt;=&lt;/span&gt; you[i];

      &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;..U256_SIZE {
        &lt;span&gt;let&lt;/span&gt; a &lt;span&gt;=&lt;/span&gt; me[j];

        &lt;span&gt;// This compiles down to just use x86's native 128-bit arithmetic
&lt;/span&gt;        &lt;span&gt;let&lt;/span&gt; (hi, low) &lt;span&gt;=&lt;/span&gt; split_u128(a &lt;span&gt;as&lt;/span&gt; u128 &lt;span&gt;*&lt;/span&gt; b &lt;span&gt;as&lt;/span&gt; u128);

        &lt;span&gt;let&lt;/span&gt; overflow &lt;span&gt;=&lt;/span&gt; {
          &lt;span&gt;let&lt;/span&gt; existing_low &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; ret[i &lt;span&gt;+&lt;/span&gt; j];
          &lt;span&gt;let&lt;/span&gt; (low, o) &lt;span&gt;=&lt;/span&gt; low.overflowing_add(&lt;span&gt;*&lt;/span&gt;existing_low);
          &lt;span&gt;*&lt;/span&gt;existing_low &lt;span&gt;=&lt;/span&gt; low;
          o
        };

        carry &lt;span&gt;=&lt;/span&gt; {
          &lt;span&gt;let&lt;/span&gt; existing_hi &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;mut&lt;/span&gt; ret[i &lt;span&gt;+&lt;/span&gt; j &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;];
          &lt;span&gt;let&lt;/span&gt; hi &lt;span&gt;=&lt;/span&gt; hi &lt;span&gt;+&lt;/span&gt; overflow &lt;span&gt;as&lt;/span&gt; &lt;span&gt;u64&lt;/span&gt;;
          &lt;span&gt;let&lt;/span&gt; (hi, o0) &lt;span&gt;=&lt;/span&gt; hi.overflowing_add(carry);
          &lt;span&gt;let&lt;/span&gt; (hi, o1) &lt;span&gt;=&lt;/span&gt; hi.overflowing_add(&lt;span&gt;*&lt;/span&gt;existing_hi);
          &lt;span&gt;*&lt;/span&gt;existing_hi &lt;span&gt;=&lt;/span&gt; hi;

          (o0 &lt;span&gt;|&lt;/span&gt; o1) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;u64&lt;/span&gt;
        }
      }
    }

    U512(ret)
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although it’s almost certainly not as fast as using the LLVM-native &lt;code&gt;i256&lt;/code&gt; type, the speed is much, much better. Here it is compared to the original Rust implementation:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; name            u64.bench ns/iter  u128.bench ns/iter  diff ns/iter   diff %  speedup 
 u256_full_mul   243,159            73,416                  -169,743  -69.81%   x 3.31 
 u256_mul        268,750            85,797                  -182,953  -68.08%   x 3.13 
 u256_mul_small  1,608              558                       -1,050  -65.30%   x 2.88 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which is great, we now get a speed boost on stable. Since we only compile the binaries for the Parity client on stable the only people who could use the assembly before were those who compiled from source, so this is an improvement for a lot of users. But wait, there’s more! The new compiled code actually manages to beat the assembly implementation by a significant margin, even beating the assembly on the benchmark that multiplies two 256-bit numbers to get a 256-bit result. This is despite the fact that the Rust code still produces a 512-bit result first and then discards the upper half, where the assembly implementation does not:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; name            inline_asm.bench ns/iter  u128.bench ns/iter  diff ns/iter   diff %  speedup 
 u256_full_mul   197,396                   73,416                  -123,980  -62.81%   x 2.69 
 u256_mul        95,843                    85,797                   -10,046  -10.48%   x 1.12 
 u256_mul_small  789                       558                         -231  -29.28%   x 1.41 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For the full multiplication that’s an absolutely massive improvement, especially since the original code used highly-optimised assembly incantations from our resident cycle wizard. Here’s where the faint of heart might want to step out for a moment, because I’m about to dive into the generated assembly.&lt;/p&gt;
&lt;p&gt;Here’s the hand-written assembly. I’ve presented it without comment because I want to comment the assembly that is actually emitted by the compiler (since, as you’ll see, the &lt;code&gt;asm!&lt;/code&gt; macro hides more than you’d expect):&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;110&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;impl&lt;/span&gt; U256 {
  &lt;span&gt;/// Multiplies two 256-bit integers to produce full 512-bit integer
&lt;/span&gt;  &lt;span&gt;/// No overflow possible
&lt;/span&gt;  &lt;span&gt;pub&lt;/span&gt; &lt;span&gt;fn&lt;/span&gt; &lt;span&gt;full_mul&lt;/span&gt;(self, other: &lt;span&gt;U256&lt;/span&gt;) -&amp;gt; &lt;span&gt;U512&lt;/span&gt; {
    &lt;span&gt;let&lt;/span&gt; self_t: &lt;span&gt;&amp;amp;&lt;/span&gt;[&lt;span&gt;u64&lt;/span&gt;; &lt;span&gt;4&lt;/span&gt;] &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;self.&lt;span&gt;0&lt;/span&gt;;
    &lt;span&gt;let&lt;/span&gt; other_t: &lt;span&gt;&amp;amp;&lt;/span&gt;[&lt;span&gt;u64&lt;/span&gt;; &lt;span&gt;4&lt;/span&gt;] &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt;other.&lt;span&gt;0&lt;/span&gt;;
    &lt;span&gt;let&lt;/span&gt; &lt;span&gt;mut&lt;/span&gt; result: [&lt;span&gt;u64&lt;/span&gt;; &lt;span&gt;8&lt;/span&gt;] &lt;span&gt;=&lt;/span&gt; &lt;span&gt;unsafe&lt;/span&gt; { ::core::mem::uninitialized() };
    &lt;span&gt;unsafe&lt;/span&gt; {
      asm&lt;span&gt;!&lt;/span&gt;(&lt;span&gt;&quot;
&lt;/span&gt;&lt;span&gt;        mov $8, %rax
&lt;/span&gt;&lt;span&gt;        mulq $12
&lt;/span&gt;&lt;span&gt;        mov %rax, $0
&lt;/span&gt;&lt;span&gt;        mov %rdx, $1
&lt;/span&gt;&lt;span&gt;        mov $8, %rax
&lt;/span&gt;&lt;span&gt;        mulq $13
&lt;/span&gt;&lt;span&gt;        add %rax, $1
&lt;/span&gt;&lt;span&gt;        adc $$0, %rdx
&lt;/span&gt;&lt;span&gt;        mov %rdx, $2
&lt;/span&gt;&lt;span&gt;        mov $8, %rax
&lt;/span&gt;&lt;span&gt;        mulq $14
&lt;/span&gt;&lt;span&gt;        add %rax, $2
&lt;/span&gt;&lt;span&gt;        adc $$0, %rdx
&lt;/span&gt;&lt;span&gt;        mov %rdx, $3
&lt;/span&gt;&lt;span&gt;        mov $8, %rax
&lt;/span&gt;&lt;span&gt;        mulq $15
&lt;/span&gt;&lt;span&gt;        add %rax, $3
&lt;/span&gt;&lt;span&gt;        adc $$0, %rdx
&lt;/span&gt;&lt;span&gt;        mov %rdx, $4
&lt;/span&gt;&lt;span&gt;        mov $9, %rax
&lt;/span&gt;&lt;span&gt;        mulq $12
&lt;/span&gt;&lt;span&gt;        add %rax, $1
&lt;/span&gt;&lt;span&gt;        adc %rdx, $2
&lt;/span&gt;&lt;span&gt;        adc $$0, $3
&lt;/span&gt;&lt;span&gt;        adc $$0, $4
&lt;/span&gt;&lt;span&gt;        xor $5, $5
&lt;/span&gt;&lt;span&gt;        adc $$0, $5
&lt;/span&gt;&lt;span&gt;        xor $6, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $6
&lt;/span&gt;&lt;span&gt;        xor $7, $7
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $9, %rax
&lt;/span&gt;&lt;span&gt;        mulq $13
&lt;/span&gt;&lt;span&gt;        add %rax, $2
&lt;/span&gt;&lt;span&gt;        adc %rdx, $3
&lt;/span&gt;&lt;span&gt;        adc $$0, $4
&lt;/span&gt;&lt;span&gt;        adc $$0, $5
&lt;/span&gt;&lt;span&gt;        adc $$0, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $9, %rax
&lt;/span&gt;&lt;span&gt;        mulq $14
&lt;/span&gt;&lt;span&gt;        add %rax, $3
&lt;/span&gt;&lt;span&gt;        adc %rdx, $4
&lt;/span&gt;&lt;span&gt;        adc $$0, $5
&lt;/span&gt;&lt;span&gt;        adc $$0, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $9, %rax
&lt;/span&gt;&lt;span&gt;        mulq $15
&lt;/span&gt;&lt;span&gt;        add %rax, $4
&lt;/span&gt;&lt;span&gt;        adc %rdx, $5
&lt;/span&gt;&lt;span&gt;        adc $$0, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $10, %rax
&lt;/span&gt;&lt;span&gt;        mulq $12
&lt;/span&gt;&lt;span&gt;        add %rax, $2
&lt;/span&gt;&lt;span&gt;        adc %rdx, $3
&lt;/span&gt;&lt;span&gt;        adc $$0, $4
&lt;/span&gt;&lt;span&gt;        adc $$0, $5
&lt;/span&gt;&lt;span&gt;        adc $$0, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $10, %rax
&lt;/span&gt;&lt;span&gt;        mulq $13
&lt;/span&gt;&lt;span&gt;        add %rax, $3
&lt;/span&gt;&lt;span&gt;        adc %rdx, $4
&lt;/span&gt;&lt;span&gt;        adc $$0, $5
&lt;/span&gt;&lt;span&gt;        adc $$0, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $10, %rax
&lt;/span&gt;&lt;span&gt;        mulq $14
&lt;/span&gt;&lt;span&gt;        add %rax, $4
&lt;/span&gt;&lt;span&gt;        adc %rdx, $5
&lt;/span&gt;&lt;span&gt;        adc $$0, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $10, %rax
&lt;/span&gt;&lt;span&gt;        mulq $15
&lt;/span&gt;&lt;span&gt;        add %rax, $5
&lt;/span&gt;&lt;span&gt;        adc %rdx, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $11, %rax
&lt;/span&gt;&lt;span&gt;        mulq $12
&lt;/span&gt;&lt;span&gt;        add %rax, $3
&lt;/span&gt;&lt;span&gt;        adc %rdx, $4
&lt;/span&gt;&lt;span&gt;        adc $$0, $5
&lt;/span&gt;&lt;span&gt;        adc $$0, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $11, %rax
&lt;/span&gt;&lt;span&gt;        mulq $13
&lt;/span&gt;&lt;span&gt;        add %rax, $4
&lt;/span&gt;&lt;span&gt;        adc %rdx, $5
&lt;/span&gt;&lt;span&gt;        adc $$0, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $11, %rax
&lt;/span&gt;&lt;span&gt;        mulq $14
&lt;/span&gt;&lt;span&gt;        add %rax, $5
&lt;/span&gt;&lt;span&gt;        adc %rdx, $6
&lt;/span&gt;&lt;span&gt;        adc $$0, $7
&lt;/span&gt;&lt;span&gt;        mov $11, %rax
&lt;/span&gt;&lt;span&gt;        mulq $15
&lt;/span&gt;&lt;span&gt;        add %rax, $6
&lt;/span&gt;&lt;span&gt;        adc %rdx, $7
&lt;/span&gt;&lt;span&gt;        &quot;&lt;/span&gt;
      : &lt;span&gt;/* $0 */&lt;/span&gt; &lt;span&gt;&quot;={r8}&quot;&lt;/span&gt;(result[&lt;span&gt;0&lt;/span&gt;]),  &lt;span&gt;/* $1 */&lt;/span&gt; &lt;span&gt;&quot;={r9}&quot;&lt;/span&gt;(result[&lt;span&gt;1&lt;/span&gt;]),  &lt;span&gt;/* $2 */&lt;/span&gt; &lt;span&gt;&quot;={r10}&quot;&lt;/span&gt;(result[&lt;span&gt;2&lt;/span&gt;]),
        &lt;span&gt;/* $3 */&lt;/span&gt; &lt;span&gt;&quot;={r11}&quot;&lt;/span&gt;(result[&lt;span&gt;3&lt;/span&gt;]), &lt;span&gt;/* $4 */&lt;/span&gt; &lt;span&gt;&quot;={r12}&quot;&lt;/span&gt;(result[&lt;span&gt;4&lt;/span&gt;]), &lt;span&gt;/* $5 */&lt;/span&gt; &lt;span&gt;&quot;={r13}&quot;&lt;/span&gt;(result[&lt;span&gt;5&lt;/span&gt;]),
        &lt;span&gt;/* $6 */&lt;/span&gt; &lt;span&gt;&quot;={r14}&quot;&lt;/span&gt;(result[&lt;span&gt;6&lt;/span&gt;]), &lt;span&gt;/* $7 */&lt;/span&gt; &lt;span&gt;&quot;={r15}&quot;&lt;/span&gt;(result[&lt;span&gt;7&lt;/span&gt;])

      : &lt;span&gt;/* $8 */&lt;/span&gt; &lt;span&gt;&quot;m&quot;&lt;/span&gt;(self_t[&lt;span&gt;0&lt;/span&gt;]),   &lt;span&gt;/* $9 */&lt;/span&gt; &lt;span&gt;&quot;m&quot;&lt;/span&gt;(self_t[&lt;span&gt;1&lt;/span&gt;]),   &lt;span&gt;/* $10 */&lt;/span&gt;  &lt;span&gt;&quot;m&quot;&lt;/span&gt;(self_t[&lt;span&gt;2&lt;/span&gt;]),
        &lt;span&gt;/* $11 */&lt;/span&gt; &lt;span&gt;&quot;m&quot;&lt;/span&gt;(self_t[&lt;span&gt;3&lt;/span&gt;]),  &lt;span&gt;/* $12 */&lt;/span&gt; &lt;span&gt;&quot;m&quot;&lt;/span&gt;(other_t[&lt;span&gt;0&lt;/span&gt;]), &lt;span&gt;/* $13 */&lt;/span&gt; &lt;span&gt;&quot;m&quot;&lt;/span&gt;(other_t[&lt;span&gt;1&lt;/span&gt;]),
        &lt;span&gt;/* $14 */&lt;/span&gt; &lt;span&gt;&quot;m&quot;&lt;/span&gt;(other_t[&lt;span&gt;2&lt;/span&gt;]), &lt;span&gt;/* $15 */&lt;/span&gt; &lt;span&gt;&quot;m&quot;&lt;/span&gt;(other_t[&lt;span&gt;3&lt;/span&gt;])
      : &lt;span&gt;&quot;rax&quot;&lt;/span&gt;, &lt;span&gt;&quot;rdx&quot;&lt;/span&gt;
      :
      );
    }

    U512(result)
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here’s what that generates. I’ve heavily commented it so you can understand what’s going on even if you’ve never touched assembly in your life, but you will need to know basic low-level details like the difference between memory and registers. If you want to get a primer on the structure of a CPU, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Central_processing_unit#Structure_and_implementation&quot;&gt;Wikipedia article on structure and implementation of CPUs&lt;/a&gt; is a good place to start:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;132&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;libbigint.so`disassemble:
    ;; Function prelude - this is generated by Rust
    pushq  %r15
    pushq  %r14
    pushq  %r13
    pushq  %r12
    subq   $0x40, %rsp

    ;; Load the input arrays into registers...
    movq   0x68(%rsp), %rax
    movq   0x70(%rsp), %rcx
    movq   0x78(%rsp), %rdx
    movq   0x80(%rsp), %rsi
    movq   0x88(%rsp), %r8
    movq   0x90(%rsp), %r9
    movq   0x98(%rsp), %r10
    movq   0xa0(%rsp), %r11

    ;; ...and then immediately back into memory
    ;; This is done by the Rust compiler. There is a way to avoid
    ;; this happening but I'll get to that later
    ;; These four are the first input array
    movq   %rax, 0x38(%rsp)
    movq   %rcx, 0x30(%rsp)
    movq   %rdx, 0x28(%rsp)
    movq   %rsi, 0x20(%rsp)
    ;; These four are the output array, which is initialised to be
    ;; the same as the second input array.
    movq   %r8,  0x18(%rsp)
    movq   %r9,  0x10(%rsp)
    movq   %r10, 0x8(%rsp)
    movq   %r11, (%rsp)

    ;; This is the main loop, you'll see the same code repeated many
    ;; times since it's been unrolled so I won't go over it every time.
    ;; This takes the form of a loop that looks like:
    ;;
    ;; for i in 0..U256_SIZE {
    ;;     for j in 0..U256_SIZE {
    ;;         /* Loop body */
    ;;     }
    ;; }

    ;; Load the `0`th element of the input array into the &quot;%rax&quot;
    ;; register so we can operate on it. The first element is actually
    ;; already in `%rax` at this point but it gets loaded again anyway.
    ;; This is because the `asm!` macro is hiding a lot of details, which
    ;; I'll get to later.
    movq   0x38(%rsp), %rax
    ;; Multiply it with the `0`th element of the output array This operates
    ;; on memory rather than a register, and so is significantly slower than
    ;; if the same operation had been done on a register. Again, I'll get to
    ;; that soon.
    mulq   0x18(%rsp)
    ;; `mulq` multiplies two 64-bit numbers and stores the low and high
    ;; 64 bits of the result in `%rax` and `%rdx`, respectively. We move
    ;; the low bits into `%r8` (the lowest 64 bits of the 512-bit result)
    ;; and the high bits into `%r9` (the second-lowest 64 bits of the
    ;; result).
    movq   %rax, %r8
    movq   %rdx, %r9

    ;; We do the same for `i = 0, j = 1`
    movq   0x38(%rsp), %rax
    mulq   0x10(%rsp)

    ;; Whereas above we moved the values into the output registers, this time
    ;; we have to add the results to the output.
    addq   %rax, %r9

    ;; Here we add 0 because the CPU will use the &quot;carry bit&quot; (whether or not
    ;; the previous addition overflowed) as an additional input. This is
    ;; essentially the same as adding 1 to `rdx` if the previous addition
    ;; overflowed.
    adcq   $0x0, %rdx

    ;; Then we move the upper 64 bits of the multiplication (plus the carry bit
    ;; from the addition) into the third-lowest 64 bits of the output.
    movq   %rdx, %r10

    ;; Then we continue for `j = 2` and `j = 3`
    movq   0x38(%rsp), %rax
    mulq   0x8(%rsp)
    addq   %rax,       %r10
    adcq   $0x0,       %rdx
    movq   %rdx,       %r11
    movq   0x38(%rsp), %rax
    mulq   (%rsp)
    addq   %rax,       %r11
    adcq   $0x0,       %rdx
    movq   %rdx,       %r12

    ;; Then we do the same for `i = 1`, `i = 2` and `i = 3`
    movq   0x30(%rsp), %rax
    mulq   0x18(%rsp)  
    addq   %rax,       %r9
    adcq   %rdx,       %r10
    adcq   $0x0,       %r11
    adcq   $0x0,       %r12

    ;; This `xor` just ensures that `%r13` is zeroed. Again, this is
    ;; non-optimal (we don't need to zero these registers at all) but
    ;; I'll get to that.
    xorq   %r13,       %r13
    adcq   $0x0,       %r13
    xorq   %r14,       %r14
    adcq   $0x0,       %r14
    xorq   %r15,       %r15
    adcq   $0x0,       %r15
    movq   0x30(%rsp), %rax
    mulq   0x10(%rsp)  
    addq   %rax,       %r10
    adcq   %rdx,       %r11
    adcq   $0x0,       %r12
    adcq   $0x0,       %r13
    adcq   $0x0,       %r14
    adcq   $0x0,       %r15
    movq   0x30(%rsp), %rax
    mulq   0x8(%rsp)   
    addq   %rax,       %r11
    adcq   %rdx,       %r12
    adcq   $0x0,       %r13
    adcq   $0x0,       %r14
    adcq   $0x0,       %r15
    movq   0x30(%rsp), %rax
    mulq   (%rsp)      
    addq   %rax,       %r12
    adcq   %rdx,       %r13
    adcq   $0x0,       %r14
    adcq   $0x0,       %r15
    movq   0x28(%rsp), %rax
    mulq   0x18(%rsp)  
    addq   %rax,       %r10
    adcq   %rdx,       %r11
    adcq   $0x0,       %r12
    adcq   $0x0,       %r13
    adcq   $0x0,       %r14
    adcq   $0x0,       %r15
    movq   0x28(%rsp), %rax
    mulq   0x10(%rsp)  
    addq   %rax,       %r11
    adcq   %rdx,       %r12
    adcq   $0x0,       %r13
    adcq   $0x0,       %r14
    adcq   $0x0,       %r15
    movq   0x28(%rsp), %rax
    mulq   0x8(%rsp)   
    addq   %rax,       %r12
    adcq   %rdx,       %r13
    adcq   $0x0,       %r14
    adcq   $0x0,       %r15
    movq   0x28(%rsp), %rax
    mulq   (%rsp)      
    addq   %rax,       %r13
    adcq   %rdx,       %r14
    adcq   $0x0,       %r15
    movq   0x20(%rsp), %rax
    mulq   0x18(%rsp)  
    addq   %rax,       %r11
    adcq   %rdx,       %r12
    adcq   $0x0,       %r13
    adcq   $0x0,       %r14
    adcq   $0x0,       %r15
    movq   0x20(%rsp), %rax
    mulq   0x10(%rsp)  
    addq   %rax,       %r12
    adcq   %rdx,       %r13
    adcq   $0x0,       %r14
    adcq   $0x0,       %r15
    movq   0x20(%rsp), %rax
    mulq   0x8(%rsp)   
    addq   %rax,       %r13
    adcq   %rdx,       %r14
    adcq   $0x0,       %r15
    movq   0x20(%rsp), %rax
    mulq   (%rsp)      
    addq   %rax,       %r14
    adcq   %rdx,       %r15

    ;; Finally, we move everything out of registers so we can
    ;; return it on the stack
    movq   %r8,   (%rdi)
    movq   %r9,   0x8(%rdi)
    movq   %r10,  0x10(%rdi)
    movq   %r11,  0x18(%rdi)
    movq   %r12,  0x20(%rdi)
    movq   %r13,  0x28(%rdi)
    movq   %r14,  0x30(%rdi)
    movq   %r15,  0x38(%rdi)
    movq   %rdi,  %rax
    addq   $0x40, %rsp
    popq   %r12
    popq   %r13
    popq   %r14
    popq   %r15
    retq   &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So as you can see from my comments, there are a lot of inefficiencies in this code. We multiply on variables from memory instead of from registers, we do superfluous stores and loads, also the CPU has to do many stores and loads before even getting to the “real” code (the multiply-add loop), which is important because although the CPU can do loads and stores in parallel with calculations, the way that this code is written requires it to wait for everything to be loaded before it starts doing calculations. This is because the &lt;code&gt;asm&lt;/code&gt; macro hides a lot of details. Essentially you’re telling the compiler to put the input data wherever it likes, and then to substitute wherever it put the data into your assembly code with string manipulation. The compiler stores everything into registers, but then we instruct it to put the input arrays in memory (with the &lt;code&gt;&quot;m&quot;&lt;/code&gt; before the input parameters) so it loads it back into memory again. There are ways that you could write this code to remove the inefficiencies in it, but it is clearly very difficult for even a seasoned professional to write the correct code here. This code is bug-prone - if you hadn’t zeroed the output registers with the series of &lt;code&gt;xor&lt;/code&gt; instructions then the code would fail sometimes but not always, with seemingly-random values that depended on the calling function’s internal state. It could probably be sped up by replacing &lt;code&gt;&quot;m&quot;&lt;/code&gt; with &lt;code&gt;&quot;r&quot;&lt;/code&gt; here (I hadn’t tested that because I only realised that this is a problem while investigating why the old assembly was so much slower in the course of writing this article), but that’s not clear from reading the source code of the program and only someone with quite in-depth knowledge of LLVM’s assembly syntax would realise that when looking at the code.&lt;/p&gt;
&lt;p&gt;By comparison, the Rust code that uses &lt;code&gt;u128&lt;/code&gt; is about as say-what-you-mean as you can get. Even if your goal was not optimisation you would probably write something similar to it as the simplest solution to the problem, but the code that LLVM produces is very high-quality. You can see already that it’s not too different to our hand-written code, but it addresses some of the issues (commented below) while also including a couple more optimisations that I wouldn’t have even thought of. I couldn’t find any significant optimisations that it missed.&lt;/p&gt;
&lt;p&gt;Here’s the generated assembly:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;147&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;libbigint.so`disassemble:
    ;; Function prelude
    pushq  %rbp
    movq   %rsp, %rbp
    pushq  %r15
    pushq  %r14
    pushq  %r13
    pushq  %r12
    pushq  %rbx
    subq   $0x48, %rsp

    movq   0x10(%rbp), %r11
    movq   0x18(%rbp), %rsi

    movq   %rsi, -0x38(%rbp)

    ;; I originally thought that this was a missed optimisation,
    ;; but it actually has to do this (instead of doing
    ;; `movq 0x30(%rbp), %rax`) because the `%rax` register gets
    ;; clobbered by the `mulq` below. This means it can multiply
    ;; the first element of the first array by each of the
    ;; elements of th without having to reload it from memory
    ;; like the hand-written assembly does.
    movq   0x30(%rbp), %rcx
    movq   %rcx,       %rax

    ;; LLVM multiplies from a register instead of from memory
    mulq   %r11

    ;; LLVM moves `%rdx` (the upper bits) into a register, since
    ;; we need to operate on it further. It moves `%rax` (the
    ;; lower bits) directly into memory because we don't need
    ;; to do any further work on it. This is better than moving
    ;; in and out of memory like we do in the previous code.
    movq   %rdx, %r9
    movq   %rax, -0x70(%rbp)
    movq   %rcx, %rax
    mulq   %rsi
    movq   %rax, %rbx
    movq   %rdx, %r8

    movq   0x20(%rbp), %rsi
    movq   %rcx,       %rax
    mulq   %rsi

    ;; LLVM uses `%r13` as an intermediate because it needs this
    ;; value in `%r13` later to operate on it anyway.
    movq   %rsi,       %r13
    movq   %r13,       -0x40(%rbp)

    ;; Again, we have to operate on both the low and high bits
    ;; so LLVM moves them both into registers.
    movq   %rax,       %r10
    movq   %rdx,       %r14
    movq   0x28(%rbp), %rdx
    movq   %rdx,       -0x48(%rbp)
    movq   %rcx,       %rax
    mulq   %rdx
    movq   %rax,       %r12
    movq   %rdx,       -0x58(%rbp)
    movq   0x38(%rbp), %r15
    movq   %r15,       %rax
    mulq   %r11
    addq   %r9,        %rbx
    adcq   %r8,        %r10

    ;; These two instructions store the flags into the `%rcx`
    ;; register.
    pushfq 
    popq   %rcx
    addq   %rax, %rbx
    movq   %rbx, -0x68(%rbp)
    adcq   %rdx, %r10

    ;; This stores the flags from the previous calculation into
    ;; `%r8`.
    pushfq 
    popq   %r8

    ;; LLVM takes the flags back out of `%rcx` and then does an
    ;; add including the carry flag. This is smart. It means we
    ;; don't need to do the weird-looking addition of zero since
    ;; we combine the addition of the carry flag and the addition
    ;; of the number's components together into one instruction.
    ;;
    ;; It's possible that the way LLVM does it is faster on modern
    ;; processors, but storing this in `%rcx` is unnecessary,
    ;; because the flags would be at the top of the stack anyway
    ;; (i.e. you could remove the `popq %rcx` above and this
    ;; `pushq %rcx` and it would act the same). If it is slower
    ;; then the difference will be negligible.
    pushq  %rcx
    popfq  
    adcq   %r14, %r12

    pushfq 
    popq   %rax
    movq   %rax,        -0x50(%rbp)
    movq   %r15,        %rax
    movq   -0x38(%rbp), %rsi
    mulq   %rsi
    movq   %rdx,        %rbx
    movq   %rax,        %r9
    addq   %r10,        %r9
    adcq   $0x0,        %rbx
    pushq  %r8
    popfq  
    adcq   $0x0,        %rbx

    ;; `setb` is used instead of explicitly zeroing registers and
    ;; then adding the carry bit. `setb` just sets the byte at the
    ;; given address to 1 if the carry flag is set (since this is
    ;; basically a `mov` it's faster than zeroing and then adding)
    setb   -0x29(%rbp)
    addq   %r12, %rbx

    setb   %r10b
    movq   %r15, %rax
    mulq   %r13
    movq   %rax, %r12
    movq   %rdx, %r8
    movq   0x40(%rbp), %r14
    movq   %r14, %rax
    mulq   %r11
    movq   %rdx, %r13
    movq   %rax, %rcx
    movq   %r14, %rax
    mulq   %rsi
    movq   %rdx, %rsi
    addq   %r9, %rcx
    movq   %rcx, -0x60(%rbp)

    ;; This is essentially a hack to add `%r12` and `%rbx` and store
    ;; the output in `%rcx`. It's one instruction instead of the two
    ;; that would be otherwise required. `leaq` is the take-address-of
    ;; instruction, so this line is essentially the same as if you did
    ;; `&amp;amp;((void*)first)[second]` instead of `first + second` in C. In
    ;; assembly, though, there are no hacks. Every dirty trick is fair
    ;; game.
    leaq   (%r12,%rbx), %rcx

    ;; The rest of the code doesn't have any new tricks, just the same
    ;; ones repeated.
    adcq   %rcx,        %r13
    pushfq 
    popq   %rcx
    addq   %rax,        %r13
    adcq   $0x0,        %rsi
    pushq  %rcx
    popfq  
    adcq   $0x0,        %rsi
    setb   -0x2a(%rbp)
    orb    -0x29(%rbp), %r10b
    addq   %r12,        %rbx
    movzbl %r10b,       %ebx
    adcq   %r8,         %rbx
    setb   %al
    movq   -0x50(%rbp), %rcx
    pushq  %rcx
    popfq  
    adcq   -0x58(%rbp), %rbx
    setb   %r8b
    orb    %al,         %r8b
    movq   %r15,        %rax
    mulq   -0x48(%rbp)
    movq   %rdx,        %r12
    movq   %rax,        %rcx
    addq   %rbx,        %rcx
    movzbl %r8b,        %eax
    adcq   %rax,        %r12
    addq   %rsi,        %rcx
    setb   %r10b
    movq   %r14,        %rax
    mulq   -0x40(%rbp)
    movq   %rax,        %r8
    movq   %rdx,        %rsi
    movq   0x48(%rbp),  %r15
    movq   %r15,        %rax
    mulq   %r11
    movq   %rdx,        %r9
    movq   %rax,        %r11
    movq   %r15,        %rax
    mulq   -0x38(%rbp)
    movq   %rdx,        %rbx
    addq   %r13,        %r11
    leaq   (%r8,%rcx),  %rdx
    adcq   %rdx,        %r9
    pushfq 
    popq   %rdx
    addq   %rax,        %r9
    adcq   $0x0,        %rbx
    pushq  %rdx
    popfq  
    adcq   $0x0,        %rbx
    setb   %r13b
    orb    -0x2a(%rbp), %r10b
    addq   %r8,         %rcx
    movzbl %r10b,       %ecx
    adcq   %rsi,        %rcx
    setb   %al
    addq   %r12,        %rcx
    setb   %r8b
    orb    %al,         %r8b
    movq   %r14,        %rax
    movq   -0x48(%rbp), %r14
    mulq   %r14
    movq   %rdx,        %r10
    movq   %rax,        %rsi
    addq   %rcx,        %rsi
    movzbl %r8b,        %eax
    adcq   %rax,        %r10
    addq   %rbx,        %rsi
    setb   %cl
    orb    %r13b,       %cl
    movq   %r15,        %rax
    mulq   -0x40(%rbp)
    movq   %rdx,        %rbx
    movq   %rax,        %r8
    addq   %rsi,        %r8
    movzbl %cl,         %eax
    adcq   %rax,        %rbx
    setb   %al
    addq   %r10,        %rbx
    setb   %cl
    orb    %al,         %cl
    movq   %r15,        %rax
    mulq   %r14
    addq   %rbx,        %rax
    movzbl %cl,         %ecx
    adcq   %rcx,        %rdx
    movq   -0x70(%rbp), %rcx
    movq   %rcx,        (%rdi)
    movq   -0x68(%rbp), %rcx
    movq   %rcx,        0x8(%rdi)
    movq   -0x60(%rbp), %rcx
    movq   %rcx,        0x10(%rdi)
    movq   %r11,        0x18(%rdi)
    movq   %r9,         0x20(%rdi)
    movq   %r8,         0x28(%rdi)
    movq   %rax,        0x30(%rdi)
    movq   %rdx,        0x38(%rdi)
    movq   %rdi,        %rax
    addq   $0x48,       %rsp
    popq   %rbx
    popq   %r12
    popq   %r13
    popq   %r14
    popq   %r15
    popq   %rbp
    retq   &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although there are a few more instructions in the LLVM-generated version, the slowest type of instruction (loads and stores) are minimised, it (for the most part) avoids redundant work and it applies many cheeky optimisations on top. The end result is that the code runs significantly faster.&lt;/p&gt;
&lt;p&gt;This is not the first time that a carefully-written Rust implementation has outperformed our assembly code - some months ago I rewrote the Rust implementations of addition and subtraction, making them outperform the assembly implementation by 20% and 15%, respectively. Those didn’t require 128-bit arithmetic to beat the assembly (to get the full power of the hardware in Rust you only need &lt;code&gt;u64::checked_add&lt;/code&gt;/&lt;code&gt;checked_sub&lt;/code&gt;), although who knows - maybe in a future PR we’ll use 128-bit arithmetic and see the speed improve further still.&lt;/p&gt;
&lt;p&gt;You can see the code from this PR &lt;a href=&quot;https://github.com/paritytech/bigint/pull/38&quot;&gt;here&lt;/a&gt; and the code from the addition/subtraction PR &lt;a href=&quot;https://github.com/paritytech/bigint/pull/26&quot;&gt;here&lt;/a&gt;. I should note that although the latter PR shows multiplication already outperforming the assembly implementation, this was actually due to a benchmark that mostly multiplied numbers with 0. Whoops. If there’s something we can learn from that, it’s that there can be no informed optimisation without representative benchmarks.&lt;/p&gt;
&lt;p&gt;My point is not that we should take what we’ve learnt from the LLVM-generated code and write a new version of our hand-rolled assembly. The point is that optimising compilers are &lt;em&gt;really good&lt;/em&gt;. There are very smart people working on them and computers are really good at this kind of optimisation problem (in the mathematic sense) in a way that humans find quite difficult. It’s the job of language designers to give us the tools we need to inform the optimiser as best we can as to what our true intent is, and larger integer sizes are another step towards that. Rust has done a great job of allowing programmers to write programs that are easily understandable by humans and compilers alike, and it’s just that power that has largely driven its success.&lt;/p&gt;
</description>
<pubDate>Mon, 14 May 2018 13:03:12 +0000</pubDate>
<dc:creator>nonsince</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://troubles.md/posts/the-power-of-compilers/</dc:identifier>
</item>
<item>
<title>Jails are replacing visits with video calls–inmates and families hate it</title>
<link>https://arstechnica.com/tech-policy/2018/05/jails-are-replacing-in-person-visits-with-video-calling-services-theyre-awful/</link>
<guid isPermaLink="true" >https://arstechnica.com/tech-policy/2018/05/jails-are-replacing-in-person-visits-with-video-calling-services-theyre-awful/</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/05/Flex-Inmates-800x533.jpg&quot;/&gt;&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/05/Flex-Inmates.jpg&quot; class=&quot;enlarge-link&quot; data-height=&quot;1365&quot; data-width=&quot;2048&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; Kiosks from GTL, a leading video-visitation provider.&lt;/div&gt;&lt;aside id=&quot;social-left&quot;&gt;&lt;a title=&quot;97 posters participating, including story author.&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/tech-policy/2018/05/jails-are-replacing-in-person-visits-with-video-calling-services-theyre-awful/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-before&quot;&gt;reader comments&lt;/span&gt; &lt;span class=&quot;comment-count-number&quot;&gt;166&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;&lt;span&gt;Share this story&lt;/span&gt;    &lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;When Rebecca Parr visited her nephew Justin Harker recently at the Knox County Jail in Tennessee, she didn't get the opportunity to see him face to face—or even through glass. Instead, she was ushered into a cramped, crowded room for a &quot;video visitation.&quot; She talked to him on a telephone handset while watching a grainy video feed of his face.&lt;/p&gt;
&lt;p&gt;&quot;I have experienced prison visitation a lot in my life,&quot; she told Ars—her father spent some time in prison when she was a child. &quot;This was the most dehumanizing and impersonal that I've ever experienced. I've visited through glass before and that broke my heart when that happened. This was even worse.&quot;&lt;/p&gt;
&lt;p&gt;On the kiosks Parr and Harker used, the video camera was several inches above the screen. As a result, &quot;when you look at the person on the screen, you cannot look them in the eye,&quot; Parr said. &quot;There's no eye contact whatsoever.&quot;&lt;/p&gt;
&lt;p&gt;In recent years, more and more jails have introduced video-calling services. Theoretically, these products could make it easier for inmates to maintain their relationships with family and friends outside. But many jails have moved in the opposite direction, using the advent of these &quot;video visitation&quot; services as an excuse to restrict or eliminate traditional in-person visits.&lt;/p&gt;
&lt;p&gt;There are a number of reasons jail administrators have gone this route. But critics say that money plays a big role.&lt;/p&gt;
&lt;p&gt;In-person visitation requires more staff supervision—both to escort inmates to and from visitation rooms and to make sure no contraband changes hands during a visit. So switching to video visitation can save cash-strapped jails money.&lt;/p&gt;
&lt;p&gt;But jails also profit more directly from limiting in-person visits. While on-site video visits are usually free, the companies providing the system generally offer a paid off-site video-calling service, too. And jails get a hefty percentage of that money.&lt;/p&gt;
&lt;p&gt;Alex Friedmann, a prisoner-rights advocate at the Human Rights Defense Center, told Ars that, rather than awarding the contract to the company with the best rates, jails often pick the company that will pay the largest percentage commission to the jail. (&quot;Commission is a euphemism for kickback,&quot; Friedmann said). That not only pushes up the prices paid by prisoners' friends and family, it also creates an incentive for jails to make the in-person visiting experience less attractive so they'll make remote calls instead.&lt;/p&gt;
&lt;p&gt;I wanted to try the remote calling technology for myself, so I arranged to call Harker using the Knox County Jail's remote video-calling service. The call cost 19 cents per minute and was noticeably worse than a FaceTime or Skype call. It was grainy and jerky, periodically freezing up altogether (though it was not as bad as this &lt;a href=&quot;https://www.youtube.com/embed/NUIQIDDXN_o&quot;&gt;hellish demonstration video&lt;/a&gt; the video-calling company posted in 2012—at least my call didn't have the annoying buzz heard in the video).&lt;/p&gt;
&lt;p&gt;The software required my face to stay centered in the video frame. If my face left the frame, the video went dark—this is apparently a measure to prevent callers from flashing breasts or other body parts.&lt;/p&gt;
&lt;p&gt;Harker told me that the quality of on-site calls is better than remote calls. But whether people make remote video calls or use the on-site video visitation system, Harker said that it's no substitute for a face-to-face call.&lt;/p&gt;
&lt;p&gt;&quot;It's not the same,&quot; he told me.&lt;/p&gt;
&lt;h2&gt;Video visitation often comes with limits on in-person visits&lt;/h2&gt;
&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/05/pod_page.jpg&quot; class=&quot;enlarge&quot; data-height=&quot;517&quot; data-width=&quot;700&quot; alt=&quot;A kiosk from Tech Friends, the company that supplies the Knox County Jail.&quot;&gt;&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/05/pod_page-640x473.jpg&quot; width=&quot;640&quot; height=&quot;473&quot; srcset=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/05/pod_page.jpg 2x&quot; alt=&quot;A kiosk from Tech Friends, the company that supplies the Knox County Jail.&quot;/&gt;&lt;/a&gt;
&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/05/pod_page.jpg&quot; class=&quot;enlarge-link&quot; data-height=&quot;517&quot; data-width=&quot;700&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; A kiosk from Tech Friends, the company that supplies the Knox County Jail.&lt;/div&gt;
&lt;div class=&quot;caption-credit&quot;&gt;Tech Friends, Inc.&lt;/div&gt;
&lt;p&gt;&quot;Well over 600 correctional facilities across the country have implemented some form of video-calling system,&quot; said Lucius Couloute, an expert at the Prison Policy Initiative. &quot;According to our data, about 74 percent of jails that implement video technology end up eliminating or scaling back in-person visits.&quot;&lt;/p&gt;
&lt;p&gt;In the early years, companies selling video-visitation products would &lt;a href=&quot;https://qz.com/400055/prison-communications-company-securus-will-no-longer-require-jails-to-ban-in-person-visits/&quot;&gt;ask jails to sign contracts&lt;/a&gt; requiring them to phase out in-person visits. That triggered such an outcry that companies have removed these provisions from more recent contracts.&lt;/p&gt;
&lt;p&gt;Nevertheless, the introduction of video-visitation services are often followed by restrictions on in-person visits. Tex Pasley, an attorney with the Knoxville-area prison reform group No Exceptions Prisons Collective, told us that the Knox County Jail introduced its video visitation service in March 2014—then eliminated face-to-face visits the very next month.&lt;/p&gt;
&lt;p&gt;&quot;What they said is that the in-person visits were a strain on staff,&quot; Pasley told Ars. &quot;The jail population has been increasing largely due to drug use,&quot; Pasley said. Officials were also concerned about contraband being smuggled into the jail.&lt;/p&gt;
&lt;p&gt;But Pasley believes that the potential revenue from video visitation was also a significant factor.&lt;/p&gt;
&lt;p&gt;&quot;The county takes a 50-percent commission off the top,&quot; he told us. Between March 2014 and November 2017, the county collected $68,777 from the service—or around $20,000 per year.&lt;/p&gt;
&lt;p&gt;A Knox County spokeswoman declined to comment for this story.&lt;/p&gt;
&lt;p&gt;The 19-cent-per-minute rate charged at the Knox County Jail is actually low by national standards, Friedmann told us. Other jails charge 50 cents or even a dollar a minute. Commissions vary, but Friedmann said that 20 to 25 percent was typical.&lt;/p&gt;
&lt;p&gt;Mainstream video-calling services like Skype and FaceTime are free, of course, but they're rarely available to inmates. One reason that the video-calling services in jails cost money is that the companies providing the software also typically provide hardware, which are generally locked-down touchscreen kiosks. By contracting these services out, jails avoid the costs of acquiring, installing, and maintaining the hardware themselves.&lt;/p&gt;
&lt;p&gt;But charging for access inherently limits who can use it—and how often. The friends and families of inmates are often poor, so even modest fees can be a significant deterrent to regular use.&lt;/p&gt;
&lt;h2&gt;Critics say limiting visitation is shortsighted&lt;/h2&gt;
&lt;div class=&quot;wrapper&quot;&gt;&lt;iframe type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;450&quot; src=&quot;https://www.youtube.com/embed/y0XQhr8CYhk?start=0&amp;amp;wmode=transparent&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/div&gt;
&lt;div class=&quot;caption-text&quot;&gt;A promotional video from industry leader Securus.&lt;/div&gt;
&lt;p&gt;Replacing in-person visitation with video visits saves jails some cash and some hassle. But prisoner-rights advocates argue that eliminating in-person visitation for friends and family is shortsighted.&lt;/p&gt;
&lt;p&gt;&quot;Visitation should be seen as a public good,&quot; Couloute argues. &quot;When people are able to visit with their incarcerated loved ones, we see that recidivism drops. That's better for taxpayers and public safety. Disciplinary infractions drop as well. That's better for correctional officers and jails.&quot;&lt;/p&gt;
&lt;p&gt;It's not just prisoner-rights advocates who are making these arguments, either.&lt;/p&gt;
&lt;p&gt;&quot;Studies confirm that incarcerated individuals have better outcomes when they receive in-person visits from family members and supportive community members,&quot; wrote the Department of Justice National Institute of Corrections in a &lt;a href=&quot;https://dept.camden.rutgers.edu/nrccfi/files/NIC-Video-Visiting-Guide.pdf&quot;&gt;2014 report&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The report found that video visitation was likely to have significant benefits for both inmates and society. However, the agency argued that video visits shouldn't become a substitute for face-to-face visits.&lt;/p&gt;
&lt;p&gt;&quot;Traditional, in-person visiting is a best practice that should continue in all correctional settings when possible,&quot; the report said.&lt;/p&gt;
&lt;p&gt;That view was echoed by the American Correctional Association, an organization that provides accreditation for jails. &quot;Regular communication between offenders and their family and friends is proven to aid the reentry process,&quot; the group wrote in a &lt;a href=&quot;http://www.aca.org/ACA_Prod_IMIS/docs/GovernmentAffairs/ACA_PUBLIC_CORRECTIONAL_POLICIES_BOOK.pdf?WebsiteKey=139f6b09-e150-4c56-9c66-284b92f21e51&amp;amp;=404%3bhttp%3a%2f%2fwww.aca.org%3a80%2fACA_Prod_IMIS%2fACA_Member%2fdocs%2fGovernmentAffairs%2fACA_PUBLIC_CORRECTIONAL_POLICIES_BOOK.pdf&quot;&gt;2016 position statement&lt;/a&gt;. &quot;Correctional agencies should promote communications between offenders and their family and friends.&quot;&lt;/p&gt;
&lt;p&gt;In-person visits help to nurture an inmate's relationships with family members, romantic partners, children, and friends. Stronger relationships mean that inmates are more likely to get help—including a place to stay and assistance finding a job—after serving their time. That, in turn, makes it less likely that they'll commit further crimes, saving taxpayers money in the long run.&lt;/p&gt;
&lt;p&gt;The group urged correctional facilities to maintain visitation programs and to use new technologies only &quot;as supplements to existing in-person visitation.&quot;&lt;/p&gt;
&lt;p&gt;&quot;We should allow these visits so people can maintain good relationships,&quot; Couloute argues. That way, they'll be able to &quot;do their time, get out, and do well afterwards.&quot;&lt;/p&gt;
</description>
<pubDate>Mon, 14 May 2018 11:41:11 +0000</pubDate>
<dc:creator>okket</dc:creator>
<og:url>https://arstechnica.com/tech-policy/2018/05/jails-are-replacing-in-person-visits-with-video-calling-services-theyre-awful/</og:url>
<og:title>Jails are replacing visits with video calls—inmates and families hate it</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2018/05/Flex-Inmates-760x380.jpg</og:image>
<og:description>We tried one of the awful video services many jails offer instead of visitation.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/tech-policy/2018/05/jails-are-replacing-in-person-visits-with-video-calling-services-theyre-awful/</dc:identifier>
</item>
<item>
<title>EFail – Vulnerabilities in end-to-end encryption technologies OpenPGP and S/MIME</title>
<link>https://efail.de/</link>
<guid isPermaLink="true" >https://efail.de/</guid>
<description>&lt;p&gt;&lt;strong&gt;EFAIL describes vulnerabilities in the end-to-end encryption technologies OpenPGP and S/MIME that leak the plaintext of encrypted emails.&lt;/strong&gt;&lt;br/&gt;Email is a plaintext communication medium whose communication paths are partly protected by TLS (&lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;TLS&lt;/a&gt;). For people in hostile environments (journalists, political activists, whistleblowers, ...) who depend on the confidentiality of digital communication, this may not be enough. Powerful attackers such as nation state agencies are known to eavesdrop on email communications of a large number of people. To address this, &lt;a href=&quot;https://en.wikipedia.org/wiki/Pretty_Good_Privacy&quot;&gt;OpenPGP&lt;/a&gt; offers &lt;a href=&quot;https://en.wikipedia.org/wiki/End-to-end_encryption&quot;&gt;end-to-end encryption&lt;/a&gt; specifically for sensitive communication in view of these powerful attackers. &lt;a href=&quot;https://en.wikipedia.org/wiki/S/MIME&quot;&gt;S/MIME&lt;/a&gt; is an alternative standard for email end-to-end encryption that is typically used to secure corporate email communication.&lt;/p&gt;
&lt;img src=&quot;https://efail.de/media/overview1.jpg&quot;/&gt;&lt;p&gt;The EFAIL attacks exploit vulnerabilities in the OpenPGP and S/MIME standards to reveal the plaintext of encrypted emails. In a nutshell, EFAIL abuses active content of HTML emails, for example externally loaded images or styles, to exfiltrate plaintext through requested URLs. To create these exfiltration channels, the attacker first needs access to the encrypted emails, for example, by eavesdropping on network traffic, compromising email accounts, email servers, backup systems or client computers. The emails could even have been collected years ago.&lt;/p&gt;
&lt;img src=&quot;https://efail.de/media/overview2.jpg&quot;/&gt;&lt;p&gt;The attacker changes an encrypted email in a particular way and sends this changed encrypted email to the victim. The victim's email client decrypts the email and loads any external content, thus exfiltrating the plaintext to the attacker.&lt;/p&gt;

&lt;h4&gt;Direct Exfiltration&lt;/h4&gt;
&lt;img width=&quot;331&quot; src=&quot;https://efail.de/media/exfil1.png&quot;/&gt;&lt;p&gt;There are two different flavors of EFAIL attacks. First, the &lt;em&gt;direct exfiltration&lt;/em&gt; attack abuses vulnerabilities in Apple Mail, iOS Mail and Mozilla Thunderbird to directly exfiltrate the plaintext of encrypted emails. These vulnerabilities can be fixed in the respective email clients. The attack works like this. The attacker creates a new multipart email with three body parts as shown below. The first is an HTML body part essentially containing an HTML image tag. Note that the src attribute of that image tag is opened with quotes but not closed. The second body part contains the PGP or S/MIME ciphertext. The third is an HTML body part again that closes the src attribute of the first body part.&lt;/p&gt;
&lt;img src=&quot;https://efail.de/media/exfil2.png&quot;/&gt;&lt;p&gt;The attacker now sends this email to the victim. The victim's client decrypts the encrypted second body part and stitches the three body parts together in one HTML email as shown below. Note that the src attribute of the image tag in line 1 is closed in line 4, so the URL spans over all four lines.&lt;/p&gt;
&lt;img src=&quot;https://efail.de/media/exfil3.png&quot;/&gt;&lt;p&gt;The email client then URL encodes all non-printable characters (e.g., %20 is a whitespace) and requests an image from that URL. As the path of the URL contains the plaintext of the encrypted email, the victim's email client sends the plaintext to the attacker.&lt;/p&gt;
&lt;p&gt;The direct exfiltration EFAIL attacks work for encrypted PGP as well as S/MIME emails.&lt;/p&gt;
&lt;h4&gt;The CBC/CFB Gadget Attack&lt;/h4&gt;
&lt;p&gt;Second, we describe the novel &lt;em&gt;CBC/CFB gadget&lt;/em&gt; attacks which abuse vulnerabilities in the specification of OpenPGP and S/MIME to exfiltrate the plaintext. The diagram below describes the idea of CBC gadgets in S/MIME. Because of the specifics of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation&quot;&gt;CBC mode of operation&lt;/a&gt;, an attacker can precisely modify plaintext blocks if she knows the plaintext. S/MIME encrypted emails usually start with &quot;Content-type: multipart/signed&quot; so the attacker knows at least one full block of plaintext as shown in &lt;em&gt;(a)&lt;/em&gt;. She can then form a &lt;em&gt;canonical plaintext block&lt;/em&gt; whose content is all zeros as shown in (b). We call the block pair &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;C&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; a CBC gadget. In step (c), she then repeatedly appends CBC gadgets to inject an image tag into the encrypted plaintext. This creates a single encrypted body part that exfiltrates its own plaintext when the user opens the attacker email. OpenPGP uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Feedback_.28CFB.29&quot;&gt;CFB mode of operation&lt;/a&gt;, which has the same cryptographic properties as CBC and allows the same attack using CFB gadgets.&lt;/p&gt;
&lt;img src=&quot;https://efail.de/media/smime-attack.png&quot;/&gt;&lt;p&gt;The difference here is that any standard-conforming client will be vulnerable and that each vendor may cook their own mitigations that may or may not prevent the attacks. Thus, in the long term, it is necessary to update the specification to find and document changes that fix the underlying root causes of the vulnerabilities.&lt;/p&gt;
&lt;p&gt;While the CBC/CFB gadget attacks on PGP and S/MIME are technically very similar, the requirements for a successful attack differ substantially. Attacking S/MIME is straightforward and an attacker can break multiple (in our tests up to 500) S/MIME encrypted emails by sending a single crafted S/MIME email to the victim. Given the current state of our research, the CFB gadget attack against PGP only has a success rate of approximately one in three attempts. The reason is that PGP compresses the plaintext before encrypting it, which complicates guessing known plaintext bytes. We feel that this is not a fundamental limitation of the EFAIL attacks but more a technical hitch and that attacks become more efficient in future research.&lt;/p&gt;
&lt;section id=&quot;mitigations&quot; readability=&quot;89.781066560541&quot;&gt;&lt;h2&gt;Mitigations&lt;/h2&gt;
&lt;p&gt;Here are some strategies to prevent EFAIL attacks:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Short term: No decryption in email client.&lt;/strong&gt; The best way to prevent EFAIL attacks is to only decrypt S/MIME or PGP emails in a separate application outside of your email client. Start by removing your S/MIME and PGP private keys from your email client, then decrypt incoming encrypted emails by copy&amp;amp;pasting the ciphertext into a separate application that does the decryption for you. That way, the email clients cannot open exfiltration channels. This is currently the safest option with the downside that the process gets more involved.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Short term: Disable HTML rendering.&lt;/strong&gt; The EFAIL attacks abuse active content, mostly in the form of HTML images, styles, etc. Disabling the presentation of &lt;em&gt;incoming&lt;/em&gt; HTML emails in your email client will close the most prominent way of attacking EFAIL. Note that there are other possible backchannels in email clients which are not related to HTML but these are more difficult to exploit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Medium term: Patching.&lt;/strong&gt; Some vendors will publish patches that either fix the EFAIL vulnerabilities or make them much harder to exploit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Long term: Update OpenPGP and S/MIME standards.&lt;/strong&gt; The EFAIL attacks exploit flaws and undefined behavior in the &lt;a href=&quot;https://en.wikipedia.org/wiki/MIME&quot;&gt;MIME&lt;/a&gt;, S/MIME, and OpenPGP standards. Therefore, the standards need to be updated, which will take some time.&lt;/p&gt;
&lt;section id=&quot;paper&quot; readability=&quot;10.454545454545&quot;&gt;&lt;h2&gt;Full technical paper&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://efail.de/efail-attack-paper.pdf&quot;&gt;&lt;strong&gt;Efail: Breaking S/MIME and OpenPGP Email Encryption using Exfiltration Channels [v0.9 Draft]&lt;/strong&gt;&lt;/a&gt; &lt;small&gt;[PDF]&lt;/small&gt;&lt;br/&gt;&lt;em&gt;Damian Poddebniak, Christian Dresen, Jens Müller, Fabian Ising, Sebastian Schinzel, Simon Friedberger, Juraj Somorovsky, and Jörg Schwenk.&lt;/em&gt;&lt;br/&gt;&lt;em&gt;27th USENIX Security Symposium&lt;/em&gt;, Baltimore, August 2018.&lt;/p&gt;
&lt;p&gt;The team can be contacted at &lt;a href=&quot;https://efail.de/cdn-cgi/l/email-protection#5439353d38143132353d387a3031&quot;&gt;&lt;strong&gt;&lt;span class=&quot;__cf_email__&quot; data-cfemail=&quot;7d101c14113d181b1c1411531918&quot;&gt;[email protected]&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;&lt;section id=&quot;faq&quot; readability=&quot;87.784709754638&quot;&gt;&lt;h2&gt;Questions and Answers&lt;/h2&gt;
&lt;h4&gt;What is PGP and S/MIME encryption?&lt;/h4&gt;
&lt;p&gt;Both technologies add an additional layer of security to your email communication. If used properly, both technologies should guarantee confidentiality and authenticity of your email messages even if an attacker has full access to your email account. The EFAIL attacks break this additional encryption layer.&lt;/p&gt;
&lt;h4&gt;What are the EFAIL attacks?&lt;/h4&gt;
&lt;p&gt;The EFAIL attacks break PGP and S/MIME email encryption by coercing clients into sending the full plaintext of the emails to the attacker.&lt;/p&gt;
&lt;h4&gt;Are there CVEs for EFAIL?&lt;/h4&gt;
&lt;p&gt;Yes, there are two official CVE nummers for the CBC/CFB gadget attacks:&lt;/p&gt;&lt;p&gt;CVE-2017-17688: OpenPGP CFB gadget attacks&lt;br/&gt;CVE-2017-17689: S/MIME CBC gadget attacks&lt;/p&gt;&lt;p&gt;Different vendors assigned further CVEs for specific security issues relevant to EFAIL, for example, direct exfiltration attacks.&lt;/p&gt;
&lt;h4&gt;Who is affected?&lt;/h4&gt;
&lt;p&gt;Journalists, political activists or whistleblowers use an additional encryption layer, often PGP, because they fear that someone gets access to their email communication. The EFAIL attacks can be used to break this additional encryption layer. This leads to the situation where anyone getting access to their email communication can also read the victims emails even if they use additional PGP encryption. The same attacks apply to S/MIME which is typically used in enterprise infrastructures.&lt;/p&gt;
&lt;h4&gt;Can you read my emails?&lt;/h4&gt;
&lt;p&gt;No. The EFAIL attacks require the attacker to have access to your S/MIME or PGP encrypted emails. You are thus only affected if an attacker already has access to your emails. However, the very goal of PGP or S/MIME encryption is the protection against this kind of attacker. For those users who rely on PGP and S/MIME encryption, the EFAIL attacks may be a big deal!&lt;/p&gt;
&lt;h4&gt;But my emails are TLS encrypted!&lt;/h4&gt;
&lt;p&gt;TLS is a transport layer encryption technology that encrypts network traffic among email clients and email servers, or between two email servers. However, the emails are processed and stored in plaintext on the servers and in the email accounts. Any attacker getting access to these emails, either via compromising an email account or an email server, can read and change these emails. PGP and S/MIME are used to protect the confidentiality and integrity of emails in case an attacker can already access the emails.&lt;/p&gt;
&lt;h4&gt;Is my email client affected?&lt;/h4&gt;
&lt;p&gt;Our analysis shows that EFAIL plaintext exfiltration channels exist for 25 of the 35 tested S/MIME email clients and 10 of the 28 tested OpenPGP email clients. While it is necessary to change the OpenPGP and S/MIME standards to reliably fix these vulnerabilities, Apple Mail, iOS Mail and Mozilla Thunderbird had even more severe implementation flaws allowing direct exfiltration of the plaintext that is technically very easy to execute.&lt;/p&gt;
&lt;h4&gt;Can I find out whether I have already been attacked?&lt;/h4&gt;
&lt;p&gt;Not for sure. You can of course search in your inbox for malicious emails indicating EFAIL attacks. A strong indication for these attacks could be, for example, malformed emails with unclosed img tags followed by encrypted content, or encrypted content that exfiltrates the plaintext to foreign URLs. However, note that emails are encrypted with the keys of sender as well as all receivers. The attacker can target any of these parties to exfiltrate content that is important to you. In advanced attack scenarios where the attacker is in control of the email server, she could have deleted the malicious emails after the victim has processed them.&lt;/p&gt;
&lt;h4&gt;I don't send HTML emails. Am I safe?&lt;/h4&gt;
&lt;p&gt;No. The attacker can change encrypted text/only emails to HTML emails. You need to disable &lt;em&gt;viewing&lt;/em&gt; HTML email to increase protection from EFAIL attacks.&lt;/p&gt;
&lt;h4&gt;I have disabled HTML in my email client. Am I safe now?&lt;/h4&gt;
&lt;p&gt;Depends. S/MIME or PGP encrypted emails are encrypted with the public keys of &lt;em&gt;all&lt;/em&gt; recipients &lt;em&gt;and&lt;/em&gt; the sender. The attacker can thus perform the EFAIL attacks if only one of the participants is vulnerable. In order to prevent the EFAIL attacks, &lt;em&gt;all&lt;/em&gt; participants must use secure email clients.&lt;/p&gt;
&lt;h4&gt;Will signatures prevent these attacks?&lt;/h4&gt;
&lt;p&gt;No. PGP and S/MIME emails are displayed in the email program independently of whether or not they are signed or whether an existing signature is valid or not. Even if signatures did matter: an attacker can copy the altered ciphertext into a separate email and create a valid signature under his own name.&lt;/p&gt;
&lt;h4&gt;Can you decrypt my own encrypted emails when I lost my private key?&lt;/h4&gt;
&lt;p&gt;No. The EFAIL attacks target a victim, who is in possession of the private key and who decrypts our prepared emails in an email client. If the private key is lost, the EFAIL attacks won't help recovering encrypted messages.&lt;/p&gt;
&lt;h4&gt;Do I need to revoke my certificate or public key?&lt;/h4&gt;
&lt;p&gt;No. Using the EFAIL attacks, the attacker can retrieve the plaintext of encrypted OpenPGP and S/MIME messages. She does not get direct access to the private key.&lt;/p&gt;
&lt;h4&gt;I have encrypted data using OpenPGP or S/MIME and I won't decrypt it in the email context. Am I safe?&lt;/h4&gt;
&lt;p&gt;For now yes. There may be edge cases though that we hadn't looked into. For example, if you encrypted a directory with sensitive files, an attacker could change these encrypted files to contain false information or even malware. If a victim decrypts the directory and opens any of the files, malware or even just an HTML file could be used to exfiltrate plaintext or even compromise the system.&lt;/p&gt;
&lt;h4&gt;What happens if there are quotes in the encrypted email?&lt;/h4&gt;
&lt;p&gt;Quotes in the plaintext might end the URL that is used to exfiltrate the plaintext so that either the bytes after the quote are not exfiltrated or that the exploit may not work at all. Because of the properties of the CBC and CFB modes of operation, an attacker can split a single S/MIME or PGP ciphertext into multiple parts and exfiltrate each independently with separate HTML tags (but still in one email). If one part contains quotes then only the residual plaintext bytes in that part are missing. There is a whole zoo of techniques that the attacker can use to exfiltrate the full plaintext despite these technical obstacles.&lt;/p&gt;
&lt;/section&gt;&lt;section id=&quot;disclousure&quot; readability=&quot;19&quot;&gt;&lt;h2&gt;Responsible Disclosure&lt;/h2&gt;
&lt;p&gt;We have responsibly disclosed our findings to the affected vendors who have applied (or are in the process of applying) countermeasures. Please note that in general these countermeasures are specific hotfixes and we cannot rule out that extended attacks with further backchannels or exfiltrations will be found. Moreover, even if all backchannels are closed, both standards are still vulnerable to attacks where the attacker can modify email content or inject malicious code into attachments which get executed in a context beyond email client.&lt;/p&gt;
&lt;p&gt;We informed German CERT and BSI about our attacks in December 2017. They forwarded all the relevant information to other CERTs and companies.&lt;/p&gt;
&lt;p&gt;We disclosed our attacks to the GnuPG developers on the 24th of November 2017. Further clients are listed below. For reference we also include case numbers and CVEs if they have been assigned.&lt;/p&gt;
&lt;p&gt;Attacks on S/MIME clients:&lt;/p&gt;
&lt;img src=&quot;https://efail.de/media/efail-disclosure-smime.png&quot;/&gt;&lt;p&gt;&lt;small&gt;* Due to the amount of disclosed products we have missed communication with this vendor.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Attacks on PGP clients:&lt;/p&gt;
&lt;img src=&quot;https://efail.de/media/efail-disclosure-pgp.png&quot;/&gt;&lt;p&gt;Direct exfiltration attacks:&lt;/p&gt;
&lt;img src=&quot;https://efail.de/media/efail-disclosure-direct.png&quot;/&gt;&lt;/section&gt;&lt;section id=&quot;press&quot; readability=&quot;6.3095238095238&quot;&gt;&lt;h2&gt;Coverage&lt;/h2&gt;
&lt;p&gt;Electronic Frontier Foundation&lt;br/&gt;MAY 13, 2018&lt;br/&gt;&lt;strong&gt;Attention PGP Users: New Vulnerabilities Require You To Take Action Now&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://www.eff.org/deeplinks/2018/05/attention-pgp-users-new-vulnerabilities-require-you-take-action-now&quot; target=&quot;_blank&quot;&gt;https://www.eff.org/deeplinks/2018/05/attention-pgp-users-new-vulnerabilities-require-you-take-action-now&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ars Technica&lt;br/&gt;MAY 14, 2018&lt;br/&gt;&lt;strong&gt;Critical PGP and S/MIME bugs can reveal encrypted e-mails. Uninstall now&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://arstechnica.com/information-technology/2018/05/critical-pgp-and-smime-bugs-can-reveal-encrypted-e-mails-uninstall-now/&quot; target=&quot;_blank&quot;&gt;https://arstechnica.com/information-technology/2018/05/critical-pgp-and-smime-bugs-can-reveal-encrypted-e-mails-uninstall-now/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Golem&lt;br/&gt;MAY 14, 2018&lt;br/&gt;&lt;strong&gt;PGP und S/MIME abschalten&lt;/strong&gt;&lt;br/&gt;&lt;a href=&quot;https://www.golem.de/news/e-mail-verschluesselung-pgp-und-s-mime-abschalten-1805-134359.html&quot; target=&quot;_blank&quot;&gt;https://www.golem.de/news/e-mail-verschluesselung-pgp-und-s-mime-abschalten-1805-134359.html&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;</description>
<pubDate>Mon, 14 May 2018 09:56:48 +0000</pubDate>
<dc:creator>Foxboron</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://efail.de/</dc:identifier>
</item>
<item>
<title>Disney, please sell the rights to Monkey Island back to its creator Ron Gilbert</title>
<link>https://www.change.org/p/disney-please-sell-the-rights-to-monkey-island-back-to-its-creator-ron-gilbert</link>
<guid isPermaLink="true" >https://www.change.org/p/disney-please-sell-the-rights-to-monkey-island-back-to-its-creator-ron-gilbert</guid>
<description>&lt;p&gt;Do the right thing Disney, give the intellectual property rights for Monkey Island &lt;strong&gt;back&lt;/strong&gt; to its progenitor, who intends to make great content with it. Please, if you're not going to do anything with it, let the original artist have back this proverbial paintbrush, he's the only one worthy of wielding it. You'd be enabling the creation of art, the possibility the world would get to enjoy another adventure in a beloved land conceived back in 1988, akin to the cult classics of '&lt;em&gt;The Secret of Monkey Island&lt;/em&gt;' &amp;amp; '&lt;em&gt;Monkey Island 2: LeChuck's Revenge&lt;/em&gt;'.&lt;/p&gt;
&lt;p&gt;Please Disney, we want to be a pirate.&lt;/p&gt;
&lt;p&gt;Please sign if you share these sentiments.&lt;/p&gt;
</description>
<pubDate>Mon, 14 May 2018 08:53:38 +0000</pubDate>
<dc:creator>doener</dc:creator>
<og:title>Sign the Petition</og:title>
<og:description>Disney, please sell the rights to 'Monkey Island' back to its creator Ron Gilbert</og:description>
<og:image>http://assets.change.org/photos/2/an/bx/eoANbXtPSTzsvGD-1600x900-noPad.jpg?1483709655</og:image>
<og:url>https://www.change.org/p/disney-please-sell-the-rights-to-monkey-island-back-to-its-creator-ron-gilbert</og:url>
<og:type>change-org:petition</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.change.org/p/disney-please-sell-the-rights-to-monkey-island-back-to-its-creator-ron-gilbert</dc:identifier>
</item>
<item>
<title>Enter the Matrix – A technical overview and guide to all things Matrix</title>
<link>https://brendan.abolivier.bzh/enter-the-matrix/</link>
<guid isPermaLink="true" >https://brendan.abolivier.bzh/enter-the-matrix/</guid>
<description>&lt;span class=&quot;post-date&quot;&gt;Sun, May 13, 2018&lt;/span&gt;
&lt;p&gt;As you might know if you’ve been following me on &lt;a href=&quot;https://twitter.com/BrenAbolivier&quot;&gt;Twitter&lt;/a&gt; for some time (or if you know me in real life), I’m very fond of free software and decentralisation. I love free software because it matches the philosophy I want to live by, and decentralisation because it enlarges a user’s freedom and individuality, and I find working on decentralised systems fascinating. Doing so forces one to change their way of designing a system entirely, since most of the Internet now consists of centralised services, which leads people to only learn how to design and engineer these.&lt;/p&gt;
&lt;p&gt;Today I want to tell you about one of my favorite decentralised free software projects right now: &lt;a href=&quot;https://matrix.org&quot;&gt;Matrix&lt;/a&gt;. Let’s get things straight first, I’m talking about neither the science-fiction franchise, nor the nightclub in Berlin. Matrix is a protocol for decentralised, federated and secure communications, created and maintained by New Vector, a company split between London, UK and Rennes, France (which I joined for an internship in London during the last summer). It’s based on RESTful HTTP/JSON APIs, documented in &lt;a href=&quot;https://matrix.org/docs/spec/&quot;&gt;open specifications&lt;/a&gt;, and is designed to be usable for anything that requires real-time-ish communications, from instant messaging to IoT. Some people are also experimenting with using Matrix for &lt;a href=&quot;https://github.com/lukebarnard1/journal&quot;&gt;blogs&lt;/a&gt;, RSS reader, and other stuff that’s quite far from what you’d expect to see with such a project. Despite that, however, it’s currently mainly used for instant messaging, especially through the &lt;a href=&quot;https://riot.im&quot;&gt;Riot&lt;/a&gt; client (which is also developed by New Vector).&lt;/p&gt;
&lt;p&gt;Matrix also distances itself from the “yet another comms thing” argument with its philosophy: it’s not another standard for communications, but one that aims at binding all communications services together, using bridges, integration et al. For example, at &lt;a href=&quot;https://cozy.io&quot;&gt;CozyCloud&lt;/a&gt;, we have a Matrix room that’s bridged to our public IRC channel, meaning that every message sent to the Matrix room will get in the IRC channel as well, and vice-versa. I’m even fiddling around in my free time to bridge this room with a channel on our &lt;a href=&quot;https://about.mattermost.com/&quot;&gt;Mattermost&lt;/a&gt; instance, to create a Mattermost&amp;lt;-&amp;gt;Matrix&amp;lt;-&amp;gt;IRC situation and allow the community to interact with the team without members from the latter having to lose time firing up another chat client and looking at it in addition to internal communications.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://brendan.abolivier.bzh/images/enter-the-matrix/bridges.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There’s also been quite some noise around Matrix lately with the French government &lt;a href=&quot;https://matrix.org/blog/2018/04/26/matrix-and-riot-confirmed-as-the-basis-for-frances-secure-instant-messenger-app/&quot;&gt;announcing its decision to go full Matrix&lt;/a&gt; for their internal communications, using a fork of Riot they might also release as free software to the wide world in the future.&lt;/p&gt;
&lt;h2 id=&quot;under-the-hood&quot;&gt;Under the hood&lt;/h2&gt;
&lt;p&gt;It’s great to introduce the topic, but I guess you were expecting more of a technical and practical post, so let’s get into how Matrix works. Quick disclaimer, though: I won’t go too much in depth here on how Matrix works (because if I do, the post would be quite too long and I’d never get time to even finish it in a week), and will mainly focus on its core principles and how to use it in the most basic way.&lt;/p&gt;
&lt;p&gt;As I mentioned before, Matrix is decentralised and federated. The decentralised bit means that you can run a Matrix server on your own server (quite like other services such as Mattermost), and the federated one means that two Matrix servers will be able to talk to one another. This means that, if someone (let’s call her Alice) hosts her own Matrix server at &lt;code&gt;matrix.alice.tld&lt;/code&gt;, and want to talk to a friend of her (let’s call him Bob), who also hosts his own Matrix server at &lt;code&gt;matrix.bob.tld&lt;/code&gt;, that’s possible and &lt;code&gt;matrix.alice.tld&lt;/code&gt; will know how to talk to &lt;code&gt;matrix.bob.tld&lt;/code&gt; to forward Alice’s message to Bob.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Glossary break:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;There are a few server types in the Matrix specifications. The homeservers (&lt;em&gt;HS&lt;/em&gt;) are the servers that implement the client-server and federation APIs, i.e. the ones that allows actual messages to be sent from Alice to Bob. In my example, in which I was referring to homeservers as “Matrix servers”, &lt;code&gt;matrix.alice.tld&lt;/code&gt; and &lt;code&gt;matrix.bob.tld&lt;/code&gt; are homeservers. Among the other server types are the identity servers (&lt;em&gt;IS&lt;/em&gt;) that allows one to host third-party identifiers (such as an email address or a phone number) so people can reach them using one of them, and application services (&lt;em&gt;AS&lt;/em&gt;) which are mainly used to bridge an existing system to Matrix (but are not limited to that). In this post, I’m only going to cover the basic use of homeservers, since knowledge about the other types isn’t required to understand the bases of how Matrix works.&lt;/li&gt;
&lt;li&gt;In the Matrix spec, both Alice and Bob are identified by a Matrix ID, which takes the form &lt;code&gt;@localpart:homeserver&lt;/code&gt;. In our example, their Matrix IDs could respectively be &lt;code&gt;@Alice:matrix.alice.tld&lt;/code&gt; and &lt;code&gt;@Bob:matrix.bob.tld&lt;/code&gt;. Matrix IDs’ form actually follows a broader one, taken by any Matrix entity, which is &lt;code&gt;*localpart:homeserver&lt;/code&gt;, where &lt;code&gt;*&lt;/code&gt; is a “sigil” character which is used to identity the identity’s type. Here, the sigil character &lt;code&gt;@&lt;/code&gt; states that the entity is a Matrix ID.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;three-roomies-on-three-servers&quot;&gt;Three roomies on three servers&lt;/h2&gt;
&lt;p&gt;Now that we have our two users talking with each other, let’s take a look at how third user (let’s call him Charlie), also hosting his own homeserver (at &lt;code&gt;matrix.charlie.tld&lt;/code&gt;), can chat with both of them. This is done using a room, which can be defined as the Matrix equivalent of an IRC channel. As any entity in Matrix, the room has an ID which takes the general form with the &lt;code&gt;!&lt;/code&gt; sigil character. However, although it contains a homerserver’s name in its ID, and unlike a user ID, a room isn’t bound to any homeserver. Actually, the homeserver in the room ID is the homeserver hosting the user that created the room.&lt;/p&gt;
&lt;p&gt;Technically speaking, if Alice wants to send a message in the room where both Bob and Charlie are, she’ll ask her homeserver to send a message in that room, which will look into its local database which homeservers are also part of that room (in our example, Bob’s and Charlie’s), and will send the message to each of them individually (and each of them will display the message to their users in the room, i.e. Bob’s server will display it to Bob). Then, each homeserver will keep track of the message in their local database. This means two things:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Every homeserver in a room keeps a content of the room’s history.&lt;/li&gt;
&lt;li&gt;If a homeserver in a room goes down for any reason, even if it’s the homeserver which has its name in the room’s ID, all of the other homeservers in the room can keep on talking with each other.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Broadly speaking, a room can be schematised as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://brendan.abolivier.bzh/images/enter-the-matrix/room-schema.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This image is a capture of the interactive explanation on how Matrix works named “How does it work?” on &lt;a href=&quot;https://matrix.org/&quot;&gt;Matrix’s homepage&lt;/a&gt;, which I’d really recommand checking out. That’s why the Matrix IDs and homeservers’ names aren’t the same as in my example.&lt;/p&gt;
&lt;p&gt;For what it’s worth, I took a shortcut earlier since, in the Matrix spec, 1-to-1 chats are also rooms. So technically speaking, Alice and Bob were already in a room before Charlie wanted to chat with them.&lt;/p&gt;
&lt;p&gt;It might also be worth noting that a room can have an unlimited number of aliases, acting as addresses for the room, which users can use to join it if it’s public. Their syntax takes the general form we saw earlier, using &lt;code&gt;#&lt;/code&gt; as the sigil character. This way, &lt;code&gt;!wbtZVAjTSFQzROqLrx:matrix.org&lt;/code&gt; becomes &lt;code&gt;#cozy:matrix.org&lt;/code&gt;, which, let’s be honest, is quite easier to read and remember. As with a room’s ID, its &lt;code&gt;homeserver&lt;/code&gt; part is the homeserver hosting the user who created the alias, which means that I can create &lt;code&gt;#cozycloud:matrix.trancendances.fr&lt;/code&gt; if I have enough power level, as I’m using this homeserver.&lt;/p&gt;
&lt;p&gt;As I quickly hinted at, a room can be either public or private. Public rooms can be joined by anyone knowing one of the room’s alias (or getting it from the homeserver’s public rooms directory if it’s published there), and private rooms work on an invite-only basis. In both cases, if the homeserver doesn’t already have a user in the room, it will ask another homeserver to make the join happen (either the homeserver alias which name is in the &lt;code&gt;homeserver&lt;/code&gt; part of the alias for a public room, or the homeserver the invite is originating from for a private room).&lt;/p&gt;
&lt;h2 id=&quot;events-events-everywhere&quot;&gt;Events, events everywhere&lt;/h2&gt;
&lt;p&gt;Now that we know what a room is, let’s talk about what’s passing inside of one. Earlier, I’ve been talking about messages, which are actually called “events”. Technically speaking, a Matrix event is a JSON object that’s sent in a room and dispatched to all other members of the room. It, of course, has an ID that’s generated by the homeserver hosting the user who sent the message, taking the general form we saw earlier and the &lt;code&gt;$&lt;/code&gt; sigil character. This JSON has metadata, such as a class name to identify different event types, an author, a creation timestamp, etc. It basically looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;origin_server_ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1526072700313&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;sender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@Alice:matrix.alice.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;event_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$1526072700393WQoZb:matrix.alice.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;unsigned&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;transaction_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m1526072700255.17&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello Bob and Charlie! Welcome to my room :-)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;msgtype&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m.text&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m.room.message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;room_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!TCnDZIwFBeQyBCciFD:matrix.alice.tld&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The example above is an event sent from Alice to Bob and Charlie in the room they’re all in. It’s a message, as hinted at by the &lt;code&gt;m.room.message&lt;/code&gt; class name in the &lt;code&gt;type&lt;/code&gt; property. The &lt;code&gt;content&lt;/code&gt; property, which must be an object, contains the event’s actual content. In this case, we can see the message is text, and the text itself. This precision is needed because &lt;code&gt;m.room.message&lt;/code&gt; can be a text, but also an image, a video, a notice, etc. as mentioned in &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#m-room-message&quot;&gt;the spec&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The unsigned property here only means the data in it mustn’t be taken into account when computing and verifying the cryptographic signature used by homeserver to pass the event to another homeserver.&lt;/p&gt;
&lt;p&gt;The Matrix spec defines three kind of events that can pass through a room:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Timeline events, such as messages, which form the room’s timeline that’s shared between all homeservers in the room.&lt;/li&gt;
&lt;li&gt;State events, that contain an additional &lt;code&gt;state_key&lt;/code&gt; property, and form the current state of the room. They can describe room creation (&lt;code&gt;m.room.create&lt;/code&gt;), topic edition (&lt;code&gt;m.room.topic&lt;/code&gt;), join rules (i.e. either invite-only or public, &lt;code&gt;m.room.join_rules&lt;/code&gt;), membership update (i.e. join, leave, invite or ban, &lt;code&gt;m.room.member&lt;/code&gt; with the Matrix ID of the user whose membership is being updated as the &lt;code&gt;state_key&lt;/code&gt;). Just like timeline events, they’re part of the room’s timeline, but unlike them, the latest event for a &lt;code&gt;{type, state_key}&lt;/code&gt; duo is easily retrievable, as well as the room’s current state of the room, which is actually a JSON array contaning the latest events for all &lt;code&gt;{type, state_key}&lt;/code&gt; duos. The Matrix APIs also allows one to easily retrieve the full state the room was at when a given timeline message was propagated through the room, and each state event refers to its parent.&lt;/li&gt;
&lt;li&gt;Euphemeral events, which aren’t included in the room’s timeline, and are used to propagate information that doesn’t last in time, such as typing notification (”[…] is typing…“).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Now, one of the things I really like about Matrix is that, besides the base event structure, you can technically put whatever you want into an event. There’s no constraint on its class name (except it can’t start with &lt;code&gt;m.&lt;/code&gt;, which is a namespace reserved for events defined in the spec), nor on its content, so you’re free to create your own events as you see fit, whether they are timeline events, state events or both (I’m not sure about euphemeral events, though). That’s how you can create whole systems using only Matrix as the backend.&lt;/p&gt;
&lt;p&gt;Matrix events can also be redacted. This is the equivalent of a deletion, except the event isn’t actually deleted but stripped from its content so it doesn’t mess with the room’s timeline. The redacted event is then dispatched to every homeserver in the room so they can redact their local copy of the event as well. Regarding editing an event’s content, it’s not possible yet, but it’s a highly requested feature and should be available in the not so distant future.&lt;/p&gt;
&lt;h2 id=&quot;a-very-basic-client&quot;&gt;A very basic client&lt;/h2&gt;
&lt;p&gt;Now I guess you’re wondering how you can use Matrix for your project, because learning the core principles is great but that doesn’t explain how to use the whole thing.&lt;/p&gt;
&lt;p&gt;In the following steps, I’ll assume a few things:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The homeserver you’re working with is &lt;code&gt;matrix.project.tld&lt;/code&gt;, and its client-server API is available on port 443 through HTTPS.&lt;/li&gt;
&lt;li&gt;Your user is named &lt;code&gt;Alice&lt;/code&gt;. Note that you must change this value for real life tests, because the Matrix ID &lt;code&gt;@Alice:matrix.org&lt;/code&gt; is already taken.&lt;/li&gt;
&lt;li&gt;Your user’s password is &lt;code&gt;1L0v3M4tr!x&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note that I’ll only cover some basic use of the client-server spec. If you want to go further, you should have a look at the &lt;a href=&quot;https://matrix.org/docs/spec/&quot;&gt;full spec&lt;/a&gt; or ask any question in the &lt;a href=&quot;https://matrix.to/#/#matrix-dev:matrix.org&quot;&gt;#matrix-dev&lt;/a&gt; room. I also won’t cover homeserver setup, here (though I might do just that in a future post). My goal here is mainly to give you a look at how the client-server APIs globally works rather tha creating a whole shiny app which would take too long for a single blog post.&lt;/p&gt;
&lt;p&gt;It might also be worth noting that each Matrix API endpoint I’ll name in the rest of this post is a clickable link to the related section of the Matrix spec, which you can follow if you want more complete documentation on a specific endpoint.&lt;/p&gt;
&lt;h3 id=&quot;registering&quot;&gt;Registering&lt;/h3&gt;
&lt;p&gt;Of course, your user doesn’t exist yet, so let’s register it against the homeserver.&lt;/p&gt;
&lt;p&gt;The endpoint for registration is &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#post-matrix-client-r0-register&quot;&gt;&lt;code&gt;/_matrix/client/r0/register&lt;/code&gt;&lt;/a&gt;, which you should request using a &lt;code&gt;POST&lt;/code&gt; HTTP request. In our example, the request’s full URL is &lt;code&gt;https://matrix.project.tld/_matrix/client/r0/register&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that every endpoint in the Matrix spec always starts with &lt;code&gt;/_matrix/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The request body is a JSON which takes the following form:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1L0v3M4tr!x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; properties are exactly what you think it is. The Matrix ID generated for a new user contains what’s provided in the &lt;code&gt;username&lt;/code&gt; property as the &lt;code&gt;localpart&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fire this request. You’ll now get a &lt;code&gt;401&lt;/code&gt; status code along with some JSON, which looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;flows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;stages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;m.login.dummy&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;stages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;m.login.email.identity&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;session&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HrvSksPaKpglatvIqJHVEfkd&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, this enpoint uses a part of the spec called the &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#user-interactive-authentication-api&quot;&gt;User-Interactive Authentication API&lt;/a&gt;. This means that authentication can be seen as flows of consecutive stages. That’s exactly what we have here: two flows, each containing one stage. This example is a very simple one, but it can get quite more complex, such as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;flows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;stages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;m.login.recaptcha&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;stages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;m.login.email.identity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;m.login.recaptcha&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;m.login.recaptcha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;public_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;6Le31_kSAAAAAK-54VKccKamtr-MFA_3WS1d_fGV&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;session&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qxATPqBPdTsaMBmOPkxZngXR&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we can see two flows, one with a single stage, the other one with two stages. Note that there’s also a parameter in the &lt;code&gt;params&lt;/code&gt; object, to be used with the &lt;code&gt;m.login.recaptcha&lt;/code&gt; flow.&lt;/p&gt;
&lt;p&gt;Because I want to keep it as simple as possible here, let’s get back at our initial simple example, and use the first one-stage flow. The only stage in there is &lt;code&gt;m.login.dummy&lt;/code&gt;, which describes a stage that will success everytime you send it a correct JSON object.&lt;/p&gt;
&lt;p&gt;To register against this stage, we’ll only add a few lines to our initial request’s JSON:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m.login.dummy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;session&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HrvSksPaKpglatvIqJHVEfkd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1L0v3M4tr!x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the value to the &lt;code&gt;session&lt;/code&gt; property in the newly added &lt;code&gt;auth&lt;/code&gt; object is the value from &lt;code&gt;sessions&lt;/code&gt; taken from the homeserver’s response to our intial request. This &lt;code&gt;auth&lt;/code&gt; object will tell the homeserver that this request is a follow-up to the initial request, using the stage &lt;code&gt;m.login.dummy&lt;/code&gt;. The homeserver will automatically recognise the flow we’re using, and will succeed (because we use &lt;code&gt;m.login.dummy&lt;/code&gt;), returning this JSON along with a &lt;code&gt;200&lt;/code&gt; status code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;access_token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;olic0yeVa1pore2Kie4Wohsh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;device_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;FOZLAWNKLD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;home_server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;matrix.project.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@Alice:matrix.project.tld&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s see what we have here:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;code&gt;home_server&lt;/code&gt; property contains the address of the homeserver you’ve registered on. This can feel like a duplicate, but the Matrix spec allows for a homeserver’s name to differ from its address, so here’s why it mentions it.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;user_id&lt;/code&gt; property contains the newly generated Matrix ID for your user.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;device_id&lt;/code&gt; property contains the ID for the device you’ve registered with. A device is bound to an access token and E2E encryption keys (which I’m not covering in this post).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;access_token&lt;/code&gt; property contains the token you’ll use to authenticate all your requests to the Matrix client-server APIs. It’s usually much longer than the one shown in the example, I’ve shortened it for readability’s sake.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Registering an user instantly logs it in, so you don’t have to do it right now. If, for any reason, you get logged out, you can log back in using the endpoint documented &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#post-matrix-client-r0-login&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;creating-our-first-room&quot;&gt;Creating our first room&lt;/h3&gt;
&lt;p&gt;Now that we have an authenticated user on a homeserver, let’s create a room. This is done by sending a &lt;code&gt;POST&lt;/code&gt; request to the &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#post-matrix-client-r0-createroom&quot;&gt;&lt;code&gt;/_matrix/client/r0/createRoom&lt;/code&gt;&lt;/a&gt; endpoint. In our example, the request’s full URL is &lt;code&gt;https://matrix.project.tld/_matrix/client/r0/createRoom?access_token=olic0yeVa1pore2Kie4Wohsh&lt;/code&gt;. Note the &lt;code&gt;access_token&lt;/code&gt; query parameter, which must contain the access token the homeserver previously gave us.&lt;/p&gt;
&lt;p&gt;There are a few JSON parameters available which I won’t cover here because none of them are required to perform the request. So let’s send the request with an empty object (&lt;code&gt;{}&lt;/code&gt;) as its body.&lt;/p&gt;
&lt;p&gt;Before responding, the homeserver will create the room, fire a few state events in it (such as the initial &lt;code&gt;m.room.create&lt;/code&gt; state event or a join event for your user). It should then respond with a &lt;code&gt;200&lt;/code&gt; status code and a JSON body looking like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;room_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!RtZiWTovChPysCUIgn:matrix.project.tld&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here you are, you have created and joined your very first room! As you might have guessed, the value for the &lt;code&gt;room_id&lt;/code&gt; property is the ID of the newly created room.&lt;/p&gt;
&lt;h3 id=&quot;messing-with-the-room-s-state&quot;&gt;Messing with the room’s state&lt;/h3&gt;
&lt;p&gt;Browsing the room’s state is completely useless at this stage, but let’s do it anyway. Fetching the whole room state, for example, is as easy as a simple &lt;code&gt;GET&lt;/code&gt; request on the &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#get-matrix-client-r0-rooms-roomid-state&quot;&gt;&lt;code&gt;/_matrix/client/r0/rooms/{roomId}/state&lt;/code&gt;&lt;/a&gt; endpoint, where &lt;code&gt;{roomId}&lt;/code&gt; is the room’s ID. If you’re following these steps using curl requests in bash, you might want to replace the exclamation mark (&lt;code&gt;!&lt;/code&gt;) in the room’s ID with its URL-encoded variant (&lt;code&gt;%21&lt;/code&gt;). Don’t forget to append your access token to the full URL as shown above.&lt;/p&gt;
&lt;p&gt;The request should return a JSON array containing state events such as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;654742&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;join_rule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;public&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;event_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$1526078716401exXBQ:matrix.project.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;origin_server_ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1526078716874&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;room_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!RtZiWTovChPysCUIgn:matrix.project.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;sender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@Alice:matrix.project.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;state_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m.room.join_rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;unsigned&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;654742&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let’s try to send our own state event in the room, shall we? I order to do that, you’ll need to send a &lt;code&gt;PUT&lt;/code&gt; request to the &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#put-matrix-client-r0-rooms-roomid-state-eventtype&quot;&gt;&lt;code&gt;/_matrix/client/r0/rooms/{roomId}/state/{eventType}/{stateKey}&lt;/code&gt;&lt;/a&gt; endpoint, repacing the room’s ID, the event’s type and its state key with the right values. Note that if your state key is an empty string, you can just omit it from the URL. Again, don’t forget to append your access token!&lt;/p&gt;
&lt;p&gt;The body for our request is the event’s content object.&lt;/p&gt;
&lt;p&gt;Let’s create a &lt;code&gt;tld.project.foo&lt;/code&gt; event with &lt;code&gt;bar&lt;/code&gt; as its state key, and &lt;code&gt;{&quot;baz&quot;: &quot;qux&quot;}&lt;/code&gt; as its content. To achieve that, let’s send a &lt;code&gt;PUT&lt;/code&gt; request to &lt;code&gt;/_matrix/client/r0/rooms/!RtZiWTovChPysCUIgn:matrix.project.tld/state/tld.project.foo/bar?access_token=olic0yeVa1pore2Kie4Wohsh&lt;/code&gt; (from which I’ve stripped the protocol scheme and FQDN so it doesn’t appear too long in the post) with the fillowing content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;baz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qux&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The homeserver then responds with an object only containing an &lt;code&gt;event_id&lt;/code&gt; property, which contains the ID of the newly created state event.&lt;/p&gt;
&lt;p&gt;If we retry the request we previously made to retrieve the whole room state, we can now see our event:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58357&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;baz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;qux&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;event_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$1526080218403sbpku:matrix.project.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;origin_server_ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1526080218639&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;room_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!RtZiWTovChPysCUIgn:matrix.project.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;sender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@Alice:matrix.project.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;state_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tld.project.foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;unsigned&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58357&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that sending an update of a state event is done the same way as sending a new state event with the same class name and the same state key.&lt;/p&gt;
&lt;h3 id=&quot;sending-actual-messages&quot;&gt;Sending actual messages&lt;/h3&gt;
&lt;p&gt;Sending timeline events is almost the same thing as sending state events, except it’s done through the &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#put-matrix-client-r0-rooms-roomid-send-eventtype-txnid&quot;&gt;&lt;code&gt;/_matrix/client/r0/rooms/{roomId}/send/{eventType}/{txnId}&lt;/code&gt;&lt;/a&gt; endpoint, and it uses one parameter we haven’t seen yet: the &lt;code&gt;txnId&lt;/code&gt;, &lt;em&gt;aka&lt;/em&gt; transaction ID. That’s simply a unique ID allowing identification for this specific request among all requests for the same access token. You’re free to place whatever you want here, as long as you don’t use the same value twice with the same access token.&lt;/p&gt;
&lt;p&gt;Regarding the request’s body, once again, it’s the event’s content.&lt;/p&gt;
&lt;p&gt;Retrieving timeline events, though, is a bit more complicated and is done using a &lt;code&gt;GET&lt;/code&gt; request on the &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#get-matrix-client-r0-sync&quot;&gt;&lt;code&gt;/_matrix/client/r0/sync&lt;/code&gt;&lt;/a&gt; endpoint. Where it gets tricky is in the fact that this endpoint isn’t specific to a room, so it returns every event received in any room you’re in, along with some presence event, invites, etc.&lt;/p&gt;
&lt;p&gt;Once you’ve done such a request (again, with your access token appended to it), you can locate timeline events from your room in the JSON it responds with by looking at the &lt;code&gt;rooms&lt;/code&gt; object, which contains an object named &lt;code&gt;join&lt;/code&gt; which contains one object for each room you’re in. Locate the &lt;code&gt;!RtZiWTovChPysCUIgn:matrix.project.tld&lt;/code&gt; room (the one we’ve created earlier), and in the corresponding object you’ll see the state, timeline and euphemeral events for this room.&lt;/p&gt;
&lt;h3 id=&quot;inviting-a-folk&quot;&gt;Inviting a folk&lt;/h3&gt;
&lt;p&gt;So far, Alice has registered on the homeserver and created her room, but she feels quite alone, to be honest. Let’s cheer her up by inviting Bob in there.&lt;/p&gt;
&lt;p&gt;Inviting someone into a room is also quite simple, and only requires a &lt;code&gt;POST&lt;/code&gt; request on the &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#post-matrix-client-r0-rooms-roomid-invite&quot;&gt;&lt;code&gt;/_matrix/client/r0/rooms/{roomId}/invite&lt;/code&gt;&lt;/a&gt; endpoint. The request’s body must contain the invited Matrix ID as such:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@Bob:matrix.bob.tld&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the request is the same if Bob has registered on the same server as Alice.&lt;/p&gt;
&lt;p&gt;If all went well, the homeserver should respond with a &lt;code&gt;200&lt;/code&gt; status code and an empty JSON object (&lt;code&gt;{}&lt;/code&gt;) as its body.&lt;/p&gt;
&lt;p&gt;In the next request on the &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#get-matrix-client-r0-sync&quot;&gt;&lt;code&gt;/_matrix/client/r0/sync&lt;/code&gt;&lt;/a&gt; he’ll made, Bob will now see an &lt;code&gt;invite&lt;/code&gt; object inside the &lt;code&gt;rooms&lt;/code&gt; one contaning the invite Alice sent him, containing a few events including the invite event:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&quot;invite&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&quot;!RtZiWTovChPysCUIgn:matrix.project.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&quot;invite_state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&quot;events&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;sender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@Alice:matrix.project.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m.room.name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;state_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My very cool room&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;sender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@Alice:matrix.project.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;m.room.member&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;state_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@Bob:matrix.bob.tld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&quot;membership&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;invite&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now Bob will be able to join the room by sending a simple &lt;code&gt;POST&lt;/code&gt; request to the &lt;a href=&quot;https://matrix.org/docs/spec/client_server/r0.3.0.html#post-matrix-client-r0-rooms-roomid-join&quot;&gt;&lt;code&gt;/_matrix/client/r0/rooms/{roomId}/join&lt;/code&gt;&lt;/a&gt; endpoint.&lt;/p&gt;
&lt;h2 id=&quot;alice-meets-bob&quot;&gt;Alice meets Bob&lt;/h2&gt;
&lt;p&gt;So here we are, with a fresh room where Alice and Bob are able to interact with one another, with everything done using HTTP requests that you could do with your terminal using curl. Of course, you don’t always have to do it that manually, and there are Matrix SDKs for various languages and platforms, including &lt;a href=&quot;https://matrix.org/docs/projects/sdk/matrix.org-js-sdk.html&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://matrix.org/docs/projects/sdk/goMatrix.html&quot;&gt;Go&lt;/a&gt;, &lt;a href=&quot;https://matrix.org/docs/projects/sdk/goMatrix.html&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://matrix.org/docs/projects/sdk/matrix.org-android-sdk.html&quot;&gt;Android&lt;/a&gt;, &lt;a href=&quot;https://matrix.org/docs/projects/sdk/matrix.org-ios-sdk.html&quot;&gt;iOS&lt;/a&gt;, and a lot more. The full list is available &lt;a href=&quot;https://matrix.org/docs/projects/try-matrix-now.html#client-sdks&quot;&gt;right here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to dive a bit deeper into the Matrix APIs, I’d advise you to have a look at the &lt;a href=&quot;https://matrix.org/docs/spec&quot;&gt;spec&lt;/a&gt; (even though it still needs a lot of work) and what the community has done with it on the &lt;a href=&quot;https://matrix.org/docs/projects/try-matrix-now.html&quot;&gt;Try Matrix Now!&lt;/a&gt; page on Matrix’s website.&lt;/p&gt;
&lt;p&gt;I hope you found this journey into Matrix’s APIs as interesting as I did when I first heard of the project. Matrix is definitely something I’ll keep playing with for a while, and might have some big news related to some Matrix-related projects I’m working on to share here in the coming months.&lt;/p&gt;
&lt;p&gt;As always, I’d like to thank &lt;a href=&quot;https://twitter.com/CromFR&quot;&gt;Thibaut&lt;/a&gt; for proofreading this post and giving me some useful early feedback on it. If you want to share your feedback on this post with me too, don’t hesitate to do so, either via &lt;a href=&quot;https://twitter.com/BrenAbolivier&quot;&gt;Twitter&lt;/a&gt; or through Matrix, my own Matrix ID being &lt;a href=&quot;https://matrix.to/#/@Brendan:matrix.trancendances.fr&quot;&gt;@Brendan:matrix.trancendances.fr&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;See you next week for a new post 🙂&lt;/p&gt;
</description>
<pubDate>Mon, 14 May 2018 08:21:21 +0000</pubDate>
<dc:creator>babolivier</dc:creator>
<og:title>Enter the Matrix · Brendan Abolivier</og:title>
<og:description>Matrix is a protocol for decentralised, federated and secure communications, created and maintained by New Vector, a company split between London, UK and Rennes, France. It's based on RESTful HTTP/JSON APIs, documented in open specifications, and is designed to be usable for anything that requires real-time-ish communications, from instant messaging to IoT. Let's see how it works and how to make a basic use of it.</og:description>
<og:type>article</og:type>
<og:image>https://brendan.abolivier.bzh/images/enter-the-matrix/room-schema.png</og:image>
<og:url>https://brendan.abolivier.bzh/enter-the-matrix/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://brendan.abolivier.bzh/enter-the-matrix/</dc:identifier>
</item>
</channel>
</rss>