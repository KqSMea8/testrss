<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>MacOS Update Accidentally Undoes Apple&amp;#039;s “root” Bug Patch</title>
<link>https://www.wired.com/story/macos-update-undoes-apple-root-bug-patch/</link>
<guid isPermaLink="true" >https://www.wired.com/story/macos-update-undoes-apple-root-bug-patch/</guid>
<description>&lt;p&gt;&lt;span class=&quot;lede&quot;&gt;When a company&lt;/span&gt; like Apple rushes out a software patch for a critical security bug, it deserves praise for protecting its customers quickly. Except, perhaps, when that patch is so rushed that it's nearly as buggy as the code it was designed to fix.&lt;/p&gt;
&lt;p&gt;Earlier this week, Apple scrambled to push out a software update for macOS High Sierra, to sew up a &lt;a href=&quot;https://www.wired.com/story/macos-high-sierra-hack-root/&quot;&gt;glaring hole in the operating system's security measures&lt;/a&gt;: When any person or malicious program tried to log into a Mac computer, install software, or change settings, and thus hit a prompt for a username and password, they could simply enter &quot;root&quot; as a username, no password, and bypass the prompt to gain full access to the computer. Apple's initial patch came out about a 18 hours after the bug was first reported.&lt;/p&gt;
&lt;p&gt;But now multiple Mac users have confirmed to WIRED that Apple's fix for that problem has a serious glitch of its own. Those who had not yet upgraded their operating system from the original version of High Sierra, 10.13.0, to the most recent version, 10.13.1, but had downloaded the patch, say the &quot;root&quot; bug reappears when they install the most recent macOS system update. And worse, two of those Mac users say they've also tried re-installing Apple's security patch after that upgrade, only to find that the &quot;root&quot; problem &lt;em&gt;still&lt;/em&gt; persists until they reboot their computer, with no warning that a reboot is necessary.&lt;/p&gt;
&lt;p&gt;&quot;It’s really serious, because everyone said 'hey, Apple made a very fast update to this problem, hooray,'&quot; says Volker Chartier, a software engineer at German energy firm Innogy who was the first to alert WIRED to the issue with Apple's patch. &quot;But as soon as you update [to 10.13.1], it comes back again and no one knows it.&quot;&lt;/p&gt;
&lt;div class=&quot;inset-left-component inset-left-component--pullquote&quot; readability=&quot;8&quot;&gt;
&lt;blockquote name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot;&gt;
&lt;p&gt;'That is bad, bad, bad.'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot;&gt;Thomas Reed, Malwarebytes&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Even if a Mac user knew to reinstall the security patch after they upgraded High Sierra—and in fact, Apple would eventually install that update automatically, as it has for other users affected by the &quot;root&quot; bug—they could still be left vulnerable, says Thomas Reed, an Apple-focused researcher at security firm MalwareBytes. After Reed confirmed that 10.13.1 reopened the &quot;root&quot; bug, he again installed Apple's security fix for the problem. But he found that, until he rebooted, he could even then type &quot;root&quot; without a password to entirely bypass High Sierra's security protections.&lt;/p&gt;

&lt;p&gt;&quot;I installed the update again from the App Store, and verified that I could still trigger the bug. That is bad, bad, bad,&quot; says Reed. &quot;Anyone who hasn't yet updated to 10.13.1, they’re now in the pipeline headed straight for this issue.&quot;&lt;/p&gt;
&lt;p&gt;Mac administrator Chris Franson, a technical director at Northeastern University, tells WIRED that he repeated that sequence of events and found that the &quot;root&quot; bug persisted, too. But he noted that rebooting the computer—after updating to 10.13.1 and then re-installing the security fix—did cause the security update to finally kick in and resolve the issue, which MalwareBytes' Reed confirmed. They both note, however, that Apple's security update doesn't tell users to reboot after installing it. &quot;You could easily have someone who doesn't reboot their computer for months,&quot; says Reed. &quot;That's not a good thing.&quot;&lt;/p&gt;
&lt;p&gt;WIRED reached out to Apple about the flaws in its patch, but hasn't yet heard back from the company.&lt;/p&gt;
&lt;p&gt;The bug in Apple's bug-fix isn't, of course, as bad as its original &quot;root&quot; problem. For one, it's not clear how many High Sierra users might have installed the security patch before upgrading to the most recent version of the operating system, or even if everyone who did so is affected. Even among those who were affected, many likely have rebooted their computers, which should leave them protected.&lt;/p&gt;
&lt;p&gt;But the shoddiness of Apple's patch joins a disturbing pattern of security missteps in High Sierra's code. Apple had already issued a rare apology for the &quot;root&quot; security flaw, writing that its &quot;customers deserve better&quot; and promising to audit its development practices to prevent similar bugs in the future. And even before that most recent bug blowup, researchers had already shown—on the day of the operating system's launch no less—that malicious code running on the operating system could &lt;a href=&quot;https://www.forbes.com/sites/thomasbrewster/2017/09/25/apple-mac-os-x-high-sierra-vulnerabilit-hacker-steals-passwords/#5f01c5ac3200&quot; target=&quot;_blank&quot;&gt;steal the contents of its keychain without a password&lt;/a&gt;. Another facepalm-worthy bug &lt;a href=&quot;https://objective-see.com/blog/blog_0x23.html&quot; target=&quot;_blank&quot;&gt;displayed the user's password as a password hint&lt;/a&gt; when someone tries to unlock an encrypted partition on their machine known as an APFS container.&lt;/p&gt;
&lt;p&gt;Even the fix for this week's &quot;root&quot; bug has already hit snafus before this more serious one presented itself. The first version of Apple's patch broke some file-sharing functions on High Sierra, requiring Apple to put out a second version. Now Apple may have to reissue the &quot;root&quot; patch yet again, says MalwareBytes' Reed.&lt;/p&gt;
&lt;p&gt;&quot;Anyone rushing a patch like this could very easily make a mistake,&quot; Reed says. &quot;But the big question going around now is, what is Apple’s quality assurance [team] for Mac doing? I don’t know what’s going on that these bugs could have slipped past.&quot;&lt;/p&gt;
</description>
<pubDate>Fri, 01 Dec 2017 23:34:32 +0000</pubDate>
<dc:creator>platinumrad</dc:creator>
<og:type>article</og:type>
<og:title>MacOS Update Accidentally Undoes Apple's &quot;Root&quot; Bug Patch</og:title>
<og:description>The company's fix for an embarrassing security bug includes a big bug of its own.</og:description>
<og:image>https://media.wired.com/photos/5a21e2457aebf75e44004df9/191:100/pass/AppleSecurityFlaw-618599714.jpg</og:image>
<og:url>https://www.wired.com/story/macos-update-undoes-apple-root-bug-patch/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wired.com/story/macos-update-undoes-apple-root-bug-patch/</dc:identifier>
</item>
<item>
<title>After 37 years, Voyager has fired up its trajectory thrusters</title>
<link>https://arstechnica.com/science/2017/12/after-37-years-voyager-has-fired-up-its-trajectory-thrusters/</link>
<guid isPermaLink="true" >https://arstechnica.com/science/2017/12/after-37-years-voyager-has-fired-up-its-trajectory-thrusters/</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2017/12/PIA21839_hires-800x450.jpg&quot;/&gt;&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2017/12/PIA21839_hires.jpg&quot; class=&quot;enlarge-link&quot; data-height=&quot;1024&quot; data-width=&quot;1820&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; The Voyager team is able to use a set of four backup thrusters, dormant since 1980. They are located on the back side of the spacecraft in this orientation.&lt;/div&gt;&lt;div class=&quot;caption-credit&quot;&gt;NASA/JPL-Caltech&lt;/div&gt;
&lt;aside id=&quot;social-left&quot;&gt;&lt;a title=&quot;120 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/science/2017/12/after-37-years-voyager-has-fired-up-its-trajectory-thrusters/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-before&quot;&gt;reader comments&lt;/span&gt; &lt;span class=&quot;comment-count-number&quot;&gt;177&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;&lt;span&gt;Share this story&lt;/span&gt;    &lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;At present, the Voyager 1 spacecraft is 21 billion kilometers from Earth, or about 141 times the distance between the Earth and Sun. It has, in fact, moved beyond our Solar System into interstellar space. However, we can still communicate with Voyager across that distance.&lt;/p&gt;
&lt;p&gt;This week, the scientists and engineers on the Voyager team did something very special. They commanded the spacecraft to fire a set of four trajectory thrusters for the first time in 37 years to determine their ability to orient the spacecraft using 10-millisecond pulses.&lt;/p&gt;
&lt;aside class=&quot;pullbox sidebar story-sidebar right&quot;&gt;
&lt;/aside&gt;&lt;p&gt;After sending the commands on Tuesday, it took 19 hours and 35 minutes for the signal to reach Voyager. Then, the Earth-bound spacecraft team had to wait another 19 hours and 35 minutes to see if the spacecraft responded. &lt;em&gt;It did&lt;/em&gt;. After nearly four decades of dormancy, the Aerojet Rocketdyne manufactured thrusters fired perfectly.&lt;/p&gt;
&lt;p&gt;&quot;The Voyager team got more excited each time with each milestone in the thruster test. The mood was one of relief, joy, and incredulity after witnessing these well-rested thrusters pick up the baton as if no time had passed at all,&quot; &lt;a href=&quot;https://www.jpl.nasa.gov/news/news.php?release=2017-310&quot;&gt;said&lt;/a&gt; Todd Barber, a propulsion engineer at the Jet Propulsion Laboratory in California.&lt;/p&gt;
&lt;aside class=&quot;pullbox sidebar story-sidebar right&quot;&gt;
&lt;/aside&gt;&lt;p&gt;In recent decades, Voyager had been relying on its primary thrusters to keep the spacecraft properly oriented so that it can maintain a communications link with Earth. But these attitude control thrusters have been degrading over time, requiring more and more energy each time they've been used.&lt;/p&gt;
&lt;p&gt;By switching to the spacecraft's &quot;trajectory correction maneuver&quot; thrusters, last used during the spacecraft's encounter with Saturn in 1980, engineers say they will be able to extend the lifetime of Voyager by two or three more years before its waning power reserves expire.&lt;/p&gt;
</description>
<pubDate>Fri, 01 Dec 2017 20:55:41 +0000</pubDate>
<dc:creator>lisper</dc:creator>
<og:url>https://arstechnica.com/science/2017/12/after-37-years-voyager-has-fired-up-its-trajectory-thrusters/</og:url>
<og:title>After 37 years, Voyager 1 has fired up its trajectory thrusters</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2017/12/PIA21839_hires-760x380.jpg</og:image>
<og:description>This week, the scientists and engineers on the Voyager team did something very special.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/science/2017/12/after-37-years-voyager-has-fired-up-its-trajectory-thrusters/</dc:identifier>
</item>
<item>
<title>AT&amp;T wants you to forget that it blocked FaceTime over cellular in 2012</title>
<link>https://arstechnica.com/tech-policy/2017/12/att-says-it-never-blocked-apps-fails-to-mention-how-it-blocked-facetime/</link>
<guid isPermaLink="true" >https://arstechnica.com/tech-policy/2017/12/att-says-it-never-blocked-apps-fails-to-mention-how-it-blocked-facetime/</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2010/08/iPhones-Assaulting-Deathstar.jpg&quot;/&gt;&lt;div class=&quot;caption-credit&quot;&gt;Aurich Lawson&lt;/div&gt;&lt;aside id=&quot;social-left&quot;&gt;&lt;a title=&quot;65 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/tech-policy/2017/12/att-says-it-never-blocked-apps-fails-to-mention-how-it-blocked-facetime/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-before&quot;&gt;reader comments&lt;/span&gt; &lt;span class=&quot;comment-count-number&quot;&gt;130&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;&lt;span&gt;Share this story&lt;/span&gt;    &lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;AT&amp;amp;T's push to end net neutrality rules continued yesterday in a &lt;a href=&quot;https://www.attpublicpolicy.com/consumer-broadband/reports-of-the-internets-impending-death-are-grossly-exaggerated/&quot;&gt;blog post&lt;/a&gt; that says the company has never blocked third-party applications and that it won't do so even after the rules are gone.&lt;/p&gt;
&lt;p&gt;Just one problem: the blog post fails to mention that AT&amp;amp;T blocked Apple's FaceTime video chat application on iPhones in 2012 and 2013. Policy Director Matt Wood of advocacy group Free Press pointed out the omission in a tweet:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;I guess you can credit Bob Quinn &amp;amp; &lt;a href=&quot;https://twitter.com/ATTPublicPolicy?ref_src=twsrc%5Etfw&quot;&gt;@ATTPublicPolicy&lt;/a&gt; for having the guts to lie so confidently. But when it says &lt;a href=&quot;https://twitter.com/freepress?ref_src=twsrc%5Etfw&quot;&gt;@freepress&lt;/a&gt;'s 2010 &lt;a href=&quot;https://twitter.com/hashtag/NetNeutrality?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#NetNeutrality&lt;/a&gt; predictions about mobile blocking were wrong, AT&amp;amp;T conveniently omits blocking FaceTime on cellular in 2012. &lt;a href=&quot;https://t.co/zrl4cI2odn&quot;&gt;https://t.co/zrl4cI2odn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— (((Matt Wood))) (@mattfwood) &lt;a href=&quot;https://twitter.com/mattfwood/status/936626241049939974?ref_src=twsrc%5Etfw&quot;&gt;December 1, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In AT&amp;amp;T's new blog post, Senior Executive VP Bob Quinn refers back to a prediction Free Press made in 2010 when the first version of the Federal Communications Commission's net neutrality rules were adopted.&lt;/p&gt;
&lt;aside class=&quot;pullbox sidebar story-sidebar right&quot;&gt;
&lt;/aside&gt;&lt;p&gt;&quot;The rules pave the way for AT&amp;amp;T to block your access to third-party applications and to require you to use its own preferred applications,&quot; &lt;a href=&quot;https://www.freepress.net/press-release/2010/12/21/free-press-fcc-net-neutrality-order-%E2%80%98squandered-opportunity%E2%80%99&quot;&gt;Free Press said at the time&lt;/a&gt;. The 2010 rules imposed fewer restrictions on mobile carriers than on home Internet service providers, which is what raised concerns for Free Press back then.&lt;/p&gt;
&lt;p&gt;Quinn says now that Free Press's prediction was totally wrong.&lt;/p&gt;
&lt;p&gt;&quot;Of course, none of those predictions ever came true then and they won’t come true after the FCC acts here either,&quot; Quinn wrote yesterday.&lt;/p&gt;
&lt;p&gt;But in fact AT&amp;amp;T did &lt;a href=&quot;https://arstechnica.com/tech-policy/2012/08/att-have-you-no-shame/&quot;&gt;block FaceTime&lt;/a&gt; on its cellular network when users tried to access the application from certain data plans, such as unlimited data packages. Apple made FaceTime work over cellular networks in 2012 with the release of iOS 6, but AT&amp;amp;T &lt;a href=&quot;https://www.attpublicpolicy.com/fcc/enabling-facetime-over-our-mobile-broadband-network/&quot;&gt;said&lt;/a&gt; it would only &quot;enable&quot; FaceTime on cellular if you bought a &quot;Mobile Share data plan.&quot;&lt;/p&gt;
&lt;p&gt;Switching to Mobile Share required unlimited data customers to give up that unlimited perk. Even AT&amp;amp;T customers with limited data plans couldn't access FaceTime on cellular if they weren't paying for one of the then-new shared plans. If you didn't have the right data plan, you had to use Wi-Fi for FaceTime.&lt;/p&gt;
&lt;h2&gt;AT&amp;amp;T said it was reasonable network management&lt;/h2&gt;
&lt;p&gt;The 2010 net neutrality &lt;a href=&quot;https://apps.fcc.gov/edocs_public/attachmatch/FCC-10-201A1_Rcd.pdf&quot;&gt;rules&lt;/a&gt; prohibited mobile broadband providers from &quot;block[ing] applications that compete with their voice or video telephony services.&quot; The rule applied except when blocking an application could be justified as &quot;reasonable network management.&quot;&lt;/p&gt;
&lt;p&gt;Free Press and other groups &lt;a href=&quot;https://arstechnica.com/tech-policy/2012/09/att-faces-formal-fcc-complaint-for-blocking-cellular-facetime-use/&quot;&gt;filed an FCC complaint&lt;/a&gt; in September 2012 against AT&amp;amp;T, saying that the reasonable network management exception shouldn't apply. &quot;There is no technical reason why one data plan should be able to access FaceTime, and another not,&quot; Public Knowledge Senior Staff Attorney John Bergmayer &lt;a href=&quot;https://arstechnica.com/gadgets/2012/08/att-defends-facetime-decision-there-is-no-net-neutrality-violation/&quot;&gt;said at the time&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, AT&amp;amp;T disagreed. There is no &quot;blocking issue&quot; because FaceTime is pre-loaded on iPhones, Quinn wrote in &lt;a href=&quot;https://www.attpublicpolicy.com/fcc/enabling-facetime-over-our-mobile-broadband-network/&quot;&gt;August 2012&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The FCC's net neutrality rules do not regulate the availability to customers of applications that are pre-loaded on phones. Indeed, the rules do not require that providers make available &lt;em&gt;any&lt;/em&gt; pre-loaded apps. Rather, they address whether customers are able to download apps that compete with our voice or video telephony services. AT&amp;amp;T does not restrict customers from downloading any such lawful applications, and there are several video chat apps available in the various app stores serving particular operating systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Free Press countered that &quot;AT&amp;amp;T is inventing words that are not in the FCC's rules in a weak attempt to justify its blocking of FaceTime.&quot; The word &quot;pre-loaded&quot; did not appear in the FCC's 2010 net neutrality order.&lt;/p&gt;
&lt;p&gt;AT&amp;amp;T also applied restrictions to &lt;a href=&quot;https://arstechnica.com/information-technology/2013/05/facetime-redux-att-nixes-video-chat-on-googles-updated-hangouts/&quot;&gt;Google Hangouts on Android phones&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;AT&amp;amp;T eased the restrictions on limited data plans &lt;a href=&quot;https://arstechnica.com/gadgets/2013/01/att-continues-chipping-at-facetime-over-cellular-policy/&quot;&gt;a few months after the initial policy&lt;/a&gt;, but unlimited data customers were still blocked from using FaceTime. AT&amp;amp;T finally lifted all these limitations on pre-loaded video apps &lt;a href=&quot;https://arstechnica.com/gadgets/2013/05/pre-loaded-video-chat-apps-will-all-work-on-ats-network-by-years-end/&quot;&gt;by the end of 2013&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Quinn justified AT&amp;amp;T's decision to block FaceTime &lt;a href=&quot;https://www.attpublicpolicy.com/broadband/a-few-thoughts-on-facetime/&quot;&gt;again in November 2012&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&quot;[W]ith the FaceTime app already pre-loaded on tens of millions of AT&amp;amp;T customers' iPhones, there was no way for our engineers to effectively model usage, and thus to assess network impact,&quot; he wrote then.&lt;/p&gt;
&lt;h2&gt;Who do you trust?&lt;/h2&gt;
&lt;p&gt;But in this week's AT&amp;amp;T blog post claiming that AT&amp;amp;T never blocked third-party applications, the FaceTime blocking did not even warrant a mention. We asked an AT&amp;amp;T spokesperson why this wasn't included, but the company simply pointed us back to its statements from 2012.&lt;/p&gt;
&lt;p&gt;AT&amp;amp;T's blocking of FaceTime was cited by the Federal Communications Commission in its &lt;a href=&quot;https://apps.fcc.gov/edocs_public/attachmatch/FCC-15-24A1.pdf&quot;&gt;2015 decision&lt;/a&gt; to impose stronger rules on both home and mobile broadband providers. The current rules prohibit home and mobile ISPs from blocking or throttling any lawful Internet content, subject to reasonable network management.&lt;/p&gt;
&lt;p&gt;Those rules are about to be thrown out, as the FCC's Republican majority has scheduled a &lt;a href=&quot;https://arstechnica.com/tech-policy/2017/11/rip-net-neutrality-fcc-chair-releases-plan-to-deregulate-isps/&quot;&gt;December 14 vote&lt;/a&gt; to get rid of the net neutrality rules. While Free Press contends that Internet users can't trust ISPs to play fair without the rules, Quinn says that isn't true.&lt;/p&gt;
&lt;p&gt;&quot;AT&amp;amp;T intends to operate its network the same way AT&amp;amp;T operates its network today: in an open and transparent manner,&quot; he wrote yesterday. &quot;We will not block websites, we will not throttle or degrade internet traffic based on content, and we will not unfairly discriminate in our treatment of Internet traffic.&quot;&lt;/p&gt;
&lt;p&gt;In short, &quot;there will be no change in how your Internet works after the order is adopted,&quot; Quinn wrote.&lt;/p&gt;
</description>
<pubDate>Fri, 01 Dec 2017 20:15:29 +0000</pubDate>
<dc:creator>Deinos</dc:creator>
<og:url>https://arstechnica.com/tech-policy/2017/12/att-says-it-never-blocked-apps-fails-to-mention-how-it-blocked-facetime/</og:url>
<og:title>AT&amp;T wants you to forget that it blocked FaceTime over cellular in 2012</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2010/08/iPhones-Assaulting-Deathstar.jpg</og:image>
<og:description>AT&amp;T: Your Internet service won't change after FCC eliminates net neutrality rules.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/tech-policy/2017/12/att-says-it-never-blocked-apps-fails-to-mention-how-it-blocked-facetime/</dc:identifier>
</item>
<item>
<title>Things Many People Find Too Obvious to Have Told You Already</title>
<link>https://threadreaderapp.com/thread/936615043126370306</link>
<guid isPermaLink="true" >https://threadreaderapp.com/thread/936615043126370306</guid>
<description>&lt;div readability=&quot;31.543209876543&quot;&gt;I was literally the best qualified person in the prefecture to do my tax returns and it was still a poor decision. Find an accountant.
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-align=&quot;center&quot; data-dnt=&quot;true&quot; readability=&quot;5.4444444444444&quot;&gt;
&lt;p&gt;&lt;span class=&quot;entity-embed&quot;&gt;&lt;br/&gt;External Tweet loading...&lt;br/&gt;If nothing shows, it may have been deleted&lt;br/&gt;by @shoinwolfe &lt;a href=&quot;https://twitter.com/shoinwolfe/status/933875484198297600&quot;&gt;view original on Twitter&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;div readability=&quot;38&quot;&gt;&quot;Wow that's bold.&quot; No, it's not. Here's my Fermi estimate:&lt;p&gt;2 million people in Gifu&lt;br/&gt;0.1% of population is an accountant-equivalent&lt;br/&gt;5% of accountant-equivalents in Gifu are bilingual&lt;br/&gt;10% of those are comfortable with international taxation&lt;/p&gt;&lt;p&gt;None of other 9 people speak software.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;Notice how quickly playing the Venn diagram game puts you in a job market of 1? This is very useful for differentiating your offering and charging more (TM). There's ~3 million software developers in the US and that number falls of scary fast when you start adding things.&lt;/p&gt;</description>
<pubDate>Fri, 01 Dec 2017 19:16:57 +0000</pubDate>
<dc:creator>JoshTriplett</dc:creator>
<og:title>Unrolled thread from @patio11 - 23 tweets</og:title>
<og:image>https://threadreaderapp.com/images/screenshots/thread/936615043126370306.jpg?type=thread</og:image>
<og:url>https://threadreaderapp.com/thread/936615043126370306</og:url>
<og:description>Some people really benefit from hearing advice that everyone knows, for the same reason we keep schools open despite every subject in them having been taught before. In that spirit, here's some quick Things Many People Find Too Obvious To Have Told Y</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://threadreaderapp.com/thread/936615043126370306</dc:identifier>
</item>
<item>
<title>Linux Journal Ceases Publication</title>
<link>http://www.linuxjournal.com/content/linux-journal-ceases-publication</link>
<guid isPermaLink="true" >http://www.linuxjournal.com/content/linux-journal-ceases-publication</guid>
<description>

EOF It looks like we’re at the end, folks. If all goes according to a plan we’d rather not have, the November issue of &lt;cite&gt;Linux Journal&lt;/cite&gt; was our last. The simple fact is that we’ve run out of money, and options along with it. We never had a wealthy corporate parent or deep pockets of our own, and that made us an anomaly among publishers, from start to finish. While we got to be good at flying close to the ground for a long time, we lost what little elevation we had in November, when the scale finally tipped irrevocably to the negative. While we see a future like publishing’s past—a time when advertisers sponsor a publication because they value its brand and readers—the advertising world we have today would rather chase eyeballs, preferably by planting tracking beacons in readers' browsers and zapping them with ads anywhere those readers show up. But that future isn’t here, and the past is long gone. There is some hope, we suppose, that a savior might come through; but it will have to be one willing to pick up some of our debt, in addition to our brand, our archive, our domains and our subscribers and readers. If you know anyone who can make a serious offer, let us know. Otherwise, watch LinuxJournal.com and hope that at least our legacy archives (which go back to &lt;cite&gt;Linux Journal&lt;/cite&gt;’s birth in April 1994, when Linux hit 1.0) won’t go away. There’s a lot of great stuff here, and a lot of history we’d hate the world to lose. Our biggest regret is that we don’t even have enough money to return to the people who have valued us most: our subscribers. For that we could not apologize more deeply or sincerely. What we do have for subscribers: &lt;cite&gt;Linux Pro Magazine&lt;/cite&gt; has offered our subscribers six free issues of their magazine, a publication we at &lt;cite&gt;Linux Journal&lt;/cite&gt; have always admired. In our time of need, they were the first ones there for us, and we are thankful for their gracious offer. We also just finished up our 2017 archive today, which includes every issue we’ve ever published, including the first and last ones. Normally we sell that for $25, but obviously subscribers will get it for no cost. Subscribers, watch for an e-mail with details about both. We also hope there is some solace in knowing that we worked very, very hard at keeping &lt;cite&gt;Linux Journal&lt;/cite&gt; going, and we’ve been doing that for a long time, running the leanest, smallest possible operation we could. We are a collection mostly of volunteers, and some of our employees haven’t been paid in months. We still owe money to freelancers as well. There is a limit to how long a publisher can maintain those neglects, and that limit has now been reached. It has been a great run, folks. A big hats-off to everyone who contributed to our birth, our success and our persistence over these many years. We’d run the credits now, but the list would be too long, and the risk of leaving worthy people out would be too high. You know who you are. Our thanks again.</description>
<pubDate>Fri, 01 Dec 2017 18:54:56 +0000</pubDate>
<dc:creator>voidmain0001</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.linuxjournal.com/content/linux-journal-ceases-publication</dc:identifier>
</item>
<item>
<title>Ask HN: Who is hiring? (December 2017)</title>
<link>https://news.ycombinator.com/item?id=15824597</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=15824597</guid>
<description>&lt;tr readability=&quot;0.55737704918033&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.0325097529259&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;5.2743823146944&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;15824597&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15824597&quot; class=&quot;storylink&quot;&gt;Ask HN: Who is hiring? (December 2017)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.70588235294118&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_15824597&quot;&gt;527 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=whoishiring&quot; class=&quot;hnuser&quot;&gt;whoishiring&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15824597&quot;&gt;23 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_15824597&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=15824597&amp;amp;goto=item%3Fid%3D15824597&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20Who%20is%20hiring%3F%20(December%202017)&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20Who%20is%20hiring%3F%20(December%202017)&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=15824597&amp;amp;auth=98a39ff93f9e140c574221f03564525ebbdfbebf&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=15824597&quot;&gt;782 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12.5&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;12&quot;&gt;Please lead with the location of the position and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE. If it isn't a household name, please explain what your company does.
&lt;p&gt;Submitters: please only post if you personally are part of the hiring company—no recruiting firms or job boards. One post per company please.&lt;/p&gt;
&lt;p&gt;Readers: please only email submitters if you personally are interested in the job—no recruiters or sales calls.&lt;/p&gt;
&lt;p&gt;You can also use kristopolous' console script to search the thread: https://news.ycombinator.com/item?id=10313519.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.0096153846154&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/dmca.html&quot;&gt;DMCA&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Fri, 01 Dec 2017 16:01:11 +0000</pubDate>
<dc:creator>whoishiring</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=15824597</dc:identifier>
</item>
<item>
<title>iOS 11 Horror Story: The Rise and Fall of iOS Security</title>
<link>https://blog.elcomsoft.com/2017/11/ios-11-horror-story-the-rise-and-fall-of-ios-security/</link>
<guid isPermaLink="true" >https://blog.elcomsoft.com/2017/11/ios-11-horror-story-the-rise-and-fall-of-ios-security/</guid>
<description>&lt;p&gt;We loved what Apple used to do about security. During the past years, the company managed to build a complete, multi-layer system to secure its hardware and software ecosystem and protect its customers against common threats. Granted, the system was not without its flaws (most notably, the obligatory use of a trusted phone number – think SS7 vulnerability – for the purpose of two-factor authentication), but overall it was still the most secure mobile ecosystem on the market.&lt;/p&gt;
&lt;p&gt;Not anymore. The release of iOS 11, which we praised in the past for the &lt;a href=&quot;https://blog.elcomsoft.com/2017/09/new-security-measures-in-ios-11-and-their-forensic-implications/&quot;&gt;new S.O.S. mode and the requirement to enter a passcode in order to establish trust&lt;/a&gt; with a new computer, also made a number of other changes under the hood that we have recently discovered. Each and every one of these changes was aimed at making the user’s life easier (as in “more convenience”), and each came with a small trade off in security. Combined together, these seemingly small changes made devastating synergy, effectively stripping each and every protection layer off the previously secure system. Today, only one thing is protecting your data, your iOS device and all other Apple devices you have registered on your Apple account.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The passcode&lt;/strong&gt;. This is all that’s left of iOS security in iOS 11. If the attacker has your iPhone and your passcode is compromised, you lose your data; your passwords to third-party online accounts; your Apple ID password (and obviously the second authentication factor is not a problem). Finally, you lose access to all other Apple devices that are registered with your Apple ID; they can be wiped or locked remotely. All that, and more, just because of one passcode and stripped-down security in iOS 11.&lt;/p&gt;

&lt;h2&gt;So What’s the Big Deal?&lt;/h2&gt;
&lt;p&gt;If you are working in a sensitive environment, is front door security all you need to secure a building? Don’t you need additional checks or e-keys to enter some rooms? This no longer applies to iOS. Once you have a passcode, you then have access to everything. Let us have a look at what you can do to the user and their data once you have their i-device and know their passcode.&lt;/p&gt;
&lt;h2&gt;The iTunes Backup Password&lt;/h2&gt;
&lt;p&gt;Imagine you’re working for a company whose main business is breaking passwords. iPhone backups one can make with Apple iTunes or third-party apps such as &lt;a href=&quot;https://www.elcomsoft.com/eift.html&quot;&gt;iOS Forensic Toolkit&lt;/a&gt; can be protected with a password. That password is strong or very strong depending on the version of iOS. Your company builds better software, while Apple makes backup passwords even more secure. In the end, Apple seemingly wins the race: breaking those passwords now requires a powerful computer (or multiple computers) equipped with high-end video cards, but even then, you cannot try more than handful passwords per second.&lt;/p&gt;
&lt;p&gt;Then Apple makes a sudden twist, allowing anyone to simply reset that highly secure password. That’s what they did in iOS 11. If you have access to the device and know its passcode, you will no longer need to perform lengthy attacks. Just go ahead and remove that password.&lt;/p&gt;
&lt;p&gt;Why is this important? Before I tell you that, let us look at how it used to be in iOS 8, 9 and 10.&lt;/p&gt;
&lt;h3&gt;Backup Passwords in iOS 8, 9 and 10&lt;/h3&gt;
&lt;p&gt;In these versions of iOS, one could protect their backups by specifying a backup password in iTunes. One would only need to do it once. Once a password was set, all future backups made on that computer and any other computer, with no exceptions, would be protected with that password:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter&quot; src=&quot;https://support.apple.com/library/content/dam/edam/applecare/images/en_US/mac_apps/itunes/macos-itunes12-7-iphone7-summary-backups-encrypt-backup-callout.jpg&quot; width=&quot;500&quot; height=&quot;299&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The password would become the property of the i-device and not the PC (or the copy of iTunes) that was used to set the password. You could connect your phone to a different computer and make a local backup with a freshly installed copy of iTunes, and that backup would still be protected with the password you set a long time ago.&lt;/p&gt;
&lt;p&gt;Any attempt to change or remove that password must pass through iOS, which would require to provide the old password first. Forgot the original password? There’s no going back, you’re stuck with what you have unless you are willing to factory reset the device and lose all data in the process.&lt;/p&gt;
&lt;p&gt;If you ask me, this was a perfect and carefully thought through solution. Want to protect your data against an attacker? Set a long and complex backup password and don’t store it anywhere. Forgot that password? You can still make a cloud backup and restore your phone from that backup; even your passwords (keychain) would be restored if you rolled out the cloud backup onto the same device you made the backup from (or used iCloud Keychain if that was to be a different device).&lt;/p&gt;
&lt;p&gt;A perfect system? Apparently, it was not to everyone’s liking. The users whined. The police complained. The FBI complained. And Apple gave up.&lt;/p&gt;
&lt;h3&gt;iOS 11: Stripping Backup Passwords&lt;/h3&gt;
&lt;p&gt;In iOS 11 you can still specify a backup password in iTunes, and you still cannot change or reset it through iTunes if you don’t know the original password. However, this means very little as you can now easily remove that password from iOS settings.&lt;/p&gt;
&lt;p&gt;This is what Apple has to say in its &lt;a href=&quot;https://support.apple.com/en-us/HT205220&quot;&gt;Knowledge Base&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You can’t restore an encrypted backup without its password. With iOS 11 or later, you can make a new encrypted backup of your device by resetting the password. Here’s what to do:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;em&gt;On your iOS device, go to Settings &amp;gt; General &amp;gt; Reset.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Tap Reset All Settings and enter your iOS passcode.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Follow the steps to reset your settings. This won’t affect your user data or passwords, but it will reset settings like display brightness, Home screen layout, and wallpaper. It also removes your encrypted backup password.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Connect your device to iTunes again and create a new encrypted backup.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;em&gt;You won’t be able to use previous encrypted backups, but you can back up your current data using iTunes and setting a new backup password.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you have a device with iOS 10 or earlier, you can’t reset the password. &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You’ll be looking for these settings:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4410 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/reset1-1-311x550.png&quot; alt=&quot;&quot; width=&quot;311&quot; height=&quot;550&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/reset1-1-311x550.png 311w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/reset1-1-579x1024.png 579w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/reset1-1.png 750w&quot; sizes=&quot;(max-width: 311px) 100vw, 311px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4411 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/reset2-1-309x550.png&quot; alt=&quot;&quot; width=&quot;309&quot; height=&quot;550&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/reset2-1-309x550.png 309w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/reset2-1-576x1024.png 576w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/reset2-1.png 750w&quot; sizes=&quot;(max-width: 309px) 100vw, 309px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;That’s it? That’s it. You have just removed the backup password. You can now make a new backup or, rather, extract information from the device. Don’t rush and make sure to specify a temporary password (“123” always works) before you make that backup. A password-protected backup will allow you decrypting the user’s passwords, credit card data, health data and other things that would be otherwise inaccessible.&lt;/p&gt;
&lt;p&gt;So, set a temporary password, make that backup, decrypt it with &lt;a href=&quot;https://www.elcomsoft.com/eppb.html&quot;&gt;Elcomsoft Phone Breaker&lt;/a&gt; or just use &lt;em&gt;Keychain Explorer&lt;/em&gt; (a tool in Elcomsoft Phone Breaker) to access that user’s passwords, authentication tokens, credit card numbers and other interesting things. Oh, and their pictures, too.&lt;/p&gt;
&lt;p&gt;Passwords:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/keychain.png&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-4436&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/keychain-550x345.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;345&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/keychain-550x345.png 550w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/keychain-768x482.png 768w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/keychain-1024x643.png 1024w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While there, look for their Google Account password. If it is there in the keychain (and I don’t see why not), you’ll gain access to a whole lot of highly interesting information including several years worth of precise location data, all passwords they saved in Chrome, Google Photos, bookmarks, Google search history and a log more. Two-factor authentication? I bet it’s that SIM card or Google Prompt on the iPhone in your hands.&lt;/p&gt;
&lt;p&gt;What if you don’t have any photos in the backup? Check in the iOS Settings app whether iCloud Photo Library is enabled in iCloud account – Sync – Photos. If it is, the photos are synced with iCloud and are not included in local or cloud backups. Simply switching this feature off makes it possible to back up the photos into a local backup.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-4414 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/iCloud-Photos-422x550.png&quot; alt=&quot;&quot; width=&quot;287&quot; height=&quot;374&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/iCloud-Photos-422x550.png 422w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/iCloud-Photos.png 442w&quot; sizes=&quot;(max-width: 287px) 100vw, 287px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;What if the iPhone in question runs an earlier version of iOS that does not allow removing backup passwords? I say you’re lucky because you can simply update that device to iOS 11 and then reset that password. We tried this strategy multiple times, and not once did we have an issue.&lt;/p&gt;
&lt;p&gt;What if the device simply cannot run iOS 11, like that iPhone 5c from San-Bernardino? If this is the case, your best bet is attempting to jailbreak that iPhone. 32-bit devices (iPhone 4s, 5, and 5c) allow for complete physical acquisition (including the keychain). Just note that we are talking about the situation when the passcode is known, though that was not the case in San-Bernardino.&lt;/p&gt;
&lt;p&gt;With access to just an iPhone and its passcode, you have already gained access to all of the following:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Everything contained in a local backup (with a password)&lt;/li&gt;
&lt;li&gt;Passwords and tokens from the local keychain&lt;/li&gt;
&lt;li&gt;Local pictures and videos&lt;/li&gt;
&lt;li&gt;Application data (mostly SQLite)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This alone is massive, but that was just the beginning. You can do more; in fact, a lot more. What if I say you can now change the user’s Apple ID password, remove iCloud lock, remotely lock and/or erase user’s other devices and make sure they can never get back control over their account?&lt;/p&gt;
&lt;h2&gt;Changing Apple ID Password and Removing iCloud Lock&lt;/h2&gt;
&lt;p&gt;Normally, changing an account password requires confirming the old password first. In some cases, one could reset a password by receiving a one-time password reset link to a trusted address. This is about the same for the Big Three (Apple, Google and Microsoft) if you do it through the browser.&lt;/p&gt;
&lt;p&gt;But (and this is a very important “but”) Apple has its own way. For Apple accounts with two-factor authentication, one can &lt;a href=&quot;https://blog.elcomsoft.com/2017/11/breaking-apple-icloud-reset-password-and-bypass-two-factor-authentication/&quot;&gt;simply reset their Apple ID password&lt;/a&gt; from the device by confirming their device passcode (as opposed to supplying their old Apple ID password).&lt;/p&gt;
&lt;p&gt;What does that mean in practice? If you have someone’s iPhone, and you happen to know or can recover the passcode (solutions allowing to brute-force device passcodes are available on the market), you can do the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Change the user’s Apple ID password&lt;/li&gt;
&lt;li&gt;Remove iCloud lock (then reset and re-activate the iPhone on another account)&lt;/li&gt;
&lt;li&gt;Discover physical location of their other devices registered on the same Apple account&lt;/li&gt;
&lt;li&gt;Remotely lock or erase those devices&lt;/li&gt;
&lt;li&gt;Replace original user’s trusted phone number (from then on, you’ll be receiving that user’s 2FA codes to your own SIM card)&lt;/li&gt;
&lt;li&gt;Access everything stored in the user’s iCloud account&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So how do you reset the user’s Apple account / iCloud password? For that, we’ll use the preinstalled Find My Phone app (reminder: this is going to work on 2FA-enabled accounts only):&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4415 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_1_FMP-309x550.png&quot; alt=&quot;&quot; width=&quot;309&quot; height=&quot;550&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_1_FMP-309x550.png 309w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_1_FMP-576x1024.png 576w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_1_FMP.png 750w&quot; sizes=&quot;(max-width: 309px) 100vw, 309px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;From there, tap “Forgot Apple ID or password?” The app will prompt for device passcode:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4416 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_2_Passcode-309x550.png&quot; alt=&quot;&quot; width=&quot;309&quot; height=&quot;550&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_2_Passcode-309x550.png 309w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_2_Passcode-576x1024.png 576w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_2_Passcode.png 750w&quot; sizes=&quot;(max-width: 309px) 100vw, 309px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Enter the passcode. During the next step, enter and confirm a new Apple ID password (same as iCloud password):&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4417 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_3_ChangePassword-309x550.png&quot; alt=&quot;&quot; width=&quot;309&quot; height=&quot;550&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_3_ChangePassword-309x550.png 309w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_3_ChangePassword-576x1024.png 576w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method2_3_ChangePassword.png 750w&quot; sizes=&quot;(max-width: 309px) 100vw, 309px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;It’s that simple. You were never prompted to enter the original Apple account password; device passcode was enough to reset account password.&lt;/p&gt;
&lt;p&gt;Is this a bug in the Find My Phone app? Absolutely not! You can do the same even without using the app. Open the Settings app on the user’s iPhone, and open the user’s Apple ID settings. From there, open Password &amp;amp; Security:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4418 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_3_PasswordAndSecurity-309x550.png&quot; alt=&quot;&quot; width=&quot;309&quot; height=&quot;550&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_3_PasswordAndSecurity-309x550.png 309w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_3_PasswordAndSecurity-576x1024.png 576w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_3_PasswordAndSecurity.png 750w&quot; sizes=&quot;(max-width: 309px) 100vw, 309px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Tap Change Password. You will be prompted for device passcode:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4420 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_4_EnterPasscode-309x550.png&quot; alt=&quot;&quot; width=&quot;309&quot; height=&quot;550&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_4_EnterPasscode-309x550.png 309w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_4_EnterPasscode-576x1024.png 576w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_4_EnterPasscode.png 750w&quot; sizes=&quot;(max-width: 309px) 100vw, 309px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Then you’ll be able to change the password to iCloud / Apple ID:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4421 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_5_ChangePassword-309x550.png&quot; alt=&quot;&quot; width=&quot;309&quot; height=&quot;550&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_5_ChangePassword-309x550.png 309w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_5_ChangePassword-576x1024.png 576w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/Method1_5_ChangePassword.png 750w&quot; sizes=&quot;(max-width: 309px) 100vw, 309px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In fact, you can do even more from the Settings app compared to Find My Phone. In addition to account password, you can also replace the user’s Trusted Phone Number with your own phone number, making it insanely difficult for the ex-owner to regain control over now-yours Apple account. In order to replace the trusted phone number, first add and confirm a new trusted number; then you can remove the old one.&lt;/p&gt;
&lt;p&gt;At this point, removing iCloud lock (the very lock that protects iOS devices from theft) it as easy as switching off Find My iPhone and typing your newly created Apple ID password.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4422 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/find-413x550.jpg&quot; alt=&quot;&quot; width=&quot;413&quot; height=&quot;550&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/find-413x550.jpg 413w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/find-768x1024.jpg 768w&quot; sizes=&quot;(max-width: 413px) 100vw, 413px&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Accessing iCloud Account&lt;/h2&gt;
&lt;p&gt;Access to iCloud data (backups, synced data, iCloud Photos and stored passwords) is normally securely protected. In order to access that data you would need a login and password (and access to the second authentication factor).&lt;/p&gt;
&lt;p&gt;Wait! We’ve just reset the user’s iCloud password, and we’ve just added a new phone number to receive one-time codes! This means we can easily access everything the user has in their Apple account, including iCloud backups, photos taken on all of their devices, their iCloud Keychain, contacts, call logs, and a lot more.&lt;/p&gt;
&lt;h2&gt;iCloud Backups&lt;/h2&gt;
&lt;p&gt;We wrote about iCloud backups many times before. In a word, Apple may store up to three last backups per device. If the user has multiple iOS devices registered on the same Apple ID, up to 3 cloud backups will be available for each device.&lt;/p&gt;
&lt;p&gt;By resetting the iCloud password, you’ve just opened the possibility to access those backups. All you need is the user’s Apple ID, your newly reset password, and one-time code to pass two-factor authentication.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://support.apple.com/library/content/dam/edam/applecare/images/en_US/iOS/iphone7-ios11-settings-apple-id-password-security-verification-code.jpg&quot;&gt;&lt;img class=&quot;aligncenter&quot; src=&quot;https://support.apple.com/library/content/dam/edam/applecare/images/en_US/iOS/iphone7-ios11-settings-apple-id-password-security-verification-code.jpg&quot; width=&quot;218&quot; height=&quot;445&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use Elcomsoft Phone Breaker to download backups. [Tools] | [Apple] | [Download from iCloud] | [Backups].&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4423 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/download_backup-550x362.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;362&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/download_backup-550x362.png 550w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/download_backup.png 618w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The backup will be downloaded and saved in the iTunes format. You can view its content with &lt;a href=&quot;https://www.elcomsoft.com/epv.html&quot;&gt;Elcomsoft Phone Viewer&lt;/a&gt; or other forensic tools.&lt;/p&gt;
&lt;h2&gt;Call Logs, Files and Synced Data&lt;/h2&gt;
&lt;p&gt;iCloud is a lot more than just backups. Apple devices use iCloud to sync information such as browser bookmarks and open tabs, Web browsing history, contacts, notes, call logs, and even passwords. This information is collected and synchronized across all devices registered on the same Apple account.&lt;/p&gt;
&lt;p&gt;Extracting synced data is simple. Just use &lt;span&gt;Elcomsoft Phone Breaker&lt;/span&gt; to download, and &lt;span&gt;Elcomsoft Phone Viewer&lt;/span&gt; to analyse.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4424 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/epv_calls-550x433.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;433&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/epv_calls-550x433.png 550w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/epv_calls-768x605.png 768w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/epv_calls.png 832w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;What if the user has a Mac? We can then access Documents and Desktop files synced by that Mac with iCloud Drive! Use Elcomsoft Phone Breaker: [Tools] | [Apple] | [Download from iCloud] | [iCloud Drive] to obtain those files. Finally, as an added bonus, you may be able to extract the user’s FileVault2 recovery key (if the user allowed cloud recovery, that is).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud_files.png&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-4437&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud_files-550x362.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;362&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud_files-550x362.png 550w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud_files-768x506.png 768w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud_files-1024x675.png 1024w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Passwords: iCloud Keychain&lt;/h2&gt;
&lt;p&gt;iCloud Keychain is a cloud service for synchronizing Safari passwords, authentication tokens and payment information across iOS devices. After changing iCloud password and assuming you know device passcode (and this, for the purpose of this article, is a given), you can easily download those passwords.&lt;/p&gt;
&lt;p&gt;Step 1: in Elcomsoft Phone Breaker click [Tool] | [Apple] | [Download from iCloud] | [Keychain]&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4425 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-1-550x362.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;362&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-1-550x362.png 550w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-1.png 618w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Step 2: use login, password and 2FA code to log in to iCloud&lt;/p&gt;
&lt;p&gt;Step 3: select a trusted device from the list (this must be the device that you know the passcode to) and enter its passcode into the &lt;em&gt;Device passcode&lt;/em&gt; box&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4426 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-2-550x362.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;362&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-2-550x362.png 550w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-2.png 618w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Step 4: the iCloud Keychain will be downloaded. You can now go back to the main window and open &lt;em&gt;Keychain Explorer&lt;/em&gt; to access those passwords. By the way, you will now have access to the original (old) password to the user’s Apple ID account, as well as (possibly) passwords and tokens to that user’s other Apple ID accounts, if there are any. In addition, you may also see passwords to email accounts and Wi-Fi networks, as well as pretty much every password the user typed in Safaru.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4427 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-3-550x367.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;367&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-3-550x367.png 550w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-3.png 612w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-medium wp-image-4428 aligncenter&quot; src=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-4-550x366.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;366&quot; srcset=&quot;https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-4-550x366.png 550w, https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud-keychain-4.png 612w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With the release of iOS 11, Apple developers made too many assumptions, breaking the fragile security/convenience balance and shifting it heavily onto convenience side.&lt;/p&gt;
&lt;p&gt;Once an intruder gains access to the user’s iPhone and knows (or recovers) the passcode, there is no single extra layer of protection left. Everything (and I mean, everything) is now completely exposed. Local backups, the keychain, iCloud lock, Apple account password, cloud backups and photos, passwords from the iCloud Keychain, call logs, location data, browsing history, browser tabs and even the user’s original Apple ID password are quickly exposed. The intruder gains control over the user’s other Apple devices registered on the same Apple account, having the ability to remotely erase or lock those devices. Finally, regaining control over hijacked account is made difficult as even the trusted phone number can be replaced.&lt;/p&gt;
&lt;p&gt;This is just scary. Why Apple decided to get rid of the system that used to deliver a seemingly perfect balance between security and convenience is beyond us.&lt;/p&gt;
&lt;p&gt;If you don’t think this is a big issue, just one word for you: &lt;a href=&quot;https://en.wikipedia.org/wiki/ICloud_leaks_of_celebrity_photos&quot;&gt;celebgate&lt;/a&gt;. Obviously, the victims had a password protecting their accounts, and yet that was not enough to stop hackers from stealing their photos. This is what the second protection layer is for as delivered by two-factor authentication. What I am saying is: once &lt;em&gt;they&lt;/em&gt; have &lt;em&gt;your&lt;/em&gt; iPhone and &lt;em&gt;your&lt;/em&gt; passcode, you are no longer in control of &lt;em&gt;their&lt;/em&gt; device and &lt;em&gt;their&lt;/em&gt; Apple account.&lt;/p&gt;
&lt;p&gt;What can you do to protect yourself? Since the passcode is now the one and only safeguard left, make sure you use at least 6 digits. Four-digit PINs are no longer secure. Other than that, we’ll just wait and see if Apple can fix it.&lt;/p&gt;
&lt;br/&gt;&lt;div class=&quot;nodash&quot; readability=&quot;14.893617021277&quot;&gt;
&lt;p&gt;Tags: &lt;a href=&quot;https://blog.elcomsoft.com/tag/2fa/&quot; rel=&quot;tag&quot;&gt;2FA&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/tag/elcomsoft-phone-breaker/&quot; rel=&quot;tag&quot;&gt;Elcomsoft Phone Breaker&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/tag/elcomsoft-phone-viewer/&quot; rel=&quot;tag&quot;&gt;Elcomsoft Phone Viewer&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/tag/epb/&quot; rel=&quot;tag&quot;&gt;EPB&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/tag/epv/&quot; rel=&quot;tag&quot;&gt;EPV&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/tag/filevault/&quot; rel=&quot;tag&quot;&gt;FileVault&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/tag/icloud/&quot; rel=&quot;tag&quot;&gt;iCloud&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/tag/ios-11/&quot; rel=&quot;tag&quot;&gt;ios 11&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/tag/passcode/&quot; rel=&quot;tag&quot;&gt;passcode&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/tag/two-factor-authentication/&quot; rel=&quot;tag&quot;&gt;Two-Factor Authentication&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;postmetadata alt&quot;&gt;&lt;small&gt;This entry was posted on Wednesday, November 29th, 2017 at 4:59 pm and is filed under &lt;a href=&quot;https://blog.elcomsoft.com/category/did-you-know-that/&quot; rel=&quot;category tag&quot;&gt;Did you know that...?&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/category/security/&quot; rel=&quot;category tag&quot;&gt;Security&lt;/a&gt;, &lt;a href=&quot;https://blog.elcomsoft.com/category/software/&quot; rel=&quot;category tag&quot;&gt;Software&lt;/a&gt;. You can follow any responses to this entry through the &lt;a href=&quot;https://blog.elcomsoft.com/2017/11/ios-11-horror-story-the-rise-and-fall-of-ios-security/feed/&quot;&gt;RSS 2.0&lt;/a&gt; feed. Both comments and pings are currently closed.&lt;/small&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 01 Dec 2017 06:55:07 +0000</pubDate>
<dc:creator>Maakuth</dc:creator>
<og:title>iOS 11 Horror Story: the Rise and Fall of iOS Security</og:title>
<og:url>https://blog.elcomsoft.com/2017/11/ios-11-horror-story-the-rise-and-fall-of-ios-security/</og:url>
<og:type>article</og:type>
<og:description>We loved what Apple used to do about security. During the past years, the company managed to build a complete, multi-layer system to secure its hardware and software ecosystem and protect its customers against common threats. Granted, the system was not without its flaws (most notably, the obligator</og:description>
<og:image>https://blog.elcomsoft.com/wp-content/uploads/2017/11/icloud1200x630.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.elcomsoft.com/2017/11/ios-11-horror-story-the-rise-and-fall-of-ios-security/</dc:identifier>
</item>
<item>
<title>Writing a C Compiler, Part 1</title>
<link>https://norasandler.com/2017/11/29/Write-a-Compiler.html</link>
<guid isPermaLink="true" >https://norasandler.com/2017/11/29/Write-a-Compiler.html</guid>
<description>&lt;p&gt;This is the first post in a series on writing your own C compiler. Here are some reasons to write a compiler:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;You’ll learn about abstract syntax trees (ASTs) and how programs can represent and manipulate other programs. Handy for working with linters, static analyzers, and metaprogramming of all sorts.&lt;/li&gt;
&lt;li&gt;You’ll learn about assembly, calling conventions, and all the gritty, low-level details of how computers, like, do stuff.&lt;/li&gt;
&lt;li&gt;It seems like an impossibly hard project (but isn’t!), so writing one will make you feel like a badass.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I’ve been working on my own C compiler, &lt;a href=&quot;https://github.com/nlsandler/nqcc&quot;&gt;nqcc&lt;/a&gt; for the past several weeks, using Abdulaziz Ghuloum’s &lt;a href=&quot;http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf&quot;&gt;An Incremental Approach to Compiler Construction&lt;/a&gt; as a roadmap. I really like Ghuloum’s approach: you start by compiling a tiny, trivial subset of your source language all the way down to &lt;a href=&quot;https://drawings.jvns.ca/assembly/&quot;&gt;x86 assembly&lt;/a&gt;. Then you add new language features, one step at a time. In step one, you just return constants; in a later step you handle addition and subtraction; and so on. Every step is small enough to feel manageable, and at the end of the every step you have a working compiler.&lt;/p&gt;
&lt;p&gt;This series is adapted from Ghuloum’s paper - the original paper is about compiling Scheme, so I had to make some adjustments to compile C instead. I’ll cover arithmetic operations, conditionals, local variables, function calls, and perhaps more. I’ve also written some &lt;a href=&quot;https://github.com/nlsandler/write_a_c_compiler&quot;&gt;test programs&lt;/a&gt; that you can use to validate that each stage of your compiler works correctly.&lt;/p&gt;

&lt;p&gt;Before you start, you need to decide on two things: what language to write your compiler in, and how to handle parsing and lexing. You can implement the compiler in whatever language you like, but I’d recommend using a language with sum types and pattern matching&lt;sup id=&quot;anchor1&quot;&gt;&lt;a href=&quot;https://norasandler.com/2017/11/29/Write-a-Compiler.html#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, like OCaml, Haskell, or Rust. It will be SO MUCH EASIER to build and traverse an AST if you do. I started writing nqcc in Python, which I know very well, then got fed up and switched to OCaml, which I didn’t know well at all, and it was definitely worth it.&lt;/p&gt;
&lt;p&gt;You also need to decide whether to write your own parser and lexer or use automatic parser and scanner generators (e.g. &lt;a href=&quot;https://github.com/westes/flex&quot;&gt;flex&lt;/a&gt; and &lt;a href=&quot;https://www.gnu.org/software/bison/&quot;&gt;bison&lt;/a&gt;). In this series of posts, I’ll show you how to write a lexer (or scanner) and recursive descent parser by hand. Using a parser generator is probably easier, but I haven’t tried it so I could be wrong. You could probably also use a scanner generator for lexing, but hand-write your own parser. Basically, do whatever you like, but I’m only going to talk about hand-writing a lexer and parser for the rest of this series, so if you want to use bison and flex you’re on your own.&lt;/p&gt;

&lt;p&gt;This week, we’ll compile a program that returns a single integer. We’ll also set up the three basic passes of our compiler. This will be a lot of work for not that much payoff, but the architecture we define now will make it easy to add more language features later on.&lt;/p&gt;
&lt;p&gt;Here’s a program we’d like to compile - we’ll call it return_2.c:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll only handle programs with a single function, &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;, consisting of a single return statement. The only thing that varies is the value of the integer being returned. We won’t handle hex or octal integer literals, just decimal. To verify that your compiler works correctly, you’ll need to compile a program, run it, and check its return code:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./YOUR_COMPILER return_2.c &lt;span class=&quot;c&quot;&gt;# compile the source file shown above&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./gcc &lt;span class=&quot;nt&quot;&gt;-m32&lt;/span&gt; return_2.s &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; return_2 &lt;span class=&quot;c&quot;&gt;# assemble it into an executable&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./return_2 &lt;span class=&quot;c&quot;&gt;# run the executable you just compiled&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# check the return code; it should be 2&lt;/span&gt;
2 
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Your compiler will produce x86 assembly. We won’t transform the assembly into an executable ourselves - that’s the job of the assembler and linker, which are separate programs&lt;sup id=&quot;anchor2&quot;&gt;&lt;a href=&quot;https://norasandler.com/2017/11/29/Write-a-Compiler.html#fn2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. To see how this program looks in assembly, let’s compile it with gcc&lt;sup id=&quot;anchor3&quot;&gt;&lt;a href=&quot;https://norasandler.com/2017/11/29/Write-a-Compiler.html#fn3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O3&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fno-asynchronous-unwind-tables&lt;/span&gt; return_2.c
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;return_2.s
    .section __TEXT,__text_startup,regular,pure_instructions
    .align 4
    .globl _main
_main:
    movl    &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;, %eax
    ret
    .subsections_via_symbols
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, let’s look at the assembly itself. We can ignore the &lt;code class=&quot;highlighter-rouge&quot;&gt;.section&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.align&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.subsections_via_symbols&lt;/code&gt; directives - if you delete them, you can still assemble and run return_2.s&lt;sup id=&quot;anchor4&quot;&gt;&lt;a href=&quot;https://norasandler.com/2017/11/29/Write-a-Compiler.html#fn4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;.globl _main&lt;/code&gt; indicates that the &lt;code class=&quot;highlighter-rouge&quot;&gt;_main&lt;/code&gt; symbol should be visible to the linker; otherwise it can’t find the entry point to the program. Finally, we have our actual assembly instructions:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;; label for start of &quot;main&quot; function&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;movl&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; move constant &quot;2&quot; into the EAX register&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;; return from function&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The most important point here is that when a function returns, the EAX register will contain its return value. The &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function’s return value will be the program’s exit code.&lt;/p&gt;
&lt;p&gt;The only thing that can change in this snippet of assembly is the return value. So one very simple approach would be to use a regular expression to extract the return value from the source code, then plug it into the assembly. Here’s a 20-line Python script to do that:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#expected form of a C program, without line breaks&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;source_re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;r&quot;int main\s*\(\s*\)\s*{\s*return\s+(?P&amp;lt;ret&amp;gt;[0-9]+)\s*;\s*}&quot;&lt;/span&gt; 

&lt;span class=&quot;n&quot;&gt;assembly_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;    
    .globl _main
_main:
    movl    ${}, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;eax
    ret
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;source_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assembly_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.s&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assembly_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source_re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# extract the named &quot;ret&quot; group, containing the return value&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;retval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;outfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assembly_format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But parsing the whole program with one big regular expression isn’t a viable long-term strategy. Instead, we’ll split up the compiler into three stages: lexing, parsing, and code generation. As far as I know, this is a pretty standard compiler architecture, except you’d normally want a bunch of optimization passes between parsing and code generation.&lt;/p&gt;
&lt;h2 id=&quot;lexing&quot;&gt;Lexing&lt;/h2&gt;
&lt;p&gt;The lexer (also called the scanner or tokenizer) is the phase of the compiler that breaks up a string (the source code) into a list of tokens. A token is the smallest unit the parser can understand - if a program is like a paragraph, tokens are like individual words. (Many tokens &lt;em&gt;are&lt;/em&gt; individual words, separated by whitespace.) Variable names, keywords, and constants, and punctuation like braces are all examples of tokens. Here’s a list of all the tokens in return_2.c:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;Identifier “main”&lt;/li&gt;
&lt;li&gt;Open parentheses&lt;/li&gt;
&lt;li&gt;Close parentheses&lt;/li&gt;
&lt;li&gt;Open brace&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;Constant “2”&lt;/li&gt;
&lt;li&gt;Semicolon&lt;/li&gt;
&lt;li&gt;Close brace&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note that some tokens have a value (e.g. the constant token has value “2”) and some don’t (like parentheses and braces). Also note that there are no whitespace tokens. (In some languages, like Python, whitespace is significant and you do need tokens to represent it.)&lt;/p&gt;
&lt;p&gt;Here are all the tokens your lexer needs to recognize, and the regular expression defining each of them:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Open brace &lt;code class=&quot;highlighter-rouge&quot;&gt;{&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Close brace &lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open parenthesis &lt;code class=&quot;highlighter-rouge&quot;&gt;\(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Close parenthesis &lt;code class=&quot;highlighter-rouge&quot;&gt;\)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Semicolon &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Int keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Return keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Identifier &lt;code class=&quot;highlighter-rouge&quot;&gt;[a-zA-Z]\w*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integer literal &lt;code class=&quot;highlighter-rouge&quot;&gt;[0-9]+&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you want, you could just have a “keyword” token type, instead of a different token type for each keyword.&lt;/p&gt;
&lt;h4 id=&quot;-task&quot;&gt;☑ Task:&lt;/h4&gt;
&lt;p&gt;Write a &lt;em&gt;lex&lt;/em&gt; function that accepts a file and returns a list of tokens. It should work for all step 1 examples in the test suite, including the invalid ones. (The invalid examples should raise errors in the parser, not the lexer.) To keep things simple, we only lex decimal integers. If you like, you can extend your lexer to handle octal and hex integers too.&lt;/p&gt;
&lt;p&gt;You might notice that we can’t lex negative integers. That’s not an accident - C doesn’t have negative integer constants. It just has a negation operator, which can be applied to positive integers. We’ll add negation in the next post.&lt;/p&gt;
&lt;h2 id=&quot;parsing&quot;&gt;Parsing&lt;/h2&gt;
&lt;p&gt;The next step is transforming our list of tokens into an abstract syntax tree. An AST is one way to represent the structure of a program. In most programming languages, language constructs like conditionals and function declarations are made up of simpler constructs, like variables and constants. ASTs capture this relationship; the root of the AST will be the entire program, and each node will have children representing its constituent parts. Let’s look at a small example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;if (a &amp;lt; b) {
    c = 2;
    return c;
} else {
    c = 3;
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This code snippet is an if statement, so we’ll label the root of our AST “if statement”. It will have three children:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The condition (&lt;code class=&quot;highlighter-rouge&quot;&gt;a &amp;lt; b&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The if body (&lt;code class=&quot;highlighter-rouge&quot;&gt;c = 2; return c;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The else body (&lt;code class=&quot;highlighter-rouge&quot;&gt;c = 3;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Each of these components can be broken down further. For example, the condition is a binary &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; operation with two children:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The first operand (variable &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The second operand (variable &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;An assignment statement (like &lt;code class=&quot;highlighter-rouge&quot;&gt;c=2;&lt;/code&gt;) also has two children: the variable being updated (&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;), and the expression assigned to it (&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The if body, on the other hand, can have an arbitrary number of children - each statement is a child node. In this case it has two children because there are two statements. The children are ordered - &lt;code class=&quot;highlighter-rouge&quot;&gt;c=2;&lt;/code&gt; precedes &lt;code class=&quot;highlighter-rouge&quot;&gt;return c;&lt;/code&gt; because it comes first in the source code.&lt;/p&gt;
&lt;p&gt;Here’s the full AST for this code snippet:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://norasandler.com/assets/AST.svg&quot; alt=&quot;Image of diagram; text outline follows&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;screen-reader-only&quot;&gt;
&lt;ul&gt;&lt;li&gt;if statement
&lt;ul&gt;&lt;li&gt;condition: binary operation (&amp;lt;)
&lt;ul&gt;&lt;li&gt;operand 1: variable a&lt;/li&gt;
&lt;li&gt;operand 2: variable b&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;if body: statement list
&lt;ul&gt;&lt;li&gt;statement 1: assignment
&lt;ul&gt;&lt;li&gt;variable: c&lt;/li&gt;
&lt;li&gt;right-hand side: constant 2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;statement 2: return
&lt;ul&gt;&lt;li&gt;return value: variable c&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;else body: statement list
&lt;ul&gt;&lt;li&gt;statement 1: assignment
&lt;ul&gt;&lt;li&gt;variable: c&lt;/li&gt;
&lt;li&gt;right-hand side: constant 3&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;And here’s pseudocode for constructing this AST:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;//create if condition
cond = BinaryOp(op='&amp;gt;', operand_1=Var(a), operand_2=Var(b))

//create if body
assign = Assignment(var=Var(c), rhs=Const(2))
return = Return(val=Var(c))
if_body = [assign, return]

//create else body
assign_else = Assignment(var=Var(c), rhs=Const(3))
else_body = [assign_else]

//construct if statement
if = If(condition=cond, body=if_body, else=else_body)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For now, though, we don’t need to worry about conditionals, variable assignments, or binary operators. Right now, the only AST nodes we need to support are programs, function declarations, statements, and expressions. Here’s how we’ll define each of them:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;program = Program(function_declaration)
function_declaration = Function(string, statement) //string is the function name
statement = Return(exp)
exp = Constant(int) 
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Right now, a program consists of a single function, &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;. Later on we’ll define a program as a list of functions. A function has a name and a body. Later, a function will also have a list of arguments. In a real C compiler, we’d also need to store the function’s return type, but right now we only have integer types. A function body is a single statement; later it will be a list of statements. There’s only one type of statement: a return statement. Later we’ll add other types of statements, like conditionals and variable declarations. A return statement has one child, an expression - this is the value being returned. For now an expression can only be an integer constant. Later we’ll let expressions include arithmetic operations, which will allow us to parse statements like &lt;code class=&quot;highlighter-rouge&quot;&gt;return 2+2;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As we add new language constructs, we’ll update the definitions of our AST nodes. For example, we’ll eventually add a new type of statement: variable assignment. When we do, we’ll add a new form to our &lt;code class=&quot;highlighter-rouge&quot;&gt;statement&lt;/code&gt; definition:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;statement = Return(exp) | Assign(variable, exp)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here’s a diagram of the AST for return_2.c:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://norasandler.com/assets/return_2_ast.svg&quot; alt=&quot;Image of diagram; text outline follows&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;screen-reader-only&quot;&gt;
&lt;ul&gt;&lt;li&gt;Program
&lt;ul&gt;&lt;li&gt;Function (name: main)
&lt;ul&gt;&lt;li&gt;body
&lt;ul&gt;&lt;li&gt;return statement
&lt;ul&gt;&lt;li&gt;constant (value: 2)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;Finally, we need a formal grammar, which defines how series of tokens can be combined to form language constructs. We’ll define it here in &lt;a href=&quot;https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form&quot;&gt;Backus-Naur Form&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&amp;lt;program&amp;gt; ::= &amp;lt;function&amp;gt;
&amp;lt;function&amp;gt; ::= &quot;int&quot; &amp;lt;id&amp;gt; &quot;(&quot; &quot;)&quot; &quot;{&quot; &amp;lt;statement &quot;}&quot;
&amp;lt;statement&amp;gt; ::= &quot;return&quot; &amp;lt;exp&amp;gt; &quot;;&quot;
&amp;lt;exp&amp;gt; ::= &amp;lt;int&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each of the lines above is a &lt;em&gt;production rule&lt;/em&gt;, defining how a language construct can be built from other language constructs and tokens. Every symbol that appears on the left-hand side of a production rule (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;program&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;function&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;statement&amp;gt;&lt;/code&gt;) is a non-terminal symbol. Individual tokens (keywords, ids, punctuation, etc.) are terminal symbols. Note that, while this grammar tells us what sequence of tokens constitutes a valid C program, it &lt;em&gt;doesn’t&lt;/em&gt; tell us exactly how to transform that program into an AST - for example, there’s no production rule corresponding to the Constant node in the AST. We could rewrite our grammar to have a production rule for constants, but we don’t have to in order to parse the program.&lt;/p&gt;
&lt;p&gt;Right now the grammar is extremely simple; there’s only one production rule for each non-terminal symbol. Later, some non-terminal symbols will have multiple production rules. For example, if we added support for variable declarations, we could have the following rule for deriving statements:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&amp;lt;statement&amp;gt; ::= &quot;return&quot; &amp;lt;int&amp;gt; &quot;;&quot; | &quot;int&quot; &amp;lt;id&amp;gt; &quot;=&quot; &amp;lt;int&amp;gt; &quot;;&quot;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To transform a list of tokens into an AST, we’ll use a technique called recursive descent parsing. We’ll define a function to parse each non-terminal symbol in the grammar and return a corresponding AST node. The function to parse symbol &lt;em&gt;S&lt;/em&gt; should remove tokens from the start of the list until it reaches a valid derivation of &lt;em&gt;S&lt;/em&gt;. If, before it’s done parsing, it hits a token that isn’t in the production rule for &lt;em&gt;S&lt;/em&gt;, it should fail. If the rule for &lt;em&gt;S&lt;/em&gt; contains other non-terminals, it should call other functions to parse them.&lt;/p&gt;
&lt;p&gt;Here’s the pseudocode for parsing a statement:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;def parse_statement(tokens):
    tok = tokens.next()
    if tok.type != &quot;RETURN_KEYWORD&quot;:
        fail()
    tok = tokens.next()
    if tok.type != &quot;INT&quot;
        fail()
    exp = parse_exp(tokens) //parse_exp will pop off more tokens
    statement = Return(exp)

    tok = tokens.next()
    if tok.type != &quot;SEMICOLON&quot;:
        fail()

    return statement
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Later, the production rules will be recursive (e.g. an arithmetic expression can contain other expressions), which means the parsing functions will be recursive too - hence the name recursive descent parser.&lt;/p&gt;
&lt;h4 id=&quot;-task-1&quot;&gt;☑ Task:&lt;/h4&gt;
&lt;p&gt;Write a &lt;em&gt;parse&lt;/em&gt; function that accepts a list of tokens and returns an AST, rooted at a Program node. The function should build the correct AST for all valid step 1 examples, and raise an error on all invalid step 1 examples. If you want, you can also have your parser fail gracefully if it encounters integers above your system’s INT_MAX.&lt;/p&gt;
&lt;p&gt;There are a lot of ways to represent an AST in code - each type of node could be its own class or its own datatype, depending on what language you’re writing your compiler in. For example, here’s how you might define AST nodes as OCaml datatypes:&lt;/p&gt;
&lt;div class=&quot;language-ocaml highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun_decl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun_decl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;code-generation&quot;&gt;Code Generation&lt;/h2&gt;
&lt;p&gt;Now that we’ve built an AST, we’re ready to generate some assembly! Like we saw before, we only need to emit four lines of assembly. To emit it, we’ll traverse the AST in &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_traversal#Post-order&quot;&gt;post-order&lt;/a&gt;. That means we’ll visit, in order:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The function name (not really a &lt;em&gt;node&lt;/em&gt;, but the first thing in the function definition)&lt;/li&gt;
&lt;li&gt;The return value&lt;/li&gt;
&lt;li&gt;The return statement&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This traversal ensures that a value is defined before it’s used; for example, we generate the return value before it’s referenced in the return statement.&lt;/p&gt;
&lt;p&gt;Here’s the assembly we need:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;To generate a function (e.g. function “foo”):
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_foo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BODY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GOES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HERE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;To generate a return statement (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;return 3;&lt;/code&gt;):
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt; &lt;span class=&quot;n&quot;&gt;movl&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;-task-2&quot;&gt;☑ Task:&lt;/h4&gt;
&lt;p&gt;Write a &lt;em&gt;generate&lt;/em&gt; function that accepts an AST and generates assembly. It can return the assembly as a string or write it directly to a file. It should generate correct assembly for all valid step 1 examples.&lt;/p&gt;
&lt;h2 id=&quot;optional-pretty-printing&quot;&gt;(Optional) Pretty printing&lt;/h2&gt;
&lt;p&gt;You’ll probably want a utility function to print out your AST, to help with debugging. You can write it now, or wait until you need it. Here’s what nqcc’s pretty printer outputs for return_2.c:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;FUN INT main:
    params: ()
    body:
        RETURN Int&amp;lt;2&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This example includes some information your AST doesn’t need, like the return type and list of function parameters.&lt;/p&gt;
&lt;h4 id=&quot;-task-3&quot;&gt;☑ Task:&lt;/h4&gt;
&lt;p&gt;Write a &lt;em&gt;pretty-print&lt;/em&gt; funcion that takes an AST and prints it out in a readable way.&lt;/p&gt;
&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h2&gt;
&lt;h4 id=&quot;-task-4&quot;&gt;☑ Task:&lt;/h4&gt;
&lt;p&gt;Write a program that accepts a C source file and outputs an executable. The program should:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Read in the file&lt;/li&gt;
&lt;li&gt;Lex it&lt;/li&gt;
&lt;li&gt;Parse it&lt;/li&gt;
&lt;li&gt;Generate assembly&lt;/li&gt;
&lt;li&gt;Write the assembly to a file&lt;/li&gt;
&lt;li&gt;Invoke GCC command to convert the assembly to an executable:
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;gcc -m32 assembly.s -o out
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this command, “assembly.s” is the name of the assembly file and “out” is the name of the executable you want to generate. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-m32&lt;/code&gt; option tells GCC to build a 32-bit binary. You can omit that option and build 64-bit binaries if you want, but you’ll need to make some changes to the code generation steps later on (e.g. using 64-bit registers).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;(Optional) Delete the assembly file.&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;You can test that your compiler is working properly with the test script &lt;a href=&quot;https://github.com/nlsandler/write_a_c_compiler&quot;&gt;here&lt;/a&gt;. It will compile a set of test programs using your compiler, execute them, and make sure they return the right value.&lt;/p&gt;
&lt;p&gt;To invoke it:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;./test_compiler.sh /path/to/your/compiler
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In order to test it with the script, your compiler needs to follow this spec:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;It can be invoked from the command line, taking only a C source file as an argument, e.g.: &lt;code class=&quot;highlighter-rouge&quot;&gt;./YOUR_COMPILER /path/to/program.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When passed &lt;code class=&quot;highlighter-rouge&quot;&gt;program.c&lt;/code&gt;, it generates executable &lt;code class=&quot;highlighter-rouge&quot;&gt;program&lt;/code&gt; in the same directory.&lt;/li&gt;
&lt;li&gt;It doesn’t generate assembly or an executable if parsing fails (this is what the test script checks for invalid test programs).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The script doesn’t check whether your compiler outputs sensible error messages, but you can use the invalid test programs to test that manually.&lt;/p&gt;

&lt;p&gt;In the next post, we’ll add three unary operators: &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;. Stay tuned!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you have any questions, corrections, or other feedback, you can &lt;a href=&quot;https://norasandler.com/cdn-cgi/l/email-protection#57393825361739382536243639333b32257934383a&quot;&gt;email me&lt;/a&gt; or &lt;a href=&quot;https://github.com/nlsandler/write_a_c_compiler/issues&quot;&gt;open an issue&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.wilfred.me.uk/blog/2014/08/27/baby-steps-to-a-c-compiler/&quot;&gt;Baby Steps to a C Compiler&lt;/a&gt; - a post about another C compiler inspired by Ghuloum’s paper.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;C11 Standard&lt;/a&gt;, the current C language specification. Annex A is a summary of C’s grammar, so it’s a good reference for parsing. You probably don’t need to read this all the way through.&lt;/li&gt;
&lt;/ul&gt;



</description>
<pubDate>Fri, 01 Dec 2017 04:28:02 +0000</pubDate>
<dc:creator>sidcool</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://norasandler.com/2017/11/29/Write-a-Compiler.html</dc:identifier>
</item>
<item>
<title>A Map Showing How Much Time It Takes English-Speakers to Learn Foreign Languages</title>
<link>http://www.openculture.com/2017/11/a-map-showing-how-much-time-it-takes-to-learn-foreign-languages-from-easiest-to-hardest.html</link>
<guid isPermaLink="true" >http://www.openculture.com/2017/11/a-map-showing-how-much-time-it-takes-to-learn-foreign-languages-from-easiest-to-hardest.html</guid>
<description>&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-1045254&quot; src=&quot;http://cdn8.openculture.com/2017/11/28204353/Language-Difficulties.png&quot; alt=&quot;&quot; width=&quot;859&quot; height=&quot;767&quot; srcset=&quot;http://cdn8.openculture.com/2017/11/28204353/Language-Difficulties.png 859w, http://cdn8.openculture.com/2017/11/28204353/Language-Difficulties-150x134.png 150w, http://cdn8.openculture.com/2017/11/28204353/Language-Difficulties-300x268.png 300w, http://cdn8.openculture.com/2017/11/28204353/Language-Difficulties-768x686.png 768w&quot; sizes=&quot;(max-width: 859px) 100vw, 859px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Do you want to speak more languages? Sure, &lt;a href=&quot;https://www.youtube.com/watch?v=Fj23I8hgj28&quot;&gt;as Sally Struthers used to say so often&lt;/a&gt;, we all do. But the requirements of attaining proficiency in any foreign tongue, no doubt unlike those correspondence courses pitched by that &lt;em&gt;All in the Family&lt;/em&gt; star turned daytime TV icon, can seem frustratingly demanding and unclear. But thanks to the research efforts of the &lt;a href=&quot;https://www.state.gov/m/fsi/&quot;&gt;Foreign Service Institute&lt;/a&gt;, the center of foreign-language training for the United States government for the past 70 years, you can get a sense of how much time it takes, as a native or native-level English speaker, to master any of a host of languages spoken all across the world.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/MapPorn/comments/7dith2/language_difficult_rankings_in_europe_according/?st=jakhznjw&amp;amp;sh=06912f7e&quot;&gt;The map above&lt;/a&gt; visualizes the languages of Europe (at least those deemed diplomatically important enough to be taught at the FSI), coloring them according the average time commitment they require of an English speaker. In pink, we have the English-speaking countries. The red countries speak Category I languages, those most closely related to English and thus learnable in 575 to 600 hours of study: the traditional high-school foreign languages of Spanish and French, for instance, or the less commonly taught but just about as easily learnable Portuguese and Italian. If you'd like a little more challenge, why not try your hand at German, whose 750 hours of study puts it in Category II — quite literally, a category of its own?&lt;/p&gt;
&lt;center/&gt;
&lt;p&gt;In total, the FSI ranks languages into six categories of difficulty, including English's Category 0. The higher up the scale you go, the less recognizable the languages might look to an English-speaking monoglot. Category III contains no European languages at all (though it does contain Indonesian, widely regarded as one of the objectively easiest languages to learn). Category IV offers a huge variety of languages from Amharic to Czech to Nepali to Tagalog, each demanding 44 weeks (or 1100 hours) of study. Then, at the very summit of the linguistic mountain, we find the switched-up grammar, highly unfamiliar scripts, and potentially mystifying cultural assumptions of Category V, &quot;languages which are exceptionally difficult for native English speakers.&quot;&lt;/p&gt;
&lt;p&gt;To that most formidable group belong Arabic, Chinese both Mandarin and Cantonese, Korean, and — this with an asterisk meaning &quot;usually more difficult than other languages in the same category&quot; — Japanese. Now if, like me, you consider studying foreign languages one of your main pursuits, you know that possessing a genuine interest in a language — in its mechanics, in its ongoing evolution, in the cultures that created it and the cultures it in turn creates — can do wonders to get you through even the most aggravating difficulties on the long journey to commanding it. Then again, I'm also a native English speaker who chose to move to Korea, where I study not just the Category-V Korean but the Category-V* Japanese through Korean; you might want to take with a grain of salt the words, in any language, of so obvious a masochist.&lt;/p&gt;
&lt;p&gt;You'll find the full &lt;a href=&quot;https://www.atlasandboots.com/foreign-service-institute-language-difficulty/&quot;&gt;Foreign Service Institute language difficulty ranking list&lt;/a&gt; below. No matter which category you'd like to take on, you can get a start at our&lt;a href=&quot;http://www.openculture.com/2016/11/215-hours-of-free-foreign-language-lessons-on-spotify.html&quot;&gt; Free Foreign Language Lessons collection&lt;/a&gt;, many of whose materials come produced by the FSI itself.&lt;/p&gt;
&lt;blockquote readability=&quot;29&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Category I: 23-24 weeks (575-600 hours)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Languages closely related to English&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Afrikaans&lt;/p&gt;
&lt;p&gt;Danish&lt;/p&gt;
&lt;p&gt;Dutch&lt;/p&gt;
&lt;p&gt;French&lt;/p&gt;
&lt;p&gt;Italian&lt;/p&gt;
&lt;p&gt;Norwegian&lt;/p&gt;
&lt;p&gt;Portuguese&lt;/p&gt;
&lt;p&gt;Romanian&lt;/p&gt;
&lt;p&gt;Spanish&lt;/p&gt;
&lt;p&gt;Swedish&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Category II: 30 weeks (750 hours)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Languages similar to English&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;German&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Category III: 36 weeks (900 hours)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Languages with linguistic and/or cultural differences from English&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Indonesian&lt;/p&gt;
&lt;p&gt;Malaysian&lt;/p&gt;
&lt;p&gt;Swahili&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Category IV: 44 weeks (1100 hours)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Languages with significant linguistic and/or cultural differences from English&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Albanian&lt;/p&gt;
&lt;p&gt;Amharic&lt;/p&gt;
&lt;p&gt;Armenian&lt;/p&gt;
&lt;p&gt;Azerbaijani&lt;/p&gt;
&lt;p&gt;Bengali&lt;/p&gt;
&lt;p&gt;Bosnian&lt;/p&gt;
&lt;p&gt;Bulgarian&lt;/p&gt;
&lt;p&gt;Burmese&lt;/p&gt;
&lt;p&gt;Croatian&lt;/p&gt;
&lt;p&gt;Czech&lt;/p&gt;
&lt;p&gt;*Estonian&lt;/p&gt;
&lt;p&gt;*Finnish&lt;/p&gt;
&lt;p&gt;*Georgian&lt;/p&gt;
&lt;p&gt;Greek&lt;/p&gt;
&lt;p&gt;Hebrew&lt;/p&gt;
&lt;p&gt;Hindi&lt;/p&gt;
&lt;p&gt;*Hungarian&lt;/p&gt;
&lt;p&gt;Icelandic&lt;/p&gt;
&lt;p&gt;Khmer&lt;/p&gt;
&lt;p&gt;Lao&lt;/p&gt;
&lt;p&gt;Latvian&lt;/p&gt;
&lt;p&gt;Lithuanian&lt;/p&gt;
&lt;p&gt;Macedonian&lt;/p&gt;
&lt;p&gt;*Mongolian&lt;/p&gt;
&lt;p&gt;Nepali&lt;/p&gt;
&lt;p&gt;Pashto&lt;/p&gt;
&lt;p&gt;Persian (Dari, Farsi, Tajik)&lt;/p&gt;
&lt;p&gt;Polish&lt;/p&gt;
&lt;p&gt;Russian&lt;/p&gt;
&lt;p&gt;Serbian&lt;/p&gt;
&lt;p&gt;Sinhala&lt;/p&gt;
&lt;p&gt;Slovak&lt;/p&gt;
&lt;p&gt;Slovenian&lt;/p&gt;
&lt;p&gt;Tagalog&lt;/p&gt;
&lt;p&gt;*Thai&lt;/p&gt;
&lt;p&gt;Turkish&lt;/p&gt;
&lt;p&gt;Ukrainian&lt;/p&gt;
&lt;p&gt;Urdu&lt;/p&gt;
&lt;p&gt;Uzbek&lt;/p&gt;
&lt;p&gt;*Vietnamese&lt;/p&gt;
&lt;p&gt;Xhosa&lt;/p&gt;
&lt;p&gt;Zulu&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Category V: 88 weeks (2200 hours)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Languages which are exceptionally difficult for native English speakers&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Arabic&lt;/p&gt;
&lt;p&gt;Cantonese (Chinese)&lt;/p&gt;
&lt;p&gt;Mandarin (Chinese)&lt;/p&gt;
&lt;p&gt;*Japanese&lt;/p&gt;
&lt;p&gt;Korean&lt;/p&gt;
&lt;p&gt;* Usually more difficult than other languages in the same category.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://bigthink.com/strange-maps/how-long-to-learn-that-language-heres-a-map-for-that&quot;&gt;via Big Think&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related Content:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.openculture.com/freelanguagelessons&quot;&gt;Learn 48 Languages Online for Free: Spanish, Chinese, English &amp;amp; More&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Permanent Link to What Are the Most Effective Strategies for Learning a Foreign Language?: Six TED Talks Provide the Answers&quot; href=&quot;http://www.openculture.com/2017/12/what-are-the-most-effective-strategies-for-learning-a-foreign-language-six-ted-talks-provide-the-answers.html&quot; rel=&quot;bookmark&quot;&gt;What Are the Most Effective Strategies for Learning a Foreign Language?: Six TED Talks Provide the Answers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.openculture.com/2016/11/215-hours-of-free-foreign-language-lessons-on-spotify.html&quot;&gt;215 Hours of Free Foreign Language Lessons on Spotify: French, Chinese, German, Russian &amp;amp; More&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.openculture.com/2015/06/the-tree-of-languages-illustrated-in-a-big-beautiful-infographic.html&quot;&gt;The Tree of Languages Illustrated in a Big, Beautiful Infographic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.openculture.com/2017/10/where-did-the-english-language-come-from-an-animated-introduction.html&quot;&gt;Where Did the English Language Come From?: An Animated Introduction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Based in Seoul, &lt;a href=&quot;http://blog.colinmarshall.org/&quot;&gt;Colin Marshall&lt;/a&gt; writes and broadcasts on cities and culture. His projects include the book &lt;/em&gt;The Stateless City: a Walk through 21st-Century Los Angeles &lt;em&gt;and the video series &lt;/em&gt;&lt;a href=&quot;https://vimeo.com/channels/thecityincinema&quot;&gt;The City in Cinema&lt;/a&gt;&lt;em&gt;. Follow him on Twitter at &lt;a href=&quot;https://twitter.com/#%21/colinmarshall&quot;&gt;@colinmarshall&lt;/a&gt; or on &lt;a href=&quot;https://www.facebook.com/colinmarshallessayist&quot;&gt;Faceboo&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/colinmarshallessayist&quot;&gt;k&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;br/&gt;</description>
<pubDate>Fri, 01 Dec 2017 02:58:37 +0000</pubDate>
<dc:creator>Thevet</dc:creator>
<og:type>article</og:type>
<og:url>http://www.openculture.com/2017/11/a-map-showing-how-much-time-it-takes-to-learn-foreign-languages-from-easiest-to-hardest.html</og:url>
<og:title>A Map Showing How Much Time It Takes to Learn Foreign Languages: From Easiest to Hardest</og:title>
<og:image>http://cdn8.openculture.com/2017/11/29000531/fsi-map-e1511942779698.png</og:image>
<og:description> Do you want to speak more languages? Sure, as Sally Struthers used to say so often, we all do.</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.openculture.com/2017/11/a-map-showing-how-much-time-it-takes-to-learn-foreign-languages-from-easiest-to-hardest.html</dc:identifier>
</item>
<item>
<title>Seed funding has declined</title>
<link>https://techcrunch.com/2017/11/30/theres-an-implosion-of-early-stage-vc-funding-and-no-ones-talking-about-it/</link>
<guid isPermaLink="true" >https://techcrunch.com/2017/11/30/theres-an-implosion-of-early-stage-vc-funding-and-no-ones-talking-about-it/</guid>
<description>&lt;img src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/graphdown.jpg?w=738&quot; class=&quot;&quot;/&gt;&lt;div class=&quot;byline contributor-byline&quot; readability=&quot;4.5769230769231&quot;&gt;
&lt;div class=&quot;name&quot;&gt;
&lt;p&gt;&lt;span class=&quot;name-container cb_contributor-shortcode-author&quot;&gt;Victor Basta&lt;/span&gt; &lt;span&gt;Contributor&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;bio&quot;&gt;Victor Basta is the founder of the boutique investment firm &lt;a href=&quot;http://www.magisteradvisors.com/&quot;&gt;Magister Advisors&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;more-posts&quot; readability=&quot;9.8461538461538&quot;&gt;More posts by this contributor:
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Amid record amounts of capital raised by VCs worldwide, and a sharp rise in the number of private “unicorns” valued at $1 billion-plus, there has been a quiet, barely noticed implosion in early-stage VC activity worldwide.&lt;/p&gt;
&lt;p&gt;The chart below is dramatic, and accurate. Since 2014, the number of VC rounds in technology companies worldwide has nearly halved, from 19,000 to 10,000, according to PitchBook. During that time, the drop in VC funding amount has been nowhere near as dramatic, highlighting that VCs are concentrating investment into fewer later-stage companies.&lt;/p&gt;
&lt;p&gt;This is now a three-year trend, so cannot be “blamed” on macro or short-term factors. More worryingly, it comes at a time of unprecedented stock market valuations worldwide.&lt;/p&gt;
&lt;div id=&quot;attachment_1570725&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;wp-image-1570725 size-full&quot; src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/image001.png?w=523&amp;amp;h=336&quot; alt=&quot;&quot; width=&quot;523&quot; height=&quot;336&quot; srcset=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/image001.png 523w, https://tctechcrunch2011.files.wordpress.com/2017/11/image001.png?w=150&amp;amp;h=96 150w, https://tctechcrunch2011.files.wordpress.com/2017/11/image001.png?w=300&amp;amp;h=193 300w&quot; sizes=&quot;(max-width: 523px) 100vw, 523px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Global VC financing volume and value in technology companies&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;This amounts to a crash in number of financings, and is the most extreme since 2001.&lt;/p&gt;
&lt;h2&gt;The crash has occurred in early-stage funding&lt;/h2&gt;
&lt;p&gt;The data shows by far the sharpest fall in activity has been in early- and seed-stage rounds. In fact, later rounds have remained fairly flat the last three years, and A and B rounds have fallen, but not nearly by as much.&lt;/p&gt;
&lt;div id=&quot;attachment_1570723&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;wp-image-1570723 size-full&quot; src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/image002.png?w=603&amp;amp;h=350&quot; alt=&quot;&quot; width=&quot;603&quot; height=&quot;350&quot; srcset=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/image002.png 603w, https://tctechcrunch2011.files.wordpress.com/2017/11/image002.png?w=150&amp;amp;h=87 150w, https://tctechcrunch2011.files.wordpress.com/2017/11/image002.png?w=300&amp;amp;h=174 300w&quot; sizes=&quot;(max-width: 603px) 100vw, 603px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Global financing volume into technology companies by stage&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt; The early-stage implosion is global&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;The fall in financings has happened literally everywhere:&lt;/p&gt;

&lt;p id=&quot;speakable-summary&quot;&gt;&lt;img class=&quot;alignnone wp-image-1570728 size-full&quot; src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/unnamed.png?w=277&amp;amp;h=140&quot; alt=&quot;&quot; width=&quot;277&quot; height=&quot;140&quot; srcset=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/unnamed.png 277w, https://tctechcrunch2011.files.wordpress.com/2017/11/unnamed.png?w=150&amp;amp;h=76 150w&quot; sizes=&quot;(max-width: 277px) 100vw, 277px&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;What caused this quiet implosion?&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The era of funding apps is over – &lt;/strong&gt;VC funding rounds grew dramatically after 2010 partly because of rebounding economic activity, but mainly in order to back a raft of B2C apps taking advantage of consumers’ emerging mobile-first behavior. With Android and iOS ecosystems well established, nearly every commercial segment saw a raft of new digital challengers, in everything from lifestyle to health, finance and a raft of special interest categories. Since 2014, early-stage funding for businesses with “mobile” in their description has fallen off a cliff.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SaaS funding has dropped sharply –&lt;/strong&gt; In 2014, nearly 5,000 rounds backed companies describing themselves as “SaaS.” This year, that figure is down nearly 40 percent, to about 3,000. With so many SaaS companies having been created in the past 10 years, it’s hard to justify, let alone back, new SaaS startups, which are by now competing against established SaaS players, not legacy perpetual license vendors.&lt;/li&gt;
&lt;/ul&gt;&lt;div id=&quot;attachment_1570724&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;wp-image-1570724 size-full&quot; src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/image004.png?w=514&amp;amp;h=339&quot; alt=&quot;&quot; width=&quot;514&quot; height=&quot;339&quot; srcset=&quot;https://tctechcrunch2011.files.wordpress.com/2017/11/image004.png 514w, https://tctechcrunch2011.files.wordpress.com/2017/11/image004.png?w=150&amp;amp;h=99 150w, https://tctechcrunch2011.files.wordpress.com/2017/11/image004.png?w=300&amp;amp;h=198 300w&quot; sizes=&quot;(max-width: 514px) 100vw, 514px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Global financings (value and volume) in SaaS&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Even fintech has seen a quiet fall in activity – &lt;/strong&gt;While nowhere near as dramatic as the fall-off in SaaS and mobile funding, fintech funding activity has dropped nearly 10 percent since 2014. Again, we believe this marks a natural maturation of many fintech segments, where winners have already emerged well-capitalized and new entrants in many fintech categories are fighting a costly uphill battle to grow quickly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In general, VCs are doubling down on “winner take all” leaders – &lt;/strong&gt;Since 2014, aggregate funding into late-stage rounds has hovered around $55 billion a year, though it will be somewhat lower this year. Today’s $1 billion private financing round was unheard of a decade ago. Recent $1 billion raisers Airbnb, Spotify, WeWork and Lyft have joined previous billionaire raisers, including Uber, Facebook, SpaceX and Flipkart, and point to a strong trend to concentrate “winner take all” funding into companies that have real potential to lead or dominate their segment.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Overall we believe 2012-16 was a bubble in early-stage funding driven by the fundamental platform shift to mobile. In easy hindsight, too many companies raised “concept” money, and an unprecedented number failed early and “failed fast.” The VC market for seed and early-stage failed with them, falling to half its size in three short years.&lt;/p&gt;
&lt;p&gt;Arguably, post implosion, early-stage VCs have become more “rational” and we are unlikely to see the “spray and pray” approach that dominated a few short years ago. However, in absolute numbers, it also means there is far less capital available to early-stage companies today than a few years ago, and inevitably there will be a continued drop in the number of new startups, which cannot now rely on getting the first round raised easily in the current environment.&lt;/p&gt;
&lt;p&gt;Whether the early-stage VC implosion is healthy or disastrous for the tech ecosystem remains to be seen.&lt;/p&gt;
&lt;p&gt;Likely it will be a bit of both.&lt;/p&gt;
&lt;small&gt;Featured Image: &lt;a target=&quot;_blank&quot; href=&quot;http://www.gettyimages.com/search/photographer?family=creative&amp;amp;photographer=Jorg+Greuel&quot;&gt;Jorg Greuel&lt;/a&gt;/Getty Images&lt;/small&gt;</description>
<pubDate>Fri, 01 Dec 2017 01:56:09 +0000</pubDate>
<dc:creator>lnguyen</dc:creator>
<og:title>There’s an implosion of early-stage VC funding, and no one’s talking about it</og:title>
<og:description>Amid record amounts of capital raised by VCs worldwide, and a sharp rise in the number of private &quot;unicorns,&quot; there has been a quiet, barely noticed implosion..</og:description>
<og:image>https://tctechcrunch2011.files.wordpress.com/2017/11/graphdown.jpg</og:image>
<og:url>http://social.techcrunch.com/2017/11/30/theres-an-implosion-of-early-stage-vc-funding-and-no-ones-talking-about-it/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2017/11/30/theres-an-implosion-of-early-stage-vc-funding-and-no-ones-talking-about-it/</dc:identifier>
</item>
</channel>
</rss>