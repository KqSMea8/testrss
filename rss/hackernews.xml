<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Show HN: Frappe Charts – GitHub inspired JavaScript charting with zero dependencies</title>
<link>https://frappe.github.io/charts/</link>
<guid isPermaLink="true" >https://frappe.github.io/charts/</guid>
<description>&lt;h6 class=&quot;margin-vertical-rem&quot;&gt; Create a chart&lt;/h6&gt;
&lt;p class=&quot;step-explain&quot;&gt;Install&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs html&quot;&gt;  npm install frappe-charts&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;step-explain&quot;&gt;Include it in your HTML&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs html&quot;&gt;  &amp;lt;script src=&quot;frappe-charts.min.js&quot; /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;step-explain&quot;&gt;Make a new Chart&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs html&quot;&gt;  &amp;lt;!--HTML--&amp;gt;
  &amp;lt;div id=&quot;chart&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;  // Javascript
  let data = {
    labels: [&quot;12am-3am&quot;, &quot;3am-6am&quot;, &quot;6am-9am&quot;, &quot;9am-12pm&quot;,
      &quot;12pm-3pm&quot;, &quot;3pm-6pm&quot;, &quot;6pm-9pm&quot;, &quot;9pm-12am&quot;],

    datasets: [
      {
        title: &quot;Some Data&quot;, color: &quot;light-blue&quot;,
        values: [25, 40, 30, 35, 8, 52, 17, -4]
      },
      {
        title: &quot;Another Set&quot;, color: &quot;violet&quot;,
        values: [25, 50, -10, 15, 18, 32, 27, 14]
      },
      {
        title: &quot;Yet Another&quot;, color: &quot;blue&quot;,
        values: [15, 20, -3, -15, 58, 12, -17, 37]
      }
    ]
  };

  let chart = new Chart({
    parent: &quot;#chart&quot;,
    title: &quot;My Awesome Chart&quot;,
    data: data,
    type: 'bar', // or 'line', 'scatter', 'percentage'
    height: 250
  });&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-secondary active&quot; data-type=&quot;bar&quot;&gt;Bar Chart&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-secondary&quot; data-type=&quot;line&quot;&gt;Line Chart&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-secondary&quot; data-type=&quot;scatter&quot;&gt;Scatter Chart&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-secondary&quot; data-type=&quot;percentage&quot;&gt;Percentage Chart&lt;/button&gt;&lt;/p&gt;
&lt;p class=&quot;text-muted&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.storytellingwithdata.com/blog/2011/07/death-to-pie-charts&quot;&gt;Why Percentage?&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 31 Oct 2017 15:39:06 +0000</pubDate>
<dc:creator>rushabh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://frappe.github.io/charts/</dc:identifier>
</item>
<item>
<title>Reaching $10k monthly revenue with WakaTime, my SaaS side project</title>
<link>https://www.indiehackers.com/businesses/wakatime</link>
<guid isPermaLink="true" >https://www.indiehackers.com/businesses/wakatime</guid>
<description>&lt;h2&gt;Hello! What's your background, and what are you working on?&lt;/h2&gt;
&lt;p&gt;Hi! My name is Alan Hamlett, and I'm the founder of &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt;, a collection of plugins to measure your programming.&lt;/p&gt;

&lt;p&gt;WakaTime is used by programmers, contractors, and students to automatically report stats about their programming activity and editor usage. And it's very recently reached the 100 thousand user milestone!&lt;/p&gt;
&lt;h2&gt;What motivated you to get started with WakaTime?&lt;/h2&gt;
&lt;p&gt;It was in May 2013 after work one day. Back then I had a full time job, but was also independently contracting. That meant I had to track my hours for billing. Remembering to start and stop the timer was very annoying so I decided to automate it.&lt;/p&gt;
&lt;p&gt;Around 10pm on May 13th, 2013, I was talking with my friends and roommates around our fire pit. We were all programmers living in a hacker house and aspiring to build startups.&lt;/p&gt;
&lt;p&gt;While we had some steaks, smores, and beer, I pitched the idea to my friends. Like every idea, there was a lot of criticism and skepticism. However, one of my friends verbally &quot;signed up&quot; to use it when ready.&lt;/p&gt;
&lt;p&gt;So I started working on the prototype that night, and a month later this friend became the second &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; user.&lt;/p&gt;
&lt;div id=&quot;ember221777&quot; class=&quot;shareable-quote ember-view&quot;&gt;
&lt;div class=&quot;shareable-quote__quote-wrapper&quot;&gt;

&lt;div class=&quot;shareable-quote__quote&quot;&gt;
&lt;p&gt;When I started WakaTime, I just wanted to build a product that I myself and other programmers would enjoy using.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;h2&gt;What went into building the initial product?&lt;/h2&gt;
&lt;p&gt;Mostly my time. It takes a great deal of time to build anything. Domain names are cheap, micro servers were free back then, but these days I would go serverless with something like &lt;a href=&quot;https://www.graph.cool/&quot;&gt;Graph.cool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Building an MVP for &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; was only possible with a lot of time and experience building many other products. I limited features in the MVP to only one chart and two editor plugins.&lt;/p&gt;
&lt;p&gt;The first WakaTime plugin was for Vim, which took a month from start to finish. During that month I also built the website to show a simple breakdown of each day's coding activity in an SVG chart.&lt;/p&gt;
&lt;p&gt;After the Vim plugin and the website, I built the Sublime Text plugin in about a week. My oldest coding activity is from June 25th, 2013, which was the first time the Vim plugin was able to track my coding while building WakaTime.&lt;/p&gt;
&lt;p&gt;Over the next 4 years I worked a full-time job, while spending my evenings and weekends building WakaTime. Each plugin took about a week or two of programming for the initial release, and more maintenance afterwards.&lt;/p&gt;
&lt;div class=&quot;interactive-chart&quot; data-description=&quot;Plugin coding activity&quot; data-hover-suffix=&quot; Hours&quot; data-title=&quot;WakaTime Plugins&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;Hours&lt;/td&gt;
&lt;td&gt;Plugin&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Eclipse&quot;&gt;Ecl…&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;TeXstudio&quot;&gt;TeX…&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Coda&quot;&gt;Coda&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Eric6&quot;&gt;Eri…&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Sketch&quot;&gt;Ske…&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Textmate&quot;&gt;Tex…&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Notepad++&quot;&gt;N++&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Komodo&quot;&gt;Kom…&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Xcode&quot;&gt;Xcode&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Emacs&quot;&gt;Ema…&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Netbeans&quot;&gt;N.B.&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Visual Studio&quot;&gt;V.S.&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Visual Studio Code&quot;&gt;V.S.C.&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;JetBrains&quot;&gt;J.B.&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Atom&quot;&gt;Atom&lt;/td&gt;
&lt;td&gt;57&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Vim&quot;&gt;Vim&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;Sublime Text&quot;&gt;Sub…&lt;/td&gt;
&lt;td&gt;89&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;a href=&quot;https://storage.googleapis.com/indie-hackers.appspot.com/content/wakatime__plugins.png&quot;&gt;See all&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;However, the plugins were easy compared to the website. In total, I've put in over 2,600 hours of coding activity since 2013 on the website.&lt;/p&gt;
&lt;p&gt;I also couldn't have built &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; without the help of open-source libraries like &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt; and &lt;a href=&quot;https://www.sqlalchemy.org/&quot;&gt;SQLAlchemy&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;How have you attracted users and grown WakaTime?&lt;/h2&gt;
&lt;p&gt;I launched &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; in 2013 with a &lt;a href=&quot;https://news.ycombinator.com/item?id=6046227&quot;&gt;Show HN&lt;/a&gt; post to Hacker News, which brought around 700 initial signups. I measure three different growth metrics:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Signup&lt;/li&gt;
&lt;li&gt;Onboarded (when the user has installed the plugin)&lt;/li&gt;
&lt;li&gt;Paid Upgrades&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;From the initial 700 signups, 160 finished onboarding. A year later I created paid plans, and eventually 20 of the 700 initial users became paid users.&lt;/p&gt;
&lt;p&gt;Every time I finished a new plugin, I treated it as a mini-launch and emailed any subscribers waiting for it, as well as posted to message boards and forums about the new editor support.&lt;/p&gt;
&lt;div id=&quot;ember221782&quot; class=&quot;shareable-quote ember-view&quot;&gt;
&lt;div class=&quot;shareable-quote__quote-wrapper&quot;&gt;

&lt;div class=&quot;shareable-quote__quote&quot;&gt;
&lt;p&gt;Every time I finished a new plugin, I treated it as a mini-launch and emailed any subscribers waiting for it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;I don't use paid advertising, because past Facebook ads resulted in mostly fake signups that never installed a plugin. Google adwords performs better than Facebook, but it's also more expensive. You can get most of the adwords traffic with good SEO.&lt;/p&gt;
&lt;p&gt;Growing by word of mouth has worked great. People tell their friends about a good product, and that growth is much steadier than artificial paid spikes.&lt;/p&gt;
&lt;p&gt;To increase active users, I focused on improving the onboarding experience. In 2013 only 15% of users finished onboarding, and now in 2017, 65% of new signups finish onboarding. This means the effort I spend finding new users is not wasted, because more of those new users finish onboarding.&lt;/p&gt;
&lt;div class=&quot;interactive-chart&quot; data-description=&quot;2013 to 2017&quot; data-hover-suffix=&quot; Percent of Signups Onboarded&quot; data-title=&quot;Onboarding Completion Rates&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;Year&lt;/td&gt;
&lt;td&gt;Onboarding Rate&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2013&quot;&gt;2013&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2014&quot;&gt;2014&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2015&quot;&gt;2015&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2016&quot;&gt;2016&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2017&quot;&gt;2017&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;% of newly-registered users who finished onboarding&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;What's your business model, and how have you grown your revenue?&lt;/h2&gt;
&lt;p&gt;When I started &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; in 2013, I just wanted to build a product that I myself and other programmers would enjoy using. I had plans for SaaS pricing ready, but honestly didn't know if anyone would upgrade to the paid plans. I was focusing on improving the dashboards, building more plugins, and just keeping the website online with fast page loads. My housemates Rob and Kirubakaran convinced me to spend a weekend adding paid plans, so it wasn't until a year after launching that you could pay for WakaTime.&lt;/p&gt;
&lt;p&gt;A difficult part of paid plans is figuring out how much to charge for your product. WakaTime started at $5/mo, but as the number of features increased it started to seem undervalued for what it offered.&lt;/p&gt;
&lt;p&gt;I was reluctant to increase prices, but changed the individual premium plan to $9/mo and added a team dashboard for $12/mo per seat. This helped keep the revenue above costs as the traffic and data grew.&lt;/p&gt;
&lt;div class=&quot;interactive-chart&quot; data-description=&quot;2013 to 2017&quot; data-hover-suffix=&quot; Paying Users&quot; data-title=&quot;Paying Users&quot;&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;Year&lt;/td&gt;
&lt;td&gt;Paying Users&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2013&quot;&gt;2013&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2014&quot;&gt;2014&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2015&quot;&gt;2015&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2016&quot;&gt;2016&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td data-full-value=&quot;2017&quot;&gt;2017&lt;/td&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Paid users are spread out worldwide, with most in the US, followed by the EU, South America, then Asia. &lt;a href=&quot;https://stripe.com/&quot;&gt;Stripe&lt;/a&gt; is amazing and accounts for most of the paid users. PayPal/Braintree is more popular among non-US users.&lt;/p&gt;
&lt;p&gt;Things I spend money on to keep the website up:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I was spending over $3k/mo for virtual machines and SQL DB on Amazon EC2, but switched all the servers to Nephoscale for half the price and better performance.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I also send out sponsored emails for developer-related products. &lt;a href=&quot;http://upstart.me/&quot;&gt;Upstart&lt;/a&gt; and &lt;a href=&quot;https://thepear.co/&quot;&gt;Pear&lt;/a&gt; are good places to find advertisers for your newsletter. This is supplementary, but nowhere near the main SaaS revenue.&lt;/p&gt;
&lt;h2&gt;What are your goals for the future?&lt;/h2&gt;
&lt;p&gt;Personally, I think life's too diverse for only one language, so I'm learning German.&lt;/p&gt;
&lt;p&gt;For &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt;, I want to make onboarding easier with a universal installer. After that, I'll add an invoicing tool so you can generate and send PDF invoices pre-filled with your coding activity.&lt;/p&gt;
&lt;p&gt;It might sound strange, but I also want to set a goal to spend &lt;em&gt;less&lt;/em&gt; time building WakaTime. This would mean being more productive with my time, and being more focused when working on WakaTime.&lt;/p&gt;
&lt;h2&gt;What are the biggest challenges you've faced and obstacles you've overcome?&lt;/h2&gt;
&lt;p&gt;With startups the challenges are always present. As soon as you solve one marketing hurdle, scaling problem, or product feature, you're presented with bigger challenges. That's part of the fun of startups… always having new challenges.&lt;/p&gt;
&lt;div id=&quot;ember221787&quot; class=&quot;shareable-quote ember-view&quot;&gt;
&lt;div class=&quot;shareable-quote__quote-wrapper&quot;&gt;

&lt;div class=&quot;shareable-quote__quote&quot;&gt;
&lt;p&gt;The best startup book is one you never open because you're too busy marketing and building your product.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;The biggest obstacle I've overcome was having the constant persistence to work on &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt;, even when it wasn't making any revenue.&lt;/p&gt;
&lt;p&gt;I put off charging for WakaTime until over a year after launching. If I could do things differently I would have created a paid version from day one.&lt;/p&gt;
&lt;h2&gt;Have you found anything particularly helpful or advantageous?&lt;/h2&gt;
&lt;p&gt;The biggest advantage I've had is that I built &lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime&lt;/a&gt; for myself. This way feature development came naturally, and I already knew how to market it. Also, it helped me continue working on WakaTime even without it making revenue or seeing exponential growth.&lt;/p&gt;
&lt;p&gt;Books can make you feel like you're being productive without actually building anything. The best startup book is one you never open because you're too busy marketing and building your product.&lt;/p&gt;
&lt;p&gt;I have found tremendous help with a network of entrepreneurial-minded friends. Whether they were doing a startup or working for one, they all helped more than a book would have.&lt;/p&gt;
&lt;h2&gt;What's your advice for indie hackers who are just starting out?&lt;/h2&gt;
&lt;p&gt;Stop reading and start building.&lt;/p&gt;
&lt;p&gt;Even if you don't code now, you can figure out enough to build a prototype. My suggestion is to get good/fast at building working prototypes.&lt;/p&gt;
&lt;h2&gt;Where can we go to learn more?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://wakatime.com/&quot;&gt;WakaTime.com&lt;/a&gt; to sign up.&lt;/p&gt;
&lt;a class=&quot;screenshot-wrapper&quot; href=&quot;https://wakatime.com/&quot;&gt;&lt;img alt=&quot;WakaTime website&quot; src=&quot;https://storage.googleapis.com/indie-hackers.appspot.com/content/wakatime__homepage.jpg&quot;/&gt;&lt;/a&gt;
&lt;p&gt;You can &lt;a href=&quot;https://twitter.com/wakatime&quot;&gt;follow @WakaTime on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'll be reading the comments below and will do my best to answer your questions!&lt;/p&gt;
</description>
<pubDate>Tue, 31 Oct 2017 14:45:52 +0000</pubDate>
<dc:creator>welder</dc:creator>
<og:description>Programmers aren't easy to sell to. Regardless, Alan Hamlett has grown WakaTime to $10k/mo by continually launching his coding plugins to a network of subscribers.</og:description>
<og:image>https://www.indiehackers.com/images/business-shareables/wakatime-0534bbea5721145a67e48c9a242f26.png</og:image>
<og:title>WakaTime on Indie Hackers</og:title>
<og:type>article</og:type>
<og:url>https://www.indiehackers.com/businesses/wakatime</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.indiehackers.com/businesses/wakatime</dc:identifier>
</item>
<item>
<title>Bottery – A conversational agent prototyping platform</title>
<link>https://github.com/google/bottery</link>
<guid isPermaLink="true" >https://github.com/google/bottery</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;h2&gt;A conversational agent prototyping platform by &lt;a href=&quot;https://github.com/galaxykate&quot;&gt;Kate Compton&lt;/a&gt;.&lt;/h2&gt;
&lt;p&gt;(This is not an official Google product.)&lt;/p&gt;
&lt;h2&gt;What is this?&lt;/h2&gt;
&lt;p&gt;Bottery is a syntax, editor, and simulator for prototyping &lt;strong&gt;generative contextual conversations&lt;/strong&gt; modeled as &lt;strong&gt;finite state machines&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Bottery takes inspiration from the &lt;strong&gt;&lt;a href=&quot;http://tracery.io/&quot;&gt;Tracery&lt;/a&gt;&lt;/strong&gt; open-source project for generative text (also by katecompton@ in a non-google capacity) and the &lt;a href=&quot;https://cheapbotsdonequick.com/&quot;&gt;Cheap Bots, Done Quick!&lt;/a&gt; bot-hosting platform, as well as open FSM-based storytelling tools like Twine.&lt;/p&gt;
&lt;p&gt;Like Tracery, Bottery is a &lt;em&gt;syntax&lt;/em&gt; that specifies the script of a conversation (a &lt;em&gt;map&lt;/em&gt;) with JSON. Like Cheap Bots, Done Quick!, the BotteryStudio can take that JSON and run a simulation of that conversation in a nice JavaScript front-end, with helpful visualizations and editing ability.&lt;/p&gt;
&lt;p&gt;The goal of Bottery is to help &lt;em&gt;everyone&lt;/em&gt;, from designers to writers to coders, be able to write simple and engaging contextual conversational agents, and to test them out in a realistic interactive simulation, mimicking how they'd work on a &quot;real&quot; platform like API.AI.&lt;/p&gt;
&lt;h2&gt;Bottery concepts&lt;/h2&gt;
&lt;p&gt;Users in Tracery write &lt;strong&gt;grammars&lt;/strong&gt;, JSON objects that recursively define how to generate some text, like &lt;a href=&quot;https://cheapbotsdonequick.com/source/losttesla&quot;&gt;the musings of a lost self-driving car&lt;/a&gt; or &lt;a href=&quot;https://cheapbotsdonequick.com/source/tinyadv&quot;&gt;outer-space adventures&lt;/a&gt;. Tracery grammars are lists of symbol names (like &quot;animal&quot;) and their expansion rules (like &quot;emu, okapi, pangolin&quot;).&lt;/p&gt;
&lt;p&gt;In Bottery, users write &lt;strong&gt;maps&lt;/strong&gt;. Each map is composed of four sub-components&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A set of &lt;strong&gt;states&lt;/strong&gt;, with information about what to do on entering them, and how to get from one to another&lt;/li&gt;
&lt;li&gt;A set of initial &lt;strong&gt;blackboard&lt;/strong&gt; values&lt;/li&gt;
&lt;li&gt;An optional Tracery &lt;strong&gt;grammar&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Blackboard (and the pointer)&lt;/h3&gt;
&lt;p&gt;You can imagine a Bottery map like a finite state machine or a &lt;a href=&quot;https://www.google.com/url?sa=i&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=images&amp;amp;cd=&amp;amp;ved=0ahUKEwibnLuC-JDSAhVRyWMKHZQNB3cQjRwIBw&amp;amp;url=https%3A%2F%2Fwww.pinterest.com%2Fpin%2F361273201334614541%2F&amp;amp;psig=AFQjCNGOTBu2PiFkWuV4zs2eeF-mL0PP-Q&amp;amp;ust=1487208084344985&quot;&gt;boardgame board&lt;/a&gt;: there are spaces, and connections between the spaces, and rules for how to move between them. The map itself doesn't change or store information during play. Instead, you have a &lt;strong&gt;pointer&lt;/strong&gt; showing which state you are on, all the variables in the blackboard (like the number of kids in your Game of Life car).&lt;/p&gt;
&lt;p&gt;An RPG map might use the blackboard to store the number of hit points for the main character, their current weapon and its stats, their gold, and quest progress. A quiz bot might store all of its categories, questions and answers, the players' current points, and which questions it wants to ask next. You can store strings, booleans, numbers, hierarchical objects, and arrays in the blackboard. Storing and retrieving information is done with a JavaScript-like syntax: &lt;code&gt;foo.bar[5]&lt;/code&gt; gets the value at the 5th index of object &lt;code&gt;bar&lt;/code&gt; in object &lt;code&gt;foo&lt;/code&gt;. &lt;code&gt;foo.baz[10][20] = 10&lt;/code&gt; behaves similarly, though unlike JavaScript, if these parameters don't exist, it will create new objects or arrays and fill them rather than throwing an error. See &lt;code&gt;parseMapPath&lt;/code&gt; in &lt;code&gt;map.js&lt;/code&gt; for details.&lt;/p&gt;
&lt;p&gt;Variables in the blackboard can be accessed from within Tracery with the syntax &lt;code&gt;You have guessed #/guessCount# times.&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;States&lt;/h3&gt;
&lt;p&gt;Each state is a node in the Bottery map. A state has&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;An &lt;strong&gt;id&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A list of &lt;strong&gt;actions&lt;/strong&gt; to be taken when the state is entered&lt;/li&gt;
&lt;li&gt;A dictionary of &lt;strong&gt;exits&lt;/strong&gt; to other states.&lt;/li&gt;
&lt;li&gt;Optionally, a list of &lt;strong&gt;suggestion chips&lt;/strong&gt; (using tracery syntax) of suggested user inputs. This is commonly used in text based bots.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are several ways to express the actions that are taken when the state is entered, depending on the desired behavior. The following are currently defined:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;onEnter&lt;/code&gt;: This takes a string of actions defined in the action syntax (see below). For example: &lt;code&gt;“‘hello’ greeting++”&lt;/code&gt;. these are space delineated commands, and the extra quotation marks around the phrase are necessary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onEnterDoOne&lt;/code&gt; Takes an array of strings in format &lt;code&gt;&quot;[condition] [action]&quot;&lt;/code&gt;. The first condition that evaluates to true has its action executed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onEnterSay&lt;/code&gt; Takes a singe string and outputs it. The string can use tracery expansion syntax.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onEnterPlay&lt;/code&gt; Plays the audio file specified.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onEnterFxn&lt;/code&gt; Executes the given function (but must be defined in &lt;code&gt;map.js&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All bots must have an &lt;code&gt;origin&lt;/code&gt; state, which is the first state entered when the bot starts.&lt;/p&gt;
&lt;h3&gt;Exits&lt;/h3&gt;
&lt;p&gt;Exits are described by strings in the format: &lt;code&gt;[conditions] -&amp;gt;TARGET_NAME [actions to take when taken]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Syntax for actions and conditions are described below.&lt;/p&gt;
&lt;p&gt;If all the conditions are true then the exit becomes active. If there are &lt;em&gt;no&lt;/em&gt; conditions, the exit is always active.&lt;/p&gt;
&lt;p&gt;Then there is an arrow (&lt;code&gt;-&amp;gt;&lt;/code&gt;) and a target. The target is either an &lt;strong&gt;id of a state&lt;/strong&gt; or an at sign &lt;code&gt;@&lt;/code&gt; that indicates the pointer should re-enter the current state.&lt;/p&gt;
&lt;p&gt;The list of actions is in &lt;strong&gt;action syntax&lt;/strong&gt; (see below).&lt;/p&gt;
&lt;h3&gt;Condition&lt;/h3&gt;
&lt;p&gt;Conditions fall under the following categories:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Inputs: User input matching a string. E.g., &lt;code&gt;&quot;one&quot;&lt;/code&gt; or &lt;code&gt;&quot;two&quot;&lt;/code&gt;. The presence of quotes indicates a string that must be matched by the last user input. An asterisk &lt;code&gt;*&lt;/code&gt; matches &lt;em&gt;any&lt;/em&gt; user input.&lt;/li&gt;
&lt;li&gt;Expressions: Mathematical syntax representing equality, inequality, and so on. Most basic math expressions are valid e.g. &lt;code&gt;count&amp;gt;4&lt;/code&gt;. Expressions can use variables that exist in the blackboard, using the blackboard variable syntax (see above).&lt;/li&gt;
&lt;li&gt;Values: There is only one type of these at present, &lt;code&gt;wait:[time in seconds to wait]&lt;/code&gt;. This evaluates to true after that much time has elapsed after entering the current state.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;Action syntax is similar to condition syntax:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Assignment: Sets a variable in the blackboard. If the variable does not exist it is created. E.g. &lt;code&gt;partyMember[1].weapon=&quot;sword&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Output: Raw text with quotes is outputted using selected output method. ‘&quot;hello&quot;’. This uses tracery expansion syntax, so &lt;code&gt;&quot;hello #/playerName#&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Play sound: &lt;code&gt;playSound([sound name])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Incrementation: Increments or decrements a variable in the blackboard. E.g.:&lt;code&gt;[varName]++&lt;/code&gt; or &lt;code&gt;[varName]--&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;How the pointer decides how to move&lt;/h3&gt;
&lt;p&gt;When the pointer enters a state, the following things happen:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Any &lt;code&gt;onEnter&lt;/code&gt; actions are executed.&lt;/li&gt;
&lt;li&gt;Any &lt;strong&gt;suggestion chips&lt;/strong&gt; are created and displayed to the user.&lt;/li&gt;
&lt;li&gt;All available exits (including the exits specified in the state, as well as global exits) are collected.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The pointer then waits for state change. At the moment, state change includes user input, and the passage of time. If no &lt;code&gt;wait&lt;/code&gt; conditions are present, then the bot will wait for user input forever. When that state change occurs, the pointer will re-evaluate all the conditions on the currently available exits. If all the conditions on an exit evaluate to true, then that exit becomes active.&lt;/p&gt;
&lt;p&gt;It is often the case that multiple exits are active at the same time. For example: &lt;code&gt;&quot;yes&quot; -&amp;gt;startGame&lt;/code&gt; &lt;code&gt;* -&amp;gt;askForClarification&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the user types &quot;yes&quot;, both exits are active. The first exit in in the list of active exits is selected. In this case &lt;code&gt;&quot;yes&quot; -&amp;gt;startGame&lt;/code&gt; will be chosen.&lt;/p&gt;
&lt;p&gt;When the pointer uses an exit, the following occurs:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The actions associated with the exit are executed.&lt;/li&gt;
&lt;li&gt;The pointer moves to the state of that exit and the process begins anew.&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Interface Overview&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/bottery/blob/master/doc_images/bottery_ui.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/google/bottery/raw/master/doc_images/bottery_ui.png?raw=true&quot; alt=&quot;UI overview&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Chat&lt;/h3&gt;
&lt;p&gt;Tab for interacting with the bot. Occasionally, the player may be offered suggestion chips (e.g., &quot;heads&quot; and &quot;tails&quot;) that can allow the player to interact without entering text.&lt;/p&gt;
&lt;h3&gt;Controls&lt;/h3&gt;
&lt;p&gt;Switches between text and speech, and also commands for working with state. If there are errors in the bot’s underlying script, then they will appear here.&lt;/p&gt;
&lt;h3&gt;Editor&lt;/h3&gt;
&lt;p&gt;An inline editor for the underlying bot script. A user can edit the script and see changes without having to edit the underlying &lt;code&gt;.js&lt;/code&gt; files. Changes here will be saved in local storage, so they will only be accessible to the current user.&lt;/p&gt;
&lt;h3&gt;Blackboard&lt;/h3&gt;
&lt;p&gt;Displays the current state of the variables known by the bot. These variables can be used to affect conditional behavior (e.g., the mood of the bot), some tracked information (e.g., the number of correct guesses in a quiz), the name of something (e.g., something the player is allowed to name), and much more.&lt;/p&gt;
&lt;p&gt;This information is typically invisible to an end user interacting with the bot.&lt;/p&gt;
&lt;h3&gt;Inspector&lt;/h3&gt;
&lt;p&gt;Presents a view of the bot’s state machine. This shows all the states that the bot can traverse through, and within them indicates the commands that are executed by the bot, and the ways to traverse to the next state[s]. The initial state is always &quot;origin&quot;. This view is not interactive, but is a visual representation of the underlying script.&lt;/p&gt;
&lt;h3&gt;State view&lt;/h3&gt;
&lt;p&gt;This is a representation of the current state of the bot, and the potential next states, as well as the conditions for enabling these particular transitions.&lt;/p&gt;
&lt;h3&gt;Viz&lt;/h3&gt;
&lt;p&gt;Displays the directed connectivity graph of states and exits. Highlights the current state and any active exit transitions.&lt;/p&gt;
&lt;h2&gt;Example bot (kitten simulator!)&lt;/h2&gt;
&lt;p&gt;Now that we have reviewed the underlying concepts and the interface, it is time to build a bot!&lt;/p&gt;
&lt;p&gt;When you have checked out the git repository, create a new file &lt;code&gt;kittens.js&lt;/code&gt; in the &lt;code&gt;bots&lt;/code&gt; directory, and add &lt;code&gt;kittens&lt;/code&gt; to the list of bots in &lt;code&gt;bots.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can start with the following in &lt;code&gt;kittens.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a minimal valid bot. It has one state, the &lt;code&gt;origin&lt;/code&gt;, and that has a single &lt;code&gt;onEnter&lt;/code&gt; associated with it. Note the fact that the text &lt;code&gt;'You have a kitten!'&lt;/code&gt; is in single quotes. This is an output action and denotes that this string is to be output as text. We will add additional actions later.&lt;/p&gt;
&lt;p&gt;A note on syntax: The format of this is valid javascript, and is very similar to JSON, but is not valid JSON because of two key differences: trailing commas are permitted, and object keys do not require quotes.&lt;/p&gt;
&lt;h3&gt;Interactive kitten&lt;/h3&gt;
&lt;p&gt;A bot isn't very interesting until you can interact with it, so let's add some interactivity:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'What do you want to name your kitten?'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'*' -&amp;gt;respondToName name=INPUT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    respondToName&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The kitten purrs happily, I guess it likes the name #/name#!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example introduces two new states: &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;respondToName&lt;/code&gt;. These states are connected via &lt;code&gt;exits&lt;/code&gt;. The exit on &lt;code&gt;origin&lt;/code&gt; has no conditions, and therefore is entered immediately by the Pointer. The exit in the state &lt;code&gt;name&lt;/code&gt; requires some form of user input indicated by the asterisk. This exit has an action associated with it in the form &lt;code&gt;name=INPUT&lt;/code&gt;. &lt;code&gt;INPUT&lt;/code&gt; is a special variable indicating the user's input. &lt;code&gt;name=INPUT&lt;/code&gt; has the effect that the variable &lt;code&gt;name&lt;/code&gt; is assigned to what the user entered, and is saved in the blackboard. In state &lt;code&gt;respondToName&lt;/code&gt; there is an &lt;code&gt;onEnterSay&lt;/code&gt; behavior, which is similar to &lt;code&gt;onEnter&lt;/code&gt;, but does not require extra single quotes around the text outputted. The blackboard variable &lt;code&gt;name&lt;/code&gt; is accessed via Tracery syntax using &lt;code&gt;#/name#&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Interacting with this bot, you can see that the &lt;strong&gt;viz&lt;/strong&gt; view displays the state graph, and the blackboard view displays the user-entered name.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/bottery/blob/master/doc_images/kittens1.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/google/bottery/raw/master/doc_images/kittens1.png?raw=true&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Suggestion chips&lt;/h3&gt;
&lt;p&gt;User interactions can be expedited though the use of suggestion chips. These are prompts that are shown to the user when interacting through text.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'What do you want to name your kitten?'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      chips&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Cupcake&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Dark Lord Satan&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'*' -&amp;gt;respond_to_name name=INPUT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    respond_to_name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The kitten purrs happily, I guess it likes the name #/name#!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Adding Tracery grammar&lt;/h3&gt;
&lt;p&gt;A little more flavor can be added using a Tracery grammar:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  grammar&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    noun&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;cat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;monkey&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butter&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;pants&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;demon&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;taco&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mountain&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butt&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    adj&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluffy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;puff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tepid&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;love&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;unruly&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#adj.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize# the #adj.capitalize#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
  },
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'What do you want to name your kitten?'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      chips&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Cupcake&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Dark Lord Satan&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'*' -&amp;gt;respond_to_name name=INPUT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    respond_to_name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The kitten purrs happily, I guess it likes the name #/name#!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/bottery/blob/master/doc_images/kittens2.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/google/bottery/raw/master/doc_images/kittens2.png?raw=true&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Petting the kitten&lt;/h3&gt;
&lt;p&gt;What are some of the things that a user might want to do with a kitten bot? A natural thing to do would be to pet the kitten. Real life kittens are temperamental creatures, and can behave unpredictably. We can use the blackboard to store a variable indicating the number of times the kitten wants to be petted, and anything beyond that will cause the kitten to bite the user.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  grammar&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    noun&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;cat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;monkey&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butter&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;pants&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;demon&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;taco&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mountain&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butt&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    adj&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluffy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;puff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tepid&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;love&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;unruly&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#adj.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize# the #adj.capitalize#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
  },
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!' desired_pets=randomInt(1,5)&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'What do you want to name your kitten?'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      chips&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Cupcake&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Dark Lord Satan&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'*' -&amp;gt;respond_to_name name=INPUT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    respond_to_name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The kitten purrs happily, I guess it likes the name #/name#!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You pet the kitten' desired_pets--&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;desired_pets&amp;gt;=0 -&amp;gt;happy_pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;angry_pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]
    },
    happy_pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#/name# loves you and is in ecstacy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    angry_pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;why did you pet #/name# when it didn't want to be petted!?&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;desired_pets=randomInt(1,5)&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    }
  },
  exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'pet' -&amp;gt;pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  initialBlackboard&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;the kitten&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example adds a global exit. No matter where the Pointer is at on the graph, the user can always pet the kitten. This introduces a problem, though, because the user could potentially pet the kitten before it was named, so an initial value for the name is configured in the blackboard. When the origin is entered, the variable &lt;code&gt;desired_pets&lt;/code&gt; is set to a random value between 1 and 5. When the user pets the kitten too much, the &lt;code&gt;angry_pet&lt;/code&gt; node is entered.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/bottery/blob/master/doc_images/kittens3.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/google/bottery/raw/master/doc_images/kittens3.png?raw=true&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;State flow&lt;/h3&gt;
&lt;p&gt;Finally, we should add some idle behavior for the kitten when it is not being petted.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
bot &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  grammar&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    noun&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;cat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;monkey&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butter&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;pants&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;demon&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;taco&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mountain&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;butt&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    adj&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fluffy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;fat&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;puff&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tepid&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;love&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;unruly&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#adj.capitalize##noun#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#noun.capitalize# the #adj.capitalize#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
    catSpeak&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mmrrr&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;meow&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;mmrrrrow&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;meep&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#catSpeak# #catSpeak#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
  },
  states&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    origin&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You have a kitten!' desired_pets=randomInt(1,5)&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'What do you want to name your kitten?'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      chips&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#name#&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Cupcake&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Dark Lord Satan&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;],
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'*' -&amp;gt;respond_to_name name=INPUT&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    respond_to_name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;The kitten purrs happily, I guess it likes the name #/name#!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;idle&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    },
    pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'You pet the kitten' desired_pets--&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;desired_pets&amp;gt;=0 -&amp;gt;happy_pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;angry_pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]
    },
    happy_pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#/name# loves you and is in ecstacy&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wait:10 -&amp;gt;idle&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    },
    angry_pet&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;why did you pet #/name# when it didn't want to be petted!?&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;desired_pets=randomInt(1,5)&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;-&amp;gt;angry&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    },
    idle&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnterSay&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;#/name# rolls around and makes cute noises&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wait:10 -&amp;gt;hungry&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    angry&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'The kitten is angry! *bite*'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wait:10 -&amp;gt;sleeping&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    sleeping&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'The kitten is sleeping! zzzzzzzzz'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wait:10 -&amp;gt;hungry&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    hungry&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
      onEnter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'The kitten is hungry! meow meow #catSpeak#'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wait:10 -&amp;gt;angry&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
  },
  exits&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;'pet' -&amp;gt;pet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  initialBlackboard&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;the kitten&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
  },
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This final example adds state transitions that form a cycle of activity. If no interaction occurs, the kitten will naturally cycle between the states of &lt;code&gt;hungry&lt;/code&gt;, &lt;code&gt;sleeping&lt;/code&gt;, and &lt;code&gt;angry&lt;/code&gt;. The &lt;code&gt;wait:10&lt;/code&gt; condition on the exit will delay for a particular amount of time before automatically advancing into that state.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/bottery/blob/master/doc_images/kittens4.png?raw=true&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://github.com/google/bottery/raw/master/doc_images/kittens4.png?raw=true&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Additional resources.&lt;/h3&gt;
&lt;p&gt;This concludes the tutorial. For more examples of types of bots, check out:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;amIPsychic.js&lt;/code&gt; This is a simple guessing game where the user guesses whether a random coin will flip heads or tails. The bot tracks the longest winning and losing streak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quiz.js&lt;/code&gt; A basic quiz game where the user answers questions and these are used to determine a Hip Hop DJ name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tesla.js&lt;/code&gt; A bot based on the tracery &lt;a href=&quot;https://twitter.com/losttesla&quot;&gt;twitter bot&lt;/a&gt; of the same name.&lt;/li&gt;
&lt;/ul&gt;&lt;/article&gt;</description>
<pubDate>Tue, 31 Oct 2017 12:50:42 +0000</pubDate>
<dc:creator>manojlds</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>google/bottery</og:title>
<og:url>https://github.com/google/bottery</og:url>
<og:description>Contribute to bottery development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/google/bottery</dc:identifier>
</item>
<item>
<title>We only hire the best means we only hire the trendiest (2016)</title>
<link>http://danluu.com/programmer-moneyball/</link>
<guid isPermaLink="true" >http://danluu.com/programmer-moneyball/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;When we only hire the best means we only hire the trendiest&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;/&gt;&lt;link rel=&quot;icon&quot; href=&quot;data:;base64,iVBORw0KGgo=&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;354.61378509605&quot;&gt;
&lt;p&gt;&lt;strong&gt;When we only hire the best means we only hire the trendiest&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;An acquaintance of mine, let’s call him Mike, is looking for work after getting laid off from a contract role at Microsoft, which has happened to a lot of people I know. Like me, Mike has 11 years in industry. Unlike me, he doesn’t know a lot of folks at trendy companies, so I passed his resume around to some engineers I know at companies that are desperately hiring. My engineering friends thought Mike’s resume was fine, but most recruiters rejected him in the resume screening phase.&lt;/p&gt;
&lt;p&gt;When I asked why he was getting rejected, the typical response I got was:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Tech experience is in irrelevant tech&lt;/li&gt;
&lt;li&gt;“Experience is too random, with payments, mobile, data analytics, and UX.”&lt;/li&gt;
&lt;li&gt;Contractors are generally not the strongest technically&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This response is something from a recruiter that was relayed to me through an engineer; the engineer was incredulous at the response from the recruiter. Just so we have a name, let’s call this company TrendCo. It’s one of the thousands of companies that claims to have world class engineers, hire only the best, etc. This is one company in particular, but it’s representative of a large class of companies and the responses Mike has gotten.&lt;/p&gt;
&lt;p&gt;Anyway, (1) is code for “Mike’s a .NET dev, and we don’t like people with Windows experience”.&lt;/p&gt;
&lt;p&gt;I’m familiar with TrendCo’s tech stack, which multiple employees have told me is “a tire fire”. Their core systems top out under 1k QPS, which has caused them to go down under load. Mike has worked on systems that can handle multiple orders of magnitude more load, but his experience is, apparently, irrelevant.&lt;/p&gt;
&lt;p&gt;(2) is hard to make sense of. I’ve interviewed at TrendCo and one of the selling points is that it’s a startup where you get to do a lot of different things. TrendCo almost exclusively hires generalists but Mike is, apparently, too general for them.&lt;/p&gt;
&lt;p&gt;(3), combined with (1), gets at what TrendCo’s real complaint with Mike is. He’s not their type. TrendCo’s median employee is a recent graduate from one of maybe ten “top” schools with 0-2 years of experience. They have a few experienced hires, but not many, and most of their experienced hires have something trendy on their resume, not a boring old company like Microsoft.&lt;/p&gt;
&lt;p&gt;Whether or not you think there’s anything wrong with having a type and rejecting people who aren’t your type, as &lt;a href=&quot;https://news.ycombinator.com/item?id=11290662&quot;&gt;Thomas Ptacek has observed&lt;/a&gt;, if your type is the same type everyone else is competing for, “you are competing for talent with the wealthiest (or most overfunded) tech companies in the market”.&lt;/p&gt;
&lt;p&gt;If &lt;a href=&quot;https://docs.google.com/spreadsheets/u/1/d/1UnLz40Our1Ids-O0sz26uPNCF6cQjwosrZQY4VLdflU/htmlview?pli=1&amp;amp;sle=true#&quot;&gt;you look at new grad hiring data&lt;/a&gt;, it looks like FB is offering people with zero experience &amp;gt; $100k/ salary, $100k signing bonus, and $150k in RSUs, for an amortized total comp &amp;gt; $160k/yr, including $240k in the first year. Google’s package has &amp;gt; $100k salary, a variable signing bonus in the $10k range, and $187k in RSUs. That comes in a bit lower than FB, but it’s much higher than most companies that claim to only hire the best are willing to pay for a new grad. Keep in mind that &lt;a href=&quot;https://danluu.com/startup-tradeoffs/#fn:C&quot;&gt;compensation can go much higher for contested candidates&lt;/a&gt;, and that &lt;a href=&quot;https://news.ycombinator.com/item?id=11314449&quot;&gt;compensation for experienced candidates is probably higher than you expect if you’re not a hiring manager who’s seen what competitive offers look like today&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By going after people with the most sought after qualifications, TrendCo has narrowed their options down to either paying out the nose for employees, or offering non-competitive compensation packages. TrendCo has chosen the latter option, which partially explains why they have, proportionally, so few senior devs – the compensation delta increases as you get more senior, and you have to make a really compelling pitch to someone to get them to choose TrendCo when you’re offering $150k/yr less than the competition. And as people get more experience, they’re less likely to believe the part of the pitch that explains how much the stock options are worth.&lt;/p&gt;
&lt;p&gt;Just to be clear, I don’t have anything against people with trendy backgrounds. I know a lot of these people who have impeccable interviewing skills and got 5-10 strong offers last time they looked for work. I’ve worked with someone like that: he was just out of school, his total comp package was north of $200k/yr, and he was worth every penny. But think about that for a minute. He had strong offers from six different companies, of which he was going to accept at most one. Including lunch and phone screens, the companies put in an average of eight hours apiece interviewing him. And because they wanted to hire him so much, the companies that were really serious spent an average of another five hours apiece of engineer time trying to convince him to take their offer. Because these companies had, on average, a ⅙ chance of hiring this person, they have to spend at least an expected (8+5) * 6 = 78 hours of engineer time. People with great backgrounds are, on average, pretty great, but they’re really hard to hire. It’s much easier to hire people who are underrated, especially if you’re not paying market rates.&lt;/p&gt;
&lt;p&gt;I’ve seen this hyperfocus on hiring people with trendy backgrounds from both sides of the table, and it’s ridiculous from both sides.&lt;/p&gt;
&lt;p&gt;On the referring side of hiring, I tried to get a startup I was at to hire the most interesting and creative programmer I’ve ever met, who was tragically underemployed for years because of his low GPA in college. We declined to hire him and I was told that his low GPA meant that he couldn’t be very smart. Years later, Google took a chance on him and he’s been killing it since then. He actually convinced me to join Google, and &lt;a href=&quot;http://danluu.com/tech-discrimination/&quot;&gt;at Google, I tried to hire one of the most productive programmers I know, who was promptly rejected by a recruiter for not being technical enough&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the candidate side of hiring, I’ve experienced both being in demand and being almost unhireable. Because I did my undergrad at Wisconsin, which is one of the 25 schools that claims to be a top 10 cs/engineering school, I had recruiters beating down my door when I graduated. But that’s silly – that I attended Wisconsin wasn’t anything about me; I just happened to grow up in the state of Wisconsin. If I grew up in Utah, I probably would have ended up going to school at Utah. When I’ve compared notes with folks who attended schools like Utah and Boise State, their education is basically the same as mine. Wisconsin’s rank as an engineering school comes from having professors who do great research which is, at best, weakly correlated to &lt;a href=&quot;http://danluu.com/teach-debugging/&quot;&gt;effectiveness at actually teaching undergrads&lt;/a&gt;. Despite getting the same engineering education you could get at hundreds of other schools, I had a very easy time getting interviews and finding a great job.&lt;/p&gt;
&lt;p&gt;I spent 7.5 years in that great job, at Centaur. Centaur has a pretty strong reputation among hardware companies in Austin who’ve been around for a while, and I had an easy time shopping for local jobs at hardware companies. But I don’t know of any software folks who’ve heard of Centaur, and as a result I couldn’t get an interview at most software companies. There were even a couple of cases where I had really strong internal referrals and the recruiters still didn’t want to talk to me, which I found funny and my friends found frustrating.&lt;/p&gt;
&lt;p&gt;When I could get interviews, they often went poorly. A typical rejection reason was something like “we process millions of transactions per day here and we really need someone with more relevant experience who can handle these things without ramping up”. And then Google took a chance on me and I was the second person on a project to get serious about deep learning performance, which was a 20%-time project until just before I joined. &lt;a href=&quot;https://www.google.com/patents/US20160342889&quot;&gt;We built the fastest deep learning system in the world&lt;/a&gt;. From what I hear, they’re now on the Nth generation of that project, but even the first generation thing we built has better per-node performance and performance per dollar than any other production system I know of today, years later (excluding follow-ons to that project, of course).&lt;/p&gt;
&lt;p&gt;While I was at Google I had recruiters pinging me about job opportunities all the time. And now that I’m at boring old Microsoft, I don’t get nearly as many recruiters reaching out to me. I’ve been considering looking for work and I wonder how trendy I’ll be if I do. Experience in irrelevant tech? Check! Random experience? Check! Contractor? Well, no. But two out of three ain’t bad.&lt;/p&gt;
&lt;p&gt;My point here isn’t anything about me. It’s that here’s this person who has wildly different levels of attractiveness to employers at various times, mostly due to superficial factors that don’t have much to do with actual productivity. This is a really common story among people who end up at Google. If you hired them before they worked at Google, you might have gotten a great deal! But no one (except Google) was willing to take that chance. There’s something to be said for paying more to get a known quantity, but a company like TrendCo that isn’t willing to do that cripples its hiring pipeline by only going after people with trendy resumes.&lt;/p&gt;
&lt;p&gt;I don’t mean to pick on startups like TrendCo in particular. Boring old companies have their version of what a trendy background is, too. A friend of mine who’s desperate to hire can’t do anything with some of the resumes I pass his way because his group isn’t allowed to hire anyone without a degree. Another person I know is in a similar situation because his group won’t talk to people who aren’t already employed.&lt;/p&gt;
&lt;p&gt;Not only are these decisions non-optimal for companies, they create a path dependence in employment outcomes that causes individual good (or bad) events to follow people around for decades. You can see similar effects in the literature on career earnings in a variety of fields.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=7260087&quot;&gt;Thomas Ptacek has this great line about how&lt;/a&gt; “we interview people whose only prior work experience is “Line of Business .NET Developer”, and they end up showing us how to write exploits for elliptic curve partial nonce bias attacks that involve Fourier transforms and BKZ lattice reduction steps that take 6 hours to run.” If you work at a company that doesn’t reject people out of hand for not being trendy, you’ll hear lots of stories like this. Some of the best people I’ve worked with went to schools you’ve never heard of and worked at companies you’ve never heard of until they ended up at Google. Some are still at companies you’ve never heard of.&lt;/p&gt;
&lt;p&gt;If you read &lt;a href=&quot;https://zachholman.com/talk/firing-people&quot;&gt;Zach Holman&lt;/a&gt;, you may recall that when he said that he was fired, someone responded with “If an employer has decided to fire you, then you’ve not only failed at your job, you’ve failed as a human being.” A lot of people treat employment status and credentials as measures of the inherent worth of individuals. But a large component of these markers of success, not to mention success itself, is luck.&lt;/p&gt;
&lt;h3 id=&quot;solutions&quot;&gt;Solutions?&lt;/h3&gt;
&lt;p&gt;I can understand why this happens. At an individual level, we’re prone to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fundamental_attribution_error&quot;&gt;fundamental attribution error&lt;/a&gt;. At an organizational level, fast growing organizations burn a large fraction of their time on interviews, and the obvious way to cut down on time spent interviewing is to only interview people with “good” qualifications. Unfortunately, that’s counterproductive when you’re chasing after the same tiny pool of people as everyone else.&lt;/p&gt;
&lt;p&gt;Here are the beginnings of some ideas. I’m open to better suggestions!&lt;/p&gt;
&lt;h4 id=&quot;moneyball&quot;&gt;Moneyball&lt;/h4&gt;
&lt;p&gt;Billy Beane and Paul Depodesta took the Oakland A’s, a baseball franchise with nowhere near the budget of top teams, and created what was arguably the best team in baseball by finding and “hiring” players who were statistically underrated for their price. The thing I find really amazing about this is that they publicly talked about doing this, and then Michael Lewis wrote a book, titled &lt;a href=&quot;https://www.amazon.com/gp/product/0393324818/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=abroaview-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0393324818&amp;amp;linkId=65d86d3a72b4c1ba73e8d3d52796eae1&quot;&gt;Moneyball&lt;/a&gt;, about them doing this. Despite the publicity, it took years for enough competitors to catch on enough that the A’s strategy stopped giving them a very large edge.&lt;/p&gt;
&lt;p&gt;You can see the exact same thing in software hiring. Thomas Ptacek has been talking about how they hired unusually effective people at Matasano for at least half a decade, maybe more. Google bigwigs regularly talk about the hiring data they have and what hasn’t worked. I believe they talked about how focusing on top schools wasn’t effective and didn’t turn up employees that have better performance years ago, but that doesn’t stop TrendCo from focusing hiring efforts on top schools.&lt;/p&gt;
&lt;h4 id=&quot;training-mentorship&quot;&gt;Training / mentorship&lt;/h4&gt;
&lt;p&gt;You see a lot of talk about moneyball, but for some reason people are less excited about… trainingball? Practiceball? Whatever you want to call taking people who aren’t “the best” and teaching them how to be “the best”.&lt;/p&gt;
&lt;p&gt;This is another one where it’s easy to see the impact through the lens of sports, because there is so much good performance data. Since it’s basketball season, if we look at college basketball, for example, we can identify a handful of programs that regularly take unremarkable inputs and produce good outputs. And that’s against a field of competitors where every team is expected to coach and train their players.&lt;/p&gt;
&lt;p&gt;When it comes to tech companies, most of the competition isn’t even trying. At the median large company, you get a couple days of “orientation”, which is mostly legal mumbo jumbo and paperwork, and the occasional “training”, which is usually a set of videos and a set of multiple-choice questions that are offered up for compliance reasons, not to teach anyone anything. And you’ll be assigned a mentor who, more likely than not, won’t provide any actual mentorship. Startups tend to be even worse! It’s not hard to do better than that.&lt;/p&gt;
&lt;p&gt;Considering how much money companies spend on &lt;a href=&quot;https://news.ycombinator.com/item?id=11314449&quot;&gt;hiring and retaining&lt;/a&gt; “the best”, you’d expect them to spend at least a (non-zero) fraction on training. It’s also quite strange that companies don’t focus more or training and mentorship when trying to recruit. Specific things I’ve learned in specific roles have been tremendously valuable to me, but it’s almost always either been a happy accident, or something I went out of my way to do. Most companies don’t focus on this stuff. Sure, recruiters will tell you that “you’ll learn so much more here than at Google, which will make you more valuable”, implying that it’s worth the $150k/yr pay cut, but if you ask them what, specifically, they do to make a better learning environment than Google, they never have a good answer.&lt;/p&gt;
&lt;h4 id=&quot;process-tools-culture&quot;&gt;Process / tools / culture&lt;/h4&gt;
&lt;p&gt;I’ve worked at two companies that both have effectively infinite resources to spend on tooling. One of them, let’s call them ToolCo, is really serious about tooling and invests heavily in tools. People describe tooling there with phrases like “magical”, “the best I’ve ever seen”, and “I can’t believe this is even possible”. And I can see why. For example, if you want to build a project that’s millions of lines of code, their build system will make that take somewhere between 5s and 20s (assuming you don’t enable &lt;a href=&quot;https://en.wikipedia.org/wiki/Interprocedural_optimization&quot;&gt;LTO&lt;/a&gt; or anything else that can’t be parallelized). In the course of a regular day at work you’ll use multiple tools that seem magical because they’re so far ahead of what’s available in the outside world.&lt;/p&gt;
&lt;p&gt;The other company, let’s call them ProdCo &lt;a href=&quot;http://yosefk.com/blog/people-can-read-their-managers-mind.html&quot;&gt;pays lip service to tooling, but doesn’t really value it&lt;/a&gt;. People describing ProdCo tools use phrases like “world class bad software” and “I am 2x less productive than I’ve ever been anywhere else”, and “I can’t believe this is even possible”. ProdCo has a paper on a new build system; their claimed numbers for speedup from parallelization/caching, onboarding time, and reliability, are at least two orders of magnitude worse than the equivalent at ToolCo. And, in my experience, the actual numbers are worse than the claims in the paper. In the course of a day of work at ProdCo, you’ll use multiple tools that are multiple orders of magnitude worse than the equivalent at ToolCo in multiple dimensions. These kinds of things add up and can easily make a larger difference than “hiring only the best”.&lt;/p&gt;
&lt;p&gt;Processes and culture also matter. I once worked on a team that didn’t use version control or have a bug tracker. For every no-brainer item on the &lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000043.html&quot;&gt;Joel test&lt;/a&gt;, there are teams out there that make the wrong choice.&lt;/p&gt;
&lt;p&gt;Although I’ve only worked on one team that completely failed the Joel test (they scored a 1 out of 12), every team I’ve worked on has had glaring deficiencies that are technically trivial (but sometimes culturally difficult) to fix. When I was at Google, we had really bad communication problems between the two halves of our team that were in different locations. My fix was brain-dead simple: I started typing up meeting notes for all of our local meetings and discussions and taking questions from the remote team about things that surprised them in our notes. That’s something anyone could have done, and it was a huge productivity improvement for the entire team. I’ve literally never found an environment where you can’t massively improve productivity with something that trivial. Sometimes people don’t agree (e.g., it took months to get the non-version-control-using-team to use version control), but that’s a topic for another post.&lt;/p&gt;
&lt;p&gt;Programmers are woefully underutilized at most companies. What’s the point of &lt;a href=&quot;http://danluu.com/wat/&quot;&gt;hiring “the best” and then crippling them&lt;/a&gt;? You can get better results by hiring undistinguished folks and setting them up for success, and &lt;a href=&quot;https://twitter.com/patio11/status/706884144538648576&quot;&gt;it’s a lot cheaper&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;When I started programming, I heard a lot about how programmers are down to earth, not like those elitist folks who have uniforms involving suits and ties. You can even wear t-shirts to work! But if you think programmers aren’t elitist, try wearing a suit and tie to an interview sometime. You’ll have to go above and beyond to prove that you’re not a bad cultural fit. We like to think that we’re different from all those industries that judge people based on appearance, but we do the same thing, only instead of saying that people are a bad fit because they don’t wear ties, we say they’re a bad fit because they do, and instead of saying people aren’t smart enough because they don’t have the right pedigree… wait, that’s exactly the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;See also: &lt;a href=&quot;http://danluu.com/hiring-lemons/&quot;&gt;developer hiring and the market for lemons&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Thanks to Kelley Eskridge, Laura Lindzey, John Hergenroeder, Kamal Marhubi, Julia Evans, Steven McCarthy, Lindsey Kuper, Leah Hanson, Darius Bacon, Pierre-Yves Baccou, Kyle Littler, Jorge Montero, and Mark Dominus for discussion/comments/corrections.&lt;/small&gt;&lt;/p&gt;


&lt;footer&gt;
&lt;/footer&gt;&lt;/body&gt;</description>
<pubDate>Tue, 31 Oct 2017 06:26:51 +0000</pubDate>
<dc:creator>indy</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://danluu.com/programmer-moneyball/</dc:identifier>
</item>
<item>
<title>Why Most Unit Testing Is Waste [pdf]</title>
<link>https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf</link>
<guid isPermaLink="true" >https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf</guid>
<description>&lt;a href=&quot;https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Tue, 31 Oct 2017 05:05:22 +0000</pubDate>
<dc:creator>quickthrower2</dc:creator>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf</dc:identifier>
</item>
<item>
<title>HTTP 103 – An HTTP Status Code for Indicating Hints</title>
<link>https://datatracker.ietf.org/doc/draft-ietf-httpbis-early-hints/</link>
<guid isPermaLink="true" >https://datatracker.ietf.org/doc/draft-ietf-httpbis-early-hints/</guid>
<description>&lt;h2&gt;An HTTP Status Code for Indicating Hints&lt;br/&gt;&lt;small&gt;draft-ietf-httpbis-early-hints-05&lt;/small&gt;&lt;/h2&gt;


&lt;pre&gt;
HTTP Working Group                                                K. Oku
Internet-Draft                                                    Fastly
Intended status: Experimental                           October 28, 2017
Expires: May 1, 2018

                An HTTP Status Code for Indicating Hints
                   draft-ietf-httpbis-early-hints-05

&lt;span class=&quot;m_h&quot;&gt;Abstract&lt;/span&gt;

   This memo introduces an informational HTTP status code that can be
   used to convey hints that help a client make preparations for
   processing the final response.

Note to Readers

   Discussion of this draft takes place on the HTTP working group
   mailing list (ietf-http-wg@w3.org), which is archived at
   https://lists.w3.org/Archives/Public/ietf-http-wg/ .

   Working Group information can be found at https://httpwg.github.io/ ;
   source code and issues list for this draft can be found at
   https://github.com/httpwg/http-extensions/labels/early-hints .

&lt;span class=&quot;m_h&quot;&gt;Status of This Memo&lt;/span&gt;

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as &quot;work in progress.&quot;

   This Internet-Draft will expire on May 1, 2018.

&lt;span class=&quot;m_h&quot;&gt;Copyright Notice&lt;/span&gt;

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

&lt;span class=&quot;m_ftr&quot;&gt;Oku                        Expires May 1, 2018                  [Page 1]&lt;/span&gt;
&lt;span class=&quot;m_hdr&quot;&gt;Internet-Draft                 Early Hints                  October 2017&lt;/span&gt;

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

&lt;span class=&quot;m_h&quot;&gt;Table of Contents&lt;/span&gt;

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   3
   2.  103 Early Hints . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Security Considerations . . . . . . . . . . . . . . . . . . .   5
   4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   6
   5.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   6
     5.1.  Normative References  . . . . . . . . . . . . . . . . . .   6
     5.2.  Informative References  . . . . . . . . . . . . . . . . .   6
   Appendix A.  Changes  . . . . . . . . . . . . . . . . . . . . . .   6
     A.1.  Since draft-ietf-httpbis-early-hints-04 . . . . . . . . .   6
     A.2.  Since draft-ietf-httpbis-early-hints-03 . . . . . . . . .   7
     A.3.  Since draft-ietf-httpbis-early-hints-02 . . . . . . . . .   7
     A.4.  Since draft-ietf-httpbis-early-hints-01 . . . . . . . . .   7
     A.5.  Since draft-ietf-httpbis-early-hints-00 . . . . . . . . .   7
   Appendix B.  Acknowledgements . . . . . . . . . . . . . . . . . .   7
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   7

&lt;span class=&quot;m_h&quot;&gt;1.  Introduction&lt;/span&gt;

   It is common for HTTP responses to contain links to external
   resources that need to be fetched prior to their use; for example,
   rendering HTML by a Web browser.  Having such links available to the
   client as early as possible helps to minimize perceived latency.

   The &quot;preload&quot; ([Preload]) link relation can be used to convey such
   links in the Link header field of an HTTP response.  However, it is
   not always possible for an origin server to generate the header block
   of a final response immediately after receiving a request.  For
   example, the origin server might delegate a request to an upstream
   HTTP server running at a distant location, or the status code might
   depend on the result of a database query.

   The dilemma here is that even though it is preferable for an origin
   server to send some header fields as soon as it receives a request,
   it cannot do so until the status code and the full header fields of
   the final HTTP response are determined.

&lt;span class=&quot;m_ftr&quot;&gt;Oku                        Expires May 1, 2018                  [Page 2]&lt;/span&gt;
&lt;/pre&gt;
&lt;a class=&quot;btn btn-default btn-block&quot; href=&quot;https://datatracker.ietf.org/doc/draft-ietf-httpbis-early-hints/?include_text=1&quot;&gt; Show full document text&lt;/a&gt;</description>
<pubDate>Mon, 30 Oct 2017 23:52:56 +0000</pubDate>
<dc:creator>snomad</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://datatracker.ietf.org/doc/draft-ietf-httpbis-early-hints/</dc:identifier>
</item>
<item>
<title>Butterfly iQ – A cheap handheld ultrasound tool with AI smarts inside</title>
<link>https://spectrum.ieee.org/the-human-os/biomedical/imaging/new-ultrasound-on-a-chip-tool-could-revolutionize-medical-imaging</link>
<guid isPermaLink="true" >https://spectrum.ieee.org/the-human-os/biomedical/imaging/new-ultrasound-on-a-chip-tool-could-revolutionize-medical-imaging</guid>
<description>&lt;p&gt;Jonathan Rothberg, a entrepreneur who prides himself on drastically disrupting the biomedical industry every so often, has typically big claims for his new product. The &lt;a href=&quot;https://www.butterflynetwork.com/&quot;&gt;Butterfly iQ&lt;/a&gt;, a cheap handheld ultrasound tool with AI smarts tucked inside, will 1) revolutionize medical imaging in hospitals and clinics, 2) change the game in global health, and 3) eventually become a consumer product that will be as ubiquitous as the household thermometer, he says. &lt;/p&gt;
&lt;p&gt;Today, Rothberg’s startup &lt;a href=&quot;https://www.butterflynetwork.com/about.html&quot;&gt;Butterfly Network&lt;/a&gt; unveiled the tool and announced its FDA clearance for 13 clinical applications, including cardiac scans, fetal and obstetric exams, and musculoskeletal checks. Rather than using a dedicated piece of hardware for the controls and image display, the iQ works with the user’s iPhone. The company says it will start shipping units in 2018 at an initial price of about $2,000.&lt;/p&gt;
&lt;div class=&quot;imgWrapper rt med&quot;&gt;&lt;img alt=&quot;Photo shows a medical professional holding a smartphone in one hand and an ultrasound wand in the other hand&quot; src=&quot;https://spectrum.ieee.org/image/Mjk3NDU1Mg.jpeg&quot;/&gt; Photo: Butterfly Network&lt;/div&gt;
&lt;p&gt;But that’s just the beginning, Rothberg tells &lt;em&gt;IEEE Spectrum&lt;/em&gt;. He expects to bring the price down on the handheld gadget, and is already looking ahead to radically new products. “In the next two years we’ll release a patch that uses ultrasound to monitor patients, and a pill you can swallow to look at cancer from within the body,” he says.&lt;/p&gt;
&lt;p&gt;All these form factors are possible because Butterfly uses a very different technology than conventional ultrasound. Its “ultrasound on a chip” takes advantage of the mass-market fabrication techniques perfected for computer chips, Rothberg says. “We put all the elements onto a semiconductor wafer, then we can dice up the wafer to make 48 ultra low-cost ultrasound machines,” he says.&lt;/p&gt;
&lt;p&gt;Today’s ultrasound systems use &lt;a href=&quot;https://en.wikipedia.org/wiki/Piezoelectricity&quot;&gt;piezoelectric&lt;/a&gt; crystals, which convert electrical energy into vibrations in the form of ultrasonic waves. A typical system has a display screen on a bulky cart with several wands for imaging at different depths within the body. These machines can cost upwards of $100,000. While a few smaller and more cheaper devices exist, such as GE’s handheld &lt;a href=&quot;http://www3.gehealthcare.com/en/products/categories/ultrasound/vscan_family&quot;&gt;Vscan products&lt;/a&gt;, they still use pricey piezoelectric technology and require multiple probes, bringing the price to something between $8,000 and $20,000.&lt;/p&gt;
&lt;p&gt;Developing the iQ’s chip-based technology was a two-step process. First, Butterfly’s engineers replaced the piezoelectrics with a micromachine that acts like a tiny drum to generate vibrations. Inside this “c&lt;span&gt;apacitive micromachined ultrasound transducer” (&lt;a href=&quot;https://kyg.stanford.edu/research&quot;&gt;CMUT&lt;/a&gt;), an applied voltage moves a membrane to send ultrasonic waves into the body. The waves that bounce back from various body tissues move the membrane and are registered as an electric signal, which creates the image. Butterfly based its technology on &lt;a href=&quot;https://spectrum.ieee.org/biomedical/imaging/nextgen-ultrasound&quot;&gt;research done&lt;/a&gt; by Stanford professor &lt;a href=&quot;https://kyg.stanford.edu/professor-khuri-yakub-biography&quot;&gt;Pierre Khuri-Yakub&lt;/a&gt;, who serves on Butterfly’s scientific advisory board.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;imgWrapper rt med&quot;&gt;&lt;img alt=&quot;Photo shows a semiconductor chip held between finger and thumb.&quot; src=&quot;https://spectrum.ieee.org/image/Mjk3NDU2MA.jpeg&quot;/&gt; Photo: Butterfly Network&lt;/div&gt;
&lt;p&gt;Rothberg explains that typical ultrasound systems require separate probes for different clinical applications because the crystals have to be tuned at the time of manufacture to produce the right type of ultrasonic wave for imaging at a particular depth. But the Butterfly iQ can be tuned on the fly. “We have 10,000 of these micromachine transducers on a probe, and that gives us a monster dynamic range,” he says. &quot;We can make them buzz at 1 megahertz if we want to go deep, or 5 megahertz if we want to go shallow.”&lt;/p&gt;
&lt;p&gt;The second innovation was to do away with the wiring that connects a typical piezoelectric probe to the electronic controls and displays. Butterfly’s micromachines are attached directly to a semiconductor layer that contains all the necessary amplifiers, signal processors, and so on.&lt;/p&gt;
&lt;p&gt;Independent experts say the technology sounds promising, but they’ll wait to see if the Butterfly iQ can live up to Rothberg’s claims. “People in medicine tend to be conservative, and I’m skeptical when someone claims to have found a wonderdrug or cure,” says &lt;a href=&quot;http://emergency.med.ufl.edu/about-us/fellow/torben-becker-md-phd/&quot;&gt;Torben Becker&lt;/a&gt;&lt;span&gt;, an emergency room physician at the University of Florida hospital who has researched the use of portable ultrasound tools by &lt;a href=&quot;http://www.tandfonline.com/doi/abs/10.1080/10903127.2017.1358783&quot;&gt;paramedics&lt;/a&gt; and in the &lt;a href=&quot;http://onlinelibrary.wiley.com/doi/10.1111/tmi.12657/full&quot;&gt;developing world&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Becker says portable ultrasound tools are currently a niche technology—some ER doctors are experimenting with them, he says, but they haven’t caught on. “There’s definitely an argument to be made for having something that you can pull out of your pocket and use in an exam,” he says. But the portable tools he has tried thus far had inferior image quality to the big systems, Becker says. He also ran into difficulties with transmitting the images to the hospital’s database for storage. “And saving those images is required to bill for the scan,” he notes.&lt;/p&gt;
&lt;p&gt;Beyond price and portability, the Butterfly iQ’s other big selling point is its incorporation of artificial intelligence for both image acquisition and analysis. The Butterfly engineers trained the software on vast datasets of ultrasound images, teaching it the difference between a high- and poor-quality image for body parts like the heart. When the user brings the probe to a patient’s chest for a cardiac exam, the iPhone display helps them find the right spot. It also does some simple analysis of the resulting ultrasound image, such as measuring the “ejection fraction” that indicates how well a heart is pumping out blood.  &lt;/p&gt;
&lt;p&gt;At Butterfly Network’s New York City office, two members of the machine learning team kindly gave &lt;em&gt;IEEE Spectrum&lt;/em&gt; a demonstration of the technology at work:&lt;/p&gt;
&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; height=&quot;349&quot; src=&quot;https://www.youtube.com/embed/vWftey4ag3o?rel=0&quot; width=&quot;620&quot;&gt;[embedded content]&lt;/iframe&gt;
&lt;p&gt;The AI component is what makes the iQ a potential game-changer for both health care in the developing world and for well-off consumers. In the global health context, Butterfly Network envisions the tool being used at rural health clinics where the staff doesn’t have expertise with ultrasound; with the iQ’s guidance system, they could nevertheless acquire a proper image and either send it to an expert or use the system’s guidance to figure out the next step. &lt;/p&gt;
&lt;p&gt;In the United States and other prosperous parts of the world, the tool could empower consumers, relieve anxiety, and reduce health care costs by eliminating many doctor visits, says John Martin, Butterfly Network’s chief medical officer. “I absolutely think the ultrasound device will be in everybody’s house,” Martin says. For example, if a child falls and complains of a pain in the arm, the parents could do a quick ultrasound to check the bone, maybe sending that image to their pediatrician rather than making tracks to the ER.   &lt;/p&gt;
&lt;p&gt;The FDA hasn’t yet approved the tool for at-home use, but Martin says the path to that approval is well established. &lt;span&gt;“W&lt;/span&gt;hen the first thermometers were made, when the first blood pressure cuffs were made, they were only in hospitals,” he says. “Think about defibrillators, which used to only be in hospitals but are now in every mall and office—someone off the street can now deliver an electric shock to someone’s heart.” If Butterfly Network has its way, a stranger off the street could one day easily take a gander at your innards. &lt;/p&gt;
</description>
<pubDate>Mon, 30 Oct 2017 20:43:40 +0000</pubDate>
<dc:creator>taion</dc:creator>
<og:title>New &quot;Ultrasound on a Chip&quot; Tool Could Revolutionize Medical Imaging</og:title>
<og:url>https://spectrum.ieee.org/the-human-os/biomedical/imaging/new-ultrasound-on-a-chip-tool-could-revolutionize-medical-imaging</og:url>
<og:description>Entrepreneur and disruptor Jonathan Rothberg launches an ultrasound tool from his latest company, Butterfly Networks</og:description>
<og:image>https://spectrum.ieee.org/image/Mjk3MzIxOQ.jpeg</og:image>
<og:type>blog-the-human-os</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://spectrum.ieee.org/the-human-os/biomedical/imaging/new-ultrasound-on-a-chip-tool-could-revolutionize-medical-imaging</dc:identifier>
</item>
<item>
<title>Simplicity: A New Language for Blockchains [pdf]</title>
<link>https://blockstream.com/simplicity.pdf</link>
<guid isPermaLink="true" >https://blockstream.com/simplicity.pdf</guid>
<description>&lt;a href=&quot;https://blockstream.com/simplicity.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Mon, 30 Oct 2017 20:00:44 +0000</pubDate>
<dc:creator>TD-Linux</dc:creator>
<og:title>New &quot;Ultrasound on a Chip&quot; Tool Could Revolutionize Medical Imaging</og:title>
<og:url>https://spectrum.ieee.org/the-human-os/biomedical/imaging/new-ultrasound-on-a-chip-tool-could-revolutionize-medical-imaging</og:url>
<og:description>Entrepreneur and disruptor Jonathan Rothberg launches an ultrasound tool from his latest company, Butterfly Networks</og:description>
<og:image>https://spectrum.ieee.org/image/Mjk3MzIxOQ.jpeg</og:image>
<og:type>blog-the-human-os</og:type>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://blockstream.com/simplicity.pdf</dc:identifier>
</item>
<item>
<title>Ask HN: We have a great team and capital but can&amp;#039;t find a good idea</title>
<link>https://news.ycombinator.com/item?id=15588361</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=15588361</guid>
<description>I have spent the past year looking for good ideas for a startup and have little to show for it.
&lt;p&gt;--------------------&lt;/p&gt;&lt;p&gt;-Things that we have:-&lt;/p&gt;
&lt;p&gt;1) A great early team, made up of myself (just a normal bizdev guy) + 1 talented former private equity partner (who made a fortune on Wall Street) + 1 talented CMU CompSci PhD. The three of us have been friends for years and work together really well.&lt;/p&gt;
&lt;p&gt;2) Investors that are willing to write blank checks (within reason) because of the trust in the team (mainly former colleagues of the PE guy).&lt;/p&gt;
&lt;p&gt;3) Cash in the bank to continue experimenting&lt;/p&gt;
&lt;p&gt;4) An interest in SaaS and ML (and some experience in the latter)&lt;/p&gt;
&lt;p&gt;-Things that we don't have:-&lt;/p&gt;
&lt;p&gt;1) Ideas of what to do&lt;/p&gt;
&lt;p&gt;--------------------&lt;/p&gt;
&lt;p&gt;We have read EVERYTHING on how to come up with startups ideas (ranging from Paul Graham essays to The Mom Test). We have ran interviews with friends in corporate and startups, asked old colleagues, attented conferences, organised meetups in our city, a ton of time spent networking, etc.&lt;/p&gt;
&lt;p&gt;The few product ideas we came up with following the above process we dropped, often because we discovered that that space is ultra crowded or commooditized.&lt;/p&gt;
&lt;p&gt;We will not give up but are getting unsure on how to break the stalemate.&lt;/p&gt;
&lt;p&gt;Any tips or advice?&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
</description>
<pubDate>Mon, 30 Oct 2017 19:57:31 +0000</pubDate>
<dc:creator>0bsidian</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=15588361</dc:identifier>
</item>
<item>
<title>Scaling the GitLab database</title>
<link>https://about.gitlab.com/2017/10/02/scaling-the-gitlab-database/</link>
<guid isPermaLink="true" >https://about.gitlab.com/2017/10/02/scaling-the-gitlab-database/</guid>
<description>&lt;p&gt;For a long time GitLab.com used a single PostgreSQL database server and a single replica for disaster recovery purposes. This worked reasonably well for the first few years of GitLab.com's existence, but over time we began seeing more and more problems with this setup. In this article we'll take a look at what we did to help solve these problems for both GitLab.com and self-hosted GitLab instances.&lt;/p&gt;
&lt;p&gt;For example, the database was under constant pressure, with CPU utilization hovering around 70 percent almost all the time. Not because we used all available resources in the best way possible, but because we were bombarding the server with too many (badly optimized) queries. We realized we needed a better setup that would allow us to balance the load and make GitLab.com more resilient to any problems that may occur on the primary database server.&lt;/p&gt;
&lt;p&gt;When tackling these problems using PostgreSQL there are essentially four techniques you can apply:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Optimize your application code so the queries are more efficient (and ideally use fewer resources).&lt;/li&gt;
&lt;li&gt;Use a connection pooler to reduce the number of database connections (and associated resources) necessary.&lt;/li&gt;
&lt;li&gt;Balance the load across multiple database servers.&lt;/li&gt;
&lt;li&gt;Shard your database.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Optimizing the application code is something we have been working on actively for the past two years, but it's not a final solution. Even if you improve performance, when traffic also increases you may still need to apply the other two techniques. For the sake of this article we'll skip over this particular subject and instead focus on the other techniques.&lt;/p&gt;
&lt;h2 id=&quot;connection-pooling&quot;&gt;Connection pooling&lt;/h2&gt;
&lt;p&gt;In PostgreSQL a connection is handled by starting an OS process which in turn needs a number of resources. The more connections (and thus processes), the more resources your database will use. PostgreSQL also enforces a maximum number of connections as defined in the &lt;a href=&quot;https://www.postgresql.org/docs/9.6/static/runtime-config-connection.html#GUC-MAX-CONNECTIONS&quot;&gt;max_connections&lt;/a&gt; setting. Once you hit this limit PostgreSQL will reject new connections. Such a setup can be illustrated using the following diagram:&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;https://about.gitlab.com/images/scaling-the-gitlab-database/postgresql.svg&quot; alt=&quot;PostgreSQL Diagram&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here our clients connect directly to PostgreSQL, thus requiring one connection per client.&lt;/p&gt;
&lt;p&gt;By pooling connections we can have multiple client-side connections reuse PostgreSQL connections. For example, without pooling we'd need 100 PostgreSQL connections to handle 100 client connections; with connection pooling we may only need 10 or so PostgreSQL connections depending on our configuration. This means our connection diagram will instead look something like the following:&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;https://about.gitlab.com/images/scaling-the-gitlab-database/pooler.svg&quot; alt=&quot;Connection Pooling Diagram&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here we show an example where four clients connect to pgbouncer but instead of using four PostgreSQL connections we only need two of them.&lt;/p&gt;
&lt;p&gt;For PostgreSQL there are two connection poolers that are most commonly used:&lt;/p&gt;
&lt;p&gt;pgpool is a bit special because it does much more than just connection pooling: it has a built-in query caching mechanism, can balance load across multiple databases, manage replication, and more.&lt;/p&gt;
&lt;p&gt;On the other hand pgbouncer is much simpler: all it does is connection pooling.&lt;/p&gt;
&lt;h2 id=&quot;database-load-balancing&quot;&gt;Database load balancing&lt;/h2&gt;
&lt;p&gt;Load balancing on the database level is typically done by making use of PostgreSQL's &quot;&lt;a href=&quot;https://www.postgresql.org/docs/9.6/static/hot-standby.html&quot;&gt;hot standby&lt;/a&gt;&quot; feature. A hot-standby is a PostgreSQL replica that allows you to run read-only SQL queries, contrary to a regular standby that does not allow any SQL queries to be executed. To balance load you'd set up one or more hot-standby servers and somehow balance read-only queries across these hosts while sending all other operations to the primary. Scaling such a setup is fairly easy: simply add more hot-standby servers (if necessary) as your read-only traffic increases.&lt;/p&gt;
&lt;p&gt;Another benefit of this approach is having a more resilient database cluster. Web requests that only use a secondary can continue to operate even if the primary server is experiencing issues; though of course you may still run into errors should those requests end up using the primary.&lt;/p&gt;
&lt;p&gt;This approach however can be quite difficult to implement. For example, explicit transactions must be executed on the primary since they may contain writes. Furthermore, after a write we want to continue using the primary for a little while because the changes may not yet be available on the hot-standby servers when using asynchronous replication.&lt;/p&gt;
&lt;h2 id=&quot;sharding&quot;&gt;Sharding&lt;/h2&gt;
&lt;p&gt;Sharding is the act of horizontally partitioning your data. This means that data resides on specific servers and is retrieved using a shard key. For example, you may partition data per project and use the project ID as the shard key. Sharding a database is interesting when you have a very high write load (as there's no other easy way of balancing writes other than perhaps a multi-master setup), or when you have &lt;em&gt;a lot&lt;/em&gt; of data and you can no longer store it in a conventional manner (e.g. you simply can't fit it all on a single disk).&lt;/p&gt;
&lt;p&gt;Unfortunately the process of setting up a sharded database is a massive undertaking, even when using software such as &lt;a href=&quot;https://www.citusdata.com/&quot;&gt;Citus&lt;/a&gt;. Not only do you need to set up the infrastructure (which varies in complexity depending on whether you run it yourself or use a hosted solution), but you also need to adjust large portions of your application to support sharding.&lt;/p&gt;
&lt;h3 id=&quot;cases-against-sharding&quot;&gt;Cases against sharding&lt;/h3&gt;
&lt;p&gt;On GitLab.com the write load is typically very low, with most of the database queries being read-only queries. In very exceptional cases we may spike to 1500 tuple writes per second, but most of the time we barely make it past 200 tuple writes per second. On the other hand we can easily read up to 10 million tuples per second on any given secondary.&lt;/p&gt;
&lt;p&gt;Storage-wise, we also don't use that much data: only about 800 GB. A large portion of this data is data that is being migrated in the background. Once those migrations are done we expect our database to shrink in size quite a bit.&lt;/p&gt;
&lt;p&gt;Then there's the amount of work required to adjust the application so all queries use the right shard keys. While quite a few of our queries usually include a project ID which we could use as a shard key, there are also many queries where this isn't the case. Sharding would also affect the process of contributing changes to GitLab as every contributor would now have to make sure a shard key is present in their queries.&lt;/p&gt;
&lt;p&gt;Finally, there is the infrastructure that's necessary to make all of this work. Servers have to be set up, monitoring has to be added, engineers have to be trained so they are familiar with this new setup, the list goes on. While hosted solutions may remove the need for managing your own servers it doesn't solve all problems. Engineers still have to be trained and (most likely very expensive) bills have to be paid. At GitLab we also highly prefer to ship the tools we need so the community can make use of them. This means that if we were going to shard the database we'd have to ship it (or at least parts of it) in our Omnibus packages. The only way you can make sure something you ship works is by running it yourself, meaning we wouldn't be able to use a hosted solution.&lt;/p&gt;
&lt;p&gt;Ultimately we decided against sharding the database because we felt it was an expensive, time-consuming, and complex solution to a problem we do not have.&lt;/p&gt;
&lt;h2 id=&quot;connection-pooling-for-gitlab&quot;&gt;Connection pooling for GitLab&lt;/h2&gt;
&lt;p&gt;For connection pooling we had two main requirements:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;It has to work well (obviously).&lt;/li&gt;
&lt;li&gt;It has to be easy to ship in our Omnibus packages so our users can also take advantage of the connection pooler.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Reviewing the two solutions (pgpool and pgbouncer) was done in two steps:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Perform various technical tests (does it work, how easy is it to configure, etc).&lt;/li&gt;
&lt;li&gt;Find out what the experiences are of other users of the solution, what problems they ran into and how they dealt with them, etc.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;pgpool was the first solution we looked into, mostly because it seemed quite attractive based on all the features it offered. Some of the data from our tests can be found in &lt;a href=&quot;https://gitlab.com/gitlab-com/infrastructure/issues/259#note_23464570&quot;&gt;this&lt;/a&gt; comment.&lt;/p&gt;
&lt;p&gt;Ultimately we decided against using pgpool based on a number of factors. For example, pgpool does not support sticky connections. This is problematic when performing a write and (trying to) display the results right away. Imagine creating an issue and being redirected to the page, only to run into an HTTP 404 error because the server used for any read-only queries did not yet have the data. One way to work around this would be to use synchronous replication, but this brings many other problems to the table; problems we prefer to avoid.&lt;/p&gt;
&lt;p&gt;Another problem is that pgpool's load balancing logic is decoupled from your application and operates by parsing SQL queries and sending them to the right server. Because this happens outside of your application you have very little control over which query runs where. This may actually be beneficial to some because you don't need additional application logic, but it also prevents you from adjusting the routing logic if necessary.&lt;/p&gt;
&lt;p&gt;Configuring pgpool also proved quite difficult due to the sheer number of configuration options. Perhaps the final nail in the coffin was the feedback we got on pgpool from those having used it in the past. The feedback we received regarding pgpool was usually negative, though not very detailed in most cases. While most of the complaints appeared to be related to earlier versions of pgpool it still made us doubt if using it was the right choice.&lt;/p&gt;
&lt;p&gt;The feedback combined with the issues described above ultimately led to us deciding against using pgpool and using pgbouncer instead. We performed a similar set of tests with pgbouncer and were very satisfied with it. It's fairly easy to configure (and doesn't have that much that needs configuring in the first place), relatively easy to ship, focuses only on connection pooling (and does it really well), and had very little (if any) noticeable overhead. Perhaps my only complaint would be that the pgbouncer website can be a little bit hard to navigate.&lt;/p&gt;
&lt;p&gt;Using pgbouncer we were able to drop the number of active PostgreSQL connections from a few hundred to only 10-20 by using transaction pooling. We opted for using transaction pooling since Rails database connections are persistent. In such a setup, using session pooling would prevent us from being able to reduce the number of PostgreSQL connections, thus brining few (if any) benefits. By using transaction pooling we were able to drop PostgreSQL's &lt;code&gt;max_connections&lt;/code&gt; setting from 3000 (the reason for this particular value was never really clear) to 300. pgbouncer is configured in such a way that even at peak capacity we will only need 200 connections; giving us some room for additional connections such as &lt;code&gt;psql&lt;/code&gt; consoles and maintenance tasks.&lt;/p&gt;
&lt;p&gt;A side effect of using transaction pooling is that you cannot use prepared statements, as the &lt;code&gt;PREPARE&lt;/code&gt; and &lt;code&gt;EXECUTE&lt;/code&gt; commands may end up running in different connections; producing errors as a result. Fortunately we did not measure any increase in response timings when disabling prepared statements, but we &lt;em&gt;did&lt;/em&gt; measure a reduction of roughly 20 GB in memory usage on our database servers.&lt;/p&gt;
&lt;p&gt;To ensure both web requests and background jobs have connections available we set up two separate pools: one pool of 150 connections for background processing, and a pool of 50 connections for web requests. For web requests we rarely need more than 20 connections, but for background processing we can easily spike to a 100 connections simply due to the large number of background processes running on GitLab.com.&lt;/p&gt;
&lt;p&gt;Today we ship pgbouncer as part of GitLab EE's High Availability package. For more information you can refer to &lt;a href=&quot;https://docs.gitlab.com/ee/administration/high_availability/alpha_database.html&quot;&gt;&quot;Omnibus GitLab PostgreSQL High Availability.&quot;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;database-load-balancing-for-gitlab&quot;&gt;Database load balancing for GitLab&lt;/h2&gt;
&lt;p&gt;With pgpool and its load balancing feature out of the picture we needed something else to spread load across multiple hot-standby servers.&lt;/p&gt;
&lt;p&gt;For (but not limited to) Rails applications there is a library called &lt;a href=&quot;https://github.com/taskrabbit/makara&quot;&gt;Makara&lt;/a&gt; which implements load balancing logic and includes a default implementation for ActiveRecord. Makara however has some problems that were a deal-breaker for us. For example, its support for sticky connections is very limited: when you perform a write the connection will stick to the primary using a cookie, with a fixed TTL. This means that if replication lag is greater than the TTL you may still end up running a query on a host that doesn't have the data you need.&lt;/p&gt;
&lt;p&gt;Makara also requires you to configure quite a lot, such as all the database hosts and their roles, with no service discovery mechanism (our current solution does not yet support this either, though it's planned for the near future). Makara also &lt;a href=&quot;https://github.com/taskrabbit/makara/issues/151&quot;&gt;does not appear to be thread-safe&lt;/a&gt;, which is problematic since Sidekiq (the background processing system we use) is multi-threaded. Finally, we wanted to have control over the load balancing logic as much as possible.&lt;/p&gt;
&lt;p&gt;Besides Makara there's also &lt;a href=&quot;https://github.com/thiagopradi/octopus&quot;&gt;Octopus&lt;/a&gt; which has some load balancing mechanisms built in. Octopus however is geared towards database sharding and not just balancing of read-only queries. As a result we did not consider using Octopus.&lt;/p&gt;
&lt;p&gt;Ultimately this led to us building our own solution directly into GitLab EE. The merge request adding the initial implementation can be found &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ee/merge_requests/1283&quot;&gt;here&lt;/a&gt;, though some changes, improvements, and fixes were applied later on.&lt;/p&gt;
&lt;p&gt;Our solution essentially works by replacing &lt;code&gt;ActiveRecord::Base.connection&lt;/code&gt; with a proxy object that handles routing of queries. This ensures we can load balance as many queries as possible, even queries that don't originate directly from our own code. This proxy object in turn determines what host a query is sent to based on the methods called, removing the need for parsing SQL queries.&lt;/p&gt;
&lt;h3 id=&quot;sticky-connections&quot;&gt;Sticky connections&lt;/h3&gt;
&lt;p&gt;Sticky connections are supported by storing a pointer to the current PostgreSQL WAL position the moment a write is performed. This pointer is then stored in Redis for a short duration at the end of a request. Each user is given their own key so that the actions of one user won't lead to all other users being affected. In the next request we get the pointer and compare this with all the secondaries. If all secondaries have a WAL pointer that exceeds our pointer we know they are in sync and we can safely use a secondary for our read-only queries. If one or more secondaries are not yet in sync we will continue using the primary until they are in sync. If no write is performed for 30 seconds and all the secondaries are still not in sync we'll revert to using the secondaries in order to prevent somebody from ending up running queries on the primary forever.&lt;/p&gt;
&lt;p&gt;Checking if a secondary has caught up is quite simple and is implemented in &lt;code&gt;Gitlab::Database::LoadBalancing::Host#caught_up?&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;caught_up?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT NOT pg_is_in_recovery() OR &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;pg_xlog_location_diff(pg_last_xlog_replay_location(), &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) &amp;gt;= 0 AS result&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'result'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'t'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;release_connection&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Most of the code here is standard Rails code to run raw queries and grab the results. The most interesting part is the query itself, which is as follows:&lt;/p&gt;
&lt;pre class=&quot;highlight sql&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg_is_in_recovery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg_xlog_location_diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg_last_xlog_replay_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;WAL-POINTER&lt;/code&gt; is the WAL pointer as returned by the PostgreSQL function &lt;code&gt;pg_current_xlog_insert_location()&lt;/code&gt;, which is executed on the primary. In the above code snippet the pointer is passed as an argument, which is then quoted/escaped and passed to the query.&lt;/p&gt;
&lt;p&gt;Using the function &lt;code&gt;pg_last_xlog_replay_location()&lt;/code&gt; we can get the WAL pointer of a secondary, which we can then compare to our primary pointer using &lt;code&gt;pg_xlog_location_diff()&lt;/code&gt;. If the result is greater than 0 we know the secondary is in sync.&lt;/p&gt;
&lt;p&gt;The check &lt;code&gt;NOT pg_is_in_recovery()&lt;/code&gt; is added to ensure the query won't fail when a secondary that we're checking was &lt;em&gt;just&lt;/em&gt; promoted to a primary and our GitLab process is not yet aware of this. In such a case we simply return &lt;code&gt;true&lt;/code&gt; since the primary is always in sync with itself.&lt;/p&gt;
&lt;h3 id=&quot;background-processing&quot;&gt;Background processing&lt;/h3&gt;
&lt;p&gt;Our background processing code &lt;em&gt;always&lt;/em&gt; uses the primary since most of the work performed in the background consists of writes. Furthermore we can't reliably use a hot-standby as we have no way of knowing whether a job should use the primary or not as many jobs are not directly tied into a user.&lt;/p&gt;
&lt;h3 id=&quot;connection-errors&quot;&gt;Connection errors&lt;/h3&gt;
&lt;p&gt;To deal with connection errors our load balancer will not use a secondary if it is deemed to be offline, plus connection errors on any host (including the primary) will result in the load balancer retrying the operation a few times. This ensures that we don't immediately display an error page in the event of a hiccup or a database failover. While we also deal with &lt;a href=&quot;https://www.postgresql.org/docs/current/static/hot-standby.html#HOT-STANDBY-CONFLICT&quot;&gt;hot standby conflicts&lt;/a&gt; on the load balancer level we ended up enabling &lt;code&gt;hot_standby_feedback&lt;/code&gt; on our secondaries as doing so solved all hot-standby conflicts without having any negative impact on table bloat.&lt;/p&gt;
&lt;p&gt;The procedure we use is quite simple: for a secondary we'll retry a few times with no delay in between. For a primary we'll retry the operation a few times using an exponential backoff.&lt;/p&gt;
&lt;p&gt;For more information you can refer to the source code in GitLab EE:&lt;/p&gt;
&lt;p&gt;Database load balancing was first introduced in GitLab 9.0 and &lt;em&gt;only&lt;/em&gt; supports PostgreSQL. More information can be found in the &lt;a href=&quot;https://about.gitlab.com/2017/03/22/gitlab-9-0-released/&quot;&gt;9.0 release post&lt;/a&gt; and the &lt;a href=&quot;https://docs.gitlab.com/ee/administration/database_load_balancing.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;crunchy-data&quot;&gt;Crunchy Data&lt;/h2&gt;
&lt;p&gt;In parallel to working on implementing connection pooling and load balancing we were working with &lt;a href=&quot;https://www.crunchydata.com/&quot;&gt;Crunchy Data&lt;/a&gt;. Until very recently I was the only &lt;a href=&quot;https://about.gitlab.com/handbook/infrastructure/database/&quot;&gt;database specialist&lt;/a&gt; which meant I had a lot of work on my plate. Furthermore my knowledge of PostgreSQL internals and its wide range of settings is limited (or at least was at the time), meaning there's only so much I could do. Because of this we hired Crunchy to help us out with identifying problems, investigating slow queries, proposing schema optimisations, optimising PostgreSQL settings, and much more.&lt;/p&gt;
&lt;p&gt;For the duration of this cooperation most work was performed in confidential issues so we could share private data such as log files. With the cooperation coming to an end we have removed sensitive information from some of these issues and opened them up to the public. The primary issue was &lt;a href=&quot;https://gitlab.com/gitlab-com/infrastructure/issues/1448&quot;&gt;gitlab-com/infrastructure#1448&lt;/a&gt;, which in turn led to many separate issues being created and resolved.&lt;/p&gt;
&lt;p&gt;The benefit of this cooperation was immense as it helped us identify and solve many problems, something that would have taken me months to identify and solve if I had to do this all by myself.&lt;/p&gt;
&lt;p&gt;Fortunately we recently managed to hire our &lt;a href=&quot;https://gitlab.com/_stark&quot;&gt;second database specialist&lt;/a&gt; and we hope to grow the team more in the coming months.&lt;/p&gt;
&lt;h2 id=&quot;combining-connection-pooling-and-database-load-balancing&quot;&gt;Combining connection pooling and database load balancing&lt;/h2&gt;
&lt;p&gt;Combining connection pooling and database load balancing allowed us to drastically reduce the number of resources necessary to run our database cluster as well as spread load across our hot-standby servers. For example, instead of our primary having a near constant CPU utilisation of 70 percent today it usually hovers between 10 percent and 20 percent, while our two hot-standby servers hover around 20 percent most of the time:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/scaling-the-gitlab-database/cpu-percentage.png&quot; alt=&quot;CPU Percentage&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;db3.cluster.gitlab.com&lt;/code&gt; is our primary while the other two hosts are our secondaries.&lt;/p&gt;
&lt;p&gt;Other load-related factors such as load averages, disk usage, and memory usage were also drastically improved. For example, instead of the primary having a load average of around 20 it barely goes above an average of 10:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/scaling-the-gitlab-database/load-averages.png&quot; alt=&quot;CPU Percentage&quot;/&gt;&lt;/p&gt;
&lt;p&gt;During the busiest hours our secondaries serve around 12 000 transactions per second (roughly 740 000 per minute), while the primary serves around 6 000 transactions per second (roughly 340 000 per minute):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/scaling-the-gitlab-database/transactions.png&quot; alt=&quot;Transactions Per Second&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately we don't have any data on the transaction rates prior to deploying pgbouncer and our database load balancer.&lt;/p&gt;
&lt;p&gt;An up-to-date overview of our PostgreSQL statistics can be found at our &lt;a href=&quot;http://monitor.gitlab.net/dashboard/db/postgres-stats?refresh=5m&amp;amp;orgId=1&quot;&gt;public Grafana dashboard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of the settings we have set for pgbouncer are as follows:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;default_pool_size&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;reserve_pool_size&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;reserve_pool_timeout&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;max_client_conn&lt;/td&gt;
&lt;td&gt;2048&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;pool_mode&lt;/td&gt;
&lt;td&gt;transaction&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;server_idle_timeout&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;With that all said there is still some work left to be done such as: implementing service discovery (&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ee/issues/2042&quot;&gt;#2042&lt;/a&gt;), improving how we check if a secondary is available (&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ee/issues/2866&quot;&gt;#2866&lt;/a&gt;), and ignoring secondaries that are too far behind the primary (&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ee/issues/2197&quot;&gt;#2197&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;It's worth mentioning that we currently do not have any plans of turning our load balancing solution into a standalone library that you can use outside of GitLab, instead our focus is on providing a solid load balancing solution for GitLab EE.&lt;/p&gt;
&lt;p&gt;If this has gotten you interested and you enjoy working with databases, improving application performance, and adding database-related features to GitLab (such as &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ee/issues/2042&quot;&gt;service discovery&lt;/a&gt;) you should definitely check out the &lt;a href=&quot;https://about.gitlab.com/jobs/specialist/database/&quot;&gt;job opening&lt;/a&gt; and the &lt;a href=&quot;https://about.gitlab.com/handbook/infrastructure/database/&quot;&gt;database specialist handbook entry&lt;/a&gt; for more information.&lt;/p&gt;

</description>
<pubDate>Mon, 30 Oct 2017 16:43:04 +0000</pubDate>
<dc:creator>fanf2</dc:creator>
<og:title>Scaling the GitLab database</og:title>
<og:type>article</og:type>
<og:url>https://about.gitlab.com/2017/10/02/scaling-the-gitlab-database/</og:url>
<og:image>https://about.gitlab.com/images/tweets/scaling-gitlab-database-tweet.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://about.gitlab.com/2017/10/02/scaling-the-gitlab-database/</dc:identifier>
</item>
</channel>
</rss>