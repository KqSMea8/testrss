<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>1.1.1.1: Fast, privacy-first consumer DNS service</title>
<link>https://blog.cloudflare.com/announcing-1111/</link>
<guid isPermaLink="true" >https://blog.cloudflare.com/announcing-1111/</guid>
<description>&lt;p&gt;Cloudflare's mission is to help build a better Internet. We're excited today to take another step toward that mission with the launch of &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; — the Internet's fastest, privacy-first consumer DNS service. This post will talk a little about what that is and a lot about why we decided to do it. (If you're interested in the technical details on how we built the service, check out Ólafur Guðmundsson's &lt;a href=&quot;https://blog.cloudflare.com/dns-resolver-1-1-1-1&quot;&gt;accompanying post&lt;/a&gt;.)&lt;/p&gt;
&lt;h3 id=&quot;quickprimerondns&quot;&gt;Quick Primer On DNS&lt;/h3&gt;
&lt;p&gt;DNS is the directory of the Internet. Whenever you click on a link, send an email, open a mobile app, often one of the first things that has to happen is your device needs to look up the address of a domain. There are two sides of the DNS network: Authoritative (the content side) and Resolver (the consumer side).&lt;/p&gt;
&lt;p&gt;Every domain needs to have an Authoritative DNS provider. Cloudflare, since our launch in September 2010, has run an &lt;a href=&quot;https://www.dnsperf.com/&quot;&gt;extremely fast&lt;/a&gt; and &lt;a href=&quot;https://www.datanyze.com/market-share/dns/Alexa%20top%201M/Alexa%20top%201M&quot;&gt;widely-used&lt;/a&gt; Authoritative DNS service. &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; doesn't (directly) change anything about Cloudflare's Authoritative DNS service.&lt;/p&gt;
&lt;p&gt;On the other side of the DNS system are resolvers. Every device that connects to the Internet needs a DNS resolver. By default, these resolvers are automatically set by whatever network you're connecting to. So, for most Internet users, when they connect to an ISP, or a coffee shop wifi hot spot, or a mobile network then the network operator will dictate what DNS resolver to use.&lt;/p&gt;
&lt;h3 id=&quot;dnssprivacyproblem&quot;&gt;DNS's Privacy Problem&lt;/h3&gt;
&lt;p&gt;The problem is that these DNS services are often slow and not privacy respecting. What many Internet users don't realize is that even if you're visiting a website that is encrypted — has the little green lock in your browser — that doesn't keep your DNS resolver from knowing the identity of all the sites you visit. That means, by default, your ISP, every wifi network you've connected to, and your mobile network provider have a list of every site you've visited while using them.&lt;/p&gt;
&lt;p&gt;Network operators have been licking their chops for some time over the idea of taking their users' browsing data and finding a way to monetize it. In the United States, that got easier a year ago when the Senate &lt;a href=&quot;https://arstechnica.com/information-technology/2017/03/how-isps-can-sell-your-web-history-and-how-to-stop-them/&quot;&gt;voted to eliminate rules&lt;/a&gt; that restricted ISPs from selling their users' browsing data. With all the concern over the data that companies like Facebook and Google are collecting on you, it worries us to now add ISPs like Comcast, Time Warner, and AT&amp;amp;T to the list. And, make no mistake, this isn't a US-only problem — ISPs around the world see the same privacy-invading opportunity.&lt;/p&gt;
&lt;h3 id=&quot;dnsscensorshipproblem&quot;&gt;DNS's Censorship Problem&lt;/h3&gt;
&lt;p&gt;But privacy concerns extend far beyond just ad targeting. Cloudflare operates &lt;a href=&quot;https://www.cloudflare.com/galileo/&quot;&gt;Project Galileo&lt;/a&gt; to protect at no cost politically or artistically important organizations around the world from cyber attack. Through the project we protect groups like LGBTQ organizations targeted in the Middle East, journalists covering political corruption in Africa, human rights workers in Asia, and bloggers on the ground covering the conflict in Crimea. We're really proud of the project and we're really good at stopping cyber attacks launched at its participants.&lt;/p&gt;
&lt;p&gt;But it's been depressing to us to watch all too frequently how DNS can be used as a tool of censorship against many of the groups we protect. While we're good at stopping cyber attacks, if a consumer's DNS gets blocked there's been nothing we could do to help.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/04/Turkey_8.8.8.8.jpg&quot; alt=&quot;Turkey_8.8.8.8&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In March 2014, for instance, the government of Turkey &lt;a href=&quot;https://www.theverge.com/2014/3/21/5532522/turkey-twitter-ban-google-dns-workaround&quot;&gt;blocked Twitter&lt;/a&gt; after recordings showing a government corruption scandal leaked online. The Internet was censored by the country's ISP's DNS resolvers blocking DNS requests for twitter.com. People literally spray painted 8.8.8.8, the IP of Google's DNS resolver service, on walls to help fellow Turks get back online. Google's DNS resolver is great, but diversity is good and we thought we could do even better.&lt;/p&gt;
&lt;h3 id=&quot;buildingaconsumerdnsservice&quot;&gt;Building a Consumer DNS Service&lt;/h3&gt;
&lt;p&gt;The insecurity of the DNS infrastructure struck the team at Cloudflare as a bug at the core of the Internet, so we set out to do something about it. Given we run one of the largest, most interconnected global networks — and have a lot of experience with DNS — we were well positioned to launch a consumer DNS service. We began testing and found that a resolver, running across our global network, &lt;a href=&quot;https://www.dnsperf.com/#!dns-resolvers&quot;&gt;outperformed&lt;/a&gt; any of the other consumer DNS services available (including Google's 8.8.8.8). That was encouraging.&lt;/p&gt;
&lt;p&gt;We began talking with browser manufacturers about what they would want from a DNS resolver. One word kept coming up: privacy. Beyond just a commitment not to use browsing data to help target ads, they wanted to make sure we would wipe all transaction logs within a week. That was an easy request. In fact, we knew we could go much further. We committed to never writing the querying IP addresses to disk and wiping all logs within 24 hours.&lt;/p&gt;
&lt;p&gt;Cloudflare's business has never been built around tracking users or selling advertising. We don't see personal data as an asset; we see it as a toxic asset. While we need some logging to prevent abuse and debug issues, we couldn't imagine any situation where we'd need that information longer than 24 hours. And we wanted to put our money where our mouth was, so we committed to retaining KPMG, the well-respected auditing firm, to audit our code and practices annually and publish a public report confirming we're doing what we said we would.&lt;/p&gt;
&lt;h3 id=&quot;enter1111&quot;&gt;Enter &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/04/spraypainted-1.1.1.1.jpg&quot; alt=&quot;spraypainted-1.1.1.1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The one thing that was left was we needed a pair of memorable IPs. One of the core reasons for the DNS system is that IPs aren't very memorable. 172.217.10.46 isn't nearly as memorable as Google.com. But DNS resolvers inherently can't use a catchy domain because they are what have to be queried in order to figure out the IP address of a domain. It's a chicken and egg problem. And, if we wanted the service to be of help in times of crisis like the attempted Turkish coup, we needed something easy enough to remember and spraypaint on walls.&lt;/p&gt;
&lt;p&gt;We reached out to the team at APNIC. APNIC is a Regional Internet Registery (RIR) responsible for handing out IPs in the Asia Pacific region. It is one of five RIRs that manage IP allocation globally, the other four being: ARIN (North America), RIPE (Europe/Middle East), AFRINIC (Africa), and LATNIC (South America).&lt;/p&gt;
&lt;p&gt;APNIC's research group held the IP addresses &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; and &lt;a href=&quot;https://1.0.0.1/&quot;&gt;1.0.0.1&lt;/a&gt;. While the addresses were valid, so many people had entered them into various random systems that they were continuously overwhelmed by a flood of garbage traffic. APNIC wanted to study this garbage traffic but any time they'd tried to announce the IPs, the flood would overwhelm any conventional network.&lt;/p&gt;
&lt;p&gt;We talked to the APNIC team about how we wanted to create a privacy-first, extremely fast DNS system. They thought it was a laudable goal. We offered Cloudflare's network to receive and study the garbage traffic in exchange for being able to offer a DNS resolver on the memorable IPs. And, with that, &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; was born.&lt;/p&gt;
&lt;h3 id=&quot;seriouslyapril1&quot;&gt;Seriously, April 1?&lt;/h3&gt;
&lt;p&gt;The only question that remained was when to launch the new service? This is the first consumer product Cloudflare has ever launched, so we wanted to reach a wider audience. At the same time, we're geeks at heart. &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; has 4 1s. So it seemed clear that 4/1 (April 1st) was the date we needed to launch it.&lt;/p&gt;
&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/04/1.1.1.1-fancycolor-2.gif&quot; alt=&quot;1.1.1.1&quot;/&gt;&lt;p&gt;Never mind that it was a Sunday. Never mind that it was on Easter and during Passover. Never mind that it was April Fools Day — a day where tech companies often trot out fictional services they think are cute while the media and the rest of the non-tech world collectively roll their eyes.&lt;/p&gt;
&lt;p&gt;We justified it to ourselves that Gmail, another great, non-fictional consumer service, also launched on April 1, 2004. Of course, as Cloudflare's PR team has repeatedly pointed out to me in the run up to launch, the Gmail launch day was a Thursday and not on Easter. Nearly every media briefing I did this week ahead of the launch the reporter made me swear that this wasn't a joke. And it's not. I swear. And the best way to prove that is go to &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt;, follow the instructions to set it up, and see for yourself. It's real. And it's awesome.&lt;/p&gt;
&lt;h3 id=&quot;whydidwebuildit&quot;&gt;Why Did We Build It?&lt;/h3&gt;
&lt;p&gt;The answer to why we built the service goes back to our mission: to help build a better Internet. People come to work at Cloudflare every day in order to make the Internet better, more secure, more reliable, and more efficient. It sounds cheesy, but it's true.&lt;/p&gt;
&lt;p&gt;When, in 2014, we decided to enable encryption for free for all our customers a lot of people externally thought we were crazy. In addition to the technical and financial costs, SSL was, at the time, the primary difference between our free and paid service. And yet, it was a hard technical challenge, and clearly the right thing to do for the Internet, so we did it. And, in one day, &lt;a href=&quot;https://blog.cloudflare.com/introducing-universal-ssl/&quot;&gt;we doubled the size of the encrypted web&lt;/a&gt;. I'm proud of the fact that, three and a half years later, the rest of the industry is starting to follow suit. The web should have been encrypted from the beginning. It's a bug it wasn't. We're doing what we can do fix it.&lt;/p&gt;
&lt;p&gt;When, last year, we &lt;a href=&quot;https://blog.cloudflare.com/unmetered-mitigation/&quot;&gt;made DDoS mitigation free and unmetered across all our plans&lt;/a&gt; a lot of people again scratched their heads. But it was the right thing to do. You shouldn't have to have a big bank account to stand up to hackers and bullies online. Over time we're convinced that DDoS mitigation will be a commodity included with all platforms, so of course we should be leading the way to get to that inevitable that end.&lt;/p&gt;
&lt;p&gt;Part of the reason we've been able to hire such a great team is that we take on big challenges like this when they're the right thing to do. Walk around the office and our team's laptops are adorned with &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; stickers because we're all proud of what we're doing. That alone made building this a no brainer. (PS - Sound fun? &lt;a href=&quot;https://www.cloudflare.com/careers/&quot;&gt;We're hiring&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/04/1.1.1.1-laptop.jpg&quot; alt=&quot;1.1.1.1-laptop&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;towardabetterdnsinfrastructure&quot;&gt;Toward a Better DNS Infrastructure&lt;/h3&gt;
&lt;p&gt;But there's more. DNS itself is a 35-year-old protocol and it's showing its age. It was never designed with privacy or security in mind. In our conversations with browser, operating system, app, and router manufacturers nearly everyone lamented that, even with a privacy-first service like &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt;, DNS inherently is unencrypted so it leaks data to anyone who's monitoring your network connection. While that's harder to monitor for someone like your ISP than if they run the DNS resolver themselves, it's still not secure.&lt;/p&gt;
&lt;p&gt;What's needed is a move to a new, modern protocol. There are a couple of different approaches. One is DNS-over-TLS. That takes the existing DNS protocol and adds transport layer encryption. Another is DNS-over-HTTPS. It includes security but also all the modern enhancements like supporting other transport layers (e.g., QUIC) and new technologies like server HTTP/2 Server Push. Both DNS-over-TLS and DNS-over-HTTPS are open standards. And, at launch, we've ensured &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; &lt;a href=&quot;https://developers.cloudflare.com/1.1.1.1/&quot;&gt;supports both&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We think DNS-over-HTTPS is particularly promising — fast, easier to parse, and encrypted. To date, Google was the only scale provider supporting DNS-over-HTTPS. For obvious reasons, however, non-Chrome browsers and non-Android operating systems have been reluctant to build a service that sends data to a competitor. We're hoping that with an independent DNS-over-HTTPS service now available, we'll see more experiments from browsers, operating systems, routers, and apps to support the protocol.&lt;/p&gt;
&lt;p&gt;We have no need to be the only such service. More diversity in DNS providers is a Good Thing™. If, over time, a robust ecosystem of networks offering DNS-over-HTTPS support develops then that'll go down as one of the things we'll be proud of in furthering our mission to help build a better Internet.&lt;/p&gt;
&lt;h3 id=&quot;tyingitalltogether&quot;&gt;Tying It All Together&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2018/04/1.1.1.1-dns-resolver-performance.png&quot; alt=&quot;DNSPerf&quot;/&gt;&lt;/p&gt;
&lt;p&gt;While &lt;a href=&quot;https://www.dnsperf.com/#!dns-resolvers&quot;&gt;DNSPerf&lt;/a&gt; now ranks &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; as the fastest DNS resolver when querying non-Cloudflare customers (averaging around 14ms globally), there's an added benefit if you're a Cloudflare customer using our Authoritative DNS. Because the resolver and the recursor are now on the same network, running on the same hardware, we can answer queries for Cloudflare's customers incredibly quickly. We can also support immediate updates, without having to wait for TTLs to expire.&lt;/p&gt;
&lt;p&gt;In other words, every new user of &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; makes Cloudflare's Authoritative DNS service a bit better. And, vice versa, every new user of Cloudflare's Authoritative DNS service makes &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; a bit better. So, if you're an existing Cloudflare customer, encourage your users to try &lt;a href=&quot;https://1.1.1.1/&quot;&gt;1.1.1.1&lt;/a&gt; and you'll see performance benefits from all those who do.&lt;/p&gt;
&lt;p&gt;Visit &lt;a href=&quot;https://1.1.1.1/&quot;&gt;https://1.1.1.1/&lt;/a&gt; from any device to get started with the Internet's fastest, privacy-first DNS service.&lt;/p&gt;
</description>
<pubDate>Sun, 01 Apr 2018 12:14:25 +0000</pubDate>
<dc:creator>satysin</dc:creator>
<og:type>article</og:type>
<og:title>Announcing 1.1.1.1: the fastest, privacy-first consumer DNS service</og:title>
<og:description>Cloudflare's mission is to help build a better Internet. We're excited today to take another step toward that mission with the launch of 1.1.1.1 — the Internet's fastest, privacy-first consumer DNS service. This post will talk a little about what that is and a lot about why we decided to do it.</og:description>
<og:url>https://blog.cloudflare.com/announcing-1111/</og:url>
<og:image>https://blog.cloudflare.com/content/images/2018/04/1.1.1.1-fancycolor.gif</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.cloudflare.com/announcing-1111/</dc:identifier>
</item>
<item>
<title>Time to talk about why so many postgrads have poor mental health</title>
<link>https://www.nature.com/articles/d41586-018-04023-5</link>
<guid isPermaLink="true" >https://www.nature.com/articles/d41586-018-04023-5</guid>
<description>&lt;div class=&quot;content position-relative cleared clear mq1200-padded&quot; data-component=&quot;article-container&quot; role=&quot;main&quot;&gt;
&lt;header class=&quot;article-item__header clear cleared pull--both&quot;&gt;&lt;div class=&quot;article__type&quot;&gt;EDITORIAL
&lt;div class=&quot;ml10 article__date&quot;&gt;&lt;time itemprop=&quot;datePublished&quot;&gt;29 March 2018&lt;/time&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;article-item__teaser-text serif&quot;&gt;An outpouring on Twitter highlights the acute pressures on young scientists.&lt;/div&gt;
&lt;/header&gt;

&lt;div class=&quot;align-left&quot;&gt;
&lt;div class=&quot;article__body serif cleared&quot;&gt;
&lt;div class=&quot;embed intensity--high&quot;&gt;&lt;img class=&quot;figure__image&quot; alt=&quot;Graduate sits alone in rows of white chairs&quot; src=&quot;https://media.nature.com/w800/magazine-assets/d41586-018-04023-5/d41586-018-04023-5_15577648.jpg&quot;/&gt;&lt;p class=&quot;figure__caption sans-serif&quot;&gt;&lt;span class=&quot;mr10&quot;&gt;Don’t feel alone: share your stories of mental-health issues and help &lt;em&gt;Nature&lt;/em&gt; to tackle the problem.&lt;/span&gt;&lt;span&gt;Credit: Getty&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Poor mental health is an issue for many of our readers. That fact is underscored by the response to a &lt;a href=&quot;https://twitter.com/NatureNews/status/978212558938296321&quot; data-track=&quot;click&quot; data-label=&quot;https://twitter.com/NatureNews/status/978212558938296321&quot; data-track-category=&quot;body text link&quot;&gt;tweet sent by @NatureNews earlier this week&lt;/a&gt;, which highlighted that rates of depression and anxiety reported by postgraduate students are &lt;a href=&quot;https://www.nature.com/articles/nbt.4089&quot; data-track=&quot;click&quot; data-label=&quot;https://www.nature.com/articles/nbt.4089&quot; data-track-category=&quot;body text link&quot;&gt;six times higher than in the general population (T. M. Evans &lt;em&gt;et al. Nature Biotechnol.&lt;/em&gt; &lt;strong&gt;36,&lt;/strong&gt; 282–284; 2018)&lt;/a&gt;, and asked what should be done to help. The figures are a shock, but it was the reaction that blew us away: more than 1,200 retweets and around 170 replies.&lt;/p&gt;
&lt;p&gt;“This is not one dimensional problem. Financial burden, hostile academia, red tape, tough job market, no proper career guidance. Take your pick,” read one. “Maybe being told day in, day out that the work you spend 10+ hrs a day, 6–7 days a week on isn’t good enough,” said another.&lt;/p&gt;
&lt;p&gt;The feedback emphasizes something that &lt;em&gt;Nature&lt;/em&gt; has highlighted often in recent years: there is a problem among young scientists. Too many have mental-health difficulties, and too many say that the demands of the role are partly to blame. Neither issue gets the attention it deserves. “I’d love to see some of the comments under this thread published,” wrote one responder. “There needs to be real conversation about this, not just observation.”&lt;/p&gt;
&lt;p&gt;We agree — which is why we are publishing some of the responses. (You can read the full thread &lt;a href=&quot;http://go.nature.com/2gtjxq&quot; data-track=&quot;click&quot; data-label=&quot;http://go.nature.com/2gtjxq&quot; data-track-category=&quot;body text link&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Some commenters said that the way to improve things was through wholesale change. “The whole PhD+postdoc system must be reformed or abolished,” noted one.&lt;/p&gt;
&lt;p&gt;Others focused on specific concerns. “Decent funding which runs until their subimission [&lt;em&gt;sic&lt;/em&gt;] deadline, coupled with a culture shift to less focus on publications in certain journals defining success.”&lt;/p&gt;
&lt;p&gt;There is a problem with the culture in science, and it is one that loads an increasing burden on the shoulders of younger generations. The evidence suggests that they are feeling the effects. (Among the tweets, one proposed solution to improving the PhD is to “treat it like professional training instead of indentured servitude with no hope of a career at the end?”.) It will take a while to change that culture — and, unfortunately, it will probably take almost as long for some in the community to realize the need to change. But change it must.&lt;/p&gt;
&lt;p&gt;A good place to start is the relationship between postgraduates and their supervisors. Surveys — &lt;a href=&quot;https://www.nature.com/nature/journal/v550/n7677/full/nj7677-549a.html&quot; data-track=&quot;click&quot; data-label=&quot;https://www.nature.com/nature/journal/v550/n7677/full/nj7677-549a.html&quot; data-track-category=&quot;body text link&quot;&gt;including our own&lt;/a&gt; — suggest that too many senior scientists see a career outside academia after a PhD as a failure. Too often, this attitude drives expectations and conversations that do not reflect the reality: there are just not enough full-time academic posts to go around.&lt;/p&gt;
&lt;p&gt;We are committed to covering the unique pressures that face young scientists, and the need to reform the PhD. We intend to revisit this topic, starting in May, with a Careers Feature on depression. We want to hear more from readers on mental-health issues and the stresses that contribute. You can &lt;a href=&quot;http://go.nature.com/stress-stories&quot; data-track=&quot;click&quot; data-label=&quot;http://go.nature.com/stress-stories&quot; data-track-category=&quot;body text link&quot;&gt;share your stories in confidence here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We thank those who have already told theirs. “I hold down three jobs to fund my PhD, living in hopes of funding, it’s a constant strain. So many others out there like me, and sometimes I wonder if it’s even worth it. The research community will lose so many great minds to issues like this. It needs to be changed.”&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;Nature&lt;/span&gt; &lt;span&gt;&lt;strong&gt;556&lt;/strong&gt;, 5 (2018)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;nature-briefing nature-briefing--article cleared&quot; data-track-component=&quot;nature-briefing&quot;&gt;
&lt;header class=&quot;nature-briefing__header&quot;&gt;&lt;span class=&quot;visually-hidden&quot;&gt;Nature Briefing&lt;/span&gt;&lt;/header&gt;&lt;div class=&quot;pa10 pt20&quot;&gt;
&lt;p class=&quot;serif nature-briefing__slogan mr30&quot;&gt;&lt;strong&gt;Sign up for the daily &lt;span class=&quot;emphasis&quot;&gt;Nature Briefing&lt;/span&gt; email newsletter&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;sans-serif nature-briefing__standfirst mr30&quot;&gt;Stay up to date with what matters in science and why, handpicked from &lt;span class=&quot;emphasis&quot;&gt;Nature&lt;/span&gt; and other publications worldwide.&lt;/p&gt;
&lt;p class=&quot;cleared&quot;&gt;&lt;a class=&quot;nature-briefing__link&quot; data-track=&quot;click&quot; data-track-label=&quot;nature briefing article link&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; href=&quot;https://www.nature.com/briefing/signup/&quot;&gt;Sign Up&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;aside class=&quot;article__aside align-right&quot;&gt;&lt;div class=&quot;related-content shrink--aside&quot;&gt;
&lt;h3 class=&quot;aside__title sans-serif&quot;&gt;Related Articles&lt;/h3&gt;
&lt;/div&gt;

&lt;div id=&quot;div-gpt-ad-right-2&quot; class=&quot;div-gpt-ad advert medium-rectangle js-ad text-center hide-print grade-c-hide hide-overflow&quot; data-gpt-unitpath=&quot;/285/nature.com/article&quot; data-gpt-sizes=&quot;300x250&quot; data-gpt-targeting=&quot;pos=right;artid=/articles/d41586-018-04023-5&quot;&gt;&lt;noscript&gt;
&lt;p&gt;&lt;a href=&quot;https://pubads.g.doubleclick.net/gampad/jump?iu=/285/nature.com/article&amp;amp;sz=300x250&amp;amp;c=334148712&amp;amp;t=pos%3Dright%26artid%3D/articles/d41586-018-04023-5&quot;&gt;&lt;img data-test=&quot;gpt-advert-fallback-img&quot; src=&quot;https://pubads.g.doubleclick.net/gampad/ad?iu=/285/nature.com/article&amp;amp;sz=300x250&amp;amp;c=334148712&amp;amp;t=pos%3Dright%26artid%3D/articles/d41586-018-04023-5&quot; alt=&quot;Advertisement&quot; width=&quot;300&quot; height=&quot;250&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;/div&gt;
&lt;/aside&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 31 Mar 2018 21:53:29 +0000</pubDate>
<dc:creator>amelius</dc:creator>
<og:url>http://www.nature.com/articles/d41586-018-04023-5</og:url>
<og:type>article</og:type>
<og:title>Time to talk about why so many postgrads have poor mental health</og:title>
<og:description>An outpouring on Twitter highlights the acute pressures on young scientists.</og:description>
<og:image>https://media.nature.com/lw1024/magazine-assets/d41586-018-04023-5/d41586-018-04023-5_15577650.jpg</og:image>
<dc:language>EN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nature.com/articles/d41586-018-04023-5</dc:identifier>
</item>
<item>
<title>Facebook Secretly Saved Videos Users Deleted</title>
<link>https://nymag.com/selectall/2018/03/facebook-secretly-saved-videos-users-deleted.html</link>
<guid isPermaLink="true" >https://nymag.com/selectall/2018/03/facebook-secretly-saved-videos-users-deleted.html</guid>
<description>&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf50ts006ysby6qeqp5b4i@published&quot; data-word-count=&quot;61&quot;&gt;Have you downloaded your &lt;a href=&quot;http://nymag.com/selectall/2018/03/how-to-download-all-your-facebook-data.html&quot;&gt;Facebook data archive&lt;/a&gt; yet? Facebook makes it easy to obtain a ZIP file of all the data it has on you: your status updates, your friend list, your messages … and, as I and several people I spoke with were surprised to discover, every video you ever filmed on the platform — including videos you never published.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf6nfr00193d55eubkgkpm@published&quot; data-word-count=&quot;100&quot;&gt;Cambridge Analytica’s effect on the election is still disputed, but if there’s one thing everyone can agree is true in the wake of the scandal over its data-harvesting, it’s that we’ve paid far too little attention to the scale and scope of the data that Facebook has collected on us over our years of platform use. It’s true that, in most cases, we’ve “consented” to this kind of data-gathering by clicking “okay” on a dense terms-of-service contract, and neglecting to opt out. But given how often the details are ignored, it’s disconcerting to discover exactly what data has been gathered.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbienkt000w2c5pk92fmqym@published&quot; data-word-count=&quot;99&quot;&gt;Last week, Facebook users around the world discovered that Facebook’s Android app had, in some cases, Hoovered up extensive call data without their awareness. “When this feature is enabled, uploading your contacts also allows us to use information like when a call or text was made or received. This feature does not collect the content of your calls or text messages,” Facebook &lt;a href=&quot;https://newsroom.fb.com/news/2018/03/fact-check-your-call-and-sms-history/&quot;&gt;said&lt;/a&gt;, noting that users had to initially opt in to have their communication tracked. But it seems unlikely that many of the people who “opted in” were aware that they’d done so, or what exactly it meant.&lt;/p&gt;


&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf6nfy001c3d55jydudzmd@published&quot; data-word-count=&quot;59&quot;&gt;And call logs aren’t the only data Facebook’s been holding to user surprise. Earlier this week, like many people around the world, my sister Bailey downloaded her Facebook data archives. Along with the contact lists and relationship statuses was something unexpected: several different videos of her attempting to play a scale on a wooden flute in her childhood bedroom.&lt;/p&gt;

&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf6nfx001b3d552bt3ylyz@published&quot; data-word-count=&quot;96&quot;&gt;Each video, she discovered, was a different “take” — recorded on Facebook, but then, she assumed, discarded before she posted the final version to a friend’s wall. (In the archive, you can infer which video was posted on a wall versus the ones that weren’t based on the comments. Videos that were never published are commentless.) In one of the clips, you can hear Kircher say, exasperatedly, that it is her 13th take. At the end of the clip, which isn’t to her liking, she groans and reaches forward, apparently to delete the video and try again.&lt;/p&gt;
&lt;div data-uri=&quot;nymag.com/selectall/_components/youtube/instances/cjfbf72la001p3d5510zdfof2@published&quot; class=&quot;youtube&quot; data-element-id=&quot;youtube-player-qXJZYmSP&quot; data-video-id=&quot;mLFlUw7Qwjw&quot; data-autoplay-next-video=&quot;true&quot; data-autoplay-video=&quot;false&quot; data-playlist=&quot;PLtmzdzCeRsyHh67c-VlEj8Nqpj5nL8pf6&quot; data-track-video-type=&quot;Editorial&quot; data-track-video-location=&quot;article&quot; data-track-video-title=&quot;Bailey Playing The Flute&quot; data-track-video-duration=&quot;12&quot; data-track-channel-name=&quot;New York Magazine&quot; data-editable=&quot;inline&quot;&gt;

&lt;p class=&quot;youtube-caption&quot;&gt;Bailey Kircher never posted this video on Facebook, but still found a copy of it in her Facebook archive.&lt;/p&gt;
&lt;/div&gt;

&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf8b7c001w3d55kyh0o61v@published&quot; data-word-count=&quot;106&quot;&gt;How did this happen? In the pre–Facebook Live era, leaving videos on your friends’ walls was something of a crude FaceTime. You’d post a video, they’d respond with a video, and so forth. Importantly, Facebook had a feature that let users film videos via webcam on Facebook itself — that is, without ever leaving the Facebook site to use a video recorder. Once you were done filming, Facebook would show you a preview of your clip. If you decided to do another take, you could click to discard that video and try it again. Except, the video wasn’t actually deleted. Instead, Facebook apparently saved your unused clip.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf8xpy00213d550gn1vgn1@published&quot; data-word-count=&quot;106&quot;&gt;Another co-worker, Brittany Stephanis, found over 100 videos in her archive and says that she only ever publicly posted about a third of them. The earliest date back to Christmas Day in 2008 when Stephanis, then 13, started recording videos to wish her friends a happy holiday. Stephanis says that her archive contains videos she clearly never planned to shared with anyone. “There are videos of me just checking my teeth,” she explained. My sister also had videos — rehearsing for school musicals and cheerleading — where she was using Facebook’s desktop camera to review herself and then erase, or so she thought, the video forever.&lt;/p&gt;


&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbigtk3000z2c5phthenwag@published&quot; data-word-count=&quot;49&quot;&gt;I thought this was a funny quirk of my sister’s. And then I looked at my own data archive. There, at the bottom of the list of videos I’d put on the platform, I found clips that appear to have never been posted to Facebook but were saved anyway.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbg4azs000u3d55zibgneb0@published&quot; data-word-count=&quot;127&quot;&gt;From what I can tell, most people haven’t noticed this yet. (Or, possibly, they have and are unperturbed.) One reason might be that the videos are saved in the FLV format, short for Flash Video. Most default video players can’t read them, but you can watch them in VLC. You can’t preview a .flv file in a file browser, which could make it a little trickier to figure out what videos Facebook has of yours. To find yours, download your data archive — instructions &lt;a href=&quot;http://nymag.com/selectall/2018/03/how-to-download-all-your-facebook-data.html&quot;&gt;here&lt;/a&gt; — and open the file. Select the index, which will open your archive in your web browser. From there, click the video section to see what’s what. (You might need to download the free app VLC player, which can play Flash videos.)&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbf8xpz00223d55lggvjof5@published&quot; data-word-count=&quot;167&quot;&gt;Facebook saving data you didn’t share isn’t an entirely new concern. Back in 2013, then–Facebook intern and Ph.D. student at Carnegie Mellon Sauvik Das and Adam Kramer, a Facebook data scientist, put together &lt;a href=&quot;http://www.slate.com/articles/technology/future_tense/2013/12/facebook_self_censorship_what_happens_to_the_posts_you_don_t_publish.html&quot;&gt;a study&lt;/a&gt; on what they deemed “self-censorship” on the platform. Self-censorship, according to their work, was anything a user typed in the status box but ultimately didn’t post. Data that Facebook can track. Facebook’s current &lt;a href=&quot;https://www.facebook.com/about/privacy/&quot;&gt;data policy&lt;/a&gt; says that the company can “collect the content and other information you provide when you use our Services, including when you sign up for an account, create or share, and message or communicate with others.” “Create” is the operative word in there. By that logic, Facebook technically &lt;em&gt;could&lt;/em&gt; save any video a user filmed but did not publish because you &lt;em&gt;created&lt;/em&gt; it on the platform. Still, that requires the kind of close read of the fine print that most humans, at least not before &lt;a href=&quot;http://nymag.com/selectall/2018/03/why-should-i-even-care-about-the-facebook-stuff.html&quot;&gt;Facebook’s ongoing Cambridge Analytica privacy fiasco&lt;/a&gt;, likely aren’t taking the time to do.&lt;/p&gt;


&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbfbq9500293d555q0ic6xd@published&quot; data-word-count=&quot;122&quot;&gt;An industry expert recently told me about another “open secret” — that when Instagram first introduced video, the company would begin uploading a user’s video while they wrote a caption. That way, when the user pressed “post,” the video would already be good to go, and the user wouldn’t have to wait while the video uploaded in real time. Instagram co-founder Mike Krieger explained this in a presentation on the “&lt;a href=&quot;https://speakerdeck.com/mikeyk/secrets-to-lightning-fast-mobile-design&quot;&gt;Secrets to Lightning Fast Mobile Design&lt;/a&gt;” in 2011. It doesn’t seem unreasonable that a similar system might have been used at Facebook to create a faster, cleaner user experience. Except, unlike Instagram which says it threw out the data if a user cancelled the post, it appears Facebook was keeping the videos.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbfbsxq002d3d55mvhg9ux5@published&quot; data-word-count=&quot;109&quot;&gt;I reached out to Facebook for comment today, and the company asked me to connect them with Kircher so she could consent to the company investigating why these outtakes were in her data archives. The representative told me the company thinks they’ve “gotten to the bottom of it,” but that Facebook was still figuring out what it could share. Later, a Facebook representative provided a statement saying that the company is still looking into the matter: “We’ve heard that when accessing their information from our Download Your Information tool, some people are seeing their old videos that do not appear on their profile or Activity Log. We are investigating.”&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbfby01002h3d55lwfb51u2@published&quot; data-word-count=&quot;73&quot;&gt;The videos that Stephanis and Kircher found in their archives are pretty harmless, at least in terms of content. But it’s easy to imagine a user filming something that wasn’t quite so juvenile and being horrified to discover that Facebook has a copy. Apropos of, well, everything, now seems like a good time to mention that Mark Zuckerberg keeps a piece of tape over his webcam. Seems like he might be onto something.&lt;/p&gt;
&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbni9ct000u3d55pnrmbxxj@published&quot; data-word-count=&quot;16&quot;&gt;&lt;strong&gt;Update, March 28, 6:16 p.m.:&lt;/strong&gt; &lt;em&gt;This piece has been edited to include a statement from Facebook.&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;clay-paragraph&quot; data-editable=&quot;text&quot; data-uri=&quot;nymag.com/selectall/_components/clay-paragraph/instances/cjfbfby01002i3d55neqqtajb@published&quot; data-word-count=&quot;22&quot;&gt;If you’ve also found questionable things in your Facebook data archive, I’d love to hear about it. Please email me at &lt;a href=&quot;mailto:madison.kircher@nymag.com&quot;&gt;madison.kircher@nymag.com&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 20:16:10 +0000</pubDate>
<dc:creator>walterbell</dc:creator>
<og:title>Ever Record a Video on Facebook? Facebook Still Has It.</og:title>
<og:url>http://nymag.com/selectall/2018/03/facebook-secretly-saved-videos-users-deleted.html</og:url>
<og:description>Facebook quietly saved videos users filmed on the platform but never actually posted.</og:description>
<og:image>https://pixel.nymag.com/imgs/daily/selectall/2018/03/28/28-facebook-video-grid.w1200.h630.jpg</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nymag.com/selectall/2018/03/facebook-secretly-saved-videos-users-deleted.html</dc:identifier>
</item>
<item>
<title>Voyager 1 Fires Up Thrusters After 37 Years</title>
<link>https://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37</link>
<guid isPermaLink="true" >https://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37&quot;&gt;https://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=16724149&quot;&gt;https://news.ycombinator.com/item?id=16724149&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 252&lt;/p&gt;&lt;p&gt;# Comments: 54&lt;/p&gt;</description>
<pubDate>Sat, 31 Mar 2018 17:18:00 +0000</pubDate>
<dc:creator>colanderman</dc:creator>
<og:description>The Voyager team is able to use a set of four backup thrusters, dormant since 1980, for orienting the spacecraft.</og:description>
<og:title>Voyager 1 Fires Up Thrusters After 37 Years</og:title>
<og:image>http://www.nasa.gov/sites/default/files/thumbnails/image/pia21839-main.jpg</og:image>
<og:url>http://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nasa.gov/feature/jpl/voyager-1-fires-up-thrusters-after-37/</dc:identifier>
</item>
<item>
<title>You can&amp;#039;t Rust that</title>
<link>http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/</link>
<guid isPermaLink="true" >http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/</guid>
<description>&lt;p class=&quot;date&quot;&gt;written on Saturday, March 31, 2018&lt;/p&gt;
&lt;p&gt;The last year has been fun because I could build a lot for really nice stuff for &lt;a class=&quot;reference external&quot; href=&quot;https://sentry.io/&quot;&gt;Sentry&lt;/a&gt; in Rust and for the first time the development experience was without bigger roadblocks. While we have been using Rust before it now feels different because the ecosystem is so much more stable and we ran less against language or tooling issues.&lt;/p&gt;
&lt;p&gt;However talking to people new to Rust (and even brainstorming APIs with coworkers) it's hard to get rid of the feeling that Rust can be a mind bending adventure and that the best way to have a stress free experience is knowing upfront what you cannot (or should not attempt to) do. Knowing that certain things just cannot be done helps putting your mind back back on the right track.&lt;/p&gt;
&lt;p&gt;So here are things not to do in Rust and what to do instead which I think should be better known.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;things-move&quot; readability=&quot;64.930576254347&quot;&gt;
&lt;h2&gt;Things Move&lt;/h2&gt;
&lt;p&gt;The biggest difference between Rust and C++ for me is the address-of operator (&lt;cite&gt;&amp;amp;&lt;/cite&gt;). In C++ (like C) that thing just returns the address of whatever its applied to and while the language might put some restrictions on you when doing so is a good idea, there is generally nothing stopping you from taking an address of a value and then using it.&lt;/p&gt;
&lt;p&gt;In Rust this is just usually not useful. First of all the moment you take a reference in Rust the borrow checker looms over your code and prevents you from doing anything stupid. More importantly however is that even if it's safe to take a reference it's not nearly as useful as you might think. The reason for this is that objects in Rust generally move around.&lt;/p&gt;
&lt;p&gt;Just take how objects are typically constructed in Rust:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the &lt;cite&gt;new&lt;/cite&gt; method (not taking &lt;cite&gt;self&lt;/cite&gt;) is a static method on the implementation. It also returns &lt;cite&gt;Point&lt;/cite&gt; here by value. This is &lt;em&gt;generally&lt;/em&gt; how values are constructed. Because of this taking a reference in the function does not do anything useful as the value is potentially moved to a new location on calling. This is very different to how this whole thing works in C++:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A constructor in C++ is already operating on an allocated piece of memory. Before the constructor even runs something already provided the memory where &lt;cite&gt;this&lt;/cite&gt; points to (typically either somewhere on the stack or through the &lt;cite&gt;new&lt;/cite&gt; operator on the heap). This means that C++ code can generally assume that an instance does not move around. It's not uncommon that C++ code does really stupid things with the &lt;cite&gt;this&lt;/cite&gt; pointer as a result (like storing it in another object).&lt;/p&gt;
&lt;p&gt;This difference might sound very minor but it's one of the most fundamental ones that has huge consequences for Rust programmers. In particular it is one of the reasons you cannot have self referential structs. While there is talk about expressing types that cannot be moved in Rust there is no reasonable workaround for this at the moment (The future direction &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/rust-lang/rfcs/pull/2349&quot;&gt;is the pinning system from RFC 2349&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So what do we do currently instead? This depends a bit on the situation but generally the answer is to replace pointers with some form of Handle. So instead of just storing an absolute pointer in a struct one would instead store the offset to some reference value. Later if the pointer is needed it's calculated on demand.&lt;/p&gt;
&lt;p&gt;For instance we use a pattern like this to work with memory mapped data:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;28&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transmute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[repr(C)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhantomData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[repr(C)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Into&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transmute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_raw_parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case &lt;cite&gt;Data&amp;lt;'a&amp;gt;&lt;/cite&gt; only holds a copy-on-write reference to the backing byte storage (an owned &lt;cite&gt;Vec&amp;lt;u8&amp;gt;&lt;/cite&gt; or a borrowed &lt;cite&gt;&amp;amp;[u8]&lt;/cite&gt; slice). The byte slice starts with the bytes from &lt;cite&gt;Header&lt;/cite&gt; and they are resolved on demand when &lt;cite&gt;header()&lt;/cite&gt; is called. Likewise a single slice is resolved similarly by the call to &lt;cite&gt;load_slice()&lt;/cite&gt; which takes a stored slice and then looks it up by offsetting on demand.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To recap: instead of storing a pointer to an object itself, store some information so that you can calculate the pointer later. This is also commonly called using “handles”.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;refcounts-are-not-dirty&quot; readability=&quot;59.5&quot;&gt;
&lt;h2&gt;Refcounts are not Dirty&lt;/h2&gt;
&lt;p&gt;Another quite interesting case that is surprisingly easy to run into also has to do with the borrow checker. The borrow checker doesn't let you do stupid things with data you do not own and sometimes that can feel like running into a wall because you think you know better. In many of those cases the answer is just one &lt;cite&gt;Rc&amp;lt;T&amp;gt;&lt;/cite&gt; away however.&lt;/p&gt;
&lt;p&gt;To make this less mysterious let's look at the following piece of C++ code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;thread_local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This seems pretty innocent but it has a problem: nothing stops you from borrowing a field from &lt;cite&gt;current_config&lt;/cite&gt; and then passing it somewhere else. This is why in Rust the direct equivalent of that looks significantly more complicated:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// here we can *immutably* work with config&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should make it immediately obvious that this API is not fun. First of all the config is immutable. Secondly we can only access the config object within the closure passed to the &lt;cite&gt;with&lt;/cite&gt; function. Any attempt of trying to borrow from this config object and have it outlive the closure will fail (probably with something like “cannot infer an appropriate lifetime”). There is no way around it!&lt;/p&gt;
&lt;p&gt;This API is clearly objectively bad. Imagine we want to look up more of those thread local variables. So let's look at both of those issues separately. As hinted above ref counting is generally a really nice solution to deal with the underlying issue here: it's unclear who the owner is.&lt;/p&gt;
&lt;p&gt;Let's imagine for a second this config object just happens to be bound to the current thread but is not really owned by the current thread. What happens if the config is passed to another thread but the current thread shuts down? This is a typical example where one can think of logically the config having multiple owners. Since we might want to pass from one thread to another we want an atomically reference counted wrapper for our config: an &lt;cite&gt;Arc&amp;lt;Config&amp;gt;&lt;/cite&gt;. This lets us increase the refcount in the with block and return it. The refactored version looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// here we can *immutably* work with config&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The change here is that now the thread local holds a reference counted config. As such we can introduce a function that returns an &lt;cite&gt;Arc&amp;lt;Config&amp;gt;&lt;/cite&gt;. In the closure from the TLS we increment the refcount with the &lt;cite&gt;clone()&lt;/cite&gt; method on the &lt;cite&gt;Arc&amp;lt;Config&amp;gt;&lt;/cite&gt; and return it. Now any caller to &lt;cite&gt;Config::current&lt;/cite&gt; gets that refcounted config and can hold on to it for as long as necessary. For as long as there is code holding the Arc, the config within it is kept alive. Even if the originating thread died.&lt;/p&gt;
&lt;p&gt;So how do we make it mutable like in the C++ version? We need something that provides us with interior mutability. There are two options for this. One is to wrap the &lt;cite&gt;Config&lt;/cite&gt; in something like an &lt;cite&gt;RwLock&lt;/cite&gt;. The second one is to have the &lt;cite&gt;Config&lt;/cite&gt; use locking internally. For instance one &lt;em&gt;might&lt;/em&gt; want to do this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigInner&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigInner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you do not need this type to work with threads you can also replace &lt;cite&gt;Arc&lt;/cite&gt; with &lt;cite&gt;Rc&lt;/cite&gt; and &lt;cite&gt;RwLock&lt;/cite&gt; with &lt;cite&gt;RefCell&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To recap: when you need to borrow data that outlives the lifetime of something you need refcounting. Don't be afraid of using `Arc` but be aware that this locks you to immutable data. Combine with interior mutability (like `RwLock`) to make the object mutable.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;kill-all-setters&quot; readability=&quot;35.5&quot;&gt;
&lt;h2&gt;Kill all Setters&lt;/h2&gt;
&lt;p&gt;But the above pattern of effectively having &lt;cite&gt;Arc&amp;lt;RwLock&amp;lt;Config&amp;gt;&amp;gt;&lt;/cite&gt; can be a bit problematic and swapping it for &lt;cite&gt;RwLock&amp;lt;Arc&amp;lt;Config&amp;gt;&amp;gt;&lt;/cite&gt; can be significantly better.&lt;/p&gt;
&lt;p&gt;Rust done well is a liberating experience because if programmed well it's shockingly easy to parallelize your code after the fact. Rust encourages immutable data and that makes everything so much easier. However in the previous example we just introduced interior mutability. Imagine we have multiple threads running, all referencing the same config but one flips a flag. What happens to concurrently running code that now is not expecting the flag to randomly flip? Because of that interior mutability should be used carefully. Ideally an object once created does not change its state in such a way. In general I think such a type of setter should be an anti pattern.&lt;/p&gt;
&lt;p&gt;So instead of doing this what about we take a step back to where we were earlier where configs were not mutable? What if we never mutate the config after we created it but we add an API to promote another config to current. This means anyone who is currently holding on to a config can safely know that the values won't change.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[derive(Default)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;thread_local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CURRENT_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RwLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug_mode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now configs are still initialized automatically by default but a new config can be set by constructing a &lt;cite&gt;Config&lt;/cite&gt; object and calling &lt;cite&gt;make_current&lt;/cite&gt;. That will move the config into an &lt;cite&gt;Arc&lt;/cite&gt; and then bind it to the current thread. Callers to &lt;cite&gt;current()&lt;/cite&gt; will get that &lt;cite&gt;Arc&lt;/cite&gt; back and can then again do whatever they want.&lt;/p&gt;
&lt;p&gt;Likewise you can again switch &lt;cite&gt;Arc&lt;/cite&gt; for &lt;cite&gt;Rc&lt;/cite&gt; and &lt;cite&gt;RwLock&lt;/cite&gt; for &lt;cite&gt;RefCell&lt;/cite&gt; if you do not need this to work with threads. If you are just working with thread locals you can also combine &lt;cite&gt;RefCell&lt;/cite&gt; with &lt;cite&gt;Arc&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To recap: instead of using interior mutability where an object changes its internal state, consider using a pattern where you promote new state to be current and current consumers of the old state will continue to hold on to it by putting an `Arc` into an `RwLock`.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;in-conclusion&quot; readability=&quot;9&quot;&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;Honestly I wish I would have learned the above three things earlier than I did. Mostly because even if you know the patterns you might not necessarily know when to use them. So I guess the following mantra is now what I want to print out and hang somewhere:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;Handles, not self referential pointers&lt;/li&gt;
&lt;li&gt;Reference count your way out of lifetime / borrow checker hell&lt;/li&gt;
&lt;li&gt;Consider promoting new state instead of interior mutability&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p class=&quot;tags&quot;&gt;This entry was tagged &lt;a href=&quot;http://lucumr.pocoo.org/tags/rust/&quot;&gt;rust&lt;/a&gt; &lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 16:00:58 +0000</pubDate>
<dc:creator>stablemap</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://lucumr.pocoo.org/2018/3/31/you-cant-rust-that/</dc:identifier>
</item>
<item>
<title>OVH CEO: Unlike Amazon, Google, “we will never be in competition with you”</title>
<link>http://www.datacenterdynamics.com/content-tracks/colo-cloud/ovh-ceo-unlike-amazon-google-we-will-never-be-in-competition-with-you/99939.fullarticle</link>
<guid isPermaLink="true" >http://www.datacenterdynamics.com/content-tracks/colo-cloud/ovh-ceo-unlike-amazon-google-we-will-never-be-in-competition-with-you/99939.fullarticle</guid>
<description>&lt;p&gt;The CEO of French hosting and cloud computing company OVH has promised his company will stick to the cloud, and not compete with its own customers.&lt;/p&gt;
&lt;p&gt;In a dig at hyperscalers like Amazon, Alibaba and Google, whose businesses are myriad, Octave Klaba highlighted the fact that turning to those companies can mean subsidizing entities that aim to take your business.&lt;/p&gt;
&lt;h2 id=&quot;Im_not_going_to_do_anything_you_can_do_Better&quot;&gt;I’m not going to do anything you can do. Better?&lt;/h2&gt;
&lt;div class=&quot;inline_image inline_image_right image_size_med fullsize&quot; data-attachment=&quot;24193&quot; data-sequence=&quot;1&quot;&gt;&lt;button class=&quot;show-fullscreen&quot; data-url=&quot;/Attachments.aspx?attype=I&amp;amp;atcode=24193&amp;amp;storycode=99939&quot;&gt;Show Fullscreen&lt;/button&gt;
&lt;p class=&quot;picture&quot;&gt;&lt;img alt=&quot;OVH, Beauharnois, Quebec&quot; src=&quot;http://www.datacenterdynamics.com/pictures/280xany/1/9/3/24193_OVH-Beauharnois-Quebec.jpg&quot; class=&quot;responsiveImage&quot; data-size-1=&quot;280xany&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;inline_title&quot;&gt;OVH, Beauharnois, Quebec&lt;/p&gt;
&lt;p class=&quot;inline_source&quot;&gt;&lt;cite&gt;Source: OVH&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;“You might have a very good business, but if you choose a cloud provider that says ’okay it’s a good business you are doing and I can do this same business on my own,’ maybe it’s not the best choice for you,” Klaba said in a keynote at Data Centre World in London.&lt;/p&gt;
&lt;p&gt;“If your cloud provider can be, in the future, your competitor, what are the choices you have to make today? OVH’s business is cloud. We will never do anything else except cloud, and we will never be in competition with you, with the business that you are doing.&lt;/p&gt;
&lt;p&gt;“That’s not always the case with [service] providers in the world, and you see every day, every month, the new announcement of the cloud providers, the big giants of the Internet, that they are just going and going after your business.”&lt;/p&gt;
&lt;p&gt;Concerns about funding a competitor are thought to be the reason for US retailer Target recently &lt;a href=&quot;http://www.datacenterdynamics.com/content-tracks/colo-cloud/report-target-to-leave-aws-after-amazon-buys-whole-foods/98881.fullarticle&quot;&gt;shifting away from Amazon Web Services&lt;/a&gt;, after Amazon acquired grocery chain Whole Foods, and why Walmart made considerable efforts to diversify its cloud portfolio.&lt;/p&gt;
&lt;p&gt;Klaba also noted that “OVH is the only European company that provides cloud services on the global scale,” adding, “we just invested $1.5bn in infrastructure - 300,000 servers deployed, 27 data centers across 12 locations on three continents, 13Tbps of network capacity, 32 PoPs.&lt;/p&gt;
&lt;p&gt;“It’s a lot of responsibility in the choice of the cloud provider, we believe we can be an alternative cloud on the market,” he said.&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 15:09:16 +0000</pubDate>
<dc:creator>krn</dc:creator>
<og:title>OVH CEO: Unlike Amazon, Google, &quot;we will never be in competition with you&quot;</og:title>
<og:type>Article</og:type>
<og:url>http://www.datacenterdynamics.com/content-tracks/colo-cloud/ovh-ceo-unlike-amazon-google-we-will-never-be-in-competition-with-you/99939.fullarticle</og:url>
<og:description>European data center company is not planning to diversify into online shopping</og:description>
<og:image>http://www.datacenterdynamics.com/pictures/2000x2000fit/1/9/3/24193_OVH-Beauharnois-Quebec.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.datacenterdynamics.com/content-tracks/colo-cloud/ovh-ceo-unlike-amazon-google-we-will-never-be-in-competition-with-you/99939.fullarticle</dc:identifier>
</item>
<item>
<title>I almost lost my hearing from the lid on the tank of a toilet</title>
<link>https://threadreaderapp.com/thread/979583605637877760.html</link>
<guid isPermaLink="true" >https://threadreaderapp.com/thread/979583605637877760.html</guid>
<description>&lt;div readability=&quot;44&quot;&gt;Our (((enemies))) are trying to wipe THE WHITE RACE off the face of the planet via&lt;p&gt;WARS, DOMESTIC TERRORISM, MISCEGENATION, DISPOSSESSION/DISPLACEMENT, FINANCIAL STRANGULATION, ABORTION.&lt;/p&gt;&lt;p&gt;ARE THEY ALSO ATTACKING OUR FERTILITY VIA FOOD, WATER, VACCINATIONS?&lt;/p&gt;&lt;/div&gt;&lt;div readability=&quot;35.609561752988&quot;&gt;&quot;In his studies on the role of the &lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/Aryan&quot;&gt;#Aryan&lt;/a&gt; (read &quot;&lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/Nordic&quot;&gt;#Nordic&lt;/a&gt;&quot; for Grant) in &lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/history&quot;&gt;#history&lt;/a&gt;, the questionable place of the &lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/Alpine&quot;&gt;#Alpine&lt;/a&gt; race, and the negative impact of the &lt;a class=&quot;entity-hashtag&quot; href=&quot;https://threadreaderapp.com/hashtag/Jews&quot;&gt;#Jews&lt;/a&gt;, Vacher de Lapouge is the most important and probably most direct influence on Grant...&quot;&lt;/div&gt;</description>
<pubDate>Sat, 31 Mar 2018 12:56:46 +0000</pubDate>
<dc:creator>shawndumas</dc:creator>
<og:title>Thread by @DrPhiltill: &quot;1. Wanna hear a weird but true story? (I have a few minutes to type, so here goes). I almost lost my hearing from the lid on the tank of a t […]&quot;</og:title>
<og:image>https://threadreaderapp.com/images/screenshots/thread/979583605637877760.jpg</og:image>
<og:url>https://threadreaderapp.com/thread/979583605637877760.html</og:url>
<og:description>Thread by @DrPhiltill: &quot;1. Wanna hear a weird but true story? (I have a few minutes to type, so here goes). I almost lost my hearing from the lid on the tank of a toilet. Noise-Induced Hearing Loss. You wouldn't think a toilet lid could be so l […]&quot;</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://threadreaderapp.com/thread/979583605637877760.html</dc:identifier>
</item>
<item>
<title>It&amp;#039;s time to head back to RSS?</title>
<link>https://www.wired.com/story/rss-readers-feedly-inoreader-old-reader/</link>
<guid isPermaLink="true" >https://www.wired.com/story/rss-readers-feedly-inoreader-old-reader/</guid>
<description>&lt;p&gt;&lt;span class=&quot;lede&quot;&gt;The modern web&lt;/span&gt; contains no shortage of horrors, from ubiquitous ad trackers to all-consuming platforms to YouTube comments, generally. Unfortunately, there's no panacea for what ails this internet we've built. But anyone weary of black-box algorithms controlling what you see online at least has a respite, one that's been there all along but has often gone ignored. Tired of Twitter? Facebook fatigued? It's time to head back to RSS.&lt;/p&gt;
&lt;p&gt;For many of you, that means finding a replacement for &lt;a href=&quot;http://digg.com/reader&quot; target=&quot;_blank&quot;&gt;Digg Reader&lt;/a&gt;, which went the way of the ghost this month. Or maybe you haven't used RSS since five years ago, when Google Reader, the beloved firehose of news headlines &lt;a href=&quot;https://www.wired.com/2013/06/why-google-reader-got-the-ax/&quot;&gt;got the axe&lt;/a&gt;. For others, it means figuring out what the heck an RSS feed is in the first place—we'll get to that in just a minute. And some of you have already moved on to the next article in your Feedly queue.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;No matter what your current disposition, though, in this age of algorithmic overreach there's something deeply satisfying about finding stories beyond what your loudest Twitter follows shared, or that Facebook's News Feed optimized into your life. And lots of tools that can get you there.&lt;/p&gt;
&lt;h3 class=&quot;paywall&quot;&gt;Cue RSS&lt;/h3&gt;
&lt;p class=&quot;paywall&quot;&gt;RSS stands for Really Simple Syndication (or Rich Site Summary) and it was first stitched into the tapestry of the open web around the turn of the millennium. Its aim is straightforward: to make it easy to track updates to the content of a given website in a standardized format.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;In practice, and for your purposes, that means it can give you a comprehensive, regularly updated look at all of the content your favorite sites publish throughout the day. Think of it as the ultimate aggregator; every morsel from every source you care about, fed directly to you. Or, more commonly, fed to you through an intermediary known as an RSS feed reader, software that helps you wrangle all of those disparate headlines into something remotely manageable.&lt;/p&gt;

&lt;div class=&quot;inset-left-component paywall inset-left-component--pullquote&quot; readability=&quot;6&quot;&gt;
&lt;blockquote name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;'We're trying to keep things as they were.'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot;&gt;Ben Wolf, The Old Reader&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;paywall&quot;&gt;The difference between getting news from an RSS reader and getting it from Facebook or Twitter or Nuzzel or Apple News is a bit like the difference between a Vegas buffet and an a la carte menu. In either case, you decide what you actually want to consume. But the buffet gives you a whole world of options you otherwise might never have seen.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&quot;There are multiple approaches to connecting to news. Social felt pretty interesting at first, but when you mix social and algorithmic, you can easily get into these noise bubbles, or areas where you don't necessarily feel 100 percent in control of the algorithm,&quot; says Edwin Khodabakchian, cofounder and CEO of popular RSS reader &lt;a href=&quot;https://feedly.com/&quot; target=&quot;_blank&quot;&gt;Feedly&lt;/a&gt;. &quot;A tool like Feedly gives you a more transparent and controllable way to connect to the information you need.&quot;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;With 14 million users, Feedly is the largest RSS reader on the market. And it's easy to see why; it's as feature-full as one could hope for, and has been around since 2008. (It also &lt;a href=&quot;https://blog.feedly.com/priorities-keeping-the-site-up-and-adding-new-features/&quot; target=&quot;_blank&quot;&gt;inherited a sizeable chunk&lt;/a&gt; of Google Reader's jilted audience.) It's far from your only option, though.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;All RSS readers function within the same basic outline. You tell them what RSS feeds you'd like to follow—&lt;em&gt;The New York Times&lt;/em&gt;, say, or WIRED—and they collect every new headline those sites churn out, offering anything from a snippet of information to the full story, depending on how much the publisher allows. Each puts a slightly different spin on the process from there.&lt;/p&gt;


&lt;p class=&quot;paywall&quot;&gt;Feedly, for instance, has for the last two years gravitated toward being a tool for research rather than passive entertainment. That's partly in response to platforms eating the open web. &quot;If you go after entertainment, you're not competing against other reader news tools. You're really competing with Instagram and other things people do to kill time,&quot; says Khodabakchian. &quot;On the other hand, if you think of this as an intelligence tool, or research assistant, we see a huge and increasing demand for that.&quot;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Still, Feedly has plenty to offer casual users. It has a clean user interface, and the free version of its service lets you follow 100 sources, categorized into up to three feeds—think News, Sports, Humor, or wherever your interests lie. It also shows how popular each story is, both on Feedly and across various social networks, to give you a sense of what people are reading without letting that information dictate what you see. Paid accounts—of which Feedly has about 100,000—get you more feeds and integrations, faster updates, and better tools for teams.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;For more of a throwback feel, you might try &lt;a href=&quot;https://theoldreader.com/&quot; target=&quot;_blank&quot;&gt;The Old Reader&lt;/a&gt;, which strips down the RSS reader experience while still emphasizing a social component.&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;&quot;In terms of evolution, we're coming from a different perspective,&quot; says Ben Wolf, whose Levee Labs acquired The Old Reader in 2013. &quot;We're trying to keep things as they were.&quot;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;For the million or so Old Reader users, that means not many bells and whistles. Even the mechanism to add new feeds feels just a touch more onerous than you'll find elsewhere. But once you do get properly organized, it's a fast and light experience, and if you can convince some friends to join, its social features will help you cut through the clutter. Most of all, there's not much to get in the way of the headlines, which is what you came for in the first place.&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;Power users, meanwhile, might try &lt;a href=&quot;https://www.inoreader.com/&quot; target=&quot;_blank&quot;&gt;Inoreader&lt;/a&gt;, which offers for free many of the features—unlimited feeds and tags, and some key integrations—Feedly reserves for paid accounts. &quot;I would say that at the moment Feedly is ahead of us in terms of mass appeal design look and UX, which is something we will try to tackle with our upcoming redesign,&quot; says Victor Stankov, Inoreader's business development manager. &quot;Hardcore nerds love us way more than Feedly.&quot;&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;And those are just three options of many. The point being: In 2018, it's easy to find an RSS reader out there that suits your needs. Which, in hindsight, is no small miracle.&lt;/p&gt;
&lt;h3 class=&quot;paywall&quot;&gt;Throwback&lt;/h3&gt;
&lt;p class=&quot;paywall&quot;&gt;Five years ago, when Wolf took over The Old Reader, he offered a prescient &lt;a href=&quot;http://blog.theoldreader.com/post/67563942900/rss-and-the-open-web&quot; target=&quot;_blank&quot;&gt;insight&lt;/a&gt;: &quot;How long will it be before your Facebook stream is so full of promoted content, bizarre algorithmic decisions, and tracking cookie based shopping cart reminders that you won't be getting any valuable information,&quot; Wolf wrote. &quot;For as little as $60, a business can promote a page to Facebook users. It won't be long before your news feed is worthless.&quot;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Which, well, here we are. Not only that, but two-thirds of Americans get at least some of their news from social media, according to a recent Pew Research Center &lt;a href=&quot;http://www.journalism.org/2017/09/07/news-use-across-social-media-platforms-2017/&quot; target=&quot;_blank&quot;&gt;study&lt;/a&gt;, leaving traditional sources behind.&lt;/p&gt;

&lt;div class=&quot;inset-left-component paywall inset-left-component--pullquote&quot; readability=&quot;10&quot;&gt;
&lt;blockquote name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;'RSS readers have not only survived in the era of social media, but are driving more and more attention back to themselves.'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot;&gt;Victor Stankov, Inoreader&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;paywall&quot;&gt;The platformization of the web has claimed many victims, RSS readers included. Google Reader's 2013 demise was a major blow; the company offed it in favor of &quot;products to address each user's interest with the right information at the right time via the most appropriate means,&quot; as it Google executive Richard Gingras &lt;a href=&quot;https://www.wired.com/2013/06/why-google-reader-got-the-ax/&quot;&gt;put it at the time&lt;/a&gt;. In other words, letting Google Now decide what you want. And the popular Digg Reader, which was born in response to that shuttering, closed its doors this week after a nearly four-year run.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Despite those setbacks, though, RSS has persisted. &quot;I can't really explain it, I would have thought given all the abuse it's taken over the years that it would be stumbling a lot worse,&quot; says programmer Dave Winer, who helped create RSS.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;It owes that resilience in part thanks to social media burnout. Stankov says search traffic to Inoreader has nearly doubled since 2015, all organically. &quot;RSS readers have not only survived in the era of social media, but are driving more and more attention back to themselves, as people are realizing the pitfalls&quot; of relying too much on Facebook and others, Stankov says.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;RSS readers obviously have their own shortcomings as well. The firehose approach can easily overwhelm, especially when multiple outlets all publish the same news at the same time. There are various solutions to this; Stankov points to filtering tools that help you skip the things you don't care about, while Wolf says The Old Reader has experimented with tools to help highlight just one story when there are dozens of near-identicals.&lt;/p&gt;


&lt;p class=&quot;paywall&quot;&gt;Different publishers also offer RSS feeds of varyingly helpful degrees. &lt;em&gt;The New York Times&lt;/em&gt; and &lt;em&gt;The Ringer&lt;/em&gt;, for instance, offer granular choices to help focus on the topics you care about, while others offer either only one big jumble or oddly sparse updates. Sites that publish infrequently can easily get lost in the mix. And multimedia elements sometimes don't cross the transom; &lt;em&gt;FiveThirtyEight&lt;/em&gt; recently ran a fun, interactive &lt;a href=&quot;https://fivethirtyeight.com/features/how-to-win-a-trade-war/&quot; target=&quot;_blank&quot;&gt;trade war game&lt;/a&gt; that RSS couldn't parse.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;The readers all have settings to help cope with these issues to varying degrees, where possible; it's just a matter of how many hours you want to spend shaping your RSS bonsai.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&quot;Social media has mass appeal because it is simple to understand and use, with little to no challenges involved for the user,&quot; says Stankov. &quot;RSS is whole different game, where the main goal is for the end user to research and find valuable information sources, as well as periodically clean up the news feed from irrelevant noise.&quot; (Those who want a truly passive experience outside of Facebook and Twitter might look instead to aggregators like Apple News or Flipboard, or even Texture, which for $10 a month gives you full issues of dozens of magazine titles to flip through.)&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;Even with minimal tweaking, though, returning to RSS this week offered up a few fun surprises I never would have seen otherwise: the Yankees &lt;a href=&quot;http://www.espn.com/mlb/story/_/id/22936745/mlb-warns-new-york-yankees-beer-foam-art-current-players-league-rules&quot; target=&quot;_blank&quot;&gt;getting in trouble&lt;/a&gt; for player beer-foam art; an American &lt;a href=&quot;https://fivethirtyeight.com/features/an-american-will-play-for-the-world-chess-championship/&quot; target=&quot;_blank&quot;&gt;contending&lt;/a&gt; for the world chess championship; the &lt;a href=&quot;http://www.vulture.com/2018/03/ben-affleck-on-back-tattoo-im-doing-just-fine.html&quot; target=&quot;_blank&quot;&gt;latest&lt;/a&gt; on Ben Affleck's hilariously oversized back tattoo. These aren't the stories everyone is reading. But they're the ones I want to read.&lt;/p&gt;
&lt;h3 class=&quot;paywall&quot;&gt;RSS Evolution&lt;/h3&gt;
&lt;p class=&quot;paywall&quot;&gt;While RSS readers offer a sanctuary from the algorithmic approach, they're also not opposed to using algorithms of their own, as they continue to evolve and regain relevance. That's not quite the conflict it might seem.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&quot;Machines can have a big role in helping understand the information, so algorithms can be very useful, but for that they have to be transparent and the user has to feel in control,&quot; says Khodabakchian. &quot;What's missing today with the black-box algorithms is where they look over your shoulder, and don't trust you to be able to tell what's right.&quot;&lt;/p&gt;


&lt;p class=&quot;paywall&quot;&gt;With its focus on professional users, Feedly hopes AI can better connect users with niche experts. Wolf, too, touts AI as a way to better flag standout stories. &quot;I think algorithms are great,&quot; Wolf says. &quot;I think the problem is when the algorithms are run by advertising companies.&quot;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;And despite Digg Reader's demise, new RSS tools continue to come online. Even Winer has re-entered the fray, this week introducing &lt;a href=&quot;http://feedbase.io/&quot; target=&quot;_blank&quot;&gt;feedbase&lt;/a&gt;, a database of feeds that makes it easy to see what others subscribe to, ideally prompting discovery and an even more open approach. &quot;I thought it might be a good time to try to add an important feature to RSS that was always part of the vision, dynamic subscription lists,&quot; Winer says.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Still, the lasting appeal of RSS remains the parts that haven't changed: the unfiltered view of the open web, and the chance to make your own decisions about what you find there.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&quot;The most amazing thing to me about RSS is that no one really went away from it,&quot; says Wolf. &quot;It still exists. Somehow through all of this. It's crazy, in a way, that when you go away from RSS and then come back to it, it's all still there.&quot;&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 04:15:18 +0000</pubDate>
<dc:creator>kawera</dc:creator>
<og:type>article</og:type>
<og:title>It's Time For an RSS Revival</og:title>
<og:description>After years of letting algorithms make up our minds for us, the time is right to go back to basics.</og:description>
<og:image>https://media.wired.com/photos/5abd6d2e2b6a90582b5d8b33/191:100/pass/rss-01.jpg</og:image>
<og:url>https://www.wired.com/story/rss-readers-feedly-inoreader-old-reader/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wired.com/story/rss-readers-feedly-inoreader-old-reader/</dc:identifier>
</item>
<item>
<title>An Update on Last Week’s Accident</title>
<link>https://www.tesla.com/blog/update-last-week%E2%80%99s-accident</link>
<guid isPermaLink="true" >https://www.tesla.com/blog/update-last-week%E2%80%99s-accident</guid>
<description>&lt;p&gt;Since posting our &lt;a href=&quot;https://www.tesla.com/blog/what-we-know-about-last-weeks-accident&quot;&gt;first update&lt;/a&gt;, we have been working as quickly as possible to establish the facts of last week’s accident. Our hearts are with the family and friends who have been affected by this tragedy.&lt;/p&gt;
&lt;p&gt;The safety of our customers is our top priority, which is why we are working closely with investigators to understand what happened, and what we can do to prevent this from happening in the future. After the logs from the computer inside the vehicle were recovered, we have more information about what may have happened.&lt;/p&gt;
&lt;p&gt;In the moments before the collision, which occurred at 9:27 a.m. on Friday, March 23rd, Autopilot was engaged with the adaptive cruise control follow-distance set to minimum. The driver had received several visual and one audible hands-on warning earlier in the drive and the driver’s hands were not detected on the wheel for six seconds prior to the collision. The driver had about five seconds and 150 meters of unobstructed view of the concrete divider with the crushed crash attenuator, but the vehicle logs show that no action was taken.&lt;/p&gt;
&lt;p&gt;The reason this crash was so severe is because the crash attenuator, a highway safety barrier which is designed to reduce the impact into a concrete lane divider, had been crushed in a prior accident without being replaced. We have never seen this level of damage to a Model X in any other crash.&lt;/p&gt;
&lt;p&gt;Over a year ago, our first iteration of Autopilot was found by the U.S. government to reduce crash rates by as much as 40%. Internal data confirms that recent updates to Autopilot have improved system reliability.&lt;/p&gt;
&lt;p&gt;In the US, there is one automotive fatality every 86 million miles across all vehicles from all manufacturers. For Tesla, there is one fatality, including known pedestrian fatalities, every 320 million miles in vehicles equipped with Autopilot hardware. If you are driving a Tesla equipped with Autopilot hardware, you are 3.7 times less likely to be involved in a fatal accident.&lt;/p&gt;
&lt;p&gt;Tesla Autopilot does not prevent all accidents – such a standard would be impossible – but it makes them much less likely to occur. It unequivocally makes the world safer for the vehicle occupants, pedestrians and cyclists.&lt;/p&gt;
&lt;p&gt;No one knows about the accidents that didn’t happen, only the ones that did. The consequences of the public not using Autopilot, because of an inaccurate belief that it is less safe, would be extremely severe. There are about 1.25 million automotive deaths worldwide. If the current safety level of a Tesla vehicle were to be applied, it would mean about 900,000 lives saved per year. We expect the safety level of autonomous cars to be 10 times safer than non-autonomous cars.&lt;/p&gt;
&lt;p&gt;In the past, when we have brought up statistical safety points, we have been criticized for doing so, implying that we lack empathy for the tragedy that just occurred. Nothing could be further from the truth. We care deeply for and feel indebted to those who chose to put their trust in us. However, we must also care about people now and in the future whose lives may be saved if they know that Autopilot improves safety. None of this changes how devastating an event like this is or how much we feel for our customer's family and friends. We are incredibly sorry for their loss.&lt;/p&gt;
</description>
<pubDate>Sat, 31 Mar 2018 01:49:06 +0000</pubDate>
<dc:creator>runesoerensen</dc:creator>
<og:title>An Update on Last Week’s Accident</og:title>
<og:description>Since posting our first update, we have been working as quickly as possible to establish the facts of last week’s accident. Our hearts are with the family and friends who have been affected by this tragedy.</og:description>
<og:image>https://www.tesla.com/sites/default/files/blog_images/tesla_announcement_social.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.tesla.com/blog/update-last-week%E2%80%99s-accident</dc:identifier>
</item>
<item>
<title>The joy of max()</title>
<link>https://lwn.net/Articles/750306/</link>
<guid isPermaLink="true" >https://lwn.net/Articles/750306/</guid>
<description>&lt;div readability=&quot;33&quot;&gt;

&lt;p&gt;[Posted March 28, 2018 by corbet]&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;71.105442176871&quot;&gt;LWN recently &lt;a href=&quot;https://lwn.net/Articles/749064/&quot;&gt;looked at the kernel's &lt;tt&gt;max()&lt;/tt&gt; macro&lt;/a&gt; and the effort put into ensuring that it would evaluate to a &quot;constant expression&quot; as seen by the compiler. After a number of iterations, it would appear that the problem has been solved. For your reading pleasure, here is the new form of &lt;tt&gt;max()&lt;/tt&gt;, extracted from the patch &lt;a href=&quot;https://lwn.net/Articles/750307/&quot;&gt;posted&lt;/a&gt; by Kees Cook:
&lt;pre&gt;
    #define __typecheck(x, y) \
                (!!(sizeof((typeof(x)*)1 == (typeof(y)*)1)))

    #define __is_constant(x) \
        (sizeof(int) == sizeof(*(1 ? ((void*)((long)(x) * 0l)) : (int*)1)))

    #define __no_side_effects(x, y) \
                (__is_constant(x) &amp;amp;&amp;amp; __is_constant(y))

    #define __safe_cmp(x, y) \
                (__typecheck(x, y) &amp;amp;&amp;amp; __no_side_effects(x, y))

    #define __cmp(x, y, op)     ((x) op (y) ? (x) : (y))

    #define __cmp_once(x, y, op) ({     \
                typeof(x) __x = (x);    \
                typeof(y) __y = (y);    \
                __cmp(__x, __y, op); })

    #define __careful_cmp(x, y, op)                     \
                __builtin_choose_expr(__safe_cmp(x, y), \
                                      __cmp(x, y, op), __cmp_once(x, y, op))
 
    #define max(x, y)   __careful_cmp(x, y, &amp;gt;)
&lt;/pre&gt;
&lt;p&gt;The above definitions should, of course, be immediately obvious to any LWN reader. For those who want an extra hint or two, though, the patch posting includes a few explanatory comments.&lt;/p&gt;
&lt;hr width=&quot;60%&quot; align=&quot;left&quot; /&gt;
(&lt;a href=&quot;https://lwn.net/login?target=/Articles/750306/&quot;&gt;Log in&lt;/a&gt; to post comments)&lt;/div&gt;</description>
<pubDate>Fri, 30 Mar 2018 21:12:24 +0000</pubDate>
<dc:creator>thefox</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://lwn.net/Articles/750306/</dc:identifier>
</item>
</channel>
</rss>