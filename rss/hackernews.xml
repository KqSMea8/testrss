<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>AWS CEO Jassy follows Apple in calling for retraction of Chinese spy chip story</title>
<link>https://www.cnbc.com/2018/10/22/aws-ceo-jassy-follows-apple-calls-for-spy-chip-story-retraction.html</link>
<guid isPermaLink="true" >https://www.cnbc.com/2018/10/22/aws-ceo-jassy-follows-apple-calls-for-spy-chip-story-retraction.html</guid>
<description>&lt;div class=&quot;group&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;Andy Jassy, the CEO of &lt;a class=&quot;inline_quotes&quot; data-gdsid=&quot;9399&quot; data-inline-quote-symbol=&quot;AMZN&quot; href=&quot;https://www.cnbc.com/quotes/?symbol=AMZN&quot;&gt;Amazon&lt;/a&gt; Web Services, followed Apple's lead in calling the for the retraction of Bloomberg's story about spy chips being embedded in servers.&lt;/p&gt;
&lt;p&gt;&quot;They offered no proof, story kept changing, and showed no interest in our answers unless we could validate their theories,&quot; Jassy wrote in a tweet on Monday. &quot;Reporters got played or took liberties. Bloomberg should retract.&quot;&lt;/p&gt;
&lt;blockquote class=&quot;embed-container twitter-tweet&quot;&gt;
&lt;p&gt;&lt;a class=&quot;inline_asset&quot; href=&quot;https://twitter.com/ajassy/status/1054401346827243520?s=21&quot; target=&quot;_self&quot;&gt;tweet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apple CEO &lt;a href=&quot;https://www.cnbc.com/tim-cook/&quot;&gt;Tim Cook&lt;/a&gt; told Buzzfeed on Friday that the scenario Bloomberg reported never happened and that the October story in Bloomberg Businessweek &lt;a href=&quot;https://www.cnbc.com/2018/10/19/apples-tim-cook-calls-for-retraction-on-chinese-spy-chip-story.html&quot;&gt;should be retracted&lt;/a&gt;. Bloomberg &lt;a href=&quot;https://www.cnbc.com/2018/10/04/chinese-spy-chips-are-said-to-be-found-in-hardware-used-by-apple-amazon-apple-denies-the-bloomberg-businessweek-report.html&quot;&gt;alleged data center hardware&lt;/a&gt; used by Apple and AWS, and provided by server company &lt;a class=&quot;inline_quotes&quot; data-gdsid=&quot;56045&quot; data-inline-quote-symbol=&quot;SMCI&quot; href=&quot;https://www.cnbc.com/quotes/?symbol=SMCI&quot;&gt;Super Micro&lt;/a&gt;, was under surveillance by the Chinese government, even though almost all the companies named in the report denied Bloomberg's claim.&lt;/p&gt;
&lt;p&gt;Bloomberg published a denial from AWS alongside its own report, and AWS refuted the report in a more strongly worded six-paragraph &lt;a class=&quot;inline_asset&quot; href=&quot;https://aws.amazon.com/blogs/security/setting-the-record-straight-on-bloomberg-businessweeks-erroneous-article/&quot;&gt;blog post&lt;/a&gt; entitled &quot;Setting the Record Straight on Bloomberg Businessweek's Erroneous Article.&quot;&lt;/p&gt;
&lt;p&gt;The Bloomberg story said that servers from Super Micro in AWS Beijing data centers contained malicious chips, which were also found in servers from Elemental Technologies, a company AWS acquired.&lt;/p&gt;
&lt;p&gt;&quot;There are so many inaccuracies in ‎this article as it relates to Amazon that they're hard to count,&quot; Steve Schmidt, chief information security officer at AWS, wrote in the post.&lt;/p&gt;
&lt;p&gt;Also on Monday, Super Micro told shareholders that it sent &lt;a href=&quot;https://www.cnbc.com/2018/10/22/super-micro-to-review-chips-in-light-of-media-report-on-hacking.html&quot;&gt;a letter to customers&lt;/a&gt; informing them that it's conducting a &quot;complicated and time-consuming review to further address the article&quot; even as it lacks proof of the sort of malicious chips that Bloomberg had described.&lt;/p&gt;
&lt;p&gt;WATCH: &lt;a href=&quot;https://www.cnbc.com/video/2018/10/09/super-micro-plunges-on-new-report-of-hacked-hardware-in-us.html&quot;&gt;Super Micro plunges on new report of hacked hardware in US&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;group&quot; itemprop=&quot;articleBody&quot;/&gt;</description>
<pubDate>Mon, 22 Oct 2018 19:24:19 +0000</pubDate>
<dc:creator>magoghm</dc:creator>
<og:type>article</og:type>
<og:url>https://www.cnbc.com/2018/10/22/aws-ceo-jassy-follows-apple-calls-for-spy-chip-story-retraction.html</og:url>
<og:image>https://fm.cnbc.com/applications/cnbc.com/resources/img/editorial/2018/03/05/105045612-jassy-hands.1910x1000.jpg</og:image>
<og:title>AWS CEO Jassy follows Apple in calling for spy chip story retraction</og:title>
<og:description>AWS CEO Andy Jassy said in a tweet on Monday that Bloomberg should retract its story about Chinese spy chips. He was agreeing with Apple CEO Tim Cook, who told Buzzfeed last week that the story was wrong.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnbc.com/2018/10/22/aws-ceo-jassy-follows-apple-calls-for-spy-chip-story-retraction.html</dc:identifier>
</item>
<item>
<title>Repl.it raises $4.5M from A16Z, Paul Graham, and others</title>
<link>https://repl.it/site/blog/a16z</link>
<guid isPermaLink="true" >https://repl.it/site/blog/a16z</guid>
<description>&lt;p&gt;We're thrilled to announce that we have raised a Seed round led by Andreessen Horowitz, with Marc Andreessen and Andrew Chen championing the deal. We're also sharing that a million users have used Repl.it in the last month. Moreover, our developers have shipped 250,000 websites/apps since our &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/site/blog/platform&quot;&gt;hosting platform&lt;/a&gt; launch in March.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/public/images/blog/team.png&quot;&gt;&lt;img src=&quot;https://repl.it/public/images/blog/team.png&quot; alt=&quot;repl.it team&quot; title=&quot;repl.it team&quot;/&gt;&lt;/a&gt; &lt;em&gt;Checkout our Soundcloud for our latest album&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We started Repl.it as a side project with the straightforward goal of making it easy to get a REPL for your favorite &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/languages&quot;&gt;language&lt;/a&gt; when you need one. Coding, we believed, should be as simple as opening a new browser tab.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://i.imgur.com/xRLWGYy.png&quot;&gt;&lt;img src=&quot;https://i.imgur.com/xRLWGYy.png&quot; alt=&quot;repl&quot; title=&quot;repl&quot;/&gt;&lt;/a&gt; &lt;em&gt;How Repl.it looked a few years ago&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However, our users wanted more. They misused our system for things it wasn't meant for: they &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/talk/share/I-made-Tetris-in-a-python-terminal-and-its-as-bad-as-you-think-need-help-with-flickering-screen/5986&quot;&gt;hacked games&lt;/a&gt; into our dumb web terminal, they made &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/talk/share/Working-Chatroom/3741&quot;&gt;networked applications&lt;/a&gt; despite not having explicit support for it, and they kept asking for more. Not a day goes by without getting emails from users asking how to do one thing or another in our environment.&lt;/p&gt;
&lt;p&gt;Encouraged by this tremendous pull from our users, our new goal is to build a software development platform where you can, with minimal prior experience, develop, ship, and acquire users for your apps -- all in the same place.&lt;/p&gt;
&lt;p&gt;Cloud-computing is one of the most significant paradigm shifts in our industry, yet it remains commandable only by relatively few professionals. It's similar to when, prior to microcomputers, only big corporations and universities had mainframes. We want Repl.it to be the microcomputer to the cloud's mainframe.&lt;/p&gt;
&lt;p&gt;Today, while some percentage of our developers use Repl.it as their primary IDE, most professional programmers use it (or other online IDEs) as playgrounds or secondary environments for side-projects. But we believe we can build a more compelling toolchain and platform that, in the future, will be indispensable for developers.&lt;/p&gt;
&lt;h3 id=&quot;funding&quot;&gt;Funding&lt;/h3&gt;
&lt;p&gt;After graduating YC last winter, we went out to fundraise. A16z's ability to spot trends and paradigm-shifting companies in the devtools and cloud infrastructure space made them our top choice. After all, they've invested in some of our favorite developer tools ranging from GitHub to Digital Ocean to Netlify.&lt;/p&gt;
&lt;p&gt;Personally, Marc Andreessen's long view of computing and his involvement in the early web platform and the genesis of the cloud (his company LoudCloud might've been the one to coin the term) makes him an especially valuable partner to have in this.&lt;/p&gt;
&lt;p&gt;We're also fortunate to have Andrew Chen as a partner. His experience working with startups in both consumer internet and enterprise spaces is exactly the right expertise we need. Devtool companies generally grow in what resembles a consumer-internet play but end up a B2B company.&lt;/p&gt;
&lt;p&gt;In addition to a16z, we're happy to see participation from some of our existing investors: Bloomberg Beta, Reach Capital, and Y Combinator. Moreover, we're joined by some of our friends and mentors that have tremendous experience building relevant companies:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Paul Graham, founder of Viaweb&lt;/li&gt;
&lt;li&gt;Andrew Sutherland, CTO &amp;amp; founder of Quizlet&lt;/li&gt;
&lt;li&gt;Greg Brockman, CTO of OpenAI&lt;/li&gt;
&lt;li&gt;Olivier Pomel, CEO &amp;amp; founder of Datadog&lt;/li&gt;
&lt;li&gt;Ben Darnell, CTO &amp;amp; founder of CockroachLabs&lt;/li&gt;
&lt;li&gt;Zach Sims, CEO &amp;amp; founder of Codecademy&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;what-s-next-&quot;&gt;What's next?&lt;/h3&gt;
&lt;p&gt;We spend most of our time building tech in two major areas:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;IDE: we're building the world's fastest online IDE. It loads in less than 2 seconds, and it's complete with &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/site/blog/intel&quot;&gt;code-intellisense&lt;/a&gt;. It's also a REPL-driven environment.&lt;/li&gt;
&lt;li&gt;Cloud infrastructure: we're building a fast and reliable container orchestration system that also provides a remote development environment.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Just last week we released two features that make our platform more compelling for shipping code:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Adding a domain name and live-developing a website&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/talk/announcements/BetaExplorers-Announcing-replrun-publish-your-terminal-apps-as-websites/7802&quot;&gt;repl.run&lt;/a&gt;: ship your terminal apps as websites (beta)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Building and shipping a terminal snake game&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What's in progress:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Multiplayer REPLs: text collaboration is easy but imagine collaborating with others on the same container, same filesystem, same interpreter process!&lt;/li&gt;
&lt;li&gt;We're standardizing our REPL protocol to make it easy to add new languages and for the environment to be genuinely a REPL-driven one. Think Jupyter Kernels but for fullstack REPLs. You'll be able to add your favorite language/environment to Repl.it.&lt;/li&gt;
&lt;li&gt;Continuous-deployment-like system: it's going to have a closer gap than traditional (boring) dev-staging-prod pipeline. We think we have something novel to share in this space too.&lt;/li&gt;
&lt;li&gt;We're about to start working on a distributed filesystem implementation that allows Repl.it users to edit their files in the browser, on &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/replit/repl.sh&quot;&gt;their desktop computer&lt;/a&gt;, or in their development container and will all magically sync.&lt;/li&gt;
&lt;li&gt;Bootstrapped IDE: we built a &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/site/blog/IDE&quot;&gt;small-core functional IDE&lt;/a&gt; with the ability to live-reload plugins. We think that we have a possibly novel and fantastic plugin development experience. We're looking to open that up for 3rd-party developers soon.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Moving around plugins in the IDE&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Within a year, we want to get to a place where more people are using Repl.it to build businesses and ship production software. We're also excited to push the state-of-the-art forward -- enough boring repetitive stuff.&lt;/p&gt;
&lt;h2 id=&quot;business&quot;&gt;Business&lt;/h2&gt;
&lt;p&gt;Right now, we're making some revenue through our &lt;a target=&quot;_blank&quot; href=&quot;https://repl.it/pricing&quot;&gt;Hacker plan&lt;/a&gt; where you pay $7 for more compute resources and private projects. But the opportunity is so much bigger than this.&lt;/p&gt;
&lt;p&gt;As we continue to make Repl.it more useful, we think more people will depend on it for their businesses and that will open up commercialization opportunities in the following domains:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;advanced collaboration tools&lt;/li&gt;
&lt;li&gt;development environment hosting&lt;/li&gt;
&lt;li&gt;web hosting&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;meet-our-team&quot;&gt;Meet our team&lt;/h2&gt;
&lt;p&gt;Our team:&lt;/p&gt;
</description>
<pubDate>Mon, 22 Oct 2018 15:55:22 +0000</pubDate>
<dc:creator>amasad</dc:creator>
<og:title>Repl.it raises $4.5M, announces a million monthly active users</og:title>
<og:description>We're thrilled to announce that we have raised a Seed round led by Andreessen Horowitz, with Marc Andreessen and Andrew Chen championing the deal.…</og:description>
<og:type>article</og:type>
<og:image>https://repl.it/public/images/blog/team.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://repl.it/site/blog/a16z</dc:identifier>
</item>
<item>
<title>WebAssembly’s post-MVP future</title>
<link>https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/</link>
<guid isPermaLink="true" >https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/</guid>
<description>&lt;p&gt;People have a misconception about WebAssembly. They think that the WebAssembly that landed in browsers back in 2017—which we called the minimum viable product (or MVP) of WebAssembly—is the final version of WebAssembly.&lt;/p&gt;&lt;p&gt;I can understand where that misconception comes from. The WebAssembly community group is really committed to backwards compatibility. This means that the WebAssembly that you create today &lt;strong&gt;will&lt;/strong&gt; continue working on browsers into the future.&lt;/p&gt;
&lt;p&gt;But that doesn’t mean that WebAssembly is feature complete. In fact, that’s far from the case. There are many features that are coming to WebAssembly which will fundamentally alter what you can do with WebAssembly.&lt;/p&gt;
&lt;p&gt;I think of these future features kind of like the skill tree in a videogame. We’ve fully filled in the top few of these skills, but there is still this whole skill tree below that we need to fill-in to unlock all of the applications.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-09-final-e1539904436477.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32795&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-09-final-e1539904436477-500x319.png&quot; alt=&quot;Skill tree showing WebAssembly skills which will be filled in through the course of the post.&quot; width=&quot;500&quot; height=&quot;319&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-07-runtime-09-final-e1539904436477-500x319.png 500w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-09-final-e1539904436477-250x159.png 250w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-09-final-e1539904436477-768x489.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So let’s look at what’s been filled in already, and then we can see what’s yet to come.&lt;/p&gt;
&lt;h2&gt;Minimum Viable Product (MVP)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-00-A-1-e1539904807805.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32853 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-00-A-1-e1539904807805-500x277.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;277&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-01-mvp-00-A-1-e1539904807805-500x277.png 500w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-00-A-1-e1539904807805-250x138.png 250w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-00-A-1-e1539904807805-768x425.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The very beginning of WebAssembly’s story starts with &lt;a href=&quot;http://kripken.github.io/emscripten-site/&quot;&gt;Emscripten&lt;/a&gt;, which made it possible to run C++ code on the web by transpiling it to JavaScript. This made it possible to bring large existing C++ code bases, for things like games and desktop applications, to the web.&lt;/p&gt;
&lt;p&gt;The JS it automatically generated was still significantly slower than the comparable native code, though. But Mozilla engineers found a type system hiding inside the generated JavaScript, and figured out how to &lt;a href=&quot;https://blog.mozilla.org/luke/2014/01/14/asm-js-aot-compilation-and-startup-performance/&quot;&gt;make this JavaScript run really fast&lt;/a&gt;. This subset of JavaScript was named &lt;a href=&quot;https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/asmjs.org&quot;&gt;asm.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the other browser vendors saw how fast asm.js was, they &lt;a href=&quot;https://hacks.mozilla.org/2015/03/asm-speedups-everywhere&quot;&gt;started adding the same optimizations&lt;/a&gt; to their engines, too.&lt;/p&gt;
&lt;p&gt;But that wasn’t the end of the story. It was just the beginning. There were still things that engines could do to make this faster.&lt;/p&gt;
&lt;p&gt;But they couldn’t do it in JavaScript itself. Instead, they needed a new language—one that was designed specifically to be compiled to. And that was WebAssembly.&lt;/p&gt;
&lt;p&gt;So what skills were needed for the first version of WebAssembly? What did we need to get to a minimum viable product that could actually run C and C++ efficiently on the web?&lt;/p&gt;
&lt;h3&gt;Skill: Compile target&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-01-SS-01-comp-target.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32797 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-01-SS-01-comp-target-e1539905023913-500x255.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;255&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-01-comp-target-e1539905023913-500x255.png 500w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-01-comp-target-e1539905023913-250x127.png 250w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-01-comp-target-e1539905023913-768x392.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;The folks working on WebAssembly knew they didn’t want to just support C and C++. They wanted many different languages to be able to compile to WebAssembly. So they needed a language-agnostic compile target.&lt;/p&gt;
&lt;p&gt;They needed something like the assembly language that things like desktop applications are compiled to—like x86. But this assembly language wouldn’t be for an actual, physical machine. It would be for a conceptual machine.&lt;/p&gt;
&lt;h3&gt;Skill: Fast execution&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-01-SS-02-fast-exec-e1539905310659.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32798 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-01-SS-02-fast-exec-e1539905310659-500x254.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;254&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-02-fast-exec-e1539905310659-500x254.png 500w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-02-fast-exec-e1539905310659-250x127.png 250w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-02-fast-exec-e1539905310659-768x390.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;That compiler target had to be designed so that it could run very fast. Otherwise, WebAssembly applications running on the web wouldn’t keep up with users’ expectations for smooth interactions and game play.&lt;/p&gt;
&lt;h3&gt;Skill: Compact&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-01-SS-03-compact-e1539905278906.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32804 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-01-SS-03-compact-e1539905278906-500x254.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;254&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-03-compact-e1539905278906-500x254.png 500w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-03-compact-e1539905278906-250x127.png 250w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-03-compact-e1539905278906-768x390.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;In addition to execution time, load time needed to be fast, too. Users have certain expectations about how quickly something will load. For desktop applications, that expectation is that they will load quickly because the application is already installed on your computer. For web apps, the expectation is also that load times will be fast, because web apps usually don’t have to load nearly as much code as desktop apps.&lt;/p&gt;
&lt;p&gt;When you combine these two things, though, it gets tricky. Desktop applications are usually pretty large code bases. So if they are on the web, there’s a lot to download and compile when the user first goes to the URL.&lt;/p&gt;
&lt;p&gt;To meet these expectations, we needed our compiler target to be compact. That way, it could go over the web quickly.&lt;/p&gt;
&lt;h3&gt;Skill: Linear memory&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-01-SS-04-linear-memory-e1539905361396.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32805 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-01-SS-04-linear-memory-e1539905361396-500x255.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;255&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-04-linear-memory-e1539905361396-500x255.png 500w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-04-linear-memory-e1539905361396-250x127.png 250w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-01-SS-04-linear-memory-e1539905361396-768x392.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;These languages also needed to be able to use memory differently from how JavaScript uses memory. They needed to be able to directly manage their memory—to say which bytes go together.&lt;/p&gt;
&lt;p&gt;This is because languages like C and C++ have a low-level feature called pointers. You can have a variable that doesn’t have a value in it, but instead has the memory address of the value. So if you’re going to support pointers, the program needs to be able to write and read from particular addresses.&lt;/p&gt;
&lt;p&gt;But you can’t have a program you downloaded from the web just accessing bytes in memory willy-nilly, using whatever addresses they want. So in order to create a secure way of giving access to memory, like a native program is used to, we had to create something that could give access to a very specific part of memory and nothing else.&lt;/p&gt;
&lt;p&gt;To do this, WebAssembly uses a linear memory model. This is implemented using TypedArrays. It’s basically just like a JavaScript array, except this array only contains bytes of memory. When you access data in it, you just use array indexes, which you can treat as though they were memory addresses. This means you can pretend this array is C++ memory.&lt;/p&gt;
&lt;h3&gt;Achievement unlocked&lt;/h3&gt;
&lt;p&gt;So with all of these skills in place, people could run desktop applications and games in your browser as if they were running natively on their computer.&lt;/p&gt;
&lt;p&gt;And that was pretty much the skill set that WebAssembly had when it was released as an MVP. It was truly an MVP—a minimum viable product.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-03-final-e1539905426663.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32806 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-01-mvp-03-final-e1539905426663-500x432.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;432&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-01-mvp-03-final-e1539905426663-500x432.png 500w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-03-final-e1539905426663-250x216.png 250w, https://hacks.mozilla.org/files/2018/10/01-01-mvp-03-final-e1539905426663-768x664.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;This allowed certain kinds of applications to work, but there were still a whole host of others to unlock.&lt;/p&gt;
&lt;h2&gt;Heavy-weight Desktop Applications&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-00-A.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32807 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-00-A-e1539905812771-500x277.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;277&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-00-A-e1539905812771-500x277.png 500w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-00-A-e1539905812771-250x138.png 250w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-00-A-e1539905812771-768x425.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;The next achievement to unlock is heavier weight desktop applications.&lt;/p&gt;
&lt;p&gt;Can you imagine if something like Photoshop were running in your browser? If you could instantaneously load it on any device like you do with Gmail?&lt;/p&gt;
&lt;p&gt;We’ve already started seeing things like this. For example, Autodesk’s AutoCAD team has made their CAD software available the browser. And Adobe has made Lightroom available through the browser using WebAssembly.&lt;/p&gt;
&lt;p&gt;But there are still a few features that we need to put in place to make sure that all of these applications—even the heaviest of heavy weight—can run well in the browser.&lt;/p&gt;
&lt;h3&gt;Skill: Threading&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-01-SS-01-threading-e1540219281254.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32808 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-01-SS-01-threading-e1540219281254-500x162.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;162&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-01-SS-01-threading-e1540219281254-500x162.png 500w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-01-SS-01-threading-e1540219281254-250x81.png 250w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-01-SS-01-threading-e1540219281254-768x248.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;First, we need support for multithreading. Modern-day computers have multiple cores. These are basically multiple brains that can all be working at the same time on your problem. That can make things go much faster, but to make use of these cores, you need support for threading.&lt;/p&gt;
&lt;h3&gt;Skill: SIMD&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-01-SS-02-SIMD-e1540219323375.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32809 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-01-SS-02-SIMD-e1540219323375-500x160.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;160&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-01-SS-02-SIMD-e1540219323375-500x160.png 500w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-01-SS-02-SIMD-e1540219323375-250x80.png 250w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-01-SS-02-SIMD-e1540219323375-768x245.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;Alongside threading, there’s another technique that utilizes modern hardware, and which enables you to process things in parallel.&lt;/p&gt;
&lt;p&gt;That is SIMD: single instruction multiple data. With SIMD, it’s possible to take a chunk of memory and split up across different execution units, which are kind of like cores. Then you have the same bit of code—the same instruction—run across all of those execution units, but they each apply that instruction to their own bit of the data.&lt;/p&gt;
&lt;h3&gt;Skill: 64-bit addressing&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-01-SS-03-wasm64-e1540219360998.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32810 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-01-SS-03-wasm64-e1540219360998-500x160.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;160&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-01-SS-03-wasm64-e1540219360998-500x160.png 500w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-01-SS-03-wasm64-e1540219360998-250x80.png 250w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-01-SS-03-wasm64-e1540219360998-768x245.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;Another hardware capability that WebAssembly needs to take full advantage of is 64-bit addressing.&lt;/p&gt;
&lt;p&gt;Memory addresses are just numbers, so if your memory addresses are only 32 bits long, you can only have so many memory addresses—enough for 4 gigabytes of linear memory.&lt;/p&gt;
&lt;p&gt;But with 64-bit addressing, you have 16 exabytes. Of course, you don’t have 16 exabytes of actual memory in your computer. So the maximum is subject to however much memory the system can actually give you. But this will take the artificial limitation on address space out of WebAssembly.&lt;/p&gt;
&lt;h3&gt;Skill: Streaming compilation&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-02-SS-01-streaming-e1539905897570.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32811 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-02-SS-01-streaming-e1539905897570-500x365.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;365&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-01-streaming-e1539905897570-500x365.png 500w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-01-streaming-e1539905897570-250x182.png 250w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-01-streaming-e1539905897570-768x560.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;For these applications, we don’t just need them to run fast. We needed load times to be even faster than they already were. There are a few skills that we need specifically to improve load times.&lt;/p&gt;
&lt;p&gt;One big step is to do streaming compilation—to compile a WebAssembly file while it’s still being downloaded. WebAssembly was designed specifically to enable easy streaming compilation. In Firefox, we actually compile it so fast—&lt;a href=&quot;https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/&quot;&gt;faster than it is coming in over the network&lt;/a&gt;— that it’s pretty much done compiling by the time you download the file. And other browsers are adding streaming, too.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-02-SS-02-tiered-e1540219464572.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32812 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-02-SS-02-tiered-e1540219464572-500x361.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;361&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-02-tiered-e1540219464572-500x361.png 500w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-02-tiered-e1540219464572-250x180.png 250w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-02-tiered-e1540219464572-768x554.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;Another thing that helps is having a tiered compiler.&lt;/p&gt;
&lt;p&gt;For us in Firefox, that means having &lt;a href=&quot;https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/&quot;&gt;two compilers&lt;/a&gt;. The first one—the baseline compiler—kicks in as soon as the file starts downloading. It compiles the code really quickly so that it starts up quickly.&lt;/p&gt;
&lt;p&gt;The code it generates is fast, but not 100% as fast as it could be. To get that extra bit of performance, we run another compiler—the optimizing compiler—on several threads in the background. This one takes longer to compile, but generates extremely fast code. Once it’s done, we swap out the baseline version with the fully optimized version.&lt;/p&gt;
&lt;p&gt;This way, we get quick start up times with the baseline compiler, and fast execution times with the optimizing compiler.&lt;/p&gt;
&lt;p&gt;In addition, we’re working on a new optimizing compiler called &lt;a href=&quot;https://github.com/CraneStation/cranelift&quot;&gt;Cranelift&lt;/a&gt;. Cranelift is designed to compile code quickly, in parallel at a function by function level. At the same time, the code it generates gets even better performance than our current optimizing compiler.&lt;/p&gt;
&lt;p&gt;Cranelift is in the development version of Firefox right now, but disabled by default. Once we enable it, we’ll get to the fully optimized code even quicker, and that code will run even faster.&lt;/p&gt;
&lt;p&gt;But there’s an even better trick we can use to make it so we don’t have to compile at all most of the time…&lt;/p&gt;
&lt;h3&gt;Skill: Implicit HTTP caching&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-02-SS-03-http-e1540219501952.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32816 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-02-SS-03-http-e1540219501952-500x359.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;359&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-03-http-e1540219501952-500x359.png 500w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-03-http-e1540219501952-250x180.png 250w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-03-http-e1540219501952-768x551.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;With WebAssembly, if you load the same code on two page loads, it will compile to the same machine code. It doesn’t need to change based on what data is flowing through it, like the JS JIT compiler needs to.&lt;/p&gt;
&lt;p&gt;This means that we can store the compiled code in the HTTP cache. Then when the page is loading and goes to fetch the .wasm file, it will instead just pull out the precompiled machine code from the cache. This skips compiling completely for any page that you’ve already visited that’s in cache.&lt;/p&gt;
&lt;h3&gt;Skill: Other improvements&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-02-SS-04-other-e1540219569386.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32817 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-02-SS-04-other-e1540219569386-500x359.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;359&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-04-other-e1540219569386-500x359.png 500w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-04-other-e1540219569386-250x180.png 250w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-02-SS-04-other-e1540219569386-768x551.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;Many discussions are currently percolating around other ways to improve this, skipping even more work, so stay tuned for other load-time improvements.&lt;/p&gt;
&lt;h3&gt;Where are we with this?&lt;/h3&gt;
&lt;p&gt;Where are we with supporting these heavyweight applications right now?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-03-P-07-e1540219610872.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32818 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-03-P-07-e1540219610872-500x359.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;359&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-03-P-07-e1540219610872-500x359.png 500w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-03-P-07-e1540219610872-250x180.png 250w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-03-P-07-e1540219610872-768x551.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;Threading&lt;/dt&gt;
&lt;dd&gt;For the threading, we have &lt;a href=&quot;https://github.com/WebAssembly/threads&quot;&gt;a proposal&lt;/a&gt; that’s pretty much done, but a key piece of that—&lt;a href=&quot;https://hacks.mozilla.org/2017/06/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers/&quot;&gt;SharedArrayBuffers&lt;/a&gt;—had to be &lt;a href=&quot;https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/&quot;&gt;turned off in browsers&lt;/a&gt; earlier this year.&lt;br/&gt;They will be turned on again. Turning them off was just a temporary measure to reduce the impact of the Spectre security issue that was discovered in CPUs and disclosed earlier this year, but progress is being made, so stay tuned.&lt;/dd&gt;
&lt;dt&gt;SIMD&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&quot;https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md&quot;&gt;SIMD&lt;/a&gt; is under very active development at the moment.&lt;/dd&gt;
&lt;dt&gt;64-bit addressing&lt;/dt&gt;
&lt;dd&gt;For &lt;a href=&quot;https://github.com/WebAssembly/design/blob/master/FutureFeatures.md#linear-memory-bigger-than-4-gib&quot;&gt;wasm-64&lt;/a&gt;, we have a good picture of how we will add this, and it is pretty similar to how x86 or ARM got support for 64 bit addressing.&lt;/dd&gt;
&lt;dt&gt;Streaming compilation&lt;/dt&gt;
&lt;dd&gt;We added &lt;a href=&quot;https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/&quot;&gt;streaming compilation&lt;/a&gt; in late 2017, and other browsers are working on it too.&lt;/dd&gt;
&lt;dt&gt;Tiered compilation&lt;/dt&gt;
&lt;dd&gt;We added our &lt;a href=&quot;https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/&quot;&gt;baseline compiler&lt;/a&gt; in late 2017 as well, and other browsers have been adding the same kind of architecture over the past year.&lt;/dd&gt;
&lt;dt&gt;Implicit HTTP caching&lt;/dt&gt;
&lt;dd&gt;In Firefox, we’re &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1487113&quot;&gt;getting close&lt;/a&gt; to landing support for implicit HTTP caching.&lt;/dd&gt;
&lt;dt&gt;Other improvements&lt;/dt&gt;
&lt;dd&gt;Other improvements are currently in discussion.&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;Even though this is all still in progress, you already see some of these heavyweight applications coming out today, because WebAssembly already gives these apps the performance that they need.&lt;/p&gt;
&lt;p&gt;But once these features are all in place, that’s going to be another achievement unlocked, and more of these heavyweight applications will be able to come to the browser.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-04-final-e1540219657102.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32819 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-02-heavyweight-04-final-e1540219657102-500x453.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;453&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-04-final-e1540219657102-500x453.png 500w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-04-final-e1540219657102-250x227.png 250w, https://hacks.mozilla.org/files/2018/10/01-02-heavyweight-04-final-e1540219657102-768x696.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Small modules interoperating with JavaScript&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-00-A.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32820&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-00-A-500x281.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;281&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-04-js-interop-00-A-500x281.png 500w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-00-A-220x125.png 220w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-00-A-250x141.png 250w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-00-A-768x432.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;But WebAssembly isn’t just for games and for heavyweight applications. It’s also meant for regular web development… for the kind of web development folks are used to: the small modules kind of web development.&lt;/p&gt;
&lt;p&gt;Sometimes you have little corners of your app that do a lot of heavy processing, and in some cases, this processing can be faster with WebAssembly. We want to make it easy to port these bits to WebAssembly.&lt;/p&gt;
&lt;p&gt;Again, this is a case where some of it’s already happening. Developers are already incorporating WebAssembly modules in places where there are tiny modules doing lots of heavy lifting.&lt;/p&gt;
&lt;p&gt;One example is the parser in the source map library that’s used in Firefox’s DevTools and webpack. It was &lt;a href=&quot;https://hacks.mozilla.org/2018/01/oxidizing-source-maps-with-rust-and-webassembly/&quot;&gt;rewritten in Rust&lt;/a&gt;, compiled to WebAssembly, which made it 11x faster. And WordPress’s Gutenberg parser is &lt;a href=&quot;https://mnt.io/2018/08/22/from-rust-to-beyond-the-webassembly-galaxy/&quot;&gt;on average 86x faster&lt;/a&gt; after doing the same kind of rewrite.&lt;/p&gt;
&lt;p&gt;But for this kind of use to really be widespread—for people to be really comfortable doing it—we need to have a few more things in place.&lt;/p&gt;
&lt;h3&gt;Skill: Fast calls between JS and WebAssembly&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-01-SS-01-call-opts-e1540220093322.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32823 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-01-SS-01-call-opts-e1540220093322-500x260.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;260&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-01-call-opts-e1540220093322-500x260.png 500w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-01-call-opts-e1540220093322-250x130.png 250w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-01-call-opts-e1540220093322-768x399.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;First, we need fast calls between JS and WebAssembly, because if you’re integrating a small module into an existing JS system, there’s a good chance you’ll need to call between the two a lot. So you’ll need those calls to be fast.&lt;/p&gt;
&lt;p&gt;But when WebAssembly first came out, these calls weren’t fast. This is where we get back to that whole MVP thing—the engines had the minimum support for calls between the two. They just made the calls work, they didn’t make them fast. So engines need to optimize these.&lt;/p&gt;
&lt;p&gt;We’ve recently finished our work on this in Firefox. Now some of these calls are actually &lt;a href=&quot;https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast/&quot;&gt;faster than non-inlined JavaScript to JavaScript calls.&lt;/a&gt; And others engines are also working on this.&lt;/p&gt;
&lt;h3&gt;Skill: Fast and easy data exchange&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-01-SS-02-data-exchange-e1540220133991.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32824 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-01-SS-02-data-exchange-e1540220133991-500x260.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;260&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-02-data-exchange-e1540220133991-500x260.png 500w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-02-data-exchange-e1540220133991-250x130.png 250w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-02-data-exchange-e1540220133991-768x399.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;That brings us to another thing, though. When you’re calling between JavaScript and WebAssembly, you often need to pass data between them.&lt;/p&gt;
&lt;p&gt;You need to pass values into the WebAssembly function or return a value from it. This can also be slow, and it can be difficult too.&lt;/p&gt;
&lt;p&gt;There are a couple of reasons it’s hard. One is because, at the moment, WebAssembly only understands numbers. This means that you can’t pass more complex values, like objects, in as parameters. You need to convert that object into numbers and put it in the linear memory. Then you pass WebAssembly the location in the linear memory.&lt;/p&gt;
&lt;p&gt;That’s kind of complicated. And it takes some time to convert the data into linear memory. So we need this to be easier and faster.&lt;/p&gt;
&lt;h3&gt;Skill: ES module integration&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-01-SS-03-es-module-e1540220169128.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32825 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-01-SS-03-es-module-e1540220169128-500x259.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;259&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-03-es-module-e1540220169128-500x259.png 500w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-03-es-module-e1540220169128-250x129.png 250w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-03-es-module-e1540220169128-768x397.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;Another thing we need is integration with the browser’s built in ES module support. Right now, you instantiate a WebAssembly module using an imperative API. You call a function and it gives you back a module.&lt;/p&gt;
&lt;p&gt;But that means that the WebAssembly module isn’t really part of the JS module graph. In order to use import and export like you do with JS modules, you need to have ES module integration.&lt;/p&gt;
&lt;h3&gt;Skill: Toolchain integration&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-01-SS-04-toolchain-e1540220201137.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32826 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-01-SS-04-toolchain-e1540220201137-500x260.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;260&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-04-toolchain-e1540220201137-500x260.png 500w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-04-toolchain-e1540220201137-250x130.png 250w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-04-toolchain-e1540220201137-768x399.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;Just being able to import and export doesn’t get us all the way there, though. We need a place to distribute these modules, and download them from, and tools to bundle them up.&lt;/p&gt;
&lt;p&gt;What’s the npm for WebAssembly? Well, what about npm?&lt;/p&gt;
&lt;p&gt;And what’s the webpack or Parcel for WebAssembly? Well, what about webpack and Parcel?&lt;/p&gt;
&lt;p&gt;These modules shouldn’t look any different to the people who are using them, so no reason to create a separate ecosystem. We just need tools to integrate with them.&lt;/p&gt;
&lt;h3&gt;Skill: Backwards compatibility&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-01-SS-05-bc-compat-e1540220231412.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32827 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-01-SS-05-bc-compat-e1540220231412-500x259.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;259&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-05-bc-compat-e1540220231412-500x259.png 500w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-05-bc-compat-e1540220231412-250x129.png 250w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-01-SS-05-bc-compat-e1540220231412-768x397.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;There’s one more thing that we need to really do well in existing JS applications—support older versions of browsers, even those browsers that don’t know what WebAssembly is. We need to make sure that you don’t have to write a whole second implementation of your module in JavaScript just so that you can support IE11.&lt;/p&gt;
&lt;h3&gt;Where are we on this?&lt;/h3&gt;
&lt;p&gt;So where are we on this?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-02-P-05-e1540220264112.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32828 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-02-P-05-e1540220264112-500x257.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;257&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-04-js-interop-02-P-05-e1540220264112-500x257.png 500w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-02-P-05-e1540220264112-250x129.png 250w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-02-P-05-e1540220264112-768x395.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;dl readability=&quot;22.751115075825&quot;&gt;&lt;dt&gt;Fast calls between JS and WebAssembly&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&quot;https://hacks.mozilla.org/?p=32717&quot;&gt;Calls between JS and WebAssembly are fast in Firefox now&lt;/a&gt;, and other browsers are also working on this.&lt;/dd&gt;
&lt;dt&gt;Easy and fast data exchange&lt;/dt&gt;
&lt;dd readability=&quot;49.032283464567&quot;&gt;For easy and fast data exchange, there are a few proposals that will help with this.
&lt;p&gt;As I mentioned before, one reason you have to use linear memory for more complex kinds of data is because WebAssembly only understands numbers. The only types it has are ints and floats.&lt;/p&gt;
&lt;p&gt;With the &lt;a href=&quot;https://github.com/WebAssembly/reference-types/blob/master/proposals/reference-types/Overview.md&quot;&gt;reference types proposal&lt;/a&gt;, this will change. This proposal adds a new type that WebAssembly functions can take as arguments and return. And this type is a reference to an object from outside WebAssembly—for example, a JavaScript object.&lt;/p&gt;
&lt;p&gt;But WebAssembly can’t operate directly on this object. To actually do things like call a method on it, it will still need to use some JavaScript glue. This means it works, but it’s slower than it needs to be.&lt;/p&gt;
&lt;p&gt;To speed things up, there’s a proposal that we’ve been calling the &lt;a href=&quot;https://github.com/WebAssembly/host-bindings/blob/master/proposals/host-bindings/Overview.md&quot;&gt;host bindings proposal&lt;/a&gt;. It let’s a wasm module declare what glue must be applied to its imports and exports, so that the glue doesn’t need to be written in JS. By pulling glue from JS into wasm, the glue can be optimized away completely when calling builtin Web APIs.&lt;/p&gt;
&lt;p&gt;There’s one more part of the interaction that we can make easier. And that has to do with keeping track of how long data needs to stay in memory. If you have some data in linear memory that JS needs access to, then you have to leave it there until the JS reads the data. But if you leave it in there forever, you have what’s called a memory leak. How do you know when you can delete the data? How do you know when JS is done with it? Currently, you have to manage this yourself.&lt;/p&gt;
&lt;p&gt;Once the JS is done with the data, the JS code has to call something like a free function to free the memory. But this is tedious and error prone. To make this process easier, we’re adding &lt;a href=&quot;https://github.com/tc39/proposal-weakrefs&quot;&gt;WeakRefs&lt;/a&gt; to JavaScript. With this, you will be able to observe objects on the JS side. Then you can do cleanup on the WebAssembly side when that object is garbage collected.&lt;/p&gt;
&lt;p&gt;So these proposals are all in flight. In the meantime, the &lt;a href=&quot;https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/&quot;&gt;Rust ecosystem has created tools&lt;/a&gt; that automate this all for you, and that polyfill the proposals that are in flight.&lt;/p&gt;
&lt;p&gt;One tool in particular is worth mentioning, because other languages can use it too. It’s called &lt;a href=&quot;https://rustwasm.github.io/wasm-bindgen/&quot;&gt;wasm-bindgen&lt;/a&gt;. When it sees that your Rust code should do something like receive or return certain kinds of JS values or DOM objects, it will automatically create JavaScript glue code that does this for you, so you don’t need to think about it. And because it’s written in a language independent way, other language toolchains can adopt it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;ES module integration&lt;/dt&gt;
&lt;dd&gt;For ES module integration, &lt;a href=&quot;https://github.com/WebAssembly/esm-integration/tree/master/proposals/esm-integration&quot;&gt;the proposal&lt;/a&gt; is pretty far along. We are starting work with the browser vendors to implement it.&lt;/dd&gt;
&lt;dt&gt;Toolchain support&lt;/dt&gt;
&lt;dd&gt;For toolchain support, there are tools like &lt;a href=&quot;https://github.com/rustwasm/wasm-pack&quot;&gt;&lt;code&gt;wasm-pack&lt;/code&gt;&lt;/a&gt; in the Rust ecosystem which automatically runs everything you need to package your code for npm. And the bundlers are also actively working on support.&lt;/dd&gt;
&lt;dt&gt;Backwards compatibility&lt;/dt&gt;
&lt;dd&gt;Finally, for backwards compatibility, there’s the &lt;code&gt;wasm2js&lt;/code&gt; tool. That takes a wasm file and spits out the equivalent JS. That JS isn’t going to be fast, but at least that means it will work in older versions of browsers that don’t understand WebAssembly.&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;So we’re getting close to unlocking this achievement. And once we unlock it, we open the path to another two.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-03-final-e1540220313636.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32829 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-04-js-interop-03-final-e1540220313636-500x270.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;270&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-04-js-interop-03-final-e1540220313636-500x270.png 500w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-03-final-e1540220313636-250x135.png 250w, https://hacks.mozilla.org/files/2018/10/01-04-js-interop-03-final-e1540220313636-768x415.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;JS frameworks and compile-to-JS languages&lt;/h2&gt;
&lt;p&gt;One is rewriting large parts of things like JavaScript frameworks in WebAssembly.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-01-A-01-frameworks-e1540220354792.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32830 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-01-A-01-frameworks-e1540220354792-500x273.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;273&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-05-high-level-01-A-01-frameworks-e1540220354792-500x273.png 500w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-01-A-01-frameworks-e1540220354792-250x136.png 250w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-01-A-01-frameworks-e1540220354792-768x419.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;The other is making it possible for statically-typed compile-to-js languages to compile to WebAssembly instead—for example, having languages like &lt;a href=&quot;https://www.scala-js.org/&quot;&gt;Scala.js&lt;/a&gt;, or &lt;a href=&quot;https://reasonml.github.io/&quot;&gt;Reason&lt;/a&gt;, or &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; compile to WebAssembly.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-01-A-02-langs-e1540220481271.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32831 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-01-A-02-langs-e1540220481271-500x275.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;275&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-05-high-level-01-A-02-langs-e1540220481271-500x275.png 500w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-01-A-02-langs-e1540220481271-250x138.png 250w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-01-A-02-langs-e1540220481271-768x423.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;For both of these use cases, WebAssembly needs to support high-level language features.&lt;/p&gt;
&lt;h3&gt;Skill: GC&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-02-SS-01-gc-e1540220514444.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32832 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-02-SS-01-gc-e1540220514444-500x159.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;159&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-01-gc-e1540220514444-500x159.png 500w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-01-gc-e1540220514444-250x79.png 250w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-01-gc-e1540220514444-768x244.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;We need integration with the browser’s garbage collector for a couple of reasons.&lt;/p&gt;
&lt;p&gt;First, let’s look at rewriting parts of JS frameworks. This could be good for a couple of reasons. For example, in React, one thing you could do is rewrite the DOM diffing algorithm in Rust, which has very ergonomic multithreading support, and parallelize that algorithm.&lt;/p&gt;
&lt;p&gt;You could also speed things up by allocating memory differently. In the virtual DOM, instead of creating a bunch of objects that need to be garbage collected, you could used a special memory allocation scheme. For example, you could use a bump allocator scheme which has extremely cheap allocation and all-at-once deallocation. That could potentially help speed things up and reduce memory usage.&lt;/p&gt;
&lt;p&gt;But you’d still need to interact with JS objects—things like components—from that code. You can’t just continually copy everything in and out of linear memory, because that would be difficult and inefficient.&lt;/p&gt;
&lt;p&gt;So you need to be able to integrate with the browser’s GC so you can work with components that are managed by the JavaScript VM. Some of these JS objects need to point to data in linear memory, and sometimes the data in linear memory will need to point out to JS objects.&lt;/p&gt;
&lt;p&gt;If this ends up creating cycles, it can mean trouble for the garbage collector. It means the garbage collector won’t be able to tell if the objects are used anymore, so they will never be collected. WebAssembly needs integration with the GC to make sure these kinds of cross-language data dependencies work.&lt;/p&gt;
&lt;p&gt;This will also help statically-typed languages that compile to JS, like Scala.js, Reason, Kotlin or Elm. These language use JavaScript’s garbage collector when they compile to JS. Because WebAssembly can use that same GC—the one that’s built into the engine—these languages will be able to compile to WebAssembly instead and use that same garbage collector. They won’t need to change how GC works for them.&lt;/p&gt;
&lt;h3&gt;Skill: Exception handling&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-02-SS-02-exception-e1540220563466.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32833 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-02-SS-02-exception-e1540220563466-500x155.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;155&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-02-exception-e1540220563466-500x155.png 500w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-02-exception-e1540220563466-250x77.png 250w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-02-exception-e1540220563466-768x238.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;We also need better support for handling exceptions.&lt;/p&gt;
&lt;p&gt;Some languages, like Rust, do without exceptions. But in other languages, like C++, JS or C#, exception handling is sometimes used extensively.&lt;/p&gt;
&lt;p&gt;You can polyfill exception handling currently, but the polyfill makes the code run really slowly. So the default when compiling to WebAssembly is currently to compile without exception handling.&lt;/p&gt;
&lt;p&gt;However, since JavaScript has exceptions, even if you’ve compiled your code to not use them, JS may throw one into the works. If your WebAssembly function calls a JS function that throws, then the WebAssembly module won’t be able to correctly handle the exception. So languages like Rust choose to abort in this case. We need to make this work better.&lt;/p&gt;
&lt;h3&gt;Skill: Debugging&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-02-SS-03-debugging.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32834 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-02-SS-03-debugging-e1540220592314-500x159.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;159&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-03-debugging-e1540220592314-500x159.png 500w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-03-debugging-e1540220592314-250x79.png 250w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-03-debugging-e1540220592314-768x244.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;Another thing that people working with JS and compile-to-JS languages are used to having is good debugging support. Devtools in all of the major browsers make it easy to step through JS. We need this same level of support for debugging WebAssembly in browsers.&lt;/p&gt;
&lt;h3&gt;Skill: Tail calls&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-02-SS-04-tail-calls-e1540220637629.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32835 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-02-SS-04-tail-calls-e1540220637629-500x160.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;160&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-04-tail-calls-e1540220637629-500x160.png 500w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-04-tail-calls-e1540220637629-250x80.png 250w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-02-SS-04-tail-calls-e1540220637629-768x246.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;And finally, for many functional languages, you need to have support for something called &lt;a href=&quot;https://en.wikipedia.org/wiki/Tail_call&quot;&gt;tail calls&lt;/a&gt;. I’m not going to get too into the details on this, but basically it lets you call a new function without adding a new stack frame to the stack. So for functional languages that support this, we want WebAssembly to support it too.&lt;/p&gt;
&lt;h3&gt;Where are we on this?&lt;/h3&gt;
&lt;p&gt;So where are we on this?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-03-P-04.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32836 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-03-P-04-e1540220662110-500x156.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;156&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-05-high-level-03-P-04-e1540220662110-500x156.png 500w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-03-P-04-e1540220662110-250x78.png 250w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-03-P-04-e1540220662110-768x240.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;dl readability=&quot;4.6780424983902&quot;&gt;&lt;dt&gt;Garbage collection&lt;/dt&gt;
&lt;dd readability=&quot;12.454198473282&quot;&gt;For garbage collection, there are two proposals currently underway:
&lt;p&gt;The &lt;a href=&quot;https://github.com/tschneidereit/typed-objects-explainer&quot;&gt;Typed Objects proposal&lt;/a&gt; for JS, and the &lt;a href=&quot;https://github.com/WebAssembly/gc&quot;&gt;GC proposal&lt;/a&gt; for WebAssembly. Typed Objects will make it possible to describe an object’s fixed structure. There is an explainer for this, and the proposal will be discussed at an upcoming TC39 meeting.&lt;/p&gt;
&lt;p&gt;The WebAssembly GC proposal will make it possible to directly access that structure. This proposal is under active development.&lt;/p&gt;
&lt;p&gt;With both of these in place, both JS and WebAssembly know what an object looks like and can share that object and efficiently access the data stored on it. Our team actually already has a prototype of this working. However, it still will take some time for these to go through standardization so we’re probably looking at sometime next year.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Exception handling&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&quot;https://github.com/WebAssembly/exception-handling/blob/master/proposals/Level-1.md&quot;&gt;Exception handling&lt;/a&gt; is still in the research and development phase, and there’s work now to see if it can take advantage of other proposals like the reference types proposal I mentioned before.&lt;/dd&gt;
&lt;dt&gt;Debugging&lt;/dt&gt;
&lt;dd&gt;For debugging, there is currently some support in browser devtools. For example, you can step through the text format of WebAssembly in Firefox debugger.But it’s still not ideal. We want to be able to show you where you are in your actual source code, not in the assembly. The thing that we need to do for that is figure out how source maps—or a source maps type thing—work for WebAssembly. So there’s a &lt;a href=&quot;https://github.com/WebAssembly/debugging/blob/master/Charter.md&quot;&gt;subgroup of the WebAssembly CG&lt;/a&gt; working on specifying that.&lt;/dd&gt;
&lt;dt&gt;Tail calls&lt;/dt&gt;
&lt;dd&gt;The &lt;a href=&quot;https://github.com/WebAssembly/tail-call/blob/master/proposals/tail-call/Overview.md&quot;&gt;tail calls proposal&lt;/a&gt; is also underway.&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;Once those are all in place, we’ll have unlocked JS frameworks and many compile-to-JS languages.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-04-final.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32837 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-05-high-level-04-final-e1540220704600-500x405.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;405&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-05-high-level-04-final-e1540220704600-500x405.png 500w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-04-final-e1540220704600-250x202.png 250w, https://hacks.mozilla.org/files/2018/10/01-05-high-level-04-final-e1540220704600-768x621.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;So, those are all achievements we can unlock inside the browser. But what about outside the browser?&lt;/p&gt;

&lt;p&gt;Now, you may be confused when I talk about “outside the browser”. Because isn’t the browser what you use to view the web? And isn’t that right in the name—WebAssembly.&lt;/p&gt;
&lt;p&gt;But the truth is the things you see in the browser—the HTML and CSS and JavaScript—are only part of what makes the web. They are the visible part—they are what you use to create a user interface—so they are the most obvious.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-02-browser-toolbox-e1540221152912.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32865&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-02-browser-toolbox-e1540221152912-500x220.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;220&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-06-intro-02-browser-toolbox-e1540221152912-500x220.png 500w, https://hacks.mozilla.org/files/2018/10/01-06-intro-02-browser-toolbox-e1540221152912-250x110.png 250w, https://hacks.mozilla.org/files/2018/10/01-06-intro-02-browser-toolbox-e1540221152912-768x338.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;But there’s another really important part of the web which has properties that aren’t as visible.&lt;/p&gt;
&lt;p&gt;That is the link. And it is a very special kind of link.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-03-link-e1540220782538.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32839 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-03-link-e1540220782538-500x216.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;216&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-06-intro-03-link-e1540220782538-500x216.png 500w, https://hacks.mozilla.org/files/2018/10/01-06-intro-03-link-e1540220782538-250x108.png 250w, https://hacks.mozilla.org/files/2018/10/01-06-intro-03-link-e1540220782538-768x332.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;The innovation of this link is that I can link to your page without having to put it in a central registry, and without having to ask you or even know who you are. I can just put that link there.&lt;/p&gt;
&lt;p&gt;It’s this ease of linking, without any oversight or approval bottlenecks, that enabled our web. That’s what enabled us to form these global communities with people we didn’t know.&lt;/p&gt;
&lt;p&gt;But if all we have is the link, there are two problems here that we haven’t addressed.&lt;/p&gt;
&lt;p&gt;The first one is… you go visit this site and it delivers some code to you. How does it know what kind of code it should deliver to you? Because if you’re running on a Mac, then you need different machine code than you do on Windows. That’s why you have different versions of programs for different operating systems.&lt;/p&gt;
&lt;p&gt;Then should a web site have a different version of the code for every possible device? No.&lt;/p&gt;
&lt;p&gt;Instead, the site has one version of the code—the source code. This is what’s delivered to the user. Then it gets translated to machine code on the user’s device.&lt;/p&gt;
&lt;p&gt;The name for this concept is portability.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-04-portability-02-e1540220821857.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32840 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-04-portability-02-e1540220821857-500x340.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;340&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-06-intro-04-portability-02-e1540220821857-500x340.png 500w, https://hacks.mozilla.org/files/2018/10/01-06-intro-04-portability-02-e1540220821857-250x170.png 250w, https://hacks.mozilla.org/files/2018/10/01-06-intro-04-portability-02-e1540220821857-768x522.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;So that’s great, you can load code from people who don’t know you and don’t know what kind of device you’re running.&lt;/p&gt;
&lt;p&gt;But that brings us to a second problem. If you don’t know these people who’s web pages you’re loading, how do you know what kind of code they’re giving you? It could be malicious code. It could be trying to take over your system.&lt;/p&gt;
&lt;p&gt;Doesn’t this vision of the web—running code from anybody who’s link you follow—mean that you have to blindly trust anyone who’s on the web?&lt;/p&gt;
&lt;p&gt;This is where the other key concept from the web comes in.&lt;/p&gt;
&lt;p&gt;That’s the security model. I’m going to call it the sandbox.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-04-security-02-e1540220859323.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32841 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-04-security-02-e1540220859323-500x246.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;246&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-06-intro-04-security-02-e1540220859323-500x246.png 500w, https://hacks.mozilla.org/files/2018/10/01-06-intro-04-security-02-e1540220859323-250x123.png 250w, https://hacks.mozilla.org/files/2018/10/01-06-intro-04-security-02-e1540220859323-768x378.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;Basically, the browser takes the page—that other person’s code—and instead of letting it run around willy-nilly in your system, it puts it in a sandbox. It puts a couple of toys that aren’t dangerous into that sandbox so that the code can do some things, but it leaves the dangerous things outside of the sandbox.&lt;/p&gt;
&lt;p&gt;So the utility of the link is based on these two things:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Portability—the ability to deliver code to users and have it run on any type of device that can run a browser.&lt;/li&gt;
&lt;li&gt;And the sandbox—the security model that lets you run that code without risking the integrity of your machine.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So why does this distinction matter? Why does it make a difference if we think of the web as something that the browser shows us using HTML, CSS, and JS, or if we think of the web in terms of portability and the sandbox?&lt;/p&gt;
&lt;p&gt;Because it changes how you think about WebAssembly.&lt;/p&gt;
&lt;p&gt;You can think about WebAssembly as just another tool in the browser’s toolbox… which it is.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-04-wasm-in-tb-1-e1540221053348.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32864&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-04-wasm-in-tb-1-e1540221053348-500x225.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;225&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-06-intro-04-wasm-in-tb-1-e1540221053348-500x225.png 500w, https://hacks.mozilla.org/files/2018/10/01-06-intro-04-wasm-in-tb-1-e1540221053348-250x113.png 250w, https://hacks.mozilla.org/files/2018/10/01-06-intro-04-wasm-in-tb-1-e1540221053348-768x346.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;It is another tool in the browser’s toolbox. But it’s not just that. It also gives us a way to take these other two capabilities of the web—the portability and the security model—and take them to other use cases that need them too.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-06-expand-02-e1540220978397.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32843 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-intro-06-expand-02-e1540220978397-500x219.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;219&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-06-intro-06-expand-02-e1540220978397-500x219.png 500w, https://hacks.mozilla.org/files/2018/10/01-06-intro-06-expand-02-e1540220978397-250x109.png 250w, https://hacks.mozilla.org/files/2018/10/01-06-intro-06-expand-02-e1540220978397-768x336.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can expand the web past the boundaries of the browser. Now let’s look at where these attributes of the web would be useful.&lt;/p&gt;
&lt;h2&gt;Node.js&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-node-01-A-e1540221197730.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32845 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-node-01-A-e1540221197730-500x277.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;277&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-06-node-01-A-e1540221197730-500x277.png 500w, https://hacks.mozilla.org/files/2018/10/01-06-node-01-A-e1540221197730-250x138.png 250w, https://hacks.mozilla.org/files/2018/10/01-06-node-01-A-e1540221197730-768x425.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;How could WebAssembly help Node? It could bring full portability to Node.&lt;/p&gt;
&lt;p&gt;Node gives you most of the portability of JavaScript on the web. But there are lots of cases where Node’s JS modules aren’t quite enough—where you need to improve performance or reuse existing code that’s not written in JS.&lt;/p&gt;
&lt;p&gt;In these cases, you need Node’s native modules. These modules are written in languages like C, and they need to be compiled for the specific kind of machine that the user is running on.&lt;/p&gt;
&lt;p&gt;Native modules are either compiled when the user installs, or precompiled into binaries for a wide matrix of different systems. One of these approaches is a pain for the user, the other is a pain for the package maintainer.&lt;/p&gt;
&lt;p&gt;Now, if these native modules were written in WebAssembly instead, then they wouldn’t need to be compiled specifically for the target architecture. Instead, they’d just run like the JavaScript in Node runs. But they’d do it at nearly native performance.&lt;/p&gt;
&lt;p&gt;So we get to full portability for the code running in Node. You could take the exact same Node app and run it across all different kinds of devices without having to compile anything.&lt;/p&gt;
&lt;p&gt;But WebAssembly doesn’t have direct access to the system’s resources. Native modules in Node aren’t sandboxed—they have full access to all of the dangerous toys that the browser keeps out of the sandbox. In Node, JS modules also have access to these dangerous toys because Node makes them available. For example, Node provides methods for reading from and writing files to the system.&lt;/p&gt;
&lt;p&gt;For Node’s use case, it makes a certain amount of sense for modules to have this kind access to dangerous system APIs. So if WebAssembly modules don’t have that kind of access by default (like Node’s current modules do), how could we give WebAssembly modules the access they need? We’d need to pass in functions so that the WebAssembly module can work with the operating system, just as Node does with JS.&lt;/p&gt;
&lt;p&gt;For Node, this will probably include a lot of the functionality that’s in things like the C standard library. It would also likely include things that are part of &lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX&quot;&gt;POSIX&lt;/a&gt;—the Portable Operating System Interface—which is an older standard that helps with compatibility. It provides one API for interacting with the system across a bunch of different Unix-like OSs. Modules would definitely need a bunch of POSIX-like functions.&lt;/p&gt;
&lt;h3&gt;Skill: Portable interface&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-node-01-SS-e1540221292681.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32846 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-node-01-SS-e1540221292681-500x194.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;194&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-06-node-01-SS-e1540221292681-500x194.png 500w, https://hacks.mozilla.org/files/2018/10/01-06-node-01-SS-e1540221292681-250x97.png 250w, https://hacks.mozilla.org/files/2018/10/01-06-node-01-SS-e1540221292681-768x298.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;What the Node core folks would need to do is figure out the set of functions to expose and the API to use.&lt;/p&gt;
&lt;p&gt;But wouldn’t it be nice if that were actually something standard? Not something that was specific to just Node, but could be used across other runtimes and use cases too?&lt;/p&gt;
&lt;p&gt;A POSIX for WebAssembly if you will. A PWSIX? A portable WebAssembly system interface.&lt;/p&gt;
&lt;p&gt;And if that were done in the right way, you could even implement the same API for the web. These standard APIs could be polyfilled onto existing Web APIs.&lt;/p&gt;
&lt;p&gt;These functions wouldn’t be part of the WebAssembly spec. And there would be WebAssembly hosts that wouldn’t have them available. But for those platforms that could make use of them, there would be a unified API for calling these functions, no matter which platform the code was running on. And this would make universal modules—ones that run across both the web and Node—so much easier.&lt;/p&gt;
&lt;h3&gt;Where are we with this?&lt;/h3&gt;
&lt;p&gt;So, is this something that could actually happen?&lt;/p&gt;
&lt;p&gt;A few things are working in this idea’s favor. There’s a proposal called &lt;a href=&quot;https://github.com/domenic/package-name-maps&quot;&gt;package name maps&lt;/a&gt; that will provide a mechanism for mapping a module name to a path to load the module from. And that will likely be supported by both browsers and Node, which can use it to provide different paths, and thus load entirely different modules, but with the same API. This way, the .wasm module itself can specify a single (module-name, function-name) import pair that Just Works on different environments, even the web.&lt;/p&gt;
&lt;p&gt;With that mechanism in place, what’s left to do is actually figure out what functions make sense and what their interface should be.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-node-01-P-e1540221369730.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32847 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-node-01-P-e1540221369730-500x187.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;187&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-06-node-01-P-e1540221369730-500x187.png 500w, https://hacks.mozilla.org/files/2018/10/01-06-node-01-P-e1540221369730-250x93.png 250w, https://hacks.mozilla.org/files/2018/10/01-06-node-01-P-e1540221369730-768x287.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;There’s no active work on this at the moment. But a lot of discussions are heading in this direction right now. And it looks likely to happen, in one form or another.&lt;/p&gt;
&lt;p&gt;Which is good, because unlocking this gets us halfway to unlocking some other use cases outside the browser. And with this in place, we can accelerate the pace.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-node-04-final.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32848&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-06-node-04-final-500x301.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;301&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-06-node-04-final-500x301.png 500w, https://hacks.mozilla.org/files/2018/10/01-06-node-04-final-250x150.png 250w, https://hacks.mozilla.org/files/2018/10/01-06-node-04-final-768x462.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;So, what are some examples of these other use cases?&lt;/p&gt;
&lt;h2&gt;CDNs, Serverless, and Edge Computing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-01-A-cloud-e1540221412524.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32850 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-01-A-cloud-e1540221412524-500x278.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;278&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-07-runtime-01-A-cloud-e1540221412524-500x278.png 500w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-01-A-cloud-e1540221412524-250x139.png 250w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-01-A-cloud-e1540221412524-768x427.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;One example is things like CDNs, and Serverless, and Edge Computing. These are cases where you’re putting your code on someone else’s server, and they make sure that the server is maintained and that the code is close to all of your users.&lt;/p&gt;
&lt;p&gt;Why would you want to use WebAssembly in these cases? There was a great talk explaining exactly this at a conference recently.&lt;/p&gt;
&lt;p&gt;Fastly is a company that provides CDNs and edge computing. And their CTO, Tyler McMullen, &lt;a href=&quot;https://www.youtube.com/watch?v=FkM1L8-qcjU&quot;&gt;explained it this way&lt;/a&gt; (and I’m paraphrasing here):&lt;/p&gt;
&lt;p&gt;If you look at how a process works, code in that process doesn’t have boundaries. Functions have access to whatever memory in that process they want, and they can call whatever other functions they want.&lt;/p&gt;
&lt;p&gt;When you’re running a bunch of different people’s services in the same process, this is an issue. Sandboxing could be a way to get around this. But then you get to a scale problem.&lt;/p&gt;
&lt;p&gt;For example, if you use a JavaScript VM like Firefox’s SpiderMonkey or Chrome’s V8, you get a sandbox and you can put hundreds of instances into a process. But with the numbers of requests that Fastly is servicing, you don’t just need hundreds per process—you need tens of thousands.&lt;/p&gt;
&lt;p&gt;Tyler does a better job of explaining all of it in his talk, so you should go watch that. But the point is that WebAssembly gives Fastly the safety, speed, and scale needed for this use case.&lt;/p&gt;
&lt;p&gt;So what did they need to make this work?&lt;/p&gt;
&lt;h3&gt;Skill: Runtime&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-02-SS.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32849 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-02-SS-e1540221444910-500x187.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;187&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-07-runtime-02-SS-e1540221444910-500x187.png 500w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-02-SS-e1540221444910-250x93.png 250w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-02-SS-e1540221444910-768x287.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;They needed to create their own runtime. That means taking a WebAssembly compiler—something that can compile WebAssembly down to machine code—and combining it with the functions for interacting with the system that I mentioned before.&lt;/p&gt;
&lt;p&gt;For the WebAssembly compiler, Fastly used &lt;a href=&quot;https://github.com/CraneStation/cranelift&quot;&gt;Cranelift&lt;/a&gt;, the compiler that we’re also building into Firefox. It’s designed to be very fast and doesn’t use much memory.&lt;/p&gt;
&lt;p&gt;Now, for the functions that interact with the rest of the system, they had to create their own, because we don’t have that portable interface available yet.&lt;/p&gt;
&lt;p&gt;So it’s possible to create your own runtime today, but it takes some effort. And it’s effort that will have to be duplicated across different companies.&lt;/p&gt;
&lt;p&gt;What if we didn’t just have the portable interface, but we also had a common runtime that could be used across all of these companies and other use cases? That would definitely speed up development.&lt;/p&gt;
&lt;p&gt;Then other companies could just use that runtime—like they do Node today—instead of creating their own from scratch.&lt;/p&gt;
&lt;h3&gt;Where are we on this?&lt;/h3&gt;
&lt;p&gt;So what’s the status of this?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-03-P.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32851 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-03-P-e1540221473263-500x187.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;187&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-07-runtime-03-P-e1540221473263-500x187.png 500w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-03-P-e1540221473263-250x93.png 250w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-03-P-e1540221473263-768x287.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;Even though there’s no standard runtime yet, there are a few runtime projects in flight right now. These include &lt;a href=&quot;https://github.com/WAVM/WAVM&quot;&gt;WAVM&lt;/a&gt;, which is built on top of LLVM, and wasmjit.&lt;/p&gt;
&lt;p&gt;In addition, we’re planning a runtime that’s built on top of Cranelift, called wasmtime.&lt;/p&gt;
&lt;p&gt;And once we have a common runtime, that speeds up development for a bunch of different use cases. For example…&lt;/p&gt;
&lt;h2&gt;Portable CLI tools&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-05-A-cli.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32862 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-05-A-cli-e1540221504824-500x274.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;274&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-07-runtime-05-A-cli-e1540221504824-500x274.png 500w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-05-A-cli-e1540221504824-250x137.png 250w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-05-A-cli-e1540221504824-768x421.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;WebAssembly can also be used in more traditional operating systems. Now to be clear, I’m not talking about in the kernel (although &lt;a href=&quot;https://github.com/nebulet/nebulet&quot;&gt;brave souls are trying that, too&lt;/a&gt;) but WebAssembly running in Ring 3—in user mode.&lt;/p&gt;
&lt;p&gt;Then you could do things like have portable CLI tools that could be used across all different kinds of operating systems.&lt;/p&gt;
&lt;p&gt;And this is pretty close to another use case…&lt;/p&gt;
&lt;h2&gt;Internet of Things&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-05-A-iot.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-32863 size-large&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-05-A-iot-e1540221544774-500x277.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;277&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/10/01-07-runtime-05-A-iot-e1540221544774-500x277.png 500w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-05-A-iot-e1540221544774-250x138.png 250w, https://hacks.mozilla.org/files/2018/10/01-07-runtime-05-A-iot-e1540221544774-768x425.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;The internet of things includes devices like wearable technology, and smart home appliances.&lt;/p&gt;
&lt;p&gt;These devices are usually resource constrained—they don’t pack much computing power and they don’t have much memory. And this is exactly the kind of situation where a compiler like Cranelift and a runtime like wasmtime would shine, because they would be efficient and low-memory. And in the extremely-resource-constrained case, WebAssembly makes it possible to fully compile to machine code before loading the application on the device.&lt;/p&gt;
&lt;p&gt;There’s also the fact that there are so many of these different devices, and they are all slightly different. WebAssembly’s portability would really help with that.&lt;/p&gt;
&lt;p&gt;So that’s one more place where WebAssembly has a future.&lt;/p&gt;

&lt;p&gt;Now let’s zoom back out and look at this skill tree.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-09-final.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-32795&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-09-final-500x301.png&quot; alt=&quot;Skill tree showing WebAssembly skills which will be filled in through the course of the post.&quot; width=&quot;500&quot; height=&quot;301&quot;/&gt;&lt;/a&gt;I said at the beginning of this post that people have a misconception about WebAssembly—this idea that the WebAssembly that landed in the MVP was the final version of WebAssembly.&lt;/p&gt;
&lt;p&gt;I think you can see now why this is a misconception.&lt;/p&gt;
&lt;p&gt;Yes, the MVP opened up a lot of opportunities. It made it possible to bring a lot of desktop applications to the web. But we still have many use cases to unlock, from heavy-weight desktop applications, to small modules, to JS frameworks, to all the things outside the browser… Node.js, and serverless, and the blockchain, and portable CLI tools, and the internet of things.&lt;/p&gt;
&lt;p&gt;So the WebAssembly that we have today is not the end of this story—it’s just the beginning.&lt;/p&gt;
&lt;section class=&quot;about&quot; readability=&quot;14.426614481409&quot;&gt;
&lt;p&gt;Lin is an engineer on the Mozilla Developer Relations team. She tinkers with JavaScript, WebAssembly, Rust, and Servo, and also draws code cartoons.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/lclarkmozilla-com/&quot;&gt;More articles by Lin Clark…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Till works on developer technologies in Mozilla Research, and on JavaScript and WebAssembly standardization in TC39 and the WebAssembly CG.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/tschneidereitmozilla-com/&quot;&gt;More articles by Till Schneidereit…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luke Wagner is a Mozilla software engineer and hacks on JavaScript and WebAssembly in Firefox.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/lwagnermozilla-com/&quot;&gt;More articles by Luke Wagner…&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Mon, 22 Oct 2018 15:34:27 +0000</pubDate>
<dc:creator>steveklabnik</dc:creator>
<og:url>https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future</og:url>
<og:title>WebAssembly’s post-MVP future: A cartoon skill tree – Mozilla Hacks - the Web developer blog</og:title>
<og:description>People have a misconception—they think that the WebAssembly that landed in browsers back in 2017—is the final version. In fact, we still have many use cases to unlock, from heavy-weight ...</og:description>
<og:image>https://hacks.mozilla.org/files/2018/10/featured-image-1.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/</dc:identifier>
</item>
<item>
<title>Blood money</title>
<link>https://techcrunch.com/2018/10/21/blood-money/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/10/21/blood-money/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;Some years ago an investor I met at a TechCrunch event invited me out for a coffee. This happens a lot; as a weekly columnist here I am deemed an official Media Influencer, and people in turn want to influence me, until they realize I’m just going to ignore them and write about whatever weird idea comes into my head instead. I accepted this invitation, though, because this guy’s job was unusually interesting, in a bad way — he represented a venture fund affiliated with the Kremlin.&lt;/p&gt;
&lt;p&gt;This was before Russia was the democracy-manipulating enemy it is today, but just after Russia passed its “&lt;a href=&quot;https://en.wikipedia.org/wiki/Russian_gay_propaganda_law&quot;&gt;anti-gay law&lt;/a&gt;,” so angry anti-Russian sentiment was exceptionally strong. It was fascinating to me watching this man squirm around the topic: I’m a Bay Area guy, he told me, I’m pro gay rights, pro gay marriage, but we have to accept that every country becomes enlightened at its own speed and its own way, and the best way for us to encourage that, to promote our values, is to engage with them, to show them the right way of doing things.&lt;/p&gt;
&lt;p&gt;Needless to say this is a column about Saudi Arabia.&lt;/p&gt;
&lt;p&gt;It’s kind of amazing that it’s taken the murder of Jamal Khashoggi to wake people up to that nation’s brutality. For three years now Saudi Arabia has been slaughtering thousands of Yemenis in a needless conflict wherein, &lt;a href=&quot;https://www.bloomberg.com/news/articles/2018-10-19/how-saudis-turned-yemen-war-into-humanitarian-crisis-quicktake&quot;&gt;to quote Bloomberg quoting the UN&lt;/a&gt;, “especially a Saudi Arabian-led coalition and the Yemeni government it backs, have shown a disregard for civilian life possibly amounting to war crimes.” It has long been a totalitarian absolute monarchy allied with what was once a radical interpretation of Islam, Wahhabism, which T.E. Lawrence &lt;a href=&quot;http://www.vagablogging.net/lawrence-of-arabia-wahabi-islam-is-a-fanatical-heresy.html&quot;&gt;described a hundred years ago&lt;/a&gt; as an obscure “fanatical heresy” — and which has since been mainstreamed with disastrous global consequences as a result of this alliance.&lt;/p&gt;
&lt;p&gt;And, of course, it has long been an intimate international ally and partner of the United States. America’s financial / military / &lt;a href=&quot;https://www.nytimes.com/2018/10/20/us/politics/saudi-image-campaign-twitter.html&quot;&gt;consulting&lt;/a&gt; / industrial / oil complexes have been in bed with the Saudis for a very, very long time, as have &lt;a href=&quot;https://www.vanityfair.com/news/2003/10/saving-the-saudis-200310&quot;&gt;its politicians&lt;/a&gt;. Let’s not pretend that Saudi money in the tech industry is in any way exceptionally bad or different. Bad, yes, but as bad as, well, the rest of American society. For a long time the US attitude towards Saudi Arabia seems to have been: “sure, they’re an oppressive dictatorship, but they’re &lt;em&gt;our&lt;/em&gt; oppressive dictatorship, and their royal family is very nice and very generous and they control &lt;em&gt;so&lt;/em&gt; much oil.”&lt;/p&gt;
&lt;div class=&quot;embed breakout&quot; readability=&quot;9.3095930232558&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot; readability=&quot;12.412790697674&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The KSA is an oppressive heredity dictatorship that has been supported by the American finance, oil and defense industries and a bipartisan coalition of politicians and beltway lobbyists since 1931.&lt;/p&gt;
&lt;p&gt;Clearly, Silicon Valley is at fault! Man, is there anything tech can't do? &lt;a href=&quot;https://t.co/VSF6tvnQms&quot;&gt;https://t.co/VSF6tvnQms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Alex Stamos (@alexstamos) &lt;a href=&quot;https://twitter.com/alexstamos/status/1051520673049272320?ref_src=twsrc%5Etfw&quot;&gt;October 14, 2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Now, though, at long last, that attitude &lt;a href=&quot;https://techcrunch.com/2018/10/17/silicon-valley-hoped-the-khashoggi-story-would-go-away-instead-it-may-end-an-era/&quot;&gt;seems to be changing&lt;/a&gt;. Not that the US is going to stop buying oil from them. Not that the US is going to stop selling weapons to them. But, despite &lt;a href=&quot;https://www.nytimes.com/2017/09/26/world/middleeast/saudi-arabia-women-drive.html&quot;&gt;occasional hesitant steps&lt;/a&gt; into the twentieth (but definitely not the twenty-first) century, nobody is going to pretend Saudi Arabia is anything other than a brutally oppressive state from here on in. (Shout-out to my homeland for being &lt;a href=&quot;https://www.theguardian.com/world/2018/sep/28/saudi-foreign-minister-demands-canada-stop-treating-it-like-a-banana-republic&quot;&gt;ahead of the curve&lt;/a&gt; on this one.) Which is progress, I guess, of a sort?&lt;/p&gt;
&lt;div class=&quot;embed breakout&quot; readability=&quot;7.1232876712329&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot; readability=&quot;8.013698630137&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&quot;A single journalist is a tragedy; ten thousand Yemenis is a statistic&quot;.&lt;br/&gt;Joseph Stalin, 1949&lt;/p&gt;
&lt;p&gt;— Nassim Nicholas Taleb (@nntaleb) &lt;a href=&quot;https://twitter.com/nntaleb/status/1052881159267475456?ref_src=twsrc%5Etfw&quot;&gt;October 18, 2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;You can make a realpolitik case for continuing to engage with Saudi Arabia. Just like my coffee companion five years ago did for continuing to engage with Russia. See how well that turned out, how since then Russia has become so much more enlightened, so progressive, such a glorious contributor to the commonwealth of nations? …Oh. Saudi Arabia is different, yes, but in a worse way; it’s so sensitive to criticism, overreacts so wildly and violently, because it is fundamentally a fragile state. Nassim Taleb, who predicted the collapse of Syria and its civil war before it happened, has predicted a similar fate for Saudi Arabia.&lt;/p&gt;
&lt;p&gt;I don’t think the Trump administration is going to continue its support for Saudi Arabia’s new and erratic leadership for fear of the human or economic consequences if they do otherwise. “&lt;a href=&quot;https://twitter.com/scalzi/status/754339928864153600&quot;&gt;Trump’s razor&lt;/a&gt;:” the stupidest reason is most likely to be correct. Here, that means the administration doesn’t want to walk back their Saudi support because they think that will make them look weak. Similarly, who are we kidding, VCs who take money from Saudi LPs aren’t doing so in order to help prop up the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pax_Americana&quot;&gt;Pax Americana&lt;/a&gt;; it’s purely because they want the money, and nobody else is prepared to throw around &lt;a href=&quot;https://techcrunch.com/2018/10/07/saudi-arabias-sovereign-fund-will-also-invest-45b-in-softbanks-second-vision-fund/&quot;&gt;$45 billion in cash&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Right now, though, and for the foreseeable future, sovereign Saudi money is tainted, poisoned, blood money. If you accept it you have to consider the consequences of publicly contravening our new, post-Khashoggi social morality, and the angry criticism which will follow. Will that last? Who can say? Even if it doesn’t, though, you’ll have to consider the consequences of privately contravening your own ethics, if you have any. That was also true last year, and it will still be true next year, no matter how much money we’re talking about.&lt;/p&gt;
</description>
<pubDate>Mon, 22 Oct 2018 14:21:12 +0000</pubDate>
<dc:creator>deegles</dc:creator>
<og:title>Blood money</og:title>
<og:description>Some years ago an investor I met at a TechCrunch event invited me out for a coffee. This happens a lot; as a weekly columnist here I am deemed an official Media Influencer, and people in turn want to influence me, until they realize I’m just going to ignore them and write about whatever weird…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2018/10/blood-money.jpg?w=533</og:image>
<og:url>http://social.techcrunch.com/2018/10/21/blood-money/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/10/21/blood-money/</dc:identifier>
</item>
<item>
<title>Announcing the GNU Kind Communication Guidelines</title>
<link>http://lists.gnu.org/archive/html/info-gnu/2018-10/msg00001.html</link>
<guid isPermaLink="true" >http://lists.gnu.org/archive/html/info-gnu/2018-10/msg00001.html</guid>
<description>&lt;head&gt;&lt;title&gt;Announcing the GNU Kind Communication Guidelines&lt;/title&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;59.804347826087&quot;&gt;
&lt;center&gt;


&lt;/center&gt;
&lt;hr /&gt;&lt;p&gt;[&lt;a href=&quot;http://lists.gnu.org/archive/html/info-gnu/2018-10/msg00000.html&quot;&gt;Date Prev&lt;/a&gt;][Date Next][&lt;a href=&quot;http://lists.gnu.org/archive/html/info-gnu/2018-10/msg00000.html&quot;&gt;Thread Prev&lt;/a&gt;][Thread Next][&lt;a href=&quot;http://lists.gnu.org/archive/html/info-gnu/2018-10/index.html#00001&quot;&gt;Date Index&lt;/a&gt;][&lt;a href=&quot;http://lists.gnu.org/archive/html/info-gnu/2018-10/threads.html#00001&quot;&gt;Thread Index&lt;/a&gt;] &lt;/p&gt;
&lt;h2&gt;Announcing the GNU Kind Communication Guidelines&lt;/h2&gt;
&lt;hr /&gt;&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot;&gt;&lt;strong&gt;From&lt;/strong&gt;:&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Richard Stallman&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot;&gt;&lt;strong&gt;Subject&lt;/strong&gt;:&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Announcing the GNU Kind Communication Guidelines&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot;&gt;&lt;strong&gt;Date&lt;/strong&gt;:&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Mon, 22 Oct 2018 01:16:46 -0400&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr /&gt;&lt;pre&gt;
Announcing the GNU Kind Communication Guidelines

The GNU Kind Communication Guidelines, initial version, have been
published in &lt;a rel=&quot;nofollow&quot; href=&quot;https://gnu.org/philosophy/kind-communication.html&quot;&gt;https://gnu.org/philosophy/kind-communication.html&lt;/a&gt;.  On
behalf of the GNU Project, I ask all GNU contributors to make their
best efforts to follow these guidelines in GNU Project discuaaions.

In August, a discussion started among GNU package maintainers about
the problem that GNU development often pushes women away.1  Clearly this is
not a good thing.2

Some maintainers advocated adopting a &quot;code of conduct&quot; with strict
rules.  Some other free software projects have done this, generating
some resistance.3  Several GNU package maintainers responded that they
would quit immediately.  I myself did not like the punitive spirit of
that approach, and decided against it.

I did not, however, wish to make that an excuse to ignore the problem.
So I decided to try a different approach: to guide participants to
encourage and help each other to avoid harsh patterns of
communication.  I identified various patterns of our conversation
(which is almost entirely textual, not vocal) that seem likely to
chase women away -- and some men, too.  Some patterns came from events
that happened in the discussion itself.  Then I wrote suggestions for
how to avoid them and how to help others avoid them.  I received
feedback from many of the participants, including some women.  I
practiced some of these suggestions personally and found that they had
a good effect.  That list is now the GNU Kind Communication
Guidelines.

The current version not set in stone; I welcome comments and
suggestions for future revision.

The difference between kind communication guidelines and a code of
conduct is a matter of the basic overall approach.

A code of conduct states rules, with punishments for anyone that
violates them.  It is the heavy-handed way of teaching people to
behave differently, and since it only comes into action when people do
something against the rules, it doesn't try to teach people to do
better than what the rules require.  To be sure, the appointed
maintainer(s) of a GNU package can, if necessary, tell a contributor
to go away; but we do not want to need to have recourse to that.

The idea of the GNU Kind Communication Guidelines is to start guiding
people towards kinder communication at a point well before one would
even think of saying, &quot;You are breaking the rules.&quot;  The way we do
this, rather than ordering people to be kind or else, is try to help
people learn to make their communication more kind.


I hope that kind communication guidelines will provide a kinder
and less strict way of leading a project's discussions to be calmer,
more welcoming to all participants of good will, and more effective.



1. I read that the fraction of women in the free software community
overall is around 3%, whereas in the software field overall it is over
10%.

2. I disagree with making &quot;diversity&quot; a goal.  If the developers in a
specific free software project do not include demographic D, I don't
think that the lack of them as a problem that requires action; there
is no need to scramble desperately to recruit some Ds.  Rather, the
problem is that if we make demographic D feel unwelcome, we lose out
on possible contributors.  And very likely also others that are not in
demographic D.

There is a kind of diversity that would benefit many free software
projects: diversity of users in regard to skill levels and kinds of
usage.  However, that is not what people usually mean by &quot;diversity&quot;.

3. I'm not involved in those projects, even if in some cases I use the
software they release, so I am not directly concerned about whatever
internal arrangements they make.  They are pertinent here only as
more-or-less comparable situations.

-- 
Dr Richard Stallman
President, Free Software Foundation (&lt;a rel=&quot;nofollow&quot; href=&quot;https://gnu.org&quot;&gt;https://gnu.org&lt;/a&gt;, &lt;a rel=&quot;nofollow&quot; href=&quot;https://fsf.org&quot;&gt;https://fsf.org&lt;/a&gt;)
Internet Hall-of-Famer (&lt;a rel=&quot;nofollow&quot; href=&quot;https://internethalloffame.org&quot;&gt;https://internethalloffame.org&lt;/a&gt;)




&lt;/pre&gt;
&lt;hr /&gt;
&lt;hr /&gt;&lt;table width=&quot;100%&quot;&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;[Prev in Thread]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Current Thread&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;[Next in Thread]&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;Announcing the GNU Kind Communication Guidelines&lt;/strong&gt;, &lt;em&gt;Richard Stallman&lt;/em&gt;&lt;/span&gt; &lt;strong&gt;&amp;lt;=&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr /&gt;&lt;/body&gt;</description>
<pubDate>Mon, 22 Oct 2018 13:57:29 +0000</pubDate>
<dc:creator>stargrave</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://lists.gnu.org/archive/html/info-gnu/2018-10/msg00001.html</dc:identifier>
</item>
<item>
<title>Writing an OS in Rust: Hardware Interrupts</title>
<link>https://os.phil-opp.com/hardware-interrupts/</link>
<guid isPermaLink="true" >https://os.phil-opp.com/hardware-interrupts/</guid>
<description>&lt;header class=&quot;masthead&quot;&gt;
&lt;p&gt;&lt;small&gt;Philipp Oppermann's blog&lt;/small&gt;&lt;/p&gt;
&lt;/header&gt;
&lt;time datetime=&quot;2018-10-22&quot; class=&quot;post-date&quot;&gt;Oct 22, 2018&lt;/time&gt;&lt;aside id=&quot;toc&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#the-8259-pic&quot;&gt;The 8259 PIC&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#implementation&quot;&gt;Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#enabling-interrupts&quot;&gt;Enabling Interrupts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#handling-timer-interrupts&quot;&gt;Handling Timer Interrupts&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#end-of-interrupt&quot;&gt;End of Interrupt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#configuring-the-timer&quot;&gt;Configuring the Timer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#deadlocks&quot;&gt;Deadlocks&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#provoking-a-deadlock&quot;&gt;Provoking a Deadlock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#fixing-the-deadlock&quot;&gt;Fixing the Deadlock&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#the&quot;&gt;The &lt;code&gt;hlt&lt;/code&gt; Instruction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#keyboard-input&quot;&gt;Keyboard Input&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#reading-the-scancodes&quot;&gt;Reading the Scancodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#interpreting-the-scancodes&quot;&gt;Interpreting the Scancodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#configuring-the-keyboard&quot;&gt;Configuring the Keyboard&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#what-s-next&quot;&gt;What's next?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/aside&gt;&lt;p&gt;In this post we set up the programmable interrupt controller to correctly forward hardware interrupts to the CPU. To handle these interrupts we add new entries to our interrupt descriptor table, just like we did for our exception handlers. We will learn how to get periodic timer interrupts and how to get input from the keyboard.&lt;/p&gt;

&lt;p&gt;This blog is openly developed on &lt;a href=&quot;https://github.com/phil-opp/blog_os&quot;&gt;Github&lt;/a&gt;. If you have any problems or questions, please open an issue there. You can also leave comments &lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#comments&quot;&gt;at the bottom&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;overview&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#overview&quot; aria-label=&quot;Anchor link for: overview&quot;&gt;🔗&lt;/a&gt; Overview&lt;/h2&gt;
&lt;p&gt;Interrupts provide a way to notify the CPU from attached hardware devices. So instead of letting the kernel periodically check the keyboard for new characters (a process called &lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;&lt;em&gt;polling&lt;/em&gt;&lt;/a&gt;), the keyboard can notify the kernel of each keypress. This is much more efficient because the kernel only needs to act when something happened. It also allows faster reaction times, since the kernel can react immediately and not only at the next poll.&lt;/p&gt;
&lt;p&gt;Connecting all hardware devices directly to the CPU is not possible. Instead, a separate &lt;em&gt;interrupt controller&lt;/em&gt; aggregates the interrupts from all devices and then notifies the CPU:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;                                    &lt;/span&gt;&lt;span&gt;____________             _____
&lt;/span&gt;&lt;span&gt;               &lt;/span&gt;&lt;span&gt;Timer ------------&amp;gt; |            |           |     |
&lt;/span&gt;&lt;span&gt;               &lt;/span&gt;&lt;span&gt;Keyboard ---------&amp;gt; | Interrupt  |---------&amp;gt; | CPU |
&lt;/span&gt;&lt;span&gt;               &lt;/span&gt;&lt;span&gt;Other Hardware ---&amp;gt; | Controller |           |_____|
&lt;/span&gt;&lt;span&gt;               &lt;/span&gt;&lt;span&gt;Etc. -------------&amp;gt; |____________|
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Most interrupt controllers are programmable, which means that they support different priority levels for interrupts. For example, this allows to give timer interrupts a higher priority than keyboard interrupts to ensure accurate timekeeping.&lt;/p&gt;
&lt;p&gt;Unlike exceptions, hardware interrupts occur &lt;em&gt;asynchronously&lt;/em&gt;. This means that they are completely independent from the executed code and can occur at any time. Thus we suddenly have a form of concurrency in our kernel with all the potential concurrency-related bugs. Rust's strict ownership model helps us here because it forbids mutable global state. However, deadlocks are still possible, as we will see later in this post.&lt;/p&gt;
&lt;h2 id=&quot;the-8259-pic&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#the-8259-pic&quot; aria-label=&quot;Anchor link for: the-8259-pic&quot;&gt;🔗&lt;/a&gt; The 8259 PIC&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_8259&quot;&gt;Intel 8259&lt;/a&gt; is a programmable interrupt controller (PIC) introduced in 1976. It has long been replaced by the newer &lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_APIC_Architecture&quot;&gt;APIC&lt;/a&gt;, but its interface is still supported on current systems for backwards compatibiliy reasons. The 8259 PIC is significantly easier to set up than the APIC, so we will use it to introduce ourselves to interrupts before we switch to the APIC in a later post.&lt;/p&gt;
&lt;p&gt;The 8259 has 8 interrupt lines and several lines for communicating with the CPU. The typical systems back then were equipped with two instances of the 8259 PIC, one primary and one secondary PIC connected to one of the interrupt lines of the primary:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;                     &lt;/span&gt;&lt;span&gt;____________                          ____________
&lt;/span&gt;&lt;span&gt;Real Time Clock --&amp;gt; |            |   Timer -------------&amp;gt; |            |
&lt;/span&gt;&lt;span&gt;ACPI -------------&amp;gt; |            |   Keyboard-----------&amp;gt; |            |      _____
&lt;/span&gt;&lt;span&gt;Available --------&amp;gt; | Secondary  |----------------------&amp;gt; | Primary    |     |     |
&lt;/span&gt;&lt;span&gt;Available --------&amp;gt; | Interrupt  |   Serial Port 2 -----&amp;gt; | Interrupt  |---&amp;gt; | CPU |
&lt;/span&gt;&lt;span&gt;Mouse ------------&amp;gt; | Controller |   Serial Port 1 -----&amp;gt; | Controller |     |_____|
&lt;/span&gt;&lt;span&gt;Co-Processor -----&amp;gt; |            |   Parallel Port 2/3 -&amp;gt; |            |
&lt;/span&gt;&lt;span&gt;Primary ATA ------&amp;gt; |            |   Floppy disk -------&amp;gt; |            |
&lt;/span&gt;&lt;span&gt;Secondary ATA ----&amp;gt; |____________|   Parallel Port 1----&amp;gt; |____________|
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This graphic shows the typical assignment of interrupt lines. We see that most of the 15 lines have a fixed mapping, e.g. line 4 of the secondary PIC is assigned to the mouse.&lt;/p&gt;
&lt;p&gt;Each controller can be configured through two &lt;a href=&quot;https://os.phil-opp.com/integration-tests/#port-i-o&quot;&gt;I/O ports&lt;/a&gt;, one “command” port and one “data” port. For the primary controller these ports are &lt;code&gt;0x20&lt;/code&gt; (command) and &lt;code&gt;0x21&lt;/code&gt; (data). For the secondary controller they are &lt;code&gt;0xa0&lt;/code&gt; (command) and &lt;code&gt;0xa1&lt;/code&gt; (data). For more information on how the PICs can be configured see the &lt;a href=&quot;https://wiki.osdev.org/8259_PIC&quot;&gt;article on osdev.org&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;implementation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#implementation&quot; aria-label=&quot;Anchor link for: implementation&quot;&gt;🔗&lt;/a&gt; Implementation&lt;/h3&gt;
&lt;p&gt;The default configuration of the PICs is not usable, because it sends interrupt vector numbers in the range 0–15 to the CPU. These numbers are already occupied by CPU exceptions, for example number 8 corresponds to a double fault. To fix this overlapping issue, we need to remap the PIC interrupts to different numbers. The actual range doesn't matter as long as it does not overlap with the exceptions, but typically the range 32–47 is chosen, because these are the first free numbers after the 32 exception slots.&lt;/p&gt;
&lt;p&gt;The configuration happens by writing special values to the command and data ports of the PICs. Fortunately there is already a crate called &lt;a href=&quot;https://docs.rs/pic8259_simple/0.1.1/pic8259_simple/&quot;&gt;&lt;code&gt;pic8259_simple&lt;/code&gt;&lt;/a&gt;, so we don't need to write the initialization sequence ourselves. In case you are interested how it works, check out &lt;a href=&quot;https://docs.rs/crate/pic8259_simple/0.1.1/source/src/lib.rs&quot;&gt;its source code&lt;/a&gt;, it's fairly small and well documented.&lt;/p&gt;
&lt;p&gt;To add the crate as dependency, we add the following to our project:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;# in Cargo.toml
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;pic8259_simple &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;&quot;0.1.1&quot;
&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;// in src/lib.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;extern crate&lt;/span&gt;&lt;span&gt; pic8259_simple;
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The main abstraction provided by the crate is the &lt;a href=&quot;https://docs.rs/pic8259_simple/0.1.1/pic8259_simple/struct.ChainedPics.html&quot;&gt;&lt;code&gt;ChainedPics&lt;/code&gt;&lt;/a&gt; struct that represents the primary/secondary PIC layout we saw above. It is designed to be used in the following way:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/interrupts.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;pic8259_simple::ChainedPics;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; spin;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub const &lt;/span&gt;&lt;span&gt;PIC_1_OFFSET&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;u8 = &lt;/span&gt;&lt;span&gt;32&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;pub const &lt;/span&gt;&lt;span&gt;PIC_2_OFFSET&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;u8 = &lt;/span&gt;&lt;span&gt;PIC_1_OFFSET &lt;/span&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub static &lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;: spin::Mutex&amp;lt;ChainedPics&amp;gt; &lt;/span&gt;&lt;span&gt;=
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;spin::Mutex::new(&lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ ChainedPics::new(&lt;/span&gt;&lt;span&gt;PIC_1_OFFSET&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;PIC_2_OFFSET&lt;/span&gt;&lt;span&gt;) });
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We're setting the offsets for the pics to the range 32–47 as we noted above. By wrapping the &lt;code&gt;ChainedPics&lt;/code&gt; struct in a &lt;code&gt;Mutex&lt;/code&gt; we are able to get safe mutable access (through the &lt;a href=&quot;https://docs.rs/spin/0.4.8/spin/struct.Mutex.html#method.lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt; method&lt;/a&gt;), which we need in the next step. The &lt;code&gt;ChainedPics::new&lt;/code&gt; function is unsafe because wrong offsets could cause undefined behavior.&lt;/p&gt;
&lt;p&gt;We can now initialize the 8259 PIC from our &lt;code&gt;_start&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Hello World&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;!&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::gdt::init();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::interrupts::init_idt();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;.lock().initialize() }; &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;It did not crash!&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;loop &lt;/span&gt;&lt;span&gt;{}
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We use the &lt;a href=&quot;https://docs.rs/pic8259_simple/0.1.1/pic8259_simple/struct.ChainedPics.html#method.initialize&quot;&gt;&lt;code&gt;initialize&lt;/code&gt;&lt;/a&gt; function to perform the PIC initialization. Like the &lt;code&gt;ChainedPics::new&lt;/code&gt; function, this function is also unsafe because it can cause undefined behavior if the PIC is misconfigured.&lt;/p&gt;
&lt;p&gt;If all goes well we should continue to see the &quot;It did not crash&quot; message when executing &lt;code&gt;bootimage run&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;enabling-interrupts&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#enabling-interrupts&quot; aria-label=&quot;Anchor link for: enabling-interrupts&quot;&gt;🔗&lt;/a&gt; Enabling Interrupts&lt;/h2&gt;
&lt;p&gt;Until now nothing happened because interrupts are still disabled in the CPU configuration. This means that the CPU does not listen to the interrupt controller at all, so no interrupts can reach the CPU. Let's change that:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Hello World&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;!&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::gdt::init();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::interrupts::init_idt();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;.lock().initialize() };
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;x86_64::instructions::interrupts::enable(); &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;It did not crash!&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;loop &lt;/span&gt;&lt;span&gt;{}
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;interrupts::enable&lt;/code&gt; function of the &lt;code&gt;x86_64&lt;/code&gt; crate executes the special &lt;code&gt;sti&lt;/code&gt; instruction (“set interrupts”) to enable external interrupts. When we try &lt;code&gt;bootimage run&lt;/code&gt; now, we see that a double fault occurs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/hardware-interrupts/qemu-hardware-timer-double-fault.png&quot; alt=&quot;QEMU printing EXCEPTION: DOUBLE FAULT because of hardware timer&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The reason for this double fault is that the hardware timer (the &lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_8253&quot;&gt;Intel 8253&lt;/a&gt; to be exact) is enabled by default, so we start receiving timer interrupts as soon as we enable interrupts. Since we didn't define a handler function for it yet, our double fault handler is invoked.&lt;/p&gt;
&lt;h2 id=&quot;handling-timer-interrupts&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#handling-timer-interrupts&quot; aria-label=&quot;Anchor link for: handling-timer-interrupts&quot;&gt;🔗&lt;/a&gt; Handling Timer Interrupts&lt;/h2&gt;
&lt;p&gt;As we see from the graphic &lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#the-8259-pic&quot;&gt;above&lt;/a&gt;, the timer uses line 0 of the primary PIC. This means that it arrives at the CPU as interrupt 32 (0 + offset 32). Therefore we need to add a handler for interrupt 32 if we want to handle the timer interrupt:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/interrupts.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub const &lt;/span&gt;&lt;span&gt;TIMER_INTERRUPT_ID&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;u8 = &lt;/span&gt;&lt;span&gt;PIC_1_OFFSET&lt;/span&gt;&lt;span&gt;; &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;lazy_static! {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;static ref &lt;/span&gt;&lt;span&gt;IDT&lt;/span&gt;&lt;span&gt;: InterruptDescriptorTable &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;let mut&lt;/span&gt;&lt;span&gt; idt &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;InterruptDescriptorTable::new();
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;idt.breakpoint.set_handler_fn(breakpoint_handler);
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;idt[&lt;/span&gt;&lt;span&gt;usize&lt;/span&gt;&lt;span&gt;::from(&lt;/span&gt;&lt;span&gt;TIMER_INTERRUPT_ID&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;.set_handler_fn(timer_interrupt_handler); &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;idt
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;extern &lt;/span&gt;&lt;span&gt;&quot;x86-interrupt&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;timer_interrupt_handler(
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;_stack_frame: &lt;/span&gt;&lt;span&gt;&amp;amp;mut&lt;/span&gt;&lt;span&gt; ExceptionStackFrame)
&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;print!(&lt;/span&gt;&lt;span&gt;&quot;.&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We introduce a &lt;code&gt;TIMER_INTERRUPT_ID&lt;/code&gt; constant to keep things organized. Our &lt;code&gt;timer_interrupt_handler&lt;/code&gt; has the same signature as our exception handlers, because the CPU reacts identically to exceptions and external interrupts (the only difference is that some exceptions push an error code). The &lt;a href=&quot;https://docs.rs/x86_64/0.2.11/x86_64/structures/idt/struct.InterruptDescriptorTable.html&quot;&gt;&lt;code&gt;InterruptDescriptorTable&lt;/code&gt;&lt;/a&gt; struct implements the &lt;a href=&quot;https://doc.rust-lang.org/core/ops/trait.IndexMut.html&quot;&gt;&lt;code&gt;IndexMut&lt;/code&gt;&lt;/a&gt; trait, so we can access individual entries through array indexing syntax.&lt;/p&gt;
&lt;p&gt;In our timer interrupt handler, we print a dot to the screen. As the timer interrupt happens periodically, we would expect to see a dot appearing on each timer tick. However, when we run it we see that only a single dot is printed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/hardware-interrupts/qemu-single-dot-printed.png&quot; alt=&quot;QEMU printing only a single dot for hardware timer&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;end-of-interrupt&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#end-of-interrupt&quot; aria-label=&quot;Anchor link for: end-of-interrupt&quot;&gt;🔗&lt;/a&gt; End of Interrupt&lt;/h3&gt;
&lt;p&gt;The reason is that the PIC expects an explicit “end of interrupt” (EOI) signal from our interrupt handler. This signal tells the controller that the interrupt was processed and that the system is ready to receive the next interrupt. So the PIC thinks we're still busy processing the first timer interrupt and waits patiently for the EOI signal before sending the next one.&lt;/p&gt;
&lt;p&gt;To send the EOI, we use our static &lt;code&gt;PICS&lt;/code&gt; struct again:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/interrupts.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;extern &lt;/span&gt;&lt;span&gt;&quot;x86-interrupt&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;timer_interrupt_handler(
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;_stack_frame: &lt;/span&gt;&lt;span&gt;&amp;amp;mut&lt;/span&gt;&lt;span&gt; ExceptionStackFrame)
&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;print!(&lt;/span&gt;&lt;span&gt;&quot;.&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;.lock().notify_end_of_interrupt(&lt;/span&gt;&lt;span&gt;TIMER_INTERRUPT_ID&lt;/span&gt;&lt;span&gt;) }
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;notify_end_of_interrupt&lt;/code&gt; figures out whether the primary or secondary PIC sent the interrupt and then uses the &lt;code&gt;command&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; ports to send an EOI signal to respective controllers. If the secondary PIC sent the interrupt both PICs need to be notified because the secondary PIC is connected to an input line of the primary PIC.&lt;/p&gt;
&lt;p&gt;We need to be careful to use the correct interrupt vector number, otherwise we could accidentally delete an important unsent interrupt or cause our system to hang. This is the reason that the function is unsafe.&lt;/p&gt;
&lt;p&gt;When we now execute &lt;code&gt;bootimage run&lt;/code&gt; we see dots periodically appearing on the screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/hardware-interrupts/qemu-hardware-timer-dots.gif&quot; alt=&quot;QEMU printing consequtive dots showing the hardware timer&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;configuring-the-timer&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#configuring-the-timer&quot; aria-label=&quot;Anchor link for: configuring-the-timer&quot;&gt;🔗&lt;/a&gt; Configuring the Timer&lt;/h3&gt;
&lt;p&gt;The hardware timer that we use is called the &lt;em&gt;Progammable Interval Timer&lt;/em&gt; or PIT for short. Like the name says, it is possible to configure the interval between two interrupts. We won't go into details here because we will switch to the &lt;a href=&quot;https://wiki.osdev.org/APIC_timer&quot;&gt;APIC timer&lt;/a&gt; soon, but the OSDev wiki has an extensive article about the &lt;a href=&quot;https://wiki.osdev.org/Programmable_Interval_Timer&quot;&gt;configuring the PIT&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;deadlocks&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#deadlocks&quot; aria-label=&quot;Anchor link for: deadlocks&quot;&gt;🔗&lt;/a&gt; Deadlocks&lt;/h2&gt;
&lt;p&gt;We now have a form of concurrency in our kernel: The timer interrupts occur asynchronously, so they can interrupt our &lt;code&gt;_start&lt;/code&gt; function at any time. Fortunately Rust's ownership system prevents many types of concurrency related bugs at compile time. One notable exception are deadlocks. Deadlocks occur if a thread tries to aquire a lock that will never become free. Thus the thread hangs indefinitely.&lt;/p&gt;
&lt;p&gt;We can already provoke a deadlock in our kernel. Remember, our &lt;code&gt;println&lt;/code&gt; macro calls the &lt;code&gt;vga_buffer::print&lt;/code&gt; function, which &lt;a href=&quot;https://os.phil-opp.com/vga-text-mode/#spinlocks&quot;&gt;locks a global &lt;code&gt;WRITER&lt;/code&gt;&lt;/a&gt; using a spinlock:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/vga_buffer.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub fn &lt;/span&gt;&lt;span&gt;print(args: fmt::Arguments) {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;core::fmt::Write;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;WRITER&lt;/span&gt;&lt;span&gt;.lock().write_fmt(args).unwrap();
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It locks the &lt;code&gt;WRITER&lt;/code&gt;, calls &lt;code&gt;write_fmt&lt;/code&gt; on it, and implicitly unlocks it at the end of the function. Now imagine that an interrupt occurs while the &lt;code&gt;WRITER&lt;/code&gt; is locked and the interrupt handler tries to print something too:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Timestep&lt;/th&gt;
&lt;th&gt;_start&lt;/th&gt;
&lt;th&gt;interrupt_handler&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;calls &lt;code&gt;println!&lt;/code&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;print&lt;/code&gt; locks &lt;code&gt;WRITER&lt;/code&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;&lt;strong&gt;interrupt occurs&lt;/strong&gt;, handler begins to run&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;calls &lt;code&gt;println!&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;&lt;code&gt;print&lt;/code&gt; tries to lock &lt;code&gt;WRITER&lt;/code&gt; (already locked)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;&lt;code&gt;print&lt;/code&gt; tries to lock &lt;code&gt;WRITER&lt;/code&gt; (already locked)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;…&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;never&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;unlock &lt;code&gt;WRITER&lt;/code&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;The &lt;code&gt;WRITER&lt;/code&gt; is locked, so the interrupt handler waits until it becomes free. But this never happens, because the &lt;code&gt;_start&lt;/code&gt; function only continues to run after the interrupt handler returns. Thus the complete system hangs.&lt;/p&gt;
&lt;h3 id=&quot;provoking-a-deadlock&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#provoking-a-deadlock&quot; aria-label=&quot;Anchor link for: provoking-a-deadlock&quot;&gt;🔗&lt;/a&gt; Provoking a Deadlock&lt;/h3&gt;
&lt;p&gt;We can easily provoke such a deadlock in our kernel by printing something in the loop at the end of our &lt;code&gt;_start&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;loop &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;print!(&lt;/span&gt;&lt;span&gt;&quot;-&quot;&lt;/span&gt;&lt;span&gt;);        &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When we run it in QEMU we get output of the form:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/hardware-interrupts/qemu-deadlock.png&quot; alt=&quot;QEMU output with many rows of hyphens and no dots&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We see that only a limited number of hyphens is printed, until the first timer interrupt occurs. Then the system hangs because the timer interrupt handler deadlocks when it tries to print a dot. This is the reason that we see no dots in the above output.&lt;/p&gt;
&lt;p&gt;The actual number of hyphens varies between runs because the timer interrupt occurs asynchronously. This non-determinism is what makes concurrency related bugs so difficult to debug.&lt;/p&gt;
&lt;h3 id=&quot;fixing-the-deadlock&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#fixing-the-deadlock&quot; aria-label=&quot;Anchor link for: fixing-the-deadlock&quot;&gt;🔗&lt;/a&gt; Fixing the Deadlock&lt;/h3&gt;
&lt;p&gt;To avoid this deadlock, we can disable interrupts as long as the &lt;code&gt;Mutex&lt;/code&gt; is locked:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/vga_buffer.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;/// Prints the given formatted string to the VGA text buffer
&lt;/span&gt;&lt;span&gt;/// through the global `WRITER` instance.
&lt;/span&gt;&lt;span&gt;pub fn &lt;/span&gt;&lt;span&gt;print(args: fmt::Arguments) {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;core::fmt::Write;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::instructions::interrupts;   &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;interrupts::without_interrupts(|| {     &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;WRITER&lt;/span&gt;&lt;span&gt;.lock().write_fmt(args).unwrap();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;});
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.rs/x86_64/0.2.10/x86_64/instructions/interrupts/fn.without_interrupts.html&quot;&gt;&lt;code&gt;without_interrupts&lt;/code&gt;&lt;/a&gt; function takes a &lt;a href=&quot;https://doc.rust-lang.org/book/second-edition/ch13-01-closures.html&quot;&gt;closure&lt;/a&gt; and executes it in an interrupt-free environment. We use it to ensure that no interrupt can occur as long as the &lt;code&gt;Mutex&lt;/code&gt; is locked. When we run our kernel now we see that it keeps running without hanging. (We still don't notice any dots, but this is because they're scrolling by too fast. Try to slow down the printing, e.g. by putting a &lt;code&gt;for _ in 0..10000 {}&lt;/code&gt; inside the loop.)&lt;/p&gt;
&lt;p&gt;We can apply the same change to our serial printing function to ensure that no deadlocks occur with it either:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/serial.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub fn &lt;/span&gt;&lt;span&gt;print(args: ::core::fmt::Arguments) {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;core::fmt::Write;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::instructions::interrupts;       &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;interrupts::without_interrupts(|| {         &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;SERIAL1
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;.lock()
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;.write_fmt(args)
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;.expect(&lt;/span&gt;&lt;span&gt;&quot;Printing to serial failed&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;});
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Note that disabling interrupts shouldn't be a general solution. The problem is that it increases the worst case interrupt latency, i.e. the time until the system reacts to an interrupt. Therefore interrupts should be only disabled for a very short time.&lt;/p&gt;
&lt;h2 id=&quot;the&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#the&quot; aria-label=&quot;Anchor link for: the&quot;&gt;🔗&lt;/a&gt; The &lt;code&gt;hlt&lt;/code&gt; Instruction&lt;/h2&gt;
&lt;p&gt;Until now we used a simple empty loop statement at the end of our &lt;code&gt;_start&lt;/code&gt; and &lt;code&gt;panic&lt;/code&gt; functions. This causes the CPU to spin endlessly and thus works as expected. But it is also very inefficient, because the CPU continues to run at full speed even though there's no work to do. You can see this problem in your task manager when you run your kernel: The QEMU process needs close to 100% CPU the whole time.&lt;/p&gt;
&lt;p&gt;What we really want to do is to halt the CPU until the next interrupt arrives. This allows the CPU to enter a sleep state in which it consumes much less energy. The &lt;a href=&quot;https://en.wikipedia.org/wiki/HLT_(x86_instruction)&quot;&gt;&lt;code&gt;hlt&lt;/code&gt; instruction&lt;/a&gt; does exactly that. Let's use this instruction to create an energy efficient endless loop:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/lib.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub fn &lt;/span&gt;&lt;span&gt;hlt_loop() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;loop &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;x86_64::instructions::hlt();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;instructions::hlt&lt;/code&gt; function is just a &lt;a href=&quot;https://github.com/rust-osdev/x86_64/blob/5e8e218381c5205f5777cb50da3ecac5d7e3b1ab/src/instructions/mod.rs#L16-L22&quot;&gt;thin wrapper&lt;/a&gt; around the assembly instruction. It is safe because there's no way it can compromise memory safety.&lt;/p&gt;
&lt;p&gt;We can now use this &lt;code&gt;hlt_loop&lt;/code&gt; instead of the endless loops in our &lt;code&gt;_start&lt;/code&gt; and &lt;code&gt;panic&lt;/code&gt; functions:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;It did not crash!&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::hlt_loop();            &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[panic_handler]
&lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;panic(info: &lt;/span&gt;&lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;PanicInfo) -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, info);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::hlt_loop();            &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We can also use &lt;code&gt;hlt_loop&lt;/code&gt; in our double fault exception handler as well:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/interrupts.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;use&lt;/span&gt;&lt;span&gt; hlt_loop; &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;extern &lt;/span&gt;&lt;span&gt;&quot;x86-interrupt&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;double_fault_handler(
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;stack_frame: &lt;/span&gt;&lt;span&gt;&amp;amp;mut&lt;/span&gt;&lt;span&gt; ExceptionStackFrame,
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;_error_code: &lt;/span&gt;&lt;span&gt;u64&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;EXCEPTION: DOUBLE FAULT&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;{:#?}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, stack_frame);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;hlt_loop(); &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When we run our kernel now in QEMU, we see a much lower CPU usage.&lt;/p&gt;
&lt;h2 id=&quot;keyboard-input&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#keyboard-input&quot; aria-label=&quot;Anchor link for: keyboard-input&quot;&gt;🔗&lt;/a&gt; Keyboard Input&lt;/h2&gt;
&lt;p&gt;Now that we are able to handle interrupts from external devices we are finally able to add support for keyboard input. This will allow us to interact with our kernel for the first time.&lt;/p&gt;
&lt;aside class=&quot;post_aside&quot; readability=&quot;30.497975708502&quot;&gt;&lt;p&gt;Note that we only describe how to handle &lt;a href=&quot;https://en.wikipedia.org/wiki/PS/2_port&quot;&gt;PS/2&lt;/a&gt; keyboards here, not USB keyboards. However the mainboard emulates USB keyboards as PS/2 devices to support older software, so we can safely ignore USB keyboards until we have USB support in our kernel.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Like the hardware timer, the keyboard controller is already enabled by default. So when you press a key the keyboard controller sends an interrupt to the PIC, which forwards it to the CPU. The CPU looks for a handler function in the IDT, but the corresponding entry is empty. Therefore a double fault occurs.&lt;/p&gt;
&lt;p&gt;So let's add a handler function for the keyboard interrupt. It's quite similar to how we defined the handler for the timer interrupt, it just uses a different interrupt number:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/interrupts.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;pub const &lt;/span&gt;&lt;span&gt;KEYBOARD_INTERRUPT_ID&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;u8 = &lt;/span&gt;&lt;span&gt;PIC_1_OFFSET &lt;/span&gt;&lt;span&gt;+ &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;; &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;lazy_static! {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;static ref &lt;/span&gt;&lt;span&gt;IDT&lt;/span&gt;&lt;span&gt;: InterruptDescriptorTable &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;let mut&lt;/span&gt;&lt;span&gt; idt &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;InterruptDescriptorTable::new();
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;idt.breakpoint.set_handler_fn(breakpoint_handler);
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;idt[&lt;/span&gt;&lt;span&gt;usize&lt;/span&gt;&lt;span&gt;::from(&lt;/span&gt;&lt;span&gt;KEYBOARD_INTERRUPT_ID&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;.set_handler_fn(keyboard_interrupt_handler);
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;idt
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;extern &lt;/span&gt;&lt;span&gt;&quot;x86-interrupt&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;keyboard_interrupt_handler(
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;_stack_frame: &lt;/span&gt;&lt;span&gt;&amp;amp;mut&lt;/span&gt;&lt;span&gt; ExceptionStackFrame)
&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;print!(&lt;/span&gt;&lt;span&gt;&quot;k&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;.lock().notify_end_of_interrupt(&lt;/span&gt;&lt;span&gt;KEYBOARD_INTERRUPT_ID&lt;/span&gt;&lt;span&gt;) }
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As we see from the graphic &lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#the-8259-pic&quot;&gt;above&lt;/a&gt;, the keyboard uses line 1 of the primary PIC. This means that it arrives at the CPU as interrupt 33 (1 + offset 32). We again create a &lt;code&gt;KEYBOARD_INTERRUPT_ID&lt;/code&gt; constant to keep things organized. In the interrupt handler, we print a &lt;code&gt;k&lt;/code&gt; and send the end of interrupt signal to the interrupt controller.&lt;/p&gt;
&lt;p&gt;We now see that a &lt;code&gt;k&lt;/code&gt; appears on the screen when we press a key. However, this only works for the first key we press, even if we continue to press keys no more &lt;code&gt;k&lt;/code&gt;s appear on the screen. This is because the keyboard controller won't send another interrupt until we have read the so-called &lt;em&gt;scancode&lt;/em&gt; of the pressed key.&lt;/p&gt;
&lt;h3 id=&quot;reading-the-scancodes&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#reading-the-scancodes&quot; aria-label=&quot;Anchor link for: reading-the-scancodes&quot;&gt;🔗&lt;/a&gt; Reading the Scancodes&lt;/h3&gt;
&lt;p&gt;To find out &lt;em&gt;which&lt;/em&gt; key was pressed, we need to query the keyboard controller. We do this by reading from the from the data port of the PS/2 controller, which is the &lt;a href=&quot;https://os.phil-opp.com/integration-tests/#port-i-o&quot;&gt;I/O port&lt;/a&gt; with number &lt;code&gt;0x60&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/interrupts.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;extern &lt;/span&gt;&lt;span&gt;&quot;x86-interrupt&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;keyboard_interrupt_handler(
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;_stack_frame: &lt;/span&gt;&lt;span&gt;&amp;amp;mut&lt;/span&gt;&lt;span&gt; ExceptionStackFrame)
&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::instructions::port::Port;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; port &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;Port::new(&lt;/span&gt;&lt;span&gt;0x60&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; scancode: &lt;/span&gt;&lt;span&gt;u8 = unsafe &lt;/span&gt;&lt;span&gt;{ port.read() };
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;print!(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, scancode);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;.lock().notify_end_of_interrupt(&lt;/span&gt;&lt;span&gt;KEYBOARD_INTERRUPT_ID&lt;/span&gt;&lt;span&gt;) }
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We use the &lt;a href=&quot;https://docs.rs/x86_64/0.2.11/x86_64/instructions/port/struct.Port.html&quot;&gt;&lt;code&gt;Port&lt;/code&gt;&lt;/a&gt; type of the &lt;code&gt;x86_64&lt;/code&gt; crate to read a byte from the keyboard's data port. This byte is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Scancode&quot;&gt;&lt;em&gt;scancode&lt;/em&gt;&lt;/a&gt; and is a number that represents the key press/release. We don't do anything with the scancode yet, we just print it to the screen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/hardware-interrupts/qemu-printing-scancodes.gif&quot; alt=&quot;QEMU printing scancodes to the screen when keys are pressed&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The above image shows me slowly typing &quot;123&quot;. We see that adjacent keys have adjacent scancodes and that pressing a key causes a different scancode than releasing it. But how do we translate the scancodes to the actual key actions exactly?&lt;/p&gt;
&lt;h3 id=&quot;interpreting-the-scancodes&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#interpreting-the-scancodes&quot; aria-label=&quot;Anchor link for: interpreting-the-scancodes&quot;&gt;🔗&lt;/a&gt; Interpreting the Scancodes&lt;/h3&gt;
&lt;p&gt;There are three different standards for the mapping between scancodes and keys, the so-called &lt;em&gt;scancode sets&lt;/em&gt;. All three go back to the keyboards of early IBM computers: the &lt;a href=&quot;https://en.wikipedia.org/wiki/IBM_Personal_Computer_XT&quot;&gt;IBM XT&lt;/a&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/IBM_3270_PC&quot;&gt;IBM 3270 PC&lt;/a&gt;, and the &lt;a href=&quot;https://en.wikipedia.org/wiki/IBM_Personal_Computer/AT&quot;&gt;IBM AT&lt;/a&gt;. Later computers fortunately did not continue the trend of defining new scancode sets, but rather emulated the existing sets and extended them. Today most keyboards can be configured to emulate any of the three sets.&lt;/p&gt;
&lt;p&gt;By default, PS/2 keyboards emulate scancode set 1 (&quot;XT&quot;). In this set, the lower 7 bits of a scancode byte define the key, and the most significant bit defines whether it's a press (&quot;0&quot;) or a release (&quot;1&quot;). Keys that were not present on the original &lt;a href=&quot;https://en.wikipedia.org/wiki/IBM_Personal_Computer_XT&quot;&gt;IBM XT&lt;/a&gt; keyboard, such as the enter key on the keypad, generate two scancodes in succession: a &lt;code&gt;0xe0&lt;/code&gt; escape byte and then a byte representing the key. For a list of all set 1 scancodes and their corresponding keys, check out the &lt;a href=&quot;https://wiki.osdev.org/Keyboard#Scan_Code_Set_1&quot;&gt;OSDev Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To translate the scancodes to keys, we can use a match statement:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/interrupts.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;extern &lt;/span&gt;&lt;span&gt;&quot;x86-interrupt&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;keyboard_interrupt_handler(
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;_stack_frame: &lt;/span&gt;&lt;span&gt;&amp;amp;mut&lt;/span&gt;&lt;span&gt; ExceptionStackFrame)
&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::instructions::port::Port;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; port &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;Port::new(&lt;/span&gt;&lt;span&gt;0x60&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; scancode: &lt;/span&gt;&lt;span&gt;u8 = unsafe &lt;/span&gt;&lt;span&gt;{ port.read() };
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; key &lt;/span&gt;&lt;span&gt;= match&lt;/span&gt;&lt;span&gt; scancode {
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0x02 &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;Some(&lt;/span&gt;&lt;span&gt;'1'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0x03 &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;Some(&lt;/span&gt;&lt;span&gt;'2'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0x04 &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;Some(&lt;/span&gt;&lt;span&gt;'3'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0x05 &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;Some(&lt;/span&gt;&lt;span&gt;'4'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0x06 &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;Some(&lt;/span&gt;&lt;span&gt;'5'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0x07 &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;Some(&lt;/span&gt;&lt;span&gt;'6'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0x08 &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;Some(&lt;/span&gt;&lt;span&gt;'7'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0x09 &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;Some(&lt;/span&gt;&lt;span&gt;'8'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0x0a &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;Some(&lt;/span&gt;&lt;span&gt;'9'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0x0b &lt;/span&gt;&lt;span&gt;=&amp;gt; &lt;/span&gt;&lt;span&gt;Some(&lt;/span&gt;&lt;span&gt;'0'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;_ =&amp;gt; &lt;/span&gt;&lt;span&gt;None,
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if let &lt;/span&gt;&lt;span&gt;Some(key) &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; key {
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;print!(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, key);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;.lock().notify_end_of_interrupt(&lt;/span&gt;&lt;span&gt;KEYBOARD_INTERRUPT_ID&lt;/span&gt;&lt;span&gt;) }
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The above code just translates keypresses of the number keys 0-9 and ignores all other keys. Now we can write numbers:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/hardware-interrupts/qemu-printing-numbers.gif&quot; alt=&quot;QEMU printing numbers to the screen&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Translating the other keys could work in the same way, probably with an enum for control keys such as escape or backspace. Such a translation function would be a good candidate for a small external crate, but I couldn't find one that works with scancode set 1. In case you'd like to write such a crate and need mentoring, just let us know, we're happy to help!&lt;/p&gt;
&lt;h3 id=&quot;configuring-the-keyboard&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#configuring-the-keyboard&quot; aria-label=&quot;Anchor link for: configuring-the-keyboard&quot;&gt;🔗&lt;/a&gt; Configuring the Keyboard&lt;/h3&gt;
&lt;p&gt;It's possible to configure some aspects of a PS/2 keyboard, for example which scancode set it should use. We won't cover it here because this post is already long enough, but the OSDev Wiki has an overview of possible &lt;a href=&quot;https://wiki.osdev.org/PS/2_Keyboard#Commands&quot;&gt;configuration commands&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post we learned how to enable and handle external interrupts. We learned about the 8259 PIC and its primary/secondary layout, the remapping of the interrupt numbers, and the &quot;end of interrupt&quot; signal. We saw that the hardware timer and the keyboard controller are active by default and start to send interrupts as soon as we enable them in the CPU. We learned about the &lt;code&gt;hlt&lt;/code&gt; instruction, which halts the CPU until the next interrupt, and about the scancode sets of PS/2 keyboards.&lt;/p&gt;
&lt;p&gt;Now we are able to interact with our kernel and have some fundamental building blocks for creating a small shell or simple games.&lt;/p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/hardware-interrupts/#what-s-next&quot; aria-label=&quot;Anchor link for: what-s-next&quot;&gt;🔗&lt;/a&gt; What's next?&lt;/h2&gt;
&lt;p&gt;As already mentioned, the 8259 APIC has been superseded by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_APIC_Architecture&quot;&gt;APIC&lt;/a&gt;, a controller with more capabilities and multicore support. In the next post we will explore this controller and learn how to use its integrated timer and how to set interrupt priorities.&lt;/p&gt;

</description>
<pubDate>Mon, 22 Oct 2018 12:59:27 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://os.phil-opp.com/hardware-interrupts/</dc:identifier>
</item>
<item>
<title>What does Stack Overflow want to be when it grows up?</title>
<link>https://blog.codinghorror.com/what-does-stack-overflow-want-to-be-when-it-grows-up/</link>
<guid isPermaLink="true" >https://blog.codinghorror.com/what-does-stack-overflow-want-to-be-when-it-grows-up/</guid>
<description>&lt;p&gt;I sometimes get asked by regular people in the actual real world what it is that I do for a living, and here's my 15 second answer:&lt;/p&gt;
&lt;blockquote readability=&quot;5.2432432432432&quot;&gt;
&lt;p&gt;We built a sort of Wikipedia website for programmers to post questions and answers. It's called &lt;a href=&quot;https://stackoverflow.com&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As of last month, it's been 10 years since Joel Spolsky and I &lt;a href=&quot;https://blog.codinghorror.com/stack-overflow-none-of-us-is-as-dumb-as-all-of-us/&quot;&gt;started Stack Overflow&lt;/a&gt;. I currently do &lt;a href=&quot;https://blog.codinghorror.com/civilized-discourse-construction-kit/&quot;&gt;other stuff now&lt;/a&gt;, and I have since 2012, but if I will be known for anything when I'm dead, clearly it is going to be good old Stack Overflow.&lt;/p&gt;
&lt;p&gt;Here's where I'd normally segue into a bunch of rah-rah stuff about how great Stack Overflow is, and thus how implicitly great I am by association for being a founder, and all.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.poorlydrawnlines.com/comic/bragging/&quot;&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/bragging.png&quot; alt=&quot;bragging&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I do not care about any of that.&lt;/p&gt;
&lt;p&gt;What I do care about, though, is &lt;em&gt;whether Stack Overflow is useful to working programmers&lt;/em&gt;. Let's check in with &lt;a href=&quot;https://blog.codinghorror.com/you-dont-need-millions-of-dollars/&quot;&gt;one of my idols&lt;/a&gt;, John Carmack. How useful is Stack Overflow, from the perspective of what I consider to be one of the greatest living programmers?&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot; readability=&quot;4.5245901639344&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/StackExchange?ref_src=twsrc%5Etfw&quot;&gt;@StackExchange&lt;/a&gt; &lt;a href=&quot;https://twitter.com/codinghorror?ref_src=twsrc%5Etfw&quot;&gt;@codinghorror&lt;/a&gt; SO has probably added billions of dollars of value to the world in increased programmer productivity.&lt;/p&gt;
— John Carmack (@ID_AA_Carmack) &lt;a href=&quot;https://twitter.com/ID_AA_Carmack/status/380018564792455168?ref_src=twsrc%5Etfw&quot;&gt;September 17, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;I won't lie, September 17th, 2013 was a &lt;a href=&quot;https://www.youtube.com/watch?v=O_05qJTeNNI&quot;&gt;pretty good day&lt;/a&gt;. I literally got chills when I read that, and not just because I always read the word &quot;billions&quot; in Carl Sagan's voice. It was also pleasantly the opposite of pretty much every &lt;em&gt;other&lt;/em&gt; day I'm on Twitter, scrolling through an oppressive, endless litany of shared human suffering and people screaming at each other. Which reminds me, I should &lt;a href=&quot;https://twitter.com/codinghorror&quot;&gt;check my Twitter&lt;/a&gt; and see who else is wrong on the Internet today.&lt;/p&gt;
&lt;p&gt;I am honored and humbled by the public utility that Stack Overflow has unlocked for a whole generation of programmers. But &lt;em&gt;I didn't do that&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;You&lt;/em&gt; did, when you contributed a well researched question to Stack Overflow.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You&lt;/em&gt; did, when you contributed a succinct and clear answer to Stack Overflow.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You&lt;/em&gt; did, when you edited a question or answer on Stack Overflow to make it better.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All those &quot;fun size&quot; units of Q&amp;amp;A collectively contributed by working programmers from all around the world ended up building a &lt;a href=&quot;https://wiki.creativecommons.org/wiki/Case_Studies/StackOverflow.com&quot;&gt;Creative Commons resource&lt;/a&gt; that truly rivals Wikipedia within our field. That's ... incredible, actually.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/stack-overflow-homepage-oct-2018.png&quot; alt=&quot;stack-overflow-homepage-oct-2018&quot;/&gt;&lt;/p&gt;
&lt;p&gt;But success stories are boring. The world is filled with people that &lt;a href=&quot;https://blogs.scientificamerican.com/beautiful-minds/the-role-of-luck-in-life-success-is-far-greater-than-we-realized/&quot;&gt;basically got lucky&lt;/a&gt;, and subsequently can't stop telling people how it was all of their hard work and moxie that made it happen. I find failure much more instructive, and when building a business and planning for the future, I take on the role of Abyss Domain Expert™ and begin a staring contest. It's just a little something I like to do, you know ... &lt;em&gt;for me&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/comics/comments/8a4c2h/abyss_oc/&quot;&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/abyss-oc.jpg&quot; alt=&quot;abyss-oc&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thus, what I'd like to do right now is peer into that glorious abyss for a bit and introspect about &lt;strong&gt;the challenges I see facing Stack Overflow for the next 10 years.&lt;/strong&gt; Before I begin, I do want to be absolutely crystal clear about a few things:&lt;/p&gt;
&lt;ol readability=&quot;13.891608391608&quot;&gt;&lt;li readability=&quot;5.7342657342657&quot;&gt;
&lt;p&gt;I have not worked at Stack Overflow in any capacity whatsoever &lt;a href=&quot;https://blog.codinghorror.com/farewell-stack-exchange/&quot;&gt;since February 2012&lt;/a&gt; and I've had zero day to day operational input since that date, more or less by choice. Do I have opinions about how things should be done? Uh, have you &lt;em&gt;met me?&lt;/em&gt; Do I email people every now and then about said opinions? I might, but I honestly do try to keep it to an absolute minimum, and I think my email archive track record here is reasonable.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;The people working at Stack are amazing and most of them (including much of the Stack Overflow community, while I'm at it) could articulate the mission better — and perhaps a tad less crankily — than I could by the time I left. Would I trust them with my life? No. But I'd trust them with Joel's life!&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8.536299765808&quot;&gt;
&lt;p&gt;The whole point of the Stack Overflow exercise is that it's not beholden to me, or Joel, or &lt;a href=&quot;https://en.wikipedia.org/wiki/Great_man_theory&quot;&gt;any other Great Person&lt;/a&gt;. Stack Overflow works because it empowers regular everyday programmers all over the world, just like you, just like me. I guess in my mind it's akin to being a parent. The goal is for your children to eventually grow up to be sane, practicing adults who don't need (or, really, &lt;em&gt;want&lt;/em&gt;) you to hang around any more.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.7192028985507&quot;&gt;
&lt;p&gt;Understand that you're reading &lt;s&gt;the weak opinions strongly held&lt;/s&gt; &lt;a href=&quot;https://blog.codinghorror.com/strong-opinions-weakly-held/&quot;&gt;the strong opinions weakly held&lt;/a&gt; of a co-founder who spent prodigious amounts of time working with the community in the first four years of Stack Overflow's life to shape the rules and norms of the site to fit their needs. These are merely my opinions. I like to think they are &lt;em&gt;informed&lt;/em&gt; opinions, but that doesn't necessarily mean I can predict the future, or that I am even qualified to try. I've never let being &quot;qualified&quot; stop me from doing anything, and I ain't about to start tonight.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;stackoverflowisawikifirst&quot;&gt;Stack Overflow is a wiki first&lt;/h3&gt;
&lt;p&gt;Stack Overflow ultimately has &lt;em&gt;much&lt;/em&gt; more in common with Wikipedia than a discussion forum. By this I mean questions and answers on Stack Overflow are not primarily judged by their usefulness to a specific individual, but by &lt;strong&gt;how many &lt;em&gt;other&lt;/em&gt; programmers that question or answer can potentially help over time&lt;/strong&gt;. I tried as hard as I could to emphasize this relationship from &lt;a href=&quot;https://blog.codinghorror.com/stack-overflow-none-of-us-is-as-dumb-as-all-of-us/&quot;&gt;launch day in 2008&lt;/a&gt;. Note who has top billing in this venn diagram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/stack-overflow-venn-diagram.png&quot; alt=&quot;stack-overflow-venn-diagram&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Stack Overflow later added a super neat feature to highlight this core value in user profiles, where it shows how many other people you have potentially helped with your contributed questions and answers so far.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/stackoverflow-people-reached-profile-stat-1.png&quot; alt=&quot;stackoverflow-people-reached-profile-stat-1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The most common complaints I see about Stack Overflow are usually the result of this fundamental misunderstanding about who the questions and answers on the site are ultimately &lt;em&gt;for&lt;/em&gt;, and why there's so much strictness involved in the whole process.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot; readability=&quot;6.6449275362319&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I wish more people understood that the goal of Stack Overflow is not &quot;answer my question&quot; but &quot;let's collaboratively build an artifact that will benefit future coders&quot;. Perhaps SO could be doing more to educate people about this.&lt;/p&gt;
— Jeff Atwood (@codinghorror) &lt;a href=&quot;https://twitter.com/codinghorror/status/991082088689381376?ref_src=twsrc%5Etfw&quot;&gt;April 30, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;The responsibility for this misunderstanding is all on Stack Overflow (and by that also mean myself, at least up until 2012). I guess the logic is that &quot;every programmer has surely seen, used, and understands Stack Overflow by now, 10 years in&quot; but ... I think that's a risky assumption. New programmers are minted every second of every day. Complicating matters further, there are three tiers of usage at Stack Overflow, from biggest to smallest, in inverted pyramid style:&lt;/p&gt;
&lt;ol readability=&quot;14.5&quot;&gt;&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;I passively search for programming answers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Passively searching and reading highly ranked Stack Overflow answers as they appear in web search results is arguably the &lt;em&gt;primary goal of Stack Overflow&lt;/em&gt;. If Stack Overflow is working like it's supposed to, 98% of programmers should get all the answers they need from reading search result pages and wouldn't need to ask or answer a single question in their entire careers. This is a good thing! Great, even!&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;strong&gt;I participate on Stack Overflow when I get stuck on a really hairy problem and searching isn't helping.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Participating only at those times when you are extra stuck is completely valid. However, I feel this level is where most people tend to run into difficulty on Stack Overflow, because it involves someone who may not be new to Stack Overflow per se, but is new to asking questions, and also at the precise time of stress and tension for them where they &lt;em&gt;must&lt;/em&gt; get an answer due to a problem they're facing … and they don't have the time or inclination to deal with Stack Overflow's strict wiki type requirements for research effort, formatting, showing previous work, and referencing what they found in prior searches.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;I participate on Stack Overflow for professional development.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At this level you're talking about experienced Stack Overflow users who have contributed many answers and thus have a pretty good idea of what makes a great question, the kind they'd want to answer themselves. As a result, they don't tend to ask many questions because they self-medicate through exhaustive searching and research, but when they do ask one, their questions are exemplary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;(There's technically a fourth tier here, for people who want to selflessly contribute creative commons questions and answers to move the entire field of software development forward for the next generation of software developers. But who has time for saints 😇, y'all make the rest of us look bad, so knock it off already Skeet.)&lt;/p&gt;
&lt;p&gt;It wouldn't shock me at all if people spent &lt;em&gt;years&lt;/em&gt; happily at tier 1 and then got a big unpleasant surprise when reaching tier 2. The primary place to deal with this, in my opinion, is a &lt;strong&gt;massively revamped and improved ask page&lt;/strong&gt;. It's also fair to note that maybe people don't understand that they're signing up for a sizable chunk of work by implicitly committing to the wiki standard of &quot;try to make sure it's useful to more people than just yourself&quot; when asking a question on Stack Overflow, and are then put off by the negative reaction to what others view as an insufficiently researched question.&lt;/p&gt;
&lt;p&gt;Stack Overflow absorbs so much tension from its adoption of wiki standards for content. Even if you know about that requirement up front, it is not always clear what &quot;useful&quot; means, in the same way it's not always clear what topics, people, and places are deserving of a Wikipedia page. &lt;a href=&quot;https://en.wikipedia.org/wiki/Henrietta_Lacks&quot;&gt;Henrietta Lacks&lt;/a&gt;, absolutely, but what about your cousin Dave in Omaha with his weirdo PHP 5.6 issue?&lt;/p&gt;
&lt;h3 id=&quot;overtimeduplicatesbecomevastfieldsoflandmines&quot;&gt;Over time, duplicates become vast fields of landmines&lt;/h3&gt;
&lt;p&gt;Here's one thing &lt;a href=&quot;https://stackoverflow.blog/2009/04/29/handling-duplicate-questions/&quot;&gt;I really, really saw coming&lt;/a&gt; and to be honest with you I was kinda glad I left in 2012 before I had to deal with it because of the incredible technical difficulty involved: &lt;strong&gt;duplicates&lt;/strong&gt;. Of all the complaints I hear about Stack Overflow, this is the one I am most sympathetic to by far.&lt;/p&gt;
&lt;p&gt;If you accept that Stack Overflow is a wiki type system, then for the same reasons that you obviously can't have five different articles about Italy on Wikipedia, &lt;strong&gt;Stack Overflow can't accept duplicate questions on the exact same programming problem&lt;/strong&gt;. While there is a fair amount of code to do pre-emptive searches as people type in questions, plus &lt;em&gt;many&lt;/em&gt; exhortations to search before you ask, with an inviting search field and button right there on the mandatory page you see before asking your first question ...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/ask/advice&quot;&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/stack-overflow-how-to-ask.jpg&quot; alt=&quot;stack-overflow-how-to-ask&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;... locating and identifying duplicate content is an insanely difficult problem even for a company like Google that's done nothing but specialize in this exact problem for, what, 20 years now, with a veritable army of the world's most talented engineers.&lt;/p&gt;
&lt;p&gt;When you're asking a question on a site that doesn't allow duplicate questions, the problem space of a site with 1 million existing questions is rather different from a site with 10 million existing questions ... or 100 million. Asking a single unique question goes from mildly difficult to mission almost impossible, because your question needs to thread a narrow path through this vast, enormous field of prior art questions without stepping on any of the vaguely similar looking landmines in the process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/stackoverflow-asking-duplicate-question.png&quot; alt=&quot;stackoverflow-asking-duplicate-question&quot;/&gt;&lt;/p&gt;
&lt;p&gt;But wait! &lt;em&gt;It gets harder!&lt;/em&gt;&lt;/p&gt;
&lt;ul readability=&quot;4.7453703703704&quot;&gt;&lt;li readability=&quot;5.4210526315789&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.blog/2010/11/16/dr-strangedupe-or-how-i-learned-to-stop-worrying-and-love-duplication/&quot;&gt;Some variance in similar-ish questions is OK&lt;/a&gt;, because 10 different people will ask a nearly identical question using 10 different sets of completely unrelated words with no overlap. I know, it sounds crazy, but trust me: humans are amazing at this. We want all those duplicates to exist so they can &lt;em&gt;point to&lt;/em&gt; the primary question they are a duplicate of, while still being valid search targets for people who ask questions with unusual or rare word choices.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;It can be legitimately difficult to determine if your question is a true duplicate. How much overlap is enough before one programming question is a duplicate of another? And by whose definition? Opinions vary. This is subject to human interpretation, and humans are.. unreliable. Nobody will ever be completely happy with this system, pretty much by design. That tension is baked in permanently and forever.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I don't have any real answers on the duplicate problem, which only gets worse over time. But I will point out that there is plenty of precedent &lt;a href=&quot;https://stackexchange.com/sites#traffic&quot;&gt;on the Stack Exchange network&lt;/a&gt; for splitting sites into &quot;expert&quot; and &quot;beginner&quot; areas with slightly different rulesets. We've seen this for Math vs. MathOverflow, English vs. English Learners, Unix vs. Ubuntu... &lt;strong&gt;perhaps it's time for a more beginner focused Stack Overflow where duplicates are less frowned upon, and conversational rules are a bit more lenient?&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;stackoverflowisacompetitivesystemofpeerreview&quot;&gt;Stack Overflow is a competitive system of peer review&lt;/h3&gt;
&lt;p&gt;Stack Overflow was indeed built to be a fairly explicitly competitive system, with the caveat that &lt;a href=&quot;http://wiki.c2.com/?ThereIsMoreThanOneWayToDoIt&quot;&gt;&quot;there's always more than one way to do it.&quot;&lt;/a&gt; This design choice was based on my perennial observation that the best way to motivate any programmer .. is to subtly insinuate that &lt;em&gt;another&lt;/em&gt; programmer could have maybe done it better.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.geekherocomic.com/2008/11/14/the-best-way-to-improve-code-performance/&quot;&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/geek-hero-motivating-programmers.png&quot; alt=&quot;geek-hero-motivating-programmers&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is manifested in the public reputation system on Stack Overflow, the &lt;a href=&quot;https://blog.codinghorror.com/for-a-bit-of-colored-ribbon/&quot;&gt;incredible power of a number printed next to someone's name&lt;/a&gt;, writ large. All reputation in Stack Overflow comes from the recognition of your peers, never the &quot;system&quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/stack-overflow-top-rep-by-year.png&quot; alt=&quot;stack-overflow-top-rep-by-year&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Once your question is asked, or your answer is posted, it can then be poked, prodded, edited, flagged, closed, opened, upvoted, downvoted, &lt;a href=&quot;http://www.cs.mun.ca/~harold/Courses/Old/CS1400.W15/Diary/Lubar1992.pdf&quot;&gt;folded and spindled&lt;/a&gt; by your peers. The &lt;em&gt;intent&lt;/em&gt; is for Stack Overflow to be a system of peer review and friendly competition, like a code review from a coworker you've never met at a different division of the company. It's also completely fair for a fellow programmer to question the premise of your question, as long as it's done in a nice way. For example, &lt;a href=&quot;https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags&quot;&gt;do you &lt;em&gt;really&lt;/em&gt; want to use that regular expression to match HTML?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I fully acknowledge that &lt;strong&gt;competitive peer review systems aren't for everyone&lt;/strong&gt;, and thus the overall process of having peers review your question may not always feel great, depending on your circumstances and background in the field — &lt;em&gt;particularly&lt;/em&gt; when combined with the substantial tensions around utility and duplicates Stack Overflow already absorbed from its wiki elements. Kind of a double whammy there.&lt;/p&gt;
&lt;p&gt;I've heard people describe the process of asking a question on Stack Overflow as anxiety inducing. To me, posting on Stack Overflow is &lt;em&gt;supposed&lt;/em&gt; to involve a healthy kind of minor &quot;let me be sure to show off my best work&quot; anxiety:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the anxiety of giving a presentation to your fellow peers&lt;/li&gt;
&lt;li&gt;the anxiety of doing your best work on a test&lt;/li&gt;
&lt;li&gt;the anxiety of showing up to a new job with talented coworkers you admire&lt;/li&gt;
&lt;li&gt;the anxiety of attending your first day at school with other students at your level&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I imagine systems where there is zero anxiety involved and I can only think of jobs where I had long since stopped caring about the work and thus had no anxiety about whether I even showed for work on any given day. How can that be good? Let's just say I'm not a fan of zero-anxiety systems.&lt;/p&gt;
&lt;p&gt;Maybe competition just isn't your jam. Could there be a less competitive Q&amp;amp;A system, a system without downvotes, a system without close votes, where there was never any anxiety about posting anything, just a network of super supportive folks who believe in you and want you to succeed no matter what? Absolutely! I think many alternative sites &lt;em&gt;should&lt;/em&gt; exist on the internet so people can choose an experience that matches their personal preferences and goals. Should Stack build that alternative? Has it already been built? It's an open question; feel free to point out examples in the comments.&lt;/p&gt;
&lt;h3 id=&quot;stackoverflowisdesignedforpracticingprogrammers&quot;&gt;Stack Overflow is designed for practicing programmers&lt;/h3&gt;
&lt;p&gt;Another point of confusion that comes up a fair bit is who the intended audience for Stack Overflow actually is. That one is straightforward, and it's been the same from day one:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/stackoverflow-for-business-description.png&quot; alt=&quot;stackoverflow-for-business-description&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Q&amp;amp;A for &lt;strong&gt;professional and enthusiast programmers&lt;/strong&gt;. By that we mean&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;People who either already have a job as a programmer, or could potentially be hired as a programmer today if they wanted to be.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, in case you're wondering, part of this was an overt business decision. To make money you must have an audience of people already on a programmer's salary, or in the job hunt to be a programmer. The entire Stack Overflow network may be Creative Commons licensed, but it was never a non-profit play. It was planned as a sustainable business from the outset, and that's why &lt;a href=&quot;https://blog.codinghorror.com/stack-overflow-careers-amplifying-your-awesome/&quot;&gt;we launched Stack Overflow Careers&lt;/a&gt; only one year after Stack Overflow itself ... to be honest far sooner than we should have, in retrospect. Careers has since been smartly subsumed into Stack Overflow proper at &lt;a href=&quot;https://stackoverflow.com/jobs&quot;&gt;stackoverflow.com/jobs&lt;/a&gt; for a more integrated and most assuredly way-better-than-2009 experience.&lt;/p&gt;
&lt;p&gt;The choice of audience wasn't meant to be an exclusionary decision in any way, but Stack Overflow was definitely designed as a fairly strict system of peer review, which is great (IMNSHO, obviously) for already practicing professionals, but &lt;strong&gt;pretty much everything you would &lt;em&gt;not&lt;/em&gt; want as a student or beginner&lt;/strong&gt;. This is why I cringe so hard I practically turn myself inside out when people on Twitter mention that they have pointed their students at Stack Overflow. What you'd want for a beginner or a student in the field of programming is almost &lt;em&gt;the exact opposite&lt;/em&gt; of what Stack Overflow does at every turn:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;one on one mentoring&lt;/li&gt;
&lt;li&gt;real time collaborative screen sharing&lt;/li&gt;
&lt;li&gt;live chat&lt;/li&gt;
&lt;li&gt;theory and background courses&lt;/li&gt;
&lt;li&gt;starter tasks and exercises&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These are all very fine and good things, but Stack Overflow does &lt;em&gt;NONE&lt;/em&gt; of them, by design.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Can&lt;/em&gt; you use Stack Overflow to learn how to program from first principles? Well, technically you can do anything with any software. You could try to have actual conversations on Reddit, if you're a masochist. But the answer is yes. You could learn how to program on Stack Overflow, in theory, if you are a prodigy who is comfortable with the light competitive aspects (reputation, closing, downvoting) and also perfectly willing to define all your contributions to the site in terms of utility to others, not just yourself as a student attempting to learn things. But I &lt;em&gt;suuuuuuper&lt;/em&gt; would not recommend it. There are &lt;a href=&quot;https://blog.codinghorror.com/heres-the-programming-game-you-never-asked-for/&quot;&gt;far better websites and systems out there for learning to be a programmer&lt;/a&gt;. &lt;em&gt;Could&lt;/em&gt; Stack Overflow build beginner and student friendly systems like this? I don't know, and it's certainly not my call to make. 🤔&lt;/p&gt;
&lt;p&gt;And that's it. We can now resume our normal non-abyss gazing. Or whatever it is that passes for normal in these times.&lt;/p&gt;
&lt;p&gt;I hope all of this doesn't come across as negative. Overall I'd say the state of the Stack is strong. But does it even matter what I think? &lt;a href=&quot;https://stackoverflow.blog/2008/11/25/stack-overflow-is-you/&quot;&gt;As it was in 2008&lt;/a&gt;, so it is in 2018.&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;&lt;strong&gt;Stack Overflow is &lt;em&gt;you&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the scary part, the great leap of faith that Stack Overflow is predicated on: trusting your fellow programmers. The programmers who choose to participate in Stack Overflow are the “secret sauce” that makes it work. You are the reason I continue to believe in developer community as the greatest source of learning and growth. You are the reason I continue to get so many positive emails and testimonials about Stack Overflow. I can’t take credit for that. But you can.&lt;/p&gt;
&lt;p&gt;I learned the collective power of my fellow programmers long ago writing on Coding Horror. The community is far, far smarter than I will ever be. All I can ask — all any of us can ask — is to help each other along the path.&lt;/p&gt;
&lt;p&gt;And if your fellow programmers decide to recognize you for that, then I say you’ve well and truly earned it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The strength of Stack Overflow begins, and ends, with the &lt;a href=&quot;https://meta.stackoverflow.com/&quot;&gt;community of programmers that power the site&lt;/a&gt;. What should Stack Overflow be when it grows up? &lt;strong&gt;Whatever we make it, together.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.codinghorror.com/content/images/2018/10/stackoverflow-none-of-us-is-as-dumb-as-all-of-us.jpg&quot; alt=&quot;stackoverflow-none-of-us-is-as-dumb-as-all-of-us&quot;/&gt;&lt;/p&gt;
&lt;p&gt;p.s. Happy 10th anniversary Stack Overflow!&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;small&gt;Also see Joel's take on 10 years of Stack Overflow with &lt;a href=&quot;https://www.joelonsoftware.com/2018/04/06/the-stack-overflow-age/&quot;&gt;The Stack Overflow Age&lt;/a&gt;, &lt;a href=&quot;https://www.joelonsoftware.com/2018/04/13/gamification/&quot;&gt;A Dusting of Gamification&lt;/a&gt;, and &lt;a href=&quot;https://www.joelonsoftware.com/2018/04/23/strange-and-maddening-rules/&quot;&gt;Strange and Maddening Rules&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 22 Oct 2018 11:06:32 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.codinghorror.com/what-does-stack-overflow-want-to-be-when-it-grows-up/</dc:identifier>
</item>
<item>
<title>Sqlite: Code Of Conduct</title>
<link>https://sqlite.org/codeofconduct.html</link>
<guid isPermaLink="true" >https://sqlite.org/codeofconduct.html</guid>
<description>&lt;head&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;link href=&quot;sqlite.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;title&gt;Code Of Conduct&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;43.682924030296&quot;&gt;
&lt;div class=&quot;nosearch&quot; readability=&quot;3.2307692307692&quot;&gt;&lt;a href=&quot;https://sqlite.org/index.html&quot;&gt;&lt;img class=&quot;logo&quot; src=&quot;https://sqlite.org/images/sqlite370_banner.gif&quot; alt=&quot;SQLite&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;

&lt;p&gt;Small. Fast. Reliable.&lt;br /&gt;Choose any three.&lt;/p&gt;



&lt;/div&gt;
&lt;div class=&quot;fancy&quot; readability=&quot;41.76293508937&quot;&gt;
&lt;div class=&quot;nosearch&quot;&gt;
&lt;p&gt;Code Of Conduct&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Having been encouraged by clients to adopt a written code of conduct, the SQLite developers elected to govern their interactions with each other, with their clients, and with the larger SQLite user community in accordance with the &quot;instruments of good works&quot; from chapter 4 of &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_Saint_Benedict&quot;&gt;The Rule of St. Benedict&lt;/a&gt;. This code of conduct has proven its mettle in thousands of diverse communities for over 1,500 years, and has served as a baseline for many civil law codes since the time of Charlemagne.&lt;/p&gt;
&lt;p&gt;This rule is strict, and none are able to comply perfectly. Grace is readily granted for minor transgressions. All are encouraged to follow this rule closely, as in so doing they may expect to live happier, healthier, and more productive lives. The entire rule is good and wholesome, and yet we make no enforcement of the more introspective aspects.&lt;/p&gt;
&lt;p&gt;Everyone is free to use the SQLite source code, object code, and/or documentation regardless of their opinion of and adherence to this rule. SQLite has been and continues to be completely free to everyone, without precondition.&lt;/p&gt;
&lt;p&gt;However, those who wish to participate in the SQLite community, either by commenting on the public mailing lists or by contributing patches or suggestions or in any other way, are expected to conduct themselves in a manner that honors the overarching spirit of the rule, even if they disagree with specific details. Polite and professional discussion is always welcomed, from anyone.&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;First of all, love the Lord God with your whole heart, your whole soul, and your whole strength.&lt;/li&gt;
&lt;li&gt;Then, love your neighbor as yourself.&lt;/li&gt;
&lt;li&gt;Do not murder.&lt;/li&gt;
&lt;li&gt;Do not commit adultery.&lt;/li&gt;
&lt;li&gt;Do not steal.&lt;/li&gt;
&lt;li&gt;Do not covet.&lt;/li&gt;
&lt;li&gt;Do not bear false witness.&lt;/li&gt;
&lt;li&gt;Honor all.&lt;/li&gt;
&lt;li&gt;Do not do to another what you would not have done to yourself.&lt;/li&gt;
&lt;li&gt;Deny oneself in order to follow Christ.&lt;/li&gt;
&lt;li&gt;Chastise the body.&lt;/li&gt;
&lt;li&gt;Do not become attached to pleasures.&lt;/li&gt;
&lt;li&gt;Love fasting.&lt;/li&gt;
&lt;li&gt;Relieve the poor.&lt;/li&gt;
&lt;li&gt;Clothe the naked.&lt;/li&gt;
&lt;li&gt;Visit the sick.&lt;/li&gt;
&lt;li&gt;Bury the dead.&lt;/li&gt;
&lt;li&gt;Be a help in times of trouble.&lt;/li&gt;
&lt;li&gt;Console the sorrowing.&lt;/li&gt;
&lt;li&gt;Be a stranger to the world's ways.&lt;/li&gt;
&lt;li&gt;Prefer nothing more than the love of Christ.&lt;/li&gt;
&lt;li&gt;Do not give way to anger.&lt;/li&gt;
&lt;li&gt;Do not nurse a grudge.&lt;/li&gt;
&lt;li&gt;Do not entertain deceit in your heart.&lt;/li&gt;
&lt;li&gt;Do not give a false peace.&lt;/li&gt;
&lt;li&gt;Do not forsake charity.&lt;/li&gt;
&lt;li&gt;Do not swear, for fear of perjuring yourself.&lt;/li&gt;
&lt;li&gt;Utter only truth from heart and mouth.&lt;/li&gt;
&lt;li&gt;Do not return evil for evil.&lt;/li&gt;
&lt;li&gt;Do no wrong to anyone, and bear patiently wrongs done to yourself.&lt;/li&gt;
&lt;li&gt;Love your enemies.&lt;/li&gt;
&lt;li&gt;Do not curse those who curse you, but rather bless them.&lt;/li&gt;
&lt;li&gt;Bear persecution for justice's sake.&lt;/li&gt;
&lt;li&gt;Be not proud.&lt;/li&gt;
&lt;li&gt;Be not addicted to wine.&lt;/li&gt;
&lt;li&gt;Be not a great eater.&lt;/li&gt;
&lt;li&gt;Be not drowsy.&lt;/li&gt;
&lt;li&gt;Be not lazy.&lt;/li&gt;
&lt;li&gt;Be not a grumbler.&lt;/li&gt;
&lt;li&gt;Be not a detractor.&lt;/li&gt;
&lt;li&gt;Put your hope in God.&lt;/li&gt;
&lt;li&gt;Attribute to God, and not to self, whatever good you see in yourself.&lt;/li&gt;
&lt;li&gt;Recognize always that evil is your own doing, and to impute it to yourself.&lt;/li&gt;
&lt;li&gt;Fear the Day of Judgment.&lt;/li&gt;
&lt;li&gt;Be in dread of hell.&lt;/li&gt;
&lt;li&gt;Desire eternal life with all the passion of the spirit.&lt;/li&gt;
&lt;li&gt;Keep death daily before your eyes.&lt;/li&gt;
&lt;li&gt;Keep constant guard over the actions of your life.&lt;/li&gt;
&lt;li&gt;Know for certain that God sees you everywhere.&lt;/li&gt;
&lt;li&gt;When wrongful thoughts come into your heart, dash them against Christ immediately.&lt;/li&gt;
&lt;li&gt;Disclose wrongful thoughts to your spiritual mentor.&lt;/li&gt;
&lt;li&gt;Guard your tongue against evil and depraved speech.&lt;/li&gt;
&lt;li&gt;Do not love much talking.&lt;/li&gt;
&lt;li&gt;Speak no useless words or words that move to laughter.&lt;/li&gt;
&lt;li&gt;Do not love much or boisterous laughter.&lt;/li&gt;
&lt;li&gt;Listen willingly to holy reading.&lt;/li&gt;
&lt;li&gt;Devote yourself frequently to prayer.&lt;/li&gt;
&lt;li&gt;Daily in your prayers, with tears and sighs, confess your past sins to God, and amend them for the future.&lt;/li&gt;
&lt;li&gt;Fulfill not the desires of the flesh; hate your own will.&lt;/li&gt;
&lt;li&gt;Obey in all things the commands of those whom God has placed in authority over you even though they (which God forbid) should act otherwise, mindful of the Lord's precept, &quot;Do what they say, but not what they do.&quot;&lt;/li&gt;
&lt;li&gt;Do not wish to be called holy before one is holy; but first to be holy, that you may be truly so called.&lt;/li&gt;
&lt;li&gt;Fulfill God's commandments daily in your deeds.&lt;/li&gt;
&lt;li&gt;Love chastity.&lt;/li&gt;
&lt;li&gt;Hate no one.&lt;/li&gt;
&lt;li&gt;Be not jealous, nor harbor envy.&lt;/li&gt;
&lt;li&gt;Do not love quarreling.&lt;/li&gt;
&lt;li&gt;Shun arrogance.&lt;/li&gt;
&lt;li&gt;Respect your seniors.&lt;/li&gt;
&lt;li&gt;Love your juniors.&lt;/li&gt;
&lt;li&gt;Pray for your enemies in the love of Christ.&lt;/li&gt;
&lt;li&gt;Make peace with your adversary before the sun sets.&lt;/li&gt;
&lt;li&gt;Never despair of God's mercy.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/body&gt;</description>
<pubDate>Mon, 22 Oct 2018 10:39:25 +0000</pubDate>
<dc:creator>kragniz</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://sqlite.org/codeofconduct.html</dc:identifier>
</item>
<item>
<title>Linux 4.19</title>
<link>https://lkml.org/lkml/2018/10/22/184</link>
<guid isPermaLink="true" >https://lkml.org/lkml/2018/10/22/184</guid>
<description>&lt;pre itemprop=&quot;articleBody&quot;&gt;
Hi everyone!&lt;p&gt;It's been a long strange journey for this kernel release...&lt;/p&gt;&lt;p&gt;While it was not the largest kernel release every by number of commits,&lt;br /&gt;it was larger than the last 3 releases, which is a non-trivial thing to&lt;br /&gt;do.  After the original -rc1 bumps, things settled down on the code side&lt;br /&gt;and it looks like stuff came nicely together to make a solid kernel for&lt;br /&gt;everyone to use for a while.  And given that this is going to be one of&lt;br /&gt;the &quot;Long Term&quot; kernels I end up maintaining for a few years, that's&lt;br /&gt;good news for everyone.&lt;/p&gt;&lt;p&gt;A small trickle of good bugfixes came in this week, showing that waiting&lt;br /&gt;an extra week was a wise choice.  However odds are that linux-next is&lt;br /&gt;just bursting so the next -rc1 merge window is going to be bigger than&lt;br /&gt;&quot;normal&quot;, if there is such a thing as &quot;normal&quot; for our rate of&lt;br /&gt;development.&lt;/p&gt;&lt;p&gt;And speaking of development, there's that other thing that happened this&lt;br /&gt;release cycle, that ended up making it such that I'm the one writing&lt;br /&gt;this instead of Linus.  Allow me the guilty pleasure of taking a few&lt;br /&gt;minutes to talk about that....&lt;/p&gt;&lt;p&gt;I've been giving my &quot;How the kernel is developed&quot; talk all around the&lt;br /&gt;world for over a decade now.  After the first year or so, I was amazed&lt;br /&gt;that it kept needing to be given as surely everyone knew how we did this&lt;br /&gt;type of thing, right?  But my wife, someone much smarter than I, then&lt;br /&gt;told me, &quot;Every year there is a new kindergarten class.&quot;&lt;/p&gt;&lt;p&gt;And we all need to remember that, every year new people enter our&lt;br /&gt;community with the goal, or requirement, to get stuff done for their&lt;br /&gt;job, their hobby, or just because they want to help contribute to the&lt;br /&gt;tool that has taken over the world and enabled everyone to have a solid&lt;br /&gt;operating system base on which to build their dreams.&lt;/p&gt;&lt;p&gt;And when they come into our community, they don't have the built-in&lt;br /&gt;knowledge of years of experience that thousands of us already do.&lt;br /&gt;Without that experience they make mistakes and fumble and have to learn&lt;br /&gt;how this all works.  Part of learning how things work is dealing with&lt;br /&gt;the interaction between people, and trying to understand the basic&lt;br /&gt;social norms and goals that we all share.  By providing a document in&lt;br /&gt;the kernel source tree that shows that all people, developers and&lt;br /&gt;maintainers alike, will be treated with respect and dignity while&lt;br /&gt;working together, we help to create a more welcome community to those&lt;br /&gt;newcomers, which our very future depends on if we all wish to see this&lt;br /&gt;project succeed at its goals.&lt;/p&gt;&lt;p&gt;And that goal we all share is the key here.  We _ALL_ want to create the&lt;br /&gt;best kernel that we possibly can.  We can disagree on lots of different&lt;br /&gt;things in other parts of our lives, but we do share this one thing.  And&lt;br /&gt;we should focus on that shared goal as it has pulled us all together in&lt;br /&gt;a way that has enabled us to create something that no other company or&lt;br /&gt;group of people has ever been able to accomplish.&lt;/p&gt;&lt;p&gt;We used to joke that our goal was &quot;Total World Domination&quot;, but it&lt;br /&gt;really wasn't a joke.  We achieved that goal, Linux really does rule the&lt;br /&gt;world.  All companies use it, contribute to it, and it has ended up&lt;br /&gt;making the world a much better place because of all of us working on it.&lt;/p&gt;&lt;p&gt;In these talks I give, I also say that &quot;the only thing that can stop us&lt;br /&gt;is ourselves, it is up to us to mess this up.&quot;  And that's truer now&lt;br /&gt;than when I first started saying that a decade ago.  There is no other&lt;br /&gt;operating system out there that competes against us at this time.  It&lt;br /&gt;would be nice to have something to compete against, as competition is&lt;br /&gt;good, and that drives us to do better, but we can live with this&lt;br /&gt;situation for the moment :)&lt;/p&gt;&lt;p&gt;These past few months has been a tough one for our community, as it is&lt;br /&gt;our community that is fighting from within itself, with prodding from&lt;br /&gt;others outside of it.  Don't fall into the cycle of arguing about those&lt;br /&gt;&quot;others&quot; in the &quot;Judean People's Front&quot; when we are the &quot;We're the&lt;br /&gt;People's Front of Judea!&quot;  That is the trap that countless communities&lt;br /&gt;have fallen into over the centuries.  We all share the same goal, let us&lt;br /&gt;never loose sight of that.&lt;/p&gt;&lt;p&gt;So here is my plea to everyone out there.  Let's take a day or two off,&lt;br /&gt;rest, relax with friends by sharing a meal, recharge, and then get back&lt;br /&gt;to work, to help continue to create a system that the world has never&lt;br /&gt;seen the likes of, together.&lt;/p&gt;&lt;p&gt;Personally, I'm going to take my own advice.  I'll be enjoying this week&lt;br /&gt;in Edinburgh with many other kernel developers, drinking some good&lt;br /&gt;whiskey, and taking some time off of reading email, by spending it with&lt;br /&gt;the great friends I have made in this community.&lt;/p&gt;&lt;p&gt;And with that, Linus, I'm handing the kernel tree back to you.  You can&lt;br /&gt;have the joy of dealing with the merge window :)&lt;/p&gt;&lt;p&gt;thanks,&lt;/p&gt;&lt;p&gt;greg k-h&lt;/p&gt;&lt;p&gt;P.S. Here's the shortlog from 4.19-rc8 to 4.19 for those that like&lt;br /&gt;looking at those things:&lt;/p&gt;&lt;p&gt;Ake Koomsin (1):&lt;br /&gt;virtio_net: avoid using netif_tx_disable() for serializing tx routine&lt;/p&gt;&lt;p&gt;Al Viro (1):&lt;br /&gt;cachefiles: fix the race between cachefiles_bury_object() and rmdir(2)&lt;/p&gt;&lt;p&gt;Alan Stern (1):&lt;br /&gt;USB: fix the usbfs flag sanitization for control transfers&lt;/p&gt;&lt;p&gt;Alexei Starovoitov (1):&lt;br /&gt;net/xfrm: fix out-of-bounds packet access&lt;/p&gt;&lt;p&gt;Andy Lutomirski (1):&lt;br /&gt;x86/entry/64: Further improve paranoid_entry comments&lt;/p&gt;&lt;p&gt;Arnaldo Carvalho de Melo (3):&lt;br /&gt;tools arch uapi: Sync the x86 kvm.h copy&lt;br /&gt;tools headers uapi: Sync kvm.h copy&lt;br /&gt;perf tools: Stop fallbacking to kallsyms for vdso symbols lookup&lt;/p&gt;&lt;p&gt;Björn Töpel (1):&lt;br /&gt;xsk: do not call synchronize_net() under RCU read lock&lt;/p&gt;&lt;p&gt;Boris Brezillon (1):&lt;br /&gt;drm/sun4i: Fix an ulong overflow in the dotclock driver&lt;/p&gt;&lt;p&gt;Chen-Yu Tsai (1):&lt;br /&gt;clk: sunxi-ng: sun4i: Set VCO and PLL bias current to lowest setting&lt;/p&gt;&lt;p&gt;Chris Mason (1):&lt;br /&gt;Code of conduct: Fix wording around maintainers enforcing the code of conduct&lt;/p&gt;&lt;p&gt;Christoph Hellwig (2):&lt;br /&gt;LICENSES: Remove CC-BY-SA-4.0 license text&lt;br /&gt;x86/swiotlb: Enable swiotlb for &amp;gt; 4GiG RAM on 32-bit kernels&lt;/p&gt;&lt;p&gt;Clint Taylor (1):&lt;br /&gt;drm/edid: VSDB yCBCr420 Deep Color mode bit definitions&lt;/p&gt;&lt;p&gt;Colin Ian King (1):&lt;br /&gt;qed: fix spelling mistake &quot;Ireelevant&quot; -&amp;gt; &quot;Irrelevant&quot;&lt;/p&gt;&lt;p&gt;Cong Wang (1):&lt;br /&gt;llc: set SOCK_RCU_FREE in llc_sap_add_socket()&lt;/p&gt;&lt;p&gt;Dan Carpenter (1):&lt;br /&gt;sparc: vDSO: Silence an uninitialized variable warning&lt;/p&gt;&lt;p&gt;Dave Hansen (1):&lt;br /&gt;x86/entry: Add some paranoid entry/exit CR3 handling comments&lt;/p&gt;&lt;p&gt;David Ahern (1):&lt;br /&gt;net/ipv6: Fix index counter for unicast addresses in in6_dump_addrs&lt;/p&gt;&lt;p&gt;David Howells (5):&lt;br /&gt;afs: Fix clearance of reply&lt;br /&gt;rxrpc: Fix an uninitialised variable&lt;br /&gt;rxrpc: Fix incorrect conditional on IPV6&lt;br /&gt;rxrpc: Fix a missing rxrpc_put_peer() in the error_report handler&lt;br /&gt;fscache: Fix incomplete initialisation of inline key space&lt;/p&gt;&lt;p&gt;David Miller (1):&lt;br /&gt;perf cpu_map: Align cpu map synthesized events properly.&lt;/p&gt;&lt;p&gt;David S. Miller (9):&lt;br /&gt;sparc: Wire up io_pgetevents system call.&lt;br /&gt;sparc: Fix single-pcr perf event counter management.&lt;br /&gt;sparc: Throttle perf events properly.&lt;br /&gt;sparc64: Make proc_id signed.&lt;br /&gt;sparc64: Set %l4 properly on trap return after handling signals.&lt;br /&gt;Revert &quot;sparc: Convert to using %pOFn instead of device_node.name&quot;&lt;br /&gt;sparc: Fix syscall fallback bugs in VDSO.&lt;br /&gt;sparc: Revert unintended perf changes.&lt;br /&gt;Revert &quot;bond: take rcu lock in netpoll_send_skb_on_dev&quot;&lt;/p&gt;&lt;p&gt;Davide Caratti (1):&lt;br /&gt;net/sched: cls_api: add missing validation of netlink attributes&lt;/p&gt;&lt;p&gt;Dimitris Michailidis (1):&lt;br /&gt;net: fix pskb_trim_rcsum_slow() with odd trim offset&lt;/p&gt;&lt;p&gt;Eric Dumazet (2):&lt;br /&gt;bpf: do not blindly change rlimit in reuseport net selftest&lt;br /&gt;ipv6: mcast: fix a use-after-free in inet6_mc_check&lt;/p&gt;&lt;p&gt;Eric Sandeen (1):&lt;br /&gt;fscache: Fix out of bound read in long cookie keys&lt;/p&gt;&lt;p&gt;Eugeniy Paltsev (1):&lt;br /&gt;drm: fb-helper: Reject all pixel format changing requests&lt;/p&gt;&lt;p&gt;Florian Fainelli (1):&lt;br /&gt;net: bcmgenet: Poll internal PHY for GENETv5&lt;/p&gt;&lt;p&gt;Florian Westphal (1):&lt;br /&gt;xfrm: policy: use hlist rcu variants on insert&lt;/p&gt;&lt;p&gt;Fugang Duan (1):&lt;br /&gt;net: fec: don't dump RX FIFO register when not available&lt;/p&gt;&lt;p&gt;Greg Kroah-Hartman (7):&lt;br /&gt;Code of Conduct Interpretation: Add document explaining how the Code of Conduct is to be interpreted&lt;br /&gt;Code of Conduct Interpretation: Properly reference the TAB correctly&lt;br /&gt;Code of Conduct: Provide links between the two documents&lt;br /&gt;Code of Conduct Interpretation: Put in the proper URL for the committee&lt;br /&gt;Code of Conduct: Change the contact email address&lt;br /&gt;MAINTAINERS: Add an entry for the code of conduct&lt;br /&gt;Linux 4.19&lt;/p&gt;&lt;p&gt;Gregory CLEMENT (1):&lt;br /&gt;net: mscc: ocelot: Fix comment in ocelot_vlant_wait_for_completion()&lt;/p&gt;&lt;p&gt;Gustavo A. R. Silva (4):&lt;br /&gt;IB/ucm: Fix Spectre v1 vulnerability&lt;br /&gt;RDMA/ucma: Fix Spectre v1 vulnerability&lt;br /&gt;usb: gadget: storage: Fix Spectre v1 vulnerability&lt;br /&gt;ptp: fix Spectre v1 vulnerability&lt;/p&gt;&lt;p&gt;Heikki Krogerus (1):&lt;br /&gt;usb: xhci: pci: Enable Intel USB role mux on Apollo Lake platforms&lt;/p&gt;&lt;p&gt;Heiner Kallweit (2):&lt;br /&gt;r8169: re-enable MSI-X on RTL8168g&lt;br /&gt;r8169: fix NAPI handling under high load&lt;/p&gt;&lt;p&gt;Helge Deller (1):&lt;br /&gt;parisc: Fix uninitialized variable usage in unwind.c&lt;/p&gt;&lt;p&gt;Huy Nguyen (1):&lt;br /&gt;net/mlx5: Take only bit 24-26 of wqe.pftype_wq for page fault type&lt;/p&gt;&lt;p&gt;Ido Schimmel (1):&lt;br /&gt;mlxsw: core: Fix use-after-free when flashing firmware during init&lt;/p&gt;&lt;p&gt;Jan Kiszka (1):&lt;br /&gt;x86/entry/32: Clear the CS high bits&lt;/p&gt;&lt;p&gt;Jarod Wilson (1):&lt;br /&gt;perf tools: Fix use of alternatives to find JDIR&lt;/p&gt;&lt;p&gt;Jian-Hong Pan (1):&lt;br /&gt;r8169: Enable MSI-X on RTL8106e&lt;/p&gt;&lt;p&gt;Jiri Olsa (5):&lt;br /&gt;Revert &quot;perf tools: Fix PMU term format max value calculation&quot;&lt;br /&gt;perf vendor events intel: Fix wrong filter_band* values for uncore events&lt;br /&gt;perf evsel: Store ids for events with their own cpus perf_event__synthesize_event_update_cpus&lt;br /&gt;perf tools: Fix tracing_path_mount proper path&lt;br /&gt;perf tools: Pass build flags to traceevent build&lt;/p&gt;&lt;p&gt;Jon Maloy (2):&lt;br /&gt;tipc: initialize broadcast link stale counter correctly&lt;br /&gt;tipc: fix info leak from kernel tipc_event&lt;/p&gt;&lt;p&gt;Kai-Heng Feng (1):&lt;br /&gt;drm/edid: Add 6 bpc quirk for BOE panel in HP Pavilion 15-n233sl&lt;/p&gt;&lt;p&gt;Kamal Dasu (1):&lt;br /&gt;MAINTAINERS: Add entry for Broadcom STB I2C controller&lt;/p&gt;&lt;p&gt;Kees Cook (1):&lt;br /&gt;sunvdc: Remove VLA usage&lt;/p&gt;&lt;p&gt;Keith Busch (1):&lt;br /&gt;nvme: remove ns sibling before clearing path&lt;/p&gt;&lt;p&gt;Leo Li (1):&lt;br /&gt;drm: Get ref on CRTC commit object when waiting for flip_done&lt;/p&gt;&lt;p&gt;Li RongQing (1):&lt;br /&gt;xfrm: fix gro_cells leak when remove virtual xfrm interfaces&lt;/p&gt;&lt;p&gt;Linus Torvalds (1):&lt;br /&gt;mremap: properly flush TLB before releasing the page&lt;/p&gt;&lt;p&gt;Marcelo Ricardo Leitner (1):&lt;br /&gt;sctp: fix race on sctp_id2asoc&lt;/p&gt;&lt;p&gt;Masami Hiramatsu (3):&lt;br /&gt;tracing: Fix synthetic event to accept unsigned modifier&lt;br /&gt;tracing: Fix synthetic event to allow semicolon at end&lt;br /&gt;selftests: ftrace: Add synthetic event syntax testcase&lt;/p&gt;&lt;p&gt;Mathieu Desnoyers (1):&lt;br /&gt;tracepoint: Fix tracepoint array element size mismatch&lt;/p&gt;&lt;p&gt;Matthew Wilcox (2):&lt;br /&gt;test_ida: Fix lockdep warning&lt;br /&gt;idr: Change documentation license&lt;/p&gt;&lt;p&gt;Mikhail Nikiforov (1):&lt;br /&gt;Input: elan_i2c - add ACPI ID for Lenovo IdeaPad 330-15IGM&lt;/p&gt;&lt;p&gt;Milian Wolff (1):&lt;br /&gt;perf report: Don't crash on invalid inline debug information&lt;/p&gt;&lt;p&gt;Ming Lei (1):&lt;br /&gt;block: don't deal with discard limit in blkdev_issue_discard()&lt;/p&gt;&lt;p&gt;Nathan Chancellor (3):&lt;br /&gt;x86/time: Correct the attribute on jiffies' definition&lt;br /&gt;x86/boot: Add -Wno-pointer-sign to KBUILD_CFLAGS&lt;br /&gt;net: qla3xxx: Remove overflowing shift statement&lt;/p&gt;&lt;p&gt;Nikolay Aleksandrov (1):&lt;br /&gt;net: ipmr: fix unresolved entry dumps&lt;/p&gt;&lt;p&gt;Oliver Neukum (1):&lt;br /&gt;cdc-acm: fix race between reset and control messaging&lt;/p&gt;&lt;p&gt;Paolo Abeni (1):&lt;br /&gt;udp6: fix encap return code for resubmitting&lt;/p&gt;&lt;p&gt;Paul Moore (1):&lt;br /&gt;MAINTAINERS: update the SELinux mailing list location&lt;/p&gt;&lt;p&gt;Peter Zijlstra (2):&lt;br /&gt;x86/tsc: Force inlining of cyc2ns bits&lt;br /&gt;x86/percpu: Fix this_cpu_read()&lt;/p&gt;&lt;p&gt;Phil Auld (1):&lt;br /&gt;sched/fair: Fix throttle_list starvation with low CFS quota&lt;/p&gt;&lt;p&gt;Phil Sutter (1):&lt;br /&gt;net: sched: Fix for duplicate class dump&lt;/p&gt;&lt;p&gt;Pieter Jansen van Vuuren (3):&lt;br /&gt;nfp: flower: fix pedit set actions for multiple partial masks&lt;br /&gt;nfp: flower: fix multiple keys per pedit action&lt;br /&gt;nfp: flower: use offsets provided by pedit instead of index for ipv6&lt;/p&gt;&lt;p&gt;Roopa Prabhu (1):&lt;br /&gt;Revert &quot;neighbour: force neigh_invalidate when NUD_FAILED update is from admin&quot;&lt;/p&gt;&lt;p&gt;Sabrina Dubroca (1):&lt;br /&gt;ipv6: rate-limit probes for neighbourless routes&lt;/p&gt;&lt;p&gt;Sebastian Andrzej Siewior (2):&lt;br /&gt;x86/fpu: Remove second definition of fpu in __fpu__restore_sig()&lt;br /&gt;x86/fpu: Fix i486 + no387 boot crash by only saving FPU registers on context switch if there is an FPU&lt;/p&gt;&lt;p&gt;Shuah Khan (Samsung OSG) (2):&lt;br /&gt;selftests: usbip: add wait after attach and before checking port status&lt;br /&gt;usb: usbip: Fix BUG: KASAN: slab-out-of-bounds in vhci_hub_control()&lt;/p&gt;&lt;p&gt;Song Muchun (1):&lt;br /&gt;sched/fair: Fix the min_vruntime update logic in dequeue_entity()&lt;/p&gt;&lt;p&gt;Stefano Brivio (3):&lt;br /&gt;geneve, vxlan: Don't check skb_dst() twice&lt;br /&gt;geneve, vxlan: Don't set exceptions if skb-&amp;gt;len &amp;lt; mtu&lt;br /&gt;ip6_tunnel: Fix encapsulation layout&lt;/p&gt;&lt;p&gt;Steffen Klassert (1):&lt;br /&gt;MAINTAINERS: Remove net/core/flow.c&lt;/p&gt;&lt;p&gt;Steven Rostedt (VMware) (1):&lt;br /&gt;tracing: Use trace_clock_local() for looping in preemptirq_delay_test.c&lt;/p&gt;&lt;p&gt;Taehee Yoo (1):&lt;br /&gt;net: bpfilter: use get_pid_task instead of pid_task&lt;/p&gt;&lt;p&gt;Talat Batheesh (1):&lt;br /&gt;net/mlx5: Fix memory leak when setting fpga ipsec caps&lt;/p&gt;&lt;p&gt;Tariq Toukan (1):&lt;br /&gt;net/mlx5: WQ, fixes for fragmented WQ buffers API&lt;/p&gt;&lt;p&gt;Tobias Herzog (2):&lt;br /&gt;cdc-acm: do not reset notification buffer index upon urb unlinking&lt;br /&gt;cdc-acm: correct counting of UART states in serial state notification&lt;/p&gt;&lt;p&gt;Tomi Valkeinen (1):&lt;br /&gt;drm: fix use of freed memory in drm_mode_setcrtc&lt;/p&gt;&lt;p&gt;Tung Nguyen (1):&lt;br /&gt;tipc: fix unsafe rcu locking when accessing publication list&lt;/p&gt;&lt;p&gt;Wan Ahmad Zainie (1):&lt;br /&gt;usb: roles: intel_xhci: Fix Unbalanced pm_runtime_enable&lt;/p&gt;&lt;p&gt;Wenwen Wang (3):&lt;br /&gt;ethtool: fix a missing-check bug&lt;br /&gt;ethtool: fix a privilege escalation bug&lt;br /&gt;net: socket: fix a missing-check bug&lt;/p&gt;&lt;p&gt;Wolfram Sang (1):&lt;br /&gt;i2c: rcar: cleanup DMA for all kinds of failure&lt;/p&gt;&lt;p&gt;Xin Long (4):&lt;br /&gt;sctp: use the pmtu from the icmp packet to update transport pathmtu&lt;br /&gt;sctp: get pr_assoc and pr_stream all status with SCTP_PR_SCTP_ALL instead&lt;br /&gt;sctp: not free the new asoc when sctp_wait_for_connect returns err&lt;br /&gt;sctp: fix the data size calculation in sctp_data_size&lt;/p&gt;&lt;p&gt;YueHaibing (1):&lt;br /&gt;rxrpc: use correct kvec num when sending BUSY response packet&lt;/p&gt;&lt;/pre&gt;</description>
<pubDate>Mon, 22 Oct 2018 09:12:36 +0000</pubDate>
<dc:creator>arto</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://lkml.org/lkml/2018/10/22/184</dc:identifier>
</item>
<item>
<title>GitHub: October 21 Incident Report</title>
<link>https://blog.github.com/2018-10-21-october21-incident-report/</link>
<guid isPermaLink="true" >https://blog.github.com/2018-10-21-october21-incident-report/</guid>
<description>&lt;p&gt;At 10:52 pm Sunday UTC, multiple services on GitHub.com were affected by a network partition and subsequent database failure resulting in inconsistent information being presented on our website. Out of an abundance of caution we have taken steps to ensure the integrity of your data, including pausing webhook events and other internal processing systems.&lt;/p&gt;
&lt;p&gt;We are aware of how important our services are to your development workflows and are actively working to establish an estimated timeframe for full recovery. We will share this information with you as soon as it is available. During this time, information displayed on GitHub.com is likely to appear out of date; however no data was lost. Once service is fully restored, everything should appear as expected. Further, this incident only impacted website metadata stored in our MySQL databases, such as issues and pull requests. Git repository data remains unaffected and has been available throughout the incident.&lt;/p&gt;
&lt;p&gt;We will continue to provide updates and an estimated time to resolution via our &lt;a href=&quot;https://status.github.com&quot;&gt;status page&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Mon, 22 Oct 2018 08:01:22 +0000</pubDate>
<dc:creator>pietroalbini</dc:creator>
<og:title>October 21 Incident Report</og:title>
<og:description>At 10:52 pm Sunday UTC, multiple services on GitHub.com were affected by a network partition and subsequent database failure resulting in inconsistent information being presented on our website.</og:description>
<og:url>https://blog.github.com/2018-10-21-october21-incident-report/</og:url>
<og:image>https://user-images.githubusercontent.com/7321362/26907144-178243fc-4ba6-11e7-8f15-8985451b33c2.jpg</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.github.com/2018-10-21-october21-incident-report/</dc:identifier>
</item>
</channel>
</rss>