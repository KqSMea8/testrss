<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Announcing TypeScript 3.0</title>
<link>https://blogs.msdn.microsoft.com/typescript/2018/07/30/announcing-typescript-3-0/</link>
<guid isPermaLink="true" >https://blogs.msdn.microsoft.com/typescript/2018/07/30/announcing-typescript-3-0/</guid>
<description>&lt;div&gt;TypeScript 3.0 is here! Today marks a new milestone in the TypeScript journey, serving JavaScript users everywhere.
&lt;p&gt;If you’re unfamiliar with TypeScript, it’s not too late to learn about it now! TypeScript is an extension of JavaScript that aims to bring static types to modern JavaScript. The TypeScript compiler reads in TypeScript code, which has things like type declarations and type annotations, and emits clean readable JavaScript with those constructs transformed and removed. That code runs in any ECMAScript runtime like your favorite browsers and Node.js. At its core, this experience means analyzing your code to catch things like bugs and typos before your users run into them; but it brings more than that. Thanks to all that information and analysis TypeScript can provide a better authoring experience, providing code completion and navigation features like &lt;em&gt;Find all References&lt;/em&gt;, &lt;em&gt;Go to Definition&lt;/em&gt;, and &lt;em&gt;Rename&lt;/em&gt; in your favorite editor.&lt;/p&gt;
&lt;p&gt;To get started with the language itself, check out &lt;a href=&quot;https://www.typescriptlang.org/&quot; rel=&quot;nofollow&quot;&gt;typescriptlang.org&lt;/a&gt; to learn more. And if you want to try TypeScript 3.0 out now, you can get it &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild&quot; rel=&quot;nofollow&quot;&gt;through NuGet&lt;/a&gt; or via npm by running&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
npm install -g typescript
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also get editor support for&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support&quot;&gt;Other editors&lt;/a&gt; may have different update schedules, but should all have excellent TypeScript support soon as well.&lt;/p&gt;

&lt;p&gt;When we released TypeScript 2.0, we took a brief look back at how each release leading up to TypeScript 2.0 brought the language to where it is today. Between TypeScript 1.0 and up until 2.0, the language added union types, type guards, modern ECMAScript support, type aliases, JSX support, literal types, and polymorphic &lt;code&gt;this&lt;/code&gt; types. If we include TypeScript 2.0 with its introduction of non-nullable types, control flow analysis, tagged union support, &lt;code&gt;this&lt;/code&gt;-types, and a simplified model around &lt;code&gt;.d.ts&lt;/code&gt; file acquisition, that era truly defined the fundamentals of using TypeScript.&lt;/p&gt;
&lt;p&gt;So what have we done since? What, apart from new ECMAScript features like the long-&lt;em&gt;await&lt;/em&gt;-ed &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, generators, and object rest/spread brought us to TypeScript 3.0?&lt;/p&gt;
&lt;p&gt;TypeScript 2.1 was a foundational release that introduced a static model for metaprogramming in JavaScript. The key query (&lt;code&gt;keyof&lt;/code&gt;), indexed access (&lt;code&gt;T[K]&lt;/code&gt;), and mapped object (&lt;code&gt;{ [K in keyof T]: T[K] }&lt;/code&gt;) types have been instrumental in better modeling libraries like React, Ember, Lodash, and more.&lt;/p&gt;
&lt;p&gt;TypeScript 2.2 and 2.3 brought support for mixin patterns, the non-primitive &lt;code&gt;object&lt;/code&gt; type, and generic defaults, used by a number of projects like Angular Material and Polymer. TypeScript 2.3 also shipped a feature for fine-grained control of &lt;code&gt;this&lt;/code&gt; types that allowed TypeScript to work well with libraries like Vue, and added the &lt;code&gt;checkJs&lt;/code&gt; flag to enable type-checking on JavaScript files.&lt;/p&gt;
&lt;p&gt;TypeScript 2.4 and 2.6 tightened up the story for strict checking on function types, addressing some of the longest-standing feedback about our type system through &lt;code&gt;--strictFunctionTypes&lt;/code&gt; which enforced contravariance on parameters. 2.7 continued the trend of strictness with &lt;code&gt;--strictPropertyInitialization&lt;/code&gt; checks in classes.&lt;/p&gt;
&lt;p&gt;TypeScript 2.8 introduced conditional types, a powerful tool for statically expressing decisions based on types, and 2.9 generalized &lt;code&gt;keyof&lt;/code&gt; and provided easier imports for types.&lt;/p&gt;
&lt;p&gt;Which brings us to TypeScript 3.0! Despite the new big number, 3.0 has few breaking changes (meaning it should be &lt;em&gt;very&lt;/em&gt; easy to upgrade) and introduces a new flexible and scalable way to structure your projects, powerful new support for operating on parameter lists, new types to enforce explicit checks, better JSX support, an overall better error UX, and much more!&lt;/p&gt;

&lt;h2 id=&quot;project-references&quot;&gt;Project references&lt;/h2&gt;
&lt;p&gt;It’s fairly common to have several different build steps for a library or application. Maybe your codebase has a &lt;code&gt;src&lt;/code&gt; and a &lt;code&gt;test&lt;/code&gt; directory. Maybe you have your front-end code in a folder called &lt;code&gt;client&lt;/code&gt; with your Node.js back-end code in a folder called &lt;code&gt;server&lt;/code&gt;, and each imports code from a &lt;code&gt;shared&lt;/code&gt; folder. And maybe you use what’s called a “monorepo” and have many many projects which depend on each other in non-trivial ways.&lt;/p&gt;
&lt;p&gt;One of the biggest features that we’ve worked on for TypeScript 3.0 is called “project references”, and it aims to make working with these scenarios easier.&lt;/p&gt;
&lt;p&gt;Project references allow TypeScript projects to depend on other TypeScript projects – specifically, allowing &lt;code&gt;tsconfig.json&lt;/code&gt; files to reference other &lt;code&gt;tsconfig.json&lt;/code&gt; files. Specifying these dependencies makes it easier to split your code into smaller projects, since it gives TypeScript (and tools around it) a way to understand build ordering and output structure. That means things like faster builds that work incrementally, and support for transparently navigating, editing, and refactoring across projects. Since 3.0 lays the foundation and exposes the APIs, any build tool should be able to provide this.&lt;/p&gt;
&lt;h3 id=&quot;whats-it-look-like&quot;&gt;What’s it look like?&lt;/h3&gt;
&lt;p&gt;As a quick example, here’s what a &lt;code&gt;tsconfig.json&lt;/code&gt; with project references looks like:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// ./src/bar/tsconfig.json&lt;/span&gt;
{
    &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;compilerOptions&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {
        &lt;span&gt;// Needed for project references.&lt;/span&gt;
        &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;composite&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;,
        &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;declaration&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;,

        &lt;span&gt;// Other options...&lt;/span&gt;
        &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;outDir&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;../../lib/bar&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;strict&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;module&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;esnext&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;moduleResolution&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;node&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    },
    &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;references&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [
        { &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;path&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;../foo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; }
    ]
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are two new fields to notice here: &lt;code&gt;composite&lt;/code&gt; and &lt;code&gt;references&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;references&lt;/code&gt; simply specifies other &lt;code&gt;tsconfig.json&lt;/code&gt; files (or folders immediately containing them). Each reference is currently just an object with a &lt;code&gt;path&lt;/code&gt; field, and lets TypeScript know that building the current project requires building that referenced project first.&lt;/p&gt;
&lt;p&gt;Perhaps equally important is the &lt;code&gt;composite&lt;/code&gt; field. The &lt;code&gt;composite&lt;/code&gt; field ensures certain options are enabled so that this project can be referenced and built incrementally for any project that depends on it. Being able to intelligently and incrementally rebuild is important, since build speed is one of the reasons you might break up a project in the first place. For example, if project &lt;code&gt;front-end&lt;/code&gt; depends on &lt;code&gt;shared&lt;/code&gt;, and &lt;code&gt;shared&lt;/code&gt; depends on &lt;code&gt;core&lt;/code&gt;, our APIs around project references can be used to detect a change in &lt;code&gt;core&lt;/code&gt;, but to only rebuild &lt;code&gt;shared&lt;/code&gt; if the types (i.e. the &lt;code&gt;.d.ts&lt;/code&gt; files) produced by &lt;code&gt;core&lt;/code&gt; have changed. That means a change to &lt;code&gt;core&lt;/code&gt; doesn’t completely force us to rebuild the world. For that reason, setting &lt;code&gt;composite&lt;/code&gt; forces the &lt;code&gt;declaration&lt;/code&gt; flag to be set as well.&lt;/p&gt;
&lt;h3 id=&quot;build-mode&quot;&gt;&lt;code&gt;--build&lt;/code&gt; mode&lt;/h3&gt;
&lt;p&gt;TypeScript 3.0 will provide a set of APIs for project references so that other tools can provide this fast incremental behavior. As an example, gulp-typescript already leverages it! So project references should be able to integrate with your choice of build orchestrators in the future.&lt;/p&gt;
&lt;p&gt;However, for many simple apps and libraries, it’s nice not to need external tools. That’s why &lt;code&gt;tsc&lt;/code&gt; now ships with a new &lt;code&gt;--build&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tsc --build&lt;/code&gt; (or its nickname, &lt;code&gt;tsc -b&lt;/code&gt;) takes a set of projects and builds them and their dependencies. When using this new build mode, the &lt;code&gt;--build&lt;/code&gt; flag has to be set first, and can be paired with certain other flags:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;--verbose&lt;/code&gt;: displays every step of what a build requires&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dry&lt;/code&gt;: performs a build without emitting files (this is useful with &lt;code&gt;--verbose&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--clean&lt;/code&gt;: attempts to remove output files given the inputs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--force&lt;/code&gt;: forces a full non-incremental rebuild for a project&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;controlling-output-structure&quot;&gt;Controlling output structure&lt;/h3&gt;
&lt;p&gt;One subtle but incredibly useful benefit of project references is logically being able to map your input source to its outputs.&lt;/p&gt;
&lt;p&gt;If you’ve ever tried to share TypeScript code between the client and server of your application, you might have run into problems controlling the output structure.&lt;/p&gt;
&lt;p&gt;For example, if &lt;code&gt;client/index.ts&lt;/code&gt; and &lt;code&gt;server/index.ts&lt;/code&gt; both reference &lt;code&gt;shared/index.ts&lt;/code&gt; for the following projects:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;src
├── client
│   ├── index.ts
│   └── tsconfig.json
├── server
│   ├── index.ts
│   └── tsconfig.json
└── shared
    └── index.ts
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;…then trying to build &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt;, we’ll end up with…&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;lib
├── client
│   ├── client
│   │   └── index.js
│   └── shared
│       └── index.js
└── server
    ├── server
    │   └── index.js
    └── shared
        └── index.js
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;rather than&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;lib
├── client
│   └── index.js
├── shared
│   └── index.js
└── server
    └── index.js
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice that we ended up with a copy of &lt;code&gt;shared&lt;/code&gt; in both &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt;. We unnecessarily spent time building &lt;code&gt;shared&lt;/code&gt; twice and introduced an undesirable level of nesting in &lt;code&gt;lib/client/client&lt;/code&gt; and &lt;code&gt;lib/server/server&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem is that TypeScript greedily looks for &lt;code&gt;.ts&lt;/code&gt; files and tries to include them in a given compilation. Ideally, TypeScript would understand that these files don’t need to be built in the same compilation, and would instead jump to the &lt;code&gt;.d.ts&lt;/code&gt; files for type information.&lt;/p&gt;
&lt;p&gt;Creating a &lt;code&gt;tsconfig.json&lt;/code&gt; for &lt;code&gt;shared&lt;/code&gt; and using project references does exactly that. It signals to TypeScript that&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;shared&lt;/code&gt; should be built independently, and that&lt;/li&gt;
&lt;li&gt;when importing from &lt;code&gt;../shared&lt;/code&gt;, we should look for the &lt;code&gt;.d.ts&lt;/code&gt; files in its output directory.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This avoids triggering a double-build, and also avoids accidentally absorbing all the contents of &lt;code&gt;shared&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;further-work&quot;&gt;Further work&lt;/h3&gt;
&lt;p&gt;To get a deeper understanding of project references and how you can use them, &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/3469#issuecomment-400439520&quot;&gt;read up more our issue tracker&lt;/a&gt;. In the near future, we’ll have documentation on project references and build mode.&lt;/p&gt;
&lt;p&gt;We’re committed to ensuring that other tool authors can support project references, and will continue to improve the editing experience around project references. Our intent is for project references to feel as seamless as authoring code with a single &lt;code&gt;tsconfig.json&lt;/code&gt;. If you do end up using project references, we’d appreciate any and all feedback to do just that.&lt;/p&gt;
&lt;h2 id=&quot;tuples-and-parameters&quot;&gt;Extracting and spreading parameter lists with tuples&lt;/h2&gt;
&lt;p&gt;We often take it for granted, but JavaScript lets us think about parameter lists as first-class values – either by using &lt;code&gt;arguments&lt;/code&gt; or rest-parameters (e.g. &lt;code&gt;...rest&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;fn&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;args&lt;/span&gt;) {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;args);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice here that &lt;code&gt;call&lt;/code&gt; works on functions of any parameter length. Unlike other languages, JavaScript doesn’t force us to define a &lt;code&gt;call0&lt;/code&gt;, &lt;code&gt;call1&lt;/code&gt;, &lt;code&gt;call2&lt;/code&gt;, etc. as follows:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;call0&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;fn&lt;/span&gt;) {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;();
}

&lt;span&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;call1&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;fn&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;param1&lt;/span&gt;) {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;(param1);
}

&lt;span&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;call2&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;fn&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;param1&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;param2&lt;/span&gt;) {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;(param1, param2);
}

&lt;span&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;call3&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;fn&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;param1&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;param2&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;param3&lt;/span&gt;) {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;(param1, param2, param3);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, for a while there wasn’t a great well-typed way to express this statically in TypeScript without declaring a finite number of overloads:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// TODO (billg): 5 overloads should *probably* be enough for anybody?&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; call&amp;lt;&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;, &lt;span&gt;T3&lt;/span&gt;, &lt;span&gt;T4&lt;/span&gt;, &lt;span&gt;R&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param3&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T3&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param4&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T4&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param3&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T3&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param4&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T4&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; call&amp;lt;&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;, &lt;span&gt;T3&lt;/span&gt;, &lt;span&gt;R&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param3&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T3&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param3&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T3&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; call&amp;lt;&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;T2&lt;/span&gt;, &lt;span&gt;R&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T2&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; call&amp;lt;&lt;span&gt;T1&lt;/span&gt;, &lt;span&gt;R&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;;
&lt;span&gt;function&lt;/span&gt; call&amp;lt;&lt;span&gt;R&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T1&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;;
&lt;span&gt;function&lt;/span&gt; call(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;[]) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;[]) {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;args&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oof! Another case of death by a thousand overloads! Or at least, as many overloads as our users asked us for.&lt;/p&gt;
&lt;p&gt;TypeScript 3.0 allows us to better model scenarios like these by now allowing rest parameters to be generic, and inferring those generics as tuple types! Instead of declaring each of these overloads, we can say that the &lt;code&gt;...args&lt;/code&gt; rest parameter from &lt;code&gt;fn&lt;/code&gt; must be a type parameter that extends an array, and then we can re-use that for the &lt;code&gt;...args&lt;/code&gt; that &lt;code&gt;call&lt;/code&gt; passes:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; call&amp;lt;&lt;span&gt;TS&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;[], &lt;span&gt;R&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;TS&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;TS&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;R&lt;/span&gt; {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;args&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we call the &lt;code&gt;call&lt;/code&gt; function, TypeScript will try to extract the parameter list from whatever we pass to &lt;code&gt;fn&lt;/code&gt;, and turn that into a tuple:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; foo(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; {
    &lt;span&gt;return&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;y&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;toLowerCase&lt;/span&gt;();
}

&lt;span&gt;// The `TS` type parameter is inferred as `[number, string]`&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When TypeScript infers &lt;code&gt;TS&lt;/code&gt; as &lt;code&gt;[number, string]&lt;/code&gt; and we end up re-using &lt;code&gt;TS&lt;/code&gt; on the rest parameter of &lt;code&gt;call&lt;/code&gt;, the instantiation looks like the following&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; call(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span&gt;number&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;]) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span&gt;number&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;])&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with TypeScript 3.0, using a tuple in a rest parameter gets &lt;em&gt;flattened&lt;/em&gt; into the rest of the parameter list! The above boils down to simple parameters with no tuples:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; call(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in addition to catching type errors when we pass in the wrong arguments:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; call&amp;lt;&lt;span&gt;TS&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;[], &lt;span&gt;R&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;TS&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;R&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;TS&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;R&lt;/span&gt; {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;args&lt;/span&gt;);
}

&lt;span class=&quot;pl-en&quot;&gt;call&lt;/span&gt;((&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;y&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;span&gt;//                                ~~~~~~~&lt;/span&gt;
&lt;span&gt;// Error! `string` isn't assignable to `number`!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and inference from other arguments:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-en&quot;&gt;call&lt;/span&gt;((&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; { &lt;span&gt;/* .... */&lt;/span&gt; }, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;100&lt;/span&gt;);
&lt;span&gt;//    ^  ^&lt;/span&gt;
&lt;span&gt;// `x` and `y` have their types inferred as `string` and `number` respectively.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;we can also observe the tuple types that these functions infer from the outside:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; tuple&amp;lt;&lt;span&gt;TS&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;[]&amp;gt;(&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;TS&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;TS&lt;/span&gt; {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;xs&lt;/span&gt;;
}

&lt;span&gt;let&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;tuple&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;); &lt;span&gt;// has type `[number, number, string]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is a subtler point to note though. In order to make all of this work, we needed to expand what tuples could do…&lt;/p&gt;
&lt;h2 id=&quot;richer-tuple-types&quot;&gt;Richer tuple types&lt;/h2&gt;
&lt;p&gt;To make tuples model parameter lists (as we just discussed), we had to rethink tuple types a bit. Before TypeScript 3.0, the best that tuples could model was the order and count of a set of parameters.&lt;/p&gt;
&lt;p&gt;However, parameter lists aren’t just ordered lists of types. For example, parameters at the end can be optional:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// Both `y` and `z` are optional here.&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; foo(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) {
    &lt;span&gt;// ...&lt;/span&gt;
}

&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;);
&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;undefined&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last parameter can be a &lt;em&gt;rest&lt;/em&gt; parameter.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// `rest` accepts any number of strings - even none!&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; foo(&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-v&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[]) {
    &lt;span&gt;// ...&lt;/span&gt;
}

&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;();
&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;(&lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;(&lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally, there is one mildly interesting property about parameter lists which is that they can be empty:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// Accepts no parameters.&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; foo() {
    &lt;span&gt;// ...&lt;/span&gt;
}

&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So to make it possible for tuples to correspond to parameter lists, we needed to model each of these scenarios.&lt;/p&gt;
&lt;p&gt;First, tuples now allow trailing optional elements:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; * 2D, or potentially 3D, coordinate.&lt;/span&gt;
&lt;span&gt; */&lt;/span&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Coordinate&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span&gt;number&lt;/span&gt;, &lt;span&gt;number&lt;/span&gt;, &lt;span&gt;number&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Coordinate&lt;/code&gt; type creates a tuple with an optional property named &lt;code&gt;2&lt;/code&gt; – the element at index &lt;code&gt;2&lt;/code&gt; might not be defined! Interestingly, since tuples use numeric literal types for their &lt;code&gt;length&lt;/code&gt; properties, &lt;code&gt;Coordinate&lt;/code&gt;‘s &lt;code&gt;length&lt;/code&gt; property has the type &lt;code&gt;2 | 3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Second, tuples now allow rest elements at the end.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;OneNumberAndSomeStrings&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span&gt;number&lt;/span&gt;, ...&lt;span&gt;string&lt;/span&gt;[]];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rest elements introduce some interesting open-ended behavior to tuples. The above &lt;code&gt;OneNumberAndSomeStrings&lt;/code&gt; type requires its first property to be a &lt;code&gt;number&lt;/code&gt;, and permits 0 or more &lt;code&gt;string&lt;/code&gt;s. Indexing with an arbitrary &lt;code&gt;number&lt;/code&gt; will return a &lt;code&gt;string | number&lt;/code&gt; since the index won’t be known. Likewise, since the tuple length won’t be known, the &lt;code&gt;length&lt;/code&gt; property is just &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of note, when no other elements are present, a rest element in a tuple is identical to itself:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Foo&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [...&lt;span&gt;number&lt;/span&gt;[]]; &lt;span&gt;// Equivalent to `number[]`.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, tuples can now be empty! While it’s not that useful outside of parameter lists, the empty tuple type can be referenced as &lt;code&gt;[]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;EmptyTuple&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you might expect, the empty tuple has a &lt;code&gt;length&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt; and indexing with a &lt;code&gt;number&lt;/code&gt; returns the &lt;code&gt;never&lt;/code&gt; type.&lt;/p&gt;
&lt;h2 id=&quot;improved-errors-and-ux&quot;&gt;Improved errors and UX&lt;/h2&gt;
&lt;p&gt;Over time we’ve heard more and more demand from our community regarding better error messages. While we’re by no means done, we heard you in TypeScript 3.0 and have invested a bit here.&lt;/p&gt;
&lt;h3 id=&quot;related-error-spans&quot;&gt;Related error spans&lt;/h3&gt;
&lt;p&gt;Part of the goal of providing a good error message is also guiding a user towards a way to fix the error, or providing a way to intuit why the error message was given in the first place. Much of the time, there can be a lot of information or multiple reasons an error message might surface. Of those reasons, we might find they come from different parts of the code.&lt;/p&gt;
&lt;p&gt;Related error spans are a new way to surface that information to users. In TypeScript 3.0, error messages can provide messages on other locations so that users can reason about cause-and-effect of an error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/3.0-related-spans-export-default.png&quot; alt=&quot;Using import * as express syntax can cause an error when calling express(). Here, the provided error tells the user not just that the call is invalid, but that it has occurred because of the way the user imported express.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In some sense, related error messages can give a user not just an explanation, but also breadcrumbs to see where things went wrong.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/3.0-misspelled-related-span1.gif&quot; alt=&quot;An error on a potentially misspelled property now also informs the user of where the most likely candidate originated.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;These spans will also appear in the terminal when running &lt;code&gt;tsc&lt;/code&gt; with &lt;code&gt;--pretty&lt;/code&gt; mode enabled, though our team is still iterating on the UI and would appreciate feedback!&lt;/p&gt;
&lt;h3 id=&quot;improved-messages-and-elaboration&quot;&gt;Improved messages and elaboration&lt;/h3&gt;
&lt;p&gt;Around TypeScript 2.9, we started investing more in our error messages, and &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/25310&quot;&gt;with 3.0 we really tried to tackle a core set of cases&lt;/a&gt; that could give a smarter, cleaner, and more accurate error experience. This includes things like picking better types with mismatches in union types, and cutting right to the chase for certain error messages.&lt;/p&gt;
&lt;p&gt;We believe this effort had paid off and will provide significantly shorter and cleaner error messages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/3.0-error-messages-vertical.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/3.0-error-messages-object-literals-vertical-2.png&quot; alt=&quot;Error messages for the equivalent code/issue in JSX compared between TypeScript 2.8 and TypeScript 3.0. In TypeScript 3.0, the message is dramatically shorter and has a related span, while still providing context.&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-unknown-type&quot;&gt;The &lt;code&gt;unknown&lt;/code&gt; type&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;any&lt;/code&gt; type is the most-capable type in TypeScript – while it encompasses the type of every possible value, it doesn’t force us to do any checking before we try to call, construct, or access properties on these values. It also lets us assign values of type &lt;code&gt;any&lt;/code&gt; to values that expect any other type.&lt;/p&gt;
&lt;p&gt;This is mostly useful, but it can be a bit lax.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;let&lt;/span&gt; foo&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;;

&lt;span&gt;// All of these will throw errors, but TypeScript&lt;/span&gt;
&lt;span&gt;// won't complain since `foo` has the type `any`.&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;prop&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;y&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;prop&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;z&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;prop&lt;/span&gt;;
&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;();
&lt;span&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;();
&lt;span class=&quot;pl-en&quot;&gt;upperCase&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;);
&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;hello world!&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;;

&lt;span&gt;function&lt;/span&gt; upperCase(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toUpperCase&lt;/span&gt;();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are often times where we want to describe the &lt;em&gt;least&lt;/em&gt;-capable type in TypeScript. This is useful for APIs that want to signal “this can be any value, so you &lt;em&gt;must&lt;/em&gt; perform some type of checking before you use it”. This forces users to safely introspect returned values.&lt;/p&gt;
&lt;p&gt;TypeScript 3.0 introduces a new type called &lt;code&gt;unknown&lt;/code&gt; that does exactly that. Much like &lt;code&gt;any&lt;/code&gt;, any value is assignable &lt;em&gt;to&lt;/em&gt; &lt;code&gt;unknown&lt;/code&gt;; however, unlike &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;unknown&lt;/code&gt; is assignable to almost nothing else without a type assertion. You also can’t access any properties off of an &lt;code&gt;unknown&lt;/code&gt;, nor can you call/construct them.&lt;/p&gt;
&lt;p&gt;As an example, swapping the above example to use &lt;code&gt;unknown&lt;/code&gt; instead of &lt;code&gt;any&lt;/code&gt; forces turns all usages of &lt;code&gt;foo&lt;/code&gt; into an error:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;let&lt;/span&gt; foo&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;unknown&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;;

&lt;span&gt;// Since `foo` has type `unknown`, TypeScript&lt;/span&gt;
&lt;span&gt;// errors on each of these locations.&lt;/span&gt;
&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;prop&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;y&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;prop&lt;/span&gt;;
&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;z&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;prop&lt;/span&gt;;
&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;();
&lt;span&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;();
&lt;span class=&quot;pl-en&quot;&gt;upperCase&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;);
&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;hello world!&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;;

&lt;span&gt;function&lt;/span&gt; upperCase(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toUpperCase&lt;/span&gt;();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead, we’re now forced to either perform checking, or use a type assertion to convince the type-system that we know better.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;let&lt;/span&gt; foo&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;unknown&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;;

&lt;span&gt;function&lt;/span&gt; hasXYZ(&lt;span class=&quot;pl-v&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;obj&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; { &lt;span class=&quot;pl-en&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;pl-smi&quot;&gt;any&lt;/span&gt;, &lt;span class=&quot;pl-en&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;pl-smi&quot;&gt;any&lt;/span&gt;, &lt;span class=&quot;pl-en&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;pl-smi&quot;&gt;any&lt;/span&gt; } {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span&gt;typeof&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;===&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;object&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;x&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;y&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;z&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;obj&lt;/span&gt;
}

&lt;span&gt;// Using a user-defined type guard...&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-en&quot;&gt;hasXYZ&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;)) {
    &lt;span&gt;// ...we're allowed to access certain properties again.&lt;/span&gt;
    &lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;prop&lt;/span&gt;;
    &lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;y&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;prop&lt;/span&gt;;
    &lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;z&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;prop&lt;/span&gt;;
}

&lt;span&gt;// We can also just convince TypeScript we know what we're doing&lt;/span&gt;
&lt;span&gt;// by using a type assertion.&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;upperCase&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;);

&lt;span&gt;function&lt;/span&gt; upperCase(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;) {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toUpperCase&lt;/span&gt;();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that if you’ve been using a type like &lt;code&gt;{} | null | undefined&lt;/code&gt; to achieve similar behavior, &lt;code&gt;unknown&lt;/code&gt; usually has more desirable behavior in constructs like conditional types, since conditional types distribute across unions:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Arrayify&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;any&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt; &lt;span&gt;Array&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;never&lt;/span&gt;;

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;Arrayify&lt;/span&gt;&amp;lt;{} &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span&gt;undefined&lt;/span&gt;&amp;gt;; &lt;span&gt;// null[] | undefined[] | {}[]&lt;/span&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;B&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;Arrayify&lt;/span&gt;&amp;lt;&lt;span&gt;unknown&lt;/span&gt;&amp;gt;;               &lt;span&gt;// unknown[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;default-props-support&quot;&gt;Support for &lt;code&gt;defaultProps&lt;/code&gt; in JSX&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note: at the time of writing, React’s &lt;code&gt;.d.ts&lt;/code&gt; files may not yet support this functionality.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you’ve ever used default initializers in modern TypeScript/JavaScript, you might know how handy they can be for function callers. They give us a useful syntax to let callers use functions more easily by not requiring certain arguments, while letting function authors ensure that their values are always defined in a clean way.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; loudlyGreet(&lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
    &lt;span&gt;// Thanks to the default initializer, `name` will always have type `string` internally.&lt;/span&gt;
    &lt;span&gt;// We don't have to check for `undefined` here.&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;HELLO&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;name&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toUpperCase&lt;/span&gt;());
}

&lt;span&gt;// Externally, `name` is optional, and we can potentially pass `undefined` or omit it entirely.&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;loudlyGreet&lt;/span&gt;();
&lt;span class=&quot;pl-en&quot;&gt;loudlyGreet&lt;/span&gt;(&lt;span&gt;undefined&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;a href=&quot;https://reactjs.org/&quot; rel=&quot;nofollow&quot;&gt;React&lt;/a&gt;, a similar concept exists for components and their &lt;code&gt;props&lt;/code&gt;. When creating a new element using a component, React looks up a property called &lt;code&gt;defaultProps&lt;/code&gt;, to fill in values for &lt;code&gt;props&lt;/code&gt; that are omitted.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js-jsx&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// Some non-TypeScript JSX file&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt; *&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt; as&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt; React&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt; from&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;react&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
&lt;span&gt;import&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt; *&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt; as&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt; ReactDOM&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt; from&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;react-dom&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Greet&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;Component&lt;/span&gt; {
    &lt;span class=&quot;pl-en&quot;&gt;render&lt;/span&gt;() {
        &lt;span&gt;const&lt;/span&gt; {&lt;span class=&quot;pl-smi&quot;&gt; name&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt; this&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;props&lt;/span&gt;;
&lt;span class=&quot;pl-k&quot;&gt;        return&lt;/span&gt; &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt;&amp;gt;Hello $&lt;span class=&quot;pl-pse&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;toUpperCase&lt;/span&gt;()&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;!&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt;&amp;gt;;
    }

&lt;span class=&quot;pl-k&quot;&gt;    static&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;defaultProps&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
&lt;span class=&quot;pl-c1&quot;&gt;        &lt;span&gt;name&lt;/span&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    };
}

&lt;span&gt;//      Notice no `name` attribute was specified!&lt;/span&gt;
&lt;span&gt;//                                     vvvvvvvvv&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt; =&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-en&quot;&gt;renderToString&lt;/span&gt;(&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;Greet&lt;/span&gt;&lt;/span&gt; /&amp;gt;);
&lt;span class=&quot;pl-c1&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;result&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that in &lt;code&gt;&amp;lt;Greet /&amp;gt;&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; didn’t have to be specified. When a &lt;code&gt;Greet&lt;/code&gt; element is created, &lt;code&gt;name&lt;/code&gt; will be initialized with &lt;code&gt;&quot;world&quot;&lt;/code&gt; and this code will print &lt;code&gt;&amp;lt;div&amp;gt;Hello world!&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, TypeScript didn’t understand that &lt;code&gt;defaultProps&lt;/code&gt; had any bearing on JSX invocations. Instead, users would often have to declare properties optional and use non-null assertions inside of &lt;code&gt;render&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Props&lt;/span&gt; { name&lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; }
&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Greet&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;.&lt;span&gt;Component&lt;/span&gt;&amp;lt;&lt;span&gt;Props&lt;/span&gt;&amp;gt; {
    render() {
        &lt;span&gt;const&lt;/span&gt; { name } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;props&lt;/span&gt;;

        &lt;span&gt;// Notice the `!` ------v&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &amp;lt;&lt;span class=&quot;pl-en&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;$&lt;/span&gt;{&lt;span class=&quot;pl-smi&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toUpperCase&lt;/span&gt;()}&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;;
    }
    &lt;span&gt;static&lt;/span&gt; defaultProps &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { name: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or they’d use some hacky type-assertions to fix up the type of the component before exporting it.&lt;/p&gt;
&lt;p&gt;That’s why TypeScript 3.0, the language supports a new type alias in the &lt;code&gt;JSX&lt;/code&gt; namespace called &lt;code&gt;LibraryManagedAttributes&lt;/code&gt;. Despite the long name, this is just a helper type that tells TypeScript what attributes a JSX tag accepts. The short story is that using this general type, we can model React’s specific behavior for things like &lt;code&gt;defaultProps&lt;/code&gt; and, to some extent, &lt;code&gt;propTypes&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;export&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Props&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
}

&lt;span&gt;export&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Greet&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;React&lt;/span&gt;.&lt;span&gt;Component&lt;/span&gt;&amp;lt;&lt;span&gt;Props&lt;/span&gt;&amp;gt; {
    render() {
        &lt;span&gt;const&lt;/span&gt; { name } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;props&lt;/span&gt;;
        &lt;span&gt;return&lt;/span&gt; &amp;lt;&lt;span class=&quot;pl-en&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;$&lt;/span&gt;{&lt;span class=&quot;pl-smi&quot;&gt;name&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toUpperCase&lt;/span&gt;()}&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;;
    }
    &lt;span&gt;static&lt;/span&gt; defaultProps &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { name: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;}
}

&lt;span&gt;// Type-checks! No type assertions needed!&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; el &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &amp;lt;&lt;span&gt;Greet&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep in mind that there are some limitations. For &lt;code&gt;defaultProps&lt;/code&gt; that explicitly specify their type as something like &lt;code&gt;Partial&amp;lt;Props&amp;gt;&lt;/code&gt;, or stateless function components (SFCs) whose &lt;code&gt;defaultProps&lt;/code&gt; are declared with &lt;code&gt;Partial&amp;lt;Props&amp;gt;&lt;/code&gt;, will make &lt;em&gt;all&lt;/em&gt; props optional. As a workaround, you can omit the type annotation entirely for &lt;code&gt;defaultProps&lt;/code&gt; on a class component (like we did above), or use ES2015 default initializers for SFCs:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; Greet({ &lt;span class=&quot;pl-v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; }&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Props&lt;/span&gt;) {
    &lt;span&gt;return&lt;/span&gt; &amp;lt;&lt;span class=&quot;pl-en&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;$&lt;/span&gt;{&lt;span class=&quot;pl-smi&quot;&gt;name&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toUpperCase&lt;/span&gt;()}&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One last thing to note is that while the support is built into TypeScript, the current &lt;code&gt;.d.ts&lt;/code&gt; files on DefinitelyTyped are not &lt;em&gt;currently&lt;/em&gt; leveraging it – therefore &lt;code&gt;@types/react&lt;/code&gt; may not have the change available yet. We are currently waiting on stabilization throughout DefinitelyTyped to ensure that the change is minimally disruptive.&lt;/p&gt;
&lt;h2 id=&quot;lib-directives&quot;&gt;&lt;code&gt;/// &amp;lt;reference lib=&quot;...&quot; /&amp;gt;&lt;/code&gt; directives&lt;/h2&gt;
&lt;p&gt;One of the issues we’ve seen in the community is that polyfills – libraries that provide newer APIs in older runtimes – often have their own declaration files (&lt;code&gt;.d.ts&lt;/code&gt; files) that attempt to define those APIs themselves. While this is sometimes fine, these declarations are global, and may provide issues with TypeScript’s built-in &lt;code&gt;lib.d.ts&lt;/code&gt; depending on users’ compiler options like &lt;code&gt;--lib&lt;/code&gt; and &lt;code&gt;--target&lt;/code&gt;. For example, declarations for &lt;code&gt;core-js&lt;/code&gt; might conflict with the built-in &lt;code&gt;lib.es2015.d.ts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To solve this, TypeScript 3.0 provides a new way for files to declare the built-in APIs which they expect to be present using a new reference directive: &lt;code&gt;/// &amp;lt;reference lib=&quot;...&quot; /&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, a polyfill for ES2015’s &lt;code&gt;Promise&lt;/code&gt; might now simply contain the lines&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/// &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;reference&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;es2015.promise&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span&gt;export&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this comment, even if a TypeScript 3.0 consumer has explicitly used a target that doesn’t bring in &lt;code&gt;lib.es2015.promise.d.ts&lt;/code&gt;, importing the above library will ensure that &lt;code&gt;Promise&lt;/code&gt; is present.&lt;/p&gt;
&lt;h2 id=&quot;editor-productivity&quot;&gt;Editor Productivity&lt;/h2&gt;
&lt;p&gt;For those who are unfamiliar, TypeScript leverages its syntactic and semantic knowledge to provide services for writing code more easily. It acts as the engine for TypeScript and JavaScript underneath editors like Visual Studio, Visual Studio Code, and any other editor with a TypeScript plugin to provide the things users love like code completion, &lt;em&gt;Go to Definition&lt;/em&gt;, and even quick fixes and refactorings. TypeScript 3.0 continues to deliver here.&lt;/p&gt;
&lt;h3 id=&quot;named-import-refactorings&quot;&gt;Named import refactorings&lt;/h3&gt;
&lt;p&gt;Occasionally, qualifying every import with the module it came from can be cumbersome.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;*&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;dependency&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./dependency&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;

&lt;span&gt;// look at all this repetition!&lt;/span&gt;

&lt;span class=&quot;pl-smi&quot;&gt;dependency&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;();

&lt;span class=&quot;pl-smi&quot;&gt;dependency&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;bar&lt;/span&gt;();

&lt;span class=&quot;pl-smi&quot;&gt;dependency&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;baz&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the other hand, if we individually import the things we use, we might find that after many uses it’s become unclear for new readers where these imports originated from.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; { &lt;span class=&quot;pl-smi&quot;&gt;foo&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;bar&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;baz&lt;/span&gt; } &lt;span&gt;from&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./dependency&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;

&lt;span&gt;// way lower in the file...&lt;/span&gt;

&lt;span class=&quot;pl-en&quot;&gt;foo&lt;/span&gt;();

&lt;span class=&quot;pl-en&quot;&gt;bar&lt;/span&gt;();

&lt;span class=&quot;pl-en&quot;&gt;baz&lt;/span&gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Regardless of which you decide to choose now, you might change your mind later. TypeScript 3.0 provides refactorings so that switch never feels daunting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/namespaceToNamedImports.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;jsx-productivity&quot;&gt;Closing JSX tag completions and outlining spans&lt;/h3&gt;
&lt;p&gt;TypeScript now provides two new productivity features around JSX:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;providing completions for JSX closing tags&lt;/li&gt;
&lt;li&gt;providing collapsible outlining spans for JSX&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://msdnshared.blob.core.windows.net/media/2018/07/jsxCompletionsAndOutlining.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;remove-bogus-code&quot;&gt;Quick fixes for unreachable code and unused labels&lt;/h3&gt;
&lt;p&gt;TypeScript will now provide quick fixes to remove any unreachable code, as well as remove unused labels.&lt;/p&gt;
&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;
&lt;p&gt;You can always keep an eye on upcoming breaking changes &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes&quot;&gt;in the language&lt;/a&gt; as well as &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/API-Breaking-Changes/&quot;&gt;in our API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We expect TypeScript 3.0 to have very few impactful breaking changes. Language changes should be minimally disruptive, and most breaks in our APIs are oriented around removing already-deprecated functions.&lt;/p&gt;
&lt;h3 id=&quot;unknown-is-a-reserved-type-name&quot;&gt;&lt;code&gt;unknown&lt;/code&gt; is a reserved type name&lt;/h3&gt;
&lt;p&gt;Since &lt;code&gt;unknown&lt;/code&gt; is a new built-in type, it can no longer be used in type declarations like interfaces, type aliases, or classes.&lt;/p&gt;
&lt;h3 id=&quot;api-breaking-changes&quot;&gt;API breaking changes&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;The deprecated internal method &lt;code&gt;LanguageService#getSourceFile&lt;/code&gt; has been removed, as it has been deprecated for two years. See &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/24540&quot;&gt;#24540&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The deprecated function &lt;code&gt;TypeChecker#getSymbolDisplayBuilder&lt;/code&gt; and associated interfaces have been removed. See &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/25331&quot;&gt;#25331&lt;/a&gt;. The emitter and node builder should be used instead.&lt;/li&gt;
&lt;li&gt;The deprecated functions &lt;code&gt;escapeIdentifier&lt;/code&gt; and &lt;code&gt;unescapeIdentifier&lt;/code&gt; have been removed. Due to changing how the identifier name API worked in general, they have been identity functions for a few releases, so if you need your code to behave the same way, simply removing the calls should be sufficient. Alternatively, the typesafe &lt;code&gt;escapeLeadingUnderscores&lt;/code&gt; and &lt;code&gt;unescapeLeadingUnderscores&lt;/code&gt; should be used if the types indicate they are required (as they are used to convert to or from branded &lt;code&gt;__String&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; types).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;TypeChecker#getSuggestionForNonexistentProperty&lt;/code&gt;, &lt;code&gt;TypeChecker#getSuggestionForNonexistentSymbol&lt;/code&gt;, and &lt;code&gt;TypeChecker#getSuggestionForNonexistentModule&lt;/code&gt; methods have been made internal, and are no longer part of our public API. See &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/25520&quot;&gt;#25520&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TypeScript owes so much of its success to its community. We’re indebted to our contributors who’ve worked on the compiler, the language service, DefinitelyTyped, and tooling integration that leveraged any combination of them. But we’re also grateful for our users who’ve consistently given us the feedback we needed and pushed us to improve. Going forward, we foresee bringing more value to the type system and tooling experience, polishing the existing work on project references, and making TypeScript (both the language and the project) more approachable by whatever means we can. But in addition to that, we want to explore what we can do to empower more tool authors and users in the JavaScript community – to bring value to users who could still get value from using TypeScript even without directly using TypeScript.&lt;/p&gt;
&lt;p&gt;Keep an eye on &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/Roadmap&quot;&gt;our roadmap&lt;/a&gt; as these ideas become specifics, and feel free to drop us a line to give us feedback, whether via the comments below, &lt;a href=&quot;https://twitter.com/typescriptlang/&quot; rel=&quot;nofollow&quot;&gt;over Twitter&lt;/a&gt;, or &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/new/choose&quot;&gt;by filing an issue&lt;/a&gt;. We’re always trying to do better.&lt;/p&gt;
&lt;p&gt;For everyone who’s been a part of the TypeScript journey so far – thank you. We look forward to bringing you the best experience we can. And for everyone else, we hope you’ll start exploring and loving TypeScript as much as we do.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;p&gt;The TypeScript Team&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Mon, 30 Jul 2018 16:43:41 +0000</pubDate>
<dc:creator>DanRosenwasser</dc:creator>
<og:type>article</og:type>
<og:title>Announcing TypeScript 3.0</og:title>
<og:url>https://blogs.msdn.microsoft.com/typescript/2018/07/30/announcing-typescript-3-0/</og:url>
<og:description></og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blogs.msdn.microsoft.com/typescript/2018/07/30/announcing-typescript-3-0/</dc:identifier>
</item>
<item>
<title>Learning Dexterity</title>
<link>https://blog.openai.com/learning-dexterity/</link>
<guid isPermaLink="true" >https://blog.openai.com/learning-dexterity/</guid>
<description>&lt;div id=&quot;intro&quot;&gt;&lt;p&gt;&lt;strong&gt;We've trained a human-like robot hand to manipulate physical objects with unprecedented dexterity.&lt;/strong&gt; Our system, called Dactyl, is trained entirely in simulation and transfers its knowledge to reality, adapting to real-world physics using techniques we've been working on for the &lt;a href=&quot;https://blog.openai.com/spam-detection-in-the-physical-world/&quot;&gt;past&lt;/a&gt; &lt;a href=&quot;https://blog.openai.com/generalizing-from-simulation/&quot;&gt;year&lt;/a&gt;. Dactyl learns from scratch using the same general-purpose reinforcement learning algorithm and code as &lt;a href=&quot;https://blog.openai.com/openai-five/&quot;&gt;OpenAI Five&lt;/a&gt;. Our &lt;a href=&quot;https://blog.openai.com/learning-dexterity/#results&quot;&gt;results&lt;/a&gt; show that it's possible to train agents in simulation and have them solve real-world tasks, without physically-accurate modeling of the world.&lt;/p&gt;
&lt;div class=&quot;Post-Actions Post-Actions--listicons&quot;&gt;&lt;a href=&quot;https://d4mucfpksywv.cloudfront.net/research-covers/learning-dexterity/learning-dexterity-paper.pdf&quot; class=&quot;Post-Actions--paper&quot;&gt;Read Paper&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://d4mucfpksywv.cloudfront.net/research-covers/learning-dexterity/motion-types-v2.gif&quot;/&gt;&lt;em&gt;Examples of dexterous manipulation behaviors &lt;a href=&quot;https://blog.openai.com/learning-dexterity/#results&quot;&gt;autonomously learned&lt;/a&gt; by Dactyl.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dactyl is a system for manipulating objects using a &lt;a href=&quot;https://www.shadowrobot.com/products/dexterous-hand/&quot;&gt;Shadow Dexterous Hand&lt;/a&gt;. We place an object such as a block or a prism in the palm of the hand and ask Dactyl to reposition it into a different orientation; for example, rotating the block to put a new face on top. The network observes only the coordinates of the fingertips and the images from three regular RGB cameras.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.openai.com/content/images/2018/07/195A4726-2.jpg&quot; alt=&quot;Dactyl robot hand with a colored block resting on the palm&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Although the first humanoid hands were developed decades ago, using them to manipulate objects effectively has been a long-standing challenge in robotic control. Unlike other problems such as &lt;a href=&quot;https://www.bostondynamics.com/atlas&quot;&gt;locomotion&lt;/a&gt;, progress on dextrous manipulation using traditional robotics approaches has been slow, and &lt;a href=&quot;https://www.youtube.com/playlist?list=PLOXw6I10VTv_CcTXlvHmGbWH-_wUOoRoO&quot;&gt;current techniques&lt;/a&gt; remain limited in their ability to manipulate objects in the real world.&lt;/p&gt;
&lt;p&gt;Reorienting an object in the hand requires the following problems to be solved:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Working in the real world.&lt;/strong&gt; Reinforcement learning has shown many successes in simulations and video games, but has had comparatively limited results in the real world. We test Dactyl on a physical robot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High-dimensional control.&lt;/strong&gt; The Shadow Dexterous Hand has 24 degrees of freedom compared to 7 for a typical robot arm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Noisy and partial observations.&lt;/strong&gt; Dactyl works in the physical world and therefore must handle noisy and delayed sensor readings. When a fingertip sensor is occluded by other fingers or by the object, Dactyl has to work with partial information. Many aspects of the physical system like friction and slippage are not directly observable and must be inferred.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manipulating more than one object.&lt;/strong&gt; Dactyl is designed to be flexible enough to reorient multiple kinds of objects. This means that our approach cannot use strategies that are only applicable to a specific object geometry.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dactyl learns to solve the object reorientation task entirely in simulation without any human input. After this training phase, the learned policy works on the real robot without any fine-tuning.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DKe8FumoD4E&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;Dactyl achieving the &lt;a href=&quot;https://blog.openai.com/learning-dexterity/#results&quot;&gt;tested maximum&lt;/a&gt; of 50 consecutive rotations. Real-time.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Learning methods for robotic manipulation face a dilemma. Simulated robots can easily provide enough data to train complex policies, but most manipulation problems can’t be modeled accurately enough for those policies to transfer to real robots. Even modeling what happens when two objects touch — the most basic problem in manipulation — is an &lt;a href=&quot;https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf&quot;&gt;active area of research&lt;/a&gt; with no widely accepted solution. Training directly on physical robots allows the policy to learn from real-world physics, but today’s algorithms would require years of experience to solve a problem like object reorientation.&lt;/p&gt;
&lt;p&gt;Our approach, &lt;em&gt;domain randomization&lt;/em&gt;, learns in a simulation which is designed to provide a variety of experiences rather than maximizing realism. This gives us the best of both approaches: by learning in simulation, we can gather more experience quickly by scaling up, and by de-emphasizing realism, we can tackle problems that simulators can only model approximately.&lt;/p&gt;
&lt;p&gt;It's been shown (by &lt;a href=&quot;https://blog.openai.com/generalizing-from-simulation/&quot;&gt;OpenAI&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/abs/1611.04201&quot;&gt;others&lt;/a&gt;) that domain randomization can work on increasingly complex problems — domain randomizations were even &lt;a href=&quot;https://blog.openai.com/openai-five/#exploration&quot;&gt;used to train OpenAI Five&lt;/a&gt;. Here, we wanted to see if scaling up domain randomization could solve a task well beyond the reach of current methods in robotics.&lt;/p&gt;
&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;p&gt;We built a &lt;a href=&quot;https://blog.openai.com/ingredients-for-robotics-research/&quot;&gt;simulated version&lt;/a&gt; of our robotics setup using the &lt;a href=&quot;http://www.mujoco.org/&quot;&gt;MuJoCo&lt;/a&gt; physics engine. This simulation is only a coarse approximation of the real robot:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Measuring physical attributes like friction, damping, and rolling resistance is cumbersome and difficult. They also change over time as the robot experiences wear and tear.&lt;/li&gt;
&lt;li&gt;MuJoCo is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Rigid_body&quot;&gt;rigid body&lt;/a&gt; simulator, which means that it cannot simulate the deformable rubber found at the fingertips of the hand or the stretching of tendons.&lt;/li&gt;
&lt;li&gt;Our robot can only manipulate the object by repeatedly making contact with it. However, contact forces are notoriously difficult to reproduce accurately in simulation.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The simulation can be made more realistic by calibrating its parameters to match robot behavior, but many of these effects simply cannot be modeled accurately in current simulators.&lt;/p&gt;
&lt;p&gt;Instead, we train the policy on a distribution of simulated environments where the physical and visual attributes are chosen randomly. Randomized values are a natural way to represent the uncertainties that we have about the physical system and also prevent overfitting to a single simulated environment. If a policy can accomplish the task across all of the simulated environments, it will more likely be able to accomplish it in the real world.&lt;/p&gt;
&lt;h4 id=&quot;learningtocontrol&quot;&gt;Learning to control&lt;/h4&gt;
&lt;p&gt;By building simulations that support transfer, we have reduced the problem of controlling a robot in the real world to accomplishing a task in simulation, which is a problem well-suited for reinforcement learning. While the task of manipulating an object in a simulated hand is already &lt;a href=&quot;https://blog.openai.com/ingredients-for-robotics-research/&quot;&gt;somewhat difficult&lt;/a&gt;, learning to do so across all combinations of randomized physical parameters is substantially more difficult.&lt;/p&gt;
&lt;p&gt;To generalize across environments, it is helpful for the policy to be able to take different actions in environments with different dynamics. Because most dynamics parameters cannot be inferred from a single observation, we used an &lt;a href=&quot;http://colah.github.io/posts/2015-08-Understanding-LSTMs/#lstm-networks&quot;&gt;LSTM&lt;/a&gt; — a type of neural network with memory — to make it possible for the network to learn about the dynamics of the environment. The LSTM achieved about twice as many rotations in simulation as a policy without memory.&lt;/p&gt;
&lt;p&gt;Dactyl learns using &lt;a href=&quot;https://blog.openai.com/openai-five/#rapid&quot;&gt;Rapid&lt;/a&gt;, the massively scaled implementation of Proximal Policy Optimization developed to allow OpenAI Five to solve Dota 2. We use a different model architecture, environment, and hyperparameters than OpenAI Five does, but we use the same algorithms and training code. Rapid used 6144 CPU cores and 8 GPUs to train our policy, collecting about one hundred years of experience in 50 hours.&lt;/p&gt;
&lt;p&gt;For development and testing, we validated our control policy against objects with embedded motion tracking sensors to isolate the performance of our control and vision networks.&lt;/p&gt;
&lt;h4 id=&quot;learningtosee&quot;&gt;Learning to see&lt;/h4&gt;
&lt;p&gt;Dactyl was designed to be able to manipulate arbitrary objects, not just those that have been specially modified to support tracking. Therefore, Dactyl uses regular RGB camera images to estimate the position and orientation of the object.&lt;/p&gt;
&lt;p&gt;We train a pose estimator using a convolutional neural network. The neural network takes the video streams from three cameras positioned around the robot hand and outputs the estimated position and orientation of the object. We use multiple cameras to resolve ambiguities and occlusion. We again use domain randomization to train this network only in simulation using the &lt;a href=&quot;https://unity3d.com/&quot;&gt;Unity&lt;/a&gt; game development platform, which can model a wider variety of visual phenomena than Mujoco.&lt;/p&gt;
&lt;p&gt;By combining these two independent networks, the control network that reorients the object given its pose and the vision network that maps images from cameras to the object’s pose, Dactyl can manipulate an object by seeing it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.openai.com/content/images/2018/07/simulated-camera-grid.png&quot; alt=&quot;simulated-camera-grid&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;CustomCaption&quot;&gt;&lt;em&gt;Example training images used for learning to estimate the pose of the block.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;emergentbehaviors&quot;&gt;Emergent behaviors&lt;/h4&gt;
&lt;p&gt;When deploying our system, we noticed that Dactyl uses a rich set of &lt;a href=&quot;https://www.eng.yale.edu/grablab/pubs/Ma_ICAR2011.pdf&quot;&gt;in-hand dexterous manipulation strategies&lt;/a&gt; to solve the task. These strategies are commonly used by humans as well. However, we do not teach them to our system explicitly; all behaviors are discovered autonomously.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d4mucfpksywv.cloudfront.net/research-covers/learning-dexterity/motion-types-v2.gif&quot;/&gt;&lt;em&gt;Examples of dexterous manipulation behaviors &lt;a href=&quot;https://blog.openai.com/learning-dexterity/#results&quot;&gt;autonomously learned&lt;/a&gt; by Dactyl.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d4mucfpksywv.cloudfront.net/research-covers/learning-dexterity/grasp-types.jpg&quot; alt=&quot;Six different grasp types learned by Dactyl&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;CustomCaption&quot;&gt;&lt;em&gt;Dactyl grasp types according to the &lt;a href=&quot;https://www.is.mpg.de/uploads_file/attachment/attachment/256/grasp_taxonomy.pdf&quot;&gt;GRASP taxonomy&lt;/a&gt;. Top left to bottom right: Tip Pinch, Palmar Pinch, Tripod, Quadpod, Power grasp, and 5-Finger Precision grasp.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We observed that for precision grasps, such as the Tip Pinch grasp, Dactyl uses the thumb and little finger. Humans tend to use the thumb and either the index or middle finger instead. However, the robot hand's little finger is more flexible due to an &lt;a href=&quot;http://www.shadowrobot.com/wp-content/uploads/shadow_dexterous_hand_technical_specification_E1_20130101.pdf&quot;&gt;extra degree of freedom&lt;/a&gt;, which may explain why Dactyl prefers it. This means that Dactyl can rediscover grasps found in humans, but adapt them to better fit the limitations and abilities of its own body.&lt;/p&gt;
&lt;h4 id=&quot;transferperformance&quot;&gt;Transfer performance&lt;/h4&gt;
&lt;p&gt;We tested how many rotations Dactyl could achieve before it dropped the object, timed out, or reached 50 successes. Our policies trained purely in simulation were able to successfully manipulate objects in the real world.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.openai.com/content/images/2018/07/001cageoverview_raw.jpg&quot; alt=&quot;001cageoverview_raw&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;CustomCaption&quot;&gt;&lt;em&gt;Dactyl lab setup with Shadow Dexterous Hand, PhaseSpace motion tracking cameras, and Basler RGB cameras.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For the task of block manipulation, policies trained with randomization could achieve many more rotations than those trained without randomization, as can be seen in the results below. Also, using the control network with pose estimated from vision performs nearly as well as reading the pose directly from motion tracking sensors.&lt;/p&gt;

&lt;h4 id=&quot;learningprogress&quot;&gt;Learning progress&lt;/h4&gt;
&lt;p&gt;The vast majority of training time is spent making the policy robust to different physical dynamics. Learning to rotate an object in simulation without randomizations requires about 3 years of simulated experience, while achieving similar performance in a fully randomized simulation requires about 100 years of experience.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.openai.com/content/images/2018/07/learning-progress-1.svg&quot; alt=&quot;learning-progress-1&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;CustomCaption&quot;&gt;&lt;em&gt;Learning progress with and without randomizations over years of simulated experience.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Tactile sensing is not necessary to manipulate real-world objects.&lt;/strong&gt; Our robot receives only the locations of the five fingertips along with the position and orientation of the cube. Although the robot hand has touch sensors on its fingertips, we didn't need to use them. Generally, we found better performance from using a limited set of sensors that could be modeled effectively in the simulator instead of a rich sensor set with values that were hard to model.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Randomizations developed for one object generalize to others with similar properties.&lt;/strong&gt; After developing our system for the problem of manipulating a block, we printed an octagonal prism, trained a new policy using its shape, and attempted to manipulate it. Somewhat to our surprise, it achieved high performance using only the randomizations we had designed for the block. By contrast, a policy that manipulated a sphere could only achieve a few successes in a row, perhaps because we had not randomized any simulation parameters that model rolling behavior.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;With physical robots, good systems engineering is as important as good algorithms.&lt;/strong&gt; At one point, we noticed that one engineer consistently achieved much better performance than others when running the exact same policy. We later discovered that he had a faster laptop, which hid a timing bug that reduced performance. After the bug was fixed, performance improved for the rest of the team.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also found to our surprise that a number of commonly employed techniques did not improve our results.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Decreasing reaction time did not improve performance.&lt;/strong&gt; Conventional wisdom states that reducing the time between actions should improve performance because the changes between states are smaller and therefore easier to predict. Our current time between actions is 80ms, which is smaller than human reaction time of 150-250ms, but significantly larger than neural network computation time of roughly 25ms. Surprisingly, decreasing time between actions to 40ms required additional training time but did not noticeably improve performance in the real world. It’s possible that this rule of thumb is less applicable to neural network models than to the linear models that are in common use today.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using real data to train our vision policies didn’t make a difference.&lt;/strong&gt; In early experiments, we used a combination of simulated and real data to improve our models. The real data was gathered from trials of our policy against an object with embedded tracking markers. However, real data has significant disadvantages compared to simulated data. Position information from tracking markers has latency and measurement error. Worse, real data is easily invalidated by common configuration changes, making it a hassle to collect enough to be useful. As our methods developed, our simulator-only error improved until it matched our error from using a mixture of simulated and real data. Our final vision models were trained without real data.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;This project completes a full cycle of AI development that OpenAI has been pursuing for the past two years: we've developed &lt;a href=&quot;https://blog.openai.com/openai-baselines-ppo/&quot;&gt;a new learning algorithm&lt;/a&gt;, scaled it massively to solve &lt;a href=&quot;https://blog.openai.com/openai-five/&quot;&gt;hard simulated tasks&lt;/a&gt;, and then applied the resulting system to the real world. Repeating this cycle at &lt;a href=&quot;https://blog.openai.com/ai-and-compute/&quot;&gt;increasing scale&lt;/a&gt; is the primary route we are pursuing to increase the capabilities of today's AI systems towards safe artificial general intelligence. If you'd like to be part of what comes next, &lt;a href=&quot;https://openai.com/jobs/&quot;&gt;we're hiring&lt;/a&gt;!&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;small&gt;Thanks to the following for feedback on drafts of this post: Pieter Abbeel, Tamim Asfour, Marek Cygan, Ken Goldberg, Anna Goldie, Edward Mehr, Azalia Mirhoseini, Lerrel Pinto, Aditya Ramesh, and Ian Rust.&lt;/small&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Mon, 30 Jul 2018 16:04:54 +0000</pubDate>
<dc:creator>gdb</dc:creator>
<og:type>article</og:type>
<og:title>Learning Dexterity</og:title>
<og:description>We've trained a human-like robot hand to manipulate physical objects with unprecedented dexterity.</og:description>
<og:url>https://blog.openai.com/learning-dexterity/</og:url>
<og:image>https://blog.openai.com/content/images/2018/07/learning-dexterity-twitter-card-16x9.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.openai.com/learning-dexterity/</dc:identifier>
</item>
<item>
<title>Bank of America questions customer’s citizenship, freezes accounts</title>
<link>http://www.kctv5.com/story/38753295/bank-of-america-questioning-customers-citizenship-freezing-accounts</link>
<guid isPermaLink="true" >http://www.kctv5.com/story/38753295/bank-of-america-questioning-customers-citizenship-freezing-accounts</guid>
<description>&lt;span id=&quot;WNStoryDateline&quot;&gt;KANSAS CITY, MO (KCTV) -&lt;/span&gt;&lt;p&gt;This is a heads-up for any Bank of America customer: You might be getting questions about your citizenship status and even have your accounts frozen with no warning.&lt;/p&gt;
&lt;p&gt;KCTV5 News heard about this happening when one of our longtime photographers, Josh Collins, told us what happened to him.&lt;/p&gt;
&lt;p&gt;He had received a mailer claiming to be sent by Bank of America that asked for personal information and citizenship information.&lt;/p&gt;
&lt;p&gt;However, he has been a Bank of America customer for 20 years and was born a U.S. citizen, so he figured it could be a scam and that the bank would follow up if it was legitimate.&lt;/p&gt;
&lt;p&gt;The next thing he knew, his accounts were frozen without notice.&lt;/p&gt;
&lt;p&gt;“They only do that to people’s accounts for people trying to flee the country,” he said. “We’re not criminals. We didn’t do anything wrong.”&lt;/p&gt;
&lt;p&gt;When he found out his card was declined and when he called Bank of America to find out why, they told him his account was frozen.&lt;/p&gt;
&lt;p&gt;“The first question is, ‘Oh, we sent you something in the mail a few weeks ago,’” he recalled. “I said, ‘Yeah, I remember getting something that didn’t look real.’ And they’re like, ‘Oh yeah, we need to know if you’re a citizen.’ You know, I was born and raised in Kansas like Superman. I said, ‘How much more American can you get?’”&lt;/p&gt;
&lt;p&gt;The bank representative told Collins he would have access to his accounts the next day,&lt;/p&gt;
&lt;p&gt;“So, we get up in the morning,” he said. “Card doesn’t work again. So, my wife -- being the patient one -- calls and they said, ‘Well, your cards have been lost or stolen.’”&lt;/p&gt;
&lt;p&gt;That was not true.&lt;/p&gt;
&lt;p&gt;“So, at that point, we decide to go into the physical bank and it took about 15 minutes, but the first question they asked me was, ‘Are you a citizen?’” he said. “Again? ‘Yes.’ And then they wanted to know if I had dual citizenship.”&lt;/p&gt;
&lt;p&gt;They eventually unfroze Collins’ accounts, but not before sending an email notifying him all of his automatic bill payment accounts were wiped out.  &lt;/p&gt;
&lt;p&gt;Collins said the bank explained that, eventually, they would be asking this of all their customers.&lt;/p&gt;
&lt;p&gt;Sure enough, when KCTV5’s Emily Sinovic logged into her account, there was an alert to update personal information, then a big alert asking her to update her citizenship status, and then a question asking whether she is a dual citizen.&lt;/p&gt;
&lt;p&gt;However, there was no warning about frozen accounts.&lt;/p&gt;
&lt;p&gt;We contacted Bank of America for comment and they sent the following statement: &lt;/p&gt;
&lt;blockquote readability=&quot;19&quot;&gt;
&lt;p&gt;&quot;Like all financial institutions, we’re required by law to maintain complete and accurate records for all of our customers and may periodically request information, such as country of citizenship and proof of US residency. This is not unique to Bank of America. This type of outreach is nothing new and the information must be up to date. Therefore we periodically reach out to customers, which is what we did in this case.&lt;/p&gt;
&lt;p&gt;Over time, we reach out to all customers to verify their information, not only specific customers. If we don’t hear from a customer in response to our outreach, as a last resort, we may restrict the account until we can confirm it is in compliance with regulatory requirements.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Later on Friday, they sent the following updated statement:&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;&quot;Updated statement:&lt;/p&gt;
&lt;p&gt;Like all financial institutions, we’re required by law to maintain complete and accurate records for all of our customers and may periodically request information as required by law and regulation. This is not unique to Bank of America.  This type of outreach is nothing new and the information must be up to date. Therefore we periodically reach out to customers, which is what we did in this case.&lt;/p&gt;
&lt;p&gt;Over time, we reach out to all customers to verify their information, not only specific customers. If we don’t hear from a customer in response to our outreach, as a last resort, we may restrict the account until we can confirm it is in compliance with regulatory requirements.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Copyright 2018 KCTV (Meredith Corp.) All rights reserved.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 30 Jul 2018 15:16:37 +0000</pubDate>
<dc:creator>Fermin</dc:creator>
<og:title>Bank of America questions customer’s citizenship, freezes accounts</og:title>
<og:type>article</og:type>
<og:url>//www.kctv5.com/story/38753295/bank-of-america-questioning-customers-citizenship-freezing-accounts</og:url>
<og:image>http://kctv.images.worldnow.com/images/17292633_G.jpg?lastEditedDate=20180727154124</og:image>
<og:description>This is a heads-up for any Bank of America customer: You might be getting questions about your citizenship status and even have your accounts frozen with no warning.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.kctv5.com/story/38753295/bank-of-america-questioning-customers-citizenship-freezing-accounts</dc:identifier>
</item>
<item>
<title>L-theanine, a constituent in tea, and its effect on mental state (2008) [pdf]</title>
<link>http://apjcn.nhri.org.tw/server/APJCN/17%20Suppl%201//167.pdf</link>
<guid isPermaLink="true" >http://apjcn.nhri.org.tw/server/APJCN/17%20Suppl%201//167.pdf</guid>
<description>&lt;a href=&quot;http://apjcn.nhri.org.tw/server/APJCN/17%20Suppl%201//167.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Mon, 30 Jul 2018 13:19:17 +0000</pubDate>
<dc:creator>lainon</dc:creator>
<og:title>Bank of America questions customer’s citizenship, freezes accounts</og:title>
<og:type>article</og:type>
<og:url>//www.kctv5.com/story/38753295/bank-of-america-questioning-customers-citizenship-freezing-accounts</og:url>
<og:image>http://kctv.images.worldnow.com/images/17292633_G.jpg?lastEditedDate=20180727154124</og:image>
<og:description>This is a heads-up for any Bank of America customer: You might be getting questions about your citizenship status and even have your accounts frozen with no warning.</og:description>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>http://apjcn.nhri.org.tw/server/APJCN/17%20Suppl%201//167.pdf</dc:identifier>
</item>
<item>
<title>India&amp;#039;s first RISC-V based Chip is Here: Linux boots on Shakti processor</title>
<link>http://www.geekdave.in/2018/07/indias-first-risc-v-is-here-linux-boots.html</link>
<guid isPermaLink="true" >http://www.geekdave.in/2018/07/indias-first-risc-v-is-here-linux-boots.html</guid>
<description>&lt;div dir=&quot;ltr&quot; trbidi=&quot;on&quot;&gt;
&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-eW0Jl4oTcag/W13cVRymo6I/AAAAAAAAGw4/bZoDz72rVNUbB8wvzvYh1JjL82mUAKdAgCLcBGAs/s1600/DjA8MUqU0AAy-z8.jpg&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;384&quot; data-original-width=&quot;383&quot; height=&quot;640&quot; src=&quot;https://1.bp.blogspot.com/-eW0Jl4oTcag/W13cVRymo6I/AAAAAAAAGw4/bZoDz72rVNUbB8wvzvYh1JjL82mUAKdAgCLcBGAs/s640/DjA8MUqU0AAy-z8.jpg&quot; width=&quot;638&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;India's first RISC-V based silicon chip got success results in the design process!&lt;p&gt;Computer processors work on instruction sets, which are basically commands that tell the processor what to do. An example might be a command to move a value into memory or a command that multiples a value in one memory address with the value in another memory address.&lt;br/&gt;Shakrti is a sanskrit word and it literally means Power/The Great Divine Mother.&lt;/p&gt;&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-8880456561468860&quot; data-ad-slot=&quot;7056961629&quot;/&gt; &lt;br/&gt;There are two main types of processor architecture as you identified - CISC (Complex Instruction Set Computing) used by x86 processors and RISC (Reduced Instruction Set Computing) used by ARM processors.&lt;/p&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-xa0JuuXJrzs/W13gQsPIw6I/AAAAAAAAGxE/EVRZ9jw6OfAGrgu3DyLiT7jTcjNZ8N_bgCLcBGAs/s1600/aa.jpg&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1200&quot; data-original-width=&quot;900&quot; height=&quot;400&quot; src=&quot;https://2.bp.blogspot.com/-xa0JuuXJrzs/W13gQsPIw6I/AAAAAAAAGxE/EVRZ9jw6OfAGrgu3DyLiT7jTcjNZ8N_bgCLcBGAs/s400/aa.jpg&quot; width=&quot;300&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;RISC based (ARM) chips tend to be used in small, low power devices such as smart phones due to their low power usage, low footprint and relatively low cost - hence their use in the Raspberry Pi.&lt;p&gt;Shakrti processor is a low-power prototype, they were interested in optimising power and area.&lt;br/&gt;currently, it's clocking at 400MHz, DMIPS/MHz - 1.67.&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-qMNi2Juraf0/W13gcKoBKwI/AAAAAAAAGxI/FqNbctNOyNwEDSbVe7FIkyEGBKJ_IDhKgCLcBGAs/s1600/b.jpg&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1200&quot; data-original-width=&quot;900&quot; height=&quot;640&quot; src=&quot;https://4.bp.blogspot.com/-qMNi2Juraf0/W13gcKoBKwI/AAAAAAAAGxI/FqNbctNOyNwEDSbVe7FIkyEGBKJ_IDhKgCLcBGAs/s640/b.jpg&quot; width=&quot;480&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;Will it replace 'qualcomm snapdragon 845' chip from your smartphone?&lt;br/&gt;probably not but it's a very good sign that we might see future computing devices with this indian chip.&lt;/p&gt;&lt;p&gt;more details can be tracked from their official twitter account: &lt;a href=&quot;https://twitter.com/ShaktiProcessor/status/1022384131064430593&quot; target=&quot;_blank&quot;&gt;shaktiprocessor&lt;/a&gt;&lt;/p&gt;&lt;p&gt;update : &lt;a href=&quot;https://twitter.com/davedhananjay/status/1023666728247545856&quot; target=&quot;_blank&quot;&gt;extra info&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 30 Jul 2018 08:14:40 +0000</pubDate>
<dc:creator>signa11</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.geekdave.in/2018/07/indias-first-risc-v-is-here-linux-boots.html</dc:identifier>
</item>
<item>
<title>Tom Tryniski digitized nearly 50M pages of newspapers in his living room</title>
<link>https://www.cjr.org/the_profile/tom-tryniski-fultonhistory.php</link>
<guid isPermaLink="true" >https://www.cjr.org/the_profile/tom-tryniski-fultonhistory.php</guid>
<description>&lt;span class=&quot;caption-top hidden-print&quot;&gt;Photos by Alexandria Neason&lt;/span&gt;&lt;p&gt;&lt;strong&gt;Tom Tryniski does not lock his doors.&lt;/strong&gt; He spends most days sitting in his living room in Fulton, New York, 30 miles northwest of Syracuse, in front of two jumbo computer monitors, looking something like a security guard, but friendlier. He appears young for 68—skinny, with a head of white hair and an energetic demeanor. He wears a uniform of jeans and a slim-fitting T-shirt, but no coat in the chilly fall air. When we talk, he is almost always smirking.&lt;/p&gt;
&lt;p&gt;There are few newspapers left in his community; the &lt;em&gt;Fulton Patriot&lt;/em&gt; closed in 2010, and &lt;em&gt;The&lt;/em&gt; (Oswego County) &lt;em&gt;Valley News&lt;/em&gt;, is printed just twice weekly. And yet Tryniski’s living room is drowning in newsprint, home to millions of pages of newspapers from all over New York, and the country, and Canada, stretching back to the 19th century. Every day, he sits in front of his surveillance-style monitors, shoulders hunched forward, face burrowed into the blue glow of the screen, scanning newspapers from microfilm into his massive online repository, Fultonhistory.com. Ten computers stacked on a black cart behind him hum and click, and just outside the sliding doors that open into the apartment, perched on a corner of the deck like a watchtower, is a small gazebo he built himself. Inside are his servers and three more computer monitors, which he uses to monitor Web traffic. A scanner detailing the movements of the local police buzzes in the background, and a light mist blows from the lid of a diffuser, filling the room with the scent of cinnamon. On a brisk day this past fall, Tryniski was working on issues of the now-defunct &lt;em&gt;Canajoharie Courier&lt;/em&gt; from between 1912 and 1914 (the last issue went to press in Upstate New York in 1943).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ICYMI: &lt;a href=&quot;https://www.cjr.org/united_states_project/tucson-daily-star-jackalope.php&quot;&gt;A school district kept a secret blacklist for decades. A reporter found it.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tryniski began archiving old newspapers around 1999, when he retired as the head of the IT department at the Black Clawson paper plant, now called Davis-Standard. It started as a hobby; a co-worker gifted him an old postcard and he’d gone to the local library to find out who the people in the photo were. As a kid, he’d obsess about columns in the old &lt;em&gt;Fulton Patriot&lt;/em&gt; that featured photos of the town’s industrial history—black-and-white images of men and women in front of massive warehouses and quaint, locally owned storefronts. The archives of the &lt;em&gt;Fulton Patriot&lt;/em&gt; brought him back to those times. And with that, Tryniski, a lifelong Fultonian, began an entirely unexpected second career.&lt;/p&gt;
&lt;p&gt;Fultonhistory.com, which Tryniski coded himself, is frenetic and charmingly outdated; the homepage is swimming with Flash graphics (such as a goldfish that sticks out its human-like tongue) and enough scrolling marquee text to make an early-aughts Xanga page designer nostalgic. He built a chat room where browsers can ask questions and report problems and, on occasion, be terrorized by a crazed, lime-green joker cartoon he controls remotely, mostly for kicks. The entire operation was, in the beginning, routed through a Russian server.&lt;/p&gt;
&lt;div id=&quot;attachment_72156&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;35&quot;&gt;&lt;img class=&quot;wp-image-72156 size-full&quot; src=&quot;https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1499.jpg&quot; alt=&quot;&quot; width=&quot;1300&quot; height=&quot;867&quot; srcset=&quot;https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1499.jpg 1300w, https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1499-800x534.jpg 800w&quot; sizes=&quot;(max-width: 1300px) 100vw, 1300px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Tom Tryniski began digitizing newspapers from all over Upstate New York in 1999. Since then, he’s scanned and uploaded nearly 50 million newspaper pages from publications across the US and Canada dating back to the 1800s. Photo by Alexandria Neason&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;By October of last year, the site hosted nearly 50 million pages of American and Canadian newspapers—a collection much larger than that of &lt;a href=&quot;https://chroniclingamerica.loc.gov/newspapers/&quot;&gt;Chronicling America&lt;/a&gt;, the joint newspaper digitization efforts sponsored by the Library of Congress and the National Endowment of the Humanities. The first newspaper he digitized was the &lt;em&gt;Fulton Patriot&lt;/em&gt;; at the time, he didn’t own his own equipment. Twice a week, he borrowed microfilm rolls of the newspaper from the Fulton library and drove north to Potsdam, New York, nearly three hours away, to use an old foot pedal-powered microscanner at the offices of the Northern New York Library Network. He scanned 36,000 pages in this way and, exhausted from the commute, decided that if he was serious about his project, he was going to have to buy his own scanner.&lt;/p&gt;
&lt;div id=&quot;mc_embed_signup&quot; class=&quot;hidden-print&quot;&gt;
&lt;center&gt;&lt;span class=&quot;form-title-embed&quot;&gt;Sign up for weekly emails from the &lt;span class=&quot;cjr-bold&quot;&gt;United States Project&lt;/span&gt;&lt;/span&gt;

&lt;/center&gt;
&lt;/div&gt;
&lt;p&gt;He bid on his first second-hand Wicks and Wilson microscanner, a hulk of a machine, in an auction for $3,500, paid entirely with money orders. Since 1999, he’s upgraded his equipment three times, and spent tens of thousands of his own savings in the process. Tryniski borrows rolls of microfilm primarily from libraries and universities, and for the trouble, he offers them digitized copies for free. His collection grew to include newspapers from other states, and Canada, too.&lt;/p&gt;
&lt;div id=&quot;attachment_72155&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;36&quot;&gt;&lt;img class=&quot;wp-image-72155 size-full&quot; src=&quot;https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1414-edit.jpg&quot; alt=&quot;&quot; width=&quot;1300&quot; height=&quot;867&quot; srcset=&quot;https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1414-edit.jpg 1300w, https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1414-edit-800x534.jpg 800w&quot; sizes=&quot;(max-width: 1300px) 100vw, 1300px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Tryniski scans rolls of microfilm borrowed from libraries from his living room in Fulton, New York. He bought his first Wicks and Wilson microfilm scanner in the late 1990s from an auction and has upgraded three times. He spent about $32,000 on his current machine. Photo by Alexandria Neason&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Tryniski has no formal training in archiving and isn’t particularly interested in working with any of the various other online newspaper directories, especially those with regimented archival requirements. He has, on occasion, been approached by companies looking to partner with him or purchase licenses to his archives. He’s turned them all down, including one offer for half a million dollars.&lt;/p&gt;
&lt;p&gt;“I knew [my collection] would ultimately be charged for,” Tryniski says nonchalantly, explaining why he declined the offer—for most people, an enormous sum of money. “I really didn’t like the idea of charging a guy to use my site, and then for them to take the biggest profit. You know what I’m saying?” Tryniski, who rarely travels, owns his home in low-cost Fulton, and eats meals at a diner (he doesn’t even own dishes, he says), funds the operation himself. His efforts have been covered in a variety of publications &lt;a href=&quot;https://harpers.org/blog/2017/09/pivot-to-digital/&quot;&gt;including on Browsings&lt;/a&gt;, a blog published by &lt;em&gt;Harper’s Magazine&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Today, Tryniski’s website is messy and, if you lack patience, unmanageable. But if you know what you’re looking for, and how to look for it, &lt;a href=&quot;http://fultonhistory.com/My%20Old%20Photos/Historical%20Newspapers%20United%20States%20and%20Canada/index.html&quot;&gt;you’ll find&lt;/a&gt; scanned, retouched, searchable newspapers from all over New York State, Minnesota, Kentucky, Washington, and Pennsylvania, among many others. Some collections span the lifetime of a newspaper, while others are partial. The pages are organized into folders labeled by location and year. Fulton gets a more complete treatment than any other city; Tryniski maintains archives of such things as company photos from old Fulton factories like the American Woolen Mill and Nestle, a catalog of Fulton High School yearbooks, and maps of Fulton dating back to the early 1900s.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ICYMI: &lt;a href=&quot;https://www.cjr.org/united_states_project/pittsburgh-post-gazette-newsroom-racist-editorial.php&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A newsroom was told by management to run a “vile” editorial. Staffers made a bold move.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tryniski is well-known and well-liked around town. During a trip to Mimi’s, the diner that serves as his dining room, an elderly veteran with an earring dangling from one ear approaches Tryniski as we walk in; he’s been keeping old photos in his car for Tryniski to upload to his website. The waitress is friendly, and they engage in a fast-moving, Gilmore Girls style banter, teasing one another with sarcastic quips laced with mutual affection. In the corner, near the front door, wire newspaper racks display a couple remaining copies of that weekend’s edition of &lt;em&gt;The Valley News.&lt;/em&gt; The front-page story is about the opening of a discount supermarket.&lt;/p&gt;
&lt;p&gt;Tryniski is committed to keeping his archives free for good reason. The terminal threat to the financial health of print newspapers has been brutal, and as these outlets continue to waste away (and as libraries, which often house newspaper archives, struggle to maintain funding), entire repositories of the history of communities like Fulton vanish with them. These threats have spread even to outlets that were born on the internet; owners of websites like DNAinfo and Gawker have at various times threatened to disappear entire archives that have no print counterpart because they’re not profitable enough.&lt;/p&gt;
&lt;p&gt;Fulton is ripe with imagery that has become emblematic of the post-industrial collapse reporters from the coasts have spent the last two years salivating over. At an intersection near where the highway dumps into the city’s main artery sits the decaying skeleton of the old Nestle factory, where Tryniski’s mother, Pat, once worked; the Swiss company arrived in town in 1899, and more than a century later, in 2003, joined the slow procession of factory deaths (the woolen mill, the gun factory, and then the paper factory, too) that have in many ways defined the modern landscape of the town, and others like it.&lt;/p&gt;
&lt;div id=&quot;attachment_72154&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;34&quot;&gt;&lt;img class=&quot;wp-image-72154 size-full&quot; src=&quot;https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1342.jpg&quot; alt=&quot;&quot; width=&quot;1300&quot; height=&quot;867&quot; srcset=&quot;https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1342.jpg 1300w, https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1342-800x534.jpg 800w&quot; sizes=&quot;(max-width: 1300px) 100vw, 1300px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Tryniski hauls boxes of freshly scanned microfilm to a UPS store in Fulton, New York. Photo by Alexandria Neason&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There isn’t much to see around Fulton these days; after a stop at the UPS store to return a few boxes of freshly scanned microfilm, Tryniski shows me around. Big, beautiful, New England-style houses and old churches line some stretches of road, including Tryniski’s handsome green-and-white-paneled home, which he purchased after high school graduation, when such feats were possible. (He now lives in the apartment over the garage out back, renting the house to a tenant.) But more often, Fulton homes are modest, crowded together, and some display yards littered with toys. Stretches of generic retail malls, fast-food restaurants, and churches fill the town’s small retail corridor. On the outskirts of town is the stunning Lake Neatahwanta, a would-be centerpiece of the community. But its best days are long past. Covered in a layer of toxic blue-green algae and an overflow of dangerous bacteria, the lake has been unsafe for swimming &lt;a href=&quot;http://www.newyorkupstate.com/news/2017/08/lake_neatahwanta_blue_green_algae_upstate_new_york_toxic_algae.html&quot;&gt;for almost 30 years&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s towns like this whose histories, written into hyperlocal newspapers, are in need of preservation, says Tryniski. During the course of sifting through the archives of the &lt;em&gt;Fulton Patriot&lt;/em&gt;, he discovered that his father’s family had changed the spelling and pronunciation of their last name when they immigrated from Poland. He feels certain he could never have learned this family history were it not for the old volumes of back issues stored in the city’s small library. His affinity for local newspapers is rooted in this kind of detail. He doesn’t remember much investigative reporting ever appearing in Fulton newspapers as a kid; but nearly everyone worked at one of the town’s several factories and mills, and any probe into misconduct might have put jobs on the line, he says. Today, jobs and newspapers are scarce in Fulton.&lt;/p&gt;
&lt;p&gt;Like the president, whom he voted for, Tryniski is a Republican and gets his news mainly from Fox. And he is suspicious of the objectivity many national outlets tout. But it’s not because he doesn’t trust journalists. It’s because he sees no issue with a partisan press. In the past, he says, newspapers didn’t try so hard to pretend they didn’t have a position. The hysterical treatment of Trump is, in his eyes, unprecedented, if not a little comical.&lt;/p&gt;
&lt;p&gt;“If you look back at the old newspapers, going way back, every publisher has a slant one way or the other as to how they report stories,” says Tryniski. “It’s not different today. Fox slants one way. The other guys slant this way. It’s always been that way. Nothing’s really changed.” For nearly 20 years, he says, he’s spent hours every day looking through newspaper archives that prove it.&lt;/p&gt;
&lt;p&gt;Tryniski is a creature of habit, and he relishes partisan debate. Every Friday night, he and his friend Bill meet at the local tavern for beers. Bill is a staunch, Fox-hating liberal, and the pair often argue about the day’s political news. This tension, Tryniski says, is healthy and fits squarely within the American journalistic tradition, whose origins were unselfconsciously partisan.&lt;/p&gt;
&lt;p&gt;“He is just the opposite of me. When he gets off on his rant about Fox or something, I say, &lt;em&gt;Bill, take the time once in awhile, just listen to Fox. That way you can say, ‘I hear where they’re coming from.’&lt;/em&gt; But he won’t even turn Fox on,” says Tryniski with a smirk. “How can you make these comments about it unless you understand where they’re coming from? I watch MSNBC and CNN and also [read] Reuters. But Fox is where I start.”&lt;/p&gt;
&lt;p&gt;“There’s no such thing as being objective. You got a slant and you’re going to portray that slant some ways in some of your thoughts,” he says plainly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ICYMI: &lt;a href=&quot;https://www.cjr.org/the_media_today/james-risen-new-york-times-press-freedom.php&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;em&gt;The New York Times&lt;/em&gt; begins 2018 on a sour note&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And yet Tryniski is no “fake news” evangelist. I cringe when he names Bill O’Reilly as one of his favorite commentators, and sigh when he concedes, without a fight, that O’Reilly’s removal for allegations of serial sexual harassment was the right move. Tryniski carries what has become a typical skepticism of the government on both the left and the right; believing anything politicians say, from either party, including Trump, is an increasingly difficult task, he says. And despite his condemnation of journalists’ insistence on neutrality, he says he relies on them to tell him the truth. Or their truth, anyway.&lt;/p&gt;
&lt;p&gt;Tryniski sees no disconnect between his support of the president, who openly attacks the press, and his own mission to preserve newspapers. I press Tryniski to interrogate his reliance on the media with his fondness for a president who has spent much of his administration thus far antagonizing, obstructing, and threatening it. He quickly dismisses this dissonance.&lt;/p&gt;
&lt;div id=&quot;attachment_72153&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;size-full wp-image-72153&quot; src=&quot;https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1337.jpg&quot; alt=&quot;&quot; width=&quot;1300&quot; height=&quot;867&quot; srcset=&quot;https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1337.jpg 1300w, https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1337-800x534.jpg 800w&quot; sizes=&quot;(max-width: 1300px) 100vw, 1300px&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Photo by Alexandria Neason&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;“Muscling of the free press will never happen. No matter what [Trump says],” Tryniski insists. He believes firmly that things aren’t really so bad, and that any talk of weakening this country’s commitment to a free press is just that—talk. I push him, mostly because I want to believe him. He invokes the Supreme Court, confident that, should Trump make any legislative move to truly threaten the press, the Court would shut it down and “it will [go] back to the way it should be,” he says.&lt;/p&gt;
&lt;p&gt;Journalists today take pride in the press for its ability to keep politicians and others honest. Tryniski had a different vision of journalism when he was growing up; newspapers served mostly as community yearbooks. Tryniski’s position as a savior for hyperlocal journalism—spending his life preserving its history—is a title he never asked for, a lucky side effect.&lt;/p&gt;
&lt;p&gt;When we get back to his house, Tryniski leads me to his two-door garage. Inside, a gorgeous vintage Corvette he restored, got bored with, and, years later, restored all over again, rests. He has no children, and was married once, but says it wasn’t for him. This—his preoccupations, and his ability to define, abandon, and rescue them again—keep him energized. He used to submit the photographs of Fulton he collects for publication to the &lt;em&gt;Fulton Patriot&lt;/em&gt;, when it still existed, and sometimes photoshopped himself into them (the mischief in Tryniski’s eye as he tells me this suggests it was more fun for him than it was for the staff of the paper). He brews his own hard apple cider, fermenting it in big barrels for up to a year. He fills my water bottle with the pungent stuff, and warns against drinking and driving. He seems surprised to learn that I can’t bring the bottle on the plane with me—he hasn’t flown in years, preferring his small Upstate haven to the rest of the world.&lt;/p&gt;
&lt;p&gt;Tryniski’s syrupy sermons about his town’s peak years do not lack in sentimentality, but this wistfulness adds to, rather than detracts from, his practical mission to digitize newspapers and make them free for all. His affinity for routines makes him well-suited for archival work. The newspapers he spends his time scanning and retouching were alive and important once, and now many of them are dead. That is reason enough to preserve them, aside from any concerns of what might become of the rest of the floundering industry.&lt;/p&gt;
&lt;p&gt;Tryniski waves to me from the steps of his deck as I load my backpack into a rental car in the driveway below, headed back to the city. But he doesn’t wait for me to drive away. Hands in his pockets, he turns back toward his living room office, ready to get back to work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ICYMI: &lt;a href=&quot;https://www.cjr.org/local_news/kycir-popes-long-con.php&quot;&gt;Subject of news outlet’s investigation commits suicide&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;
&lt;div id=&quot;post-survey-box&quot; class=&quot;hidden-print&quot;&gt;&lt;em&gt;Has America ever needed a media watchdog more than now? Help us by &lt;a href=&quot;https://ssl.palmcoastd.com/18801/apps/MEMBER1?ikey=5**M02&quot; onclick=&quot;ga('send', 'event', 'MemberSignUp', 'ArticleBoxLink', '');&quot; target=&quot;_blank&quot;&gt;joining CJR today&lt;/a&gt;.&lt;/em&gt;&lt;/div&gt;
&lt;/center&gt;
&lt;small class=&quot;bio-overline&quot;&gt;&lt;strong&gt;Alexandria Neason is CJR's Staff Writer and Senior Delacorte Fellow. Previously, she was a reporter at &lt;em&gt;The Village Voice&lt;/em&gt; and covered education for the Teacher Project, a partnership between Columbia Journalism School and Slate. A team she worked on won the 2016 Education Writers Association award for news features. Follow her on Twitter &lt;a href=&quot;https://twitter.com/alexandrianeas&quot;&gt;@alexandrianeas&lt;/a&gt;.&lt;/strong&gt;&lt;/small&gt;</description>
<pubDate>Mon, 30 Jul 2018 02:18:55 +0000</pubDate>
<dc:creator>dzdt</dc:creator>
<og:title>How Tom Tryniski digitized nearly 50 million pages of newspapers in his living room</og:title>
<og:type>article</og:type>
<og:url>https://www.cjr.org/the_profile/tom-tryniski-fultonhistory.php</og:url>
<og:image>https://cdn.cjr.org/wp-content/uploads/2018/02/MG_1435-800x419.jpg</og:image>
<og:description>&lt;p&gt;Tom Tryniski does not lock his doors. He spends most days sitting in his living room in Fulton, New York, 30 miles northwest of Syracuse, in front of two jumbo computer monitors, looking something like a security guard, but friendlier. He appears young for 68—skinny, with a head of white hair and an energetic demeanor. […]&lt;/p&gt;</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cjr.org/the_profile/tom-tryniski-fultonhistory.php</dc:identifier>
</item>
<item>
<title>Signaling in tech is some fucked up shit (2016)</title>
<link>https://daiyi.co/blog/2016/11/30/Signaling-in-tech-is-some-fucked-up-shit/</link>
<guid isPermaLink="true" >https://daiyi.co/blog/2016/11/30/Signaling-in-tech-is-some-fucked-up-shit/</guid>
<description>&lt;p&gt;&lt;strong&gt;I am exactly as cool as I was before I started writing clojure.&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;I’ve had a short, short life as a programmer and I’ve spent a lot of it making websites. Back in the day (as in a couple years ago) when I told other software people I’m a web developer, I got treated like shit. I was a lower class of coder because I wasn’t “solving cool problems” because making web sites is easy. It was sad and confusing to receive unjustified hatred but I loved the internet and I thought it’s pretty neat to make things that everyone can use and I like the visual component to my projects so I’d just go secretly cry in the bathroom (cool tricked I learned in college) like an ordinary functioning adult.&lt;/p&gt;
&lt;p&gt;Somewhere along the way there was a massive rebranding so then I was doing literally the same things but now I’m a Frontend Engineer or UI Engineer. Occasionally I’d still get trashed by other coders but that’s ok, I even get to sit with the other software folks sometimes!&lt;/p&gt;
&lt;p&gt;I found web and design communities where people do good web things and encourage each other to be better. It’s cool. Love is out there.&lt;/p&gt;
&lt;p&gt;A month or two ago I started picking up clojure. I don’t know why other people learn new programming languages, but I didn’t know anything about clojure’s rich history and I wasn’t chasing the Beauty of Lisp or the superior mindset it would teach me or hoping to harness the performance or flexibility. I had no fucking clue about any of that. I’d just started reading &lt;a href=&quot;https://mitpress.mit.edu/sicp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SICP&lt;/a&gt; because I missed computer science after bumping around in industryland, and it seemed trivial to swap scheme for clojure while doing the exercises in the book and end up being competent at a language I heard rumours that people use sometimes rather than a language I knew people used never.&lt;/p&gt;
&lt;p&gt;And I liked it! It was my first lisp and yeah coming from javascript and python I liked the quaint syntax, and the way everything is all about these couple of data structures, and thinking functionally and non-mutably (word salad word salad). More significantly, I’d just left my previous job pretty much hating programming, and clojure was reminding me about why I like programming, and that was lovely. I noticed it was possible to use clojure to make UIs via clojurescript and figured it’d be a cool way to connect these two interests and go full circle.&lt;/p&gt;
&lt;p&gt;I mentioned to some people I was learning clojure. Everyone was &lt;em&gt;super&lt;/em&gt; into this. People started telling me I was really cool. I noticed people making all these wildly positive assumptions about my programming ability despite not having read a single line of code I’ve written ever. I instantly get elevated to a respect-worthy status for free and maybe for people who are used to being treated well that’s not a big deal, but coming from being treated like trash after telling people I am a web person the contrast was super intense and really obvious. I felt like I stumbled into a mystery bizarro-verse where you get dignity by default. It was SO WEIRD.&lt;/p&gt;
&lt;p&gt;It’s fucked up that being interested in this random programming language, not even for the reasons the fangirls love it, suddenly caused everyone to start being nice to me when I’m in fact the same trash can that I’ve been all along. Coming upon the Correct Signal by accident made it all feel extra wrong and extra strange, like I killed a man and wore his skin for a suit and suddenly inherited all the achievements ever made in that body.&lt;/p&gt;
&lt;p&gt;I know railing against signaling is itself a signal that I am a naive member of society who has yet to smash out of my youthful optimism chrysalis into the apathetic reality machine. Signaling is going to be there no matter what, because human nature. All I can do is reflect in stupid amazement at this experience and compel you to treat others with respect by default. Seriously.&lt;/p&gt;
&lt;p&gt;Wowow HI HACKER NEWS \o/ my meatspace self (ordinarily in mountains on sundays) is having an unusually urban weekend at the &lt;a href=&quot;https://explorabl.es/jam/&quot;&gt;explorables jam&lt;/a&gt; when suddenly I start getting an influx of emails from (shockingly kind) randos.&lt;/p&gt;&lt;p&gt;I admit I am slightly terrified to wade into internet comments so I write to you here:&lt;/p&gt;&lt;p&gt;I had published this post out of bitterness shortly after I had decided to hard bail from San Francisco and live out of a bright orange backpack in various places doing various small projects and drifting in and out of small communities. I felt so adrift and disenchanted, if you know me then you know I have a huge amount of energy and at the time nowhere to put it to.&lt;/p&gt;&lt;p&gt;Right now I find myself back in California, but under a completely different set of circumstances and attitudes: I am doing work that I feel is meaningful on a supportive and gentle team, I live in a wonderful house of interesting and rad roommates, I see my family often, and yes I feel the ambient pressure of a young american professional, yes sometimes it is rough and I lose sight of what is good, but overall I am satisfied with my life trajectory and have found my niche in the world. It makes me so sad that my most relatable content is the things I have posted out of bitterness two years ago from a past life that I no longer empathise or identify with. But perhaps it will comfort you to know that things can get better! that there are wonderful communities out there, perhaps difficult to find, but they exist. Find these people, surround yourself with them, and lift others up with you when you have the bandwidth. I know that happily ever after epilogues ruin the story but this is a story arc that I want to trash because sometimes when you are in the depths of cynicism it feeds on itself and it is helpful to remember that things are getting better all the time, whatever you are in you can pull yourself out and one day you too can be jammin with fun weirdos into the sunset \o/&lt;/p&gt;&lt;p&gt;(if you want to interact with me your best bet is twitter &lt;a href=&quot;https://twitter.com/daiyitastic&quot;&gt;@daiyitastic&lt;/a&gt; or email. please be kind.)&lt;/p&gt;
</description>
<pubDate>Sun, 29 Jul 2018 20:51:12 +0000</pubDate>
<dc:creator>luu</dc:creator>
<og:url>http://daiyi.co/blog/2016/11/30/Signaling-in-tech-is-some-fucked-up-shit/index.html</og:url>
<og:title>signaling in tech is some fucked up shit</og:title>
<og:description>I am exactly as cool as I was before I started writing clojure.</og:description>
<og:image>http://daiyi.co/blog/images/daiyi_ny.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://daiyi.co/blog/2016/11/30/Signaling-in-tech-is-some-fucked-up-shit/</dc:identifier>
</item>
<item>
<title>Ask HN: How to pursue acquisition?</title>
<link>https://news.ycombinator.com/item?id=17639768</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=17639768</guid>
<description>&lt;tr readability=&quot;0.55737704918033&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9.7169069462647&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;6.6251638269987&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;17639768&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=17639768&quot; class=&quot;storylink&quot;&gt;Ask HN: How to pursue acquisition?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.70588235294118&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_17639768&quot;&gt;219 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=throwaway334455&quot; class=&quot;hnuser&quot;&gt;throwaway334455&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=17639768&quot;&gt;1 day ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_17639768&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=17639768&amp;amp;goto=item%3Fid%3D17639768&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20How%20to%20pursue%20acquisition%3F&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20How%20to%20pursue%20acquisition%3F&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=17639768&amp;amp;auth=efb1649ef7243c5283960d4a4de811adf1d5dc74&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=17639768&quot;&gt;67 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.5&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;10&quot;&gt;I run a one-person company in the cloud / ops space and over the past year have gone from $0 to $200k in annual recurring revenue. I have not taken any funding. The major cloud providers (aws, google, azure) are starting to expand to my product space, however, and I'm increasing concerned with my long-term prospects.
&lt;p&gt;I think it might make sense to pursue acquisition/aqui-hire, while my product and expertise can still add value to these cloud providers. I would really appreciate advice from the HN community on how to achieve the best possible outcome, including how to proactively pursue acquisition/aqui-hire at a large company. Thanks!&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Sun, 29 Jul 2018 19:14:56 +0000</pubDate>
<dc:creator>throwaway334455</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=17639768</dc:identifier>
</item>
<item>
<title>The Blockchain Bubble Will Pop, What Next?</title>
<link>http://approximatelycorrect.com/2018/06/22/the-blockchain-bubble-will-pop-what-next/</link>
<guid isPermaLink="true" >http://approximatelycorrect.com/2018/06/22/the-blockchain-bubble-will-pop-what-next/</guid>
<description>&lt;p&gt;Last week, I flew from London to Tel Aviv. The man sitting to my right was a road warrior, just this side of a late-night bender in London. He was rocking an ostentatious pair of headphones and a pair of pants ripped wide apart at both knees. Perhaps a D.J.? At some point, circumstances emerged for us to commiserate over the experience of flying on Easyjet (not the easiest). Soon after, we stumbled through the obligatory airplane smalltalk: Where are you going? What do you do?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Turns out I was flying next to the CEO of an AI+Blockchain startup.&lt;/em&gt;&lt;/p&gt;
&lt;img class=&quot;wp-image-762 size-full&quot; src=&quot;http://approximatelycorrect.com/wp-content/uploads/2018/06/590x350xbitcoin-ai.jpg.pagespeed.ic.mlbtIiPUeV.jpg&quot; alt=&quot;&quot; width=&quot;590&quot; height=&quot;350&quot; srcset=&quot;http://approximatelycorrect.com/wp-content/uploads/2018/06/bitcoin-ai.jpg 590w, http://approximatelycorrect.com/wp-content/uploads/2018/06/bitcoin-ai-300x178.jpg 300w&quot; sizes=&quot;(max-width: 590px) 85vw, 590px&quot;/&gt;This image ran in an article in the Express discussing conspiracy theories suggesting that cryptocurrencies were invented by an advanced artificial intelligence.
&lt;p&gt;It’s always a bit surreal when I learn of entrepreneurs combining AI with blockchain technology. For the past few years, whenever I found my myself bored among Silicon Valley socialites, this was my go-to satirical startup. What do you do? Startup CEO. What does your startup do? Deep learning on the blockchain… in The Cloud. &lt;em&gt;Whoa.&lt;/em&gt;&lt;span id=&quot;more-759&quot;/&gt;It was the poorest-conceived, most transparently buzzy nonsense I could think of. The formula is simple. People are excited about A. People are excited about B. What do you do? A + B. &lt;em&gt;Done&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I wish I could have extended the benefit of the doubt. Perhaps he was a comedian? I was due to be on the receiving end of this joke. However, over the past year, &lt;a href=&quot;https://www.inc.com/wanda-thibodeaux/ai-is-awesome-blockchain-is-a-powerhouse-but-heres-what-combining-them-could-do.html&quot;&gt;buzz about AI + Blockchain startups has become commonplace&lt;/a&gt;. This buzz comes both from predictably unreliable sources like &lt;a href=&quot;https://futurism.com/this-ai-blockchain-could-be-the-most-disruptive-tech-of-the-year/&quot;&gt;Futurism, which pronounced AI Blockchain likely to be the most disruptive technology of the year.&lt;/a&gt; It also comes from more respected sources like &lt;a href=&quot;https://techcrunch.com/2018/02/28/rodolfo-rosini-zeroth-ai/&quot;&gt;TechCrunch&lt;/a&gt;, and &lt;a href=&quot;https://www.geekwire.com/2018/machine-learning-blockchain-algorithmias-danku-experiment-unfolded/&quot;&gt;GeekWire&lt;/a&gt;, which have increasingly posted ingenuous articles corroborating that “AI on the Blockchain” is an actual industry. IBM even announced a product &lt;a href=&quot;https://www.ibm.com/blogs/research/2018/05/ai-authentication-verifier/&quot;&gt;combining AI with blockchain technology to verify the identity of precious gems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my short conversation with the AI+Blockchain CEO, I tried to get a read on what his company was doing. While I am well-versed in machine learning, I don’t purport to be an authority on blockchain technology. Perhaps I was overlooking something real?&lt;/p&gt;
&lt;p&gt;Chatting between sips of stale coffee,  I collected enough data points to discover he too had no great expertise in cryptography or fintech more broadly. As the conversation went on, I gleaned the following. The company works with smart contracts. Their customers include government officials, many of whom are nominally excited about blockchain technology but lack technical literacy. And his company is making lots of money.&lt;/p&gt;
&lt;p&gt;This part was delivered with a mixture of impishness and disbelief. I imagine conversations like this must have taken place during the actual gold rush. &lt;em&gt;I don’t know what you’re doing, or how well they’re paying you, but there’s literally gold flowing in the river. How are you not getting in on this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then he explained that &lt;strong&gt;AI was the big differentiating factor&lt;/strong&gt;. Naturally, this caught my attention. In the remainder of our conversation, I tried to pry from him just what role AI was playing in their product. It seemed like the role of AI in the smart-contract was to determine whether terms in arbitrary real-world contracts had been met. When I pushed for specifics of how this could actually work, of how a supervised learning system trained on historical data, could be trusted, out-of-sample, to recognize that arbitrary conditions, perhaps not represented well in the training data had been met, with sufficient confidence to execute irreversible contracts, I got nowhere.&lt;/p&gt;
&lt;p&gt;The answers ultimately led me to believe that the CEO of a venture-funded AI-based smart contract company knew markedly less than a competent undergraduate CS student about machine learning. Optimistically, it’s possible that he was the salesman  in a 2-person (or larger) founding team. Still, the existence of venture capitalists and institutional customers susceptible to this pitch strengthened my pre-existing belief that hysteria over the blockchain is unsustainable and likely to burst in the near future.&lt;/p&gt;
&lt;p&gt;There’s a famous story about Joseph Kennedy and the stock market crash of 1929: it’s said that he recognized that it was time to exit the stock market because &lt;a href=&quot;http://archive.fortune.com/magazines/fortune/fortune_archive/1996/04/15/211503/index.htm&quot;&gt;shoeshine boys and taxi drivers started giving him stock tips&lt;/a&gt;.  While I find the classism of the telling tasteless, it may contain a nugget of truth. Bubbles are characterized by the marriage of excitement and ignorance, with markets flooded with eager but naive actors motivated by the perception of momentum.&lt;/p&gt;
&lt;p&gt;This pattern of enthusiastic ignorance repeated during the dot-com bubble, when entrepreneurs popped out of the woodwork. Many had no engineering ability. Some had learned only how to register a dot-com domain and markup a website with HTML. Before 1999, the lack of qualifications didn’t seem to faze investors eager for exposure to the emerging internet technology sector.&lt;/p&gt;
&lt;p&gt;The blockchain boom is characterized by a massive interest in cryptography-based technology — and yet too often, neither the investors specializing in the market, nor the founders of crypto-based ventures seem to possess a coherent vision, or even expertise. While I’ve suspected this for a long time, my brief contact with the AI+Blockchain world affirms that a significant portion of the blockchain boom has no legs.&lt;/p&gt;
&lt;p&gt;As with the stock market crash of 1929 and the dot-com crash of 1999, I suspect the blockchain bubble will explode. However although the dot-com crash walked back valuations and chastened investors, a mature climate of internet businesses emerged in its wake. Today, technology firms account for 7 of the 10 largest companies in the world. The market didn’t overestimate the Internet, only the current crop of entrepreneurs. The question remains open of what impacts of blockchain-based technology might emerge long after the clowns have departed.&lt;/p&gt;
&lt;h4&gt;Related Posts&lt;/h4&gt;
&lt;blockquote class=&quot;wp-embedded-content&quot; data-secret=&quot;N2VyTZU1jR&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://approximatelycorrect.com/2018/06/05/ai-ml-ai-swirling-nomenclature-slurried-thought/&quot;&gt;From AI to ML to AI: On Swirling Nomenclature &amp;amp; Slurried Thought&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;wp-embedded-content&quot; data-secret=&quot;S4DdqQh8CS&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://approximatelycorrect.com/2017/04/17/press-failure-guardian-meet-erica/&quot;&gt;Press Failure: The Guardian’s “Meet Erica”&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;wp-embedded-content&quot; data-secret=&quot;G2v5qTJbre&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://approximatelycorrect.com/2017/03/28/the-ai-misinformation-epidemic/&quot;&gt;The AI Misinformation Epidemic&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;author-info&quot;&gt;
&lt;div class=&quot;author-avatar&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://1.gravatar.com/avatar/aabea06f614d645629249fd2fc0cb366?s=42&amp;amp;d=mm&amp;amp;r=g&quot; srcset=&quot;http://1.gravatar.com/avatar/aabea06f614d645629249fd2fc0cb366?s=84&amp;amp;d=mm&amp;amp;r=g 2x&quot; class=&quot;avatar avatar-42 photo&quot; height=&quot;42&quot; width=&quot;42&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;author-description&quot;&gt;
&lt;h2 class=&quot;author-title&quot;&gt;&lt;span class=&quot;author-heading&quot;&gt;Author:&lt;/span&gt; Zachary C. Lipton&lt;/h2&gt;
&lt;p class=&quot;author-bio&quot;&gt;&lt;a href=&quot;http://zacklipton.com&quot;&gt;Zachary Chase Lipton&lt;/a&gt; is an assistant professor at Carnegie Mellon University. He is interested in both core machine learning methodology and applications to healthcare and dialogue systems. He is also a visiting scientist at Amazon AI, and has worked with Amazon Core Machine Learning, Microsoft Research Redmond, &amp;amp; Microsoft Research Bangalore. &lt;a class=&quot;author-link&quot; href=&quot;http://approximatelycorrect.com/author/zack/&quot; rel=&quot;author&quot;&gt;View all posts by Zachary C. Lipton&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 29 Jul 2018 18:43:51 +0000</pubDate>
<dc:creator>baxtr</dc:creator>
<og:url>http://approximatelycorrect.com/2018/06/22/the-blockchain-bubble-will-pop-what-next/</og:url>
<og:type>article</og:type>
<og:title>The Blockchain Bubble will Pop, What Next?</og:title>
<og:description>Last week, I flew from London to Tel Aviv. The man sitting to my right</og:description>
<og:image></og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://approximatelycorrect.com/2018/06/22/the-blockchain-bubble-will-pop-what-next/</dc:identifier>
</item>
<item>
<title>How an Ex-Cop Rigged McDonald’s Monopoly Game and Stole Millions</title>
<link>https://www.thedailybeast.com/how-an-ex-cop-rigged-mcdonalds-monopoly-game-and-stole-millions?via=twitter_page</link>
<guid isPermaLink="true" >https://www.thedailybeast.com/how-an-ex-cop-rigged-mcdonalds-monopoly-game-and-stole-millions?via=twitter_page</guid>
<description>&lt;p&gt;On August 3, 2001, a McDonald’s film crew arrived in the bustling beach town of Westerly, Rhode Island. They carried their cameras and a giant cashier’s check to a row of townhouses, and knocked on the door of Michael Hoover. The 56-year-old bachelor had called a McDonald’s hotline to say he’d won their Monopoly competition. Since 1987, McDonald’s customers had feverishly collected Monopoly game pieces attached to drink cups, french fry packets and advertising inserts in magazines. By completing groups of properties like Baltic and Mediterranean Avenues, players won cash or a Sega Game Gear, while “Instant Win” game pieces scored a free Filet-O-Fish or a Jamaican vacation. But Hoover, a casino pit boss who had recently filed for bankruptcy, claimed he’d won the grand prize–$1 million dollars.&lt;/p&gt;
&lt;p&gt;Like winning the Powerball, the odds of Hoover’s win were 1 in 250 million. There were two ways to win the Monopoly grand prize: find the “Instant Win” game piece like Hoover, or match Park Place with the elusive Boardwalk to choose between a heavily-taxed lump sum or $50,000 checks every year for 20 years. Just like the Monopoly board game, which was invented as a warning about the destructive nature of greed, players traded game pieces to win, or outbid each other on eBay. Armed robbers even held up restaurants demanding Monopoly tickets. “Don’t go to jail! Go to McDonald’s and play Monopoly for real!” cried Rich Uncle Pennybags, the game’s mustachioed mascot, on TV commercials that sent customers flocking to buy more food. Monopoly quickly became the company’s most lucrative marketing device since the Happy Meal.&lt;/p&gt;
&lt;p&gt;Inside Hoover’s home, Amy Murray, a loyal McDonald’s spokesperson, encouraged him to tell the camera about the luckiest moment of his life. Nervously clutching his massive check, Hoover said he’d fallen asleep on the beach. When he bent over to wash off the sand, his People magazine fell into the sea. He bought another copy from a grocery store, he said, and inside was an advertising insert with the “Instant Win” game piece. The camera crew listened patiently to his rambling story, silently recognizing the inconsequential details found in stories told by liars. They suspected that Hoover was not a lucky winner, but part of a major criminal conspiracy to defraud the fast food chain of millions of dollars. The two men behind the camera were not from McDonald’s. They were undercover agents from the FBI.&lt;/p&gt;
&lt;p&gt;This was a McSting.&lt;/p&gt;
&lt;p&gt;At the FBI’s Jacksonville Field Office in Florida, Special Agent Richard Dent added the Hoover videotape to his growing pile of evidence. Sandy-haired and highly-organized, Dent was a 13-year veteran of the Bureau, who spent his days investigating public corruption and bank fraud. But in the last 12 months his desk had filled with fast food paraphernalia. Leaflets for “Pick Your Prize Monopoly” and “Who Wants to Be a Millionaire?” described McDonald’s games played in 14 countries. He read small print that revealed how the odds were stacked against the customer: McDonald’s makes one piece from each set of properties extremely rare, so while thousands have three of the four railroads, the odds of pulling the Short Line Railroad—and winning a PT Cruiser—were 1 in 150 million.&lt;/p&gt;

&lt;p&gt;Dent’s investigation had started in 2000, when a mysterious informant called the FBI and claimed that McDonald’s games had been rigged by an insider known as “Uncle Jerry.” The person revealed that “winners” paid Uncle Jerry for stolen game pieces in various ways. The $1 million winners, for example, passed the first $50,000 installment to Uncle Jerry in cash. Sometimes Uncle Jerry would demand cash up front, requiring winners to mortgage their homes to come up with the money. According to the informant, members of one close-knit family in Jacksonville had claimed three $1 million dollar prizes and a Dodge Viper.&lt;/p&gt;

&lt;p&gt;When Dent alerted the McDonald’s headquarters in Oak Brook, Illinois, executives were deeply concerned. The company’s top lawyers pledged to help the FBI, and faxed Dent a list of past winners. They explained that their game pieces were produced by a Los Angeles company, Simon Marketing, and printed by Dittler Brothers in Oakwood, Georgia, a firm trusted with printing U.S. mail stamps and lotto scratch-offs. The person in charge of the game pieces was Simon’s director of security, Jerry Jacobson.&lt;/p&gt;
&lt;p&gt;Dent thought he had found his man. But after installing a wiretap on Jacobson’s phone, he realized that his tip had led to a super-sized conspiracy. Jacobson was the head of a sprawling network of mobsters, psychics, strip club owners, convicts, drug traffickers, and even a family of Mormons, who had falsely claimed more than $24 million in cash and prizes. But who among them had betrayed Jacobson, and why? Dent knew agents had to move carefully. If they apprehended a “winner” too soon, he or she might alert other members of the conspiracy who would destroy evidence, or flee. With the scheme still in full-swing, the FBI needed to team up with McDonald’s to catch Uncle Jerry and his crew red-handed.&lt;/p&gt;


&lt;p&gt;JEROME PAUL JACOBSON always dreamed of becoming a police officer. He was born in 1943, in Youngstown, Ohio, and moved to Miami, Florida, as a teenager. Chronic allergies and a series of unlucky injuries always seemed to ruin his ambitions, like when he applied for the Marines, but was discharged from basic training with high arches. In 1976 he was sworn in to Florida’s Hollywood Police Department, but just a year later he injured his wrist in an altercation. During a prolonged medical leave, in 1980, Jacobson collapsed with a severe paralysis in his arms, legs, eyes and respiratory system. Doctors diagnosed a rare neurological disorder, and Jacobson’s police officer wife, Marsha, took a leave of absence to care for him. “I became his private nurse, I bathed him… massaged his muscles, fed him,” she recalled. With Jacobson unfit to return to work, the city terminated him. By 1981 the couple had moved to Atlanta, Georgia, where Jacobson recovered enough to work as a mechanic, building alternators for cars he couldn’t afford.&lt;/p&gt;
&lt;p&gt;Luckily, Marsha was offered a job as a security auditor for the accounting firm Arthur Young, and was assigned to one of their clients, Dittler Brothers. In 1981, she recommended her husband for a job there too, but the couple constantly argued at work, and by 1983 they had divorced. Finding his feet in private security, Jacobson started to climb the ranks until he oversaw all production for Dittler’s client, Simon Marketing, and their $500 million McDonald’s account.&lt;/p&gt;
&lt;p&gt;When Jacobson marched through the printing works, with his slicked-back hair and a little paunch that overhung his belt, he looked every part the ex-cop. He was quick with a joke, but commanded respect for his hard work and obsession with loss-prevention. “He inspected workers’ shoes to check they weren’t stealing McDonald’s game pieces,” one colleague told me, while a truck driver who transported game pieces recalled: “I couldn’t even go to the bathroom without someone going with me.” Impressed by Jacobson’s attentioned to detail and police credentials, in 1988 Simon Marketing poached him.&lt;/p&gt;
&lt;p&gt;“It was my responsibility to keep the integrity of the game and get those winners to the public,” Jacobson would later tell investigators.&lt;/p&gt;
&lt;div class=&quot;InlineNewsletter&quot;&gt;
&lt;div class=&quot;InlineNewsletter__main&quot; readability=&quot;30.323325635104&quot;&gt;
&lt;form class=&quot;InlineNewsletter__form&quot; readability=&quot;-0.90491803278689&quot;&gt;
&lt;p&gt;Get The Beast In Your Inbox!&lt;/p&gt;

&lt;div class=&quot;InlineNewsletter__content&quot; readability=&quot;28.065789473684&quot;&gt;
&lt;div class=&quot;InlineNewsletter__list&quot;&gt;
&lt;div class=&quot;InlineNewsletterItem InlineNewsletterItem--checked&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;InlineNewsletterItem__title-and-description&quot; readability=&quot;7&quot;&gt;
&lt;h4 class=&quot;InlineNewsletterItem__title&quot;&gt;Daily Digest&lt;/h4&gt;
&lt;p class=&quot;InlineNewsletterItem__description&quot;&gt;Start and finish your day with the top stories from The Daily Beast.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;InlineNewsletterItem InlineNewsletterItem--checked&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;InlineNewsletterItem__title-and-description&quot; readability=&quot;8&quot;&gt;
&lt;h4 class=&quot;InlineNewsletterItem__title&quot;&gt;Cheat Sheet&lt;/h4&gt;
&lt;p class=&quot;InlineNewsletterItem__description&quot;&gt;A speedy, smart summary of all the news you need to know (and nothing you don't).&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;&lt;button class=&quot;Button InlineNewsletter__submit-button&quot; type=&quot;submit&quot;&gt;Subscribe&lt;/button&gt;&lt;/p&gt;


&lt;/form&gt;
&lt;div class=&quot;InlineNewsletter__final&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Thank You!&lt;/p&gt;
&lt;p&gt;You are now subscribed to the Daily Digest and Cheat Sheet. We will not share your email with anyone for any reason.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Before each bi-annual game, Jacobson arrived at the drab Dittler Brothers’ office at 5 a.m to observe their Omega III supercomputer making the McDonald’s prize draw. He watched the printing presses that roared for 24 hours a day for three months, using 100 railroad cars of paper to print half a billion game pieces. Laid end-to-end, the paper tickets would stretch from New York to Sydney–nearly two tickets for every American. Jacobson observed technicians applying the “INSTANT WINNER!” stamp to blank game pieces, and pioneered random watermarks that deterred counterfeiters. He locked the winning pieces in a vault behind coded keypads and dual-entry combination locks. It was Jacobson who personally scissored out the high-value game pieces and slipped them into envelopes, before sealing each corner with a tamper-proof metallic sticker. In a secret vest, of his invention, Jacobson transported the winning pieces to McDonald’s packaging factories across the country.&lt;/p&gt;
&lt;p&gt;Everything he did was overseen by an independent auditor. On flights she sat in coach, while Jacobson flew first class, where he tried to impress other passengers by flashing his old police badge. On one flight, Jacobson and another security manager sent an air steward back to show the accountant the empty liquor bottles they’d guzzled. When they arrived at the factory, Jacobson would summon a forklift of french fry containers, hide the winning game piece, and send it into the wild. Then he liked to hit a Ruth’s Chris steakhouse and order “everything”–more than he could eat, and charge it to his expense account.&lt;/p&gt;
&lt;p&gt;The 1980s was America’s “decade of greed,” and it was Jacobson’s job to create instant millionaires. Playing God was intoxicating, as was holding a stranger’s fate in the palm of his hands. Female employees among the 30 staff he controlled complained that he criticized how they dressed, and he often wrote up workers for mistakes. Jacobson’s $70,000 salary was six times his police officer’s pay, and he was obsessed with achieving the gold medallion airline status, sometimes flying to factories via several cities to accrue airline points, to the irritation of those who had to shadow him.&lt;/p&gt;
&lt;p&gt;Jacobson was also deep into his own get-rich-quick scheme. He boasted to colleagues that he was waiting to collect his “riches” from a mysterious  “investment.” All he needed was to find 10 more people to sign up and invest. “A psychic had told him to invest money and he would be richly rewarded,” one former colleague told me. But they believed he’d invested in a Ponzi scheme. One colleague told me Jacobson swore by the advice of a local fortune teller, and often excused himself from work, saying: “I think she needs to tell me something.”&lt;/p&gt;
&lt;div class=&quot;PullQuote&quot; readability=&quot;10&quot;&gt;


&lt;p&gt;“In a secret vest, of his invention, Jacobson transported the winning pieces to McDonald’s packaging factories across the country.”&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This was the man entrusted with creating a theft-proof system for one of America’s largest corporations. It was a thrill to protect the Monopoly promotion, and only a natural part of his job to consider the system’s fallibilities. But soon the temptation to steal had become irresistible.&lt;/p&gt;
&lt;p&gt;One day in 1989, at a family gathering in Miami, Jacobson slipped his step-brother, Marvin Braun, a game piece worth $25,000. “I don’t know if I just wanted to show him I could do something, or bragging,” Jacobson later admitted, but he just needed “to see if I could do it.” When his local butcher in Atlanta heard that Jacobson was in charge of the McDonald’s Monopoly prizes, he said he’d like to win a prize. Jacobson boasted that he could make it happen, but it would look too suspicious because they were friends and neighbors. The butcher offered to find a distant friend to claim a $10,000 prize, and gave Jacobson $2,000 for the stolen ticket. It was easy money.&lt;/p&gt;
&lt;p&gt;McDonald’s was already overwhelmed with employee theft. In Sheboygan, Wisconsin, a 17-year-old restaurant employee was arrested for stealing 3,000 Monopoly game pieces. In response, McDonald’s started handing out game pieces from a secure roll at the counter. As a result, Jacobson was removed from the “seeding” process for several years. But in 1995, as McDonald’s ramped up the scale of the promotion, game pieces were ‘blown’ onto soft drink cups and hash brown wrappers. That year, Ronald McDonald and Monopoly’s Rich Uncle Pennybags rang the opening bell on Wall Street, and Jacobson found himself back in charge of distributing the game pieces.&lt;/p&gt;

&lt;p&gt;During that 1995 prize draw, something happened that would change the game. According to Jacobson, when the computerized prize draw selected a factory location in Canada, Simon Marketing executives re-ran the program until it chose an area in the USA. Jacobson claimed he was ordered to ensure that no high-level prizes ever reached the Great White North. “I knew what we were doing in Canada was wrong,” Jacobson recalled. “Sooner or later somebody was going to be asking questions about why there were no winners in Canada.” Believing the game was rigged, he decided to cash in too.&lt;/p&gt;
&lt;p&gt;Not long afterward, Jacobson opened a package sent to him by mistake from a supplier in Hong Kong. Inside he found a set of the anti-tamper seals for the game piece envelopes—the only thing he needed to steal game pieces en route to the factory. “I would go into the men’s room of the airport,” he later admitted, the only place the female auditor couldn’t follow him. “I would go into a stall. I would take the seal off.” Then he’d pour the winning game pieces into his hand, replace them with “commons,” and re-seal the envelope. First, he stole a $1 million “Instant Win” game piece and locked it in a safety deposit box. Then he stole documents that he claimed proved the Canada conspiracy. “I thought I would need that to protect myself,” Jacobson recalled. If his employer ever fired him, he had a “get out of jail free” card. But when he stole another $1 million game piece, Jacobson did something awesome.&lt;/p&gt;
&lt;div class=&quot;PullQuote&quot; readability=&quot;8&quot;&gt;


&lt;p&gt;“Sooner or later somebody was going to be asking questions about why there were no winners in Canada.”&lt;/p&gt;
&lt;p&gt;— Jerome Jacobson&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;On November 12, 1995, a donations clerk at the St. Jude Children’s Research Hospital in Tennessee ripped open the morning’s mail, and discovered a brightly colored card. At first, Tammie Murphy assumed it was junk mail, until she noticed the tiny Monopoly game piece inside. McDonald’s officials descended on the hospital and examined the game piece under a jeweler’s eyepiece. Ronald McDonald himself attended a press conference, where the hospital was announced the $1 million winner. Despite &lt;a class=&quot;LinkWrapper LinkWrapper--external&quot; href=&quot;https://www.nytimes.com/1995/12/08/us/donor-turns-fast-food-into-big-bucks-for-hospital.html&quot;&gt;an investigation&lt;/a&gt;, the New York Times could not uncover the identity of the generous donor.&lt;/p&gt;
&lt;p&gt;Back in Atlanta, Jacobson’s butcher was ready for another win. This time, he proposed that he’d travel with his sister to Maryland where she would “find” the lucky game piece on a box of fries. Jacobson gave the butcher a stolen game piece worth $200,000 in exchange for $45,000 of the winnings. “I figured I could trust him because he paid me the first time,” Jacobson recalled. But the butcher double-crossed him in Maryland and claimed the prize himself. All Jacobson got was $4,000, and a big surprise. One evening, Jacobson was watching television when he saw a commercial for the McDonald’s Monopoly game. To his complete disbelief he watched his butcher celebrating his big win. He reached for the phone.&lt;/p&gt;
&lt;p&gt;“You live here,” Jacobson protested. “You know me.”&lt;/p&gt;


&lt;p&gt;LOTTERIES AND SWEEPSTAKES have been mired in corruption since biblical times, when lots were drawn to read the will of God. But it was the Medieval Italians who first used prize drawings as a sales promotion. In 1522, a Venetian man was condemned to death after tampering with the prize draw for 1,500 golden ducats, a parcel of silk and a live wild cat. Allegations of fraud and abuse shuttered an English lottery in 1621, which funded America’s earliest colonies. In the New World, centuries of sweepstake chicanery followed, until 1890 when lotteries were banned in every state except Delaware and Louisiana. This ushered in an era of promotional “contests” in which marketers could avoid prosecution by making no purchase necessary. Today, you can enter a McDonald’s contest without buying a burger—just write in for a free ticket and take your chances.&lt;/p&gt;
&lt;p&gt;It was by chance that Jacobson met the man who would industrialize his Monopoly scam. Jacobson was sitting in Atlanta’s airport one day in 1995, when a giant gentleman folded himself into the next seat. Gennaro Colombo, 32, looked like Al Capone, and when Jacobson enquired where he was headed, Colombo unzipped a bulging purse full of $100 bills, and said: “Atlantic City.” Colombo said he was born in Sicily and raised in Brooklyn, New York, before moving to South Carolina, where he operated adult nightclubs, underground casinos and a sports betting ring. He claimed he was a member of New York’s infamous Colombo crime family.&lt;/p&gt;
&lt;p&gt;When Jacobson revealed that he worked in promotional gaming, Colombo was intrigued. He enjoyed finding new ways to cheat a system. When Charleston County, Georgia passed new laws restricting where strip clubs could be operated, Colombo opened a house of worship named The Church of Fuzzy Bunnies. “I want them to read the Bible for two hours every night, and then we’ll drink and let the girls dance,” said Colombo, who claimed that God came to him in a dream with the idea. By November of 1995, Jacobson had slipped Colombo a game piece for a brand new Dodge Viper. The Italian, who was obsessed with The Godfather and had ambitions of becoming an actor, agreed to wave a giant car key in a McDonald’s commercial. Instead of the sports car he took the money, his wife, Robin Colombo, told me. “He was a big guy. A Viper? No.”&lt;/p&gt;

&lt;p&gt;With a mop of black curly hair and a contagious laugh, Robin, 34, had become engaged to Colombo after a two-week romance. She was thrilled with the trappings of a Mafia wife: bodyguards, chauffeurs, two rottweilers and a last name that commanded fear and respect. By now, Colombo was traveling with friends from Atlanta to Boston, where they’d “win” $1 million prizes, thanks to stolen tickets from Jacobson. Soon Colombo introduced Robin to Jacobson, calling him “Uncle Jerry,” and in 1996, her father, William Fisher, received a stolen $1 million winning ticket. Fisher traveled from his home in Jacksonville, Florida to Litchfield, New Hampshire, to claim his prize, before Robin’s brother-in-law in Virginia became a millionaire too. Every winner sent a kickback in cash via the Colombos to Jacobson.&lt;/p&gt;
&lt;p&gt;In 1997, Robin introduced Colombo to her friend Gloria Brown, 37, at an Applebee’s in Jacksonville. “He asked... how much money I could come up with...in order to be eligible,” Brown recalled. A few weeks later, on the side of the I-95 freeway, Brown handed Colombo $40,000 in cash. He showed her a tiny bottle containing the $1 million game piece, dwarfed by his giant hand. “I’ll let you know the rest later,” he mumbled.&lt;/p&gt;
&lt;p&gt;Brown traveled to South Carolina to “find” her prize, because too many recent winners now lived in Jacksonville. “It was so secretive,” she recalled. Colombo and a cousin drove Brown to a McDonald’s and parked a safe distance away. They coached Brown what to tell McDonald’s staff, but doubts suddenly consumed her. “I had to just tell, you know, outright lies,” she realized. She thought about running. Do I lose it all or do I keep going? But she did the deed, and afterwards found the two Italians sweating. “They were a little nervous because it took so long,” Brown recalled. They helped her fill out the prize form, writing her name along with the cousin’s South Carolina address. To make it appear like she lived with the cousin, Brown recorded the message on his answering machine, and later told reporters a long-winded story about finding the winning ticket while cleaning out her car.&lt;/p&gt;
&lt;p&gt;Robin told me that Uncle Jerry’s money soon funded certain Colombo-run businesses, including a private members’ club in Hilton Head. She thought he was sophisticated and liked the way he dressed. In return, Jacobson sent other “opportunities” to the Colombos, Robin told me. Late one night, she was stoned and rifling through the kitchen for a snack, when she found in their freezer a mysterious plastic bag. Inside was a single gray-colored M&amp;amp;M candy, which was part of a promotional contest, she said. In 1997, the Mars candy company launched a competition to find an “imposter” M&amp;amp;M, along with a game piece that made the winner an instant millionaire. (Mars did not respond to enquiries, but records show that Cyrk, a company that produced promotional materials for Mars, merged with Simon Marketing in 1997.) Colombo suddenly appeared behind her, grabbed the bag and yelled:&lt;/p&gt;
&lt;p&gt;“Do not eat this!”&lt;/p&gt;
&lt;p&gt;Meanwhile, Jacobson was now living with a huge secret—he had not even told his new wife, Linda, what he was doing. By now he had given his step-brother, Marvin Braun, three more game pieces including one for $1 million. Braun, who owned a chain of maternity clothing stores, claimed he didn’t need the money. “I dropped tickets into Salvation Army tins,” he told me, “Jerry would give me a million dollar ticket... I would give it away… I’ve flushed million dollar tickets down toilets.” By 1998, Jacobson’s nephew, Mark Schwartz, had taken a $200,000 game piece after a meeting in Miami. “I told him what I wanted and the rest was his,” Jacobson recalled. “I wanted $45,000.” At Schwartz’s wedding that year, Jacobson was discussing the Monopoly game when a distant cousin fell into the conversation and also agreed to win a prize. Uncle Jerry’s family tree was sprouting money.&lt;/p&gt;
&lt;div class=&quot;PullQuote&quot; readability=&quot;11&quot;&gt;


&lt;p&gt;“To make it appear like she lived with the cousin, Brown recorded the message on his answering machine, and later told reporters a long-winded story about finding the winning ticket while cleaning out her car.”&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;By the end of 1998, Jacobson had become Rich Uncle Pennybags, and America was his game board. He tooled around the United States stealing almost all the big-ticket game pieces, acquiring new properties on a whim, and collecting kickbacks from other players. Now he was hanging out with powerful Italians, he dressed in sharp suits and sometimes used the name “Geraldo Constantino.” He and his wife moved into a fine, red-brick home in Lawrenceville, Georgia, where he tended to its perfect lawn. He purchased a plot of land on Lake Hartwell, a recreation lake on the Georgia border, and paid for expensive cruises, and joined a classic car club. There, he sold one member four game pieces and used the $65,000 to buy a handsome Oldsmobile. Bill LaFoy, who lived opposite Jacobson, lost count of the new cars appearing on the driveway: “I used to kid him about where the winning tickets were,” he said.&lt;/p&gt;
&lt;p&gt;After three years married to Colombo, Robin had tired of life as a mobster’s wife. Since the birth of their son, Frankie, her husband seemed to spend all his time at his gentleman’s clubs and casinos. Meanwhile, Robin felt that the Colombos had cut her off from her friends. “They were the type of people who don’t like outsiders,” she said. Lonely and bored, she began confiding in Jacobson during late night phone calls. One night she told him that Colombo was sleeping with her personal trainer. “I was upset about my husband,” she said, “and he goes, ‘Well, you could marry me.’”&lt;/p&gt;
&lt;p&gt;“No, I can’t. I’m married,” she said quickly. “I love my husband.”&lt;/p&gt;
&lt;p&gt;Robin tried to make her marriage to Colombo work. “He had done some things in Charleston that I freaked out about,” she said, “I told him I needed to get out of South Carolina.” On May 7, 1998, they drove to the Georgia state line to look for land on which to build their dream home. Colombo’s pager had been bleeping all morning, but he ignored it. Robin was behind the wheel of their Ford Explorer as they approached the entrance to the expressway. At the on-ramp, a tractor trailer blocked Robin’s view. When she swung onto the freeway, a speeding F-150 truck smashed into them, dragging their car 250 feet and into a concrete wall. Colombo crawled from the wreckage, but emergency crews had to use the Jaws of Life to cut Robin and her son free.&lt;/p&gt;
&lt;p&gt;“The policeman told me he thought I was gonna be the one to die because I was the one covered in blood,” Robin told me. But at the hospital, Colombo’s blood pressure dropped so low they wrapped his body in refrigerated blankets. “My mother-in-law ran over to me and told me she knew this was going to happen,” Robin recalled. “She had a vision in a dream the night before. That’s why she was trying to page him all day.” At his bedside, Robin shook Colombo’s giant arm, and begged him to wake up. “He was my soulmate,” Robin said. But two weeks later the doctors turned off his life support.&lt;/p&gt;


&lt;p&gt;The secret of Jacobson’s success was that he recruited his co-conspirators at random, and soon he was looking for a replacement for Colombo. Jacobson was in London with his step-brother Marvin and their wives, waiting to board a Royal Caribbean Cruise ship, when he met Don Hart and his wife. “The six of us were talking, and we found out that Mr. Hart and his wife were from the Atlanta area,” Jacobson recalled. “And they wound up changing tables to eat with us on the cruise.” Hart had sold his trucking company for a small fortune, and still had a network of contacts all over the United States. When Jacobson revealed his scam, Hart, an honest businessman, found it too good to be true. But he agreed to try it, to “see if it worked,” recalled Jacobson. In 1998, one of Hart’s accomplices redeemed a $200,000 game piece. “After that Mr. Hart told me he didn’t want to be involved in handling any game piece tickets or handling any money,” Jacobson said. Instead, he introduced Jacobson to two friends who could find the needy and the greedy.&lt;/p&gt;
&lt;p&gt;The first was Richard Couturier, who owned a chain of fried chicken joints. He was fooled into believing he was helping McDonald’s find real winners, because most people threw away their game pieces. “Mr. Jacobson said every time they ran the game and had winners, the sales were up 38 percent,” Couturier said. He mostly recruited random people he met at parties. At Mardi Gras in 1999, Couturier was riding on a float through the streets of New Orleans, tossing beads into the crowd, when he shouted to another reveler: “Would you be interested in being a McDonald’s winner!” Jacobson gave Couturier “around ten” winning pieces, including several for sports cars and two $1 million prizes. “If I bought a piece of property, I would borrow from my home equity and then Mr. Couturier would write a check to my home equity loan,” Jacobson explained.&lt;/p&gt;
&lt;p&gt;Then, at a dinner party in Atlanta, Hart introduced Jacobson to Andrew Glomb, a gregarious gambler who lived in a luxury Spanish-style home in Fort Lauderdale, Florida. Glomb spent his days partying, or walking his dog through the lime trees that bordered his property, where neighbors all knew of his checkered past. In 1983, Glomb had been convicted of shipping pure cocaine on a Pan American flight from Miami to Dallas. He’d jumped bond and escaped to Europe for 16 months, before completing his 12-year sentence. Glomb mostly gave his winning tickets to old pals from his drug trafficking days. “It was just the excitement, to have the power,” he told me. “Because I like you, I can make you a millionaire.” But Glomb’s winners introduced less salubrious characters to the scheme. In 1999, a million-dollar winner was a man who had pleaded guilty to distributing 400 pounds of cocaine in Pittsburgh, while running a numbers racket from an Italian restaurant.&lt;/p&gt;
&lt;p&gt;Glomb said his winners were all destitute: “They were on their ass...they had nothing. I mean, if you could imagine flying across country, giving somebody a million dollars, and I had to pick up the dinner check.” One day, Glomb arrived in Pennsylvania to visit his family, where his cousin picked him up at the airport. The cousin said: “I got to stop at McDonald’s because my kids wanna play this Monopoly game.”&lt;/p&gt;
&lt;p&gt;Glomb smiled, and said: “You know, don’t waste your time.”&lt;/p&gt;
&lt;p&gt;Across America, McDonald’s customers were becoming frustrated by the Monopoly game. “Are McDonald’s employees keeping game cards to themselves?” asked a concerned citizen in a letter to the Atlanta Constitution. “We’re talking money here,” said another player in North Miami, who paid for a classified advert for the game pieces he couldn’t find. Instead of sticking those game pieces to customer’s soft drink cups and french fry packets, Jacobson sent them all to Andrew Glomb, including eight $1 million winners. “He told me, ‘Don’t talk about this, don’t talk about that,’” Glomb recalled. Paranoid Jacobson now had dozens of prize winners out there, appearing in TV commercials, and arguing with their spouses about the loot. His black hair had turned gray, and he was bothering his psychics about his future. One received a $50,000 game piece in exchange for chiropractic services and fortune telling (“he did both,” Jacobson said.)  But the psychic didn’t see how Jacobson’s fate had already been sealed.&lt;/p&gt;

&lt;p&gt;Ever since her husband died, Robin Colombo felt uneasy around her in-laws. The Colombos investigated the car crash, she said, suspecting that she might have killed her husband. “My mother-in-law, Ma, she told me, ‘Do you think if we didn’t know it was an accident you’d be sitting here today?’” At her husband’s funeral, Robin said her father-in-law promised to keep the New York side of the family at bay. “In my mind I was thinking, ‘Papa, I’m really not worried about them, I’m worried about you sniping me down, because I was the driver.’” (Speaking in a thick Sicilian accent, Colombo’s mother denied the family were in the Mafia but confirmed they are related to the late Joseph Colombo, former boss of the Colombo crime family.)&lt;/p&gt;
&lt;p&gt;Robin had tried to keep up the ‘good life’ but had turned to forgery, insurance and credit card fraud. During one of her brief spells in prison, Robin felt the Colombos were “brainwashing” her own son, and said she didn’t want Frankie to grow up in the mob. She tried to cut herself off from the “the family,” which she said infuriated them. “Frankie [was] their first grandson, and, you know how Sicilians are,” she said. Robin believes it was the Colombos who told the FBI that her father, William Fisher, her cousin, and best friend Gloria Brown had all illegally won McDonald’s prizes. They wanted her in jail, she said, to avenge the death of their son.&lt;/p&gt;
&lt;p&gt;“That was their retaliation,” she added.&lt;/p&gt;
&lt;p&gt;The tip to the FBI came in March of 2000. Special Agent Dent called Amy Murray, the McDonald’s spokesperson, to say he believed that William Fisher, the $1 million winner of the 1996 “Deluxe Monopoly Game,” was a fraud. Murray was a quick-thinking Midwesterner who had risen through the ranks at McDonald’s, and was often the public face of the company during any drama. She was the “McQueen” of McDonald’s, said Joe Maggard, a disgraced Ronald McDonald actor who was convicted of making harassing phone calls while posing as the clown.&lt;/p&gt;
&lt;p&gt;Murray telephoned Fisher at his home in Jacksonville. “[Fisher] told Ms. Murray that he won the prize in Litchfield, New Hampshire, where he was living for a year,” Dent wrote in an affidavit. However, property and electricity records showed that Fisher had lived in Jacksonville all along. “I believe [Fisher] provided false and misleading information to Amy Murray,” wrote Dent. When he asked about Gloria Brown, Murray revealed that she, like Fisher, had re-routed her annual $50,000 checks to Jacksonville.&lt;/p&gt;
&lt;p&gt;Dent opened an official investigation, naming it Operation “Final Answer,” after the “Who Wants to Be a Millionaire?” McDonald’s game. The operation would involve 25 agents across the country, who tracked 20,000 phone numbers, and recorded 235 cassette tapes of telephone calls. “You work from the outside in,” explained John Hanson, a former FBI Special Agent who specializes in complex fraud schemes. “But you really want the people who devised the idea.” Hanson said the FBI would have investigated the McDonald’s scam just like any boiler room stock fraud or pyramid scheme: by gathering evidence without anyone finding out. Jacobson made this hard by recruiting co-conspirators in person, in remote locations.&lt;/p&gt;

&lt;p&gt;On April 29, 2000, Jacobson was driving through the South Carolina countryside, with the peaks of the Appalachians in his windshield. In the passenger seat was his friend Dwight Baker, a real estate developer who had sold Jacobson his lakeside plot. Baker was a well-respected member of the local Mormon church, and a devoted father-of-five who lived in a split-level house next to hayfields and farmland. He was a charismatic man with big dreams, who’d tried to build a championship golf course and a five-star resort, but couldn’t attract enough investors. The two men were equally ambitious, and they each had a wife named Linda.&lt;/p&gt;
&lt;p&gt;That spring, Baker was recovering from a terrible accident. The brakes had failed on his tractor and after rolling helplessly backwards down a hill, Baker had damaged his spinal column in a crash. On hearing of Baker’s misfortune, Jacobson arrived and offered to get him out of the house. Baker feared he would never walk again, but Jacobson was insistent. He helped his friend into the car, and they drove up into the mountains.&lt;/p&gt;
&lt;p&gt;When Baker first found out that Jacobson controlled the McDonald’s Monopoly promotion, he had mixed feelings. “Well, in 1985 we lost our home,” he explained. “Our family had five children, and...for the last several years we’d been, as a family, chasing these game pieces to... have a little hope of winning one of them.” Baker’s companies owed nearly $30,000 in back taxes, and county tax officials had started to sell parcels of his land at auction.&lt;/p&gt;
&lt;p&gt;“Let me give you hypothetical,” Jacobson said suddenly. “If I were able get a game piece, do you know someone who you trust that would cash it?”&lt;/p&gt;
&lt;p&gt;“Are you serious about this?” asked Baker.&lt;/p&gt;
&lt;p&gt;He said he’d need to think about it. But Baker soon realized a windfall would ease his financial woes. Soon, Jacobson handed him a $1 million game piece. Whoever redeemed it, he instructed, would have to say they pulled it from a hash brown bag. This time, Jacobson wanted $100,000, the biggest kickback he’d ever demanded. “He was a friend,” Jacobson recalled. “I thought I could trust him.”&lt;/p&gt;
&lt;p&gt;“George, you’re not going to believe this,” whispered Baker, leaning over a Waffle House table in Seneca, South Carolina. “But I was at breakfast with a friend of mine and he pulled off this winning game piece.” George Chandler, 30, was the owner of a successful plastic injection company, and Baker’s foster child. Chandler was a teenager when Baker took him in. “One day he showed up on our doorstep with tears in his eyes,” Baker recalled. “His momma had just thrown his clothes out in the middle of the yard because he helped his sister go to Georgia get married.”&lt;/p&gt;
&lt;p&gt;Baker showed Chandler the winning game piece in a tiny Ziplock bag, and offered to sell it to him for $100,000. Baker explained that the winner was going through a divorce and didn’t want to split his McDonald’s winnings with his wife. (Or that was his story.) Chandler could only come up with $50,000, but on June 6, 2000, Baker helped him fill out the McDonald’s claim form. They photocopied the game piece and mailed it off to the redemption center. Baker warned him four times not to participate in any promotions, but on June 26, his telephone rang.&lt;/p&gt;
&lt;p&gt;“You need to be up here at South Union McDonald’s at eleven 0’clock,” Chandler said casually. McDonald’s was presenting him with a giant check, he said. Baker was incensed. “There’s more to this than you know,” he hissed. But it was too late. When Baker arrived at the McDonald’s restaurant, two TV news crews were filming Ronald McDonald showering Chandler with confetti. That footage found its way to the FBI field office in Jacksonville.&lt;/p&gt;
&lt;p&gt;In March of 2001, the McDonald’s promotion started again, with a “Who Wants to Be a Millionaire?” promotional game. “That’s where the real greed on my part came,” Baker admitted. He asked Jacobson if he’d accept a plot of land in Edgewater Hills for a couple of game pieces. Baker gave a $1 million winner to a friend, Ronnie Hughey, and a $500,000 winner to his wife’s sister, Brenda Phenis. He gave them strict instructions on how to set up fake lives in other states, claim their prizes, and keep their mouths shut.&lt;/p&gt;

&lt;p&gt;On April 27, 2001, Dent received a call from McDonald’s, informing him that a Mr. Ronald E. Hughey, a lifelong resident of Germantown, Tennessee, had claimed the $1 million prize. When Amy Murray called Hughey’s phone, she asked him to appear in a TV commercial, but Hughey said he’d prefer to remain anonymous, because he was suffering from depression. Technical agents soon discovered that Hughey’s Tennessee telephone number was just a call forwarding device. He actually lived in Anderson, South Carolina, just miles from the home of George Chandler, the latest winner.&lt;/p&gt;
&lt;p&gt;To conceal his sister-in-law’s South Carolina address, Baker took Brenda Phenis on a road trip to North Carolina, he recalled. “She had located an apartment, had rented it, obtained a phone, a mailing address, bank account, and I think a North Carolina drivers’ license.” On May 16, 2001, Baker stood over Phenis’ shoulder as she dialed the McDonald’s hotline and claimed the $500,000 winning ticket. Phenis had agreed to pay the taxes, give Baker $90,000 and Jacobson $70,000, and keep $90,000 for herself. “She had made commitments to other people that she was going to buy them a car, build a house, and she overcommitted,” recalled Baker. Phenis also told her son about the scheme, and his wife, and her other sister.&lt;/p&gt;
&lt;p&gt;On May 30, 2001, McDonald’s notified Dent of Phenis’ $500,000 win. He checked the credit bureaus and quickly discovered that she too lived in South Carolina, in a town called Westminster. Dent found a map of the state, and pinned the addresses of Hughey, Chandler, and Phenis. He had uncovered a 25-mile golden triangle of suspicious McDonald’s winners, and at its center was the lakefront home of Jacobson.&lt;/p&gt;
&lt;p&gt;Dent requested that McDonald’s delay sending checks to Hughey and Phenis while he applied for wiretaps. “This intentional delay...proved very fruitful,” he recalled, because three weeks later everyone was panicking. On recorded calls, Jacobson told Baker that Phenis needed to insist on “something in writing” from McDonald’s so Baker could make a “legal issue” about the delay. “I’d say… ‘do we need an attorney or do I need to call the home office’” Jacobson suggested, “or do I need to call Burger King?”&lt;/p&gt;
&lt;p&gt;“That’s right,” agreed Baker. But deep down, he had a ‘gut feeling’ that they’d been caught. “I felt the eyes,” he told me.&lt;/p&gt;
&lt;p&gt;Phenis, too, was feeling the pressure. She confessed to her pastor and stopped answering Baker’s calls. He feared she was going to keep the entire check for herself. Dent listened to Baker’s tense phone calls with his wife. Baker said that if Jacobson knew that Brenda had gone rogue, he’d report the ticket stolen and say he was threatened to hand over the game pieces. Baker decided that Phenis should give him the money, otherwise he’d have to “raise his hand” himself, and have the U.S. Marshals arrest her. “I want it all,” Baker told his wife. “No if, ands, or buts about it.” He raced to Phenis’ fake apartment where the check was due to arrive. When he opened the door he found the light on and the air conditioner humming, but no one was in. On the floor he found a tear-off strip from a FedEx envelope.&lt;/p&gt;
&lt;p&gt;Baker called his wife, and gasped: “Brenda’s running with the money.”&lt;/p&gt;


&lt;p&gt;Time was now ticking for Dent and the FBI. On July 11, they would launch their second and last promotional game of 2001. Knowing that the game was compromised, Golden Arches executives considered canceling the whole thing. But Dent insisted he needed one more game to gather enough evidence. Jack Greenberg, the McDonald’s CEO, had a big decision to make. To run the game knowing it was corrupt could invite lawsuits and damage McDonald’s reputation. His company had endured a rough year, with a scare over mad cow disease diminishing European sales, and the brand’s domestic business was in a funk. “I had to do what was right,” Greenberg later told the Chicago Tribune. “If you’re sitting in my chair, I think you’d do the same thing.”&lt;/p&gt;
&lt;p&gt;Backed by a massive promotional campaign, in July McDonald’s launched the “Pick Your Prize Monopoly” game. Restaurants nationwide were decorated with Monopoly rooftop banners and drive-thru decals. Diners couldn’t escape Rich Uncle Pennybags, who peered out from tray liners and even garbage cans, urging them to play. McDonald’s distributed 57 million paper game boards in Time, People and Sports Illustrated, while radio commercials whipped up interest in the two $1 million prizes, payable in “cash, gold, or diamonds.”&lt;/p&gt;
&lt;p&gt;But the two winning game pieces were already in the hands of Jerry Jacobson.&lt;/p&gt;
&lt;p&gt;He gave one to his trusted recruiter, Glomb, putting the former drug trafficker on the FBI’s radar for the first time, and the other to Baker.&lt;/p&gt;
&lt;p&gt;“I got to have some kind of deposit,” Jacobson told Baker, in a phone call recorded by the FBI.&lt;/p&gt;
&lt;p&gt;“My word’s not good enough, huh?” said Baker.&lt;/p&gt;
&lt;p&gt;“Your word is good,” Jacobson said. “Are you willing to back it up, though?”&lt;/p&gt;
&lt;p&gt;“Yeah, I'll back it up.”&lt;/p&gt;
&lt;p&gt;Baker had other problems. His sister-in-law Phenis had flown to California to receive her $500,000 prize directly from Simon Marketing. Baker and his wife had spent days staking out the Indianapolis International Airport, watching every incoming flight for her return. On July 20, when Phenis finally strolled into arrivals, the Bakers accosted her and found she had $20,ooo in cash and a cashier’s check for $480,000. Their tense confrontation was filmed by an undercover team of local FBI agents.&lt;/p&gt;
&lt;p&gt;Driving to a quiet corner of Corbin, Kentucky, Baker handed Jacobson a McDonald’s paper bag containing $70,000 in cash, as payment for the next winning ticket. Baker planned to pass the ticket to his last winner, Ronnie Hughey, who had recruited “his man in Texas” to win. Listening in to their call, Dent ran his finger down a list of numbers recently dialed by Hughey. The only Texas number belonged to Hughey’s brother-in-law, a construction manager in Granbury named John Davis.&lt;/p&gt;
&lt;p&gt;On Sunday, July 22, at 10 a.m., two FBI surveillance teams tailed Baker and Jacobson to a secluded area in a South Carolina town, ironically named Fair Play. But the dense, woodland area prevented them from witnessing the transfer. Agents then followed Baker to Hughey’s home in Anderson, where they believed he passed him the $1 million winning game piece. Eight days later, Dent received a call from Amy Murray. Someone had claimed the $1 million, she said. Dent interrupted her. He asked if the winner’s name was John Davis.&lt;/p&gt;
&lt;p&gt;Yes, she said.&lt;/p&gt;
&lt;p&gt;“From Granbury, Texas?”&lt;/p&gt;
&lt;p&gt;By giving the go-ahead to run the game, McDonald’s CEO Jack Greenberg had allowed the feds to discover Glomb and his network of million-dollar winners. “I would do it again,” Greenberg said. “What we found out allowed the FBI to complete its investigation.” Knowing that juries are convinced by splashy stings, the FBI asked McDonald’s to help them trap the suspects. Together with Amy Murray, they cooked up a plan to invite every corrupt winner to Las Vegas for a “winner reunion,” where the FBI would bust them all at once. But they decided against the idea. It was just as effective to shoot fake McDonald’s commercials, trapping Glomb’s final winner, Michael Hoover, at his home in Rhode Island.&lt;/p&gt;


&lt;p&gt;Nineteen days later, on August 22, 2001, the FBI fanned out and made eight arrests, including Dwight and Linda Baker, John Davis, Andrew Glomb, Michael Hoover, Ronald Hughey, and Brenda Phenis. In a pre-dawn raid, FBI agents surrounded Jacobson’s red-brick home, crept up the garden path and knocked on his door. A shocked Jacobson was taken away in handcuffs and charged with conspiracy to commit mail fraud, his bond set a staggering $1 million. Staff at Simon Marketing were left in disbelief. How could the man who searched their shoes be guilty of theft?&lt;/p&gt;
&lt;p&gt;The arrests created a media sensation, and Attorney General John Ashcroft told the press: “Those involved in this type of corruption will find out that breaking the law is no game.” Americans were shocked that McDonald’s customers had been duped for so long. Jeffrey Harris, a former Deputy Attorney General, complained to CNN: “People that were buying the hamburgers, all they were getting at this point was cholesterol.” Meanwhile, Jacobson became the butt of the media’s jokes: “Are you worried the police are going to take him down the station and give him a grilling?” one newscaster asked. “I’m sorry, I couldn’t resist.”&lt;/p&gt;

&lt;p&gt;During his six-hour interrogation, agent Dent presented Jacobson with their evidence. For over 12 years, Jacobson’s scheme had existed only in his mind. Now his crooked plan was a chart on FBI stationery. But Jacobson still thought he had his “ace in the hole.” In the weeks that followed, he provided the FBI with documents he claimed proved that Simon Marketing rigged McDonald’s contests to bilk Canadian customers. A source close to Jacobson told CNN that he also hoped to use his St. Jude’s million dollar donation to try and score a reduced prison sentence. But investigators believed he mailed the game piece to the hospital as “a lark,” after failing to recruit a winner in time for the contest deadline. (Jacobson declined to be interviewed for this article. Most of his story comes from court documents.)&lt;/p&gt;
&lt;p&gt;With each of Jacobson’s nine charges carrying a five year penalty, investigators warned him he’d be 104 on his release date. “I wouldn’t be getting out,” he told them, because he had multiple sclerosis. In exchange for a signed confession and his testimony in court, Jacobson pleaded guilty to three counts for a total of 15 years. The government also took everything he owned. Back in Lawrenceville, his neighbors watched as agents drove away in his brand new Honda S2000 sports car, and other vehicles including a luxury Acura, a minivan, and an ’86 Chevy El Camino.&lt;/p&gt;
&lt;p&gt;McDonald’s CEO Jack Greenberg told the country in a television address that the company had immediately terminated its relationship with Simon Marketing. In Los Angeles, staff silently packed up their desks as the company dissolved. “McDonald’s is committed to giving our customers a chance to win every dollar that has been stolen by this criminal ring.” Greenberg said later, in a somber television commercial in which McDonald’s unveiled a special $10 million instant giveaway, and asked for a “second chance.” To ensure winners were truly chosen at random, there were no game pieces or prize boards. Instead, a prize patrol tapped random customers on the shoulder. McDonald’s, who declined to comment for this article, also quietly honored the $1 million prize sent to the hospital, which was spent on treatment for kids battling cancer and other terminal diseases.&lt;/p&gt;
&lt;p&gt;The colorful court case, held in Jacksonville, Florida, started September 10, 2001, the day before terrorists crashed planes into the World Trade Center, the Pentagon, and a field in Pennsylvania. The stunned news media quickly forgot about the McDonald’s trial, which explains why so few Americans remember the scandal, or how it ended. During the trial, jurors watched defendants celebrating in McDonald’s commercials, including the fake one filmed by the FBI. Glomb recalled that the victim of the McSting, Michael Hoover, told him that he thought Amy Murray “kind of liked me,” before learning she was part of an FBI operation.&lt;/p&gt;
&lt;div class=&quot;PullQuote&quot; readability=&quot;9&quot;&gt;


&lt;p&gt;“For over 12 years, Jacobson’s scheme had existed only in his mind. Now his crooked plan was a chart on FBI stationery.”&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;More than 50 defendants were convicted of mail fraud and conspiracy. Jacobson’s “super-recruiters,” Schwartz, Hart, Couturier, and Glomb were sentenced to a year and one day in prison, and handed huge fines. Baker recalled that one of the FBI’s top agents, known as the “human lie-detector,” interrogated him, and added that if the FBI had focused on surveilling terrorists not McDonald’s winners, 9/11 might never have happened. Baker, who was excommunicated from the Mormon church, his wife Linda, her sister Brenda Phenis, and the dozens of other “winners” received only probation and are still paying back their prize money at $50 a month. Four winners, including Baker’s foster son, Chandler, had their convictions overturned by an appeals court, who agreed they were duped by recruiters.&lt;/p&gt;
&lt;p&gt;Richard Couturier, who was sleeping in his car at the time of the trial, told the court that a man he believed was in the Mafia warned him not to mention Don Hart’s name to investigators. He said he feared getting “whacked.” Then, just before the judge announced her sentence, Robin Colombo caught a glimpse of her lawyer’s paperwork, and saw she was going back to prison. She screamed and made a desperate dash for the exit, and reached an outer corridor before marshals overpowered her. She was sentenced to 18 months. Behind bars, she discovered the Bible and wrote her life story, From a Mafia Widow to Child of God. She was later reunited with her son, Frankie, who did not join the mob.&lt;/p&gt;
&lt;p&gt;Jacobson took the stand dressed in a blue golf shirt, looking tired and gray. One attorney described him as “a gigantic master criminal,” before he admitted to stealing up to 60 game pieces over a dozen years, totaling over $24 million in prizes. “All I can tell you is I made the biggest mistake of my life,” he said quietly, before agreeing to pay $12.5 million in restitution. The judge sent him to jail for 37 months. He did not pass go. But before leaving the court he shook hands with the man who brought him to justice. Perhaps Jacobson saw in Richard Dent the man he could have been, a steely-minded detective. Dent, who declined to be interviewed for this article because he does not speak to the media, quietly returned to his work on white collar crime, and is now retired.&lt;/p&gt;

&lt;p&gt;McDonald’s sued Simon Marketing, who counter-sued. A group of Burger King restaurants tried to get a class act lawsuit together, so did a group of unhappy McDonald’s customers in Canada. The Monopoly game had demonstrated the evils of chasing riches at the expense of others, but the saga also proved that strange things happen when people conspire to cheat fate. Gennaro Colombo won a car using a stolen prize ticket and died in a car wreck. And when lady luck regained control of the McDonald’s competitions, she handed winning tickets to a man wearing a full Pizza Hut uniform; a Taco Bell owner; and a former homeless man who was later charged with beating up his fiancée–a PR nightmare.&lt;/p&gt;
&lt;p&gt;An audit of newspaper archives from Jacobson’s reign turned up some other, interesting “wins.” In 1986 a cop in Florida struggling with unpaid bills told reporters how he found a winning McDonald’s game piece in his squad car. A year later, a family living just 43 miles from Jacobson’s home won $250,000. Then there’s the “imposter” M&amp;amp;M candy, like the one in Robin Colombo’s freezer. In 1997, a newspaper reported that a college student in Florida won the $1 million prize, somehow finding the gray-colored M&amp;amp;M before Mars even announced the contest. The boy’s father, a Baptist, said that if his son had spent his money on a lottery ticket, he would have been sinning. “The Lord doesn’t approve of gambling,” he said. “But a candy contest is something different.” The winner and his family did not answer enquiries sent to their home in the Carolinas, not far from the golden triangle of Jacobson’s phony winners.&lt;/p&gt;
&lt;p&gt;Not long ago, I spoke to Glomb, one of Jacobson’s “super recruiters.” He was philosophical about his conviction. “I’m not one of those people who are mad at [the FBI],” he said. “It was a game, and I lost.” Glomb says he still speaks with Jacobson, who is 76 and in poor health, but living a quiet life in Georgia. “I hate to say it but I’d probably do it again for the same reason,” Glomb said, rakishly. “Every time I talk to Jacobson, I always tease him, I say, ‘You got any tickets?’”&lt;/p&gt;
</description>
<pubDate>Sun, 29 Jul 2018 15:44:50 +0000</pubDate>
<dc:creator>DLay</dc:creator>
<og:title>How an Ex-Cop Rigged McDonald’s Monopoly Game and Stole Millions</og:title>
<og:description>Jerome Jacobson and his network of mobsters, psychics, strip club owners, and drug traffickers won almost every prize for 12 years, until the FBI launched Operation ‘Final Answer.’</og:description>
<og:url>https://www.thedailybeast.com/how-an-ex-cop-rigged-mcdonalds-monopoly-game-and-stole-millions</og:url>
<og:type>article</og:type>
<og:image>https://img.thedailybeast.com/image/upload/c_crop,d_placeholder_euli9k,h_1440,w_2560,x_0,y_0/dpr_2.0/c_limit,w_740/fl_lossy,q_auto/v1532790660/180728-maysh-mcdonalds-monopoly-scam-hero_aoulcu</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.thedailybeast.com/how-an-ex-cop-rigged-mcdonalds-monopoly-game-and-stole-millions?via=twitter_page</dc:identifier>
</item>
</channel>
</rss>