<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>The Great Apple Keyboard Cover-Up</title>
<link>https://ifixit.org/blog/10279/apple-macbook-keyboard-cover-up/</link>
<guid isPermaLink="true" >https://ifixit.org/blog/10279/apple-macbook-keyboard-cover-up/</guid>
<description>&lt;div class=&quot;copy clearfix&quot; readability=&quot;44.94997281131&quot;&gt;
&lt;p&gt;&lt;span&gt;BREAKING (July 13, 2018): Here’s an inflammatory take for you: Apple’s new quieter keyboard is actually a silent scheme to fix their keyboard&lt;/span&gt; &lt;a href=&quot;https://ifixit.org/blog/10229/macbook-pro-keyboard/&quot;&gt;&lt;span&gt;reliability issues&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. We’re in the middle of tearing down the newest MacBook Pro, but we’re too excited to hold this particular bit of news back:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Apple has cocooned their butterfly switches in a thin, silicone barrier.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter&quot; src=&quot;https://d3nevzfk7ii3be.cloudfront.net/igi/QKdxJs6wFaLuwSMW.medium&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;The 2018 MacBook Pro features a thin rubberized layer under its keycaps, covering the second-generation butterfly mechanism.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This flexible enclosure is quite obviously an ingress-proofing measure to cover up the mechanism from the daily onslaught of microscopic dust. Not—to our eyes—a silencing measure. In fact, Apple has a&lt;/span&gt; &lt;a href=&quot;http://pdfaiw.uspto.gov/.aiw?docid=20180068808&quot;&gt;&lt;span&gt;patent for this exact tech&lt;/span&gt;&lt;/a&gt;&lt;span&gt; designed to “prevent and/or alleviate contaminant ingress.”&lt;/span&gt;&lt;a href=&quot;http://pdfaiw.uspto.gov/.aiw?docid=20180068808&amp;amp;SectionNum=1&amp;amp;IDKey=F0B1C5BB130C&amp;amp;HomeUrl=http://appft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1%252526Sect2=HITOFF%252526d=PG01%252526p=1%252526u=%2525252Fnetahtml%2525252FPTO%2525252Fsrchnum.html%252526r=1%25252&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img class=&quot;aligncenter&quot; src=&quot;https://d3nevzfk7ii3be.cloudfront.net/igi/sI2W6BnJOgKPAKkZ&quot; alt=&quot;&quot; width=&quot;900&quot; height=&quot;426&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Here’s the really good part: I can tell you it’s there, but I can’t definitively prove it’s a reliability fix. After all,&lt;/span&gt; &lt;a href=&quot;https://www.theverge.com/2018/7/12/17563640/apple-macbook-pro-touchbar-2018-intel-processor-siri-true-tone&quot;&gt;&lt;span&gt;Apple told The Verge&lt;/span&gt;&lt;/a&gt; &lt;span&gt;that “this new third-generation keyboard wasn’t designed to solve those [dust] issues.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Apple is in the middle of several&lt;/span&gt; &lt;a href=&quot;https://9to5mac.com/2018/06/04/macbook-pro-keyboard-lawsuits-2/&quot;&gt;&lt;span&gt;class-action lawsuits&lt;/span&gt;&lt;/a&gt; &lt;span&gt;for the failure of their keyboards, so of course they can’t just come out and say, “Hey, we fixed it!” That says there&lt;/span&gt; &lt;em&gt;&lt;span&gt;was&lt;/span&gt;&lt;/em&gt; &lt;span&gt;a problem to begin with. But you’ve heard that clever analysis from&lt;/span&gt; &lt;a href=&quot;https://daringfireball.net/2018/07/new_macbook_pros&quot;&gt;&lt;span&gt;John Gruber&lt;/span&gt;&lt;/a&gt; &lt;span&gt;already. I’m just here to posit: the advertised boost in quietude is a&lt;/span&gt; &lt;em&gt;&lt;span&gt;side-effect&lt;/span&gt;&lt;/em&gt; &lt;span&gt;of this rubbery membrane. The quiet angle is, quite literally, a cover up.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Tune in next week as we put this membrane through its dust-proofing paces, tear down the rest of the device, and speculate whether this really is a feature—or a secret bug fix impacting millions of consumers.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here’s our video summary of the story so far.&lt;br/&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/2tbVDV1xdQI&quot; width=&quot;899&quot; height=&quot;500&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Image Credit: *FIG. 3D from &lt;a href=&quot;http://pdfaiw.uspto.gov/.aiw?docid=20180068808&amp;amp;SectionNum=1&amp;amp;IDKey=F0B1C5BB130C&amp;amp;HomeUrl=http://appft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1%252526Sect2=HITOFF%252526d=PG01%252526p=1%252526u=%2525252Fnetahtml%2525252FPTO%2525252Fsrchnum.html%252526r=1%25252&quot;&gt;uspto.gov&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;ul class=&quot;next-prev-post-nav&quot;&gt;&lt;li&gt;&lt;small&gt;Previous Post&lt;/small&gt; &lt;a href=&quot;https://ifixit.org/blog/10263/dare-to-repair-contest-winners/&quot; rel=&quot;prev&quot;&gt;Dare to Repair Contest Winners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;author-container&quot;&gt;
&lt;div class=&quot;author-content&quot; readability=&quot;29.545454545455&quot;&gt;
&lt;div class=&quot;author-image&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://secure.gravatar.com/avatar/fe2aff4d1a29fe85dc1643d5d9b9c864?s=100&amp;amp;d=blank&amp;amp;r=pg&quot; srcset=&quot;https://secure.gravatar.com/avatar/fe2aff4d1a29fe85dc1643d5d9b9c864?s=200&amp;amp;d=blank&amp;amp;r=pg 2x&quot; class=&quot;avatar avatar-100 photo&quot; height=&quot;100&quot; width=&quot;100&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;author-body&quot; readability=&quot;31.818181818182&quot;&gt;
&lt;h3 class=&quot;author-name&quot;&gt;&lt;a href=&quot;https://ifixit.org/blog/author/samantha/&quot; title=&quot;Posts by Sam Lionheart&quot; rel=&quot;author&quot;&gt;Sam Lionheart&lt;/a&gt;&lt;/h3&gt;
&lt;p class=&quot;author-bio&quot;&gt;Samantha Lionheart is a content curator and guide photo guru at iFixit. She enjoys tea, cats, and thinking too much about movies.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Sat, 14 Jul 2018 01:01:32 +0000</pubDate>
<dc:creator>shritesh</dc:creator>
<og:title>The Great Apple Keyboard Cover-Up</og:title>
<og:description></og:description>
<og:url>https://ifixit.org/blog/10279/apple-macbook-keyboard-cover-up/</og:url>
<og:image>https://d3nevzfk7ii3be.cloudfront.net/igi/QKdxJs6wFaLuwSMW.medium</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://ifixit.org/blog/10279/apple-macbook-keyboard-cover-up/</dc:identifier>
</item>
<item>
<title>Amazon’s share of the US e-commerce market is now 49%</title>
<link>https://techcrunch.com/2018/07/13/amazons-share-of-the-us-e-commerce-market-is-now-49-or-5-of-all-retail-spend/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/07/13/amazons-share-of-the-us-e-commerce-market-is-now-49-or-5-of-all-retail-spend/</guid>
<description>&lt;p&gt;&lt;a class=&quot;crunchbase-link&quot; href=&quot;https://www.crunchbase.com/organization/amazon/&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;amazon&quot;&gt;Amazon&lt;/a&gt; has already been in the crosshairs of the White House when it comes to &lt;a href=&quot;https://www.nytimes.com/2018/05/03/business/amazon-the-elephant-in-the-antitrust-room.html&quot;&gt;threats&lt;/a&gt; of antitrust investigations, and while some say this is simply Trumpian bluster that has a &lt;a href=&quot;https://www.nytimes.com/2018/05/03/business/amazon-the-elephant-in-the-antitrust-room.html&quot;&gt;slim chance&lt;/a&gt; of going anywhere, some new numbers out from the researchers at &lt;a href=&quot;http://emarketer.com&quot;&gt;eMarketer&lt;/a&gt; could prove to be a fan to the flames.&lt;/p&gt;
&lt;p&gt;Amazon is set to clear $258.22 billion in US retail sales in 2018, according to eMarketer’s figures, which will work out to 49.1 percent of &lt;em&gt;all&lt;/em&gt; online retail spend in the country, and 5 percent of all retail sales.&lt;/p&gt;
&lt;p&gt;It started as an online bookstore, but today Amazon is a behemoth in all areas of e-commerce, fuelled by a strong Marketplace network of third-party sellers, an ever-expanding range of goods from groceries to fashion, and a very popular loyalty program in the form of Prime.&lt;/p&gt;
&lt;p&gt;Now, it is fast approaching a tipping point where more people will be spending money online with Amazon, than with all other retailers — combined. Amazon’s next-closest competitor, eBay, a very, very distant second at 6.6 percent, and Apple in third at 3.9 percent. Walmart, the world’s biggest retailer when counting physical stores, has yet to really hit the right note in e-commerce and comes in behind Apple with 3.7 percent of online sales in the US.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;vertical CToWUd a6T&quot; tabindex=&quot;0&quot; src=&quot;https://ci4.googleusercontent.com/proxy/-PgHRaD0RNJP5Hhc5s3ahdXC9QvNKKslptI01GPA-NGOw4sezOr_irA70Eq8twzHdkDkuoXWxb7iF_IM4chlz6WyOsRdoSmIn-7giMfCCg5V0YM4M5uYX0I3uRL-McaPCeKkEun9WM5y6Q5-jGR1oj7bxPGvtrdSTjQES17D0L2GgWVqxGujhcvqcwIiKP8lvROjpn4kosty7oIKSDibR_emQsc22rDqo9PhojqcIFdBE3A2A0FHwofEi4cC=s0-d-e1-ft#http://sentpressrelease.com/pressrelease/image/258076/ZU1hcmtldGVyX1RvcF8xMF9VU19Db21wYW5pZXNfUmFua2VkX2J5X1JldGFpbF9FY29tbWVyY2VfU2FsZXNfU2hhcmVfMjAxOF8yMzk0NDcuanBn&quot; width=&quot;450&quot; height=&quot;617&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The figures — which eMarketer says are estimates “based on an analysis of quantitative and qualitative data from research firms, government agencies, media firms and public companies, plus interviews with top executives at publishers, ad buyers and agencies” — are also remarkable not because of their size, but because of Amazon’s pace has not slowed down. Its sales are up 29.2 percent versus a year ago, when it commanded 43 percent of all e-commerce retail sales.&lt;/p&gt;
&lt;p&gt;The rocket ship for Amazon’s growth at the moment is its Marketplace — the platform where Amazon allows third-party sellers to use its retail and (if they choose) logistics infrastructure to sell and deliver items to Amazon shoppers. It’s currently accounting for 68 percent of all retail sales, working out to nearly $176 billion, versus 32 percent for Amazon’s direct sales, and eMarketer projects that by the end of this year, Marketplace’s share will be more than double that of Amazon’s own sales (it’s already about double).&lt;/p&gt;
&lt;p&gt;It’s no wonder that so many other online commerce businesses are chasing the marketplace model, which essentially creates transactions on two fronts for the platform operator, thereby improving margins that might be cut by not selling items directly.&lt;/p&gt;
&lt;p&gt;“The continued growth of Amazon’s Marketplace makes sense on a number of levels,” eMarketer principal analyst Andrew Lipsman notes in the eMarketer report. “More buyers transacting more often on Amazon will naturally attract third-party sellers. But because third-party transactions are also more profitable, Amazon has every incentive to make the process as seamless as possible for those selling on the platform.”&lt;/p&gt;
&lt;p&gt;In terms of popular categories, consumer electronics and tech continue to be the leading product category: eMarketer projects sales of $65.82 billion, around one-fourth of all turnover. Second will be apparel and accessories, which will pull in $39.88 billion of sales. Third in 2018 are health, personal care and beauty with $16 billion. Fourth is food and beverage at a distant $4.75 billion.&lt;/p&gt;
&lt;p&gt;All of these are already up by 38 percent or more over a year ago (see the full table below), but what’s perhaps most notable is how Amazon has been investing in being a direct player in each of the categories as well.&lt;/p&gt;
&lt;p&gt;In tech, it has its Kindles and Fire tablets, Fire TV, and of course its huge hit Alexa-powered Echo devices, among many other products. Apparel is being pushed heavily in the company’s private-label efforts. Amazon just the other week announced that it was acquiring online drug seller PillPack for $1 billion, which will be a major lever in its wider health products and services strategy. And lastly, there is Amazon’s acquisition of Whole Foods and its much wider play around meal kits and its server-free physical shops. The physical aspect, eMarketer believes, will play a strong role in Amazon’s growth in this category.&lt;/p&gt;
&lt;p&gt;“Amazon’s strategy for food and beverage is no different, in some respects, than it was for books—dominate the category,” eMarketer senior analyst Patricia Orsini notes in the report. “However, e-commerce in the grocery sector is a challenge. Share of online sales in this category is low because most people, for a host of reasons, prefer to buy food in brick-and-mortar stores. Amazon has an advantage because its shopper base is comfortable with shopping online. Along with insights gathered about Whole Foods shoppers, Amazon probably has the best chance of converting in-store grocery buyers to online grocery buyers.”&lt;/p&gt;
&lt;p&gt;All of these will not just boost Amazon’s own direct sales but help create an environment for people to come to Amazon to buy either these at price-busting rates, or other-brand alternatives.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;CToWUd a6T&quot; tabindex=&quot;0&quot; src=&quot;https://ci6.googleusercontent.com/proxy/O0Qa10BEiSJFTprTb0QMxoc7Dh5m7WazqibPgNyiZdE76tWvOaRIxxvfk3eXYOiAtS0q8VrO5at6RJ_4IuBWAN_qnyumtzY4oRUXueEtt0iRhLi2E9DRKUmlc8yB-fX_g_xhrY10orQbiI0_YgjEBvxxSxw64fN6Unir9g7fGfcjYtcHsI-wNY4sRYjdESI2NzyQOILXUma3KtqoXoVAzcks9LAJ3E-bSLsU1WW5_zXXeveDf9A_aWG5bXNJLE8vzfVDSgVIumG4=s0-d-e1-ft#http://sentpressrelease.com/pressrelease/image/258076/ZU1hcmtldGVyX1VTX0FtYXpvbl9SZXRhaWxfRWNvbW1lcmNlX1NhbGVzX2Zvcl9TZWxlY3RfUHJvZHVjdF9DYXRlZ29yaWVzXzIwMTYtMjAxOV8yMzkyNDYuanBn&quot; width=&quot;450&quot; height=&quot;393&quot;/&gt;&lt;/p&gt;
&lt;p&gt;So far, people think that it is unlikely that Amazon would stand an antitrust investigation because e-commerce is still a small part of all commerce (as evidenced by the five percent of all retail sales figure), and Amazon would argue that in the world of “omnicommerce” it’s still just a bit player. However, Amazon’s dominance is clear when considering e-commerce alone.&lt;/p&gt;
</description>
<pubDate>Fri, 13 Jul 2018 17:55:27 +0000</pubDate>
<dc:creator>base</dc:creator>
<og:title>Amazon’s share of the US e-commerce market is now 49%, or 5% of all retail spend</og:title>
<og:description>Amazon has already been in the crosshairs of the White House when it comes to threats of antitrust investigations, and while some say this is simply Trumpian bluster that has a slim chance of going anywhere, some new numbers out from the researchers at eMarketer could prove to be a fan to the flame…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2018/04/gettyimages-696675012.jpg?w=600</og:image>
<og:url>http://social.techcrunch.com/2018/07/13/amazons-share-of-the-us-e-commerce-market-is-now-49-or-5-of-all-retail-spend/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/07/13/amazons-share-of-the-us-e-commerce-market-is-now-49-or-5-of-all-retail-spend/</dc:identifier>
</item>
<item>
<title>XARs: An efficient system for self-contained executables</title>
<link>https://code.fb.com/data-infrastructure/xars-a-more-efficient-open-source-system-for-self-contained-executables/</link>
<guid isPermaLink="true" >https://code.fb.com/data-infrastructure/xars-a-more-efficient-open-source-system-for-self-contained-executables/</guid>
<description>&lt;p&gt;Distributing large pieces of software to thousands of machines with a wide variety of configurations can pose a significant operational challenge, requiring a process to identify and copy precisely the right combination of dependent libraries and data files for each device. To make this faster, more robust, and more efficient, we have developed and deployed XARs, or e&lt;strong&gt;X&lt;/strong&gt;ecutable &lt;strong&gt;AR&lt;/strong&gt;chives, a system for distributing self-contained executables that encapsulate both data and code dependencies. Our research has demonstrated that XARs can deliver as intended when deployed across large networks. We are pleased to share XAR with the open source community via &lt;a href=&quot;https://github.com/facebookincubator/xar/&quot;&gt;GitHub&lt;/a&gt; and &lt;a href=&quot;https://pypi.org/p/xar&quot;&gt;PyPI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;XARs are single, highly compressed files containing all necessary executable dependencies. They execute with the same speed as natively installed applications and are designed to be the fastest way to distribute and execute large Python applications while maintaining maximum compatibility with the existing open source Python ecosystem. XARs can be run from anywhere on the filesystem, and they remove the need for virtual environments as well as worries about modules installed as part of the operating system. Executables simply work, and dependencies are isolated from the machine the system is running on. This creates a performant, hermetically compressed executable for Python packages. In sum, XARs are designed to serve a wide variety of use cases and to perform faster than all other self-contained executable distribution approaches.&lt;/p&gt;
&lt;p&gt;XARs can be used to deploy Python virtual environments, bundle Node.js applications, and even Lua tools. This can result in efficiency wins from lowered overhead for many types of Python tools, reduced size of the binaries deployed, and offer a more reliable production environment for Python tooling.&lt;/p&gt;
&lt;h2&gt;The road to XARs&lt;/h2&gt;
&lt;p&gt;XARs represent an evolution of Facebook’s work to create an optimal system to distribute a single executable that is independent of the operating system’s libraries. Statically linked binaries that minimize dependency management difficulties work well for C++ executables, but languages like Python, JavaScript, and even Lua present a different challenge: How do you place source code and data (such as SSL certificates or shared libraries) inside a single executable? What do you do about the dependencies the tool might have on modules installed on the host operating system?&lt;/p&gt;
&lt;p&gt;Initially, we used PARs (Python archives) that were similar to SHARs (shell archives). Every time an executable was run, it would decompress itself into a temporary directory, execute, and finish. However, this approach had inefficiencies, such as repeatedly decompressing files, and other shortcomings, such as leaving potentially hundreds of megabytes of now-unused files to clean up.&lt;/p&gt;
&lt;p&gt;Over time, we evolved that solution to be more efficient, through an approach similar to that of &lt;a href=&quot;https://pex.readthedocs.io/en/stable/&quot;&gt;PEX files&lt;/a&gt;: decompressing once, reusing the decompressed files, and then sharing common files between multiple PARs. After years of making this more efficient through various optimizations, we decided on a new approach and created XARs.&lt;/p&gt;
&lt;h2&gt;How XARs differ from other self-contained executables&lt;/h2&gt;
&lt;p&gt;XARs are self-contained executables that carry data and code (both native and interpreted), much like PARs and PEX files (which are self-contained Python virtual environments). Unlike PARs, however, XARs do not require explicit decompression. Instead, XARs are slightly modified &lt;a href=&quot;https://en.wikipedia.org/wiki/SquashFS&quot;&gt;squashfs&lt;/a&gt; files (see below for technical details) that mount themselves when executed and unmount after an idle timeout. They could almost be thought of as a self-executing container without the virtualization. By using the squashfs format, we not only distribute data in a far more compressed format than with a PAR (zip) file, but we also decompress on demand only the portions we need. Thanks to this architecture, XARs have nearly zero overhead in production and can be used just as native scripts or executables would be.&lt;/p&gt;
&lt;p&gt;XARs, like PARs, also have advantages for interpreted languages like Python. By collecting a Python script, associated data, and all native and Python dependencies, we achieve a &lt;em&gt;hermetic&lt;/em&gt; binary that can run anywhere in our infrastructure, regardless of operating system or packages already installed. In fact, this works for many Python tools as well as for JavaScript (Node.js), Lua tooling, and bundling multiple C++ executables and data files together, yielding a single archive that is smaller and can be moved as a single unit.&lt;/p&gt;
&lt;p&gt;This approach grants XARs many advantages over PARs, PEXs, and other similar options:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;More modules “just work” because they carry data and handle imports like normal directories. (Even with &lt;code&gt;zipimport&lt;/code&gt;, some modules fail, and not every library uses &lt;code&gt;pkg_resources&lt;/code&gt; properly.)&lt;/li&gt;
&lt;li&gt;Tools and services see faster start times, since they don’t need to write the contents of the PAR file to disk.&lt;/li&gt;
&lt;li&gt;Different invocations reuse the same mount point with data cached efficiently by the kernel.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;XARs achieve these performance gains by using a novel on-demand FUSE-based filesystem.&lt;/p&gt;
&lt;h2&gt;Measuring performance benefits&lt;/h2&gt;
&lt;p&gt;Optimizing performance (both space and execution time) was a key design goal for XARs. We ran benchmark tests with open source tools to compare PEX, XAR, and native installs on the following metrics:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Size:&lt;/strong&gt; file size, in bytes, of the executable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cold start time:&lt;/strong&gt; time taken when we have nothing mounted or extracted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hot start time:&lt;/strong&gt; time taken when we have extracted cache or mounted XAR squashfs&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-medium wp-image-9531&quot; src=&quot;https://code.fb.com/wp-content/uploads/2018/07/37013200_225182741649994_7449686775674437632_n.png?w=640&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;358&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The results show that both file size (with &lt;a href=&quot;https://code.fb.com/core-data/smaller-and-faster-data-compression-with-zstandard/&quot;&gt;zstd compression&lt;/a&gt;) and start times improve with XARs. This is an improvement when shipping to large number of servers, especially with short-running executables, such as small data collection scripts on web servers or interactive command line tools.&lt;/p&gt;
&lt;h2&gt;Sample usage&lt;/h2&gt;
&lt;p&gt;Facebook has created a &lt;strong&gt;bdist_xar&lt;/strong&gt; plugin for &lt;em&gt;setup.py&lt;/em&gt;, much like the &lt;strong&gt;wheel&lt;/strong&gt; module.&lt;br/&gt;To create a XAR, install the PyPI &lt;strong&gt;xar&lt;/strong&gt; module and run setup.py:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pip install xar 
python3 path/to/setup.py bdist_xar&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Ubuntu 18.04&lt;/h2&gt;
&lt;p&gt;Ubuntu comes with Python 3.6.5 today and is an excellent distribution to run Python 3 applications. Here is a quick-start example for using a XAR to run the &lt;code&gt;black&lt;/code&gt; PyPI module on Ubuntu 18.04.&lt;/p&gt;
&lt;p&gt;1. Install XAR deps.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sudo apt install cmake g++ git libfuse-dev libz-dev python3-pip python3-venv squashfs-tools&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2. Today, we have to build squashfuse from source, as Ubuntu’s version does not contain &lt;code&gt;squashfuse_ll&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;wget &lt;a href=&quot;https://github.com/vasi/squashfuse/releases/download/0.1.103/squashfuse-0.1.103.tar.gz&quot;&gt;https://github.com/vasi/squashfuse/releases/download/0.1.103/squashfuse-0.1.103.tar.gz&lt;/a&gt;
tar xvzf squashfuse-0.1.103.tar.gz &amp;amp;&amp;amp; cd squashfuse-0.1.103 
./configure --prefix=/usr &amp;amp;&amp;amp; make
sudo make install&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3. Clone the XAR repo.&lt;/p&gt;
&lt;pre&gt;
git clone &lt;a href=&quot;https://github.com/facebookincubator/xar.git&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-lynx-mode=&quot;hover&quot; data-lynx-uri=&quot;https://l.facebook.com/l.php?u=https%3A%2F%2Fgithub.com%2Ffacebookincubator%2Fxar.git&amp;amp;h=AT0sb9-fbpeQWYCZPqWDCCa5r0R0A22LLMYV9N9NqdPbp3ORXKVoPQi4iAsIf9mOksys8cJygELkwUEeyZxnA991A9rCcbRSNgmP7xABh0sYvcaI5VcyjnBr0EC7UNQFUXTmt1kVyA&quot;&gt;https://github.com/facebookincubator/xar.git&lt;/a&gt; &amp;amp;&amp;amp; cd xar
&lt;/pre&gt;
&lt;p&gt;4. Build.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mkdir build &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; cmake .. &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5. Make the base XAR mountpoint.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sudo mkdir /mnt/xarfuse &amp;amp;&amp;amp; sudo chmod 01777 /mnt/xarfuse&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6. Create a virtualenv + install xar &lt;code&gt;setup.py&lt;/code&gt; plugin.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cd ..  # root dir of xar repo
python3 -m venv /tmp/xar
python3 -m pip install --upgrade pip
/tmp/xar/bin/pip install .
Successfully installed wheel-0.31.1 xar-18.6.11&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7. Clone + install &lt;strong&gt;black&lt;/strong&gt; to the virtualenv.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cd ..
git clone https://github.com/ambv/black.git &amp;amp;&amp;amp; cd black
/tmp/xar/bin/pip install .&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;8. Build a XAR of black.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/tmp/xar/bin/python3 setup.py bdist_xar&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;9. Test XAR executable.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dist/black.xar --help&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;macos 10.13+&lt;/h2&gt;
&lt;p&gt;MacOS does not ship with a native FUSE filesystem. Instead, we use &lt;strong&gt;&lt;a href=&quot;https://osxfuse.github.io/&quot;&gt;FUSE for macOS&lt;/a&gt;&lt;/strong&gt; to mount user-space filesystems. Like above, let’s set up a vanilla macOS 10.13.4 install to run the &lt;code&gt;black&lt;/code&gt; PyPI module as a XAR.&lt;/p&gt;
&lt;p&gt;1. Ensure that you have FUSE for macOS installed.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;brew cask install osxfuse&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2. Install XAR.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;brew tap facebook/homebrew-fb
brew install xar&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3. Make the base XAR mountpoint.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sudo mkdir /mnt/xarfuse &amp;amp;&amp;amp; sudo chmod 01777 /mnt/xarfuse&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4. Create a Virtualenv + Install xar &lt;code&gt;setup.py&lt;/code&gt; plugin.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git clone &lt;a href=&quot;https://github.com/facebookincubator/xar.git&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot; data-lynx-mode=&quot;hover&quot; data-lynx-uri=&quot;https://l.facebook.com/l.php?u=https%3A%2F%2Fgithub.com%2Ffacebookincubator%2Fxar.git&amp;amp;h=AT0sb9-fbpeQWYCZPqWDCCa5r0R0A22LLMYV9N9NqdPbp3ORXKVoPQi4iAsIf9mOksys8cJygELkwUEeyZxnA991A9rCcbRSNgmP7xABh0sYvcaI5VcyjnBr0EC7UNQFUXTmt1kVyA&quot;&gt;https://github.com/facebookincubator/xar.git&lt;/a&gt; &amp;amp;&amp;amp; cd xar
python3 -m venv /tmp/xar
python3 -m pip install --upgrade pip
/tmp/xar/bin/pip install .
Successfully installed wheel-0.31.1 xar-18.7.11
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;5. Clone + install &lt;strong&gt;black&lt;/strong&gt; to the virtualenv.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cd ..
git clone https://github.com/ambv/black.git &amp;amp;&amp;amp; cd black
/tmp/xar/bin/pip install .&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;6. Build a XAR of black.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/tmp/xar/bin/python3 setup.py bdist_xar&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;7. Test XAR executable.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dist/black.xar --help&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Additional technical details&lt;/h2&gt;
&lt;p&gt;How &lt;em&gt;exactly&lt;/em&gt; do XARs work? A XAR is a simple combination of a few primitives:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A four-kilobyte preamble that is a shebang pointing to a helper executable (&lt;code&gt;#!/usr/bin/env xarexec_fuse&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;A helper, &lt;code&gt;xarexec_fuse&lt;/code&gt;, that knows how to read the XAR file, mount it if necessary, and execute the Python (or Lua or …) script inside&lt;/li&gt;
&lt;li&gt;A FUSE filesystem, &lt;code&gt;squashfuse_ll&lt;/code&gt;, that is responsible for making the squashfs file look like a normal directory of files (and, by using FUSE, XARs don’t require root to run and can run on OS X).&lt;/li&gt;
&lt;li&gt;(optional) Since squashfs supports &lt;a href=&quot;https://github.com/facebook/zstd&quot;&gt;Zstandard compression&lt;/a&gt; (another Facebook open source offering), we can achieve far better compression ratios and faster decompression speed than zlib-based zip files can.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Combining those primitives gives us XAR. In addition to being responsible for the mounted filesystem, &lt;code&gt;squashfuse_ll&lt;/code&gt; will also unmount and exit if the contents of the filesystem aren’t accessed, allowing XARs to clean themselves up without intervention.&lt;/p&gt;
&lt;p&gt;It is worth noting that nothing in XAR is Python specific. In fact, it’s even possible to create create a XAR file containing a native C or C++ executable, and the result is a smaller file on disk. It is also possible to use any scripting language, even bash, and deliver data alongside code.&lt;/p&gt;
&lt;h2&gt;What comes next&lt;/h2&gt;
&lt;p&gt;The path that brought Facebook to XARs was spread over years of iteration, experimentation, and optimization. We’re not done yet; we’re always working to make XARs even more efficient and have plans for improving the efficiency of &lt;code&gt;squashfuse_ll&lt;/code&gt;. Additionally, while focused initially on Python, as mentioned above, XARs have found other use cases for other languages, and we are excited to continue expanding the languages and use cases.&lt;/p&gt;
&lt;p&gt;We are excited to share XARs with the community and look forward to seeing how you use and help us improve them. PRs and suggestions are welcome!&lt;/p&gt;

</description>
<pubDate>Fri, 13 Jul 2018 16:02:43 +0000</pubDate>
<dc:creator>terrelln</dc:creator>
<og:title>XARs: An efficient system for self-contained executables</og:title>
<og:description>Facebook Open Source</og:description>
<og:type>article</og:type>
<og:image>https://code.fb.com/wp-content/uploads/2018/07/xar_hero3.jpg?w=640</og:image>
<og:url>https://code.fb.com/data-infrastructure/xars-a-more-efficient-open-source-system-for-self-contained-executables/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://code.fb.com/data-infrastructure/xars-a-more-efficient-open-source-system-for-self-contained-executables/</dc:identifier>
</item>
<item>
<title>Microsoft Urges Congress to Regulate Use of Facial Recognition</title>
<link>https://www.nytimes.com/2018/07/13/technology/microsoft-facial-recognition.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2018/07/13/technology/microsoft-facial-recognition.html</guid>
<description>&lt;div readability=&quot;41.506849315068&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;29.298952457695&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Microsoft on Friday became the first tech giant to join a growing &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.icrac.net/open-letter-to-amazon-against-police-and-government-use-of-rekognition/&quot; title=&quot;Academics letter to Amazon.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;call for regulations&lt;/a&gt; to limit the use of facial recognition technology.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In a lengthy blog post about the potential uses and abuses of facial recognition, Bradford L. Smith, the company’s president, compared the technology to products like medicines and cars that are highly regulated, and he urged Congress to study it and oversee its use.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;“We live in a nation of laws, and the government needs to play an important role in regulating facial recognition technology,” &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://news.microsoft.com/exec/brad-smith/&quot; title=&quot;Mr. Smith's bio.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mr. Smith&lt;/a&gt; wrote. He added: “A world with vigorous regulation of products that are useful but potentially troubling is better than a world devoid of legal standards.”&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Tech giants rarely advocate regulation of their innovations, and Mr. Smith’s unusual entreaty illustrates how powerful technologies involving artificial intelligence — including facial recognition — have set off a contentious battle among tech executives. These technologies have the potential to remake industries. They could also reduce workers’ job prospects or result in unequal opportunities for consumers, leading some to argue that the products are too risky for tech companies to deploy without government oversight.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;37.5&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;20&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Mr. Smith’s appeal also comes as Silicon Valley is facing withering scrutiny from lawmakers and privacy experts. Several companies have been harshly criticized in recent months for their role in spreading false information during the 2016 election, and exploiting users’ personal data. In response, some businesses, like Facebook, have expressed more openness to regulation of practices like political advertising.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;With many of its rivals under fire, Microsoft has aggressively tried to position itself as the moral compass of the industry. Company executives have been outspoken about safeguarding users’ privacy as well as warning about the potential discriminatory effects of using automated algorithm to make important decisions like hiring.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;35.5&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;16&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Now that facial recognition has become a new lightning rod for critics, Microsoft is taking the lead in calling for some regulatory restraint.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;The powerful technology can be used to identify people in photos or video feeds without their knowledge or permission. Proponents see it as a potentially important tool for identifying criminals, but civil liberties experts have warned that the technology could enable mass surveillance, hindering people’s ability to freely attend political protests or go about their day-to-day lives in anonymity.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;40.844540853218&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;32.853217642805&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In April, privacy groups &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://epic.org/foia/ftc/facebook/EPIC-v-FTC-Complaint.pdf&quot; title=&quot;The complaint&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;filed a complaint&lt;/a&gt; with the Federal Trade Commission saying that Facebook had turned on new face-matching services &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/07/09/technology/facebook-facial-recognition-privacy.html&quot; title=&quot;Times' story on the topic.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;without obtaining appropriate permission&lt;/a&gt; of users. Facebook has denied the groups’ accusations.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In May, the American Civil Liberties Union and other civil rights groups &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/05/22/technology/amazon-facial-recognition.html&quot; title=&quot;Times' story on the topic&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;asked Amazon to stop selling&lt;/a&gt; its face-matching service, Rekognition, to law enforcement agencies. (The New York Times recently used Amazon’s services to help identify attendees at the &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/05/19/world/europe/royal-wedding-live.html&quot; title=&quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;royal wedding of Prince Harry and Meghan Markle&lt;/a&gt;.)&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In calling for government oversight of facial recognition, Microsoft may be trying to get ahead of any new state efforts to tightly regulate the technology. Mr. Smith, the company’s president, suggested that governments around the world examine both law enforcement and commercial uses of the technology.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;“Should law enforcement use of facial recognition be subject to human oversight and controls?” he wrote. “Should the law require that companies obtain prior consent before collecting individuals’ images for facial recognition?”&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In the European Union, many of these questions have already been settled.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;A tough &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/04/08/technology/a-tough-task-for-facebook-european-type-privacy-for-all.html&quot; title=&quot;Times' story on the law.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;new data protection law&lt;/a&gt; there generally prohibits companies from collecting the biometric data needed for facial recognition without first obtaining users’ specific consent. Illinois has similar restrictions.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;32.563440860215&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;11.664516129032&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In his blog post, Mr. Smith said Congress should appoint a commission to study the issue and make recommendations on potential regulations. The Federal Trade Commission has already examined facial recognition, recommending in &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.ftc.gov/news-events/press-releases/2012/10/ftc-recommends-best-practices-companies-use-facial-recognition&quot; title=&quot;FTC information on the report&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a 2012 report&lt;/a&gt; that certain companies “provide consumers with an easy-to-use choice not to have their biometric data collected and used for facial recognition.” But Congress never took up those recommendations and enacted them into law.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;50.096755833808&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;49.169038133182&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Civil liberties and privacy advocates said they both welcomed and felt wary of Microsoft’s push for government regulation, questioning how committed the company was to strong user privacy controls.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In May, for instance, Satya Nadella, Microsoft’s chief executive, said at a company developer conference that privacy was a “human right.” Yet in June, Microsoft &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://cal-access.sos.ca.gov/Campaign/Committees/Detail.aspx?id=1401518&amp;amp;view=late1&quot; title=&quot;The Campaign finance disclosure form.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;donated $195,000&lt;/a&gt; to an effort to defeat a consumer privacy bill in California.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;“People have a right to go about their lives without having their faces scanned in secret — by companies or the government,” said &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.law.georgetown.edu/faculty/alvaro-bedoya/&quot; title=&quot;Professor Bedoya's bio&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Alvaro Bedoya&lt;/a&gt;, director of the Center on Privacy &amp;amp; Technology at Georgetown Law, who has &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.perpetuallineup.org&quot; title=&quot;Georgetown Law study on police use of the technology&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;studied facial recognition&lt;/a&gt;. “Will Microsoft agree that companies should never scan your face without your permission? Will it agree that government face scans should be tightly controlled and in some cases banned?”&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;April Isenhower, a spokeswoman for Microsoft, said that the company had long been committed to privacy, including pushing for a national consumer privacy law in the United States since 2005.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Tech companies are spreading facial recognition in part because it provides a powerful way for them to connect consumers’ online and real lives.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Over the last few years, Amazon, Apple, Facebook, Google and Microsoft have each filed face recognition patents. Last year, Apple introduced Face ID, a service that enables iPhone X owners to &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.slate.com/blogs/future_tense/2017/09/12/the_iphone_x_s_face_id_is_a_major_privacy_concern.html&quot; title=&quot;Slate story on the topic.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;unlock their phones with their face&lt;/a&gt;. Many Windows laptops have a similar feature.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Earlier this year, Google’s Art &amp;amp; Culture app created a craze after it added a feature that could match users’ selfies with similar faces in well-known paintings. Google also recently introduced a camera, called &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://store.google.com/us/product/google_clips?hl=en-US&quot; title=&quot;Google marketing site for the product&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Google Clips, with facial recognition&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;50.110889110889&quot;&gt;
&lt;div class=&quot;css-1h6whtw&quot; readability=&quot;46.705294705295&quot;&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;In addition to using facial recognition for its own consumer services, Microsoft — like Amazon — also sells the software to others.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Microsoft markets technology that can detect faces in photos, as well as facial features like hair color, and emotions like anger or disgust, according to &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://azure.microsoft.com/en-us/services/cognitive-services/face/?v=18.05&quot; title=&quot;The site&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;its website&lt;/a&gt;. It also sells facial recognition software that “enables you to search, identify, and match faces in your private repository of up to one million people,” the site said. Uber has used the technology to verify drivers’ identities, according to &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://customers.microsoft.com/en-us/story/uber&quot; title=&quot;Microsoft marketing material&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Microsoft marketing materials&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Mr. Smith wrote in the blog post that Microsoft was examining its own development and marketing of the technology.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/02/09/technology/facial-recognition-race-artificial-intelligence.html&quot; title=&quot;Times' story on the topic.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A recent study&lt;/a&gt; led by an M.I.T. researcher found that facial recognition software from Microsoft and IBM was much more accurate in identifying white men than darker-skinned females. Mr. Smith said the company was working to improve the accuracy of its facial recognition and to reduce the potential for bias.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;He also said Microsoft had rejected facial recognition requests from certain customers “where we’ve concluded that there are greater human rights risks,” and that the company was committed to “establishing a transparent set of principles” for the technology.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Microsoft employees recently protested the company’s contract with Immigration and Customs Enforcement, the federal agency that has been involved in the separation of migrant children from their families at the border. In his blog post, Mr. Smith wrote that the company’s contract with that agency “isn’t being used for facial recognition” or to separate families.&lt;/p&gt;
&lt;p class=&quot;css-1i0edl6 e2kc3sl0&quot;&gt;Ms. Isenhower, the Microsoft spokeswoman, declined to answer questions about whether the company provided facial recognition services to other government agencies or whether it had put any specific restrictions on its customers’ use of the technology. She also declined to discuss the company’s position on consumer consent for facial recognition.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-14jsv4e&quot;/&gt;&lt;/div&gt;&lt;div readability=&quot;25.666666666667&quot;&gt;

&lt;div class=&quot;css-3glrhn&quot; readability=&quot;7.21875&quot;&gt;A version of this article appears in print on , on Page B1 of the New York edition with the headline: Microsoft Urges Rules for Facial Recognition&lt;span&gt;. &lt;a href=&quot;http://www.nytreprints.com/&quot;&gt;Order Reprints&lt;/a&gt; | &lt;a href=&quot;http://www.nytimes.com/pages/todayspaper/index.html&quot;&gt;Today’s Paper&lt;/a&gt; | &lt;a href=&quot;https://www.nytimes.com/subscriptions/Multiproduct/lp8HYKU.html?campaignId=48JQY&quot;&gt;Subscribe&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;</description>
<pubDate>Fri, 13 Jul 2018 15:51:55 +0000</pubDate>
<dc:creator>doener</dc:creator>
<og:url>https://www.nytimes.com/2018/07/13/technology/microsoft-facial-recognition.html</og:url>
<og:type>article</og:type>
<og:title>Microsoft Urges Congress to Regulate Use of Facial Recognition</og:title>
<og:image>https://static01.nyt.com/images/2018/07/14/business/14MICROSOFT-3/14MICROSOFT-3-facebookJumbo-v4.jpg</og:image>
<og:description>Amid a growing call for governments to rein in the use of the technology, Microsoft became the first tech giant to join the chorus.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2018/07/13/technology/microsoft-facial-recognition.html</dc:identifier>
</item>
<item>
<title>‘Find Your Passion’ Is Awful Advice</title>
<link>https://www.theatlantic.com/science/archive/2018/07/find-your-passion-is-terrible-advice/564932/?single_page=true</link>
<guid isPermaLink="true" >https://www.theatlantic.com/science/archive/2018/07/find-your-passion-is-terrible-advice/564932/?single_page=true</guid>
<description>&lt;section class=&quot;l-article__section s-cms-content&quot; itemprop=&quot;articleBody&quot; id=&quot;article-section-0&quot;&gt;&lt;p&gt;Carol Dweck, a psychology professor at Stanford University, remembers asking an undergraduate seminar recently, “How many of you are waiting to find your passion?”&lt;/p&gt;
&lt;p&gt;“Almost all of them raised their hand and got dreamy looks in their eyes,” she told me. They talked about it “like a tidal wave would sweep over them,” he said. &lt;em&gt;Sploosh. Huzzah! It’s accounting!&lt;/em&gt;&lt;/p&gt;


&lt;p&gt;Would they have unlimited motivation for their passion? They nodded solemnly.&lt;/p&gt;
&lt;p&gt;“I hate to burst your balloon,” she said, “but it doesn’t usually happen that way.”&lt;/p&gt;
&lt;p&gt;What Dweck asked her students is a common refrain in American society. The term “Follow your passion” &lt;a href=&quot;http://journals.sagepub.com/doi/abs/10.1177/0146167215596988?journalCode=pspc&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'0',r'564932'&quot;&gt;has increased&lt;/a&gt; ninefold in English books since 1990. “Find something you love to do and you’ll never have to work a day in your life” is another college-counseling standby of &lt;a href=&quot;https://quoteinvestigator.com/2014/09/02/job-love/&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'1',r'564932'&quot;&gt;unknown provenance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But according to Dweck and others, that advice is steering people wrong.&lt;/p&gt;
&lt;p&gt;“What are the consequences of that?” asked Paul O’Keefe, an assistant professor of psychology at Yale—NUS College. “That means that if you do something that feels like work, it means you don’t love it.” He gave me the example of a student who jumps from lab to lab, trying to find one whose research topic feels like her passion. “It’s this idea that if I’m not completely overwhelmed by emotion when I walk into a lab, then it won’t be my passion or my interest.”&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;l-article__section s-cms-content&quot; itemprop=&quot;articleBody&quot; id=&quot;article-section-1&quot;&gt;&lt;p&gt;That’s why he and two co-authors—Dweck and Greg Walton of Stanford—recently performed a study that suggests it might be time to change the way we think about our interests. Passions aren’t “found,” they argue. They’re developed.&lt;/p&gt;

&lt;p&gt;In a &lt;a href=&quot;http://mindsets-and-motivation-lab.commons.yale-nus.edu.sg/wp-content/uploads/sites/39/2018/06/PSCI-15-2069-PubMed.pdf&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'2',r'564932'&quot;&gt;paper that is forthcoming in &lt;em&gt;Psychological Science&lt;/em&gt;&lt;/a&gt;, the authors delineate the difference between the two mind-sets. One is a “fixed theory of interests”—the idea that core interests are there from birth, just waiting to be discovered—and the other is a “growth theory,” the idea that interests are something anyone can cultivate over time.&lt;/p&gt;

&lt;p&gt;To examine how these different mind-sets affect our pursuit of different topics, the authors performed a series of studies on college students—a group that’s frequently advised to find their passion in the form of a major or career path.&lt;/p&gt;
&lt;p&gt;First, students answered a survey that would categorize them as either “techy”—slang for interested in math and science—or “fuzzy,” meaning interested in the arts or humanities. They also filled out a survey determining how much they agreed with the idea that people’s core interests don’t change over time. They then read an article that mismatched their interests—a piece on the future of algorithms for the fuzzies, and a piece on Derrida for the techies. The more the participants endorsed a “fixed” theory of interests, the less interested they were in the article that mismatched their aforementioned identity as a techy or fuzzy.&lt;/p&gt;
&lt;p&gt;The authors then repeated a similar procedure, but they had students read first about either the fixed theory of interests or the growth theory. Again, those who learned that interests are fixed throughout a person’s life were less captivated by an article that mismatched their interests.&lt;/p&gt;

&lt;p&gt;The authors believe this could mean that students who have fixed theories of interest might forgo interesting lectures or opportunities because they don’t align with their previously stated passions. Or that they might overlook ways that other disciplines can intersect with their own.&lt;/p&gt;
&lt;p&gt;“If passions are things found fully formed, and your job is to look around the world for your passion—it’s a crazy thought,” Walton told me. “It doesn’t reflect the way I or my students experience school, where you go to a class and have a lecture or a conversation, and you think, &lt;em&gt;That’s interesting&lt;/em&gt;. It’s through a process of investment and development that you develop an abiding passion in a field.”&lt;/p&gt;
&lt;p&gt;Another reason not to buy into the fixed theory is that it can cause people to give up too easily. If something becomes difficult, it’s easy to assume that it simply must not have been your passion, after all. In one portion of this study, the students who thought interests were fixed were also less likely to think that pursuing a passion would be difficult at times. Instead, they thought it would provide “endless motivation.”&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;l-article__section s-cms-content&quot; itemprop=&quot;articleBody&quot; id=&quot;article-section-2&quot;&gt;
&lt;p&gt;Dweck, one of the paper’s authors, has previously studied different types of mind-sets as they relate to intelligence. People who have a growth mind-set about their own intelligence tend to be less afraid of failure, &lt;a href=&quot;https://en.wikipedia.org/wiki/Carol_Dweck#Mindset&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'3',r'564932'&quot;&gt;according to her research&lt;/a&gt;, because they believe smarts are cultivated, not inherent. Interests are related to, but distinct from, abilities, the study authors told me: You can be interested in something but not very good at it. “I’ve been playing guitar for 25 years, but I can’t say that my abilities have gotten that much better in the past 10 years,” O’Keefe said.&lt;/p&gt;
&lt;p&gt;Dweck told me that “find your passion” has a laudable history. “Before that, people were saying, ‘Find your genius,’ and that was so intimidating. It implied that only people who were really brilliant at something could succeed,” she said. “‘Find your passion’ felt more democratic. Everybody can have an interest.” But this study suggests that even the idea of finding your “true” interest can intimidate people and keep them from digging further into a field.&lt;/p&gt;

&lt;p&gt;The authors also had students learn about either fixed or growth theory and then exposed them to a new interest: Astronomy. First, they had them watch a video made by &lt;em&gt;The Guardian&lt;/em&gt; for a general audience about Stephen Hawking’s ideas. It was easy to understand and entertaining. Then the authors had the students read a highly technical, challenging article in the academic journal &lt;em&gt;Science&lt;/em&gt; about black holes. Despite saying just moments ago, after viewing the video, that they were fascinated by black holes, the students who were exposed to the fixed theory of interests said they were no longer interested in black holes after reading the difficult &lt;em&gt;Science&lt;/em&gt; article. In other words, when you’re told that your interests are somehow ingrained, you give up on new interests as soon as the going gets tough.&lt;/p&gt;
&lt;p&gt;This study was a preregistered replication, meaning the authors stated at the outset what their hypothesis and methods would be. This process is meant to prevent &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_dredging&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'4',r'564932'&quot;&gt;p-hacking&lt;/a&gt;, a shady data practice that has cast a shadow over many psychology studies in recent years.&lt;/p&gt;

&lt;p&gt;K. Ann Renninger, a professor at Swarthmore College who was not involved with the study, has researched the development of interests and said that “neuroscience has confirmed that interests can be supported to develop.” In other words, with the right help, most people can get interested in almost anything. Before the age of 8, she said, kids will try anything. Between the ages of 8 and 12, they start to compare themselves with others and become insecure if they’re not as good as their peers at something. That’s when educators have to start to find new ways to keep them interested in certain subjects.&lt;/p&gt;
&lt;p&gt;Though the authors didn’t examine adults, they told me their findings could apply to an older population as well. For example, people’s interest in parenthood tends to escalate rapidly once they have a real, crying baby in their house. “You could not know the first thing about cancer, but if your mother gets cancer, you’re going to be an expert in it pretty darn quick,” O’Keefe said.&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;l-article__section s-cms-content&quot; itemprop=&quot;articleBody&quot; id=&quot;article-section-3&quot;&gt;&lt;p&gt;A &lt;a href=&quot;http://journals.sagepub.com/doi/abs/10.1177/0146167215596988?journalCode=pspc&quot; data-omni-click=&quot;r'article',r'',d,r'intext',r'5',r'564932'&quot;&gt;different study&lt;/a&gt; done on adults’ views toward passions suggests that people who think passions are found tend to pick jobs that fit them well from the outset. They prioritize enjoyment over good pay. People who think passions are developed, meanwhile, prioritize other goals over immediate enjoyment at work, and they “grow to fit their vocations better over time,” the authors of that study write. “In conclusion,” they add, “people who have not found their perfect fit in a career can take heart—there is more than one way to attain passion for work.”&lt;/p&gt;

&lt;p&gt;How to cultivate a “growth” mind-set in the young, future-psychology-experiment subjects of America? If you’re a parent, you can avoid dropping new hobbies as soon as they become difficult. (Your kids might take note if you do, O’Keefe said.)&lt;/p&gt;
&lt;p&gt;Beyond that, there’s not a clear way to develop a growth mind-set about interests, other than knowing that it’s a valid way to think, and that your passion might still be around the corner.&lt;/p&gt;
&lt;p&gt;“We’re just trying to pull the veil back on the hidden implications of things like, ‘find your passion,’” Walton said. “Is that really how things work? A little bit of knowledge is power.”&lt;/p&gt;
&lt;section class=&quot;c-letters-cta&quot;&gt;&lt;p class=&quot;c-letters-cta__text&quot;&gt;We want to hear what you think. &lt;a href=&quot;https://www.theatlantic.com/contact/letters/&quot; class=&quot;c-letters-cta__link&quot;&gt;Submit a letter&lt;/a&gt; to the editor or write to letters@theatlantic.com.&lt;/p&gt;
&lt;/section&gt;

&lt;address id=&quot;article-writer-0&quot; class=&quot;c-article-writer lazyload&quot; data-author-id=&quot;5095&quot; data-omni-click=&quot;r'article',r'',d,r'olga-khazan',@href&quot; data-include=&quot;css:https://cdn.theatlantic.com/assets/static/b/frontend/dist/theatlantic/css/components/article-writer.ccce81ff6d92.css&quot; itemprop=&quot;author&quot; itemtype=&quot;https://schema.org/Person&quot; itemscope=&quot;&quot;/&gt;
&lt;div class=&quot;c-article-writer__image&quot; itemprop=&quot;image&quot; itemtype=&quot;http://schema.org/ImageObject&quot; itemscope=&quot;&quot;&gt;


&lt;a class=&quot;o-media__object&quot; href=&quot;https://www.theatlantic.com/author/olga-khazan/&quot; title=&quot;Olga Khazan's writer page&quot; data-omni-click=&quot;inherit&quot;&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img class=&quot;c-article-writer__img o-media__img&quot; src=&quot;https://cdn.theatlantic.com/assets/media/None/smaller_bw_edited/200.jpg?mod=1522336568&quot; alt=&quot;&quot; itemprop=&quot;contentUrl&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;img class=&quot;c-article-writer__img o-media__img lazyload&quot; data-src=&quot;https://cdn.theatlantic.com/assets/media/None/smaller_bw_edited/200.jpg?mod=1522336568&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;c-article-writer__content&quot;&gt;
&lt;div class=&quot;c-article-writer__bio&quot; itemprop=&quot;description&quot;&gt;&lt;a href=&quot;https://www.theatlantic.com/author/olga-khazan/&quot; class=&quot;author-link&quot; data-omni-click=&quot;inherit&quot;&gt;Olga Khazan&lt;/a&gt; is a staff writer at &lt;em&gt;The Atlantic&lt;/em&gt;.&lt;/div&gt;
&lt;div class=&quot;c-article-writer__social&quot;&gt;&lt;a class=&quot;c-article-writer__social-link&quot; href=&quot;https://facebook.com/olgakhazanwriting&quot; data-omni-click=&quot;r'article',r'',d,r'article-writer-facebook',r'olga-khazan',r'564932'&quot; itemprop=&quot;sameAs&quot; title=&quot;Olga Khazan's Facebook Profile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;c-article-writer__social-link-name&quot;&gt;Facebook&lt;/span&gt;&lt;/a&gt; &lt;a class=&quot;c-article-writer__social-link&quot; href=&quot;https://twitter.com/olgakhazan&quot; data-omni-click=&quot;r'article',r'',d,r'article-writer-twitter',r'olga-khazan',r'564932'&quot; itemprop=&quot;sameAs&quot; title=&quot;Olga Khazan's Twitter Profile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;span class=&quot;c-article-writer__social-link-name&quot;&gt;Twitter&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;</description>
<pubDate>Fri, 13 Jul 2018 14:17:39 +0000</pubDate>
<dc:creator>theothermkn</dc:creator>
<og:title>‘Find Your Passion’ Is Awful Advice</og:title>
<og:type>article</og:type>
<og:url>https://www.theatlantic.com/science/archive/2018/07/find-your-passion-is-terrible-advice/564932/</og:url>
<og:image>https://cdn.theatlantic.com/assets/media/img/mt/2018/07/RTR1MQDL/facebook.jpg?1531338209</og:image>
<og:description>A major new study questions the common wisdom about how we should choose our careers.</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theatlantic.com/science/archive/2018/07/find-your-passion-is-terrible-advice/564932/?single_page=true</dc:identifier>
</item>
<item>
<title>Digital Exile: How I Got Banned for Life from AirBnB</title>
<link>https://medium.com/@jacksoncunningham/digital-exile-how-i-got-banned-for-life-from-airbnb-615434c6eeba</link>
<guid isPermaLink="true" >https://medium.com/@jacksoncunningham/digital-exile-how-i-got-banned-for-life-from-airbnb-615434c6eeba</guid>
<description>&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*lfFsZKCyj5HSvBY5&quot; data-width=&quot;1241&quot; data-height=&quot;667&quot; data-is-featured=&quot;true&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*lfFsZKCyj5HSvBY5&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*lfFsZKCyj5HSvBY5&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;0ffc&quot; id=&quot;0ffc&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;A few months ago, I received a cryptic message from AirBnB that sounded like something straight out that Black Mirror episode with Jon Hamm.&lt;/p&gt;
&lt;blockquote name=&quot;6a49&quot; id=&quot;6a49&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;
&lt;p&gt;Dear Jackson,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote name=&quot;d2e5&quot; id=&quot;d2e5&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;We regret to inform you that we’ll be unable to support your account moving forward, and have exercised our discretion under our Terms of Service to disable your account(s). &lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;This decision is irreversible&lt;/strong&gt; and will affect any duplicated or future accounts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote name=&quot;f24b&quot; id=&quot;f24b&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;Please understand that &lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;we are not obligated to provide an explanation&lt;/strong&gt; for the action taken against your account. Furthermore, we are not liable to you in any way with respect to disabling or canceling your account. Airbnb reserves the right to make the final determination with respect to such matters, and &lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;this decision will not be reversed&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*EjgzHee-A0Tjrgxi&quot; data-width=&quot;268&quot; data-height=&quot;225&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*EjgzHee-A0Tjrgxi&quot;/&gt;&lt;/div&gt;
blocked
&lt;p name=&quot;f92e&quot; id=&quot;f92e&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;At first, I wasn’t concerned. Surely there must be a misunderstanding. After all, I’ve been a loyal AirBnB evangelist from the early days. I referred dozens of friends when it first launched. I even convinced my parents to list their vacation properties.&lt;/p&gt;
&lt;p name=&quot;0f40&quot; id=&quot;0f40&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;After reaching out to support, I received the following unsettling email.&lt;/p&gt;
&lt;blockquote name=&quot;6409&quot; id=&quot;6409&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;
&lt;p&gt;Hi Jackson,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote name=&quot;32aa&quot; id=&quot;32aa&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Please understand that &lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;we are not obligated to provide an explanation&lt;/strong&gt; for the action taken against your account. Additionally, &lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;we consider this matter closed and will no longer reply to any inquiries regarding your account.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;24d4&quot; id=&quot;24d4&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Okay, this is a tough spot. Somehow I’ve violated the terms of service, but they won’t tell me which ones. And I can’t communicate with them anymore.&lt;/p&gt;
&lt;p name=&quot;8c37&quot; id=&quot;8c37&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Seems a little harsh.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*aOoLD6WiK6QhqL5_63eZrA.jpeg&quot; data-width=&quot;620&quot; data-height=&quot;343&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*aOoLD6WiK6QhqL5_63eZrA.jpeg&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;4107&quot; id=&quot;4107&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;At this point, I was pretty shocked but also very curious about what I could have possibly done. After carefully reading the &lt;a href=&quot;https://www.airbnb.com/terms&quot; data-href=&quot;https://www.airbnb.com/terms&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;AirBnB terms of service&lt;/a&gt; and reading about the most common ways people get banned from AirBnB, I went through each of my bookings. My first thought was that I must have inadvertently paid one of the hosts in cash because this is the #1 reason why people get banned. But I confirmed that all my bookings were paid through AirBnB. No foul play there.&lt;/p&gt;
&lt;p name=&quot;3321&quot; id=&quot;3321&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;After discussing with my girlfriend, the only thing we could think of was that we had recently had a very uncomfortable AirBnB experience with a rude host.&lt;/p&gt;
&lt;h4 name=&quot;e7ab&quot; id=&quot;e7ab&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Here’s a brief summary of the incident that likely got me banned.&lt;/h4&gt;
&lt;p name=&quot;31a7&quot; id=&quot;31a7&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;After booking the weekend, we were told that we’d need to vacate the premises from 12–4pm because the room was located in a spa retreat.&lt;/p&gt;
&lt;p name=&quot;c65e&quot; id=&quot;c65e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The conflict arose when the host entered the room an hour early, unannounced. She forgot to let us know she’d be coming an hour early with spa guests. We weren’t dressed but she continued setting up while we eventually scurried outside in front of the spa guests.&lt;/p&gt;
&lt;p name=&quot;e29a&quot; id=&quot;e29a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;When the trip was over, we decided not to leave a review after giving her the benefit of the doubt that it was just a bad day. The property itself was great.&lt;/p&gt;
&lt;p name=&quot;49d9&quot; id=&quot;49d9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A few weeks later, I saw that the host left me a critical review with completely distorted details from what had actually happened.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*vF4YuO3dYyOUNklH&quot; data-width=&quot;770&quot; data-height=&quot;331&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*vF4YuO3dYyOUNklH&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*vF4YuO3dYyOUNklH&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;5225&quot; id=&quot;5225&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;I emailed AirBnB to report that the host had fabricated details in her review — details which could be proven within the AirBnB platform. But I was told it’s against their policy to censor reviews, even if they’re dishonest.&lt;/p&gt;
&lt;p name=&quot;805c&quot; id=&quot;805c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Because the review period had passed on AirBnB and I felt the need to do some justice to my side of the story, I left a review on Google instead. The host has received a number of similar complaints so it definitely wasn’t an isolated incident.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*ZiRvqmzxuAljq3Fy&quot; data-width=&quot;652&quot; data-height=&quot;487&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*ZiRvqmzxuAljq3Fy&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*3E5byfiW0CmVWyKZ&quot; data-width=&quot;768&quot; data-height=&quot;306&quot; data-action=&quot;zoom&quot; data-action-value=&quot;0*3E5byfiW0CmVWyKZ&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/0*3E5byfiW0CmVWyKZ&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;2a94&quot; id=&quot;2a94&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;I still can’t believe that leaving an offsite review was a bannable offense, but even more disturbing to me is the way AirBnB handled the situation with a one-sided, permanent, irreversible, closed book suspension.&lt;/p&gt;
&lt;p name=&quot;3fb4&quot; id=&quot;3fb4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The part that’s especially poetic to me is that AirBnB touts a firm brand message of community and connectedness with their “Belong Anywhere” campaigns but the frightening reality is that any individual user is completely disposable, without a shred of appeal to due process. I’m really thankful that I wasn’t reliant on AirBnB income like so many of my friends.&lt;/p&gt;
&lt;p name=&quot;1079&quot; id=&quot;1079&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;But let’s call it like it is&lt;/strong&gt;. This policy leverages the company’s power over the individual user to a cruel and unprecedented extent. And it’s in laughable contradiction to the &lt;a href=&quot;https://press.atairbnb.com/about-us/&quot; data-href=&quot;https://press.atairbnb.com/about-us/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;brand’s inflated idealism&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*5cYYNlSvybxCrBF1kcIADA.jpeg&quot; data-width=&quot;818&quot; data-height=&quot;460&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*5cYYNlSvybxCrBF1kcIADA.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*5cYYNlSvybxCrBF1kcIADA.jpeg&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;3fd8&quot; id=&quot;3fd8&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;After emailing AirBnB support and its founders multiple times, I’ve finally given up.&lt;/p&gt;
&lt;p name=&quot;c698&quot; id=&quot;c698&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Moving forward, I question whether these types of suspensions should be allowed from the tech giants without any oversight or regulation. At what point does a company become pervasive enough in everyday life that they owe users an explanation or warning before dropping the guillotine? Or is this all part of an ongoing trend, toward something like the &lt;a href=&quot;https://www.buzzfeed.com/mattstoller2/as-democracy-suffers-digital-dictators-are-seizing-power&quot; data-href=&quot;https://www.buzzfeed.com/mattstoller2/as-democracy-suffers-digital-dictators-are-seizing-power&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;Chinese Social Credit Score system&lt;/a&gt;, where the consequences of not maintaining a high rating are socially crippling?&lt;/p&gt;
&lt;p name=&quot;f957&quot; id=&quot;f957&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We’re becoming increasingly dependent on a handful of major tech giants to get through our basic daily routine. Imagine waking up one day and no longer being able to check your Gmail, buy things on Amazon, or book an Uber.&lt;/p&gt;
&lt;p name=&quot;9a17&quot; id=&quot;9a17&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It all feels very 1984. Or Black Mirror. The one with Jon Hamm.&lt;/p&gt;
&lt;p name=&quot;3b02&quot; id=&quot;3b02&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;— —&lt;/p&gt;
&lt;h4 name=&quot;421b&quot; id=&quot;421b&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Let me know if you enjoyed this article by hitting the applause button or leaving a comment below. It would mean a lot.&lt;/h4&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*cSZooi744b7FeELMIPBOjg.gif&quot; data-width=&quot;245&quot; data-height=&quot;150&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*cSZooi744b7FeELMIPBOjg.gif&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 13 Jul 2018 14:04:37 +0000</pubDate>
<dc:creator>ancarda</dc:creator>
<og:title>Digital Exile: How I Got Banned for Life from AirBnB</og:title>
<og:url>https://medium.com/@jacksoncunningham/digital-exile-how-i-got-banned-for-life-from-airbnb-615434c6eeba</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/0*lfFsZKCyj5HSvBY5</og:image>
<og:description>A few months ago, I received a cryptic message from AirBnB that sounded like something straight out that Black Mirror episode with Jon…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@jacksoncunningham/digital-exile-how-i-got-banned-for-life-from-airbnb-615434c6eeba</dc:identifier>
</item>
<item>
<title>Learn how to design large-scale systems</title>
<link>https://github.com/donnemartin/system-design-primer</link>
<guid isPermaLink="true" >https://github.com/donnemartin/system-design-primer</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/README.md&quot;&gt;English&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/README-ja.md&quot;&gt;日本語&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md&quot;&gt;简体中文&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/README-zh-TW.md&quot;&gt;繁體中文&lt;/a&gt; | &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/40&quot;&gt;Brazilian Portuguese&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/130&quot;&gt;Greek&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/104&quot;&gt;Italian&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/102&quot;&gt;Korean&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/110&quot;&gt;Persian&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/68&quot;&gt;Polish&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/87&quot;&gt;Russian&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/136&quot;&gt;Spanish&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/39&quot;&gt;Turkish&lt;/a&gt; ∙ &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/127&quot;&gt;Vietnamese&lt;/a&gt; | &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/28&quot;&gt;Add Translation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/e45e39c36eebcc4c66e1aecd4e4145112d8e88e3/687474703a2f2f692e696d6775722e636f6d2f6a6a3341354e382e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/e45e39c36eebcc4c66e1aecd4e4145112d8e88e3/687474703a2f2f692e696d6775722e636f6d2f6a6a3341354e382e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/jj3A5N8.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn how to design large-scale systems.&lt;/p&gt;
&lt;p&gt;Prep for the system design interview.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Learn how to design large-scale systems&lt;/h3&gt;
&lt;p&gt;Learning how to design scalable systems will help you become a better engineer.&lt;/p&gt;
&lt;p&gt;System design is a broad topic. There is a &lt;strong&gt;vast amount of resources scattered throughout the web&lt;/strong&gt; on system design principles.&lt;/p&gt;
&lt;p&gt;This repo is an &lt;strong&gt;organized collection&lt;/strong&gt; of resources to help you learn how to build systems at scale.&lt;/p&gt;
&lt;h3&gt;Learn from the open source community&lt;/h3&gt;
&lt;p&gt;This is an early draft of a continually updated, open source project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer#contributing&quot;&gt;Contributions&lt;/a&gt; are welcome!&lt;/p&gt;
&lt;h3&gt;Prep for the system design interview&lt;/h3&gt;
&lt;p&gt;In addition to coding interviews, system design is a &lt;strong&gt;required component&lt;/strong&gt; of the &lt;strong&gt;technical interview process&lt;/strong&gt; at many tech companies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Practice common system design interview questions&lt;/strong&gt; and &lt;strong&gt;compare&lt;/strong&gt; your results with &lt;strong&gt;sample solutions&lt;/strong&gt;: discussions, code, and diagrams.&lt;/p&gt;
&lt;p&gt;Additional topics for interview prep:&lt;/p&gt;
&lt;h2&gt;Anki flashcards&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/75b5cf737556050871218226ea211256f19f3a40/687474703a2f2f692e696d6775722e636f6d2f7a6443416b42332e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/75b5cf737556050871218226ea211256f19f3a40/687474703a2f2f692e696d6775722e636f6d2f7a6443416b42332e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/zdCAkB3.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The provided &lt;a href=&quot;https://apps.ankiweb.net/&quot; rel=&quot;nofollow&quot;&gt;Anki flashcard decks&lt;/a&gt; use spaced repetition to help you retain key system design concepts.&lt;/p&gt;
&lt;p&gt;Great for use while on-the-go.&lt;/p&gt;
&lt;h3&gt;Coding Resource: Interactive Coding Challenges&lt;/h3&gt;
&lt;p&gt;Looking for resources to help you prep for the &lt;a href=&quot;https://github.com/donnemartin/interactive-coding-challenges&quot;&gt;&lt;strong&gt;Coding Interview&lt;/strong&gt;&lt;/a&gt;?&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/473700c20356af5875155f24d3a26b57ae940bdc/687474703a2f2f692e696d6775722e636f6d2f6234597441454e2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/473700c20356af5875155f24d3a26b57ae940bdc/687474703a2f2f692e696d6775722e636f6d2f6234597441454e2e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/b4YtAEN.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Check out the sister repo &lt;a href=&quot;https://github.com/donnemartin/interactive-coding-challenges&quot;&gt;&lt;strong&gt;Interactive Coding Challenges&lt;/strong&gt;&lt;/a&gt;, which contains an additional Anki deck:&lt;/p&gt;
&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn from the community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Feel free to submit pull requests to help:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Fix errors&lt;/li&gt;
&lt;li&gt;Improve sections&lt;/li&gt;
&lt;li&gt;Add new sections&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/issues/28&quot;&gt;Translate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Content that needs some polishing is placed &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#under-development&quot;&gt;under development&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Review the &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/CONTRIBUTING.md&quot;&gt;Contributing Guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Index of system design topics&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Summaries of various system design topics, including pros and cons. &lt;strong&gt;Everything is a trade-off&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Each section contains links to more in-depth resources.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/14f76dab28dfbfa12ea6b02c6bd0ec726fc17306/687474703a2f2f692e696d6775722e636f6d2f6a7255424146372e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/14f76dab28dfbfa12ea6b02c6bd0ec726fc17306/687474703a2f2f692e696d6775722e636f6d2f6a7255424146372e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/jrUBAF7.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Study guide&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Suggested topics to review based on your interview timeline (short, medium, long).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/eb92600aa3bb1314b33edd0204da8428d4d3a493/687474703a2f2f692e696d6775722e636f6d2f4f66566c6c65782e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/eb92600aa3bb1314b33edd0204da8428d4d3a493/687474703a2f2f692e696d6775722e636f6d2f4f66566c6c65782e706e67&quot; alt=&quot;Imgur&quot; data-canonical-src=&quot;http://i.imgur.com/OfVllex.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q: For interviews, do I need to know everything here?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: No, you don't need to know everything here to prepare for the interview&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What you are asked in an interview depends on variables such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;How much experience you have&lt;/li&gt;
&lt;li&gt;What your technical background is&lt;/li&gt;
&lt;li&gt;What positions you are interviewing for&lt;/li&gt;
&lt;li&gt;Which companies you are interviewing with&lt;/li&gt;
&lt;li&gt;Luck&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;More experienced candidates are generally expected to know more about system design. Architects or team leads might be expected to know more than individual contributors. Top tech companies are likely to have one or more design interview rounds.&lt;/p&gt;
&lt;p&gt;Start broad and go deeper in a few areas. It helps to know a little about various key system design topics. Adjust the following guide based on your timeline, experience, what positions you are interviewing for, and which companies you are interviewing with.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Short timeline&lt;/strong&gt; - Aim for &lt;strong&gt;breadth&lt;/strong&gt; with system design topics. Practice by solving &lt;strong&gt;some&lt;/strong&gt; interview questions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Medium timeline&lt;/strong&gt; - Aim for &lt;strong&gt;breadth&lt;/strong&gt; and &lt;strong&gt;some depth&lt;/strong&gt; with system design topics. Practice by solving &lt;strong&gt;many&lt;/strong&gt; interview questions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Long timeline&lt;/strong&gt; - Aim for &lt;strong&gt;breadth&lt;/strong&gt; and &lt;strong&gt;more depth&lt;/strong&gt; with system design topics. Practice by solving &lt;strong&gt;most&lt;/strong&gt; interview questions.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;How to approach a system design interview question&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;How to tackle a system design interview question.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The system design interview is an &lt;strong&gt;open-ended conversation&lt;/strong&gt;. You are expected to lead it.&lt;/p&gt;
&lt;p&gt;You can use the following steps to guide the discussion. To help solidify this process, work through the &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#system-design-interview-questions-with-solutions&quot;&gt;System design interview questions with solutions&lt;/a&gt; section using the following steps.&lt;/p&gt;
&lt;h3&gt;Step 1: Outline use cases, constraints, and assumptions&lt;/h3&gt;
&lt;p&gt;Gather requirements and scope the problem. Ask questions to clarify use cases and constraints. Discuss assumptions.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Who is going to use it?&lt;/li&gt;
&lt;li&gt;How are they going to use it?&lt;/li&gt;
&lt;li&gt;How many users are there?&lt;/li&gt;
&lt;li&gt;What does the system do?&lt;/li&gt;
&lt;li&gt;What are the inputs and outputs of the system?&lt;/li&gt;
&lt;li&gt;How much data do we expect to handle?&lt;/li&gt;
&lt;li&gt;How many requests per second do we expect?&lt;/li&gt;
&lt;li&gt;What is the expected read to write ratio?&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Step 2: Create a high level design&lt;/h3&gt;
&lt;p&gt;Outline a high level design with all important components.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Sketch the main components and connections&lt;/li&gt;
&lt;li&gt;Justify your ideas&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Step 3: Design core components&lt;/h3&gt;
&lt;p&gt;Dive into details for each core component. For example, if you were asked to &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/pastebin/README.md&quot;&gt;design a url shortening service&lt;/a&gt;, discuss:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Generating and storing a hash of the full url
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/pastebin/README.md&quot;&gt;MD5&lt;/a&gt; and &lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/pastebin/README.md&quot;&gt;Base62&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hash collisions&lt;/li&gt;
&lt;li&gt;SQL or NoSQL&lt;/li&gt;
&lt;li&gt;Database schema&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Translating a hashed url to the full url
&lt;ul&gt;&lt;li&gt;Database lookup&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;API and object-oriented design&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Step 4: Scale the design&lt;/h3&gt;
&lt;p&gt;Identify and address bottlenecks, given the constraints. For example, do you need the following to address scalability issues?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Load balancer&lt;/li&gt;
&lt;li&gt;Horizontal scaling&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Database sharding&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Discuss potential solutions and trade-offs. Everything is a trade-off. Address bottlenecks using &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#index-of-system-design-topics&quot;&gt;principles of scalable system design&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Back-of-the-envelope calculations&lt;/h3&gt;
&lt;p&gt;You might be asked to do some estimates by hand. Refer to the &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#appendix&quot;&gt;Appendix&lt;/a&gt; for the following resources:&lt;/p&gt;
&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;p&gt;Check out the following links to get a better idea of what to expect:&lt;/p&gt;
&lt;h2&gt;System design interview questions with solutions&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Common system design interview questions with sample discussions, code, and diagrams.&lt;/p&gt;
&lt;p&gt;Solutions linked to content in the &lt;code&gt;solutions/&lt;/code&gt; folder.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Question&lt;/th&gt;
&lt;th/&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Design Pastebin.com (or Bit.ly)&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/pastebin/README.md&quot;&gt;Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Design the Twitter timeline (or Facebook feed)&lt;br/&gt;Design Twitter search (or Facebook search)&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/twitter/README.md&quot;&gt;Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Design a web crawler&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/web_crawler/README.md&quot;&gt;Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Design Mint.com&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/mint/README.md&quot;&gt;Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Design the data structures for a social network&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/social_graph/README.md&quot;&gt;Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Design a key-value store for a search engine&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/query_cache/README.md&quot;&gt;Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Design Amazon's sales ranking by category feature&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/sales_rank/README.md&quot;&gt;Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Design a system that scales to millions of users on AWS&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/scaling_aws/README.md&quot;&gt;Solution&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Add a system design question&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer#contributing&quot;&gt;Contribute&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;Design Pastebin.com (or Bit.ly)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/pastebin/README.md&quot;&gt;View exercise and solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/4aee2d26ebedc20e7fa07a2c30780e332fa29f2c/687474703a2f2f692e696d6775722e636f6d2f346564584730542e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4aee2d26ebedc20e7fa07a2c30780e332fa29f2c/687474703a2f2f692e696d6775722e636f6d2f346564584730542e706e67&quot; alt=&quot;Imgur&quot; data-canonical-src=&quot;http://i.imgur.com/4edXG0T.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Design the Twitter timeline and search (or Facebook feed and search)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/twitter/README.md&quot;&gt;View exercise and solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/14f76dab28dfbfa12ea6b02c6bd0ec726fc17306/687474703a2f2f692e696d6775722e636f6d2f6a7255424146372e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/14f76dab28dfbfa12ea6b02c6bd0ec726fc17306/687474703a2f2f692e696d6775722e636f6d2f6a7255424146372e706e67&quot; alt=&quot;Imgur&quot; data-canonical-src=&quot;http://i.imgur.com/jrUBAF7.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Design a web crawler&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/web_crawler/README.md&quot;&gt;View exercise and solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/ba21a95852d1cf7bb64c8c4622a79d1d5a20d344/687474703a2f2f692e696d6775722e636f6d2f625778507451412e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ba21a95852d1cf7bb64c8c4622a79d1d5a20d344/687474703a2f2f692e696d6775722e636f6d2f625778507451412e706e67&quot; alt=&quot;Imgur&quot; data-canonical-src=&quot;http://i.imgur.com/bWxPtQA.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Design Mint.com&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/mint/README.md&quot;&gt;View exercise and solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/12fea5f9324f74189a9cd983b02239c68615b67e/687474703a2f2f692e696d6775722e636f6d2f563571353776552e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/12fea5f9324f74189a9cd983b02239c68615b67e/687474703a2f2f692e696d6775722e636f6d2f563571353776552e706e67&quot; alt=&quot;Imgur&quot; data-canonical-src=&quot;http://i.imgur.com/V5q57vU.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Design the data structures for a social network&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/social_graph/README.md&quot;&gt;View exercise and solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/16d78e51c2e2949e23122f4c26afe5886f82a96f/687474703a2f2f692e696d6775722e636f6d2f636443763567372e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/16d78e51c2e2949e23122f4c26afe5886f82a96f/687474703a2f2f692e696d6775722e636f6d2f636443763567372e706e67&quot; alt=&quot;Imgur&quot; data-canonical-src=&quot;http://i.imgur.com/cdCv5g7.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Design a key-value store for a search engine&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/query_cache/README.md&quot;&gt;View exercise and solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/b6439861687b9a0fc62d0149a364082643ebaf86/687474703a2f2f692e696d6775722e636f6d2f346a39396d68652e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/b6439861687b9a0fc62d0149a364082643ebaf86/687474703a2f2f692e696d6775722e636f6d2f346a39396d68652e706e67&quot; alt=&quot;Imgur&quot; data-canonical-src=&quot;http://i.imgur.com/4j99mhe.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Design Amazon's sales ranking by category feature&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/sales_rank/README.md&quot;&gt;View exercise and solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/a56f5600f7ae29dc0c2e436b8e4e4b55c44d6894/687474703a2f2f692e696d6775722e636f6d2f4d7a45785030362e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a56f5600f7ae29dc0c2e436b8e4e4b55c44d6894/687474703a2f2f692e696d6775722e636f6d2f4d7a45785030362e706e67&quot; alt=&quot;Imgur&quot; data-canonical-src=&quot;http://i.imgur.com/MzExP06.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Design a system that scales to millions of users on AWS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/scaling_aws/README.md&quot;&gt;View exercise and solution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/e45e39c36eebcc4c66e1aecd4e4145112d8e88e3/687474703a2f2f692e696d6775722e636f6d2f6a6a3341354e382e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/e45e39c36eebcc4c66e1aecd4e4145112d8e88e3/687474703a2f2f692e696d6775722e636f6d2f6a6a3341354e382e706e67&quot; alt=&quot;Imgur&quot; data-canonical-src=&quot;http://i.imgur.com/jj3A5N8.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Object-oriented design interview questions with solutions&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Common object-oriented design interview questions with sample discussions, code, and diagrams.&lt;/p&gt;
&lt;p&gt;Solutions linked to content in the &lt;code&gt;solutions/&lt;/code&gt; folder.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note: This section is under development&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;System design topics: start here&lt;/h2&gt;
&lt;p&gt;New to system design?&lt;/p&gt;
&lt;p&gt;First, you'll need a basic understanding of common principles, learning about what they are, how they are used, and their pros and cons.&lt;/p&gt;
&lt;h3&gt;Step 1: Review the scalability video lecture&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-W9F__D3oY4&quot; rel=&quot;nofollow&quot;&gt;Scalability Lecture at Harvard&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Topics covered:
&lt;ul&gt;&lt;li&gt;Vertical scaling&lt;/li&gt;
&lt;li&gt;Horizontal scaling&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Load balancing&lt;/li&gt;
&lt;li&gt;Database replication&lt;/li&gt;
&lt;li&gt;Database partitioning&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Step 2: Review the scalability article&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lecloud.net/tagged/scalability&quot; rel=&quot;nofollow&quot;&gt;Scalability&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Topics covered:
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Next steps&lt;/h3&gt;
&lt;p&gt;Next, we'll look at high-level trade-offs:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt; vs &lt;strong&gt;scalability&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Latency&lt;/strong&gt; vs &lt;strong&gt;throughput&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt; vs &lt;strong&gt;consistency&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Keep in mind that &lt;strong&gt;everything is a trade-off&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Then we'll dive into more specific topics such as DNS, CDNs, and load balancers.&lt;/p&gt;
&lt;h2&gt;Performance vs scalability&lt;/h2&gt;
&lt;p&gt;A service is &lt;strong&gt;scalable&lt;/strong&gt; if it results in increased &lt;strong&gt;performance&lt;/strong&gt; in a manner proportional to resources added. Generally, increasing performance means serving more units of work, but it can also be to handle larger units of work, such as when datasets grow.&lt;sup&gt;&lt;a href=&quot;http://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html&quot; rel=&quot;nofollow&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Another way to look at performance vs scalability:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you have a &lt;strong&gt;performance&lt;/strong&gt; problem, your system is slow for a single user.&lt;/li&gt;
&lt;li&gt;If you have a &lt;strong&gt;scalability&lt;/strong&gt; problem, your system is fast for a single user but slow under heavy load.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Latency vs throughput&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Latency&lt;/strong&gt; is the time to perform some action or to produce some result.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Throughput&lt;/strong&gt; is the number of such actions or results per unit of time.&lt;/p&gt;
&lt;p&gt;Generally, you should aim for &lt;strong&gt;maximal throughput&lt;/strong&gt; with &lt;strong&gt;acceptable latency&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Availability vs consistency&lt;/h2&gt;
&lt;h3&gt;CAP theorem&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/13719354da7dcd34cd79ff5f8b6306a67bc18261/687474703a2f2f692e696d6775722e636f6d2f62674c4d4932752e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/13719354da7dcd34cd79ff5f8b6306a67bc18261/687474703a2f2f692e696d6775722e636f6d2f62674c4d4932752e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/bgLMI2u.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://robertgreiner.com/2014/08/cap-theorem-revisited&quot; rel=&quot;nofollow&quot;&gt;Source: CAP theorem revisited&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In a distributed computer system, you can only support two of the following guarantees:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt; - Every read receives the most recent write or an error&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt; - Every request receives a response, without guarantee that it contains the most recent version of the information&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Partition Tolerance&lt;/strong&gt; - The system continues to operate despite arbitrary partitioning due to network failures&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Networks aren't reliable, so you'll need to support partition tolerance. You'll need to make a software tradeoff between consistency and availability.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;CP - consistency and partition tolerance&lt;/h4&gt;
&lt;p&gt;Waiting for a response from the partitioned node might result in a timeout error. CP is a good choice if your business needs require atomic reads and writes.&lt;/p&gt;
&lt;h4&gt;AP - availability and partition tolerance&lt;/h4&gt;
&lt;p&gt;Responses return the most recent version of the data available on the a node, which might not be the latest. Writes might take some time to propagate when the partition is resolved.&lt;/p&gt;
&lt;p&gt;AP is a good choice if the business needs allow for &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#eventual-consistency&quot;&gt;eventual consistency&lt;/a&gt; or when the system needs to continue working despite external errors.&lt;/p&gt;
&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Consistency patterns&lt;/h2&gt;
&lt;p&gt;With multiple copies of the same data, we are faced with options on how to synchronize them so clients have a consistent view of the data. Recall the definition of consistency from the &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#cap-theorem&quot;&gt;CAP theorem&lt;/a&gt; - Every read receives the most recent write or an error.&lt;/p&gt;
&lt;h3&gt;Weak consistency&lt;/h3&gt;
&lt;p&gt;After a write, reads may or may not see it. A best effort approach is taken.&lt;/p&gt;
&lt;p&gt;This approach is seen in systems such as memcached. Weak consistency works well in real time use cases such as VoIP, video chat, and realtime multiplayer games. For example, if you are on a phone call and lose reception for a few seconds, when you regain connection you do not hear what was spoken during connection loss.&lt;/p&gt;
&lt;h3&gt;Eventual consistency&lt;/h3&gt;
&lt;p&gt;After a write, reads will eventually see it (typically within milliseconds). Data is replicated asynchronously.&lt;/p&gt;
&lt;p&gt;This approach is seen in systems such as DNS and email. Eventual consistency works well in highly available systems.&lt;/p&gt;
&lt;h3&gt;Strong consistency&lt;/h3&gt;
&lt;p&gt;After a write, reads will see it. Data is replicated synchronously.&lt;/p&gt;
&lt;p&gt;This approach is seen in file systems and RDBMSes. Strong consistency works well in systems that need transactions.&lt;/p&gt;
&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Availability patterns&lt;/h2&gt;
&lt;p&gt;There are two main patterns to support high availability: &lt;strong&gt;fail-over&lt;/strong&gt; and &lt;strong&gt;replication&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Fail-over&lt;/h3&gt;
&lt;h4&gt;Active-passive&lt;/h4&gt;
&lt;p&gt;With active-passive fail-over, heartbeats are sent between the active and the passive server on standby. If the heartbeat is interrupted, the passive server takes over the active's IP address and resumes service.&lt;/p&gt;
&lt;p&gt;The length of downtime is determined by whether the passive server is already running in 'hot' standby or whether it needs to start up from 'cold' standby. Only the active server handles traffic.&lt;/p&gt;
&lt;p&gt;Active-passive failover can also be referred to as master-slave failover.&lt;/p&gt;
&lt;h4&gt;Active-active&lt;/h4&gt;
&lt;p&gt;In active-active, both servers are managing traffic, spreading the load between them.&lt;/p&gt;
&lt;p&gt;If the servers are public-facing, the DNS would need to know about the public IPs of both servers. If the servers are internal-facing, application logic would need to know about both servers.&lt;/p&gt;
&lt;p&gt;Active-active failover can also be referred to as master-master failover.&lt;/p&gt;
&lt;h3&gt;Disadvantage(s): failover&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Fail-over adds more hardware and additional complexity.&lt;/li&gt;
&lt;li&gt;There is a potential for loss of data if the active system fails before any newly written data can be replicated to the passive.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Replication&lt;/h3&gt;
&lt;h4&gt;Master-slave and master-master&lt;/h4&gt;
&lt;p&gt;This topic is further discussed in the &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#database&quot;&gt;Database&lt;/a&gt; section:&lt;/p&gt;
&lt;h2&gt;Domain name system&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/fae27d1291ed38dd120595d692eacd2505cd3a9c/687474703a2f2f692e696d6775722e636f6d2f494f794c6a34692e6a7067&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/fae27d1291ed38dd120595d692eacd2505cd3a9c/687474703a2f2f692e696d6775722e636f6d2f494f794c6a34692e6a7067&quot; data-canonical-src=&quot;http://i.imgur.com/IOyLj4i.jpg&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.slideshare.net/srikrupa5/dns-security-presentation-issa&quot; rel=&quot;nofollow&quot;&gt;Source: DNS security presentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A Domain Name System (DNS) translates a domain name such as &lt;a href=&quot;http://www.example.com&quot; rel=&quot;nofollow&quot;&gt;www.example.com&lt;/a&gt; to an IP address.&lt;/p&gt;
&lt;p&gt;DNS is hierarchical, with a few authoritative servers at the top level. Your router or ISP provides information about which DNS server(s) to contact when doing a lookup. Lower level DNS servers cache mappings, which could become stale due to DNS propagation delays. DNS results can also be cached by your browser or OS for a certain period of time, determined by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_to_live&quot; rel=&quot;nofollow&quot;&gt;time to live (TTL)&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;NS record (name server)&lt;/strong&gt; - Specifies the DNS servers for your domain/subdomain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MX record (mail exchange)&lt;/strong&gt; - Specifies the mail servers for accepting messages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A record (address)&lt;/strong&gt; - Points a name to an IP address.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CNAME (canonical)&lt;/strong&gt; - Points a name to another name or &lt;code&gt;CNAME&lt;/code&gt; (example.com to &lt;a href=&quot;http://www.example.com&quot; rel=&quot;nofollow&quot;&gt;www.example.com&lt;/a&gt;) or to an &lt;code&gt;A&lt;/code&gt; record.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Services such as &lt;a href=&quot;https://www.cloudflare.com/dns/&quot; rel=&quot;nofollow&quot;&gt;CloudFlare&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/route53/&quot; rel=&quot;nofollow&quot;&gt;Route 53&lt;/a&gt; provide managed DNS services. Some DNS services can route traffic through various methods:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://g33kinfo.com/info/archives/2657&quot; rel=&quot;nofollow&quot;&gt;Weighted round robin&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;Prevent traffic from going to servers under maintenance&lt;/li&gt;
&lt;li&gt;Balance between varying cluster sizes&lt;/li&gt;
&lt;li&gt;A/B testing&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Latency-based&lt;/li&gt;
&lt;li&gt;Geolocation-based&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Disadvantage(s): DNS&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Accessing a DNS server introduces a slight delay, although mitigated by caching described above.&lt;/li&gt;
&lt;li&gt;DNS server management could be complex and is generally managed by &lt;a href=&quot;http://superuser.com/questions/472695/who-controls-the-dns-servers/472729&quot; rel=&quot;nofollow&quot;&gt;governments, ISPs, and large companies&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;DNS services have recently come under &lt;a href=&quot;http://dyn.com/blog/dyn-analysis-summary-of-friday-october-21-attack/&quot; rel=&quot;nofollow&quot;&gt;DDoS attack&lt;/a&gt;, preventing users from accessing websites such as Twitter without knowing Twitter's IP address(es).&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Content delivery network&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/853a8603651149c686bf3c504769fc594ff08849/687474703a2f2f692e696d6775722e636f6d2f683954417547492e6a7067&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/853a8603651149c686bf3c504769fc594ff08849/687474703a2f2f692e696d6775722e636f6d2f683954417547492e6a7067&quot; data-canonical-src=&quot;http://i.imgur.com/h9TAuGI.jpg&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;https://www.creative-artworks.eu/why-use-a-content-delivery-network-cdn/&quot; rel=&quot;nofollow&quot;&gt;Source: Why use a CDN&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A content delivery network (CDN) is a globally distributed network of proxy servers, serving content from locations closer to the user. Generally, static files such as HTML/CSS/JS, photos, and videos are served from CDN, although some CDNs such as Amazon's CloudFront support dynamic content. The site's DNS resolution will tell clients which server to contact.&lt;/p&gt;
&lt;p&gt;Serving content from CDNs can significantly improve performance in two ways:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Users receive content at data centers close to them&lt;/li&gt;
&lt;li&gt;Your servers do not have to serve requests that the CDN fulfills&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Push CDNs&lt;/h3&gt;
&lt;p&gt;Push CDNs receive new content whenever changes occur on your server. You take full responsibility for providing content, uploading directly to the CDN and rewriting URLs to point to the CDN. You can configure when content expires and when it is updated. Content is uploaded only when it is new or changed, minimizing traffic, but maximizing storage.&lt;/p&gt;
&lt;p&gt;Sites with a small amount of traffic or sites with content that isn't often updated work well with push CDNs. Content is placed on the CDNs once, instead of being re-pulled at regular intervals.&lt;/p&gt;
&lt;h3&gt;Pull CDNs&lt;/h3&gt;
&lt;p&gt;Pull CDNs grab new content from your server when the first user requests the content. You leave the content on your server and rewrite URLs to point to the CDN. This results in a slower request until the content is cached on the CDN.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_to_live&quot; rel=&quot;nofollow&quot;&gt;time-to-live (TTL)&lt;/a&gt; determines how long content is cached. Pull CDNs minimize storage space on the CDN, but can create redundant traffic if files expire and are pulled before they have actually changed.&lt;/p&gt;
&lt;p&gt;Sites with heavy traffic work well with pull CDNs, as traffic is spread out more evenly with only recently-requested content remaining on the CDN.&lt;/p&gt;
&lt;h3&gt;Disadvantage(s): CDN&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;CDN costs could be significant depending on traffic, although this should be weighed with additional costs you would incur not using a CDN.&lt;/li&gt;
&lt;li&gt;Content might be stale if it is updated before the TTL expires it.&lt;/li&gt;
&lt;li&gt;CDNs require changing URLs for static content to point to the CDN.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Load balancer&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/21caea3d7f67f451630012f657ae59a56709365c/687474703a2f2f692e696d6775722e636f6d2f6838316e39694b2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/21caea3d7f67f451630012f657ae59a56709365c/687474703a2f2f692e696d6775722e636f6d2f6838316e39694b2e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/h81n9iK.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html&quot; rel=&quot;nofollow&quot;&gt;Source: Scalable system design patterns&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Load balancers distribute incoming client requests to computing resources such as application servers and databases. In each case, the load balancer returns the response from the computing resource to the appropriate client. Load balancers are effective at:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Preventing requests from going to unhealthy servers&lt;/li&gt;
&lt;li&gt;Preventing overloading resources&lt;/li&gt;
&lt;li&gt;Helping eliminate single points of failure&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Load balancers can be implemented with hardware (expensive) or with software such as HAProxy.&lt;/p&gt;
&lt;p&gt;Additional benefits include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;SSL termination&lt;/strong&gt; - Decrypt incoming requests and encrypt server responses so backend servers do not have to perform these potentially expensive operations
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session persistence&lt;/strong&gt; - Issue cookies and route a specific client's requests to same instance if the web apps do not keep track of sessions&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To protect against failures, it's common to set up multiple load balancers, either in &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#active-passive&quot;&gt;active-passive&lt;/a&gt; or &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#active-active&quot;&gt;active-active&lt;/a&gt; mode.&lt;/p&gt;
&lt;p&gt;Load balancers can route traffic based on various metrics, including:&lt;/p&gt;
&lt;h3&gt;Layer 4 load balancing&lt;/h3&gt;
&lt;p&gt;Layer 4 load balancers look at info at the &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#communication&quot;&gt;transport layer&lt;/a&gt; to decide how to distribute requests. Generally, this involves the source, destination IP addresses, and ports in the header, but not the contents of the packet. Layer 4 load balancers forward network packets to and from the upstream server, performing &lt;a href=&quot;https://www.nginx.com/resources/glossary/layer-4-load-balancing/&quot; rel=&quot;nofollow&quot;&gt;Network Address Translation (NAT)&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Layer 7 load balancing&lt;/h3&gt;
&lt;p&gt;Layer 7 load balancers look at the &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#communication&quot;&gt;application layer&lt;/a&gt; to decide how to distribute requests. This can involve contents of the header, message, and cookies. Layer 7 load balancers terminates network traffic, reads the message, makes a load-balancing decision, then opens a connection to the selected server. For example, a layer 7 load balancer can direct video traffic to servers that host videos while directing more sensitive user billing traffic to security-hardened servers.&lt;/p&gt;
&lt;p&gt;At the cost of flexibility, layer 4 load balancing requires less time and computing resources than Layer 7, although the performance impact can be minimal on modern commodity hardware.&lt;/p&gt;
&lt;h3&gt;Horizontal scaling&lt;/h3&gt;
&lt;p&gt;Load balancers can also help with horizontal scaling, improving performance and availability. Scaling out using commodity machines is more cost efficient and results in higher availability than scaling up a single server on more expensive hardware, called &lt;strong&gt;Vertical Scaling&lt;/strong&gt;. It is also easier to hire for talent working on commodity hardware than it is for specialized enterprise systems.&lt;/p&gt;
&lt;h4&gt;Disadvantage(s): horizontal scaling&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Scaling horizontally introduces complexity and involves cloning servers
&lt;ul&gt;&lt;li&gt;Servers should be stateless: they should not contain any user-related data like sessions or profile pictures&lt;/li&gt;
&lt;li&gt;Sessions can be stored in a centralized data store such as a &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#database&quot;&gt;database&lt;/a&gt; (SQL, NoSQL) or a persistent &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#cache&quot;&gt;cache&lt;/a&gt; (Redis, Memcached)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Downstream servers such as caches and databases need to handle more simultaneous connections as upstream servers scale out&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Disadvantage(s): load balancer&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;The load balancer can become a performance bottleneck if it does not have enough resources or if it is not configured properly.&lt;/li&gt;
&lt;li&gt;Introducing a load balancer to help eliminate single points of failure results in increased complexity.&lt;/li&gt;
&lt;li&gt;A single load balancer is a single point of failure, configuring multiple load balancers further increases complexity.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Reverse proxy (web server)&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/e88216d0999853426f72b28e41223f43977d22b7/687474703a2f2f692e696d6775722e636f6d2f6e3431417a66662e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/e88216d0999853426f72b28e41223f43977d22b7/687474703a2f2f692e696d6775722e636f6d2f6e3431417a66662e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/n41Azff.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/6/67/Reverse_proxy_h2g2bob.svg&quot; rel=&quot;nofollow&quot;&gt;Source: Wikipedia&lt;/a&gt;&lt;/em&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;A reverse proxy is a web server that centralizes internal services and provides unified interfaces to the public. Requests from clients are forwarded to a server that can fulfill it before the reverse proxy returns the server's response to the client.&lt;/p&gt;
&lt;p&gt;Additional benefits include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Increased security&lt;/strong&gt; - Hide information about backend servers, blacklist IPs, limit number of connections per client&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Increased scalability and flexibility&lt;/strong&gt; - Clients only see the reverse proxy's IP, allowing you to scale servers or change their configuration&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL termination&lt;/strong&gt; - Decrypt incoming requests and encrypt server responses so backend servers do not have to perform these potentially expensive operations
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compression&lt;/strong&gt; - Compress server responses&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caching&lt;/strong&gt; - Return the response for cached requests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Static content&lt;/strong&gt; - Serve static content directly
&lt;ul&gt;&lt;li&gt;HTML/CSS/JS&lt;/li&gt;
&lt;li&gt;Photos&lt;/li&gt;
&lt;li&gt;Videos&lt;/li&gt;
&lt;li&gt;Etc&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Load balancer vs reverse proxy&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Deploying a load balancer is useful when you have multiple servers. Often, load balancers route traffic to a set of servers serving the same function.&lt;/li&gt;
&lt;li&gt;Reverse proxies can be useful even with just one web server or application server, opening up the benefits described in the previous section.&lt;/li&gt;
&lt;li&gt;Solutions such as NGINX and HAProxy can support both layer 7 reverse proxying and load balancing.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Disadvantage(s): reverse proxy&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Introducing a reverse proxy results in increased complexity.&lt;/li&gt;
&lt;li&gt;A single reverse proxy is a single point of failure, configuring multiple reverse proxies (ie a &lt;a href=&quot;https://en.wikipedia.org/wiki/Failover&quot; rel=&quot;nofollow&quot;&gt;failover&lt;/a&gt;) further increases complexity.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Application layer&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/feeb549c5b6e94f65c613635f7166dc26e0c7de7/687474703a2f2f692e696d6775722e636f6d2f7942355359776d2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/feeb549c5b6e94f65c613635f7166dc26e0c7de7/687474703a2f2f692e696d6775722e636f6d2f7942355359776d2e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/yB5SYwm.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://lethain.com/introduction-to-architecting-systems-for-scale/#platform_layer&quot; rel=&quot;nofollow&quot;&gt;Source: Intro to architecting systems for scale&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Separating out the web layer from the application layer (also known as platform layer) allows you to scale and configure both layers independently. Adding a new API results in adding application servers without necessarily adding additional web servers. The &lt;strong&gt;single responsibility principle&lt;/strong&gt; advocates for small and autonomous services that work together. Small teams with small services can plan more aggressively for rapid growth.&lt;/p&gt;
&lt;p&gt;Workers in the application layer also help enable &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#asynchronism&quot;&gt;asynchronism&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Microservices&lt;/h3&gt;
&lt;p&gt;Related to this discussion are &lt;a href=&quot;https://en.wikipedia.org/wiki/Microservices&quot; rel=&quot;nofollow&quot;&gt;microservices&lt;/a&gt;, which can be described as a suite of independently deployable, small, modular services. Each service runs a unique process and communicates through a well-defined, lightweight mechanism to serve a business goal. &lt;sup&gt;&lt;a href=&quot;https://smartbear.com/learn/api-design/what-are-microservices&quot; rel=&quot;nofollow&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Pinterest, for example, could have the following microservices: user profile, follower, feed, search, photo upload, etc.&lt;/p&gt;
&lt;h3&gt;Service Discovery&lt;/h3&gt;
&lt;p&gt;Systems such as &lt;a href=&quot;https://www.consul.io/docs/index.html&quot; rel=&quot;nofollow&quot;&gt;Consul&lt;/a&gt;, &lt;a href=&quot;https://coreos.com/etcd/docs/latest&quot; rel=&quot;nofollow&quot;&gt;Etcd&lt;/a&gt;, and &lt;a href=&quot;http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper&quot; rel=&quot;nofollow&quot;&gt;Zookeeper&lt;/a&gt; can help services find each other by keeping track of registered names, addresses, and ports. &lt;a href=&quot;https://www.consul.io/intro/getting-started/checks.html&quot; rel=&quot;nofollow&quot;&gt;Health checks&lt;/a&gt; help verify service integrity and are often done using an &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#hypertext-transfer-protocol-http&quot;&gt;HTTP&lt;/a&gt; endpoint. Both Consul and Etcd have a built in &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#key-value-store&quot;&gt;key-value store&lt;/a&gt; that can be useful for storing config values and other shared data.&lt;/p&gt;
&lt;h3&gt;Disadvantage(s): application layer&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Adding an application layer with loosely coupled services requires a different approach from an architectural, operations, and process viewpoint (vs a monolithic system).&lt;/li&gt;
&lt;li&gt;Microservices can add complexity in terms of deployments and operations.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Database&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/15a7553727e6da98d0de5e9ca3792f6d2b5e92d4/687474703a2f2f692e696d6775722e636f6d2f586b6d3543587a2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/15a7553727e6da98d0de5e9ca3792f6d2b5e92d4/687474703a2f2f692e696d6775722e636f6d2f586b6d3543587a2e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/Xkm5CXz.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=w95murBkYmU&quot; rel=&quot;nofollow&quot;&gt;Source: Scaling up to your first 10 million users&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Relational database management system (RDBMS)&lt;/h3&gt;
&lt;p&gt;A relational database like SQL is a collection of data items organized in tables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ACID&lt;/strong&gt; is a set of properties of relational database &lt;a href=&quot;https://en.wikipedia.org/wiki/Database_transaction&quot; rel=&quot;nofollow&quot;&gt;transactions&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt; - Each transaction is all or nothing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt; - Any transaction will bring the database from one valid state to another&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt; - Executing transactions concurrently has the same results as if the transactions were executed serially&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt; - Once a transaction has been committed, it will remain so&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are many techniques to scale a relational database: &lt;strong&gt;master-slave replication&lt;/strong&gt;, &lt;strong&gt;master-master replication&lt;/strong&gt;, &lt;strong&gt;federation&lt;/strong&gt;, &lt;strong&gt;sharding&lt;/strong&gt;, &lt;strong&gt;denormalization&lt;/strong&gt;, and &lt;strong&gt;SQL tuning&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Master-slave replication&lt;/h4&gt;
&lt;p&gt;The master serves reads and writes, replicating writes to one or more slaves, which serve only reads. Slaves can also replicate to additional slaves in a tree-like fashion. If the master goes offline, the system can continue to operate in read-only mode until a slave is promoted to a master or a new master is provisioned.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/6a097809b9690236258747d969b1d3e0d93bb8ca/687474703a2f2f692e696d6775722e636f6d2f4339696f47746e2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/6a097809b9690236258747d969b1d3e0d93bb8ca/687474703a2f2f692e696d6775722e636f6d2f4339696f47746e2e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/C9ioGtn.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.slideshare.net/jboner/scalability-availability-stability-patterns/&quot; rel=&quot;nofollow&quot;&gt;Source: Scalability, availability, stability, patterns&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;Disadvantage(s): master-slave replication&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;Additional logic is needed to promote a slave to a master.&lt;/li&gt;
&lt;li&gt;See &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#disadvantages-replication&quot;&gt;Disadvantage(s): replication&lt;/a&gt; for points related to &lt;strong&gt;both&lt;/strong&gt; master-slave and master-master.&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Master-master replication&lt;/h4&gt;
&lt;p&gt;Both masters serve reads and writes and coordinate with each other on writes. If either master goes down, the system can continue to operate with both reads and writes.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/5862604b102ee97d85f86f89edda44bde85a5b7f/687474703a2f2f692e696d6775722e636f6d2f6b7241484c47672e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5862604b102ee97d85f86f89edda44bde85a5b7f/687474703a2f2f692e696d6775722e636f6d2f6b7241484c47672e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/krAHLGg.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.slideshare.net/jboner/scalability-availability-stability-patterns/&quot; rel=&quot;nofollow&quot;&gt;Source: Scalability, availability, stability, patterns&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;Disadvantage(s): master-master replication&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;You'll need a load balancer or you'll need to make changes to your application logic to determine where to write.&lt;/li&gt;
&lt;li&gt;Most master-master systems are either loosely consistent (violating ACID) or have increased write latency due to synchronization.&lt;/li&gt;
&lt;li&gt;Conflict resolution comes more into play as more write nodes are added and as latency increases.&lt;/li&gt;
&lt;li&gt;See &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#disadvantages-replication&quot;&gt;Disadvantage(s): replication&lt;/a&gt; for points related to &lt;strong&gt;both&lt;/strong&gt; master-slave and master-master.&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;Disadvantage(s): replication&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;There is a potential for loss of data if the master fails before any newly written data can be replicated to other nodes.&lt;/li&gt;
&lt;li&gt;Writes are replayed to the read replicas. If there are a lot of writes, the read replicas can get bogged down with replaying writes and can't do as many reads.&lt;/li&gt;
&lt;li&gt;The more read slaves, the more you have to replicate, which leads to greater replication lag.&lt;/li&gt;
&lt;li&gt;On some systems, writing to the master can spawn multiple threads to write in parallel, whereas read replicas only support writing sequentially with a single thread.&lt;/li&gt;
&lt;li&gt;Replication adds more hardware and additional complexity.&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;Source(s) and further reading: replication&lt;/h5&gt;
&lt;h4&gt;Federation&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/6eb6570a8b6b4e1d52e3d7cc07e7959ea5dac75f/687474703a2f2f692e696d6775722e636f6d2f553371563333652e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/6eb6570a8b6b4e1d52e3d7cc07e7959ea5dac75f/687474703a2f2f692e696d6775722e636f6d2f553371563333652e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/U3qV33e.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=w95murBkYmU&quot; rel=&quot;nofollow&quot;&gt;Source: Scaling up to your first 10 million users&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Federation (or functional partitioning) splits up databases by function. For example, instead of a single, monolithic database, you could have three databases: &lt;strong&gt;forums&lt;/strong&gt;, &lt;strong&gt;users&lt;/strong&gt;, and &lt;strong&gt;products&lt;/strong&gt;, resulting in less read and write traffic to each database and therefore less replication lag. Smaller databases result in more data that can fit in memory, which in turn results in more cache hits due to improved cache locality. With no single central master serializing writes you can write in parallel, increasing throughput.&lt;/p&gt;
&lt;h5&gt;Disadvantage(s): federation&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;Federation is not effective if your schema requires huge functions or tables.&lt;/li&gt;
&lt;li&gt;You'll need to update your application logic to determine which database to read and write.&lt;/li&gt;
&lt;li&gt;Joining data from two databases is more complex with a &lt;a href=&quot;http://stackoverflow.com/questions/5145637/querying-data-by-joining-two-tables-in-two-database-on-different-servers&quot; rel=&quot;nofollow&quot;&gt;server link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Federation adds more hardware and additional complexity.&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;Source(s) and further reading: federation&lt;/h5&gt;
&lt;h4&gt;Sharding&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/1df78be67b749171569a0e11a51aa76b3b678d4f/687474703a2f2f692e696d6775722e636f6d2f775538783549642e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1df78be67b749171569a0e11a51aa76b3b678d4f/687474703a2f2f692e696d6775722e636f6d2f775538783549642e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/wU8x5Id.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.slideshare.net/jboner/scalability-availability-stability-patterns/&quot; rel=&quot;nofollow&quot;&gt;Source: Scalability, availability, stability, patterns&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sharding distributes data across different databases such that each database can only manage a subset of the data. Taking a users database as an example, as the number of users increases, more shards are added to the cluster.&lt;/p&gt;
&lt;p&gt;Similar to the advantages of &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#federation&quot;&gt;federation&lt;/a&gt;, sharding results in less read and write traffic, less replication, and more cache hits. Index size is also reduced, which generally improves performance with faster queries. If one shard goes down, the other shards are still operational, although you'll want to add some form of replication to avoid data loss. Like federation, there is no single central master serializing writes, allowing you to write in parallel with increased throughput.&lt;/p&gt;
&lt;p&gt;Common ways to shard a table of users is either through the user's last name initial or the user's geographic location.&lt;/p&gt;
&lt;h5&gt;Disadvantage(s): sharding&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;You'll need to update your application logic to work with shards, which could result in complex SQL queries.&lt;/li&gt;
&lt;li&gt;Data distribution can become lopsided in a shard. For example, a set of power users on a shard could result in increased load to that shard compared to others.
&lt;ul&gt;&lt;li&gt;Rebalancing adds additional complexity. A sharding function based on &lt;a href=&quot;http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html&quot; rel=&quot;nofollow&quot;&gt;consistent hashing&lt;/a&gt; can reduce the amount of transferred data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Joining data from multiple shards is more complex.&lt;/li&gt;
&lt;li&gt;Sharding adds more hardware and additional complexity.&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;Source(s) and further reading: sharding&lt;/h5&gt;
&lt;h4&gt;Denormalization&lt;/h4&gt;
&lt;p&gt;Denormalization attempts to improve read performance at the expense of some write performance. Redundant copies of the data are written in multiple tables to avoid expensive joins. Some RDBMS such as &lt;a href=&quot;https://en.wikipedia.org/wiki/PostgreSQL&quot; rel=&quot;nofollow&quot;&gt;PostgreSQL&lt;/a&gt; and Oracle support &lt;a href=&quot;https://en.wikipedia.org/wiki/Materialized_view&quot; rel=&quot;nofollow&quot;&gt;materialized views&lt;/a&gt; which handle the work of storing redundant information and keeping redundant copies consistent.&lt;/p&gt;
&lt;p&gt;Once data becomes distributed with techniques such as &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#federation&quot;&gt;federation&lt;/a&gt; and &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#sharding&quot;&gt;sharding&lt;/a&gt;, managing joins across data centers further increases complexity. Denormalization might circumvent the need for such complex joins.&lt;/p&gt;
&lt;p&gt;In most systems, reads can heavily outnumber writes 100:1 or even 1000:1. A read resulting in a complex database join can be very expensive, spending a significant amount of time on disk operations.&lt;/p&gt;
&lt;h5&gt;Disadvantage(s): denormalization&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;Data is duplicated.&lt;/li&gt;
&lt;li&gt;Constraints can help redundant copies of information stay in sync, which increases complexity of the database design.&lt;/li&gt;
&lt;li&gt;A denormalized database under heavy write load might perform worse than its normalized counterpart.&lt;/li&gt;
&lt;/ul&gt;&lt;h6&gt;Source(s) and further reading: denormalization&lt;/h6&gt;
&lt;h4&gt;SQL tuning&lt;/h4&gt;
&lt;p&gt;SQL tuning is a broad topic and many &lt;a href=&quot;https://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Daps&amp;amp;field-keywords=sql+tuning&quot; rel=&quot;nofollow&quot;&gt;books&lt;/a&gt; have been written as reference.&lt;/p&gt;
&lt;p&gt;It's important to &lt;strong&gt;benchmark&lt;/strong&gt; and &lt;strong&gt;profile&lt;/strong&gt; to simulate and uncover bottlenecks.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Benchmark&lt;/strong&gt; - Simulate high-load situations with tools such as &lt;a href=&quot;http://httpd.apache.org/docs/2.2/programs/ab.html&quot; rel=&quot;nofollow&quot;&gt;ab&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Profile&lt;/strong&gt; - Enable tools such as the &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html&quot; rel=&quot;nofollow&quot;&gt;slow query log&lt;/a&gt; to help track performance issues.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Benchmarking and profiling might point you to the following optimizations.&lt;/p&gt;
&lt;h5&gt;Tighten up the schema&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;MySQL dumps to disk in contiguous blocks for fast access.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;CHAR&lt;/code&gt; instead of &lt;code&gt;VARCHAR&lt;/code&gt; for fixed-length fields.
&lt;ul&gt;&lt;li&gt;&lt;code&gt;CHAR&lt;/code&gt; effectively allows for fast, random access, whereas with &lt;code&gt;VARCHAR&lt;/code&gt;, you must find the end of a string before moving onto the next one.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;TEXT&lt;/code&gt; for large blocks of text such as blog posts. &lt;code&gt;TEXT&lt;/code&gt; also allows for boolean searches. Using a &lt;code&gt;TEXT&lt;/code&gt; field results in storing a pointer on disk that is used to locate the text block.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;INT&lt;/code&gt; for larger numbers up to 2^32 or 4 billion.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;DECIMAL&lt;/code&gt; for currency to avoid floating point representation errors.&lt;/li&gt;
&lt;li&gt;Avoid storing large &lt;code&gt;BLOBS&lt;/code&gt;, store the location of where to get the object instead.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VARCHAR(255)&lt;/code&gt; is the largest number of characters that can be counted in an 8 bit number, often maximizing the use of a byte in some RDBMS.&lt;/li&gt;
&lt;li&gt;Set the &lt;code&gt;NOT NULL&lt;/code&gt; constraint where applicable to &lt;a href=&quot;http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search&quot; rel=&quot;nofollow&quot;&gt;improve search performance&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;Use good indices&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;Columns that you are querying (&lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;GROUP BY&lt;/code&gt;, &lt;code&gt;ORDER BY&lt;/code&gt;, &lt;code&gt;JOIN&lt;/code&gt;) could be faster with indices.&lt;/li&gt;
&lt;li&gt;Indices are usually represented as self-balancing &lt;a href=&quot;https://en.wikipedia.org/wiki/B-tree&quot; rel=&quot;nofollow&quot;&gt;B-tree&lt;/a&gt; that keeps data sorted and allows searches, sequential access, insertions, and deletions in logarithmic time.&lt;/li&gt;
&lt;li&gt;Placing an index can keep the data in memory, requiring more space.&lt;/li&gt;
&lt;li&gt;Writes could also be slower since the index also needs to be updated.&lt;/li&gt;
&lt;li&gt;When loading large amounts of data, it might be faster to disable indices, load the data, then rebuild the indices.&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;Avoid expensive joins&lt;/h5&gt;
&lt;h5&gt;Partition tables&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;Break up a table by putting hot spots in a separate table to help keep it in memory.&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;Tune the query cache&lt;/h5&gt;
&lt;h5&gt;Source(s) and further reading: SQL tuning&lt;/h5&gt;
&lt;h3&gt;NoSQL&lt;/h3&gt;
&lt;p&gt;NoSQL is a collection of data items represented in a &lt;strong&gt;key-value store&lt;/strong&gt;, &lt;strong&gt;document-store&lt;/strong&gt;, &lt;strong&gt;wide column store&lt;/strong&gt;, or a &lt;strong&gt;graph database&lt;/strong&gt;. Data is denormalized, and joins are generally done in the application code. Most NoSQL stores lack true ACID transactions and favor &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#eventual-consistency&quot;&gt;eventual consistency&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BASE&lt;/strong&gt; is often used to describe the properties of NoSQL databases. In comparison with the &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#cap-theorem&quot;&gt;CAP Theorem&lt;/a&gt;, BASE chooses availability over consistency.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Basically available&lt;/strong&gt; - the system guarantees availability.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Soft state&lt;/strong&gt; - the state of the system may change over time, even without input.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eventual consistency&lt;/strong&gt; - the system will become consistent over a period of time, given that the system doesn't receive input during that period.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition to choosing between &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#sql-or-nosql&quot;&gt;SQL or NoSQL&lt;/a&gt;, it is helpful to understand which type of NoSQL database best fits your use case(s). We'll review &lt;strong&gt;key-value stores&lt;/strong&gt;, &lt;strong&gt;document-stores&lt;/strong&gt;, &lt;strong&gt;wide column stores&lt;/strong&gt;, and &lt;strong&gt;graph databases&lt;/strong&gt; in the next section.&lt;/p&gt;
&lt;h4&gt;Key-value store&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Abstraction: hash table&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A key-value store generally allows for O(1) reads and writes and is often backed by memory or SSD. Data stores can maintain keys in &lt;a href=&quot;https://en.wikipedia.org/wiki/Lexicographical_order&quot; rel=&quot;nofollow&quot;&gt;lexicographic order&lt;/a&gt;, allowing efficient retrieval of key ranges. Key-value stores can allow for storing of metadata with a value.&lt;/p&gt;
&lt;p&gt;Key-value stores provide high performance and are often used for simple data models or for rapidly-changing data, such as an in-memory cache layer. Since they offer only a limited set of operations, complexity is shifted to the application layer if additional operations are needed.&lt;/p&gt;
&lt;p&gt;A key-value store is the basis for more complex systems such as a document store, and in some cases, a graph database.&lt;/p&gt;
&lt;h5&gt;Source(s) and further reading: key-value store&lt;/h5&gt;
&lt;h4&gt;Document store&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Abstraction: key-value store with documents stored as values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A document store is centered around documents (XML, JSON, binary, etc), where a document stores all information for a given object. Document stores provide APIs or a query language to query based on the internal structure of the document itself. &lt;em&gt;Note, many key-value stores include features for working with a value's metadata, blurring the lines between these two storage types.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Based on the underlying implementation, documents are organized in either collections, tags, metadata, or directories. Although documents can be organized or grouped together, documents may have fields that are completely different from each other.&lt;/p&gt;
&lt;p&gt;Some document stores like &lt;a href=&quot;https://www.mongodb.com/mongodb-architecture&quot; rel=&quot;nofollow&quot;&gt;MongoDB&lt;/a&gt; and &lt;a href=&quot;https://blog.couchdb.org/2016/08/01/couchdb-2-0-architecture/&quot; rel=&quot;nofollow&quot;&gt;CouchDB&lt;/a&gt; also provide a SQL-like language to perform complex queries. &lt;a href=&quot;http://www.read.seas.harvard.edu/%7Ekohler/class/cs239-w08/decandia07dynamo.pdf&quot; rel=&quot;nofollow&quot;&gt;DynamoDB&lt;/a&gt; supports both key-values and documents.&lt;/p&gt;
&lt;p&gt;Document stores provide high flexibility and are often used for working with occasionally changing data.&lt;/p&gt;
&lt;h5&gt;Source(s) and further reading: document store&lt;/h5&gt;
&lt;h4&gt;Wide column store&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/823668b07b4bff50574e934273c9244e4e5017d6/687474703a2f2f692e696d6775722e636f6d2f6e3136694f476b2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/823668b07b4bff50574e934273c9244e4e5017d6/687474703a2f2f692e696d6775722e636f6d2f6e3136694f476b2e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/n16iOGk.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://blog.grio.com/2015/11/sql-nosql-a-brief-history.html&quot; rel=&quot;nofollow&quot;&gt;Source: SQL &amp;amp; NoSQL, a brief history&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Abstraction: nested map &lt;code&gt;ColumnFamily&amp;lt;RowKey, Columns&amp;lt;ColKey, Value, Timestamp&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A wide column store's basic unit of data is a column (name/value pair). A column can be grouped in column families (analogous to a SQL table). Super column families further group column families. You can access each column independently with a row key, and columns with the same row key form a row. Each value contains a timestamp for versioning and for conflict resolution.&lt;/p&gt;
&lt;p&gt;Google introduced &lt;a href=&quot;http://www.read.seas.harvard.edu/%7Ekohler/class/cs239-w08/chang06bigtable.pdf&quot; rel=&quot;nofollow&quot;&gt;Bigtable&lt;/a&gt; as the first wide column store, which influenced the open-source &lt;a href=&quot;https://www.mapr.com/blog/in-depth-look-hbase-architecture&quot; rel=&quot;nofollow&quot;&gt;HBase&lt;/a&gt; often-used in the Hadoop ecosystem, and &lt;a href=&quot;http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architectureIntro_c.html&quot; rel=&quot;nofollow&quot;&gt;Cassandra&lt;/a&gt; from Facebook. Stores such as BigTable, HBase, and Cassandra maintain keys in lexicographic order, allowing efficient retrieval of selective key ranges.&lt;/p&gt;
&lt;p&gt;Wide column stores offer high availability and high scalability. They are often used for very large data sets.&lt;/p&gt;
&lt;h5&gt;Source(s) and further reading: wide column store&lt;/h5&gt;
&lt;h4&gt;Graph database&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/bf6508b65e98a7210d9861515833afa0d9434436/687474703a2f2f692e696d6775722e636f6d2f664e636c3635672e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/bf6508b65e98a7210d9861515833afa0d9434436/687474703a2f2f692e696d6775722e636f6d2f664e636c3635672e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/fNcl65g.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/File:GraphDatabase_PropertyGraph.png&quot; rel=&quot;nofollow&quot;&gt;Source: Graph database&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Abstraction: graph&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a graph database, each node is a record and each arc is a relationship between two nodes. Graph databases are optimized to represent complex relationships with many foreign keys or many-to-many relationships.&lt;/p&gt;
&lt;p&gt;Graphs databases offer high performance for data models with complex relationships, such as a social network. They are relatively new and are not yet widely-used; it might be more difficult to find development tools and resources. Many graphs can only be accessed with &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#representational-state-transfer-rest&quot;&gt;REST APIs&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;Source(s) and further reading: graph&lt;/h5&gt;
&lt;h4&gt;Source(s) and further reading: NoSQL&lt;/h4&gt;
&lt;h3&gt;SQL or NoSQL&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/a6e2e844765c9d5382d9c9b64ef7693977981646/687474703a2f2f692e696d6775722e636f6d2f775847714735662e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a6e2e844765c9d5382d9c9b64ef7693977981646/687474703a2f2f692e696d6775722e636f6d2f775847714735662e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/wXGqG5f.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;https://www.infoq.com/articles/Transition-RDBMS-NoSQL/&quot; rel=&quot;nofollow&quot;&gt;Source: Transitioning from RDBMS to NoSQL&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Reasons for &lt;strong&gt;SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Structured data&lt;/li&gt;
&lt;li&gt;Strict schema&lt;/li&gt;
&lt;li&gt;Relational data&lt;/li&gt;
&lt;li&gt;Need for complex joins&lt;/li&gt;
&lt;li&gt;Transactions&lt;/li&gt;
&lt;li&gt;Clear patterns for scaling&lt;/li&gt;
&lt;li&gt;More established: developers, community, code, tools, etc&lt;/li&gt;
&lt;li&gt;Lookups by index are very fast&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Reasons for &lt;strong&gt;NoSQL&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Semi-structured data&lt;/li&gt;
&lt;li&gt;Dynamic or flexible schema&lt;/li&gt;
&lt;li&gt;Non-relational data&lt;/li&gt;
&lt;li&gt;No need for complex joins&lt;/li&gt;
&lt;li&gt;Store many TB (or PB) of data&lt;/li&gt;
&lt;li&gt;Very data intensive workload&lt;/li&gt;
&lt;li&gt;Very high throughput for IOPS&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Sample data well-suited for NoSQL:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Rapid ingest of clickstream and log data&lt;/li&gt;
&lt;li&gt;Leaderboard or scoring data&lt;/li&gt;
&lt;li&gt;Temporary data, such as a shopping cart&lt;/li&gt;
&lt;li&gt;Frequently accessed ('hot') tables&lt;/li&gt;
&lt;li&gt;Metadata/lookup tables&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;Source(s) and further reading: SQL or NoSQL&lt;/h5&gt;
&lt;h2&gt;Cache&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/7acedde6aa7853baf2eb4a53f88e2595ebe43756/687474703a2f2f692e696d6775722e636f6d2f51367a32344c612e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/7acedde6aa7853baf2eb4a53f88e2595ebe43756/687474703a2f2f692e696d6775722e636f6d2f51367a32344c612e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/Q6z24La.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html&quot; rel=&quot;nofollow&quot;&gt;Source: Scalable system design patterns&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Caching improves page load times and can reduce the load on your servers and databases. In this model, the dispatcher will first lookup if the request has been made before and try to find the previous result to return, in order to save the actual execution.&lt;/p&gt;
&lt;p&gt;Databases often benefit from a uniform distribution of reads and writes across its partitions. Popular items can skew the distribution, causing bottlenecks. Putting a cache in front of a database can help absorb uneven loads and spikes in traffic.&lt;/p&gt;
&lt;h3&gt;Client caching&lt;/h3&gt;
&lt;p&gt;Caches can be located on the client side (OS or browser), &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#reverse-proxy&quot;&gt;server side&lt;/a&gt;, or in a distinct cache layer.&lt;/p&gt;
&lt;h3&gt;CDN caching&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer#content-delivery-network&quot;&gt;CDNs&lt;/a&gt; are considered a type of cache.&lt;/p&gt;
&lt;h3&gt;Web server caching&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer#reverse-proxy-web-server&quot;&gt;Reverse proxies&lt;/a&gt; and caches such as &lt;a href=&quot;https://www.varnish-cache.org/&quot; rel=&quot;nofollow&quot;&gt;Varnish&lt;/a&gt; can serve static and dynamic content directly. Web servers can also cache requests, returning responses without having to contact application servers.&lt;/p&gt;
&lt;h3&gt;Database caching&lt;/h3&gt;
&lt;p&gt;Your database usually includes some level of caching in a default configuration, optimized for a generic use case. Tweaking these settings for specific usage patterns can further boost performance.&lt;/p&gt;
&lt;h3&gt;Application caching&lt;/h3&gt;
&lt;p&gt;In-memory caches such as Memcached and Redis are key-value stores between your application and your data storage. Since the data is held in RAM, it is much faster than typical databases where data is stored on disk. RAM is more limited than disk, so &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms&quot; rel=&quot;nofollow&quot;&gt;cache invalidation&lt;/a&gt; algorithms such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used&quot; rel=&quot;nofollow&quot;&gt;least recently used (LRU)&lt;/a&gt; can help invalidate 'cold' entries and keep 'hot' data in RAM.&lt;/p&gt;
&lt;p&gt;Redis has the following additional features:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Persistence option&lt;/li&gt;
&lt;li&gt;Built-in data structures such as sorted sets and lists&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are multiple levels you can cache that fall into two general categories: &lt;strong&gt;database queries&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Row level&lt;/li&gt;
&lt;li&gt;Query-level&lt;/li&gt;
&lt;li&gt;Fully-formed serializable objects&lt;/li&gt;
&lt;li&gt;Fully-rendered HTML&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Generally, you should try to avoid file-based caching, as it makes cloning and auto-scaling more difficult.&lt;/p&gt;
&lt;h3&gt;Caching at the database query level&lt;/h3&gt;
&lt;p&gt;Whenever you query the database, hash the query as a key and store the result to the cache. This approach suffers from expiration issues:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Hard to delete a cached result with complex queries&lt;/li&gt;
&lt;li&gt;If one piece of data changes such as a table cell, you need to delete all cached queries that might include the changed cell&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Caching at the object level&lt;/h3&gt;
&lt;p&gt;See your data as an object, similar to what you do with your application code. Have your application assemble the dataset from the database into a class instance or a data structure(s):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Remove the object from cache if its underlying data has changed&lt;/li&gt;
&lt;li&gt;Allows for asynchronous processing: workers assemble objects by consuming the latest cached object&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Suggestions of what to cache:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;User sessions&lt;/li&gt;
&lt;li&gt;Fully rendered web pages&lt;/li&gt;
&lt;li&gt;Activity streams&lt;/li&gt;
&lt;li&gt;User graph data&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;When to update the cache&lt;/h3&gt;
&lt;p&gt;Since you can only store a limited amount of data in cache, you'll need to determine which cache update strategy works best for your use case.&lt;/p&gt;
&lt;h4&gt;Cache-aside&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/7f5934e49a678b67f65e5ed53134bc258b007ebb/687474703a2f2f692e696d6775722e636f6d2f4f4e6a4f52716b2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/7f5934e49a678b67f65e5ed53134bc258b007ebb/687474703a2f2f692e696d6775722e636f6d2f4f4e6a4f52716b2e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/ONjORqk.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast&quot; rel=&quot;nofollow&quot;&gt;Source: From cache to in-memory data grid&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The application is responsible for reading and writing from storage. The cache does not interact with storage directly. The application does the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Look for entry in cache, resulting in a cache miss&lt;/li&gt;
&lt;li&gt;Load entry from the database&lt;/li&gt;
&lt;li&gt;Add entry to cache&lt;/li&gt;
&lt;li&gt;Return entry&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;def get_user(self, user_id):
    user = cache.get(&quot;user.{0}&quot;, user_id)
    if user is None:
        user = db.query(&quot;SELECT * FROM users WHERE user_id = {0}&quot;, user_id)
        if user is not None:
            key = &quot;user.{0}&quot;.format(user_id)
            cache.set(key, json.dumps(user))
    return user
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://memcached.org/&quot; rel=&quot;nofollow&quot;&gt;Memcached&lt;/a&gt; is generally used in this manner.&lt;/p&gt;
&lt;p&gt;Subsequent reads of data added to cache are fast. Cache-aside is also referred to as lazy loading. Only requested data is cached, which avoids filling up the cache with data that isn't requested.&lt;/p&gt;
&lt;h5&gt;Disadvantage(s): cache-aside&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;Each cache miss results in three trips, which can cause a noticeable delay.&lt;/li&gt;
&lt;li&gt;Data can become stale if it is updated in the database. This issue is mitigated by setting a time-to-live (TTL) which forces an update of the cache entry, or by using write-through.&lt;/li&gt;
&lt;li&gt;When a node fails, it is replaced by a new, empty node, increasing latency.&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Write-through&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/56b870f4d199335ccdbc98b989ef6511ed14f0e2/687474703a2f2f692e696d6775722e636f6d2f3076426330684e2e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/56b870f4d199335ccdbc98b989ef6511ed14f0e2/687474703a2f2f692e696d6775722e636f6d2f3076426330684e2e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/0vBc0hN.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.slideshare.net/jboner/scalability-availability-stability-patterns/&quot; rel=&quot;nofollow&quot;&gt;Source: Scalability, availability, stability, patterns&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The application uses the cache as the main data store, reading and writing data to it, while the cache is responsible for reading and writing to the database:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Application adds/updates entry in cache&lt;/li&gt;
&lt;li&gt;Cache synchronously writes entry to data store&lt;/li&gt;
&lt;li&gt;Return&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Application code:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;set_user(12345, {&quot;foo&quot;:&quot;bar&quot;})
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Cache code:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def set_user(user_id, values):
    user = db.query(&quot;UPDATE Users WHERE id = {0}&quot;, user_id, values)
    cache.set(user_id, user)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Write-through is a slow overall operation due to the write operation, but subsequent reads of just written data are fast. Users are generally more tolerant of latency when updating data than reading data. Data in the cache is not stale.&lt;/p&gt;
&lt;h5&gt;Disadvantage(s): write through&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;When a new node is created due to failure or scaling, the new node will not cache entries until the entry is updated in the database. Cache-aside in conjunction with write through can mitigate this issue.&lt;/li&gt;
&lt;li&gt;Most data written might never read, which can be minimized with a TTL.&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Write-behind (write-back)&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/8aa9f1a2f050c1422898bb5e82f1f01773334e22/687474703a2f2f692e696d6775722e636f6d2f72675372766a472e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8aa9f1a2f050c1422898bb5e82f1f01773334e22/687474703a2f2f692e696d6775722e636f6d2f72675372766a472e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/rgSrvjG.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.slideshare.net/jboner/scalability-availability-stability-patterns/&quot; rel=&quot;nofollow&quot;&gt;Source: Scalability, availability, stability, patterns&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In write-behind, the application does the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add/update entry in cache&lt;/li&gt;
&lt;li&gt;Asynchronously write entry to the data store, improving write performance&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;Disadvantage(s): write-behind&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;There could be data loss if the cache goes down prior to its contents hitting the data store.&lt;/li&gt;
&lt;li&gt;It is more complex to implement write-behind than it is to implement cache-aside or write-through.&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Refresh-ahead&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/49dcb54307763b4f56d61a4a1369826e2e7d52e4/687474703a2f2f692e696d6775722e636f6d2f6b78746a7167452e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/49dcb54307763b4f56d61a4a1369826e2e7d52e4/687474703a2f2f692e696d6775722e636f6d2f6b78746a7167452e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/kxtjqgE.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast&quot; rel=&quot;nofollow&quot;&gt;Source: From cache to in-memory data grid&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can configure the cache to automatically refresh any recently accessed cache entry prior to its expiration.&lt;/p&gt;
&lt;p&gt;Refresh-ahead can result in reduced latency vs read-through if the cache can accurately predict which items are likely to be needed in the future.&lt;/p&gt;
&lt;h5&gt;Disadvantage(s): refresh-ahead&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;Not accurately predicting which items are likely to be needed in the future can result in reduced performance than without refresh-ahead.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Disadvantage(s): cache&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Need to maintain consistency between caches and the source of truth such as the database through &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms&quot; rel=&quot;nofollow&quot;&gt;cache invalidation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cache invalidation is a difficult problem, there is additional complexity associated with when to update the cache.&lt;/li&gt;
&lt;li&gt;Need to make application changes such as adding Redis or memcached.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Asynchronism&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/c01ec137453216bbc188e3a8f16da39ec9131234/687474703a2f2f692e696d6775722e636f6d2f353447597353782e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c01ec137453216bbc188e3a8f16da39ec9131234/687474703a2f2f692e696d6775722e636f6d2f353447597353782e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/54GYsSx.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://lethain.com/introduction-to-architecting-systems-for-scale/#platform_layer&quot; rel=&quot;nofollow&quot;&gt;Source: Intro to architecting systems for scale&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Asynchronous workflows help reduce request times for expensive operations that would otherwise be performed in-line. They can also help by doing time-consuming work in advance, such as periodic aggregation of data.&lt;/p&gt;
&lt;h3&gt;Message queues&lt;/h3&gt;
&lt;p&gt;Message queues receive, hold, and deliver messages. If an operation is too slow to perform inline, you can use a message queue with the following workflow:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;An application publishes a job to the queue, then notifies the user of job status&lt;/li&gt;
&lt;li&gt;A worker picks up the job from the queue, processes it, then signals the job is complete&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The user is not blocked and the job is processed in the background. During this time, the client might optionally do a small amount of processing to make it seem like the task has completed. For example, if posting a tweet, the tweet could be instantly posted to your timeline, but it could take some time before your tweet is actually delivered to all of your followers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt; is useful as a simple message broker but messages can be lost.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt; is popular but requires you to adapt to the 'AMQP' protocol and manage your own nodes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Amazon SQS&lt;/strong&gt;, is hosted but can have high latency and has the possibility of messages being delivered twice.&lt;/p&gt;
&lt;h3&gt;Task queues&lt;/h3&gt;
&lt;p&gt;Tasks queues receive tasks and their related data, runs them, then delivers their results. They can support scheduling and can be used to run computationally-intensive jobs in the background.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Celery&lt;/strong&gt; has support for scheduling and primarily has python support.&lt;/p&gt;
&lt;h3&gt;Back pressure&lt;/h3&gt;
&lt;p&gt;If queues start to grow significantly, the queue size can become larger than memory, resulting in cache misses, disk reads, and even slower performance. &lt;a href=&quot;http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html&quot; rel=&quot;nofollow&quot;&gt;Back pressure&lt;/a&gt; can help by limiting the queue size, thereby maintaining a high throughput rate and good response times for jobs already in the queue. Once the queue fills up, clients get a server busy or HTTP 503 status code to try again later. Clients can retry the request at a later time, perhaps with &lt;a href=&quot;https://en.wikipedia.org/wiki/Exponential_backoff&quot; rel=&quot;nofollow&quot;&gt;exponential backoff&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Disadvantage(s): asynchronism&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Use cases such as inexpensive calculations and realtime workflows might be better suited for synchronous operations, as introducing queues can add delays and complexity.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Communication&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/1d761d5688d28ce1fb12a0f1c8191bca96eece4c/687474703a2f2f692e696d6775722e636f6d2f354b656f6351732e6a7067&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1d761d5688d28ce1fb12a0f1c8191bca96eece4c/687474703a2f2f692e696d6775722e636f6d2f354b656f6351732e6a7067&quot; data-canonical-src=&quot;http://i.imgur.com/5KeocQs.jpg&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.escotal.com/osilayer.html&quot; rel=&quot;nofollow&quot;&gt;Source: OSI 7 layer model&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Hypertext transfer protocol (HTTP)&lt;/h3&gt;
&lt;p&gt;HTTP is a method for encoding and transporting data between a client and a server. It is a request/response protocol: clients issue requests and servers issue responses with relevant content and completion status info about the request. HTTP is self-contained, allowing requests and responses to flow through many intermediate routers and servers that perform load balancing, caching, encryption, and compression.&lt;/p&gt;
&lt;p&gt;A basic HTTP request consists of a verb (method) and a resource (endpoint). Below are common HTTP verbs:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Verb&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Idempotent*&lt;/th&gt;
&lt;th&gt;Safe&lt;/th&gt;
&lt;th&gt;Cacheable&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;Reads a resource&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;Creates a resource or trigger a process that handles data&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes if response contains freshness info&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;Creates or replace a resource&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PATCH&lt;/td&gt;
&lt;td&gt;Partially updates a resource&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes if response contains freshness info&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;Deletes a resource&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;*Can be called many times without different outcomes.&lt;/p&gt;
&lt;p&gt;HTTP is an application layer protocol relying on lower-level protocols such as &lt;strong&gt;TCP&lt;/strong&gt; and &lt;strong&gt;UDP&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Source(s) and further reading: HTTP&lt;/h4&gt;
&lt;h3&gt;Transmission control protocol (TCP)&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/821620cf6aa83566f4def561e754e5991480ca8d/687474703a2f2f692e696d6775722e636f6d2f4a6441736476472e6a7067&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/821620cf6aa83566f4def561e754e5991480ca8d/687474703a2f2f692e696d6775722e636f6d2f4a6441736476472e6a7067&quot; data-canonical-src=&quot;http://i.imgur.com/JdAsdvG.jpg&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/&quot; rel=&quot;nofollow&quot;&gt;Source: How to make a multiplayer game&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;TCP is a connection-oriented protocol over an &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Protocol&quot; rel=&quot;nofollow&quot;&gt;IP network&lt;/a&gt;. Connection is established and terminated using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Handshaking&quot; rel=&quot;nofollow&quot;&gt;handshake&lt;/a&gt;. All packets sent are guaranteed to reach the destination in the original order and without corruption through:&lt;/p&gt;
&lt;p&gt;If the sender does not receive a correct response, it will resend the packets. If there are multiple timeouts, the connection is dropped. TCP also implements &lt;a href=&quot;https://en.wikipedia.org/wiki/Flow_control_(data)&quot; rel=&quot;nofollow&quot;&gt;flow control&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Network_congestion#Congestion_control&quot; rel=&quot;nofollow&quot;&gt;congestion control&lt;/a&gt;. These guarantees cause delays and generally result in less efficient transmission than UDP.&lt;/p&gt;
&lt;p&gt;To ensure high throughput, web servers can keep a large number of TCP connections open, resulting in high memory usage. It can be expensive to have a large number of open connections between web server threads and say, a &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#memcached&quot;&gt;memcached&lt;/a&gt; server. &lt;a href=&quot;https://en.wikipedia.org/wiki/Connection_pool&quot; rel=&quot;nofollow&quot;&gt;Connection pooling&lt;/a&gt; can help in addition to switching to UDP where applicable.&lt;/p&gt;
&lt;p&gt;TCP is useful for applications that require high reliability but are less time critical. Some examples include web servers, database info, SMTP, FTP, and SSH.&lt;/p&gt;
&lt;p&gt;Use TCP over UDP when:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You need all of the data to arrive intact&lt;/li&gt;
&lt;li&gt;You want to automatically make a best estimate use of the network throughput&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;User datagram protocol (UDP)&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/47eb14c0a2dff2166f8781a6ce8c7f33d4c33da8/687474703a2f2f692e696d6775722e636f6d2f797a44724a74412e6a7067&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/47eb14c0a2dff2166f8781a6ce8c7f33d4c33da8/687474703a2f2f692e696d6775722e636f6d2f797a44724a74412e6a7067&quot; data-canonical-src=&quot;http://i.imgur.com/yzDrJtA.jpg&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/&quot; rel=&quot;nofollow&quot;&gt;Source: How to make a multiplayer game&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;UDP is connectionless. Datagrams (analogous to packets) are guaranteed only at the datagram level. Datagrams might reach their destination out of order or not at all. UDP does not support congestion control. Without the guarantees that TCP support, UDP is generally more efficient.&lt;/p&gt;
&lt;p&gt;UDP can broadcast, sending datagrams to all devices on the subnet. This is useful with &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol&quot; rel=&quot;nofollow&quot;&gt;DHCP&lt;/a&gt; because the client has not yet received an IP address, thus preventing a way for TCP to stream without the IP address.&lt;/p&gt;
&lt;p&gt;UDP is less reliable but works well in real time use cases such as VoIP, video chat, streaming, and realtime multiplayer games.&lt;/p&gt;
&lt;p&gt;Use UDP over TCP when:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You need the lowest latency&lt;/li&gt;
&lt;li&gt;Late data is worse than loss of data&lt;/li&gt;
&lt;li&gt;You want to implement your own error correction&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Source(s) and further reading: TCP and UDP&lt;/h4&gt;
&lt;h3&gt;Remote procedure call (RPC)&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/1a3d7771c0b0a7816d0533fffeb6eeeb442d9945/687474703a2f2f692e696d6775722e636f6d2f6946344d6b62352e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1a3d7771c0b0a7816d0533fffeb6eeeb442d9945/687474703a2f2f692e696d6775722e636f6d2f6946344d6b62352e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/iF4Mkb5.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;http://www.puncsky.com/blog/2016/02/14/crack-the-system-design-interview/&quot; rel=&quot;nofollow&quot;&gt;Source: Crack the system design interview&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In an RPC, a client causes a procedure to execute on a different address space, usually a remote server. The procedure is coded as if it were a local procedure call, abstracting away the details of how to communicate with the server from the client program. Remote calls are usually slower and less reliable than local calls so it is helpful to distinguish RPC calls from local calls. Popular RPC frameworks include &lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot; rel=&quot;nofollow&quot;&gt;Protobuf&lt;/a&gt;, &lt;a href=&quot;https://thrift.apache.org/&quot; rel=&quot;nofollow&quot;&gt;Thrift&lt;/a&gt;, and &lt;a href=&quot;https://avro.apache.org/docs/current/&quot; rel=&quot;nofollow&quot;&gt;Avro&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;RPC is a request-response protocol:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Client program&lt;/strong&gt; - Calls the client stub procedure. The parameters are pushed onto the stack like a local procedure call.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client stub procedure&lt;/strong&gt; - Marshals (packs) procedure id and arguments into a request message.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client communication module&lt;/strong&gt; - OS sends the message from the client to the server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server communication module&lt;/strong&gt; - OS passes the incoming packets to the server stub procedure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server stub procedure&lt;/strong&gt; - Unmarshalls the results, calls the server procedure matching the procedure id and passes the given arguments.&lt;/li&gt;
&lt;li&gt;The server response repeats the steps above in reverse order.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Sample RPC calls:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;GET /someoperation?data=anId

POST /anotheroperation
{
  &quot;data&quot;:&quot;anId&quot;;
  &quot;anotherdata&quot;: &quot;another value&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;RPC is focused on exposing behaviors. RPCs are often used for performance reasons with internal communications, as you can hand-craft native calls to better fit your use cases.&lt;/p&gt;
&lt;p&gt;Choose a native library (aka SDK) when:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You know your target platform.&lt;/li&gt;
&lt;li&gt;You want to control how your &quot;logic&quot; is accessed.&lt;/li&gt;
&lt;li&gt;You want to control how error control happens off your library.&lt;/li&gt;
&lt;li&gt;Performance and end user experience is your primary concern.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;HTTP APIs following &lt;strong&gt;REST&lt;/strong&gt; tend to be used more often for public APIs.&lt;/p&gt;
&lt;h4&gt;Disadvantage(s): RPC&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;RPC clients become tightly coupled to the service implementation.&lt;/li&gt;
&lt;li&gt;A new API must be defined for every new operation or use case.&lt;/li&gt;
&lt;li&gt;It can be difficult to debug RPC.&lt;/li&gt;
&lt;li&gt;You might not be able to leverage existing technologies out of the box. For example, it might require additional effort to ensure &lt;a href=&quot;http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/&quot; rel=&quot;nofollow&quot;&gt;RPC calls are properly cached&lt;/a&gt; on caching servers such as &lt;a href=&quot;http://www.squid-cache.org/&quot; rel=&quot;nofollow&quot;&gt;Squid&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Representational state transfer (REST)&lt;/h3&gt;
&lt;p&gt;REST is an architectural style enforcing a client/server model where the client acts on a set of resources managed by the server. The server provides a representation of resources and actions that can either manipulate or get a new representation of resources. All communication must be stateless and cacheable.&lt;/p&gt;
&lt;p&gt;There are four qualities of a RESTful interface:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Identify resources (URI in HTTP)&lt;/strong&gt; - use the same URI regardless of any operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change with representations (Verbs in HTTP)&lt;/strong&gt; - use verbs, headers, and body.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-descriptive error message (status response in HTTP)&lt;/strong&gt; - Use status codes, don't reinvent the wheel.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://restcookbook.com/Basics/hateoas/&quot; rel=&quot;nofollow&quot;&gt;HATEOAS&lt;/a&gt; (HTML interface for HTTP)&lt;/strong&gt; - your web service should be fully accessible in a browser.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Sample REST calls:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;GET /someresources/anId

PUT /someresources/anId
{&quot;anotherdata&quot;: &quot;another value&quot;}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;REST is focused on exposing data. It minimizes the coupling between client/server and is often used for public HTTP APIs. REST uses a more generic and uniform method of exposing resources through URIs, &lt;a href=&quot;https://github.com/for-GET/know-your-http-well/blob/master/headers.md&quot;&gt;representation through headers&lt;/a&gt;, and actions through verbs such as GET, POST, PUT, DELETE, and PATCH. Being stateless, REST is great for horizontal scaling and partitioning.&lt;/p&gt;
&lt;h4&gt;Disadvantage(s): REST&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;With REST being focused on exposing data, it might not be a good fit if resources are not naturally organized or accessed in a simple hierarchy. For example, returning all updated records from the past hour matching a particular set of events is not easily expressed as a path. With REST, it is likely to be implemented with a combination of URI path, query parameters, and possibly the request body.&lt;/li&gt;
&lt;li&gt;REST typically relies on a few verbs (GET, POST, PUT, DELETE, and PATCH) which sometimes doesn't fit your use case. For example, moving expired documents to the archive folder might not cleanly fit within these verbs.&lt;/li&gt;
&lt;li&gt;Fetching complicated resources with nested hierarchies requires multiple round trips between the client and server to render single views, e.g. fetching content of a blog entry and the comments on that entry. For mobile applications operating in variable network conditions, these multiple roundtrips are highly undesirable.&lt;/li&gt;
&lt;li&gt;Over time, more fields might be added to an API response and older clients will receive all new data fields, even those that they do not need, as a result, it bloats the payload size and leads to larger latencies.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;RPC and REST calls comparison&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;RPC&lt;/th&gt;
&lt;th&gt;REST&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Signup&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;POST&lt;/strong&gt; /signup&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;POST&lt;/strong&gt; /persons&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Resign&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;POST&lt;/strong&gt; /resign&lt;br/&gt;{&lt;br/&gt;&quot;personid&quot;: &quot;1234&quot;&lt;br/&gt;}&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;DELETE&lt;/strong&gt; /persons/1234&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Read a person&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;GET&lt;/strong&gt; /readPerson?personid=1234&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;GET&lt;/strong&gt; /persons/1234&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Read a person’s items list&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;GET&lt;/strong&gt; /readUsersItemsList?personid=1234&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;GET&lt;/strong&gt; /persons/1234/items&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Add an item to a person’s items&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;POST&lt;/strong&gt; /addItemToUsersItemsList&lt;br/&gt;{&lt;br/&gt;&quot;personid&quot;: &quot;1234&quot;;&lt;br/&gt;&quot;itemid&quot;: &quot;456&quot;&lt;br/&gt;}&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;POST&lt;/strong&gt; /persons/1234/items&lt;br/&gt;{&lt;br/&gt;&quot;itemid&quot;: &quot;456&quot;&lt;br/&gt;}&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Update an item&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;POST&lt;/strong&gt; /modifyItem&lt;br/&gt;{&lt;br/&gt;&quot;itemid&quot;: &quot;456&quot;;&lt;br/&gt;&quot;key&quot;: &quot;value&quot;&lt;br/&gt;}&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;PUT&lt;/strong&gt; /items/456&lt;br/&gt;{&lt;br/&gt;&quot;key&quot;: &quot;value&quot;&lt;br/&gt;}&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Delete an item&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;POST&lt;/strong&gt; /removeItem&lt;br/&gt;{&lt;br/&gt;&quot;itemid&quot;: &quot;456&quot;&lt;br/&gt;}&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;DELETE&lt;/strong&gt; /items/456&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p align=&quot;center&quot;&gt;&lt;em&gt;&lt;a href=&quot;https://apihandyman.io/do-you-really-know-why-you-prefer-rest-over-rpc/&quot; rel=&quot;nofollow&quot;&gt;Source: Do you really know why you prefer REST over RPC&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Source(s) and further reading: REST and RPC&lt;/h4&gt;
&lt;h2&gt;Security&lt;/h2&gt;
&lt;p&gt;This section could use some updates. Consider &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#contributing&quot;&gt;contributing&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Security is a broad topic. Unless you have considerable experience, a security background, or are applying for a position that requires knowledge of security, you probably won't need to know more than the basics:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Encrypt in transit and at rest.&lt;/li&gt;
&lt;li&gt;Sanitize all user inputs or any input parameters exposed to user to prevent &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot; rel=&quot;nofollow&quot;&gt;XSS&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL_injection&quot; rel=&quot;nofollow&quot;&gt;SQL injection&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use parameterized queries to prevent SQL injection.&lt;/li&gt;
&lt;li&gt;Use the principle of &lt;a href=&quot;https://en.wikipedia.org/wiki/Principle_of_least_privilege&quot; rel=&quot;nofollow&quot;&gt;least privilege&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Source(s) and further reading&lt;/h3&gt;
&lt;h2&gt;Appendix&lt;/h2&gt;
&lt;p&gt;You'll sometimes be asked to do 'back-of-the-envelope' estimates. For example, you might need to determine how long it will take to generate 100 image thumbnails from disk or how much memory a data structure will take. The &lt;strong&gt;Powers of two table&lt;/strong&gt; and &lt;strong&gt;Latency numbers every programmer should know&lt;/strong&gt; are handy references.&lt;/p&gt;
&lt;h3&gt;Powers of two table&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;Power           Exact Value         Approx Value        Bytes
---------------------------------------------------------------
7                             128
8                             256
10                           1024   1 thousand           1 KB
16                         65,536                       64 KB
20                      1,048,576   1 million            1 MB
30                  1,073,741,824   1 billion            1 GB
32                  4,294,967,296                        4 GB
40              1,099,511,627,776   1 trillion           1 TB
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4&gt;Source(s) and further reading&lt;/h4&gt;
&lt;h3&gt;Latency numbers every programmer should know&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;Latency Comparison Numbers
--------------------------
L1 cache reference                           0.5 ns
Branch mispredict                            5   ns
L2 cache reference                           7   ns                      14x L1 cache
Mutex lock/unlock                          100   ns
Main memory reference                      100   ns                      20x L2 cache, 200x L1 cache
Compress 1K bytes with Zippy            10,000   ns       10 us
Send 1 KB bytes over 1 Gbps network     10,000   ns       10 us
Read 4 KB randomly from SSD*           150,000   ns      150 us          ~1GB/sec SSD
Read 1 MB sequentially from memory     250,000   ns      250 us
Round trip within same datacenter      500,000   ns      500 us
Read 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory
Disk seek                           10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip
Read 1 MB sequentially from 1 Gbps  10,000,000   ns   10,000 us   10 ms  40x memory, 10X SSD
Read 1 MB sequentially from disk    30,000,000   ns   30,000 us   30 ms 120x memory, 30X SSD
Send packet CA-&amp;gt;Netherlands-&amp;gt;CA    150,000,000   ns  150,000 us  150 ms

Notes
-----
1 ns = 10^-9 seconds
1 us = 10^-6 seconds = 1,000 ns
1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Handy metrics based on numbers above:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Read sequentially from disk at 30 MB/s&lt;/li&gt;
&lt;li&gt;Read sequentially from 1 Gbps Ethernet at 100 MB/s&lt;/li&gt;
&lt;li&gt;Read sequentially from SSD at 1 GB/s&lt;/li&gt;
&lt;li&gt;Read sequentially from main memory at 4 GB/s&lt;/li&gt;
&lt;li&gt;6-7 world-wide round trips per second&lt;/li&gt;
&lt;li&gt;2,000 round trips per second within a data center&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Latency numbers visualized&lt;/h4&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/77f72259e1eb58596b564d1ad823af1853bc60a3/687474703a2f2f692e696d6775722e636f6d2f6b307431652e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/77f72259e1eb58596b564d1ad823af1853bc60a3/687474703a2f2f692e696d6775722e636f6d2f6b307431652e706e67&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Source(s) and further reading&lt;/h4&gt;
&lt;h3&gt;Additional system design interview questions&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Common system design interview questions, with links to resources on how to solve each.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Real world architectures&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Articles on how real world systems are designed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://camo.githubusercontent.com/b7c71be73fb466344c2d773178ae74e3fbb1dcc6/687474703a2f2f692e696d6775722e636f6d2f5463556f3266772e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/b7c71be73fb466344c2d773178ae74e3fbb1dcc6/687474703a2f2f692e696d6775722e636f6d2f5463556f3266772e706e67&quot; data-canonical-src=&quot;http://i.imgur.com/TcUo2fw.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;em&gt;&lt;a href=&quot;https://www.infoq.com/presentations/Twitter-Timeline-Scalability&quot; rel=&quot;nofollow&quot;&gt;Source: Twitter timelines at scale&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don't focus on nitty gritty details for the following articles, instead:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Identify shared principles, common technologies, and patterns within these articles&lt;/li&gt;
&lt;li&gt;Study what problems are solved by each component, where it works, where it doesn't&lt;/li&gt;
&lt;li&gt;Review the lessons learned&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;System&lt;/th&gt;
&lt;th&gt;Reference(s)&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Data processing&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;MapReduce&lt;/strong&gt; - Distributed data processing from Google&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf&quot; rel=&quot;nofollow&quot;&gt;research.google.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Data processing&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Spark&lt;/strong&gt; - Distributed data processing from Databricks&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.slideshare.net/AGrishchenko/apache-spark-architecture&quot; rel=&quot;nofollow&quot;&gt;slideshare.net&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Data processing&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Storm&lt;/strong&gt; - Distributed data processing from Twitter&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.slideshare.net/previa/storm-16094009&quot; rel=&quot;nofollow&quot;&gt;slideshare.net&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Data store&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Bigtable&lt;/strong&gt; - Distributed column-oriented database from Google&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.read.seas.harvard.edu/%7Ekohler/class/cs239-w08/chang06bigtable.pdf&quot; rel=&quot;nofollow&quot;&gt;harvard.edu&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Data store&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;HBase&lt;/strong&gt; - Open source implementation of Bigtable&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.slideshare.net/alexbaranau/intro-to-hbase&quot; rel=&quot;nofollow&quot;&gt;slideshare.net&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Data store&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Cassandra&lt;/strong&gt; - Distributed column-oriented database from Facebook&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666&quot; rel=&quot;nofollow&quot;&gt;slideshare.net&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Data store&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;DynamoDB&lt;/strong&gt; - Document-oriented database from Amazon&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.read.seas.harvard.edu/%7Ekohler/class/cs239-w08/decandia07dynamo.pdf&quot; rel=&quot;nofollow&quot;&gt;harvard.edu&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Data store&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; - Document-oriented database&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.slideshare.net/mdirolf/introduction-to-mongodb&quot; rel=&quot;nofollow&quot;&gt;slideshare.net&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Data store&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Spanner&lt;/strong&gt; - Globally-distributed database from Google&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://research.google.com/archive/spanner-osdi2012.pdf&quot; rel=&quot;nofollow&quot;&gt;research.google.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Data store&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Memcached&lt;/strong&gt; - Distributed memory caching system&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.slideshare.net/oemebamo/introduction-to-memcached&quot; rel=&quot;nofollow&quot;&gt;slideshare.net&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Data store&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Redis&lt;/strong&gt; - Distributed memory caching system with persistence and value types&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.slideshare.net/dvirsky/introduction-to-redis&quot; rel=&quot;nofollow&quot;&gt;slideshare.net&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;File system&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Google File System (GFS)&lt;/strong&gt; - Distributed file system&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf&quot; rel=&quot;nofollow&quot;&gt;research.google.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;File system&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Hadoop File System (HDFS)&lt;/strong&gt; - Open source implementation of GFS&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html&quot; rel=&quot;nofollow&quot;&gt;apache.org&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Misc&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Chubby&lt;/strong&gt; - Lock service for loosely-coupled distributed systems from Google&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf&quot; rel=&quot;nofollow&quot;&gt;research.google.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Misc&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Dapper&lt;/strong&gt; - Distributed systems tracing infrastructure&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf&quot; rel=&quot;nofollow&quot;&gt;research.google.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Misc&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Kafka&lt;/strong&gt; - Pub/sub message queue from LinkedIn&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.slideshare.net/mumrah/kafka-talk-tri-hug&quot; rel=&quot;nofollow&quot;&gt;slideshare.net&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Misc&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Zookeeper&lt;/strong&gt; - Centralized infrastructure and services enabling synchronization&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper&quot; rel=&quot;nofollow&quot;&gt;slideshare.net&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td&gt;Add an architecture&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer#contributing&quot;&gt;Contribute&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;Company architectures&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Company&lt;/th&gt;
&lt;th&gt;Reference(s)&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Amazon&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/amazon-architecture&quot; rel=&quot;nofollow&quot;&gt;Amazon architecture&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Cinchcast&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2012/7/16/cinchcast-architecture-producing-1500-hours-of-audio-every-d.html&quot; rel=&quot;nofollow&quot;&gt;Producing 1,500 hours of audio every day&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DataSift&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2011/11/29/datasift-architecture-realtime-datamining-at-120000-tweets-p.html&quot; rel=&quot;nofollow&quot;&gt;Realtime datamining At 120,000 tweets per second&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DropBox&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=PE4gwstWhmc&quot; rel=&quot;nofollow&quot;&gt;How we've scaled Dropbox&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ESPN&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html&quot; rel=&quot;nofollow&quot;&gt;Operating At 100,000 duh nuh nuhs per second&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Google&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/google-architecture&quot; rel=&quot;nofollow&quot;&gt;Google architecture&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Instagram&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html&quot; rel=&quot;nofollow&quot;&gt;14 million users, terabytes of photos&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances&quot; rel=&quot;nofollow&quot;&gt;What powers Instagram&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Justin.tv&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2010/3/16/justintvs-live-video-broadcasting-architecture.html&quot; rel=&quot;nofollow&quot;&gt;Justin.Tv's live video broadcasting architecture&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Facebook&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://cs.uwaterloo.ca/%7Ebrecht/courses/854-Emerging-2014/readings/key-value/fb-memcached-nsdi-2013.pdf&quot; rel=&quot;nofollow&quot;&gt;Scaling memcached at Facebook&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://cs.uwaterloo.ca/%7Ebrecht/courses/854-Emerging-2014/readings/data-store/tao-facebook-distributed-datastore-atc-2013.pdf&quot; rel=&quot;nofollow&quot;&gt;TAO: Facebook’s distributed data store for the social graph&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf&quot; rel=&quot;nofollow&quot;&gt;Facebook’s photo storage&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://highscalability.com/blog/2016/6/27/how-facebook-live-streams-to-800000-simultaneous-viewers.html&quot; rel=&quot;nofollow&quot;&gt;How Facebook Live Streams To 800,000 Simultaneous Viewers&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Flickr&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/flickr-architecture&quot; rel=&quot;nofollow&quot;&gt;Flickr architecture&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mailbox&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html&quot; rel=&quot;nofollow&quot;&gt;From 0 to one million users in 6 weeks&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Netflix&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2017/12/11/netflix-what-happens-when-you-press-play.html&quot; rel=&quot;nofollow&quot;&gt;Netflix: What Happens When You Press Play?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Pinterest&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html&quot; rel=&quot;nofollow&quot;&gt;From 0 To 10s of billions of page views a month&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html&quot; rel=&quot;nofollow&quot;&gt;18 million visitors, 10x growth, 12 employees&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Playfish&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2010/9/21/playfishs-social-gaming-architecture-50-million-monthly-user.html&quot; rel=&quot;nofollow&quot;&gt;50 million monthly users and growing&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PlentyOfFish&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/plentyoffish-architecture&quot; rel=&quot;nofollow&quot;&gt;PlentyOfFish architecture&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Salesforce&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html&quot; rel=&quot;nofollow&quot;&gt;How they handle 1.3 billion transactions a day&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Stack Overflow&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html&quot; rel=&quot;nofollow&quot;&gt;Stack Overflow architecture&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TripAdvisor&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html&quot; rel=&quot;nofollow&quot;&gt;40M visitors, 200M dynamic page views, 30TB data&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Tumblr&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html&quot; rel=&quot;nofollow&quot;&gt;15 billion page views a month&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Twitter&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster&quot; rel=&quot;nofollow&quot;&gt;Making Twitter 10000 percent faster&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://highscalability.com/blog/2011/12/19/how-twitter-stores-250-million-tweets-a-day-using-mysql.html&quot; rel=&quot;nofollow&quot;&gt;Storing 250 million tweets a day using MySQL&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html&quot; rel=&quot;nofollow&quot;&gt;150M active users, 300K QPS, a 22 MB/S firehose&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.infoq.com/presentations/Twitter-Timeline-Scalability&quot; rel=&quot;nofollow&quot;&gt;Timelines at scale&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5cKTP36HVgI&quot; rel=&quot;nofollow&quot;&gt;Big and small data at Twitter&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=z8LU0Cj6BOU&quot; rel=&quot;nofollow&quot;&gt;Operations at Twitter: scaling beyond 100 million users&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Uber&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html&quot; rel=&quot;nofollow&quot;&gt;How Uber scales their real-time market platform&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://highscalability.com/blog/2016/10/12/lessons-learned-from-scaling-uber-to-2000-engineers-1000-ser.html&quot; rel=&quot;nofollow&quot;&gt;Lessons Learned From Scaling Uber To 2000 Engineers, 1000 Services, And 8000 Git Repositories&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;WhatsApp&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html&quot; rel=&quot;nofollow&quot;&gt;The WhatsApp architecture Facebook bought for $19 billion&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;YouTube&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=w5WVu624fY8&quot; rel=&quot;nofollow&quot;&gt;YouTube scalability&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://highscalability.com/youtube-architecture&quot; rel=&quot;nofollow&quot;&gt;YouTube architecture&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;Company engineering blogs&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Architectures for companies you are interviewing with.&lt;/p&gt;
&lt;p&gt;Questions you encounter might be from the same domain.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Source(s) and further reading&lt;/h4&gt;
&lt;p&gt;Looking to add a blog? To avoid duplicating work, consider adding your company blog to the following repo:&lt;/p&gt;
&lt;h2&gt;Under development&lt;/h2&gt;
&lt;p&gt;Interested in adding a section or helping complete one in-progress? &lt;a href=&quot;https://github.com/donnemartin/system-design-primer#contributing&quot;&gt;Contribute&lt;/a&gt;!&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Distributed computing with MapReduce&lt;/li&gt;
&lt;li&gt;Consistent hashing&lt;/li&gt;
&lt;li&gt;Scatter gather&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer#contributing&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;Credits and sources are provided throughout this repo.&lt;/p&gt;
&lt;p&gt;Special thanks to:&lt;/p&gt;
&lt;h2&gt;Contact info&lt;/h2&gt;
&lt;p&gt;Feel free to contact me to discuss any issues, questions, or comments.&lt;/p&gt;
&lt;p&gt;My contact info can be found on my &lt;a href=&quot;https://github.com/donnemartin&quot;&gt;GitHub page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;I am providing code and resources in this repository to you under an open source license. Because this is my personal repository, the license you receive to my code and resources is from me and not my employer (Facebook).&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Copyright 2017 Donne Martin

Creative Commons Attribution 4.0 International License (CC BY 4.0)

http://creativecommons.org/licenses/by/4.0/
&lt;/code&gt;
&lt;/pre&gt;&lt;/article&gt;</description>
<pubDate>Fri, 13 Jul 2018 12:34:59 +0000</pubDate>
<dc:creator>donnemartin</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/5458997?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>donnemartin/system-design-primer</og:title>
<og:url>https://github.com/donnemartin/system-design-primer</og:url>
<og:description>system-design-primer - Learn how to design large-scale systems. Prep for the system design interview. Includes Anki flashcards.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/donnemartin/system-design-primer</dc:identifier>
</item>
<item>
<title>North American vs. Japanese zoning</title>
<link>http://devonzuegel.com/post/north-american-vs-japanese-zoning</link>
<guid isPermaLink="true" >http://devonzuegel.com/post/north-american-vs-japanese-zoning</guid>
<description>&lt;p&gt;These notes come from reading two blog posts from the wonderful &lt;span&gt;Urban Kchoze&lt;/span&gt; blog:&lt;/p&gt;

&lt;p&gt;The Japanese system is inclusionary, as contrasted to the exclusionary system common here in the US. The typical zoning form in America is called euclidian zoning, which specifies the allowed uses and dimensions for a zone. Japan zones limit the “maximum nuisance&quot; in a zone, and allow for any development below that threshold (e.g. a factory can’t be built in a residential neighborhood but housing can be built in a light industrial zone). &lt;span&gt;You can think of this as whitelist vs blacklist approaches&lt;/span&gt;. The result in the Japanese case is a lot more mixed use development, while in the US land use is a lot more segregated.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Japanese zoning practices&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;div&gt;&lt;img src=&quot;https://postachio-images.s3.amazonaws.com/0bd25fcc-8ab1-40fe-8eef-bcafaae885c1/2d61db43-0fac-4c5b-953e-787468f876a0/de58521d-8f39-4882-891d-c1b01f610f57.jpg&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;img src=&quot;https://postachio-images.s3.amazonaws.com/0bd25fcc-8ab1-40fe-8eef-bcafaae885c1/2d61db43-0fac-4c5b-953e-787468f876a0/f5d3cd3a-0ec8-4ee0-bdd4-dc1387147bdb.jpg&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;in N American zoning, a zone clearly specifies what is allowed in it (a sort of “whitelist&quot; approach), and zones allow only one or two uses&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;planning departments must micromanage the smallest detail – if they forget to zone for enough commercial zones or schools, they need to change the zoning later and therefore confront NIMBYs&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;a lot of needed uses are forgotten =&amp;gt; they then have to be built on the outskirts of the city&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://postachio-images.s3.amazonaws.com/0bd25fcc-8ab1-40fe-8eef-bcafaae885c1/2d61db43-0fac-4c5b-953e-787468f876a0/72a08b32-3ee5-42a6-a5d1-88e42e954d99.jpg&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;doesn’t differentiate different types of residential use&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;9&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;N American zoning tends to treat single-family and multifamily as two separate uses to keep segregated&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;in Japan, if a building is used to provide a place to live to people, it’s residential, that’s all – whether it’s rented, owned, houses one or many households, it doesn’t matter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;maximum ratios of building to land areas still restrict how high and how dense residential buildings may be, so you’re not going to get a 10-story apartment block in the middle of single-family houses&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;in American cities, if the planning department doesn’t plan for enough multifamily or single-family zones, you can create big problems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;there may be shortages of either multifamily or single-family zones, pushing prices up for that kind of housing&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;in practice, it’s most often rental units that get the shaft, resulting in sky-high rents as there is a rental unit crisis (ahem, San Francisco…)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;in Japan, multifamily homes tend to congregate around schools, commercial sectors or train stations. This makes sense, because the $$ per square foot of land of multifamily uses is higher than for single-family homes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;rational rather than arbitrary height limits&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;the farther a building is set back from the street and the wider the street, the higher it can be&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;rules sometimes omitted when they want to build higher buildings&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;in the US, rules are often determined by what’s already in the neighborhood&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;cities have the right to make exceptions, require certain geometric criteria, etc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;results&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;the Japanese model has created/protected urban settings that are far more people focused and walkable&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;much more market-based, responsive to demand&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;this isn’t the only model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img src=&quot;https://postachio-images.s3.amazonaws.com/0bd25fcc-8ab1-40fe-8eef-bcafaae885c1/2d61db43-0fac-4c5b-953e-787468f876a0/2c66be42-9a14-4a4a-a378-b15f2f317a85.jpg&quot;/&gt;&lt;br/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;American zoning practices: Euclidian zoning&lt;/span&gt;&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;a typical American suburb comprises blocks of nearly identical single-family homes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;in N America, the typical standards are what is called “euclidian zoning&quot; (from the city of Euclid, Ohio)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li&gt;
&lt;p&gt;extremely strict&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;considers single- and multi-family homes to be two separate uses to separate, as are semi-detached houses and fully detached houses (contrasted against European and Asian zoning, which consider residential as residential)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;originates from racial segregation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;at first, zoning explicitly banned certain races&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;when it was ruled unconstitutional, they used different ways to achieve the same result&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;minorities were disproportionately poor — more likely to rent, and when they were owners they tended to buy smaller homes =&amp;gt; so zoning (a) banned multifamily buildings in single-family areas and (b) established minimum lot and building sizes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;greatly limits density&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;why?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;simple to enforce – simply measure dimensions and see if they conform to the rules&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;satisfies those with a desire to control the built area of their immediate neighborhood, but terrible for macro-management of decent communities&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;the neighborhood doesn’t change much once it’s built up =&amp;gt; NIMBYs love it&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;consequences&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;delays/kills projects =&amp;gt; strangles redevelopment and “keeps neighborhoods in formaldehyde&quot;, effectively makes change illegal&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;ultimate empowerment tool for NIMBYs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;ironically, it means that the only time it’s worth it for developers to confront NIMBYs is to build condo towers, because the profit of denser units justifies fighting for it&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;yet duplexes/rowhouses/etc would be a better, more gradual evolution&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;results in sprawl; easier to build out than densify&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;if the land is reserved only for single-family detached houses, then the profit value of each square foot is kept artificially low&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;encourages corruption&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;when zoning blocks a highly profitable project, you need a zoning modification to let it through&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;developers have an incentive to buy off elected officials&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;div&gt;&lt;img src=&quot;https://postachio-images.s3.amazonaws.com/0bd25fcc-8ab1-40fe-8eef-bcafaae885c1/2d61db43-0fac-4c5b-953e-787468f876a0/2d529cc3-caf4-4f94-91c2-67fd50347f92.png&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;div&gt;&lt;img src=&quot;https://postachio-images.s3.amazonaws.com/0bd25fcc-8ab1-40fe-8eef-bcafaae885c1/2d61db43-0fac-4c5b-953e-787468f876a0/f1c93986-2b83-4d32-a54a-b1c1310eab48.jpg&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
</description>
<pubDate>Fri, 13 Jul 2018 12:15:20 +0000</pubDate>
<dc:creator>oftenwrong</dc:creator>
<og:image>https://postachio-images.s3.amazonaws.com/0bd25fcc-8ab1-40fe-8eef-bcafaae885c1/2d61db43-0fac-4c5b-953e-787468f876a0/de58521d-8f39-4882-891d-c1b01f610f57.jpg</og:image>
<og:type>article</og:type>
<og:title>North American vs Japanese zoning</og:title>
<og:url>http://devonzuegel.com/post/north-american-vs-japanese-zoning</og:url>
<og:description>I originally published these notes in April of last year in one of my old blogs. These notes come from reading two blog posts from the wonderful Urban Kchoze blog:Urban kchoze: Japanese zoning (here is the annotated and cached copy)Urban kchoze:...</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>http://devonzuegel.com/post/north-american-vs-japanese-zoning</dc:identifier>
</item>
<item>
<title>How NoSQL forced the evolution of a scalable relational database</title>
<link>http://blog.memsql.com/nosql/</link>
<guid isPermaLink="true" >http://blog.memsql.com/nosql/</guid>
<description>&lt;p&gt;&lt;span&gt;It’s time for us to admit what we have all known is true for a long time; NoSQL is the wrong tool for many of the modern application use cases, and it’s time that we move on.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;NoSQL came into existence because the databases at the time couldn’t handle the scale required. The rise of this new generation of data services solved many of the problems of web scale and rapidly growing data sets when it was created more than a decade ago. NoSQL also offered a new, cost-effective method for cold storage/occasional batch access for petabyte scale data. However, in the rush to solve for the challenges of big data and large numbers of concurrent users, NoSQL abandoned some of the core features of databases that make them highly performant and easy to use.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Dealing with these trade-offs might be NoSQL’s greatest contribution to the database world. It forced an evolution, combining the best of the big data capabilities with the structure and flexibility of the proven relational model to produce a scalable relational database.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Relational databases evolved to create an entirely new generation of systems that can handle nearly all of the workloads, with the scalability, reliability, and availability requirements that modern applications demand. From traditional workloads such as transactional applications and business analytics, to newer workloads such as multi-tenant services and operational analytics. The rise of new databases such as Google Spanner, Azure Data Warehouse, and our eponymous database, MemSQL, have proven that, for the majority of use cases, relational databases are easier to use and generally perform better than the NoSQL systems.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I know this might be controversial. I also know that you might quickly dismiss my perspective as biased. But let me break down the history, architecture, and applications of these databases, then judge for yourself.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;NoSQL came full force onto the scene in the late 2000s, although it started much further back. It was developed largely to address the scale problems of existing database systems. It was clear that scale out was a more cost-effective model for building large systems. For the largest systems such as email and search built by Google, Facebook, Microsoft, and Yahoo, it was the only way to scale.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The value of scale-out first clicked for me personally when I read James Hamilton’s&lt;/span&gt; &lt;a href=&quot;https://www.usenix.org/legacy/event/lisa07/tech/full_papers/hamilton/hamilton_html/index.html&quot;&gt;&lt;span&gt;paper on designing and deploying Internet Scale Services in 2007&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Scaling the application tier came first because it was easier to scale a stateless system. The storage layer was another story. By definition, databases are stateful, and maintaining the guarantees (i.e.&lt;/span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;&lt;span&gt;ACID&lt;/span&gt;&lt;/a&gt;&lt;span&gt;) on that state across a distributed system is really hard. So layers were built on top of the existing database systems (MySQL, SQL Server, etc.) to create a distributed storage layer.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I ran into a couple of examples of this while working as a Product Manager in the SQL Server team at Microsoft. The first example was internal at Microsoft where the company built Webstore, which was a sharding layer on top of SQL Server used by Hotmail and the associated services. In fact, Webstore was the motivation to build what eventually became today’s Azure SQL Database. Webstore was clunky and lacked a lot of core functionality but it worked and gave Microsoft an ability both to scale to the size of data it needed and achieve high availability. But Webstore required an entire team of engineers to build and maintain.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In the mid-2000s, MySpace had a large number of SQL Servers to manage the rapidly growing site. The company was adding users so fast that new SQL Server boxes needed to be added every day. Running all those SQL Servers and querying across them was a massively complicated endeavor that took a large number of engineers to maintain.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The same patterns were repeated at Facebook and others, because all of the burgeoning tech giants struggled with scale.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It became clear that, with their massive usage and growth, these new digital services demanded a new solution for ingesting, managing, and surfacing data. Ideally, we needed something that could natively present a single interface but scale out over many machines with built-in high availability.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Eventually, the large scale cloud services (Google, Facebook, Yahoo, Microsoft, and others) all built their own custom systems to handle scale demand. Those systems were all different but the basic ideas were shared, either directly or through academia. Eventually open source systems started popping up using those same ideas, and the NoSQL movement was born.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To solve for web scale, NoSQL departed from the traditional databases in a few critical ways, So let’s look at why these choices were made.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;The Performance and Perils of Eventual Consistency&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;There are two models for storage systems,&lt;/span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;&lt;span&gt;ACID&lt;/span&gt;&lt;/a&gt; &lt;span&gt;and&lt;/span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Eventual_consistency&quot;&gt;&lt;span&gt;BASE&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ACID stands for Atomic, Consistent, Isolation, and Durable. It covers the guarantees you get with most relational databases. ACID guarantees that writes have to wait for the data to hit disk before returning success to the client. Further, if you are really paranoid about durability (i.e. not losing data) you configured the database to wait until the write traveled over the network to some other machine and hit the disk on that side as well. So there is a guarantee that the data is always what you wrote but you give up some performance in write speed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;BASE, which is typical for NoSQL systems, stands for Basically Available, Soft State, and Eventually Consistent. Eventual consistency is faster on writes because the application doesn’t have to wait to see if the write persisted. As soon as the data store captured the write, but before it is persisted to disk or to another machine, it could tell the application the write was successful and the application could move on to the next operation. So you gain a performance advantage but at the risk of not seeing the data you just wrote, or the data might be lost altogether in an error condition.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Eventual consistency is a reasonable trade-off of durability risk versus availability. If your business is consumer engagement and latency has a direct impact on your income (which is true for all content, community, and commerce applications), you want the most responsive UI you can get. If you have to scale to millions of concurrent users you can’t tolerate any bottlenecks. What you trade-off by adopting eventual consistency in your database architecture is occasionally losing someone’s post or a comment, which is an acceptable risk for these types of applications.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The other side of the spectrum of durability versus risk are things such as financial applications. You don’t want your bank using eventual consistency to store the result of your ATM transactions or your stock sales. In these cases, you still have users demanding little to no latency but are unwilling to accept a transaction not getting written to disk.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There is a place for eventual consistency, but it is not always the only answer. Architects and developers of data systems should be able to choose what level of consistency they want. That choice should be at the use case level, not a platform level.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Going Schema-less&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;It’s not clear why schema was lost as part of the NoSQL movement. Yes, it was hard in the early days to build a distributed metadata manager to maintain schemas across a distributed system to support operations, such as adding a column. So it was unsurprising for schema to have been left out of the early designs. But instead of finding a way to add it in later, schema was simply eliminated altogether. It’s also understandable why folks make the argument that it makes you less agile. Good schema design is hard and requires careful upfront thinking. When things are changing rapidly (as they were then and continue to be now) you don’t want to be locked into a schema.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But this is a fallacy.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It is true that lack of schema increases agility for the engineer who owns putting data into the system. However, it kicks the problem down to the readers of the data, who are usually an order of magnitude greater in number and often don’t have the context about the state of the data when it was written. These users are usually the ones who are generating value from that data and should have as few roadblocks as possible.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To give an analogy, imagine libraries saying they are doing away with the Dewey Decimal System and just throwing the books into a big hole in the ground and declaring it a better system because it is way less work for the librarians. There is a time and place for semi-structured data, because sometimes you don’t know the shape of some of the data ahead of time or it is sparsely populated. But if you truly don’t understand any of the data coming or what it will look like, then what good is it?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The truth is that there is always schema. The data always makes sense to someone. That someone should take the time to encode that knowledge into the platform so it is usable by the next people. If it is a mix of data that is understood and some that is changing rapidly, put the latter into a semi-structured column in a database, then figure out what columns to project out of it later. SQL Server and Oracle could do this with XML 15 years ago. MemSQL, and a number of other modern databases, can do it now with JSON data. Document data storage (and key/value) should be a feature of a modern database, not the sole capability of a product.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Non-SQL Syntax for Query&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;This decision in the design of NoSQL databases follows going schema-less. If you don’t have schema, then ditching SQL syntax kind of makes sense. In addition, query processors are hard to build for a single box, and building a distributed one is much harder. Most notably, if you are a developer trying to get a new app up and running, this kind of system feels easier.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MongoDB perfected the art of a simple installation and first-use experience. But it turns out the relational model is pretty powerful. Just having &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt; functions is great if you never want to answer any question other than “fetch object with id 2”.  But the majority of the applications out there end up needing more than that. If you want to read a great article by someone (who does not work on a data store product) who came to this conclusion after working on two separate projects with MongoDB&lt;/span&gt; &lt;a href=&quot;http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/&quot;&gt;&lt;span&gt;read this&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. It is an excellent example of where document databases fall short.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In anything but the most trivial systems you always end up wanting to query the data a different way then you stored it. Ironically, the relational model was invented in the 1960s to solve this exact problem with the data stores of the time (IMS and Codasyl). A relational model with the ability to join is the only reasonable way to get data out. Yes, it is harder up front, but it is way easier than pulling all the data up into your app and building the join yourself. I have seen customers try to do this over and over again with NoSQL databases, and it always leads to madness.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Many of these NoSQL systems achieved their primary goal. They provided a data store with a single interface that could scale out over many machines with built-in high availability. While there has certainly been some success, NoSQL adoption has run into blockers.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There are couple of different reasons. Performance is a key one, in particular doing analytic queries with any sort of SLA. Manageability is another, because distributed systems are notoriously hard to manage. But the thing preventing traction with NoSQL more than anything, is the need to retrain people. There are a lot of people trained and educated in the relational world. NoSQL has been trying to convert the world for the last 10 years but it has only made a small dent. The NoSQL companies all together make up just a few percent of the $50 billion in the database market. While software engineers seemed to love NoSQL, data people (DBAs, data architects, analysts) went reluctantly into the NoSQL world as seemingly the only way to achieve the scale necessary. But it meant they had to relearn new APIs, tools, and an ecosystem, throwing out years of successful approaches, patterns, and assets. They wanted to do things using a proven model, but still get the scale without compromising the durability, availability, and reliability of the system.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;From NoSQL to NewSQL – Performance and Scale without Compromise&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;When we built MemSQL, we started with the premise that customers liked the capabilities of relational databases but wanted the availability and reliability of a scale out systems. Our goal was to allow a customer to have the best of both worlds.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MemSQL is a distributed relational database that supports transactions and analytics and scales out on commodity hardware. You get the familiar relational model, SQL query syntax, and a giant ecosystem of tools coupled with the scalability and availability of modern, cloud-native systems.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Let’s revisit this in the context of the core differences of a NoSQL system.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Balancing Consistency and Performance&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;MemSQL has knobs that let you tune how much you want to trade-off between consistency and performance. The trade-off will always be there, but now you don’t have to choose between these things at the platform level. You can make the choice for each use case that makes sense.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Consistency versus performance is not some hardcore philosophical choice, it is a choice of what is better for your application and requirements. MemSQL has two settings that let you tune for this. The first lets you decide whether to wait for&lt;/span&gt; &lt;a href=&quot;https://docs.memsql.com/operational-manual/v6.0/using-durability-and-recovery/&quot;&gt;&lt;span&gt;disk persistence or not&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. There is an in-memory buffer that stores the transactions before they are persisted to disk. You can either have success return as soon as it hits the buffer or when it hits the disk. If you return when it hits the buffer there is a chance that a machine failure or reboot could happen before it is persisted and the data will be lost. On the other hand, waiting for it to persist to disk will take longer.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In addition, with HA you have&lt;/span&gt; &lt;a href=&quot;https://docs.memsql.com/operational-manual/v6.0/managing-high-availability/#synchronous-vs-asynchronous-high-availability&quot;&gt;&lt;span&gt;two modes of replication&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, sync and async, that ensures a second copy of the data on another machine. If you set the replication to synchronous mode you wait until the transaction is received on the secondary before returning success to the client. If async mode for replication is on, then the transaction returns success before the data is replicated to the secondary. This gives you the ability to tune the trade-off consistency and durability for performance for what fits your risk/performance profile.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Maintaining Schema in a Distributed System&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;MemSQL implements schema by storing the metadata in small internal database and synchronously replicating the metadata to all the nodes when it is changed. It uses a two-phase commit to ensure that DDL changes propagate properly through the cluster and are built in a way so that they do not block select queries. MemSQL supports more than just relational though. You can type a column as JSON and store a JSON document in it. If you decide there are some columns you want to query later, you can project the properties as columns and index them. MemSQL also supports Spatial types and Full-Text indexes as well. We understand that customers need a mix of data types in a system that is familiar and where all the types of data can co-exist naturally.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Retaining SQL “Lingua Franca”&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;MemSQL has solved for using SQL syntax across distributed databases at scale. A distributed query processor allows you to express your query using standard SQL syntax, and the system takes care of distributing your query across the nodes in the cluster and aggregating the results back for you. MemSQL supports all of the common ANSI SQL operators and functions which gives you a powerful model for expressing just about any query.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MemSQL does this by having two node types in the system, aggregators and leaves. Aggregators handle the metadata of the distributed system, route queries, and aggregate results. Leaves store the data and do the heavy lifting of executing the query on the partitions. Where it can, MemSQL will execute joins locally, which is why schema design is pretty important. If it can’t, MemSQL will shuffle the data as needed. So customers can use the SQL language without knowing how the data is partitioned underneath. If you would like to learn more,&lt;/span&gt; &lt;a href=&quot;https://docs.memsql.com/concepts/v6.0/distributed-architecture/&quot;&gt;&lt;span&gt;MemSQL docs have more detail on how this&lt;/span&gt;&lt;/a&gt; &lt;span&gt;is built.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;What this means is that you are able to use the skills, investments, and tools you already have in your company with MemSQL, or people can use MemSQL the way they use any other relational database and don’t have to be retrained. In addition, because MemSQL supports the MySQL wire protocol, the existing massive ecosystem of BI, ETL, and other middleware tools just work with MemSQL. You don’t have to hire new staff, learn a bunch of new tools, or bring in new software. It just works.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Saying Goodbye to NoSQL&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;NoSQL came along to handle the scale requirements as web apps and multi-tenant services were taking off. Given how hard the problems were to solve, it is understandable that these early attempts at dealing with scaling at the storage layer forced customers into a difficult set of trade-offs.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But relational databases have evolved. They can can handle nearly all of the workloads, with the scalability, reliability, and availability requirements that modern applications demand.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Workloads such as operational analytics. As all companies realize the value of being data driven they want to enable all their employees with up-to-date data. To do this requires a new breed of analytics systems that can scale to hundreds of concurrent queries, deliver fast queries without pre-aggregation, and ingest data as it is created. On top of that, they want to expose data to customers and partners, requiring an operational SLA, security capabilities, performance, and scale not possible with current data stores. This is just one of several new workloads that are driving demand for new capabilities beyond what the legacy databases and NoSQL systems can offer.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The relational model has stood the test of time. In addition, it has absorbed the new data types (search, spatial, semi-structured, etc.) and consistency models so they can coexist in one system. There is no inherent scalability challenges with the relational model or the SQL query syntax. It just needed a different storage implementation to take advantage of a scale-out architecture.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The new databases such as MemSQL have proven that, for the majority of use cases, relational databases are easier to use and generally perform better than the NoSQL systems.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Thank you NoSQL. You put pressure on the database community to force it to solve the challenges of the cloud-scale world. It worked. Relational databases have evolved to meet those requirements. We got it from here.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-3419&quot; src=&quot;http://blog.memsql.com/wp-content/uploads/2018/07/Slide1-1.jpg&quot; alt=&quot;blog closer&quot; width=&quot;960&quot; height=&quot;480&quot; srcset=&quot;http://blog.memsql.com/wp-content/uploads/2018/07/Slide1-1.jpg 960w, http://blog.memsql.com/wp-content/uploads/2018/07/Slide1-1-300x150.jpg 300w, http://blog.memsql.com/wp-content/uploads/2018/07/Slide1-1-768x384.jpg 768w&quot; sizes=&quot;(max-width: 960px) 100vw, 960px&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 13 Jul 2018 06:00:04 +0000</pubDate>
<dc:creator>rickn</dc:creator>
<og:type>article</og:type>
<og:title>Thank You for Your Help NoSQL, but We Got It from Here - MemSQL Blog</og:title>
<og:description>It’s time for us to admit what we have all known is true for a long time; NoSQL is the wrong tool for many of the modern application use cases, and it’s time that we …</og:description>
<og:url>http://blog.memsql.com/nosql/</og:url>
<og:image>http://blog.memsql.com/wp-content/uploads/2018/07/Slide2.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.memsql.com/nosql/</dc:identifier>
</item>
<item>
<title>Blackmagic eGPU – Thunderbolt 3 external graphics processor</title>
<link>https://www.blackmagicdesign.com/products/blackmagicegpu/</link>
<guid isPermaLink="true" >https://www.blackmagicdesign.com/products/blackmagicegpu/</guid>
<description>&lt;div readability=&quot;42&quot;&gt;
&lt;p&gt;In addition to graphics and computational acceleration, &lt;span class=&quot;nb-lg&quot;&gt;the Blackmagic eGPU&lt;/span&gt; is also the perfect hub for connecting devices such as keyboards, mice, Thunderbolt monitors, big screen HDMI televisions, high speed storage and more. You get two Thunderbolt 3 connections, a built in 4 port USB hub and HDMI which supports 4K output. Plus, the connections are ergonomically spaced which makes it easy to connect and disconnect your peripherals quickly!&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;&lt;span class=&quot;label&quot;&gt;Built in USB hub supports 4 USB devices&lt;/span&gt; &lt;span class=&quot;label&quot;&gt;Two high speed 40 Gb/s Thunderbolt 3 ports&lt;/span&gt; &lt;span class=&quot;label&quot;&gt;HDMI 2.0 for monitoring up to 4K&lt;/span&gt; &lt;span class=&quot;label&quot;&gt;85W power for charging your computer&lt;/span&gt;&lt;/p&gt;</description>
<pubDate>Fri, 13 Jul 2018 02:23:39 +0000</pubDate>
<dc:creator>gregpower</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.blackmagicdesign.com/products/blackmagicegpu/</dc:identifier>
</item>
</channel>
</rss>