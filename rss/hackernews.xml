<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Apple CEO Tim Cook Calling for Bloomberg to Retract Its Chinese Spy Chip Story</title>
<link>https://www.buzzfeednews.com/article/johnpaczkowski/apple-tim-cook-bloomberg-retraction</link>
<guid isPermaLink="true" >https://www.buzzfeednews.com/article/johnpaczkowski/apple-tim-cook-bloomberg-retraction</guid>
<description>&lt;div id=&quot;&quot;&gt;

&lt;p class=&quot;news-article-header__dek&quot;&gt;&quot;I feel they should retract their story. There is no truth in their story about Apple. They need to do that right thing.&quot;&lt;/p&gt;
&lt;div class=&quot;news-article-header__byline-wrapper-mobile&quot; readability=&quot;6.5641025641026&quot;&gt;
&lt;p class=&quot;xs-mt1 xs-text-3 xs-font-serif bold&quot;&gt;By &lt;a class=&quot;link-initial--text-black link-hover--text-gray link-hover--underline-gray&quot; href=&quot;https://www.buzzfeednews.com/author/johnpaczkowski&quot;&gt;John Paczkowski&lt;/a&gt; and &lt;a class=&quot;link-initial--text-black link-hover--text-gray link-hover--underline-gray&quot; href=&quot;https://www.buzzfeednews.com/author/josephbernstein&quot;&gt;Joseph Bernstein&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;news-article-header__byline-wrapper-desktop&quot;&gt;
&lt;div class=&quot;news-byline-full&quot; readability=&quot;4.0434782608696&quot;&gt;&lt;img class=&quot;news-byline-full__image&quot; src=&quot;https://img.buzzfeed.com/buzzfeed-static/static/2017-06/4/14/user_images/buzzfeed-prod-fastlane-03/johnpaczkowski-v2-29338-1496601475-9_large.jpg&quot; alt=&quot;Headshot of John Paczkowski&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;news-byline-full&quot;&gt;&lt;img class=&quot;news-byline-full__image&quot; src=&quot;https://img.buzzfeed.com/buzzfeed-static/static/2018-07/18/9/user_images/buzzfeed-prod-web-06/sierratall-v2-28972-1531920669-0_large.jpg&quot; alt=&quot;Headshot of Joseph Bernstein&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;news-article-header__timestamps&quot; readability=&quot;38&quot;&gt;
&lt;p class=&quot;news-article-header__timestamps-updated&quot;&gt;Last updated on October 19, 2018, at 2:12 p.m. ET&lt;/p&gt;
&lt;p class=&quot;news-article-header__timestamps-posted&quot;&gt;Posted on October 19, 2018, at 1:14 p.m. ET&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div data-module=&quot;article-wrapper&quot; readability=&quot;94.114600840336&quot;&gt;&lt;div class=&quot;subbuzz subbuzz-image xs-mb4 xs-relative xs-mb1&quot; data-module=&quot;subbuzz-image&quot;&gt;


&lt;div class=&quot;flex xs-flex-column&quot;&gt;&lt;span class=&quot;subbuzz__attribution js-subbuzz__attribution xs-text-6 xs-block&quot;&gt;Beck Diefenbach / Reuters&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subbuzz subbuzz-text xs-mb4 xs-relative&quot; data-module=&quot;subbuzz-text&quot; readability=&quot;86.133585164835&quot;&gt;

&lt;p&gt;Apple CEO Tim Cook, in an interview with BuzzFeed News, went on the record for the first time to deny allegations that his company was the victim of a hardware-based attack carried out by the Chinese government. And, in an unprecedented move for the company, he called for a retraction of the story that made this claim.&lt;/p&gt;
&lt;p&gt;Earlier this month Bloomberg Businessweek published &lt;a href=&quot;https://www.bloomberg.com/news/features/2018-10-04/the-big-hack-how-china-used-a-tiny-chip-to-infiltrate-america-s-top-companies&quot; target=&quot;_blank&quot;&gt;an investigation&lt;/a&gt; alleging Chinese spies had compromised some 30 US companies by implanting malicious chips into Silicon Valley–bound servers during their manufacture in China. The chips, Bloomberg reported, allowed the attackers to create “a stealth doorway” into any network running on a server in which they were embedded. Apple was alleged to be among the companies attacked, and a focal point of the story. According to Bloomberg, the company discovered some sabotaged hardware in 2015, promptly cut ties with the vendor, Supermicro, that supplied it, and reported the incident to the FBI.&lt;/p&gt;
&lt;p&gt;Apple, however, has maintained that none of this is true — in a comment to Bloomberg, in &lt;a href=&quot;https://www.apple.com/newsroom/2018/10/what-businessweek-got-wrong-about-apple/&quot; target=&quot;_blank&quot;&gt;a vociferous and detailed company statement&lt;/a&gt;, and in &lt;a href=&quot;https://www.documentcloud.org/documents/4995747-Letter-October-8th-Version.html&quot; target=&quot;_blank&quot;&gt;a letter to Congress&lt;/a&gt; signed by Apple’s vice president of information security, George Stathakopoulos. Meanwhile, Bloomberg has &lt;a href=&quot;https://www.buzzfeednews.com/article/johnpaczkowski/apple-china-hacking-bloomberg-servers-spies-fbi&quot; target=&quot;_blank&quot;&gt;stood steadfastly by its story&lt;/a&gt; and even published a follow-up account that furthered the original’s claims.&lt;/p&gt;
&lt;p&gt;The result has been an impasse between some of the world’s most powerful corporations and a highly respected news organization, even &lt;a href=&quot;https://www.cnbc.com/2018/10/10/fbi-director-wray-on-super-micro-servers-be-careful-what-you-read.html&quot; target=&quot;_blank&quot;&gt;in the face of questions from Congress&lt;/a&gt;. On Thursday evening, an indignant Cook further ratcheted up the tension in response to an inquiry from BuzzFeed News.&lt;/p&gt;
&lt;p&gt;“There is no truth in their story about Apple,” Cook told BuzzFeed News in a phone interview. &quot;They need to do that right thing and retract it.&quot;&lt;/p&gt;
&lt;p&gt;This is an extraordinary statement from Cook and Apple. The company has never previously publicly (though it may have done so privately) called for the retraction of a news story — even in cases where the stories have had &lt;a href=&quot;https://www.apple.com/newsroom/2018/07/apple-reports-third-quarter-results/&quot; target=&quot;_blank&quot;&gt;major&lt;/a&gt; &lt;a href=&quot;https://www.wsj.com/articles/apple-to-curtail-iphone-x-production-in-the-face-of-weak-demand-1517312098&quot; target=&quot;_blank&quot;&gt;errors&lt;/a&gt; or were demonstratively false, such as a &lt;em&gt;This American Life&lt;/em&gt; episode that &lt;a href=&quot;https://www.thisamericanlife.org/460/retraction&quot; target=&quot;_blank&quot;&gt;was shown to be fabricated&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reached for comment, Bloomberg reiterated its previous defense of the story. “Bloomberg Businessweek's investigation is the result of more than a year of reporting, during which we conducted more than 100 interviews,” a spokesperson told BuzzFeed News in response to a series of questions. “Seventeen individual sources, including government officials and insiders at the companies, confirmed the manipulation of hardware and other elements of the attacks. We also published three companies’ full statements, as well as a statement from China’s Ministry of Foreign Affairs. We stand by our story and are confident in our reporting and sources.”&lt;/p&gt;
&lt;p&gt;Bloomberg did not answer questions about evidence supporting its allegations or &lt;a href=&quot;https://risky.biz/RB517_feature/&quot; target=&quot;_blank&quot;&gt;the public remarks&lt;/a&gt; of its &lt;a href=&quot;https://twitter.com/joegrand/status/1049334457361096705&quot; target=&quot;_blank&quot;&gt;named sources&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class=&quot;subbuzz subbuzz__section-divider subbuzz__section-divider--thin xs-block xs-mb4 xs-col-11&quot;/&gt;
&lt;hr class=&quot;subbuzz subbuzz__section-divider subbuzz__section-divider--thin xs-block xs-mb4 xs-col-11&quot;/&gt;&lt;div class=&quot;subbuzz subbuzz-text xs-mb4 xs-relative&quot; data-module=&quot;subbuzz-text&quot; readability=&quot;49&quot;&gt;

&lt;p&gt;Although they are unusual, Cook’s comments highlight the CEO’s ongoing personal involvement in Apple’s response to the story, and his mounting frustration that the company’s rebuttals to it have been ignored by Bloomberg.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;“I was involved in our response to this story from the beginning,” said Cook.&lt;/p&gt;
&lt;p&gt;“I personally talked to the Bloomberg reporters along with Bruce Sewell, who was then our general counsel. We were very clear with them that this did not happen, and answered all their questions,” said Cook. “Each time they brought this up to us, the story changed, and each time we investigated we found nothing.”&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;subbuzz subbuzz-pullquote xs-relative col xs-col-12 xs-z1 xs-mb4 md-text-center&quot; data-module=&quot;subbuzz-quote&quot; readability=&quot;32&quot;&gt;

&lt;p&gt;“This did not happen. There’s no truth to this.”&lt;/p&gt;


&lt;/div&gt;
&lt;div class=&quot;subbuzz subbuzz-text xs-mb4 xs-relative&quot; data-module=&quot;subbuzz-text&quot; readability=&quot;53.890853189854&quot;&gt;

&lt;p&gt;In addition to disputing the report itself, Cook also took issue with the lack of evidence he said Bloomberg supplied to document its claims. Cook said the reporters never provided Apple with any specific details about the malicious chips it is alleged to have found and removed. He added that he thinks the allegations are undergirded by “vague secondhand accounts.”&lt;/p&gt;
&lt;p&gt;“We turned the company upside down,” Cook said. “Email searches, data center records, financial records, shipment records. We really forensically whipped through the company to dig very deep and each time we came back to the same conclusion: This did not happen. There’s no truth to this.”&lt;/p&gt;
&lt;p&gt;Asked if a scenario like the one Bloomberg described could occur without him knowing about it, Cook replied, “The likelihood of that is virtually zero.”&lt;/p&gt;
&lt;p&gt;Cook’s commentary only furthers a growing sense of intrigue around the story, which has been the subject of &lt;a href=&quot;https://twitter.com/RidT/status/1053097582866677760&quot; target=&quot;_blank&quot;&gt;ongoing&lt;/a&gt; &lt;a href=&quot;https://twitter.com/alexstamos/status/1050029407513993216&quot; target=&quot;_blank&quot;&gt;public debate&lt;/a&gt; among &lt;a href=&quot;https://twitter.com/dotMudge/status/1048365387199533056&quot; target=&quot;_blank&quot;&gt;information&lt;/a&gt; security &lt;a href=&quot;https://twitter.com/spacerog/status/1049309380599058433?s=12&quot; target=&quot;_blank&quot;&gt;experts&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/nicoleperlroth/status/1049018902984835072&quot; target=&quot;_blank&quot;&gt;journalists&lt;/a&gt;. The piece would have massive global security ramifications if it is indeed accurate. It was published by one of the most respected publications in the world, one thought to have high-level government sources. And yet government security agencies and people who lead them are also puzzled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;subbuzz subbuzz-tweet xs-mb4&quot; data-module=&quot;tweet&quot;&gt;

&lt;div class=&quot;js-tweet__container tweet__container&quot;&gt;
&lt;blockquote class=&quot;subbuzz-tweet__container js-tweet__placeholder xs-border rounded xs-m0 xs-mb1 xs-p0&quot; readability=&quot;6.0900783289817&quot;&gt;
&lt;div class=&quot;subbuzz-tweet__tweet xs-p2&quot; readability=&quot;11.368146214099&quot;&gt;
&lt;div class=&quot;subbuzz-tweet__byline xs-mb2&quot;&gt;&lt;img class=&quot;subbuzz-tweet__avatar xs-mr1&quot; src=&quot;https://pbs.twimg.com/profile_images/568967098051739648/byDkbFbn_normal.png&quot; alt=&quot;🚨 Something is wrong. Blanket denials from companies, NCSC and DHS are v. unusual. The only precedent for this is a 2014 Bloomberg article, by the same author, which claimed NSA exploited Heartbleed, and was vigorously knocked down with zero follow up by Bloomberg or correction. https://t.co/lRMiJlXD5G&quot;/&gt;
&lt;/div&gt;
&lt;p class=&quot;subbuzz-tweet__text&quot;&gt;🚨 Something is wrong. Blanket denials from companies, NCSC and DHS are v. unusual. The only precedent for this is a 2014 Bloomberg article, by the same author, which claimed NSA exploited Heartbleed, and was vigorously knocked down with zero follow up by Bloomberg or correction. https://t.co/lRMiJlXD5G&lt;/p&gt;
&lt;time class=&quot;subbuz-tweet__timestamp xs-my1 xs-text-5 xs-block&quot;&gt;&lt;a class=&quot;subbuzz-tweet__created-at&quot; href=&quot;https://twitter.com/nicoleperlroth/status/1049018902984835072&quot;&gt;07:29 PM - 07 Oct 2018&lt;/a&gt;&lt;/time&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subbuzz subbuzz-text xs-mb4 xs-relative&quot; data-module=&quot;subbuzz-text&quot; readability=&quot;27.374622356495&quot;&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.dhs.gov/news/2018/10/06/statement-dhs-press-secretary-recent-media-reports-potential-supply-chain-compromise&quot; target=&quot;_blank&quot;&gt;United States Department of Homeland Security&lt;/a&gt;, the &lt;a href=&quot;https://www.reuters.com/article/us-china-cyber-britain/uk-cyber-security-agency-backs-apple-amazon-china-hack-denials-idUSKCN1MF1DN&quot; target=&quot;_blank&quot;&gt;UK’s National Cyber Security Center&lt;/a&gt;, NSA Senior Adviser for Cybersecurity Strategy &lt;a href=&quot;https://twitter.com/dnvolz/status/1050016692955488256?s=12&quot; target=&quot;_blank&quot;&gt;Rob Joyce&lt;/a&gt;, &lt;a href=&quot;https://www.reuters.com/article/us-china-cyber-britain/uk-cyber-security-agency-backs-apple-amazon-china-hack-denials-idUSKCN1MF1DN&quot; target=&quot;_blank&quot;&gt;former FBI general counsel James Baker&lt;/a&gt;, and US Director of National Intelligence &lt;a href=&quot;https://www.cyberscoop.com/dan-coats-bloomberg-supply-chain-the-big-hack/&quot; target=&quot;_blank&quot;&gt;Dan Coats&lt;/a&gt; have all said variously that they either have no reason to doubt the denials of the companies mentioned in the Bloomberg story or that they've seen no evidence supporting its claims. And some sources named in the story &lt;a href=&quot;https://twitter.com/joegrand/status/1049334457361096705&quot; target=&quot;_blank&quot;&gt;have raised questions about it&lt;/a&gt; and &lt;a href=&quot;https://risky.biz/RB517_feature/&quot; target=&quot;_blank&quot;&gt;how their remarks were used&lt;/a&gt;. One of those sources, hardware security expert Joe Fitzpatrick, told the &lt;em&gt;Risky Business&lt;/em&gt; podcast the story “&lt;a href=&quot;https://risky.biz/RB517_feature/&quot; target=&quot;_blank&quot;&gt;doesn’t make any sense.&lt;/a&gt;”&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;subbuzz subbuzz-tweet xs-mb4&quot; data-module=&quot;tweet&quot;&gt;

&lt;div class=&quot;js-tweet__container tweet__container&quot;&gt;
&lt;blockquote class=&quot;subbuzz-tweet__container js-tweet__placeholder xs-border rounded xs-m0 xs-mb1 xs-p0&quot; readability=&quot;4.4389067524116&quot;&gt;
&lt;div class=&quot;subbuzz-tweet__tweet xs-p2&quot; readability=&quot;8.0707395498392&quot;&gt;
&lt;div class=&quot;subbuzz-tweet__byline xs-mb2&quot;&gt;&lt;img class=&quot;subbuzz-tweet__avatar xs-mr1&quot; src=&quot;https://pbs.twimg.com/profile_images/1013858539536650240/up5rSBlh_normal.jpg&quot; alt=&quot;Joyce: “We’re befuddled” about the Bloomberg article. Says he has great access to intel and hasn’t found corroboration of the story last week or the new one on telcos, says there is “great frustration” in government about the stories.&quot;/&gt;
&lt;/div&gt;
&lt;p class=&quot;subbuzz-tweet__text&quot;&gt;Joyce: “We’re befuddled” about the Bloomberg article. Says he has great access to intel and hasn’t found corroboration of the story last week or the new one on telcos, says there is “great frustration” in government about the stories.&lt;/p&gt;
&lt;time class=&quot;subbuz-tweet__timestamp xs-my1 xs-text-5 xs-block&quot;&gt;&lt;a class=&quot;subbuzz-tweet__created-at&quot; href=&quot;https://twitter.com/dnvolz/status/1050016692955488256&quot;&gt;01:34 PM - 10 Oct 2018&lt;/a&gt;&lt;/time&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;subbuzz subbuzz-text xs-mb4 xs-relative&quot; data-module=&quot;subbuzz-text&quot; readability=&quot;61&quot;&gt;

&lt;p&gt;One high-ranking national security official told BuzzFeed News that the story has the ring of truth, but stressed that he had no personal knowledge of the investigation detailed by Bloomberg. The official said that there is a highly classified effort in the US government to detect how adversaries implant devices like the one described in the Bloomberg story.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Meanwhile, other publications have been unable to advance or even match Bloomberg’s reporting. And powerful voices from Silicon Valley to DC have publicly and privately questioned the validity of the story. Earlier this month, FBI Director Christopher Wray warned a hearing of the Senate Homeland Security Committee to “be careful what you read” in reference to the report. And a high-ranking executive at a publicly traded tech giant told BuzzFeed News that his company knew the supply chain in question in the Bloomberg story, and that a corporate investigation didn’t turn up any evidence of tampering. “We couldn’t find anything,” he said. “Our assessment is that it didn’t happen.”&lt;/p&gt;
&lt;p&gt;Another high-ranking executive at a major Silicon Valley tech company echoed that assessment.&lt;/p&gt;
&lt;p&gt;“I'm responsible for supporting many of the organizations that this touched, so this story was a ‘holy shit’ moment for me,” they told BuzzFeed News. “And we went and pulled every possible string — because god forbid something like this happened and you didn't know — and we found nothing.”&lt;/p&gt;
&lt;p&gt;Amazon, which along with Apple was a major subject of Bloomberg’s story, issued a similarly vehement denial on the day of its publication, and then went dark. The company has not responded to repeated requests for comment or interviews with CEO Jeff Bezos or general counsel David Zapolsky.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;subbuzz subbuzz-pullquote xs-relative col xs-col-12 xs-z1 xs-mb4 md-text-center&quot; data-module=&quot;subbuzz-quote&quot; readability=&quot;33&quot;&gt;

&lt;p&gt;“Please leave us out of this. We weren’t mentioned and I don’t want us to be. I don’t know what the fuck is going on here.”&lt;/p&gt;


&lt;/div&gt;
&lt;div class=&quot;subbuzz subbuzz-text xs-mb4 xs-relative&quot; data-module=&quot;subbuzz-text&quot; readability=&quot;63&quot;&gt;

&lt;p&gt;Meanwhile, companies that might possibly be among the 30 alleged to have been compromised are doing all they can to steer clear of the story. “We investigated and we found nothing,” an executive at one Fortune 50 company told BuzzFeed News. “Please leave us out of this. We weren’t mentioned and I don’t want us to be. I don’t know what the fuck is going on here.”&lt;/p&gt;
&lt;p&gt;According to numerous spokespeople and executives in positions to know about internal investigations, the following tech companies and banks are not members of the group of almost 30 that Bloomberg alleges were compromised: Google, Microsoft, IBM, Oracle, Dell, Hewlett Packard, Verizon, Comcast, AT&amp;amp;T, Twitter, Palantir, T-Mobile, Goldman Sachs, and Capital One.&lt;/p&gt;
&lt;p&gt;For now, it seems that resolving the mystery around the story would require Bloomberg to open itself up — or be opened up. But moving from a dispute in public to a dispute in court is something none of the companies named in the report have signaled a desire to do.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;With additional reporting by Ryan Mac and Kevin Collier&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;subbuzz subbuzz-correction-update xs-mb4 xs-relative&quot; readability=&quot;10&quot;&gt;

&lt;h3 class=&quot;subbuzz__title xs-mb1 bold&quot;&gt;&lt;span class=&quot;js-subbuzz__title-text&quot;&gt;UPDATE&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;time class=&quot;buzz-timestamp__time js-timestamp__time&quot; data-unix=&quot;1539972027&quot;&gt;Oct. 19, 2018, at 18:00 PM&lt;/time&gt;&lt;/p&gt;
&lt;div class=&quot;subbuzz__description&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;This story has been updated with additional quotes from our Thursday interview with Tim Cook.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;</description>
<pubDate>Fri, 19 Oct 2018 17:15:33 +0000</pubDate>
<dc:creator>minimaxir</dc:creator>
<og:url>https://www.buzzfeednews.com/article/johnpaczkowski/apple-tim-cook-bloomberg-retraction</og:url>
<og:image>https://img.buzzfeed.com/buzzfeed-static/static/2018-10/19/11/enhanced/buzzfeed-prod-web-03/original-12672-1539964781-2.jpg?crop=1910:1000;0,273</og:image>
<og:title>Apple CEO Tim Cook Is Calling For Bloomberg To Retract Its Chinese Spy Chip Story</og:title>
<og:description>&quot;I feel they should retract their story. There is no truth in their story about Apple. They need to do that right thing.&quot;</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.buzzfeednews.com/article/johnpaczkowski/apple-tim-cook-bloomberg-retraction</dc:identifier>
</item>
<item>
<title>Japan&amp;#039;s Hometown Tax</title>
<link>https://www.kalzumeus.com/2018/10/19/japanese-hometown-tax/</link>
<guid isPermaLink="true" >https://www.kalzumeus.com/2018/10/19/japanese-hometown-tax/</guid>
<description>&lt;p&gt;This is outside of my normal software-focused beat, but I met some folks who were very interested in public policy recently. I found, to my surprise, that I probably understand one innovative Japanese tax policy better than very well-informed people who geek out about tax policy [&lt;a href=&quot;https://www.kalzumeus.com/2018/10/19/japanese-hometown-tax/#footnote-0&quot;&gt;0&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;This post hopefully fixes that bug. (Hat tip to &lt;a href=&quot;http://www.gwern.net/&quot;&gt;gwern&lt;/a&gt; for suggesting I write it up.)&lt;/p&gt;
&lt;h2 id=&quot;two-countries-in-one-border&quot;&gt;Two countries in one border&lt;/h2&gt;
&lt;p&gt;The Japanese employment market has a curious feature: there are regions of Japan with extremely high economic productivity (such as Tokyo, Osaka, and Nagoya, but for the purpose of this issue think “Tokyo” and you won’t be wrong) and regions with low economic productivity (substantially everywhere else). This counsels that a young person born and educated in e.g. Gifu move to Tokyo after graduation to earn a living.&lt;/p&gt;
&lt;p&gt;Many, many do. While Japan’s overall population is declining, Tokyo’s increases by about 100,000 people per year.&lt;/p&gt;
&lt;p&gt;The regions in Japan are not thrilled about this state of affairs for many reasons. Tokyo isn’t just the seat of Japanese commerce; it also houses the government, media, cultural institutions, etc etc. There is a real sense that your children moving to Tokyo causes them to lose connection with their culture and that the rewards from the national enterprise aren’t being allocated fairly. Tokyo, for its perspective, views the regions with the noblesse oblige that you would expect a cosmopolitan center of culture and learning to have with respect to their benighted country bumpkin cousins.&lt;/p&gt;
&lt;p&gt;(If this sounds like it echoes the political economy of, say, two large English-speaking nations recently, well, folks greatly overestimate how different Western nations are from each other.)&lt;/p&gt;
&lt;h2 id=&quot;a-misalignment-in-incentives-for-human-capital-development&quot;&gt;A misalignment in incentives for human capital development&lt;/h2&gt;
&lt;p&gt;Educating children is incredibly expensive. The regions are quite annoyed that they pay to educate their children but that Tokyo reaps all the benefits. This state of affairs has continued for decades.&lt;/p&gt;
&lt;p&gt;But Japan has a policy response for it, and it is sort of beautiful. Called ふるさと納税 (&lt;em&gt;Furusato Nouzei&lt;/em&gt; or, roughly, the Hometown Tax System), it works something like this:&lt;/p&gt;
&lt;p&gt;A substantial portion of Japan’s income-based taxes are residence taxes, which are paid to the city and prefecture (think state) that one resides in, based on one’s income in the previous year. The rate is a flat 10% of taxed income; due to quirks of calculating this which almost certainly aren’t relevant to you, you can estimate this as 8% of what white collar employees think their salary is.&lt;/p&gt;
&lt;p&gt;Furusato Nouzei allows you to donate up to 40% of next year’s residence tax to one or many cities/prefectures of your choice, in return for a 1:1 credit on your tax next year. This is entirely opt-in. Anyone can participate, regardless of where they live.&lt;/p&gt;
&lt;p&gt;In principle, the idea is to donate to one’s hometown. Importantly, one actually has unfettered discretion as to which city/prefecture one donates to. This has some very important implications discussed later.&lt;/p&gt;
&lt;p&gt;Relevantly to your understanding of the incentives here: most Japanese people do not file taxes every year. Income-based taxes are calculated and remitted by employers directly on the behalf of their employees. Participating in the system requires friction which is somewhat above e.g. changing your direct deposit information but far below e.g. filing a tax return.&lt;/p&gt;
&lt;h2 id=&quot;what-was-the-idea-here&quot;&gt;What was the idea here?&lt;/h2&gt;
&lt;p&gt;Tokyo and the regions could have resolved their differences through the democratic process, in which the regions outvote Tokyo and could have altered Japan’s national tax and economic policies to their advantage. Tokyo obviously doesn’t want this, and instead agreed to an opt-in system which allays some of the regions’ concerns.&lt;/p&gt;
&lt;p&gt;To the extent that taxpayers donate to their hometowns, Tokyo no longer freerides on the substantial public expenditures required to raise and educate internal migrants.&lt;/p&gt;
&lt;p&gt;Putting potentially 40% of Tokyo’s residence tax in play is &lt;em&gt;not a small carrot&lt;/em&gt;. Individual residence tax is roughly 45% of the city’s revenue. That works out to roughly &lt;a href=&quot;http://www.metro.tokyo.jp/ENGLISH/ABOUT/FINANCIAL/financial02.htm&quot;&gt;$30 billion a year.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now if you were a negotiator for Tokyo back in ~2006 when this was being debated, you might have thought “Hmm, while this &lt;em&gt;sounds&lt;/em&gt; like it is putting $12 billion a year into play, it’s not actually nearly that bad for us. People have to take affirmative steps to transfer the money to their city of choice, and they have to float the money for most of a year, because of the donate-then-credit mechanism. Uptake on that won’t be that high. Maybe we’ll lose a few tens of millions of dollars; no biggie. Silly country bumpkins; can’t even math.”&lt;/p&gt;
&lt;p&gt;But after the system was created, city governments started getting really creative. And what happened next is by parts beautiful and crazy.&lt;/p&gt;
&lt;h2 id=&quot;incentives-rule-everything-around-me&quot;&gt;Incentives rule everything around me&lt;/h2&gt;
&lt;p&gt;There exists a culture in Japan of reciprocating gifts. While it varies based on where you live, in the areas I’ve lived, the general rule of thumb is 30%: if you give someone $300 cash on the occasion of their wedding, as is customary for gainfully employed people with respect to someone outside their immediate family, they’re socially obligated to find a way to give you $90 of value back. (The mechanisms for doing this could merit their own post; the word is 返礼品. A dictionary translates this as “quid pro quo”, but the sentiment does not match the common English usage of that phrase. This is simply a ritual; to not participate in it would be non-normative.)&lt;/p&gt;
&lt;p&gt;While not formally defined in the legislation for the Furusato Nouzei system, someone at a city government figured that it was just not appropriate to let someone just give ~3% of their salary to the city without receiving a token of appreciation in return. So they sent something back; a can of locally-produced plums, say, to remind you of the tastes of your childhood.&lt;/p&gt;
&lt;p&gt;And this was a beautiful idea! It directly improved the ability of the system to cement relationships between internal migrants and their hometowns, one of the declared goals of the system. It motivated people to fill out paperwork and float the city a bit of money for part of a year, because who doesn’t like free plums. (You might sensibly object that they aren’t free given the time value of money, but prevailing interest rates in Japan are indistinguishable from zero.) And it let cities specialize in marketing this initiative.&lt;/p&gt;
&lt;p&gt;And specialize they did.&lt;/p&gt;
&lt;p&gt;A number of cities in Japan, including my adoptive home town of Ogaki, have made this offer: for a no-cost-to-you donation of $100 or more, the city will send someone out to any grave in the city limits. That person will clean the grave, make an appropriate offering, and send you a photo. This is a beautiful thing.&lt;/p&gt;
&lt;p&gt;Most of the gifts are more prosaic. Locally produced food is very popular. If you miss the taste of home, they’ve got you covered.&lt;/p&gt;
&lt;p&gt;Cities partnered with local firms to handle the e-commerce aspect, and eventually with platforms to bundle many different items into a single donation; think of it as a shopping cart you could fill with donated money.&lt;/p&gt;
&lt;p&gt;And then someone asked a fateful question.&lt;/p&gt;
&lt;h2 id=&quot;where-is-your-hometown-anyway&quot;&gt;Where is your hometown, anyway?&lt;/h2&gt;
&lt;p&gt;The Furusato Nouzei system does not define what a “hometown” is. This is mostly by design; Japan historically has a &lt;em&gt;very&lt;/em&gt; long-lasting official record of birthplaces which follows one throughout life called the Family Register, and (for reasons outside the scope of this post) it is a major societal issue. Additionally, there was some sentiment that one could have a it-feels-like-home connection to a city that wasn’t necessarily one’s birthplace.&lt;/p&gt;
&lt;p&gt;Maybe you were born in Tokyo but lived 30 years in a small town in Aichi, like my wife. Maybe you were born abroad but lived 10 years in Ogaki, like me. Maybe you just loved the onsen in Gero and wanted to subsidize them. The government wasn’t willing to adjudicate one’s “true” hometown; 帰る場所 is where the heart is.&lt;/p&gt;
&lt;p&gt;And then some bureaucrat realized that this created a market: you, as a city government, can bid for taxpayers to select you as a hometown.&lt;/p&gt;
&lt;h2 id=&quot;how-does-that-work&quot;&gt;How does that work?&lt;/h2&gt;
&lt;p&gt;Well, remember the sites which are acting as brokers for donations? They all have search engines, so that you can search by e.g. who has wagyu available if that is your thing.&lt;/p&gt;
&lt;p&gt;Your thing could, plausibly, be travel to your hometown. So your hometown could, plausibly, buy you tickets back to home. But this would be gratuitously operationally intensive.&lt;/p&gt;
&lt;p&gt;You have you call city hall. They have to arrange transport. Why do this when Japan is a country with perfectly functioning travel agencies? It would be far better for everyone for your hometown to just send you a gift card to a travel agency.&lt;/p&gt;
&lt;p&gt;See where this is going yet? A gift card for e.g. Japan’s largest travel agency is a highly liquid cash equivalent. In addition to using it for any good or service from that travel agency, you could liquidate it for about 97 cents on the dollar in any gift certificate exchange in the country. (These are extraordinarily common in Japan.)&lt;/p&gt;
&lt;p&gt;A few rounds of vigorous capitalism later, many rural towns without large expatriate (inpatriate?) populations and without much to differentiate them in terms of local food had bid the consideration for a donation up, up, up. Eventually the central government stepped in and said that the maximum they’d allow is you rewarding a taxpayer with 50% of the donation in consideration.&lt;/p&gt;
&lt;p&gt;So, if you “donate” ~3% of your gross salary to one of these cities (which is 1:1 matched by e.g. Tokyo; you’re donating someone else’s money), they will give you ~1.5% of it back in all-but-cash.&lt;/p&gt;
&lt;p&gt;In 2008, about 33,000 people participated in the Furusato Nouzei system, principally out of genuine charitable concern. In 2016, it was about 2.2 million. They donated on the order of $2.5 billion. The primary accelerant was the bidding war. A contributor was the popularization of Internet sites to broker the donations, which substantially reduce the friction required to participate.&lt;/p&gt;
&lt;p&gt;Running a site is a very good business to be in; it’s like running an e-commerce business with the special wrinkle that your customers are entirely price insensitive. There are a variety of smaller concerns, but the large Japanese Internet giants (Rakuten, Yahoo, etc) all use their massive built-in distribution and relationships to get an edge here. (The business model is simple: take the money from taxpayers, deduct a cut, spend some on gifts authorized by the city, and remit the remainder to the city periodically. You then periodically give the city an Excel file full of taxpayers. The city periodically sends their donors the requisite paperwork to get the tax credit the next year.)&lt;/p&gt;
&lt;p&gt;I’d estimate that intermediaries probably soak up somewhere between 5% and 10% of the total donated. This is quite inefficient to accomplish a government-to-government reallocation of resources, but by the standards of Japanese public works projects it is practically free.&lt;/p&gt;
&lt;p&gt;(Jokes aside: my estimate is informed by the fact that the margins are rich enough such that the intermediaries will &lt;em&gt;happily&lt;/em&gt; support you making a donation on credit cards. The actual numbers are probably in a public disclosure somewhere but I don’t have enough time to go looking.)&lt;/p&gt;
&lt;h2 id=&quot;is-this-sustainable&quot;&gt;Is this sustainable?&lt;/h2&gt;
&lt;p&gt;Probably? There has been some talk of rolling back the bidding war via administrative fiat, but the cities are quite opposed to this. It’s a great game theory problem: unless a supermajority of cities collectively agrees to limit gifts to a token number, it’s strongly in a city’s interest to duck the central government’s questionnaires and not express any objection to the status quo. (Also remember that the natural anchor for reciprocation is set quite high across much of Japan; the government might succeed in capping reciprocation at 30% but that might be a hard floor for the ceiling.)&lt;/p&gt;
&lt;p&gt;The penetration rate of this system will likely continue quickly increasing. It’s socially viral: a tax optimization that virtually anyone can take advantage of, has the explicit backing of the government, and feels wholesome. If you’re one of the relatively few taxpayers in Japan who has an accountant, expect them to tell you about this in detail and strongly recommend you max our your contribution every year.&lt;/p&gt;
&lt;p&gt;Widespread gaming or no, the system pretty much works according to the internal aims. Cities get a list of their internal diaspora, and do make considerably more effort to stay in touch with them than they did previously. (This includes lovely holiday cards and sometimes even I-can’t-believe-they’re-not-alumni-magazines.) You really do get plums from childhood in your mail from your hometown (if you don’t optimize for cash equivalents). Cities with declining local tax bases really do get enough money to do material projects with. Tokyo takes a hit to revenue but can afford it.&lt;/p&gt;
&lt;p&gt;And there, that’s Japan’s most novel redistribution program in a nutshell.&lt;/p&gt;
&lt;p&gt;If you live in Japan and want to take advantage of this, hit up your local Google; many sites are happy to make it happen for you. (I don’t endorse any in particular, but any of the top brands or organic search results will work substantially as advertised.)&lt;/p&gt;
&lt;p&gt; [0]: I had been of the impression up until today that it was literally not on the English-speaking Internet, but this seems to have changed in the last few years. That said, nobody seems to have written about the policy angle in English yet, so here we are.&lt;/p&gt;
</description>
<pubDate>Fri, 19 Oct 2018 13:45:54 +0000</pubDate>
<dc:creator>gwern</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.kalzumeus.com/2018/10/19/japanese-hometown-tax/</dc:identifier>
</item>
<item>
<title>Microservices Are Something You Grow Into, Not Begin With</title>
<link>https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with</link>
<guid isPermaLink="true" >https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p class=&quot;post-meta&quot;&gt;Updated on August 21st, 2018 in &lt;a href=&quot;https://nickjanetakis.com/blog/tag/elixir-tips-tricks-and-tutorials&quot;&gt;#elixir,&lt;/a&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/tag/flask-tips-tricks-and-tutorials&quot;&gt;#flask,&lt;/a&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/tag/javascript-tips-tricks-and-tutorials&quot;&gt;#javascript,&lt;/a&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/tag/ruby-on-rails-tips-tricks-and-tutorials&quot;&gt;#ruby-on-rails&lt;/a&gt;&lt;/p&gt;

&lt;img src=&quot;https://nickjanetakis.com/assets/blog/cards/microservices-are-something-you-grow-into-not-begin-with-b6c5c7cad05d4d93f2c6ac140938edfc8a61e4cbffb5098b31aec228ce61e571.jpg&quot; class=&quot;post-card&quot; width=&quot;750&quot; height=&quot;422&quot; alt=&quot;blog/cards/microservices-are-something-you-grow-into-not-begin-with.jpg&quot;/&gt;&lt;h2 class=&quot;lead no-letterspacing&quot;&gt;Let's talk about when it might be a good or bad idea to start using microservices. SPOILER ALERT: it's not the same for every project.&lt;/h2&gt;
&lt;p class=&quot;post-quick-jump&quot;&gt;&lt;strong&gt;Quick Jump:&lt;/strong&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#you-re-not-google-unless-you-re-google&quot;&gt;You're not Google (unless you're Google)&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#how-do-most-software-projects-start&quot;&gt;How Do Most Software Projects Start?&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#let-s-talk-about-code-abstractions&quot;&gt;Let's Talk about Code Abstractions&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#relating-code-abstractions-to-microservices&quot;&gt;Relating Code Abstractions to Microservices&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#when-should-you-use-microservices&quot;&gt;When Should You Use Microservices?&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with#final-thoughts&quot;&gt;Final Thoughts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As software developers we have a pretty interesting profession. We can be happily coding away one day, then read an article about something and suddenly you’re questioning your entire programming related existence because Netflix said XYZ.&lt;/p&gt;
&lt;p&gt;Just like that, from 1 opinion of an individual or company you begin to question everything you’ve been doing for years, even if it’s been working great for you.&lt;/p&gt;

&lt;h3 id=&quot;youre-not-google-unless-youre-google&quot;&gt;You’re not Google (unless you’re Google)&lt;/h3&gt;
&lt;p&gt;As we skim HackerNews and other programming news outlets we often come across tech posts from Google, Netflix, Amazon and Facebook and they love to talk about how many hundreds or thousands of services they run and go over the benefits of doing things their way. That’s been a trend for the last few years.&lt;/p&gt;
&lt;p&gt;But let’s face it. You probably don’t have 1,000 developers working on a massive project with 10+ years of history.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Just because Google does it, doesn’t mean you should do it too.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We’re operating in a completely different galaxy. Google faces problems that we’ll likely never face but at the same time we can get away with doing things that Google cannot.&lt;/p&gt;

&lt;h3 id=&quot;how-do-most-software-projects-start&quot;&gt;How Do Most Software Projects Start?&lt;/h3&gt;
&lt;p&gt;A lot of projects start with 1 person doing all of the programming. There’s a million examples but let’s look at Shopify. Shopify was originally coded by Tobias Lütke (it was based on Ruby on Rails and still is by the way).&lt;/p&gt;
&lt;p&gt;Do you think Tobias sat there paralyzed by indecision while he painstakingly attempted to create a perfect microservices based architecture before he wrote a single line of code?&lt;/p&gt;
&lt;p&gt;Hell no. I wasn’t there when he developed the first iteration of Shopify, which was originally just an e-commerce store for snowboarding equipment but if he’s anything like me (a typical developer), it probably went something like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Learn a new technology while building your initial product&lt;/li&gt;
&lt;li&gt;Write some pretty non-idiomatic / crappy but fully working code&lt;/li&gt;
&lt;li&gt;See it begin to come together and get excited&lt;/li&gt;
&lt;li&gt;Refactor the “kill it with fire!” code into better code once it becomes a problem&lt;/li&gt;
&lt;li&gt;Keep repeating this loop while adding new features and running in production&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This may seem like a really simple loop, but it took ~20 years of programming for me to really understand how profound that cycle is.&lt;/p&gt;
&lt;p&gt;You don’t get better as a programmer by theory crafting optimal set ups before you write a single line of code. &lt;strong&gt;You get better by writing a lot of code with absolute and total intent to replace almost everything you write with better code once you start experiencing real problems first hand.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That initial code you rewrite isn’t wasted time or effort. It’s very much responsible for you leveling up over time. It is the secret sauce.&lt;/p&gt;

&lt;h3 id=&quot;lets-talk-about-code-abstractions&quot;&gt;Let’s Talk about Code Abstractions&lt;/h3&gt;
&lt;p&gt;As developers we’ve all heard the phrase &lt;em&gt;“DRY: don’t repeat yourself”&lt;/em&gt; and in general that’s a reasonable guide to go by, but often times it’s very well worth repeating yourself.&lt;/p&gt;
&lt;p&gt;It’s worth repeating yourself because if you try to abstract something without really understanding what you’re abstracting then you create something called a &lt;a href=&quot;https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/&quot; target=&quot;_blank&quot;&gt;leaky abstraction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll typically repeat myself 3 times before I even THINK about refactoring some code to remove the duplication. It’s often not until the 4th or 5th time that I actually take action.&lt;/p&gt;
&lt;p&gt;That’s because you really need to see how you’re duplicating the code in different situations a few times before you know what needs to be turned into variables and also be removed from the place you’re originally inlining it.&lt;/p&gt;
&lt;h5 id=&quot;levels-of-abstraction-from-inlining-code-to-external-libraries&quot;&gt;Levels of abstraction, from inlining code to external libraries:&lt;/h5&gt;
&lt;ol&gt;&lt;li&gt;Write inline code&lt;/li&gt;
&lt;li&gt;Duplicate code a few times in different spots&lt;/li&gt;
&lt;li&gt;Extract duplicate code into functions / etc.&lt;/li&gt;
&lt;li&gt;Use your abstraction(s) for a while&lt;/li&gt;
&lt;li&gt;See how that code interacts with other code&lt;/li&gt;
&lt;li&gt;Extract common functionality into internal library&lt;/li&gt;
&lt;li&gt;Use internal library for extended periods of time&lt;/li&gt;
&lt;li&gt;Really understand how all of the pieces come together&lt;/li&gt;
&lt;li&gt;Create external library (open source, etc.) if it makes sense&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;And this is exactly what you can’t “invent” a good library or framework. Almost all of the very successful tools we use today came from real world projects where the tool we love was extracted from real internal use cases.&lt;/p&gt;
&lt;p&gt;Rails is a great example of this. DHH (author of Rails) didn’t just wake up one day and say &lt;em&gt;“OOPS! Time to make the models/, controllers/ and views/ directories!”.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Nope. He developed Basecamp (a real product) and certain patterns emerged, and those patterns were generalized, then lifted out of Basecamp into Rails. This exact process still goes on today and it’s IMO the sole reason why Rails continues to be so successful.&lt;/p&gt;
&lt;p&gt;It’s a perfect storm of very well tested (read: not theory crafted) abstractions, combined with a programming language that allows you to write visually appealing code. It’s also why almost all of the “Rails but in XYZ language” frameworks fail. They are skipping key components of the abstraction chain and think they can just duplicate what Rails does.&lt;/p&gt;

&lt;h3 id=&quot;relating-code-abstractions-to-microservices&quot;&gt;Relating Code Abstractions to Microservices&lt;/h3&gt;
&lt;p&gt;Microservices to me are just another level of abstraction. I wouldn’t necessarily say it’s step 10 in the above list because not all libraries are meant to be microservices, but at a conceptual level it’s similar.&lt;/p&gt;
&lt;p&gt;Microservices aren’t something you start off with from day 1, just like you wouldn’t attempt to create a perfect open source external library on day 1 before you even wrote a line of code. At that point you don’t even know what you’re making.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A microservices based architecture is something you might grow into over time as you come across real problems working with your code base.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You may never come across these problems, and a lot of these problems can also be solved through other means. Take a look at Basecamp and Shopify. They are both monolithic applications that are doing very well.&lt;/p&gt;
&lt;p&gt;I don’t think anyone would call them small applications. Sure they are not operating at Google’s scale but let’s put some perspective on this.&lt;/p&gt;
&lt;h4 id=&quot;shopify-makes-17-million-usd-a-month-with-a-monolithic-app&quot;&gt;Shopify Makes 17 Million+ USD a Month with a Monolithic App&lt;/h4&gt;
&lt;p&gt;As of mid-2018 Shopify publicly announced they have &lt;a href=&quot;https://stackshare.io/shopify/e-commerce-at-scale-inside-shopifys-tech-stack&quot;&gt;600,000+ businesses running online stores&lt;/a&gt; on their platform.&lt;/p&gt;
&lt;p&gt;Shopify is a SAAS application and its cheapest plan is $29/month and I have a feeling a ton of businesses are using their $79/month plan. In any case, even if 600,000 people used their cheapest $29/month plan, that’s $17.4 million dollars a month in revenue just from the SAAS aspect of their business.&lt;/p&gt;
&lt;p&gt;Basecamp is another monolithic application that is quite large. What’s interesting about Basecamp is they only have about 50 employees and only a fraction of them are software engineers working on the main product.&lt;/p&gt;
&lt;p&gt;My point is, you can get REEEEEEEEEEEEEEEALLY far without going down the rabbit hole of microservices. Microservices should be on a need to know basis.&lt;/p&gt;

&lt;h3 id=&quot;when-should-you-use-microservices&quot;&gt;When Should You Use Microservices?&lt;/h3&gt;
&lt;p&gt;That’s really up to what you and your team decide. This is one of those things where if you are in a situation where microservices makes sense, you’re not Googling around for “microservices vs monolith”. You already know.&lt;/p&gt;
&lt;p&gt;But one situation might be if you have a ton of developers who are best suited to work on individual sub-sections of an application. Having many dozens of teams working on various components of a product in isolation is &lt;em&gt;one&lt;/em&gt; reasonable use case for microservices.&lt;/p&gt;
&lt;p&gt;Keep in mind you probably had a very small team that slowly grew over time so you might end up starting with 1 or 2 microservices and going from there. You probably wouldn’t end up going all-in and transform a monolith into 100 services right off the bat.&lt;/p&gt;
&lt;h4 id=&quot;is-the-juice-worth-the-squeeze&quot;&gt;Is the Juice Worth the Squeeze?&lt;/h4&gt;
&lt;p&gt;It’s also worth mentioning transitioning to microservices comes with its own set of challenges and problems. You’re trading one problem for another, so you need to weigh the pros and cons on if it’s worth it for your project specifically.&lt;/p&gt;
&lt;p&gt;One of the biggest problems is monitoring. Suddenly you have a bunch of services which could be written with different tech stacks running across multiple machines and you need a way to pry into the details of everything.&lt;/p&gt;
&lt;p&gt;This is a daunting task because ideally you’d want all of these services to use a single unified service to gather and display these metrics.&lt;/p&gt;
&lt;p&gt;You probably don’t want to develop your own tooling for this because that alone could be a full time job, and this is partly why companies like &lt;a href=&quot;https://lightstep.com/&quot; target=&quot;_blank&quot;&gt;LightStep&lt;/a&gt; are so successful. They are one of the most interesting monitoring services I’ve come across in my travels.&lt;/p&gt;
&lt;p&gt;Their product is targeted more towards larger scale applications (for good reason) but it could also work for smaller scale projects too. I only heard about them recently since they presented at &lt;a href=&quot;https://nickjanetakis.com/blog/coming-back-to-cloud-field-day-for-the-second-time&quot;&gt;Cloud Field Day 4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyways, monitoring is only 1 of many challenges, but I thought I’d bring that one up because it’s one of the more painful problems.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;I mainly wrote this article for 2 reasons:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Firstly&lt;/strong&gt;, 2 weeks ago ago I attended &lt;a href=&quot;https://nickjanetakis.com/blog/coming-back-to-cloud-field-day-for-the-second-time&quot;&gt;Cloud Field Day 4&lt;/a&gt; and happened to do a group podcast on a related topic. That should be out in a few months (I’ll update this post with a link), but I wanted to elaborate on some of my points here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Secondly&lt;/strong&gt;, as someone who creates online courses, I often get a lot of questions from people on the topic of how to architect their applications.&lt;/p&gt;
&lt;p&gt;A common trend I saw was a lot of people were getting hung up on trying to break out their apps into isolated services before they even wrote a line of code. Even going as far as wanting to break up components of the app to use multiple databases from the beginning.&lt;/p&gt;
&lt;p&gt;It was something that stalled them from moving forward and as a fellow developer I know how upsetting it can be to get stuck into an indecision loop (I’ve had my share of those!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By the way&lt;/strong&gt;, I’m currently working on a fairly large SAAS application which is a custom course hosting platform. Right now it’s just me working on the project, and you can be sure I just cracked open my code editor and started writing code on day 1.&lt;/p&gt;
&lt;p&gt;I have full intent on keeping it as a majestic monolithic until it no longer makes sense but my spidey sense is telling me I’ll never hit that point anyways.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What do you think about this topic? Let me know below.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;Like you, I'm super protective of my inbox, so don't worry about getting spammed. You can expect a few emails per month (at most), and you can 1-click unsubscribe at any time. &lt;a href=&quot;https://nickjanetakis.com/newsletter&quot;&gt;See what else you'll get&lt;/a&gt; too.&lt;/p&gt;</description>
<pubDate>Fri, 19 Oct 2018 08:35:29 +0000</pubDate>
<dc:creator>fagnerbrack</dc:creator>
<og:type>article</og:type>
<og:title>Microservices Are Something You Grow Into, Not Begin With</og:title>
<og:description>Let's talk about when it might be a good or bad idea to start using microservices. SPOILER ALERT: it's not the same for every project.</og:description>
<og:url>https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with</og:url>
<og:image>https://nickjanetakis.com/assets/blog/cards/microservices-are-something-you-grow-into-not-begin-with-b6c5c7cad05d4d93f2c6ac140938edfc8a61e4cbffb5098b31aec228ce61e571.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nickjanetakis.com/blog/microservices-are-something-you-grow-into-not-begin-with</dc:identifier>
</item>
<item>
<title>Hackintosh-KVM Guide: High Sierra+ Using QEMU&amp;#039;s I440fx Chipset</title>
<link>https://passthroughpo.st/hackintosh-kvm-guide-high-sierra-using-qemus-i440fx-chipset/</link>
<guid isPermaLink="true" >https://passthroughpo.st/hackintosh-kvm-guide-high-sierra-using-qemus-i440fx-chipset/</guid>
<description>&lt;p&gt;&lt;strong&gt;For a few years now, thanks to the hard work of others in the QEMU/KVM community, the ability to use the macOS operating system on our KVM powered virtual machines is now a reality. We can also enable a much better user experience for OSX virtual machines using GPU Passthrough.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Read Also: &lt;a href=&quot;https://passthroughpo.st/benchmark-almost-any-3d-app-on-linux-with-bugle/&quot;&gt;Benchmarking Linux OGL performance with Bugle&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this guide we will be showing you how to create a Hackintosh-KVM virtual machine using QEMU’s i440fx chipset, with the added benefit of using host passthrough of the CPU, instead of using the Penryn emulation that tends to be the usual way to get OSX up and running.&lt;/p&gt;
&lt;p&gt;This guide will also be setting up these VMs as “Hackintosh” systems. We will not be using Apple’s actual OSK(SMC) key, which is an attempt to make your virtual machine a “Real Macintosh.” This information is provided for entertainment purposes only and The Passthrough POST waives all liability for any and all of what you do with it.&lt;/p&gt;
&lt;p&gt;The main reason this guide focuses on the i440fx chipset is that there are still a few wrinkles that need to be ironed out on q35 with 10 series Nvidia GPUs and host CPU pass-through, whereas i440fx works well regardless of the host system’s hardware. If you want to find q35 chipset guides, they are available elsewhere for the time being.  We will be adding an additional guide to Hackintosh-KVM series concentrating on the q35 chipset soon, after some testing is done to ensure it works with host CPU pass-through, macOS updates, and stability in general. We encourage others in the VFIO community to join our &lt;a href=&quot;https://discord.gg/uXJTfFX&quot;&gt;Discord&lt;/a&gt; server and help us out to work out other issues in the future.&lt;/p&gt;
&lt;h2&gt;Synopsis&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;This guide assumes that you already have set up a GPU pass-through virtual machine in the past and have experience with QEMU and libvirt, no support/steps will be given in the Hackintosh-KVM guide for setting up QEMU/libvirt for GPU pass-through, networking, CPU pinning, etc. If you need help with setting that up, refer to the &lt;a href=&quot;https://discord.gg/uXJTfFX&quot;&gt;The Passthrough POST&lt;/a&gt; Discord server.&lt;/li&gt;
&lt;li&gt;This guide has only been tested with Ryzen CPUs. Your mileage may vary when using a Intel CPU (though we don’t expect any issues.) We encourage our readers to help contribute their experiences with Intel hosts, so this guide can be updated as appropriate.&lt;/li&gt;
&lt;li&gt;The author also recommends that the initial setup to be done via GPU pass-through for ease of installation, as other display methods may or may not work(QXL,vmwvga,etc).&lt;/li&gt;
&lt;li&gt;Clover is only to be used as it’s needed for the various tweaks within this guide. We will not supporting the Enoch or any other bootloader at any time during the Hackintosh-KVM guide.&lt;/li&gt;
&lt;li&gt;We recommend using the OVMF files from the Hackintosh-KVM repo. We also recommend using recent versions of the kernel, libvirt, and QEMU. This is not guaranteed to work on versions older what was tested at the time this article was written.&lt;/li&gt;
&lt;li&gt;For older or patched versions of QEMU and other applications, refer to &lt;a href=&quot;https://github.com/kholia/OSX-KVM&quot;&gt;kholia’s guide&lt;/a&gt; on github for additional patching/procedures.&lt;/li&gt;
&lt;li&gt;We recommend using LVM or a standard image file(.img) to achieve the best I/O performance possible, using a &lt;strong&gt;.qcow2&lt;/strong&gt; image file with QEMU’s emulated SATA controller leads to rather abysmal performance in our testing. ZFS vdevs can also be used, but this has not been tested at the time of this write-up for disk I/O performance, although they should perform fine.&lt;/li&gt;
&lt;li&gt;The author also recommends setting the CPU governor to &lt;a href=&quot;https://wiki.archlinux.org/index.php/CPU_frequency_scaling&quot;&gt;performance&lt;/a&gt; and/or use a &lt;a href=&quot;https://github.com/PassthroughPOST/VFIO-Tools&quot;&gt;QEMU hook&lt;/a&gt; to ensure that the virtual machine is at its utmost performance. The xml file from the Hackintosh-KVM repository contains arguments for PulseAudio and evdev pass-through. If you plan to use this, you will want to make sure that &lt;a href=&quot;https://passthroughpo.st/using-evdev-passthrough-seamless-vm-input/&quot;&gt;evdev&lt;/a&gt; and &lt;a href=&quot;https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF#Passing_VM_audio_to_host_via_PulseAudio&quot;&gt;PulseAudio pass-through&lt;/a&gt; are set up and working &lt;a href=&quot;https://passthroughpo.st/how-to-patch-qemu-and-fix-vm-audio/&quot;&gt;correctly&lt;/a&gt; beforehand.&lt;/li&gt;
&lt;li&gt;We will be using the &lt;strong&gt;iMac18,3&lt;/strong&gt; SMBIOS with Clover as other versions of Macintosh’s include Thunderbolt 3 firmware, which upon update, will corrupt OVMF’s nvram, thus making the virtual machine unbootable.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Author’s Host System&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Gentoo using a AMD Ryzen 5 1600 CPU with a Nvidia GTX1070 FE GPU for graphics pass-through. This was also tested with a AMD Ryzen 7 2700X and EVGA GTX1050 Ti FTW.&lt;/li&gt;
&lt;li&gt;Tested with QEMU 2.12 using a patched OVMF that the author created, which is located in the Hackintosh-KVM repository, and Linux kernel 4.17 (4.16 was also tested to be working too).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You will need a CPU with at least SSE4.1 to use macOS High Sierra/Mojave. Intel VT-x / AMD SVM is required.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Installation Prerequisites&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Download the macOS High Sierra installer from the Apple App Store. Use the &lt;code&gt;create_highsierra_iso.sh&lt;/code&gt; script from the Hackintosh-KVM repository to create a ISO for the virtual machine.&lt;/li&gt;
&lt;li&gt;Run the ISO creation script &lt;code&gt;create_iso_highsierra.sh&lt;/code&gt; on your real Macintosh. The High Sierra ISO file will be located in the &lt;strong&gt;Desktop&lt;/strong&gt; folder when it is finished.&lt;/li&gt;
&lt;li&gt;If you do not want to use the script from the Hackintosh-KVM for creating a ISO file, you can also refer to: &lt;code&gt;https://www.tweaking4all.com/cd-dvd-blu-ray-disc-burning/burning-for-macmacOS/convert-dmg-to-iso/&lt;/code&gt; for information on how make a ISO file for your virtual machine on your real Macintosh.&lt;/li&gt;
&lt;li&gt;Lastly, copy the generated ISO image from your Macintosh’s &lt;strong&gt;Desktop&lt;/strong&gt; folder to your host QEMU/KVM machine via Samba/NFS, or use a USB drive.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Hackintosh-KVM Preparation steps&lt;/h2&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li&gt;To get started, clone the repository listed below. The files included in this repository are necessary for creation of the virtual machine and will also be needed when you install Clover to the EFI folder of your Hackintosh install.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/SRH1605/Hackintosh-KVM.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Before you get started on anything else&lt;/strong&gt;, you will want to define the xml, as root, using &lt;code&gt;virsh define osx_i440fx.xml&lt;/code&gt; from the folder you have it located in. Next you will want to use Virtual Machine Manager to add your GPU, disks, and any other devices you plan on passing to the virtual machine. After that, you will want to open the xml file for the virtual machine and edit it for the location of your OVMF files, CPU pinning, and evdev pass-through. This can be achieved via &lt;code&gt;virsh edit osx_i440fx&lt;/code&gt;. If you do not intend to use PulseAudio or evdev pass-through, delete the corresponding lines to those in the xml file.&lt;/li&gt;
&lt;li&gt;The xml will have a &lt;code&gt;virtio-net&lt;/code&gt; adapter on a bridged network interface, you may want to change from the bridged interface if this doesn’t match your network topology.&lt;/li&gt;
&lt;li&gt;To enable pass-through of our hosts CPU feature flags we will be faking the CPU vendor ID via the QEMU argument shown below, do note that this will override what you have set in Virtual Machine Manager’s &lt;strong&gt;CPUs&lt;/strong&gt; menu.&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://i1.wp.com/passthroughpo.st/wp-content/uploads/2018/08/virtmancpu.png?resize=274%2C131&amp;amp;ssl=1&quot; alt=&quot;&quot; class=&quot;size-full wp-image-1980 alignright&quot; width=&quot;274&quot; height=&quot;131&quot; srcset=&quot;https://i1.wp.com/passthroughpo.st/wp-content/uploads/2018/08/virtmancpu.png?resize=200%2C96&amp;amp;ssl=1 200w, https://i1.wp.com/passthroughpo.st/wp-content/uploads/2018/08/virtmancpu.png?fit=274%2C131&amp;amp;ssl=1 274w&quot; sizes=&quot;(max-width: 274px) 100vw, 274px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/p&gt;

&lt;p&gt;It is not recommended to set the CPU topology for multi-threading while in this menu, due to a bug in Clover, and instead to only set the amount of cores in the current and maximum allocation menus to the amount we want for the virtual machine. The reason for this is multi-threading does not work as intended with the QEMU and macOS. Passing the virtual CPU’s as sockets(which is default), or up 8 cores and 1 thread, has lead to far better CPU performance in the authors testing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;qemu:arg value='-cpu'&lt;/code&gt;&lt;br/&gt;&lt;code&gt;qemu:arg value='host,vendor=GenuineIntel,kvm=on,vmware-cpuid-freq=on,+invtsc,+hypervisor'&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Create a virtual HDD where macOS will be installed. This can be done via Virtual Machine Manager’s &lt;strong&gt;Storage&lt;/strong&gt; utility which is located in &amp;gt; &lt;strong&gt;Edit&lt;/strong&gt; &amp;gt; &lt;strong&gt;Connection Details&lt;/strong&gt; &amp;gt; &lt;strong&gt;Storage&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add-Pool&lt;/strong&gt;, to create storage pool(s).&lt;/li&gt;
&lt;li&gt;Create a Clover boot disk, &lt;code&gt;libguestfs&lt;/code&gt; is a required dependency. (The steps below are optional)&lt;/li&gt;
&lt;li&gt;To start off, you will want to edit &lt;code&gt;$HOME/YourFolderHere/config.plist&lt;/code&gt; and set the desired screen resolution(OVMF by default is 1024×768). &lt;strong&gt;Do note that you may experience display corruption with higher resolutions, be sure to set this properly.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;sudo ./clover-image.sh --iso Clover-v2.4k-4630-X64.iso --cfg $HOME/YourFolderHere/config.plist --img clover.qcow2&lt;/code&gt; &lt;em&gt;# Note: clover.qcow2 belongs after –img(wordpress error)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Next you will want to add some kext files to your newly created clover boot disk. The kexts files needed are also located in the Hackintosh-KVM repository. The kext files in this repository are used for GPU sensors, PulseAudio pass-through, and the Virtio-Net network device. The WhateverGreen kext is also needed if you use a AMD GPU, however it has not been tested. This step will also require the &lt;strong&gt;NBD&lt;/strong&gt; kernel module to be loaded.&lt;/li&gt;
&lt;li&gt;Connect and mount the clover.qcow2 image:&lt;br/&gt;&lt;code&gt;sudo modprobe nbd&lt;br/&gt;sudo qemu-nbd --connect=/dev/nbd0 /$HOME/YourFolderHere/clover.qcow2&lt;br/&gt;fdisk /dev/nbd0 -l&lt;br/&gt;sudo mount /dev/nbd0p1 /mnt/somemntpoint/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Disconnect and unmount from the clover.qcow2 image:&lt;br/&gt;&lt;code&gt;umount /mnt/somemntpoint/&lt;br/&gt;sudo qemu-nbd --disconnect /dev/nbd0&lt;br/&gt;sudo rmmod nbd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Instead of building your own bootable Clover disk, you may want to use the included &lt;code&gt;clover.qcow2&lt;/code&gt; disk image from the Hackintosh-KVM repository instead for ease of use, as this contains all the kext files needed, and offers a 1920×1080 screen resolution. It should be noted that the clover.qcow2 image can be useful as backup EFI bootloader in case you were to mess up your bootloader during a Clover update.&lt;/li&gt;
&lt;li&gt;Before fully starting Clover on your new virtual machine, you will want to make sure that the OVMF resolution is set equal to the resolution set in your clover.qcow2 file. The OVMF default is 1024×768 and the clover.qcow2 image you will be using is set to 1920×1080, not setting this correctly will lead to display corruption and possible boot failures. The resolution can be set via the OVMF boot menu, which is able to be reached by pressing the &lt;strong&gt;ESC&lt;/strong&gt; button on your keyboard during the OVMF boot logo, before the Clover boot screen appears.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Installer Steps&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;After booting, the initial language selection should show up. Select your preferred language, then select Disk Utility and erase your target disk. You can use HFS+ or APFS, as the clover.qcow2 image we are using has the proper EFI files for either file system. If you do choose APFS, make sure you place the apfs.efi file into your EFI folder when you install Clover to your boot disk.&lt;/li&gt;
&lt;li&gt;High Sierra’s (&amp;lt; 10.13.3) Disk Utility does not recognize un-formatted disks, unless you click &lt;strong&gt;View&lt;/strong&gt; &amp;gt; &lt;strong&gt;Show All Devices&lt;/strong&gt;, quit &lt;strong&gt;Disk Utility&lt;/strong&gt;, then relaunch it.&lt;/li&gt;
&lt;li&gt;In some rare cases the target disk may not not appear in &lt;strong&gt;Disk Utility&lt;/strong&gt;, for that you will need to use the &lt;strong&gt;Terminal&lt;/strong&gt; app on the installer and prepare the hard drive for installation manually using the commands below.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;diskutil list&lt;/code&gt;&lt;br/&gt;&lt;code&gt;diskutil eraseDisk JHFS+ macOS disk0&lt;/code&gt; &lt;em&gt;# Adapt this according to your system&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;When you are done, quit &lt;strong&gt;Terminal&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Now, you can continue with the installation as you normally would.&lt;/li&gt;
&lt;li&gt;When you are finished, the virtual machine will reboot automatically and the first time setup screen will appear, congratulations, you now have a Hackintosh-KVM virtual machine with close to bare metal performance! Hold on though, you’re not done yet, the last step is to follow the &lt;strong&gt;Post-Install Steps&lt;/strong&gt; below, and put the Clover bootloader on the drive you just installed macOS to, so you can have the benefit of adding additional kext files, etc., in the future to make your virtual machine work better.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Post-Install Steps&lt;/h2&gt;
&lt;p&gt;First, you will want to install Clover to the main disk where macOS High Sierra was installed in the previous steps. You will also want to use the &lt;code&gt;config.plist&lt;/code&gt; and &lt;code&gt;i440fx-acpi-dsdt.aml&lt;/code&gt; files from the Hackintosh-KVM repository, as this has everything set as it would be in the &lt;code&gt;clover.qcow2&lt;/code&gt; image. The &lt;code&gt;i440fx-acpi-dsdt.aml&lt;/code&gt; file will be placed in the &lt;code&gt;EFI/CLOVER/ACPI/origin&lt;/code&gt; folder. Be sure not to forget the kext files you need and place them into the &lt;code&gt;Kexts&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;To use QEMU’s &lt;strong&gt;“host”&lt;/strong&gt; CPU model you will need to make sure that these options are enabled in Clover Configurator’s &lt;strong&gt;“Kernel and Kext Patches”&lt;/strong&gt; section.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=1150%2C641&amp;amp;ssl=1&quot; alt=&quot;Hackintosh-KVM&quot; class=&quot;alignnone size-full wp-image-1982 jetpack-lazy-image&quot; width=&quot;1150&quot; height=&quot;641&quot; data-recalc-dims=&quot;1&quot; data-lazy-srcset=&quot;https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=200%2C111&amp;amp;ssl=1 200w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=300%2C167&amp;amp;ssl=1 300w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=400%2C223&amp;amp;ssl=1 400w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=600%2C334&amp;amp;ssl=1 600w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=768%2C428&amp;amp;ssl=1 768w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=800%2C446&amp;amp;ssl=1 800w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=1024%2C571&amp;amp;ssl=1 1024w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=1200%2C669&amp;amp;ssl=1 1200w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?fit=1220%2C680&amp;amp;ssl=1 1220w&quot; data-lazy-sizes=&quot;(max-width: 1150px) 100vw, 1150px&quot;/&gt;&lt;/p&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=1150%2C641&amp;amp;ssl=1&quot; alt=&quot;Hackintosh-KVM&quot; class=&quot;alignnone size-full wp-image-1982&quot; width=&quot;1150&quot; height=&quot;641&quot; srcset=&quot;https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=200%2C111&amp;amp;ssl=1 200w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=300%2C167&amp;amp;ssl=1 300w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=400%2C223&amp;amp;ssl=1 400w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=600%2C334&amp;amp;ssl=1 600w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=768%2C428&amp;amp;ssl=1 768w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=800%2C446&amp;amp;ssl=1 800w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=1024%2C571&amp;amp;ssl=1 1024w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?resize=1200%2C669&amp;amp;ssl=1 1200w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpupatches.png?fit=1220%2C680&amp;amp;ssl=1 1220w&quot; sizes=&quot;(max-width: 1150px) 100vw, 1150px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;
&lt;p&gt;You will also want to remove the &lt;code&gt;+hypervisor&lt;/code&gt; bit from the QEMU cpu argument at the bottom of the xml file and set in Clover Configurator’s &lt;strong&gt;CPU&lt;/strong&gt; section your system clocks as close as possible.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=1150%2C641&amp;amp;ssl=1&quot; alt=&quot;Hackintosh-KVM&quot; class=&quot;alignnone size-full wp-image-1983 jetpack-lazy-image&quot; width=&quot;1150&quot; height=&quot;641&quot; data-recalc-dims=&quot;1&quot; data-lazy-srcset=&quot;https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=200%2C111&amp;amp;ssl=1 200w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=300%2C167&amp;amp;ssl=1 300w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=400%2C223&amp;amp;ssl=1 400w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=600%2C334&amp;amp;ssl=1 600w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=768%2C428&amp;amp;ssl=1 768w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=800%2C446&amp;amp;ssl=1 800w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=1024%2C571&amp;amp;ssl=1 1024w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=1200%2C669&amp;amp;ssl=1 1200w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?fit=1220%2C680&amp;amp;ssl=1 1220w&quot; data-lazy-sizes=&quot;(max-width: 1150px) 100vw, 1150px&quot;/&gt;&lt;/p&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=1150%2C641&amp;amp;ssl=1&quot; alt=&quot;Hackintosh-KVM&quot; class=&quot;alignnone size-full wp-image-1983&quot; width=&quot;1150&quot; height=&quot;641&quot; srcset=&quot;https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=200%2C111&amp;amp;ssl=1 200w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=300%2C167&amp;amp;ssl=1 300w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=400%2C223&amp;amp;ssl=1 400w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=600%2C334&amp;amp;ssl=1 600w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=768%2C428&amp;amp;ssl=1 768w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=800%2C446&amp;amp;ssl=1 800w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=1024%2C571&amp;amp;ssl=1 1024w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?resize=1200%2C669&amp;amp;ssl=1 1200w, https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/clovercpufreqs.png?fit=1220%2C680&amp;amp;ssl=1 1220w&quot; sizes=&quot;(max-width: 1150px) 100vw, 1150px&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;
&lt;p&gt;&lt;code&gt;qemu:arg value='-cpu'&lt;/code&gt;&lt;br/&gt;&lt;code&gt;qemu:arg value='host,vendor=GenuineIntel,kvm=on,vmware-cpuid-freq=on,+invtsc'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To enable PS/2 mouse and keyboard emulation the &lt;code&gt;VoodooPS2.kext&lt;/code&gt; will be needed, for ICH6 or ICH9 PulseAudio pass-through the &lt;code&gt;VoodooHDA.kext&lt;/code&gt; is needed. The author found that using the emulated USB mouse and keyboard drivers, the keys have would have issues with sticking during a long keystroke on the authors hardware. Your mileage may vary here and technically no additional kext file is needed to use QEMU’s emulated USB mouse and keyboard.&lt;/p&gt;
&lt;p&gt;For mounting of other filesystems (NTFS,EXT,etc.) refer to: &lt;code&gt;https://github.com/macOSfuse/macOSfuse&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For Nvidia drivers refer to: &lt;code&gt;https://github.com/Benjamin-Dobell/nvidia-update/blob/master/README.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Repository link with updated &lt;a href=&quot;https://onedrive.live.com/?authkey=%21AAODJfuvXMALIpE&amp;amp;id=FE4038DA929BFB23%21427991&amp;amp;cid=FE4038DA929BFB23&quot;&gt;Hackintosh kexts&lt;/a&gt; &lt;strong&gt;(The author is not responsible for the kext files here)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;If you like what we do here, consider supporting us on &lt;a href=&quot;https://www.patreon.com/PassthroughPost&quot;&gt;Patreon&lt;/a&gt;.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;Images courtesy PixaBay&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Oct 2018 03:18:12 +0000</pubDate>
<dc:creator>walterbell</dc:creator>
<og:type>article</og:type>
<og:title>Hackintosh-KVM Guide: High Sierra+ Using QEMU's i440fx Chipset - The Passthrough POST</og:title>
<og:description>For a few years now, thanks to the hard work of others in the QEMU/KVM community, the ability to use …</og:description>
<og:url>https://passthroughpo.st/hackintosh-kvm-guide-high-sierra-using-qemus-i440fx-chipset/</og:url>
<og:image>https://i2.wp.com/passthroughpo.st/wp-content/uploads/2018/08/apple-1839046_1920-e1534276273964.jpg?fit=1708%2C1281&amp;ssl=1</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://passthroughpo.st/hackintosh-kvm-guide-high-sierra-using-qemus-i440fx-chipset/</dc:identifier>
</item>
<item>
<title>This Old Lisp</title>
<link>http://thisoldlisp.com/talks/els-2018/</link>
<guid isPermaLink="true" >http://thisoldlisp.com/talks/els-2018/</guid>
<description>&lt;p class=&quot;subtitle&quot;&gt;R. Matthew Emerson&lt;/p&gt;
&lt;section readability=&quot;22.224096385542&quot;&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;This is the keynote&lt;/span&gt; talk that I gave at the &lt;a href=&quot;https://european-lisp-symposium.org/2018&quot;&gt;2018 European Lisp Symposium&lt;/a&gt; in Marbella, Spain.&lt;/p&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Lisp was invented 60 years ago. Coral Common Lisp, the ancestor of today's Clozure Common Lisp, was released over 30 years ago. Over this time, processor architectures and operating systems have come and gone, but Clozure CL (under various names and forms) has survived and is still with us today. Clozure CL, Common Lisp, and Lisp itself are the product of many intelligent and clever people. Indeed, we find ourselves saying, with Newton, “If I have seen a little farther than others, it is because I have stood on the shoulders of giants.” I will say a few words, looking down from the giant's shoulders, on the subject of Clozure CL, that old Lisp, including where it stands today, and how it might evolve in the future.&lt;/p&gt;
&lt;/section&gt;&lt;section&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/MgVuqPgKJQc?rel=0&amp;amp;modestbranding=1&amp;amp;showinfo=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/section&gt;&lt;h2&gt;Transcript&lt;/h2&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.001.png&quot;/&gt;&lt;section readability=&quot;13.3&quot;&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Well, good morning everyone&lt;/span&gt;. &lt;label for=&quot;mn-language&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;mn-language&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;I used an informal style of speech in the talk, and that is reproduced here in this transcription.&lt;/span&gt; I’m really pleased to be here with you today. I know sometimes people say that sort of thing just as a way of being polite, but I sincerely am extremely grateful to be here with you and it’s a real pleasure you be here with you at the &lt;a href=&quot;https://european-lisp-symposium.org/2018/index.html&quot;&gt;2018 European Lisp Symposium&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So my official name, like you can see up there, is R. Matthew Emerson, but in real life you can call me Matt or Matthew; I just use that for branding purposes.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;11.407407407407&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.002.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Just as a little bit about me&lt;/span&gt; so you can decide whether I’m worth listening to or whether my opinions are worth anything, I have worked on the Lisp implementation &lt;a href=&quot;http://ccl.clozure.com/&quot;&gt;Clozure CL&lt;/a&gt; (it was called OpenMCL before that) since about 2007. I used to be an employee of &lt;a href=&quot;https://clozure.com/&quot;&gt;Clozure Associates&lt;/a&gt;, but now I work on it independently.&lt;/p&gt;
&lt;p&gt;I was just thinking the other day when was my first exposure to Common Lisp and I think it must have been on the NeXT machine using the bundled Allegro CL with that, you know way back in the day. So that’s just sort of an interesting little side note.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;55.59608449253&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.003.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;So, the title of my talk&lt;/span&gt; is This Old Lisp, and you know, usually when you have to explain your joke, it’s sort of a sign that joke isn’t too good, so maybe my joke isn’t too good here. But…so I’ll explain it to you.&lt;/p&gt;
&lt;p&gt;There’s an American TV show that’s been around for a pretty long time called &lt;a href=&quot;https://www.thisoldhouse.com&quot;&gt;This Old House&lt;/a&gt;. And, the point of This Old House is it was this home improvement show, right? So, what they would do is they would show how you would fix a boiler, or, you know, fix an old-style wall in an old house. And you have to understand also that, you know, in the United States, if something’s a hundred years, right, that’s really old. And if something’s 150 years old, why, it practically belongs in a museum.&lt;/p&gt;
&lt;p&gt;But anyway, the deal with This Old House was that the show recognized that a lot of people liked these old houses because the old houses were good. They were sometimes constructed using techniques that we wouldn’t use today to construct a house. For instance, you know, the way they would make walls would be different, and the way they would wire it up would be different, or maybe the way they would install heating would be different. But the house was fundamentally good. You had good bones.&lt;/p&gt;
&lt;p&gt;And so, my thought was, well, you know, Lisp is kind of like that, I think. You know, and Clozure CL is kind of like that. You know, it’s something that is a little strange maybe from the perspective of somebody coming into computing today. Some of the choices that Lisp and Common Lisp make may seem to be pretty peculiar. For instance, you know some of the calling conventions for some of the sequence functions are sort of weird sometimes, some of the names are weird, like &lt;code&gt;unwind-protect&lt;/code&gt;, what the heck’s that, but even so, I think that Lisp has really solid bones. And like an old house, I think it’s worth preserving and using. So there we go. So I had to explain my joke. Sorry about that. Anyway.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;41.855570839065&quot;&gt;&lt;label for=&quot;mn-lisp-zombie&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;mn-lisp-zombie&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;From a &lt;a href=&quot;https://twitter.com/nihirash/status/880829816072802304&quot;&gt;tweet&lt;/a&gt;&lt;/span&gt; &lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.004.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;They always say that&lt;/span&gt; you should use humor in your talk, so one day I was wasting time, you know, looking at Twitter, and I ran across this. And it sort of tickles me. I think it’s sort of funny.&lt;/p&gt;
&lt;p&gt;Years ago, I used to be involved in literary studies. You had literature, and criticsm, and all that, so I can’t help but kind of put on my literary studies hat, and look at this and ask, well, what do they mean by this Lisp developer rising from the grave as an undead zombie? What’s that supposed to represent? Is it that nowadays Lisp is experiencing some sort of renaissance, so that you have to get Lisp developers out of the ground and out of the graveyard in order to meet the needs of the growing market? But I sort of think also, that another way to look at it, at least in the Lisp developer case, that it represents the language itself.&lt;/p&gt;
&lt;p&gt;So, it’s hard to keep Lisp down. You try to say, well, you know, can’t it stay dead and buried in the ground where it kind of belongs, maybe? Why does this shambling, zombie horror keep rising from the tomb? And I think that there’s—and I’m sort of joking, and I don’t really think that—I don’t think that Lisp belongs in the ground. So don’t get hostile.&lt;/p&gt;
&lt;p&gt;I really think that Lisp has some genius, some genius to it, that hasn’t been rendered obsolete yet. So, I think that our little zombie there recognizes that. You can’t keep it down; it’s too good of an idea.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;68&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.005.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;So, just a few words&lt;/span&gt; about how Clozure CL came to be, and about its background.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.006.png&quot;/&gt;&lt;p&gt;We already mentioned that Lisp is 60 years old this year, which is sort of remarkable. I think that if you were to look at the Lisp of 1958 and the Common Lisp of today you could see clearly that they are related, and that those same ideas that we had in 1958 are still present in the Lisp of today.&lt;/p&gt;
&lt;p&gt;By contrast, consider Fortran. Fortran’s a little bit older than Lisp; the first Fortran compiler came out in about 1957, I believe. But if you looked at modern Fortran—what are they up to now? &lt;label for=&quot;mn-fortran&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;mn-fortran&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;In fact, there is a Fortran 2008, and another revision called Fortran 2018 is in the works.&lt;/span&gt; Fortran 90, do they have Fortran 2000? Well, whatever, but if you looked at modern Fortran code and the Fortran code of 1957 they would be almost, well, they would be almost nothing alike.&lt;/p&gt;
&lt;p&gt;So, Lisp started out on a really good foot, because the essential ideas have endured.&lt;/p&gt;
&lt;p&gt;Well. Lisp spawned many descendants. One particularly prominent descendant, of course, is Common Lisp, which first was specified by Steele’s book in 1984. And around that same time, an intrepid band of hackers formed a little company called Coral Software. And Coral Common Lisp was their product that they managed to put together, and it came out in 1987, and if you can possibly believe it, they had a Common Lisp (it didn’t have CLOS, so it was CLTL1), but if you can possibly believe it, it ran on a 1MB Macintosh Plus, this incredibly weak hardware. So that was a real accomplishment. Hats off to those guys, I think they wrote a lot of 68000 assembly code.&lt;/p&gt;
&lt;p&gt;I remember talking to my colleague Gary Byers one time about current CCL, and I said, “Hey, look, we waste a lot of space sometimes, in certain data representations, and if we made a little bit of effort we could make things a lot smaller.” And he said, “Listen, when I was working on old Coral Common Lisp and MCL after that, we worried about how many symbols were left over, maybe useless symbols in the heap image because we didn’t want the distribution to span extra floppies. I’ve done the space optimization game, got the T-shirt, not in a big rush to do it again.”&lt;/p&gt;
&lt;p&gt;Well anyway, after that some stuff happened, and Apple ended up acquiring Coral Software because Apple at the time was using Lisp and Smalltalk and other dynamic languages to do their research. So that happened.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;47.447368421053&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.007.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;And then, as you might remember&lt;/span&gt;, Apple decided that the 68000 series was too slow, so they decided, hey, we’re going to switch to the PowerPC processor. So this was the cause of a lot of big upheaval, and during that time Apple decided that they didn’t want to be in the Lisp vendor business any more, so they transferred their Lisp to this company called Digitool.&lt;/p&gt;
&lt;p&gt;At Digitool they ported MCL to the PowerPC and they released it as a product. That was around 1995 or so. And if anybody has ever had the chance to use MCL on a PowerPC Mac, it’s a really nice implementation. Really, really a good piece of work. A lot of clever design in there to get acceptable performance on fairly modest hardware.&lt;/p&gt;
&lt;p&gt;Well, then some stuff happened, and I’m not really sure what it was because I wasn’t there, but Gary Byers ended up working at JPL for Ron Garret (who was known as Erann Gat at the time). Ron was interested in having Lisp on little embedded PowerPC thingies that were on robots or rovers or flight hardware. In order to do that, they got a source license for MCL and then Gary Byers worked and ported it to this VxWorks operating system, which is a realtime operating system that runs on these little embedded guys, and since Linux/PPC shared that same ABI, they kind of got that for free, too.&lt;/p&gt;
&lt;p&gt;Now, obviously there wasn’t going to be any window system or graphics or editor on this. Iit was meant to run on these little embedded things, so it’s all like non-graphical bits of MCL.&lt;/p&gt;
&lt;p&gt;Well word about this got out somehow, and people were interested in it, and somehow permission was obtained from Digitool to redistribute the results of that port under an open source license, this LLGPL, which is the LGPL with this little &lt;a href=&quot;https://opensource.franz.com/preamble.html&quot;&gt;Lisp-specific preface&lt;/a&gt;. So, that was in about 2001, and that’s how OpenMCL came to be.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;10&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.008.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Since that time&lt;/span&gt;, there’s been a lot of hacking and a lot of work on [Open]MCL. A software consultancy was formed, called Clozure Associates (that’s Clozure spelled with a “z”) and sometimes there were Clozure clients who funded these improvements, and sometimes Clozure itself funded these improvements. They took [Open]MCL and ported it to a bunch of processor architectures, ported it to a whole bunch of different operating systems, just a whole lot of stuff.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;71&quot;&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Well, eventually&lt;/span&gt;, MCL kind of ran out of gas, and I’m going to kind of skip over talking about that a.) because it’s probably not that interesting and it’s sort of sad, and b.) we kind of got a little late start.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.009.png&quot;/&gt;&lt;p&gt;But Alice Hartley, who had been carrying the MCL torch almost single-handedly for many years, finally, basically threw in the towel, because it was just too hard to keep up with all of Apple’s changes. Apple said, “oh, well, this PowerPC, it hasn’t really got what it takes any more, we’re going to use Intel chips now.” So, MCL was looking at, “well, you know, what do we do? Do we retarget our compiler to x86? What do we do about the user interface? We’re using this old Carbon library, and now Apple hates that, and they want us to use this other thing. What do we do?”&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.010.png&quot;/&gt;&lt;p&gt;So, I think they just decided to, they just couldn’t keep up. Apple just kind of got them by changing so much.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;We had OpenMCL&lt;/span&gt;, which was the thing that was originally done at JPL. Then we had MCL, which was becoming open source, So we thought, well, you know, we can’t have this, because it’s going to cause tons of confusion. So, to make it less confusing, we’ll call OpenMCL “Clozure CL”, right, because nobody uses the name “Clozure” for anything, do they?&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.011.png&quot;/&gt;&lt;p&gt;How many different ways can you possibly spell [the word] “Clozure”? &lt;label for=&quot;mn-closure&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;mn-closure&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;All these names are punning on the programming language term closure.&lt;/span&gt; So, “closure” with an “s”, “Clozure” with a “z”, and Rich Hickey’s Clojure with a “j” thing, how are you going to spell the next “closure” thing? I don’t know, it’s kind of crazy.&lt;/p&gt;
&lt;p&gt;I remember being at a conference, I think it might have been in about 2008, and Rich Hickey was there and I went up to him and I said, “Hey, man, you know, Clozure CL with a ‘z’ was around a lot longer than your Lisp. You ought to change your name.” And, he didn’t really want to.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;11&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.012.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Let me talk a little bit&lt;/span&gt; about where Clozure CL stands today.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.013.png&quot;/&gt;&lt;p&gt;It supports a couple of processor architectures. Right now it’s the x86, 64- and 32-bit versions. It supports the 32-bit ARM. Support for PowerPC kind of fell away because the hardware that we had to keep the port going just sort of died after a while. And although I really liked having the port around because it kept us honest in multiple ways, it was just too much of a pain.&lt;/p&gt;
&lt;p&gt;And it runs on a bunch of operating systems here.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;40.927262631871&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.014.png&quot;/&gt;&lt;p&gt;It’s old. It’s one of these old Lisps. If you look in the source code, sometimes you’ll see comments like this from slisp reader2.lisp and not touched in 20 years. So, here’s parse-integer from the reader. Along with other implementations, Clozure CL borrows a lot of code from Spice Lisp (that’s what slisp is, Spice Lisp). And Spice Lisp was the ancestor of CMUCL.&lt;/p&gt;
&lt;p&gt;And if you look at the fancy loop macro, or the implementation of the pretty-printer or of the format function and you compare that to code in say CMUCL you can see there’s a lot of commonality there. The old Lisp guys borrowed a lot of code from Spice Lisp. So, let’s pour one out for Spice Lisp. Thank you, Spice Lisp.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.015.png&quot;/&gt;&lt;p&gt;Another benefit of being old, is that when you’re making a Common Lisp implementation, there are just a ton of problems, a ton of subproblems, that you have to solve. If I had to make a Common Lisp implementation from scratch, I don’t know what I would do. I would be at it for a pretty long time. There’s things like printing and reading floating-point numbers which are an interesting problem in themselves. There’s papers about this problem. &lt;label for=&quot;mn-fp-numbers&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;mn-fp-numbers&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;Such as: Guy L. Steele, Jr. and Jon L. White. 1990. &lt;a href=&quot;http://dx.doi.org/10.1145/93548.93559&quot;&gt;How to print floating-point numbers accurately&lt;/a&gt;. SIGPLAN Not. 25, 6 (June 1990), 112-126.&lt;/span&gt; Implementing this in a Common Lisp from scratch would be kind of a pain, so it’s nice to have the old Lisp behind you to do that.&lt;/p&gt;
&lt;p&gt;There’s other things that you need, and even simple things like random number generation, how hard can it be? There’s all sort of trade-offs in that that need to be looked at. Do you want it to have good statistical properties, do you not care about that, do you just want it to be really fast, do you want to use it for cryptography, all sorts of different things.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;59&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.016.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;One thing that&lt;/span&gt; I’ve always sort of wondered, and always had a hard time learning. I don’t know if I could have done anything better to know this, is, who uses the Lisp?&lt;/p&gt;
&lt;p&gt;We distribute it on an FTP server or via a web server and people just download it. We’ve got a version of it on the Mac App Store. I don’t know who gets it; Apple doesn’t tell you.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.017.png&quot;/&gt;&lt;p&gt;So, just for jollies, I had this survey that I put out on Twitter and the mailing list and the Freenode channels just to see who might pipe up and tell me what they use to run CCL on. And since the survey kind of confirmed my preconceived expectations, I put a lot of stock in it. So I believe that it must be true since it confirmed what I already thought.&lt;/p&gt;
&lt;p&gt;Just to give you an idea of the respondents, most used it on Linux and on the Mac, and the only thing that really surprised me was quite a number of people ran the Lisp on Windows. So, that’s great, I’m glad it’s working for you. The Windows port is probably the weakest port because the CCL hackers don’t really use Windows as an every-day system. That’s sort of unfortunate, so I think Windows is kind of getting the shaft here. In some sense it’s the CCL red-headed step-child. But that’s just how it is.&lt;/p&gt;
&lt;p&gt;But, it seems to work pretty well, modulo a couple of annoying bugs, like sometimes when you try to quit the Lisp it hangs. But, you never quit the Lisp, right? Why quit Lisp?&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.018.png&quot;/&gt;&lt;p&gt;And as far as processor architectures go, as you would expect, 64-bit x86, by far, the most commonly-used processor architecture. There’s a couple of people, a quarter of the respondents use the ARM, and then some still, holdouts on 32-bit x86.&lt;/p&gt;
&lt;p&gt;The reason I asked that question is because I was thinking about giving 32-bit x86 the axe, and dropping support for it. But, as it’s still working, I don’t think it makes sense to shoot it in the head, so to speak. But, on the other hand, since the backends for the x86 platforms are kind of combined, it probably is going to make sense to separate those. Whether the work involved in doing that going to be worthwhile I don’t know. You don’t want continued evolution of the 64-bit backend to be hindered by, I guess the “legacy” 32-bit backend. I like the “legacy” 32-bit backend because I wrote it.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;17&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.019.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;I think CCL has&lt;/span&gt; a number of different constituencies and their preferences and their requirements don’t necessarily align. I think there’s a certain constituency that uses CCL in this batch mode where they’ll run this big job, and submit it to this supercomputer clustery thing and then they’ll crank on stuff. So there’s sort of this batch-style processing.&lt;/p&gt;
&lt;p&gt;And then I think there’s some just normal hackers who use it with Emacs and SLIME in the way you would expect. And I think there’s a substantial and interesting contingent who are interested in Lisp, but they’re not too interested in investing time learning Emacs and SLIME. I know, I know, some people are shocked, but it’s true. That’s one of the reasons I made the Mac App Store version of CCL where we have this kind of IDE that grew from example code into something much more than that now.&lt;/p&gt;
&lt;p&gt;I think maybe MCL refugees or people who would have used MCL would like something like this.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;240&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.020.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Briefly I’m just going&lt;/span&gt; to talk about some technologies in CCL. I kind of avoided, I hope not incorrectly, getting too deep into the technical weeds about any particular thing. I just kind of wanted to give you an overview of some of this stuff. Normally I get a big charge out of talking about all these little bits, and data representation, and all this trickery, but I thought maybe for this talk that wouldn’t be so appropriate.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.021.png&quot;/&gt;&lt;p&gt;More with the cartoon thing. One of CCL’s hallmark features has always been that its compiler is pretty speedy. And that’s nice. If you’ve got a big project in, say, Xcode and you’re trying to compile Apple Swift, maybe the language is swift, or maybe something else good about it is swift, it’s swift in some other ways, but it’s not too swift when it comes to compiling.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.022.png&quot;/&gt;&lt;p&gt;And I think that’s really a surprisingly nice feature. With Lisp, it’s not so important maybe because you can compile things incrementally and save your image and so forth. You don’t maybe so often build the whole system. I guess that’s what I want to say about it.&lt;/p&gt;
&lt;p&gt;The compiler doesn’t have a lot of brains; it doesn’t work all that hard. But its goal is to produce something reasonable pretty quickly, and as often as not, it’s able to produce something halfway decent, even good, pretty quickly.&lt;/p&gt;
&lt;p&gt;One historical weakness has always been if you’re a number cruncher, CCL tends to be kind of bad about that. It would cons double-floats like crazy and just be a big mess. You can make some effort with some declarations and you can get some floating-point code that is halfway decent if not good. So, the compiler could definitely stand to work a little harder and it would still be fast.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.023.png&quot;/&gt;&lt;p&gt;One nice thing about it is that you can build the Lisp in under a minute. On my iMac at home it takes 30 seconds to rebuild the whole Lisp from scratch. That’s nice, so I guess in some ways, CCL is optimized for CCL hackers. The CCL hackers are often rebuilding the Lisp, so being able to do that in 30 seconds is pretty nice.&lt;/p&gt;
&lt;p&gt;I think this happens with all sorts of software, but when new people come, and they start using CCL in a new software system, new issues arise. New bugs turn up, including performance bugs. More often than not, those performance bugs tend to be not endemic so much, as is, “well, nobody ever really complained about it before.” And we can often resolve those performance bugs without too much trouble. But it is true that CCL’s goal is to produce something reasonable quickly. It doesn’t do anything heroic.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.024.png&quot;/&gt;&lt;p&gt;We have native threads in CCL. This isn’t even very interesting; this is like table stakes for a general-purpose Lisp implementation. It has a couple of…some funny things happen, because Lisp wasn’t designed with multiple threads in mind, so for instance, with hash tables, what happens when you’re accessing a hash table from multiple threads? Do you have to do some synchronization somehow, or what? In CCL, hash tables happen to be thread-safe and they use this fancy-pants lock-free algorithm that does all this complicated stuff and tends to work pretty well for read-mostly hash tables. There’s keyword arguments to make different kinds of hash tables that might work better in certain circumstances.&lt;/p&gt;
&lt;p&gt;What happens when you try to write to a stream from multiple threads? Something bad, maybe? So, one sort of weird thing that CCL does, is when you make a stream, it only works from the thread you made it in, by default. This is totally a performance hack, it’s semantically really gross, but the performance was such that they decided to do this. And again, there’s keyword arguments to the open function where you can make streams that will work across threads but then locking becomes involved and performance becomes an issue.&lt;/p&gt;
&lt;p&gt;And then, what do you do with special variables with threads? We’ve had papers about this before, and CCL just uses the pretty much standard scheme of these thread-local shallow bindings. So, there’s a small number of instructions you have to execute to get whatever the current special binding is for the thread in question. Sorry if I’m getting down into the little technical details that are boring.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.025.png&quot;/&gt;&lt;p&gt;The other thing about CCL is it’s got this sort of interesting garbage collector. I don’t claim that any of it is really novel, it’s all in the literature, but the way CCL works is that it manages one contiguous range of address space; this single space. And when CCL starts up, it reserves this large address space from the operating system, like 512 GB large, so I’m talking large. And then it commits a certain amount of pages to be used by the Lisp. And the old objects, they get allocated on the left, and as allocation takes place, the objects to go the right. And when it’s time to do some garbage collection, the garbage collector scans the heap, marks all the live objects, and then it squishes them all together. So it just compacts them together. So all the objects on the right get scooted over towards the objects on the left and squeeze out all the little gaps.&lt;/p&gt;
&lt;p&gt;So, the heap is temporally ordered, so the old objects are always on the left, and the young objects are always on the right. We do some tricks to exploit what’s called the generational hypothesis; you might have heard of this. The generational hypothesis is “most objects die young.” That’s basically what it is. So, what we do then, is we have some generations here, and we treat those just as though they were the big heap. So, we treat it as this was the base of the heap. You start gc-ing from here, you mark, and you squish. But you only use this teeny, teeny, teeny, little fraction of the heap, and that’s really fast. So, a millisecond or so, and boom, you’re done. And there some complications with that, as you may know. You have to keep track of the case when old objects are mutated to have references to new objects and we use a software write barrier to do that, but it works out pretty well.&lt;/p&gt;
&lt;p&gt;So there it is. I’ve heard that the .NET gc is think mark/compact type; I don’t know. There’s this guy named Patrick Dussud who used to be a Lisp guy at TI, and he ended up on that at Microsoft. So, maybe that’s where he got that idea.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.026.png&quot;/&gt;&lt;p&gt;Some implications of this GC are that objects move around on you. So, since objects move around on you, you can’t really pass Lisp objects to foreign code, to C code, because C doesn’t expect that you’re going to move some object out from under it, and it’s going to get very unhappy. So, whenever you have to operate on Lisp data from foreign code, with very few exceptions, you’re looking at copying.&lt;/p&gt;
&lt;p&gt;And another limitation is that the GC runs single-threaded. That’s just a question of difficult engineering. Either you can make the marking and the collection, you can maybe use multiple threads to do that. Or if you’re really ambitious, you can say, well, let’s invent a collector where the mutator threads and the collector threads can run at the same time. And that’s doable, but that takes some work.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.027.png&quot;/&gt;&lt;p&gt;The final CCL feature that I’d like to talk about is that it has this sort of cool foreign-function interface to call C code. I know that probably a lot of you prefer to use a library like CFFI to handle your foreign function needs, but I think CCL’s native FFI has a couple of cool features that I’d just like to mention here.&lt;/p&gt;
&lt;p&gt;So, if you know a C function by name you can call it, using this sort of middle-level external-call function. So, basically, you can just dlsym some symbol, and you call it, specifying the return type in this case.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.028.png&quot;/&gt;&lt;p&gt;There’s also some notation for describing and accessing some foreign data. So, what I do here is there’s this form called &lt;code&gt;rletz&lt;/code&gt;, and &lt;code&gt;rlet&lt;/code&gt; stands for record-let, and again this is sort of the Macintosh heritage of CCL that shows through, because back in the Macintosh day, you used to use Pascal to program the applications, and Pascal would call its aggregates—it didn’t call them structures—it called them records. So sometimes you’ll see in CCL, there’ll be something like &lt;code&gt;make-record&lt;/code&gt;, or &lt;code&gt;rlet&lt;/code&gt; (for record-let). So, &lt;code&gt;rletz&lt;/code&gt; just, we allocate an array of 10 double-floats on the stack, on the C stack, zero those guys, we use this &lt;code&gt;paref&lt;/code&gt; operator to initialize some of our foreign data, and then we can just use &lt;code&gt;external-call&lt;/code&gt; to call this BLAS routine to perform this operation.&lt;/p&gt;
&lt;p&gt;And notice that we have to specify the types of the foreign arguments so that the foreign function interface code can do the appropriate marshaling and un-marshaling and conversion of the types.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.029.png&quot;/&gt;&lt;p&gt;That’s sort of a drag, so we use this thing called the interface translator, which parses the C header file. So here’s an example from cURL, curl.h, so here’s this declaration from curl.h that’s for this function &lt;code&gt;curl_global_init&lt;/code&gt;. And then this program, which has been called ffigen, and it’s based on a patched gcc, though nowadays were working on a new one that’s based on libclang, and I want to give a shout-out here to a volunteer contributor, his name’s Bo Yao, and he worked on figuring out how libclang works, so thanks to him (if you’re out there, thank you very much). And it produces this s-expression representation of the C declaration.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.030.png&quot;/&gt;&lt;p&gt;So, with that in hand, there’s Lisp code that then reads that, and writes this little database that tells the Lisp, hey, this is the sort of types and sizes that these foreign functions need. And in that case we can use this little convenient reader macro &lt;code&gt;#_&lt;/code&gt; to call this foreign code. So we say &lt;code&gt;#_curl_global_init&lt;/code&gt; and we can also look up the names of the constants. So there’s that header, constant from C, that we can refer to from Lisp.&lt;/p&gt;
&lt;p&gt;So that is sort of convenient and cool. Maybe you don’t care that much, maybe you say, “bleagh, foreign code, who wants foreign code, we want code in Common Lisp”. And that’s certainly true; if you can have your code in Common Lisp you’re a lot better off usually, but sometimes you just have to.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;75.232968881413&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.031.png&quot;/&gt;&lt;p&gt;A couple related projects: we use a version of Dietz’s ANSI test suite, which we made a copy of and we’ve since added CCL-specific tests to; &lt;a href=&quot;https://github.com/Clozure/ccl-tests&quot;&gt;that’s on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We’ve got this documentation system that is sort of this homebrew thing; it’s called &lt;a href=&quot;https://github.com/Clozure/ccldoc&quot;&gt;CCLDoc&lt;/a&gt;. It actually runs on SBCL too thanks to some patches that people have sent in.&lt;/p&gt;
&lt;p&gt;The interesting thing about this, is the manual for CCL, I think it used to be written in texinfo. Nobody liked texinfo. So, somebody volunteered and said, hey, you know texinfo, that really blows, let’s use something better, so they picked DocBook.&lt;/p&gt;
&lt;p&gt;Well, DocBook’s not better than texinfo, it’s horrible. And even though DocBook might be really flexible, and you can do all sorts of things with it, writing DocBook documentation totally stinks. And the CCL hackers didn’t do it. So, we’d add new features to CCL or do things, and say, you know, we really ought to add this to the manual, but that would involve editing DocBook so let’s just not.&lt;/p&gt;
&lt;p&gt;So, we went round and round about this, and said, maybe we should just use LaTeX. No, LaTeX is almost as horrible as DocBook. And then, well, how about this program LyX, you know, LyX is all right, that produces pretty good output. That didn’t get much traction, so Gail Zacharias of Clozure finally got sick and tired of all of us whining, and refusing to do anything, so she cooked up this homebrew documentation system called CCLDoc.&lt;/p&gt;
&lt;p&gt;And the nice thing about CCLDoc is it’s not too horrible, it uses this s-expression based representation of the document, and writing renderers for it is pretty easy.&lt;/p&gt;
&lt;p&gt;So, all you have to do is, you’ve got this data structure in memory, and then you just follow this little protocol and then you can write an HTML renderer for it pretty easy, a TeX renderer for it pretty easy, Markdown renderer for it, whatever. So that’s sort of a neat thing.&lt;/p&gt;
&lt;p&gt;And like I said, we’re working on this updated ffigen based on libclang. Because gcc-4.0, that’s pretty old, and it’s hard to maintain a set of patches for something that your system needs. The nice thing about libclang is they say “libclang is stable”, because otherwise if you’ve ever worked with LLVM, they break things all over the place, and every release changes and you don’t want to get on that treadmill if you can avoid it. So that’s why libclang comes into play.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;67&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.032.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;So some people&lt;/span&gt; have wondered hey, you know, what’s the future of CCL?&lt;/p&gt;
&lt;p&gt;One item is, well, we just kind of need to keep up. For instance, an example of keeping up: the upcoming FreeBSD 12 has some ABI breakage in it; it changes the ABI. For instance, the size of struct stat changes because they decided, well, you know, a 32-bit quantity that's too small for inode numbers; we need to have a 64-bit quantity for inode numbers.&lt;/p&gt;
&lt;p&gt;So now, you know, we’ve got that database, right, that I talked to you about foreign-function interface so when we want to do &lt;code&gt;#_stat&lt;/code&gt; from CCL it thinks, well, here’s the layout of struct stat, well in FreeBSD 12, it’s different. So you have to make those modifications and just keep up with that sort of stuff.&lt;/p&gt;
&lt;p&gt;One other thing that we'd like to do is we recognize that the compiler hasn’t got a lot of brains, so there’s this experimental new register allocator that we’ve been working on that’s sort of opt-in on the development branch that tries a lot harder to keep values in registers rather than treating the stack frame locations as the canonical locations for variables.&lt;/p&gt;
&lt;p&gt;We’re probably going to need to do a port to ARM64 pretty soon; 64-bit ARM. I like the Macintosh platform, so that’s an important platform for me, and it won’t surprise me at all if Apple comes out with an ARM64-based MacBook in the next couple of years, and I’d like to have CCL there.&lt;/p&gt;
&lt;p&gt;And there’s just the usual bugs that come up.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.033.png&quot;/&gt;&lt;p&gt;One thing that I think would be really great is a modern macOS IDE. I guess it could be on another system too, but like I say, I like the Macintosh. Even though Apple is kind of a slave driver; they really make you keep up, and that’s sort of hard.&lt;/p&gt;
&lt;p&gt;I’ve said for years that I think Emacs and SLIME are kind of a local optimum when it comes to Lisp IDEs and I’m always sort of nonplussed when I hear people who are really enthusiastic, and they say, “Emacs and SLIME, that’s the most wonderful IDE ever invented by man.” Well, it’s nice, I guess, but I think you’re overstating the case.&lt;/p&gt;
&lt;p&gt;I use Emacs, and I’m sort of a SLIME caveman myself; don’t get me wrong, but I think that there’s opportunities to do better.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;38&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.034.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;One thing that&lt;/span&gt; I’ve always been bothered by, although maybe it’s never bothered anybody else, is that due to the fact that the Lisp is named “Clozure CL”, I’ve always worried that people might have the impression that it’s Clozure’s (Clozure Associates, the consulting company); I’ve always worried that they think that it’s their product. Or that they “own” it, or that it’s their private playground somehow and that they let you play in it but they don’t really want you messing around with it.&lt;/p&gt;
&lt;p&gt;That’s really never been the case. Even in the days when we ran our own Subversion server and used Trac, we were more than happy to give out commit access to anybody who demonstrated the least amount of competence.&lt;/p&gt;
&lt;p&gt;All you have to is, “do you know up from down? OK, go ahead”. We got, really, very few takers.&lt;/p&gt;
&lt;p&gt;One thing that we were able to do and that I was able to do while I was at Clozure is they were able to obtain the copyright for the sources from Digitool before Digitool disappeared.&lt;/p&gt;
&lt;p&gt;And having done that, I suggested that we change the license of CCL from the LLGPL, which some people find a little bit maybe hard to understand or a little bit peculiar, or the cause of some worry, to Apache 2.0.&lt;/p&gt;
&lt;p&gt;I thought Apache 2.0 was pretty easy to understand; it made it clear that contributions you made to CCL weren’t going to be exploited; you weren’t going to be working for free; nobody was going to exploit you; nobody was going to take your changes and give you the shaft in any way whatsoever, so I thought that might be useful.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;31.745583038869&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.035.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;As far as who&lt;/span&gt; is hacking on CCL, you might know (or you might not) that Gary Byers, who has worked on CCL since the old days, recently had to retire for health reasons.&lt;/p&gt;
&lt;p&gt;And this really sucks because he is a great programmer, a great hacker, and if ever there was a 10x hacker—have you ever heard the term 10x hacker?&lt;/p&gt;
&lt;p&gt;There are some programmers who are just 10 times better than just your average programmer. They’re the good ones, and you want those people, and if ever there was a 10x programmer, it’s Gary.&lt;/p&gt;
&lt;p&gt;So, not having him in the project is a real loss; that is a total drag. So the project is left with me, and I’m not as good a hacker as Gary, that’s for sure. If he’s Batman at best I’m going to be Robin.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.036.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;You can help&lt;/span&gt; CCL. It’s &lt;a href=&quot;https://github.com/Clozure/ccl&quot;&gt;on GitHub&lt;/a&gt; now. I moved it to GitHub from Subversion. I thought maybe that I could benefit from GitHub’s network effects that way and maybe make it easier for people to contribute.&lt;/p&gt;
&lt;p&gt;There’s a channel on Freenode that I hang out on; you’re welcome to come to; you’re welcome to participate on the mailing list; and if you just want to do cool stuff with CCL, that helps too.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;49&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.037.png&quot;/&gt;&lt;p&gt;When, again, I was wasting time on Twitter one day, as I sometimes do, and when the news broke that Gary was going to have to retire because of his health, I was at a full-time job where I was writing Clojure (with a “j”) of all things. And while I was there, that was taking up a lot of my energy.&lt;/p&gt;
&lt;p&gt;You’re working full-time, you’re working on this other dialect, and I was really worried, because perhaps neurotically, I feel like I have a responsibility not only to Clozure CL, which I love, a software system which I really like, and I felt that I had a responsibility to its users.&lt;/p&gt;
&lt;p&gt;So when I ran across this tweet, that sort of, you know, I said, “Yeah, I know how that feels. I’m going to have to call this guy up and find out who his therapist is, because maybe I’m going to have to go to him sometime.”&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.038.png&quot;/&gt;&lt;p&gt;One nice thing about Clozure CL is that you can get help for it. If you’re using it in your business, Clozure Associates—Clozure Associates is the name of the company, Clozure CL is the name of the Lisp—don’t call the Lisp “Clozure” or “Clozure Lisp,” OK? It’s Clozure Common Lisp.&lt;/p&gt;
&lt;p&gt;I said that five years ago, by the way, so that’s just a reminder.&lt;/p&gt;
&lt;p&gt;So, Clozure can offer paid support for it, or you can hire me to do whatever you want to with Clozure CL. So, you can get help.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;147.71015067407&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.039.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;For some reason&lt;/span&gt;, I felt that I just really needed to say this: you know what I mean? I like Common Lisp, and I like Clozure CL and so many times I’ve been at Lisp conferences, and there’s so much hand-wringing and we have these panels and say “oh, what are we going to do about Lisp, it’s dying, we’re all, woe, it’s all weird and nobody likes it…”&lt;/p&gt;
&lt;p&gt;What the heck? Let’s have a little optimism here. Common Lisp is a great programming language, Clozure Common Lisp is a great implementation.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.040.png&quot;/&gt;&lt;p&gt;So, the standard is old, yes, it is old; it’s probably never going to be revised. But, it still provides an awesome baseline level of functionality that you can rely on and that works across multiple implementations. And we have multiple Common Lisp implementations.&lt;/p&gt;
&lt;p&gt;Even for a programming language like Common Lisp, which is relatively obscure, we must admit, there are multiple implementations to choose from. From specialized to general-purpose, there’s got to be 8, easy, right? A dozen? That’s sort of amazing. And out of all these implementations, I happen to like Clozure CL. Maybe you like some other implementation. But I think we can still be friends.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.041.png&quot;/&gt;&lt;p&gt;This is an excerpt from Peter Norvig’s book &lt;a href=&quot;https://github.com/norvig/paip-lisp&quot;&gt;Paradigms of AI Programming&lt;/a&gt;, and he gave a talk at Lisp NYC. &lt;label for=&quot;mn-norvig-talk&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;mn-norvig-talk&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;Recording of that talk: &lt;a href=&quot;https://vimeo.com/215418110&quot;&gt;As We May Program&lt;/a&gt;&lt;/span&gt; And I was watching that talk, and he said, You know what? Here are all these features that Lisp has, and all these features, except for the underlined features, have been adopted by other languages. So, even though Lisp hasn’t taken over the world yet, even so, he was saying, since its ideas had been adopted by other programming languages, Lisp had ultimately won in some way.&lt;/p&gt;
&lt;p&gt;And I was watching that, and I was sort of bemused, and I said, this is sort of strange, that doesn’t really seem right to me. And especially given the importance of some of the features that have been left out. For instance, the whole Lisp macro situation is extremely powerful, and that’s the reason a lot of people, or at least some people use Lisp, because they exploit that. And, I just want to remind you that there’s a programming language you can use that has all these features: it’s called Common Lisp!&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;[Comment from an audience member] Peter actually made the point that they actually implemented before and after methods using decorators in Python and what he said was we’re still doing Lisp, we just call it Python, and there’s actually a lot of truth to that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That may be.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.042.png&quot;/&gt;&lt;p&gt;One other thing that I like about Lisp very much is that interactivity is kind of built into the design of the language. The language assumes that you are going to be using it in an interactive way.&lt;/p&gt;
&lt;p&gt;There’s these standardized functions and macros like &lt;code&gt;trace&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt;, and they only make sense if you’re using the language in an interactive way. And this is just sort of implied, and I think that the people who worked on the standard thought, “well, duh, of course you’re going to use it in an interactive way.”&lt;/p&gt;
&lt;p&gt;You even have sort of crazy things, like this &lt;code&gt;update-instance-for-redefined-class&lt;/code&gt; method, because, of course, you’re going create a whole bunch of CLOS instances, and, of course, they’re going to be floating around in your image, and of course you’re going to want to change them, and of course you’re going to want to be able to update them, and that sort of attitude I think is really awesome, and I just totally like that.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.043.png&quot;/&gt;&lt;p&gt;And for me, when I interact with Lisp, when I’m at the top level, and I’m typing at Lisp and I’m doing things and I’m recompiling my functions, I really feel like I’m talking to this spirit that’s inside the computer. I’m having this conversation.&lt;/p&gt;
&lt;p&gt;And that was one of the coolest things about the early micros, right? You turned them on, you turned on your Atari 800 or whatever, and bing, you know, it said “Ready”. And you could type stuff, like “plot x, y” and you could do all sorts of stuff. You weren’t having to compile anything, you just did stuff.&lt;/p&gt;
&lt;p&gt;I think that’s so wonderful. You talk to the spirit inside the computer.&lt;/p&gt;
&lt;p&gt;For me, that works for me for some reason. Maybe there’s some problem that I’m trying to solve, and I interact with the Lisp, incrementally, and I do stuff. My one-time colleague Mikel Evins, he talked about this. &lt;label for=&quot;mn-mikel&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;mn-mikel&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/4oo1cp/common_lisp_for_clojure_programmer/d4eec68/&quot;&gt;Mikel's insightful Reddit comment&lt;/a&gt;.&lt;/span&gt; You teach the computer how to do stuff. And that just works for me; I don’t know why. That just works for me.&lt;/p&gt;
&lt;p&gt;It’s been said, there’s this sort of a joke running around that Lisp is a great programming language to use when you don’t know what you’re doing. And since I hardly ever know what I’m doing, Lisp is a great programming language for me.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.044.png&quot;/&gt;&lt;p&gt;On the other hand, there’s something to be said for knowing how to solve the problem. So, sometimes it’s easy to get into the, to be tempted to peck away, and to mess around with stuff, when really, you might want to think about what you’re doing a little while first. That’s kind of a good idea.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;55.668802365697&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.045.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;So, what do we&lt;/span&gt; say, then, to the notion that we’re stuck in the past? This is Edna Mode, she’s from the film The Incredibles. Mr. Incredible had come to visit her because he’d torn a hole in his super-suit. He says, “Edna, fix my super-suit”, and she says, “This is trash, I don’t want to do this any more.”&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.046.png&quot;/&gt;&lt;p&gt;So, what do we say to that? Here’s a quotation from Hamming that I like. The essence of the quotation was that Newton would say, I stood on the shoulders of giants, and that’s what enabled me to see a little bit farther when it comes to him inventing the calculus and so forth. And Hamming’s point is that too often in the computing field we re-implement stuff and we don’t build on each other’s discoveries too much. We stand on each other’s toes.&lt;/p&gt;
&lt;p&gt;I think there’s some truth to that. And I don’t think anybody really escapes from that.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.047.png&quot;/&gt;&lt;p&gt;Let’s laugh at the JavaScript programmers, OK? That’s always fun. Here’s this comic called &lt;a href=&quot;http://www.commitstrip.com&quot;&gt;Commit Strip&lt;/a&gt;, which I like to waste time on. Here’s our intrepid front-end JavaScript hacker, and she’s wondering, “do I pick one JavaScript framework and master it, or do I pick a new one every week just so I can keep up to date?” Because there are so many!&lt;/p&gt;
&lt;p&gt;So, ha-ha, we all laugh. You JavaScript programmers are all so silly.&lt;/p&gt;
&lt;p&gt;But, this is not a technical problem. This is a social problem. And back in the time before Common Lisp was standardized, ARPA called a meeting one time of all the Lisp hackers that it was supporting; all the research environments it was supporting, and it was getting concerned about this proliferation of Lisp dialects.&lt;/p&gt;
&lt;p&gt;And they said, “Hey, what about this? It looks like you’re in a state of chaos.” And I think it was Scott Fahlman who came out and said, “Look, the MacLisp community (which was the MIT Lisp that didn’t have anything do to with the Macintosh), the MacLisp community is not in a state of chaos at all. We’re four well-defined groups going in four well-defined directions!”&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.048.png&quot;/&gt;&lt;p&gt;Same thing.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;29&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.049.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Sometimes people ask me&lt;/span&gt; what I do, what I do for work. And what I try to do, I try to get away with something simple. “Oh, well, you know, I write software.” And hardly anybody is satisfied with that. So then, it’s pretty hard to say, “Oh, yes, I work on an implementation and runtime system and compiler for the programming language Common Lisp.” At which point they sort of just back away. So I’ve what I taken to saying is that I build tools. Programmers need tools to build their software, and I help build tools for those programmers. So, just like artists need brushes and canvases and paint, and sculptors need chisels and stone and hammers, I help make those things.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.050.png&quot;/&gt;&lt;p&gt;Here’s another quotation from Knuth, where he talks about how liking your tools is such an important component of enjoying your work. And I think this is really true.&lt;/p&gt;
&lt;p&gt;There’s another proverb, “it’s a poor workman who blames his tools”. Have you ever heard of that? Well, I think my response to that is that if you’ve got crappy tools, you need to use those tools to make some good tools that you like.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;31.411181882519&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.051.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;So, finally, one of&lt;/span&gt; the coolest things about working on a tool, about working on Clozure CL, is seeing what people have done with it. That really is awesome, to see what people do.&lt;/p&gt;
&lt;p&gt;This is a screenshot from the program &lt;a href=&quot;https://opusmodus.com&quot;&gt;Opusmodus&lt;/a&gt; which I helped work on. I made the user interface. What it really is, is that it’s a Lisp development environment specialized for musicians is pretty much what it is. But there’s a whole raft of functions that do all sorts of operations on music. You can process notes and generate stuff in weird ways.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.052.png&quot;/&gt;&lt;p&gt;There’s a couple of screenshots from that. I’m very pleased to have worked on that, and very proud of that.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.053.png&quot;/&gt;&lt;p&gt;It’s always nice to get a testimonial. There’s some people who use CCL to run the software called ACL2, &lt;label for=&quot;mn-acl2&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;mn-acl2&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;a href=&quot;http://www.cs.utexas.edu/users/moore/acl2/&quot;&gt;The ACL2 web page&lt;/a&gt;&lt;/span&gt; has anybody heard of ACL2? It’s a theorem-proving software. And because the ACL2 guys and the CCL guys talk to teach other, we’ve been able to benefit from each other’s expertise. We were able, in CCL, to add a feature called static conses. What a static cons is, you can cons up something, you make a cons cell, and it doesn’t ever change its address. And this is really helpful for them, because ACL2 stands for Applicative Common Lisp. So it’s all purely functional. So when they do that, that really helped them; it really made their software perform a lot better. That’s in the sort of the hardware verification space.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;39&quot;&gt;&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.054.png&quot;/&gt;&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Well, let me wrap up&lt;/span&gt; here. Again, years ago, I used to work in the theatre. And one of my jobs that I had was, I was in a video that was going to be shown at a sales conference for rice salesmen, of all people. Rice, the grain.&lt;/p&gt;
&lt;p&gt;In the video, I was a swashbuckling swordsman and I represented the forces of mediocrity. And in the video we were doing this sword fight and I was ultimately vanquished by another swordsman who represented some virtue: excellence or whatever it was, you know, diligence.&lt;/p&gt;
&lt;p&gt;And they showed this video to the rice salesmen in an attempt to get them to think about how important and great it would be if they would meet their sales quotas for selling rice. Maybe it worked.&lt;/p&gt;
&lt;p&gt;I wish, I wish, that I had a fancy hat with feathers, and a sword that I could use to vanquish the Lisp naysayers. You know what I mean? But I left all that stuff at home.&lt;/p&gt;
&lt;p&gt;But what I can say is, I really like Common Lisp. I really like Lisp, a lot. And I want to tell you that it’s OK to like Lisp, and that it’s OK to write programs in Common Lisp. And I’m really looking forward here in the rest of the symposium to hearing about what you’ve done with Lisp, what you’re doing now with Lisp, what you’re going to do with Lisp in the future, and I’m interested to hear about what your dreams are for doing new stuff with Lisp.&lt;/p&gt;
&lt;p&gt;Because Lisp is great.&lt;/p&gt;
&lt;img src=&quot;http://thisoldlisp.com/talks/els-2018/slides/tol.055.png&quot;/&gt;&lt;p&gt;Thanks very much. I appreciate your attention. Let’s go out there and hack some more Lisp. ❦&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Fri, 19 Oct 2018 01:00:23 +0000</pubDate>
<dc:creator>lispm</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://thisoldlisp.com/talks/els-2018/</dc:identifier>
</item>
<item>
<title>Building a better gov.uk, step by step</title>
<link>https://gds.blog.gov.uk/2018/10/17/building-a-better-gov-uk-step-by-step/</link>
<guid isPermaLink="true" >https://gds.blog.gov.uk/2018/10/17/building-a-better-gov-uk-step-by-step/</guid>
<description>&lt;img class=&quot;wp-image-31231 size-large&quot; src=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image5-620x413.png&quot; alt=&quot;A screenshot of the Apply for your first provisional driving licence step by step page&quot; width=&quot;620&quot; height=&quot;413&quot; srcset=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image5-620x413.png 620w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image5-310x207.png 310w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image5-768x512.png 768w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image5-435x290.png 435w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;The 'Apply for your first provisional driving licence' step by step navigation page
&lt;p&gt;Since GOV.UK launched 6 years ago it has been the home of government’s online content and the starting point for online services.&lt;/p&gt;&lt;p&gt;Every week millions of people use GOV.UK to do complex and sometimes life-changing tasks, such as learning to drive, registering a birth or starting a business.&lt;/p&gt;
&lt;p&gt;We want to make these tasks as easy as possible - by making content simple and user journeys intuitive. This is good for users because it makes it quicker to get things done. And it’s good for government because it reduces unnecessary contact and casework.&lt;/p&gt;
&lt;h2&gt;Why we need to look at end to end services&lt;/h2&gt;
&lt;p&gt;We know users face challenges carrying out tasks. There’s a lot of information to find for a start. Depending on the task, there might be appointments to book, forms to fill in, applications to be made and tests to take.&lt;/p&gt;
&lt;p&gt;And what makes this even harder is that each step needs to be done at the right time and in the right order.&lt;/p&gt;
&lt;p&gt;That’s why government needs to look at every step of this task. From the first thing the user does, to the last thing they need to do. We need to look at services from end to end.&lt;/p&gt;
&lt;p&gt;The difficulty government faces when trying to make this easier is that people’s real-world tasks do not always fit neatly with the way government is organised into departments and agencies.&lt;/p&gt;
&lt;p&gt;For example, a business wanting to hire their first employee needs information and services from 5 different areas of government before they can hire them:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th width=&quot;20%&quot;&gt;&lt;strong&gt;Step&lt;/strong&gt;&lt;/th&gt;
&lt;th width=&quot;20%&quot;&gt;&lt;strong&gt;Government department or agency&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Check you can afford to take on an employee&lt;/td&gt;
&lt;td&gt;Department for Work and Pensions&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Register as an employer&lt;/td&gt;
&lt;td&gt;HM Revenue and Customs&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Check a potential employee’s right to work in the UK&lt;/td&gt;
&lt;td&gt;Home Office&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Check a potential employee’s criminal record&lt;/td&gt;
&lt;td&gt;Disclosure and Barring Service&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Set up a pension scheme&lt;/td&gt;
&lt;td&gt;The Pensions Regulator&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;Organising GOV.UK by topic and task&lt;/h2&gt;
&lt;p&gt;Rather than organise GOV.UK around the structure of government, we’ve been working to organise content around user needs at scale. So, rather than being organised by department, content on GOV.UK is now organised into a single site-wide system of user-centred topics.&lt;/p&gt;
&lt;p&gt;This topic structure will power new ways to search and browse the site, making things much easier to find.&lt;/p&gt;
&lt;p&gt;But we want to go further - we want to make things easier to do.&lt;/p&gt;
&lt;p&gt;So about a year ago we started experimenting with a new way for users to navigate GOV.UK. These experiments evolved into what we now call step by step navigation.&lt;/p&gt;
&lt;p&gt;It looks like this on GOV.UK:&lt;/p&gt;
&lt;img class=&quot;wp-image-31230 size-large&quot; src=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image4-620x413.png&quot; alt=&quot;A screenshot of the 'Learn to drive a car' step by step page&quot; width=&quot;620&quot; height=&quot;413&quot; srcset=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image4-620x413.png 620w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image4-310x207.png 310w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image4-768x512.png 768w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image4-435x290.png 435w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;This page outlines the process for learning to drive a car
&lt;p&gt;It means that, for the first time, we can show the user everything they’ll need to do to complete a task, whether that’s &lt;a href=&quot;https://www.gov.uk/learn-to-drive-a-car&quot;&gt;Learning to drive&lt;/a&gt; or &lt;a href=&quot;https://www.gov.uk/employ-someone&quot;&gt;Employing someone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The navigation follows you throughout your journey, indicating what to do now and next. It also shows you previous steps you might have missed. For example, getting a provisional driving licence before booking a driving theory test.&lt;/p&gt;
&lt;img class=&quot;wp-image-31227 size-large&quot; src=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image1-1-620x413.png&quot; alt=&quot;A screenshot of the 'Apply for your first provisional driving licence' step by step page&quot; width=&quot;620&quot; height=&quot;413&quot; srcset=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image1-1-620x413.png 620w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image1-1-310x207.png 310w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image1-1-768x512.png 768w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image1-1-435x290.png 435w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;Step by step navigation appears alongside content of each step
&lt;p&gt;Step by step navigation is designed to work with all existing content types and transactions on GOV.UK. Where appropriate, transactions can be broken down further using the separate &lt;a href=&quot;https://design-system.service.gov.uk/patterns/task-list-pages/&quot;&gt;task list pattern&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Developing the design&lt;/h2&gt;
&lt;p&gt;The design evolved over 8 rounds of research and iteration, including an in-depth review at the brilliant &lt;a href=&quot;http://digitalaccessibilitycentre.org/&quot;&gt;Digital Accessibility Centre&lt;/a&gt; in Neath.&lt;/p&gt;
&lt;p&gt;Around half way through the lab research we began testing the pattern on GOV.UK. Analytics data showed that the first examples of step by step navigation were getting a lot of traffic. For example, learn to drive a car was used 1.24 million times in the first 6 months.&lt;/p&gt;
&lt;p&gt;We ask users for feedback with the ‘Is this useful?’ survey banner at the bottom of every page on the site. This showed users were finding it useful.&lt;/p&gt;
&lt;img class=&quot;wp-image-31229 size-large&quot; src=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1-620x66.png&quot; alt=&quot;A screenshot of the 'Is this page useful?' banner&quot; width=&quot;620&quot; height=&quot;66&quot; srcset=&quot;https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1-620x66.png 620w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1-310x33.png 310w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1-768x82.png 768w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1-435x46.png 435w, https://gds.blog.gov.uk/wp-content/uploads/sites/60/2018/10/image3-1.png 1073w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;The 'Is this page useful?' banner
&lt;p&gt;We also ran a remote user research study where we asked users to complete a series of tasks before and after 3 step by step journeys were published.&lt;/p&gt;
&lt;p&gt;The study showed the step by step navigation resulted in a significant increase in users’ successful task completion, as well as an increase in confidence they could use GOV.UK to find what they needed.&lt;/p&gt;
&lt;h2&gt;Scaling the approach&lt;/h2&gt;
&lt;p&gt;With encouraging data coming in, over the past 6 months we’ve been working to scale this approach so it can be used for the more complex tasks users need to do. These include:&lt;/p&gt;
&lt;p&gt;As this table shows, the content that sits within these journeys often crosses multiple government departments and we need a collaborative approach to make these journeys better for users. &lt;a href=&quot;https://insidegovuk.blog.gov.uk/2018/02/07/how-we-approached-service-mapping/&quot;&gt;Creating a new process for cross-government working&lt;/a&gt; to support this has been equally as important as designing a new way of navigating.&lt;/p&gt;
&lt;p&gt;Over the past 6 months we’ve collaborated with more than 15 different departments to publish 25 step by step journeys.&lt;/p&gt;
&lt;p&gt;We’re also indebted to the team at the Driver and Vehicle Standards Agency who helped us map the first journeys: &lt;a href=&quot;https://www.gov.uk/learn-to-drive-a-car&quot;&gt;Learn to drive a car&lt;/a&gt; and &lt;a href=&quot;https://www.gov.uk/become-car-driving-instructor&quot;&gt;Become a driving instructor&lt;/a&gt; when our work was still in prototype form. They’ve written &lt;a href=&quot;https://dvsadigital.blog.gov.uk/2018/05/09/building-a-smoother-road-to-becoming-a-driving-instructor/&quot;&gt;a great blog post about the process&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;We’ll be continuing to work with departments to map and publish step by step navigation for some of the most high priority and complex user journeys within government. As we do this we’ll keep a close eye on performance data to ensure this approach is still working well for users.&lt;/p&gt;
&lt;p&gt;If you’re in a department or agency team and want to work with us to put together step by step journeys, we’d love to hear from you. Send us an email at &lt;a href=&quot;mailto:modelling-services@digital.cabinet-office.gov.uk&quot;&gt;modelling-services@digital.cabinet-office.gov.uk.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/samdub?lang=en&quot;&gt;Follow Sam&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gabytheresa&quot;&gt;follow Gabrielle&lt;/a&gt; on Twitter and &lt;a href=&quot;https://gds.blog.gov.uk/subscribe/&quot;&gt;remember to sign up for blog alerts&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Thu, 18 Oct 2018 21:29:22 +0000</pubDate>
<dc:creator>open-source-ux</dc:creator>
<og:image>https://gds.blog.gov.uk/wp-content/themes/gds-blogs/build/govuk_template/assets/images/opengraph-image.png?0.22.3</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gds.blog.gov.uk/2018/10/17/building-a-better-gov-uk-step-by-step/</dc:identifier>
</item>
<item>
<title>Opus 1.3 Released</title>
<link>https://people.xiph.org/~jm/opus/opus-1.3/</link>
<guid isPermaLink="true" >https://people.xiph.org/~jm/opus/opus-1.3/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;link rel=&quot;icon&quot; href=&quot;https://www.xiph.org/images/logos/xiph.ico&quot; type=&quot;image/x-icon&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; title=&quot;default demosheet&quot; href=&quot;demo.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; title=&quot;default demosheet&quot; media=&quot;print&quot; href=&quot;demo_print.css&quot; type=&quot;text/css&quot;/&gt;&lt;title&gt;Opus 1.3 Released&lt;/title&gt;&lt;/head&gt;&lt;body onload=&quot;init_demo()&quot; id=&quot;readabilityBody&quot; readability=&quot;226.34871945403&quot;&gt;
&lt;div id=&quot;xiphlogo&quot;&gt;&lt;a href=&quot;https://www.xiph.org/&quot;&gt;&lt;img src=&quot;https://www.xiph.org/images/logos/fish_xiph_org.png&quot; alt=&quot;Fish Logo and Xiph.org&quot;/&gt;&lt;/a&gt;


&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://opus-codec.org/downloads/&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/opus-1.3_logo.png&quot; alt=&quot;Banner&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Opus gets another major update with the release of version 1.3. This release brings quality improvements to both speech and music, while remaining fully compatible with RFC 6716. This is also the first release with Ambisonics support. Here's a few of the upgrades that users and implementers will care about the most.&lt;/p&gt;
&lt;h2&gt;Speech/Music Detection&lt;/h2&gt;
&lt;p&gt;Ever since version 1.1, Opus has been able to automatically detect whether its input is speech or music, and choose the optimal encoding mode accordingly. The &lt;a href=&quot;https://people.xiph.org/~xiphmont/demo/opus/demo3.shtml&quot;&gt;original speech/music detector&lt;/a&gt; was based on a simple (non-recurrent) neural network, followed by an HMM-based layer to combine the neural network results over time. While it worked reasonably well most of the time, it was still far from perfect. Thanks to deep learning — and specifically recurrent neural networks — we can now do better.&lt;/p&gt;
&lt;p&gt;Opus 1.3 includes a brand new speech/music detector. It is based on a relatively new type of recurrent neuron: the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gated_recurrent_unit&quot;&gt;Gated Recurrent Unit (GRU)&lt;/a&gt;. Unlike simple &lt;em&gt;feedforward&lt;/em&gt; units, the GRU has a memory. It not only learns how to use its input and memory at each time, but it can also learn how and when to update its memory. That makes it able to remember information for a long period of time but also discard some of that information when appropriate.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;caption&quot; src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/simple_vs_gru.png&quot; alt=&quot;recurrent units&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Comparing the feedforward unit originally used to a simple recurrent unit and to a GRU. Recurrent units add a &lt;em&gt;state&lt;/em&gt; that allows them to combine previous information to the new information they receive. The GRU improves on that with the &lt;em&gt;r&lt;/em&gt; and &lt;em&gt;z&lt;/em&gt; gates, which make it possible to learn longer-term patterns. Both are soft switches (value between 0 and 1) computed based on the previous state of the whole layer and the inputs, with a sigmoid activation function. When the update gate &lt;em&gt;z&lt;/em&gt; is on the left, then the state can remain constant over a long period of time — until a condition causes &lt;em&gt;z&lt;/em&gt; to switch to the right.&lt;/p&gt;
&lt;p&gt;Because distinguishing between speech and music is much easier than, say, speech recognition, the network can be pretty small. Instead of thousands of neurons and millions of weights running on a GPU, the Opus detector has just 4986 weights (that fit in less than 5 kB) and takes about 0.02% CPU to run in real-time. The figure below shows how the layers of the network are arranged. Although it doesn't look very deep, it's actually quite deep &lt;em&gt;over time&lt;/em&gt; thanks to the GRU.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;caption&quot; src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/topology.png&quot; alt=&quot;network topology&quot; onmouseover=&quot;this.src='topology_time.png';&quot; onmouseout=&quot;this.src='topology.png';&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Topology of the neural network used in this project. Each box represents a layer of neurons, with the number of units indicated in parentheses. &lt;em&gt;Dense&lt;/em&gt; layers are fully-connected, non-recurrent layers. The first output indicates whether the signal is music or speech, while the second output indicates whether the signal is active.&lt;/p&gt;
&lt;p&gt;Revisiting the &lt;a href=&quot;https://people.xiph.org/~xiphmont/demo/opus/probabilities.png&quot;&gt;original 1.1 demo example&lt;/a&gt;, let's see what these improvements actually look like in practice.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;caption&quot; src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/probabilities_1.3.png&quot; alt=&quot;speech vs music probabilities&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Illustration of a test sample consisting of mixed voice and music alternating roughly every fifteen seconds. Speech and music sections are marked on the waveform (top). The lower graph shows the instantaneous music probability produced by the 1.1 neural network (gray), the final 1.1 probability from the HMM (blue), and the probability computed by the 1.3 recurrent neural network (red).&lt;/p&gt;
&lt;h3&gt;Decision Logic&lt;/h3&gt;
&lt;p&gt;A neural network only gives us a probability that any given frame is speech or music. From there, we have to make an actual decision based not only on that probability (and how it evolves over time), but also based on the bitrate and whether/when the audio is active or inactive (silent/noise). That decision logic has also been improved in 1.3. The encoder now minimizes a &lt;em&gt;badness&lt;/em&gt; metric, which includes penalties for using the wrong mode, but also for switching in the middle of speech or music. When look-ahead is available, the decision logic is able to have the encoder switch mode during a silence period &lt;strong&gt;before&lt;/strong&gt; the transition between speech and music.&lt;/p&gt;
&lt;h2&gt;Low-Bitrate Speech Improvements&lt;/h2&gt;
&lt;p&gt;Back in 2010-2012, when we were combining SILK and CELT into Opus, there was a lot of work to do. We were already amazed we could code high-quality fullband speech at 32 kb/s that we didn't really attempt to go beyond that. Combined with the fact that Opus has a total of 64 different operating modes (combinations of SILK/CELT/hybrid, bandwidths, frame sizes, mono/stereo), it's easy to see why not everything was fully optimized when the 1.0 encoder came out. For 1.3, there's been some more tuning for low-bitrate speech.&lt;/p&gt;
&lt;h3&gt;Stereo&lt;/h3&gt;
&lt;p&gt;First, it turns out that the Opus encoder was never actually tuned for stereo speech below 40 kb/s. By just changing how the encoder divides the total bitrate between the SILK and CELT parts, we were able to significantly improve stereo speech quality, especially in the 24-32 kb/s range. On the SILK side, the encoder is now giving more bits to the side (left-right difference) channel, lowering the bitrate at which stereo information starts being coded for speech.&lt;/p&gt;
&lt;h3&gt;Bandwidth Decisions&lt;/h3&gt;
&lt;p&gt;Deciding what bandwidth to use depending on the bitrate has always been tricky since it eventually becomes a matter of personal preference. The original tuning was mostly based on my personal preference, plus a &quot;safety margin&quot; erring on the side of lower coding noise and narrower bandwidth. It appears that most people do &lt;strong&gt;not&lt;/strong&gt; share my preferences and tend to prefer wider bandwidths, even if it means more coding noise. That is why we have been changing the decision threshold over time. For example, the Opus 1.0 encoder would only use wideband if the bitrate was at least 14 kb/s. That threshold was lowered to 11 kb/s back in the 1.2 release. Now, thanks to an (unpublished) experiment by folks at Google, we know that most people actually prefer wideband to narrowband even at 9 kb/s. That's why 1.3 now switches from narrowband to wideband at 9 kb/s. You might ask &quot;where's mediumband?&quot; (12 kHz sampling). Well, given these changes, it's no longer useful and will not be used except for a few specific situations (e.g. when the user explicitly asks for it). Of course, since it is part of the Opus specification, it will still remain in the decoder forever (the cost is very small anyway).&lt;/p&gt;
&lt;h3&gt;Going lower!&lt;/h3&gt;
&lt;p&gt;Because of how SILK is designed, there's a limit to how low a bitrate it can produce. No matter what the target bitrate is, the actual average bitrate will never go below a certain value. For previous releases (1.0-1.2), that minimum was around 6 kb/s for narrowband and 9 kb/s for wideband. Thanks to some reworking of the SILK rate control logic, the Opus 1.3 encoder can now encode speech at bitrates down to 5 kb/s for narrowband and 6 kb/s for wideband. Note that this does not by itself improve quality. It only makes some lower rates available.&lt;/p&gt;
&lt;h3&gt;Samples&lt;/h3&gt;
&lt;p&gt;Here are some samples showing how Opus' speech quality has evolved since 1.0 for different bitrates.&lt;/p&gt;
&lt;div class=&quot;comparison&quot; readability=&quot;11&quot;&gt;Your browser does not support the audio tag.
&lt;div&gt;
&lt;p class=&quot;compare_label&quot;&gt;Select codec/version&lt;/p&gt;
&lt;ul class=&quot;codec&quot;&gt;&lt;li onclick=&quot;setSpeechCodec(0, this);&quot;&gt;Opus 1.0&lt;/li&gt;
&lt;li onclick=&quot;setSpeechCodec(1, this);&quot;&gt;Opus 1.1&lt;/li&gt;
&lt;li onclick=&quot;setSpeechCodec(2, this);&quot;&gt;Opus 1.2&lt;/li&gt;
&lt;li onclick=&quot;setSpeechCodec(3, this);&quot; id=&quot;speech_default_codec&quot; class=&quot;selected&quot;&gt;Opus 1.3&lt;/li&gt;
&lt;li onclick=&quot;setSpeechCodec(4, this);&quot;&gt;Uncompressed&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p class=&quot;compare_label&quot;&gt;Select bitrate&lt;/p&gt;
&lt;ul class=&quot;bitrate&quot; id=&quot;speech_bitrate_selector&quot;&gt;&lt;li onclick=&quot;setSpeechRate(9, this);&quot;&gt;9 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(12, this);&quot;&gt;12 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(16, this);&quot;&gt;16 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(20, this);&quot;&gt;20 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(24, this);&quot;&gt;24 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(32, this);&quot;&gt;32 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(40, this);&quot;&gt;40 kb/s&lt;/li&gt;
&lt;li onclick=&quot;setSpeechRate(48, this);&quot; id=&quot;speech_default_rate&quot; class=&quot;selected&quot;&gt;48 kb/s&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;Select where to start playing when selecting a new sample&lt;/p&gt;
&lt;button type=&quot;button&quot; onclick=&quot;speech_norestart();&quot;&gt;Keep playing&lt;/button&gt; &lt;button type=&quot;button&quot; onclick=&quot;speech_setrestart();&quot;&gt;Set current positon as restart point&lt;/button&gt;
&lt;p id=&quot;speech_restart_string&quot;&gt;Player will &lt;strong&gt;continue&lt;/strong&gt; when changing sample.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;caption&quot; readability=&quot;16&quot;&gt;
&lt;p&gt;Comparing stereo speech quality of versions 1.0, 1.1, 1.2, and 1.3 at bitrates between 9 and 48 kb/s. This demo will work best with a browser that supports Ogg/Opus in HTML5 (Firefox, Chrome and Opera do), but if Opus support is missing the file will be played as FLAC, WAV, or high bitrate MP3.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Ambisonics&lt;/h2&gt;
&lt;p&gt;Opus 1.3 adds support for immersive audio using ambisonics that surrounds the listener in a full-sphere sound field. This is done through two new (soon to be RFC 8486) &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-codec-ambisonics&quot;&gt;Ogg mapping families for Opus ambisonics&lt;/a&gt;. Unlike other multi-channel surround formats, ambisonics is independent of speaker layout. This allows for flexible speaker configurations and scalable audio to efficiently transmit 3D audio soundtracks. Ambisonics is particularly effective when combined with 360 videos to envelop the listener’s senses. The spatial resolution of an ambisonics sound field is determined by its order. Generally speaking, increasing the order of ambisonics improves spatial resolution, but requires a higher bitrate, since the number of channels is given by (ambisonics order + 1)^2. These channels are ordered according to the Ambisonic Channel Number (ACN) format. The maximum ambisonics order supported by Opus is 14; in practice, up to the 3rd order is commonly used. In addition to ambisonics, 2 channels (stereo) can be added for non-diegetic (head-locked) audio.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/File:Spherical_Harmonics_deg3.png&quot;&gt;&lt;img class=&quot;caption&quot; src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/Spherical_Harmonics_deg3.png&quot; alt=&quot;spherical harmonics&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ambisonics spherical harmonics for orders up to three. First-order ambisonics includes the top two lines of basis functions (4 channels) and third-order includes all four lines (16 channels). If you've studied physics or chemistry and think these look like the &lt;em&gt;s&lt;/em&gt;, &lt;em&gt;p&lt;/em&gt;, &lt;em&gt;d&lt;/em&gt; and &lt;em&gt;f&lt;/em&gt; atomic orbitals, that's because those too are spherical harmonics.&lt;/p&gt;
&lt;h3&gt;Usage Recommendations&lt;/h3&gt;
&lt;p&gt;Opus 1.3 includes two channel mappings for ambisonics encoding: channel mapping families 2 and 3. For first order ambisonics, it is generally best to use channel mapping 2, which codes each ambisonic channel independently. For all higher-order ambisonics, channel mapping 3 provides a more efficient representation by first transforming the ambisonics signals with a designated mixing matrix before encoding. This 1.3 release provides matrices for first, second, and third order.&lt;/p&gt;
&lt;h3&gt;Samples&lt;/h3&gt;
&lt;p&gt;Here are some ambisonics samples that have been encoded with Opus. For the purpose of this demo, they have been down-mixed to stereo for playback with regular headphones.&lt;/p&gt;
&lt;div class=&quot;comparison&quot; readability=&quot;11&quot;&gt;Your browser does not support the audio tag.
&lt;div&gt;
&lt;p class=&quot;compare_label&quot;&gt;Select codec/version&lt;/p&gt;
&lt;ul class=&quot;codec&quot;&gt;&lt;li onclick=&quot;setAmbiSample(1, this);&quot; id=&quot;ambisonics_default_sample&quot; class=&quot;selected&quot;&gt;Sample 1&lt;/li&gt;
&lt;li onclick=&quot;setAmbiSample(2, this);&quot;&gt;Sample 2&lt;/li&gt;
&lt;li onclick=&quot;setAmbiSample(3, this);&quot;&gt;Sample 3&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p class=&quot;compare_label&quot;&gt;Select bitrate&lt;/p&gt;
&lt;ul class=&quot;bitrate&quot; id=&quot;ambisonics_bitrate_selector&quot;&gt;&lt;li onclick=&quot;setAmbiRate(1, this);&quot;&gt;First order (256 kb/s)&lt;/li&gt;
&lt;li onclick=&quot;setAmbiRate(2, this);&quot; id=&quot;ambisonics_default_rate&quot; class=&quot;selected&quot;&gt;Third order (512 kb/s)&lt;/li&gt;
&lt;li onclick=&quot;setAmbiRate(0, this);&quot;&gt;Third order (uncompressed)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;Select where to start playing when selecting a new sample&lt;/p&gt;
&lt;button type=&quot;button&quot; onclick=&quot;ambi_norestart();&quot;&gt;Keep playing&lt;/button&gt; &lt;button type=&quot;button&quot; onclick=&quot;ambi_setrestart();&quot;&gt;Set current positon as restart point&lt;/button&gt;
&lt;p id=&quot;ambisonics_restart_string&quot;&gt;Player will &lt;strong&gt;continue&lt;/strong&gt; when changing sample.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;caption&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;Evaluating the quality of ambisonics encoding for first and third order. This demo will work best with a browser that supports Ogg/Opus in HTML5 (Firefox, Chrome and Opera do), but if Opus support is missing the file will be played as FLAC, WAV, or high bitrate MP3.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;p&gt;Here are briefly some of the more minor changes in this release.&lt;/p&gt;
&lt;h3&gt;Tone Quality Improvements&lt;/h3&gt;
&lt;p&gt;One of the fundamental assumptions in CELT is that any given band tends to have a fixed perceptual contribution, no matter how loud or quiet it is. While that assumption holds remarkably well across a wide variety of signals, it does get broken occasionally, especially on &lt;em&gt;sparse tonal signals&lt;/em&gt;. By this we mean signals that have are made up of only a handful of tones. These are often synthetic (e.g. a sine wave generator), but can also happen in real life (e.g. glockenspiel). For these signals, we have bands with essentially no energy, at which point it's best to disregard the band and only pay attention to the few bands that hold the tones. This is what Opus 1.3 does now for these signals, slightly improving quality (though probably not something you would easily notice on most files).&lt;/p&gt;
&lt;h3&gt;Updates (RFC 8251) Are on by Default&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://people.xiph.org/~jm/opus/opus-1.2/&quot;&gt;Opus 1.2 demo&lt;/a&gt; discussed some updates being made in the Opus standard. Back then, the changes were disabled by default in the code because they were not yet approved by the IETF. Since then, they have been published as &lt;a href=&quot;https://tools.ietf.org/html/rfc8251&quot;&gt;RFC 8251&lt;/a&gt; and Opus 1.3 now enabled the changes by default. They can be disabled by configuring with &lt;span&gt;--disable-rfc8251&lt;/span&gt;, but there is no reason to do so, since the changes do not affect interoperability in any way.&lt;/p&gt;
&lt;h3&gt;Security Improvements&lt;/h3&gt;
&lt;p&gt;Opus has been extensively tested and fuzzed for several years now. As of version 1.3, Opus is now attempting to defend itself from bugs outside of its scope, i.e. in the applications calling the API. While C makes it impossible to be fully shielded from the application code (e.g. it's not even possible to verify that a pointer is valid), there are still some checks we can make. One of the ways a bug in the application can cause Opus to crash is by corrupting the encoder or decoder state and then calling Opus with the corrupted state.&lt;/p&gt;
&lt;p&gt;Another security improvement in 1.3 comes from assertions. Like many other packages, Opus used to only enable assertions for &quot;debug&quot; builds. In 1.3, the assertions that meet the following criteria are now enabled by default:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Failure would be pretty scary (potential security problem)&lt;/li&gt;
&lt;li&gt;Negligible run-time cost (CPU)&lt;/li&gt;
&lt;li&gt;Low risk of false positive (assertion failing when nothing bad happened)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The result is again that should an attacker manage to cause (directly or indirectly) a corruption in Opus, the application will be more likely to just crash rather than be taken over.&lt;/p&gt;
&lt;address readability=&quot;0&quot;&gt;—Jean-Marc Valin (&lt;a href=&quot;mailto:jmvalin@jmvalin.ca&quot;&gt;jmvalin@jmvalin.ca&lt;/a&gt;) October 18, 2018&lt;p&gt;Special thanks to the Chrome Media Audio team for their work on ambisonics and to&lt;br/&gt;the AudioLab at the York University Department of Electronic Engineering for the audio samples.&lt;/p&gt;&lt;/address&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;First and foremost: &lt;a href=&quot;https://www.opus-codec.org/&quot;&gt;The Opus Project Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Opus 1.3 builds on the &lt;a href=&quot;https://people.xiph.org/~jm/opus/opus-1.2/&quot;&gt;Opus 1.2 improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The basic Opus techniques for music coding are described in the AES paper: &lt;a href=&quot;https://jmvalin.ca/papers/aes135_opus_celt.pdf&quot;&gt;High-Quality, Low-Delay Music Coding in the Opus Codec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The basic Opus techniques for speech coding are described in this other AES paper: &lt;a href=&quot;https://jmvalin.ca/papers/aes135_opus_silk.pdf&quot;&gt;Voice Coding with Opus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia contributors, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ambisonics&quot;&gt;Ambisonics&lt;/a&gt;, Wikipedia, The Free Encyclopedia, 2018&lt;/li&gt;
&lt;li&gt;J. Skoglund, M. Graczyk, &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-codec-ambisonics&quot;&gt;Ambisonics in an Ogg Opus Container&lt;/a&gt;, IETF draft.&lt;/li&gt;
&lt;li&gt;Join our development discussion in &lt;a href=&quot;irc://irc.freenode.net/opus&quot;&gt;#opus at irc.freenode.net&lt;/a&gt; (→&lt;a href=&quot;https://webchat.freenode.net/?channels=opus&quot; onclick=&quot;document.getElementById('chatbox').innerHTML='&amp;lt;iframe src=\'https://webchat.freenode.net/?channels=opus\' width=800 height=600/&amp;gt;';return false;&quot;&gt;web interface&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;&lt;div class=&quot;et&quot; readability=&quot;6.5&quot;&gt;

&lt;div class=&quot;etcenter&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Jean-Marc's Opus documentation work is sponsored by the Mozilla Corporation.&lt;br/&gt;(C) Copyright 2018 Mozilla and Xiph.Org&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;etright&quot;&gt;
&lt;div class=&quot;etcontent&quot;&gt;&lt;a href=&quot;https://mozilla.org/&quot;&gt;&lt;img src=&quot;https://people.xiph.org/~jm/opus/opus-1.3/moz-logo-bw-rgb.png&quot; alt=&quot;Mozilla&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;</description>
<pubDate>Thu, 18 Oct 2018 19:08:04 +0000</pubDate>
<dc:creator>remir</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://people.xiph.org/~jm/opus/opus-1.3/</dc:identifier>
</item>
<item>
<title>Repair is as important as innovation</title>
<link>https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</link>
<guid isPermaLink="true" >https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</guid>
<description>&lt;div readability=&quot;31&quot;&gt;
&lt;div class=&quot;blog-post__asideable-content blog-post__asideable-content--meta&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;blog-post__section&quot; itemprop=&quot;articleSection&quot;&gt;&lt;span&gt;Print edition | Finance and economics&lt;/span&gt;&lt;/h3&gt;
&lt;time class=&quot;blog-post__datetime&quot; itemprop=&quot;dateCreated&quot; datetime=&quot;2018-10-20T00:00:00Z&quot;&gt;Oct 20th 2018&lt;/time&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;div itemprop=&quot;description&quot; readability=&quot;103&quot;&gt;
&lt;p&gt;&lt;span data-caps=&quot;initial&quot;&gt;I&lt;/span&gt;&lt;small&gt;N 1533 A&lt;/small&gt; noblewoman in Calais presented a visiting grandee with a peculiar gift: her personal toothpick, which, she was eager to point out, she had used for seven years. Whether it pleased her guest is not known, according to Hazel Forsyth, a curator at the Museum of London. But the story amused Ms Forsyth’s audience at last month’s “Festival of Maintenance”, a conference dedicated to keeping things in good nick.&lt;/p&gt;
&lt;div class=&quot;newsletter-form newsletter-form--inline&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;newsletter-form__message&quot; readability=&quot;7&quot;&gt;&lt;strong&gt;Get our daily newsletter&lt;/strong&gt;
&lt;p&gt;Upgrade your inbox and get our Daily Dispatch and Editor's Picks.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;latest-updates-panel__container latest-updates-panel__container--blog-post&quot;&gt;

&lt;ul class=&quot;latest-updates-panel__body&quot;&gt;&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;A Democrat leads in New Jersey’s seventh district&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Ryan Zinke’s messy week&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-1.5&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;28&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;The Sydney Opera House, then and now&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;Temporary economic downturns have long-lasting consequences&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;A Christian schism prompts historians to dig deep into the past&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;li class=&quot;latest-updates-panel-card__wrapper&quot; readability=&quot;-2&quot;&gt;
&lt;article class=&quot;latest-updates-panel__article-link&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;
&lt;h3 class=&quot;latest-updates-panel-card__title&quot;&gt;L3 and Harris announce the biggest-ever defence merger&lt;/h3&gt;
&lt;/p&gt;

&lt;/article&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Events about making new things are ten a penny. Less common are events about keeping things as good as new. Maintenance lacks the glamour of innovation. It is mostly noticed in its absence—the tear in a shirt, the mould on a ceiling, the spluttering of an engine. Not long ago David Edgerton of King’s College London, who also spoke at the festival, drove across the bridge in Genoa that collapsed in August, killing 43 people (pictured). “We’re encouraged to pride ourselves on all being innovators and entrepreneurs,” he said. Maintenance is often dismissed as mere drudgery. But in fact, as he pointed out, repairing things is often trickier than making them.&lt;/p&gt;

&lt;p&gt;It is also more difficult for economists to measure. The discipline’s most prominent statistic, &lt;small&gt;GDP,&lt;/small&gt; is gross (as opposed to net) because it leaves out the cost of wear and tear. To calculate these costs, statisticians must estimate the lifespan of a country’s assets and make assumptions about the way they deteriorate. Some are like light bulbs, which work well until they stop altogether. Economists call this the “one-hoss shay” case, an allusion to a poem by Oliver Wendell Holmes. It imagines a horse-drawn cart built so well that it never broke down until it eventually fell apart, victim of “a general flavour of mild decay”.&lt;/p&gt;
&lt;p&gt;Other assets are less poetic. Many are assumed to wear out in a “straight line”, deteriorating by the same amount each year. Others lose a steady percentage of their diminishing worth. Japan assumes that houses lose 4% of their remaining value each year. That may be one reason why the costs of wear and tear (or “consumption of fixed capital”) are reckoned to be so much higher in Japan (22% of &lt;small&gt;GDP)&lt;/small&gt; than in many other countries, where houses are assumed to age more gracefully.&lt;/p&gt;
&lt;p&gt;And how much do economies spend fighting decay? No one knows, partly because most maintenance is performed in-house, not purchased on the market. The best numbers are collected by Canada, where firms spent 3.3% of &lt;small&gt;GDP&lt;/small&gt; on repairs in 2016, more than twice as much as the country spends on research and development.&lt;/p&gt;
&lt;div class=&quot;component-image blog-post__image&quot;&gt;&lt;img src=&quot;https://cdn.static-economist.com/sites/default/files/images/print-edition/20181020_FNC476.png&quot; alt=&quot;&quot; class=&quot;component-image__img blog-post-article-image blog-post-article-image__slim&quot; srcset=&quot;/sites/default/files/imagecache/200-width/images/print-edition/20181020_FNC476.png 200w, /sites/default/files/imagecache/300-width/images/print-edition/20181020_FNC476.png 300w, /sites/default/files/imagecache/400-width/images/print-edition/20181020_FNC476.png 400w, /sites/default/files/imagecache/640-width/images/print-edition/20181020_FNC476.png 640w, /sites/default/files/imagecache/800-width/images/print-edition/20181020_FNC476.png 800w, /sites/default/files/imagecache/1000-width/images/print-edition/20181020_FNC476.png 1000w, /sites/default/files/imagecache/1200-width/images/print-edition/20181020_FNC476.png 1200w, /sites/default/files/imagecache/1280-width/images/print-edition/20181020_FNC476.png 1280w, /sites/default/files/imagecache/1600-width/images/print-edition/20181020_FNC476.png 1600w&quot; sizes=&quot;(min-width: 600px) 640px, calc(100vw - 20px)&quot;/&gt;&lt;/div&gt;
&lt;p&gt;At the festival, Mr Edgerton cited the old idea of “hydraulic despotism”: the argument that the tyrannies of the ancient East arose to force people to maintain fragile irrigation systems. In those societies, to repair was to repress. But some today have the opposite concern. They see maintenance and repair as a right they are in danger of losing to companies that hoard spare parts and information too jealously.&lt;/p&gt;
&lt;p&gt;In March California became the 18th state in America to introduce a bill supporting the “right to repair”, by obliging manufacturers to make manuals more widely available to customers and independent repair shops. The European Commission has proposed something similar for dishwashers, washing machines and the like. Some think they have the right to repair public property, too. One speaker at the festival, who called himself the “guerrilla groundsman” and masked his identity with a helmet, described his surreptitious efforts to clean bridges and repaint signs in Cambridge without authorisation. In a disposable society, to repair is to rebel.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Correction (October 19th 2018):&lt;/strong&gt; We previously stated that David Edgerton was at Imperial College London. In fact, he is at King’s College London. This has been amended. &lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 18 Oct 2018 18:02:38 +0000</pubDate>
<dc:creator>sinak</dc:creator>
<og:description>Maintenance lacks the glamour of innovation—and is harder to measure</og:description>
<og:image>https://cdn.static-economist.com/sites/default/files/images/2018/10/articles/main/20181020_fnp503.jpg</og:image>
<og:type>article</og:type>
<og:url>https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</og:url>
<og:title>Repair is as important as innovation</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.economist.com/finance-and-economics/2018/10/20/repair-is-as-important-as-innovation</dc:identifier>
</item>
<item>
<title>OOP Is Dead, Long Live OOP</title>
<link>https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</link>
<guid isPermaLink="true" >https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</guid>
<description>&lt;p&gt;Seeing this has been linked outside of game-development circles: &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system&quot; rel=&quot;external nofollow&quot;&gt;ECS&lt;/a&gt;&quot; (&lt;em&gt;this wikipedia page is garbage, btw -- it conflates EC-frameworks and ECS-frameworks, which aren't the same...&lt;/em&gt;) is a faux-pattern circulated within game-dev communities, which is basically a version of the relational model, where &quot;entities&quot; are just ID's that represent a formless object, &quot;components&quot; are rows in specific tables that reference an ID, and &quot;systems&quot; are procedural code that can modify the components. This &quot;pattern&quot; is always posed as a solution to an over-use of inheritance, without mentioning that an over-use of inheritance is actually bad under OOP guidelines. Hence the rant. This isn't the &quot;one true way&quot; to write software. It's getting people to actually look at existing design guidelines.&lt;/p&gt;

&lt;p&gt;This blog post is inspired by &lt;a href=&quot;https://twitter.com/aras_p&quot; rel=&quot;external nofollow&quot;&gt;Aras Pranckevičius&lt;/a&gt;' recent publication of a talk aimed at junior programmers, designed to get them to come to terms with new &quot;ECS&quot; architectures. Aras follows the typical pattern (&lt;em&gt;explained below&lt;/em&gt;), where he shows some terrible OOP code and then shows that the relational model is a great alternative solution (&lt;em&gt;but calls it &quot;ECS&quot; instead of relational&lt;/em&gt;). This is not a swipe at Aras at all - I'm a fan of his work and commend him on the great presentation! The reason I'm picking on his presentation in particular instead of the hundred other ECS posts that have been made on the interwebs, is because he's gone through the effort of actually publishing a git repository to go along with his presentation, which contains a simple little &quot;game&quot; as a playground for demonstrating different architecture choices. This tiny project makes it easy for me to actually, concretely demonstrate my points, so, thanks Aras!&lt;/p&gt;
&lt;p&gt;You can find Aras'  slides at &lt;a href=&quot;http://aras-p.info/texts/files/2018Academy%20-%20ECS-DoD.pdf&quot; rel=&quot;external nofollow&quot;&gt;http://aras-p.info/texts/files/2018Academy - ECS-DoD.pdf&lt;/a&gt; and the code at &lt;a href=&quot;https://github.com/aras-p/dod-playground&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/aras-p/dod-playground&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm not going to analyse the final ECS architecture from that talk (yet?), but I'm going to focus on the straw-man &quot;bad OOP&quot; code from the start. I'll show what it would look like if we actually fix all of the OOD rule violations.&lt;br/&gt;&lt;strong&gt;Spoiler: fixing the OOD violations actually results in a similar performance improvement to Aras' ECS conversion, plus it actually uses less RAM and requires less lines of code than the ECS version!&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;TL;DR: Before you decide that OOP is shit and ECS is great, stop and learn OOD (to know how to use OOP properly) and learn relational (to know how to use ECS properly too).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I've been a long-time ranter in many &quot;ECS&quot; threads on the forum, partly because I don't think it deserves to exist as a term (&lt;em&gt;spoiler: it's just a an ad-hoc version of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Relational_model&quot; rel=&quot;external nofollow&quot;&gt;relational model&lt;/a&gt;&lt;/em&gt;), but because almost &lt;em&gt;every single&lt;/em&gt; blog, presentation, or article that promotes the &quot;ECS&quot; pattern follows the same structure:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Show some terrible OOP code, which has a terribly flawed design based on an over-use of inheritance (and incidentally, a design that breaks many OOD rules).&lt;/li&gt;
&lt;li&gt;Show that composition is a better solution than inheritance (and don't mention that OOD actually teaches this same lesson).&lt;/li&gt;
&lt;li&gt;Show that the relational model is a great fit for games (but call it &quot;ECS&quot;).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This structure grinds my gears because:&lt;br/&gt;&lt;strong&gt;(A)&lt;/strong&gt; it's a straw-man argument.. it's apples to oranges (bad code vs good code)... which just feels dishonest, even if it's unintentional and not actually required to show that your new architecture is good,&lt;br/&gt;but more importantly:&lt;br/&gt;&lt;strong&gt;(B)&lt;/strong&gt; it has the side effect of suppressing knowledge and unintentionally discouraging readers from interacting with half a century of existing research. The relational model was first written about in the 1960's. Through the 70's and 80's this model was refined extensively. There's common beginners questions like &quot;&lt;em&gt;which class should I put this data in?&lt;/em&gt;&quot;, which is often answered in vague terms like &quot;&lt;em&gt;you just need to gain experience and you'll know by feel&lt;/em&gt;&quot;... but in the 70's this question was extensively pondered and solved in the general case in formal terms; it's called &lt;a href=&quot;https://en.wikipedia.org/wiki/Database_normalization#Normal_forms&quot; rel=&quot;external nofollow&quot;&gt;database normalization&lt;/a&gt;. By ignoring existing research and presenting ECS as a completely new and novel solution, you're hiding this knowledge from new programmers.&lt;/p&gt;
&lt;p&gt;Object oriented programming dates back just as far, if not further (&lt;em&gt;work in the 1950's began to explore the style&lt;/em&gt;)! However, it was in the 1990's that OO became a fad - hyped, viral and very quickly, &lt;em&gt;the&lt;/em&gt; dominant programming paradigm. A slew of new OO languages exploded in popularity including Java and (&lt;em&gt;the standardized version of&lt;/em&gt;) C++. However, because it was a hype-train, everyone &lt;em&gt;needed&lt;/em&gt; to know this new buzzword to put on their resume, yet no one really groked it. These new languages had added a lot of OO features as keywords -- &lt;em&gt;class&lt;/em&gt;, &lt;em&gt;virtual&lt;/em&gt;, &lt;em&gt;extends&lt;/em&gt;, &lt;em&gt;implements&lt;/em&gt; -- and I would argue that it's at this point that OO split into two distinct entities with a life of their own.&lt;br/&gt;I will refer to the use of these OO-inspired language features as &quot;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot; rel=&quot;external nofollow&quot;&gt;OOP&lt;/a&gt;&lt;/strong&gt;&quot;, and the use of OO-inspired design/architecture techniques as &quot;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_design&quot; rel=&quot;external nofollow&quot;&gt;OOD&lt;/a&gt;&lt;/strong&gt;&quot;. Everyone picked up OOP very quickly. Schools taught OO classes that were efficient at churning out new OOP programmers.... yet knowledge of OOD lagged behind.&lt;/p&gt;
&lt;p&gt;I argue that code that uses OOP language features, but does not follow OOD design rules &lt;strong&gt;is not OO code&lt;/strong&gt;. Most anti-OOP rants are eviscerating code that is not actually OO code.&lt;br/&gt;OOP code has a very bad reputation, I assert in part due to the fact that, most OOP code does not follow OOD rules, thus isn't actually &quot;true&quot; OO code.&lt;/p&gt;

&lt;p&gt;As mentioned above, the 1990's was the peak of the &quot;OO fad&quot;, and it's during this time that &quot;bad OOP&quot; was probably at its worst. If you studied OOP during this time, you probably learned &quot;The 4 pillars of OOP&quot;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Abstraction&lt;/li&gt;
&lt;li&gt;Encapsulation&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I'd prefer to call these &quot;4 tools of OOP&quot; rather than 4 pillars. These are tools that you &lt;em&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/em&gt; use to solve problems. Simply learning how a tool works is not enough though, you need to know when you &lt;strong&gt;&lt;em&gt;should&lt;/em&gt;&lt;/strong&gt;&lt;em&gt; &lt;/em&gt;be using them... It's irresponsible for educators to teach people a new tool without also teaching them when it's appropriate to use each of them.  In the early 2000's, there was a push-back against the rampant misuse of these tools, a kind of second-wave of OOD thought. Out of this came the &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID&quot; rel=&quot;external nofollow&quot;&gt;SOLID&lt;/a&gt; mnemonic to use as a quick way to evaluate a design's strength. Note that most of these bits of advice were well actually widely circulated in the 90's, but didn't yet have the cool acronym to cement them as the five core rules...&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; rel=&quot;external nofollow&quot;&gt;Si&lt;/a&gt;&lt;a href=&quot;http://go.gamedev.net/?id=13722X707581&amp;amp;xs=1&amp;amp;isjs=1&amp;amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSingle_responsibility_principle&amp;amp;xguid=bec081ca5481b60ce2a074abf8de0dd2&amp;amp;xuuid=5180b656273dda91d97c44dcd5034ff2&amp;amp;xsessid=f6b94a3c87ce1e392161ce21c5adfe14&amp;amp;xcreo=0&amp;amp;xed=0&amp;amp;sref=https%3A%2F%2Fwww.gamedev.net%2Fblogs%2Fentry%2F2265481-oop-is-dead-long-live-oop%2F%3FcsrfKey%3Dd4c2447e52a68c8aeafbe41954c76c1e%26do%3Dedit&amp;amp;pref=https%3A%2F%2Fwww.gamedev.net%2Fblogs%2Fentry%2F2265481-oop-is-dead-long-live-oop%2F&amp;amp;xtz=-600&amp;amp;abp=1&amp;amp;jv=13.10.3-2&amp;amp;bv=2.5.1&quot; rel=&quot;external nofollow&quot;&gt;ngle responsibility principle&lt;/a&gt;&lt;/strong&gt;. Every class should have one reason to change. If class &quot;A&quot; has two responsibilities, create a new class &quot;B&quot; and &quot;C&quot; to handle each of them in isolation, and then compose &quot;A&quot; out of &quot;B&quot; and &quot;C&quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Open/closed_principle&quot; rel=&quot;external nofollow&quot;&gt;Open/closed principle&lt;/a&gt;&lt;/strong&gt;. Software changes over time (&lt;em&gt;i.e. maintenance is important&lt;/em&gt;). Try to put the parts that are likely to change into &lt;em&gt;implementations&lt;/em&gt; (&lt;em&gt;i.e. concrete classes&lt;/em&gt;) and build &lt;em&gt;interfaces&lt;/em&gt; around the parts that are unlikely to change (&lt;em&gt;e.g. abstract base classes&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot; rel=&quot;external nofollow&quot;&gt;Liskov substitution principle&lt;/a&gt;&lt;/strong&gt;. Every implementation of an interface needs to 100% comply the requirements of that interface. i.e. any algorithm that works on the interface, should continue to work for every implementation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_segregation_principle&quot; rel=&quot;external nofollow&quot;&gt;Interface segregation principle&lt;/a&gt;&lt;/strong&gt;. Keep interfaces as small as possible, in order to ensure that each part of the code &quot;knows about&quot; the least amount of the code-base as possible. i.e. avoid unnecessary dependencies. This is also just good advice in C++ where compile times suck if you don't follow this advice &lt;span&gt;&lt;img alt=&quot;:D&quot; data-emoticon=&quot;&quot; height=&quot;20&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/emoticons/biggrin.png&quot; data-pagespeed-lazy-srcset=&quot;https://www.gamedev.net/uploads/emoticons/biggrin@2x.png 2x&quot; title=&quot;:D&quot; width=&quot;20&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt; &lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle&quot; rel=&quot;external nofollow&quot;&gt;Dependency inversion principle&lt;/a&gt;&lt;/strong&gt;. Instead of having two concrete implementations communicate directly (and depend on each other), they can usually be decoupled by formalizing their communication interface as a third class that acts as an interface between them. This could be an abstract base class that defines the method calls used between them, or even just a &lt;a href=&quot;https://en.wikipedia.org/wiki/Plain_old_data&quot; rel=&quot;external nofollow&quot;&gt;POD&lt;/a&gt; struct that defines the data passed between them.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Not included in the SOLID acronym, but I would argue is just as important is the:&lt;br/&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot; rel=&quot;external nofollow&quot;&gt;Composite reuse principle&lt;/a&gt;&lt;/strong&gt;. Composition is &lt;em&gt;the right default™&lt;/em&gt;. Inheritance should be reserved for use when it's absolutely required.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This gives us SOLID-C(++) &lt;span&gt;&lt;img alt=&quot;:)&quot; data-emoticon=&quot;&quot; height=&quot;20&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/emoticons/smile.png&quot; data-pagespeed-lazy-srcset=&quot;https://www.gamedev.net/uploads/emoticons/smile@2x.png 2x&quot; title=&quot;:)&quot; width=&quot;20&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;From now on, I'll refer to these by their three letter acronyms -- SRP, OCP, LSP, ISP, DIP, CRP...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A few other notes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In OOD, &lt;em&gt;interfaces&lt;/em&gt; and &lt;em&gt;implementations&lt;/em&gt; are ideas that don't map to any specific OOP keywords. In C++, we often create interfaces with &lt;em&gt;abstract base classes&lt;/em&gt; and &lt;em&gt;virtual functions&lt;/em&gt;, and then &lt;em&gt;implementations &lt;/em&gt;inherit from those base classes... but that is just one specific way to achieve the idea of an interface. In C++, we can also use &lt;a href=&quot;https://en.cppreference.com/w/cpp/language/pimpl&quot; rel=&quot;external nofollow&quot;&gt;PIMPL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Opaque_pointer&quot; rel=&quot;external nofollow&quot;&gt;opaque pointers&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Duck_typing&quot; rel=&quot;external nofollow&quot;&gt;duck typing&lt;/a&gt;, typedefs, etc... You can create an OOD design and then implement it in C, where there aren't any OOP language keywords! So when I'm talking about &lt;em&gt;interfaces&lt;/em&gt; here, I'm not necessarily talking about &lt;em&gt;virtual &lt;/em&gt;functions -- I'm talking about the idea of &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_hiding&quot; rel=&quot;external nofollow&quot;&gt;implementation hiding&lt;/a&gt;. Interfaces &lt;em&gt;can&lt;/em&gt; be &lt;a href=&quot;https://en.wikipedia.org/wiki/Polymorphism_(computer_science)&quot; rel=&quot;external nofollow&quot;&gt;polymorphic&lt;/a&gt;, but most often they are not! A good use for polymorphism is rare, but interfaces are fundamental to all software.
&lt;ul&gt;&lt;li&gt;As hinted above, if you create a POD structure that simply stores some data to be passed from one class to another, then that struct is acting as an &lt;em&gt;interface &lt;/em&gt;- it is a formal &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_definition_language&quot; rel=&quot;external nofollow&quot;&gt;data definition&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Even if you just make a single class in isolation with a &lt;em&gt;public&lt;/em&gt; and a &lt;em&gt;private&lt;/em&gt; section, everything in the public section is the &lt;em&gt;interface&lt;/em&gt; and everything in the private section is the &lt;em&gt;implementation.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Inheritance actually has (at least) two types -- interface inheritance, and implementation inheritance.
&lt;ul&gt;&lt;li&gt;In C++, interface inheritance includes abstract-base-classes with pure-virtual functions, PIMPL, conditional typedefs. In Java, interface inheritance is expressed with the &lt;em&gt;implements&lt;/em&gt; keyword.&lt;/li&gt;
&lt;li&gt;In C++, implementation inheritance occurs any time a base classes contains anything besides pure-virtual functions. In Java, implementation inheritance is expressed with the &lt;em&gt;extends&lt;/em&gt; keyword.&lt;/li&gt;
&lt;li&gt;OOD has a lot to say about interface-inheritance, but implementation-inheritance should usually be treated as a bit of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot; rel=&quot;external nofollow&quot;&gt;code smell&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And lastly I should probably give a few examples of terrible OOP education and how it results in bad code in the wild (and OOP's bad reputation).&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;When you were learning about hierarchies / inheritance, you probably had a task something like:&lt;br/&gt;&lt;strong&gt;&lt;em&gt;Let's say you have a university app that contains a directory of Students and Staff. We can make a Person base class, and then a Student class and a Staff class that inherit from Person!&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;Nope, nope nope. Let me stop you there. The unspoken sub-text beneath the LSP is that &lt;em&gt;class-hierarchies&lt;/em&gt; and &lt;em&gt;the algorithms that operate on them &lt;/em&gt;are symbiotic. They're two halves of a whole program. OOP is an extension of procedural programming, and it's still mainly about those procedures. If we don't know what kinds of algorithms are going to be operating on &lt;em&gt;Students &lt;/em&gt;and &lt;em&gt;Staff&lt;/em&gt; (&lt;em&gt;and which algorithms would be simplified by polymorphism&lt;/em&gt;) then it's downright irresponsible to dive in and start designing class hierarchies. You have to know the algorithms &lt;em&gt;and&lt;/em&gt; the data first.&lt;/li&gt;
&lt;li&gt;When you were learning about hierarchies / inheritance, you probably had a task something like:&lt;br/&gt;&lt;strong&gt;&lt;em&gt;Let's say you have a shape class. We could also have squares and rectangles as sub-classes. Should we have square &lt;/em&gt;is-a&lt;em&gt; rectangle, or &lt;/em&gt;&lt;em&gt;rectangle &lt;/em&gt;is-a&lt;em&gt; square?&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;This is actually a good one to demonstrate the difference between implementation-inheritance and interface-inheritance.
&lt;ul&gt;&lt;li&gt;If you're using the implementation-inheritance mindset, then the LSP isn't on your mind at all and you're only thinking practically about trying to reuse code using inheritance as a tool.&lt;br/&gt;From this perspective, the following makes perfect sense:&lt;br/&gt;struct Square { int width; }; struct Rectangle : Square { int height; };&lt;br/&gt;A square just has width, while rectangle has a width + height, so extending the square with a height member gives us a rectangle!
&lt;ul&gt;&lt;li&gt;As you might have guessed, OOD says that doing this is (&lt;em&gt;probably&lt;/em&gt;) wrong. I say &lt;em&gt;probably&lt;/em&gt; because you can argue over the implied specifications of the interface here... but whatever.&lt;br/&gt;A square always has the same height as its width, so from the square's interface, it's completely valid to assume that its area is &quot;width * width&quot;.&lt;br/&gt;By inheriting from square, the rectangle class (according to the LSP) &lt;strong&gt;must &lt;/strong&gt;obey the rules of square's interface. Any algorithm that works correctly with a square, must also work correctly with a rectangle.&lt;/li&gt;
&lt;li&gt;Take the following algorithm: std::vector&amp;lt;Square*&amp;gt; shapes; int area = 0; for(auto s : shapes) area += s-&amp;gt;width * s-&amp;gt;width;&lt;br/&gt;This will work correctly for squares (producing the sum of their areas), but will not work for rectangles.&lt;br/&gt;Therefore, Rectangle violates the LSP rule.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If you're using the interface-inheritance mindset, then neither Square or Rectangle will inherit from each other. The interface for a square and rectangle are actually different, and one is not a super-set of the other.&lt;/li&gt;
&lt;li&gt;So OOD actually discourages the use of implementation-inheritance. As mentioned before, if you want to re-use code, OOD says that composition is the right way to go!
&lt;ul&gt;&lt;li&gt;For what it's worth though, the &lt;em&gt;correct&lt;/em&gt; version of the above (bad) implementation-inheritance hierarchy code in C++ is:&lt;br/&gt;struct Shape { virtual int area() const = 0; };&lt;br/&gt;struct Square : public virtual Shape { virtual int area() const { return width * width; }; int width; };&lt;br/&gt;struct Rectangle : private Square, public virtual Shape { virtual int area() const { return width * height; }; int height; };
&lt;ul&gt;&lt;li&gt;&quot;public virtual&quot; means &quot;implements&quot; in Java. For use when implementing an interface.&lt;/li&gt;
&lt;li&gt;&quot;private&quot; allows you to extend a base class without also inheriting its interface -- in this case, Rectangle is-&lt;strong&gt;not&lt;/strong&gt;-a Square, even though it's inherited from it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I don't recommend writing this kind of code, but if you do like to use implementation-inheritance, this is the way that you're supposed to be doing it!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;TL;DR - your OOP class told you what inheritance was. Your missing OOD class should have told you not to use it 99% of the time!&lt;/p&gt;

&lt;p&gt;With all that background out of the way, let's jump into Aras' starting point -- the so called &quot;typical OOP&quot; starting point.&lt;br/&gt;Actually, one last gripe -- Aras calls this code &quot;traditional OOP&quot;, which I object to. This code may be typical of OOP in the wild, but as above, it breaks all sorts of core OO rules, so it should not all all be considered traditional.&lt;/p&gt;
&lt;p&gt;I'm going to start from the earliest commit before he starts fixing the design towards &quot;ECS&quot;: &lt;a href=&quot;https://github.com/aras-p/dod-playground/blob/3529f232510c95f53112bbfff87df6bbc6aa1fae/source/game.cpp&quot; rel=&quot;external nofollow&quot;&gt;&quot;Make it work on Windows again&quot; 3529f232510c95f53112bbfff87df6bbc6aa1fae&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;com&quot;&gt;// -------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// super simple &quot;component system&quot;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typedef&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span&gt;vector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typedef&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span&gt;vector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObjectVector&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Component base class. Knows about the parent game object, and has some virtual methods.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;~&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Start&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;SetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;HasGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Game object class. Has an array of components.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;~&lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// game object owns the components; destroy them when deleting the game object&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// get a component of type T, or null if it does not exist on this game object&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;dynamic_cast&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&amp;gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// add a new component to this game object&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span&gt;Component&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        assert&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;HasGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;());&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;SetGameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(*&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Start&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;Start&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    std&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;string m_Name&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m_Components&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// The &quot;scene&quot;: array of game objects.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObjectVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Finds all components of given type in the whole scene&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;FindAllComponentsOfType&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span&gt;ComponentVector&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; res&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            res&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; res&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Find one component of given type in the scene (returns first found one)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;FindOfType&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;c &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; c&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, 100 lines of code is a lot to dump at once, so let's work through what this is... Another bit of background is required -- it was popular for games in the 90's to use inheritance to solve all their code re-use problems. You'd have an Entity, extended by Character, extended by Player and Monster, etc... This is implementation-inheritance, as described earlier (&lt;em&gt;a code smell&lt;/em&gt;), and it seems like a good idea to begin with, but eventually results in a very inflexible code-base. Hence that OOD has the &quot;composition over inheritance&quot; rule, above. So, in the 2000's the &quot;composition over inheritance&quot; rule became popular, and gamedevs started writing this kind of code instead.&lt;/p&gt;
&lt;p&gt;What does this code do? Well, nothing good &lt;span&gt;&lt;img alt=&quot;:D&quot; data-emoticon=&quot;&quot; height=&quot;20&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/emoticons/biggrin.png&quot; data-pagespeed-lazy-srcset=&quot;https://www.gamedev.net/uploads/emoticons/biggrin@2x.png 2x&quot; title=&quot;:D&quot; width=&quot;20&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To put it in simple terms, &lt;strong&gt;this code is re-implementing the existing language feature of composition&lt;/strong&gt; as a runtime library instead of a language feature. You can think of it as if this code is actually constructing a new meta-language on top of C++, and a VM to run that meta-language on. In Aras' demo game, this code is not required (&lt;em&gt;we'll soon delete all of it!&lt;/em&gt;) and only serves to reduce the game's performance by about 10x.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;What does it actually do though? This is an &quot;&lt;strong&gt;E&lt;/strong&gt;ntity/&lt;strong&gt;C&lt;/strong&gt;omponent&quot; framework (&lt;em&gt;sometimes confusingly called an &quot;&lt;strong&gt;E&lt;/strong&gt;ntity/&lt;strong&gt;C&lt;/strong&gt;omponent system&quot;&lt;/em&gt;) -- but completely different to an &quot;&lt;strong&gt;E&lt;/strong&gt;ntity &lt;strong&gt;C&lt;/strong&gt;omponent &lt;strong&gt;S&lt;/strong&gt;ystem&quot; framework (&lt;em&gt;which are never called &quot;&lt;strong&gt;E&lt;/strong&gt;ntity &lt;strong&gt;C&lt;/strong&gt;omponent &lt;strong&gt;S&lt;/strong&gt;ystem systems&quot; for obvious reasons&lt;/em&gt;). It formalizes several &quot;EC&quot; rules:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;the game will be built out of featureless &quot;Entities&quot; (&lt;em&gt;called&lt;/em&gt; GameObjects &lt;em&gt;in this example&lt;/em&gt;), which themselves are composed out of &quot;Components&quot;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;GameObjects fulfill the &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_locator_pattern&quot; rel=&quot;external nofollow&quot;&gt;service locator pattern&lt;/a&gt; -  they can be queried for a child component by type. &lt;/li&gt;
&lt;li&gt;Components know which GameObject they belong to - they can locate sibling componets by querying their parent GameObject.&lt;/li&gt;
&lt;li&gt;Composition may only be one level deep (&lt;em&gt;Components may not own child components, GameObjects may not own child GameObjects&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;A GameObject may only have one component of each type (&lt;em&gt;some frameworks enforced this, others did not&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Every component (probably) changes over time in some unspecified way - so the interface includes &quot;virtual void Update&quot;.&lt;/li&gt;
&lt;li&gt;GameObjects belong to a scene, which can perform queries over all GameObjects (and thus also over all Components).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This kind of framework was very popular in the 2000's, and though restrictive, proved flexible enough to power countless numbers of games from that time and still today.&lt;/p&gt;
&lt;p&gt;However, it's not required. Your programming language already contains support for composition as a language feature - you don't need a bloated framework to access it... Why do these frameworks exist then? Well to be fair, they enable &lt;em&gt;dynamic, runtime&lt;/em&gt; composition. Instead of GameObject types being hard-coded, they can be loaded from data files. This is great to allow game/level designers to create their own kinds of objects... However, in most game projects, you have a very small number of designers on a project and a literal army of programmers, so I would argue it's not a key feature. Worse than that though, it's not even the only way that you could implement runtime composition! For example, Unity is based on C# as a &quot;scripting language&quot;, and many other games use alternatives such as Lua -- your designer-friendly tool can generate C#/Lua code to define new game-objects, without the need for this kind of bloated framework! We'll re-add this &quot;feature&quot; in a later follow-up post, in a way that doesn't cost us a 10x performance overhead...&lt;/p&gt;
&lt;p&gt;Let's evaluate this code according to OOD:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;GameObject::GetComponent uses dynamic_cast. Most people will tell you that dynamic_cast is a code smell - a strong hint that something is wrong. I would say that it indicates that you have an &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot; rel=&quot;external nofollow&quot;&gt;LSP&lt;/a&gt; violation on your hands -- you have some algorithm that's operating on the base interface, but it demands to know about different implementation details. That's the specific reason that it smells.&lt;/li&gt;
&lt;li&gt;GameObject is kind of ok if you imagine that it's fulfilling the service locator pattern.... but going beyond OOD critique for a moment, this pattern creates implicit links between parts of the project, and I feel (&lt;em&gt;without a wikipedia link to back me up with comp-sci knowledge&lt;/em&gt;) that implicit communication channels are an &lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern&quot; rel=&quot;external nofollow&quot;&gt;anti-pattern&lt;/a&gt; and explicit communication channels should be preferred. This same argument applies to bloated &quot;event frameworks&quot; that sometimes appear in games...&lt;/li&gt;
&lt;li&gt;I would argue that Component is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; rel=&quot;external nofollow&quot;&gt;SRP&lt;/a&gt; violation because its interface (&lt;em&gt;virtual void Update(time)&lt;/em&gt;) is too broad. The use of &quot;virtual void Update&quot; is pervasive within game development, but I'd also say that it is an anti-pattern. Good software should allow you to easily reason about the flow of control, and the flow of data. Putting &lt;em&gt;every single bit of gameplay code&lt;/em&gt; behind a &quot;virtual void Update&quot; call completely and utterly obfuscates both the flow of control and the flow of data. IMHO, invisible &lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&quot; rel=&quot;external nofollow&quot;&gt;side effects&lt;/a&gt;, a.k.a. &lt;a href=&quot;https://en.wikipedia.org/wiki/Action_at_a_distance_(computer_programming)&quot; rel=&quot;external nofollow&quot;&gt;action at a distance&lt;/a&gt;, is the most common source of bugs, and &quot;virtual void Update&quot; ensures that almost everything is an invisible side-effect.&lt;/li&gt;
&lt;li&gt;Even though the goal of the Component class is to enable composition, it's doing so via inheritance, which is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot; rel=&quot;external nofollow&quot;&gt;CRP&lt;/a&gt; violation.&lt;/li&gt;
&lt;li&gt;The one good part is that the example game code is bending over backwards to fulfill the SRP and ISP rules -- it's split into a large number of simple components with very small responsibilities, which is great for code re-use.&lt;br/&gt;However, it's not great as DIP -- many of the components do have direct knowledge of each other.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So, all of the code that I've posted above, can actually just be deleted. That whole framework. Delete GameObject (aka Entity in other frameworks), delete Component, delete FindOfType. It's all part of a useless VM that's breaking OOD rules and making our game terribly slow.&lt;/p&gt;

&lt;p&gt;If we delete our composition framework, and don't have a Component base class, how will our GameObjects manage to use composition and be built out of Components. As hinted in the heading, instead of writing that bloated VM and then writing our GameObjects on top of it in our weird meta-language, let's just write them in C++ because we're #*@!ing game programmers and that's literally our job.&lt;/p&gt;
&lt;p&gt;Here's the commit where the Entity/Component framework is deleted: &lt;a href=&quot;https://github.com/hodgman/dod-playground/commit/f42290d0217d700dea2ed002f2f3b1dc45e8c27c&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/hodgman/dod-playground/commit/f42290d0217d700dea2ed002f2f3b1dc45e8c27c&lt;/a&gt;&lt;br/&gt;Here's the original version of the source code: &lt;a href=&quot;https://github.com/hodgman/dod-playground/blob/3529f232510c95f53112bbfff87df6bbc6aa1fae/source/game.cpp&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/hodgman/dod-playground/blob/3529f232510c95f53112bbfff87df6bbc6aa1fae/source/game.cpp&lt;/a&gt;&lt;br/&gt;Here's the modified version of the source code: &lt;a href=&quot;https://github.com/hodgman/dod-playground/blob/f42290d0217d700dea2ed002f2f3b1dc45e8c27c/source/game.cpp&quot; rel=&quot;external nofollow&quot;&gt;https://github.com/hodgman/dod-playground/blob/f42290d0217d700dea2ed002f2f3b1dc45e8c27c/source/game.cpp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The gist of the changes is:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Removing &quot;: public Component&quot; from each component type.&lt;/li&gt;
&lt;li&gt;I add a constructor to each component type.
&lt;ul&gt;&lt;li&gt;OOD is about encapsulating the state of a class, but since these classes are so small/simple, there's not much to hide -- the interface is a data description. However, one of the main reasons that encapsulation is a core pillar is that it allows us to ensure that &lt;a href=&quot;https://en.wikipedia.org/wiki/Class_invariant&quot; rel=&quot;external nofollow&quot;&gt;class invariants&lt;/a&gt; are always true... or in the event that an invariant is violated, you hopefully only need to inspect the encapsulated implementation code in order to find your bug. In this example code, it's worth us adding the constructors to enforce a simple invariant -- all values must be initialized.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I rename the overly generic &quot;Update&quot; methods to reflect what they actually do -- UpdatePosition for MoveComponent and ResolveCollisions for AvoidComponent.&lt;/li&gt;
&lt;li&gt;I remove the three hard-coded blocks of code that resemble a template/prefab -- code that creates a GameObject containing specific Component types, and replace it with three C++ classes.&lt;/li&gt;
&lt;li&gt;Fix the &quot;virtual void Update&quot; anti-pattern.&lt;/li&gt;
&lt;li&gt;Instead of components finding each other via the service locator pattern, the game objects explicitly link them together during construction.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;The objects&lt;/h2&gt;
&lt;p&gt;So, instead of this &quot;VM&quot; code:&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// create regular objects that move&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; kObjectCount&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;GameObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// position it within world bounds&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;PositionComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;PositionComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// setup a sprite for it (random sprite index from first 5), and initial white color&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;SpriteComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; sprite &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;SpriteComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;colorR &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;colorG &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;colorB &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;spriteIndex &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; rand&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;scale &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// make it move&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;MoveComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; move &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;MoveComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.7f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// make it avoid the bubble things&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;AvoidComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; avoid &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;AvoidComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;avoid&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

        s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We now have this normal C++ code:&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;kwd&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;RegularObject&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;PositionComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;SpriteComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;MoveComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; move&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span&gt;AvoidComponent&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; avoid&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        
    &lt;/span&gt;&lt;span&gt;RegularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span&gt;WorldBoundsComponent&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; move&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.7f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// position it within world bounds&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                      &lt;/span&gt;&lt;span&gt;RandomFloat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMin&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;yMax&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// setup a sprite for it (random sprite index from first 5), and initial white color&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; sprite&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         rand&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                         &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
  
&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// create regular objects that move&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;kObjectCount&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; i &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; kObjectCount&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;The algorithms&lt;/h2&gt;
&lt;p&gt;Now the other big change is in the algorithms. Remember at the start when I said that interfaces and algorithms were symbiotic, and both should impact the design of the other? Well, the &quot;&lt;em&gt;virtual void Update&lt;/em&gt;&quot; anti-pattern is also an enemy here. The original code has a main loop algorithm that consists of just:&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// go through all objects&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_Objects&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Update all their components&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You might argue that this is nice and simple, but IMHO it's so, so bad. It's completely obfuscating both the &lt;em&gt;flow of control&lt;/em&gt; and the &lt;em&gt;flow of data&lt;/em&gt; within the game. If we want to be able to understand our software, if we want to be able to maintain it, if we want to be able to bring on new staff, if we want to be able to optimise it, or if we want to be able to make it run efficiently on multiple CPU cores, we need to be able to understand both the flow of control and the flow of data. So &quot;virtual void Update&quot; can die in a fire.&lt;/p&gt;
&lt;p&gt;Instead, we end up with a more explicit main loop that makes the flow of control much more easy to reason about (&lt;em&gt;the flow of data is still obfuscated here, we'll get around to fixing that in later commits&lt;/em&gt;)&lt;/p&gt;
&lt;pre class=&quot;ipsCode prettyprint lang-c prettyprinted&quot;&gt;
&lt;span class=&quot;pln&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Update all positions&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span&gt;UpdatePosition&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;avoidThis&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span&gt;UpdatePosition&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        
        &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Resolve all collisions&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;regularObject&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
                &lt;/span&gt;&lt;span&gt;ResolveCollisions&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;deltaTime&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; go&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; s_game&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;avoidThis&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The downside of this style is that for &lt;em&gt;every single new object&lt;/em&gt; &lt;em&gt;type&lt;/em&gt; that we add to the game, we have to add a few lines to our main loop. I'll address / solve this in a future blog in this series.&lt;/p&gt;

&lt;p&gt;There's still a lot of outstanding OOD violations, some bad design choices, and lots of optimization opportunities remaining, but I'll get to them with the next blog in this series. As it stands at this point though, the &quot;fixed OOD&quot; version either almost matches or beats the final &quot;ECS&quot; code from the end of the presentation... And all we did was take the bad faux-OOP code and make it actually obey the rules of OOP (and delete 100 lines of code)!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;dod-chart1.png.0c63b0194df0f816028ace719b898cd3.png&quot; class=&quot;ipsImage ipsImage_thumbnailed&quot; data-fileid=&quot;48145&quot; data-pagespeed-lazy-src=&quot;https://www.gamedev.net/uploads/monthly_2018_10/dod-chart1.png.0c63b0194df0f816028ace719b898cd3.png&quot; src=&quot;https://www.gamedev.net/pagespeed_static/1.JiBnMqyl6S.gif&quot; onload=&quot;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot; onerror=&quot;this.onerror=null;pagespeed.lazyLoadImages.loadIfVisibleAndMaybeBeacon(this);&quot;/&gt;&lt;/p&gt;

&lt;p&gt;There's much more ground that I'd like to cover here, including solving the remaining OOD issues, immutable objects (&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; rel=&quot;external nofollow&quot;&gt;functional style programming&lt;/a&gt;) and the benefits it can bring to reasoning about data flows, message passing, applying some DOD reasoning to our OOD code, applying some relational wisdom to our OOD code, deleting those &quot;entity&quot; classes that we ended up with and having purely components-only, different styles of linking components together (pointers vs handles), real world component containers, catching up to the ECS version with more optimization, and then further optimization that wasn't also present in Aras' talk (&lt;em&gt;such as threading / SIMD&lt;/em&gt;). No promises on the order that I'll get to these, or if, or when...&lt;/p&gt;

</description>
<pubDate>Thu, 18 Oct 2018 17:26:06 +0000</pubDate>
<dc:creator>starbugs</dc:creator>
<og:image>https://www.gamedev.net/uploads/monthly_2018_06/1057075231_banner_22_racing_series_video_game_real_time_strategy_racing-21.jpg.778e08f6121d36719d78a99f52ad080e.jpg</og:image>
<og:title>OOP is dead, long live OOP</og:title>
<og:type>object</og:type>
<og:url>https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</og:url>
<og:description>edit: Seeing this has been linked outside of game-development circles: ECS (this wikipedia page is garbage, btw -- it conflates EC-frameworks and ECS-frameworks, which arent the same...) is a faux-pattern circulated within game-dev communities, which is basically a version of the relational model...</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gamedev.net/blogs/entry/2265481-oop-is-dead-long-live-oop/</dc:identifier>
</item>
<item>
<title>Encrypted SNI Comes to Firefox Nightly</title>
<link>https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</link>
<guid isPermaLink="true" >https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</guid>
<description>&lt;p&gt;TL;DR: Firefox Nightly now supports encrypting the &lt;a href=&quot;https://tools.ietf.org/rfcmarkup?doc=6066#section-3&quot;&gt;TLS Server Name Indication (SNI)&lt;/a&gt; extension, which helps prevent attackers on your network from learning your browsing history. You can enable encrypted SNI today and it will automatically work with any site that supports it. Currently, that means any site hosted by &lt;a href=&quot;https://blog.cloudflare.com/encrypt-that-sni-firefox-edition/&quot;&gt;Cloudflare&lt;/a&gt;, but we’re hoping other providers will add ESNI support soon.&lt;/p&gt;
&lt;h3&gt;Concealing Your Browsing History&lt;/h3&gt;
&lt;p&gt;Although an increasing fraction of Web traffic is &lt;a href=&quot;https://letsencrypt.org/stats/#percent-pageloads&quot;&gt;encrypted with HTTPS&lt;/a&gt;, that encryption isn’t enough to prevent network attackers from learning which sites you are going to. It’s true that HTTPS conceals the exact page you’re going to, but there are a number of ways in which the site’s identity leaks. This can itself be sensitive information: do you want the person at the coffee shop next to you to know you’re visiting cancer.org?&lt;/p&gt;
&lt;p&gt;There are four main ways in which browsing history information leaks to the network: the TLS certificate message,  DNS name resolution, the IP address of the server, and the TLS Server Name Indication extension. Fortunately, we’ve made good progress shutting down the first two of these: The new TLS 1.3 standard encrypts the server certificate by default and over the past several months, we’ve been &lt;a href=&quot;https://blog.mozilla.org/futurereleases/2018/09/13/dns-over-https-doh-testing-on-beta/&quot;&gt;exploring&lt;/a&gt; the use of DNS over HTTPS to protect DNS traffic. This is looking good and we are hoping to roll it out to all Firefox users over the coming months. The IP address remains a problem, but in many cases, multiple sites share the same IP address, so that leaves SNI.&lt;/p&gt;
&lt;h3&gt;Why do we need SNI anyway and why didn’t this get fixed before?&lt;/h3&gt;
&lt;p&gt;Ironically, the reason you need an SNI field is &lt;em&gt;because&lt;/em&gt; multiple servers share the same IP address. When you connect to the server, it needs to give you the right certificate to prove that you’re connecting to a legitimate server and not an attacker. However, if there is more than one server on the same IP address, then which certificate should it choose? The SNI field tells the server which host name you are trying to connect to, allowing it to choose the right certificate. In other words, SNI helps make large-scale TLS hosting work.&lt;/p&gt;
&lt;p&gt;We’ve known that SNI was a privacy problem from the beginning of TLS 1.3. The basic idea is easy: encrypt the SNI field (hence “encrypted SNI” or ESNI). Unfortunately every design we tried had drawbacks. The technical details are kind of complicated, but the basic story isn’t: every design we had for ESNI involved some sort of performance tradeoff and so it looked like only sites which were “sensitive” (i.e., you might want to conceal you went there) would be willing to enable ESNI. As you can imagine, that defeats the point, because if only sensitive sites use ESNI, then just using ESNI is itself a signal that your traffic demands a closer look. So, despite a lot of enthusiasm, we eventually decided to publish TLS 1.3 without ESNI.&lt;/p&gt;
&lt;p&gt;However, at the beginning of this year, we realized that there was actually a pretty good 80-20 solution: big Content Distribution Networks (CDNs) host a lot of sites all on the same machines. If they’re willing to convert all their customers to ESNI at once, then suddenly ESNI no longer reveals  a useful signal because the attacker can see what CDN you are going to anyway. This realization broke things open and enabled a &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-esni-01&quot;&gt;design&lt;/a&gt; for how to make ESNI work in TLS 1.3 (see Alessandro Ghedini’s &lt;a href=&quot;https://blog.cloudflare.com/encrypted-sni/&quot;&gt;writeup&lt;/a&gt; of the technical details.) Of course, this only works if you can mass-configure all the sites on a given set of servers, but that’s a pretty common configuration.&lt;/p&gt;
&lt;h3&gt;How do I get it?&lt;/h3&gt;
&lt;p&gt;This is brand-new technology and Firefox is the first browser to get it. At the moment we’re not ready to turn it on for all Firefox users. However, Nightly users can try out this enhancing feature now by performing the following steps: First, you need to make sure you have DNS over HTTPS enabled (see: &lt;a href=&quot;https://blog.nightly.mozilla.org/2018/06/01/improving-dns-privacy-in-firefox/&quot;&gt;https://blog.nightly.mozilla.org/2018/06/01/improving-dns-privacy-in-firefox/&lt;/a&gt;). Once you’ve done that, you also need to set the “network.security.esni.enabled” preference in about:config to “true”). This should automatically enable ESNI for any site that supports it. Right now, that’s just Cloudflare, which has enabled ESNI for all its customers, but we’re hoping that other providers will follow them. You can go to: &lt;a href=&quot;https://www.cloudflare.com/ssl/encrypted-sni/&quot;&gt;https://www.cloudflare.com/ssl/encrypted-sni/&lt;/a&gt; to check for yourself that it’s working.&lt;/p&gt;
&lt;h3&gt;What’s Next?&lt;/h3&gt;
&lt;p&gt;During the development of TLS 1.3 we found a number of problems where network devices (typically firewalls and the like) would break when you tried to use TLS 1.3. We’ve been pretty careful about the design, but it’s possible that we’ll see similar problems with ESNI. In order to test this, we’ll be running a set of experiments over the next few months and measuring for breakage. We’d also love to hear from you: if you enable ESNI and it works or causes any problems, &lt;a href=&quot;https://bugzilla.mozilla.org/enter_bug.cgi?format=guided#h=bugForm%7CCore%7CNetworking&quot;&gt;please let us know.&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 18 Oct 2018 17:14:51 +0000</pubDate>
<dc:creator>okket</dc:creator>
<og:title>Encrypted SNI Comes to Firefox Nightly</og:title>
<og:url>https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</og:url>
<og:description>TL;DR: Firefox Nightly now supports encrypting the TLS Server Name Indication (SNI) extension, which helps prevent attackers on your network from learning your browsing history. ...</og:description>
<og:image>https://blog.mozilla.org/security/wp-content/themes/OneMozilla/img/mozilla-wordmark.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/</dc:identifier>
</item>
</channel>
</rss>