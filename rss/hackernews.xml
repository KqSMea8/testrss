<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Learn to sell</title>
<link>http://blairreeves.me/2017/12/06/learn-to-sell/</link>
<guid isPermaLink="true" >http://blairreeves.me/2017/12/06/learn-to-sell/</guid>
<description>&lt;p&gt;&lt;span&gt;From time to time, I get asked for career advice. Sometimes it’s folks looking to get into product management, and others just curious about working in technology generally. I’ve thought a lot about what type of advice I can give that would actually be useful.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A big problem with an awful lot of career advice you hear, particularly in tech circles, is that it’s hopelessly tainted by&lt;/span&gt; &lt;a href=&quot;https://xkcd.com/1827/&quot;&gt;&lt;span&gt;survivorship bias&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Almost all life/career advice from famous rich people is usually useless for this very reason. Beyond that, it seems like the most popular advice you see is “learn to code.” I think this is a mistake, and not very useful for most people. Learning to write code and develop web applications has definitely been a positive in my life, but it’s probably only been marginally advantageous career-wise. I’d certainly encourage anyone to learn, but mostly for personal enrichment, not career advancement.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Instead, here’s my pitch: go do a stint in Sales. If I were early in my career and looking to boost my long-term trajectory, I think is where I would try to start. Even in mid-career, where I am now, it’s something I think about often. More tech professionals should consider it. Hear me out.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Sales really, really matters&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;When you listen to the tech industry talk about itself (which it does constantly), it would be easy to think that everyone is a developer; or that developers/engineers are the most important people around, and the only ones who really matter. This is really dumb.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In&lt;/span&gt; &lt;a href=&quot;http://www.buildingforbusiness.com&quot;&gt;&lt;strong&gt;our book on enterprise Product Management&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;, I included this quote from Philip Kotler:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;“&lt;/span&gt;&lt;em&gt;&lt;span&gt;The sales department isn’t the whole company, but the whole company better be the sales department.&lt;/span&gt;&lt;/em&gt;&lt;span&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;I find it remarkable how little the tech world talks about software sales, given how central it is to everything we do. Sales is the whole reason we build anything; it’s how we assign value to what we do. If someone doesn’t trade some value in exchange for your product, then what you have isn’t really worth anything. It doesn’t matter how brilliant your software engineering is if no one buys it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There are certain swaths of the tech startup world that recoil from Sales. There’s a certain fantasy that exists of “products that sell themselves,” which don’t require a company to invest in either the personnel nor company orientation to serve customers. There’s a reason why non-startups don’t have this attitude: the companies that do never break out of the startup phase. Those companies that see Sales as a grubby and unpleasant chore, rather than what the whole company is about, generally don’t last long.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Fortunately, most healthy software companies see Sales as an absolutely core function, which is why pretty much every one is always hiring good salespeople. For those with a hunger to learn, this provides a terrific opportunity.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Sales gets a bad rap&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;On the flip side, software sales suffers from a reputation for growth-hackery, spammy tactics that we all hate. If you work in this field, your inbox is probably as full as mine is of irrelevant and annoying spam email from salespeople whose products you don’t care about. It’s a huge turnoff. Trust me – I get it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But after working with a lot of good enterprise salespeople (as well as some bad ones), one thing I’ve learned is that they&lt;/span&gt; &lt;em&gt;&lt;span&gt;also&lt;/span&gt;&lt;/em&gt; &lt;span&gt;dislike these kinds of “spray and pray” lead-generation tactics. Casting a wide net is simply part of the game, of course, but wasting your prospect’s time is bad selling. Every good sales professional knows this, which is why the best ones put in the time, effort and attention to detail to make their pitches – even the opening ones – as tailored and relevant as possible. That might only mean increasing their response rate from 2% to 3%, but that’s a big lift when you’re talking about warm enterprise software leads.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Good” sales practices are less widely appreciated because they don’t piss people off and so aren’t constantly discussed. Great salespeople, at every level, are able to contribute value to their company and are quickly recognized as such.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Sales experience is golden&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;No one is more connected with customers than the folks in Sales, and as such, they gain a great deal of political power. Customer feedback, after all, is worth its weight in gold. Outperforming salespeople are quickly recognized and tend to get a direct line to the most senior executives in the company (at least, in any functional firm). Everyone wants to make that year’s President’s Club.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Another major bonus to consider is that great salespeople have nearly bulletproof job security. The biggest cause of sales personnel attrition is leaving for another company that offers a more lucrative compensation plan. Salespeople&lt;/span&gt; &lt;em&gt;&lt;span&gt;who perform&lt;/span&gt;&lt;/em&gt; &lt;span&gt;are almost never fired, and among the last to be laid off (for obvious reasons). Of course, others leave because they just want a role that’s slower-paced, or simply aren’t good at customer relations (which is a good reason to get out of Sales).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;One downside to all that popularity is that good salespeople sometimes find it hard to transition to a different role, because everyone wants them to stay in Sales. This can be overcome, but the pressure is there.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The tradeoff for being such a valuable member of a company is that Sales is really hard work. Everyone knows that Sales is often a high pressure position (get those deals signed before end of quarter!), has a steep learning curve (gotta learn the product fast!) and requires travel. But the thing that scares off most people, I find, is the uncertainty being on a quota compensation plan.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;What I wish more people understood was that&lt;/span&gt; &lt;em&gt;&lt;span&gt;most&lt;/span&gt;&lt;/em&gt; &lt;span&gt;quota plans are actually less scary than I, too, used to think, and some can even be tailored for individuals (higher base comp versus commission, etc.). Good sales organizations understand that there are factors beyond any individual’s control, and don’t want to lose good employees; but nevertheless, you have to reward performance. If you’re a high-performer, quota compensation plans can be incredibly lucrative, which is a good enough reason as any to consider a Sales gig.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Those gigs come in all sorts of flavors, but the most common varieties are thus:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Entry level:&lt;/strong&gt; Lead Development Reps (LDRs). These are the folks doing the hard work of cold calling, sending tons of emails, doing prospect/company research and developing cold leads into warm ones. Typically you have a couple of LDRs assigned to one Account Executive, but often working with a team of others. Good LDRs usually get promoted to Account Executives.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mid level:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Account Executive – this is a fancy title for “seller” that is called an “executive” to puff prospects’ egos. Often, this person takes warm leads from their assigned LDRs and develops a relationship with a prospect to sell their given portfolio. They are the point person in navigating the account relationship towards a deal.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Solution Consultant (AKA “Sales Engineer”) – this person assists the Account Exec in doing product demos and working with the prospect’s technical team on finer points of implementation and strategy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Solution Architect – this role is more common in larger companies with multiple product portfolios. This person helps the Account Exec and the prospect design more complicated, cross-portfolio solutions that involve a lot of customization and negotiation over lots of different products&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;For an entry-level candidate, LDR experience can be a trial by fire, but one that gives that person a solid base of experience that they can use. It also tends to pay pretty well – certainly better than the first jobs I did right out of college. If I’d known then what I do now…&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;For my own part, I thought seriously about going into a seller position back when I was at IBM. A different role opened up first, though, so I took it instead, and that is part of what has led to my development as a Product Manager today. I like this role, and don’t have any plans to do anything different for now; but down the line, who knows? I, like many other PMs I know, am also attracted to sales engineering roles, because it allows us to keep one foot on the technical and strategic side while also working directly with customers, which is often fun.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Bottom line:&lt;/strong&gt; think about doing Sales, because that’s really where everything starts, and your results are more driven by personal performance than almost anywhere else in a company. Product, Marketing, Customer Success, even Engineering – all of these functions fundamentally derive from what Sales first makes happen, and your sales experience will almost always be considered immensely valuable in those roles down the road.&lt;/span&gt;&lt;/p&gt;


&lt;hr/&gt;&lt;center&gt;
&lt;/center&gt;
</description>
<pubDate>Fri, 08 Dec 2017 16:19:07 +0000</pubDate>
<dc:creator>ntang</dc:creator>
<og:type>article</og:type>
<og:title>Learn to sell - Blair Reeves</og:title>
<og:description>From time to time, I get asked for career advice. Sometimes it’s folks looking to get into product management, and others just curious about working in technology generally. I’ve thought a lot about what type of advice I can give that would actually be useful. A big problem with an awful lot of career advice … Continue reading &quot;Learn to sell&quot;</og:description>
<og:url>http://blairreeves.me/2017/12/06/learn-to-sell/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blairreeves.me/2017/12/06/learn-to-sell/</dc:identifier>
</item>
<item>
<title>Modern Front-end in Rails</title>
<link>https://evilmartians.com/chronicles/evil-front-part-1</link>
<guid isPermaLink="true" >https://evilmartians.com/chronicles/evil-front-part-1</guid>
<description>&lt;div class=&quot;post__intro&quot;&gt;
&lt;p&gt;An opinionated guide to modern, modular, component-based approach to handling your presentation logic in Rails that does not depend on any front-end framework. Follow our three-part tutorial to learn the bare minimum of up-to-date front-end techniques by example and finally make sense of it all.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;heres-to-confused-ones&quot;&gt;Here’s to confused ones&lt;/h2&gt;
&lt;p&gt;Being a fresh Rails full-stack developer out in the wild is a confusing endeavor nowadays. A “classic Rails” way to handle front-end with Asset Pipeline, Sprockets, CoffeeScript and Sass looks outdated in 2017. A lot of choices made back in the times of Rails 3.1 do not live up to modern expectations. Sticking with the “old way” means passing on everything that happened in the front-end community over the past half decade: the rise of &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; as a JavaScript package manager to rule them all, the emergence of ES6 as a go-to JS syntax, the winning streak of &lt;a href=&quot;https://babeljs.io/&quot;&gt;transpilers&lt;/a&gt; and &lt;a href=&quot;https://stateofjs.com/2016/buildtools/&quot;&gt;build tools&lt;/a&gt;, the &lt;a href=&quot;https://twitter.com/codeinarocket/status/914851470599745536&quot;&gt;ever-growing&lt;/a&gt; embrace of &lt;a href=&quot;http://postcss.org/&quot;&gt;PostCSS&lt;/a&gt; as an alternative to CSS pre-processors. Not to mention the astounding success of front-end frameworks like React and Vue that change the very way we think about front-end code: &lt;em&gt;components&lt;/em&gt; instead of “pages”.&lt;/p&gt;
&lt;p&gt;Trying to cram all that complexity in one developer’s head (especially for someone who is just starting out) results in a &lt;a href=&quot;https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4&quot;&gt;well-described&lt;/a&gt; cognitive fatigue.&lt;/p&gt;
&lt;p&gt;However, the feeling of being left behind the pack, the growing difficulty to talk shop with “front-end guys”, and the creeping anxiety about job prospects should not be your only reason to question an established workflow. Programmers are rational people, after all.&lt;/p&gt;
&lt;h2 id=&quot;whats-wrong-with-the-asset-pipeline&quot;&gt;What’s wrong with the Asset Pipeline?&lt;/h2&gt;
&lt;p&gt;Let’s not argue—the “old way” still works. You can still rely on a standard Rails front-end setup (and use CoffeeScript) to achieve results: your view templates, scripts, and styles will still be handled by Asset Pipeline: concatenated, minified, delivered. In production, where it all counts, they will still come in the form of two big unreadable (for humans, at least) files: one for scripts and one for styles.&lt;/p&gt;
&lt;p&gt;As developers, however, we usually care about&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;isolated, reusable, testable code that is easy to reason about;&lt;/li&gt;
&lt;li&gt;short “code change → visible result” cycle;&lt;/li&gt;
&lt;li&gt;straightforward dependency management; and&lt;/li&gt;
&lt;li&gt;well-maintained tools.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Sure, “classic” Rails gives our code &lt;em&gt;some structure&lt;/em&gt;: there are separate folders for view templates, javascripts, stylesheets and images. But as the front-end complexity grows, navigating them quickly becomes a cognitive drain.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we are not careful enough with “classic Rails full-stack way”, we end up with the global dumpster of all things CSS and JS, littered with dead code, in no time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Speed is another reason to consider a switch. The problem is &lt;a href=&quot;https://www.google.com/search?&amp;amp;q=rails%20sprockets%20is%20slow&quot;&gt;well documented&lt;/a&gt; and Heroku even has a dedicated &lt;a href=&quot;https://blog.heroku.com/speeding-up-sprockets&quot;&gt;guide&lt;/a&gt; about optimizing Asset Pipeline performance, admitting that handling assets is the &lt;em&gt;slowest&lt;/em&gt; part of deploying a Rails app: “&lt;em&gt;On average, it’s over 20x slower than installing dependencies via &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;In development, changing a line of CSS and reloading a page to see the result may also take some time—and those seconds add up quick.&lt;/p&gt;
&lt;p&gt;What about dependencies? With Asset Pipeline, keeping them up-to-date becomes a major hassle. In order to add a JavaScript library to your project you can either load its code from CDN, cut and paste it into &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/assets&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/assets&lt;/code&gt;, or wait for someone to wrap it into a gem. Meanwhile, JavaScript community manages the same with a single command: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; or, most recently, &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add&lt;/code&gt; . Same goes for updating. Yarn gives us the convenience of Bundler—for JavaScript.&lt;/p&gt;
&lt;p&gt;Finally, Sprockets, the build tool behind Asset Pipeline, does not look well-maintained, and for quite some time:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Sprockets and Webpack GitHub pulse&quot; class=&quot;post-media__object&quot; width=&quot;983&quot; height=&quot;318&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/sprockets_webpack_pulse-b3991b5.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Sprockets have become a bit rusty over the last 5 years (left). Webpack’s pulse over the same time frame (right)&lt;/p&gt;
&lt;h2 id=&quot;wind-of-change&quot;&gt;Wind of change&lt;/h2&gt;
&lt;p&gt;In 2017, DHH and Rails community have finally started changing things around. Rails 5.1 &lt;a href=&quot;http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/&quot;&gt;brought&lt;/a&gt; us &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; integration with the &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;webpacker&lt;/a&gt; gem, &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; through &lt;a href=&quot;https://yarnpkg.com/en/&quot;&gt;Yarn&lt;/a&gt;, out-of-the-box support for Babel, React, Vue and PostCSS (and even for &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, if you are feeling adventurous).&lt;/p&gt;
&lt;p&gt;Asset Pipeline and CoffeeScript, however, still maintain their hold: starting a project with bare &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt; gives you the “good old way”. While searching the web for JS-related topics, you still have to transpile code examples in your head in order to make any sense of them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t fret, though, as your Rails app can adopt all the modern practices &lt;em&gt;now&lt;/em&gt;, and we are going to cover the basics together. All you need to start is some basic knowledge of Rails, JavaScript and CSS. We will also leverage latest Rails 5.1+ features to keep configuration and tooling to the minimum.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this series of tutorials, we will share some of the best practices developed at Evil Martians to build a modern sensible front-end.&lt;/p&gt;
&lt;h2 id=&quot;block-mentality&quot;&gt;Block mentality&lt;/h2&gt;
&lt;p&gt;React teaches us to &lt;a href=&quot;https://reactjs.org/docs/thinking-in-react.html&quot;&gt;think in components&lt;/a&gt;. Other modern front-end frameworks follow the lead. Modularity is the philosophy behind common CSS methodologies such as &lt;a href=&quot;http://getbem.com/introduction/&quot;&gt;BEM&lt;/a&gt;. The idea is simple: every logical part of your UI should be self-contained.&lt;/p&gt;
&lt;p&gt;Rails has a built-in way to break your views into logical parts—&lt;a href=&quot;http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials&quot;&gt;view partials&lt;/a&gt;. But if your partial relies on JavaScript, as any modern component probably does, you have to reach for it in a far-away folder, under &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets/javascripts&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What if we could bring everything together and have partials, their respective scripts and styles together—in the &lt;em&gt;same place&lt;/em&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That way we can rely on the smarts of modern build tools to only bundle the components we actually use. And whenever we want to change something—we know exactly where to look.&lt;/p&gt;
&lt;p&gt;The approach we are going to showcase does not rely on React, Vue or Elm architecture, and purposefully so: you are free to learn those tools on your own, but you don’t have to take a steep learning curve right now. You can use tools that already come with Rails to gradually adopt a modern front-end mindset.&lt;/p&gt;
&lt;h2 id=&quot;sass-vs-postcss&quot;&gt;Sass vs. PostCSS&lt;/h2&gt;
&lt;p&gt;Rails loves Sass. We, however, tend to stick to PostCSS. First of all, it is &lt;a href=&quot;https://github.com/postcss/benchmark&quot;&gt;36.4 times faster&lt;/a&gt; than the built-in Ruby Sass that handles CSS processing in Rails. It is written in 100% pure JavaScript. It is easily extendable and customisable with &lt;a href=&quot;https://www.postcss.parts/&quot;&gt;numerous plugins&lt;/a&gt;. One of them, &lt;a href=&quot;http://cssnext.io/features/&quot;&gt;cssnext&lt;/a&gt;, comes out of the box and generates polyfills for features that are not supported by browsers yet, but only as long as it is necessary. And you can still use PostCSS on top of your favorite pre-processor—if you ever find a reason for that.&lt;/p&gt;
&lt;h2 id=&quot;what-are-we-building&quot;&gt;What are we building?&lt;/h2&gt;
&lt;p&gt;It is finally time to get our hands dirty. To demonstrate a new approach to front-end, we will build a standard run-of-the-mill chat application with minimal authentication and ActionCable. Let’s call it &lt;code class=&quot;highlighter-rouge&quot;&gt;evil_chat&lt;/code&gt;. The example is not too complex, but is still sophisticated enough to make our experience “full-stack”.&lt;/p&gt;
&lt;p&gt;In our project, we are going to say goodbye to Assets Pipeline and default Rails generators that create a bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.coffee&lt;/code&gt; files. We are going to keep ERB as the default templating engine, leaving you to explore alternatives like Slim or Haml at your own pace.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;A new frontend folder in your app&quot; class=&quot;post-media__object&quot; width=&quot;812&quot; height=&quot;412&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/folder_structure-e863c9b.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;On the left, folder structure for Evil Front&lt;/p&gt;
&lt;p&gt;We are also going to revisit the folder structure. Everything will now happen in the new &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt; folder at the top level of our application. It will replace &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets&lt;/code&gt; completely.&lt;/p&gt;
&lt;p&gt;Don’t worry if it does not quite make sense yet, let’s take it step by step.&lt;/p&gt;
&lt;h2 id=&quot;how-do-i-start-my-project&quot;&gt;How do I start my project?&lt;/h2&gt;
&lt;p&gt;So, bare &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt; doesn’t cut it anymore. Here is your new magic line (we assume the app’s name is &lt;code class=&quot;highlighter-rouge&quot;&gt;evil_chat&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rails new evil_chat --skip-coffee --skip-sprockets --skip-turbolinks --webpack --database&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;postgresql  -T
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, we no longer need CoffeeScript or any of the &lt;a href=&quot;https://github.com/rails/sprockets-rails&quot;&gt;Sprockets-related&lt;/a&gt; functionality. &lt;code class=&quot;highlighter-rouge&quot;&gt;-T&lt;/code&gt; is optional, it skips creating test files, as testing is beyond the scope of this tutorial. We will use PostgreSQL as our default database with &lt;code class=&quot;highlighter-rouge&quot;&gt;--database=postgresql&lt;/code&gt;, as it will make our app easier to deploy on &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; once we’re done.&lt;/p&gt;
&lt;p&gt;The most important option is &lt;code class=&quot;highlighter-rouge&quot;&gt;--webpack&lt;/code&gt;. It tells Rails to use the &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;webpacker&lt;/a&gt; gem to bundle all our assets with Webpack. Now our project comes with a set of modern tools:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder that contains all our JS dependencies (it’s also added to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; so you don’t commit thousand of extra files in your repo by mistake)&lt;/li&gt;
&lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to declare all your dependencies, as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt; which means you can add packages with a (fancier) &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt; file configured for transforming ES6 into JavaScript code compliant with any browser that currently has more than &lt;a href=&quot;http://browserl.ist/?q=%3E+1%25&quot;&gt;1% of market share&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.postcssrc.yml&lt;/code&gt; already configured with &lt;a href=&quot;https://www.npmjs.com/package/postcss-smart-import&quot;&gt;postcss-smart-import&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/postcss-cssnext&quot;&gt;postcss-cssnext&lt;/a&gt; plugins that allow you to use all the features described in &lt;a href=&quot;http://cssnext.io/features/&quot;&gt;cssnext&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Some things are forgotten, though. Notably, a global config for &lt;a href=&quot;https://github.com/ai/browserslist&quot;&gt;browserslist&lt;/a&gt;, that tools like &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt; are going to need to correctly process your code to be cross-browser compliant. Gladly that one is easy to fix, just create a file in your project’s root:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch .browserslistrc
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;article class=&quot;post__note&quot;&gt;&lt;p&gt;Well, not really, but you can certainly get away with this much knowledge&lt;/p&gt;
&lt;/article&gt;&lt;p&gt;Now open this file and add a single line: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; 1%&lt;/code&gt;. That’s all there is to know about browser compatibility!&lt;/p&gt;
&lt;p&gt;Another thing we better do right from the start is to reconfigure the default behaviour of Rails generators. We don’t need them to put anything into &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets&lt;/code&gt;, as (spoiler!) we are going to remove this folder altogether in a next step. Open &lt;code class=&quot;highlighter-rouge&quot;&gt;application.rb&lt;/code&gt; and add these lines:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/application.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test_framework&lt;/span&gt;  &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stylesheets&lt;/span&gt;     &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;javascripts&lt;/span&gt;     &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;helper&lt;/span&gt;          &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;channel&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;assets: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Time to perform the desecration of Asset Pipeline. &lt;strong&gt;Remove&lt;/strong&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;But how do we replace it? Follow these steps:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--webpack&lt;/code&gt; option in our &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt; had created a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;app/javascript&lt;/code&gt;. &lt;strong&gt;Move it to the root of your project&lt;/strong&gt; and rename it to &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt; (or choose your own fancy name, but “frontend” makes most sense). Keep the insides intact: &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend/packs&lt;/code&gt; will serve as our &lt;a href=&quot;https://webpack.js.org/concepts/#entry&quot;&gt;Webpack “entry” point&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;application.html.erb&lt;/code&gt; and replace &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript_include_tag &quot;application&quot;&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript_pack_tag &quot;application&quot;&lt;/code&gt;. One word in a method name makes all the difference: &lt;code class=&quot;highlighter-rouge&quot;&gt;include_tag&lt;/code&gt; inserts a reference to an app-wide JavaScript file compiled by Sprockets (old way), &lt;code class=&quot;highlighter-rouge&quot;&gt;pack_tag&lt;/code&gt; brings in a Webpack &lt;em&gt;bundle&lt;/em&gt; generated from the entry point, which is our &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend/packs/application.js&lt;/code&gt; (new way). While at it, move the pack tag down from the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; to the very end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, right after the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;stylesheet_link_tag 'application', media: 'all'&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;stylesheet_pack_tag 'application'&lt;/code&gt;. We are going to use CSS on a per-component basis with the help of Webpack and ES6 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statement. That means all our styles will be handled by webpacker too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we need to let webpacker know where to look for files to bundle, as we have just renamed the default folder. As of &lt;a href=&quot;http://weblog.rubyonrails.org/2017/8/30/webpacker-3-0/&quot;&gt;webpacker 3.0&lt;/a&gt;, configuration is done through &lt;code class=&quot;highlighter-rouge&quot;&gt;webpacker.yml&lt;/code&gt; file inside of Rails &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; folder. Make sure first few lines look like these to reflect the change in our folder structure:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;default&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;source_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;frontend&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;source_entry_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;packs&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;public_output_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;packs&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;cache_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tmp/cache/webpacker&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Our ERB partials are going to live in &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt; folder as well, and our controllers wouldn’t know how to find them, unless we tell them so in &lt;code class=&quot;highlighter-rouge&quot;&gt;application_controller.rb&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;protect_from_forgery&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with: :exception&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# That's all there is:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prepend_view_path&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;As of webpacker 3.0, we &lt;a href=&quot;http://weblog.rubyonrails.org/2017/8/30/webpacker-3-0/&quot;&gt;no longer need a separate process&lt;/a&gt; to compile assets on-demand in development, but if we want to make use of automatic page refresh on every change in JS/CSS code, we still need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;webpacker-dev-server&lt;/code&gt; alongside with &lt;code class=&quot;highlighter-rouge&quot;&gt;rails s&lt;/code&gt;. For that we need a Procfile, so let’s create one:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch Procfile
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Put this inside:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;server: bin/rails server
assets: bin/webpack-dev-server
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With Procfile in place, you can launch all your processes with a single command using a tool like &lt;a href=&quot;https://github.com/ddollar/foreman&quot;&gt;Foreman&lt;/a&gt;, but we highly recommend using our alternative: the &lt;a href=&quot;https://evilmartians.com/chronicles/introducing-overmind-and-hivemind&quot;&gt;Hivemind&lt;/a&gt;. You can also take a look at its big brother &lt;a href=&quot;https://github.com/DarthSim/overmind&quot;&gt;Overmind&lt;/a&gt;, as it will allow you to use &lt;code class=&quot;highlighter-rouge&quot;&gt;pry&lt;/code&gt; for debugging without interrupting any running processes.&lt;/p&gt;
&lt;h2 id=&quot;smoke-test&quot;&gt;Smoke test&lt;/h2&gt;
&lt;p&gt;Time to test if our new setup is working correctly. Let’s add some simple code to our &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; (found under &lt;code class=&quot;highlighter-rouge&quot;&gt;packs&lt;/code&gt;) to manipulate our DOM and then make sure webpacker handles it well. First, we need to generate a basic controller and provide a default route:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rails g controller pages home
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pages#home&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure to remove everything from &lt;code class=&quot;highlighter-rouge&quot;&gt;views/pages/home.html.erb&lt;/code&gt;, so it contains no code at all. Now in &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; remove everything that is there and replace it with this:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// frontend/packs/application.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./application.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;afterbegin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Webpacker works!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s also create an &lt;code class=&quot;highlighter-rouge&quot;&gt;application.css&lt;/code&gt; file in the same folder to check that our styles are processed too (with PostCSS):&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* frontend/packs/application.css */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightyellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Time to launch our server for the first time! We assume you already have &lt;a href=&quot;https://github.com/DarthSim/hivemind&quot;&gt;Hivemind&lt;/a&gt; installed, if not—use &lt;code class=&quot;highlighter-rouge&quot;&gt;foreman&lt;/code&gt; or a similar process manager (but, seriously, consider Hivemind, it’s &lt;a href=&quot;https://evilmartians.com/chronicles/introducing-overmind-and-hivemind&quot;&gt;awesome&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;hivemind
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now go to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt; and see the result:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;A smoke test for our app&quot; class=&quot;post-media__object&quot; width=&quot;1255&quot; height=&quot;847&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/smoke_test-37c0723.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If it does not burn, it works!&lt;/p&gt;
&lt;p&gt;And here is a cool little thing about Webpack. If you go to &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt;, change “Webpacker works!” to something else and save the file, you will see changes in your browser without having to hit a “Refresh” button.&lt;/p&gt;
&lt;p&gt;Now, before we start writing any &lt;em&gt;real&lt;/em&gt; code, let’s make sure we write it in style.&lt;/p&gt;
&lt;h2 id=&quot;okay-how-do-i-lint-my-js&quot;&gt;Okay, how do I lint my JS?&lt;/h2&gt;
&lt;article class=&quot;post__note&quot;&gt;&lt;p&gt;Prettier also integrates with all popular editors so you can reformat your code with a touch of a button. ESLint also has plugins for all main editors to give you instant visual feedback.&lt;/p&gt;
&lt;/article&gt;&lt;p&gt;There are so many ways to write JavaScript and with &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript&quot;&gt;syntax being updated on yearly basis now&lt;/a&gt;, it is so easy to get confused before you even start. The semicolons/&lt;a href=&quot;https://feross.org/never-use-semicolons/&quot;&gt;no semicolons&lt;/a&gt; debate never gets old, for instance. Instead of arguing over each peculiarity of JavaScript syntax, it’s easier to stick with some opinionated code formatter, such as &lt;a href=&quot;https://standardjs.com/&quot;&gt;Standard&lt;/a&gt; or &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt;. We choose Prettier (and yes, it has semicolons by default, but you can easily &lt;a href=&quot;https://github.com/prettier/prettier#semicolons&quot;&gt;turn it off&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We are going to set up some automated linting with &lt;a href=&quot;https://eslint.org/&quot;&gt;ESLint&lt;/a&gt;, so our code style is always kept in check. We are also going to rely on &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb JavaScript Style Guide&lt;/a&gt; that contains a lot of best practices for writing maintainable JS code.&lt;/p&gt;
&lt;p&gt;Let’s add some &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; to our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, as for now it only contains &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt;. This is how it should look like after we make it cater to our JS linting needs:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;evil_chat_codealong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;private&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;@rails/webpacker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^3.0.1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.9.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;babel-eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^8.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.8.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint-config-airbnb-base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^12.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint-config-prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.6.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint-import-resolver-webpack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^0.8.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint-plugin-import&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.7.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint-plugin-prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.3.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.2.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pre-commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.2.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.7.3&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lint-staged&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pre-commit&lt;/code&gt; will come handy later, when we add some hooks to our &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; commands. This way we make sure that less-then-ideal code will never even make it to a repository.&lt;/p&gt;
&lt;p&gt;One last touch: we need &lt;code class=&quot;highlighter-rouge&quot;&gt;.eslintrc&lt;/code&gt; file in our root folder so ESLint knows how to apply our rules.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch .eslintrc
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Put this inside:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint-config-airbnb-base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;browser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;prettier/prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babel-eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;import/resolver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;resolve&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The order of elements under &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;extends&quot;&lt;/code&gt; key is important: this way we are telling ESLint to first apply Airbnb rules, and whenever there is a conflict with Prettier format guides, prefer the latest. We also need to add a key &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;import/resolver&quot;&lt;/code&gt; for our &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint-import-resolver-webpack&lt;/code&gt; dependency: it makes sure that whatever you &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; in your JS files actually exists in the folders handled by Webpack (in our case, it’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt; folder).&lt;/p&gt;
&lt;h2 id=&quot;what-about-css&quot;&gt;What about CSS?&lt;/h2&gt;
&lt;p&gt;CSS needs some linting too! We are also going to normalize it with a well-respected tool &lt;a href=&quot;https://github.com/necolas/normalize.css/&quot;&gt;normalize.css&lt;/a&gt;. We will be relying on &lt;a href=&quot;https://stylelint.io/&quot;&gt;stylelint&lt;/a&gt; to detect errors and convention violations in our stylesheets. Let’s add two more development dependencies in our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;stylelint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^8.1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;stylelint-config-standard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^17.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will also need a &lt;code class=&quot;highlighter-rouge&quot;&gt;.stylelintrc&lt;/code&gt; file in our root — to instruct our linter.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch .stylelintrc
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stylelint-config-standard&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also, add &lt;code class=&quot;highlighter-rouge&quot;&gt;normalize.css&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;dependencies&quot;&lt;/code&gt; key in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; (not &lt;code class=&quot;highlighter-rouge&quot;&gt;devDevdependencies&lt;/code&gt; this time!), so that part of your package listing looks like this:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;@rails/webpacker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^3.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;normalize.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^7.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now it is time to introduce some &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks&quot;&gt;git hooks&lt;/a&gt; so all checks will run automatically on each &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;. For that, we will add a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;scripts&quot;&lt;/code&gt; key to our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$(yarn bin)/lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;config/webpack/**/*.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier --write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;frontend/**/*.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier --write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;frontend/**/*.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier --write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stylelint --fix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pre-commit&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, every time we commit, all staged files will be examined for errors and reformatted automatically.&lt;/p&gt;
&lt;p&gt;Our final &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; should look like the contents of this &lt;a href=&quot;https://gist.github.com/progapandist/0c28831364c560d982b8bbed48226c96&quot;&gt;gist&lt;/a&gt;.&lt;br/&gt;To install all new dependencies, run &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn&lt;/code&gt; in your Terminal.&lt;/p&gt;
&lt;p&gt;I know you can not wait to see our automated linting in action. Try going to your &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend/packs/application.js&lt;/code&gt; and removing a semicolon. Then run &lt;code class=&quot;highlighter-rouge&quot;&gt;git add . &amp;amp;&amp;amp; git commit -m &quot;testing JS linting&quot;&lt;/code&gt; and see that semicolon being added right back. See? No sloppy style anymore.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Linter's config&quot; class=&quot;post-media__object&quot; width=&quot;535&quot; height=&quot;346&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/plugins-ba21e6c.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If everything was set up correctly, our project’s root should contain all those files&lt;/p&gt;
&lt;h2 id=&quot;our-first-component-no-react-involved&quot;&gt;Our first component (no React involved)&lt;/h2&gt;
&lt;p&gt;Just to give you a taste of what will be happening in Part 2 of this guide, let’s create our first component.&lt;/p&gt;
&lt;p&gt;First, let’s get rid of our &lt;code class=&quot;highlighter-rouge&quot;&gt;application.css&lt;/code&gt;, we only needed that one for a smoke test. Delete all code from &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; too. From now on, our &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; will only contain import statements. This our entry point, a place where everything comes together. We will need some other place to keep app-wide stylesheets and javascripts, so let’s create one. We will call this new folder &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir frontend/init
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch frontend/init/index.js
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch frontend/init/index.css
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to register our new folder inside our &lt;em&gt;entry point.&lt;/em&gt; Add this line to your &lt;code class=&quot;highlighter-rouge&quot;&gt;packs/application.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// frontend/packs/application.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now some code for our new files. Here is our &lt;code class=&quot;highlighter-rouge&quot;&gt;init/index.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// frontend/init/index.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./index.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And for &lt;code class=&quot;highlighter-rouge&quot;&gt;init/index.css&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* frontend/init/index.css */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;normalize.css/normalize.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;Helvetica Neue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All we do here is applying some general styling to all fonts in our app. Our &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; folder will also be the first to go into the bundle, so it makes sense to include our &lt;code class=&quot;highlighter-rouge&quot;&gt;normalize.css&lt;/code&gt; here. Later we can use the same folder to set up polyfills or error monitoring—any functionality that does not relate directly to our components and needs to be loaded as soon as possible.&lt;/p&gt;
&lt;p&gt;Okay, &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; is a special case, so what about the components?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each component is a folder with three files in it: one for ERB partial, one for scripts, and one for styles.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All our components will be located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt; folder inside our &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt;. Let’s create one, along with the first component that will simply be called &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt; (think of it as a template for our layout):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir -p frontend/components/page
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch frontend/components/page/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;_page.html.erb,page.css,page.js&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note that we are not calling our component’s JS file &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;, this name is reserved for our &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; folder. We choose to name our JS files the same as our components so that later, when we have multiple open tabs in our editor, we can quickly figure out where we are. This practice is not common (in other tutorials you will see mostly &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; for components), but saves a lot of time when writing code.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We don’t have any component-related JS logic yet, so our &lt;code class=&quot;highlighter-rouge&quot;&gt;page.js&lt;/code&gt; still consists of a single import statement for a CSS file:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// frontend/components/page/page.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./page.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;page.css&lt;/code&gt; has some component-related styling:&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* frontend/components/page/page.css */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100vh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, our &lt;code class=&quot;highlighter-rouge&quot;&gt;_page.html.erb&lt;/code&gt; contains markup. Note the we can use all ERB goodies here and leverage the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; statement that will allow us to &lt;em&gt;nest&lt;/em&gt; components one inside another.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- frontend/components/page/_page.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= yield %&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don’t forget to reference our new component in &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;import &quot;components/page/page&quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;A structure for the first component&quot; class=&quot;post-media__object&quot; width=&quot;632&quot; height=&quot;305&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/components_first_structure-95e773f.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A structure of our “frontend” folder at this point of tutorial&lt;/p&gt;
&lt;p&gt;Now let’s add some ERB code to our &lt;code class=&quot;highlighter-rouge&quot;&gt;home.html.erb&lt;/code&gt; view:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/pages/home.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= render &quot;components/page/page&quot; do %&amp;gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello from our first component!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Time for to see our first component in action! Launch the server again and refresh the page. Fingers crossed, you are going to see something like that:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;A structure for the first component&quot; class=&quot;post-media__object&quot; width=&quot;994&quot; height=&quot;348&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/first_component_works-87c1250.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A browser and console output for out first working component&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Congratulations, you have completed Part 1 of our tutorial! Stay tuned for Part 2 where our application will finally take shape and we will introduce components needed for our chat-related functionality. We will also add a helper to render our components with less typing.&lt;/p&gt;
</description>
<pubDate>Fri, 08 Dec 2017 14:35:21 +0000</pubDate>
<dc:creator>galfarragem</dc:creator>
<og:title>Evil Front Part 1: Modern Front-end in Rails — Martian Chronicles</og:title>
<og:description>An opinionated guide to modern, modular, component-based approach to handling your presentation logic in Rails that does not depend on any front-end framework. Follow our three-part tutorial to learn the bare minimum of up-to-date front-end techniques by example and finally make sense of it all. Part 1: goodbye Asset Pipeline, code organization, linting.</og:description>
<og:url>https://evilmartians.com/chronicles/evil-front-part-1</og:url>
<og:type>article</og:type>
<og:image>https://cdn.evilmartians.com/front/posts/evil-front-part-1/cover-1386775.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://evilmartians.com/chronicles/evil-front-part-1</dc:identifier>
</item>
<item>
<title>macOS lock screen: “I just sent my session pass to my whole team”</title>
<link>https://twitter.com/BenoitLetondor/status/939127296266588160</link>
<guid isPermaLink="true" >https://twitter.com/BenoitLetondor/status/939127296266588160</guid>
<description>I open my MBP, type the session password, hit return, nothing happen. I realize that the password field is not focused, I click on it, type the pass again and it works.
The focus was on the Slack window behind, I just sent my session pass to my whole team 😱 WTF &lt;a href=&quot;https://mobile.twitter.com/AppleSupport&quot; class=&quot;twitter-atreply dir-ltr&quot; dir=&quot;ltr&quot; data-mentioned-user-id=&quot;3309375033&quot; data-screenname=&quot;AppleSupport&quot;&gt;@AppleSupport&lt;/a&gt;</description>
<pubDate>Fri, 08 Dec 2017 13:44:31 +0000</pubDate>
<dc:creator>fofolo</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/BenoitLetondor/status/939127296266588160</dc:identifier>
</item>
<item>
<title>Oregon punished an engineer for criticizing red-light cameras. He fought and won</title>
<link>https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/criticizing-red-light-cameras-is-not-a-punishable-offense-oregon-concedes</link>
<guid isPermaLink="true" >https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/criticizing-red-light-cameras-is-not-a-punishable-offense-oregon-concedes</guid>
<description>&lt;div class=&quot;inline-content inline-photo inline-photo-normal&quot;&gt; &lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/news/morning-mix/wp-content/uploads/sites/21/2017/12/IFJ_2459-1024x683.jpg&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/news/morning-mix/wp-content/uploads/sites/21/2017/12/IFJ_2459-1024x683.jpg&amp;amp;w=480&quot; data-raw-src=&quot;https://img.washingtonpost.com/news/morning-mix/wp-content/uploads/sites/21/2017/12/IFJ_2459-1024x683.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/news/morning-mix/wp-content/uploads/sites/21/2017/12/IFJ_2459-1024x683.jpg&amp;amp;w=60&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;pb-caption&quot;&gt;Mats Järlström points to a red-light camera. (Institute for Justice)&lt;/span&gt;&lt;/div&gt;&lt;p&gt;Mats Järlström is, by all accounts, an engineer. He graduated from engineering school in Sweden, served as an airplane-camera mechanic in the Swedish Air Force and worked in research and development at an electronics manufacturer. For the past 20 years, he has earned a living designing and repairing audio equipment.&lt;/p&gt;
&lt;p&gt;He is not, however, a “licensed professional” in the state of Oregon, where he put down roots in the early 1990s. So when Järlström did his own study of the timing mechanisms in the state’s red-light cameras and found them flawed, Oregon officials hit him with a $500 fine for “unlicensed practice of engineering.”&lt;/p&gt;
&lt;p&gt;Järlström was inspired by the $150 ticket his wife got in the mail in May after driving through an intersection with a red-light camera in Beaverton, Ore. His research showed that the mathematical formula used in the timing of yellow lights was outdated and unfair to drivers.&lt;/p&gt;
&lt;div class=&quot;inline-content inline-video&quot;&gt;

&lt;div class=&quot;inline-video-caption&quot;&gt;&lt;span class=&quot;pb-caption&quot;&gt;When Mats Järlström presented research to Oregon state officials and local media that said the red-light cameras in his area were inaccurate, the Oregon State Board of Examiners for Engineering and Land Surveying tried to silence him. (Institute for Justice)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;When he presented his findings to state officials and local media, the Oregon State Board of Examiners for Engineering and Land Surveying tried to silence him. A nearly two-year investigation by the board found he had violated a state law that says only state-licensed engineers can speak publicly about technical matters. Järlström, in turn, filed a federal lawsuit alleging violations of his First Amendment rights.&lt;/p&gt;
&lt;p&gt;This week, more than four years after his wife’s ticket, Järlström got some long-awaited relief. On Monday, Oregon’s attorney general conceded that the engineering board had trampled on his free speech rights, &lt;a href=&quot;http://www.oregonlive.com/portland/index.ssf/2017/12/state_board_concedes_it_violat.html&quot; target=&quot;_blank&quot;&gt;the Oregonian reported&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“We have admitted to violating Mr. Järlström’s rights,” Christina L. Beatty-Walters, senior assistant attorney general, told a federal magistrate judge in Portland, according to the Oregonian. The state’s action against Järlström under the state’s Professional Engineer Registration Act “was not narrowly tailored to any compelling state interests,” she added in court filings.&lt;/p&gt;
&lt;p&gt;As long as Järlström doesn’t act in a commercial or professional manner, he is free to speak out about red-light cameras without fear of punishment, state attorneys said.&lt;/p&gt;
&lt;p&gt;The state has already cut a check to Järlström for $500, but the traffic-camera saga is not over. Oregon wants the lawsuit thrown out, but Järlström and his attorneys from the Institute for Justice want the law itself declared unconstitutional. They say others have been improperly investigated and fined for protected speech.&lt;/p&gt;
&lt;p&gt;“The existence of these laws and the way they’ve been applied time and time again has violated free speech rights,” attorney Samuel Gedge told the court, according to the Oregonian. “Past history suggests the board can’t be trusted on how the laws should be applied constitutionally.”&lt;/p&gt;
&lt;p&gt;In one case cited by Järlström’s attorneys, a Portland City Commissioner Dan Saltzman was investigated after a voter’s pamphlet described his background as an “environmental engineer.” Like Järlström, he had studied engineering but lacked state-issued bona fides. In another case, the state board used the law to fine a local activist $1,000 for criticizing a proposed new power plant, as &lt;a href=&quot;http://reason.com/blog/2017/04/26/after-challenging-red-light-cameras-oreg&quot; target=&quot;_blank&quot;&gt;Reason reported&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Järlström’s interest in traffic cameras has grown into a passion. He says the original formula for calculating the duration of yellow lights dates back to the 1950s and only accounts for cars driving in straight lines. Cars in turning lanes need more time to slow down and make a legal right-hand turn, he says.&lt;/p&gt;
&lt;p&gt;“Anyone should be able to talk about the traffic signals if they’re too long or too short or anything without being penalized,” Järlström said in an &lt;a href=&quot;https://www.youtube.com/watch?v=Wi4brP0sXSQ&quot; target=&quot;_blank&quot;&gt;Institute for Justice&lt;/a&gt; video earlier this year.&lt;/p&gt;
&lt;div class=&quot;inline-content inline-video&quot;&gt;

&lt;div class=&quot;inline-video-caption&quot;&gt;&lt;span class=&quot;pb-caption&quot;&gt;The first patented electric traffic signal went into operation 100 years ago. PostTV looks into how a modern traffic signal system keeps traffic flowing—or not—in a busy city like Washington, D.C. (Jason Aldag/The Washington Post)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;After researching the issue in his spare time, he sought to publicize his findings. He corresponded with one of the physicists who worked on the original yellow-light formula. He spoke at a transportation conference in Los Angeles. And he shared his work with media outlets, including “60 Minutes.”&lt;/p&gt;
&lt;p&gt;He also shared his ideas with the Oregon State Board of Examiners for Engineering and Land Surveying. That’s what got him in trouble.&lt;/p&gt;
&lt;p&gt;The board said Järlström was breaking the law and ordered him to “stop any further references” to his work until he registered as an engineer, his lawsuit says. He continued to publicize his work, and even shared a mathematical formula he believed would improve the timing of yellow lights.&lt;/p&gt;
&lt;p&gt;In early 2015, the board opened a “law enforcement case” against him, according to his lawsuit. In talking about his traffic-light theories, the board found, he had indicated he was a licensed engineer, violating state law. He paid the $500 fine in late 2016.&lt;/p&gt;
&lt;p&gt;“I stated that I was a Swedish electronics engineer, but I based all the things from freedom of speech,” Järlström said in the &lt;a href=&quot;https://www.youtube.com/watch?v=Wi4brP0sXSQ&quot; target=&quot;_blank&quot;&gt;Institute for Justice&lt;/a&gt; video. “I was just talking. That’s literally what I did.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More from Morning Mix:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/the-solar-eclipse-burned-a-crescent-wound-on-a-womans-retina-she-wasnt-wearing-proper-glasses/&quot; target=&quot;_blank&quot;&gt;The solar eclipse burned a crescent wound on a woman’s retina. She wasn’t wearing proper glasses.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/body-cam-captures-police-dog-attacking-innocent-woman-taking-out-her-garbage/&quot; target=&quot;_blank&quot;&gt;Body cam captures police dog attacking innocent woman taking out her garbage&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 08 Dec 2017 12:15:34 +0000</pubDate>
<dc:creator>notlob</dc:creator>
<og:type>article</og:type>
<og:url>https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/criticizing-red-light-cameras-is-not-a-punishable-offense-oregon-concedes/</og:url>
<og:image>https://www.washingtonpost.com/pbox.php?url=http://www.washingtonpost.com/news/morning-mix/wp-content/uploads/sites/21/2017/12/IFJ_2459.jpg&amp;w=1484&amp;op=resize&amp;opt=1&amp;filter=antialias&amp;t=20170517</og:image>
<og:title>Oregon punished an engineer for criticizing red-light cameras. He fought back and won.</og:title>
<og:description>A state panel fined an engineer who found flaws in the timing of the cameras.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/criticizing-red-light-cameras-is-not-a-punishable-offense-oregon-concedes/</dc:identifier>
</item>
<item>
<title>Looking Forward to 2018</title>
<link>https://letsencrypt.org//2017/12/07/looking-forward-to-2018.html</link>
<guid isPermaLink="true" >https://letsencrypt.org//2017/12/07/looking-forward-to-2018.html</guid>
<description>&lt;p&gt;Let’s Encrypt had a great year in 2017. We more than doubled the number of active (unexpired) certificates we service to 46 million, we just about tripled the number of unique domains we service to 61 million, and we did it all while maintaining a stellar security and compliance track record. Most importantly though, &lt;a href=&quot;https://letsencrypt.org/stats/&quot;&gt;the Web went from 46% encrypted page loads to 67%&lt;/a&gt; according to statistics from Mozilla - a gain of 21 percentage points in a single year - incredible. We’re proud to have contributed to that, and we’d like to thank all of the other people and organizations who also worked hard to create a more secure and privacy-respecting Web.&lt;/p&gt;&lt;p&gt;While we’re proud of what we accomplished in 2017, we are spending most of the final quarter of the year looking forward rather than back. As we wrap up our own planning process for 2018, I’d like to share some of our plans with you, including both the things we’re excited about and the challenges we’ll face. We’ll cover service growth, new features, infrastructure, and finances.&lt;/p&gt;

&lt;p&gt;We are planning to double the number of active certificates and unique domains we service in 2018, to 90 million and 120 million, respectively. This anticipated growth is due to continuing high expectations for HTTPS growth in general in 2018.&lt;/p&gt;
&lt;p&gt;Let’s Encrypt helps to drive HTTPS adoption by offering a free, easy to use, and globally available option for obtaining the certificates required to enable HTTPS. HTTPS adoption on the Web took off at an unprecedented rate from the day Let’s Encrypt launched to the public.&lt;/p&gt;
&lt;p&gt;One of the reasons Let’s Encrypt is so easy to use is that our community has done great work making client software that works well for a wide variety of platforms. We’d like to thank everyone involved in the development of over 60 &lt;a href=&quot;https://letsencrypt.org/docs/client-options/&quot;&gt;client software options for Let’s Encrypt&lt;/a&gt;. We’re particularly excited that support for the ACME protocol and Let’s Encrypt is &lt;a href=&quot;https://letsencrypt.org/2017/10/17/acme-support-in-apache-httpd.html&quot;&gt;being added to the Apache httpd server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other organizations and communities are also doing great work to promote HTTPS adoption, and thus stimulate demand for our services. For example, browsers are starting to make their users more aware of the risks associated with unencrypted HTTP (e.g. &lt;a href=&quot;https://blog.mozilla.org/security/2017/01/20/communicating-the-dangers-of-non-secure-http/&quot;&gt;Firefox&lt;/a&gt;, &lt;a href=&quot;https://security.googleblog.com/2017/04/next-steps-toward-more-connection.html&quot;&gt;Chrome&lt;/a&gt;). Many hosting providers and CDNs are making it easier than ever for all of their customers to use HTTPS. &lt;a href=&quot;https://https.cio.gov/&quot;&gt;Government&lt;/a&gt; &lt;a href=&quot;https://www.canada.ca/en/treasury-board-secretariat/services/information-technology/strategic-plan-2017-2021.html#toc8-3-2&quot;&gt;agencies&lt;/a&gt; are waking up to the need for stronger security to protect constituents. The media community is working to &lt;a href=&quot;https://securethe.news/&quot;&gt;Secure the News&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’ve got some exciting features planned for 2018.&lt;/p&gt;
&lt;p&gt;First, we’re planning to introduce an ACME v2 protocol API endpoint and &lt;a href=&quot;https://letsencrypt.org/2017/07/06/wildcard-certificates-coming-jan-2018.html&quot;&gt;support for wildcard certificates&lt;/a&gt; along with it. Wildcard certificates will be free and available globally just like our other certificates. We are planning to have a public test API endpoint up by January 4, and we’ve set a date for the full launch: Tuesday, February 27.&lt;/p&gt;
&lt;p&gt;Later in 2018 we plan to introduce ECDSA root and intermediate certificates. ECDSA is generally considered to be the future of digital signature algorithms on the Web due to the fact that it is more efficient than RSA. Let’s Encrypt will currently sign ECDSA keys from subscribers, but we sign with the RSA key from one of our intermediate certificates. Once we have an ECDSA root and intermediates, our subscribers will be able to deploy certificate chains which are entirely ECDSA.&lt;/p&gt;

&lt;p&gt;Our CA infrastructure is capable of issuing millions of certificates per day with multiple redundancy for stability and a wide variety of security safeguards, both physical and logical. Our infrastructure also generates and signs nearly 20 million OCSP responses daily, and serves those responses nearly 2 billion times per day. We expect issuance and OCSP numbers to double in 2018.&lt;/p&gt;
&lt;p&gt;Our physical CA infrastructure currently occupies approximately 70 units of rack space, split between two datacenters, consisting primarily of compute servers, storage, HSMs, switches, and firewalls.&lt;/p&gt;
&lt;p&gt;When we issue more certificates it puts the most stress on storage for our databases. We regularly invest in more and faster storage for our database servers, and that will continue in 2018.&lt;/p&gt;
&lt;p&gt;We’ll need to add a few additional compute servers in 2018, and we’ll also start aging out hardware in 2018 for the first time since we launched. We’ll age out about ten 2u compute servers and replace them with new 1u servers, which will save space and be more energy efficient while providing better reliability and performance.&lt;/p&gt;
&lt;p&gt;We’ll also add another infrastructure operations staff member, bringing that team to a total of six people. This is necessary in order to make sure we can keep up with demand while maintaining a high standard for security and compliance. Infrastructure operations staff are systems administrators responsible for building and maintaining all physical and logical CA infrastructure. The team also manages a 24/7/365 on-call schedule and they are primary participants in both security and compliance audits.&lt;/p&gt;

&lt;p&gt;We pride ourselves on being an efficient organization. In 2018 Let’s Encrypt will secure a large portion of the Web with a budget of only $3.0M. For an overall increase in our budget of only 13%, we will be able to issue and service twice as many certificates as we did in 2017. We believe this represents an incredible value and that contributing to Let’s Encrypt is one of the most effective ways to help create a more secure and privacy-respecting Web.&lt;/p&gt;
&lt;p&gt;Our 2018 fundraising efforts are off to a strong start with Platinum sponsorships from Mozilla, Akamai, OVH, Cisco, Google Chrome and the Electronic Frontier Foundation. The Ford Foundation has renewed their grant to Let’s Encrypt as well. We are seeking additional sponsorship and grant assistance to meet our full needs for 2018.&lt;/p&gt;
&lt;p&gt;We had originally budgeted $2.91M for 2017 but we’ll likely come in under budget for the year at around $2.65M. The difference between our 2017 expenses of $2.65M and the 2018 budget of $3.0M consists primarily of the additional infrastructure operations costs previously mentioned.&lt;/p&gt;

&lt;p&gt;We depend on contributions from our community of users and supporters in order to provide our services. If your company or organization would like to &lt;a href=&quot;https://letsencrypt.org/become-a-sponsor/&quot;&gt;sponsor&lt;/a&gt; Let’s Encrypt please email us at &lt;a href=&quot;mailto:sponsor@letsencrypt.org&quot;&gt;sponsor@letsencrypt.org&lt;/a&gt;. We ask that you make an &lt;a href=&quot;https://letsencrypt.org/donate/&quot;&gt;individual contribution&lt;/a&gt; if it is within your means.&lt;/p&gt;
&lt;p&gt;We’re grateful for the industry and community support that we receive, and we look forward to continuing to create a more secure and privacy-respecting Web!&lt;/p&gt;
</description>
<pubDate>Fri, 08 Dec 2017 07:53:30 +0000</pubDate>
<dc:creator>l1n</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://letsencrypt.org//2017/12/07/looking-forward-to-2018.html</dc:identifier>
</item>
<item>
<title>A Spectator Who Threw a Wrench in the Waymo/Uber Lawsuit</title>
<link>https://www.wired.com/story/eric-swildens-uber-waymo-lawsuit-patent/</link>
<guid isPermaLink="true" >https://www.wired.com/story/eric-swildens-uber-waymo-lawsuit-patent/</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://www.wired.com/wp-content/uploads/2017/05/1t6Jsgbu_bU84ZZkgxw8G8A-3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Eric Swildens knows how damaging&lt;/strong&gt; intellectual property trials can be. In 2002, Speedera Networks, the content delivery network he cofounded, was sued for patent infringement and trade secrets violation by Akamai. “It was trial by fire,” says the 50-year-old engineer. “I learned a bunch of stuff I didn’t necessarily want to learn.”&lt;/p&gt;

&lt;p&gt;After a three-year battle in which he spent up to $1000 an hour on lawyers, Swildens ended up selling Speedera at a discount to Akamai for $130 million.&lt;/p&gt;

&lt;p&gt;The experience left Swildens with a working knowledge of intellectual property battles in the tech world, and a lingering soft spot for others facing hefty patent claims. So when he heard in February that the world’s second-most valuable company, Alphabet, was launching a legal broadside at Uber’s self-driving car technology, he put himself in then-CEO Travis Kalanick’s shoes: “I saw a larger competitor attacking a smaller competitor…and became curious about the patents involved.”&lt;/p&gt;
&lt;p&gt;In its most dramatic allegations, Waymo is &lt;a href=&quot;https://www.wired.com/story/uber-waymo-google-levandowski-lawsuit-stroz-report/&quot;&gt;accusing engineer Anthony Levandowski&lt;/a&gt; of taking over 14,000 technical confidential files to Uber. But the company also claimed that Uber’s laser-ranging lidar devices infringed four of Waymo’s patents.&lt;/p&gt;
&lt;p&gt;“Waymo developed its patented inventions…at great expense, and through years of painstaking research, experimentation, and trial and error,” the complaint read. “If [Uber is] not enjoined from their infringement and misappropriation, they will cause severe and irreparable harm to Waymo.”&lt;/p&gt;
&lt;p&gt;But Swildens had a suspicion. He dug into the history of Waymo’s lidars, and came to the conclusion that Waymo’s key patent should never have been granted at all. He asked the US Patent and Trademark Office (USPTO) to look into its validity, and in early September, the USPTO granted that request. Days later, Waymo abruptly dismissed its patent claim without explanation. The USPTO examiners may still invalidate that patent, and if that happens, Waymo could find itself embroiled in another multi-billion-dollar self-driving car lawsuit—this time as a defendant.&lt;/p&gt;
&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://www.wired.com/wp-content/uploads/2017/05/1AwTXMT2omVX-1Q8BM3cD-A-4.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prosecuting a patent in a lawsuit&lt;/strong&gt; is a risky business. Patents undergo intense scrutiny during a trial, where many are shown to be poorly written, inapplicable, or even to have been granted in error. But Waymo thought it had a slam dunk for a big patent win. &lt;a href=&quot;https://www.wired.com/2017/02/how-my-public-records-request-triggered-waymos-self-driving-car-lawsuit/&quot;&gt;Public records&lt;/a&gt; seemed to show Uber using its technology, and an email from a supplier contained an Uber circuit board almost identical to its own lidars.&lt;/p&gt;
&lt;div class=&quot;inset-left-component inset-left-component--article&quot;&gt;
&lt;ul class=&quot;inset-left-component--article__list&quot;&gt;&lt;li&gt;
&lt;h4 name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot;&gt;More From This Edition&lt;/h4&gt;
&lt;/li&gt;
&lt;li class=&quot;article-list-item-embed-component__post&quot; readability=&quot;23&quot;&gt;

&lt;div class=&quot;article-list-item-embed-component__description&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;span&gt;Jessi Hempel&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;article-list-item-embed-component__title&quot;&gt;Inside Baidu’s Bid to Lead the AI Revolution&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li class=&quot;article-list-item-embed-component__post&quot; readability=&quot;23&quot;&gt;

&lt;div class=&quot;article-list-item-embed-component__description&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;span&gt;Hazel Sheffield&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;article-list-item-embed-component__title&quot;&gt;The Future of Progressive Politics is Being Etched in Code&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li class=&quot;article-list-item-embed-component__post&quot; readability=&quot;23&quot;&gt;

&lt;div class=&quot;article-list-item-embed-component__description&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;span&gt;Karen Wickre&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;article-list-item-embed-component__title&quot;&gt;Corporate Boards Are Complicit in Sexual Harassment&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li class=&quot;article-list-item-embed-component__post&quot; readability=&quot;23&quot;&gt;

&lt;div class=&quot;article-list-item-embed-component__description&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;span&gt;Miranda Katz&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;article-list-item-embed-component__title&quot;&gt;The Fake News Culprit No One Wants to Identify: You&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;As the legal discovery process unfolded, however, it turned out that three of its four patent claims applied only to an outdated lidar, codenamed Spider, that Uber was no longer developing. When in early July the ride-sharing company promised to abandon the Spider design and never revive it, Waymo dropped those claims.&lt;/p&gt;

&lt;p&gt;But one claim remained, related to a patent nicknamed 936. The 936 patent describes a laser diode firing system that generates the pulses of light a lidar uses to build a 3D picture of the world around it. Waymo believed that just such a circuit was present in Uber’s current generation of lidar, codenamed Fuji. But when Swildens looked it over, he was surprised by how basic the firing system looked.&lt;/p&gt;
&lt;p&gt;“You’re talking about a capacitor, a laser diode, a transistor, an inductor, and some other diodes,” Swildens tells me from his home in Los Altos Hills, near Mountain View. “It’s a very simple circuit. When I initially saw it, I couldn’t imagine the circuit didn’t exist prior to this patent.”&lt;/p&gt;
&lt;p&gt;In mid-July, he started looking for places where that circuit might have been described previously. If an invention claimed in a patent can be shown to have existed or been described previously, it is called “prior art” and generally invalidates the patent. Prior art can be other patents, products offered for sale, or even books. “I was ready to give up at any time,” he says. “If it seemed to pan out as some super invention, I’d have quit working on it.”&lt;/p&gt;

&lt;p&gt;But he did not have to look far. Right on the front page of the 936 patent was a citation for another patent called High Definition Lidar System, filed in 2011 by David Hall. David Hall is the founder of Velodyne, the company that built the lidar on Google’s first self-driving car and that still makes the vast majority of automotive lidars today.&lt;/p&gt;
&lt;p&gt;Patent applications cite earlier patents to show how they differ from them. For 936, the original USPTO examiner noted, “The cited prior art…does not teach or suggest the use of an inductor.” However, Swildens noticed that Hall’s patent does in fact mention inductors several times, and describes a circuit that operates in the same manner as the one in 936. Swildens even modeled both circuits in simulation software to double-check his calculations. (David Hall declined to speak to Swildens or to Backchannel for this story).&lt;/p&gt;
&lt;p&gt;Then Swildens found another potential weakness. The inventors of 936, including Pierre-Yves Droz, who worked with &lt;a href=&quot;https://www.wired.com/story/god-is-a-bot-and-anthony-levandowski-is-his-messenger/&quot;&gt;Anthony Levandowski&lt;/a&gt; for many years, also claimed a novel gallium nitride field effect transistor in their circuit. But when Swildens looked into this, he found a book published in 2012—the year before Droz filed 936—that explained how gallium nitride (GaN) transistors could be used in a wide variety of circuits.&lt;/p&gt;
&lt;p&gt;He even called up the book’s author, Alex Lidow, to confirm that it had been published well before 936 had been written. Lidow is CEO of Efficient Power Conversion, a company that aims to replace the silicon in power, analog, and digital applications with its gallium technologies. “Velodyne came to us very early on in 2011 to talk about using our GaN devices in lidar systems,” Lidow told Backchannel. “We now have relationships with all [the lidar manufacturers]. Most of it is under NDA so I can’t talk specifics other than to say they all use our GaN devices.”&lt;/p&gt;


&lt;p&gt;Perhaps most damning, Swildens found a reference to a similar firing circuit as far back as 1996, in a patent filed by an engineer working for Leica Geosystems, a Swiss mapping technology company. Because that patent is now over 20 years old, anything it describes is likely now in the public domain, free for anyone to build without fear of litigation.&lt;/p&gt;
&lt;p&gt;“In my opinion, the 936 patent shouldn’t have been filed in the first place,” says Swildens. “The whole thing should now be thrown out, never to be seen again.”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wired.com/wp-content/uploads/2017/05/1_dJHHAJFu3i68xcQskPWyg-3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But what to do next?&lt;/strong&gt; Swildens was surprised that Uber had not filed its own re-examination request of the 936 patent and saw time ticking away toward the case’s initial October trial deadline. (It was subsequently delayed to early December and has been delayed again until February 5.) So he took the unusual step of challenging the 936 patent himself, filing what is called an ex-parte reexamination request. He gathered the prior art he had discovered, completed reams of paperwork, and pulled together his detailed arguments into a 101-page document that he filed with the USPTO on August 1. “I’m proud of my work. There’s no fluff in there,” he says.&lt;/p&gt;
&lt;p&gt;He then wrote a $6,000 personal check for the reexamination fee. Swildens would not see this money again, whether or not his request was successful. “It’s definitely not a drop in the bucket for me,” he says. “But when I do something, I like to do it properly.”&lt;/p&gt;

&lt;p&gt;Proper or not, the request surprised Waymo’s lawyers, who were not expecting an attack from someone completely unconnected to the case. “Ex parte re-exams have become relatively rare,” says Brian Love, co-director of the High Tech Law Institute at the Santa Clara University School of Law. “Particularly so for a person off the street, as competently filing a request can cost $50,000.”&lt;/p&gt;
&lt;p&gt;“I’ve never heard of anyone doing that,” agrees Alex Lidow. “It’s really crazy.” Swildens insists that he has not been paid by or even been in communication with either side during the process—although not for want of trying. After Swildens filed his request with the USPTO and sent a copy to Waymo, he thought Uber should have one also. He visited two of the company’s buildings in San Francisco before being directed to its headquarters, where he was met with skepticism by a security guard.&lt;/p&gt;

&lt;p&gt;“I explained that I had filed an ex parte reexamination on my own and Waymo had had it for two weeks already and it didn’t seem fair that Uber didn’t have it, given it was going to trial,” explains Swildens. “But I felt the guy thought I was some crazy person who just came in off the street.”&lt;/p&gt;
&lt;p&gt;Uber did not immediately respond to a request for comment on this story. Meanwhile, the company continued to treat the 936 patent as a threat. On August 15, Uber submitted a proposal to redesign Fuji to avoid infringing on the 936 patent, and asked the court for a summary judgement of non-infringement.&lt;/p&gt;
&lt;p&gt;Waymo was not convinced. On August 24, it filed a document that said Uber’s request for summary judgment on the 936 patent was “meritless” and called its motion “futile.” Even as late as September 12, Waymo was saying that Uber had not implemented its design-around and was continuing to use the infringing Fuji design. “Waymo is not obligated to take Uber at its word [and] the parties should be permitted to present the evidence at trial,” read one of its motions.&lt;/p&gt;

&lt;div class=&quot;inset-left-component inset-left-component--article&quot;&gt;
&lt;ul class=&quot;inset-left-component--article__list&quot;&gt;&lt;li&gt;
&lt;h4 name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot;&gt;RELATED STORIES&lt;/h4&gt;
&lt;/li&gt;
&lt;li class=&quot;article-list-item-embed-component__post&quot; readability=&quot;23.5&quot;&gt;

&lt;div class=&quot;article-list-item-embed-component__description&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;&lt;span&gt;Mark Harris&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;article-list-item-embed-component__title&quot;&gt;God Is a Bot, and Anthony Levandowski Is His Messenger&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li class=&quot;article-list-item-embed-component__post&quot; readability=&quot;23&quot;&gt;

&lt;div class=&quot;article-list-item-embed-component__description&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;span&gt;Aarian Marshall&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;article-list-item-embed-component__title&quot;&gt;The Uber-Waymo Lawsuit Gets a New Star—and Takes a Wild Turn&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li class=&quot;article-list-item-embed-component__post&quot; readability=&quot;23&quot;&gt;

&lt;div class=&quot;article-list-item-embed-component__description&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;span&gt;Alex Davies&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;article-list-item-embed-component__title&quot;&gt;Waymo Has Taken the Human Out of Its Self-Driving Cars&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;But the very next day, Waymo dropped all of its claims relating to the 936. Each party has its own explanation as to why. Waymo now tells Backchannel that backroom negotiations with Uber produced assurances that the company would not infringe the patent in the future. Yet Uber, in a filing days later, claimed that “Waymo’s patent claims were a complete misfire”—in other words, that it had demonstrated its hands were clean. Swildens, naturally, thinks his reexamination request played a role.&lt;/p&gt;
&lt;p&gt;He notes that USPTO had a phone interview with Waymo’s lawyers a few days before, on September 8, at which the examiners presumably told Waymo that a reexamination of the 936 would be going ahead. If the reexamination started while the patent was being actively litigated, Uber and the court would have to be informed.&lt;/p&gt;
&lt;p&gt;“I believe that not only does my request show that Waymo’s claims were not their invention, it shows that the circuit was in Velodyne’s earlier patent – and may even have existed prior to that,” he says. “It was a mess and wouldn’t look good for them.”&lt;/p&gt;
&lt;p&gt;Two days later, on September 15, the USPTO formally ordered a re-examination of the 936 patent. According to the &lt;a href=&quot;https://www.uspto.gov/sites/default/files/documents/ex_parte_historical_stats_roll_up.pdf&quot; target=&quot;_blank&quot;&gt;latest statistics&lt;/a&gt; from the USPTO, such examinations normally take around two years and result in a patent’s claims being changed or cancelled around 80 percent of the time.&lt;/p&gt;
&lt;p&gt;By that time, the Uber lawsuit should be ancient history. And if Swildens’ analyses hold up and 936 gets revoked, Waymo may find itself facing a new threat—this time for infringing on Velodyne’s turf. But Swildens says his involvement is done. “One of the reasons I filed this is that it’s a funny story, with great engineers and fascinating characters fighting a pitched battle. When something interesting presents itself in life, I see where it leads.”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.wired.com/wp-content/uploads/2017/05/1uW_l9n54f47SZbPxRBEq2A-3.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 08 Dec 2017 00:31:10 +0000</pubDate>
<dc:creator>kynthelig</dc:creator>
<og:type>article</og:type>
<og:title>The Spectator Who Threw a Wrench in the Waymo/Uber Lawsuit | Backchannel</og:title>
<og:description>An unknown techie thinks that Waymo’s key patent should never have been granted—and if he’s right, Waymo might find itself on the other side of a lawsuit.</og:description>
<og:image>https://media.wired.com/photos/5a25ca23a052136e93c69b70/191:100/pass/eric%5B1%5D%20copy.jpg</og:image>
<og:url>https://www.wired.com/story/eric-swildens-uber-waymo-lawsuit-patent/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wired.com/story/eric-swildens-uber-waymo-lawsuit-patent/</dc:identifier>
</item>
<item>
<title>Japan eyes startup visa program</title>
<link>https://asia.nikkei.com/Politics-Economy/Policy-Politics/Japan-eyes-startup-visa-program-to-lure-foreign-businesses</link>
<guid isPermaLink="true" >https://asia.nikkei.com/Politics-Economy/Policy-Politics/Japan-eyes-startup-visa-program-to-lure-foreign-businesses</guid>
<description>&lt;p&gt;TOKYO -- Japan seeks to lure foreign entrepreneurs with one-year startup visas, hoping to create competition for talent among localities to breathe new life into the economy.&lt;/p&gt;


&lt;p&gt;The program, spearheaded by the trade and justice ministries, will take a pilot project national as early as fiscal 2018. It will be included in an economic package to be approved by the cabinet Friday. &lt;/p&gt;

&lt;p&gt;The ministries are looking to revise related laws and ordinances, including those governing strategic special zones. Holders of startup visas will be allowed to reside anywhere in Japan for a year if they submit plans demonstrating that they can open offices and secure funding during their stays.&lt;/p&gt;
&lt;p&gt;Under the existing system, a foreigner intending to start a business in Japan must obtain a business management visa. In addition to opening a Japanese office, the applicant needs at least two full-time employees or to put up more than 5 million yen ($44,385) as capital.&lt;/p&gt;
&lt;p&gt;Exceptions are Tokyo and Fukuoka Prefecture, special zones where foreign startup founders can reside for six months to make the necessary preparations for the business management visa. But only as many as 30 of these special startup visas have been issued over the last two years.&lt;/p&gt;
&lt;p&gt;Most foreign entrepreneurs say six months is still too short. Tokyo has also petitioned the government to lengthen the visa period to a year, since renting office space, opening bank accounts, obtaining funding and other crucial tasks can be difficult for non-Japanese who have just arrived in the country.&lt;/p&gt;
&lt;p&gt;The Ministry of Economy, Trade and Industry will also set up a framework to help local and regional governments aggressively courting startups from abroad.&lt;/p&gt;
&lt;p&gt;The ministry will certify localities providing such assistance as lawyers and accountants who can speak foreign languages as well as offices and housing. The ministry will refer ventures backed by those localities to government-affiliated lenders and public-private funds.&lt;/p&gt;
&lt;p&gt;Despite the abundance of international entrepreneurs, most are concentrated in California's Silicon Valley. In Asia, Singapore has gained a reputation for its startup culture. Japan hopes to improve its international competitiveness by creating a more accommodating environment to attract talent from Asia, Europe and the U.S.&lt;/p&gt;
&lt;p&gt;(Nikkei)&lt;/p&gt;
</description>
<pubDate>Fri, 08 Dec 2017 00:20:19 +0000</pubDate>
<dc:creator>benguild</dc:creator>
<og:title>Japan eyes startup visa program to lure foreign businesses- Nikkei Asian Review</og:title>
<og:type>article</og:type>
<og:description>TOKYO -- Japan seeks to lure foreign entrepreneurs with one-year startup visas, hoping to create competition for talent among localities to breathe ne</og:description>
<og:image>https://asia.nikkei.com/var/site_cache/storage/images/node_43/node_51/2017/201712/1208n/1208n_special-visa-fukuoka/8431326-2-eng-GB/1208N_Special-Visa-Fukuoka_article_main_image.jpg</og:image>
<og:url>https://asia.nikkei.com/Politics-Economy/Policy-Politics/Japan-eyes-startup-visa-program-to-lure-foreign-businesses</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://asia.nikkei.com/Politics-Economy/Policy-Politics/Japan-eyes-startup-visa-program-to-lure-foreign-businesses</dc:identifier>
</item>
<item>
<title>Insomnia REST Client</title>
<link>https://insomnia.rest/</link>
<guid isPermaLink="true" >https://insomnia.rest/</guid>
<description>[unable to retrieve full-text content]&lt;p&gt;Article URL: &lt;a href=&quot;https://insomnia.rest/&quot;&gt;https://insomnia.rest/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=15873452&quot;&gt;https://news.ycombinator.com/item?id=15873452&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Points: 248&lt;/p&gt;&lt;p&gt;# Comments: 104&lt;/p&gt;</description>
<pubDate>Thu, 07 Dec 2017 19:55:29 +0000</pubDate>
<dc:creator>brunoluiz</dc:creator>
<og:url>https://insomnia.rest/</og:url>
<og:type>website</og:type>
<og:title>Insomnia REST Client</og:title>
<og:description>A powerful REST API Client with cookie management, environment variables, code generation, and authentication for Mac, Window, and Linux</og:description>
<og:image>https://insomnia.rest/images/twitter-promo-3.png</og:image>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://insomnia.rest/</dc:identifier>
</item>
<item>
<title>Radical diet can reverse type 2 diabetes, new study shows</title>
<link>https://www.theguardian.com/society/2017/dec/05/radical-diet-can-reverse-type-2-diabetes-new-study-shows?CMP=share_btn_fb</link>
<guid isPermaLink="true" >https://www.theguardian.com/society/2017/dec/05/radical-diet-can-reverse-type-2-diabetes-new-study-shows?CMP=share_btn_fb</guid>
<description>&lt;p&gt;A radical low-calorie diet can reverse type 2 diabetes, even six years into the disease, a new study has found.&lt;/p&gt;
&lt;p&gt;The number of cases of type 2 diabetes is soaring, related to the obesity epidemic. Fat accumulated in the abdomen prevents the proper function of the pancreas. It can lead to serious and &lt;a href=&quot;https://www.theguardian.com/society/2016/nov/14/sixty-five-people-a-day-in-uk-die-early-from-diabetes-complications-study&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;life-threatening complications&lt;/a&gt;, including blindness and &lt;a href=&quot;https://www.theguardian.com/society/2015/jul/15/rise-diabetes-amputations-figures&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;foot amputations&lt;/a&gt;, heart and kidney disease.&lt;/p&gt;
&lt;p&gt;A new study from Newcastle and Glasgow Universities shows that the disease can be reversed by losing weight, so that sufferers no longer have to take medication and are free of the symptoms and risks. Nine out of 10 people in the trial who lost 15kg (two-and-a-half stone) or more put their type 2 diabetes into remission.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-2 | 1&quot;&gt;
&lt;/aside&gt;&lt;p&gt;Prof Roy Taylor from Newcastle University, lead researcher in the trial funded by &lt;a href=&quot;https://www.theguardian.com/society/diabetes&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline&quot;&gt;Diabetes&lt;/a&gt; UK, said: “These findings are very exciting. They could revolutionise the way type 2 diabetes is treated. This builds on the work into the underlying cause of the condition, so that we can target management effectively.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;“Substantial weight loss results in reduced fat inside the liver and pancreas, allowing these organs to return to normal function. What we’re seeing … is that losing weight isn’t just linked to better management of type 2 diabetes: significant weight loss could actually result in lasting remission.”&lt;/p&gt;
&lt;p&gt;Worldwide, the number of people with type 2 diabetes has quadrupled over 35 years, rising from 108 million in 1980 to 422 million in 2014. This is expected to climb to 642 million by 2040. Type 2 diabetes affects almost 1 in 10 adults in the UK and costs the NHS about £14bn a year.&lt;/p&gt;
&lt;p&gt;Type 2 diabetes is usually treated with medication and in some cases, &lt;a href=&quot;https://www.theguardian.com/society/2017/sep/01/uk-needs-to-perform-thousands-more-obesity-operations-say-surgeons&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;bariatric surgery&lt;/a&gt; to restrict stomach capacity, which has also been shown to reverse the disease.&lt;/p&gt;
&lt;p&gt;“Rather than addressing the root cause, management guidelines for type 2 diabetes focus on reducing blood sugar levels through drug treatments. Diet and lifestyle are touched upon, but diabetes remission by cutting calories is rarely discussed,” said Taylor.&lt;/p&gt;
&lt;p&gt;“A major difference from other studies is that we advised a period of dietary weight loss with no increase in physical activity, but during the long-term follow up increased daily activity is important. Bariatric surgery can achieve remission of diabetes in about three-quarters of people, but it is more expensive and risky, and is only available to a small number of patients.”&lt;/p&gt;
&lt;p&gt;The trial results, &lt;a href=&quot;http://www.thelancet.com/journals/lancet/article/PIIS0140-6736(17)33102-1/fulltext?elsca1=tlpr&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;published in the Lancet&lt;/a&gt; and presented at the International Diabetes Federation Congress in Abu Dhabi, show that after one year, participants had lost an average of 10kg, and nearly half had reverted to a non-diabetic state.&lt;/p&gt;
&lt;p&gt;There were 298 adults on the trial aged 20–65, who had been diagnosed with type 2 diabetes within the last six years, from 49 primary care practices in Scotland and Tyneside. Half of the practices put their patients on the very low calorie diet, while the rest were a control group, in which patients received usual care. Only 4% of the control group managed to achieve remission.&lt;/p&gt;
&lt;p&gt;The diet was a formula of 825–853 calories per day for 3 to 5 months, followed by the stepped reintroduction of food over two to eight weeks. The participants were all given support throughout, including cognitive behaviour therapy and were encouraged to exercise.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-2 | 2&quot;&gt;
&lt;/aside&gt;&lt;p&gt;“Our findings suggest that even if you have had type 2 diabetes for six years, putting the disease into remission is feasible”, says Prof Michael Lean from the University of Glasgow who co-led the study. “In contrast to other approaches, we focus on the need for long-term maintenance of weight loss through diet and exercise and encourage flexibility to optimise individual results.”&lt;/p&gt;
&lt;p&gt;Isobel Murray, 65 from North Ayrshire, was one of those who took part. Over two years she lost three and a half stone (22kg) and no longer needs medication. “It has transformed my life,” she said. “I had type 2 diabetes for two to three years before the study. I was on various medications which were constantly increasing and I was becoming more and more ill every day.&lt;/p&gt;
&lt;p&gt;“When the doctors told me that my pancreas was working again, it felt fantastic, absolutely amazing. I don’t think of myself as a diabetic anymore.”&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Taylor said that the trail shows that the very large weight losses that bariatric surgery can bring about are not necessary to reverse the disease. “The weight loss goals provided by this programme are achievable for many people. The big challenge is long-term avoidance of weight re-gain,” he said.&lt;/p&gt;
</description>
<pubDate>Thu, 07 Dec 2017 19:50:23 +0000</pubDate>
<dc:creator>prostoalex</dc:creator>
<og:url>http://www.theguardian.com/society/2017/dec/05/radical-diet-can-reverse-type-2-diabetes-new-study-shows</og:url>
<og:description>Low-calorie diet caused remission in 90% of trial patients who lost 15kg or more, even those who had been diabetic for six years, say researchers</og:description>
<og:image>https://i.guim.co.uk/img/media/3b538d43e5e433564542665582e953bca26243d7/0_1015_3585_2151/master/3585.jpg?w=1200&amp;h=630&amp;q=55&amp;auto=format&amp;usm=12&amp;fit=crop&amp;crop=faces%2Centropy&amp;bm=normal&amp;ba=bottom%2Cleft&amp;blend64=aHR0cHM6Ly91cGxvYWRzLmd1aW0uY28udWsvMjAxNi8wNS8yNS9vdmVybGF5LWxvZ28tMTIwMC05MF9vcHQucG5n&amp;s=faac791b2fa8f794a1cba479aba4cf44</og:image>
<og:type>article</og:type>
<og:title>Radical diet can reverse type 2 diabetes, new study shows</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theguardian.com/society/2017/dec/05/radical-diet-can-reverse-type-2-diabetes-new-study-shows?CMP=share_btn_fb</dc:identifier>
</item>
<item>
<title>Patreon’s new service fee spurs concern that creators will lose patrons</title>
<link>https://techcrunch.com/2017/12/07/patreons-new-service-fee-spurs-concern-that-creators-will-lose-patrons/?hn=1</link>
<guid isPermaLink="true" >https://techcrunch.com/2017/12/07/patreons-new-service-fee-spurs-concern-that-creators-will-lose-patrons/?hn=1</guid>
<description>&lt;img src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/09/patreon-money.png?w=680&quot; class=&quot;&quot;/&gt;&lt;p id=&quot;speakable-summary&quot;&gt;&lt;em&gt;Update: After the negative reaction from Patreon creators, the company &lt;a target=&quot;_blank&quot; href=&quot;https://blog.patreon.com/updating-patreons-fee-structure/&quot;&gt;updated its blog post&lt;/a&gt; about the fee change with a more detailed explanation of how it will supposedly ease confusion over payments. Judging from the &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/jackconte/status/938921277062074368&quot;&gt;response on Twitter&lt;/a&gt;, however, many creators feel Patreon hasn’t adequately addressed how the changes will affect their patrons, who are, after all, the people pledging money.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.patreon.com&quot; rel=&quot;noopener&quot;&gt;Patreon&lt;/a&gt; announced a new service fee policy that it says will help creators keep more money, but many are worried because they believe it will instead discourage their patrons from pledging.&lt;/p&gt;
&lt;p&gt;The crowdfunding platform for artists currently takes a fee of 5% (creators also pay fees charged by payment processors like Stripe or PayPal) from each pledge. That changes on December 18, when patrons will start paying 2.9% plus 35 cents for each individual pledge, according to &lt;a target=&quot;_blank&quot; href=&quot;https://patreon.zendesk.com/hc/en-us/articles/115005631963&quot; rel=&quot;noopener&quot;&gt;Patreon’s product update page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For patrons who back per-post creators, the 2.9% plus 35 cents service fee will be added to all paid posts. Creators don’t have the option to cover or remove service fees from their pledges.&lt;/p&gt;
&lt;p&gt;Patreon says the reasoning behind its new policy is to let creators keep a larger cut of each pledge. “With this update, creators will now take home exactly 95% of each pledge with no additional fees,” the company explained on its update page. “In the past, a creator’s income on Patreon varied because of processing fees every month. They could lose anywhere from 7-15% of their earnings to these fees. This means creators actually took home a lower percentage of pledges than their patrons may have realized.”&lt;/p&gt;
&lt;p&gt;It added that “Creators often take home a lower percentage of their Patreon income than patrons may realize. Standardizing our fees across the board provides consistent expectations and more money for creators on Patreon.”&lt;/p&gt;
&lt;p&gt;Many Patreon creators, however, quickly criticized the change, arguing that it will turn away patrons, particularly people who prefer to pledge small amounts to multiple creators.&lt;/p&gt;
&lt;p&gt;For example, comic artist Gibson Twist said on Twitter that he expects to lose many backers because the new fees will increase most of their current pledges by more than a third. Twist added that as a patron himself, his own charges will also climb significantly if he needs to add 35 cents every time he makes a pledge.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;9&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Some pretty troubling news from &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/Patreon?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;@Patreon&lt;/a&gt; about changes in how they charge Patrons. I’m going to lose a lot of my backers over this. Still looking into it, but I’m very unhappy about this.&lt;/p&gt;
&lt;p&gt;— Gibson Twist (@GibsonTwist) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/GibsonTwist/status/938500101743562754?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 6, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;13.312883435583&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Still a little bewildered that it’s real, but they’re now going to add an additional 35 to the cost of every pledge, plus another 2.9%, which will increase most of my Patrons’ pledges by more than a third. I wouldn’t pay that, I wouldn’t expect anyone else to either.&lt;/p&gt;
&lt;p&gt;— Gibson Twist (@GibsonTwist) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/GibsonTwist/status/938501547910148096?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 6, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;10.422950819672&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;They’re trying to sell it to us as “You get a bigger % of the money!” but a bigger percentage of less money isn’t a selling point. Also, are we not supposed to notice the huge spike in how much Patreon takes of my supporters’ coin? Is this right?&lt;/p&gt;
&lt;p&gt;— Gibson Twist (@GibsonTwist) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/GibsonTwist/status/938502198752874496?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 6, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;10.422950819672&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;They’re trying to sell it to us as “You get a bigger % of the money!” but a bigger percentage of less money isn’t a selling point. Also, are we not supposed to notice the huge spike in how much Patreon takes of my supporters’ coin? Is this right?&lt;/p&gt;
&lt;p&gt;— Gibson Twist (@GibsonTwist) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/GibsonTwist/status/938502198752874496?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 6, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;12.375375375375&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;This is not to mention the extra that will be charged to Patrons supporting many artists, getting dinged 35+ cents each time. Someone supporting 20 people at a buck, that $20 jumps to over $27.50. As a Patron myself, I’ll see my charges increase by nearly 40%. That’s significant.&lt;/p&gt;
&lt;p&gt;— Gibson Twist (@GibsonTwist) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/GibsonTwist/status/938504596049285120?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 6, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;9.5092024539877&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Patreon’s FAQ on this change reads very “Isn’t it great? No down side here!” but this change is almost certainly going to lead to me shutting down my Patreon account. I’m not interested in gouging my audience in something I don’t believe benefits me or them at all.&lt;/p&gt;
&lt;p&gt;— Gibson Twist (@GibsonTwist) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/GibsonTwist/status/938506297690992641?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 6, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;15.588235294118&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Meanwhile, just yesterday, they sent me an email talking about what a “mindblowing year” 2017 has been, so I’m not convinced they’re hurting for cash.&lt;/p&gt;
&lt;p&gt;Please, &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/Patreon?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;@Patreon&lt;/a&gt;, don’t do this. This will hurt a lot of artists, and I am one.&lt;/p&gt;
&lt;p&gt;— Gibson Twist (@GibsonTwist) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/GibsonTwist/status/938507168105619466?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 6, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;12.377245508982&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Some quick math and the numbers are jarring. Right now, artists pocket 80-85ish% of what our Patrons pay. Under the new system, we’ll get roughly 70% of what most Patrons pay. They’re selling to us as “You get a higher % of the money!” but in truth, we’re getting a lot less.&lt;/p&gt;
&lt;p&gt;— Gibson Twist (@GibsonTwist) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/GibsonTwist/status/938510432582717441?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 6, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some patrons also said that the new service fee will incentivize people to make a large pledge to one creator instead of supporting several with smaller amounts because they don’t want their fees to add up, which hurts artists who depend on getting many $1 pledges.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;9.4160583941606&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;The extra cost isn’t tiny if you pledge small amounts to many creators. Pledging $100 to 1 creator will now cost $103.25 which is reasonable. Pledging $1 each to 100 creators will now cost $138 which is not reasonable.&lt;/p&gt;
&lt;p&gt;— James a.k.a TPRJones (@TPRJones) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/TPRJones/status/938646263800705024?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 7, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;10.437699680511&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;it has little to do with the actual fee and more to do with passing it on to the patron, because while creators “”make more”” this change doesn’t even consider the mentality behind pledging small amounts and why people do that at all&lt;/p&gt;
&lt;p&gt;— radruler @ midwestern furry festival (@Radruler) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/Radruler/status/938578424087678977?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 7, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;8.3766233766234&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Small shows like ours get support from listeners paying a few bucks a month from fans. Many creators believe this will shrink the number of shows people will be willing to support.&lt;/p&gt;
&lt;p&gt;— Todd Faulkner (@ToddFaulkner) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/ToddFaulkner/status/938578402017234944?ref_src=twsrc%5Etfw&quot; rel=&quot;noopener&quot;&gt;December 7, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Patreon, which was founded in 2013 and has &lt;a target=&quot;_blank&quot; href=&quot;https://www.crunchbase.com/organization/patreon&quot; rel=&quot;noopener&quot;&gt;raised about $107 million in funding&lt;/a&gt; so far, says it has &lt;a target=&quot;_blank&quot; href=&quot;https://www.patreon.com/about&quot; rel=&quot;noopener&quot;&gt;more than one million subscribers&lt;/a&gt; who pay an average of $12 per month to more than 50,000 creators. Its success prompted Kickstarter to &lt;a target=&quot;_blank&quot; href=&quot;https://techcrunch.com/2017/11/15/kickstarter-reboots-its-patreon-competitor-drip/&quot; rel=&quot;noopener&quot;&gt;retool Drip&lt;/a&gt;, its subscription service for independent musicians, to compete more directly with Patreon. Other rival crowdfunding platforms for creators include Flattr and Steady.&lt;/p&gt;
&lt;p&gt;While creators can ask supporters for pledges on their own using PayPal, Stripe and other payment services, Patreon’s ease of use, thanks to tools &lt;a target=&quot;_blank&quot; href=&quot;https://techcrunch.com/2017/10/25/facebook-connect-for-art-patronage/&quot; rel=&quot;noopener&quot;&gt;like its API&lt;/a&gt;, and popularity helps many make an income (or at least not lose money) from their art. This is especially important for creators who rely on YouTube, but saw their revenue plunge this year as a result of changes to its advertising policies—(an event known as the “&lt;a target=&quot;_blank&quot; href=&quot;https://www.nytimes.com/2017/04/17/arts/youtube-broadcasters-algorithm-ads.html?_r=0&quot; rel=&quot;noopener&quot;&gt;adpocalypse&lt;/a&gt;“). For them, Patreon’s new service fees represent a potential double whammy and are yet another reminder that the online platforms that help them make a livelihood can also very quickly take it away.&lt;/p&gt;
&lt;p&gt;TechCrunch has contacted Patreon for comment.&lt;/p&gt;
</description>
<pubDate>Thu, 07 Dec 2017 17:43:49 +0000</pubDate>
<dc:creator>slyall</dc:creator>
<og:title>Patreon’s new service fee spurs concern that creators will lose patrons [updated]</og:title>
<og:description>Patreon announced a new service fee policy that it says will help creators keep more money, but many are worried because they believe it will instead..</og:description>
<og:image>https://tctechcrunch2011.files.wordpress.com/2017/09/patreon-money.png</og:image>
<og:url>http://social.techcrunch.com/2017/12/07/patreons-new-service-fee-spurs-concern-that-creators-will-lose-patrons/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2017/12/07/patreons-new-service-fee-spurs-concern-that-creators-will-lose-patrons/?hn=1</dc:identifier>
</item>
</channel>
</rss>