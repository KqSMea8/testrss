<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>The Game of Everything, Part 1: Making Civilization</title>
<link>https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/</link>
<guid isPermaLink="true" >https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;If my gravestone says, “Sid Meier, developed Civilization,” I’m happy with that. It’s a game I’m happy to be known for.&lt;/p&gt;
&lt;p&gt;— Sid Meier&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&quot;attachment_3308&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/meier-2/&quot; rel=&quot;attachment wp-att-3308&quot;&gt;&lt;img class=&quot;size-medium wp-image-3308&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/03/meier-170x300.jpg&quot; alt=&quot;&quot; width=&quot;170&quot; height=&quot;300&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/03/meier-170x300.jpg 170w, https://www.filfre.net/wp-content/uploads/2018/03/meier.jpg 386w&quot; sizes=&quot;(max-width: 170px) 100vw, 170px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Sid Meier&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;During Sid Meier’s astonishingly productive first ten years as a designer and programmer, games poured out of him in such a jumble that even his colleagues at MicroProse Software could have trouble keeping straight what all he was working on at any given time. At the beginning of 1990, for instance, he had no fewer than three ambitious projects on the boil. He and his protege Bruce Shelley were finishing up &lt;a href=&quot;https://www.filfre.net/2017/03/railroad-tycoon&quot;&gt;&lt;em&gt;Railroad Tycoon&lt;/em&gt;&lt;/a&gt; with justifiable enthusiasm. The same pair was, with considerably less enthusiasm, returning to &lt;a href=&quot;https://www.filfre.net/2017/03/whats-the-matter-with-covert-action&quot;&gt;&lt;em&gt;Covert Action&lt;/em&gt;&lt;/a&gt;, one of the rare Meier designs that he could just never quite get to work to his satisfaction. And then — because what else should a recently married game designer spend his evenings doing? — Meier had embarked on a third project on his own time, a game he was already calling &lt;em&gt;Civilization&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Like &lt;em&gt;Railroad Tycoon&lt;/em&gt; before it, &lt;em&gt;Civilization&lt;/em&gt; was born out of Meier’s abiding fascination with &lt;a href=&quot;https://www.filfre.net/2016/06/simcity-part-1-will-wrights-city-in-a-box&quot;&gt;&lt;em&gt;SimCity&lt;/em&gt;&lt;/a&gt;. The programmer and simulation designer inside him recognized Will Wright’s so-called “software toy” to be a stunning achievement, yet the purer game designer within him was always a bit frustrated by the aimlessness of the experience. Thus &lt;em&gt;Railroad Tycoon&lt;/em&gt; had attempted to take some of the appeal of &lt;em&gt;SimCity&lt;/em&gt; and “gameify” it by adding computerized opponents and a concrete ending date. It had succeeded magnificently on those terms, but Meier wasn’t done building on what Wright had wrought. In fact, his first conception of &lt;em&gt;Civilization&lt;/em&gt; cast it as a much more obvious heir to &lt;em&gt;SimCity&lt;/em&gt; than even &lt;em&gt;Railroad Tycoon&lt;/em&gt; had been. Whereas &lt;em&gt;SimCity&lt;/em&gt; had let the player build her own functioning city, &lt;em&gt;Civilization&lt;/em&gt; would let her build a whole network of them, forming a country — or, as the game’s name would imply, a civilization.&lt;/p&gt;
&lt;p&gt;This, then, was the first of three conceptual layers which would eventually make up the game of &lt;em&gt;Civilization&lt;/em&gt; that the world would come to know. Meier abstracted away most of the details of the individual cities, letting the player decide only on which key buildings were built, whilst boiling each city down to a handful of numbers detailing its population, its economy, and its quality of life. This being a country rather than a city simulator, the spaces between the cities were just as important as the urban centers themselves. Meir thus made it possible to irrigate the countryside, to build roads to facilitate commerce, to build mines for digging up the raw materials needed by the centers of industry. At this early stage, &lt;em&gt;Civilization&lt;/em&gt;, later to be hailed as the most iconic exemplar of turn-based grand-strategy games, ran in real time, like &lt;em&gt;SimCity&lt;/em&gt; and &lt;em&gt;Railroad Tycoon&lt;/em&gt; before it.&lt;/p&gt;
&lt;p&gt;Around March of 1990, after working on &lt;em&gt;Civilization&lt;/em&gt; for some months completely alone, Meir began to include Bruce Shelley in the role of sounding board. Shelley worked a standard eight-to-five day at MicroProse most of the time, while Meier hewed to a typical hacker’s schedule, showing up at noon or shortly before and working late into the evening. Each night, before he went home, he’d leave a disk on Shelley’s chair with the latest version of &lt;em&gt;Civilization&lt;/em&gt;. The next morning, when Shelley arrived at work, he’d play it for an hour or so in order to give Meier his feedback. For perhaps as long as a year, Shelley was literally the only person allowed to play the nascent &lt;em&gt;Civilization&lt;/em&gt;, under strict instructions to ignore the pleas of his colleagues peering over his shoulder. It was, to say the least, an unorthodox model of game development, but it somehow worked for these two unique personalities. Far from remaining just a glorified play-tester for very long, Shelley got deeper and deeper into the design. As he did so, &lt;em&gt;Civilization&lt;/em&gt; started to become something else entirely.&lt;/p&gt;
&lt;p&gt;The switch from a real-time to a turn-based approach was made quite early on, possibly even before those disks started appearing on Bruce Shelley’s chair. It would be wonderful to know the details behind the decision, but neither Meier nor Shelley can recall much of the specifics. It’s likely, however, that the change was made when Meier and Shelley — or Meier alone — started mulling over how to prevent &lt;em&gt;Civilization&lt;/em&gt; from falling into the &lt;em&gt;SimCity&lt;/em&gt; trap of becoming more of a software toy than a game in the traditional sense. The obvious way to gameify the experience was to include competing civilizations, just as &lt;em&gt;Railroad Tycoon&lt;/em&gt; had included competing robber barons. But conflicts between civilizations, unlike conflicts between business interests, always have looming over them the prospect of that ultimate diplomatic arbiter: war. So, including competing civilizations seemed to demand that a whole new layer of wargame strategy be mated to the existing game of city and country development.&lt;/p&gt;
&lt;p&gt;Meier, who somehow found time to remain an avid player of strategy games when he wasn’t developing them, had for years been playing one called &lt;em&gt;Empire&lt;/em&gt;, a design so old that it had been born on a big DEC PDP-10 rather than a microcomputer. &lt;em&gt;Empire&lt;/em&gt; has a complicated pre-commercial history, which is complicated further by the fact that at least three mostly or entirely separate games were given the name over the course of the 1970s. But the most relevant version for our purposes was created by Walter Bright, a 20-year-old student at the California Institute of Technology, in 1977. Bright himself later ported it to microcomputers, efforts which culminated in him selling the game to a small publisher called Interstel, who made something of a specialty out of pulling hoary old classics out of the dustbin of 1970s institutional computing, giving them a coat of spit and polish, and introducing them to the home-computer-owning public. (Their first game, 1984’s &lt;a href=&quot;http://www.mobygames.com/game/star-fleet-i-the-war-begins&quot;&gt;&lt;em&gt;Star Fleet I: The War Begins!&lt;/em&gt;&lt;/a&gt;, had done the same thing for the old mainframe &lt;a href=&quot;https://www.filfre.net/2014/12/simon-schusters-treks-to-nowhere&quot;&gt;&lt;em&gt;Star Trek&lt;/em&gt; game&lt;/a&gt;.) It was &lt;a href=&quot;http://www.mobygames.com/game/empire-wargame-of-the-century&quot;&gt;Interstel’s version of &lt;em&gt;Empire&lt;/em&gt;&lt;/a&gt;, published in 1987 with the subtitle &lt;em&gt;Wargame of the Century&lt;/em&gt;, that Sid Meier knew best.&lt;em&gt;&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At a time when companies like &lt;a href=&quot;https://www.filfre.net/2016/03/joel-billings-and-ssi&quot;&gt;SSI&lt;/a&gt; were publishing bafflingly complicated wargames in the name of faithfulness to history, &lt;em&gt;Empire&lt;/em&gt; stood out for its elegant simplicity; it was more &lt;a href=&quot;https://boardgamegeek.com/boardgame/181/risk&quot;&gt;&lt;em&gt;Risk&lt;/em&gt;&lt;/a&gt; than &lt;a href=&quot;https://boardgamegeek.com/boardgame/1035/squad-leader&quot;&gt;&lt;em&gt;Squad Leader&lt;/em&gt;&lt;/a&gt;. A world on which to play is chosen or, more commonly, generated randomly for each game. You begin in possession of a single city surrounded by just eight visible squares of the 5684 of them that make up the map; the rest of the world remains a mystery. Each city can be assigned to build one of a handful of armies, aircraft, and ships, each of which demands a set number of turns to bring to completion. Your first objective must be to build a unit in your first city and set out to explore the map as quickly as possible, taking possession of any neutral cities you discover. But eventually you run into the units and cities of your competitors, whereupon you all duke it out, leaving the last person left standing as the winner. Simplicity really is the watchword throughout. The military units, for instance, have their capabilities abstracted into just a handful of numbers: a movement speed, an attack rating, a defense rating, a damage rating describing the number of hits required to destroy it. Combat occurs when one player drives a unit into a square occupied by an enemy unit, whereupon the computer throws a virtual die, runs the result through an equation, and announces the outcome of the battle. A certain kind of player lauds &lt;em&gt;Empire&lt;/em&gt; as a &lt;em&gt;pure&lt;/em&gt; strategy game, a balanced challenge which rewards purely strategic thinking instead of muddying the issue with the superiority of Nazi optics versus the better armor of Allied tanks and all the rest. (Of course, another kind of player, of a more &lt;a href=&quot;https://www.filfre.net/2011/07/the-rise-of-experiential-games&quot;&gt;experiential bent&lt;/a&gt;, finds it utterly uninteresting for the same reason.)&lt;/p&gt;
&lt;div id=&quot;attachment_3314&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/empire/&quot; rel=&quot;attachment wp-att-3314&quot;&gt;&lt;img class=&quot;size-full wp-image-3314&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/03/empire.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/03/empire.png 600w, https://www.filfre.net/wp-content/uploads/2018/03/empire-300x225.png 300w, https://www.filfre.net/wp-content/uploads/2018/03/empire-500x375.png 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Issuing orders to a unit in Empire…&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;attachment_3316&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/civ_022-2/&quot; rel=&quot;attachment wp-att-3316&quot;&gt;&lt;img class=&quot;size-full wp-image-3316&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/03/civ_022-1.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;450&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/03/civ_022-1.png 600w, https://www.filfre.net/wp-content/uploads/2018/03/civ_022-1-300x225.png 300w, https://www.filfre.net/wp-content/uploads/2018/03/civ_022-1-500x375.png 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;…and doing the same thing in &lt;em&gt;Civilization&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There’s really no delicate way to put this: confirming the old adage that good artists borrow while great ones steal, Sid Meier pretty much ripped off &lt;em&gt;Empire&lt;/em&gt; wholesale and transported it into his burgeoning &lt;em&gt;Civilization&lt;/em&gt;. The unknown map just begging to be revealed, the combat system, even many of the specific commands a player could issue to her units… all arrived virtually unchanged in &lt;em&gt;Civilization&lt;/em&gt;, to such an extent that anyone who had played &lt;em&gt;Empire&lt;/em&gt; — and Bruce Shelley, for one, certainly had — would immediately know what to do. Where Meier did make changes, it was generally to simplify &lt;em&gt;Empire&lt;/em&gt;‘s already hugely abstracted approach to wargaming yet further. For example, he removed the damage rating from his units altogether in favor of a one-hit-and-you’re-done model. (This would lead to one of the more indelible images of &lt;em&gt;Civilization&lt;/em&gt; in the cultural memory: that of a Roman phalanx destroying, thanks to a lucky roll of the virtual die, a platoon of modern tanks.)&lt;/p&gt;
&lt;p&gt;By this point, Meier and Shelley had a fairly credible game already, a version of &lt;em&gt;Empire&lt;/em&gt; grafted to a city-building game of economic development which determined how many and what sorts of military units the player could produce and support. Said units were confined to the ancient era: legionnaires, phalanxes, chariots, cavalry. Shelley remembers the two of them discussing the fact that, should worse come to worst, they could probably just polish up what they had and release it as a beer-and-pretzels strategy game of the Punic Wars or something. Yet neither one was at all inclined to do so; to turn &lt;em&gt;Civilization&lt;/em&gt; into a just another conquer-the-world game would be to lose some palpable if unarticulated sense of &lt;em&gt;otherness&lt;/em&gt; that had been lurking within the project from the very beginning.&lt;/p&gt;
&lt;div id=&quot;attachment_3312&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;41&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/civ_1_advances_chart/&quot; rel=&quot;attachment wp-att-3312&quot;&gt;&lt;img class=&quot;wp-image-3312&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/03/civ_1_advances_chart-300x93.jpg&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;186&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/03/civ_1_advances_chart-300x93.jpg 300w, https://www.filfre.net/wp-content/uploads/2018/03/civ_1_advances_chart-768x238.jpg 768w, https://www.filfre.net/wp-content/uploads/2018/03/civ_1_advances_chart-1024x317.jpg 1024w, https://www.filfre.net/wp-content/uploads/2018/03/civ_1_advances_chart-500x155.jpg 500w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;&lt;em&gt;Civilization&lt;/em&gt;‘s Advances Chart is one of the most awe-inspiring documents I’ve ever encountered in my life. Colloquially referred to as the “tech tree,” it actually encompasses much more than that name would imply. It’s rather an endlessly fascinating chronicle of human progress, of what begot what, not just in the realm of technology but in those of art, culture, thought… in &lt;em&gt;everything&lt;/em&gt;. I love it so much that I very nearly started another blog just to explore its interconnections. Yes, really.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The moment when they discovered their game’s true reason for existing came when they conjured up the “Advances Chart,” a timeline of scientific, technological, and cultural advancements up which the player could guide her civilization. With this idea, the third and most defining layer of the game fell into place. Not only did it change the game, it also changed the nature of the design process. The pair’s afternoons were soon filled by discussions — and occasional arguments — ranging back and forth across the timeline of progress. Others inside MicroProse’s cramped offices found these discussions so fascinating that they couldn’t help listening in, to the detriment of their own productivity. Shelley remembers making one proposal that wouldn’t ultimately make it into the game, for introducing a technology no less plebeian than the stirrup to the Advances Chart. “Why the stirrup?” asked a baffled Meier. Well, explained Shelley, horse-borne warfare didn’t instantly begin when people began riding horses; if you hit someone with a lance while riding without stirrups you’d wind up pushing yourself right off the horse. Knights in shining armor, massed cavalry charges, cowboys and Indians… the humble stirrup, just as much as the domestication of horses, had been the key to all of it. These were the sorts of insights &lt;em&gt;Civilization&lt;/em&gt; was now giving its designers, as it soon would its players as well.&lt;/p&gt;
&lt;p&gt;Beyond the starting slate of seven possibilities for research, the Advances Chart was based on prerequisites: to research Mysticism required one to already have discovered Ceremonial Burial, to research Chivalry required one to have Horseback Riding and Feudalism. The prerequisites were partially based on gameplay considerations, but at least as often teased out real, sometimes subtle linkages between the great achievements of humanity. Why, for instance, should Democracy require Literacy? Because a functioning democracy requires a literate population able to read for themselves and make responsible decisions from a position of knowledge, that’s why. Why should Labor Unions require Mass Production? Because the awful working conditions in factories provided the impetus for organizing and collectively demanding better conditions from the moneyed interests who owned the factories, that’s why.&lt;/p&gt;
&lt;p&gt;In order to form such connections, Meier and Shelley spent hours poring over history books, trying to understand what begot what and why. They were undoubtedly punching above their weight in trying to wrestle into place so all-encompassing a document as the &lt;em&gt;Civilization&lt;/em&gt; Advances Chart — who wouldn’t be? — but they were helped by the fact that both had been dedicated readers of history for years, amassing substantial personal libraries.&lt;sup id=&quot;rf1-3307&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/#fn1-3307&quot; title=&quot;Soren Johnson, who many years later worked as co-designer of Civilization III and lead designer of Civilization IV, remembers Meier loaning him some reference books near the beginning of his involvement with the franchise, telling him that they might be good resources to use in refining or expanding the Advances Charts of the earlier games. Flipping through the books, he noticed underlined phrases like “ceremonial burial.” With a start, he realized that he had in his hands a history book that had itself become a piece of history: one of Sid Meier’s original sources for the original Civilization.&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; And when said personal libraries failed them, they could take advantage of the location of MicroProse’s offices in suburban Baltimore by making the short drive to one of the Smithsonian museums or the Library of Congress.&lt;/p&gt;
&lt;p&gt;Meier and Shelley didn’t, as would have been all too easy for two old grognards like them, limit their research to the realm of the military, nor for that matter to the military-industrial complex. As some of the examples I’ve already named illustrate, they really did try to encompass &lt;em&gt;everything&lt;/em&gt; on their Advances Chart, including philosophy, the arts, even the slow march of human rights toward true equality. They resisted the natural urge to dismiss or belittle those things which fell outside the compass of their usual interests. Here, another Shelley anecdote is telling. Very late in the game’s development, he asked one of MicroProse’s artists, who given the company’s usual product portfolio was accustomed to drawing pictures of soldiers, tanks and airplanes, to draw a picture of Michelangelo’s David statue for the &lt;em&gt;Civilization&lt;/em&gt; manual. Why on earth do you want a picture of &lt;em&gt;that&lt;/em&gt;, asked the artist. Shelley admitted that he was no great art historian or even art enthusiast. But, he said, people who are those things have told me via their books that this statue is very, very important — even, some of them might say, one of the great achievements of human civilization — and I respect their point of view. That noble broad-mindedness became an essential part of &lt;em&gt;Civilization&lt;/em&gt;‘s personality, keeping it from becoming just another min-max-ing exercise in conflict management. I &lt;a href=&quot;https://www.filfre.net/2018/02/dr-brain&quot;&gt;recently praised&lt;/a&gt; the &lt;em&gt;Dr. Brain&lt;/em&gt; series of educational games from Sierra for their unwillingness to be confined to a single topic, for the implicit argument they make that &lt;em&gt;all&lt;/em&gt; fields of human endeavor are equally worthy. Vastly different though it is as a game, &lt;em&gt;Civilization&lt;/em&gt; manifests the same spirit.&lt;/p&gt;
&lt;p&gt;By the time the Advances Chart extended to roughly the present day, the simple mechanisms Meier and Shelley had built the game around were finally beginning to break down. Meier remembers the introduction of aircraft units, which demanded that some ugly special rules be grafted onto the heretofore beautifully simple &lt;em&gt;Empire&lt;/em&gt;-derived military layer, as a particular inflection point, a sign to the two designers that it was about time to wrap things up. He recalls introducing pollution to the game at least partly as a way of sending the same signal to the player.&lt;/p&gt;
&lt;p&gt;Still, the spirit of the Advances Chart would clash horribly with a game which could be won only by conquering the world. What could become an alternative endgame for the player who preferred building to conquering? It was Shelley who suggested the perfect builder’s path to victory: advancing all the way to the end of the Advances Chart would allow you to build and launch a spaceship for Alpha Centauri, thus inaugurating the next great phase of humanity’s existence. Granted, it didn’t quite make sense in the context of the rest of the advances chart, which otherwise confined itself to things that had already been discovered or that hopefully would be in the fairly near future. &lt;em&gt;Civilization&lt;/em&gt; would offer no explanation of how humanity would go from Robotics, (Apollo-style) Space Flight, and Plastics to bridging the 4.37 light years that separate our solar system from its closest neighbor — a leap that could require a whole other Advances Chart at least as big as the one Meier and Shelley already had to actually bring to fruition in any sort of grounded way. One could argue that a voyage to Mars might have made a better final goal, but Meier and Shelley clearly wanted something audacious, and audacious a trip to Alpha Centauri certainly is.&lt;/p&gt;
&lt;p&gt;Now it only remained for the two designers to glue their three layers of gameplay into a coherent whole. On the surface, this seemed far from a simple task. The issues of scaling they faced would have defeated many a designer: military operations took place on a scale of days and weeks, construction projects played out on a scale of months and years, while cultures moved up the Advances Chart only over a time frame of decades and centuries.&lt;/p&gt;
&lt;p&gt;My regular readers may recall that this same pair of designers had faced an only slightly less extreme version of this clash of time and scale with &lt;em&gt;Railroad Tycoon&lt;/em&gt;. There the question had been how to integrate the operational aspect of the game — also known as the “model-railroading” aspect — with the business of running a real railroad over a period of years and decades. They solved the problem, you may recall, by effectively ignoring it, by running the entire game on the macro time scale of the business layer and just letting the operational layer deal with it. This meant that individual trains could take months between leaving one station and arriving at another, and that major transportation corridors like Boston to New York might be served by just two or three train departures per &lt;em&gt;year&lt;/em&gt;. You could rationalize all of this as an abstraction of the hundreds of trains that were really running over these tracks, or you could just not think about it at all. The point was that it led to a fun game that captured the &lt;em&gt;spirit&lt;/em&gt; of its subject matter.&lt;/p&gt;
&lt;p&gt;Faced with the same problem in &lt;em&gt;Civilization&lt;/em&gt;, Meier and Shelley took the exact same approach. The game would run on a time frame appropriate to the theme of human progress on the grand scale. Each turn would represent fully twenty years from 4000 BC to 1000 AD, followed by ten years until 1500, five years until 1750, two years until 1850, and one year thereafter; the shortening spans of time would depict the steadily accelerating pace of progress as the world lurched toward modernity. This had some extremely weird implications for the &lt;em&gt;Empire&lt;/em&gt;-derived military game in particular: it meant that battles could conceivably span centuries —  the Trojans and the Greeks had nothing on this lot! — and wars could potentially span millennia. For that matter, it meant that just marching a phalanx from one side of one’s country to the other could require a couple of centuries in itself. You can, once again, choose to rationalize this as an abstraction of reality, or you can just not think about it. Yet again, the point is that it’s fun and that it &lt;em&gt;works&lt;/em&gt; for the game.&lt;/p&gt;
&lt;p&gt;With the three layers of the design thus welded together, the rest of the game we’ve come to know as &lt;em&gt;Civilization&lt;/em&gt; fell into place. Meier and Shelley turned to the history books again to select fifteen current or historical cultures for inclusion, from the Americans to the Zulus, one of which the player could choose to play, the others of which would serve as potential rival civilizations. Fairly rudimentary artificial intelligence came in for this last group, with the behavior of each rival civilization’s leader defined on an axis of three values, from “militaristic” to “civilized,” from “aggressive to friendly,” from “expansionist” to “perfectionist.” An extremely rudimentary diplomatic model came in, with geopolitical relations boiled down to make war or make peace, demand tribute or pay tribute.&lt;/p&gt;
&lt;p&gt;The final indelible piece of the &lt;em&gt;Civilization&lt;/em&gt; experience arrived in the form of “Wonders of the World,” special structures which only one civilization would be allowed to build in one city in the course of an entire game. Each would confer some tangible benefit, but just as important would be the bragging rights of having constructed the Pyramids of Giza or the Great Wall of China. While the idea and the name were obviously inspired by the Seven Wonders of the Ancient World, Meier and Shelley wound up using only four of the Seven. The balance of the list was filled out with seventeen other landmark achievements, many of them not actually physical structures at all: Magellan’s circumnavigation of the world, Darwin’s theory of evolution, the United Nations, the Apollo moon landings, even — reaching now into the realm of wishful thinking — a cure for cancer. Just as had happened with the Advances Chart, the list of Wonders became far more wide-ranging than one would have any right to expect. How many other grognards would have taken the time to single out women’s suffrage as one of the Wonders of the World?&lt;/p&gt;
&lt;p&gt;Other designers — some of them great ones — had occasionally dreamed about a game of this scale and scope, but none had ever come close to bringing the dream to fruition. At the very same time that Meier and Shelley were working on &lt;em&gt;Civilization&lt;/em&gt;, two other hugely admired designers were coincidentally each working on a similarly themed project of their own, only to be forced to scale it back dramatically. Dan Bunten&lt;sup id=&quot;rf2-3307&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/#fn2-3307&quot; title=&quot;Dan Bunten began living as the woman Danielle Bunten Berry shortly after the publication of Global Conquest. As per my usual editorial policy on these matters, I refer to her as “he” and by her original name only to avoid historical anachronisms and to stay true to the context of the times.&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; wound up with &lt;a href=&quot;http://www.mobygames.com/game/dos/global-conquest&quot;&gt;&lt;em&gt;Global Conquest&lt;/em&gt;&lt;/a&gt;, a competent but less than earth-shaking conquer-the-world strategy game, while Chris Crawford wound up with a game every bit as unfun as its title would imply: &lt;a href=&quot;http://www.mobygames.com/game/global-dilemma-guns-or-butter&quot;&gt;&lt;em&gt;The Global Dilemma: Guns or Butter&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Why, we might ask, did &lt;em&gt;Civilization&lt;/em&gt; turn out differently? A big piece of the reason must be Sid Meier’s unwavering commitment to &lt;em&gt;fun&lt;/em&gt; as the final arbiter in game design, as summed up in his longstanding maxim of “Fun trumps history.” Meier, Bunten, and Crawford actually met on at least one occasion to discuss the games of everything they each had in progress. Crawford’s recollections of that meeting are telling, even if they’re uttered more in a tone of condemnation than approbation: “Sid had a very clear notion: he was going to make it fun. He didn’t give a damn about anything else; it was going to be fun. He said, ‘I have absolutely no reservation about fiddling with realism or anything, so long as I can make it more fun.'”&lt;/p&gt;
&lt;p&gt;But another, less obvious piece of the puzzle is inherent to the way that &lt;em&gt;Civilization&lt;/em&gt; was developed. Imagine yourself in the shoes of a designer who’s just decided to make a game about everything. How do you even begin? What rules, what mechanics, what interface can you possibly employ? It is, needless to say, a daunting prospect. Game design being an art of the possible, you inevitably begin to pare away at your grand vision, trying to arrive at some core which you can actually hope to implement. In the process, though, you also begin cutting into the &lt;em&gt;soul&lt;/em&gt; of the idea, until you arrive at a dispiriting shadow of it like &lt;em&gt;Global Conquest&lt;/em&gt; or &lt;em&gt;The Global Dilemma&lt;/em&gt;. Sid Meier, by contrast, never really &lt;em&gt;decided&lt;/em&gt; to make a game about everything at all; his design just kind of went there on its own. Thus while Bunten and Crawford were cutting back on their ambitions, Meier was expanding on his. Rather than arriving as an immaculate conception, &lt;em&gt;Civilization&lt;/em&gt; was allowed to grow into itself, employing rules, mechanics, and interfaces which had already been proven on smaller scales.&lt;/p&gt;
&lt;p&gt;A persistent question surrounding &lt;em&gt;Civilization&lt;/em&gt; the computer game — and one that has come to have urgent legal relevance — has been the influence of an &lt;a href=&quot;https://boardgamegeek.com/boardgame/71/civilization&quot;&gt;earlier game with the same name&lt;/a&gt;, an Avalon Hill board game designed by Francis Tresham and published in 1980. The theme of the board game matches that of the computer game — the advancement of human civilization from its formative stages — but the two diverge dramatically in many ways. The board game, for instance, ends in approximately 250 BC, while, as already noted, the computer game stretches into the near future. Mechanically as well, the two games are quite different; the board game doesn’t have anything like the computer game’s Advances Chart, instead using decks of cards for the purpose.&lt;/p&gt;
&lt;p&gt;Seasoned grognards that they were, Meier and Shelley could hardly not have been acquainted with the Avalon Hill game, which enjoyed considerable popularity in its day among the hardcore wargame crowd who were willing to devote the five or six hours that a complete playthrough of it usually required. Yet Meier — who, it should be noted, has always been very transparent about the inspirations for his games — has claimed to have played the board game only once in his life, and not to have had it in mind at all when he started making the computer game. Shelley, who worked at Avalon Hill prior to coming to MicroProse, admits to slightly more familiarity, but likewise dismisses the notion of having borrowed anything more than certain themes and a name, the latter apparently with no regard to what had come before. Sid Meier could be, much to &lt;a href=&quot;https://www.filfre.net/2015/03/microproses-simulation-industrial-complex-or-the-ballad-of-sid-and-wild-bill&quot;&gt;MicroProse head “Wild” Bill Stealey’s&lt;/a&gt; chagrin, extremely naive about matters of business and intellectual property, and simply stuck the obvious name on his own game without ever thinking about what conflicts it might create.&lt;/p&gt;
&lt;p&gt;Stealey was no grognard, and thus had no idea about the name’s history until MicroProse had already begun advance promotion of their take on &lt;em&gt;Civilization&lt;/em&gt;. It was at this point that a very unhappy Eric Dott, the president of Avalon Hill, called him up and said, “Wild Bill, &lt;em&gt;Civilization&lt;/em&gt; is my game. You’re stealing it.” Further complicating the situation was the fact that the same two men had had very nearly same conversation barely a year before, when MicroProse had published &lt;em&gt;Railroad Tycoon&lt;/em&gt;. Dott had been convinced then that the game in question bore suspicious similarities to the Avalon Hill board game &lt;a href=&quot;https://boardgamegeek.com/boardgame/421/1830-railways-robber-barons&quot;&gt;&lt;em&gt;1830: Railways &amp;amp; Robber Barons&lt;/em&gt;&lt;/a&gt;, ironically also a Francis Tresham design, and one on which Bruce Shelley had done some work during his time at the company. Stealey had been able to smooth things over then, but now here they were again, and with what seemed a much more clear-cut case of trademark infringement at that. To make matters that much worse, Avalon Hill was about to unveil a whole new, even more complicated version of the original &lt;em&gt;Civilization&lt;/em&gt; board game, under the name of &lt;a href=&quot;https://boardgamegeek.com/boardgame/177/advanced-civilization&quot;&gt;&lt;em&gt;Advanced Civilization&lt;/em&gt;&lt;/a&gt;, and was thus particularly unenthused about having a computer game with the same name confusing the issue at this of all junctures.&lt;/p&gt;
&lt;p&gt;Wild Bill can best explain what happened next in his own inimitable style:&lt;/p&gt;
&lt;blockquote readability=&quot;20&quot;&gt;
&lt;p&gt;So, I had lunch with Eric. I bought him lunch because I was buttering him up. I said, “Eric, I apologize. I didn’t know Sid was doing this, but I think it’s going to be a good game. I think we won’t sell near as many as you sell as boxed games.” You know, one of those games you buy in a box and play on a table — tabletop games. “What if I put a card in every one of the games that says, ‘Get $5 off Civilization from Avalon Hill,’ and you do the same for me?'” After two or three glasses of wine, he agreed — one of his bigger mistakes. He would have made a lot more money if he had said, “Okay, give me 10 percent of it.” All he got was a card in the game box. If he had 10 percent of Civilization, Avalon Hill would still be around today, right?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, the presence of those cards in the boxes did nothing to ease the confusion surrounding these two very different games with the same name. To this day, there are many who believe Sid Meier’s &lt;em&gt;Civilization&lt;/em&gt; to be merely a computerized version of the board game.&lt;/p&gt;
&lt;p&gt;Stealey and Dott’s gentleman’s agreement wouldn’t keep the lawyers at bay forever; the issue would be revisited again, with major consequences for all involved. But that would be only years in the future, and thus must be fodder for a &lt;em&gt;much&lt;/em&gt; later article of mine.&lt;/p&gt;
&lt;p&gt;By the time Stealey and Dott had their tête-à-tête, the duo of Meier and Shelley had long since begun including their colleagues in the &lt;em&gt;Civilization&lt;/em&gt; development and play-testing process. The game had a split reputation inside MicroProse. The technical and creative staff, almost to a person, loved it, was convinced that this was not just another game, not even just another very good Sid Meier game, but a true landmark in the offing for their company and for their industry. And yet the more businesslike side of the company, taking their cue from the man at the top of the food chain, was rather less enthused.&lt;/p&gt;
&lt;p&gt;The fact of the matter was that Wild Bill Stealey wasn’t capable of getting truly, personally enthused over &lt;em&gt;any&lt;/em&gt; game that wasn’t a military flight simulator. Just as had happened with &lt;a href=&quot;https://www.filfre.net/2015/07/pirates&quot;&gt;&lt;em&gt;Pirates!&lt;/em&gt;&lt;/a&gt; and &lt;em&gt;Railroad Tycoon&lt;/em&gt;, Sid Meier’s two earlier masterpieces, he never quite seemed to grasp what his star designer was on about with &lt;em&gt;Civilization&lt;/em&gt;, couldn’t seem to understand why he preferred to spend his time on a high-falutin’ project like this one instead of, say, &lt;em&gt;F-15 Strike Eagle III&lt;/em&gt;. Yet Meier, whose confidence in himself had grown with every game of his that MicroProse published, was no longer a designer to whom Stealey could dictate directions; the last gasp of &lt;em&gt;that&lt;/em&gt; had been his reluctantly finishing up &lt;em&gt;Covert Action&lt;/em&gt; at Stealey’s insistence. Faced with that reality, Stealey duly provided &lt;em&gt;Civilization&lt;/em&gt; with the artists and other resources Meier and Shelley needed to finish it, announced the game to the press (thus leading to that fateful lunchtime truce with Eric Dott), and even ran some modest pre-release advertisements. But he wasn’t overly generous with the &lt;em&gt;Civilization&lt;/em&gt; development team; certainly the finished game is no graphical feast, with a look that verges at times on amateurish. Shelley in particular has described his frustration with feeling perpetually under-appreciated by MicroProse’s management. The final insult came when, after shipping their staggeringly ambitious game in December of 1991, he and Meier saw their bonuses cut because they had done so six weeks late, missing the bulk of the Christmas buying season.&lt;/p&gt;
&lt;p&gt;Whatever Stealey personally thought of &lt;em&gt;Civilization&lt;/em&gt;, his ambivalence is by no means the only explanation for the relative lack of resources at his star designer’s disposal. Meier, who had co-founded MicroProse with Stealey back in 1982, had seven years later made a conscious decision to step back from the roller-coaster ride that running a company alongside Wild Bill was always doomed to be. In 1989, he had convinced Stealey to buy him out so he could focus strictly on designing games, becoming a “super contractor” for what had once been his own company. Still, nothing could entirely insulate him and Shelley and their latest game from an unstable situation around them. The fact was that MicroProse was in a rather precarious position as Meier and Shelley were finishing their latest masterpiece. The problems reached back to 1988, when Stealey, having seen his company clear $1 million in profit the previous year, embarked on two major new initiatives that pushed them well outside their comfort zone of military simulations for American home computers. Neither of them would have a happy ending.&lt;/p&gt;
&lt;p&gt;One of the new initiatives was an aggressive expansion into the European market, including a new branch office in Britain and the purchase of the &lt;a href=&quot;https://www.filfre.net/2015/05/fire-and-rain&quot;&gt;Firebird and Rainbird labels&lt;/a&gt; from British Telecom. In principle, opening a MicroProse subsidiary in Britain was a smart, even visionary move to get in on the second biggest computer-game market in the world, but the move was horribly mismanaged from the start, collapsing into chaos in the summer of 1989, when Stealey flew to Britain to personally accuse a managing director of embezzling £200,000 from the company coffers. The purchase of Firebird and Rainbird, on the other hand, didn’t make much sense even at the time as anything other than expansion for expansion’s sake — their collection of action games and old-school text adventures didn’t sit terribly well beside the MicroProse catalog — and quickly turned out to be a bust, with both labels, which had enjoyed considerable respect at the time of the purchase, disappearing entirely by 1991 under a cloud of yet more transatlantic miscommunication.&lt;/p&gt;
&lt;div id=&quot;attachment_3309&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/stealey-2/&quot; rel=&quot;attachment wp-att-3309&quot;&gt;&lt;img class=&quot;size-medium wp-image-3309&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/03/stealey-221x300.jpg&quot; alt=&quot;&quot; width=&quot;221&quot; height=&quot;300&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/03/stealey-221x300.jpg 221w, https://www.filfre.net/wp-content/uploads/2018/03/stealey.jpg 233w&quot; sizes=&quot;(max-width: 221px) 100vw, 221px&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Wild Bill Stealey with his ill-fated &lt;em&gt;F-15 Strike Eagle&lt;/em&gt; arcade game.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;But it was the other big initiative of 1988 that was closest to Wild Bill Stealey’s flyboy heart. Frustrated by the limitations of the personal computers which ran his beloved flight simulators, he concocted a scheme to build his own hardware in order to do them justice. Gene Lipkin, a co-founder of the original Atari, took charge of a project to build coin-op versions of MicroProse’s games for arcades, beginning with &lt;em&gt;F-15 Strike Eagle&lt;/em&gt;, their most successful game of all. The arcade version of that game, which was unveiled in 1990, could draw 60,000 polygons per second to its huge 27-inch screen at a time when the average PC-based MicroProse simulator was pushing about 1500. But, impressive though the hardware may have been, the whole project was profoundly ill-conceived from a business perspective. Like its microcomputer equivalent, the arcade version of &lt;em&gt;F-15 Strike Eagle&lt;/em&gt; was a deep, fairly realistic game that would require some time even to fully understand, much less master. That was fine for home-computer software, but totally at odds with the quick thrills typically offered by arcade quarter-munchers. The extended play time, the complex missions which the player had to earn the right to play… none of it made any sense whatsoever as an arcade game. Even the First Gulf War, which was being televised live every night on CNN and creating a voracious appetite for flight simulators on home computers, couldn’t save it. It flopped.&lt;/p&gt;
&lt;p&gt;As all of these misbegotten ventures ran their course, the losses piled up at MicroProse: $1.4 million in 1988, $300,000 in 1989, $600,000 in 1990. In 1991, Stealey decided that the best way to clear all of his failed ventures off the books and start moving forward again was to launch an IPO. On October 3, 1991, just as Meier and Shelley and their helpers were in the midst of the final mad scramble to finish &lt;em&gt;Civilization&lt;/em&gt;, MicroProse issued 2 million shares at an initial price of $9 each. It was, to say the least, an unconventional move; companies normally launch IPOs when things are going well, not when they’re going poorly.&lt;sup id=&quot;rf3-3307&quot;&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/#fn3-3307&quot; title=&quot;MicroProse had become a distributor of “affiliated labels,” smaller publishers who paid for access to their distribution network, in the late 1980s. In the run-up to the IPO, trying to make their bottom line look better, they abruptly stopped paying such labels for the games they sold. Among the publishers that were nearly undone by this move was Legend Entertainment. In light of episodes like this, it’s perhaps not a big surprise that, while Sid Meier was universally liked and respected, Bill Stealey’s reputation within his industry was, at best, mixed.&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; For MicroProse, it would prove only the most short-lived of bandages on a series of financial wounds Stealey would only continue to inflict on his company.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/235215-sid-meier-s-civilization-dos-front-cover-png/&quot; rel=&quot;attachment wp-att-3313&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-3313&quot; src=&quot;https://www.filfre.net/wp-content/uploads/2018/03/235215-sid-meier-s-civilization-dos-front-cover.png-256x300.jpg&quot; alt=&quot;&quot; width=&quot;256&quot; height=&quot;300&quot; srcset=&quot;https://www.filfre.net/wp-content/uploads/2018/03/235215-sid-meier-s-civilization-dos-front-cover.png-256x300.jpg 256w, https://www.filfre.net/wp-content/uploads/2018/03/235215-sid-meier-s-civilization-dos-front-cover.png-768x901.jpg 768w, https://www.filfre.net/wp-content/uploads/2018/03/235215-sid-meier-s-civilization-dos-front-cover.png-500x587.jpg 500w, https://www.filfre.net/wp-content/uploads/2018/03/235215-sid-meier-s-civilization-dos-front-cover.png.jpg 800w&quot; sizes=&quot;(max-width: 256px) 100vw, 256px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nevertheless, &lt;em&gt;Civilization&lt;/em&gt; did come out that December, in a nice-looking box, with a fat manual (largely written by Shelley) and a pull-out insert for that magnificent Advances Chart. No one, of course — not even the game’s designers or its most zealous devotees among MicroProse’s creative staff — had any idea of what it would ultimately come to mean for its industry or its art form. Certainly no one could have dreamed that &lt;em&gt;Civilization&lt;/em&gt; would still be going strong as I write these words more than a quarter of a century later, that it would become the sort of game quite likely to go on for as long as our own civilization exists to sustain it. “We knew it was a fun game,” remembers Meier, “but there had been no historical example of a [computer] game that had that kind of longevity at that point. We didn’t have a sense that this was going to be &lt;em&gt;so&lt;/em&gt; different from the other games we had made. We thought it was good and creative and had new ideas in it, but had it flopped we would not have been shocked.”&lt;/p&gt;
&lt;p&gt;Following the lead of its designers, gamers at large for the most part regarded &lt;em&gt;Civilization&lt;/em&gt; as merely the latest release from the highly respected Sid Meier, albeit perhaps one with an unusually intriguing premise. Most of the initial reviews showed no inkling of the game’s ultimate importance, although they were universally positive. The one reviewer who did seem to grasp the game’s timeless quality was Alan Emrich. Writing in his usual affected style for &lt;em&gt;Computer Gaming World&lt;/em&gt;, the journal of record for hardcore strategy gamers, he concluded his review by saying that “a new Olympian in the genre of god games has truly emerged, and &lt;em&gt;Civilization&lt;/em&gt; is likely to prove itself the greatest discovery in computer entertainment since the wheel.”&lt;/p&gt;
&lt;p&gt;But most importantly, &lt;em&gt;Civilization&lt;/em&gt; sold quite well following its release, spending several months among the top ten sellers in the industry, rising once or twice as high as the number-three spot. Whatever he personally thought of Sid Meier’s recent esoteric project choices, Wild Bill Stealey couldn’t complain about the commercial performance of this, his latest effort, which earned back all of the money it had cost to make it in fairly short order.&lt;/p&gt;
&lt;p&gt;And then, something else started to happen. After those first several months were over, when sales of any other computer game could normally be expected to fall off a cliff, they did no such thing in the case of &lt;em&gt;Civilization&lt;/em&gt;. Month after month, &lt;em&gt;Civilization&lt;/em&gt; kept right on selling. It became that rarest of beasts in what was becoming an ever more ephemeral, hits-driven industry: a perennial. Over the course of its first four and a half years on the market, it sold 850,000 copies, while becoming a huge influence on a whole new generation of ambitious turn-based grand-strategy games. Sid Meier and Bruce Shelley had never made a sequel in their careers, and never had any inkling that this latest game of theirs would spawn a franchise, much less a genre — much less, for some players, a veritable lifestyle. But when MicroProse bowed to their customers’ demands and belatedly returned to the well in 1996 with &lt;em&gt;Civilization II&lt;/em&gt;, the die was well and truly cast. Publishers, designers, and technology might come and go, but &lt;em&gt;Civilization&lt;/em&gt; was forever.&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;Sources:&lt;/strong&gt; the books &lt;em&gt;Civilization, or Rome on 640K A Day&lt;/em&gt; by Johnny L. Wilson and Alan Emrich, &lt;em&gt;Game Design: Theory &amp;amp; Practice&lt;/em&gt; by Richard Rouse III, and &lt;em&gt;Gamers at Work: Stories Behind the Game People Play&lt;/em&gt; by Morgan Ramsay; &lt;em&gt;PC Review&lt;/em&gt; of August 1992; &lt;em&gt;A.C.E.&lt;/em&gt; of May 1990; &lt;em&gt;Computer Gaming World&lt;/em&gt; of January 1988, June 1989, September 1990, December 1990, November 1991, December 1991, and April 1992; Origin Systems’s internal newsletter &lt;em&gt;Point of Origin&lt;/em&gt; from October 25 1991, March 27 1992, June 5 1992, and August 14 1992; Soren Johnson’s interviews with &lt;a href=&quot;https://www.idlethumbs.net/designernotes/episodes/bruce-shelley&quot;&gt;Bruce Shelley&lt;/a&gt; and &lt;a href=&quot;https://www.idlethumbs.net/designernotes/episodes/sid-meier-part-2/&quot;&gt;Sid Meier&lt;/a&gt;. My huge thanks go to Soren for providing me with the raw audio of his Sid Meier interview months before it went up on his site, thus giving me a big leg up on my research.)&lt;/p&gt;

</description>
<pubDate>Fri, 16 Mar 2018 16:55:18 +0000</pubDate>
<dc:creator>doppp</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.filfre.net/2018/03/the-game-of-everything-part-1-making-civilization/</dc:identifier>
</item>
<item>
<title>China to bar people with bad &amp;#039;social credit&amp;#039; from planes, trains</title>
<link>https://www.reuters.com/article/us-china-credit/china-to-bar-people-with-bad-social-credit-from-planes-trains-idUSKCN1GS10S</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-china-credit/china-to-bar-people-with-bad-social-credit-from-planes-trains-idUSKCN1GS10S</guid>
<description>&lt;p class=&quot;first-p_2htdt&quot;&gt;SHANGHAI (Reuters) - China said it will begin applying its so-called social credit system to flights and trains and stop people who have committed misdeeds from taking such transport for up to a year.&lt;/p&gt;
&lt;div class=&quot;container_2pnvl&quot;&gt;
&lt;div class=&quot;container_1tVQo&quot; tabindex=&quot;-1&quot;&gt;


&lt;span class=&quot;caption_KoNH1&quot;&gt;Passengers wait to board trains ahead of the Chinese Lunar New Year, at Nanjing Railway Station in Jiangsu province, China January 31, 2018. China Daily via REUTERS&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;&quot;&gt;People who would be put on the restricted lists included those found to have committed acts like spreading false information about terrorism and causing trouble on flights, as well as those who used expired tickets or smoked on trains, according to two statements issued on the National Development and Reform Commission’s website on Friday.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;Those found to have committed financial wrongdoings, such as employers who failed to pay social insurance or people who have failed to pay fines, would also face these restrictions, said the statements which were dated March 2.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;It added that the rules would come into effect on May 1.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;The move is in line with President’s Xi Jinping’s plan to construct a social credit system based on the principle of “once untrustworthy, always restricted”, said one of the notices which was signed by eight ministries, including the country’s aviation regulator and the Supreme People’s Court.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;China has flagged plans to roll out a system that will allow government bodies to share information on its citizens’ trustworthiness and issue penalties based on a so-called social credit score.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;However, there are signs that the use of social credit scoring on domestic transport could have started years ago. In early 2017, the country’s Supreme People’s Court said during a press conference that 6.15 million Chinese citizens had been banned from taking flights for social misdeeds.&lt;/p&gt;
&lt;div class=&quot;container_28wm1&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;attribution_o4ojT&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;content_27_rw&quot;&gt;Reporting by SHANGHAI Newsroom and Brenda Goh; Editing by Kim Coghill&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Fri, 16 Mar 2018 16:47:12 +0000</pubDate>
<dc:creator>samaysharma</dc:creator>
<og:title>China to bar people with bad 'social credit' from planes, trains</og:title>
<og:url>https://www.reuters.com/article/us-china-credit/china-to-bar-people-with-bad-social-credit-from-planes-trains-idUSKCN1GS10S</og:url>
<og:type>article</og:type>
<og:description>China said it will begin applying its so-called social credit system to flights and trains and stop people who have committed misdeeds from taking such transport for up to a year.</og:description>
<og:image>https://s3.reutersmedia.net/resources/r/?m=02&amp;d=20180316&amp;t=2&amp;i=1241539822&amp;w=1200&amp;r=LYNXNPEE2F0NL</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-china-credit/china-to-bar-people-with-bad-social-credit-from-planes-trains-idUSKCN1GS10S</dc:identifier>
</item>
<item>
<title>Google Cloud Platform’s new interactive CLI</title>
<link>https://cloudplatform.googleblog.com/2018/03/introducing-GCPs-new-interactive-CLI.html</link>
<guid isPermaLink="true" >https://cloudplatform.googleblog.com/2018/03/introducing-GCPs-new-interactive-CLI.html</guid>
<description></description>
<pubDate>Fri, 16 Mar 2018 14:35:47 +0000</pubDate>
<dc:creator>CSDude</dc:creator>
<og:title>Introducing GCP’s new interactive CLI</og:title>
<og:url>https://cloudplatform.googleblog.com/2018/03/introducing-GCPs-new-interactive-CLI.html</og:url>
<og:type>article</og:type>
<og:image>https://2.bp.blogspot.com/-X8raHCDc4JA/WqJHiYWXOnI/AAAAAAAAFH4/FMjWQfDOJgkcOzi8angMnEa51aSSYjy2gCLcBGAs/s640/image1.gif</og:image>
<og:description>By Seher Aylin Altiok, Product Manager If you develop applications on Google Cloud Platform (GCP), you probably spend a lot of time in th...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://cloudplatform.googleblog.com/2018/03/introducing-GCPs-new-interactive-CLI.html</dc:identifier>
</item>
<item>
<title>Dark Web Map</title>
<link>https://www.hyperiongray.com/dark-web-map/</link>
<guid isPermaLink="true" >https://www.hyperiongray.com/dark-web-map/</guid>
<description>&lt;div readability=&quot;32&quot;&gt;
&lt;h2&gt;Dark Web Map&lt;/h2&gt;
&lt;p class=&quot;text-muted&quot;&gt;A visualization of 6.6k Tor onion services&lt;/p&gt;
&lt;hr/&gt;&lt;/div&gt;&lt;div readability=&quot;10.497017892644&quot;&gt;
&lt;div class=&quot;col-md-6 offset-md-3 my-auto&quot; readability=&quot;16.222664015905&quot;&gt;
&lt;p&gt;The Dark Web Map is a visualization of the structure of Tor's onion services, a.k.a. &lt;em&gt;hidden services&lt;/em&gt;, a.k.a. &lt;em&gt;the dark web&lt;/em&gt;. The map consist of 6,608 dark web sites crawled during January 2018. Each site is represented in the map as a screenshot, and sites with structural similarity are connected with a line. Groups of sites that are all similar to each other are arranged into clusters. You can move around the map and zoom in to areas of interest.&lt;/p&gt;
&lt;p&gt;For more information, see our &lt;a href=&quot;http://blog.hyperiongray.com/p/0b462a99-114f-4b21-9615-117b973d8d0a/&quot;&gt;introductory blog post.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 16 Mar 2018 14:11:18 +0000</pubDate>
<dc:creator>xkcd-sucks</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hyperiongray.com/dark-web-map/</dc:identifier>
</item>
<item>
<title>A fork on GitHub is no fork</title>
<link>https://www.niels-ole.com/ownership/2018/03/16/github-forks.html</link>
<guid isPermaLink="true" >https://www.niels-ole.com/ownership/2018/03/16/github-forks.html</guid>
<description>&lt;p&gt;&lt;strong&gt;Github may block access to your repos and there is nothing you can do about it&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A few years ago I made a project with a friend and we collaborated on Github in his private repo. After we finished the project I forked it, to be able to still access it independently from him.&lt;/p&gt;
&lt;p&gt;While I still have unlimited private repos, my friend let his Premium Account (Student) expire. The original repo is now inaccessible. This is expected.&lt;/p&gt;
&lt;p&gt;When I recently needed a code snippet from that project I visited my fork and was greeted with:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.niels-ole.com/assets/github-blocked.png&quot; alt=&quot;Screenshot: My fork is inaccessible&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My&lt;/strong&gt; fork is inaccessible to me because the &lt;strong&gt;upstream&lt;/strong&gt; repo was disabled. Judging from the wording “root repository” this is no mistake. If I wanted to access the repo, I needed to convince my friend to buy premium.&lt;/p&gt;
&lt;p&gt;Maybe I just misinterpreted how a fork works? Let’s look at the &lt;a href=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;A &lt;em&gt;fork&lt;/em&gt; is a copy of a repository.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No mistake there, I should have access to my fork, because it is a &lt;strong&gt;copy&lt;/strong&gt; not just a reference. Probably I have recourse against Github as I legititimetly should have access to that repo?&lt;/p&gt;
&lt;p&gt;From their &lt;a href=&quot;https://help.github.com/articles/github-terms-of-service/#3-github-may-terminate&quot;&gt;terms of services&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;GitHub has the right to suspend or terminate your access to all or any part of the Website at any time, with or without cause, with or without notice, effective immediately. GitHub reserves the right to refuse service to anyone for any reason at any time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not so much.&lt;/p&gt;
&lt;p&gt;Luckily I found an old local copy of my project, but this taught me not to rely on Github as only storage for code. I haven’t tried contacting customer support, but as this appears to be official policy I would not expect a change there.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Someone pointed me to this &lt;a href=&quot;https://help.github.com/articles/what-happens-to-forks-when-a-repository-is-deleted-or-changes-visibility/&quot;&gt;article page&lt;/a&gt; so it actually is documented, just not on that page. And also on &lt;a href=&quot;https://help.github.com/articles/about-forks/&quot;&gt;another page&lt;/a&gt; there is mention of this:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Private forks inherit the permissions structure of the upstream or parent repository&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While this decision has a reasoning (“This helps owners of private repositories maintain control over their code.”) I think it is a strawman argument, because as long as you can clone a repo an owner of a repo has no real control over the distribution of the code and the current behaviour is just user hostile.&lt;/p&gt;
&lt;p&gt;Discuss on &lt;a href=&quot;https://news.ycombinator.com/item?id=16600219&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 12:40:19 +0000</pubDate>
<dc:creator>nielsole</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.niels-ole.com/ownership/2018/03/16/github-forks.html</dc:identifier>
</item>
<item>
<title>The Multiworse Is Coming</title>
<link>http://backreaction.blogspot.com/2018/03/the-multiworse-is-coming.html</link>
<guid isPermaLink="true" >http://backreaction.blogspot.com/2018/03/the-multiworse-is-coming.html</guid>
<description>&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-XHuj9rg_r4o/WqfEFFm9dNI/AAAAAAAAD5w/0ChaC3HocfQON1wRxE2Y-hhBxKRPKI_WgCLcBGAs/s1600/mycat.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1200&quot; data-original-width=&quot;1600&quot; height=&quot;150&quot; src=&quot;https://2.bp.blogspot.com/-XHuj9rg_r4o/WqfEFFm9dNI/AAAAAAAAD5w/0ChaC3HocfQON1wRxE2Y-hhBxKRPKI_WgCLcBGAs/s200/mycat.jpg&quot; width=&quot;200&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
You haven’t seen headlines recently about the Large Hadron Collider, have you? That’s because even the most skilled science writers can’t find much to write about.&lt;p&gt;There are loads of data for sure, and nuclear physicists are giddy with joy because the LHC has delivered &lt;a href=&quot;https://arxiv.org/abs/1709.04922&quot;&gt;a wealth of new information about the structure of protons and heavy ions&lt;/a&gt;. But the good old proton has never been the media’s darling. And the fancy new things that many particle physicists expected – the supersymmetric particles, dark matter, extra dimensions, black holes, and so on – have shunned CERN.&lt;/p&gt;&lt;p&gt;It’s a PR disaster that particle physics won’t be able to shake off easily. Before the LHC’s launch in 2008, many theorists expressed themselves confident the collider would produce new particles besides the Higgs boson. That hasn’t happened. And the public isn’t remotely as dumb as many academics wish. They’ll remember next time we come ask for money.&lt;/p&gt;&lt;p&gt;The big proclamations came almost exclusively from theoretical physicists; CERN didn’t promise anything they didn’t deliver. That is an important distinction, but I am afraid in the public perception the subtler differences won’t matter. It’s “physicists said.” And what physicists said was wrong. Like hair, trust is hard to split. And like hair, trust is easier to lose than to grow.&lt;/p&gt;&lt;p&gt;What the particle physicists got wrong was an argument based on a mathematical criterion called “naturalness”. If the laws of nature were “natural” according to this definition, then the LHC should have seen something besides the Higgs. The data analysis isn’t yet completed, but at this point it seems unlikely something more than statistical anomalies will show up.&lt;/p&gt;&lt;p&gt;I must have sat through hundreds of seminars in which naturalness arguments were repeated. Let me just flash you a representative slide from a 2007 talk by Michelangelo L. Mangano (&lt;a href=&quot;https://indico.cern.ch/event/14815/contributions/180725/attachments/145317/205966/Mangano-IFAE07-web.pdf&quot;&gt;full pdf here&lt;/a&gt;), so you get the idea. The punchline is at the very top: “new particles must appear” in an energy range of about a TeV (ie accessible at the LHC) “to avoid finetuning.”&lt;/p&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-D_IIrhwcVBM/Wqe78JmSQoI/AAAAAAAAD5M/dHYNszblh8g8yHxN_QhHRtFg0EPg4hpNACLcBGAs/s1600/michelangelo.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;879&quot; data-original-width=&quot;1194&quot; height=&quot;235&quot; src=&quot;https://3.bp.blogspot.com/-D_IIrhwcVBM/Wqe78JmSQoI/AAAAAAAAD5M/dHYNszblh8g8yHxN_QhHRtFg0EPg4hpNACLcBGAs/s320/michelangelo.jpg&quot; width=&quot;320&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;I don’t mean to pick on Mangano in particular; his slides are just the first example that Google brought up. This was the argument why the LHC should see something new: To avoid finetuning and to preserve naturalness.&lt;p&gt;I explained &lt;a href=&quot;http://backreaction.blogspot.de/2009/12/what-is-natural.html&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;http://backreaction.blogspot.de/2013/12/the-finetuned-cube.html&quot;&gt;times&lt;/a&gt; &lt;a href=&quot;http://backreaction.blogspot.de/2016/07/why-lhc-is-such-disappointment-delusion.html&quot;&gt;previously&lt;/a&gt; &lt;a href=&quot;http://backreaction.blogspot.de/2017/11/naturalness-is-dead-long-live.html&quot;&gt;why&lt;/a&gt; the conclusions based on naturalness were not predictions, but merely pleas for the laws of nature to be pretty. Luckily I no longer have to repeat these warnings, because the data agree that naturalness isn’t a good argument.&lt;/p&gt;&lt;p&gt;The LHC hasn’t seen anything new besides the Higgs. This means the laws of nature aren’t “natural” in the way that particle physicists would have wanted them to be. The consequence is not only that there are no new particles at the LHC. The consequence is also that we have no reason to think there will be new particles at the next higher energies – not until you go up a full 15 orders of magnitude, far beyond what even futuristic technologies may reach.&lt;/p&gt;&lt;p&gt;So what now? What if there are no more new particles? What if we’ve caught them all and that’s it, game over? What will happen to particle physics or, more to the point, to particle physicists?&lt;/p&gt;&lt;p&gt;In &lt;a href=&quot;http://inference-review.com/article/higgs-on-the-moon&quot;&gt;an essay some months ago&lt;/a&gt;, Adam Falkowski expressed it this way:&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“[P]article physics is currently experiencing the most serious crisis in its storied history. The feeling in the field is at best one of confusion and at worst depression”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
At present, the best reason to build another particle collider, one with energies above the LHC’s, is to measure the properties of the Higgs-boson, specifically its self-interaction. But it’s difficult to spin a sexy story around such a technical detail. My guess is that particle physicists will try to make it sound important by arguing the measurement would probe whether our vacuum is stable. Because, depending on the exact value of a constant, the vacuum may or may not eventually decay in a catastrophic event that rips apart everything in the universe.*&lt;p&gt;Such a vacuum decay, however, wouldn’t take place until long after all stars have burned out and the universe has become inhospitable to life anyway. And seeing that most people don’t care what might happen to our planet in a hundred years, they probably won’t care much what might happen to our universe in 10&lt;sup&gt;&lt;span&gt;100&lt;/span&gt;&lt;/sup&gt; billion years.&lt;/p&gt;&lt;p&gt;Personally I don’t think we need a specific reason to build a larger particle collider. A particle collider is essentially a large microscope. It doesn’t use light, it uses fast particles, and it doesn’t probe a target plate, it probes other particles, but the idea is the same: It lets us look at matter very closely. A larger collider would let us look closer than we have so far, and that’s the most obvious way to learn more about the structure of matter.&lt;/p&gt;&lt;p&gt;Compared to astrophysical processes which might reach similar energies, particle colliders have the advantage that they operate in a reasonably clean and well-controlled environment. Not to mention nearby, as opposed to some billion light-years away.&lt;/p&gt;&lt;p&gt;That we have no particular reason to expect the next larger collider will produce so-far unknown particles is in my opinion entirely tangential. If we stop here, the history of particle physics will be that of a protagonist who left town and, after the last street sign, sat down and died, the end. Some protagonist.&lt;/p&gt;&lt;p&gt;But I have been told by several people who speak to politicians more frequently than I that the “just do it” argument doesn’t fly. To justify substantial investments, I am told, an experiment needs a clear goal and at least a promise of breakthrough discoveries.&lt;/p&gt;&lt;p&gt;Knowing this, it’s not hard to extrapolate what particle physicists will do next. We merely have to look at what they’ve done in the past.&lt;/p&gt;&lt;p&gt;The first step is to backpedal from their earlier claims. This has already happened. Originally we were told that if supersymmetric particles are there, we would see them right away.&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Discovering gluinos and squarks in the expected mass range […] seems straightforward, since the rates are large and the signals are easy to separate from Standard Model backgrounds.”&lt;/em&gt; &lt;a href=&quot;https://arxiv.org/abs/hep-ph/9801254&quot;&gt;Frank Paige (1998)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;“The Large Hadron Collider will either make a spectacular discovery or rule out supersymmetry entirely.”&lt;/em&gt; &lt;a href=&quot;https://physicstoday.scitation.org/doi/10.1063/1.2825069?journalCode=pto&quot;&gt;Michael Dine (2007)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
Now they claim no one ever said it would be easy. By 2012, it was &lt;em&gt;“&lt;a href=&quot;https://arxiv.org/abs/1203.5539&quot;&gt;Natural SUSY is difficult to see at LHC&lt;/a&gt;”&lt;/em&gt; and &lt;a href=&quot;https://www.theguardian.com/science/life-and-physics/2013/mar/14/supersymmetry-spell&quot;&gt;&lt;em&gt;“&quot;Natural supersymmetry&quot; may be hard to find.” &lt;/em&gt;&lt;/a&gt;&lt;p&gt;Step two is arguing that the presently largest collider will just barely fail to see the new particles but that the next larger collider will be up to the task.&lt;/p&gt;&lt;p&gt;One of the presently most popular proposals for the next collider is the International Linear Collider (ILC), which would be a lepton collider. Lepton colliders have the benefit of doing away with structure functions and fragmentation functions that you need when you collide composite particles like the proton.&lt;/p&gt;&lt;p&gt;In &lt;a href=&quot;https://www.scientificamerican.com/article/the-collider-that-could-save-physics/&quot;&gt;a 2016 essay for &lt;em&gt;Scientific American&lt;/em&gt;&lt;/a&gt; Howard Baer, Vernon D. Barger, and Jenny List kicked off the lobbying campaign:&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Recent theoretical research suggests that Higgsinos might actually be showing up at the LHC—scientists just cannot find them in the mess of particles generated by the LHC's proton-antiproton collisions […] Theory predicts that the ILC should create abundant Higgsinos, sleptons (partners of leptons) and other superpartners. If it does, the ILC would confirm supersymmetry.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
The “recent theoretical research” they are referring to happens to be &lt;a href=&quot;https://arxiv.org/abs/1611.02846&quot;&gt;that of the authors themselves&lt;/a&gt;, vividly demonstrating that the quality standard of this field is currently so miserable that particle physicists can come up with predictions for anything they want. The phrase “theory predicts” has become entirely meaningless.&lt;p&gt;The website of the ILC itself is also charming. &lt;a href=&quot;https://www.linearcollider.org/from-design-to-reality/&quot;&gt;There we can read&lt;/a&gt;:&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“A linear collider would be best suited for producing the lighter superpartners… Designed with great accuracy and precision, the ILC becomes the perfect machine to conduct the search for dark matter particles with unprecedented precision; we have good reasons to anticipate other exciting discoveries along the way.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
They don’t tell you what those “good reasons” are because there are none. At least not so far. This brings us to step three.&lt;p&gt;Step three is the fabrication of reasons why the next larger collider should see something. The leading proposal is presently &lt;a href=&quot;https://arxiv.org/abs/1204.6626&quot;&gt;that of Michael Douglas&lt;/a&gt;, who is advocating a different version of naturalness, that is naturalness in theory space. And the theory space he is referring to is, drums please, the string theory landscape.&lt;/p&gt;&lt;p&gt;Naturalness, of course, has always been a criterion in theory-space, which is exactly why I keep saying it’s nonsense: You need a probability distribution to define it and since we only ever observe one point in this theory space, we have no way to ever get empirical evidence about this distribution. So far, however, the theory space was that of quantum field theory.&lt;/p&gt;&lt;p&gt;When it comes to the landscape at least the problem of finding a probability distribution is known (called “the measure problem”), but it’s still unsolvable because we never observe laws of nature other than our own. “Solving” the problem comes down to guessing a probability distribution and then drowning your guess in lots of math. Let us see what predictions Douglas arrives at:&lt;/p&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-EPrJr1LKwkk/Wqe_IMY9B9I/AAAAAAAAD5Y/yB37jAwAyYg5mCGtAOrT2Z-zuZ1hkpDjgCLcBGAs/s1600/douglas.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;925&quot; data-original-width=&quot;1246&quot; height=&quot;237&quot; src=&quot;https://1.bp.blogspot.com/-EPrJr1LKwkk/Wqe_IMY9B9I/AAAAAAAAD5Y/yB37jAwAyYg5mCGtAOrT2Z-zuZ1hkpDjgCLcBGAs/s320/douglas.jpg&quot; width=&quot;320&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot;&gt;Slide from Michael Douglas. &lt;a href=&quot;http://workshops.ift.uam-csic.es/WMH126/douglas.pdf&quot;&gt;PDF here&lt;/a&gt;. Emphasis mine.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Supersymmetry might be just barely out of reach of the LHC, but a somewhat larger collider would find it. Who’d have thought.&lt;/p&gt;&lt;p&gt;You see what is happening here. Conjecturing a multiverse of any type (string landscape or eternal inflation or what have you) is useless. It doesn’t explain anything and you can’t calculate anything with it. But once you add a probability distribution on that multiverse, you can make calculations. Those calculations are math you can publish. And those publications you can later refer to in proposals read by people who can’t decipher the math. Mission accomplished.&lt;/p&gt;&lt;p&gt;The reason this cycle of empty predictions continues is that everyone involved only stands to benefit. From the particle physicists who write the papers to those who review the papers to those who cite the papers, everyone wants more funding for particle physics, so everyone plays along.&lt;/p&gt;&lt;p&gt;I too would like to see a next larger particle collider, but not if it takes lies to trick taxpayers into giving us money. More is at stake here than the employment of some thousand particle physicists. If we tolerate fabricated arguments in the scientific literature just because the conclusions suit us, we demonstrate how easy it is for scientists to cheat.&lt;/p&gt;&lt;p&gt;Fact is, we presently have no evidence –  neither experimental nor theoretical evidence –  that a next larger collider would find new particles. The absolutely last thing particle physicists need right now is to weaken their standards even more and appeal to multiversal math magic that can explain everything and anything. But that seems to be exactly where we are headed.&lt;/p&gt;&lt;hr/&gt;&lt;br/&gt;&lt;span&gt;* I know that’s not correct. I merely said that’s likely how the story will be spun.&lt;/span&gt;&lt;br/&gt;&lt;hr/&gt;&lt;br/&gt;Like what you read? &lt;a href=&quot;https://www.amazon.com/gp/product/0465094252/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0465094252&amp;amp;linkCode=as2&amp;amp;tag=backreactio08-20&amp;amp;linkId=1654bb951d3b2cff87e06217385e16c4&quot;&gt;My upcoming book “Lost in Math” is now available for preorder&lt;/a&gt;. &lt;a href=&quot;https://twitter.com/skdh&quot;&gt;Follow me on twitter&lt;/a&gt; for updates.

</description>
<pubDate>Fri, 16 Mar 2018 09:50:29 +0000</pubDate>
<dc:creator>franzb</dc:creator>
<og:url>http://backreaction.blogspot.com/2018/03/the-multiworse-is-coming.html</og:url>
<og:title>The Multiworse Is Coming</og:title>
<og:description>You haven’t seen headlines recently about the Large Hadron Collider, have you? That’s because even the most skilled science writers can’...</og:description>
<og:image>https://2.bp.blogspot.com/-XHuj9rg_r4o/WqfEFFm9dNI/AAAAAAAAD5w/0ChaC3HocfQON1wRxE2Y-hhBxKRPKI_WgCLcBGAs/w1200-h630-p-k-no-nu/mycat.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://backreaction.blogspot.com/2018/03/the-multiworse-is-coming.html</dc:identifier>
</item>
<item>
<title>What America looked like before the EPA, in photos</title>
<link>https://kottke.org/18/03/what-america-looked-like-before-the-epa-in-photos</link>
<guid isPermaLink="true" >https://kottke.org/18/03/what-america-looked-like-before-the-epa-in-photos</guid>
<description>&lt;p&gt;Popular Science has a &lt;a href=&quot;https://www.popsci.com/america-before-epa-photos?src=SOC&amp;amp;dom=tw&quot;&gt;series of photos taken by EPA staff in the early years of the agency&lt;/a&gt; after it was formed in the 1970s, that have since been digitized.&lt;/p&gt;
&lt;p&gt;It’s pretty grim stuff: abandoned cars in Jamaica Bay, broken candy-glass unreturnable bottles everywhere, and one mill after another belching out smoke and dumping refuse in the rivers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kottke.org/plus/misc/images/marc_st_gil_the_atlas_chemical_company_belches_smoke_across_pasture_land_in_foreground._061972_0.jpg&quot; width=&quot;655&quot; height=&quot;439&quot; border=&quot;0&quot; alt=&quot;marc_st_gil_the_atlas_chemical_company_belches_smoke_across_pasture_land_in_foreground._061972_0.jpg&quot; /&gt;&lt;br /&gt;&lt;small&gt;The Atlas Chemical Company, by Marc St. Gil&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kottke.org/plus/misc/images/charles_steinhacker_-_outflow_pipe_6_of_the_oxford_paper_company_will_at_rumford_._061973.jpg&quot; width=&quot;655&quot; height=&quot;965&quot; border=&quot;0&quot; alt=&quot;charles_steinhacker_-_outflow_pipe_6_of_the_oxford_paper_company_will_at_rumford_._061973.jpg&quot; /&gt;&lt;br /&gt;&lt;small&gt;Oxford Paper Company, by Charles Steinhacker&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kottke.org/plus/misc/images/william_strode_-_burning_barge_on_the_ohio_river_may_1972.jpg&quot; width=&quot;655&quot; height=&quot;443&quot; border=&quot;0&quot; alt=&quot;william_strode_-_burning_barge_on_the_ohio_river_may_1972.jpg&quot; /&gt;&lt;br /&gt;&lt;small&gt;Burning barge on the Ohio River, by William Strode&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kottke.org/plus/misc/images/erik_calonius_-_mary_workman_holds_a_jar_of_undrinkable_water_that_comes_from_her_well_and_has_filed_a_damage_suit_against_the_hanna_coal_company_._101973.jpg&quot; width=&quot;655&quot; height=&quot;441&quot; border=&quot;0&quot; alt=&quot;erik_calonius_-_mary_workman_holds_a_jar_of_undrinkable_water_that_comes_from_her_well_and_has_filed_a_damage_suit_against_the_hanna_coal_company_._101973.jpg&quot; /&gt;&lt;br /&gt;&lt;small&gt;Mary Workman holds a jar of undrinkable water from her well, and has filed suit against the Hanna Coal Company - by Erik Calonius&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;Given that there’s been a &lt;a href=&quot;https://www.popsci.com/pruitt-EPA-confirmation&quot;&gt;renewed, serious push this year to dismantle or undermine the EPA&lt;/a&gt;, it’s worth revisiting just why we needed an agency to protect the environment to begin with.&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 08:43:00 +0000</pubDate>
<dc:creator>AJRF</dc:creator>
<og:title>What America looked like before the EPA, in photos</og:title>
<og:type>article</og:type>
<og:url>https://kottke.org/18/03/what-america-looked-like-before-the-epa-in-photos</og:url>
<og:image>https://kottke.org/plus/misc/images/marc_st_gil_the_atlas_chemical_company_belches_smoke_across_pasture_land_in_foreground._061972_0.jpg</og:image>
<og:description>Popular Science has a series of photos taken by EPA staff in the early years of the agency after it was formed in the 1970s, that</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://kottke.org/18/03/what-america-looked-like-before-the-epa-in-photos</dc:identifier>
</item>
<item>
<title>Interactive map of Linux kernel</title>
<link>http://www.makelinux.net/kernel_map/</link>
<guid isPermaLink="true" >http://www.makelinux.net/kernel_map/</guid>
<description>
&lt;center&gt;&lt;nobr&gt;&lt;span class=&quot;xxcap&quot;&gt;Navigation&lt;/span&gt;&lt;/nobr&gt;&lt;table cellspacing=&quot;2&quot; cellpadding=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;button onclick=&quot;move(30,30)&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/lu.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;td&gt;&lt;button onclick=&quot;move(0,30)&quot; title=&quot;pan up&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/u.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;td&gt;&lt;button onclick=&quot;move(-30,30)&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/ru.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;button onclick=&quot;move(30,0)&quot; title=&quot;pan left&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/l.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;td&gt;&lt;button onclick=&quot;map_home()&quot; title=&quot;HOME&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/c.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;td&gt;&lt;button onclick=&quot;move(-30,0)&quot; title=&quot;pan right&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/r.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;button onclick=&quot;move(30,-30)&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/ld.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;td&gt;&lt;button onclick=&quot;move(0,-30)&quot; title=&quot;pan down&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/d.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;td&gt;&lt;button onclick=&quot;move(-30,-30)&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/rd.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;button onclick=&quot;mousePos={x:wnd.x/2,y:wnd.y/2};zoom(-1);&quot; title=&quot;zoom out&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/zo.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;td&gt;&lt;button onclick=&quot;mousePos={x:wnd.x/2,y:wnd.y/2};zoom(1)&quot; title=&quot;zoom in&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/zi.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;td&gt;&lt;button onclick=&quot;mousePos=null;map_macro()&quot; title=&quot;macro zoom&quot;&gt;&lt;img src=&quot;http://www.makelinux.net/kernel_map/zm.png&quot;/&gt;&lt;/button&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;
&lt;nobr readability=&quot;1.5&quot;&gt;&lt;span class=&quot;small&quot; readability=&quot;3&quot;&gt;Mouse:&lt;br/&gt;Drag - pan&lt;br/&gt;Wheel,&lt;br/&gt;Dbl Click - zoom&lt;br/&gt;Items - links&lt;p&gt;Keyboard:&lt;br/&gt;PgDn, PgUp - zoom&lt;br/&gt;arrows - pan&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/nobr&gt;&lt;br/&gt;&lt;strong class=&quot;hide&quot;&gt;NEW!&lt;/strong&gt;
&lt;hr/&gt;
New book:
&lt;div&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/143026196X/ref=as_li_ss_il?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=143026196X&amp;amp;linkCode=as2&amp;amp;tag=makelinux-20&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://www.makelinux.net/kernel_map/linux_kernel_networking.jpg&quot; alt=&quot;Linux Kernel Networking&quot;/&gt;&lt;/a&gt; &lt;img src=&quot;http://ir-na.amazon-adsystem.com/e/ir?t=makelinux-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=143026196X&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;_hide&quot; align=&quot;right&quot;&gt;&lt;a href=&quot;http://www.apress.com/9781430261964&quot;&gt;&lt;img class=&quot;hide&quot; src=&quot;http://www.makelinux.net/kernel_map/linux_kernel_networking.png&quot; alt=&quot;Linux Kernel Networking&quot;/&gt;on Apress&lt;/a&gt;&lt;/div&gt;
&lt;hr/&gt;
Purchase and&lt;br/&gt;download instantly&lt;br/&gt;unlimited resolution&lt;br/&gt;&lt;strong&gt;PDF&lt;/strong&gt; of the map:
&lt;table border=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;form action=&quot;https://www.paypal.com/cgi-bin/webscr&quot; method=&quot;post&quot;&gt;

&lt;/form&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;form action=&quot;https://www.paypal.com/cgi-bin/webscr&quot; method=&quot;post&quot;&gt;

&lt;/form&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;a class=&quot;small&quot; href=&quot;mailto:const@makelinux.net?subject=Linux%20map%20PDF&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;10&quot; width=&quot;10&quot; alt=&quot;&quot; src=&quot;http://www.makelinux.net/style/letter.png&quot;/&gt; e-mail&lt;/a&gt; &lt;span class=&quot;hide&quot;&gt;Recommended&lt;blink&gt;:&lt;/blink&gt;&lt;br/&gt;&lt;a class=&quot;small&quot; href=&quot;http://www.makelinux.net/android/internals/&quot;&gt;• Android internals&lt;br/&gt;&lt;/a&gt; &lt;a id=&quot;poster2&quot; class=&quot;poster2&quot; href=&quot;http://www.makelinux.net/kernel_map/poster&quot; target=&quot;_top&quot;&gt;• Wall poster&lt;/a&gt; &lt;a class=&quot;small&quot; href=&quot;http://www.amazon.com/gp/product/0672329468?ie=UTF8&amp;amp;tag=makelinux-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0672329468&quot;&gt;• Linux Kernel&lt;br/&gt;Development&lt;br/&gt;3rd edition, 2010&lt;/a&gt;&lt;br/&gt;&lt;a class=&quot;small&quot; href=&quot;http://www.amazon.com/gp/product/1593272200?ie=UTF8&amp;amp;tag=makelinux-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1593272200&quot;&gt;• The Linux&lt;br/&gt;Programming&lt;br/&gt;Interface, 2010&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.com/e/ir?t=makelinux-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=1593272200&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;a class=&quot;small&quot; href=&quot;http://www.makelinux.net/man/&quot;&gt;• Linux man pages&lt;/a&gt; &lt;br/&gt;&lt;/span&gt;   </description>
<pubDate>Fri, 16 Mar 2018 03:24:39 +0000</pubDate>
<dc:creator>mayankkaizen</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.makelinux.net/kernel_map/</dc:identifier>
</item>
<item>
<title>Sierra Leone just ran the first blockchain-based election</title>
<link>https://techcrunch.com/2018/03/14/sierra-leone-just-ran-the-first-blockchain-based-election/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/03/14/sierra-leone-just-ran-the-first-blockchain-based-election/</guid>
<description>&lt;p&gt;The citizens of Sierra Leone went to the polls on March 7 but this time something was different: the country recorded votes at 70% of the polling to the &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://www.crunchbase.com/organization/blockchain-info/&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;blockchain-info&quot;&gt;blockchain&lt;/a&gt; using a technology that is the first of its kind in actual practice.&lt;/p&gt;
&lt;p&gt;The tech, created by Leonardo Gammar of &lt;a href=&quot;https://agora.vote&quot;&gt;Agora&lt;/a&gt;, anonymously stored votes in an immutable ledger, thereby offering instant access to the election results.&lt;/p&gt;
&lt;p&gt;“Anonymized votes/ballots are being recorded on Agora’s blockchain, which will be publicly available for any interested party to review, count and validate,” said Gammar. “This is the first time a government election is using blockchain technology.”&lt;/p&gt;
&lt;p&gt;“Sierra Leone wishes to create an environment of trust with the voters in a contentious election, especially looking at how the election will be publicly viewed post-election. By using blockchain as a means to immutably record ballots and results, the country hopes to create legitimacy around the election and reduce fall-out from opposition parties,” he said.&lt;/p&gt;
&lt;p&gt;Why is this interesting? While this is little more than a proof of concept – it is not a complete voting record but instead captured a seemingly acceptable plurality of votes – it’s fascinating to see the technology be implemented in Sierra Leone, a country of about 7.4 million people. The goal ultimately is to reduce voting costs by cutting out paper ballots as well as reducing corruption in the voting process.&lt;/p&gt;
&lt;p&gt;Gammar, for his part, sees the value of a decentralizes system.&lt;/p&gt;
&lt;p&gt;“We’re the only company in the world that has built a fully-functional blockchain voting platform. Other electronic voting machines are ‘block boxes’ that have been increasingly shown to be vulnerable to security attacks. For that reason, many US states and foreign nations have been moving back to paper,” he said. “If you believe that most countries will use some form of digital voting 50 years from now, then blockchain is the only technology that has been created which can provide an end-to-end verifiable and fully-transparent voting solution for this future.”&lt;/p&gt;
&lt;p&gt;One election in one country isn’t a movement – yet. However, Gammar and his team plan on expanding their product to other African countries and, eventually, to the rest of the world.&lt;/p&gt;
&lt;p&gt;As for the election it is still unclear who won and there will be a run-off election on &lt;a href=&quot;https://www.cnn.com/2018/03/14/africa/sierra-leone-election-run-off/index.html&quot;&gt;March 27&lt;/a&gt;. The winner will succeed President Ernest Bai Koroma who has run the country for a full decade.&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 02:49:23 +0000</pubDate>
<dc:creator>grdeken</dc:creator>
<og:title>Sierra Leone just ran the first blockchain-based election</og:title>
<og:description>The citizens of Sierra Leone went to the polls on March 7 but this time something was different: the country recorded votes at 70% of the polling to the blockchain using a technology that is the first of its kind in actual practice. The tech, created by Leonardo Gammar of Agora, anonymously stored …</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2018/03/gettyimages-463655687.jpg?w=734</og:image>
<og:url>http://social.techcrunch.com/2018/03/14/sierra-leone-just-ran-the-first-blockchain-based-election/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/03/14/sierra-leone-just-ran-the-first-blockchain-based-election/</dc:identifier>
</item>
<item>
<title>Regular Expressions – Mastering Lookahead and Lookbehind</title>
<link>http://www.rexegg.com/regex-lookarounds.html</link>
<guid isPermaLink="true" >http://www.rexegg.com/regex-lookarounds.html</guid>
<description>&lt;br/&gt;&lt;div class=&quot;cinter&quot;&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.copyscape.com/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://b.yu8.us/copyscape-white.gif&quot; alt=&quot;Page copy protected against web site content infringement by Copyscape&quot; title=&quot;Do not copy content from the page. Plagiarism will be detected by Copyscape.&quot; width=&quot;234&quot; height=&quot;16&quot;/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;Lookarounds often cause confusion to the regex apprentice. I believe this confusion promptly disappears if one simple point is firmly grasped. It is that at the end of a lookahead or a lookbehind, the regex engine hasn't moved on the string. You can chain three more lookaheads after the first, and the regex engine still won't move. In fact, that's a useful technique.&lt;p&gt;&lt;strong&gt;A quick syntax reminder&lt;/strong&gt;&lt;br/&gt;This page digs deep into the details of lookahead and lookbehind and assumes you've already become familiar with the basic syntax, perhaps by reading the &lt;a href=&quot;http://www.rexegg.com/regex-disambiguation.html#lookarounds&quot;&gt;lookaround section&lt;/a&gt; of the reference on &lt;span class=&quot;socode&quot;&gt;(? … )&lt;/span&gt; syntax. As a quick reminder before we dive in, here are the four lookarounds.&lt;/p&gt;&lt;table width=&quot;600&quot; border=&quot;0&quot; readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;th width=&quot;100&quot; scope=&quot;col&quot;&gt;&lt;strong&gt;Lookaround&lt;/strong&gt;&lt;/th&gt;
&lt;th width=&quot;180&quot; scope=&quot;col&quot;&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th width=&quot;320&quot; scope=&quot;col&quot;&gt;&lt;strong&gt;What it Does&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;tr class=&quot;brown&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;mono&quot;&gt;(?=foo)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lookahead&lt;/td&gt;
&lt;td&gt;Asserts that what immediately follows the current position in the string is &lt;em&gt;foo&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;beige&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;mono&quot;&gt;(?&amp;lt;=foo)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Lookbehind&lt;/td&gt;
&lt;td&gt;Asserts that what immediately precedes the current position in the string is &lt;em&gt;foo&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;brown&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;mono&quot;&gt;(?!foo)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Negative Lookahead&lt;/td&gt;
&lt;td&gt;Asserts that what immediately follows the current position in the string is not &lt;em&gt;foo&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;beige&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span class=&quot;mono&quot;&gt;(?&amp;lt;!foo)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Negative Lookbehind&lt;/td&gt;
&lt;td&gt;Asserts that what immediately precedes the current position in the string is not &lt;em&gt;foo&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#nav&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;Jumping Points&lt;/strong&gt;&lt;br/&gt;For easy navigation, here are some jumping points to various sections of the page:&lt;/p&gt;&lt;p&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#password&quot;&gt;Lookahead Example: Simple Password Validation&lt;/a&gt;&lt;br/&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#order&quot;&gt;The Order of Lookaheads Doesn't Matter… Almost&lt;/a&gt;&lt;br/&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#stand_their_ground&quot;&gt;Lookarounds Stand their Ground&lt;/a&gt;&lt;br/&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#uses&quot;&gt;Various Uses for Lookarounds&lt;/a&gt;&lt;br/&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#zero_width&quot;&gt;Zero-Width Matches&lt;/a&gt;&lt;br/&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#position&quot;&gt;Positioning the Lookaround Before or After the Characters to be Matched&lt;/a&gt;&lt;br/&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#back_to_the_future&quot;&gt;Lookarounds that Look on Both Sides: Back to the Future&lt;/a&gt;&lt;br/&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#compound&quot;&gt;Compound Lookahead and Compound Lookbehind&lt;/a&gt;&lt;br/&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#atomic&quot;&gt;The Engine Doesn't Backtrack into Lookarounds (They're Atomic)&lt;/a&gt;&lt;br/&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#width&quot;&gt;Fixed-Width, Constrained-Width and Infinite-Width Lookbehind&lt;/a&gt;&lt;br/&gt;✽ &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#anchor&quot;&gt;Lookarounds (Usually) Want to be Anchored&lt;/a&gt;&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#password&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Lookahead Example: Simple Password Validation&lt;/h2&gt;
Let's get our feet wet right away with an expression that validates a password. The technique shown here will be useful for all kinds of other data you might want to validate (such as email addresses or phone numbers).&lt;br/&gt;Our password must meet four conditions:&lt;p&gt;1. The password must have between six and ten word characters &lt;span class=&quot;socode&quot;&gt;\w&lt;/span&gt;&lt;br/&gt;2. It must include at least one lowercase character &lt;span class=&quot;socode&quot;&gt;[a-z]&lt;/span&gt;&lt;br/&gt;3. It must include at least &lt;strong&gt;three&lt;/strong&gt; uppercase characters &lt;span class=&quot;socode&quot;&gt;[A-Z]&lt;/span&gt;&lt;br/&gt;4. It must include at least one digit &lt;span class=&quot;socode&quot;&gt;\d&lt;/span&gt;&lt;/p&gt;&lt;p&gt;We'll assume we're working in a regex flavor where &lt;span class=&quot;socode&quot;&gt;\d&lt;/span&gt; only matches ASCII digits 0 through 9, unlike .NET and Python where that token can match any Unicode digit.&lt;/p&gt;&lt;p&gt;With lookarounds, your feet stay planted on the string. You're just looking, not moving!&lt;/p&gt;
Our initial strategy (which we'll later tweak) will be to stand at the beginning of the string and &lt;strong&gt;look ahead&lt;/strong&gt; four times—once for each condition. We'll look to check we have the right number of characters, then we'll look for a lowercase letter, and so on. If all the lookaheads are successful, we'll know the string is a valid password… And we'll simply gobble it all up with a plain &lt;span class=&quot;socode&quot;&gt;.*&lt;/span&gt;&lt;p&gt;&lt;strong&gt;Let's start with condition 1&lt;/strong&gt;&lt;br/&gt;A string that is made of six-to-ten word characters can be written like this: &lt;span class=&quot;socode&quot;&gt;\A\w{6,10}\z&lt;/span&gt;&lt;br/&gt;The &lt;a href=&quot;http://www.rexegg.com/regex-anchors.html#A&quot;&gt;&lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; anchor&lt;/a&gt; asserts that the current position is the beginning of the string. After matching the six to ten word characters, the &lt;a href=&quot;http://www.rexegg.com/regex-anchors.html#z&quot;&gt;&lt;span class=&quot;socode&quot;&gt;\z&lt;/span&gt; anchor&lt;/a&gt; asserts that the current position is the end of the string.&lt;/p&gt;&lt;p&gt;Within a lookahead, this pattern becomes &lt;span class=&quot;socode&quot;&gt;(?=\A\w{6,10}\z)&lt;/span&gt;. This lookahead asserts: at the current position in the string, what follows is the beginning of the string, six to ten word characters, and the very end of the string.&lt;/p&gt;&lt;p&gt;We want to make this assertion at the very beginning of the string. Therefore, to continue building our pattern, we want to anchor the lookahead with an &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt;. There is no need to duplicate the &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt;, so we can take it out of the lookahead. Our pattern becomes:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;\A(?=\w{6,10}\z)&lt;/code&gt;&lt;br/&gt;So far, we have an expression that validates that a string is entirely composed of six to ten word characters. Note that we haven't matched any of these characters yet: we have only looked ahead. The current position after the lookahead is still the beginning of the string. To check the other conditions, we just add lookaheads.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Condition 2&lt;/strong&gt;&lt;br/&gt;For our second condition, we need to check that the password contains one lowercase letter. To find one lowercase letter, the simplest idea is to use &lt;span class=&quot;socode&quot;&gt;.*[a-z]&lt;/span&gt;. That works, but the dot-star first shoots down to the end of the string, so we will always need to backtrack. Just for the sport, can we think of something more efficient? You might think of making the star quantifier reluctant by adding a &lt;span class=&quot;socode&quot;&gt;?&lt;/span&gt;, giving us &lt;span class=&quot;socode&quot;&gt;.*?[a-z]&lt;/span&gt;, but that too requires backtracking as a &lt;a href=&quot;http://www.rexegg.com/regex-quantifiers.html#lazy_expensive&quot;&gt;lazy quantifier requires backtracking at each step&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For this type of situation, I recommend you use something like &lt;span class=&quot;socode&quot;&gt;[^a-z]*[a-z]&lt;/span&gt; (or even better, depending on your engine, the &lt;a href=&quot;http://www.rexegg.com/regex-disambiguation.html#atomic&quot;&gt;atomic&lt;/a&gt; &lt;span class=&quot;socode&quot;&gt;(?&amp;gt;[^a-z]*)[a-z]&lt;/span&gt; or &lt;a href=&quot;http://www.rexegg.com/regex-quantifiers.html#possessive&quot;&gt;possessive&lt;/a&gt; version &lt;span class=&quot;socode&quot;&gt;[^a-z]*+[a-z]&lt;/span&gt;—but we'll discuss that in the &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#atomictweak&quot;&gt;footnotes&lt;/a&gt;). The negated character class &lt;span class=&quot;socode&quot;&gt;[^a-z]&lt;/span&gt; is the &lt;em&gt;counterclass&lt;/em&gt; of the lowercase letter &lt;span class=&quot;socode&quot;&gt;[a-z]&lt;/span&gt; we are looking for: it matches one character that is not a lowercase letter, and the &lt;span class=&quot;socode&quot;&gt;*&lt;/span&gt; quantifier makes us match zero or more such characters. The pattern &lt;span class=&quot;socode&quot;&gt;[^a-z]*[a-z]&lt;/span&gt; is a good example of the principle of &lt;a href=&quot;http://www.rexegg.com/regex-style.html#contrast&quot;&gt;contrast&lt;/a&gt; recommended by the regex style guide.&lt;/p&gt;&lt;p&gt;Let's use this pattern inside a lookahead: &lt;span class=&quot;socode&quot;&gt;(?=[^a-z]*[a-z])&lt;/span&gt;&lt;br/&gt;The lookahead asserts: at this position in the string (i.e., the beginning of the string), we can match zero or more characters that are not lowercase letters, then we can match one lowercase letter: &lt;span class=&quot;socode&quot;&gt;[a-z]&lt;/span&gt;&lt;br/&gt;Our pattern becomes:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;\A(?=\w{6,10}\z)(?=[^a-z]*[a-z])&lt;/code&gt;&lt;br/&gt;At this stage, we have asserted that we are at the beginning of the string, and we have looked ahead twice. We still haven't matched any characters. Note that on a logical level it doesn't matter which condition we check first. If we swapped the order of the lookaheads, the result would be the same.&lt;/p&gt;&lt;p&gt;We have two more conditions to satisfy: two more lookaheads.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Condition 3&lt;/strong&gt;&lt;br/&gt;For our third condition, we need to check that the password contains at least three uppercase letters. The logic is similar to condition 2: we look for an optional number of non-uppercase letters, then one uppercase letter… But we need to repeat that three times, for which we'll use the quantifier &lt;span class=&quot;socode&quot;&gt;{3}&lt;/span&gt;.&lt;br/&gt;We'll use this lookahead: &lt;span class=&quot;socode&quot;&gt;(?=(?:[^A-Z]*[A-Z]){3})&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The lookahead asserts: at this position in the string (i.e., the beginning of the string), we can do the following three times: match zero or more characters that are not uppercase letters (the job of the negated character class &lt;span class=&quot;socode&quot;&gt;[^A-Z]&lt;/span&gt; with the quantifier &lt;span class=&quot;socode&quot;&gt;*&lt;/span&gt;), then match one uppercase letter: &lt;span class=&quot;socode&quot;&gt;[A-Z]&lt;/span&gt;&lt;br/&gt;Our pattern becomes:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;\A(?=\w{6,10}\z)(?=[^a-z]*[a-z])(?=(?:[^A-Z]*[A-Z]){3})&lt;/code&gt;&lt;br/&gt;At this stage, we have asserted that we are at the beginning of the string, and we have looked ahead three times. We still haven't matched any characters.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Condition 4&lt;/strong&gt;&lt;br/&gt;To check that the string contains at least one digit, we use this lookahead: &lt;span class=&quot;socode&quot;&gt;(?=\D*\d)&lt;/span&gt;. Opposing &lt;span class=&quot;socode&quot;&gt;\d&lt;/span&gt; to its counterclass &lt;span class=&quot;socode&quot;&gt;\D&lt;/span&gt; makes good use of the &lt;a href=&quot;http://www.rexegg.com/regex-style.html#contrast&quot;&gt;regex principle of contrast&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The lookahead asserts: at this position in the string (i.e., the beginning of the string), we can match zero or more characters that are not digits (the job of the &quot;not-a-digit&quot; character class &lt;span class=&quot;socode&quot;&gt;\D&lt;/span&gt; and the &lt;span class=&quot;socode&quot;&gt;*&lt;/span&gt; quantifier), then we can match one digit: &lt;span class=&quot;socode&quot;&gt;\d&lt;/span&gt;&lt;br/&gt;Our pattern becomes:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;\A(?=\w{6,10}\z)(?=[^a-z]*[a-z])(?=(?:[^A-Z]*[A-Z]){3})(?=\D*\d)&lt;/code&gt;&lt;br/&gt;At this stage, we have asserted that we are at the beginning of the string, and we have looked ahead four times to check our four conditions. We still haven't matched any characters, but we have validated our string: we know that it is a valid password.&lt;/p&gt;&lt;p&gt;If all we wanted was to validate the password, we could stop right there. But if for any reason we also need to match and return the entire string—perhaps because we ran the regex on the output of a function and the password's characters haven't yet been assigned to a variable—we can easily do so now.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Matching the Validated String&lt;/strong&gt;&lt;br/&gt;After checking that the string conforms to all four conditions, we are still standing at the beginning of the string. The five assertions we have made (the anchor &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; and the four lookaheads) have not changed our position. At this stage, we can use a simple &lt;span class=&quot;socode&quot;&gt;.*&lt;/span&gt; to gobble up the string: we know that whatever characters are matched by the dot-star, the string is a valid password. The pattern becomes:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;\A(?=\w{6,10}\z)(?=[^a-z]*[a-z])(?=(?:[^A-Z]*[A-Z]){3})(?=\D*\d).*&lt;/code&gt;&lt;br/&gt;&lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#n-1conds&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;Fine-Tuning: Removing One Condition&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;For n conditions,&lt;br/&gt;use n-1 lookaheads&lt;/p&gt;
If you examine our lookaheads, you may notice that the pattern &lt;span class=&quot;socode&quot;&gt;\w{6,10}\z&lt;/span&gt; inside the first one examines all the characters in the string. Therefore, we could have used this pattern to match the whole string instead of the dot-star &lt;span class=&quot;socode&quot;&gt;.*&lt;/span&gt;&lt;p&gt;This allows us to remove one lookahead and to simplify the pattern to this:&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;cinter&quot;&gt;\A(?=[^a-z]*[a-z])(?=(?:[^A-Z]*[A-Z]){3})(?=\D*\d)\w{6,10}\z&lt;/code&gt;&lt;br/&gt;The pattern &lt;span class=&quot;socode&quot;&gt;\w{6,10}\z&lt;/span&gt; now serves the double purpose of matching the whole string and of ensuring that the string is entirely composed of six to ten word characters.&lt;/p&gt;&lt;p&gt;Generalizing this result, if you must check for n conditions, your pattern only needs to include n-1 lookaheads at the most. Often, you are even able to combine several conditions into a single lookahead.&lt;/p&gt;&lt;p&gt;You may object that we were able to use &lt;span class=&quot;socode&quot;&gt;\w{6,10}\z&lt;/span&gt; because it happened to match the whole string. Indeed that was the case. But we could also have converted any of the other three lookaheads to match the entire string. For instance, taking the lookahead &lt;span class=&quot;socode&quot;&gt;(?=\D*\d)&lt;/span&gt; which checks for the presence of one digit, we can add a simple &lt;span class=&quot;socode&quot;&gt;.*\z&lt;/span&gt; to get us to the end of the string.&lt;/p&gt;&lt;p&gt;The pattern would have become:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;\A(?=\w{6,10}\z)(?=[^a-z]*[a-z])(?=(?:[^A-Z]*[A-Z]){3})\D*\d.*\z&lt;/code&gt;&lt;br/&gt;By the way, you may wonder why I bother using the &lt;span class=&quot;socode&quot;&gt;\z&lt;/span&gt; after the &lt;span class=&quot;socode&quot;&gt;.*&lt;/span&gt;: shouldn't it get me to the end of the string? In general, not so: unless we're in &lt;a href=&quot;http://www.rexegg.com/regex-modifiers.html#dotall&quot;&gt;DOTALL mode&lt;/a&gt;, the dot doesn't match line breaks. Therefore, the &lt;span class=&quot;socode&quot;&gt;.*&lt;/span&gt; only gets you to the end of the first line. After this, the string may have line breaks and many more line. A &lt;span class=&quot;socode&quot;&gt;\z&lt;/span&gt; anchor ensures that after the &lt;span class=&quot;socode&quot;&gt;.*&lt;/span&gt; we have reached not only the end of the line, but also the end of the string.&lt;/p&gt;&lt;p&gt;In this particular pattern, the first lookaround &lt;span class=&quot;socode&quot;&gt;(?=\w{6,10}\z)&lt;/span&gt; already ensures that there cannot be any line breaks in the string, so the final &lt;span class=&quot;socode&quot;&gt;\z&lt;/span&gt; is not strictly necessary.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#order&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;The Order of Lookaheads Doesn't Matter… Almost&lt;/h2&gt;
In our password validation pattern, since the three lookaheads don't change our position in the string, we can rearrange them in any order without affecting the overall logic.&lt;p&gt;While the order of lookaheads doesn't matter on a logical level, keep in mind that it may matter for matching speed. If one lookahead is more likely to fail than the other two, it makes little sense to place it in third position and expend a lot of energy checking the first two conditions. Make it first, so that if we're going to fail, we fail early—an application of the &lt;a href=&quot;http://www.rexegg.com/regex-style.html#design_to_fail&quot;&gt;&lt;em&gt;design to fail&lt;/em&gt; principle&lt;/a&gt; from the regex style guide.&lt;/p&gt;&lt;p&gt;In fact, this is what we do by placing the anchor &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; in first position. Since it is an assertion that doesn't consume characters, it too could swap positions with any of the lookaheads. We'll see why this is a bad idea, but first…&lt;/p&gt;&lt;p&gt;In passing, consider that &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; can be written with lookarounds: in &lt;a href=&quot;http://www.rexegg.com/regex-modifiers.html#dotall&quot;&gt;DOTALL mode&lt;/a&gt;, where the dot matches any character including line breaks, the negative lookbehind &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;!.)&lt;/span&gt; asserts that what precedes the current position is not &lt;em&gt;any character&lt;/em&gt;—therefore the position must be the beginning of the string. Without DOTALL mode, the negative lookbehind &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;![\D\d])&lt;/span&gt; asserts the same, since &lt;span class=&quot;socode&quot;&gt;[\D\d]&lt;/span&gt; matches one character that is either a digit or a non-digit—in other words, any character.&lt;/p&gt;&lt;p&gt;Now imagine we set &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; in fourth position, after the three lookaheads. The resulting match would be the same, but it could take a lot more time. For instance, suppose the third lookahead (whose job it is to assert that the string contains at least one digit) fails. After failing to find a match at the first position in the string, the engine advances to the second position and tries the lookaheads again, one after the other. Once more, the third lookahead is bound to fail to find a digit. After each failure, the engine will start a new match attempt starting at the next position in the string. Even when the two first lookaheads succeed (and they may fail, as the uppercase or lowercase letter they check for may have been the lone one in the string, and at a position already passed), the third lookahead will always fail to find a digit. Therefore the anchor &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; is never even attempted: the pattern fails before the engine reaches that token.&lt;/p&gt;&lt;p&gt;In contrast, when &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; is first, it can only match at the first position in the string. The third lookahead still fails, but when the engine tries to match at further positions, the &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; immediately fails, so the engine doesn't need to waste any more time with the lookaheads.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#stand_their_ground&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Lookarounds Stand their Ground&lt;/h2&gt;
If I seem to be flogging a dead horse here, it's only because this point is the most common source of confusion with lookarounds. As the password validation example made clear, lookarounds stand their ground. They look immediately to the left or right of the engine's current position on the string—but do not alter that position.&lt;p&gt;Therefore, do not expect the pattern &lt;span class=&quot;socode&quot;&gt;A(?=5)&lt;/span&gt; to match the &lt;em&gt;A&lt;/em&gt; in the string &lt;em class=&quot;mono&quot;&gt;AB25&lt;/em&gt;. Many beginners assume that the lookahead says that &quot;there is a &lt;em&gt;5&lt;/em&gt; somewhere to the right&quot;, but that is not so. After the engine matches the &lt;em&gt;A&lt;/em&gt;, the lookahead &lt;span class=&quot;socode&quot;&gt;(?=5)&lt;/span&gt; asserts that at the current position in the string, what immediately follows is a &lt;em&gt;5&lt;/em&gt;. If you want to check if there is a &lt;em&gt;5&lt;/em&gt; somewhere (anywhere) to the right, you can use &lt;span class=&quot;socode&quot;&gt;(?=[^5]*5)&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;Moreover, don't expect the pattern &lt;span class=&quot;socode&quot;&gt;A(?=5)(?=[A-Z])&lt;/span&gt; to match the &lt;em&gt;A&lt;/em&gt; in the string &lt;em class=&quot;mono&quot;&gt;A5B&lt;/em&gt;. Many beginners assume that the second lookahead looks to the right of the first lookahead. It is not so. At the end of the first lookahead, the engine is still planted at the very same spot in the string, after the &lt;em&gt;A&lt;/em&gt;. When the lookahead &lt;span class=&quot;socode&quot;&gt;(?=[A-Z])&lt;/span&gt; tries to assert that what immediately follows the current position is an uppercase letter, it fails because the next character is still the &lt;em&gt;5&lt;/em&gt;. If you want to check that the 5 is followed by an uppercase letter, just state it in the first lookahead: &lt;span class=&quot;socode&quot;&gt;(?=5[A-Z])&lt;/span&gt;&lt;/p&gt;&lt;p&gt;So &lt;em&gt;lookahead&lt;/em&gt; and &lt;em&gt;lookbehind&lt;/em&gt; don't mean &quot;look way ahead into the distance&quot;. They mean &quot;look at the text immediately to the left or to the right&quot;. If you want to inspect a piece of string further down, you will need to insert &quot;binoculars&quot; inside the lookahead to get you to the part of the string you want to inspect—for instance a &lt;span class=&quot;socode&quot;&gt;.*&lt;/span&gt;, or, ideally, more specific tokens.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#uses&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Various Uses for Lookarounds&lt;/h2&gt;
Before we dive into interesting but sometimes terse details, let's get excited about lookarounds by surveying some of their terrific uses.&lt;p&gt;&lt;strong&gt;Validation&lt;/strong&gt;&lt;br/&gt;The &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#password&quot;&gt;password validation&lt;/a&gt; section showed how the combination of several lookaheads can impose a number of conditions on the string to be matched, allowing us to validate it with a single pattern.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Restricting a Character Range (Subtraction, Intersection)&lt;/strong&gt;&lt;br/&gt;Suppose you want to match one word character &lt;span class=&quot;socode&quot;&gt;\w&lt;/span&gt; as long as it is not the letter &lt;em&gt;Q&lt;/em&gt;. There are several ways to do it without lookarounds:&lt;br/&gt;✽ In engines that support &lt;a href=&quot;http://www.rexegg.com/regex-class-operations.html#subtraction&quot;&gt;character class subtraction&lt;/a&gt;, you can use &lt;span class=&quot;socode&quot;&gt;[\w-[Q]]&lt;/span&gt; (.NET), &lt;span class=&quot;socode&quot;&gt;[\w&amp;amp;&amp;amp;[^Q]]&lt;/span&gt; (Java and Ruby 1.9+) or &lt;span class=&quot;socode&quot;&gt;[\w--Q]&lt;/span&gt; (Python with the alternate &lt;em&gt;regex&lt;/em&gt; module)&lt;br/&gt;✽ You can build a character class such as &lt;span class=&quot;socode&quot;&gt;[_0-9a-zA-PR-Z]&lt;/span&gt;&lt;br/&gt;✽ You can use &lt;span class=&quot;socode&quot;&gt;[^\WQ]&lt;/span&gt;—an example of an &lt;a href=&quot;http://www.rexegg.com/regex-interesting-character-classes.html#obnoxious&quot;&gt;obnoxious double-negative character range&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If your engine doesn't support character class subtraction, the simplest may be to use the &lt;a href=&quot;http://www.rexegg.com/regex-class-operations.html#subtraction_workaround&quot;&gt;workaround&lt;/a&gt; shown on the page about class operations. This uses a lookahead to restrict the character class &lt;span class=&quot;socode&quot;&gt;\w&lt;/span&gt;:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?!Q)\w&lt;/code&gt; After the negative lookahead asserts that what follows the current position is not a &lt;em&gt;Q&lt;/em&gt;, the &lt;span class=&quot;socode&quot;&gt;\w&lt;/span&gt; matches a word character.&lt;/p&gt;&lt;p&gt;Not only is this solution easy to read, it is also easy to maintain if we ever decide to exclude the letter &lt;em&gt;K&lt;/em&gt; instead of &lt;em&gt;Q&lt;/em&gt;, or to exclude both: &lt;span class=&quot;socode&quot;&gt;(?![QK])\w&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Note that we can also perform the same exclusion task with a negative lookbehind:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;\w(?&amp;lt;!Q)&lt;/code&gt; After the &lt;span class=&quot;socode&quot;&gt;\w&lt;/span&gt; matches a word character, the negative lookbehind asserts that what precedes the current position is not a &lt;em&gt;Q&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Using the same idea, if we wanted to match one character in the Arabic script as long as it is not a number, we could use this pattern:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?!\p{N})\p{Arabic}&lt;/code&gt; This would work in Perl, PCRE (C, PHP, R…) and Ruby 2+. In .NET and Java, you would use &lt;span class=&quot;socode&quot;&gt;(?!\p{N})\p{IsArabic}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Likewise, we can use this technique to perform a DIY &lt;a href=&quot;http://www.rexegg.com/regex-class-operations.html#intersection&quot;&gt;character class intersection&lt;/a&gt;. For instance, to match one character in the Arabic script as long as it is a number, we transform the negative lookahead above to a positive lookahead. In the Perl / PCRE / Ruby version, this gives us:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?=\p{N})\p{Arabic}&lt;/code&gt;&lt;br/&gt;This is basically the &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#password&quot;&gt;password validation technique&lt;/a&gt; with two conditions applied to a single character.&lt;/p&gt;&lt;p&gt;Needless to say, you can interchange the content of the lookahead with the token to be matched: &lt;code class=&quot;cinter&quot;&gt;(?=\p{Arabic})\p{N}&lt;/code&gt;&lt;br/&gt;&lt;strong&gt;Tempering the scope of a token&lt;/strong&gt;&lt;br/&gt;This use is similar to the last. Instead of removing characters from a class, it restricts the scope within which a token is allowed to match.&lt;/p&gt;&lt;p&gt;For instance, suppose we want to match any character as long as it is not followed by &lt;em class=&quot;mono&quot;&gt;{END}&lt;/em&gt;. Using a negative lookahead, we can use:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?:(?!{END}).)*&lt;/code&gt; Each &lt;span class=&quot;socode&quot;&gt;.&lt;/span&gt; token is tempered by &lt;span class=&quot;socode&quot;&gt;(?!{END})&lt;/span&gt;, which specifies that the dot cannot be the beginning of &lt;em class=&quot;mono&quot;&gt;{END}&lt;/em&gt;. This technique is called &lt;a href=&quot;http://www.rexegg.com/regex-quantifiers.html#tempered_greed&quot;&gt;&lt;em&gt;tempered greedy token&lt;/em&gt;&lt;/a&gt; on the &lt;em&gt;Quantifiers page&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Another technique is:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?:[^{]++|{(?!END}))*+&lt;/code&gt; On the left side of the alternation, &lt;span class=&quot;socode&quot;&gt;[^{]++&lt;/span&gt; matches characters that are not an opening brace. On the right side, &lt;span class=&quot;socode&quot;&gt;{(?!END})&lt;/span&gt; matches an opening brace that is not followed by &lt;em class=&quot;mono&quot;&gt;END}&lt;/em&gt;. This technique appears in the &lt;a href=&quot;http://www.rexegg.com/regex-quantifiers.html#explicit_greed&quot;&gt;&lt;em&gt;Explicit Greedy Alternation&lt;/em&gt;&lt;/a&gt; section of the &lt;em&gt;Quantifiers page&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Delimiter&lt;/strong&gt;&lt;br/&gt;Do you have a string where you want to start matching all characters once the first instance of &lt;em&gt;#START#&lt;/em&gt; is passed? No problem, just use a lookbehind to make a delimiter:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?&amp;lt;=#START#).*&lt;/code&gt; After the lookbehind asserts that what immediately precedes the current position is &lt;em&gt;#START#&lt;/em&gt;, the dot-star &lt;span class=&quot;socode&quot;&gt;.*&lt;/span&gt; matches all the characters to the right.&lt;/p&gt;&lt;p&gt;Or would you like to match all characters in a string up to, but not including the characters &lt;em&gt;#END#&lt;/em&gt;? Make a delimiter using a lookahead:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;.*?(?=#END#)&lt;/code&gt;&lt;br/&gt;You can, of course, combine the two:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?&amp;lt;=#START#).*?(?=#END#)&lt;/code&gt;&lt;br/&gt;See the page on boundaries for advice on building fancy &lt;a href=&quot;http://www.rexegg.com/regex-boundaries.html#diy&quot;&gt;DIY delimiters&lt;/a&gt;.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#camelinsert&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;Inserting Text at a Position&lt;/strong&gt;&lt;br/&gt;Someone gave you a file full of film titles in CamelCase, such as &lt;em&gt;HaroldAndKumarGoToWhiteCastle&lt;/em&gt;. To make it easier to read, you want to insert a space at each position between a lowercase letter and an uppercase letter. This regex matches these exact positions:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?&amp;lt;=[a-z])(?=[A-Z])&lt;/code&gt;&lt;br/&gt;In your text editor's regex replacement function, all you have to do is replace the matches space characters, and spaces be inserted in the right spot.&lt;/p&gt;&lt;p&gt;This regex is what's known as a &quot;zero-width match&quot; because it matches a position without matching any actual characters. How does it work? The lookbehind asserts that what immediately precedes the current position is a lowercase letter. And the lookahead asserts that what immediately follows the current position is an uppercase letter.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#camelsplit&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;Splitting a String at a Position&lt;/strong&gt;&lt;br/&gt;We can use the exact same regex from the previous example to split the string &lt;em class=&quot;mono&quot;&gt;AppleOrangeBananaStrawberryPeach&lt;/em&gt; into a list of fruits. Once again, the regex&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?&amp;lt;=[a-z])(?=[A-Z])&lt;/code&gt; matches the positions between a lowercase letter and an uppercase letter.&lt;/p&gt;&lt;p&gt;In most languages, when you feed this regex to the function that uses a regex pattern to split strings, it returns an array of words.&lt;/p&gt;&lt;p&gt;Note that Python's &lt;em&gt;re&lt;/em&gt; module does not split on zero-width matches—but the far superior &lt;em&gt;regex&lt;/em&gt; module does.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#overlapping&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;Finding Overlapping Matches&lt;/strong&gt;&lt;br/&gt;Sometimes, you need several matches within the same word. For instance, suppose that from a string such as &lt;em class=&quot;mono&quot;&gt;ABCD&lt;/em&gt; you want to extract &lt;em&gt;ABCD&lt;/em&gt;, &lt;em&gt;BCD&lt;/em&gt;, &lt;em&gt;CD&lt;/em&gt; and &lt;em&gt;D&lt;/em&gt;. You can do it with this single regex:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?=(\w+))&lt;/code&gt; When you allow the engine to find all matches, all the substrings will be captured to Group 1&lt;/p&gt;&lt;p&gt;How does this work?&lt;/p&gt;&lt;p&gt;At the first position in the string (before the &lt;em&gt;A&lt;/em&gt;), the engine starts the first match attempt. The lookahead asserts that what immediately follows the current position is one or more word characters, and captures these characters to Group 1. The lookahead succeeds, and so does the match attempt. Since the pattern didn't match any actual characters (the lookahead only looks), the engine returns a zero-width match (the empty string). It also returns what was captured by Group 1: &lt;em&gt;ABCD&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The engine then moves to the next position in the string and starts the next match attempt. Again, the lookahead asserts that what immediately follows that position is word characters, and captures these characters to Group 1. The match succeeds, and Group 1 contains &lt;em&gt;BCD&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;The engine moves to the next position in the string, and the process repeats itself for &lt;em&gt;CD&lt;/em&gt; then &lt;em&gt;D&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;In .NET, which has infinite lookbehind, you can find overlapping matches from the other side of the string. For instance, on the same string &lt;em class=&quot;mono&quot;&gt;ABCD&lt;/em&gt;, consider this pattern:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?&amp;lt;=(\w+))&lt;/code&gt;&lt;br/&gt;It will capture &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;AB&lt;/em&gt;, &lt;em&gt;ABC&lt;/em&gt; and &lt;em&gt;ABCD&lt;/em&gt;. To achieve the same in an engine that doesn't support infinite lookbehind, you would have to reverse the string, use the lookahead version &lt;code&gt;(?=(\w+))&lt;/code&gt; then reverse the captures.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#zero_width&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Zero-Width Matches&lt;/h2&gt;
As we've seen, a lookaround looks left or right but it doesn't add any characters to the match to be returned by the regex engine. Likewise, an anchor such as &lt;span class=&quot;socode&quot;&gt;^&lt;/span&gt; and a boundary such as &lt;span class=&quot;socode&quot;&gt;\b&lt;/span&gt; can match at a given position in the string, but they do not add any characters to the match.&lt;p&gt;Usually, lookaheads, lookbehinds, anchors and boundaries appear in patterns that contain tokens that do match characters, allowing the engine to return a matched string. For instance, in &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=start_)\d+&lt;/span&gt;, the engine matches and returns some digits, but not the prefix &lt;em class=&quot;mono&quot;&gt;start_&lt;/em&gt;&lt;/p&gt;&lt;p&gt;However, if a pattern only contains lookarounds, anchors and boundaries, the engine may be able to match the pattern without matching any characters. The resulting match is called a &lt;em&gt;zero-width match&lt;/em&gt; because it contains no characters.&lt;/p&gt;&lt;p&gt;This can be a useful technique, and we have already seen some applications of zero-width matches in the section on &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#uses&quot;&gt;uses for lookarounds&lt;/a&gt;. To bring them together under one heading, here are some of their main uses.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Validation&lt;/strong&gt;&lt;br/&gt;If you string several lookarounds in a row, you can validate that a string conforms to a set of rules, as in the &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#password&quot;&gt;password validation technique&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We saw that when you have n conditions, if you also want to match the string, you usually need n-1 lookarounds at the most as &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#n-1conds&quot;&gt;one condition can be removed&lt;/a&gt; and used in the matching section of the pattern. But if all you want to do is validate, all the conditions can stay inside lookarounds, giving you a zero-width match.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Inserting&lt;/strong&gt;&lt;br/&gt;You can use a zero-width match regex to match a position in a string and insert text at that position. For instance, by matching &lt;span class=&quot;socode&quot;&gt;(?m)^&lt;/span&gt; (the beginning of a line in multiline mode) and replacing the match with &lt;span class=&quot;socode&quot;&gt;//&lt;/span&gt; , you can add a prefix to every line of a file.&lt;/p&gt;&lt;p&gt;Likewise, we saw how the zero-width pattern &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=[a-z])(?=[A-Z])&lt;/span&gt; allows you to &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#camelinsert&quot;&gt;insert characters in a CamelCase word&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Splitting&lt;/strong&gt;&lt;br/&gt;We saw how the same zero-width pattern &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=[a-z])(?=[A-Z])&lt;/span&gt; allows you to &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#camelsplit&quot;&gt;split a CamelCase word&lt;/a&gt; into its components.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Overlapping Matches&lt;/strong&gt;&lt;br/&gt;We saw how an unanchored lookaround that contains capture groups—such as &lt;span class=&quot;socode&quot;&gt;(?=(\w+))&lt;/span&gt;—allows you to &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#overlapping&quot;&gt;match overlapping string segments&lt;/a&gt;.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#position&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Positioning the Lookaround&lt;/h2&gt;
Often, you have two options for positioning a lookaround: before the text to be matched, or after. Usually, one of the options is more efficient because it requires less work of the engine.&lt;p&gt;To illustrate this, here are examples for each kind of lookaround. I borrowed them from the &lt;a href=&quot;http://www.rexegg.com/regex-disambiguation.html#lookarounds&quot;&gt;lookarounds section&lt;/a&gt; of the main syntax page, where they are discussed in greater detail.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Lookahead&lt;/strong&gt;&lt;br/&gt;&lt;span class=&quot;socode&quot;&gt;\d+(?= dollars)&lt;/span&gt; and &lt;span class=&quot;socode&quot;&gt;(?=\d+ dollars)\d+&lt;/span&gt; both match &lt;em&gt;100&lt;/em&gt; in &lt;span class=&quot;mono&quot;&gt;100 dollars&lt;/span&gt;, but the first is more efficient because the engine needs to match &lt;span class=&quot;socode&quot;&gt;\d+&lt;/span&gt; only once.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Negative Lookahead&lt;/strong&gt;&lt;br/&gt;&lt;span class=&quot;socode&quot;&gt;\d+(?! dollars)&lt;/span&gt; and &lt;span class=&quot;socode&quot;&gt;(?!\d+ dollars)\d+&lt;/span&gt; both match &lt;em&gt;100&lt;/em&gt; in &lt;span class=&quot;mono&quot;&gt;100 pesos&lt;/span&gt;, but the first is more efficient because the engine needs to match &lt;span class=&quot;socode&quot;&gt;\d+&lt;/span&gt; only once.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Lookbehind&lt;/strong&gt;&lt;br/&gt;&lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=USD)\d{3}&lt;/span&gt; and &lt;span class=&quot;socode&quot;&gt;\d{3}(?&amp;lt;=USD\d{3})&lt;/span&gt; both match &lt;em&gt;100&lt;/em&gt; in &lt;span class=&quot;mono&quot;&gt;USD100&lt;/span&gt;, but the first is more efficient because the engine needs to match &lt;span class=&quot;socode&quot;&gt;\d{3}&lt;/span&gt; only once.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Negative Lookbehind&lt;/strong&gt;&lt;br/&gt;&lt;span class=&quot;socode&quot;&gt;(?&amp;lt;!USD)\d{3}&lt;/span&gt; and &lt;span class=&quot;socode&quot;&gt;\d{3}(?&amp;lt;!USD\d{3})&lt;/span&gt; both match &lt;em&gt;100&lt;/em&gt; in &lt;span class=&quot;mono&quot;&gt;JPY100&lt;/span&gt;, but the first is more efficient because the engine needs to match &lt;span class=&quot;socode&quot;&gt;\d{3}&lt;/span&gt; only once.&lt;/p&gt;&lt;p&gt;What may not be so clear is that each of these lookarounds can be used in two main ways: before the expression to be matched, or after it. These two ways have a slightly different feel. Please don't obsess over the differences; rather, just cruise through these simple examples to become familiar with the types of effects you can achieve.&lt;/p&gt;&lt;p&gt;When you compare each pair, the two methods have a different &lt;em&gt;feel&lt;/em&gt;. The point of the examples is not to make you memorize &quot;the right position&quot;, but to expose you to those two basic feels. Once you're familiar with them, you will naturally think of rewriting a lookaround that feels too heavy. With a bit of practice, the efficient way of positioning your lookarounds will probably come to you naturally.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#back_to_the_future&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Lookarounds that Look on Both Sides: Back to the Future&lt;/h2&gt;
Suppose you want to match a two-digit number surrounded by underscores as in &lt;span class=&quot;mono&quot;&gt;_12_&lt;/span&gt; but not the underscores.&lt;p&gt;We have already seen three ways to do this:&lt;br/&gt;✽ You can match everything and capture the digits to Group 1: &lt;span class=&quot;socode&quot;&gt;_(\d{2})_&lt;/span&gt;&lt;br/&gt;✽ You can use a lookbehind and a lookahead: &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=_)\d{2}(?=_)&lt;/span&gt;&lt;br/&gt;✽ You can use &lt;span class=&quot;socode&quot;&gt;\K&lt;/span&gt; to drop the first underscore from the match: &lt;span class=&quot;socode&quot;&gt;_\K\d{2}(?=_)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;There is a fourth technique I'd like to introduce you to. I call it the &quot;back to the future lookbehind.&quot; There shouldn't be any reason to use it on its own, but sometimes within an intricate pattern it may just what you need, so it's nice to be familiar with it and add it to your repertoire.&lt;/p&gt;&lt;p&gt;We can position our back-to-the-future lookbehind before or after the digits. Let's start with the &lt;em&gt;before&lt;/em&gt; version:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?&amp;lt;=_(?=\d{2}_))\d+&lt;/code&gt;&lt;br/&gt;Wowzy, what does this do? The lookbehind asserts that what immediately precedes the current position in the string is an underscore, then a position where the lookahead &lt;span class=&quot;socode&quot;&gt;(?=\d{2}_)&lt;/span&gt; can assert that what immediately follows is two digits and an underscore.&lt;/p&gt;&lt;p&gt;This is interesting for several reasons. First, we have a lookahead within a lookbehind, and even though we were supposed to look backwards, this lookahead jumps over the current position by matching the two digits and the trailing underscore. That's acrobatic.&lt;/p&gt;&lt;p&gt;Second, note that even though it looks complex, this is a fixed-width lookbehind (the width is one character, the underscore), so it should work in all flavors of lookbehind. (However, it does not work in Ruby as Ruby does not allow lookaheads and negative lookbehinds inside lookbehind.)&lt;/p&gt;&lt;p&gt;Another interesting feature is how the notion of &quot;current position in the string&quot; is not the same for the lookbehind and for the lookahead. You'll remember that &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#stand_their_ground&quot;&gt;lookarounds stand their ground&lt;/a&gt;, so that after checking the assertion made by a lookaround, the engine hasn't moved in the string. Are we breaking that rule?&lt;/p&gt;&lt;p&gt;We're not. In the string &lt;em class=&quot;mono&quot;&gt;10 _16_ 20&lt;/em&gt;, let's say the engine has reached the position between the underscore and the &lt;em&gt;1&lt;/em&gt; in &lt;em&gt;16&lt;/em&gt;. The lookbehind makes an assertion about what can be matched at that position. When the engine exits the lookbehind, it is still standing in that same spot, and the token &lt;span class=&quot;socode&quot;&gt;\d{2}&lt;/span&gt; can proceed to match the characters &lt;em&gt;16&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;But within the lookbehind itself, we enter a different little world. You can imagine that outside that world the engine is red, and inside the little world of the lookbehind, there is another little engine which is yellow. That yellow engine keeps track of its own position in the string. In most engines (.NET proceeds differently), the yellow engine is initially dropped at a position in the string that is found by taking the red engine's position and subtracting the width of the lookbehind, which is 1. The yellow engine therefore starts its work before the leading underscore. Within the lookbehind's little world, after matching the underscore token, the yellow engine's position in the string is between the underscore and the &lt;em&gt;1&lt;/em&gt;. It is that position that the lookahead refers to when it asserts that at the current position in the string (according to the little world of the lookbehind and its yellow engine), what immediately follows is two digits and an underscore.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;After the digits&lt;/strong&gt;&lt;br/&gt;Here is a second version where the &quot;back-to-the-future lookbehind&quot; comes after the digits:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;\d+(?&amp;lt;=_\d{2}(?=_))&lt;/code&gt;&lt;br/&gt;The lookbehind states: what immediately precedes this position in the string is an underscore and two digits, then a position where the lookahead &lt;span class=&quot;socode&quot;&gt;(?=_)&lt;/span&gt; can assert that what immediately follows the current position in the string (according to the yellow engine and the lookbehind's little world) is an underscore.&lt;/p&gt;&lt;p&gt;This too is a fixed-width lookbehind (the width is three character, i.e. the leading underscore and the two digits), so it should work in all flavors of lookbehind except Ruby.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#compound&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Compound Lookahead and Compound Lookbehind&lt;/h2&gt;
The &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#back_to_the_future&quot;&gt;back-to-the-future lookbehind&lt;/a&gt; introduced us to what I call &lt;em&gt;compound lookarounds&lt;/em&gt;, i.e., lookarounds that contain other lookarounds. You could also call them &lt;em&gt;nested lookarounds&lt;/em&gt;, but for me the idea of compounding captures something more about the feel of working with these constructs.&lt;p&gt;Let's look at some examples.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Token followed by one character, but not more&lt;/strong&gt;&lt;br/&gt;How can you match a number that is followed by one underscore, but not more?&lt;/p&gt;&lt;p&gt;You can use this:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;\d+(?=_(?!_))&lt;/code&gt; The lookahead asserts: what follows the current position in the string is one underscore, then a position where the negative lookahead &lt;span class=&quot;socode&quot;&gt;(?!_)&lt;/span&gt; can assert that what follows is not an underscore. A less elegant variation would be &lt;span class=&quot;socode&quot;&gt;\d+(?=(?!__)_)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Token preceded by one character, but not more&lt;/strong&gt;&lt;br/&gt;How can you match a number that is preceded by one underscore, but not more?&lt;/p&gt;&lt;p&gt;You can use this:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?&amp;lt;=(?&amp;lt;!_)_)\d+&lt;/code&gt; The lookbehind asserts: what precedes the current position in the string is a position where the negative lookbehind &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;!_)&lt;/span&gt; can assert that what immediately precedes is not an underscore, then an underscore. A variation would be &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=_(?&amp;lt;!__))\d+&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Multiple Compounding&lt;/strong&gt;&lt;br/&gt;Needless to say, it won't be long until you find occasions to add levels of compounding beyond the two we've just seen. But that quickly becomes obnoxious, and it becomes simpler to rearrange the regex. For instance, building on the previous pattern,&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?&amp;lt;=(?&amp;lt;!(?&amp;lt;!X)_)_)\d+&lt;/code&gt; matches a number that is precede by an underscore that is not preceded by an underscore unless that underscore is preceded by an &lt;em&gt;X&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;In .NET, PCRE, Java and Ruby, this could be simplified to &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=(?&amp;lt;!_)_|X__)\d+&lt;/span&gt;&lt;br/&gt;In Perl and Python, you could use &lt;span class=&quot;socode&quot;&gt;(?:(?&amp;lt;=(?&amp;lt;!_)_)|(?&amp;lt;=X__))\d+&lt;/span&gt;&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#atomic&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;The Engine Doesn't Backtrack into Lookarounds…&lt;/h2&gt;&lt;p&gt;…because they're atomic
&lt;br/&gt;Here's a fun regex task. You have a string like this:&lt;br/&gt;&lt;span class=&quot;mono cinter&quot;&gt;_rabbit _dog _mouse DIC:cat:dog:mouse&lt;/span&gt;&lt;br/&gt;The &lt;em&gt;DIC&lt;/em&gt; section at the end contains a list of allowed animals. Our job is to match all the &lt;em&gt;_tokens&lt;/em&gt; named after an allowed animal. Therefore, we expect to match &lt;em class=&quot;mono&quot;&gt;_dog&lt;/em&gt; and &lt;em class=&quot;mono&quot;&gt;_mouse&lt;/em&gt;. A lookaround helps us do this:&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;cinter&quot;&gt;_(\w+)\b(?=.*:\1\b)&lt;/code&gt;&lt;br/&gt;After matching the underscore, we capture a word to Group 1. Then the lookahead &lt;span class=&quot;socode&quot;&gt;(?=.*:\1\b)&lt;/span&gt; asserts what follows the current position in the string is zero or more characters, then a colon, then the word captured to Group 1. As hoped, this matches both &lt;em class=&quot;mono&quot;&gt;_dog&lt;/em&gt; and &lt;em class=&quot;mono&quot;&gt;_mouse&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Now suppose we try a &quot;reversed&quot; approach:&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;cinter&quot;&gt;_(?=.*:(\w+)\b)\1\b&lt;/code&gt;&lt;br/&gt;This only matches &lt;em class=&quot;mono&quot;&gt;_mouse&lt;/em&gt;. Why?&lt;/p&gt;&lt;p&gt;First let's try to understand what this regex hopes to accomplish. It may not be that obvious, but it illustrates an important feature of lookarounds.&lt;/p&gt;&lt;p&gt;After the engine matches the underscore, the lookahead &lt;span class=&quot;socode&quot;&gt;(?=.*:(\w+)\b)&lt;/span&gt; asserts that what follows the current position in the string is any number of characters, then a colon, then a word (captured to Group 1). After passing that assertion, the back-reference &lt;span class=&quot;socode&quot;&gt;\1&lt;/span&gt; matches what was captured into Group 1.&lt;/p&gt;&lt;p&gt;Let's see how this works out. Remember that our string is&lt;br/&gt;&lt;span class=&quot;mono cinter&quot;&gt;_rabbit _dog _mouse DIC:cat:dog:mouse&lt;/span&gt;&lt;br/&gt;After the underscore that precedes &lt;em&gt;rabbit&lt;/em&gt;, we expect the lookahead to fail because there is no &lt;em&gt;rabbit&lt;/em&gt; in the &lt;em&gt;DIC&lt;/em&gt; section—and it does. The next time we match an underscore is before &lt;em&gt;dog&lt;/em&gt;. At that stage, inside the lookahead &lt;span class=&quot;socode&quot;&gt;(?=.*:(\w+)\b)&lt;/span&gt;, the dot-star shoots down to the end of the string, then backtracks just far enough to allow the colon to match, after which the word &lt;em&gt;mouse&lt;/em&gt; is matched and captured to Group 1. The lookahead succeeds. The next token &lt;span class=&quot;socode&quot;&gt;\1&lt;/span&gt; tries to match &lt;em&gt;mouse&lt;/em&gt;, but the next character in the string is the &lt;em&gt;d&lt;/em&gt; from &lt;em&gt;dog&lt;/em&gt;, so the token fails. At this stage, having learned everything about backtracking, we might assume that the regex engine allows the dot-star to backtrack even more inside the lookahead, up to the previous colon, which would then allow &lt;span class=&quot;socode&quot;&gt;(\w+)&lt;/span&gt; to match and capture &lt;em&gt;mouse&lt;/em&gt;. Then the back-reference &lt;span class=&quot;socode&quot;&gt;\1&lt;/span&gt; would match &lt;em&gt;mouse&lt;/em&gt;, and the engine would return a successful match.&lt;/p&gt;&lt;p&gt;However, it does not work that way. Once the regex engine has left a lookaround, it will not backtrack into it if something fails somewhere down the pattern. On a logical level, that is because the official point of a lookaround is to return one of two values: &lt;span class=&quot;mono&quot;&gt;true&lt;/span&gt; or &lt;span class=&quot;mono&quot;&gt;false&lt;/span&gt;. Once a lookahead evaluates to &lt;span class=&quot;mono&quot;&gt;true&lt;/span&gt; at a given position in the string, it is always true. From the engine's standpoint, there is nothing to backtrack. What would be the point—since the only other available value is &lt;span class=&quot;mono&quot;&gt;false&lt;/span&gt;, and that would fail the pattern?&lt;/p&gt;&lt;p&gt;The fact that the engine will not backtrack into a lookaround means that it is an &lt;a href=&quot;http://www.rexegg.com/regex-disambiguation.html#atomic&quot;&gt;atomic block&lt;/a&gt;. This property of lookarounds will rarely matter, but if someday, in the middle of building an intricate pattern, a lookahead refuses to cooperate… This may be the reason.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#width&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Fixed-Width, Constrained-Width and Infinite-Width Lookbehind&lt;/h2&gt;
In strings such as &lt;em class=&quot;mono&quot;&gt;123456_ORANGE abc12_APPLE&lt;/em&gt;, suppose you are interested in matching uppercase words, provided they are preceded by a prefix composed of digits and an underscore character. Therefore, in this string, you want to match &lt;em&gt;ORANGE&lt;/em&gt; but not &lt;em&gt;APPLE&lt;/em&gt;.&lt;p&gt;It's worth remembering that in most regex flavors (.NET is one of the few exceptions), the following pattern is invalid:&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;cinter&quot;&gt;(?&amp;lt;=\b\d+_)[A-Z]+&lt;/code&gt;&lt;br/&gt;That is because the width of the text matched by the token &lt;span class=&quot;socode&quot;&gt;\d+&lt;/span&gt; can be anything. Most engines require the width of the subexpression within a lookbehind to be known in advance, as in &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=\d{3})&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Some engines allow the width of the subexpression within a lookbehind to take various pre-determined values found on the various sides of an alternation, as in &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=0|128|\d{6})&lt;/span&gt;. Yet others allow the width to vary within a pre-determined range, as in &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=d{2,6})&lt;/span&gt;&lt;/p&gt;&lt;p&gt;For details of what kinds of widths various engines allow in a lookbehind, see the &lt;a href=&quot;http://www.rexegg.com/regex-disambiguation.html#lookbehind_width&quot;&gt;Lookbehind: Fixed-Width / Constrained Width / Infinite Width&lt;/a&gt; section of the main syntax page. To honor the winners, I'll just repeat here that the only two programming-language flavors that support infinite-width lookbehind are .NET (C#, VB.NET, …) and Matthew Barnett's &lt;a href=&quot;https://pypi.python.org/pypi/regex&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;regex&lt;/em&gt; module&lt;/a&gt; for Python. I've also implemented an &lt;a href=&quot;http://www.rexegg.com/pcre-callouts.html#infinite_lb&quot;&gt;infinite lookbehind demo for PCRE&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Capture Group Inside Variable Lookbehind: Difference between Java and .NET&lt;/strong&gt;&lt;br/&gt;Both Java and .NET allow this pattern:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;(?&amp;lt;=(\d{1,5}))Z&lt;/code&gt;&lt;br/&gt;.NET allows it because it supports infinite-width lookbehind. Java allows it because it supports lookbehind whose width falls within a defined range. However, they operate differently. As a result, against the string &lt;em class=&quot;mono b&quot;&gt;123Z&lt;/em&gt;, this pattern will return different Group 1 captures in the two engines.&lt;/p&gt;&lt;p&gt;✽ Java captures &lt;em class=&quot;mono&quot;&gt;3&lt;/em&gt; to Group 1. The engine sees that the width of the string to be matched inside the lookbehind must fall between one and five characters. Java tries all the possible fixed-width patterns in the range, from the shortest to the longest, until one succeeds. The shortest possible fixed-width pattern is &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=(\d{1}))&lt;/span&gt;. The engine temporarily skips back one character in the string, tries to match &lt;span class=&quot;socode&quot;&gt;\d{1}&lt;/span&gt; and succeeds. The lookaround succeeds, and Group 1 contains &lt;em class=&quot;mono&quot;&gt;3&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;✽ .NET captures &lt;em class=&quot;mono&quot;&gt;123&lt;/em&gt; to Group 1. The .NET engine has a far more efficient way of processing variable-width lookbehinds. Instead of trying multiple fixed-width patterns starting at points further and further back in the string, .NET reverses the string as well as the pattern inside the lookbehind, then attempts to match that single pattern on the reversed string. Therefore, in &lt;em class=&quot;mono&quot;&gt;123Z&lt;/em&gt;, to try the lookbehind at the point before &lt;em class=&quot;mono&quot;&gt;Z&lt;/em&gt;, it reverses the portion of string to be tested from &lt;em class=&quot;mono&quot;&gt;123&lt;/em&gt; to &lt;em class=&quot;mono&quot;&gt;321&lt;/em&gt;. Likewise, the lookbehind &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=(\d{1,5}))&lt;/span&gt; is flipped into the lookahead &lt;span class=&quot;socode&quot;&gt;(?=(\d{1,5}))&lt;/span&gt;. &lt;span class=&quot;socode&quot;&gt;\d{1,5}&lt;/span&gt; matches &lt;em class=&quot;mono&quot;&gt;321&lt;/em&gt;. Reversing that string, Group 1 contains &lt;em class=&quot;mono&quot;&gt;123&lt;/em&gt;. To only capture &lt;em class=&quot;mono&quot;&gt;3&lt;/em&gt; as in Java, you would have to make the quantifier lazy: &lt;code&gt;(?&amp;lt;=(\d{1,5}?))Z&lt;/code&gt;&lt;/p&gt;&lt;p&gt;✽ Like .NET, the &lt;em&gt;regex&lt;/em&gt; alternate regular expressions module for Python captures &lt;em class=&quot;mono&quot;&gt;123&lt;/em&gt; to Group 1.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Workarounds&lt;/strong&gt;&lt;br/&gt;There are two main workarounds to the lack of support for variable-width (or infinite-width) lookbehind:&lt;/p&gt;&lt;p&gt;✽ Capture groups.&lt;br/&gt;Instead of &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=\b\d+_)[A-Z]+&lt;/span&gt; , you can use &lt;span class=&quot;socode&quot;&gt;\b\d+_([A-Z]+)&lt;/span&gt;, which matches the digits and underscore you don't want to see, then matches and captures to Group 1 the uppercase text you want to inspect. This will work in all major regex flavors.&lt;/p&gt;&lt;p&gt;✽ The &lt;span class=&quot;socode&quot;&gt;\K&lt;/span&gt; &quot;keep out&quot; verb, which is available in Perl, PCRE (C, PHP, R…), Ruby 2+ and Python\'s alternate &lt;a href=&quot;https://pypi.python.org/pypi/regex&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;regex&lt;/em&gt; engine&lt;/a&gt;.&lt;br/&gt;&lt;span class=&quot;socode&quot;&gt;\K&lt;/span&gt; tells the engine to drop whatever it has matched so far from the match to be returned. Instead of &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=\b\d+_)[A-Z]+&lt;/span&gt;, you can therefore use &lt;span class=&quot;socode&quot;&gt;\b\d+_\K[A-Z]+&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Compared with lookbehinds, both the &lt;span class=&quot;socode&quot;&gt;\K&lt;/span&gt; and capture group workarounds have limitations:&lt;/p&gt;&lt;p&gt;✽ When you look for multiple matches in a string, at the starting position of each match attempt, a lookbehind can inspect the characters behind the current position in the string. Therefore, against &lt;em class=&quot;mono b&quot;&gt;123&lt;/em&gt;, the pattern &lt;code&gt;(?&amp;lt;=\d)\d&lt;/code&gt; (match a digit preceded by a digit) will match both &lt;em class=&quot;mono&quot;&gt;2&lt;/em&gt; and &lt;em class=&quot;mono&quot;&gt;3&lt;/em&gt;. In contrast, &lt;em class=&quot;mono&quot;&gt;\d\K\d&lt;/em&gt; can only match &lt;em class=&quot;mono&quot;&gt;2&lt;/em&gt;, as the starting position after the first match is immediately before the &lt;em class=&quot;mono&quot;&gt;3&lt;/em&gt;, and there are not enough digits left for a second match. Likewise, &lt;span class=&quot;socode&quot;&gt;\d(\d)&lt;/span&gt; can only capture &lt;em class=&quot;mono&quot;&gt;2&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;✽ With lookbehinds, you can impose multiple conditions (similar to our &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#password&quot;&gt;password validation technique&lt;/a&gt;) by using multiple lookbehinds. For instance, to match a digit that is preceded by a lower-case Greek letter, you can use &lt;code&gt;(?&amp;lt;=\p{Ll})(?&amp;lt;=\p{Greek})\d&lt;/code&gt;. The first lookbehind &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=\p{Ll})&lt;/span&gt; ensures that the character immediately to the left is a lower-case letter, and the second lookbehind &lt;span class=&quot;socode&quot;&gt;(?&amp;lt;=\p{Greek})&lt;/span&gt; ensures that the character immediately to the left belongs to the Greek script. With the workarounds, you could use &lt;span class=&quot;socode&quot;&gt;\p{Greek}\K\d&lt;/span&gt; to match a digit preceded by a character in the Greek script (or &lt;span class=&quot;socode&quot;&gt;\p{Greek}(\d)&lt;/span&gt; to capture it), but you cannot impose a second condition. To get over this limitation, you could capture the Greek character and use a second regex to check that it is a lower-case letter.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;em8&quot;&gt;&lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#anchor&quot;&gt;(direct link)&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Lookarounds (Usually) Want to be Anchored&lt;/h2&gt;
Let's imagine we want to match a string consisting of one word, provided it contains at least one digit. This pattern offers a reasonable solution—one of several:&lt;br/&gt;&lt;code class=&quot;cinter&quot;&gt;\A(?=\D*\d)\w+\z&lt;/code&gt;&lt;br/&gt;The &lt;a href=&quot;http://www.rexegg.com/regex-anchors.html#A&quot;&gt;&lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; anchor&lt;/a&gt; asserts that the current position is the beginning of the string. The lookahead &lt;span class=&quot;socode&quot;&gt;(?=\D*\d)&lt;/span&gt; asserts that at the current position (which is still the beginning of the string), we can match zero or more non-digits, then one digit. Next, &lt;span class=&quot;socode&quot;&gt;\w+&lt;/span&gt; matches our word. Finally, the &lt;a href=&quot;http://www.rexegg.com/regex-anchors.html#z&quot;&gt;&lt;span class=&quot;socode&quot;&gt;\z&lt;/span&gt; anchor&lt;/a&gt; asserts that the current position is the end of the string.&lt;p&gt;Now consider what happens when we forget the anchor &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; and use &lt;span class=&quot;socode&quot;&gt;(?=\D*\d)\w+\z&lt;/span&gt;. To make our oversight seem less severe, let's assume we know that our string always contains an uninterrupted string of word characters. This guarantees that if we find a match, it will have to be the right one—at the beginning of the string, as we wanted. So what's the problem?&lt;/p&gt;&lt;p&gt;Suppose we use our regex on a string composed of one hundred characters &lt;em&gt;V&lt;/em&gt;. Since the string doesn't contain a single digit, you and I can immediately see that the regex must fail. Let's see how fast the engine comes to the same conclusion.&lt;/p&gt;&lt;p&gt;As always, the engine begins by trying to match the pattern at the first position in the string. Starting with the first token &lt;span class=&quot;socode&quot;&gt;(?=\D*\d)&lt;/span&gt;, it tries to assert that at the current position, i.e. the beginning of the string, it can match zero or more non-digits, then one digit. Within the subexpression, the &lt;span class=&quot;socode&quot;&gt;\D*&lt;/span&gt; matches all the &lt;em&gt;V&lt;/em&gt; characters. The engine then tries to match a digit, but since we have reached the end of the string, that fails.&lt;/p&gt;&lt;p&gt;If we're using a smart engine such as PCRE, at this stage the engine fails the lookaround for this first match attempt. That's because before starting the match attempt, the engine has studied the pattern and noticed that the &lt;span class=&quot;socode&quot;&gt;\D&lt;/span&gt; and &lt;span class=&quot;socode&quot;&gt;\d&lt;/span&gt; tokens are mutually exclusive, and it has turned the &lt;span class=&quot;socode&quot;&gt;*&lt;/span&gt; quantifier into a possessive quantifier &lt;span class=&quot;socode&quot;&gt;*+&lt;/span&gt;, a process known to PCRE as &lt;em&gt;auto-possessification&lt;/em&gt; (see &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#atomic&quot;&gt;footnote&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;A less clever engine will backtrack, giving up all the &lt;span class=&quot;socode&quot;&gt;\D&lt;/span&gt; characters it has matched one by one, each time attempting to match a &lt;span class=&quot;socode&quot;&gt;\d&lt;/span&gt; after giving up a &lt;span class=&quot;socode&quot;&gt;\D&lt;/span&gt;. Eventually, the engine runs out of characters to backtrack, and the lookahead fails.&lt;/p&gt;&lt;p&gt;Once the engine understands that the lookahead must fail (whether it comes to this conclusion cleverly or clumsily), it gives up on the entire first match attempt. Next, as always in such cases, the engine moves to the next position in the string (past the first &lt;em&gt;V&lt;/em&gt;) and starts a new match attempt. Again, the &lt;span class=&quot;socode&quot;&gt;\D*&lt;/span&gt; eats up all the &lt;em&gt;V&lt;/em&gt; characters—although this time, there are only 99 of them. Again, the lookahead fails, either fast if the engine is smart, or, more likely, after backtracking all the way back to the starting position.&lt;/p&gt;&lt;p&gt;After failing a second time, the engine moves past the second &lt;em&gt;V&lt;/em&gt;, starts a new match attempt, and fails… And so on, all the way to the end of the string.&lt;/p&gt;&lt;p&gt;Because the pattern is not anchored at the beginning of the string, at each match attempt, the engine checks whether the lookahead matches at the current position. In doing so, in the best case, it matches 100 &lt;em&gt;V&lt;/em&gt; characters, then 99 on the second attempt, and so on—so it needs about 5000 steps before it can see that the pattern will never match. In the more usual case, the engine needs to backtrack and try the &lt;span class=&quot;socode&quot;&gt;\d&lt;/span&gt; at each position, adding two steps at each &lt;em&gt;V position&lt;/em&gt;. Altogether, it needs about 15,000 steps before it can see that the pattern will never match.&lt;/p&gt;&lt;p&gt;In contrast, with the original anchored pattern &lt;span class=&quot;socode&quot;&gt;\A(?=\D*\d)\w+\z&lt;/span&gt;, after the engine fails the first match attempt, each of the following match attempts at further positions in the string fail instantly, because the &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt; fails before the engine gets to the lookahead. In the best case, the engine takes about 200 steps to fail (100 steps to match all the &lt;em&gt;V&lt;/em&gt; characters, then one step at each of the further match attempts.) In the more usual case, the engine takes about 400 steps to fail (300 steps on the first match attempt, then one step at each of the further match attempts.)&lt;/p&gt;&lt;p&gt;Needless to say, the ratio of (15,000 / 400) steps is the kind of performance hit we try to avoid in computing. This makes a solid case for helping the engine along by minimizing the number of times lookaheads must be attempted, either by using &lt;a href=&quot;http://www.rexegg.com/regex-anchors.html&quot;&gt;anchors&lt;/a&gt; such as &lt;span class=&quot;socode&quot;&gt;^&lt;/span&gt; and &lt;span class=&quot;socode&quot;&gt;\A&lt;/span&gt;, or by matching literal characters immediately before the lookahead.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;One Exception: Overlapping Matches&lt;/strong&gt;&lt;br/&gt;There are times when we do want the engine to attempt the lookahead at every single position in the string. Usually, the purpose of such a maneuver is to match a number of overlapping substrings. For instance, against the string &lt;span class=&quot;mono&quot;&gt;word&lt;/span&gt;, if the regex &lt;span class=&quot;socode&quot;&gt;(?=(\w+))&lt;/span&gt; is allowed to match repeatedly, it will match four times, and each match will capture a different string to Group 1: &lt;em&gt;word&lt;/em&gt;, &lt;em&gt;ord&lt;/em&gt;, &lt;em&gt;rd&lt;/em&gt;, then &lt;em&gt;d&lt;/em&gt;. The section on &lt;a href=&quot;http://www.rexegg.com/regex-lookarounds.html#overlapping&quot;&gt;overlapping matches&lt;/a&gt; explains how this works.&lt;/p&gt;&lt;h2&gt;Footnotes&lt;/h2&gt;
 &lt;strong&gt;Atomic tweak&lt;/strong&gt;&lt;br/&gt;The &lt;a href=&quot;http://www.rexegg.com/regex-disambiguation.html#atomic&quot;&gt;atomic&lt;/a&gt; variation &lt;span class=&quot;socode&quot;&gt;(?&amp;gt;[^a-z]*)[a-z]&lt;/span&gt; or &lt;a href=&quot;http://www.rexegg.com/regex-quantifiers.html#possessive&quot;&gt;possessive&lt;/a&gt; version &lt;span class=&quot;socode&quot;&gt;[^a-z]*+[a-z]&lt;/span&gt; are tweaks that ensure that if the engine fails to find the lowercase letter, it won't &quot;stupidly&quot; backtrack, giving up the non-lowercase letters one by one to see if a lowercase letter might fit at that stage.&lt;p&gt;Note that before they start matching, some engines notice the mutually exclusive character of &lt;span class=&quot;socode&quot;&gt;[a-z]&lt;/span&gt; and its counterclass and automatically make the &lt;span class=&quot;socode&quot;&gt;*&lt;/span&gt; quantifier possessive for you. This optimization is what PCRE calls &lt;em&gt;auto-possessification&lt;/em&gt;. It allows you to turn it off with the &lt;a href=&quot;http://www.rexegg.com/regex-modifiers.html#pcre&quot;&gt;Special Start-of-Pattern Modifier&lt;/a&gt; &lt;span class=&quot;socode&quot;&gt;(*NO_AUTO_POSSESS)&lt;/span&gt;—but why would you ever want to?&lt;/p&gt;
&lt;a href=&quot;http://www.rexegg.com/regex-quantifiers.html&quot;&gt;&lt;img src=&quot;http://b.yu8.us/next_regex.png&quot; class=&quot;left&quot; width=&quot;125&quot; height=&quot;40&quot; alt=&quot;next&quot;/&gt;&lt;br/&gt;&lt;strong&gt; Mastering Quantifiers&lt;/strong&gt;&lt;/a&gt;



&lt;br/&gt;</description>
<pubDate>Fri, 16 Mar 2018 02:01:54 +0000</pubDate>
<dc:creator>filipmandaric</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.rexegg.com/regex-lookarounds.html</dc:identifier>
</item>
</channel>
</rss>