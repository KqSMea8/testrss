<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>ReformedFelonForHire.com – High quality software skills, at a competitive price</title>
<link>http://reformedfelonforhire.com/index.html</link>
<guid isPermaLink="true" >http://reformedfelonforhire.com/index.html</guid>
<description>&lt;h4&gt;Hi. I'm a software engineer with 10 years of professional experience. I'm also married with 5.1 kids and have run out of money for May's bills. You can hire me at an &lt;em&gt;extremely competitive&lt;/em&gt; rate of &lt;em&gt;$25 / hour&lt;/em&gt;. Check out &lt;a href=&quot;http://sdegutis.com/&quot;&gt;my portfolio website&lt;/a&gt; to see the kind of work I can do for you.&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;I'm a felon.&lt;/strong&gt; My crime is flashing a 17 year old. The first offense is just a misdemeanor. The second offense is an automatic felony and requires life registration as a sex offender. My second offense was 2 years ago. I spent two months in jail for it. Since then, I've been in intensive therapy. Everyone I know agrees I'm a different person now, and my therapist says I'm no longer at-risk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I'm a highly qualified software engineer.&lt;/strong&gt; My first software company was purchased 10 years ago for $30k. My apps were featured in MacWorld magazine. I worked directly under a veteran software guru for 5 years. I'm able to do front-end, back-end, full-stack, iOS, macOS, and Electron. I feel very comfortable in JavaScript (ES6), Ruby, Python, Java (7 and 8), HTML5, CSS (and Less, Sass, and Stylus), React.js, Vue.js, Objective-C, Swift, Clojure, Node.js, Express.js, Sinatra, C, Lua, some Rails and a little C++. But I can pick up any technology quickly. &lt;em&gt;I can pretty much write any software solution you need, in a reasonably short time.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My skills are highly sought after.&lt;/strong&gt; I've been offered probably 20 jobs in the past 6 months, which is when I was released from jail and actively began my job search. Goldman Sachs offered me a position making $180k base with $45k potential in bonuses. Enova offered me $100k with $10k in potential bonuses. Expedia eagerly offered me $65/hour. These are just a few of the more recent job offers I've received. Every company is enthusiastic to hire me. But at the background check phase they all retract their offer. &lt;em&gt;This is good news for you, because it means you can hire me today at an extremely competitive price&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I'm a family man.&lt;/strong&gt; My wife and I have 5 kids and another one on the way. I've been unemployed for 13 months. We've run out of unemployment, we have used up all our financial aid. We don't have enough to pay our bills through May 2018. All I'm trying to do is support my family using the only skill I have at this point, writing software. &lt;em&gt;Fortunately for you, this means you can get high quality software work at a competitive rate, as early as &lt;strong&gt;today&lt;/strong&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I'm available for hire TODAY&lt;/strong&gt;. &lt;a href=&quot;mailto:sbdegutis@gmail.com&quot;&gt;Email me&lt;/a&gt; to set up a phone call. Also check out &lt;a href=&quot;http://sdegutis.com/&quot;&gt;my portfolio website.&lt;/a&gt; I can start working for you ASAP. I'm located near Chicago, and can't relocate or travel out of state, but I have years of experience working remotely. My rate is &lt;em&gt;extremely competitive&lt;/em&gt; and several people who have seen my portfolio have agreed that you can get an amazing deal by hiring me considering my skill set.&lt;/p&gt;
</description>
<pubDate>Wed, 25 Apr 2018 19:19:37 +0000</pubDate>
<dc:creator>FelonForHire</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://reformedfelonforhire.com/index.html</dc:identifier>
</item>
<item>
<title>Ask HN: Anyone making money through algorithmic trading?</title>
<link>https://news.ycombinator.com/item?id=16922538</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=16922538</guid>
<description>&lt;tr readability=&quot;0.55737704918033&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5.8475609756098&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;4.594512195122&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;16922538&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16922538&quot; class=&quot;storylink&quot;&gt;Ask HN: Anyone making money through algorithmic trading?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.73170731707317&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_16922538&quot;&gt;279 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=charlesdm&quot; class=&quot;hnuser&quot;&gt;charlesdm&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16922538&quot;&gt;8 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_16922538&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=16922538&amp;amp;goto=item%3Fid%3D16922538&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20Anyone%20making%20money%20through%20algorithmic%20trading%3F&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20Anyone%20making%20money%20through%20algorithmic%20trading%3F&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=16922538&amp;amp;auth=200f8ee22da3083fb716a80fe769ae7a501d21da&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=16922538&quot;&gt;194 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10.5&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;10&quot;&gt;Is there anyone here making money on smaller trading strategies (i.e. in the stock market or cryptocurrencies) that would not be interesting enough for larger algorithmic trading firms?
&lt;p&gt;I'm aware the standard advice is that you will lose your shirt attempting to compete with algorithmic and HFT firms. But are there opportunities out there for smaller strategies to generate alpha? (I'm assuming yes, but would be great to find people who actually do this -- no need to disclose _how_ you actually do it, obviously)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Wed, 25 Apr 2018 15:38:41 +0000</pubDate>
<dc:creator>charlesdm</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=16922538</dc:identifier>
</item>
<item>
<title>Medicare will require hospitals to post prices online</title>
<link>https://www.msn.com/en-us/news/us/medicare-will-require-hospitals-to-post-prices-online/ar-AAwiccI</link>
<guid isPermaLink="true" >https://www.msn.com/en-us/news/us/medicare-will-require-hospitals-to-post-prices-online/ar-AAwiccI</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span class=&quot;storyimage fullwidth inlineimage&quot; data-aop=&quot;image&quot;&gt;&lt;span class=&quot;image&quot; data-attrib=&quot;Steve Mason/Photodisc/Getty Images&quot; data-caption=&quot;A senior taking medication.&quot;&gt;&lt;img alt=&quot;A senior taking medication.&quot; height=&quot;220&quot; src=&quot;https://img.s-msn.com/tenant/amp/entityid/AA4Txu0.img?h=220&amp;amp;w=300&amp;amp;m=6&amp;amp;q=60&amp;amp;o=f&amp;amp;l=f&amp;amp;x=1304&amp;amp;y=668&quot; width=&quot;300&quot; /&gt;&lt;/span&gt; &lt;span class=&quot;caption truncate&quot;&gt;&lt;span class=&quot;attribution&quot;&gt;© Steve Mason/Photodisc/Getty Images&lt;/span&gt; A senior taking medication.&lt;/span&gt;&lt;/span&gt; WASHINGTON — Medicare will require hospitals to post their standard prices online and make electronic medical records more readily available to patients, officials said Tuesday.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The program is also starting a comprehensive review of how it will pay for costly new forms of immunotherapy to battle cancer.&lt;/p&gt;
&lt;p&gt;Seema Verma, head of the Centers for Medicare and Medicaid Services, said the new requirement for online prices reflects the Trump administration's ongoing efforts to encourage patients to become better-educated decision makers in their own care.&lt;/p&gt;
&lt;p&gt;&quot;We are just beginning on price transparency,&quot; said Verma. &quot;We know that hospitals have this information and we're asking them to post what they have online.&quot;&lt;/p&gt;
&lt;p&gt;Hospitals are required to disclose prices publicly, but the latest change would put that information online in machine-readable format that can be easily processed by computers. It may still prove to be confusing to consumers, since standard rates are like list prices and don't reflect what insurers and government programs pay.&lt;/p&gt;
&lt;p&gt;Patients concerned about their potential out-of-pocket costs from a hospitalization would still be advised to consult with their insurer. Most insurance plans nowadays have an annual limit on how much patients must pay in copays and deductibles — although traditional Medicare does not.&lt;/p&gt;
&lt;p&gt;Likewise, many health care providers already make computerized records available to patients, but starting in 2021 Medicare would base part of a hospital's payments on how good a job they do.&lt;/p&gt;
&lt;p&gt;Using electronic medical records remains a cumbersome task, and the Trump administration has invited technology companies to design secure apps that would let patients access their records from all their providers instead of having to go to different portals.&lt;/p&gt;
&lt;p&gt;Verma also announced Medicare is starting a comprehensive review of how it will pay for a costly new form of immunotherapy called CAR-T. It's gene therapy that turbocharges a patient's own immune system cells to attack cancer.&lt;/p&gt;
&lt;p&gt;Immune system T cells are filtered from the patient's own blood and reprogrammed to target and kill cancer cells that had managed to evade them. Hundreds of millions of copies of the revved-up cells are then returned to the patient's blood to take on the cancer.&lt;/p&gt;
&lt;p&gt;Though only a couple of such treatments have been approved for blood cancers, the cost can exceed $370,000 per patient.&lt;/p&gt;
&lt;p&gt;&quot;It's a new area for the agency,&quot; said Verma. &quot;We haven't seen drugs priced at this level and we're having to think about our strategy.&quot;&lt;/p&gt;
</description>
<pubDate>Wed, 25 Apr 2018 15:27:44 +0000</pubDate>
<dc:creator>DoreenMichele</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.msn.com/en-us/news/us/medicare-will-require-hospitals-to-post-prices-online/ar-AAwiccI</dc:identifier>
</item>
<item>
<title>Maker&amp;#039;s Schedule, Manager&amp;#039;s Schedule (2009)</title>
<link>http://paulgraham.com/makersschedule.html</link>
<guid isPermaLink="true" >http://paulgraham.com/makersschedule.html</guid>
<description>&lt;img src=&quot;http://ep.yimg.com/ca/I/paulgraham_2202_7710978&quot; width=&quot;318&quot; height=&quot;18&quot; border=&quot;0&quot; hspace=&quot;0&quot; vspace=&quot;0&quot; alt=&quot;Maker's Schedule, Manager's Schedule &quot; /&gt;&lt;p&gt;&lt;span&gt;July 2009&lt;/span&gt;&lt;/p&gt;&lt;p&gt;One reason programmers dislike meetings so much is that they're on a different type of schedule from other people. Meetings cost them more.&lt;/p&gt;&lt;p&gt;There are two types of schedule, which I'll call the manager's schedule and the maker's schedule. The manager's schedule is for bosses. It's embodied in the traditional appointment book, with each day cut into one hour intervals. You can block off several hours for a single task if you need to, but by default you change what you're doing every hour.&lt;/p&gt;&lt;p&gt;When you use time that way, it's merely a practical problem to meet with someone. Find an open slot in your schedule, book them, and you're done.&lt;/p&gt;&lt;p&gt;Most powerful people are on the manager's schedule. It's the schedule of command. But there's another way of using time that's common among people who make things, like programmers and writers. They generally prefer to use time in units of half a day at least. You can't write or program well in units of an hour. That's barely enough time to get started.&lt;/p&gt;&lt;p&gt;When you're operating on the maker's schedule, meetings are a disaster. A single meeting can blow a whole afternoon, by breaking it into two pieces each too small to do anything hard in. Plus you have to remember to go to the meeting. That's no problem for someone on the manager's schedule. There's always something coming on the next hour; the only question is what. But when someone on the maker's schedule has a meeting, they have to think about it.&lt;/p&gt;&lt;p&gt;For someone on the maker's schedule, having a meeting is like throwing an exception. It doesn't merely cause you to switch from one task to another; it changes the mode in which you work.&lt;/p&gt;&lt;p&gt;I find one meeting can sometimes affect a whole day. A meeting commonly blows at least half a day, by breaking up a morning or afternoon. But in addition there's sometimes a cascading effect. If I know the afternoon is going to be broken up, I'm slightly less likely to start something ambitious in the morning. I know this may sound oversensitive, but if you're a maker, think of your own case. Don't your spirits rise at the thought of having an entire day free to work, with no appointments at all? Well, that means your spirits are correspondingly depressed when you don't. And ambitious projects are by definition close to the limits of your capacity. A small decrease in morale is enough to kill them off.&lt;/p&gt;&lt;p&gt;Each type of schedule works fine by itself. Problems arise when they meet. Since most powerful people operate on the manager's schedule, they're in a position to make everyone resonate at their frequency if they want to. But the smarter ones restrain themselves, if they know that some of the people working for them need long chunks of time to work in.&lt;/p&gt;&lt;p&gt;Our case is an unusual one. Nearly all investors, including all VCs I know, operate on the manager's schedule. But &lt;a href=&quot;http://ycombinator.com&quot;&gt;Y Combinator&lt;/a&gt; runs on the maker's schedule. Rtm and Trevor and I do because we always have, and Jessica does too, mostly, because she's gotten into sync with us.&lt;/p&gt;&lt;p&gt;I wouldn't be surprised if there start to be more companies like us. I suspect founders may increasingly be able to resist, or at least postpone, turning into managers, just as a few decades ago they started to be able to resist switching from jeans to suits.&lt;/p&gt;&lt;p&gt;How do we manage to advise so many startups on the maker's schedule? By using the classic device for simulating the manager's schedule within the maker's: office hours. Several times a week I set aside a chunk of time to meet founders we've funded. These chunks of time are at the end of my working day, and I wrote a signup program that ensures all the appointments within a given set of office hours are clustered at the end. Because they come at the end of my day these meetings are never an interruption. (Unless their working day ends at the same time as mine, the meeting presumably interrupts theirs, but since they made the appointment it must be worth it to them.) During busy periods, office hours sometimes get long enough that they compress the day, but they never interrupt it.&lt;/p&gt;&lt;p&gt;When we were working on our own startup, back in the 90s, I evolved another trick for partitioning the day. I used to program from dinner till about 3 am every day, because at night no one could interrupt me. Then I'd sleep till about 11 am, and come in and work until dinner on what I called &quot;business stuff.&quot; I never thought of it in these terms, but in effect I had two workdays each day, one on the manager's schedule and one on the maker's.&lt;/p&gt;&lt;p&gt;When you're operating on the manager's schedule you can do something you'd never want to do on the maker's: you can have speculative meetings. You can meet someone just to get to know one another. If you have an empty slot in your schedule, why not? Maybe it will turn out you can help one another in some way.&lt;/p&gt;&lt;p&gt;Business people in Silicon Valley (and the whole world, for that matter) have speculative meetings all the time. They're effectively free if you're on the manager's schedule. They're so common that there's distinctive language for proposing them: saying that you want to &quot;grab coffee,&quot; for example.&lt;/p&gt;&lt;p&gt;Speculative meetings are terribly costly if you're on the maker's schedule, though. Which puts us in something of a bind. Everyone assumes that, like other investors, we run on the manager's schedule. So they introduce us to someone they think we ought to meet, or send us an email proposing we grab coffee. At this point we have two options, neither of them good: we can meet with them, and lose half a day's work; or we can try to avoid meeting them, and probably offend them.&lt;/p&gt;&lt;p&gt;Till recently we weren't clear in our own minds about the source of the problem. We just took it for granted that we had to either blow our schedules or offend people. But now that I've realized what's going on, perhaps there's a third option: to write something explaining the two types of schedule. Maybe eventually, if the conflict between the manager's schedule and the maker's schedule starts to be more widely understood, it will become less of a problem.&lt;/p&gt;&lt;p&gt;Those of us on the maker's schedule are willing to compromise. We know we have to have some number of meetings. All we ask from those on the manager's schedule is that they understand the cost.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt; to Sam Altman, Trevor Blackwell, Paul Buchheit, Jessica Livingston, and Robert Morris for reading drafts of this.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Related:&lt;/strong&gt;&lt;/p&gt;</description>
<pubDate>Wed, 25 Apr 2018 15:05:48 +0000</pubDate>
<dc:creator>ibobev</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://paulgraham.com/makersschedule.html</dc:identifier>
</item>
<item>
<title>Notes on structured concurrency, or: Go statement considered harmful</title>
<link>https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/</link>
<guid isPermaLink="true" >https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/</guid>
<description>&lt;p&gt;Every concurrency API needs a way to run code concurrently. Here's some examples of what that looks like using different APIs:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
go myfunc();                                // Golang

pthread_create(&amp;amp;thread_id, NULL, &amp;amp;myfunc);  /* C with POSIX threads */

spawn(modulename, myfuncname, [])           % Erlang

threading.Thread(target=myfunc).start()     # Python with threads

asyncio.create_task(myfunc())               # Python with asyncio
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are lots of variations in the notation and terminology, but the semantics are the same: these all arrange for &lt;tt class=&quot;docutils literal&quot;&gt;myfunc&lt;/tt&gt; to start running concurrently to the rest of the program, and then return immediately so that the parent can do other things.&lt;/p&gt;
&lt;p&gt;Another option is to use callbacks:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
QObject::connect(&amp;amp;emitter, SIGNAL(event()),        // C++ with Qt
                 &amp;amp;receiver, SLOT(myfunc()))

g_signal_connect(emitter, &quot;event&quot;, myfunc, NULL)   /* C with GObject */

document.getElementById(&quot;myid&quot;).onclick = myfunc;  // Javascript

promise.then(myfunc, errorhandler)                 // Javascript with Promises

deferred.addCallback(myfunc)                       # Python with Twisted

future.add_done_callback(myfunc)                   # Python with asyncio
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, the notation varies, but these all accomplish the same thing: they arrange that from now on, if and when a certain event occurs, then &lt;tt class=&quot;docutils literal&quot;&gt;myfunc&lt;/tt&gt; will run. Then once they've set that up, they immediately return so the caller can do other things. (Sometimes callbacks get dressed up with fancy helpers like &lt;a class=&quot;reference external&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all&quot;&gt;promise&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt;combinators&lt;/a&gt;, or &lt;a class=&quot;reference external&quot; href=&quot;https://twistedmatrix.com/documents/current/core/howto/servers.html&quot;&gt;Twisted-style protocols/transports&lt;/a&gt;, but the core idea is the same.)&lt;/p&gt;
&lt;p&gt;And... that's it. Take any real-world, general-purpose concurrency API, and you'll probably find that it falls into one or the other of those buckets (or sometimes both, like asyncio).&lt;/p&gt;
&lt;p&gt;But my new library &lt;a class=&quot;reference external&quot; href=&quot;https://trio.readthedocs.io&quot;&gt;Trio&lt;/a&gt; is weird. It doesn't use either approach. Instead, if we want to run &lt;tt class=&quot;docutils literal&quot;&gt;myfunc&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;anotherfunc&lt;/tt&gt; concurrently, we write something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nursery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nursery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nursery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_soon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nursery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_soon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When people first encounter this &quot;nursery&quot; construct, they tend to find it confusing. Why is there an indented block? What's this &lt;tt class=&quot;docutils literal&quot;&gt;nursery&lt;/tt&gt; object, and why do I need one before I can spawn a task? Then they realize that it prevents them from using patterns they've gotten used to in other frameworks, and they get really annoyed. It feels quirky and idiosyncratic and too high-level to be a basic primitive. These are understandable reactions! But bear with me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this post, I want to convince you that nurseries aren't quirky or idiosyncratic at all, but rather a new control flow primitive that's just as fundamental as for loops or function calls. And furthermore, the other approaches we saw above – thread spawning and callback registration – should be removed entirely and replaced with nurseries.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sound unlikely? Something similar has actually happened before: the &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; statement was once the king of control flow. Now it's a &lt;a class=&quot;reference external&quot; href=&quot;https://xkcd.com/292/&quot;&gt;punchline&lt;/a&gt;. A few languages still have something they call &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, but it's different and far weaker than the original &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;. And most languages don't even have that. What happened? This was so long ago that most people aren't familiar with the story anymore, but it turns out to be surprisingly relevant. So we'll start by reminding ourselves what a &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; was, exactly, and then see what it can teach us about concurrency APIs.&lt;/p&gt;

&lt;div class=&quot;section&quot; id=&quot;what-is-a-goto-statement-anyway&quot;&gt;

&lt;p&gt;Let's review some history: Early computers were programmed using &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Assembly_language&quot;&gt;assembly language&lt;/a&gt;, or other even more primitive mechanisms. This kinda sucked. So in the 1950s, people like &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/John_Backus&quot;&gt;John Backus&lt;/a&gt; at IBM and &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Grace_Hopper&quot;&gt;Grace Hopper&lt;/a&gt; at Remington Rand started to develop languages like &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Fortran&quot;&gt;FORTRAN&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/FLOW-MATIC&quot;&gt;FLOW-MATIC&lt;/a&gt; (better known for its direct successor &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/COBOL&quot;&gt;COBOL&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;FLOW-MATIC was very ambitious for its time. You can think of it as Python's great-great-great-...-grandparent: the first language that was designed for humans first, and computers second. Here's some FLOW-MATIC code to give you a taste of what it looked like:&lt;/p&gt;

&lt;p&gt;You'll notice that unlike modern languages, there's no &lt;tt class=&quot;docutils literal&quot;&gt;if&lt;/tt&gt; blocks, loop blocks, or function calls here – in fact there's no block delimiters or indentation at all. It's just a flat list of statements. That's not because this program happens to be too short to use fancier control syntax – it's because block syntax wasn't invented yet!&lt;/p&gt;

&lt;p&gt;Instead, FLOW-MATIC had two options for flow control. Normally, it was sequential, just like you'd expect: start at the top and move downwards, one statement at a time. But if you execute a special statement like &lt;tt class=&quot;docutils literal&quot;&gt;JUMP TO&lt;/tt&gt;, then it could directly transfer control somewhere else. For example, statement (13) jumps back to statement (2):&lt;/p&gt;

&lt;p&gt;Just like for our concurrency primitives at the beginning, there was some disagreement about what to call this &quot;do a one-way jump&quot; operation. Here it's &lt;tt class=&quot;docutils literal&quot;&gt;JUMP TO&lt;/tt&gt;, but the name that stuck was &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; (like &quot;go to&quot;, get it?), so that's what I'll use here.&lt;/p&gt;
&lt;p&gt;Here's the complete set of &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; jumps in this little program:&lt;/p&gt;

&lt;p&gt;If you think this looks confusing, you're not alone! This style of jump-based programming is something that FLOW-MATIC inherited pretty much directly from assembly language. It's powerful, and a good fit to how computer hardware actually works, but it's super confusing to work with directly. That tangle of arrows is why the term &quot;spaghetti code&quot; was invented. Clearly, we needed something better.&lt;/p&gt;
&lt;p&gt;But... what is it about &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; that causes all these problems? Why are some control structures OK, and some not? How do we pick the good ones? At the time, this was really unclear, and it's hard to fix a problem if you don't understand it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-is-a-go-statement-anyway&quot;&gt;

&lt;p&gt;But let's hit pause on the history for a moment – everyone knows &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; was bad. What does this have to do with concurrency? Well, consider Golang's famous &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statement, used to spawn a new &quot;goroutine&quot; (lightweight thread):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;// Golang&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can we draw a diagram of its control flow? Well, it's a little different from either of the ones we saw above, because control actually splits. We might draw it like:&lt;/p&gt;

&lt;p&gt;Here the colors are intended to indicate that &lt;em&gt;both&lt;/em&gt; paths are taken. From the perspective of the parent goroutine (green line), control flows sequentially: it comes in the top, and then immediately comes out the bottom. Meanwhile, from the perspective of the child (lavender line), control comes in the top, and then jumps over to the body of &lt;tt class=&quot;docutils literal&quot;&gt;myfunc&lt;/tt&gt;. Unlike a regular function call, this jump is one-way: when running &lt;tt class=&quot;docutils literal&quot;&gt;myfunc&lt;/tt&gt; we switch to a whole new stack, and the runtime immediately forgets where we came from.&lt;/p&gt;
&lt;p&gt;But this doesn't just apply to Golang. This is the flow control diagram for &lt;em&gt;all&lt;/em&gt; of the primitives we listed at the beginning of this post:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;Threading libraries usually provide some sort of handle object that lets you &lt;tt class=&quot;docutils literal&quot;&gt;join&lt;/tt&gt; the thread later – but this is an independent operation that the language doesn't know anything about. The actual thread spawning primitive has the control flow shown above.&lt;/li&gt;
&lt;li&gt;Registering a callback is semantically equivalent to starting a background thread that (a) blocks until some event occurs, and then (b) runs the callback. (Though obviously the implementation is different.) So in terms of high-level control flow, registering a callback is essentially a &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statement.&lt;/li&gt;
&lt;li&gt;Futures and promises are the same too: when you call a function and it returns a promise, that means it's scheduled the work to happen in the background, and then given you a handle object to join the work later (if you want). In terms of control flow semantics, this is just like spawning a thread. Then you register callbacks on the promise, so see the previous bullet point.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This same exact pattern shows up in many, many forms: the key similarity is that in all these cases, control flow splits, with one side doing a one-way jump and the other side returning to the caller. Once you know what to look for, you'll start seeing it all over the place – it's a fun game! &lt;a class=&quot;footnote-reference&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id5&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Annoyingly, though, there is no standard name for this category of control flow constructs. So just like &quot;&lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; statement&quot; became the umbrella term for all the different &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;-like constructs, I'm going to use &quot;&lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statement&quot; as a umbrella term for these. Why &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt;? One reason is that Golang gives us a particularly pure example of the form. And the other is... well, you've probably guessed where I'm going with all this. Look at these two diagrams. Notice any similarities?&lt;/p&gt;

&lt;p&gt;That's right: &lt;strong&gt;go statements are a form of goto statement.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Concurrent programs are notoriously difficult to write and reason about. So are &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;-based programs. Is it possible that this might be for some of the same reasons? In modern languages, the problems caused by &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; are largely solved. If we study how they fixed &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, will it teach us how to make more usable concurrency APIs? Let's find out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;what-happened-to-goto&quot;&gt;

&lt;p&gt;So what is it about &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; that makes it cause so many problems? In the late 1960s, &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&quot;&gt;Edsger W. Dijkstra&lt;/a&gt; wrote a pair of now-famous papers that helped make this much clearer: &lt;a class=&quot;reference external&quot; href=&quot;https://scholar.google.com/scholar?cluster=15335993203437612903&amp;amp;hl=en&amp;amp;as_sdt=0,5&quot;&gt;Go to statement considered harmful&lt;/a&gt;, and &lt;a class=&quot;reference external&quot; href=&quot;https://www.cs.utexas.edu/~EWD/ewd02xx/EWD249.PDF&quot;&gt;Notes on structured programming&lt;/a&gt; (PDF).&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;goto-the-destroyer-of-abstraction&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id12&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;: the destroyer of abstraction&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In these papers, Dijkstra was worried about the problem of how you write non-trivial software and get it correct. I can't give them due justice here; there's all kinds of fascinating insights. For example, you may have heard this quote:&lt;/p&gt;
&lt;img alt=&quot;Testing can be used to show the presence of bugs, but never to show their absence!&quot; src=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/testing.png&quot;/&gt;&lt;p&gt;Yep, that's from &lt;em&gt;Notes on structured programming&lt;/em&gt;. But his major concern was &lt;em&gt;abstraction&lt;/em&gt;. He wanted to write programs that are too big to hold in your head all at once. To do this, you need to treat parts of the program like a black box – like when you see a Python program do:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then you don't need to know all the details of how &lt;tt class=&quot;docutils literal&quot;&gt;print&lt;/tt&gt; is implemented (string formatting, buffering, cross-platform differences, ...). You just need to know that it will somehow print the text you give it, and then you can spend your energy thinking about whether that's what you want to have happen at this point in your code. Dijkstra wanted languages to support this kind of abstraction.&lt;/p&gt;
&lt;p&gt;By this point, block syntax had been invented, and languages like ALGOL had accumulated ~5 distinct types of control structure: they still had sequential flow and &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;:&lt;/p&gt;

&lt;p&gt;And had also acquired variants on if/else, loops, and function calls:&lt;/p&gt;

&lt;p&gt;You can implement these higher-level constructs using &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, and early on, that's how people thought of them: as a convenient shorthand. But what Dijkstra pointed out is that if you look at these diagrams, there's a big difference between &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; and the rest. For everything except &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, flow control comes in the top → [stuff happens] → flow control comes out the bottom. We might call this the &quot;black box rule&quot;: if a control structure has this shape, then in contexts where you don't care about the details of what happens internally, you can ignore the [stuff happens] part, and treat the whole thing as regular sequential flow. And even better, this is also true of any code that's &lt;em&gt;composed&lt;/em&gt; out of those pieces. When I look at this code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don't have to go read the definition of &lt;tt class=&quot;docutils literal&quot;&gt;print&lt;/tt&gt; and all its transitive dependencies just to figure out how the control flow works. Maybe inside &lt;tt class=&quot;docutils literal&quot;&gt;print&lt;/tt&gt; there's a loop, and inside the loop there's an if/else, and inside the if/else there's another function call... or maybe it's something else. It doesn't really matter: I know control will flow into &lt;tt class=&quot;docutils literal&quot;&gt;print&lt;/tt&gt;, the function will do its thing, and then eventually control will come back to the code I'm reading.&lt;/p&gt;
&lt;p&gt;It may seem like this is obvious, but if you have a language with &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; – a language where functions and everything else are built on top of &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, and &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; can jump anywhere, at any time – then these control structures aren't black boxes at all! If you have a function, and inside the function there's a loop, and inside the loop there's an if/else, and inside the if/else there's a &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;... then that &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; could send the control anywhere it wants. Maybe control will suddenly return from another function entirely, one you haven't even called yet. You don't know!&lt;/p&gt;
&lt;p&gt;And this breaks abstraction: it means that &lt;em&gt;every function call is potentially a&lt;/em&gt; &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; &lt;em&gt;statement in disguise, and the only way to know is to keep the entire source code of your system in your head at once.&lt;/em&gt; As soon as &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; is in your language, you stop being able do local reasoning about flow control. That's &lt;em&gt;why&lt;/em&gt; &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; leads to spaghetti code.&lt;/p&gt;
&lt;p&gt;And now that Dijkstra understood the problem, he was able to solve it. Here's his revolutionary proposal: we should stop thinking of if/loops/function calls as shorthands for &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, but rather as fundamental primitives in their own rights – and we should remove &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; entirely from our languages.&lt;/p&gt;
&lt;p&gt;From here in 2018, this seems obvious enough. But have you seen how programmers react when you try to take away their toys because they're not smart enough to use them safely? Yeah, some things never change. In 1969, this proposal was &lt;em&gt;incredibly controversial&lt;/em&gt;. &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;https://scholar.google.com/scholar?cluster=17147143327681396418&amp;amp;hl=en&amp;amp;as_sdt=0,5&quot;&gt;defended&lt;/a&gt; &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;. People who had become experts on writing code with &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; quite reasonably resented having to basically learn how to program again in order to express their ideas using the newer, more constraining constructs. And of course it required building a whole new set of languages.&lt;/p&gt;
&lt;div class=&quot;figure align-right&quot;&gt;&lt;img alt=&quot;On the left, a photo of a snarling wolf. On the right, a photo of a grumpy bulldog.&quot; src=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/wolf-and-bulldog.jpg&quot;/&gt;&lt;p class=&quot;caption&quot;&gt;Left: A traditional &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;. Right: A domesticated &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, as seen in C, C#, Golang, etc. The inability to cross function boundaries means it can still pee on your shoes, but it probably won't rip your face off.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the end, modern languages are a bit less strict about this than Dijkstra's original formulation. They'll let you break out of multiple nested structures at once using constructs like &lt;tt class=&quot;docutils literal&quot;&gt;break&lt;/tt&gt;, &lt;tt class=&quot;docutils literal&quot;&gt;continue&lt;/tt&gt;, or &lt;tt class=&quot;docutils literal&quot;&gt;return&lt;/tt&gt;. But fundamentally, they're all designed around Dijkstra's idea; even these constructs that push the boundaries do so only in strictly limited ways. In particular, functions – which are the fundamental tool for wrapping up control flow inside a black box – are considered inviolate. You can't &lt;tt class=&quot;docutils literal&quot;&gt;break&lt;/tt&gt; out of one function and into another, and a &lt;tt class=&quot;docutils literal&quot;&gt;return&lt;/tt&gt; can take you out of the current function, but no further. Whatever control flow shenanigans a function gets up to internally, other functions don't have to care.&lt;/p&gt;
&lt;p&gt;This even extends to &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; itself. You'll find a few languages that still have something they call &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, like C, C#, Golang, ... but they've added heavy restrictions. At the very least, they won't let you jump out of one function body and into another. Unless you're working in assembly &lt;a class=&quot;footnote-reference&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id6&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;, the classic, unrestricted &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; is gone. Dijkstra won.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;a-surprise-benefit-removing-goto-statements-enables-new-features&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id13&quot;&gt;A surprise benefit: removing &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; statements enables new features&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;And once &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; disappeared, something interesting happened: language designers were able to start adding features that depend on control flow being structured.&lt;/p&gt;
&lt;p&gt;For example, Python has some nice syntax for resource cleanup: the &lt;tt class=&quot;docutils literal&quot;&gt;with&lt;/tt&gt; statement. You can write things like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and it guarantees that the file will be open during the &lt;tt class=&quot;docutils literal&quot;&gt;...&lt;/tt&gt; code, but then closed immediately afterward. Most modern languages have some equivalent (RAII, &lt;tt class=&quot;docutils literal&quot;&gt;using&lt;/tt&gt;, try-with-resource, &lt;tt class=&quot;docutils literal&quot;&gt;defer&lt;/tt&gt;, ...). And they all assume that control flows in an orderly, structured way. If we used &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; to jump into the middle of our &lt;tt class=&quot;docutils literal&quot;&gt;with&lt;/tt&gt; block... what would that even do? Is the file open or not? What if we jumped out again, instead of exiting normally? Would the file get closed? This feature just doesn't work in any coherent way if your language has &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; in it.&lt;/p&gt;
&lt;p&gt;Error handling has a similar problem: when something goes wrong, what should your code do? Often the answer is to pass the buck up the stack to your code's caller, let them figure out how to deal with it. Modern languages have constructs specifically to make this easier, like exceptions, or other forms of &lt;a class=&quot;reference external&quot; href=&quot;https://doc.rust-lang.org/std/result/index.html#the-question-mark-operator-&quot;&gt;automatic error propagation&lt;/a&gt;. But your language can only provide this help if it &lt;em&gt;has&lt;/em&gt; a stack, and a reliable concept of &quot;caller&quot;. Look again at the control-flow spaghetti in our FLOW-MATIC program and imagine that in the middle of that it tried to raise an exception. Where would it even go?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;goto-statements-not-even-once&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id14&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; statements: not even once&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; – the traditional kind that ignores function boundaries – isn't just the regular kind of bad feature, the kind that's hard to use correctly. If it were, it might have survived – lots of bad features have. But it's much worse.&lt;/p&gt;
&lt;blockquote/&gt;
&lt;p&gt;Even if you don't use &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; yourself, merely having it as an option in your language makes &lt;em&gt;everything&lt;/em&gt; harder to use. Whenever you start using a third-party library, you can't treat it as a black box – you have to go read through it all to find out which functions are regular functions, and which ones are idiosyncratic flow control constructs in disguise. This is a serious obstacle to local reasoning. And you lose powerful language features like reliable resource cleanup and automatic error propagation. Better to remove &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; entirely, in favor of control flow constructs that follow the &quot;black box&quot; rule.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;go-statement-considered-harmful&quot;&gt;

&lt;p&gt;So that's the history of &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;. Now, how much of this applies to &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statements? Well... basically, all of it! The analogy turns out to be shockingly exact.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go statements break abstraction.&lt;/strong&gt; Remember how we said that if our language allows &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, then any function might be a &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; in disguise? In most concurrency frameworks, &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statements cause the exact same problem: whenever you call a function, it might or might not spawn some background task. The function seemed to return, but is it still running in the background? There's no way to know without reading all its source code, transitively. When will it finish? Hard to say. If you have &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statements, then functions are no longer black boxes with respect to control flow. In my &lt;a class=&quot;reference external&quot; href=&quot;https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/&quot;&gt;first post on concurrency APIs&lt;/a&gt;, I called this &quot;violating causality&quot;, and found that it was the root cause of many common, real-world issues in programs using asyncio and Twisted, like problems with backpressure, problems with shutting down properly, and so forth.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go statements break automatic resource cleanup.&lt;/strong&gt; Let's look again at that &lt;tt class=&quot;docutils literal&quot;&gt;with&lt;/tt&gt; statement example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before, we said that we were &quot;guaranteed&quot; that the file will be open while the &lt;tt class=&quot;docutils literal&quot;&gt;...&lt;/tt&gt; code is running, and then closed afterwards. But what if the &lt;tt class=&quot;docutils literal&quot;&gt;...&lt;/tt&gt; code spawns a background task? Then our guarantee is lost: the operations that &lt;em&gt;look&lt;/em&gt; like they're inside the &lt;tt class=&quot;docutils literal&quot;&gt;with&lt;/tt&gt; block might actually keep running &lt;em&gt;after&lt;/em&gt; the &lt;tt class=&quot;docutils literal&quot;&gt;with&lt;/tt&gt; block ends, and then crash because the file gets closed while they're still using it. And again, you can't tell from local inspection; to know if this is happening you have to go read the source code to all the functions called inside the &lt;tt class=&quot;docutils literal&quot;&gt;...&lt;/tt&gt; code.&lt;/p&gt;
&lt;p&gt;If we want this code to work properly, we need to somehow keep track of any background tasks, and manually arrange for the file to be closed only when they're finished. It's doable – unless we're using some library that doesn't provide any way to get notified when the task is finished, which is distressingly common (e.g. because it doesn't expose any task handle that you can join on). But even in the best case, the unstructured control flow means the language can't help us. We're back to implementing resource cleanup by hand, like in the bad old days.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go statements break error handling.&lt;/strong&gt; Like we discussed above, modern languages provide powerful tools like exceptions to help us make sure that errors are detected and propagated to the right place. But these tools depend on having a reliable concept of &quot;the current code's caller&quot;. As soon as you spawn a task or register a callback, that concept is broken. As a result, every mainstream concurrency framework I know of simply gives up. If an error occurs in a background task, and you don't handle it manually, then the runtime just... drops it on the floor and crosses its fingers that it wasn't too important. If you're lucky it might print something on the console. (The only other software I've used that thinks &quot;print something and keep going&quot; is a good error handling strategy is grotty old Fortran libraries, but here we are.) Even Rust – the language voted Most Obsessed With Threading Correctness by its high school class – is guilty of this. If a background thread panics, Rust &lt;a class=&quot;reference external&quot; href=&quot;https://doc.rust-lang.org/std/thread/&quot;&gt;discards the error and hopes for the best&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course you &lt;em&gt;can&lt;/em&gt; handle errors properly in these systems, by carefully making sure to join every thread, or by building your own error propagation mechanism like &lt;a class=&quot;reference external&quot; href=&quot;https://twistedmatrix.com/documents/current/core/howto/defer.html#visual-explanation&quot;&gt;errbacks in Twisted&lt;/a&gt; or &lt;a class=&quot;reference external&quot; href=&quot;https://hackernoon.com/promises-and-error-handling-4a11af37cb0e&quot;&gt;Promise.catch in Javascript&lt;/a&gt;. But now you're writing an ad-hoc, fragile reimplementation of the features your language already has. You've lost useful stuff like &quot;tracebacks&quot; and &quot;debuggers&quot;. All it takes is forgetting to call &lt;tt class=&quot;docutils literal&quot;&gt;Promise.catch&lt;/tt&gt; once and suddenly you're dropping serious errors on the floor without even realizing. And even if you do somehow solve all these problems, you'll still end up with two redundant systems for doing the same thing.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;go-statements-not-even-once&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id16&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statements: not even once&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Just like &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; was the obvious primitive for the first practical high-level languages, &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; was the obvious primitive for the first practical concurrency frameworks: it matches how the underlying schedulers actually work, and it's powerful enough to implement any other concurrent flow pattern. But again like &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, it breaks control flow abstractions, so that merely having it as an option in your language makes everything harder to use.&lt;/p&gt;
&lt;p&gt;The good news, though, is that these problems can all be solved: Dijkstra showed us how! We need to:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;Find a replacement for &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statements that has similar power, but follows the &quot;black box rule&quot;,&lt;/li&gt;
&lt;li&gt;Build that new construct into our concurrency framework as a primitive, and don't include any form of &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statement.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And that's what Trio did.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;nurseries-a-structured-replacement-for-go-statements&quot;&gt;

&lt;p&gt;Here's the core idea: every time our control splits into multiple concurrent paths, we want to make sure that they join up again. So for example, if we want to do three things at the same time, our control flow should look something like this:&lt;/p&gt;

&lt;p&gt;Notice that this has just one arrow going in the top and one coming out the bottom, so it follows Dijkstra's black box rule. Now, how can we turn this sketch into a concrete language construct? There are some existing constructs that meet this constraint, but (a) my proposal is slightly different than all the ones I'm aware of and has advantages over them (especially in the context of wanting to make this a standalone primitive), and (b) the concurrency literature is vast and complicated, and trying to pick apart all the history and tradeoffs would totally derail the argument, so I'm going to defer that to a separate post. Here, I'll just focus on explaining my solution. But please be aware that I'm not claiming to have like, invented the idea of concurrency or something, this draws inspiration from many sources, I'm standing on the shoulders of giants, etc. &lt;a class=&quot;footnote-reference&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id7&quot; id=&quot;id3&quot;&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anyway, here's how we're going to do it: first, we declare that a parent task cannot start any child tasks unless it first creates a place for the children to live: a &lt;em&gt;nursery&lt;/em&gt;. It does this by opening a &lt;em&gt;nursery block&lt;/em&gt;; in Trio, we do this using Python's &lt;tt class=&quot;docutils literal&quot;&gt;async with&lt;/tt&gt; syntax:&lt;/p&gt;

&lt;p&gt;Opening a nursery block automatically creates an object representing this nursery, and the &lt;tt class=&quot;docutils literal&quot;&gt;as nursery&lt;/tt&gt; syntax assigns this object to the variable named &lt;tt class=&quot;docutils literal&quot;&gt;nursery&lt;/tt&gt;. Then we can use the nursery object's &lt;tt class=&quot;docutils literal&quot;&gt;start_soon&lt;/tt&gt; method to start concurrent tasks: in this case, one task calling the function &lt;tt class=&quot;docutils literal&quot;&gt;myfunc&lt;/tt&gt;, and another calling the function &lt;tt class=&quot;docutils literal&quot;&gt;anotherfunc&lt;/tt&gt;. Conceptually, these tasks execute &lt;em&gt;inside&lt;/em&gt; the nursery block. In fact, it's often convenient to think of the code written inside the nursery block as being an initial task that's automatically started when the block is created.&lt;/p&gt;

&lt;p&gt;Crucially, the nursery block doesn't exit until all the tasks inside it have exited – if the parent task reaches the end of the block before all the children are finished, then it pauses there and waits for them. The nursery automatically expands to hold the children.&lt;/p&gt;
&lt;p&gt;Here's the control flow: you can see how it matches the basic pattern we showed at the beginning of this section:&lt;/p&gt;

&lt;p&gt;This design has a number of consequences, not all of which are obvious. Let's think through some of them.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;nurseries-preserve-the-function-abstraction&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id18&quot;&gt;Nurseries preserve the function abstraction.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The fundamental problem with &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statements is that when you call a function, you don't know whether it's going to spawn some background task that keeps running after it's finished. With nurseries, you don't have to worry about this: any function can open a nursery and run multiple concurrent tasks, but the function can't return until they've all finished. So when a function does return, you know it's really done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;nurseries-support-dynamic-task-spawning&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id19&quot;&gt;Nurseries support dynamic task spawning.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here's a simpler primitive that would also satisfy our flow control diagram above. It takes a list of thunks, and runs them all concurrently:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;run_concurrently&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anotherfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But the problem with this is that you have to know up front the complete list of tasks you're going to run, which isn't always true. For example, server programs generally have &lt;tt class=&quot;docutils literal&quot;&gt;accept&lt;/tt&gt; loops, that take incoming connections and start a new task to handle each of them. Here's a minimal &lt;tt class=&quot;docutils literal&quot;&gt;accept&lt;/tt&gt; loop in Trio:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_nursery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nursery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;incoming_connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server_socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nursery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_soon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incoming_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With nurseries, this is trivial, but implementing it using &lt;tt class=&quot;docutils literal&quot;&gt;run_concurrently&lt;/tt&gt; would be &lt;em&gt;much&lt;/em&gt; more awkward. And if you wanted to, it would be easy to implement &lt;tt class=&quot;docutils literal&quot;&gt;run_concurrently&lt;/tt&gt; on top of nurseries – but it's not really necessary, since in the simple cases &lt;tt class=&quot;docutils literal&quot;&gt;run_concurrently&lt;/tt&gt; can handle, the nursery notation is just as readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;there-is-an-escape&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id20&quot;&gt;There is an escape.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The nursery object also gives us an escape hatch. What if you really do need to write a function that spawns a background task, where the background task outlives the function itself? Easy: pass the function a nursery object. There's no rule that only the code directly inside the &lt;tt class=&quot;docutils literal&quot;&gt;async with open_nursery()&lt;/tt&gt; block can call &lt;tt class=&quot;docutils literal&quot;&gt;nursery.start_soon&lt;/tt&gt; – so long as the nursery block remains open &lt;a class=&quot;footnote-reference&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id8&quot; id=&quot;id4&quot;&gt;[4]&lt;/a&gt;, then anyone who acquires a reference to the nursery object gets the capability of spawning tasks into that nursery. You can pass it in as a function argument, send it through a queue, whatever.&lt;/p&gt;
&lt;p&gt;In practice, this means that you can write functions that &quot;break the rules&quot;, but within limits:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;Since nursery objects have to be passed around explicitly, you can immediately identify which functions violate normal flow control by looking at their call sites, so local reasoning is still possible.&lt;/li&gt;
&lt;li&gt;Any tasks the function spawns are still bound by the lifetime of the nursery that was passed in.&lt;/li&gt;
&lt;li&gt;And the calling code can only pass in nursery objects that it itself has access to.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So this is still very different from the traditional model where any code can at any moment spawn a background task with unbounded lifetime.&lt;/p&gt;
&lt;p&gt;One place this is useful is in the proof that nurseries have equivalent expressive power to &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statements, but this post is already long enough so I'll leave that for another day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;you-can-define-new-types-that-quack-like-a-nursery&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id21&quot;&gt;You can define new types that quack like a nursery.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The standard nursery semantics provide a solid foundation, but sometimes you want something different. Perhaps you're envious of Erlang and its supervisors, and want to define a nursery-like class that handles exceptions by restarting the child task. That's totally possible, and to your users, it'll look just like a regular nursery:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_supervisor_library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nursery_alike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nursery_alike&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_soon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have a function that takes a nursery as an argument, then you can pass it one of these instead to control the error-handling policy for the tasks it spawns. Pretty nifty. But there is one subtlety here that pushes Trio towards different conventions than asyncio or some other libraries: it means that &lt;tt class=&quot;docutils literal&quot;&gt;start_soon&lt;/tt&gt; has to take a function, not a coroutine object or a &lt;tt class=&quot;docutils literal&quot;&gt;Future&lt;/tt&gt;. (You can call a function multiple times, but there's no way to restart a coroutine object or a &lt;tt class=&quot;docutils literal&quot;&gt;Future&lt;/tt&gt;.) I think this is the better convention anyway for a number of reasons (especially since Trio doesn't even have &lt;tt class=&quot;docutils literal&quot;&gt;Future&lt;/tt&gt;s!), but still, worth mentioning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;no-really-nurseries-always-wait-for-the-tasks-inside-to-exit&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id22&quot;&gt;No, really, nurseries &lt;em&gt;always&lt;/em&gt; wait for the tasks inside to exit.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It's also worth talking about how task cancellation and task joining interact, since there are some subtleties here that could – if handled incorrectly – break the nursery invariants.&lt;/p&gt;
&lt;p&gt;In Trio, it's possible for code to receive a cancellation request at any time. After a cancellation is requested, then the next time the code executes a &quot;checkpoint&quot; operation (&lt;a class=&quot;reference external&quot; href=&quot;https://trio.readthedocs.io/en/latest/reference-core.html#checkpoints&quot;&gt;details&lt;/a&gt;), a &lt;tt class=&quot;docutils literal&quot;&gt;Cancelled&lt;/tt&gt; exception is raised. This means that there's a gap between when a cancellation is &lt;em&gt;requested&lt;/em&gt; and when it actually &lt;em&gt;happens&lt;/em&gt; – it might be a while before the task executes a checkpoint, and then after that the exception has to unwind the stack, run cleanup handlers, etc. When this happens, the nursery always waits for the full cleanup to happen. We &lt;em&gt;never&lt;/em&gt; terminate a task without giving it a chance to run cleanup handlers, and we &lt;em&gt;never&lt;/em&gt; leave a task to run unsupervised outside of the nursery, even if it's in the process of being cancelled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;automatic-resource-cleanup-works&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id23&quot;&gt;Automatic resource cleanup works.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because nurseries follow the black box rule, they make &lt;tt class=&quot;docutils literal&quot;&gt;with&lt;/tt&gt; blocks work again. There's no chance that, say, closing a file at the end of a &lt;tt class=&quot;docutils literal&quot;&gt;with&lt;/tt&gt; block will accidentally break a background task that's still using that file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;automated-error-propagation-works&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id24&quot;&gt;Automated error propagation works.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As noted above, in most concurrency systems, unhandled errors in background tasks are simply discarded. There's literally nothing else to do with them.&lt;/p&gt;
&lt;p&gt;In Trio, since every task lives inside a nursery, and every nursery is part of a parent task, and parent tasks are required to wait for the tasks inside the nursery... we &lt;em&gt;do&lt;/em&gt; have something we can do with unhandled errors. If a background task terminates with an exception, we can rethrow it in the parent task. The intuition here is that a nursery is something like a &quot;concurrent call&quot; primitive: we can think of our example above as calling &lt;tt class=&quot;docutils literal&quot;&gt;myfunc&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;anotherfunc&lt;/tt&gt; at the same time, so our call stack has become a tree. And exceptions propagate up this call tree towards the root, just like they propagate up a regular call stack.&lt;/p&gt;
&lt;p&gt;There is one subtlety here though: when we re-raise an exception in the parent task, it will start propagating in the parent task. Generally, that means that the parent task will exit the nursery block. But we've already said that the parent task cannot leave the nursery block while there are still child tasks running. So what do we do?&lt;/p&gt;
&lt;p&gt;The answer is that when an unhandled exception occurs in a child, Trio immediately cancels all the other tasks in the same nursery, and then waits for them to finish before re-raising the exception. The intuition here is that exceptions cause the stack to unwind, and if we want to unwind past a branch point in our stack tree, we need to unwind the other branches, by cancelling them.&lt;/p&gt;
&lt;p&gt;This does mean though that if you want to implement nurseries in your language, you may need some kind of integration between the nursery code and your cancellation system. This might be tricky if you're using a language like C# or Golang where cancellation is usually managed through manual object passing and convention, or (even worse) one that doesn't have a generic cancellation mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;a-surprise-benefit-removing-go-statements-enables-new-features&quot;&gt;
&lt;h3&gt;&lt;a class=&quot;toc-backref&quot; href=&quot;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/#id25&quot;&gt;A surprise benefit: removing &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statements enables new features&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Eliminating &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; allowed previous language designers to make stronger assumptions about the structure of programs, which enabled new features like &lt;tt class=&quot;docutils literal&quot;&gt;with&lt;/tt&gt; blocks and exceptions; eliminating &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statements has a similar effect. For example:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;Trio's cancellation system is easier to use and more reliable than competitors, because it can assume that tasks are nested in a regular tree structure; see &lt;a class=&quot;reference external&quot; href=&quot;https://vorpus.org/blog/timeouts-and-cancellation-for-humans/&quot;&gt;Timeouts and cancellation for humans&lt;/a&gt; for a full discussion.&lt;/li&gt;
&lt;li&gt;Trio is the only Python concurrency library where control-C works the way Python developers expect (&lt;a class=&quot;reference external&quot; href=&quot;https://vorpus.org/blog/control-c-handling-in-python-and-trio/&quot;&gt;details&lt;/a&gt;). This would be impossible without nurseries providing a reliable mechanism for propagating exceptions.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;nurseries-in-practice&quot;&gt;

&lt;p&gt;So that's the theory. How's it work in practice?&lt;/p&gt;
&lt;p&gt;Well... that's an empirical question: you should try it and find out! But seriously, we just won't know for sure until lots of people have pounded on it. At this point I'm pretty confident that the foundation is sound, but maybe we'll realize we need to make some tweaks, like how the early structured programming advocates eventually backed off from eliminating &lt;tt class=&quot;docutils literal&quot;&gt;break&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;continue&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;And if you're an experienced concurrent programmer who's just learning Trio, then you should expect to find it a bit rocky at times. You'll have to &lt;a class=&quot;reference external&quot; href=&quot;https://stackoverflow.com/questions/48282841/in-trio-how-can-i-have-a-background-task-that-lives-as-long-as-my-object-does&quot;&gt;learn new ways to do things&lt;/a&gt; – just like programmers in the 1970s found it challenging to learn how to write code without &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;But of course, that's the point. As Knuth wrote (&lt;a class=&quot;reference external&quot; href=&quot;https://scholar.google.com/scholar?cluster=17147143327681396418&amp;amp;hl=en&amp;amp;as_sdt=0,5&quot;&gt;Knuth, 1974&lt;/a&gt;, p. 275):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Probably the worst mistake any one can make with respect to the subject of &lt;strong&gt;go to&lt;/strong&gt; statements is to assume that &quot;structured programming&quot; is achieved by writing programs as we always have and then eliminating the &lt;strong&gt;go to&lt;/strong&gt;'s. Most &lt;strong&gt;go to&lt;/strong&gt;'s shouldn't be there in the first place! What we really want is to conceive of our program in such a way that we rarely even &lt;em&gt;think&lt;/em&gt; about &lt;strong&gt;go to&lt;/strong&gt; statements, because the real need for them hardly ever arises. The language in which we express our ideas has a strong influence on our thought processes. Therefore, Dijkstra asks for more new language features – structures which encourage clear thinking – in order to avoid the &lt;strong&gt;go to&lt;/strong&gt;'s temptations towards complications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And so far, that's been my experience with using nurseries: they encourage clear thinking. They lead to designs that are more robust, easier to use, and just better all around. And the limitations actually make it easier to solve problems, because you spend less time being tempted towards unnecessary complications. Using Trio has, in a very real sense, taught me to be a better programmer.&lt;/p&gt;
&lt;p&gt;For example, consider the Happy Eyeballs algorithm (&lt;a class=&quot;reference external&quot; href=&quot;https://tools.ietf.org/html/rfc8305&quot;&gt;RFC 8305&lt;/a&gt;), which is a simple concurrent algorithm for speeding up the establishment of TCP connections. Conceptually, the algorithm isn't complicated – you race several connection attempts against each other, with a staggered start to avoid overloading the network. But if you look at &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/twisted/twisted/compare/trunk...glyph:statemachine-hostnameendpoint&quot;&gt;Twisted's best implementation&lt;/a&gt;, it's almost 600 lines of Python, and still has &lt;a class=&quot;reference external&quot; href=&quot;https://twistedmatrix.com/trac/ticket/9345&quot;&gt;at least one logic bug&lt;/a&gt;. The equivalent in Trio is more than &lt;strong&gt;15x&lt;/strong&gt; shorter. More importantly, using Trio I was able to write it in minutes instead of months, and I got the logic correct on my first try. I never could have done this in any other framework, even ones where I have much more experience. For more details, you can &lt;a class=&quot;reference external&quot; href=&quot;https://www.youtube.com/watch?v=i-R704I8ySE&quot;&gt;watch my talk at Pyninsula last month&lt;/a&gt;. Is this typical? Time will tell. But it's certainly promising.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;

&lt;p&gt;The popular concurrency primitives – &lt;tt class=&quot;docutils literal&quot;&gt;go&lt;/tt&gt; statements, thread spawning functions, callbacks, futures, promises, ... they're all variants on &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, in theory and in practice. And not even the modern domesticated &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, but the old-testament fire-and-brimstone &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, that could leap across function boundaries. These primitives are dangerous even if we don't use them directly, because they undermine our ability to reason about control flow and compose complex systems out of abstract modular parts, and they interfere with useful language features like automatic resource cleanup and error propagation. Therefore, like &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt;, they have no place in a modern high-level language.&lt;/p&gt;
&lt;p&gt;Nurseries provide a safe and convenient alternative that preserves the full power of your language, enables powerful new features (as demonstrated by Trio's cancellation scopes and control-C handling), and can produce dramatic improvements in readability, productivity, and correctness.&lt;/p&gt;
&lt;p&gt;Unfortunately, to fully capture these benefits, we do need to remove the old primitives entirely, and this probably requires building new concurrency frameworks from scratch – just like eliminating &lt;tt class=&quot;docutils literal&quot;&gt;goto&lt;/tt&gt; required designing new languages. But as impressive as FLOW-MATIC was for its time, most of us are glad that we've upgraded to something better. I don't think we'll regret switching to nurseries either, and Trio demonstrates that this is a viable design for practical, general-purpose concurrency frameworks.&lt;/p&gt;
&lt;/div&gt;


</description>
<pubDate>Wed, 25 Apr 2018 14:24:43 +0000</pubDate>
<dc:creator>m0meni</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/</dc:identifier>
</item>
<item>
<title>JavaScript Pattern Matching Proposal</title>
<link>https://github.com/tc39/proposal-pattern-matching</link>
<guid isPermaLink="true" >https://github.com/tc39/proposal-pattern-matching</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;

&lt;p&gt;&lt;strong&gt;Stage&lt;/strong&gt;: 0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Author&lt;/strong&gt;: Kat Marchán (npm, &lt;a href=&quot;https://twitter.com/maybekatz&quot; rel=&quot;nofollow&quot;&gt;@maybekatz&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Champions&lt;/strong&gt;: Brian Terlson (Microsoft, &lt;a href=&quot;https://twitter.com/bterlson&quot; rel=&quot;nofollow&quot;&gt;@bterlson&lt;/a&gt;), Sebastian Markbåge (Facebook, &lt;a href=&quot;https://twitter.com/sebmarkbage&quot; rel=&quot;nofollow&quot;&gt;@sebmarkbage&lt;/a&gt;), Kat Marchán (npm, &lt;a href=&quot;https://twitter.com/maybekatz&quot; rel=&quot;nofollow&quot;&gt;@maybekatz&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This proposal adds a pattern matching expression to the language, based on the existing &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns&quot; rel=&quot;nofollow&quot;&gt;Destructuring Binding Patterns&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's structured into multiple parts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/tc39/proposal-pattern-matching/blob/latest/CORE.md&quot;&gt;core proposal for the &lt;code&gt;match&lt;/code&gt; API&lt;/a&gt;, which is based directly on destructuring binding patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A proposal extending both &lt;code&gt;match&lt;/code&gt; and regular destructuring with &lt;a href=&quot;https://github.com/zkat/proposal-as-patterns&quot;&gt;&lt;code&gt;as&lt;/code&gt; patterns&lt;/a&gt;, so patterns can both be matched and be assigned to identifiers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A proposal to add &lt;a href=&quot;https://github.com/zkat/proposal-collection-literals&quot;&gt;tagged collection literals&lt;/a&gt;, both as construction literals, and as their corresponding destructuring patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A document including suggestions for &lt;a href=&quot;https://github.com/tc39/proposal-pattern-matching/blob/latest/TO_INFINITY_AND_BEYOND.md&quot;&gt;other future proposals&lt;/a&gt;, which are dependent on &lt;code&gt;match&lt;/code&gt;, but do not directly affect the main behavior of the feature.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This proposal draws heavily from corresponding features in &lt;a href=&quot;https://doc.rust-lang.org/1.6.0/book/patterns.html&quot; rel=&quot;nofollow&quot;&gt;Rust&lt;/a&gt;, &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/pattern-matching&quot; rel=&quot;nofollow&quot;&gt;F#&lt;/a&gt;, &lt;a href=&quot;http://www.scala-lang.org/files/archive/spec/2.11/08-pattern-matching.html&quot; rel=&quot;nofollow&quot;&gt;Scala&lt;/a&gt;, and &lt;a href=&quot;https://elixir-lang.org/getting-started/pattern-matching.html&quot; rel=&quot;nofollow&quot;&gt;Elixir&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Motivating Examples&lt;/h2&gt;
&lt;p&gt;Matching &lt;code&gt;fetch()&lt;/code&gt; responses:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;fetch&lt;/span&gt;(jsonService)
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;match&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;res&lt;/span&gt;) {
  {status&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;200&lt;/span&gt;, headers&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Content-Length&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; s}} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;size is &lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;s&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;,
  {status&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;404&lt;/span&gt;} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;JSON not found&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
  {status} &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;400&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;RequestError&lt;/span&gt;(res)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Terser, more functional handling of Redux reducers. Compare with &lt;a href=&quot;https://redux.js.org/basics/reducers#splitting-reducers&quot; rel=&quot;nofollow&quot;&gt;this same example in the Redux documentation&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;todoApp&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;initialState&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;action&lt;/span&gt;) {
  &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;newState&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;match&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;action&lt;/span&gt;) {
    {type&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;set-visibility-filter&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, filter&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; visFilter} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; ({visFilter}),

    {type&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;add-todo&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, text} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; ({
      todos&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;todos&lt;/span&gt;, {text}]
    }),

    {type&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;toggle-todo&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, index} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; ({
      todos&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;state&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;todos&lt;/span&gt;.&lt;span class=&quot;pl-en&quot;&gt;map&lt;/span&gt;((&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;idx&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; idx &lt;span class=&quot;pl-k&quot;&gt;===&lt;/span&gt; index
        &lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt; {&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;todo, done&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;todo&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;done&lt;/span&gt;}
        &lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; todo
      )
    }),

    {} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; ignore unknown actions&lt;/span&gt;
  }

  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;state, &lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;newState}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or mixed in with JSX code for quick props handling:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;Fetch url&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;API_URL&lt;/span&gt;}&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;{
  &lt;span class=&quot;pl-smi&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;match&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;props&lt;/span&gt;) {
    {loading} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;Loading &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;,
    {error} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;Error&lt;/span&gt; error&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{error} &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;,
    {data} &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;Page data&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{data} &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
  }
}
&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt;Fetch&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(via &lt;a href=&quot;https://twitter.com/bogas04/status/977499729557839873&quot; rel=&quot;nofollow&quot;&gt;Divjot Singh&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;General structural duck-typing on an API for vector-likes:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;getLength&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;vector&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;match&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;vector&lt;/span&gt;) {
  { x, y, z } &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;sqrt&lt;/span&gt;(x &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; z &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;),
  { x, y } &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;sqrt&lt;/span&gt;(x &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;),
  [&lt;span class=&quot;pl-k&quot;&gt;...&lt;/span&gt;etc] &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;vector&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;length&lt;/span&gt;
}
&lt;span class=&quot;pl-en&quot;&gt;getLength&lt;/span&gt;({x&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, y&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, z&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;}) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 3.74165&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Implementations&lt;/h2&gt;
&lt;/article&gt;</description>
<pubDate>Wed, 25 Apr 2018 14:12:26 +0000</pubDate>
<dc:creator>JONBRWN</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/1725583?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>tc39/proposal-pattern-matching</og:title>
<og:url>https://github.com/tc39/proposal-pattern-matching</og:url>
<og:description>proposal-pattern-matching - Pattern matching syntax for ECMAScript</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/tc39/proposal-pattern-matching</dc:identifier>
</item>
<item>
<title>E-waste recycler loses appeal on computer restore disks, must serve prison term</title>
<link>https://www.washingtonpost.com/news/true-crime/wp/2018/04/24/recycling-innovator-eric-lundgren-loses-appeal-on-computer-restore-discs-must-serve-15-month-prison-term/?tid=ss_tw-amp&amp;noredirect=on</link>
<guid isPermaLink="true" >https://www.washingtonpost.com/news/true-crime/wp/2018/04/24/recycling-innovator-eric-lundgren-loses-appeal-on-computer-restore-discs-must-serve-15-month-prison-term/?tid=ss_tw-amp&amp;noredirect=on</guid>
<description>&lt;div data-elm-loc=&quot;0&quot; class=&quot;inline-content inline-photo inline-photo-normal&quot;&gt; &lt;img class=&quot;unprocessed&quot; src=&quot;https://www.washingtonpost.com/resizer/7egDK6wkHplpKaEGzWf636K4ZN0=/480x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/WYMO5SARYA24XC5DLTIDKAQU3A.jpg&quot; data-hi-res-src=&quot;https://www.washingtonpost.com/resizer/vVWGdah8nTojd1VZ2FrAPEppMSM=/1484x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/WYMO5SARYA24XC5DLTIDKAQU3A.jpg&quot; data-low-res-src=&quot;https://www.washingtonpost.com/resizer/7egDK6wkHplpKaEGzWf636K4ZN0=/480x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/WYMO5SARYA24XC5DLTIDKAQU3A.jpg&quot; data-raw-src=&quot;https://arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/WYMO5SARYA24XC5DLTIDKAQU3A.jpg&quot;/&gt;&lt;br/&gt;&lt;div class=&quot;pb-caption&quot;&gt;Eric Lundgren atop a pile of 48,000 “restore CDs” he purchased recently for less than 5 cents apiece. He faces prison for seeking to distribute similar CDs to computer refurbishers. (Eric Lundgren)&lt;/div&gt;
&lt;/div&gt;&lt;p data-elm-loc=&quot;1&quot;&gt;&lt;em&gt;This story has been updated with a statement from Microsoft.&lt;/em&gt;&lt;/p&gt;
&lt;p data-elm-loc=&quot;2&quot;&gt;A California man who built a sizable business out of recycling electronic waste is headed to federal prison for 15 months after a federal appeals court in Miami rejected his claim that the “restore disks” he made to extend the lives of computers had no financial value, instead ruling that he had infringed Microsoft’s products to the tune of $700,000.&lt;/p&gt;
&lt;p data-elm-loc=&quot;3&quot;&gt;The appeals court upheld a federal district judge’s ruling that the disks made by Eric Lundgren to restore Microsoft operating systems had a value of $25 apiece, even though they could be downloaded free and could be used only on computers with a valid Microsoft license. The U.S. Court of Appeals for the 11th Circuit initially granted Lundgren an emergency stay of his prison sentence, shortly before he was to surrender, but then affirmed his original 15-month sentence and $50,000 fine without hearing oral argument in a ruling issued April 11.&lt;/p&gt;
&lt;p data-elm-loc=&quot;4&quot; class=&quot;interstitial-link&quot;&gt;&lt;em&gt;[&lt;a href=&quot;https://www.washingtonpost.com/news/true-crime/wp/2018/02/15/eric-lundgren-e-waste-recycling-innovator-faces-prison-for-trying-to-extend-lifespan-of-pcs/?utm_term=.986f987a3354&quot;&gt;Eric Lundgren, ‘e-waste’ recycling innovator, faces prison for trying to extend lifespan of PCs&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;
&lt;p data-elm-loc=&quot;5&quot;&gt;Lundgren, 33, has become a renowned innovator in the field of “e-waste,” using discarded parts to construct things such as an electric car, which far outdistanced a Tesla in a test on one charge. He built the first “electronic hybrid recycling” facility in the United States, which turns discarded cellphones and other electronics into functional devices, slowing the stream of harmful chemicals and metals into landfills and the environment. His California-based company processes more than 41 million pounds of e-waste each year and counts IBM, Motorola and Sprint among its clients.&lt;/p&gt;
&lt;p data-elm-loc=&quot;6&quot;&gt;“This is a difficult sentencing,” Senior U.S. District Judge Daniel T.K. Hurley told him last year, “because I credit everything you are telling me, you are a very remarkable person.”&lt;/p&gt;
&lt;div data-elm-loc=&quot;7&quot; class=&quot;inline-content inline-html&quot;&gt;
&lt;p&gt;Before he launched his company, IT Asset Partners, Lundgren lived in China, learning about the stream of e-waste and finding ways to send cheap parts to America to keep electronics running. One of his projects was to manufacture thousands of “restore disks,” usually supplied by computer-makers as a way for users to restore Windows to a hard drive if it crashes or must be wiped. The disks can be used only on a computer that already has a license for the Windows operating system&lt;del&gt;, and the license transfers with the computer for its full life span&lt;/del&gt;. But computer owners often lose or throw out the disks, and though the operating system can be downloaded free on a licensed computer, Lundgren realized that many people didn’t feel competent to do that, and were simply throwing out their computers and buying new ones.&lt;/p&gt;
&lt;/div&gt;
&lt;p data-elm-loc=&quot;8&quot;&gt;Lundgren had 28,000 of the disks made and shipped to a broker in Florida. Their plan was to sell the disks to computer refurbishing shops for about 25 cents apiece, so the refurbishers could provide the disks to used-computer buyers and wouldn’t have to take the time to create the disks themselves. In turn, the new users might be able to use the disks to keep their computers going the next time a problem occurred.&lt;/p&gt;
&lt;div data-elm-loc=&quot;9&quot; class=&quot;inline-content inline-photo inline-photo-normal&quot;&gt; &lt;img class=&quot;unprocessed&quot; src=&quot;https://www.washingtonpost.com/resizer/xXHhMqINJMhqKfmC6ipWGOtuBTk=/480x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/2N2KA7FSNE74BA7YPY3RV7PQUY.jpg&quot; data-hi-res-src=&quot;https://www.washingtonpost.com/resizer/B-qMpg-DSr8eWgJthafRDOH1UUI=/1484x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/2N2KA7FSNE74BA7YPY3RV7PQUY.jpg&quot; data-low-res-src=&quot;https://www.washingtonpost.com/resizer/xXHhMqINJMhqKfmC6ipWGOtuBTk=/480x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/2N2KA7FSNE74BA7YPY3RV7PQUY.jpg&quot; data-raw-src=&quot;https://arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/2N2KA7FSNE74BA7YPY3RV7PQUY.jpg&quot;/&gt;&lt;br/&gt;&lt;div class=&quot;pb-caption&quot;&gt;In 2015, Eric Lundgren, center, worked in Ghana to find ways to eliminate the harmful burning of e-waste at the request of the country’s vice president. (Spencer Marks)&lt;/div&gt;
&lt;/div&gt;
&lt;p data-elm-loc=&quot;10&quot;&gt;But in 2012, U.S. customs officers seized a shipment and began investigating. The disks were never sold. Eventually, the Florida broker, Robert Wolff, called Lundgren and offered to buy the disks himself as part of a government sting, Lundgren said. Wolff sent Lundgren $3,400, and the conspiracy was cemented. Both were indicted on a charge of conspiracy to traffic in counterfeit goods and criminal copyright infringement. Wolff made a plea deal and received a six-month home-arrest sentence.&lt;/p&gt;
&lt;p data-elm-loc=&quot;11&quot;&gt;Lundgren pleaded guilty but argued that the value of his disks was zero, so there was no harm to anyone. Neither Microsoft nor any computer manufacturers sell restore disks. They supply them free with new computers and make the software available for free downloading for those who have paid for the software and received a license — typically a sticker with a “Certificate of Authenticity” number on it. Lundgren said that he was trying to make the disks available for those who needed them and that they could be used only on licensed computers.&lt;/p&gt;
&lt;p data-elm-loc=&quot;12&quot;&gt;Initially, federal prosecutors valued the disks at $299 each, the cost of a brand-new Windows operating system, and Lundgren’s indictment claimed he had cost Microsoft $8.3 million in lost sales. By the time of sentencing, a Microsoft letter to Hurley and a Microsoft expert witness had reduced the value of the disks to $25 apiece, stating that was what Microsoft charged refurbishers for such disks.&lt;/p&gt;
&lt;p data-elm-loc=&quot;13&quot;&gt;But both the letter and the expert were pricing a disk that came with a Microsoft license. “These sales of counterfeit operating systems,” Microsoft lawyer Bonnie MacNaughton wrote to the judge, “displaced Microsoft’s potential sales of genuine operating systems.” But Lundgren’s disks had no licenses and were intended for computers that already had licenses.&lt;/p&gt;
&lt;p data-elm-loc=&quot;14&quot;&gt;Glenn Weadock, a former expert witness for the government in its antitrust case against Microsoft, was asked, “In your opinion, without a code, either product key or COA [Certificate of Authenticity], what is the value of these reinstallation disks?”&lt;/p&gt;
&lt;p data-elm-loc=&quot;15&quot;&gt;“Zero or near zero,” Weadock said.&lt;/p&gt;
&lt;p data-elm-loc=&quot;16&quot;&gt;Why would anybody pay for one? Lundgren’s lawyer asked.&lt;/p&gt;
&lt;p data-elm-loc=&quot;17&quot;&gt;“There is a convenience factor associated with them,” Weadock said.&lt;/p&gt;
&lt;p data-elm-loc=&quot;18&quot;&gt;Still, Hurley decided Lundgren’s 28,000 restore disks had a value of $700,000, and that dollar amount qualified Lundgren for a 15-month term and a $50,000 fine. The judge said he disregarded Weadock’s testimony. “I don’t think anybody in that courtroom understood what a restore disk was,” Lundgren said.&lt;/p&gt;
&lt;p data-elm-loc=&quot;19&quot;&gt;A three-judge panel of the 11th Circuit deferred to Hurley in his judgment that Weadock was not credible and that “while experts on both sides may have identified differences in functionality in the discs, [Hurley] did not clearly err in finding them substantially equivalent.” The ruling was written by Judges William H. Pryor Jr., Beverly B. Martin and R. Lanier Anderson.&lt;/p&gt;
&lt;p data-elm-loc=&quot;20&quot;&gt;Randall Newman, Lundgren’s lawyer on the appeal, said there was no basis to seek a rehearing from the full 11th Circuit. Lundgren said an appeal to the Supreme Court would be a costly long shot.&lt;/p&gt;
&lt;p data-elm-loc=&quot;21&quot;&gt;But he said the court had set a precedent for Microsoft and other software-makers to pursue criminal cases against those seeking to extend the life span of computers. “I got in the way of their agenda,” Lundgren said, “this profit model that’s way more profitable than I could ever be.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;22&quot;&gt;Microsoft issued a statement Wednesday explaining why they participated in the prosecution of Lundgren, which was to discourage both counterfeiting and the spread of malware within counterfeit software: “Microsoft actively supports efforts to address e-waste and has worked with responsible e-recyclers to recycle more than 11 million kilograms of e-waste since 2006,” the statement said. “Unlike most e-recyclers, Mr. Lundgren sought out counterfeit software which he disguised as legitimate and sold to other refurbishers. This counterfeit software exposes people who purchase recycled PCs to malware and other forms of cybercrime, which puts their security at risk and ultimately hurts the market for recycled products.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;23&quot;&gt;The idea of spreading dangerous malware was not discussed in Lundgren’s case. But Microsoft said that when a computer system is prepared for refurbishment, its hard drive is wiped clean of data and its original software.  The license for the operating system does not transfer, as Lundgren claimed, and refurbishers are required to obtain new licenses which Microsoft offers at a discounted price of approximately $25, a Microsoft spokesman said.&lt;/p&gt;
&lt;p data-elm-loc=&quot;24&quot;&gt;Lundgren said he wasn’t sure when he would be surrendering. He said prosecutors in Miami told him he could have a couple of weeks to put his financial affairs in order, including plans for his company of more than 100 employees. “But I was told if I got loud in the media, they’d come pick me up,” Lundgren said. “If you want to take my liberty, I’m going to get loud.”&lt;/p&gt;
&lt;p data-elm-loc=&quot;25&quot;&gt;A spokeswoman for the U.S. attorney’s office in Miami declined to comment Monday.&lt;/p&gt;
&lt;p data-elm-loc=&quot;26&quot;&gt;“I am going to prison, and I’ve accepted it,” Lundgren said Monday. “What I’m not okay with is people not understanding why I’m going to prison. Hopefully my story can shine some light on the e-waste epidemic we have in the United States, how wasteful we are. At what point do people stand up and say something? I didn’t say something, I just did it.”&lt;/p&gt;
</description>
<pubDate>Wed, 25 Apr 2018 14:09:55 +0000</pubDate>
<dc:creator>dnewms</dc:creator>
<og:type>article</og:type>
<og:url>https://www.washingtonpost.com/news/true-crime/wp/2018/04/24/recycling-innovator-eric-lundgren-loses-appeal-on-computer-restore-discs-must-serve-15-month-prison-term/</og:url>
<og:image>https://www.washingtonpost.com/resizer/vVWGdah8nTojd1VZ2FrAPEppMSM=/1484x0/arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/WYMO5SARYA24XC5DLTIDKAQU3A.jpg</og:image>
<og:title>E-waste recycler Eric Lundgren loses appeal on computer restore disks, must serve 15-month prison term</og:title>
<og:description>A plan to provide “restore disks” to computer users equaled copyright infringement, according to Microsoft and the government, even though the software was available free online.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.washingtonpost.com/news/true-crime/wp/2018/04/24/recycling-innovator-eric-lundgren-loses-appeal-on-computer-restore-discs-must-serve-15-month-prison-term/?tid=ss_tw-amp&amp;noredirect=on</dc:identifier>
</item>
<item>
<title>Microsoft makes AI training courses available to the public</title>
<link>https://blogs.microsoft.com/ai/microsoft-professional-program-ai/?ranMID=24542&amp;ranEAID=je6NUbpObpQ&amp;ranSiteID=je6NUbpObpQ-.mMWLBjZC7qyEtfMELrweg&amp;tduid=(2439940df6f0d43345c136d9b28a9c0f)(256380)(2459594)(je6NUbpObpQ-.mMWLBjZC7qyEtfMELrweg)()</link>
<guid isPermaLink="true" >https://blogs.microsoft.com/ai/microsoft-professional-program-ai/?ranMID=24542&amp;ranEAID=je6NUbpObpQ&amp;ranSiteID=je6NUbpObpQ-.mMWLBjZC7qyEtfMELrweg&amp;tduid=(2439940df6f0d43345c136d9b28a9c0f)(256380)(2459594)(je6NUbpObpQ-.mMWLBjZC7qyEtfMELrweg)()</guid>
<description>&lt;img class=&quot;wp-image-75028 size-full&quot; src=&quot;https://blogs.microsoft.com/uploads/sites/3/2018/03/08-AI-class-20171206-feature-1200x675.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;675&quot; srcset=&quot;https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/08-AI-class-20171206-feature-1200x675.jpg 1200w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/08-AI-class-20171206-feature-1200x675-300x169.jpg 300w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/08-AI-class-20171206-feature-1200x675-768x432.jpg 768w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/08-AI-class-20171206-feature-1200x675-1024x576.jpg 1024w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/08-AI-class-20171206-feature-1200x675-960x540.jpg 960w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/08-AI-class-20171206-feature-1200x675-480x270.jpg 480w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot;/&gt;&lt;em&gt;Graeme Malcolm, senior content developer of Microsoft’s Worldwide Learning Group, leads a session on AI skills for Microsoft employees. (Photo by Dan DeLong)&lt;/em&gt;&lt;p&gt;As a software engineer at Microsoft, Elena Voyloshnikova’s job is to make informed recommendations about how to improve the performance of software engineering tools.&lt;/p&gt;
&lt;p&gt;But too often, she spends her days manually analyzing the data she needs to make those decisions. Lately, her team has been discussing the potential of building machine learning models to automate that task – creating more time to focus on the decision-making.&lt;/p&gt;
&lt;p&gt;That’s why she was intrigued when she received an email announcing an upcoming AI training session for Microsoft employees.&lt;/p&gt;
&lt;p&gt;“I asked my manager, ‘Can I go to this?’” she said. “I thought it looked like a good overview of things I would like to know.”&lt;/p&gt;
&lt;p&gt;Voyloshnikova was one of more than 1,200 employees who attended the session in person or via livestream – an audience size that reflects the desire even of people who work in technology companies to better understand AI.&lt;/p&gt;
&lt;p&gt;To address that need, Microsoft routinely offers AI training sessions to its employees and is increasingly opening similar types of training to the public.&lt;/p&gt;
&lt;p&gt;On Monday, the company announced the &lt;span&gt;&lt;a href=&quot;https://academy.microsoft.com/en-us/professional-program/tracks/artificial-intelligence/&quot;&gt;Microsoft Professional Program in AI&lt;/a&gt;,&lt;/span&gt; the latest learning track open to the public. The program provides job-ready skills and real-world experience to engineers and others who are looking to improve their skills in AI and data science through a series of online courses that feature hands-on labs and expert instructors.&lt;/p&gt;
&lt;p&gt;The program is part of a larger corporate effort that also includes the enterprise developer-focused &lt;span&gt;&lt;a href=&quot;https://aischool.microsoft.com/learning-paths&quot;&gt;AI School&lt;/a&gt;&lt;/span&gt;, which provides online videos and other assets to help developers build AI skills. That program includes both general educational tools for developers looking to expand AI capabilities and specific guidance on how developers can use Microsoft’s tools and services.&lt;/p&gt;
&lt;p&gt;For example, AI School covers how to use offerings such as &lt;span&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/services/cognitive-services/&quot;&gt;Microsoft Cognitive Services&lt;/a&gt;&lt;/span&gt;, which allow developers to incorporate intelligent algorithms for computer vision, natural language processing and translation capabilities into their products, and the Azure &lt;span&gt;&lt;a href=&quot;https://dev.botframework.com/&quot;&gt;Bot Service&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;img class=&quot;wp-image-75040 size-full&quot; src=&quot;https://blogs.microsoft.com/uploads/sites/3/2018/03/20-AI-class-20171206-blog-image-1200x675.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;675&quot; srcset=&quot;https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/20-AI-class-20171206-blog-image-1200x675.jpg 1200w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/20-AI-class-20171206-blog-image-1200x675-300x169.jpg 300w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/20-AI-class-20171206-blog-image-1200x675-768x432.jpg 768w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/20-AI-class-20171206-blog-image-1200x675-1024x576.jpg 1024w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/20-AI-class-20171206-blog-image-1200x675-960x540.jpg 960w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/20-AI-class-20171206-blog-image-1200x675-480x270.jpg 480w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot;/&gt;&lt;em&gt;Software engineer Elena Voyloshnikova listens to a presentation by Graeme Malcolm during an AI school event. (Photo by Dan DeLong)&lt;/em&gt;
&lt;p&gt;Microsoft’s employee and publicly available AI training opportunities reflect a broader push throughout the technology industry to fill a gap in workers with skills in artificial intelligence, according to &lt;span&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/people/sdumais/&quot;&gt;Susan Dumais&lt;/a&gt;&lt;/span&gt;, distinguished scientist and assistant director of Microsoft Research AI.&lt;/p&gt;
&lt;p&gt;“AI is increasingly important in how our products and services are designed and delivered and that is true for our customers as well,” she said.&lt;/p&gt;
&lt;p&gt;“Fundamentally,” she added, “we are all interested in developing talent that is able to build, understand and design systems that have AI as a central component.”&lt;/p&gt;
&lt;h3&gt;AI training for all&lt;/h3&gt;
&lt;p&gt;Microsoft’s AI training efforts range from internal offerings tailored to employees on specific teams and product groups, such as software engineers at LinkedIn, to external ones designed for a variety of expertise levels.&lt;/p&gt;
&lt;p&gt;For example, the &lt;span&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/academic-program/microsoft-ai-residency-program/&quot;&gt;Microsoft AI Residency Program&lt;/a&gt;&lt;/span&gt; and &lt;span&gt;&lt;a href=&quot;http://microsoftnewengland.com/nerdAI/&quot;&gt;Microsoft NERD Artificial Intelligence Program&lt;/a&gt;&lt;/span&gt; recruit people to learn AI by working alongside researchers, designers and engineers who are developing AI capabilities and serve as a pipeline of talent into the company.&lt;/p&gt;
&lt;p&gt;The &lt;span&gt;&lt;a href=&quot;https://academy.microsoft.com/en-us/professional-program/tracks/artificial-intelligence/&quot;&gt;Microsoft Professional Program in AI&lt;/a&gt;&lt;/span&gt; is an outgrowth of Microsoft’s internal AI training initiatives, including what was internally dubbed AI School 611, a project-based semester-style program that provides a competitively selected group of employees with tools, training and mentoring from leading experts in AI and machine learning to bring new AI capabilities into their product or service.&lt;/p&gt;
&lt;p&gt;“We solicit, from all over Microsoft, projects that require AI which can be accelerated by working closely with AI experts to help shape new algorithms and data pipelines,” said Dumais, who leads the program.&lt;/p&gt;
&lt;h3&gt;Microsoft Professional Program in AI&lt;/h3&gt;
&lt;p&gt;The three-hour course that Voyloshnikova attended introduced her to the types of programs and applications that can be developed today using AI, such as interactive bots on websites that are trained to recognize vocabulary specific to the website’s audience.&lt;/p&gt;
&lt;p&gt;Graeme Malcolm, senior content developer in Microsoft’s Worldwide Learning Group, who led the session, explained that the session is a condensed version of the introductory course in the Microsoft Professional Program in AI, which allows enrollees to dive in and build a deeper set of AI skills.&lt;/p&gt;
&lt;p&gt;For example, the learning track teaches students how to work with data to build and train machine learning models that power interactive bots.&lt;/p&gt;
&lt;p&gt;The learning track in AI consists of nine skills, which each take between eight and 16 hours to complete, and cover topics such as how to use the programming language Python to work with data, the ethics of AI and how to build various types of machine learning models.&lt;/p&gt;
&lt;p&gt;Enrollees gain real-world experience through lab work and a capstone project to demonstrate the skills learned. Everyone who successfully makes it through the learning track receives a digital certificate to put on their resume.&lt;/p&gt;
&lt;p&gt;“The &lt;span&gt;&lt;a href=&quot;https://academy.microsoft.com/en-us/professional-program/&quot;&gt;Microsoft Professional Program&lt;/a&gt;&lt;/span&gt; is designed to teach you new job skills,” Malcolm said. “We have worked with industry to identify areas where there’s a skills gap that we need to fill.”&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Career growth&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The Microsoft Professional Program in AI is one of several online certification programs available from the Worldwide Learning Group, including a closely related program in data science.&lt;/p&gt;
&lt;img class=&quot;wp-image-75037 size-full&quot; src=&quot;https://blogs.microsoft.com/uploads/sites/3/2018/03/01-AI-class-20171206-blog-image-1200x675.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;675&quot; srcset=&quot;https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/01-AI-class-20171206-blog-image-1200x675.jpg 1200w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/01-AI-class-20171206-blog-image-1200x675-300x169.jpg 300w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/01-AI-class-20171206-blog-image-1200x675-768x432.jpg 768w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/01-AI-class-20171206-blog-image-1200x675-1024x576.jpg 1024w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/01-AI-class-20171206-blog-image-1200x675-960x540.jpg 960w, https://blogs.microsoft.com/uploads/prod/sites/3/2018/03/01-AI-class-20171206-blog-image-1200x675-480x270.jpg 480w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot;/&gt;&lt;em&gt;Graeme Malcolm speaks during an AI school event on Microsoft’s campus in Redmond. Washington. (Photo by Dan DeLong)&lt;/em&gt;
&lt;p&gt;“We are starting to package those together to create a curated learning path,” said Malcolm. “We think of it in terms of what we call committed learners, someone who says this is going to take me six to nine months to cover all of the ground and commits some time to hopefully move forward in their career.”&lt;/p&gt;
&lt;p&gt;The online, on-demand courses from Microsoft reflect a broader shift in computer science education toward so called massive open online courses, or MOOCs, that help keep workforces current with the latest technologies and open a pathway for career advancement.&lt;/p&gt;
&lt;p&gt;Microsoft’s offerings bring “our knowledge of the job market and what new real-world skills are required,” said Malcolm.&lt;/p&gt;
&lt;p&gt;Voyloshnikova signed up for a preview of the Microsoft Professional Program in AI available to employees and is working her way through it, mostly on weekends. “It seems really important to do it,” she said.&lt;/p&gt;
&lt;p&gt;The software engineer hopes to apply her new skills in machine learning to build and train models that automate the data analysis steps required to make informed recommendations about system optimizations needed to make software engineering tools more efficient.&lt;/p&gt;
&lt;p&gt;“I would like to grow within Microsoft,” she said. “So, it was really nice to see that Microsoft is doing this. It means that Microsoft is not just focused on ‘We have to get this feature out and this feature out;’ it is more like, ‘We need to let the company grow.’”&lt;/p&gt;
&lt;h3&gt;Related:&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;John Roach writes about Microsoft research and innovation. Follow him on&lt;/em&gt; &lt;a href=&quot;https://twitter.com/byjohnroach&quot;&gt;&lt;em&gt;&lt;span&gt;Twitter&lt;/span&gt;&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 25 Apr 2018 12:26:27 +0000</pubDate>
<dc:creator>rbanffy</dc:creator>
<og:type>article</og:type>
<og:title>Aiming to fill skill gaps in AI, Microsoft makes training courses available to the public</og:title>
<og:description>Microsoft announces the Microsoft Professional Program in AI, the latest learning track teaching artificial intelligence skills open to the public.</og:description>
<og:url>https://blogs.microsoft.com/ai/microsoft-professional-program-ai/</og:url>
<og:image>https://blogs.microsoft.com/uploads/sites/3/2018/03/08-AI-class-20171206-fb-1200x630.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blogs.microsoft.com/ai/microsoft-professional-program-ai/?ranMID=24542&amp;ranEAID=je6NUbpObpQ&amp;ranSiteID=je6NUbpObpQ-.mMWLBjZC7qyEtfMELrweg&amp;tduid=(2439940df6f0d43345c136d9b28a9c0f)(256380)(2459594)(je6NUbpObpQ-.mMWLBjZC7qyEtfMELrweg)()</dc:identifier>
</item>
<item>
<title>How to become a bank (2016)</title>
<link>https://www.bankofengland.co.uk/-/media/boe/files/prudential-regulation/new-bank/seminar-slides-1010.pdf?la=en&amp;hash=CC03BF5728A8DD96D28AE26DEFB3E95BF1F03333</link>
<guid isPermaLink="true" >https://www.bankofengland.co.uk/-/media/boe/files/prudential-regulation/new-bank/seminar-slides-1010.pdf?la=en&amp;hash=CC03BF5728A8DD96D28AE26DEFB3E95BF1F03333</guid>
<description>&lt;a href=&quot;https://www.bankofengland.co.uk/-/media/boe/files/prudential-regulation/new-bank/seminar-slides-1010.pdf?la=en&amp;hash=CC03BF5728A8DD96D28AE26DEFB3E95BF1F03333&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Wed, 25 Apr 2018 10:13:18 +0000</pubDate>
<dc:creator>hestefisk</dc:creator>
<og:type>article</og:type>
<og:title>Aiming to fill skill gaps in AI, Microsoft makes training courses available to the public</og:title>
<og:description>Microsoft announces the Microsoft Professional Program in AI, the latest learning track teaching artificial intelligence skills open to the public.</og:description>
<og:url>https://blogs.microsoft.com/ai/microsoft-professional-program-ai/</og:url>
<og:image>https://blogs.microsoft.com/uploads/sites/3/2018/03/08-AI-class-20171206-fb-1200x630.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://www.bankofengland.co.uk/-/media/boe/files/prudential-regulation/new-bank/seminar-slides-1010.pdf?la=en&amp;hash=CC03BF5728A8DD96D28AE26DEFB3E95BF1F03333</dc:identifier>
</item>
<item>
<title>Google’s new Chat service shows contempt for Android users’ privacy</title>
<link>https://www.amnesty.org/en/latest/news/2018/04/googles-new-chat-service-shows-total-contempt-for-android-users-privacy/</link>
<guid isPermaLink="true" >https://www.amnesty.org/en/latest/news/2018/04/googles-new-chat-service-shows-total-contempt-for-android-users-privacy/</guid>
<description>&lt;p&gt;Responding to Google’s launch of a new messaging service for Android phones, Amnesty International’s Technology and Human Rights researcher Joe Westby said:&lt;/p&gt;
&lt;p&gt;“With its baffling decision to launch a messaging service without end-to-end encryption, Google has shown utter contempt for the privacy of Android users and handed a precious gift to cybercriminals and government spies alike, allowing them easy access to the content of Android users’ communications.&lt;/p&gt;
&lt;p&gt;“Following the revelations by CIA whistleblower Edward Snowden, end-to-end encryption has become recognized as an essential safeguard for protecting people’s privacy when using messaging apps. With this new Chat service, Google shows a staggering failure to respect the human rights of its customers.&lt;/p&gt;
&lt;p&gt;“Not only does this shockingly retrograde step leave Google lagging behind its closest competitors - Apple’s iMessage and Facebook’s WhatsApp both have end-to-end encryption in place by default - it is also a step backwards from the company’s previous attempts at online messaging. Google’s own app Allo has an option for end-to-end encryption but the company says it will no longer invest in it. &lt;/p&gt;
&lt;p&gt;“In the wake of the recent Facebook data scandal, Google’s decision is not only dangerous but also out of step with current attitudes to data privacy. It means Google will now be actively encouraging  Android phone users to give up their privacy by switching to a service where their communications are effectively there for all to see.&lt;/p&gt;
&lt;p&gt;“It is difficult to see why any Android user would choose to use the new Chat service. Google should immediately scrap it in its current form and instead give its customers a product that protects their privacy.”    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Communications on Chat will not be sent over the internet, but through mobile phone carriers, like SMS text messages. In a &lt;a href=&quot;https://www.theverge.com/2018/4/19/17252486/google-android-messages-chat-rcs-anil-sabharwal-imessage-texting&quot;&gt;statement to the Verge&lt;/a&gt;, a Google spokesperson confirmed this means that the new service will not use end-to-end encryption, and that Google is “pausing investment” in its existing messaging app Allo.&lt;/p&gt;
&lt;p&gt;End-to-end encryption is a way of scrambling digital data so that only the sender and recipient can see it. When it is in place, even the company providing the service is unable to access the content of communications.&lt;/p&gt;
&lt;p&gt;Amnesty International considers end-to-end encryption a minimum requirement for technology companies to ensure that private information in messaging apps stays private. In 2016, it &lt;a href=&quot;https://www.amnesty.org/en/latest/campaigns/2016/10/which-messaging-apps-best-protect-your-privacy/&quot;&gt;ranked 11 companies&lt;/a&gt; on the way they use encryption to protect users’ privacy and freedom of expression across their messaging apps. Google was placed fourth, to a large extent due to the fact it had just launched two encrypted messaging services, Duo and Allo.&lt;/p&gt;
</description>
<pubDate>Wed, 25 Apr 2018 09:29:49 +0000</pubDate>
<dc:creator>ColinWright</dc:creator>
<og:url>https://www.amnesty.org/en/latest/news/2018/04/googles-new-chat-service-shows-total-contempt-for-android-users-privacy/</og:url>
<og:title>Google’s new Chat service shows total contempt for Android users’ privacy</og:title>
<og:description>Google launches Chat - new messaging service for Android phones</og:description>
<og:image>https://www.amnesty.org:443/remote.axd/aineupstrmedia.blob.core.windows.net/media/17983/249512.jpg?center=0.5,0.5&amp;preset=fixed_1200_630</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.amnesty.org/en/latest/news/2018/04/googles-new-chat-service-shows-total-contempt-for-android-users-privacy/</dc:identifier>
</item>
</channel>
</rss>