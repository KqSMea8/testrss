<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Making a Game Boy game in 2017</title>
<link>https://www.gamasutra.com/blogs/DoctorLudos/20171207/311143/Making_a_Game_Boy_game_in_2017_A_quotSheep_It_Upquot_PostMortem_part_12.php</link>
<guid isPermaLink="true" >https://www.gamasutra.com/blogs/DoctorLudos/20171207/311143/Making_a_Game_Boy_game_in_2017_A_quotSheep_It_Upquot_PostMortem_part_12.php</guid>
<description>&lt;strong&gt;&lt;em&gt;&lt;small&gt;The following blog post, unless otherwise noted, was written by a member of Gamasutra’s community.&lt;br/&gt;The thoughts and opinions expressed are those of the writer and not Gamasutra or its parent company.&lt;/small&gt;&lt;/em&gt;&lt;/strong&gt;&lt;hr/&gt;
&lt;p&gt;Everyone has childhood dreams. Mine was to make a game for my fist console: the Nintendo Game Boy. Today, I fulfilled this dream, by &lt;strong&gt;releasing my first Game Boy game on a actual cartridge&lt;/strong&gt;: &lt;a href=&quot;https://catskullgames.com/sheep-it-up&quot; target=&quot;_blank&quot;&gt;Sheep It Up!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this article, I'll present the tools I used, and some pitfalls a newcomer like me had to overcome to make this project a reality! Due to it's length, this article will be split in two parts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Part 1 : Tools used / Technical challenges / Art challenges&lt;/li&gt;
&lt;li&gt;Part 2 : Audio Constraints / Making Cartridges / Player Feedback &lt;em&gt;(Upcoming)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://catskullgames.com/sheep-it-up&quot; target=&quot;_blank&quot;&gt;&quot;Sheep It Up!&quot;&lt;/a&gt; is an arcade game where a sheep has to climb up by hanging himself to flying velcro straps. The concept is simple, but the game rapidly gets quite challenging: how high can you climb without falling down?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catskullgames.com/sheep-it-up&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;Sheep It Up! gameplay&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a game collector myself, I wanted this game to be produced without sacrificing any vintage Game Boy titles. So everything is manufactured specifically for this game: the pcb, the rom, the shell, the protective case and even the sticker! We also tried to keep the price reasonable, so everyone can enjoy the game: &lt;strong&gt;$15 (+shipping)&lt;/strong&gt;. It will run on any Game Boy model, from the first one to the GBA SP, including the Super Game Boy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catskullgames.com/sheep-it-up&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/SheepItUp_CartoucheWeb.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you still own a Game Boy, you can buy a cartridge on the publisher website:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://catskullgames.com/sheep-it-up&quot; target=&quot;_blank&quot;&gt;https://catskullgames.com/sheep-it-up&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;In the 90's, creating game for a 8-bit game console was a real challenge, and required a team of highly trained professionals. Designers, artists and developers from this era are real heroes to me: to be able to produce such wonderful games with the limited tools they had compared the ones we have today.&lt;/p&gt;
&lt;p&gt;In 2017, it's still a lot of work to make a game for a 8-bit console. But, thanks to the wonderful homebrew communities, we now have a lot of tools to make our life easier! Without them, an hobbyist like me could never be able create a Game Boy game on his own. So, what are those tools?&lt;/p&gt;
&lt;p&gt;For starter, the programming language. Back in the day, all dedicated gaming hardware was programmed in Assembly. It's still possible (and even recommended) to use Assembly today. But it's no longer the only option, as many devkits for 8-bits and 16-bits consoles are based on the C programming language. For the Game Boy, this awesome tool is called &lt;a href=&quot;http://gbdk.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Game Boy Developers Kit&lt;/a&gt; &lt;em&gt;(GBDK).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then, to make art and level design, you no longer need to use graph paper and a hand scanner. Hopefully, you can now use two complementary piece of software:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.devrs.com/gb/hmgd/gbtd.html&quot; target=&quot;_blank&quot;&gt;Game Boy Tile Designer&lt;/a&gt; &lt;em&gt;(GBTD)&lt;/em&gt;. It will allow you draw sprites and tiles, and to export them in a binary format that can be read by a Game Boy.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.devrs.com/gb/hmgd/gbmb.html&quot; target=&quot;_blank&quot;&gt;Game Boy Map Builder&lt;/a&gt; &lt;em&gt;(GBMB). &lt;/em&gt; This one will let you build level and background image using the tiles drawn with GBTD &lt;em&gt;(it's kind of like Tiled, but for Game Boy)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/gbtd.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Last but not least, we also need a way to test our game. This is where modernity is key. While in the 90's developers had to use expensive ICE boxes, today we have powerful software emulators that can run on any computer. To test your own game, the best choice is &lt;a href=&quot;http://bgb.bircd.org/&quot; target=&quot;_blank&quot;&gt;BGB&lt;/a&gt;. It's a very accurate Game Boy emulator that comes with a powerful debugger, the one tool you'll need to create a working game!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/bgb.jpg&quot;/&gt;&lt;br/&gt;&lt;small&gt;&lt;em&gt;The game is in top-right corner, all the other scary windows are the various debugger tools!&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;But to be really sure your game is working, you will also need to test it on real hardware. In the 90's, people were burning their program on a EPROM chip, and used some special cartridges to plug this chip into an actual Game Boy. While efficient, it was quite a lengthy and expensive process. Today, we have what are called &quot;Flashcarts&quot;: cartridges where you can plug a SD card with your game ROM to play it on an actual Game Boy. The idea is the same, but the tools are more easily accessible and faster to use. Several Game Boy Flashcarts exists, but the best one is arguably the one built by Krikzz: The &lt;a href=&quot;https://krikzz.com/store/&quot; target=&quot;_blank&quot;&gt;Everdrive Game Boy.&lt;/a&gt; A newer and improved model was released this summer, but I used the old version that I bought some time ago.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/gb_eprom3.jpg&quot;/&gt;&lt;em&gt;&lt;small&gt;    &lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/everdrive-gb.jpg&quot;/&gt;&lt;br/&gt;A flashcart from the 90's vs one from the 2010's&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Despite these great tools available in 2017, making a game today for a 1989 game console is still a challenge. Especially for people who have been trained to use &quot;modern tools&quot;, such as Unity, Unreal Engine or Godot. Here are the main challenges I faced during the development of &lt;em&gt;Sheep It Up!&lt;/em&gt;, including the things that surprised me about how a Game Boy is actually working.&lt;/p&gt;


&lt;h2&gt;Size limitation&lt;/h2&gt;
&lt;p&gt;Let's start with the obvious one: &lt;em&gt;Sheep It Up!&lt;/em&gt; is a rather simple game. One factor that explains this fact is that the whole game weights &lt;strong&gt;only 32KB&lt;/strong&gt;. Yup, the code, the images, and even the sounds are all fitting in a tiny 32KB space. To give you a point of comparison, 32KB is the size of the Wikipedia logo in a very tiny resolution:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catskullgames.com/sheep-it-up&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/SheepItUp_CartoucheWeb.png&quot;/&gt;&lt;/a&gt;                     &lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/LogoWikipedia32k.png&quot;/&gt;&lt;br/&gt;           Full Game: 32KB                            160x146px (PNG-24): 32KB &lt;/p&gt;
&lt;p&gt;Of course, not every Game Boy game fits in 32KB. For me, it was a technical limitation to be able to release the game on an actual cartridge &lt;em&gt;(more details in part 2)&lt;/em&gt;. The best and most famous Game Boy titles are actually way larger than that :&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Pokemon Red / Blue&lt;/strong&gt; are 1024KB (so huge!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wario Land&lt;/strong&gt; and &lt;strong&gt;Zelda Link's Awakening&lt;/strong&gt; are 512KB&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kirby Dream Land&lt;/strong&gt; is 256KB&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gargoyle's Quest&lt;/strong&gt; is 128KB&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In reality, few Game Boy titles are only 32KB. Most of them are from the early life of the console. For example, both &lt;strong&gt;Alleyway&lt;/strong&gt; &lt;em&gt;(one of the Game Boy launch title in Japan)&lt;/em&gt; and &lt;strong&gt;Tetris&lt;/strong&gt; &lt;em&gt;(launch title in US and Europe)&lt;/em&gt; are 32KB games. These are both excellent titles, but due to their tiny cartridge space, they are also somewhat &quot;limited&quot; in scope: &lt;em&gt;single screen, few different graphical and audio assets, etc.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/game-boy-alleyway.jpg&quot;/&gt;       &lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/Tetris.jpg&quot;/&gt;&lt;br/&gt;&lt;small&gt;&lt;em&gt;Alleyway and Tetris are 32KB games, like Sheep It Up!&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;h2&gt;CPU: playing with Portable Power!&lt;/h2&gt;
&lt;p&gt;The Game Boy is powered by a &lt;strong&gt;4MHz CPU&lt;/strong&gt;, custom built for the console &lt;em&gt;(it's a mix between Zilog's Z80 and Intel's 8080 processors)&lt;/em&gt;. All in all, Gameboy processing power is comparable to a NES, and even a bit more powerful due the reduced screen size and colors to display &lt;em&gt;(more on that latter)&lt;/em&gt;. Despite a mere 4Mhz speed, all the Game Boy games are displayed in &lt;strong&gt;constant 60fps&lt;/strong&gt;. Take that PS4 Pro and Xbox One X!&lt;/p&gt;
&lt;p&gt;But, for a programmer fresh out of college, the biggest constraints will be that it's a 8-bits processor. As you may know, internally all the computers are using 0 and 1 to process data. A single digit, which can have either 0 or 1 as value, is called a &quot;bit&quot; &lt;em&gt;(short for &quot;binary digit&quot;, as it can only have two different values)&lt;/em&gt;. A processor is defined as &quot;8-bits&quot; if it can process 8 bits of data in a single operation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does it affect the making of video games?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, the less &quot;bits&quot; the CPU can process, the more limited will your gameplay variables be. For example, in games we use a lot of integers numbers to represent values: life, speed, score, etc.&lt;/p&gt;
&lt;p&gt;With 8 bits of data, an integer can store smaller numbers than a 16 bits variable :&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;8 bits integer variable: &lt;strong&gt;-127 to 128&lt;/strong&gt; (or 0 to 255 if not using sign)&lt;/li&gt;
&lt;li&gt;16 bits integer variable: &lt;strong&gt;-32768 to 32767&lt;/strong&gt; (or 0 to 65535 if not using sign)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If that's still obscure for you, let's take a concrete example from &lt;em&gt;Sheet It Up!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_score.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see in this picture, the score variable has 5 digits, and can range from 0 to 99999. Sadly, it's way larger than what a 8 bits integer variable can store. I mean, even a 16 bits integer variable isn't enough to hold such a &quot;large&quot; score!&lt;/p&gt;
&lt;p&gt;So, in order to be able to track score in Sheep It Up!, I had to use not one, but five different 8 bits integer variables to store the player score. I let you guess how &quot;fun&quot; it was to handle all these variables, especially when I added the ability to keep a high score, thus I had to compare two values stored across 5 different variables. Programming on a 8 bits system will force you to come up with complex solutions like that all the time, while modern systems will simply use 32 bits or 64 bits variables and never pose such a problem to their programmers.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(N.B. for experienced game developers: I know that I could have been more efficient than using a whole int8 to store a single digit ranging from 0 to 9. But I actually needed each variable to be able to go from 0 to 255, as in reality I don't store the score digit directly, but the tile id used to display this number on the screen)&lt;/em&gt;&lt;/p&gt;


&lt;h2&gt;One world, two planes&lt;/h2&gt;
&lt;p&gt;Any image displayed on the Game Boy is composed of two elements: a background layer (BKG) and several moving objects, also called sprites (OBJ). You are limited to a maximum on 40 sprites onscreen, with the additional limitation that the Game Boy can't display more than 10 sprites on the same line.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_planes.gif&quot;/&gt;&lt;br/&gt;              Background (BKG)                                      Sprites (OBJ)&lt;/p&gt;
&lt;p&gt;In reality, it's a bit more complex than that, as there is an additional &quot;window&quot; layer than can scroll differently from the background. It's usually used to make the user interface (score, etc.).  But this layer is &quot;non-transparent&quot;: it will hide any graphical data on the background layer behind it. So, for the sake of simplicity, you can consider that you have a single &quot;background&quot; layer on a Game Boy, but that you can make part of it scrolling independently if you need to.&lt;/p&gt;
&lt;h2&gt;Game Boy sees 4 colors!&lt;/h2&gt;
&lt;p&gt;Let's introduce the elephant in the room: the original Game Boy model can only display 4 different colors.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_colors(1).png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;One can argue that it's not really Light Grey and Dark Grey, but rather Light Green and Dark Green, but that's not the point: you can only use 4 colors to draw our art. At least, as long as you are drawing the background, because the case is different with sprites!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_sprite1.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Indeed, as you can see in this picture, the Sheep is drawn with 3 colors only. Why is that? Actually, I drew the sprite with 4 colors. But the 4th color, here &quot;Black&quot;, is simply not displayed because it's used as &quot;transparent color&quot; by the Game Boy. That way, the sprites are not all &quot;square images&quot;, but they can be a wide variety of shapes allowing to see the background image behind them.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_sprite2.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Does it mean that I cannot use black to draw sprites?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Of course not, as you can see below with the &quot;velcro&quot; strap sprite. For this sprite, I actually used a different palette of 3+1 colors: &quot;White&quot; is used as transparent color, and &quot;Black&quot; is displayed on the sprite.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_sprite3.png&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Fun with palettes&lt;/h2&gt;
&lt;p&gt;Despite being limited to 4 colors only, the Game Boy actually uses 3 different palettes to display images, and that's very cool!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_palettes.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, there is a single &quot;4 colors&quot; palette for the background layer, and two &quot;3 colors + 1 transparent color&quot; palettes that the sprites can use &lt;em&gt;(each sprite can use one palette or the other)&lt;/em&gt;. The cool thing about these palettes is that you can freely assign any color you want to any palette slot. This allow you to make some nice effects, such as the fade-in / fade-out seen in many games.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_fade_anim2.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;To make a fade-in on a Game Boy, you simply need modify the colors on the 3 palettes. In the first step, all the palette slots are filled with white color. Then, in Step 2, the darkest color slot (black) is filled with light gray, to progressively reveal the image. In Step 3, Light Gray becomes Dark Gray, and so on, until the 4 colors are displayed on each palette.&lt;/p&gt;
&lt;p&gt;Using a similar method, we can also make a character &quot;blink&quot;, by switching the colors on its palette every frame. For example, this method is used when Mario catch a star and become invincible in Super Mario Land.&lt;/p&gt;
&lt;h2&gt;Tiling the world!&lt;/h2&gt;
&lt;p&gt;There is one last oddity in the way a Game Boy display images, at least for a game developer trained on current-gen engines. As the console doesn't have a &quot;frame buffer&quot;, you can't specify the color of each pixel on screen individually. Indeed, all the on-screen images are built by assembling loads of &quot;tiles&quot;, i.e. 8x8 pixels squares. This is applicable for both background and sprites :&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_tiles1.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This technique, designed to reduce the amount of video RAM needed to display images, implies that you can't draw freehand lines on the Game Boy screen. But it's also one of the secret that makes the Game Boy able to display such beautiful games with a mere 4Mhz CPU and only 8KB of video RAM &lt;em&gt;(yes, I wrote kilobytes and not megabytes or gigabytes).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However, one of the drawback of this tile-based display is that our &quot;sheep&quot; and &quot;velcro&quot; sprites are actually made of more than one sprite. The Sheep is 16x16 pixels, so in theory it would need four 8x8 sprites to be displayed. Hopefully the Game Boy also have a 8x16 display mode for the sprites, meaning that in reality each object in Sheep It Up! is only made of two sprites, and not four.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_tiles2.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Do you remember that we are &lt;strong&gt;limited to 40 sprites onscreen&lt;/strong&gt;, with the additional limitation that the Game Boy &lt;strong&gt;can't display more than 10 sprites on the same line&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;In this case, it means that we can't have more 5 sheep side by side on the same line, instead of 10 as you might have thought at first &lt;em&gt;(because the sheep is made of 2 sprites from an hardware point of view)&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Full-screen tiles&lt;/h2&gt;
&lt;p&gt;I didn't mention it yet, but the Game Boy screen resolution is 160x144 pixels. It means that you need 20x18 = &lt;strong&gt;360 tiles&lt;/strong&gt; to cover the whole screen.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_titletiles1.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Sadly, the Game Boy VRAM is limited &lt;em&gt;(8KB)&lt;/em&gt;, and it can store only &lt;strong&gt;256 different tiles&lt;/strong&gt;. It means that, without any coding trick, you can't display a fullscreen image :&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_titletiles2.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The secret is to reuse tiles, as you can see, the tile image have a lot of &quot;empty space&quot;, meaning that a single &quot;white tile&quot; in RAM is placed several times on the image. In reality, the title screen image only uses 178 different tiles, meaning I still had room for some extra details if I needed to.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_rawtitletiles.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I don't know what method they followed to re-use tiles in the 90's, but today we have a very nice tool for that, called &lt;a href=&quot;http://www.chrisantonellis.com/gameboy/gbtdg/&quot; target=&quot;_blank&quot;&gt;Game Boy Tile Data Generator&lt;/a&gt;. You feed it with a PNG image &lt;em&gt;(in 4 colors)&lt;/em&gt; and it will automatically generate you the tiles and the tilemap needed to display it on an actual Game Boy. Obviously, it will also automatically detect and reuse identical tiles to save as much video RAM as possible on the console!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/gbtdg.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;For information, most of the 80s and 90's consoles work in a similar way, with 8x8 tiles-based display: &lt;em&gt;Nes, Master System, PC-Engine, Super Nintendo, Genesis, Game Boy, Game Gear...&lt;/em&gt; The first mainstream home consoles to have a frame buffer were the PlayStation and Saturn, and the first Nintendo handled to do it was the Game Boy Advance &lt;em&gt;(The Atari Lynx being the first handheld with individually addressable pixels)&lt;/em&gt;. So learning to &quot;work with tiles&quot; on the Game Boy is actually a &lt;strong&gt;transferable skill&lt;/strong&gt; if you later work on another retro game console!&lt;/p&gt;
&lt;h2&gt;Tips from the pros: making 4 colors sprites!&lt;/h2&gt;
&lt;p&gt;Let's end with a little tip coming from the talented developers at Nintendo. Please look at this screenshot from Wario Land :&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/warioland_coin.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Do you see how the coin, a sprite, is actually drawn with 4 colors? How did they perform such a feat, when I just told you that the Game Boy can only display 3 colors per sprite ?&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/warioland_coin.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The answer is simple : each coin is made of 2 sprites, and each sprite uses a different object palette. As you can see, when we split the coin in two halves, it's indeed made of two 8x16 sprites. As always with Nintendo, there is a great attention to detail: they didn't simply merged two &quot;sprites halves&quot;, but they draw them slightly tilted and they overlapped them by 1 pixels, so the coin feel more like a single element!&lt;/p&gt;


&lt;p&gt;This is the end of the first part of postmortem. Thanks for reading it this far! In part 2, we'll discuss the audio challenges &lt;em&gt;(lot of oddities here too!)&lt;/em&gt;, and how the cartridges were built without destroying any previously existing Game Boy game. I'll also go over the feedback I received from players on &lt;a href=&quot;https://catskullgames.com/sheep-it-up&quot; target=&quot;_blank&quot;&gt;Sheep It Up!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://catskullgames.com/sheep-it-up&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.gamasutra.com/db_area/images/blog/311143/sheepitup_manyWeb.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this article! And, if you still have a Game Boy laying around, don't forget that you can &lt;a href=&quot;http://catskullgames.com/sheep-it-up&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;buy a beautiful Sheep It Up cartridge for a mere $15&lt;/strong&gt;&lt;/a&gt; from Catskull games. Each cartridge will be assembled by hand before being sent to you!&lt;/p&gt;
&lt;p&gt;If you'd like to be informed when the part 2 of this postmortem goes live, or when I release another game for a retro console, you can sign up to my newsletter using the form below!&lt;br/&gt;&lt;/p&gt;



</description>
<pubDate>Sat, 09 Dec 2017 03:07:38 +0000</pubDate>
<dc:creator>doppp</dc:creator>
<og:type>article</og:type>
<og:url>https://www.gamasutra.com/blogs/DoctorLudos/20171207/311143/Making_a_Game_Boy_game_in_2017_A_quotSheep_It_Upquot_PostMortem_part_12.php</og:url>
<og:title>Making a Game Boy game in 2017: A &quot;Sheep It Up!&quot; Post-Mortem (part 1/2)</og:title>
<og:description>What does it take to release a new game cartridge for the Game Boy in 2017? Here’s my experience, with a lot of details on the tools I used and the challenges I faced!</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.gamasutra.com/blogs/DoctorLudos/20171207/311143/Making_a_Game_Boy_game_in_2017_A_quotSheep_It_Upquot_PostMortem_part_12.php</dc:identifier>
</item>
<item>
<title>Bitcoin: A Peer-to-Peer Electronic Cash System (2008) [pdf]</title>
<link>https://bitcoin.org/bitcoin.pdf</link>
<guid isPermaLink="true" >https://bitcoin.org/bitcoin.pdf</guid>
<description>&lt;a href=&quot;https://bitcoin.org/bitcoin.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Fri, 08 Dec 2017 23:56:42 +0000</pubDate>
<dc:creator>sova</dc:creator>
<og:type>article</og:type>
<og:url>https://www.gamasutra.com/blogs/DoctorLudos/20171207/311143/Making_a_Game_Boy_game_in_2017_A_quotSheep_It_Upquot_PostMortem_part_12.php</og:url>
<og:title>Making a Game Boy game in 2017: A &quot;Sheep It Up!&quot; Post-Mortem (part 1/2)</og:title>
<og:description>What does it take to release a new game cartridge for the Game Boy in 2017? Here’s my experience, with a lot of details on the tools I used and the challenges I faced!</og:description>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://bitcoin.org/bitcoin.pdf</dc:identifier>
</item>
<item>
<title>Apple is close to acquiring Shazam, sources say</title>
<link>https://techcrunch.com/2017/12/08/sources-apple-is-acquiring-music-recognition-app-shazam/</link>
<guid isPermaLink="true" >https://techcrunch.com/2017/12/08/sources-apple-is-acquiring-music-recognition-app-shazam/</guid>
<description>&lt;img src=&quot;https://tctechcrunch2011.files.wordpress.com/2017/12/shazam-app-icon-ios.jpg?w=738&quot; class=&quot;&quot;/&gt;&lt;p id=&quot;speakable-summary&quot;&gt;As &lt;a target=&quot;_blank&quot; href=&quot;https://techcrunch.com/2017/12/08/spotify-tencent-share-swap/&quot; rel=&quot;noopener&quot;&gt;Spotify continues to inch towards a public listing&lt;/a&gt;, Apple is making a move of its own to step up its game in music services. Sources tell us that the company is close to acquiring &lt;a target=&quot;_blank&quot; href=&quot;http://shazam.com&quot; rel=&quot;noopener&quot;&gt;Shazam&lt;/a&gt;, the popular app that lets people identify any song, TV show, film or advert in seconds, by listening to an audio clip or (in the case of, say, an ad) a visual fragment, and then takes you to content relevant to that search.&lt;/p&gt;&lt;p&gt;We have heard that the deal is being signed this week, and will be announced on Monday, although that could always change.&lt;/p&gt;
&lt;p&gt;One source describes the deal as in the nine figures; another puts it at around £300 million ($401 million). We are still asking around. Notably, though, the numbers we’ve heard are lower than the $1.02 billion (according to &lt;a target=&quot;_blank&quot; href=&quot;https://my.pitchbook.com/profile/50961-79/company/profile#board-members&quot; rel=&quot;noopener&quot;&gt;PitchBook&lt;/a&gt;) post-money valuation the company had in its last funding round, in 2015.&lt;/p&gt;
&lt;p&gt;In all, Shazam has raised &lt;a target=&quot;_blank&quot; href=&quot;https://www.crunchbase.com/organization/shazam&quot; rel=&quot;noopener&quot;&gt;$143.5 million&lt;/a&gt; from investors that include Kleiner Perkins, London’s DN Capital, IVP and strategic investors Sony Music, Universal Music and Access Industries (which owns Warner Music). Kleiner Perkins &lt;a target=&quot;_blank&quot; href=&quot;https://www.crunchbase.com/organization/soundhound&quot; rel=&quot;noopener&quot;&gt;also invested in competitor SoundHound.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Shazam last noted that it passed 1 billion downloads, but that was back in September 2016, meaning those numbers are likely higher now.&lt;/p&gt;
&lt;p&gt;But in the world of apps, high numbers do not always translate into profits: In September 2017, &lt;a target=&quot;_blank&quot; href=&quot;https://s3-eu-west-1.amazonaws.com/document-api-images-prod/docs/Yhb2RxavnLbT2QmOqLhydDxzXM458NXoUw5X-14BA5k/application-pdf?AWSAccessKeyId=ASIAJY5NVDNGCTLIHP6A&amp;amp;Expires=1512756227&amp;amp;Signature=WK7%2F2Hi6QubIDngTPYm6Nmr35r0%3D&amp;amp;x-amz-security-token=FQoDYXdzEKf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaDNK%2Bgc5aMHtEZ%2B2A5SK3A1GdjsAmjAwnRPKhysiqULTcqXEn6WGMqVdR6AZGBqoxLXl06xj7H0N%2FErbRs5MESI6OLhIOD3Jteeaofuo2ZhgMgvUObKQAf3oppHUZCXyWWK9bCSOKredAG%2FsUWEx72nUnsdax%2BHszEnR3z3Z%2Bsy23zO3W1uuT7q3uAlJgL60f%2Bd4nxX%2BI2oZF82A9Sx%2FA7V3sgzkJOmpX4ayvb2Pghr%2Bx5TGN82OnfRg12AWCHEyMBzwqAKHP1T5RRL8e3YSmMJFwSCSBebwlToVLTDrq28638%2FJYSHJMovMZum0hh6MzxtUT8YCVjg5YNPcA7Z9euvtZygGcHTJBvPtJrkoiwLj4M0fXQMwsvuKNXLpiFPtdeDjU5RLUZxni7rGx45k9B8XTGLMbLlUHNCCJ9tSjKRZHA6lP3cppaLFJ4s5ag0FBooRh0z3ZzaFERpsZFNaePEUax2H8lqfR7%2FLscyZzDua2iPirTPG2KKDAnDFPXEJWcTBaY%2B%2FlBmH2gh12yD1iWWsteToYoa7qE9g85xTj7OjzsAcibPOH6LrQ3Af57fmp3dEo0LNRFqcmwUPSHI51%2BDSXTPgmqdUo3LOq0QU%3D&quot; rel=&quot;noopener&quot;&gt;Shazam reportedly&lt;/a&gt; made £40.3 million ($54 million) in revenues in its 2016 fiscal year, which was a turnaround from the declines between FY 2014 and 2015. It made a statutory pre-tax loss of £4 million ($5.3 million) in 2016, which was still a loss but significantly smaller than the £16.6 million loss in FY 2015.&lt;/p&gt;
&lt;p&gt;The company’s CEO Rich Riley noted earlier this year, however, that operating at or near profitability is the intention as it’s been growing; and he also hinted that the company was, as a result, likely an &lt;a target=&quot;_blank&quot; href=&quot;http://www.businessinsider.de/shazam-ceo-rich-riley-interview-shazam-codes-and-snapchat-integration-2017-3?r=US&amp;amp;IR=T&quot; rel=&quot;noopener&quot;&gt;acquisition target&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Shazam launched way back in 1999, well before the days of apps, as a service you reached by way of a SMS code — in fact, its first name was 2580, after the number you typed in the UK to access the service.&lt;/p&gt;

&lt;p&gt;Since those early days, it’s launched a number of related services. Artists on Shazam lets you follow famous people and see what music they are Shazamming.&lt;/p&gt;
&lt;p&gt;Its augmented reality brand marketing service lets you discover content based on pictures that you snap with the app. “You came for music, stay to experience McDonald’s Karaoke, MTN Dew VR Racing and much more,” is the company’s pitch on this feature.&lt;/p&gt;
&lt;p&gt;It also integrates with other apps like Snapchat and Apple’s Siri, and it &lt;a target=&quot;_blank&quot; href=&quot;http://www.wsj.com/articles/music-app-maker-shazam-finally-turns-a-profitbut-not-from-music-1475134203&quot; rel=&quot;noopener&quot;&gt;currently sends lots of traffic&lt;/a&gt; to other music apps like Spotify and Apple Music, which pays it when those clicks convert to purchases.&lt;/p&gt;
&lt;p&gt;It’s not clear what will carry on post acquisition, and which of these might be something that Apple would integrate into its own business (and how), but it’s notable that much of what Shazam does is very synergistic with what Apple is working on already: AR, and more features to attract more users to the Apple Music platform.&lt;/p&gt;
&lt;p&gt;Apple has made dozens of other acquisitions, and one of the biggest has been in the area of music: it &lt;a target=&quot;_blank&quot; href=&quot;https://techcrunch.com/2014/05/28/apple-buys-beats-electronics-for-3b/&quot; rel=&quot;noopener&quot;&gt;acquired Beats for $3 billion&lt;/a&gt; in 2014, which became the basis for Apple Music. That service has around 30 million users as of September of this year. As a point of comparison, Spotify has over 60 million paying subscribers, with 140 million overall.&lt;/p&gt;
&lt;p&gt;We’ve reached out to Shazam and Apple for comment. We’ll update this story as we learn more.&lt;/p&gt;
&lt;small&gt;Featured Image: TechCrunch&lt;/small&gt;</description>
<pubDate>Fri, 08 Dec 2017 20:46:31 +0000</pubDate>
<dc:creator>rbanffy</dc:creator>
<og:title>Sources: Apple is acquiring music recognition app Shazam</og:title>
<og:description>As Spotify continues to inch towards a public listing, Apple is making a move of its own to step up its game in music services. Sources tell us that the..</og:description>
<og:image>https://tctechcrunch2011.files.wordpress.com/2017/12/shazam-app-icon-ios.jpg</og:image>
<og:url>http://social.techcrunch.com/2017/12/08/sources-apple-is-acquiring-music-recognition-app-shazam/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2017/12/08/sources-apple-is-acquiring-music-recognition-app-shazam/</dc:identifier>
</item>
<item>
<title>Clojure 1.9 is now available</title>
<link>http://blog.cognitect.com/blog/clojure19</link>
<guid isPermaLink="true" >http://blog.cognitect.com/blog/clojure19</guid>
<description>&lt;div class=&quot;sqs-layout sqs-grid-12 columns-12&quot; data-layout-label=&quot;Post Body&quot; data-type=&quot;item&quot; data-updated-on=&quot;1512752008522&quot; id=&quot;item-5a2ac1fef9619aeb0ad70bd3&quot;&gt;
&lt;div class=&quot;row sqs-row&quot;&gt;
&lt;div class=&quot;col sqs-col-12 span-12&quot;&gt;
&lt;div class=&quot;sqs-block image-block sqs-block-image sqs-col-5 span-5 float float-right&quot; data-block-type=&quot;5&quot; id=&quot;block-yui_3_17_2_1_1512751524004_21628&quot;&gt;
&lt;div class=&quot;sqs-block-content&quot;&gt;
&lt;div class=&quot;image-block-outer-wrapper layout-caption-hidden design-layout-inline&quot;&gt;
&lt;div class=&quot;intrinsic&quot;&gt;
&lt;div class=&quot;image-block-wrapper has-aspect-ratio&quot; data-description=&quot;&quot;&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https://static1.squarespace.com/static/5372821be4b0aefc6719057e/t/5a2ac244e2c483448c9ca916/1512752241497/clojure.png&quot; alt=&quot;clojure.png&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;img class=&quot;thumb-image&quot; alt=&quot;clojure.png&quot; data-src=&quot;https://static1.squarespace.com/static/5372821be4b0aefc6719057e/t/5a2ac244e2c483448c9ca916/1512752241497/clojure.png&quot; data-image=&quot;https://static1.squarespace.com/static/5372821be4b0aefc6719057e/t/5a2ac244e2c483448c9ca916/1512752241497/clojure.png&quot; data-image-dimensions=&quot;150x150&quot; data-image-focal-point=&quot;0.5,0.5&quot; data-load=&quot;false&quot; data-image-id=&quot;5a2ac244e2c483448c9ca916&quot; data-type=&quot;image&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sqs-block html-block sqs-block-html&quot; data-block-type=&quot;2&quot; id=&quot;block-a53f8ee0b7f030ad6cab&quot;&gt;
&lt;div class=&quot;sqs-block-content&quot;&gt;
&lt;p&gt;Clojure 1.9 is now available! &lt;/p&gt;
&lt;p&gt;Clojure 1.9 introduces two major new features: integration with spec and command line tools.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;spec&lt;/strong&gt; (&lt;a href=&quot;https://clojure.org/about/spec&quot;&gt;rationale&lt;/a&gt;, &lt;a href=&quot;https://clojure.org/guides/spec&quot;&gt;guide&lt;/a&gt;) is a library for describing the structure of data and functions with support for:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Validation&lt;/li&gt;
&lt;li&gt;Error reporting&lt;/li&gt;
&lt;li&gt;Destructuring&lt;/li&gt;
&lt;li&gt;Instrumentation&lt;/li&gt;
&lt;li&gt;Test-data generation&lt;/li&gt;
&lt;li&gt;Generative test generation&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Clojure integrates spec via two new libraries (still in alpha):&lt;/p&gt;
&lt;p&gt;This modularization facilitates refinement of spec separate from the Clojure release cycle.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;command line tools&lt;/strong&gt; (&lt;a href=&quot;https://clojure.org/guides/getting_started&quot;&gt;getting started&lt;/a&gt;, &lt;a href=&quot;https://clojure.org/guides/deps_and_cli&quot;&gt;guide&lt;/a&gt;, &lt;a href=&quot;https://clojure.org/reference/deps_and_cli&quot;&gt;reference&lt;/a&gt;) provide:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Quick and easy install&lt;/li&gt;
&lt;li&gt;Clojure REPL and runner&lt;/li&gt;
&lt;li&gt;Use of Maven and local dependencies&lt;/li&gt;
&lt;li&gt;A functional API for classpath management (&lt;a href=&quot;https://github.com/clojure/tools.deps.alpha&quot;&gt;tools.deps.alpha&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The installer is available for Mac developers in brew, for Linux users in a script, and for more platforms in the future.&lt;/p&gt;
&lt;p&gt;For more information, see the &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/changes.md&quot;&gt;complete list&lt;/a&gt; of all changes in Clojure 1.9 for more details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contributors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks to all of the community members who contributed to Clojure 1.9 (first time contributors in bold):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adam Clements&lt;/strong&gt;&lt;br/&gt;Andy Fingerhut&lt;br/&gt;Brandon Bloom&lt;br/&gt;&lt;strong&gt;Cameron Desautels&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Chad Taylor&lt;/strong&gt;&lt;br/&gt;Chris Houser&lt;br/&gt;&lt;strong&gt;David Bürgin&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Eli Lindsey&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Gerrit Jansen Van Vuuren&lt;/strong&gt;&lt;br/&gt;Ghadi Shayban&lt;br/&gt;&lt;strong&gt;Greg Leppert&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Jason Whitlark&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Johan Mena&lt;/strong&gt;&lt;br/&gt;Jozef Wagner&lt;br/&gt;&lt;strong&gt;Lee Yen-Chin&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Matthew Boston&lt;/strong&gt;&lt;br/&gt;Michael Blume&lt;br/&gt;Michał Marczyk&lt;br/&gt;Nicola Mometto&lt;br/&gt;&lt;strong&gt;Ruslan Al-Fakikh&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Steffen Dienst&lt;/strong&gt;&lt;br/&gt;Steve Miner&lt;br/&gt;&lt;strong&gt;Yegor Timoshenko&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;Zhuang XiaoDan&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 08 Dec 2017 19:51:39 +0000</pubDate>
<dc:creator>myth_drannon</dc:creator>
<og:title>Clojure 1.9</og:title>
<og:url>http://blog.cognitect.com/blog/clojure19</og:url>
<og:type>article</og:type>
<og:description>Clojure 1.9 is now available!  Clojure 1.9 introduces two major new features: integration with spec and command line tools. spec (rationale, guide) is a library for describing the structure of data and functions with support for: Validation Error reporting Destructuring Instrumentation Test-data gen</og:description>
<og:image>http://static1.squarespace.com/static/5372821be4b0aefc6719057e/t/5a2ac244e2c483448c9ca916/1512752241497/clojure.png?format=1000w</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.cognitect.com/blog/clojure19</dc:identifier>
</item>
<item>
<title>Whale Watching: Many companies earn a huge portion of sales from a few customers</title>
<link>http://blog.secondmeasure.com/2017/12/07/whales/</link>
<guid isPermaLink="true" >http://blog.secondmeasure.com/2017/12/07/whales/</guid>
<description>&lt;p&gt;&lt;em&gt;Kathryn Gessner and Kathryn Roethel Rieck contributed to this report.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Historically, whales have gotten a bad rap. In Greek mythology, whales were depicted as ferocious sea monsters, and we all know how Moby Dick ends. However, for many consumer businesses, the “whales” are a prized catch. The term refers to the big spenders, high-rollers, and frequent flyers responsible for an outsized share of a company’s sales.&lt;/p&gt;
&lt;p&gt;In 2016, just 20 percent of customers were responsible for more than half the money raked in by 854 of the 1,000 largest companies that Second Measure tracks (by total U.S. customers). Credit and debit card transaction data shows, at these businesses, the average customer in the top 20 percent spent 8x as much as the average customer from the bottom 80 percent. (We call this multiplier WI&lt;sub&gt;80&lt;/sub&gt; — the Whale Index for the 80th percentile.)&lt;/p&gt;
&lt;p&gt;The split between whales and small fish was even more extreme at 293 of the companies. Here, the top 10 percent of customers generated more than half of all sales dollars and spent, on average, 15x as much as the bottom 90 percent.&lt;/p&gt;
&lt;h6 id=&quot;whywhalesmatter&quot;&gt;Why whales matter&lt;/h6&gt;
&lt;p&gt;Companies that earn a large percentage of sales from a small percentage of customers are staking a lot on their ability to keep those customers coming back—or on their chances of capturing new whales. Companies with a more even distribution of sales might not be hit as hard by the loss of a few top customers, but they’re also less likely to get a big boost in sales from a small number of loyal spenders.&lt;/p&gt;
&lt;h6 id=&quot;onetaleofawhalezynga&quot;&gt;One tale of a whale: Zynga&lt;/h6&gt;
&lt;p&gt;Some companies really (and we mean &lt;em&gt;really&lt;/em&gt;) depend on their biggest spenders. For example, at social gaming company Zynga (best known for hit casual games like Farmville and Words With Friends), the top 20 percent of spenders accounted for a whopping 88 percent of sales in 2016. And just one percent of paying Zynga customers registered 33 percent of sales.&lt;/p&gt;
&lt;p&gt;Zynga’s business model is &lt;a href=&quot;https://www.recode.net/2014/2/26/11623998/a-long-tail-of-whales-half-of-mobile-games-money-comes-from-0-15&quot;&gt;built for whales.&lt;/a&gt; The company allows gamers to play for free but entices them to spend money to progress more quickly. Many players never spend anything, so they’re not included in our analysis. The majority of those who do pay don’t pay much—an average of just $19 per year for the bottom 80 percent of paying customers. But Zynga’s big spenders really live up to their reputations. Customers in the top 20 percent spent an average of $571 in 2016, and customers in the top 1 percent spent more than $4,000 each! (This means, at Zynga, WI&lt;sub&gt;80&lt;/sub&gt;=30x and WI&lt;sub&gt;99&lt;/sub&gt;=49x.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.secondmeasure.com/content/images/2017/12/whales-chart1bubble-blog.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Zynga is an extreme example, but even companies with traditional business models rely on whales. At giant retailers like Walmart, Target, and Amazon, the top 20 percent of spenders accounted for 65-70 percent of credit and debit card sales dollars in 2016. At all three, WI&lt;sub&gt;80&lt;/sub&gt;=8-9x.&lt;/p&gt;
&lt;h6 id=&quot;whichindustriesincludethebiggestwhales&quot;&gt;Which industries include the biggest whales?&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.secondmeasure.com/content/images/2017/12/whales-chart2-blog.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The chart above plots the proportion of sales generated by each percentile of customers. (The 99th percentile is the top 1 percent of spenders.) A diagonal line would mean all customers in the industry spent the same amount. A sharply bending curve indicates an industry where a small number of whales drive most of the spending.&lt;/p&gt;
&lt;p&gt;Alongside Zynga, companies in the gaming sectors tend to be highly whale-dependent. Zynga-competitor King (maker of Candy Crush) and daily fantasy sports sites FanDuel and DraftKings were among the companies with the most concentrated spending.&lt;/p&gt;
&lt;p&gt;Sales at luxury goods retailers also tend to be condensed amongst a small percentage of customers. For example, at Tiffany &amp;amp; Co. (WI&lt;sub&gt;80&lt;/sub&gt;=14x), it’s possible to spend hundreds of thousands of dollars in an act of romantic devotion. The top 20 percent of spenders dropped an average of $4,300 each last year. (Compare that to the average of $300 spent by the hoi polloi.)&lt;/p&gt;
&lt;p&gt;At the other extreme, companies with subscription models, such as Netflix, Hulu, and Spotify, had a much more equitable distribution of spending across their customer bases, with WI&lt;sub&gt;80&lt;/sub&gt; around 2x. Likewise, at eyewear retailer Warby Parker (whose products have relatively low price variance), WI&lt;sub&gt;80&lt;/sub&gt; was only 3x.&lt;/p&gt;
&lt;h6 id=&quot;ofwhalesandunicorns&quot;&gt;Of whales and unicorns&lt;/h6&gt;
&lt;p&gt;Now that we’ve seen how individual companies, and even whole industries, can be differentiated based on the whale index, we can use this metric as a new way to benchmark startups (and recent IPOs) like Airbnb, Uber, and Blue Apron. All operate relatively new business models that fall outside the bounds of traditional industry categories.&lt;/p&gt;
&lt;h6 id=&quot;topridehailingcustomersbehavelikefrequentflyers&quot;&gt;Top ride-hailing customers behave like frequent flyers&lt;/h6&gt;
&lt;p&gt;Interestingly, ride-sharing apps Uber and Lyft, both with WI&lt;sub&gt;80&lt;/sub&gt; of approximately 11x, have spending distributions that are strikingly similar to those of major airlines like Delta, United, and American Airlines. Like major airlines, Uber and Lyft derive an outsized proportion of sales from a small number of frequent riders.&lt;/p&gt;
&lt;p&gt;The top 20 percent of Uber customers rode with Uber 73 times on average in 2016, and all those trips cost them an average of $1,160 per person. The bottom 80 percent of riders only averaged seven trips and spent $108 with Uber.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.secondmeasure.com/content/images/2017/12/whales-chart3-blog.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h6 id=&quot;morewhalesatupscalehotelsthanatairbnb&quot;&gt;More whales at upscale hotels than at Airbnb&lt;/h6&gt;
&lt;p&gt;While the hotel industry looks warily upon Airbnb’s growth, Airbnb’s WI&lt;sub&gt;80&lt;/sub&gt; of 6x more closely resembles that of budget hotelier Motel 6 than of upmarket hotel chains like Hilton (WI&lt;sub&gt;80&lt;/sub&gt;=9x) and Marriott (WI&lt;sub&gt;80&lt;/sub&gt;=13x).&lt;/p&gt;
&lt;p&gt;This is because the more-upscale hotels also earn money from many small transactions: parking fees, bar and restaurant tabs, and the like. Of course, not all of the parkers and diners are staying at the hotel, and the ones who are—especially for long periods of time—are the whales. Lodging accounts for most of the sales at budget hotels and Airbnb—no extra frills—so there’s less variance in what customers spend here. Simply put, would-be whales have fewer opportunities to spend above and beyond the norm.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.secondmeasure.com/content/images/2017/12/whales-chart4-blog.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h6 id=&quot;blueapronandstitchfixdontmatchtrendsintheirindustries&quot;&gt;Blue Apron and Stitch Fix don’t match trends in their industries&lt;/h6&gt;
&lt;p&gt;It might seem natural to lump e-commerce retailer Stitch Fix into the fashion sector, but its customer-spending distribution (WI&lt;sub&gt;80&lt;/sub&gt;=5x) more closely resembles that of a subscription service like Netflix or Spotify. Fashion retailers like J.Crew (WI&lt;sub&gt;80&lt;/sub&gt;=8x) and Macy’s (WI&lt;sub&gt;80&lt;/sub&gt;=9x) rely more heavily on whales.&lt;/p&gt;
&lt;p&gt;One reason for this: it’s a lot easier to drop big bucks at a place that doesn’t limit how many items you can buy at a time. At most retailers, you can buy as many items as you want, any time you want. But at Stitch Fix, you max out at five items because that’s all each shipment contains. And, indeed, the average J.Crew or Macy’s shopper spent about $100 per outing in 2016, where the average Stitch Fix receipt was closer to $75.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.secondmeasure.com/content/images/2017/12/whales-chart5-blog.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Meal-kit service Blue Apron’s customer distribution (WI&lt;sub&gt;80&lt;/sub&gt;=6x) also looks a lot more like a subscription service than traditional grocery stores such as Safeway (WI&lt;sub&gt;80&lt;/sub&gt;=16x) or Whole Foods (WI&lt;sub&gt;80&lt;/sub&gt;=18x). This is hardly surprising because, as in the fashion example, customers in supermarkets have a huge selection of products to choose from and can shop as often as they like. Blue Apron strictly offers ingredients for a specified number of dinners, and subscribers pay for a whole week's order at once.&lt;/p&gt;
&lt;p&gt;Yet, Blue Apron’s distribution looks less like a subscription service than Stitch Fix’s. The reason: some Blue Apron customers use the service infrequently while others—the whales—use it for multiple family meals over many weeks. The top 20 percent of customers ordered an average of 25 times in 2016 and spent an average of $1,750. That’s a stark contrast to the bottom 80 percent, who only ordered an average of four times and spent $275.&lt;/p&gt;
&lt;p&gt;There was much less variance in the number of Stitch Fix orders customers made, so Stitch Fix's spending distribution looks more like that of a subscription than Blue Apron's does. The worry for Blue Apron, of course, is that if its whales churn to another meal-kit service, the company could be left floundering.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Interested in whale-watching from the comfort of your desk? &lt;a href=&quot;https://secondmeasure.com/#contact&quot;&gt;Request a demo today.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 08 Dec 2017 18:29:09 +0000</pubDate>
<dc:creator>mikebabineau</dc:creator>
<og:type>article</og:type>
<og:title>Whale Watching: Many companies earn a huge portion of sales from a few customers</og:title>
<og:description>In 2016, just 20 percent of customers were responsible for more than half the money raked in by 854 of the 1,000 largest companies Second Measure tracks.</og:description>
<og:url>http://blog.secondmeasure.com/2017/12/07/whales/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.secondmeasure.com/2017/12/07/whales/</dc:identifier>
</item>
<item>
<title>Mozilla’s revenue increased significantly in 2016</title>
<link>https://www.ghacks.net/2017/12/02/mozillas-revenue-increased-significantly-in-2016/</link>
<guid isPermaLink="true" >https://www.ghacks.net/2017/12/02/mozillas-revenue-increased-significantly-in-2016/</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p&gt;Mozilla, makers of the Firefox web browser, &lt;a href=&quot;https://www.mozilla.org/en-US/foundation/annualreport/2016/&quot; data-wpel-link=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;external noopener noreferrer&quot;&gt;released&lt;/a&gt; the State of Mozilla annual financial report for the year 2016, and things could not look better from a financial point of view.&lt;/p&gt;
&lt;p&gt;The Mozilla Foundation and subsidiaries saw revenue increase in 2016 by 99 million US Dollars from 421 million US Dollars &lt;a href=&quot;https://www.ghacks.net/2016/12/02/mozilla-is-doing-well-financially/&quot; data-wpel-link=&quot;internal&quot;&gt;in 2015&lt;/a&gt; to 520 million US Dollars in 2016.&lt;/p&gt;
&lt;p&gt;Expenses on the other hand did not increase at the same rate. Expenses sat at 337 million US Dollars in 2015, and are reported as 360 million US Dollars in 2016.&lt;/p&gt;
&lt;p&gt;The bulk of the revenue, 503 million out of the 520 million US Dollars comes from royalties. While Mozilla does not provide details on those, the bulk here comes from deals with companies like Yahoo, Baidu or Yandex which get their search engines promoted in Firefox.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-139271&quot; src=&quot;https://cdn.ghacks.net/wp-content/uploads/2017/12/mozilla-revenue-2016.png&quot; alt=&quot;mozilla revenue 2016&quot; width=&quot;682&quot; height=&quot;394&quot; srcset=&quot;//cdn.ghacks.net/wp-content/uploads/2017/12/mozilla-revenue-2016.png 682w, //cdn.ghacks.net/wp-content/uploads/2017/12/mozilla-revenue-2016-660x381.png 660w, //cdn.ghacks.net/wp-content/uploads/2017/12/mozilla-revenue-2016-100x58.png 100w&quot; sizes=&quot;(max-width: 682px) 100vw, 682px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ghacks.net/2014/11/19/the-next-firefox-default-search-engine-yahoo-search/&quot; data-wpel-link=&quot;internal&quot;&gt;Mozilla changed its strategy in regards to search engines in Firefox in 2014&lt;/a&gt; when it switched from selecting one global partner to selecting regional partners instead. The organization selected Yahoo as the default search provider in the United States for instance, and agreed on a five year contract that made Yahoo the default in the US for that time.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ghacks.net/2017/11/15/mozilla-drops-yahoo-as-firefoxs-default-search-provider/&quot; data-wpel-link=&quot;internal&quot;&gt;Mozilla ditched Yahoo recently&lt;/a&gt; however in favor of Google, two years before the five year contract would be up for renewal. The terms of the new deal with Google have not been revealed yet, and it remains to be seen whether this new deal will give Mozilla's revenue another boost in 2017.&lt;/p&gt;
&lt;p&gt;The organization launched Firefox 57, a new version of the web browser recently designed to future proof Firefox by dropping legacy components and focusing on WebExtensions instead, an inter-browser standard that most web browsers support these days.&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span class=&quot;ctaText&quot;&gt;Read also:&lt;/span&gt;  &lt;span class=&quot;postTitle&quot;&gt;Firefox 56: Activity Stream target&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The impact this move has on Mozilla won't be seen until the organization releases its 2018 report, considering that the switch happened at the end of the year.&lt;/p&gt;
&lt;h3&gt;Closing Words&lt;/h3&gt;
&lt;p&gt;It is a good thing that Mozilla is doing well financially. While the organization's revenue pales in comparison to Google's, Microsoft's or Apple's, its approach to development, privacy and openness is refreshingly different from that of the other major players in the browser market.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now You:&lt;/strong&gt; What do you think will Mozilla focus on in 2018 and beyond?&lt;/p&gt;
&lt;div id=&quot;snippet-box&quot;&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;div itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Article&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;snippet-image&quot; itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/ImageObject&quot;&gt;&lt;img width=&quot;180&quot; src=&quot;https://cdn.ghacks.net/wp-content/uploads/2017/12/mozilla-revenue-2016.png&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;aio-info&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;Article Name&lt;/p&gt;
&lt;p&gt;&lt;span itemprop=&quot;headline&quot;&gt;Mozilla's revenue increased significantly in 2016&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;&lt;span itemprop=&quot;description&quot;&gt;Mozilla, makers of the Firefox web browser, released the State of Mozilla annual financial report for the year 2016, and things could not look better from a financial point of view.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Author&lt;/p&gt;
&lt;p&gt;&lt;span itemprop=&quot;name&quot;&gt;Martin Brinkmann&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Publisher&lt;/p&gt;
&lt;div itemprop=&quot;publisher&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Organization&quot;&gt;
&lt;p&gt;&lt;span itemprop=&quot;name&quot;&gt;Ghacks Technology News&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Logo&lt;/p&gt;
&lt;div class=&quot;snippet-data-img&quot; itemprop=&quot;logo&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/ImageObject&quot;&gt;&lt;img width=&quot;180&quot; src=&quot;https://cdn.ghacks.net/wp-content/uploads/2005/10/ghacks-technology-news.jpg&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;div id=&quot;post-author&quot;&gt;
&lt;div class=&quot;profile-content&quot; readability=&quot;29.099041533546&quot;&gt;
&lt;h4&gt;About Martin Brinkmann&lt;/h4&gt;
&lt;p&gt;Martin Brinkmann is a journalist from Germany who founded Ghacks Technology News Back in 2005. He is passionate about all things tech and knows the Internet and computers like the back of his hand.&lt;/p&gt;
&lt;p&gt;You can follow Martin on &lt;a href=&quot;https://www.facebook.com/ghacks&quot; data-wpel-link=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;external noopener noreferrer&quot;&gt;Facebook&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ghacks&quot; data-wpel-link=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;external noopener noreferrer&quot;&gt;Twitter&lt;/a&gt; or &lt;a href=&quot;https://plus.google.com/115604903045061277330?rel=author&quot; data-wpel-link=&quot;external&quot; target=&quot;_blank&quot; rel=&quot;external noopener noreferrer&quot;&gt;Google+&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;&lt;p id=&quot;breadcrumbs&quot;&gt;You are here: &lt;span xmlns:v=&quot;http://rdf.data-vocabulary.org/#&quot;&gt;&lt;span typeof=&quot;v:Breadcrumb&quot;&gt;&lt;a href=&quot;https://www.ghacks.net/&quot; rel=&quot;v:url&quot; property=&quot;v:title&quot; data-wpel-link=&quot;internal&quot;&gt;Home&lt;/a&gt; &amp;gt; &lt;span rel=&quot;v:child&quot; typeof=&quot;v:Breadcrumb&quot;&gt;&lt;a href=&quot;https://www.ghacks.net/category/firefox/&quot; rel=&quot;v:url&quot; property=&quot;v:title&quot; data-wpel-link=&quot;internal&quot;&gt;Firefox&lt;/a&gt; &amp;gt; &lt;span class=&quot;breadcrumb_last&quot;&gt;Mozilla’s revenue increased significantly in 2016&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</description>
<pubDate>Fri, 08 Dec 2017 18:06:04 +0000</pubDate>
<dc:creator>tiff</dc:creator>
<og:type>article</og:type>
<og:title>Mozilla's revenue increased significantly in 2016 - gHacks Tech News</og:title>
<og:description>Mozilla, makers of the Firefox web browser, released the State of Mozilla annual financial report for the year 2016, and things could not look better from a financial point of view.</og:description>
<og:url>https://www.ghacks.net/2017/12/02/mozillas-revenue-increased-significantly-in-2016/</og:url>
<og:image>https://cdn.ghacks.net/wp-content/uploads/2017/12/mozilla-revenue-2016.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.ghacks.net/2017/12/02/mozillas-revenue-increased-significantly-in-2016/</dc:identifier>
</item>
<item>
<title>Learn to sell</title>
<link>http://blairreeves.me/2017/12/06/learn-to-sell/</link>
<guid isPermaLink="true" >http://blairreeves.me/2017/12/06/learn-to-sell/</guid>
<description>&lt;p&gt;&lt;span&gt;From time to time, I get asked for career advice. Sometimes it’s folks looking to get into product management, and others just curious about working in technology generally. I’ve thought a lot about what type of advice I can give that would actually be useful.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A big problem with an awful lot of career advice you hear, particularly in tech circles, is that it’s hopelessly tainted by&lt;/span&gt; &lt;a href=&quot;https://xkcd.com/1827/&quot;&gt;&lt;span&gt;survivorship bias&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Almost all life/career advice from famous rich people is usually useless for this very reason. Beyond that, it seems like the most popular advice you see is “learn to code.” I think this is a mistake, and not very useful for most people. Learning to write code and develop web applications has definitely been a positive in my life, but it’s probably only been marginally advantageous career-wise. I’d certainly encourage anyone to learn, but mostly for personal enrichment, not career advancement.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Instead, here’s my pitch: go do a stint in Sales. If I were early in my career and looking to boost my long-term trajectory, I think is where I would try to start. Even in mid-career, where I am now, it’s something I think about often. More tech professionals should consider it. Hear me out.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Sales really, really matters&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;When you listen to the tech industry talk about itself (which it does constantly), it would be easy to think that everyone is a developer; or that developers/engineers are the most important people around, and the only ones who really matter. This is really dumb.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In&lt;/span&gt; &lt;a href=&quot;http://www.buildingforbusiness.com&quot;&gt;&lt;strong&gt;our book on enterprise Product Management&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;, I included this quote from Philip Kotler:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;“&lt;/span&gt;&lt;em&gt;&lt;span&gt;The sales department isn’t the whole company, but the whole company better be the sales department.&lt;/span&gt;&lt;/em&gt;&lt;span&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;I find it remarkable how little the tech world talks about software sales, given how central it is to everything we do. Sales is the whole reason we build anything; it’s how we assign value to what we do. If someone doesn’t trade some value in exchange for your product, then what you have isn’t really worth anything. It doesn’t matter how brilliant your software engineering is if no one buys it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;There are certain swaths of the tech startup world that recoil from Sales. There’s a certain fantasy that exists of “products that sell themselves,” which don’t require a company to invest in either the personnel nor company orientation to serve customers. There’s a reason why non-startups don’t have this attitude: the companies that do never break out of the startup phase. Those companies that see Sales as a grubby and unpleasant chore, rather than what the whole company is about, generally don’t last long.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Fortunately, most healthy software companies see Sales as an absolutely core function, which is why pretty much every one is always hiring good salespeople. For those with a hunger to learn, this provides a terrific opportunity.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Sales gets a bad rap&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;On the flip side, software sales suffers from a reputation for growth-hackery, spammy tactics that we all hate. If you work in this field, your inbox is probably as full as mine is of irrelevant and annoying spam email from salespeople whose products you don’t care about. It’s a huge turnoff. Trust me – I get it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But after working with a lot of good enterprise salespeople (as well as some bad ones), one thing I’ve learned is that they&lt;/span&gt; &lt;em&gt;&lt;span&gt;also&lt;/span&gt;&lt;/em&gt; &lt;span&gt;dislike these kinds of “spray and pray” lead-generation tactics. Casting a wide net is simply part of the game, of course, but wasting your prospect’s time is bad selling. Every good sales professional knows this, which is why the best ones put in the time, effort and attention to detail to make their pitches – even the opening ones – as tailored and relevant as possible. That might only mean increasing their response rate from 2% to 3%, but that’s a big lift when you’re talking about warm enterprise software leads.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Good” sales practices are less widely appreciated because they don’t piss people off and so aren’t constantly discussed. Great salespeople, at every level, are able to contribute value to their company and are quickly recognized as such.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Sales experience is golden&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;No one is more connected with customers than the folks in Sales, and as such, they gain a great deal of political power. Customer feedback, after all, is worth its weight in gold. Outperforming salespeople are quickly recognized and tend to get a direct line to the most senior executives in the company (at least, in any functional firm). Everyone wants to make that year’s President’s Club.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Another major bonus to consider is that great salespeople have nearly bulletproof job security. The biggest cause of sales personnel attrition is leaving for another company that offers a more lucrative compensation plan. Salespeople&lt;/span&gt; &lt;em&gt;&lt;span&gt;who perform&lt;/span&gt;&lt;/em&gt; &lt;span&gt;are almost never fired, and among the last to be laid off (for obvious reasons). Of course, others leave because they just want a role that’s slower-paced, or simply aren’t good at customer relations (which is a good reason to get out of Sales).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;One downside to all that popularity is that good salespeople sometimes find it hard to transition to a different role, because everyone wants them to stay in Sales. This can be overcome, but the pressure is there.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The tradeoff for being such a valuable member of a company is that Sales is really hard work. Everyone knows that Sales is often a high pressure position (get those deals signed before end of quarter!), has a steep learning curve (gotta learn the product fast!) and requires travel. But the thing that scares off most people, I find, is the uncertainty being on a quota compensation plan.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;What I wish more people understood was that&lt;/span&gt; &lt;em&gt;&lt;span&gt;most&lt;/span&gt;&lt;/em&gt; &lt;span&gt;quota plans are actually less scary than I, too, used to think, and some can even be tailored for individuals (higher base comp versus commission, etc.). Good sales organizations understand that there are factors beyond any individual’s control, and don’t want to lose good employees; but nevertheless, you have to reward performance. If you’re a high-performer, quota compensation plans can be incredibly lucrative, which is a good enough reason as any to consider a Sales gig.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Those gigs come in all sorts of flavors, but the most common varieties are thus:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Entry level:&lt;/strong&gt; Lead Development Reps (LDRs). These are the folks doing the hard work of cold calling, sending tons of emails, doing prospect/company research and developing cold leads into warm ones. Typically you have a couple of LDRs assigned to one Account Executive, but often working with a team of others. Good LDRs usually get promoted to Account Executives.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mid level:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Account Executive – this is a fancy title for “seller” that is called an “executive” to puff prospects’ egos. Often, this person takes warm leads from their assigned LDRs and develops a relationship with a prospect to sell their given portfolio. They are the point person in navigating the account relationship towards a deal.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Solution Consultant (AKA “Sales Engineer”) – this person assists the Account Exec in doing product demos and working with the prospect’s technical team on finer points of implementation and strategy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Solution Architect – this role is more common in larger companies with multiple product portfolios. This person helps the Account Exec and the prospect design more complicated, cross-portfolio solutions that involve a lot of customization and negotiation over lots of different products&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;For an entry-level candidate, LDR experience can be a trial by fire, but one that gives that person a solid base of experience that they can use. It also tends to pay pretty well – certainly better than the first jobs I did right out of college. If I’d known then what I do now…&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;For my own part, I thought seriously about going into a seller position back when I was at IBM. A different role opened up first, though, so I took it instead, and that is part of what has led to my development as a Product Manager today. I like this role, and don’t have any plans to do anything different for now; but down the line, who knows? I, like many other PMs I know, am also attracted to sales engineering roles, because it allows us to keep one foot on the technical and strategic side while also working directly with customers, which is often fun.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Bottom line:&lt;/strong&gt; think about doing Sales, because that’s really where everything starts, and your results are more driven by personal performance than almost anywhere else in a company. Product, Marketing, Customer Success, even Engineering – all of these functions fundamentally derive from what Sales first makes happen, and your sales experience will almost always be considered immensely valuable in those roles down the road.&lt;/span&gt;&lt;/p&gt;


&lt;hr/&gt;&lt;center&gt;
&lt;/center&gt;
</description>
<pubDate>Fri, 08 Dec 2017 16:19:07 +0000</pubDate>
<dc:creator>ntang</dc:creator>
<og:type>article</og:type>
<og:title>Learn to sell - Blair Reeves</og:title>
<og:description>From time to time, I get asked for career advice. Sometimes it’s folks looking to get into product management, and others just curious about working in technology generally. I’ve thought a lot about what type of advice I can give that would actually be useful. A big problem with an awful lot of career advice … Continue reading &quot;Learn to sell&quot;</og:description>
<og:url>http://blairreeves.me/2017/12/06/learn-to-sell/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blairreeves.me/2017/12/06/learn-to-sell/</dc:identifier>
</item>
<item>
<title>Modern Front-end in Rails</title>
<link>https://evilmartians.com/chronicles/evil-front-part-1</link>
<guid isPermaLink="true" >https://evilmartians.com/chronicles/evil-front-part-1</guid>
<description>&lt;div class=&quot;post__intro&quot;&gt;
&lt;p&gt;An opinionated guide to modern, modular, component-based approach to handling your presentation logic in Rails that does not depend on any front-end framework. Follow our three-part tutorial to learn the bare minimum of up-to-date front-end techniques by example and finally make sense of it all.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;heres-to-confused-ones&quot;&gt;Here’s to confused ones&lt;/h2&gt;
&lt;p&gt;Being a fresh Rails full-stack developer out in the wild is a confusing endeavor nowadays. A “classic Rails” way to handle front-end with Asset Pipeline, Sprockets, CoffeeScript and Sass looks outdated in 2017. A lot of choices made back in the times of Rails 3.1 do not live up to modern expectations. Sticking with the “old way” means passing on everything that happened in the front-end community over the past half decade: the rise of &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; as a JavaScript package manager to rule them all, the emergence of ES6 as a go-to JS syntax, the winning streak of &lt;a href=&quot;https://babeljs.io/&quot;&gt;transpilers&lt;/a&gt; and &lt;a href=&quot;https://stateofjs.com/2016/buildtools/&quot;&gt;build tools&lt;/a&gt;, the &lt;a href=&quot;https://twitter.com/codeinarocket/status/914851470599745536&quot;&gt;ever-growing&lt;/a&gt; embrace of &lt;a href=&quot;http://postcss.org/&quot;&gt;PostCSS&lt;/a&gt; as an alternative to CSS pre-processors. Not to mention the astounding success of front-end frameworks like React and Vue that change the very way we think about front-end code: &lt;em&gt;components&lt;/em&gt; instead of “pages”.&lt;/p&gt;
&lt;p&gt;Trying to cram all that complexity in one developer’s head (especially for someone who is just starting out) results in a &lt;a href=&quot;https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4&quot;&gt;well-described&lt;/a&gt; cognitive fatigue.&lt;/p&gt;
&lt;p&gt;However, the feeling of being left behind the pack, the growing difficulty to talk shop with “front-end guys”, and the creeping anxiety about job prospects should not be your only reason to question an established workflow. Programmers are rational people, after all.&lt;/p&gt;
&lt;h2 id=&quot;whats-wrong-with-the-asset-pipeline&quot;&gt;What’s wrong with the Asset Pipeline?&lt;/h2&gt;
&lt;p&gt;Let’s not argue—the “old way” still works. You can still rely on a standard Rails front-end setup (and use CoffeeScript) to achieve results: your view templates, scripts, and styles will still be handled by Asset Pipeline: concatenated, minified, delivered. In production, where it all counts, they will still come in the form of two big unreadable (for humans, at least) files: one for scripts and one for styles.&lt;/p&gt;
&lt;p&gt;As developers, however, we usually care about&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;isolated, reusable, testable code that is easy to reason about;&lt;/li&gt;
&lt;li&gt;short “code change → visible result” cycle;&lt;/li&gt;
&lt;li&gt;straightforward dependency management; and&lt;/li&gt;
&lt;li&gt;well-maintained tools.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Sure, “classic” Rails gives our code &lt;em&gt;some structure&lt;/em&gt;: there are separate folders for view templates, javascripts, stylesheets and images. But as the front-end complexity grows, navigating them quickly becomes a cognitive drain.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we are not careful enough with “classic Rails full-stack way”, we end up with the global dumpster of all things CSS and JS, littered with dead code, in no time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Speed is another reason to consider a switch. The problem is &lt;a href=&quot;https://www.google.com/search?&amp;amp;q=rails%20sprockets%20is%20slow&quot;&gt;well documented&lt;/a&gt; and Heroku even has a dedicated &lt;a href=&quot;https://blog.heroku.com/speeding-up-sprockets&quot;&gt;guide&lt;/a&gt; about optimizing Asset Pipeline performance, admitting that handling assets is the &lt;em&gt;slowest&lt;/em&gt; part of deploying a Rails app: “&lt;em&gt;On average, it’s over 20x slower than installing dependencies via &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;In development, changing a line of CSS and reloading a page to see the result may also take some time—and those seconds add up quick.&lt;/p&gt;
&lt;p&gt;What about dependencies? With Asset Pipeline, keeping them up-to-date becomes a major hassle. In order to add a JavaScript library to your project you can either load its code from CDN, cut and paste it into &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/assets&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/assets&lt;/code&gt;, or wait for someone to wrap it into a gem. Meanwhile, JavaScript community manages the same with a single command: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; or, most recently, &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add&lt;/code&gt; . Same goes for updating. Yarn gives us the convenience of Bundler—for JavaScript.&lt;/p&gt;
&lt;p&gt;Finally, Sprockets, the build tool behind Asset Pipeline, does not look well-maintained, and for quite some time:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Sprockets and Webpack GitHub pulse&quot; class=&quot;post-media__object&quot; width=&quot;983&quot; height=&quot;318&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/sprockets_webpack_pulse-b3991b5.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Sprockets have become a bit rusty over the last 5 years (left). Webpack’s pulse over the same time frame (right)&lt;/p&gt;
&lt;h2 id=&quot;wind-of-change&quot;&gt;Wind of change&lt;/h2&gt;
&lt;p&gt;In 2017, DHH and Rails community have finally started changing things around. Rails 5.1 &lt;a href=&quot;http://weblog.rubyonrails.org/2017/4/27/Rails-5-1-final/&quot;&gt;brought&lt;/a&gt; us &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; integration with the &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;webpacker&lt;/a&gt; gem, &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; through &lt;a href=&quot;https://yarnpkg.com/en/&quot;&gt;Yarn&lt;/a&gt;, out-of-the-box support for Babel, React, Vue and PostCSS (and even for &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, if you are feeling adventurous).&lt;/p&gt;
&lt;p&gt;Asset Pipeline and CoffeeScript, however, still maintain their hold: starting a project with bare &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt; gives you the “good old way”. While searching the web for JS-related topics, you still have to transpile code examples in your head in order to make any sense of them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t fret, though, as your Rails app can adopt all the modern practices &lt;em&gt;now&lt;/em&gt;, and we are going to cover the basics together. All you need to start is some basic knowledge of Rails, JavaScript and CSS. We will also leverage latest Rails 5.1+ features to keep configuration and tooling to the minimum.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this series of tutorials, we will share some of the best practices developed at Evil Martians to build a modern sensible front-end.&lt;/p&gt;
&lt;h2 id=&quot;block-mentality&quot;&gt;Block mentality&lt;/h2&gt;
&lt;p&gt;React teaches us to &lt;a href=&quot;https://reactjs.org/docs/thinking-in-react.html&quot;&gt;think in components&lt;/a&gt;. Other modern front-end frameworks follow the lead. Modularity is the philosophy behind common CSS methodologies such as &lt;a href=&quot;http://getbem.com/introduction/&quot;&gt;BEM&lt;/a&gt;. The idea is simple: every logical part of your UI should be self-contained.&lt;/p&gt;
&lt;p&gt;Rails has a built-in way to break your views into logical parts—&lt;a href=&quot;http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials&quot;&gt;view partials&lt;/a&gt;. But if your partial relies on JavaScript, as any modern component probably does, you have to reach for it in a far-away folder, under &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets/javascripts&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What if we could bring everything together and have partials, their respective scripts and styles together—in the &lt;em&gt;same place&lt;/em&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That way we can rely on the smarts of modern build tools to only bundle the components we actually use. And whenever we want to change something—we know exactly where to look.&lt;/p&gt;
&lt;p&gt;The approach we are going to showcase does not rely on React, Vue or Elm architecture, and purposefully so: you are free to learn those tools on your own, but you don’t have to take a steep learning curve right now. You can use tools that already come with Rails to gradually adopt a modern front-end mindset.&lt;/p&gt;
&lt;h2 id=&quot;sass-vs-postcss&quot;&gt;Sass vs. PostCSS&lt;/h2&gt;
&lt;p&gt;Rails loves Sass. We, however, tend to stick to PostCSS. First of all, it is &lt;a href=&quot;https://github.com/postcss/benchmark&quot;&gt;36.4 times faster&lt;/a&gt; than the built-in Ruby Sass that handles CSS processing in Rails. It is written in 100% pure JavaScript. It is easily extendable and customisable with &lt;a href=&quot;https://www.postcss.parts/&quot;&gt;numerous plugins&lt;/a&gt;. One of them, &lt;a href=&quot;http://cssnext.io/features/&quot;&gt;cssnext&lt;/a&gt;, comes out of the box and generates polyfills for features that are not supported by browsers yet, but only as long as it is necessary. And you can still use PostCSS on top of your favorite pre-processor—if you ever find a reason for that.&lt;/p&gt;
&lt;h2 id=&quot;what-are-we-building&quot;&gt;What are we building?&lt;/h2&gt;
&lt;p&gt;It is finally time to get our hands dirty. To demonstrate a new approach to front-end, we will build a standard run-of-the-mill chat application with minimal authentication and ActionCable. Let’s call it &lt;code class=&quot;highlighter-rouge&quot;&gt;evil_chat&lt;/code&gt;. The example is not too complex, but is still sophisticated enough to make our experience “full-stack”.&lt;/p&gt;
&lt;p&gt;In our project, we are going to say goodbye to Assets Pipeline and default Rails generators that create a bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.coffee&lt;/code&gt; files. We are going to keep ERB as the default templating engine, leaving you to explore alternatives like Slim or Haml at your own pace.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;A new frontend folder in your app&quot; class=&quot;post-media__object&quot; width=&quot;812&quot; height=&quot;412&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/folder_structure-e863c9b.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;On the left, folder structure for Evil Front&lt;/p&gt;
&lt;p&gt;We are also going to revisit the folder structure. Everything will now happen in the new &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt; folder at the top level of our application. It will replace &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets&lt;/code&gt; completely.&lt;/p&gt;
&lt;p&gt;Don’t worry if it does not quite make sense yet, let’s take it step by step.&lt;/p&gt;
&lt;h2 id=&quot;how-do-i-start-my-project&quot;&gt;How do I start my project?&lt;/h2&gt;
&lt;p&gt;So, bare &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt; doesn’t cut it anymore. Here is your new magic line (we assume the app’s name is &lt;code class=&quot;highlighter-rouge&quot;&gt;evil_chat&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rails new evil_chat --skip-coffee --skip-sprockets --skip-turbolinks --webpack --database&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;postgresql  -T
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, we no longer need CoffeeScript or any of the &lt;a href=&quot;https://github.com/rails/sprockets-rails&quot;&gt;Sprockets-related&lt;/a&gt; functionality. &lt;code class=&quot;highlighter-rouge&quot;&gt;-T&lt;/code&gt; is optional, it skips creating test files, as testing is beyond the scope of this tutorial. We will use PostgreSQL as our default database with &lt;code class=&quot;highlighter-rouge&quot;&gt;--database=postgresql&lt;/code&gt;, as it will make our app easier to deploy on &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; once we’re done.&lt;/p&gt;
&lt;p&gt;The most important option is &lt;code class=&quot;highlighter-rouge&quot;&gt;--webpack&lt;/code&gt;. It tells Rails to use the &lt;a href=&quot;https://github.com/rails/webpacker&quot;&gt;webpacker&lt;/a&gt; gem to bundle all our assets with Webpack. Now our project comes with a set of modern tools:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder that contains all our JS dependencies (it’s also added to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; so you don’t commit thousand of extra files in your repo by mistake)&lt;/li&gt;
&lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to declare all your dependencies, as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt; which means you can add packages with a (fancier) &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt; file configured for transforming ES6 into JavaScript code compliant with any browser that currently has more than &lt;a href=&quot;http://browserl.ist/?q=%3E+1%25&quot;&gt;1% of market share&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.postcssrc.yml&lt;/code&gt; already configured with &lt;a href=&quot;https://www.npmjs.com/package/postcss-smart-import&quot;&gt;postcss-smart-import&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/postcss-cssnext&quot;&gt;postcss-cssnext&lt;/a&gt; plugins that allow you to use all the features described in &lt;a href=&quot;http://cssnext.io/features/&quot;&gt;cssnext&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Some things are forgotten, though. Notably, a global config for &lt;a href=&quot;https://github.com/ai/browserslist&quot;&gt;browserslist&lt;/a&gt;, that tools like &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt; are going to need to correctly process your code to be cross-browser compliant. Gladly that one is easy to fix, just create a file in your project’s root:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch .browserslistrc
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;article class=&quot;post__note&quot;&gt;&lt;p&gt;Well, not really, but you can certainly get away with this much knowledge&lt;/p&gt;
&lt;/article&gt;&lt;p&gt;Now open this file and add a single line: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; 1%&lt;/code&gt;. That’s all there is to know about browser compatibility!&lt;/p&gt;
&lt;p&gt;Another thing we better do right from the start is to reconfigure the default behaviour of Rails generators. We don’t need them to put anything into &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets&lt;/code&gt;, as (spoiler!) we are going to remove this folder altogether in a next step. Open &lt;code class=&quot;highlighter-rouge&quot;&gt;application.rb&lt;/code&gt; and add these lines:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/application.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generators&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test_framework&lt;/span&gt;  &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stylesheets&lt;/span&gt;     &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;javascripts&lt;/span&gt;     &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;helper&lt;/span&gt;          &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;channel&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;assets: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Time to perform the desecration of Asset Pipeline. &lt;strong&gt;Remove&lt;/strong&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;But how do we replace it? Follow these steps:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--webpack&lt;/code&gt; option in our &lt;code class=&quot;highlighter-rouge&quot;&gt;rails new&lt;/code&gt; had created a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;app/javascript&lt;/code&gt;. &lt;strong&gt;Move it to the root of your project&lt;/strong&gt; and rename it to &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt; (or choose your own fancy name, but “frontend” makes most sense). Keep the insides intact: &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend/packs&lt;/code&gt; will serve as our &lt;a href=&quot;https://webpack.js.org/concepts/#entry&quot;&gt;Webpack “entry” point&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;application.html.erb&lt;/code&gt; and replace &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript_include_tag &quot;application&quot;&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript_pack_tag &quot;application&quot;&lt;/code&gt;. One word in a method name makes all the difference: &lt;code class=&quot;highlighter-rouge&quot;&gt;include_tag&lt;/code&gt; inserts a reference to an app-wide JavaScript file compiled by Sprockets (old way), &lt;code class=&quot;highlighter-rouge&quot;&gt;pack_tag&lt;/code&gt; brings in a Webpack &lt;em&gt;bundle&lt;/em&gt; generated from the entry point, which is our &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend/packs/application.js&lt;/code&gt; (new way). While at it, move the pack tag down from the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; to the very end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, right after the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;stylesheet_link_tag 'application', media: 'all'&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;stylesheet_pack_tag 'application'&lt;/code&gt;. We are going to use CSS on a per-component basis with the help of Webpack and ES6 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statement. That means all our styles will be handled by webpacker too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we need to let webpacker know where to look for files to bundle, as we have just renamed the default folder. As of &lt;a href=&quot;http://weblog.rubyonrails.org/2017/8/30/webpacker-3-0/&quot;&gt;webpacker 3.0&lt;/a&gt;, configuration is done through &lt;code class=&quot;highlighter-rouge&quot;&gt;webpacker.yml&lt;/code&gt; file inside of Rails &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; folder. Make sure first few lines look like these to reflect the change in our folder structure:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;default&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;source_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;frontend&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;source_entry_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;packs&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;public_output_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;packs&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;cache_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tmp/cache/webpacker&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Our ERB partials are going to live in &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt; folder as well, and our controllers wouldn’t know how to find them, unless we tell them so in &lt;code class=&quot;highlighter-rouge&quot;&gt;application_controller.rb&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;protect_from_forgery&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with: :exception&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# That's all there is:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prepend_view_path&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;As of webpacker 3.0, we &lt;a href=&quot;http://weblog.rubyonrails.org/2017/8/30/webpacker-3-0/&quot;&gt;no longer need a separate process&lt;/a&gt; to compile assets on-demand in development, but if we want to make use of automatic page refresh on every change in JS/CSS code, we still need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;webpacker-dev-server&lt;/code&gt; alongside with &lt;code class=&quot;highlighter-rouge&quot;&gt;rails s&lt;/code&gt;. For that we need a Procfile, so let’s create one:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch Procfile
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Put this inside:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;server: bin/rails server
assets: bin/webpack-dev-server
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With Procfile in place, you can launch all your processes with a single command using a tool like &lt;a href=&quot;https://github.com/ddollar/foreman&quot;&gt;Foreman&lt;/a&gt;, but we highly recommend using our alternative: the &lt;a href=&quot;https://evilmartians.com/chronicles/introducing-overmind-and-hivemind&quot;&gt;Hivemind&lt;/a&gt;. You can also take a look at its big brother &lt;a href=&quot;https://github.com/DarthSim/overmind&quot;&gt;Overmind&lt;/a&gt;, as it will allow you to use &lt;code class=&quot;highlighter-rouge&quot;&gt;pry&lt;/code&gt; for debugging without interrupting any running processes.&lt;/p&gt;
&lt;h2 id=&quot;smoke-test&quot;&gt;Smoke test&lt;/h2&gt;
&lt;p&gt;Time to test if our new setup is working correctly. Let’s add some simple code to our &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; (found under &lt;code class=&quot;highlighter-rouge&quot;&gt;packs&lt;/code&gt;) to manipulate our DOM and then make sure webpacker handles it well. First, we need to generate a basic controller and provide a default route:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rails g controller pages home
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pages#home&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make sure to remove everything from &lt;code class=&quot;highlighter-rouge&quot;&gt;views/pages/home.html.erb&lt;/code&gt;, so it contains no code at all. Now in &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; remove everything that is there and replace it with this:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// frontend/packs/application.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./application.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;afterbegin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Webpacker works!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s also create an &lt;code class=&quot;highlighter-rouge&quot;&gt;application.css&lt;/code&gt; file in the same folder to check that our styles are processed too (with PostCSS):&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* frontend/packs/application.css */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightyellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Time to launch our server for the first time! We assume you already have &lt;a href=&quot;https://github.com/DarthSim/hivemind&quot;&gt;Hivemind&lt;/a&gt; installed, if not—use &lt;code class=&quot;highlighter-rouge&quot;&gt;foreman&lt;/code&gt; or a similar process manager (but, seriously, consider Hivemind, it’s &lt;a href=&quot;https://evilmartians.com/chronicles/introducing-overmind-and-hivemind&quot;&gt;awesome&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;hivemind
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now go to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt; and see the result:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;A smoke test for our app&quot; class=&quot;post-media__object&quot; width=&quot;1255&quot; height=&quot;847&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/smoke_test-37c0723.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If it does not burn, it works!&lt;/p&gt;
&lt;p&gt;And here is a cool little thing about Webpack. If you go to &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt;, change “Webpacker works!” to something else and save the file, you will see changes in your browser without having to hit a “Refresh” button.&lt;/p&gt;
&lt;p&gt;Now, before we start writing any &lt;em&gt;real&lt;/em&gt; code, let’s make sure we write it in style.&lt;/p&gt;
&lt;h2 id=&quot;okay-how-do-i-lint-my-js&quot;&gt;Okay, how do I lint my JS?&lt;/h2&gt;
&lt;article class=&quot;post__note&quot;&gt;&lt;p&gt;Prettier also integrates with all popular editors so you can reformat your code with a touch of a button. ESLint also has plugins for all main editors to give you instant visual feedback.&lt;/p&gt;
&lt;/article&gt;&lt;p&gt;There are so many ways to write JavaScript and with &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript&quot;&gt;syntax being updated on yearly basis now&lt;/a&gt;, it is so easy to get confused before you even start. The semicolons/&lt;a href=&quot;https://feross.org/never-use-semicolons/&quot;&gt;no semicolons&lt;/a&gt; debate never gets old, for instance. Instead of arguing over each peculiarity of JavaScript syntax, it’s easier to stick with some opinionated code formatter, such as &lt;a href=&quot;https://standardjs.com/&quot;&gt;Standard&lt;/a&gt; or &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt;. We choose Prettier (and yes, it has semicolons by default, but you can easily &lt;a href=&quot;https://github.com/prettier/prettier#semicolons&quot;&gt;turn it off&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We are going to set up some automated linting with &lt;a href=&quot;https://eslint.org/&quot;&gt;ESLint&lt;/a&gt;, so our code style is always kept in check. We are also going to rely on &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb JavaScript Style Guide&lt;/a&gt; that contains a lot of best practices for writing maintainable JS code.&lt;/p&gt;
&lt;p&gt;Let’s add some &lt;code class=&quot;highlighter-rouge&quot;&gt;devDependencies&lt;/code&gt; to our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, as for now it only contains &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt;. This is how it should look like after we make it cater to our JS linting needs:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;evil_chat_codealong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;private&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;@rails/webpacker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^3.0.1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.9.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;babel-eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^8.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.8.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint-config-airbnb-base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^12.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint-config-prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.6.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint-import-resolver-webpack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^0.8.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint-plugin-import&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.7.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint-plugin-prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.3.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.2.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pre-commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.2.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.7.3&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lint-staged&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pre-commit&lt;/code&gt; will come handy later, when we add some hooks to our &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; commands. This way we make sure that less-then-ideal code will never even make it to a repository.&lt;/p&gt;
&lt;p&gt;One last touch: we need &lt;code class=&quot;highlighter-rouge&quot;&gt;.eslintrc&lt;/code&gt; file in our root folder so ESLint knows how to apply our rules.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch .eslintrc
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Put this inside:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint-config-airbnb-base&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;browser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;prettier/prettier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babel-eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;import/resolver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;webpack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;resolve&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The order of elements under &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;extends&quot;&lt;/code&gt; key is important: this way we are telling ESLint to first apply Airbnb rules, and whenever there is a conflict with Prettier format guides, prefer the latest. We also need to add a key &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;import/resolver&quot;&lt;/code&gt; for our &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint-import-resolver-webpack&lt;/code&gt; dependency: it makes sure that whatever you &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; in your JS files actually exists in the folders handled by Webpack (in our case, it’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt; folder).&lt;/p&gt;
&lt;h2 id=&quot;what-about-css&quot;&gt;What about CSS?&lt;/h2&gt;
&lt;p&gt;CSS needs some linting too! We are also going to normalize it with a well-respected tool &lt;a href=&quot;https://github.com/necolas/normalize.css/&quot;&gt;normalize.css&lt;/a&gt;. We will be relying on &lt;a href=&quot;https://stylelint.io/&quot;&gt;stylelint&lt;/a&gt; to detect errors and convention violations in our stylesheets. Let’s add two more development dependencies in our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;stylelint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^8.1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;stylelint-config-standard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^17.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will also need a &lt;code class=&quot;highlighter-rouge&quot;&gt;.stylelintrc&lt;/code&gt; file in our root — to instruct our linter.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch .stylelintrc
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stylelint-config-standard&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also, add &lt;code class=&quot;highlighter-rouge&quot;&gt;normalize.css&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;dependencies&quot;&lt;/code&gt; key in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; (not &lt;code class=&quot;highlighter-rouge&quot;&gt;devDevdependencies&lt;/code&gt; this time!), so that part of your package listing looks like this:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;@rails/webpacker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^3.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;normalize.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^7.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now it is time to introduce some &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks&quot;&gt;git hooks&lt;/a&gt; so all checks will run automatically on each &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;. For that, we will add a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;scripts&quot;&lt;/code&gt; key to our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$(yarn bin)/lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;config/webpack/**/*.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier --write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;frontend/**/*.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier --write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;frontend/**/*.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prettier --write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stylelint --fix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git add&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pre-commit&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, every time we commit, all staged files will be examined for errors and reformatted automatically.&lt;/p&gt;
&lt;p&gt;Our final &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; should look like the contents of this &lt;a href=&quot;https://gist.github.com/progapandist/0c28831364c560d982b8bbed48226c96&quot;&gt;gist&lt;/a&gt;.&lt;br/&gt;To install all new dependencies, run &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn&lt;/code&gt; in your Terminal.&lt;/p&gt;
&lt;p&gt;I know you can not wait to see our automated linting in action. Try going to your &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend/packs/application.js&lt;/code&gt; and removing a semicolon. Then run &lt;code class=&quot;highlighter-rouge&quot;&gt;git add . &amp;amp;&amp;amp; git commit -m &quot;testing JS linting&quot;&lt;/code&gt; and see that semicolon being added right back. See? No sloppy style anymore.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Linter's config&quot; class=&quot;post-media__object&quot; width=&quot;535&quot; height=&quot;346&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/plugins-ba21e6c.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If everything was set up correctly, our project’s root should contain all those files&lt;/p&gt;
&lt;h2 id=&quot;our-first-component-no-react-involved&quot;&gt;Our first component (no React involved)&lt;/h2&gt;
&lt;p&gt;Just to give you a taste of what will be happening in Part 2 of this guide, let’s create our first component.&lt;/p&gt;
&lt;p&gt;First, let’s get rid of our &lt;code class=&quot;highlighter-rouge&quot;&gt;application.css&lt;/code&gt;, we only needed that one for a smoke test. Delete all code from &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; too. From now on, our &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; will only contain import statements. This our entry point, a place where everything comes together. We will need some other place to keep app-wide stylesheets and javascripts, so let’s create one. We will call this new folder &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir frontend/init
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch frontend/init/index.js
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch frontend/init/index.css
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to register our new folder inside our &lt;em&gt;entry point.&lt;/em&gt; Add this line to your &lt;code class=&quot;highlighter-rouge&quot;&gt;packs/application.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// frontend/packs/application.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now some code for our new files. Here is our &lt;code class=&quot;highlighter-rouge&quot;&gt;init/index.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// frontend/init/index.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./index.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And for &lt;code class=&quot;highlighter-rouge&quot;&gt;init/index.css&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* frontend/init/index.css */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;normalize.css/normalize.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;Helvetica Neue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;24px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All we do here is applying some general styling to all fonts in our app. Our &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; folder will also be the first to go into the bundle, so it makes sense to include our &lt;code class=&quot;highlighter-rouge&quot;&gt;normalize.css&lt;/code&gt; here. Later we can use the same folder to set up polyfills or error monitoring—any functionality that does not relate directly to our components and needs to be loaded as soon as possible.&lt;/p&gt;
&lt;p&gt;Okay, &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; is a special case, so what about the components?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each component is a folder with three files in it: one for ERB partial, one for scripts, and one for styles.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All our components will be located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt; folder inside our &lt;code class=&quot;highlighter-rouge&quot;&gt;frontend&lt;/code&gt;. Let’s create one, along with the first component that will simply be called &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt; (think of it as a template for our layout):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir -p frontend/components/page
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch frontend/components/page/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;_page.html.erb,page.css,page.js&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note that we are not calling our component’s JS file &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;, this name is reserved for our &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; folder. We choose to name our JS files the same as our components so that later, when we have multiple open tabs in our editor, we can quickly figure out where we are. This practice is not common (in other tutorials you will see mostly &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; for components), but saves a lot of time when writing code.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We don’t have any component-related JS logic yet, so our &lt;code class=&quot;highlighter-rouge&quot;&gt;page.js&lt;/code&gt; still consists of a single import statement for a CSS file:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// frontend/components/page/page.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./page.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;page.css&lt;/code&gt; has some component-related styling:&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/* frontend/components/page/page.css */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100vh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, our &lt;code class=&quot;highlighter-rouge&quot;&gt;_page.html.erb&lt;/code&gt; contains markup. Note the we can use all ERB goodies here and leverage the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; statement that will allow us to &lt;em&gt;nest&lt;/em&gt; components one inside another.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- frontend/components/page/_page.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= yield %&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don’t forget to reference our new component in &lt;code class=&quot;highlighter-rouge&quot;&gt;application.js&lt;/code&gt; by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;import &quot;components/page/page&quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;A structure for the first component&quot; class=&quot;post-media__object&quot; width=&quot;632&quot; height=&quot;305&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/components_first_structure-95e773f.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A structure of our “frontend” folder at this point of tutorial&lt;/p&gt;
&lt;p&gt;Now let’s add some ERB code to our &lt;code class=&quot;highlighter-rouge&quot;&gt;home.html.erb&lt;/code&gt; view:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/pages/home.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= render &quot;components/page/page&quot; do %&amp;gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello from our first component!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Time for to see our first component in action! Launch the server again and refresh the page. Fingers crossed, you are going to see something like that:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;A structure for the first component&quot; class=&quot;post-media__object&quot; width=&quot;994&quot; height=&quot;348&quot; src=&quot;https://cdn.evilmartians.com/front/posts/evil-front-part-1/first_component_works-87c1250.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A browser and console output for out first working component&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Congratulations, you have completed Part 1 of our tutorial! Stay tuned for Part 2 where our application will finally take shape and we will introduce components needed for our chat-related functionality. We will also add a helper to render our components with less typing.&lt;/p&gt;
</description>
<pubDate>Fri, 08 Dec 2017 14:35:21 +0000</pubDate>
<dc:creator>galfarragem</dc:creator>
<og:title>Evil Front Part 1: Modern Front-end in Rails — Martian Chronicles</og:title>
<og:description>An opinionated guide to modern, modular, component-based approach to handling your presentation logic in Rails that does not depend on any front-end framework. Follow our three-part tutorial to learn the bare minimum of up-to-date front-end techniques by example and finally make sense of it all. Part 1: goodbye Asset Pipeline, code organization, linting.</og:description>
<og:url>https://evilmartians.com/chronicles/evil-front-part-1</og:url>
<og:type>article</og:type>
<og:image>https://cdn.evilmartians.com/front/posts/evil-front-part-1/cover-1386775.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://evilmartians.com/chronicles/evil-front-part-1</dc:identifier>
</item>
<item>
<title>macOS lock screen: “I just sent my session pass to my whole team”</title>
<link>https://twitter.com/BenoitLetondor/status/939127296266588160</link>
<guid isPermaLink="true" >https://twitter.com/BenoitLetondor/status/939127296266588160</guid>
<description>I open my MBP, type the session password, hit return, nothing happen. I realize that the password field is not focused, I click on it, type the pass again and it works.
The focus was on the Slack window behind, I just sent my session pass to my whole team 😱 WTF &lt;a href=&quot;https://mobile.twitter.com/AppleSupport&quot; class=&quot;twitter-atreply dir-ltr&quot; dir=&quot;ltr&quot; data-mentioned-user-id=&quot;3309375033&quot; data-screenname=&quot;AppleSupport&quot;&gt;@AppleSupport&lt;/a&gt;</description>
<pubDate>Fri, 08 Dec 2017 13:44:31 +0000</pubDate>
<dc:creator>fofolo</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/BenoitLetondor/status/939127296266588160</dc:identifier>
</item>
<item>
<title>Oregon punished an engineer for criticizing red-light cameras. He fought and won</title>
<link>https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/criticizing-red-light-cameras-is-not-a-punishable-offense-oregon-concedes</link>
<guid isPermaLink="true" >https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/criticizing-red-light-cameras-is-not-a-punishable-offense-oregon-concedes</guid>
<description>&lt;div class=&quot;inline-content inline-photo inline-photo-normal&quot;&gt; &lt;img class=&quot;unprocessed placeholder&quot; data-hi-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/news/morning-mix/wp-content/uploads/sites/21/2017/12/IFJ_2459-1024x683.jpg&amp;amp;w=1484&quot; data-low-res-src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/news/morning-mix/wp-content/uploads/sites/21/2017/12/IFJ_2459-1024x683.jpg&amp;amp;w=480&quot; data-raw-src=&quot;https://img.washingtonpost.com/news/morning-mix/wp-content/uploads/sites/21/2017/12/IFJ_2459-1024x683.jpg&quot; src=&quot;https://img.washingtonpost.com/wp-apps/imrs.php?src=https://img.washingtonpost.com/news/morning-mix/wp-content/uploads/sites/21/2017/12/IFJ_2459-1024x683.jpg&amp;amp;w=60&quot;/&gt;&lt;br/&gt;&lt;span class=&quot;pb-caption&quot;&gt;Mats Järlström points to a red-light camera. (Institute for Justice)&lt;/span&gt;&lt;/div&gt;&lt;p&gt;Mats Järlström is, by all accounts, an engineer. He graduated from engineering school in Sweden, served as an airplane-camera mechanic in the Swedish Air Force and worked in research and development at an electronics manufacturer. For the past 20 years, he has earned a living designing and repairing audio equipment.&lt;/p&gt;
&lt;p&gt;He is not, however, a “licensed professional” in the state of Oregon, where he put down roots in the early 1990s. So when Järlström did his own study of the timing mechanisms in the state’s red-light cameras and found them flawed, Oregon officials hit him with a $500 fine for “unlicensed practice of engineering.”&lt;/p&gt;
&lt;p&gt;Järlström was inspired by the $150 ticket his wife got in the mail in May after driving through an intersection with a red-light camera in Beaverton, Ore. His research showed that the mathematical formula used in the timing of yellow lights was outdated and unfair to drivers.&lt;/p&gt;
&lt;div class=&quot;inline-content inline-video&quot;&gt;

&lt;div class=&quot;inline-video-caption&quot;&gt;&lt;span class=&quot;pb-caption&quot;&gt;When Mats Järlström presented research to Oregon state officials and local media that said the red-light cameras in his area were inaccurate, the Oregon State Board of Examiners for Engineering and Land Surveying tried to silence him. (Institute for Justice)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;When he presented his findings to state officials and local media, the Oregon State Board of Examiners for Engineering and Land Surveying tried to silence him. A nearly two-year investigation by the board found he had violated a state law that says only state-licensed engineers can speak publicly about technical matters. Järlström, in turn, filed a federal lawsuit alleging violations of his First Amendment rights.&lt;/p&gt;
&lt;p&gt;This week, more than four years after his wife’s ticket, Järlström got some long-awaited relief. On Monday, Oregon’s attorney general conceded that the engineering board had trampled on his free speech rights, &lt;a href=&quot;http://www.oregonlive.com/portland/index.ssf/2017/12/state_board_concedes_it_violat.html&quot; target=&quot;_blank&quot;&gt;the Oregonian reported&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“We have admitted to violating Mr. Järlström’s rights,” Christina L. Beatty-Walters, senior assistant attorney general, told a federal magistrate judge in Portland, according to the Oregonian. The state’s action against Järlström under the state’s Professional Engineer Registration Act “was not narrowly tailored to any compelling state interests,” she added in court filings.&lt;/p&gt;
&lt;p&gt;As long as Järlström doesn’t act in a commercial or professional manner, he is free to speak out about red-light cameras without fear of punishment, state attorneys said.&lt;/p&gt;
&lt;p&gt;The state has already cut a check to Järlström for $500, but the traffic-camera saga is not over. Oregon wants the lawsuit thrown out, but Järlström and his attorneys from the Institute for Justice want the law itself declared unconstitutional. They say others have been improperly investigated and fined for protected speech.&lt;/p&gt;
&lt;p&gt;“The existence of these laws and the way they’ve been applied time and time again has violated free speech rights,” attorney Samuel Gedge told the court, according to the Oregonian. “Past history suggests the board can’t be trusted on how the laws should be applied constitutionally.”&lt;/p&gt;
&lt;p&gt;In one case cited by Järlström’s attorneys, a Portland City Commissioner Dan Saltzman was investigated after a voter’s pamphlet described his background as an “environmental engineer.” Like Järlström, he had studied engineering but lacked state-issued bona fides. In another case, the state board used the law to fine a local activist $1,000 for criticizing a proposed new power plant, as &lt;a href=&quot;http://reason.com/blog/2017/04/26/after-challenging-red-light-cameras-oreg&quot; target=&quot;_blank&quot;&gt;Reason reported&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Järlström’s interest in traffic cameras has grown into a passion. He says the original formula for calculating the duration of yellow lights dates back to the 1950s and only accounts for cars driving in straight lines. Cars in turning lanes need more time to slow down and make a legal right-hand turn, he says.&lt;/p&gt;
&lt;p&gt;“Anyone should be able to talk about the traffic signals if they’re too long or too short or anything without being penalized,” Järlström said in an &lt;a href=&quot;https://www.youtube.com/watch?v=Wi4brP0sXSQ&quot; target=&quot;_blank&quot;&gt;Institute for Justice&lt;/a&gt; video earlier this year.&lt;/p&gt;
&lt;div class=&quot;inline-content inline-video&quot;&gt;

&lt;div class=&quot;inline-video-caption&quot;&gt;&lt;span class=&quot;pb-caption&quot;&gt;The first patented electric traffic signal went into operation 100 years ago. PostTV looks into how a modern traffic signal system keeps traffic flowing—or not—in a busy city like Washington, D.C. (Jason Aldag/The Washington Post)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;After researching the issue in his spare time, he sought to publicize his findings. He corresponded with one of the physicists who worked on the original yellow-light formula. He spoke at a transportation conference in Los Angeles. And he shared his work with media outlets, including “60 Minutes.”&lt;/p&gt;
&lt;p&gt;He also shared his ideas with the Oregon State Board of Examiners for Engineering and Land Surveying. That’s what got him in trouble.&lt;/p&gt;
&lt;p&gt;The board said Järlström was breaking the law and ordered him to “stop any further references” to his work until he registered as an engineer, his lawsuit says. He continued to publicize his work, and even shared a mathematical formula he believed would improve the timing of yellow lights.&lt;/p&gt;
&lt;p&gt;In early 2015, the board opened a “law enforcement case” against him, according to his lawsuit. In talking about his traffic-light theories, the board found, he had indicated he was a licensed engineer, violating state law. He paid the $500 fine in late 2016.&lt;/p&gt;
&lt;p&gt;“I stated that I was a Swedish electronics engineer, but I based all the things from freedom of speech,” Järlström said in the &lt;a href=&quot;https://www.youtube.com/watch?v=Wi4brP0sXSQ&quot; target=&quot;_blank&quot;&gt;Institute for Justice&lt;/a&gt; video. “I was just talking. That’s literally what I did.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More from Morning Mix:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/the-solar-eclipse-burned-a-crescent-wound-on-a-womans-retina-she-wasnt-wearing-proper-glasses/&quot; target=&quot;_blank&quot;&gt;The solar eclipse burned a crescent wound on a woman’s retina. She wasn’t wearing proper glasses.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/body-cam-captures-police-dog-attacking-innocent-woman-taking-out-her-garbage/&quot; target=&quot;_blank&quot;&gt;Body cam captures police dog attacking innocent woman taking out her garbage&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 08 Dec 2017 12:15:34 +0000</pubDate>
<dc:creator>notlob</dc:creator>
<og:type>article</og:type>
<og:url>https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/criticizing-red-light-cameras-is-not-a-punishable-offense-oregon-concedes/</og:url>
<og:image>https://www.washingtonpost.com/pbox.php?url=http://www.washingtonpost.com/news/morning-mix/wp-content/uploads/sites/21/2017/12/IFJ_2459.jpg&amp;w=1484&amp;op=resize&amp;opt=1&amp;filter=antialias&amp;t=20170517</og:image>
<og:title>Oregon punished an engineer for criticizing red-light cameras. He fought back and won.</og:title>
<og:description>A state panel fined an engineer who found flaws in the timing of the cameras.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.washingtonpost.com/news/morning-mix/wp/2017/12/08/criticizing-red-light-cameras-is-not-a-punishable-offense-oregon-concedes/</dc:identifier>
</item>
</channel>
</rss>