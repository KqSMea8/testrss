<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Mapzen Shutdown</title>
<link>https://mapzen.com/blog/shutdown/</link>
<guid isPermaLink="true" >https://mapzen.com/blog/shutdown/</guid>
<description>&lt;p&gt;Unfortunately, we have some sad news. Mapzen will cease operations at the end of January 2018. Our hosted APIs and all related support and services will turn off on February 1, 2018. You will not be charged for API usage in December/January. We know this is an inconvenience and have provided a &lt;a href=&quot;https://mapzen.com/blog/migration&quot;&gt;migration guide to similar services&lt;/a&gt; for our developer community. Our goal is to help as much as possible to ensure continuity in the services that you have built with us.&lt;/p&gt;
&lt;p&gt;Fortunately, the core products of Mapzen are built entirely on open software and data. As a result, there are options to run Mapzen services yourself or to switch to other service providers.&lt;/p&gt;
&lt;p&gt;Thanks for being with us over the past four years. We’re grateful that the open work we’ve done can continue outside of Mapzen and while we know this is a sad day, we’re optimistic about what’s next.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Preview image: Air Afrique Map of the World by M. Bourie from the David Rumsey Map Collection&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 17:19:39 +0000</pubDate>
<dc:creator>morisy</dc:creator>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mapzen.com/blog/shutdown/</dc:identifier>
</item>
<item>
<title>Show HN: Sapper.js – towards a better web app framework</title>
<link>https://svelte.technology/blog/sapper-towards-the-ideal-web-app-framework</link>
<guid isPermaLink="true" >https://svelte.technology/blog/sapper-towards-the-ideal-web-app-framework</guid>
<description>&lt;p class=&quot;standfirst&quot; svelte-1097777898=&quot;&quot;&gt;Taking the next-plus-one step&lt;/p&gt;
&lt;p class=&quot;byline&quot; svelte-1097777898=&quot;&quot;&gt;&lt;a href=&quot;https://twitter.com/Rich_Harris&quot;&gt;Rich Harris&lt;/a&gt; &lt;time datetime=&quot;2017-12-31&quot;&gt;Sun Dec 31 2017&lt;/time&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;3.3802816901408&quot;&gt;
&lt;p&gt;Quickstart for the impatient: &lt;a href=&quot;https://sapper.svelte.technology&quot;&gt;the Sapper docs&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/sveltejs/sapper-template&quot;&gt;starter template&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you had to list the characteristics of the perfect Node.js web application framework, you'd probably come up with something like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;It should do server-side rendering, for fast initial loads and no caveats around SEO&lt;/li&gt;
&lt;li&gt;As a corollary, your app's codebase should be universal — write once for server &lt;em&gt;and&lt;/em&gt; client&lt;/li&gt;
&lt;li&gt;The client-side app should &lt;em&gt;hydrate&lt;/em&gt; the server-rendered HTML, attaching event listeners (and so on) to existing elements rather than re-rendering them&lt;/li&gt;
&lt;li&gt;Navigating to subsequent pages should be instantaneous&lt;/li&gt;
&lt;li&gt;Offline, and other Progressive Web App characteristics, must be supported out of the box&lt;/li&gt;
&lt;li&gt;Only the JavaScript and CSS required for the first page should load initially. That means the framework should do automatic code-splitting at the route level, and support dynamic &lt;code&gt;import(...)&lt;/code&gt; for more granular manual control&lt;/li&gt;
&lt;li&gt;No compromise on performance&lt;/li&gt;
&lt;li&gt;First-rate developer experience, with hot module reloading and all the trimmings&lt;/li&gt;
&lt;li&gt;The resulting codebase should be easy to grok and maintain&lt;/li&gt;
&lt;li&gt;It should be possible to understand and customise every aspect of the system — no webpack configs locked up in the framework, and as little hidden 'plumbing' as possible&lt;/li&gt;
&lt;li&gt;Learning the entire framework in under an hour should be easy, and not just for experienced developers&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zeit/next.js&quot;&gt;Next.js&lt;/a&gt; is close to this ideal. If you haven't encountered it yet, I strongly recommend going through the tutorials at &lt;a href=&quot;https://learnnextjs.com&quot;&gt;learnnextjs.com&lt;/a&gt;. Next introduced a brilliant idea: all the pages of your app are files in a &lt;code&gt;your-project/pages&lt;/code&gt; directory, and each of those files is just a React component.&lt;/p&gt;
&lt;p&gt;Everything else flows from that breakthrough design decision. Finding the code responsible for a given page is easy, because you can just look at the filesystem rather than playing 'guess the component name'. Project structure bikeshedding is a thing of the past. And the combination of SSR (server-side rendering) and code-splitting — something the React Router team &lt;a href=&quot;https://reacttraining.com/react-router/web/guides/code-splitting&quot;&gt;gave up on&lt;/a&gt;, declaring 'Godspeed those who attempt the server-rendered, code-split apps' — is trivial.&lt;/p&gt;
&lt;p&gt;But it's not perfect. As churlish as it might be to list the flaws in something &lt;em&gt;so, so good&lt;/em&gt;, there are some:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Next uses something called 'route masking' to create nice URLs (e.g. &lt;code&gt;/blog/hello-world&lt;/code&gt; instead of &lt;code&gt;/post?slug=hello-world&lt;/code&gt;). This undermines the guarantee about directory structure corresponding to app structure, and forces you to maintain configuration that translates between the two forms&lt;/li&gt;
&lt;li&gt;All your routes are assumed to be universal 'pages'. But it's very common to need routes that only render on the server, such as a 301 redirect or an &lt;a href=&quot;https://svelte.technology/api/blog/sapper-towards-the-ideal-web-app-framework&quot;&gt;API endpoint&lt;/a&gt; that serves the data for your pages, and Next doesn't have a great solution for this. You can add logic to your &lt;code&gt;server.js&lt;/code&gt; file to handle these cases, but it feels at odds with the declarative approach taken for pages&lt;/li&gt;
&lt;li&gt;To use the client-side router, links can't be standard &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags. Instead, you have to use framework-specific &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; components, which is impossible in the markdown content for a blog post such as this one, for example&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The real problem, though, is that all that goodness comes for a price. The simplest possible Next app — a single 'hello world' page that renders some static text — involves 66kb of gzipped JavaScript. Unzipped, it's 204kb, which is a non-trivial amount of code for a mobile device to parse at a time when performance is a critical factor determining whether or not your users will stick around. And that's the &lt;em&gt;baseline&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can do better!&lt;/p&gt;
&lt;h2 id=&quot;the-compiler-as-framework-paradigm-shift&quot;&gt;The compiler-as-framework paradigm shift&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://svelte.technology/blog/frameworks-without-the-framework&quot;&gt;Svelte introduced a radical idea&lt;/a&gt;: what if your UI framework wasn't a framework at all, but a compiler that turned your components into standalone JavaScript modules? Instead of using a library like React or Vue, which knows nothing about your app and must therefore be a one-size-fits-all solution, we can ship highly-optimised vanilla JavaScript. Just the code your app needs, and without the memory and performance overhead of solutions based on a virtual DOM.&lt;/p&gt;
&lt;p&gt;The JavaScript world is &lt;a href=&quot;https://tomdale.net/2017/09/compilers-are-the-new-frameworks/&quot;&gt;moving towards this model&lt;/a&gt;. &lt;a href=&quot;https://stenciljs.com&quot;&gt;Stencil&lt;/a&gt;, a Svelte-inspired framework from the Ionic team, compiles to web components. &lt;a href=&quot;https://glimmerjs.com&quot;&gt;Glimmer&lt;/a&gt; &lt;em&gt;doesn't&lt;/em&gt; compile to standalone JavaScript (the pros and cons of which deserve a separate blog post), but the team is doing some fascinating research around compiling templates to bytecode. (React is &lt;a href=&quot;https://twitter.com/trueadm/status/944908776896978946&quot;&gt;getting in on the action&lt;/a&gt;, though their current research focuses on optimising your JSX app code, which is arguably more similar to the ahead-of-time optimisations that Angular, Ractive and Vue have been doing for a few years.)&lt;/p&gt;
&lt;p&gt;What happens if we use the new model as a starting point?&lt;/p&gt;
&lt;h2 id=&quot;introducing-sapper&quot;&gt;Introducing Sapper&lt;/h2&gt;
&lt;aside&gt;The &lt;a href=&quot;https://sapper.svelte.technology/guide#why-the-name-&quot;&gt;name comes from&lt;/a&gt; the term for combat engineers, and is also short for &lt;strong&gt;S&lt;/strong&gt;velte &lt;strong&gt;app&lt;/strong&gt; mak&lt;strong&gt;er&lt;/strong&gt;&lt;/aside&gt;&lt;p&gt;&lt;a href=&quot;https://sapper.svelte.technology&quot;&gt;Sapper&lt;/a&gt; is the answer to that question. &lt;strong&gt;Sapper is a Next.js-style framework that aims to meet the eleven criteria at the top of this article while dramatically reducing the amount of code that gets sent to the browser.&lt;/strong&gt; It's implemented as Express-compatible middleware, meaning it's easy to understand and customise.&lt;/p&gt;
&lt;p&gt;The same 'hello world' app that took 204kb with React and Next weighs just 7kb with Sapper. That number is likely to fall further in the future as we explore the space of optimisation possibilities, such as not shipping any JavaScript &lt;em&gt;at all&lt;/em&gt; for pages that aren't interactive, beyond the tiny Sapper runtime that handles client-side routing.&lt;/p&gt;
&lt;p&gt;What about a more 'real world' example? Conveniently, the &lt;a href=&quot;https://github.com/gothinkster/realworld&quot;&gt;RealWorld&lt;/a&gt; project, which challenges frameworks to develop an implementation of a Medium clone, gives us a way to find out. The &lt;a href=&quot;http://svelte-realworld.now.sh/&quot;&gt;Sapper implementation&lt;/a&gt; takes 39.6kb (11.8kb zipped) to render an interactive homepage.&lt;/p&gt;
&lt;aside&gt;Code-splitting isn't free — if the reference implementation used code-splitting, it would be larger still&lt;/aside&gt;&lt;p&gt;The entire app costs 132.7kb (39.9kb zipped), which is significantly smaller than the reference React/Redux implementation at 327kb (85.7kb), but even if was as large it would &lt;em&gt;feel&lt;/em&gt; faster because of code-splitting. And that's a crucial point. We're told we need to code-split our apps, but if your app uses a traditional framework like React or Vue then there's a hard lower bound on the size of your initial code-split chunk — the framework itself, which is likely to be a significant portion of your total app size. With the Svelte approach, that's no longer the case.&lt;/p&gt;
&lt;p&gt;But size is only part of the story. Svelte apps are also extremely performant and memory-efficient, and the framework includes powerful features that you would sacrifice if you chose a 'minimal' or 'simple' UI library.&lt;/p&gt;
&lt;h2 id=&quot;trade-offs&quot;&gt;Trade-offs&lt;/h2&gt;
&lt;p&gt;The biggest drawback for many developers evaluating Sapper would be 'but I like React, and I already know how to use it', which is fair.&lt;/p&gt;
&lt;p&gt;If you're in that camp, I'd invite you to at least try alternative frameworks. You might be pleasantly surprised! The &lt;a href=&quot;https://github.com/sveltejs/realworld&quot;&gt;Sapper RealWorld&lt;/a&gt; implementation totals 1,201 lines of source code, compared to 2,377 for the reference implementation, because you're able to express concepts very concisely using Svelte's template syntax (which &lt;a href=&quot;https://svelte.technology/guide#template-syntax&quot;&gt;takes all of five minutes to master&lt;/a&gt;). You get &lt;a href=&quot;https://svelte.technology/blog/the-zen-of-just-writing-css&quot;&gt;scoped CSS&lt;/a&gt;, with unused style removal and minification built-in, and you can use preprocessors like LESS if you want. You no longer need to use Babel. SSR is ridiculously fast, because it's just string concatenation. And we recently introduced &lt;a href=&quot;https://svelte.technology/guide#state-management&quot;&gt;svelte/store&lt;/a&gt;, a tiny global store that synchronises state across your component hierarchy with zero boilerplate. The worst that can happen is that you'll end up feeling vindicated!&lt;/p&gt;
&lt;p&gt;But there are trade-offs nonetheless. Some people have a pathological aversion to any form of 'template language', and maybe that applies to you. JSX proponents will clobber you with the 'it's just JavaScript' mantra, and therein lies React's greatest strength, which is that it is infinitely flexible. That flexibility comes with its own set of trade-offs, but we're not here to discuss those.&lt;/p&gt;
&lt;p&gt;And then there's &lt;em&gt;ecosystem&lt;/em&gt;. The universe around React in particular — the devtools, editor integrations, ancillary libraries, tutorials, StackOverflow answers, hell, even job opportunities — is unrivalled. While it's true that citing 'ecosystem' as the main reason to choose a tool is a sign that you're stuck on a local maximum, apt to be marooned by the rising waters of progress, it's still a major point in favour of incumbents.&lt;/p&gt;
&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;We're not at version 1.0.0 yet, and a few things may change before we get there. Once we do (soon!), there are a lot of exciting possibilities.&lt;/p&gt;
&lt;p&gt;I believe the next frontier of web performance is 'whole-app optimisation'. Currently, Svelte's compiler operates at the component level, but a compiler that understood the boundaries &lt;em&gt;between&lt;/em&gt; those components could generate even more efficient code. The React team's &lt;a href=&quot;https://twitter.com/trueadm/status/944908776896978946&quot;&gt;Prepack research&lt;/a&gt; is predicated on a similar idea, and the Glimmer team is doing some interesting work in this space. Svelte and Sapper are well positioned to take advantage of these ideas.&lt;/p&gt;
&lt;p&gt;Speaking of Glimmer, the idea of compiling components to bytecode is one that we'll probably steal in 2018. A framework like Sapper could conceivably determine which compilation mode to use based on the characteristics of your app. It could even serve JavaScript for the initial route for the fastest possible startup time, then lazily serve a bytecode interpreter for subsequent routes, resulting in the optimal combination of startup size and total app size.&lt;/p&gt;
&lt;p&gt;Mostly, though, we want the direction of Sapper to be determined by its users. If you're the kind of developer who enjoys life on the bleeding edge and would like to help shape the future of how we build web apps, please join us on &lt;a href=&quot;https://github.com/sveltejs/svelte&quot;&gt;GitHub&lt;/a&gt; and &lt;a href=&quot;https://gitter.im/sveltejs/svelte&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 15:57:08 +0000</pubDate>
<dc:creator>rich_harris</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://svelte.technology/blog/sapper-towards-the-ideal-web-app-framework</dc:identifier>
</item>
<item>
<title>Ask HN: Who is hiring? (January 2018)</title>
<link>https://news.ycombinator.com/item?id=16052538</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=16052538</guid>
<description>&lt;tr readability=&quot;0.55737704918033&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6.7964601769912&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;5.0973451327434&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;16052538&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16052538&quot; class=&quot;storylink&quot;&gt;Ask HN: Who is hiring? (January 2018)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.71428571428571&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_16052538&quot;&gt;313 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=whoishiring&quot; class=&quot;hnuser&quot;&gt;whoishiring&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=16052538&quot;&gt;8 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_16052538&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=16052538&amp;amp;goto=item%3Fid%3D16052538&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20Who%20is%20hiring%3F%20(January%202018)&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20Who%20is%20hiring%3F%20(January%202018)&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=16052538&amp;amp;auth=3b173202dcec6176ab4cacc7944b8fa517384d47&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=16052538&quot;&gt;418 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13.193341869398&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;14.135723431498&quot;&gt;Please lead with the location of the position and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE. If it isn't a household name, please explain what your company does.
&lt;p&gt;Submitters: please only post if you personally are part of the hiring company—no recruiting firms or job boards. One post per company please.&lt;/p&gt;
&lt;p&gt;Readers: please only email submitters if you personally are interested in the job—no recruiters or sales calls.&lt;/p&gt;
&lt;p&gt;You can also use kristopolous' console script to search the thread: &lt;a href=&quot;https://news.ycombinator.com/item?id=10313519&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=10313519&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note for this month: please don't go through these posts and downvote them in bulk. Users who do that eventually lose downvoting rights.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.0096153846154&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/dmca.html&quot;&gt;DMCA&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Tue, 02 Jan 2018 15:55:08 +0000</pubDate>
<dc:creator>whoishiring</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=16052538</dc:identifier>
</item>
<item>
<title>Linux page table isolation is not needed on AMD processors</title>
<link>https://lkml.org/lkml/2017/12/27/2</link>
<guid isPermaLink="true" >https://lkml.org/lkml/2017/12/27/2</guid>
<description>&lt;pre itemprop=&quot;articleBody&quot;&gt;
AMD processors are not subject to the types of attacks that the kernel&lt;br /&gt;page table isolation feature protects against.  The AMD microarchitecture&lt;br /&gt;does not allow memory references, including speculative references, that&lt;br /&gt;access higher privileged data when running in a lesser privileged mode&lt;br /&gt;when that access would result in a page fault.&lt;p&gt;Disable page table isolation by default on AMD processors by not setting&lt;br /&gt;the X86_BUG_CPU_INSECURE feature, which controls whether X86_FEATURE_PTI&lt;br /&gt;is set.&lt;/p&gt;&lt;p&gt;Signed-off-by: Tom Lendacky &amp;lt;thomas.lendacky@amd.com&amp;gt;&lt;br /&gt;---&lt;br /&gt;arch/x86/kernel/cpu/common.c |    4 ++--&lt;br /&gt;1 file changed, 2 insertions(+), 2 deletions(-)&lt;/p&gt;&lt;p&gt;diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c&lt;br /&gt;index c47de4e..7d9e3b0 100644&lt;br /&gt;--- a/arch/x86/kernel/cpu/common.c&lt;br /&gt;+++ b/arch/x86/kernel/cpu/common.c&lt;br /&gt;@@ -923,8 +923,8 @@ static void __init early_identify_cpu(struct cpuinfo_x86 *c)&lt;/p&gt;&lt;p&gt;setup_force_cpu_cap(X86_FEATURE_ALWAYS);&lt;/p&gt;&lt;p&gt;-  /* Assume for now that ALL x86 CPUs are insecure */&lt;br /&gt;-      setup_force_cpu_bug(X86_BUG_CPU_INSECURE);&lt;br /&gt;+       if (c-&amp;gt;x86_vendor != X86_VENDOR_AMD)&lt;br /&gt;+          setup_force_cpu_bug(X86_BUG_CPU_INSECURE);&lt;/p&gt;&lt;p&gt;fpu__init_system(c);&lt;/p&gt;&lt;/pre&gt;</description>
<pubDate>Tue, 02 Jan 2018 15:43:03 +0000</pubDate>
<dc:creator>fanf2</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://lkml.org/lkml/2017/12/27/2</dc:identifier>
</item>
<item>
<title>Stimulus: A modest JavaScript framework for the HTML you already have</title>
<link>https://github.com/stimulusjs/stimulus/</link>
<guid isPermaLink="true" >https://github.com/stimulusjs/stimulus/</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;h3&gt;A modest JavaScript framework for the HTML you already have&lt;/h3&gt;
&lt;p&gt;Stimulus is a JavaScript framework with modest ambitions. It doesn't seek to take over your entire front-end—in fact, it's not concerned with rendering HTML at all. Instead, it's designed to augment your HTML with just enough behavior to make it shine. Stimulus pairs beautifully with &lt;a href=&quot;https://github.com/turbolinks/turbolinks&quot;&gt;Turbolinks&lt;/a&gt; to provide a complete solution for fast, compelling applications with a minimal amount of effort.&lt;/p&gt;
&lt;p&gt;How does it work? Sprinkle your HTML with magic controller, target, and action attributes:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-text-html-basic&quot;&gt;
&lt;pre&gt;
&amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;data-controller&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;data-target&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello.name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;data-action&lt;/span&gt;=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;click-&amp;gt;hello#greet&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;Greet&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;div&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then write a compatible controller. Stimulus brings it to life automatically:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; hello_controller.js&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; { &lt;span class=&quot;pl-smi&quot;&gt;Controller&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;stimulus&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;pl-e&quot;&gt;Controller&lt;/span&gt; {
  &lt;span class=&quot;pl-en&quot;&gt;greet&lt;/span&gt;() {
    &lt;span class=&quot;pl-en&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;Hello, &lt;span class=&quot;pl-s1&quot;&gt;&lt;span class=&quot;pl-pse&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pl-pse&quot;&gt;}&lt;/span&gt;&lt;/span&gt;!&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt;)
  }

  &lt;span class=&quot;pl-k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;name&lt;/span&gt;() {
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;targets&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;name&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Stimulus continuously watches the page, kicking in as soon as magic attributes appear or disappear. It works with any update to the DOM, regardless of whether it comes from a full page load, a Turbolinks page change, or an Ajax request. Stimulus manages the whole lifecycle.&lt;/p&gt;
&lt;p&gt;You can write your first controller in five minutes by following along in &lt;a href=&quot;https://github.com/stimulusjs/stimulus/blob/master/handbook/README.md&quot;&gt;The Stimulus Handbook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can read more about why we created this new framework in &lt;a href=&quot;https://github.com/stimulusjs/stimulus/blob/master/ORIGIN.md&quot;&gt;The Origin of Stimulus&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installing Stimulus&lt;/h2&gt;
&lt;p&gt;Stimulus integrates with the &lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;nofollow&quot;&gt;webpack&lt;/a&gt; asset packager to automatically load controller files from a folder in your app.&lt;/p&gt;
&lt;p&gt;You can use Stimulus with other asset packaging systems, too. And if you prefer no build step at all, just drop a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag on the page and get right down to business.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/stimulusjs/stimulus/blob/master/INSTALLING.md&quot;&gt;Installation Guide&lt;/a&gt; for detailed instructions.&lt;/p&gt;
&lt;h2&gt;Contributing Back&lt;/h2&gt;
&lt;p&gt;Stimulus is &lt;a href=&quot;https://github.com/stimulusjs/stimulus/blob/master/LICENSE.md&quot;&gt;MIT-licensed&lt;/a&gt; open source software from &lt;a href=&quot;https://basecamp.com/&quot; rel=&quot;nofollow&quot;&gt;Basecamp&lt;/a&gt;, the creators of &lt;a href=&quot;http://rubyonrails.org&quot; rel=&quot;nofollow&quot;&gt;Ruby on Rails&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have a question about Stimulus? Find a bug? Think the documentation could use some improvement? Head over to our &lt;a href=&quot;https://github.com/stimulusjs/stimulus/issues&quot;&gt;issue tracker&lt;/a&gt; and we'll do our best to help. We love pull requests, too!&lt;/p&gt;
&lt;p&gt;We expect all Stimulus contributors to abide by the terms of our &lt;a href=&quot;https://github.com/stimulusjs/stimulus/blob/master/CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;© 2018 Basecamp, LLC.&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Tue, 02 Jan 2018 14:50:50 +0000</pubDate>
<dc:creator>tmlee</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/32970053?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>stimulusjs/stimulus</og:title>
<og:url>https://github.com/stimulusjs/stimulus</og:url>
<og:description>stimulus - A modest JavaScript framework for the HTML you already have</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/stimulusjs/stimulus/</dc:identifier>
</item>
<item>
<title>ASCIIFlow Infinity</title>
<link>http://asciiflow.com/</link>
<guid isPermaLink="true" >http://asciiflow.com/</guid>
<description>&lt;img id=&quot;options-logo&quot; src=&quot;http://asciiflow.com/images/logo-options.gif&quot; width=&quot;176&quot; height=&quot;48&quot;/&gt;&lt;br/&gt;&lt;button id=&quot;use-lines-button&quot;&gt;Lines Mode&lt;/button&gt;&lt;button id=&quot;use-ascii-button&quot;&gt;ASCII Mode&lt;/button&gt;&lt;p&gt;Moving around.&lt;br/&gt;Desktop: &lt;span&gt;Hold CTRL and drag the screen.&lt;/span&gt;&lt;br/&gt;Mobile: &lt;span&gt;Drag quickly to move. Press and hold to start drawing. Pinch to zoom in/out.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Draw boxes. &lt;span&gt;You can resize them later with the Resize tool.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Draw lines. &lt;span&gt;Connect it to another line to change the orientation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Draw arrows. &lt;span&gt;Connect it to another line to change the orientation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Draw freehand. &lt;span&gt;Press a character on the keyboard and draw with it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Erase. &lt;span&gt;Drag out an area to remove its contents from the canvas.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Resize boxes and lines. &lt;span&gt;Drag a line to change its size/shape.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Type text. &lt;span&gt;Click and type where you'd like to add text to the canvas.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Save. &lt;span&gt;Connect to Google Drive to save your work automatically.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Export. &lt;span&gt;Copy your work to use it outside of ASCIIFlow.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Import. &lt;span&gt;Paste ASCII/text to import it onto the canvas.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Clear. &lt;span&gt;Remove the entire contents from the canvas. Can be undone.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Undo.&lt;br/&gt;&lt;span&gt;Made a mistake? Undo!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Redo.&lt;br/&gt;&lt;span&gt;Too many Undo's? Redo!&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;File issues as bugs &lt;a href=&quot;https://github.com/lewish/asciiflow2/issues&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;
&lt;br/&gt;Developed by &lt;a href=&quot;https://plus.google.com/+LewisHemens/about&quot;&gt;Lewis&lt;/a&gt;, Designed by &lt;a href=&quot;mailto:info@samirvine.co.uk&quot;&gt;Sam&lt;/a&gt; and &lt;a href=&quot;mailto:ryangilbanks@gmail.com&quot;&gt;Ryan&lt;/a&gt;.&lt;br/&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-client=&quot;ca-pub-0451873530201272&quot; data-ad-slot=&quot;7038467645&quot;/&gt; &lt;br/&gt;</description>
<pubDate>Tue, 02 Jan 2018 12:14:04 +0000</pubDate>
<dc:creator>billpg</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://asciiflow.com/</dc:identifier>
</item>
<item>
<title>Basecamp doesn’t employ anyone in SF, but now we pay everyone as though all did</title>
<link>https://m.signalvnoise.com/basecamp-doesnt-employ-anyone-in-san-francisco-but-now-we-pay-everyone-as-though-all-did-3ee87013cfc2</link>
<guid isPermaLink="true" >https://m.signalvnoise.com/basecamp-doesnt-employ-anyone-in-san-francisco-but-now-we-pay-everyone-as-though-all-did-3ee87013cfc2</guid>
<description>&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*J0Znftz9w-YEdOSILoV6kw.jpeg&quot; data-width=&quot;800&quot; data-height=&quot;376&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*J0Znftz9w-YEdOSILoV6kw.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*J0Znftz9w-YEdOSILoV6kw.jpeg&quot;/&gt;&lt;/div&gt;
If you want to be amongst the best paid people in software, you have to move to San Francisco. Or do you?

&lt;p name=&quot;e1f6&quot; id=&quot;e1f6&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The roots of Basecamp are in Chicago. It’s where the business started, it’s where our only office is located, it’s where we do all our meet-ups. But more than just a geographical connection, there’s a spiritual one too: Chicago is the city that works.&lt;/p&gt;
&lt;p name=&quot;947a&quot; id=&quot;947a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So it made sense when &lt;a href=&quot;https://m.signalvnoise.com/how-we-pay-people-at-basecamp-f1d04f4f194b&quot; data-href=&quot;https://m.signalvnoise.com/how-we-pay-people-at-basecamp-f1d04f4f194b&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;we decided to get serious&lt;/a&gt; about setting pay in a fair, transparent, and systematic way to use the Chicago rates as a base. They were already higher than just about any other location we employed people from. And as &lt;a href=&quot;https://basecamp.com/books/remote&quot; data-href=&quot;https://basecamp.com/books/remote&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;a remote company&lt;/a&gt;, we employ people from all over the place.&lt;/p&gt;
&lt;p name=&quot;6232&quot; id=&quot;6232&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Yet when we were doing our pay studies this year, we started to question that decision. If we’re already paying people from Tampa or Chattanooga the much higher Chicago rates, why is the rate based on Chicago at all?&lt;/p&gt;
&lt;p name=&quot;563b&quot; id=&quot;563b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It started to increasingly seem like an arbitrary choice, and if we were going to make one such, why not go for the best and the top?&lt;/p&gt;
&lt;p name=&quot;cd50&quot; id=&quot;cd50&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That’s what we did. Starting 2018, Basecamp is paying everyone as though they live in San Francisco and work for a software company that pays in the top 10% of that market (compared to base pay + bonus, but not options).&lt;/p&gt;
&lt;p name=&quot;b743&quot; id=&quot;b743&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We don’t actually have anyone who lives in San Francisco, but now everyone is being paid as though they did. Whatever an employee pockets in the difference in cost of living between where they are and the sky-high prices in San Francisco is theirs to keep.&lt;/p&gt;
&lt;p name=&quot;bcff&quot; id=&quot;bcff&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This is not how companies normally do their thing. I’ve been listening to Adam Smith’s 1776 classic on the &lt;a href=&quot;https://www.audible.com/pd/Classics/The-Wealth-of-Nations-Audiobook/B004IM8EPE?source_code=GPAGBSH0508140001&amp;amp;cvosrc=ppc%20cse.google%20shopping.342766860&amp;amp;cvo_crid=90539104740&amp;amp;cvo_pid=23455575420&quot; data-href=&quot;https://www.audible.com/pd/Classics/The-Wealth-of-Nations-Audiobook/B004IM8EPE?source_code=GPAGBSH0508140001&amp;amp;cvosrc=ppc%20cse.google%20shopping.342766860&amp;amp;cvo_crid=90539104740&amp;amp;cvo_pid=23455575420&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Wealth of Nations&lt;/a&gt;, and just passed through the chapter on how the market is set by masters trying to get away with paying the least possible, and workers trying to press for the maximum possible. An antagonistic struggle, surely.&lt;/p&gt;
&lt;p name=&quot;71a4&quot; id=&quot;71a4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It doesn’t need to be like that. Especially in software, which is a profitable business when run with restraint and sold to businesses.&lt;/p&gt;
&lt;p name=&quot;e4e2&quot; id=&quot;e4e2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Jason and I surely could get away with paying people in Chattanooga the rates of that market. Or people in Tampa that. Or those in Portland that. It’s how most companies do it.&lt;/p&gt;
&lt;p name=&quot;f342&quot; id=&quot;f342&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But in what other part of the business do we look at what we can merely get away with? Are we trying to make the bare minimum of a product we can get away selling to customers? Are we looking to do the bare minimum of a job marketing our business? No.&lt;/p&gt;
&lt;p name=&quot;23de&quot; id=&quot;23de&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Do better than what you can get away with. Do more than the bare minimum. Don’t wait for the pressure to build. Don’t wait for the requests to mount. The best time to take a step forward is right now.&lt;/p&gt;
&lt;p name=&quot;716e&quot; id=&quot;716e&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;(And before you ask, sorry, we’re actually not hiring. That’s part of the restraint bit. We have a &lt;a href=&quot;https://basecamp.com/about/team&quot; data-href=&quot;https://basecamp.com/about/team&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;team of fifty five&lt;/a&gt; of the most kind, wonderful, and capable people I’ve ever had the pleasure of working with. That’s all we need at the moment to do what we want to do.)&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 10:27:49 +0000</pubDate>
<dc:creator>onmyway133</dc:creator>
<og:title>Basecamp doesn’t employ anyone in San Francisco, but now we pay everyone as though all did</og:title>
<og:url>https://m.signalvnoise.com/basecamp-doesnt-employ-anyone-in-san-francisco-but-now-we-pay-everyone-as-though-all-did-3ee87013cfc2</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*J0Znftz9w-YEdOSILoV6kw.jpeg</og:image>
<og:description>The roots of Basecamp are in Chicago. It’s where the business started, it’s where our only office is located, it’s where we do all our meet…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://m.signalvnoise.com/basecamp-doesnt-employ-anyone-in-san-francisco-but-now-we-pay-everyone-as-though-all-did-3ee87013cfc2?gi=44c43f7e70c7</dc:identifier>
</item>
<item>
<title>Welcome to Linux Journal 2.0</title>
<link>http://linuxjournal.com/content/happy-new-year-linux-journal-alive</link>
<guid isPermaLink="true" >http://linuxjournal.com/content/happy-new-year-linux-journal-alive</guid>
<description>

Talk about a Happy New Year. The reason: it turns out we're not dead. In fact, we're more alive than ever, thanks to a rescue by readers—specifically, by the hackers who run &lt;a href=&quot;https://www.privateinternetaccess.com/&quot;&gt;Private Internet Access&lt;/a&gt; (PIA) VPN, a &lt;a href=&quot;https://londontrustmedia.com/&quot;&gt;London Trust Media&lt;/a&gt; company. PIA are avid supporters of &lt;a href=&quot;https://freenode.net/&quot;&gt;freenode&lt;/a&gt; and the larger FOSS community. They’re also all about Linux and the rest of the modern portfolio of allied concerns: privacy, crypto, freedom, personal agency, rewriting the rules of business and government around all of those, and having fun with constructive hacking of all kinds. We couldn’t have asked for a better rescue ship to come along for us. In addition, they aren't merely rescuing this ship we were ready to scuttle; they're making it seaworthy again and are committed to making it bigger and better than we were ever in a position to think about during our entirely self-funded past. This is exactly what we had hoped for in recent years, but hardly expected. Really and truly, I waited to put up our &lt;a href=&quot;http://www.linuxjournal.com/content/linux-journal-ceases-publication&quot;&gt;farewell post&lt;/a&gt; until all hope was lost. But hey, it turns out you don't have to believe in miracles to experience one, because that's exactly what happened here. So here's what I know for sure, so far. First, the PIA people are hard-core Linux, free software and open-source hackers. They are just as committed to FOSS values as &lt;a href=&quot;http://www.linuxjournal.com/blogs/phil-hughes&quot;&gt;Phil Hughes&lt;/a&gt; was when he published the first issue of &lt;cite&gt;Linux Journal&lt;/cite&gt; in April 1994, the same month Linus released version 1.0 of Linux. (Friends and colleagues of Phil's, especially those who worked for him at &lt;cite&gt;Linux Journal&lt;/cite&gt; for many years, know how completely principled he was and still is.) They also want to do right by developers, users, and the whole free and open networked world. That's one reason they stepped forward to save us. Second, they’re eager to support us in building &lt;cite&gt;Linux Journal 2.0&lt;/cite&gt; around the substantial core of devoted readers we had through the many years of &lt;cite&gt;Linux Journal&lt;/cite&gt; 1.x. And, this means we need to hear from you. How and where would you like us to go, now that we're back afloat and our purpose is to thrive and not just to survive? For that, at the very least, we'll be hanging out in the #linuxjournal channel at &lt;a href=&quot;http://freenode.net/&quot;&gt;freenode.net&lt;/a&gt;. We'll also be making some long overdue improvements to the website. While that’s going on, we will open conversational channels there too. Third, expect to see familiar names and faces continuing to work here. I'm staying on, as will Jill Franklin, Doc Searls and others. We also will be recruiting talent for covering Linux and topics in adjacent areas that are as hot (or ready to be) as Linux was in 1994. Fourth, we are committed to giving our subscribers everything we can to reward their support. For starters, if you haven't yet claimed your archive of all &lt;cite&gt;Linux Journal&lt;/cite&gt; back issues, please ping me (carliefairchild at linuxjournal dot com). While we collectively brainstorm what &lt;cite&gt;Linux Journal&lt;/cite&gt; 2.0 will become, our subscribers will be at the forefront of those discussions. You've stood by us, and that support means everything to us. Stay tuned. Fifth (but not finally), we are committed to leading the way toward new and better business models for publishing than the usual suspects we've seen so far. Doc Searls, who in addition to his work at &lt;cite&gt;Linux Journal&lt;/cite&gt; has been running ProjectVRM out of Harvard's Berkman Klein Center since ‘06, is eager to use &lt;cite&gt;Linux Journal&lt;/cite&gt; 2.0 as a laboratory for expanding one corner of that work: creating better ways of doing advertising that supports publishers, rather than the kind that chases tracked eyeballs—and for moving beyond the advertising model as well. Help with that is also welcome. So again, thanks for your support for so many years, and thanks in advance for the fresh help we are sure to get as we set sail again on a better ship than ever. &lt;img src=&quot;http://www.linuxjournal.com/files/linuxjournal.com/ufiles/imagecache/large-550px-centered/u800391/ship.jpg&quot; alt=&quot;Linux Journal is back!&quot; title=&quot;&quot; class=&quot;imagecache-large-550px-centered&quot; /&gt;&lt;cite&gt;*The photo above was shot by Doc on our final Geek Cruise in 2005. (See &lt;a href=&quot;http://www.linuxjournal.com/article/8607&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://www.linuxjournal.com/article/8642&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://www.linuxjournal.com/article/8664&quot;&gt;here&lt;/a&gt; for reports on that.) Doing cruises again is just one among many possibilities we can now start thinking about. Again, we’d love your help.&lt;/cite&gt;</description>
<pubDate>Tue, 02 Jan 2018 07:24:54 +0000</pubDate>
<dc:creator>UtahDave</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.linuxjournal.com/content/happy-new-year-linux-journal-alive</dc:identifier>
</item>
<item>
<title>SQL Keys in Depth</title>
<link>https://begriffs.com/posts/2018-01-01-sql-keys-in-depth.html</link>
<guid isPermaLink="true" >https://begriffs.com/posts/2018-01-01-sql-keys-in-depth.html</guid>
<description>&lt;p&gt;The internet is full of dogmatic commandments for choosing and using keys in relational databases. At times it verges on a holy war: should you use natural or artificial keys? Auto-incrementing integers, UUIDs?&lt;/p&gt;
&lt;p&gt;After wading through sixty-four articles, skimming sections in five books, and asking questions on IRC and StackOverflow I think I’ve put the pieces together and have a recommendation to harmonize the various camps. Many arguments about keys boil down to false dichotomies and failures to acknowledge other points of view.&lt;/p&gt;
&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;
&lt;p&gt;Let’s break the problem down, and then put it all together at the end. First, what’s a key?&lt;/p&gt;
&lt;h3 id=&quot;what-are-keys-really&quot;&gt;What are keys, really?&lt;/h3&gt;
&lt;p&gt;For the moment forget about &lt;em&gt;primary&lt;/em&gt; keys, we’re looking for the general idea. A key is a column or columns that together have no duplicate values across rows. Also the columns must be irreducibly unique, meaning no subset of the columns has this uniqueness.&lt;/p&gt;
&lt;p&gt;For example, consider a table for counting cards in a card game:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; cards_seen (
  suit text,
  face text
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we’re tracking a single deck (no repeated cards), then the combination of suit and face is unique. We don’t want to list the same suit and face twice in the table because that would be redundant. If a card is in the table we’ve seen it, otherwise we haven’t.&lt;/p&gt;
&lt;p&gt;We can and should ask the database to enforce this constraint by adding:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; cards_seen (
  suit text,
  face text,

  &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt; (suit, face)
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Neither &lt;code&gt;suit&lt;/code&gt; nor &lt;code&gt;face&lt;/code&gt; is unique on its own. We can see multiple cards with the same suit, or with the same face. Because &lt;code&gt;(suit, face)&lt;/code&gt; is unique, but the individual columns are not, we say that the combination is irreducible, and &lt;code&gt;(suit, face)&lt;/code&gt; is a key.&lt;/p&gt;
&lt;p&gt;Expanding the situation a bit, if we were tracking multiple packs of cards, we could include a new field to record the number of times a card was seen:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; cards_seen (
  suit text,
  face text,
  seen &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although the triple &lt;code&gt;(suit, face, seen)&lt;/code&gt; should be unique, it’s not a key because the subset &lt;code&gt;(suit, face)&lt;/code&gt; should be unique too. That’s because two rows having the same suit and face but different values for &lt;code&gt;seen&lt;/code&gt; would be contradictory information. So &lt;code&gt;(suit, face)&lt;/code&gt; is a key and there are no other keys for this table.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot; readability=&quot;10&quot;&gt;
&lt;h4&gt;Uniqueness constraints&lt;/h4&gt;
&lt;p&gt;In PostgreSQL the preferred way to add a unique constraint is to declare it directly as we did. The use of indexes to enforce unique constraints could be considered an implementation detail that should not be accessed directly. There’s no need to manually create indexes on columns already declared unique; doing so would just duplicate the automatically-created index.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A table can have more than one key, it’s no problem. In fact we should declare &lt;em&gt;all&lt;/em&gt; keys so the database can enforce them.&lt;/p&gt;
&lt;p&gt;Here are two examples of tables that have multiple keys.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- Three keys&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; tax_brackets (
  min_income  &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;),
  max_income  &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;),
  tax_percent &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;),

  &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt;(min_income),
  &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt;(max_income),
  &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt;(tax_percent)
);

&lt;span class=&quot;co&quot;&gt;-- Two keys&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; flight_roster (
  departure timestamptz,
  gate text,
  pilot text

  &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt;(departure, gate),
  &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt;(departure, pilot)
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For brevity the examples so far are missing other constraints that in reality they should enforce. For instance cards should not be seen a negative number of times. Also we should forbid NULL values for most columns considered so far (except the &lt;code&gt;max_income&lt;/code&gt; column for tax brackets where NULL could could represent infinity).&lt;/p&gt;
&lt;h3 id=&quot;the-curious-case-of-primary-keys&quot;&gt;The curious case of primary keys&lt;/h3&gt;
&lt;p&gt;What we simply called keys in the previous section are traditionally called candidate keys. “Candidate” is terminology which implies that the keys are all competing for the esteemed position of “primary key,” with the remainder relegated to “alternate keys.”&lt;/p&gt;
&lt;p&gt;It took a while for SQL implementations to clear up misunderstandings about keys and the relational model. The earliest database products fixated on what was then a low-level conception of primary key.&lt;/p&gt;
&lt;p&gt;Primary keys were required by these database systems to identify the physical location of a row on sequential access media. Joe Celko explains:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;The term “key” meant the sort-key of a file that was required to do any reasonable processing with the original sequential file systems. A deck of punch cards is read in one and only one order; you cannot “back space” a card reader. The first magnetic tape drives mimicked that design and did not allow bi-directional access. In fact, the original Sybase SQL Server required that cursors had to “re-wind” a table to the start and move forward to read a prior row.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Modern SQL is supposed to abstract from the physical representation. Tables model relations, and should not expose an implicit order in their rows. However even today SQL Server creates a clustered index by default for primary keys, physically ordering rows in the old tradition.&lt;/p&gt;
&lt;p&gt;In most databases primary keys have survived as a vestige, and nowadays merely provide some conveniences rather than reflecting or determining physical layout. For instance declaring a primary key includes a NOT NULL constraint automatically, and defines the default foreign key target in a PostgreSQL table. Primary keys also give a hint that their columns are preferred for joins.&lt;/p&gt;
&lt;p&gt;A primary key does not prevent declaring other keys. In fact a table with keys will function fine when none is designated as primary. Lightning will not come out of the sky and strike you.&lt;/p&gt;
&lt;h3 id=&quot;finding-natural-keys&quot;&gt;Finding natural keys&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://begriffs.com/images/key-natural.jpg&quot; class=&quot;right&quot; alt=&quot;UPC codes are a natural key&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The keys we’ve seen so far are “natural,” so called because they are properties of the thing modeled, properties that have intrinsic interest even if nobody was looking to create a key.&lt;/p&gt;
&lt;p&gt;The first thing to keep in mind when examining a table for possible natural keys is not to overthink it. StackExchange user sqlvogel advises:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Some people seem to struggle with the choice of “natural” key attributes because they hypothesize situations where a particular key might not be unique in some given population. This misses the point. The point of a key is to impose a business rule that attributes must and will be unique for the population of data within a particular table at any given point in time. The table always represents data in a particular and hopefully well-understood context (the “business domain” AKA “domain of discourse”). It is the intention/requirement to apply a uniqueness constraint within that domain that matters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The rule of thumb is to add a key constraint when a column is unique for the values at hand and will remain so in reasonable scenarios. You can always remove the constraint if necessary. (If this worries you, we’ll talk about key stability later.)&lt;/p&gt;
&lt;p&gt;For instance, a database of hobbyist club members could include uniqueness on the two columns first_name, last_name of members. Duplicates are likely unintentional at this scale, and if necessary the constraint can be dropped. Until an actual conflict happens the key is a reasonable precaution.&lt;/p&gt;
&lt;p&gt;As a database grows to cover more ambitious material, finding natural keys can be more difficult. The data we store is a simplification of external reality, and doesn’t capture some of the things that otherwise distinguish objects in the world, such as their changing position over time. In the absence of some kind of item code, what distinguishes two cans of soda or boxes of cereal other than their position in space or tiny deviations in weight or packaging?&lt;/p&gt;
&lt;p&gt;This is why standards bodies create and add distinguishing marks to products. Cars have Vehicle Identification Numbers (VIN) stamped onto them, books have ISBNs printed inside, commodity food packaging has UPC. You might argue that these numbers don’t seem natural. Why am I calling them natural keys?&lt;/p&gt;
&lt;p&gt;The naturalness or artificiality of unique properties in a database is relative to the outside world. A key which was artificial at birth in some standards body or government agency becomes natural to us because it’s generally agreed upon in the world at large, and/or imprinted on objects.&lt;/p&gt;
&lt;p&gt;There are many industry, public and international standards for a broad variety of things including currencies, languages, financial instruments, chemical compounds and medical diagnoses.&lt;/p&gt;
&lt;p&gt;Here are some values that often work as natural keys:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ISO 3166 country codes&lt;/li&gt;
&lt;li&gt;ISO 639 language codes&lt;/li&gt;
&lt;li&gt;ISO 4217 currency codes&lt;/li&gt;
&lt;li&gt;ISIN stock symbols&lt;/li&gt;
&lt;li&gt;UPC/EAN, VIN, GTIN, ISBN&lt;/li&gt;
&lt;li&gt;login names&lt;/li&gt;
&lt;li&gt;email addresses&lt;/li&gt;
&lt;li&gt;room numbers&lt;/li&gt;
&lt;li&gt;mac address on a network&lt;/li&gt;
&lt;li&gt;(lat,lon) for points on the earth&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As advised, declare keys when you can and when reasonable, even multiple keys per table. But remember there are some caveats to keep in mind with the ideas above.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Not everyone has an email address. May be fine for the intended use of the database. Also people do change their email addresses from time to time. (More about key stability later.)&lt;/li&gt;
&lt;li&gt;ISIN stock symbols do alter over time, for instance the symbols GOOG and GOOGL do not accurately represent the reorganization of the company from Google to Alphabet. They can sometimes be confusing, e.g. TWTR vs TWTRQ. Some investors incorrectly bought the latter during Twitter’s IPO.&lt;/li&gt;
&lt;li&gt;Social security numbers are specific to American citizens, have privacy implications, and are reused after death. Also people can get new ones after identity theft. Finally the same number can identify both a person and a business tax id.&lt;/li&gt;
&lt;li&gt;Postal mail zip codes are a bad choice for towns. Multiple towns share a zip, and there are often multiple zips in a town.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;artificial-keys&quot;&gt;Artificial keys&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://begriffs.com/images/key-artificial.png&quot; class=&quot;right&quot; alt=&quot;artificial keys are made up&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Given that a key is a column with unique values in each row, one way to create one is to cheat and throw made-up unique values into each row. Artificial keys are just that: an invented code used for referring to facts or objects.&lt;/p&gt;
&lt;p&gt;Crucially this code derives from the database itself and is not known by anyone except users of the database. That’s what distinguishes artificial keys from standards-based natural keys.&lt;/p&gt;
&lt;p&gt;Whereas natural keys’ advantage is preventing table row duplication or contradiction, artificial keys are useful because they make it easy for people or other systems to refer to a row, and also improve lookup and join speed by avoiding string (or multi-column) key comparisons.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot; readability=&quot;10&quot;&gt;
&lt;h4&gt;Surrogates&lt;/h4&gt;
&lt;p&gt;People also use artificial keys as an anchor so that no matter how business rules and columns change, the same row can always be identified the same way. An artificial key used for this purpose is called a “surrogate key” and requires special care. We’ll consider surrogates later.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Non-surrogate artificial keys are convenient for referring to a row from &lt;em&gt;outside&lt;/em&gt; a database. Whether exposed in a URL, affixed to an invoice, spoken over the phone, redeemed at a checkout counter or printed on a license plate, an artificial key succinctly identifies a fact or object. (A license plate is a natural key to you and me, but designed as an artificial key by the Dept of Motor Vehicles.)&lt;/p&gt;
&lt;p&gt;Artificial keys should be chosen with communication media in mind, to minimize typos and mistakes. Consider whether the key must be pronounced, read in print, sent via SMS, read in handwriting, entered into a pinpad, or embedded in a URL. Additionally some artificial keys like credit card numbers contain a &lt;a href=&quot;https://begriffs.com/posts/2017-10-21-sql-domain-integrity.html#credit-card-validation&quot;&gt;checksum&lt;/a&gt; so that if certain errors happen they can at least be detected.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;US license plates have &lt;a href=&quot;https://en.wikipedia.org/wiki/United_States_license_plate_designs_and_serial_formats#Skipping_characters&quot;&gt;rules&lt;/a&gt; about ambiguous characters such as &lt;code&gt;O&lt;/code&gt; vs &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hospitals and pharmacies are especially careful, considering doctors’ handwriting. See &lt;a href=&quot;https://www.ismp.org/newsletters/acutecare/showarticle.aspx?id=81&quot;&gt;misidentification of alphanumeric symbols&lt;/a&gt; for lots of examples.&lt;/li&gt;
&lt;li&gt;Texting a confirmation code? Remember to stay within the &lt;a href=&quot;https://en.wikipedia.org/wiki/GSM_03.38&quot;&gt;GSM 03.38&lt;/a&gt; character set.&lt;/li&gt;
&lt;li&gt;Unlike Base64 encoding for arbitrary byte data, &lt;a href=&quot;https://philzimmermann.com/docs/human-oriented-base-32-encoding.txt&quot;&gt;Base32&lt;/a&gt; uses a restricted set of symbols which can be conveniently used by humans and processed by old computer systems which recognize only restricted character sets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/html/0901.4016&quot;&gt;Proquints&lt;/a&gt; are readable, spellable, pronounceable ids. They are PRO-nouncable QUINT-uplets of alternating unambiguous consonants and vowels.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Be advised that whenever you expose an artificial key to the world people have weird reasons to request custom exceptional values. Look no further than vanity license plates or the system for making pronounceable ids that became the infamous &lt;a href=&quot;http://thedailywtf.com/articles/The-Automated-Curse-Generator&quot;&gt;automated curse generator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sticking with numeric keys can work, although even in that case people have numerical taboos like omitting the &lt;a href=&quot;https://en.wikipedia.org/wiki/Thirteenth_floor&quot;&gt;thirteenth floor&lt;/a&gt;. But numbers work well in many places like URLs, pinpads, and for handwritten legibility if the recipient knows the key is comprised of all digits. Although proquints carry more information density per spoken syllable, numbers are pretty good.&lt;/p&gt;
&lt;p&gt;One thing to avoid in publicly exposed numbers is sequential order. It allows people to probe for resources (&lt;code&gt;/videos/1.mpeg&lt;/code&gt;, &lt;code&gt;/videos/2.mpeg&lt;/code&gt; etc) and also leaks cardinality information. Add a Feistel cipher on top of a sequence. This hides the ordering while maintaining uniqueness.&lt;/p&gt;
&lt;p&gt;The PostgreSQL &lt;a href=&quot;https://wiki.postgresql.org/wiki/Pseudo_encrypt&quot;&gt;pseudo encrypt wiki&lt;/a&gt; gives an example cipher function:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;FUNCTION&lt;/span&gt; pseudo_encrypt(&lt;span class=&quot;fu&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;) returns &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;AS&lt;/span&gt; $$
&lt;span class=&quot;kw&quot;&gt;DECLARE&lt;/span&gt;
l1 &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;;
l2 &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;;
r1 &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;;
r2 &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;;
i int:=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;BEGIN&lt;/span&gt;
 l1:= (&lt;span class=&quot;fu&quot;&gt;VALUE&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;) &amp;amp; &lt;span class=&quot;dv&quot;&gt;65535&lt;/span&gt;;
 r1:= &lt;span class=&quot;fu&quot;&gt;VALUE&lt;/span&gt; &amp;amp; &lt;span class=&quot;dv&quot;&gt;65535&lt;/span&gt;;
 &lt;span class=&quot;kw&quot;&gt;WHILE&lt;/span&gt; i &amp;lt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;LOOP&lt;/span&gt;
   l2 := r1;
   r2 := l1 # ((((&lt;span class=&quot;dv&quot;&gt;1366&lt;/span&gt; * r1 + &lt;span class=&quot;dv&quot;&gt;150889&lt;/span&gt;) % &lt;span class=&quot;dv&quot;&gt;714025&lt;/span&gt;) / &lt;span class=&quot;fl&quot;&gt;714025.0&lt;/span&gt;) * &lt;span class=&quot;dv&quot;&gt;32767&lt;/span&gt;):&lt;span class=&quot;ch&quot;&gt;:int&lt;/span&gt;;
   l1 := l2;
   r1 := r2;
   i := i + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
 &lt;span class=&quot;kw&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;LOOP&lt;/span&gt;;
 &lt;span class=&quot;kw&quot;&gt;RETURN&lt;/span&gt; ((r1 &amp;lt;&amp;lt; &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;) + l1);
&lt;span class=&quot;kw&quot;&gt;END&lt;/span&gt;;
$$ LANGUAGE plpgsql strict immutable;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This particular function is its own inverse (i.e. &lt;code&gt;pseudo_encrypt(pseudo_encrypt(x)) = x&lt;/code&gt;). Using the function verbatim is sort of security through obscurity and if someone guesses you used Feistel from the PostgreSQL docs then it’s easy to obtain the inverse to return to the original sequence. However you can change it up by supplying your own function in place of &lt;code&gt;(((1366 * r1 + 150889) % 714025) / 714025.0)&lt;/code&gt;. Your function must produce a value between 0 and 1. You could simply tweak the numbers in the previous expression.&lt;/p&gt;
&lt;p&gt;Here’s how to use pseudo_encrypt:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SEQUENCE&lt;/span&gt; my_table_seq;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; my_table (
  short_id &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; pseudo_encrypt(
      nextval(&lt;span class=&quot;st&quot;&gt;'my_table_seq'&lt;/span&gt;):&lt;span class=&quot;ch&quot;&gt;:int&lt;/span&gt;
    ),
  &lt;span class=&quot;co&quot;&gt;-- other columns …&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt; (short_id)
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This solution stores the randomized values in the &lt;code&gt;short_id&lt;/code&gt; column. If the database needs to support high data ingestion rates you may instead choose to store the incrementing sequence itself in the table and convert it for display on demand with &lt;code&gt;pseudo_encrypt&lt;/code&gt;. Indexing randomized values can lead to write amplification as we’ll explore later.&lt;/p&gt;
&lt;p&gt;The previous example used a regular sized integer for the &lt;code&gt;short_id&lt;/code&gt; column. To use &lt;code&gt;bigint&lt;/code&gt; we’d need a different Feistel function like &lt;a href=&quot;https://en.wikipedia.org/wiki/XTEA&quot;&gt;XTEA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another way to obscure an integer sequence as by transforming it into short strings. Try the &lt;a href=&quot;https://github.com/iCyberon/pg_hashids&quot;&gt;pg_hashids&lt;/a&gt; extension:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; EXTENSION pg_hashids;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SEQUENCE&lt;/span&gt; my_table_seq;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; my_table (
  short_id text &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; id_encode(
      nextval(&lt;span class=&quot;st&quot;&gt;'my_table_seq'&lt;/span&gt;),
      &lt;span class=&quot;st&quot;&gt;'long string as table-specific salt'&lt;/span&gt;
    ),
  &lt;span class=&quot;co&quot;&gt;-- other columns …&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt; (short_id)
);

&lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; my_table &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt;
  (&lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt;), (&lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt;), (&lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt;);

&lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; my_table;
&lt;span class=&quot;co&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;┌──────────┐&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;│ short_id │&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;├──────────┤&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;│ R4       │&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;│ ya       │&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;│ Ll       │&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;└──────────┘&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once again it may be more performant to store the integers themselves in the table and convert on demand, but benchmark it and see if you really need to add the complexity.&lt;/p&gt;
&lt;p&gt;With a clear notion of artificial and natural keys we can see that the natural-vs-artificial debate is a false dichotomy. Artificial and natural keys are not mutually exclusive! The same table can have both. In fact a table with artificial key ought to enforce a natural key as well, except in the few cases where no natural key exists, such as a table of coupon codes:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- A rare table: no natural key candidates to&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;-- declare along with the artificial &quot;code&quot; key&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; coupons (
  code text &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  amount &lt;span class=&quot;dt&quot;&gt;numeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  redeemed &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;,

  &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt; (code)
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having an artificial key and not declaring natural keys when they exist leaves the latter unprotected:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; cars (
  car_id bigserial &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  vin &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,

  &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt; (car_id)
  &lt;span class=&quot;co&quot;&gt;-- should have added&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;-- UNIQUE (vin)&lt;/span&gt;
);

&lt;span class=&quot;co&quot;&gt;-- This unfortunately succeeds&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; cars (vin, &lt;span class=&quot;dt&quot;&gt;year&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt;
  (&lt;span class=&quot;st&quot;&gt;'1FTJW36F2TEA03179'&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1996&lt;/span&gt;),
  (&lt;span class=&quot;st&quot;&gt;'1FTJW36F2TEA03179'&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1997&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only argument against declaring extra keys is that each one will entail another unique index which will increase the cost of table writes. Depends on how much you value data correctness, so probably worth declaring the keys.&lt;/p&gt;
&lt;p&gt;It’s worth declaring multiple artificial keys too if they exist. For instance, a business has Applicants and Employees. Every employee was once an applicant and refers to Applicants by their own id, which is should be a key of employee as well. Another example would be setting employee id and login name as two keys on Employees.&lt;/p&gt;
&lt;h3 id=&quot;surrogate-keys&quot;&gt;Surrogate Keys&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://begriffs.com/images/key-surrogate.jpg&quot; class=&quot;right&quot; alt=&quot;surrogate keys are on the inside&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As mentioned above, an important kind of artificial key is called a surrogate key. It’s not meant to be succinct or shareable like other artificial keys, it’s meant as an internal placeholder that identifies a row forevermore. It’s used in SQL and joins but not explicitly referenced by an application.&lt;/p&gt;
&lt;p&gt;If you know about PostgreSQL &lt;a href=&quot;https://www.postgresql.org/docs/10/static/ddl-system-columns.html&quot;&gt;system columns&lt;/a&gt; you could think of surrogates as almost a database implementation detail like a ctid except never changing. A surrogate value should be chosen once for each row and then never changed.&lt;/p&gt;
&lt;p&gt;Surrogates make great targets for foreign keys, and the foreign keys should be marked as &lt;code&gt;ON UPDATE RESTRICT&lt;/code&gt; to help enforce the immutability of the surrogate. On the other hand, foreign keys to publicly shared keys should be marked &lt;code&gt;ON UPDATE CASCADE&lt;/code&gt;, which allows maximum flexibility to change those keys’ values. (The cascading update runs with the same &lt;a href=&quot;https://begriffs.com/posts/2017-08-01-practical-guide-sql-isolation.html&quot;&gt;isolation level&lt;/a&gt; as its surrounding transaction, so don’t worry about concurrency problems, the database can handle that if you choose a strict isolation level.)&lt;/p&gt;
&lt;p&gt;Don’t “naturalize” surrogate keys. As soon as you display the value of a surrogate key to your end users, or worse yet allow users to work with the value (perhaps via search), you have effectively given the key business meaning. The exposed key in our database could then be considered a natural key in someone else’s.&lt;/p&gt;
&lt;p&gt;Forcing external systems to use other artificial keys explicitly designed for sharing allows us to change the exposed keys as needed to accommodate changing requirements, while joining and maintaining referential integrity with surrogates internally.&lt;/p&gt;
&lt;h4 id=&quot;auto-incrementing-bigint&quot;&gt;Auto-incrementing bigint&lt;/h4&gt;
&lt;p&gt;The most common choice for surrogate keys is the auto-incrementing “bigserial” column, aka the &lt;code&gt;IDENTITY&lt;/code&gt; column. (In fact, PostgreSQL 10 now supports the IDENTITY construct like Oracle does, see &lt;a href=&quot;https://www.postgresql.org/docs/10/static/sql-createtable.html&quot;&gt;CREATE TABLE&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;However I believe an auto-incrementing int is usually the wrong choice for surrogate keys. My opinion is uncommon, so let me explain.&lt;/p&gt;
&lt;p&gt;Disadvantages of serial keys:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Starting all sequences at 1 and counting up means that rows from different tables will share many of the same key values. This isn’t ideal. Disjoint sets of keys per table would be preferred so that queries can’t accidentally mix up the constants in a join, say, and still return results. (As a workaround you could arrange each sequence as multiples of distinct prime numbers to achieve disjointness, but that’s painstaking.)&lt;/li&gt;
&lt;li&gt;Calling &lt;code&gt;nextval()&lt;/code&gt; on sequences introduces shared schema state that scales less easily across nodes in new distributed SQL systems being developed.&lt;/li&gt;
&lt;li&gt;Merging data from another database that also uses bigserial keys will conflict with existing data. The sequential values simply aren’t unique across systems.&lt;/li&gt;
&lt;li&gt;Philosophically the incrementing number harkens back to old systems with an implicit row order. If you want to order rows, do it explicitly with a timestamp column or something meaningful in the data itself. Doing otherwise violates the first normal form.&lt;/li&gt;
&lt;li&gt;(Weak reason, but) those little ids are tempting to expose.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;uuid&quot;&gt;UUID&lt;/h4&gt;
&lt;p&gt;Let’s consider another option: using bigger integers (128 bits) generated in a randomized pattern. Algorithms for generating such universally unique identifiers (UUIDs) are extremely unlikely to ever generate the same value twice, even when run simultaneously on different CPUs.&lt;/p&gt;
&lt;p&gt;UUIDs seem to be the natural choice for surrogate keys, right? If you want to label rows uniquely then nothing beats a unique label!&lt;/p&gt;
&lt;p&gt;So why doesn’t everyone use them on PostgreSQL? There are some bogus reasons and one legitimate reason. Also there’s a workaround for the legitimate reason, and I’ll present benchmarks to illustrate.&lt;/p&gt;
&lt;p&gt;First the bogus reasons. Some people think UUIDs are strings because of the traditional dashed hexadecimal representation: 5bd68e64-ff52-4f54-ace4-3cd9161c8b7f. In fact some databases don’t have a compact (128-bit) uuid type, but PostgreSQL &lt;a href=&quot;https://www.postgresql.org/docs/current/static/datatype-uuid.html&quot;&gt;does&lt;/a&gt;. It’s the size of two bigints, and that’s not an appreciable overhead when compared with the bulk of other information in the database.&lt;/p&gt;
&lt;p&gt;Another invalid criticism of UUIDs is that they are unwieldy: who wants to pronounce them, type them, or see them? That’s valid for an exposed artificial key, but (by design) nobody will ever see a surrogate UUID. Maybe a developer running SQL commands in psql to debug the system might deal with the UUIDs, but that’s about it. The developer could also refer to rows with friendlier keys if those are defined.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The real problem with UUIDs is that highly randomized values cause write amplification due to full-page writes in the write-ahead log (WAL).&lt;/strong&gt; This means worse performance when inserting rows. It really depends on the algorithm used for generating UUIDs, though.&lt;/p&gt;
&lt;p&gt;Let’s measure the write amplification. The fault lies with old filesystems, really. When PostgreSQL writes data to disk it does so by modifying a “page” on disk. If a computer loses power at a critical time then most filesystems may still report the write as successful before the data is safe on disk. If PostgreSQL naively considered the action complete then the database would be corrupted when the system goes back online.&lt;/p&gt;
&lt;p&gt;PostgreSQL cannot trust that most OS/filesystem/disk configurations will enforce atomicity, so the database saves the entire state of a newly modified disk page to the write-ahead log for use in restoration after a potential crash. Indexing highly random values like UUIDs tends to touch a whole lot of different disk pages, which means writing the full page size (usually 4k or 8k) to the WAL for each insertion. That’s called a full-page write (FPW).&lt;/p&gt;
&lt;p&gt;Some UUID generation algorithms (like Twitter’s “snowflake” or &lt;code&gt;uuid_generate_v1()&lt;/code&gt; in the &lt;a href=&quot;https://www.postgresql.org/docs/10/static/uuid-ossp.html&quot;&gt;uuid-ossp&lt;/a&gt; extension for PostgreSQL) produce monotonically increasing values per machine. This consolidates writes into fewer disk pages, reducing FPW.&lt;/p&gt;
&lt;p&gt;We can measure the PFW penalty for different UUID generation algorithms and also inspect WAL statistics. To do this I set up the following benchmark.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;EC2 instance running ami-aa2ea6d0
&lt;ul&gt;&lt;li&gt;Ubuntu Server 16.04 LTS (HVM)&lt;/li&gt;
&lt;li&gt;EBS General Purpose (SSD)&lt;/li&gt;
&lt;li&gt;c3.xlarge&lt;/li&gt;
&lt;li&gt;vCPU: 4&lt;/li&gt;
&lt;li&gt;RAM GiB: 7.5&lt;/li&gt;
&lt;li&gt;Disk GB: 2 x 40 (SSD)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PostgreSQL built from source
&lt;ul&gt;&lt;li&gt;https://ftp.postgresql.org/pub/source/v10.1/postgresql-10.1.tar.gz&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./configure --with-uuid=ossp CFLAGS=&quot;-O3&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Default database configuration except:
&lt;ul&gt;&lt;li&gt;max_wal_size=‘10GB’;&lt;/li&gt;
&lt;li&gt;checkpoint_timeout=‘2h’;&lt;/li&gt;
&lt;li&gt;synchronous_commit=‘off’;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Schema:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; EXTENSION &lt;span class=&quot;ot&quot;&gt;&quot;uuid-ossp&quot;&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; EXTENSION pgcrypto;

&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; u_v1 ( u uuid &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; );
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; u_crypto ( u uuid &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; );&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before inserting UUIDs into each table, I found the current position of the write-ahead log.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; pg_walfile_name(pg_current_wal_lsn());

&lt;span class=&quot;co&quot;&gt;/* For instance,&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;     pg_walfile_name&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;--------------------------&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; 000000010000000000000001&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I used that position to get statistics about WAL usage after benchmarking. This gets the stats from events occurring subsequent to a start position:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ex&quot;&gt;pg_waldump&lt;/span&gt; --stats 000000010000000000000001&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I ran tests for three scenarios:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Inserting UUIDs generated by &lt;code&gt;gen_random_uuid()&lt;/code&gt; (provided by &lt;a href=&quot;https://www.postgresql.org/docs/10/static/pgcrypto.html&quot;&gt;pgcrypto&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Inserting from &lt;code&gt;uuid_generate_v1()&lt;/code&gt; (provided by [uuid-ossp] (https://www.postgresql.org/docs/10/static/uuid-ossp.html)&lt;/li&gt;
&lt;li&gt;Inserting from &lt;code&gt;gen_random_uuid()&lt;/code&gt; again, but with &lt;code&gt;full_page_writes='off'&lt;/code&gt; in the db configuration. This shows how fast it would be without FPW amplification.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;For each of these scenarios I started from an empty table and inserted 2^20 UUIDs. I repeated the insertions over sixteen rounds, timing each to see how the performance changed with more data in the table.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- for instance, I ran this 16 times with \timing in psql&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; u_crypto (
  &lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; gen_random_uuid()
  &lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; generate_series(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;*&lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;)
);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the speed results:&lt;/p&gt;
&lt;div class=&quot;figure&quot; readability=&quot;7&quot;&gt;&lt;img src=&quot;https://begriffs.com/images/uuid-insert-graph.png&quot; alt=&quot;Graph of UUID insertion speed&quot;/&gt;&lt;p class=&quot;caption&quot;&gt;Graph of UUID insertion speed&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here are the WAL statistics for each method:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;gen_random_uuid()

Type         N      (%)   Record size      (%)   FPI size      (%)
----         -      ---   -----------      ---   --------      ---
XLOG       260 (  0.15)         13139 (  0.09)     484420 ( 30.94)
Heap2      765 (  0.45)        265926 (  1.77)     376832 ( 24.07)
Heap     79423 ( 46.55)       6657121 ( 44.20)     299776 ( 19.14)
Btree    89354 ( 52.37)       7959710 ( 52.85)     404832 ( 25.85)

uuid_generate_v1()

Type         N      (%)   Record size      (%)   FPI size      (%)
----         -      ---   -----------      ---   --------      ---
XLOG         0 (  0.00)             0 (  0.00)          0 (  0.00)
Heap2        0 (  0.00)             0 (  0.00)          0 (  0.00)
Heap    104326 ( 49.88)       7407146 ( 44.56)          0 (  0.00)
Btree   104816 ( 50.12)       9215394 ( 55.44)          0 (  0.00)

gen_random_uuid() with fpw=off

Type         N      (%)   Record size      (%)   FPI size      (%)
----         -      ---   -----------      ---   --------      ---
XLOG         4 (  0.00)           291 (  0.00)         64 (  0.84)
Heap2        0 (  0.00)             0 (  0.00)          0 (  0.00)
Heap    107778 ( 49.88)       7654268 ( 46.08)          0 (  0.00)
Btree   108260 ( 50.11)       8956097 ( 53.91)       7556 ( 99.16)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This confirms that &lt;code&gt;gen_random_uuid&lt;/code&gt; generates a lot of WAL activity as full-page images (FPI) and the other methods do not. The last one of course because I prevented the database from doing so. Suppressing FPW is not a technique you want to use for real though, unless you’re very certain of your filesystem and disk configuration. &lt;a href=&quot;https://blog.2ndquadrant.com/pg-phriday-postgres-zfs/&quot;&gt;This article&lt;/a&gt; suggests that ZFS may be safe for disabling FPW, but use caution.&lt;/p&gt;
&lt;p&gt;The clear winner in my benchmark is &lt;code&gt;uuid_generate_v1()&lt;/code&gt;. It’s fast and doesn’t seem to slow down as rows accumulate. Also the uuid-ossp extension is pre-installed on hosted databases like RDS and Citus Cloud, so the function will be available with no extra work.&lt;/p&gt;
&lt;p&gt;The docs warn about uuid_generate_v1 that&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;This involves the MAC address of the computer and a time stamp. Note that UUIDs of this kind reveal the identity of the computer that created the identifier and the time at which it did so, which might make it unsuitable for certain security-sensitive applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However I don’t think this is a problem for us because the surrogate key won’t be exposed. The library does offer a &lt;code&gt;uuid_generate_v1mc()&lt;/code&gt; that obscures the mac address if you’re still concerned.&lt;/p&gt;
&lt;h3 id=&quot;summary-and-suggestion&quot;&gt;Summary and Suggestion&lt;/h3&gt;
&lt;p&gt;Now that we know the various types of keys and their uses, here’s my suggestion for choosing them in your own database.&lt;/p&gt;
&lt;p&gt;For each table:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Identify and declare all natural keys.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;&amp;lt;table_name&amp;gt;_id&lt;/code&gt; surrogate key of type &lt;code&gt;uuid&lt;/code&gt; with default value &lt;code&gt;uuid_generate_v1()&lt;/code&gt;. You can even mark it as a primary key if you like. Including the table name in this id makes joins simpler. It’s &lt;code&gt;JOIN foo USING (bar_id)&lt;/code&gt; vs &lt;code&gt;JOIN foo ON (foo.bar_id = bar.id)&lt;/code&gt;. Do not expose this key to clients or anywhere outside the database.&lt;/li&gt;
&lt;li&gt;For “join tables” declare all foreign key columns as a single composite primary key.&lt;/li&gt;
&lt;li&gt;Add an artificial key if desired for use in a URL or anywhere else you want to share a reference to a row. Use a Feistel cipher or pg_hashids to conceal auto-incrementing integers.&lt;/li&gt;
&lt;li&gt;Mark foreign keys to surrogate UUIDs as &lt;code&gt;ON UPDATE RESTRICT&lt;/code&gt; and to external artificial keys as &lt;code&gt;ON UPDATE CASCADE&lt;/code&gt;. Use your own judgement for natural keys.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This approach provides internal key stability while acknowledging and protecting natural keys. It also decouples externally-facing artificial keys from either. With the proper understanding we can move beyond a “primary key” fixation and appreciate the various roles that keys play.&lt;/p&gt;
</description>
<pubDate>Tue, 02 Jan 2018 05:20:41 +0000</pubDate>
<dc:creator>chmaynard</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://begriffs.com/posts/2018-01-01-sql-keys-in-depth.html</dc:identifier>
</item>
<item>
<title>Norwegian Student Takes Secret Street Photos In The 1890s</title>
<link>https://www.boredpanda.com/spy-camera-secret-street-photography-carl-stormer-norway/</link>
<guid isPermaLink="true" >https://www.boredpanda.com/spy-camera-secret-street-photography-carl-stormer-norway/</guid>
<description>&lt;p&gt;Carl Størmer (1872-1957) enjoyed a hobby that was very, very unusual at the time. He walked around Oslo, Norway in the 1890s with his spy camera and secretly took everyday pictures of people. The subjects in Størmer's pictures appear in their natural state. It extremely differs from the grave and strict posing trends that dominated in photography during those years.&lt;/p&gt;
&lt;p&gt;
&lt;hr/&gt;&lt;span class=&quot;read-more-button&quot;&gt;Show Full Text&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;hidden-mobile-paragraphs&quot; readability=&quot;25.797454931071&quot;&gt;
&lt;p&gt;Carl got his C.P. Stirn Concealed Vest Spy Camera in 1893 when he was studying mathematics at the Royal Frederick University (now, University of Oslo). &quot;It was a round flat canister hidden under the vest with the lens sticking out through a buttonhole,&quot; he told St. Hallvard Journal in 1942. &quot;Under my clothes I had a string down through a hole in my trouser pocket, and when I pulled the string the camera took a photo.&quot;&lt;/p&gt;
&lt;p&gt;Norway's first &lt;a href=&quot;https://www.boredpanda.com/funny-celebrity-reactions-to-paparazzi/&quot; target=&quot;_blank&quot;&gt;paparazzi&lt;/a&gt; usually photographed people at the exact time they were greeting him on the street. &quot;I strolled down Carl Johan, found me a victim, greeted, got a gentle smile and pulled. Six images at a time and then I went home to switch [the] plate.&quot; In total, Størmer took a total of about 500 secret images.&lt;/p&gt;
&lt;p&gt;His candid photos aside, Størmer was also fascinated with science. He was a mathematician and physicist, known both for his work in number theory and studying the &lt;a href=&quot;https://www.boredpanda.com/we-went-on-a-winter-camping-trip-to-norway-to-photograph-the-northern-lights-what-we-saw-we-wont-never-forget/&quot; target=&quot;_blank&quot;&gt;Northern Lights (Aurora Borealis)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;img class=&quot;alignnone size-full wp-image-1056264&quot; src=&quot;https://static.boredpanda.com/blog/wp-content/uploads/2017/12/spy-camera-secret-street-photography-carl-stormer-norway-159.jpg&quot; alt=&quot;spy-camera-secret-street-photography-carl-stormer-norway-159&quot; width=&quot;700&quot; height=&quot;327&quot;/&gt;&lt;/h2&gt;

</description>
<pubDate>Tue, 02 Jan 2018 04:54:21 +0000</pubDate>
<dc:creator>kposehn</dc:creator>
<og:type>article</og:type>
<og:url>https://www.boredpanda.com/spy-camera-secret-street-photography-carl-stormer-norway/</og:url>
<og:title>19-Year-Old Student Hides Spy Camera In His Clothing To Take Secret Street Photos In The 1890s</og:title>
<og:image>https://static.boredpanda.com/blog/wp-content/uploads/2017/12/spy-camera-secret-street-photography-carl-stormer-norway-fb10.png</og:image>
<og:description>Carl Størmer (1872-1957) enjoyed a hobby that was very, very unusual at the time. He walked around Oslo, Norway in the 1890s with his spy camera and secretly took everyday pictures of people. The subjects in Størmer's pictures appear in their natural state. It extremely differs from the grave and strict posing trends that dominated in photography during those years.</og:description>
<dc:language>en_US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.boredpanda.com/spy-camera-secret-street-photography-carl-stormer-norway/</dc:identifier>
</item>
</channel>
</rss>