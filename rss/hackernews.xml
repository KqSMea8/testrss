<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Who the Hell Uses Onion Juice?</title>
<link>http://markbittman.com/who-the-hell-uses-onion-juice/</link>
<guid isPermaLink="true" >http://markbittman.com/who-the-hell-uses-onion-juice/</guid>
<description>&lt;div class=&quot;p_embed p_image_embed&quot;&gt;&lt;img alt=&quot;Howards_onion_juice&quot; src=&quot;http://asdoasdiadnsiuhiwuh.files.wordpress.com/2010/05/howards_onion_juice-scaled500.gif&quot; width=&quot;170&quot; height=&quot;504&quot;/&gt;&lt;/div&gt;
&lt;p&gt;By John Thorne (&lt;a href=&quot;http://www.outlawcook.com/&quot;&gt;http://www.outlawcook.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The other day I was leafing through a vintage edition of The Fannie Farmer Boston Cooking School Cookbook looking for American chop suey (a story for another time), when my eye fell on a recipe with an ingredient list that included a “few drops onion juice” — and suddenly I was a child again, poking around in my grandmother’s kitchen.&lt;/p&gt;
&lt;p&gt;It was an odd little room. The family lived on the bottom floor of a large duplex, built by my grandfather in the 1920s in Wollaston, on Boston’s South Shore. Long before I came along, my grandmother purchased a piano and turned the dining room into the piano room. Thus, the kitchen became the dining room and the adjoining pantry became the kitchen. It was just wide enough to hold the kitchen sink at one end and the gas stove at the other. (The refrigerator sat in the dining room.) Between them ran a narrow counter and, above and below it, storage shelves for cookware and food. This was the kitchen in which Nana prepared meals for a family of five children (my mother the only girl).&lt;br/&gt;&lt;span id=&quot;more-18837826&quot;/&gt;&lt;/p&gt;
&lt;p&gt;How she did it I’ll never know, partly because by the time I was old enough to attend to such things, rheumatoid arthritis had laid her low. However, in those days lots of kitchen shelves were not a necessity: a grocery order was a phone call away, and the milkman and the Cushman’s Bakery man came to the back door. (In fact, they came right through it, shouting a welcome as they did.) I do know that Nana was a good cook if a plain Yankee one, proud of her baking and willing to go the extra distance to give plain fare a touch of the special.&lt;/p&gt;
&lt;p&gt;Even so, she required little in the way of seasonings. I still recall those yellow rectangular tins with the Stickney &amp;amp; Poor brand name spelled out in bright red script: clove, cinnamon, nutmeg, mustard, and black pepper. Apart from a box of Bell’s poultry seasoning and a bottle of vanilla extract, the only other thing I remember is Howard’s Onion Juice, in its oddly elongated bottle.&lt;/p&gt;
&lt;p&gt;As a child, I had no interest in cooking, and not even a little boy could have fitted in the kitchen when Nana was at work. However, when I learned to read, I found the act so thrilling that I practiced this new skill on every label that came my way. When I parsed out the words “onion juice” I was deeply shocked. These were two words that simply did not belong together. Some juices, like grape juice, were rare treats, other juices — apple, orange, tomato — were a regular part of my life (all, by the way, poured out of cans), but … onion juice?  Did Grampa and Nana secretly drink the stuff? I never dared ask, but I never forgot, either.&lt;/p&gt;
&lt;p&gt;I put aside the search for American chop suey aside, lost in contemplation. Onion juice. I couldn’t remember it called for in any other cookbook. Do people still cook with it? Can you even buy it? It took but a moment at the keyboard to answer those questions: Howard’s Onion Juice still exists. Amazon.com sells it by the case. And people were attesting to how glad they were to find it, how they needed it for their spaghetti sauce and sloppy joes, their salad dressing.&lt;/p&gt;
&lt;p&gt;Well, there was no way I was going to order a case. Still, curiosity piqued, I decided to check out likely suspects here in Northampton (MA). First, I drove over to  Big Y, a local supermarket chain that prides itself on its New England roots, and poked around. But where should I look? On the spice shelves? Among the hot sauces? The gravy mixes? I finally asked one of the clerks. The query went up the management chain and came back down: “Never heard of it.”&lt;/p&gt;
&lt;p&gt;I tried our local grocery, Serios; their next-door competitor, State Street Fruit; then on to Atkin’s Farm Stand (unlikely, you think, but I did leave there with a bottle of Spanish sherry vinegar, a jar of an organic Indian simmer sauce, and a &lt;a href=&quot;http://www.morethangourmet.com/our-products/ready-to-use-sauces/red-wine-sauce&quot;&gt;little carton of red wine foundation sauce&lt;/a&gt; — impulse buying, my middle names). But, as to onion sauce, no, no, and no. I gave up and emailed &lt;a href=&quot;http://www.howardfoods.com/sj.html&quot;&gt;Howard’s Foods&lt;/a&gt; for help. They kindly pointed out that both their onion and garlic juices were sold at our other local supermarket, Stop &amp;amp; Shop. I had, in fact, looked there, but had suffered input overload in front of the dazzling (if mostly meretricious) display of seasonings. I simply failed to see it.&lt;/p&gt;
&lt;p&gt;Howard’s Onion Juice. The ingredient list is short and impeccable: onion juice, vinegar, salt. Despite a yelp of protest from my inner child, I take a nip straight from the bottle. (I had just finished eating a Greek salad and thought, “How could it hurt?”). It didn’t. Although the bottle claims that one teaspoon is equal to half an onion, Howard’s Onion Juice has none of that sharp-toothed bite of raw onion. In fact, it tastes sort of like onion breath smells — except now it’s in your own mouth and doesn’t go away.&lt;/p&gt;
&lt;p&gt;A politer way of saying this is that tastes like juice extracted from a boiled onion, plus a zip of vinegar. Unfortunately, my whole goal when cooking onions is to fry out the juice, and with it that hint of skunk cabbage. Not that I mean to diss Howard’s product. I can see adding a splash to anything liquid (soups, stews, broths) that could use a hit of the vegetable’s simultaneously tasty and malodorous vibes. But, really, is that what onion juice is all about? I know old-time cooks held garlic at arms’ length. But they didn’t treat onions like that — and certainly not cooked onions. There had to be something more to the story — and to Nana’s cooking — than this.&lt;/p&gt;
&lt;p&gt;Back I went to Fannie Farmer. We have twelve editions in our collection — not all of them, but most. Onion juice is there from the first, not poured from a bottle but made as needed right on the spot. In the original volume, you were instructed to get it by working the cut surface with a fine grater, but soon some culinary quick-wit discovered a much simpler method: “Cut a slice from the root end of the onion; scrape the juice with the edge of a teaspoon.”&lt;/p&gt;
&lt;p&gt;Try it. What you get isn’t so much juice as a thickish pulp, and it’s charged with flavor, right up there (almost) with finely minced raw garlic. As soon as I dipped a finger in it, I had to mix it up with some butter and eat it on toast. I surely breathed fire for an hour afterwards, a small price to pay for something so deliciously potent. This stuff is definitely not for kids.&lt;/p&gt;
&lt;p&gt;That naked power also explains why it was often added by the drop — and added it surely was. In the 1921 edition of Fannie Farmer, it is used to add savor to a &lt;a href=&quot;http://books.google.com/books?id=Cv-saVsW9G4C&amp;amp;dq=The%20Boston%20Cooking-School%20Cookbook&amp;amp;lr&amp;amp;num=30&amp;amp;as_brr=0&amp;amp;pg=PA188#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;lobster and oyster ragout&lt;/a&gt;; a savory of &lt;a href=&quot;http://books.google.com/books?id=Cv-saVsW9G4C&amp;amp;dq=The%20Boston%20Cooking-School%20Cookbook&amp;amp;lr&amp;amp;num=30&amp;amp;as_brr=0&amp;amp;pg=PA103#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;chopped chicken liver and hard-boiled egg&lt;/a&gt;; &lt;a href=&quot;http://books.google.com/books?id=Cv-saVsW9G4C&amp;amp;dq=The%20Boston%20Cooking-School%20Cookbook&amp;amp;lr&amp;amp;num=30&amp;amp;as_brr=0&amp;amp;pg=PA200%23v=onepage&amp;amp;q&amp;amp;f=false#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;Hamburg steak&lt;/a&gt;; &lt;a href=&quot;http://books.google.com/books?id=Cv-saVsW9G4C&amp;amp;dq=The%20Boston%20Cooking-School%20Cookbook&amp;amp;lr&amp;amp;num=30&amp;amp;as_brr=0&amp;amp;pg=PA558#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;Eggs à la Caracas&lt;/a&gt;, scrambled eggs with the odd but tasty sounding addition of tomatoes and smoked chipped beef; a host of stuffings … the list goes on and on. (It is also used uncooked — as see this &lt;a href=&quot;http://books.google.com/books?id=Cv-saVsW9G4C&amp;amp;dq=The%20Boston%20Cooking-School%20Cookbook&amp;amp;lr&amp;amp;num=30&amp;amp;as_brr=0&amp;amp;pg=PA329#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;simple corn salad&lt;/a&gt;.) In other words, it was deployed where we today would most likely add a touch of garlic.&lt;/p&gt;
&lt;p&gt;Howard’s Onion Juice appeared on the market in the early fifties, around the time I was learning to read. Consequently, that bottle, when I first saw it, was a newly offered convenience. But it is the original scraped raw onion pulp that is the revelation. As with garlic, halfway measures can be worse than none at all. I’m already working up ways to put real onion juice to work, from meatballs to clam fritters to onion (as in garlic) bread. Somewhere, Nana is … what? Smiling? Aghast? Whatever it is, it’s nice to be in the kitchen with her.&lt;/p&gt;
&lt;p&gt;(Copyright © John Thorne 2010)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.pinterest.com/pin/create/button/&quot; data-pin-do=&quot;buttonBookmark&quot; data-pin-color=&quot;red&quot; data-pin-height=&quot;128&quot;&gt;&lt;img src=&quot;http://assets.pinterest.com/images/pidgets/pinit_fg_en_rect_red_28.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 17 Jan 2018 18:53:23 +0000</pubDate>
<dc:creator>peterwwillis</dc:creator>
<og:type>article</og:type>
<og:title>Who the Hell Uses Onion Juice? - Mark Bittman</og:title>
<og:description>By John Thorne (http://www.outlawcook.com/) The other day I was leafing through a vintage edition of The Fannie Farmer Boston Cooking School Cookbook looking for American chop suey (a story for another time), when my eye fell on a recipe with an i...</og:description>
<og:url>http://markbittman.com/who-the-hell-uses-onion-juice/</og:url>
<og:image>http://asdoasdiadnsiuhiwuh.files.wordpress.com/2010/05/howards_onion_juice-scaled500.gif</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://markbittman.com/who-the-hell-uses-onion-juice/</dc:identifier>
</item>
<item>
<title>Elixir v1.6 released: code formatter, dynamic supervisors, and more</title>
<link>https://elixir-lang.org/blog/2018/01/17/elixir-v1-6-0-released/</link>
<guid isPermaLink="true" >https://elixir-lang.org/blog/2018/01/17/elixir-v1-6-0-released/</guid>
<description>&lt;p&gt;Elixir v1.6 includes new features, enhancements, and bug fixes. The main feature in this release is a code formatter. Important improvements can also be found in the standard library and in the Mix build tool.&lt;/p&gt;
&lt;h2 id=&quot;code-formatter&quot;&gt;Code formatter&lt;/h2&gt;
&lt;p&gt;The big feature in Elixir v1.6 is the addition of &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#format_string!/2&quot;&gt;a code formatter&lt;/a&gt; and an accompanying &lt;code class=&quot;highlighter-rouge&quot;&gt;mix format&lt;/code&gt; task that adds automatic formatting to your projects.&lt;/p&gt;
&lt;p&gt;The goal of the formatter is to automate the styling of codebases into a unique and consistent layout used across teams and the whole community. Code is now easier to write, as you no longer need to concern yourself with formatting rules. Code is also easier to read, as you no longer need to convert the styles of other developers in your mind.&lt;/p&gt;
&lt;p&gt;The formatter also helps new developers to learn the language by giving immediate feedback on code structure, and eases code reviews by allowing teams to focus on business rules and code quality rather than code style.&lt;/p&gt;
&lt;p&gt;To automatically format your codebase, you can run the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Format.html&quot;&gt;new &lt;code class=&quot;highlighter-rouge&quot;&gt;mix format&lt;/code&gt; task&lt;/a&gt;. A &lt;code class=&quot;highlighter-rouge&quot;&gt;.formatter.exs&lt;/code&gt; file may be added to your project root for rudimentary formatter configuration. The mix task also supports flags for CI integration. For instance, you can make your build or a Pull Request fail if the code is not formatted accordingly by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;--check-formatted&lt;/code&gt; flag. We also recommend developers to check their favorite editor and see if it already provides key bindings for &lt;code class=&quot;highlighter-rouge&quot;&gt;mix format&lt;/code&gt;, allowing a file or a code snippet to be formatted without hassle.&lt;/p&gt;
&lt;p&gt;The Elixir codebase itself &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues/6643&quot;&gt;has already been fully formatted&lt;/a&gt; and all further contributions are expected to contain formatted code. We recommend existing codebases to be formatted in steps. While the formatter will correctly handle long lines and complex expressions, refactoring the code by breaking those into variables or smaller functions as you format them will lead to overall cleaner and more readable codebases.&lt;/p&gt;
&lt;h2 id=&quot;dynamic-supervisor&quot;&gt;Dynamic Supervisor&lt;/h2&gt;
&lt;p&gt;Supervisors in Elixir are responsible for starting, shutting down, and restarting child processes when things go wrong. Most of the interaction with supervisors happens through &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;Supervisor&lt;/code&gt; module&lt;/a&gt; and it provides three main strategies: &lt;code class=&quot;highlighter-rouge&quot;&gt;:one_for_one&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:rest_for_one&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:one_for_all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, sometimes the children of a supervisor are not known upfront and are rather started dynamically. For example, if you are building a web server, you have each request being handled by a separate supervised process. Those cases were handled in the Supervisor module under a special strategy called &lt;code class=&quot;highlighter-rouge&quot;&gt;:simple_one_for_one&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, this special strategy changed the semantics of the supervisor in regards to initialization and shutdown. Plus some APIs expected different inputs or would be completely unavailable depending on the supervision strategy.&lt;/p&gt;
&lt;p&gt;Elixir v1.6 addresses this issue by introducing &lt;a href=&quot;https://hexdocs.pm/elixir/DynamicSupervisor.html&quot;&gt;a new &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamicSupervisor&lt;/code&gt; module&lt;/a&gt;, which encapsulates the old &lt;code class=&quot;highlighter-rouge&quot;&gt;:simple_one_for_one&lt;/code&gt; strategy and APIs in a proper module while allowing the documentation and API of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Supervisor&lt;/code&gt; module to focus on its main use cases. Having a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;DynamicSupervisor&lt;/code&gt; module also makes it simpler to add new features to the dynamic supervisor, such as the new &lt;code class=&quot;highlighter-rouge&quot;&gt;:max_children&lt;/code&gt; option that limits the maximum number of children supervised dynamically.&lt;/p&gt;
&lt;h2 id=&quot;deprecated-and-since-attributes&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@deprecated&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@since&lt;/code&gt; attributes&lt;/h2&gt;
&lt;p&gt;This release also introduces two new attributes associated with function definitions: &lt;code class=&quot;highlighter-rouge&quot;&gt;@deprecated&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@since&lt;/code&gt;. The former marks if a function or macro is deprecated, the latter annotates the version the API was introduced:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;@doc&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Breaks a collection into chunks&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@since&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@deprecated&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Use chunk_every/2 instead&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;chunk_every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;mix xref&lt;/code&gt; task was also updated to warn if your project calls deprecated code. So if a definition is marked as &lt;code class=&quot;highlighter-rouge&quot;&gt;@deprecated&lt;/code&gt; and a module invokes it, a warning will be emitted during compilation. This effectively provides libraries and frameworks a mechanism to deprecate code without causing multiple warnings to be printed in runtime and without impacting performance.&lt;/p&gt;
&lt;p&gt;Note those attributes are not yet available to tools that generate documentation. Such functionality will be added in Elixir v1.7 once &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues/7198&quot;&gt;Elixir adopts EEP-48&lt;/a&gt;. We still recommend developers to start annotating their APIs so the information is already available when the tooling is updated.&lt;/p&gt;
&lt;h2 id=&quot;defguard-and-defguardp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defguard&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;defguardp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Elixir provides the concepts of guards: expressions used alongside pattern matching to select a matching clause. Let’s see an example straight from &lt;a href=&quot;https://elixir-lang.org&quot;&gt;Elixir’s home page&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve_drinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Code that serves drinks!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%User{age: age}&lt;/code&gt; is matching on a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; struct with an age field and &lt;code class=&quot;highlighter-rouge&quot;&gt;when age &amp;gt;= 21&lt;/code&gt; is the guard.&lt;/p&gt;
&lt;p&gt;Since only a handful of constructs are &lt;a href=&quot;https://hexdocs.pm/elixir/guards.html#content&quot;&gt;allowed in guards&lt;/a&gt;, if you were in a situation where you had to check the age to be more than or equal to 21 in multiple places, extracting the guard to a separate function would be &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues/2469&quot;&gt;less than obvious and error prone&lt;/a&gt;. To address those issues, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defguard/1&quot;&gt;this release introduces &lt;code class=&quot;highlighter-rouge&quot;&gt;defguard/1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;defguardp/1&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;defguard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_drinking_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;21&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve_drinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_drinking_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Code that serves drinks!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;iex-improvements&quot;&gt;IEx improvements&lt;/h2&gt;
&lt;p&gt;IEx also got its share of improvements. The new code formatter allows us to pretty print code snippets, types and specifications, improving the overall experience when exploring code through the terminal.&lt;/p&gt;
&lt;p&gt;The autocomplete mechanism also got smarter, being able to provide context autocompletion. For example, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;t Enum.&lt;/code&gt; and hitting TAB will autocomplete only the types in Enum (in contrast to all functions). Typing &lt;code class=&quot;highlighter-rouge&quot;&gt;b GenServer.&lt;/code&gt; and hitting TAB will autocomplete only the behaviour callbacks.&lt;/p&gt;
&lt;p&gt;Finally, the breakpoint functionality added &lt;a href=&quot;https://elixir-lang.org/blog/2017/07/25/elixir-v1-5-0-released/&quot;&gt;in Elixir v1.5&lt;/a&gt; has been improved to support pattern matching and guards. For example, to pattern match on a function call when the first argument is the atom &lt;code class=&quot;highlighter-rouge&quot;&gt;:foo&lt;/code&gt;, you may do:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;iex&amp;gt; break! SomeFunction.call(:foo, _, _)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#break!/4&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;mix-xref&quot;&gt;mix xref&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Xref.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mix xref&lt;/code&gt;&lt;/a&gt; is a task added in Elixir v1.3 which provides general information about how modules and files in an application depend on each other. This release brings many improvements to &lt;code class=&quot;highlighter-rouge&quot;&gt;xref&lt;/code&gt;, extending the reach of the analysis and helping developers digest the vast amount of data it produces.&lt;/p&gt;
&lt;p&gt;One of such additions is the &lt;code class=&quot;highlighter-rouge&quot;&gt;--include-siblings&lt;/code&gt; option that can be given to all &lt;code class=&quot;highlighter-rouge&quot;&gt;xref&lt;/code&gt; commands inside umbrella projects. For example, to find all of the callers of a given module or function of an application in an umbrella:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ mix xref callers SomeModule --include-siblings
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;graph&lt;/code&gt; command in &lt;code class=&quot;highlighter-rouge&quot;&gt;mix xref&lt;/code&gt; now can also output general statistics about the graph. In &lt;a href=&quot;https://github.com/hexpm/hexpm&quot;&gt;the hexpm project&lt;/a&gt;, you would get:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ mix xref graph --format stats
Tracked files: 129 (nodes)
Compile dependencies: 256 (edges)
Structs dependencies: 46 (edges)
Runtime dependencies: 266 (edges)

Top 10 files with most outgoing dependencies:
  * test/support/factory.ex (18)
  * lib/hexpm/accounts/user.ex (13)
  * lib/hexpm/accounts/audit_log.ex (12)
  * lib/hexpm/web/controllers/dashboard_controller.ex (12)
  * lib/hexpm/repository/package.ex (12)
  * lib/hexpm/repository/releases.ex (11)
  * lib/hexpm/repository/release.ex (10)
  * lib/hexpm/web/controllers/package_controller.ex (10)
  * lib/mix/tasks/hexpm.stats.ex (9)
  * lib/hexpm/repository/registry_builder.ex (9)

Top 10 files with most incoming dependencies:
  * lib/hexpm/web/web.ex (84)
  * lib/hexpm/web/router.ex (29)
  * lib/hexpm/web/controllers/controller_helpers.ex (29)
  * lib/hexpm/web/controllers/auth_helpers.ex (28)
  * lib/hexpm/web/views/view_helpers.ex (27)
  * lib/hexpm/web/views/icons.ex (27)
  * lib/hexpm/web/endpoint.ex (23)
  * lib/hexpm/ecto/changeset.ex (22)
  * lib/hexpm/accounts/user.ex (19)
  * lib/hexpm/repo.ex (19)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mix xref graph&lt;/code&gt; also got the &lt;code class=&quot;highlighter-rouge&quot;&gt;--only-nodes&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--label&lt;/code&gt; options. The former asks Mix to only output file names (nodes) without the edges. The latter allows you to focus on certain relationships:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;# To get all files that depend on lib/foo.ex
mix xref graph --sink lib/foo.ex --only-nodes

# To get all files that depend on lib/foo.ex at compile time
mix xref graph --label compile --sink lib/foo.ex --only-nodes

# To get all files lib/foo.ex depends on
mix xref graph --source lib/foo.ex --only-nodes

# To limit statistics only to compile time dependencies
mix xref graph --format stats --label compile
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Those improvements will help developers better understand the relationship between files and reveal potentially complex parts of their systems.&lt;/p&gt;
&lt;p&gt;Other improvements in Mix include &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Task.Compiler.html&quot;&gt;better compiler diagnostics&lt;/a&gt; for editor integration, support for &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;the &lt;code class=&quot;highlighter-rouge&quot;&gt;--slowest N&lt;/code&gt; flag in &lt;code class=&quot;highlighter-rouge&quot;&gt;mix test&lt;/code&gt;&lt;/a&gt; that shows the slowest tests in your suite, and a new &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Eprof.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mix profile.eprof&lt;/code&gt; task&lt;/a&gt; that provides time based profiling, complementing the existing &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Cprof.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mix profile.cprof&lt;/code&gt; (count based)&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Fprof.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mix profile.fprof&lt;/code&gt; (flame based)&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;
&lt;p&gt;The full list of changes is available in our &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.6.0&quot;&gt;release notes&lt;/a&gt;. There are many other exciting changes, such as compiler enhancements to better track dependencies, leading to less files being recompiled whenever there are changes in project, and overall faster compilation.&lt;/p&gt;
&lt;p&gt;Work on Elixir v1.7 has already started. We still welcome developers to try out the &lt;a href=&quot;https://elixir-lang.org/blog/2017/10/31/stream-data-property-based-testing-and-data-generation-for-elixir/&quot;&gt;previously announced StreamData library&lt;/a&gt;, that aims to bring data generation and property-based testing to Elixir. The other &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues&quot;&gt;features scheduled for v1.7 can be found in the issues tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Don’t forget to check &lt;a href=&quot;https://elixir-lang.org/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;
</description>
<pubDate>Wed, 17 Jan 2018 18:47:29 +0000</pubDate>
<dc:creator>josevalim</dc:creator>
<og:title>Elixir v1.6 released</og:title>
<og:description>Elixir v1.6 includes a code formatter, defguard, dynamic supervision and new module attributes that improves code quality and the developer experience</og:description>
<og:url>https://elixir-lang.org/blog/2018/01/17/elixir-v1-6-0-released/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://elixir-lang.org/blog/2018/01/17/elixir-v1-6-0-released/</dc:identifier>
</item>
<item>
<title>Firefox’s new streaming and tiering compiler</title>
<link>https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/</link>
<guid isPermaLink="true" >https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/</guid>
<description>&lt;p&gt;People call WebAssembly a game changer because it makes it possible to run code on the web faster. Some of these &lt;a href=&quot;https://hacks.mozilla.org/2017/02/what-makes-webassembly-fast/&quot;&gt;speedups are already present&lt;/a&gt;, and some are yet to come.&lt;/p&gt;&lt;p&gt;One of these speedups is streaming compilation, where the browser compiles the code while the code is still being downloaded. Up until now, this was just a potential future speedup. But with the release of Firefox 58 next week, it becomes a reality.&lt;/p&gt;
&lt;p&gt;Firefox 58 also includes a new 2-tiered compiler. The new baseline compiler compiles code 10–15 times faster than the optimizing compiler.&lt;/p&gt;
&lt;p&gt;Combined, these two changes mean we compile code faster than it comes in from the network.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/ezgif-5-73711fc5d3.gif&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-31768&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/ezgif-5-73711fc5d3.gif&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;253&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On a desktop, we compile 30-60 megabytes of WebAssembly code per second. That’s &lt;a href=&quot;http://www.speedtest.net/global-index&quot;&gt;faster than the network&lt;/a&gt; delivers the packets.&lt;/p&gt;
&lt;p&gt;If you use Firefox Nightly or Beta, you can &lt;a href=&quot;https://lukewagner.github.io/test-tanks-compile-time/&quot;&gt;give it a try&lt;/a&gt; on your own device. Even on a pretty average mobile device, we can compile at 8 megabytes per second —which is faster than the average download speed for pretty much any mobile network.&lt;/p&gt;
&lt;p&gt;This means your code executes almost as soon as it finishes downloading.&lt;/p&gt;
&lt;h3 id=&quot;1091&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Why is this important?&lt;/h3&gt;
&lt;p&gt;Web performance advocates get prickly when sites ship a lot of JavaScript. That’s because downloading lots of JavaScript makes pages load slower.&lt;/p&gt;
&lt;p&gt;This is largely because of the parse and compile times. As &lt;a href=&quot;https://calendar.perfplanet.com/2017/tracking-cpu-with-long-tasks-api/&quot;&gt;Steve Souders points out&lt;/a&gt;, the old bottleneck for web performance used to be the network. But the new bottleneck for web performance is the CPU, and particularly the main thread.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/02.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31713&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/02-500x295.png&quot; alt=&quot;Old bottleneck, the network, on the left. New bottleneck, work on the CPU such as compiling, on the right&quot; width=&quot;500&quot; height=&quot;295&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/02-500x295.png 500w, https://hacks.mozilla.org/files/2018/01/02-250x147.png 250w, https://hacks.mozilla.org/files/2018/01/02-768x453.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So we want to move as much work off the main thread as possible. We also want to start it as early as possible so we’re making use of all of the CPU’s time. Even better, we can do less CPU work altogether.&lt;/p&gt;
&lt;p&gt;With JavaScript, you can do some of this. You can parse files off of the main thread, as they stream in. But you’re still parsing them, which is a lot of work, and you have to wait until they are parsed before you can start compiling. And for compiling, you’re back on the main thread. This is because JS is usually &lt;a href=&quot;https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/&quot;&gt;compiled lazily&lt;/a&gt;, at runtime.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/03.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31714&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/03-500x167.png&quot; alt=&quot;Timeline showing packets coming in on the main thread, then parsing happening simultaneously on another thread. Once parse is done, execution begins on main thread, interrupted occassionally by compiling&quot; width=&quot;500&quot; height=&quot;167&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/03-500x167.png 500w, https://hacks.mozilla.org/files/2018/01/03-250x84.png 250w, https://hacks.mozilla.org/files/2018/01/03-768x257.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With WebAssembly, there’s less work to start with. Decoding WebAssembly is much simpler and faster than parsing JavaScript. And this decoding and the compilation can be split across multiple threads.&lt;/p&gt;
&lt;p&gt;This means multiple threads will be doing the baseline compilation, which makes it faster. Once it’s done, the baseline compiled code can start executing on the main thread. It won’t have to pause for compilation, like the JS does.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/04.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31715&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/04-500x202.png&quot; alt=&quot;Timeline showing packets coming in on the main thread, and decoding and baseline compiling happening across multiple threads simultaneously, resulting in execution starting faster and without compiling breaks.&quot; width=&quot;500&quot; height=&quot;202&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/04-500x202.png 500w, https://hacks.mozilla.org/files/2018/01/04-250x101.png 250w, https://hacks.mozilla.org/files/2018/01/04-768x310.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While the baseline compiled code is running on the main thread, other threads work on making a more optimized version. When the more optimized version is done, it can be swapped in so the code runs even faster.&lt;/p&gt;
&lt;p&gt;This changes the cost of loading WebAssembly to be more like decoding an image than loading JavaScript. And think about it… web performance advocates do get prickly about JS payloads of 150 kB, but an image payload of the same size doesn’t raise eyebrows.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/05.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31716&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/05-500x218.png&quot; alt=&quot;Developer advocate on the left tsk tsk-ing about large JS file. Developer advocate on the right shrugging about large image.&quot; width=&quot;500&quot; height=&quot;218&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/05-500x218.png 500w, https://hacks.mozilla.org/files/2018/01/05-250x109.png 250w, https://hacks.mozilla.org/files/2018/01/05-768x335.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s because load time is so much faster with images, as Addy Osmani explains in &lt;a href=&quot;https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e&quot;&gt;The Cost of JavaScript&lt;/a&gt;, and decoding an image doesn’t block the main thread, as Alex Russell discusses in &lt;a href=&quot;https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/&quot;&gt;Can You Afford It?: Real-world Web Performance Budgets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This doesn’t mean that we expect WebAssembly files to be as large as image files. While early WebAssembly tools created large files because they included lots of runtime, there’s currently a lot of work to make these files smaller. For example, Emscripten has a &lt;a href=&quot;https://github.com/kripken/emscripten/issues/5836&quot;&gt;“shrinking initiative”&lt;/a&gt;. In Rust, you can already get pretty small file sizes using the wasm32-unknown-unknown target, and there are tools like &lt;a href=&quot;https://github.com/alexcrichton/wasm-gc&quot;&gt;wasm-gc&lt;/a&gt; and &lt;a href=&quot;https://github.com/fitzgen/wasm-snip&quot;&gt;wasm-snip&lt;/a&gt; which can optimize this even more.&lt;/p&gt;
&lt;p&gt;What it does mean is that these WebAssembly files will load much faster than the equivalent JavaScript.&lt;/p&gt;
&lt;p&gt;This is big. As &lt;a href=&quot;https://twitter.com/wycats/status/942908325775077376&quot;&gt;Yehuda Katz points out&lt;/a&gt;, this is a game changer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/06.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31717&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/06-500x444.png&quot; alt=&quot;Tweet from Yehuda Katz saying it's possible to parse and compile wasm as fast as it comes over the network.&quot; width=&quot;500&quot; height=&quot;444&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/06-500x444.png 500w, https://hacks.mozilla.org/files/2018/01/06-250x222.png 250w, https://hacks.mozilla.org/files/2018/01/06-768x682.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So let’s look at how the new compiler works.&lt;/p&gt;
&lt;h3 id=&quot;4ad4&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Streaming compilation: start compiling earlier&lt;/h3&gt;
&lt;p&gt;If you start compiling the code earlier, you’ll finish compiling it earlier. That’s what streaming compilation does… makes it possible to start compiling the .wasm file as soon as possible.&lt;/p&gt;
&lt;p&gt;When you download a file, it doesn’t come down in one piece. Instead, it comes down in a series of packets.&lt;/p&gt;
&lt;p&gt;Before, as each packet in the .wasm file was being downloaded, the browser network layer would put it into an ArrayBuffer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/07.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31718&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/07-500x255.png&quot; alt=&quot;Packets coming in to network layer and being added to an ArrayBuffer&quot; width=&quot;500&quot; height=&quot;255&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/07-500x255.png 500w, https://hacks.mozilla.org/files/2018/01/07-250x127.png 250w, https://hacks.mozilla.org/files/2018/01/07-768x392.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then, once that was done, it would move that ArrayBuffer over to the Web VM (aka the JS engine). That’s when the WebAssembly compiler would start compiling.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/08.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31719&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/08-500x218.png&quot; alt=&quot;Network layer pushing array buffer over to compiler&quot; width=&quot;500&quot; height=&quot;218&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/08-500x218.png 500w, https://hacks.mozilla.org/files/2018/01/08-250x109.png 250w, https://hacks.mozilla.org/files/2018/01/08-768x334.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But there’s no good reason to keep the compiler waiting. It’s technically possible to compile WebAssembly line by line. This means you should be able to start as soon as the first chunk comes in.&lt;/p&gt;
&lt;p&gt;So that’s what our new compiler does. It takes advantage of WebAssembly’s streaming API.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/09.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31720&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/09-500x132.png&quot; alt=&quot;WebAssembly.instantiateStreaming call, which takes a response object with the source file. This has to be served using MIME type application/wasm.&quot; width=&quot;500&quot; height=&quot;132&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/09-500x132.png 500w, https://hacks.mozilla.org/files/2018/01/09-250x66.png 250w, https://hacks.mozilla.org/files/2018/01/09-768x203.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you give &lt;code&gt;WebAssembly.instantiateStreaming&lt;/code&gt; a response object, the chunks will go right into the WebAssembly engine as soon as they arrive. Then the compiler can start working on the first chunk while the next one is still being downloaded.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/10.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31721&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/10-500x248.png&quot; alt=&quot;Packets going directly to compiler&quot; width=&quot;500&quot; height=&quot;248&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/10-500x248.png 500w, https://hacks.mozilla.org/files/2018/01/10-250x124.png 250w, https://hacks.mozilla.org/files/2018/01/10-768x380.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Besides being able to download and compile the code in parallel, there’s another advantage to this.&lt;/p&gt;
&lt;p&gt;The code section of the .wasm module comes before any data (which will go in the module’s memory object). So by streaming, the compiler can compile the code while the module’s data is still being downloaded. If your module needs a lot of data, the data can be megabytes, so this can be significant.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/11.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31722&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/11-500x260.png&quot; alt=&quot;File split between small code section at the top, and larger data section at the bottom&quot; width=&quot;500&quot; height=&quot;260&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/11-500x260.png 500w, https://hacks.mozilla.org/files/2018/01/11-250x130.png 250w, https://hacks.mozilla.org/files/2018/01/11-768x399.png 768w, https://hacks.mozilla.org/files/2018/01/11.png 1550w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With streaming, we start compiling earlier. But we can also make compiling faster.&lt;/p&gt;
&lt;h3 id=&quot;23fa&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Tier 1 baseline compiler: compile code faster&lt;/h3&gt;
&lt;p&gt;If you want code to run fast, you need to optimize it. But performing these optimizations while you’re compiling takes time, which makes compiling the code slower. So there’s a tradeoff.&lt;/p&gt;
&lt;p&gt;We can have the best of both of these worlds. If we use two compilers, we can have one that compiles quickly without too many optimizations, and another that compiles the code more slowly but creates more optimized code.&lt;/p&gt;
&lt;p&gt;This is called a tiered compiler. When code first comes in, it’s compiled by the Tier 1 (or baseline) compiler. Then, after the baseline compiled code starts running, a Tier 2 compiler goes through the code again and compiles a more optimized version in the background.&lt;/p&gt;
&lt;p&gt;Once it’s done, it hot-swaps the optimized code in for the previous baseline version. This makes the code execute faster.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/12.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31723&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/12-500x204.png&quot; alt=&quot;Timeline showing optimizing compiling happening in the background.&quot; width=&quot;500&quot; height=&quot;204&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/12-500x204.png 500w, https://hacks.mozilla.org/files/2018/01/12-250x102.png 250w, https://hacks.mozilla.org/files/2018/01/12-768x313.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaScript engines have been using tiered compilers for a long time. However, JS engines will only use the Tier 2 (or optimizing) compiler when a bit of code gets “warm”… when that part of the code gets called a lot.&lt;/p&gt;
&lt;p&gt;In contrast, the WebAssembly Tier 2 compiler will eagerly do a full recompilation, optimizing all of the code in the module. In the future, we may add more options for developers to control how eagerly or lazily optimization is done.&lt;/p&gt;
&lt;p&gt;This baseline compiler saves a lot of time at startup. It compiles code 10–15 times faster than the optimizing compiler. And the code it creates is, in our tests, only 2 times slower.&lt;/p&gt;
&lt;p&gt;This means your code will be running pretty fast even in those first few moments, when it’s still running the baseline compiled code.&lt;/p&gt;
&lt;h3 id=&quot;0453&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Parallelize: make it all even faster&lt;/h3&gt;
&lt;p&gt;In the &lt;a href=&quot;https://hacks.mozilla.org/2017/11/entering-the-quantum-era-how-firefox-got-fast-again-and-where-its-going-to-get-faster/&quot;&gt;article on Firefox Quantum&lt;/a&gt;, I explained coarse-grained and fine-grained parallelization. We use both for compiling WebAssembly.&lt;/p&gt;
&lt;p&gt;I mentioned above that the optimizing compiler will do its compilation in the background. This means that it leaves the main thread available to execute the code. The baseline compiled version of the code can run while the optimizing compiler does its recompilation.&lt;/p&gt;
&lt;p&gt;But on most computers that still leaves multiple cores unused. To make the best use of all of the cores, both of the compilers use fine-grained parallelization to split up the work.&lt;/p&gt;
&lt;p&gt;The unit of parallelization is the function. Each function can be compiled independently, on a different core. This is so fine-grained, in fact, that we actually need to batch these functions up into larger groups of functions. These batches get sent to different cores.&lt;/p&gt;
&lt;h3 id=&quot;5175&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;… then skip all that work entirely by caching it implicitly (future work)&lt;/h3&gt;
&lt;p&gt;Currently, decoding and compiling are redone every time you reload the page. But if you have the same .wasm file, it should compile to the same machine code.&lt;/p&gt;
&lt;p&gt;This means that most of the time, this work could be skipped. And in the future, this is what we’ll do. We’ll decode and compile on first page load, and then cache the resulting machine code in the HTTP cache. Then when you request that URL, it will pull out the precompiled machine code.&lt;/p&gt;
&lt;p&gt;This makes load time disappear for subsequent page loads.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/13.png&quot;&gt;&lt;img class=&quot;alignnone size-large wp-image-31724&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/01/13-500x217.png&quot; alt=&quot;Timeline showing all work disappearing with caching.&quot; width=&quot;500&quot; height=&quot;217&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/01/13-500x217.png 500w, https://hacks.mozilla.org/files/2018/01/13-250x109.png 250w, https://hacks.mozilla.org/files/2018/01/13-768x334.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The groundwork is already laid for this feature. We’re &lt;a href=&quot;https://blog.mozilla.org/javascript/2017/12/12/javascript-startup-bytecode-cache/&quot;&gt;caching JavaScript byte code like this&lt;/a&gt; in the Firefox 58 release. We just need to extend this support to caching the machine code for .wasm files.&lt;/p&gt;
&lt;section class=&quot;about&quot; readability=&quot;6.5970873786408&quot;&gt;
&lt;p&gt;Lin is an engineer on the Mozilla Developer Relations team. She tinkers with JavaScript, WebAssembly, Rust, and Servo, and also draws code cartoons.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/lclarkmozilla-com/&quot;&gt;More articles by Lin Clark…&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Wed, 17 Jan 2018 16:31:40 +0000</pubDate>
<dc:creator>markdog12</dc:creator>
<og:url>https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler</og:url>
<og:title>Making WebAssembly even faster: Firefox’s new streaming and tiering compiler – Mozilla Hacks - the Web developer blog</og:title>
<og:description>People call WebAssembly a game changer because it makes it possible to run code on the web faster. Some speedups are already present, and some are yet to come. With ...</og:description>
<og:image>https://hacks.mozilla.org/files/2018/01/Screenshot-2018-1-17-Making-WebAssembly-even-faster-Firefox’s-new-streaming-and-tiering-compiler-–-Mozilla-Hacks-the-Web-....png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/</dc:identifier>
</item>
<item>
<title>Datomic Cloud</title>
<link>http://blog.datomic.com/2018/01/datomic-cloud.html</link>
<guid isPermaLink="true" >http://blog.datomic.com/2018/01/datomic-cloud.html</guid>
<description>&lt;div&gt;&lt;span&gt;&lt;strong&gt;Datomic on AWS: Easy, Integrated, and Powerful&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt; &lt;span&gt;We are excited to announce the release of &lt;/span&gt;&lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic Cloud&lt;/a&gt;&lt;span&gt;, making Datomic more accessible than ever before:&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Easy&lt;/strong&gt;&lt;span&gt;: Datomic Cloud is an Amazon Marketplace AMI. &lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrated&lt;/strong&gt;&lt;span&gt;: Datomic Cloud is closely integrated with AWS, &lt;/span&gt;&lt;em&gt;automatically&lt;/em&gt;&lt;span&gt; providing:&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Powerful: &lt;/strong&gt;&lt;span&gt;Datomic Cloud delivers the full Datomic information model&lt;/span&gt;&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;span&gt;Datomic Cloud is a new product intended for greenfield development on AWS. If you are not yet targeting the cloud, check out what &lt;/span&gt;&lt;a href=&quot;http://www.datomic.com/customers.html&quot;&gt;customers are saying&lt;/a&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;about the established line of Datomic On-Prem products (Datomic Pro and Enterprise).&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-53l7suMbyss/WDw4_QYOk5I/AAAAAAAAANQ/MmACZ8DAbKs6ORN66PZFARUe2W1zinMoQCPcBGAYYCw/s1600/DatomicLogo_Square.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; data-original-height=&quot;451&quot; data-original-width=&quot;451&quot; height=&quot;100&quot; src=&quot;https://4.bp.blogspot.com/-53l7suMbyss/WDw4_QYOk5I/AAAAAAAAANQ/MmACZ8DAbKs6ORN66PZFARUe2W1zinMoQCPcBGAYYCw/s200/DatomicLogo_Square.png&quot; title=&quot;&quot; width=&quot;100&quot;/&gt;&lt;/a&gt;&lt;span&gt;Datomic Cloud is accessible through the latest release of the &lt;/span&gt;&lt;a href=&quot;http://docs.datomic.com/cloud/client/client-api.html&quot;&gt;Datomic Client API&lt;/a&gt;&lt;span&gt;. &lt;span&gt;To learn more, you can&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;


</description>
<pubDate>Wed, 17 Jan 2018 14:20:37 +0000</pubDate>
<dc:creator>grzm</dc:creator>
<og:url>http://blog.datomic.com/2018/01/datomic-cloud.html</og:url>
<og:title>Datomic Cloud</og:title>
<og:description> Datomic on AWS: Easy, Integrated, and Powerful We are excited to announce the release of  Datomic Cloud , making Datomic more accessible ...</og:description>
<og:image>https://4.bp.blogspot.com/-53l7suMbyss/WDw4_QYOk5I/AAAAAAAAANQ/MmACZ8DAbKs6ORN66PZFARUe2W1zinMoQCPcBGAYYCw/w1200-h630-p-k-no-nu/DatomicLogo_Square.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.datomic.com/2018/01/datomic-cloud.html</dc:identifier>
</item>
<item>
<title>Ask HN: How to Seriously Start with Machine Learning and AI</title>
<link>https://news.ycombinator.com/item?id=16167620</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=16167620</guid>
<description>Hey,
&lt;p&gt;Since years I've been seeing tones of news &quot;how machine learing did smth... &quot; and today that's enough with just reading how other people change the world with AI. I want to join into this area and scientificly understand how it everything works - make my own projects...&lt;/p&gt;&lt;p&gt;-I'm a third-year Computer Science student who just has passed most of the needed courses like obj programming,python course, databases, math statistics, algebra etc... I really enjoy playing with data like projecting databases, programming backed etc...&lt;/p&gt;
&lt;p&gt;Everything I know until today - I have learned on my own(swift, python, backend). Mostly by practice and solving problems. Now I really want to start serious journey with Machine Learning and AI.&lt;/p&gt;
&lt;p&gt;But by making some small research which made me realised that I don't want just to implement already done frameworks for e.q face recognition (maybe I should?) I would like to understand the topic really seriously and be able to explore this area... ---but here's a problem because I don't know how to start it. I've got enthusiasm, some ideas for a projects, but still don't know almost anything about how exactly everything works.&lt;/p&gt;
&lt;p&gt;When I was starting with programming, I read some books, watched online lecture and bang. I started doing my own projects. How to start in this more scientifically sophisticated area?&lt;/p&gt;
&lt;p&gt;Are there any courses, books, online lectures which you can recommend me for a start to understand how it all works? Unfortunately, my university doesn't lead any more interesting courses in this area... People here are just fascinated with it but nothing more complex...&lt;/p&gt;
&lt;p&gt;I'm still young so why not to lose time on something that seems to be really fascinating ;)&lt;/p&gt;
</description>
<pubDate>Wed, 17 Jan 2018 13:19:24 +0000</pubDate>
<dc:creator>meddy</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=16167620</dc:identifier>
</item>
<item>
<title>System Bus Radio: Transmits AM radio on computers without transmitting hardware</title>
<link>https://github.com/fulldecent/system-bus-radio</link>
<guid isPermaLink="true" >https://github.com/fulldecent/system-bus-radio</guid>
<description>&lt;h3&gt;README.md&lt;/h3&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;This program transmits radio on computers / phones without radio transmitting hardware.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🍷 Project tip jar: &lt;a href=&quot;https://amazon.com/hz/wishlist/ls/EE78A23EEGQB&quot; rel=&quot;nofollow&quot;&gt;https://amazon.com/hz/wishlist/ls/EE78A23EEGQB&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Some computers are intentionally disconnected from the rest of the world. This includes having their internet, wireless, bluetooth, USB, external file storage and audio capabilities removed. This is called &quot;air gapping&quot;. Even in such a situation, this program can transmit radio.&lt;/p&gt;
&lt;p&gt;Publicly available documents already discuss exfiltration from secured systems using various electromagnetic radiations. This is documented in the TEMPEST guidelines published by the US National Security Agency and the US Department of Defense. This project simply adds to that discussion.&lt;/p&gt;
&lt;h2&gt;How to use it&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;NEW:&lt;/strong&gt; Try it without compiling anything, click here: &lt;a href=&quot;http://fulldecent.github.io/system-bus-radio/&quot; rel=&quot;nofollow&quot;&gt;http://fulldecent.github.io/system-bus-radio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enter the &lt;code&gt;Using _mm_stream_si128&lt;/code&gt; folder and compile using &lt;code&gt;make&lt;/code&gt;. (There are also other flavors you can &lt;code&gt;make&lt;/code&gt; and try in different folders!)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;make
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Run this using a 2015 model MacBook Air. Then use a Sony STR-K670P radio receiver with the included antenna and tune it to 1580 kHz on AM.&lt;/p&gt;
&lt;p&gt;You should hear the &quot;Mary Had a Little Lamb&quot; tune playing repeatedly. Other equipment and tuning may work as well. On the equipment above, the author has achieved clear transmission over two meters of open air or one meter through drywall. Different results will be achievable with different equipment.&lt;/p&gt;
&lt;p&gt;Are you using an antenna? At the beginning, I placed the antenna directly on top of the number 4 key and that worked best (on any AM frequency). It was a round antenna. Then once I knew it works I moved the antenna back. Moving it back reduced the number of frequencies that it worked on, and eventually only that one (1580 kHz) worked. Different hardware will certainly have different frequency response. Here are some results that have been sent in by readers. Please mail &lt;a href=&quot;mailto:github.com@phor.net&quot;&gt;github.com@phor.net&lt;/a&gt; with your results (including make and model of all equipment involved) or &lt;a href=&quot;https://github.com/fulldecent/system-bus-radio/edit/master/TEST-DATA.tsv&quot;&gt;edit this file directly&lt;/a&gt; and create a pull request.&lt;/p&gt;
&lt;h2&gt;Technical Explanation&lt;/h2&gt;
&lt;p&gt;This program runs instructions on the computer that cause electromagnetic radiation. The emissions are of a broad frequency range. To be accepted by the radio, those frequencies must:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Be emitted by the computer processor and other subsystems&lt;/li&gt;
&lt;li&gt;Escape the computer shielding&lt;/li&gt;
&lt;li&gt;Pass through the air or other obstructions&lt;/li&gt;
&lt;li&gt;Be accepted by the antenna&lt;/li&gt;
&lt;li&gt;Be selected by the receiver&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;By trial and error, the above frequency was found to be ideal for that equipment. If somebody would like to send me a SDR that is capable of receiving 100 kHz and up then I could test other frequencies.&lt;/p&gt;
&lt;p&gt;The actual emissions are caused by the &lt;code&gt;_mm_stream_si128&lt;/code&gt; instruction that writes through to a memory address. Inspiration for using this instruction was provided in:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Guri, M., Kachlon, A., Hasson, O., Kedma, G., Mirsky, Y. and Elovici, Y., 2015. GSMem: data exfiltration from air-gapped computers over GSM frequencies. In 24th USENIX Security Symposium (USENIX Security 15) (pp. 849-864).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/node/190937&quot; rel=&quot;nofollow&quot;&gt;https://www.usenix.org/node/190937&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please note that replacing &lt;code&gt;_mm_stream_si128&lt;/code&gt; with a simple &lt;code&gt;x++;&lt;/code&gt; will work too. My experience has been that &lt;code&gt;_mm_stream_si128&lt;/code&gt; produces a stronger signal. There may be other ideas that work even better, and it would be nice to improve this to be more portable (not require SSE extensions).&lt;/p&gt;
&lt;p&gt;The program uses square wave modulation, which is depicted below:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;|&amp;lt;--------------------TIME--------------------&amp;gt;|
|                                              |
|‾|_|‾|_|‾|_____________|‾|_|‾|_|‾|_____________
|                       |   |   |
|&amp;lt;------SIGNAL---------&amp;gt;|   |   |
                            |   |
                            |&amp;lt;-&amp;gt;| CARRIER
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notes on high precision time APIs:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Get current time
&lt;/li&gt;
&lt;li&gt;Sleep
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Press coverage&lt;/p&gt;
&lt;/article&gt;</description>
<pubDate>Wed, 17 Jan 2018 13:15:43 +0000</pubDate>
<dc:creator>yarapavan</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/382183?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>fulldecent/system-bus-radio</og:title>
<og:url>https://github.com/fulldecent/system-bus-radio</og:url>
<og:description>system-bus-radio - Transmits AM radio on computers without radio transmitting hardware.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/fulldecent/system-bus-radio</dc:identifier>
</item>
<item>
<title>DNS over HTTPS</title>
<link>https://github.com/curl/curl/wiki/DNS-over-HTTPS</link>
<guid isPermaLink="true" >https://github.com/curl/curl/wiki/DNS-over-HTTPS</guid>
<description>&lt;div class=&quot;markdown-body&quot;&gt;

&lt;p&gt;Do DNS resolves over HTTPS for privacy, performance and security. Also makes it easier to use a name server of your choice instead of the one configured for your system.&lt;/p&gt;

&lt;p&gt;This is work in progress: &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-02&quot;&gt;https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-02&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google runs one. Test with &lt;code&gt;https://dns.google.com/experimental?ct&amp;amp;body=q80BAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Daniel runs a &quot;toy server&quot; that only supports GET: &lt;code&gt;https://daniel.haxx.se/dns?body=q80BAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Bootstrap&lt;/h2&gt;
&lt;p&gt;The DOH server is given with a host name that itself needs to be resolved. This initial resolve needs to be done by the native resolver before DOH kicks in.&lt;/p&gt;
&lt;h2&gt;DOH resolver&lt;/h2&gt;
&lt;p&gt;When a DOH-resolve is to get done, it will need to&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;issue the DOH resolve asynchronously&lt;/li&gt;
&lt;li&gt;create one or two easy handles and associated HTTP transfers (A + AAAA resolves will need one request each)&lt;/li&gt;
&lt;li&gt;add the easy handles to the multi handle to make the DOH-transfers perform&lt;/li&gt;
&lt;li&gt;parse the DOH responses, feed the parsed resolve data into the DNS cache.&lt;/li&gt;
&lt;li&gt;close the DOH easy handles&lt;/li&gt;
&lt;li&gt;return the address data to the initial transfer that needed it, and continue&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;A &quot;Custom resolver&quot; ?&lt;/h2&gt;
&lt;p&gt;Anders Bakken works on making the DNS backend generic enough to allow applications to plug in a custom DNS resolver in &lt;a href=&quot;https://github.com/curl/curl/pull/2232&quot;&gt;#2232&lt;/a&gt;. Will that be suitable for this DOH resolver&lt;/p&gt;

&lt;p&gt;Facebook's &lt;a href=&quot;https://facebookexperimental.github.io/doh-proxy/&quot;&gt;doh-proxy&lt;/a&gt; and associated tools.&lt;/p&gt;
&lt;p&gt;Daniel's &lt;a href=&quot;https://github.com/bagder/dns2doh&quot;&gt;dns2doh&lt;/a&gt; tool for generating DOH responses and questions.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 17 Jan 2018 07:45:01 +0000</pubDate>
<dc:creator>sohkamyung</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/16928085?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>curl/curl</og:title>
<og:url>https://github.com/curl/curl</og:url>
<og:description>A command line tool and library for transferring data with URL syntax, supporting HTTP, HTTPS, FTP, FTPS, GOPHER, TFTP, SCP, SFTP, SMB, TELNET, DICT, LDAP, LDAPS, FILE, IMAP, SMTP, POP3, RTSP and R...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/curl/curl/wiki/DNS-over-HTTPS</dc:identifier>
</item>
<item>
<title>Sudden savant syndrome, in which exceptional abilities emerge after brain injury</title>
<link>http://www.bbc.com/future/story/20180116-the-mystery-of-why-some-people-become-sudden-geniuses</link>
<guid isPermaLink="true" >http://www.bbc.com/future/story/20180116-the-mystery-of-why-some-people-become-sudden-geniuses</guid>
<description>&lt;p&gt;It was the summer of 1860 and Eadweard Muybridge was running low on books. This was somewhat problematic, since he was a bookseller. He handed his San Francisco shop over to his brother and set off on a stagecoach to buy supplies. Little did he know, he was about to change the world forever.&lt;/p&gt;&lt;p&gt;He was some way into his journey, in north-eastern Texas, when the coach ran into trouble. The driver cracked his whip and the horses broke into a run, leading the coach surging down a steep mountain road. Eventually it veered off and into a tree. Muybridge was catapulted into the air and cracked his head on a boulder.&lt;/p&gt;&lt;p&gt;He woke up nine days later at a hospital 150 miles (241 km) away. The accident left him with a panoply of medical problems, including double vision, bouts of seizures and no sense of smell, hearing or taste. But the most radical change was his personality.&lt;/p&gt;&lt;p&gt;Previously Muybridge had been a genial and open man, with good business sense. Afterwards he was risk-taking, eccentric and moody; he later murdered his wife’s lover. He was also, quite possibly, a genius.&lt;/p&gt;&lt;p&gt;The question of where creative insights come from – and how to get more of them – has remained a subject of great speculation for thousands of years. According to scientists, they can be driven by anything from &lt;a href=&quot;http://www.tandfonline.com/doi/abs/10.1080/13546783.2011.625663&quot;&gt;fatigue&lt;/a&gt; to &lt;a href=&quot;http://www.tandfonline.com/doi/abs/10.1080/10400419.2014.901073&quot;&gt;boredom&lt;/a&gt;. The prodigies themselves have other, even less convincing ideas. Plato said that they were the result of divine madness. Or do they, as Freud believed, arise from the &lt;a href=&quot;http://www.abandon.nl/3creativ.htm&quot;&gt;sublimation of sexual desires&lt;/a&gt;? &lt;a href=&quot;https://www.abebooks.co.uk/book-search/title/creativity/author/p-e-vernon-editor/&quot;&gt;Tchaikovsky maintained&lt;/a&gt; that eureka moments are born out of cool headwork and technical knowledge.&lt;/p&gt;&lt;p&gt;But until recently, most sensible people agreed on one thing: creativity begins in the pink, wobbly mass inside our skulls. It surely goes without saying that striking the brain, impaling it, electrocuting it, shooting it, slicing bits out of it or depriving it of oxygen would lead to the swift death of any great visions possessed by its owner.&lt;/p&gt;&lt;p&gt;As it happens, sometimes the opposite is true.&lt;/p&gt;&lt;p&gt;After the accident, Muybridge eventually recovered enough to sail to England. There his creativity really took hold. He abandoned bookselling and became a photographer, one of the most famous in the world. He was also a prolific inventor. Before the accident, he hadn’t filed a single patent. In the following two decades, he applied for at least 10.&lt;/p&gt;&lt;p&gt;In 1877 he took a bet that allowed him to combine invention and photography. Legend has it that his friend, a wealthy railroad tycoon called Leland Stanford, was convinced that horses could fly. Or, more accurately, he was convinced that when they run, all their legs leave the ground at the same time. Muybridge said they didn’t.&lt;/p&gt;&lt;p&gt;To prove it he placed 12 cameras along a horse track and installed a tripwire that would set them off automatically as Stanford’s favourite racing horse, Occident, ran. Next he invented the inelegantly named “zoopraxiscope”, a device which allowed him to project several images in quick succession and give the impression of motion. To his amazement, the horse was briefly suspended, mid-gallop. Muybridge had filmed the first movie – and with it proven that yes, horses can fly.&lt;/p&gt;&lt;blockquote readability=&quot;5&quot;&gt;&lt;p&gt; Jon Sarkin was transformed from a chiropractor into an artist after a stroke &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The abrupt turnaround of Muybridge’s life, from ordinary bookseller to creative genius, has &lt;a href=&quot;http://artshim.com/Shimamura-Muybridge.pdf&quot;&gt;prompted speculation that it was a direct result of his accident&lt;/a&gt;. It’s possible that he had “sudden savant syndrome”, in which exceptional abilities emerge after a brain injury or disease. It’s extremely rare, with just 25 verified cases on the planet.&lt;/p&gt;&lt;p&gt;There’s Tony Cicoria, an orthopaedic surgeon who was struck by lightning at a New York park in 1994. It went straight through his head and left him with an irresistible desire to play the piano. To begin with he was playing other people’s music, but soon he started writing down the melodies that were constantly running through his head. Today he’s a pianist and composer, as well as a practicing surgeon.&lt;/p&gt;&lt;p&gt;Another case is Jon Sarkin, who was transformed from a chiropractor into an artist after a stroke. The urge to draw landed almost immediately. He was having “all kinds” of therapy at the hospital – speech therapy, art therapy, physical therapy, occupational therapy, mental therapy – “And they stuck a crayon in my hand and said ‘want to draw?’ And I said ‘fine’,” he says.&lt;/p&gt;&lt;p&gt;His first muse was a cactus at his home in Gloucester, Massachusetts. It was the fingered kind, like you might find in Western movies from the 50s. Even his &lt;a href=&quot;http://www.lawandwater.com/sarkin-cactus/&quot;&gt;earliest paintings are extremely abstract&lt;/a&gt;. In some versions the branches resemble swirling green snakes, while others they are red, zig-zagging staircases.&lt;/p&gt;&lt;p&gt;His works have since been published in The New York Times, featured on album covers and been covered in a book by a Pulitzer Prize-winning author. They regularly sell for $10,000 (£7,400).&lt;/p&gt;&lt;p&gt;Most strikingly there’s Jason Padgett, who was attacked at a bar in Tacoma, Washington in 2002. Before the attack, Padgett was a college dropout who worked at a futon store. His primary passions in life were partying and chasing girls. He had no interest in maths – at school, he didn’t even get into algebra class.&lt;/p&gt;&lt;p&gt;But that night, everything changed. Initially he was taken to the hospital with a severe concussion. “I remember thinking that everything looked funky, but I thought it was just the narcotic pain shot they gave me” he says. “Then the next morning I woke up and turned on the water. It looked like little tangent lines [a straight line that touches a single point on a curve], spiralling down.”.&lt;/p&gt;&lt;blockquote readability=&quot;6&quot;&gt;&lt;p&gt; When you’re bashed on the head, the effects are similar to a dose of LSD &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;From then onwards Padgett’s world was overlaid with geometric shapes and gridlines. He became obsessed with maths and is now renowned for his drawings of formulas such as Pi. Today he’s incredulous that he once didn’t know what a tangent was. “I do feel like two people, and I’ve had my mum and my dad say that. It’s like having two separate kids,” he says.&lt;/p&gt;&lt;p&gt;Why does this happen? How does it work? And what does it teach us about what makes geniuses special?&lt;/p&gt;&lt;p&gt;There are two leading ideas. The first is that when you’re bashed on the head, the effects are similar to a dose of LSD. Psychedelic drugs are thought to enhance creativity by increasing the levels of serotonin, the so-called “happiness hormone”, in the brain. This leads to “synaesthesia”, in which more than one region is simultaneously activated and senses which are usually separate become linked.&lt;/p&gt;&lt;p&gt;Many people don’t need drugs to experience this: nearly 5% of the population has some form of synaesthesia, with the most common type being “grapheme-colour”, in which words are associated with colours. For example, the &lt;a href=&quot;https://www.psychologytoday.com/blog/sensorium/201408/geoffrey-rush-his-synesthesia&quot;&gt;actor Geoffrey Rush believes&lt;/a&gt; that Mondays are pale blue.&lt;/p&gt;&lt;p&gt;When the brain is injured, dead and dying cells leak serotonin into the surrounding tissue. Physically, this seems to encourage new connections between brain regions, just as with LSD. Mentally, it allows the person to link the seemingly unconnected. “We’ve found permanent changes before – you can actually see connections in the brain that weren’t there before,” says Berit Brogaard, a neuroscientist who directs the Brogaard Lab for Multisensory Research, Florida.&lt;/p&gt;&lt;p&gt;But there is an alternative. The first clue emerged in 1998, when a group of neurologists noticed that five of their patients with dementia were also artists – remarkably good ones. Specifically, they had &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/9781516&quot;&gt;frontotemporal dementia&lt;/a&gt;, which is unusual in that it only affects some parts of the brain. For example, visual creativity may be spared, while language and social skills are progressively destroyed.&lt;/p&gt;&lt;p&gt;One of these was “Patient 5”. At the age of 53 he had enrolled in a short course in drawing at a local park, though he previously had no interest in such things. It just so happened to coincide with the onset of his dementia; a few months later, he was having trouble speaking.&lt;/p&gt;&lt;p&gt;Soon he became irritable and eccentric, developing a compulsion to search for money on the street. As his illness progressed, so did his drawing, advancing from simple still-life paintings to haunting, impressionist depictions of buildings from his childhood.&lt;/p&gt;&lt;p&gt;To find out what was going on, the scientists performed 3D scans of their patients’ brains. In four out of five cases, they found lesions on the left hemisphere. Nobel Prize-winning research from the 1960s shows that the two halves of the brain specialise in different tasks; in general, the right side is home to creativity and the left is the centre of logic and language.&lt;/p&gt;&lt;blockquote readability=&quot;5&quot;&gt;&lt;p&gt;  ‘Autistic savants’ can have superhuman skills to rival those of the Renaissance polymaths &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;But the left side is also something of a bully. “It tends to be the dominant brain region,” says Brogaard. “It tends to suppress very marginal types of thinking - highly original, highly creative thinking, because it’s beneficial for our decision-making abilities and our ability to function in normal life.”. The theory goes that as the patients’ left hemispheres became progressively more damaged, their right hemispheres were free to flourish.&lt;/p&gt;&lt;p&gt;This is backed up by several other studies, including one in which &lt;a href=&quot;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0016655&quot;&gt;creative insight was roused&lt;/a&gt; in healthy volunteers by temporarily dialling down activity in the left hemisphere and increasing it in the right. “[the lead researcher] Allen Snyder’s work was replicated by another person, so that’s the theory that I think is responsible,” says Darold Treffert, a psychiatrist from the University of Wisconsin Medical School, who has been studying savant syndrome for decades.&lt;/p&gt;&lt;p&gt;But what about more mainstream geniuses? Could the theory explain their talents, too?&lt;/p&gt;&lt;p&gt;Consider autism. From Daniel Tammet, who can perform mind-boggling mathematical calculations at stupendous speed, to Gottfried Mind, the “Cat Raphael”, who drew the animal with an astonishing level of realism, so-called “autistic savants” can have superhuman skills to rival those of the Renaissance polymaths.&lt;/p&gt;&lt;p&gt;It’s been estimated that as many as one in 10 people with autism have savant syndrome and there’s mounting evidence the disorder is &lt;a href=&quot;https://link.springer.com/article/10.1007/s10803-015-2518-2&quot;&gt;associated with enhanced creativity&lt;/a&gt;. And though it’s difficult to prove, it’s been speculated that numerous intellectual giants, including Einstein, Newton, Mozart, Darwin and Michelangelo, were on the spectrum.&lt;/p&gt;&lt;p&gt;One theory suggests that autism arises from abnormally low levels of serotonin in the left hemisphere in childhood, which prevents the region from developing normally. Just like with sudden savant syndrome, this allows the right hemisphere to become more active.&lt;/p&gt;&lt;blockquote readability=&quot;8&quot;&gt;&lt;p&gt; They are usually able to have a normal life, but they also have this obsession - Berit Brogaard, neuroscientist &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Interestingly, many people with sudden savant syndrome also develop symptoms of autism, including social problems, obsessive compulsive disorder (OCD) and all-consuming interests. “It got so bad that if I had money I would spray the money with Lysol and put it in the microwave for a few seconds to get rid of the germs,” says Padgett.&lt;/p&gt;&lt;p&gt;“They are usually able to have a normal life, but they also have this obsession,” says Brogaard. This is something universal across all sudden savants. Jon Sarkin compares his art to an instinct. “It doesn’t feel like I like drawing, it feels like I must draw.” His studio contains thousands of finished and unfinished works, which are often scribbled with curves, words, cross-hatchings, and overlapping images.&lt;/p&gt;        &lt;p&gt;In fact, though they often don’t need to, sudden savants work hard at improving their craft. “I mean, I practiced a lot. Talent and hard work, I think they are indistinguishable – you do something a lot and you get better at it,” says Sarkin. Padgett agrees. “When you’re fixated on something like that, of course you do discover things.”&lt;/p&gt;&lt;p&gt;Muybridge was no exception. After the bet, he moved to Philadelphia and continued with his passion for capturing motion on film, photographing all kinds of activities such as walking up and down the stairs and, oddly, himself swinging a pickaxe in the nude. Between 1883 and 1886, he took more than 100,000 pictures.&lt;/p&gt;&lt;p&gt;“In my opinion at least, the fact that they can improve their abilities doesn’t negate the suddenness or insistence with which they are there,” says Treffert. As our understanding of sudden savant syndrome improves, eventually it’s hoped that we might all be able to unlock our hidden mental powers – perhaps with the help of smart drugs or hardware.&lt;/p&gt;&lt;p&gt;But until then, perhaps us mortals could try putting in some extra hours instead. &lt;/p&gt;&lt;p&gt;--&lt;/p&gt;&lt;p&gt;&lt;em&gt;Join 800,000+ Future fans by liking us on &lt;/em&gt;&lt;a href=&quot;https://www.facebook.com/BBCFuture&quot;&gt;&lt;strong&gt;&lt;em&gt;Facebook&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;, or follow us on &lt;/em&gt;&lt;a href=&quot;https://twitter.com/bbc_future&quot;&gt;&lt;strong&gt;&lt;em&gt;Twitter&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;If you liked this story, &lt;/em&gt;&lt;a href=&quot;http://pages.emails.bbc.com/subscribe/?ocid=fut.bbc.email.we.email-signup&quot;&gt;&lt;strong&gt;&lt;em&gt;sign up for the weekly bbc.com features newsletter&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;, called “If You Only Read 6 Things This Week”. A handpicked selection of stories from BBC Future, Earth, Culture, Capital, and Travel, delivered to your inbox every Friday.&lt;/em&gt; &lt;/p&gt;
                        </description>
<pubDate>Wed, 17 Jan 2018 04:44:24 +0000</pubDate>
<dc:creator>clouddrover</dc:creator>
<og:title>The mystery of why some people become sudden geniuses</og:title>
<og:type>article</og:type>
<og:url>http://www.bbc.com/future/story/20180116-the-mystery-of-why-some-people-become-sudden-geniuses</og:url>
<og:description>There’s mounting evidence that brain damage has the power to unlock extraordinary creative talents. What can this teach us about how geniuses are made? </og:description>
<og:image>http://ichef.bbci.co.uk/wwfeatures/live/624_351/images/live/p0/5v/0s/p05v0smr.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.bbc.com/future/story/20180116-the-mystery-of-why-some-people-become-sudden-geniuses</dc:identifier>
</item>
<item>
<title>Changes to the YouTube Partner Program</title>
<link>https://youtube-creators.googleblog.com/2018/01/additional-changes-to-youtube-partner.html</link>
<guid isPermaLink="true" >https://youtube-creators.googleblog.com/2018/01/additional-changes-to-youtube-partner.html</guid>
<description></description>
<pubDate>Wed, 17 Jan 2018 04:08:38 +0000</pubDate>
<dc:creator>tomkwok</dc:creator>
<og:type>article</og:type>
<og:title>Additional Changes to the YouTube Partner Program (YPP) to Better Protect Creators</og:title>
<og:image>http://1.bp.blogspot.com/-BpYbqwp4H10/WabUJa_rWmI/AAAAAAAATeM/2kQyFI6wecw38-m8kfopjne45RZ37n19wCK4BGAYYCw/s1600/youtubelogo.png</og:image>
<og:url>https://youtube-creators.googleblog.com/2018/01/additional-changes-to-youtube-partner.html</og:url>
<og:description> 2017 marked a tough year for many of you, with several issues affecting our community and the revenue earned from advertising through the Y...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://youtube-creators.googleblog.com/2018/01/additional-changes-to-youtube-partner.html</dc:identifier>
</item>
<item>
<title>BitConnect Closes Exchange as States Warn of Unregulated Sales</title>
<link>https://www.bloomberg.com/news/articles/2018-01-16/bitconnect-closes-exchange-as-states-warn-of-unregulated-sales</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2018-01-16/bitconnect-closes-exchange-as-states-warn-of-unregulated-sales</guid>
<description>&lt;p&gt;BitConnect said it’s closing the company’s cryptocurrency exchange and lending operation after receiving two cease-and-desist letters from state authorities for the unauthorized sale of securities and suffering from denial-of-service attacks.&lt;/p&gt;


&lt;p&gt;The &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.ssb.texas.gov/news-publications/4-billion-crypto-promoter-ordered-halt-fraudulent-sales&quot; title=&quot;Link to website&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;Texas State Securities Board&lt;/a&gt; and &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.sosnc.gov/divisions/securities/Admin_Action&quot; title=&quot;Link to website&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;North Carolina Secretary of State Securities Division&lt;/a&gt; warned that the firm isn’t registered to sell securities in those states, the company &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://bitconnect.co/system-news/94/changes-coming-for-the-bitconnect-system-halt-of-lending-and-exchange-platform?utm_content=bufferfccc1&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer&quot; title=&quot;Link to website&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;said&lt;/a&gt; on its website Tuesday. BitConnect offered to let people receive interest on their digital coin balance by lending or investing their capital.&lt;/p&gt;


&lt;p&gt;BitConnect’s token, BCC, was among the world’s top-20 most successful tokens until its price &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://coinmarketcap.com/currencies/bitconnect/&quot; title=&quot;Link to website&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;plunged&lt;/a&gt; 65 percent since Jan. 3, as the states announced the actions. Launched a year ago, the coin still has a market cap of almost $1 billion.&lt;/p&gt;


&lt;aside class=&quot;inline-newsletter&quot; data-state=&quot;ready&quot;/&gt;
&lt;p&gt;States are becoming more active, and joining federal authorities in going after businesses related to bitcoin and other digital currencies that they allege try to avoid proper registrations. The Securities and Exchange Commission recently &lt;a itemscope=&quot;itemscope&quot; itemprop=&quot;StoryLink&quot; href=&quot;https://www.sec.gov/news/press-release/2017-227&quot; title=&quot;Link to website&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;halted&lt;/a&gt; an initial coin offering -- in which a startup issues shares to raise funds -- of Munchee Inc., after it was found to have offered unregistered securities.&lt;/p&gt;


&lt;p&gt;BitConnect.com will continue to operate a wallet and a news site, it said.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For more on cryptocurrencies, check out the &lt;em&gt;Decrypted&lt;/em&gt; podcast:&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 17 Jan 2018 01:04:43 +0000</pubDate>
<dc:creator>JumpCrisscross</dc:creator>
<og:description>BitConnect said it’s closing the company’s cryptocurrency exchange and lending operation after receiving two cease-and-desist letters from state authorities for the unauthorized sale of securities and suffering from denial-of-service attacks.</og:description>
<og:image>https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iDQti6O0z2XM/v0/1200x800.jpg</og:image>
<og:title>BitConnect Closes Exchange as States Warn of Unregulated Sales</og:title>
<og:type>article</og:type>
<og:url>https://www.bloomberg.com/news/articles/2018-01-16/bitconnect-closes-exchange-as-states-warn-of-unregulated-sales</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/news/articles/2018-01-16/bitconnect-closes-exchange-as-states-warn-of-unregulated-sales</dc:identifier>
</item>
</channel>
</rss>