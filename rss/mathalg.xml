<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed43.com%2Fmathalg-jtks.xml&amp;max=5&amp;links=preserve&amp;exc=1" />
<atom:link rel="alternate" title="Source URL" href="http://feed43.com/mathalg-jtks.xml" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1" />
<title>算法与数学之美</title>
<link>http://www.jintiankansha.me/column/c9dZ5TM2aS</link>
<description>算法与数学之美 - 今天看啥</description>
<ttl>360</ttl>
<item>
<title>如何选择合适的损失函数，请看......</title>
<link>http://www.jintiankansha.me/t/cD8l43kowg</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/cD8l43kowg</guid>
<description>&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6669106881405563&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FqujqaY0DKkzblVl4UkDWLEy3wT25iaialRCRANzQ15cqicxpuXBibnOPibzSA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1366&quot; width=&quot;auto&quot;/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;机器学习中的所有算法都依赖于最小化或最大化某一个函数，我们称之为“&lt;strong&gt;目标函数&lt;/strong&gt;”。最小化的这组函数被称为“&lt;strong&gt;损失函数&lt;/strong&gt;”。&lt;strong&gt;损失函数是衡量预测模型预测期望结果表现的指标&lt;/strong&gt;。寻找函数最小值的最常用方法是“&lt;strong&gt;梯度下降&lt;/strong&gt;”。把损失函数想象成起伏的山脉，梯度下降就像从山顶滑下，目的是到达山脉的最低点。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;没有一个损失函数可以适用于所有类型的数据&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;。损失函数的选择取决于许多因素，包括是否有离群点，机器学习算法的选择，运行梯度下降的时间效率，是否易于找到函数的导数，以及预测结果的置信度。这个博客的目的是&lt;strong&gt;帮助你了解不同的损失函数&lt;/strong&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;损失函数可以大致分为两类：&lt;strong&gt;分类损失&lt;/strong&gt;（Classification Loss）和&lt;strong&gt;回归损失&lt;/strong&gt;（Regression Loss）。下面这篇博文，就将重点介绍5种回归损失。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;1.376543209876543&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquB8tibeKa8RuhOZvUxj92HARhJVCcgrXoicd8nYKCD8xUzIZB0KibfxHibA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;486&quot; data-width=&quot;364px&quot; height=&quot;auto&quot; width=&quot;364px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;回归函数预测实数值，分类函数预测标签&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;▌&lt;/span&gt;&lt;span&gt;&lt;strong&gt;回归损失&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1、均方误差，二次损失，L2损失（Mean Square Error, Quadratic Loss, L2 Loss）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;均方误差（MSE）是最常用的回归损失函数。MSE是目标变量与预测值之间距离平方之和。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.396078431372549&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquVNzmvkzX8KNw7ZvbM3OnGGXbPiasp3ZXXvT58B6wXcnibDNAKMrKchqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;255&quot; data-width=&quot;191px&quot; height=&quot;auto&quot; width=&quot;191px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面是一个MSE函数的图，其中真实目标值为100，预测值在-10,000至10,000之间。预测值（X轴）= 100时，MSE损失（Y轴）达到其最小值。损失范围为0至∞。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.625&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquiaF1WHnpwIvsO0VyibxoHcEibMiasqCRIlR7gKAXqic53jEI3dCxrMrFnHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;576&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;span&gt;MSE损失（Y轴）与预测值（X轴）关系图&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、平均绝对误差，L1损失（Mean Absolute Error, L1 Loss）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;平均绝对误差（MAE）是另一种用于回归模型的损失函数。MAE是目标变量和预测变量之间差异绝对值之和。因此，它在一组预测中衡量误差的平均大小，而不考虑误差的方向。（如果我们也考虑方向，那将被称为平均偏差（Mean Bias Error, MBE），它是残差或误差之和）。损失范围也是0到∞。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.36964980544747084&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquxoU6zTBkGUiaNBpUjMRffsgE06XEullzicNgeqAytM4cTPiblqewGRGfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;257&quot; data-width=&quot;192px&quot; height=&quot;auto&quot; width=&quot;192px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.625&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquI1BBUkaFWFy47B3OAYGk9c2OHaM5UrsM6AjM3eSmXQc9D9GUXOEG1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;576&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MAE损失（Y轴）与预测值（X轴）关系图&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3、MSE vs MAE （L2损失 vs L1损失）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;简而言之， 使用平方误差更容易求解，但使用绝对误差对离群点更加鲁棒。但是，知其然更要知其所以然！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;每当我们训练机器学习模型时，我们的目标就是找到最小化损失函数的点。当然，当预测值正好等于真实值时，这两个损失函数都达到最小值。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面让我们快速过一遍两个损失函数的Python代码。我们可以编写自己的函数或使用sklearn的内置度量函数：&lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot; readability=&quot;7&quot;&gt;&lt;pre&gt;
&lt;br/&gt;＃&lt;span class=&quot;&quot;&gt;true&lt;/span&gt;：真正的目标变量数组&lt;br/&gt;＃pred：预测数组&lt;br/&gt;**&lt;br/&gt;&lt;span class=&quot;&quot;&gt;&lt;span class=&quot;&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;&quot;&gt;mse&lt;/span&gt;&lt;span class=&quot;&quot;&gt;(&lt;span class=&quot;&quot;&gt;true&lt;/span&gt;, pred)&lt;/span&gt;&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;&quot;&gt;return&lt;/span&gt; np.sum(((&lt;span class=&quot;&quot;&gt;true&lt;/span&gt; – pred)**&lt;span class=&quot;&quot;&gt;2&lt;/span&gt;))&lt;br/&gt;**&lt;br/&gt;&lt;span class=&quot;&quot;&gt;&lt;span class=&quot;&quot;&gt;def&lt;/span&gt;&lt;/span&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;
&lt;span class=&quot;&quot;&gt;mae&lt;/span&gt;&lt;span class=&quot;&quot;&gt;(&lt;span class=&quot;&quot;&gt;true&lt;/span&gt;, pred)&lt;/span&gt;:&lt;br/&gt;&lt;span class=&quot;&quot;&gt;return&lt;/span&gt; np.sum(np.abs(&lt;span class=&quot;&quot;&gt;true&lt;/span&gt; – pred))&lt;br/&gt;**&lt;br/&gt;＃也可以在sklearn中使用&lt;br/&gt;**&lt;br/&gt;from sklearn.metrics import mean_squared_error&lt;br/&gt;from sklearn.metrics import mean_absolute_error&lt;br/&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;让我们来看看两个例子的MAE值和RMSE值（RMSE，Root Mean Square Error，均方根误差，它只是MSE的平方根，使其与MAE的数值范围相同）。在第一个例子中，预测值接近真实值，观测值之间误差的方差较小。第二个例子中，有一个异常观测值，误差很高。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.31107954545454547&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/ptp8P184xjxVJ8ickgPg8afDRIjCmDNT7iaJcGNIuGjib3EUaJOS1jibyxAz09RqugzNwibFDZf9icVYEGibnRMLsfG1A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;704&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;左：误差彼此接近  右：有一个误差和其他误差相差很远&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们从中观察到什么？我们该如何选择使用哪种损失函数？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;由于MSE对误差（e）进行平方操作（y - y_predicted = e），如果e&amp;gt; 1，误差的值会增加很多。如果我们的数据中有一个离群点，e的值将会很高，将会远远大于|e|。这将使得和以MAE为损失的模型相比，以MSE为损失的模型会赋予更高的权重给离群点。在上面的第二个例子中，以RMSE为损失的模型将被调整以最小化这个离群数据点，但是却是以牺牲其他正常数据点的预测效果为代价，这最终会降低模型的整体性能。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;MAE损失适用于训练数据被离群点损坏的时候（即，在训练数据而非测试数据中，我们错误地获得了不切实际的过大正值或负值）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;直观来说，我们可以像这样考虑：对所有的观测数据，如果我们只给一个预测结果来最小化MSE，那么该预测值应该是所有目标值的均值。但是如果我们试图最小化MAE，那么这个预测就是所有目标值的中位数。我们知道中位数对于离群点比平均值更鲁棒，这使得MAE比MSE更加鲁棒。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;使用MAE损失（特别是对于神经网络）的一个大问题是它的梯度始终是相同的，这意味着即使对于小的损失值，其梯度也是大的。这对模型的学习可不好。为了解决这个问题，我们可以使用随着接近最小值而减小的动态学习率。MSE在这种情况下的表现很好，即使采用固定的学习率也会收敛。MSE损失的梯度在损失值较高时会比较大，随着损失接近0时而下降，从而使其在训练结束时更加精确（参见下图）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.31&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquYuZpIqhpB3XxGtmQgSgJOdy0VB0dX54BiaB0bLicbxxsIBibDLQOpCKzA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;决定使用哪种损失函数？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果离群点是会影响业务、而且是应该被检测到的异常值，那么我们应该使用MSE。另一方面，如果我们认为离群点仅仅代表数据损坏，那么我们应该选择MAE作为损失。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;  我建议阅读下面这篇文章，其中有一项很好的研究，比较了在存在和不存在离群点的情况下使用L1损失和L2损失的回归模型的性能。请记住，L1和L2损失分别是MAE和MSE的另一个名称而已。&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;地址：&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;http://rishy.github.io/ml/2015/07/28/l1-vs-l2-loss/&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;L1损失对异常值更加稳健，但其导数并不连续，因此求解效率很低。L2损失对异常值敏感，但给出了更稳定的闭式解（closed form solution）（通过将其导数设置为0）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;两种损失函数的问题：可能会出现这样的情况，即任何一种损失函数都不能给出理想的预测。例如，如果我们数据中90％的观测数据的真实目标值是150，其余10％的真实目标值在0-30之间。那么，一个以MAE为损失的模型可能对所有观测数据都预测为150，而忽略10％的离群情况，因为它会尝试去接近中值。同样地，以MSE为损失的模型会给出许多范围在0到30的预测，因为它被离群点弄糊涂了。这两种结果在许多业务中都是不可取的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在这种情况下怎么做？一个简单的解决办法是转换目标变量。另一种方法是尝试不同的损失函数。这是我们的第三个损失函数——Huber Loss——被提出的动机。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3、Huber Loss，平滑的平均绝对误差&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Huber Loss对数据离群点的敏感度低于平方误差损失。它在0处也可导。基本上它是绝对误差，当误差很小时，误差是二次形式的。误差何时需要变成二次形式取决于一个超参数，(delta)，该超参数可以进行微调。当  𝛿 ~ 0时， Huber Loss接近MAE，当  𝛿 ~ ∞（很大的数）时，Huber Loss接近MSE。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.1580952380952381&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquAVbCpzRJ14mgyMRF38PKd8XVPlNBCrFIiaECMhuJu2KJIO6xV5YMUPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;525&quot; data-width=&quot;393px&quot; height=&quot;auto&quot; width=&quot;393px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.7142857142857143&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquKyy9J1HF1VJ4Yuwe36k3y0jntFmsF37VNKqsc9JVw9Lw8x8hscNAZA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;504&quot; data-width=&quot;378px&quot; height=&quot;auto&quot; width=&quot;378px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Huber Loss（Y轴）与预测值（X轴）关系图。真值= 0&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;delta的选择非常重要，因为它决定了你认为什么数据是离群点。大于delta的残差用L1最小化（对较大的离群点较不敏感），而小于delta的残差则可以“很合适地”用L2最小化。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;为什么使用Huber Loss？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;使用MAE训练神经网络的一个大问题是经常会遇到很大的梯度，使用梯度下降时可能导致训练结束时错过最小值。对于MSE，梯度会随着损失接近最小值而降低，从而使其更加精确。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在这种情况下，Huber Loss可能会非常有用，因为它会使最小值附近弯曲，从而降低梯度。另外它比MSE对异常值更鲁棒。因此，它结合了MSE和MAE的优良特性。但是，Huber Loss的问题是我们可能需要迭代地训练超参数delta。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;span&gt;4、Log-Cosh Loss&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Log-cosh是用于回归任务的另一种损失函数，它比L2更加平滑。Log-cosh是预测误差的双曲余弦的对数。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.20642201834862386&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquvdgibUuMpBgbJLS7UeicibPwXJhw8PuVFvzqCWMDRyRsEzXsPyaxdnzPw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;436&quot; data-width=&quot;327px&quot; height=&quot;auto&quot; width=&quot;327px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7142857142857143&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquZGJ8QVibRPmobQMzibuEc3DVszmBiaFemAibaf75C2yfjA1IF5EbfIbvng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;504&quot; width=&quot;auto&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Log-cosh Loss（Y轴）与预测值（X轴）关系图。真值= 0&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;优点： log(cosh(x))对于小的x来说，其大约等于 (x ** 2) / 2，而对于大的x来说，其大约等于 abs(x) - log(2)。这意味着'logcosh'的作用大部分与均方误差一样，但不会受到偶尔出现的极端不正确预测的强烈影响。它具有Huber Loss的所有优点，和Huber Loss不同之处在于，其处处二次可导。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;为什么我们需要二阶导数？许多机器学习模型的实现（如XGBoost）使用牛顿方法来寻找最优解，这就是为什么需要二阶导数（Hessian）的原因。对于像XGBoost这样的机器学习框架，二阶可导函数更有利。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.3815261044176707&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquMWJ8VlRvBSuldIuTfLHeeyDQl4xSyrX0qJGV9YGEicxGNeLehGR9Sqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;747&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;XGBoost中使用的目标函数。注意其对一阶和二阶导数的依赖性。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;但Log-chsh Loss并不完美。它仍然存在梯度和Hessian问题，对于误差很大的预测，其梯度和hessian是恒定的。因此会导致XGBoost中没有分裂。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Huber和Log-cosh损失函数的Python代码：&lt;/span&gt;&lt;/p&gt;

&lt;section class=&quot;&quot; readability=&quot;10.5&quot;&gt;&lt;pre readability=&quot;7&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;&quot;&gt;&lt;span class=&quot;&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;&quot;&gt;sm_mae&lt;/span&gt;&lt;span class=&quot;&quot;&gt;(true, pred, delta)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;&quot; readability=&quot;2&quot;&gt;&quot;&quot;&quot;&lt;br/&gt;true: array of true values    &lt;br/&gt;pred: array of predicted values&lt;p&gt;returns: smoothed mean absolute error loss&lt;br/&gt;&quot;&quot;&quot;&lt;/p&gt;&lt;/span&gt;&lt;br/&gt;loss = np.where(np.abs(true-pred) 0.5*((true-pred)**&lt;span class=&quot;&quot;&gt;2&lt;/span&gt;), delta*np.abs(true - pred) - &lt;span class=&quot;&quot;&gt;0.5&lt;/span&gt;*(delta**&lt;span class=&quot;&quot;&gt;2&lt;/span&gt;))&lt;br/&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;
&lt;span class=&quot;&quot;&gt;return&lt;/span&gt; np.sum(loss)&lt;p&gt;&lt;span class=&quot;&quot;&gt;&lt;span class=&quot;&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;&quot;&gt;logcosh&lt;/span&gt;&lt;span class=&quot;&quot;&gt;(true, pred)&lt;/span&gt;:&lt;/span&gt;&lt;br/&gt;loss = np.log(np.cosh(pred - true))&lt;br/&gt;&lt;span class=&quot;&quot;&gt;return&lt;/span&gt; np.sum(loss)&lt;br/&gt;&lt;/p&gt;&lt;/pre&gt;&lt;/section&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5、Quantile Loss（分位数损失）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在大多数真实预测问题中，我们通常想了解我们预测的不确定性。了解预测值的范围而不仅仅是单一的预测点可以显着改善许多业务问题的决策过程。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当我们有兴趣预测一个区间而不仅仅是预测一个点时，Quantile Loss函数就很有用。最小二乘回归的预测区间是基于这样一个假设：残差（y - y_hat）在独立变量的值之间具有不变的方差。我们不能相信线性回归模型，因为它违反了这一假设。当然，我们也不能仅仅认为这种情况一般使用非线性函数或基于树的模型就可以更好地建模，而简单地抛弃拟合线性回归模型作为基线的想法。这时，Quantile Loss就派上用场了。因为基于Quantile Loss的回归模型可以提供合理的预测区间，即使是对于具有非常数方差或非正态分布的残差亦是如此。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;让我们看一个有效的例子，以更好地理解为什么基于Quantile Loss的回归模型对异方差数据表现良好。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Quantile 回归 vs 普通最小二乘（Ordinary Least Square, OLS）回归&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.4525&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquJHcasjaM2L6EfcmNArbJZGiaL8tQzBqkwo1l4rbb3lH2KRKLVlVFuvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;左：线性关系b/w X1和Y，残差的方差恒定。右：线性关系b/w X2和Y，但Y的方差随着X2增加而变大（异方差）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.4525&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquujCpkT2Qx2A8HvibBVjbtC5yvhDQeSyhgzRavLMeh5x3hcOhiaKPC72Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;橙线表示两种情况下的OLS估计&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.7464788732394366&quot; data-type=&quot;png&quot; data-w=&quot;568&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquVzstKrVfnOibicvY1BQBwPqoqk5WgeIuvSt5SQLSghn6AtsibAkQcfXzw/640?wx_fmt=png&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Quantile回归：虚线表示基于0.05和0.95 分位数损失函数的回归估计&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如上所示的Quantile回归代码在下面这个notebook中。&lt;/span&gt;&lt;/p&gt;

&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;地址：&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;https://github.com/groverpr/Machine-Learning/blob/master/notebooks/09_Quantile_Regression.ipynb&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;了解Quantile Loss函数&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;基于Quantile回归的目的是，在给定预测变量的某些值时，估计因变量的条件“分位数”。Quantile Loss实际上只是MAE的扩展形式（当分位数是第50个百分位时，Quantile Loss退化为MAE）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Quantile Loss的思想是根据我们是打算给正误差还是负误差更多的值来选择分位数数值。损失函数根据所选quantile (γ)的值对高估和低估的预测值给予不同的惩罚值。举个例子，γ= 0.25的Quantile Loss函数给高估的预测值更多的惩罚，并试图使预测值略低于中位数。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.13807531380753138&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquZbv72jVjocwNFC8FHV9fic8EEbqWFNRLBfIDcCwEh8oXGELve8Tnkbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;717&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;γ 是给定的分位数，其值介于0和1之间。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7142857142857143&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquFC5OKMicPfvP9jwqLNMCApYnavRXFpRn2QxVhaXxibs6qFGRN5gJ8fDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;504&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Quantile Loss（Y轴）与预测值（X轴）关系图。真值为Y= 0&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们也可以使用这个损失函数来计算神经网络或基于树的模型的预测区间。下图是sklearn实现的梯度提升树回归。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.75&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquA8JafWRFGibIA96IDFWcKeqTWwpbEiboCYYKd9BZZw4HU1PLias5malqQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;640&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用Quantile Loss的预测区间（梯度提升回归）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;上图显示的是sklearn库的GradientBoostingRegression中的quantile loss函数计算的90％预测区间。上限的计算使用了γ = 0.95，下限则是使用了γ = 0.05。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;▌&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;比较研究&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;“Gradient boosting machines, a tutorial”中提供了一个很好的比较研究。为了演示上述所有的损失函数的性质，研究人员创造了一个人工数据集，数据集从sinc(x)函数中采样，其中加入了两种人造模拟噪声：高斯噪声分量和脉冲噪声分量。脉冲噪声项是用来展示结果的鲁棒效果的。以下是使用不同损失函数来拟合GBM（Gradient Boosting Machine, 梯度提升回归）的结果。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;  ﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.425&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9Fqu16eo4ia9fCPNia0Yo0XovgZU0Y1ibooaFQHq15Eiciaaib0ywGianlBwhuBPA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;连续损失函数：（A）MSE损失函数; （B）MAE损失函数; （C）Huber损失函数; （D）Quantile损失函数。用有噪声的sinc(x)数据来拟合平滑GBM的示例：（E）原始sinc(x)函数; （F）以MSE和MAE为损失拟合的平滑GBM; （G）以Huber Loss拟合的平滑GBM， = {4,2,1}; （H）以Quantile Loss拟合的平滑GBM。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;模拟实验中的一些观察结果：&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;一张图画出所有损失函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;img class=&quot;&quot; data-height=&quot;auto&quot; data-ratio=&quot;0.65&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/BnSNEaficFAZPBQNcxWVdicvljIT6d9FquFEmVhlvKbbicSJkWIKVaI6dbpQYoOYyGIV8dW8kIOI3MSibZOt63ib7fA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;720&quot; data-width=&quot;415px&quot; height=&quot;auto&quot; width=&quot;415px&quot;/&gt;&lt;span&gt;﻿&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;原文链接：&lt;br/&gt;https://heartbeat.fritz.ai/5-regression-loss-functions-all-machine-learners-should-know-4fb140e9d4b0&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;∑编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;来源 | 人工智能头条&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 04 Jul 2018 01:46:28 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/cD8l43kowg</dc:identifier>
</item>
<item>
<title>玩游戏学微积分！探索理工锻炼的游戏化应用, 腾讯发布新游戏《微积历险记》</title>
<link>http://www.jintiankansha.me/t/VlPyCD72hK</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/VlPyCD72hK</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;&quot;&gt;腾讯今天正式公布一款全新功能游戏《微积历险记》 。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;微积分？！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;没错，就是大学数学里的微积分，听起来像听天书的那个？每逢考试必挂科的那个？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/jhgibzXKDS2VxJvO3HdENlQZro4np6LwEM7LNicZPaotS3qxONsg6Nmib4axHDBUH1QtZUicgpxGicxjazibfzdynuwQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;480&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;当你面对微积分、线代、高数、概率迷茫崩溃的时候，你要相信大洋彼岸肯定有一个与你一样的人面对同样的问题。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;为解决数学焦虑，&lt;strong&gt;难学上天的微积分，居然，被做成了，游戏。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;想象一下，当你身处笼罩危机的星球，拯救自己的方法不是打怪，而是熟练应用微积分来闯关，这也太“思路清奇”了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/jhgibzXKDS2WH4gRvQibHdUMM44WhFH5yvX3dT69js5zwSc0LeCtH0nCVAtwMp2v4YZEhtBcJWiaqDZjwF04YZLMw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; width=&quot;auto&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这款游戏由教育类游戏开发公司Triseum开发，腾讯代理。《微积历险记》将游戏与数学充分结合的3D解谜游戏，目的就是帮学生用一种更好玩的方式学习微积分。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;它的来头可不小，&lt;strong class=&quot;&quot;&gt;曾荣获2017年度世界严肃游戏金奖，并获得了SIIA CODiE 最佳数学教学解决方案奖的提名。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这也是继UP2018腾讯新文创生态大会上发布《纸境奇缘》、《坎巴拉太空计划》、《肿瘤医生》、《尼山萨满》4款功能游戏之后，腾讯在功能游戏上做出的又一步探索。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在这款游戏中，你将扮演一名叫做Equa（伊夸）的女孩，被困在可能被太阳风暴摧毁的星球上。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;你必须通过修复桥梁和传送器等建筑来应对即将到来的威胁。所有的谜题设计都需要通过微积分知识来解开。&lt;/span&gt;&lt;/p&gt;

&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt; &lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5631768953068592&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/jhgibzXKDS2WH4gRvQibHdUMM44WhFH5yvrkvw8kCvqiaiafvhyWHEtNyEwtIVicK9iclOwEgiciaXQxn4ic3ast90bTh3g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;554&quot; width=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;你会看到熟悉的函数和象限，你要做的就是推导公式，绘制函数图像，从而激活机关并修复设施。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;就像每个玩家完成一个游戏任务所获得的成就感一样，每一个理科生在攻克高等数学的难题中也会拥有同样的感觉。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/jhgibzXKDS2WH4gRvQibHdUMM44WhFH5yvNy0nQ6QSGsniabteLGzKtwf3TadPfGzLmIicibhkf1G4C0DQVzJsyToMw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; width=&quot;auto&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;游戏分为四大区域，引导你由浅入深参与，从上手操作到解谜通关，带你完成一次难忘的解谜之旅。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;∑编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 03 Jul 2018 13:16:52 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/VlPyCD72hK</dc:identifier>
</item>
</channel>
</rss>