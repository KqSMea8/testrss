<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed43.com%2Fmathalg-jtks.xml&amp;max=5&amp;links=preserve&amp;exc=1" />
<atom:link rel="alternate" title="Source URL" href="http://feed43.com/mathalg-jtks.xml" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1" />
<title>算法与数学之美</title>
<link>http://www.jintiankansha.me/column/c9dZ5TM2aS</link>
<description>算法与数学之美 - 今天看啥</description>
<ttl>360</ttl>
<item>
<title>算法，天使还是魔鬼?</title>
<link>http://www.jintiankansha.me/t/JunyYpx7Lj</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/JunyYpx7Lj</guid>
<description>&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;92307&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.3125&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/Giaiaz5rZqia8HhH3FFhXZE1lUZgQ81pf3d3ogAE7MN3h8wPkgsibF9efjBiass1RrA7gXFcibXr03KInWdz79WoHryg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;112&quot; data-width=&quot;100%&quot; width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section readability=&quot;3.5&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;7&quot;&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;随着算法的诞生，智人似乎终于制造出了一种可以实现一切愿望的工具。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如今，算法已经无孔不入，我们的工作、社交、医疗、工业、运输、贸易无不有算法的重大参与。各种算法正改变着自然科学和人文科学，让技术不断突破“不可能”的极限。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.3733333333333333&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/Giaiaz5rZqia8HhH3FFhXZE1lUZgQ81pf3d7kzMCkxDkDa2eiah5nmvCfq486WkT53IQfZmjaDyBc0UA8p4HVv04Aw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;75&quot; data-width=&quot;100%&quot; width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;但是，算法也令人担忧：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;某些制造业消失了，归根结底是算法摧毁了这些职业；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;保险公司应赔偿事故中的受害者，然而一个“冷酷无情”的算法降低了赔偿金额；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;股市暴跌，算法是这场灾难的操盘手；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;法律限制公民自由，政府用算法监视我们；&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;在国际象棋或围棋大赛上，算法击败了人类，机器很快将凌驾于我们之上。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5703125&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKecFMxTvumNQ6w8eKAZOJ49AZT4qkA29UDQprYrRiav4gS8TsL7QLLhVg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法，到底是天使还是魔鬼？我们在享受算法带给我们魔力的同时，为什么要指责算法带来了磨难？因为算法打乱了我们原本的习惯？或许吧。但还有另一个原因：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;人们经常使用算法，却不了解它们的本质是什么，又是如何运作的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;什么是算法？今天，我们邀请小伙伴们一起探究一下算法的本质。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;88227&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img border=&quot;0&quot; class=&quot;&quot; data-ratio=&quot;1&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeWxXVib7EKicxxZSTjng8vQ3fj0WWpKN9zJlibSlDPyIIw3SibP23OHD9rw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;80&quot; height=&quot;auto&quot; width=&quot;40&quot;/&gt;&lt;/section&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;section readability=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;我&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.6666666666666667&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeN6abSTZDQw5OcNLspOMR6DM2lib1VDEqGUYTgQEpNUFeUfoYnicYfzKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;18&quot; width=&quot;10px&quot;/&gt;&lt;/section&gt;&lt;section data-style=&quot;line-height: 1.2;margin: 0px;font-size: 14px;&quot; class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;你好，机器人，请给我解释一下什么是算法。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section readability=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;机器人&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; data-style=&quot;line-height: 1.2;margin: 0px;font-size: 14px;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;好的。但与此同时，我还会告诉你算法、计算机和程序之间的联系。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.6666666666666667&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKe4g8obNjLBuPzqs8Fo5uycIr7V9BwfrsDicwXfh7cJwG3CtEUeD7CqKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;18&quot; width=&quot;10px&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img border=&quot;0&quot; class=&quot;&quot; data-ratio=&quot;1&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeqBAWzbsGm7PjwuBQmK9F8TNZIWibwVwDrv3xZZubv79Z8RicExib5JCOg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;80&quot; height=&quot;auto&quot; width=&quot;40&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;section class=&quot;&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;88227&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img border=&quot;0&quot; class=&quot;&quot; data-ratio=&quot;1&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeWxXVib7EKicxxZSTjng8vQ3fj0WWpKN9zJlibSlDPyIIw3SibP23OHD9rw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;80&quot; height=&quot;auto&quot; width=&quot;40&quot;/&gt;&lt;/section&gt;&lt;section readability=&quot;1.5&quot;&gt;&lt;p&gt;&lt;span&gt;我&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.6666666666666667&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeN6abSTZDQw5OcNLspOMR6DM2lib1VDEqGUYTgQEpNUFeUfoYnicYfzKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;18&quot; width=&quot;10px&quot;/&gt;&lt;/section&gt;&lt;section data-style=&quot;line-height: 1.2;margin: 0px;font-size: 14px;&quot; class=&quot;&quot; readability=&quot;3&quot;&gt;&lt;p&gt;&lt;span&gt;我知道。当我们找到一种算法时，需要将它写成程序的形式，而我们对计算机的要求也不只是单纯地为我们工作。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;机器人&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; data-style=&quot;line-height: 1.2;margin: 0px;font-size: 14px;&quot;&gt;&lt;p&gt;&lt;span&gt;完全正确。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.6666666666666667&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKe4g8obNjLBuPzqs8Fo5uycIr7V9BwfrsDicwXfh7cJwG3CtEUeD7CqKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;18&quot; width=&quot;10px&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img border=&quot;0&quot; class=&quot;&quot; data-ratio=&quot;1&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeqBAWzbsGm7PjwuBQmK9F8TNZIWibwVwDrv3xZZubv79Z8RicExib5JCOg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;80&quot; height=&quot;auto&quot; width=&quot;40&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;88227&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;section&gt;&lt;section&gt;&lt;img border=&quot;0&quot; class=&quot;&quot; data-ratio=&quot;1&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeWxXVib7EKicxxZSTjng8vQ3fj0WWpKN9zJlibSlDPyIIw3SibP23OHD9rw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;80&quot; height=&quot;auto&quot; width=&quot;40&quot;/&gt;&lt;/section&gt;&lt;section readability=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;我&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.6666666666666667&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeN6abSTZDQw5OcNLspOMR6DM2lib1VDEqGUYTgQEpNUFeUfoYnicYfzKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;18&quot; width=&quot;10px&quot;/&gt;&lt;/section&gt;&lt;section data-style=&quot;line-height: 1.2;margin: 0px;font-size: 14px;&quot; class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;有了算法，一切皆有可能吗？&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section readability=&quot;1&quot;&gt;&lt;p&gt;&lt;span&gt;机器人&lt;/span&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; data-style=&quot;line-height: 1.2;margin: 0px;font-size: 14px;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;并非如此……但是，无限的可能或许就是算法极具魅力的原因吧。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.6666666666666667&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKe4g8obNjLBuPzqs8Fo5uycIr7V9BwfrsDicwXfh7cJwG3CtEUeD7CqKQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;18&quot; width=&quot;10px&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;img border=&quot;0&quot; class=&quot;&quot; data-ratio=&quot;1&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeqBAWzbsGm7PjwuBQmK9F8TNZIWibwVwDrv3xZZubv79Z8RicExib5JCOg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;80&quot; height=&quot;auto&quot; width=&quot;40&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;

&lt;p&gt;&lt;span&gt;想理解什么是算法，我们要先设想一个场景。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;几千年前，一位祖先凭着他对已故祖母如何做面包的记忆，尝试自己做面包。但是，他真的不知道该怎么做。他犹豫着，一开始先将麦仁放入沸水中，然后对自己说，这也许是个糟糕的想法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这位祖先的困境，正是我们都会面临的情况——遇到某一个问题，却又不知道该如何解决。我们想着解决方法，去尝试，反复探索实验，顺便有了一点点意外发现，直至成功……或者失败。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然而，真正的面包师并不是这样做的。他们不会给每炉面包都重制一个烘焙食谱，因为他们已经掌握并牢记了面包的烘焙方法，拥有了面包食谱。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;事实上，人类文明的发展不仅源于有些人的发明创造，也因为另有人“复制”了这些发明，才使其得以改进。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，我们忘却了面包食谱的宝贵之处。首先，食谱降低了不确定性：多亏了它，面包师知道，除非突遭一场灾难，否则面包将会在晚餐时准备好。有了这个食谱，不需要什么想象力或是天赋，任何人都可以做面包。就拿我们普通人来说，我们对面包烘焙没有任何天赋，但仍可以从网页上找到恰巴提的食谱，运用适当的和面力度，借助更富有想象力和才华的面包师们写下的方法，做出面包。最终，这个食谱成为了人类遗产中的一部分，在几千年的历史长河中，代代相传。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;食谱就是一个算法，我们就此有了“算法”概念的初步定义：&lt;strong&gt;一个算法是解决一个问题的进程。&lt;/strong&gt;我们并不需要每次都发明一个解决方案。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从这个定义不难看出，自人类历史初期，我们就一直在发明、使用和传播着各种各样的“算法”，用来烹饪、雕琢石器、钓鱼、种植扁豆及小麦，等等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Ⅰ 进程和符号&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt; &lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeyuElqwUTPze7VqPye9hFdyh2ic60T6VYNeHz8ibKZvPZjFeFibgvEg9pQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有些算法与面包食谱不同，它们能解决书写符号的问题，例如数字、字母等。算法汇集在一起，形成蕴含不同含义的数目、词语、句子及文本。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如，二分查找算法的用途是在字典中搜索某个特定词。二分查找法从字典中间开始查找，对比目标词与中间词的位置，根据目标词位于中间词的前或后，来选择字典的前半部分或后半部分作为新字典，然后再用二分查找法继续查找，以此类推，直到找到目标词为止。这一算法解决涉及一种书写符号——字母的问题。还有一些算法可以实现加法、减法等，解决涉及另一种书写符号——数字的问题。这类算法被称为“符号算法”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;计算机科学家往往将“算法”一词的含义限定为此类“符号算法”。考虑到这种限制，自然，我们就不能将算法的历史追溯到文字发明之前了。然而，广义上的算法概念其实与文字同样古老。从迄今人类所发现的最古老的书面踪迹表明，古代书吏已经开始使用算法了，例如用于记账的加法和乘法。文字可能就是因此而发明的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Ⅱ 算法和数学&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKextxy9xHTmPK3RfzThLG4VrsPTTj44RqYia5hhMB68FTmNSHrL69ZHuw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数学家们从很早便开始关注算法的设计了。比如，大约公元前300 年的欧几里得算法可以计算两个整数的最大公约数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们简单说明一下。读者若是在攀登数学高峰时感到吃力，大可以直接跳过这一段，或把以下内容当作一首深奥的诗，尽量去理解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一般来说，一个算法会在输入端接收数据，这些数据构成了算法的参数。在欧几里得算法中，输入数据就是两个不为零的整数，设为a 和b，且a 大于b，例如a 等于471，b 等于90。通常，算法会在输出端返回另一些数据。在欧几里得算法中，输出数据是一个整数，即a 和b 的最大公约数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;将欧几里得算法应用在整数471 和90 上，即有：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;用90 和21 替代471 和90，&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;然后用21 和6 替代，&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;接着用6 和3 替代，&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;再用3 替代，这时3 即为所求。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;在上述例子中，算法的每一步都需要计算a 除以b 的余数r，随后用被除数b 替代除数a，余数r 替代被除数b。因此，由471=5×9 + 21 可知，471 除以90 的余数为21。在第一步中，第一个数471 被90 替代，而第二个数90 则被余数21 替代，以此类推。但有一个例外：当余数为0时，就停止计算，且数b 即为最终结果。这种情况出现在上述例子中的最后一步：我们用6 除以3，余数为0，那么3 即为所求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKePmyBvMicCduMEpbaHPfF0xMU6XP7FYUrvkNIOfAShc1oCibwRuRWPRMA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法也是中世纪西方数学家所关注的核心问题。数学家们引进了印度- 阿拉伯数字，以及与这种数字系统配套的算法。其中一本著作是通晓阿拉伯语的波斯数学家穆罕默德·穆萨·花拉子米在9 世纪撰写的《印度计算法》（Algoritmi de numero indorum）一书。“花拉子米”（al-Khuwārizmī）一名源自作者的出生地花剌子模地区，今属乌兹别克斯坦。有文献证明，自1230 年起，花拉子米这个名字就成了“算法”（algorithm）一词的来源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Ⅲ 用语言来表达&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法会自然而然地运用到与数学有关的对象上。其实，人类的一切活动中都有算法的身影，算法概念涉及到方方面面。但我们要先解决一个关键问题：如何描述算法？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设我们想从巴纽火车站到达位于卡尚镇的巴黎萨克雷高等师范学院。几十个学生和教师每天早上都走同一条道路：首先沿着杜邦皇家大道走，接着是布里昂城堡大道。在不知不觉中，他们可能就用到了算法——一种从火车站到校园的程序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;谷歌地图提供了这个算法的图形形式：&lt;/span&gt;&lt;/p&gt;

&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.578125&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeKsLBz1PSXhaLlqzhHzDZoHsictr2aicE92iaryclMkglYnvzXBS1C0pNA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;1280&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同时也有一个文本形式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.41226993865030676&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKejsRQuWZA537nqVYEE8Yh5qVd1IvSNsmm3uR9qiaQEwFyC5b5HvxBc2g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;815&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果我们给一个大学生解释这个算法，用一个简明扼要的方式就能表达清楚，但如果要给一个小孩子解释，就需要更详尽的细节。因此，讲解算法的方式是一个社会学问题，取决于谈话对象和谈话对象拥有的常识水平。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同样，欧几里得算法也可以用文字形式表达：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;计算a 除以b 的余数r，&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;当r 不为0 时，&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;用b 替代a，&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;用r 替代b，&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;继续计算a 除以b 的余数r，&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;当余数r 为0 时，b 即为所求。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;维基百科又提供了一种图形表达式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6307692307692307&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeTx9Ik0ZLtOgGF4PsTr5gF3Licv2toia0Zcq0MvqE8nCFxicZugp9SzLQg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;715&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;所以，一种算法可以有不同的语言表达形式。然而，有一种表达形式不依赖于语言。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一名学生没睡醒就去了校园，走起路来晃晃荡荡，就像在梦游，他运行的这个随机算法没有任何语言表述。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还有一个例子能更好地说明这一令人困惑的现象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;蚂蚁寻找食物时，使用了非常复杂的算法，在空间里进行定向。侦察蚁开始随机浏览蚁穴四周。当其中一只蚂蚁发现食物的时候，便会在返回自己蚁群的一路上留下跟踪信息素。受到跟踪信息素的指引，其他路过此区域的蚂蚁会沿着这条路径前行。当蚂蚁带着食物返回蚁穴时，也会一路留下自己的跟踪信息素，以增强轨迹信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果有两条路径都能到达同一个食物源，那么在同一时间内，沿最短路径行走的蚂蚁往返蚁穴与食物之间的次数将比沿着长路径走的蚂蚁更多。于是，前者也会留下更多的跟踪信息素。这时，最短路径的信息将会更强，也越来越具有吸引力。跟踪信息素是有挥发性的，如此一来，被冷落的最长路径最终会消失。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5609375&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeKzuYe65HEbicwJpn8ibjPKg6xbc3wB0nCxUqicoepAoXft8cF7cWHlGCg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;蚁群利用一个复杂的算法确定了最短路径。早在蚁学家用语言记下这种现象之前，蚂蚁就很好地运用了这个进程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;确切地说，人与蚂蚁之间的区别在于，我们会尝试用语言表达、存储、传输、理解和改进算法。然而，我们有时也会用到不知该如何用语言表达的算法。比如，我们很容易就能辨认出猫和狗，却难以解释是如何做到的：是计算腿和耳朵的数量呢？还是观察头的形状或毛发的纹理呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们的大脑和身体会用很多算法来思考、运动、做事，但不管是符号算法，还是其他算法，我们并不总知道如何解释。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;strong&gt;&lt;span&gt;Ⅳ 指令序列之外&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从巴纽火车站到高等师范学院的算法可以表示成一个包含四个基本动作的逻辑序列：“取道东南方，向上朝着兰斯街的杜邦皇家大道”“然后……”“接着……”“再然后……”。欧几里得算法表达式中也出现了一些基本指令，比如赋值：“用b 替代a”。此外还有将这些指令封装成逻辑序列的句法结构，比如“这样做，然后那样做”，以及循环体，比如“当某条件为真时，重复此操作”。我们还可以添加条件测试语句：“如果此条件为真，那么这样做。”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种方式听起来有点不寻常。事实上，只要很少的句法结构，就足以表达所有的符号算法，例如上述四个句法结构：赋值、逻辑序列、循环体、条件测试语句。算法的宝贵之处并不在于其组成有多么复杂，而恰恰在于这种将几个简单成分封装在一起的方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKezU1U0eHRUkq5dBgkIBDAoJ0kLZS3Z2lJsL3bfkQ3fZEWGvZJRhvERw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这就好比化学分子：数十亿个化学分子组成了我们所熟知的几十种化学元素；而这些化学元素本身仅由三种基本粒子——质子、中子和电子组成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然而，尽管构建算法的基本元素在理论上非常充足，人们却很少从头开始构建算法：算法往往由其他一些已知的算法构成。例如，我们用算法描述了从巴纽地铁快线站到高等师范学院的路线。如果我们现在想从卢森堡公园到达校园的话，那么一个简单的算法就是：先乘坐地铁快线从卢森堡站到巴纽站，然后再运用先前的算法——这个算法被看成是一个整体。此时，一个全新的算法就这样形成了。我们并不清楚先前算法的细节，而是把它视为一个新的基本指令。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Ⅴ 算法和数据&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6640625&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeb4AsozHzSpZGyctlLUORjepRpx4yaqEnTY8z2uIV2r74e2W3LO9daQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;能够解决符号信息问题的算法，更注重这些符号信息的呈现方式。例如，为了更好地执行加减乘除运算的算法，用阿拉伯数字形式的算式123 × 456，比写成罗马数字的算式CXXIII × CDLVI 更好。同样，在字典中查找单词，用字母表查找比用象形文字查找更简单。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;寻找从一个点到另一个点路径的算法，同样在意数据的表达形式。如果某个城市的地图像照片一样，一个像素接一个像素地被给出，那就很难找到想要的路径。最好可以用综合的方法去描述，比如整合各个十字路口，通过连接街道，赋予每一段路一个长度。这样一来，与其费力地从一个像素移动到另一个像素，不如从一个十字路口跳到另一个十字路口的算法来得轻巧。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Ⅵ 算法的方法&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;已知的算法有很多，例如“分治法”“枚举测试法”“贪心算法”“随机算法”等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“分治法”是把一个复杂的问题拆分成两个较为简单的子问题，进而两个子问题又可以分别拆分成另外两个更简单的子问题，以此类推。问题不断被层层拆解。然后，子问题的解被逐层整合，构成了原问题的解。高德纳曾用过一个邮局分发信件的例子对“分治法”进行了解释：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeRKPKBTEcjeHib3ukwQF0kr3aQDZYZ0RysdSGAYxuq1LuCXEdoPQx41A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;信件根据不同城市区域被分进不同的袋子里；每个邮递员负责投递一个区域的信件，对应每栋楼，将自己负责的信件分装进更小的袋子；每个大楼管理员再将小袋子里的信件分发给对应的公寓。&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;&lt;section readability=&quot;5&quot;&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.9787234042553191&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/riafuBXuN2hrRUCqP3cRSW9Zj4C8DASdNLUwXKI8FDQaVIb6VujAz7icUzVic5xtibg1QMOn20FiabA0ibiaQp3ibd0b7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;47&quot; width=&quot;auto&quot;/&gt;&lt;/section&gt;&lt;section https:=&quot;&quot; fill=&quot;&quot; rgb=&quot;&quot; left=&quot;&quot; break-word=&quot;&quot; readability=&quot;10&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;高德纳&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;高德纳（又译唐纳德·克努斯）生于1938 年，是著名的计算机科学家，也是现代算法的先驱之一。他的系列巨著《计算机程序设计艺术》在计算机科学界享誉多年。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;多年前，高德纳对现有的数学文本处理工具感到不满，于是创建了自己的工具TeX 和Metafont。如今，这两个工具成为广泛应用的免费软件。&lt;/span&gt;&lt;/p&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;span&gt;很多著名的算法都以他的姓氏命名，如克努斯- 莫里斯- 普拉特算法、罗宾逊- 申恩- 克努斯算法、克努斯-本迪克斯算法。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;“枚举测试法”列举出待解决问题的所有可能解，然后逐一进行检验，最后从中找出符合要求的解。举个例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.69375&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeu7a0OWW3o6tSmb7VxG6zSz4l8mgAhQ3QiaiahN500tsoAzPE9IgicfUicA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一位旅行推销员必须依次访问几个不同城市拜访客户，他通常会寻找几个城市之间的最短回路，来安排自己的旅程。寻找最短回路的算法旨在计算所有可能的回路。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如有10 个客户，依次拜访10 个客户共有3 628 800 种回路组合方式，分别计算每种组合方式的回路长度，然后选择最短的那条。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当枚举测试法所需的计算量太大时，使用“贪心算法”能够找到一个合理的解决方案，使问题结果最优化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如，当旅行推销员有20 位客户要访问时，用枚举测试法可能需要测试超过2 兆条可能的路线。与其这样一个个枚举，不如就地运行另一个算法：推销员每次都从当前所在城市选择去往距离自己最近的下一个城市，以此类推。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个算法会选择当前最短距离作为计算的公里数，而且，永不退回到曾经选择过的路线上。一般来说，贪心算法找到的解决方案可能不是最好的，但却是“合理的”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeHx2XCSDjibDicPyicmKDzM9yycg0RrkTFyCSibdvsXtw49Q2hMFTQtd1PQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们之前见过一个使用“随机算法”的例子：为了找到食物，侦察蚁从随机浏览蚁穴四周开始。同样，许多其他算法也用到了随机源。比如，“蒙特卡洛算法”能确定正方形内一个复杂图形的面积：在正方形中随机抽取一个点，就像扔飞镖一样，飞镖落在哪个点就取哪个点；大数定律告诉我们，这些点落入复杂图形内的频率接近于复杂图形面积和正方形面积之比。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Ⅶ 机器学习&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKeIVx68JcF78J7EFyySItHicnQbYcPQjJlaHw95voLFYr8RG3C4mVbS6A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们要讨论到的最后一个方法是“学习程序”。学习做面包、在字典中查找单词，人类对此习以为常。但很多人可能想不到，算法也可以学习。就像面包师每天能从自己的工作中学习、提高一样，算法也可以从重复相同的任务中学习、进步。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;音乐、视频、图书分享平台上使用的“推荐算法”就是一种会学习的算法。系统程序会向用户推荐：“如果你喜欢《亚瑟王》，那你应当也喜欢《彼得·格里姆斯》。”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;提出这样的推荐，系统并不是基于亨利·珀塞尔和本杰明·布里顿之间的联系A。简单地说，系统的判断是基于对之前用户的听歌记录的分析：事实上，那些听过《亚瑟王》的用户之中，确实有很多人也听了《彼得·格里姆斯》；或者，算法尝试寻找一些我们可能并不认识，但品味却与我们接近的用户。在这两种情况下，算法学习、发现、统计了歌曲之间或者用户之间的相似性。从这样的学习程序出发，算法可以预测用户可能喜欢什么样的音乐，并因此会忍不住收听或者购买其他哪些作品。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这些会学习的算法有助于我们重新审视自身的学习方式。推荐算法既没有认识到珀塞尔和布里顿之间的联系，也不需要拥有任何专业的音乐史知识。它只是对用户的选择进行观察，并从所见所闻中学习。事实上，这与一个孩子学习母语的过程没什么两样——从观察周围说话的人开始，然后用大量时间去模仿，不需要理解语法、动词变位和动宾搭配的问题。一个小孩知道应该说“我去学校”，而不是说“我走学校”，却无法解释为什么。正如推荐算法会向用户推荐本杰明·布里顿，却不能解释为什么用户可能喜欢这个作曲家。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6671875&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/riafuBXuN2hp1icTd4cIFlBfaLVJBr4fKerXCw5IwspPXHzTO2HaWcXFc6MAw7hiapOVTP6aEu04tDU0LFiaqFfGcg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有些学习程序的问题很难解决。假如我们要识别物体，如一只狗、一只猫、一张桌子，等等。在一张图像中，数据以像素的形式呈现，通过统计分析图像中的黑色或者蓝色像素点，很难区分这是一只狗还是一张桌子。这时，必须使用更复杂的学习算法——深度学习算法。深度学习算法首先尝试从图像中找到直线、圆、爪子、腿、桌脚……然后再寻找越来越复杂的物体对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法同样也是逐步建立越来越抽象的图像表达，最终找到被识别的物体。难点是，算法如何知道需要识别哪一种元素？是爪子、腿，还是桌脚？没关系，算法会通过自身的经验进行学习。例如，深度学习算法可以让下围棋的程序取得巨大进步，打败最优秀的人类围棋选手。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Ⅷ 写在最后的话&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法自身是没有任何企图的，它们由人类设计，我们希望算法是什么样的，它们就会以什么样的姿态呈现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;∑编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;来源 | 校苑数模&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 30 Jun 2018 16:35:17 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/JunyYpx7Lj</dc:identifier>
</item>
<item>
<title>Linux 系统进程、线程之间的爱恨纠葛...</title>
<link>http://www.jintiankansha.me/t/bFgNcbCudt</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/bFgNcbCudt</guid>
<description>&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;92307&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section&gt;&lt;section data-width=&quot;100%&quot;&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.3125&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/Giaiaz5rZqia8HhH3FFhXZE1lUZgQ81pf3d3ogAE7MN3h8wPkgsibF9efjBiass1RrA7gXFcibXr03KInWdz79WoHryg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;112&quot; data-width=&quot;100%&quot; width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section readability=&quot;1.5&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;3&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt; 当一个程序开始执行后，在开始执行到执行完毕退出这段时间内，它在内存中的部分就叫称作一个进程。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.3733333333333333&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/Giaiaz5rZqia8HhH3FFhXZE1lUZgQ81pf3d7kzMCkxDkDa2eiah5nmvCfq486WkT53IQfZmjaDyBc0UA8p4HVv04Aw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;75&quot; data-width=&quot;100%&quot; width=&quot;100%&quot;/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;Linux 是一个多任务的操作系统，也就是说，在同一时间内，可以有多个进程同时执行。我们大家常用的单CPU计算机实际上在一个时间片段内只能执行一条指令。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么Linux是如何实现多进程的同时执行的呢？原来Linux使用了一种称为” 进程调度 “的手段，首先，为每个进程指派一定的运行时间，这个时间通常很短，短到以毫秒为单位，然后依照某种规则，从众多的进程中挑选一个投入运行，其他进程暂时等待，当正在运行的那个进程时间耗尽，或者执行完毕退出，或因某种原因暂停，Linux就会重新调度，挑选一个进程投入运行，因为每个进程占用的时间片段都很短，从使用者的角度来看，就好像多个进程同时运行一样。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img border=&quot;0&quot; class=&quot;&quot; data-ratio=&quot;0.6666666666666666&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/tuSaKc6SfPp9J7uNTht0Wj4XBHDPnjRgk2BIAibUPZiac8vT86ibrdKGLxyTpCDLib9JtILhibEu4TZSlic1vAniblgibA/640?&quot; data-type=&quot;jpeg&quot; data-w=&quot;600&quot; height=&quot;auto&quot; title=&quot;&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在Linux中，每个进程在创建的时都会被分配一个数据结构，称为进程控制块（PCB）。PCB中包含了很多重要的信息，供系统调度和进程本事执行使用，其中最重要的莫过于进程的ID，进程的ID也被称为进程标示符，是一个非负的整数，在Linux操作性系统中唯一的标志一个进程。在最常使用的I386架构上，一个非负的整数的取值是0~32767，这也是我们所可能取到的进程ID，它就是进程的身份证号码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;僵尸进程的产生&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;僵尸进程就是已经结束的进程，但是还没有从进程表中删除。僵尸进程太多会导致进程表里面条目满了，进而导致系统崩溃，倒是不占用系统资源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在进程的状态中，僵尸进程是非常特殊的一种，它已经放弃了几乎所有的内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个为位置，记载该进程的退出状态等信息供其他进程收集，除此之外，僵尸进程不再占用任何内存空间，它需要它的父进程来给它收尸，如果父进程没安装SIGCHLD信号处理函数调用wait或waitpid（）等待子进程结束，又没有显示的忽略该信号，那么它就一直处于僵尸状态。如果父进程结束了，那么init进程会自动接手这个子进程，为它收尸，他还是能够被清除的。但是如果父进程是一个循环，不会结束，那么子进程就一直处于僵尸状态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;僵尸进程产生的原因:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个Linux进程在进程表中都有一个进入点（Entry），核心程序在执行该进程时使用到的一切信息都存储在进入点。当使用ps命令查看系统中的进程信息时，看到的就是进程表中的相关数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当fork系统调用建立一个新的进程以后，核心进程就会在进程表中给这个新进程分配一个进入点，然后将相关信息存储在该进入点所对应的进程表中，这些信息中有一项是父进程的识别码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当这个进程走完了自己的生命周期后，它会执行exit（）系统调用，此时原来进程表中的数据会被该进程的退出码、执行时所用的CPU时间等数据所取代，这些数据会一直保留到系统将它传递给它的父进程为止。由此可见，僵尸进程的出现时间实在子程序终止后，但是父进程尚未读取这些数据之前。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;strong&gt;如何避免僵尸进程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、父进程通过wait和waitpid等函数等待子进程结束，这会导致父进程挂起&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、如果父进程很忙，那么可以用signal函数为SIGCHLD安装handler，因为子进程结束后，父进程会收到该信号，可以在handler中调用wait回收。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、如果父进程不关心子进程什么时候结束，那么可以用“singal（SIGCHLD），SIG_IGN”通知内核，自己对子进程的结束不感兴趣，那么子进程结束后，内核会回收，并不再给父进程发送信号。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、还有一些技巧，就是fork（）两次，父进程fork一个子进程，然后继续工作，子进程fork一个孙进程后退出，那么孙进程被init接管，孙进程结束后，init会回收，不过子进程回收还要自己做。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;进程 PK 线程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们先打个比方，多线程是十字路口多线程是平面交通系统，造价低，但是红绿灯多，老堵车，而多进程是则是立交桥，虽然造价高，上下坡多耗油，但是不堵车。这是一个抽象的概念。相信大家看完会有这种感觉。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程和线程是两个相对的概念，通常来说，一个进程可以定义程序的一个实例（Instance）。在Win32中，进程并不执行什么，它只是占据应用程序所使用的地址空间。为了让进程完成一定的工作，进程必须至少占有一个线程，正是这个线程负责包含进程地址空间中的代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实际上，一个进程可以包含几个线程，它们可以同时执行进程地址空间中的代码。为了做到这一点，每个线程有自己的一组CPU寄存器和堆栈。每个进程中至少有 一个线程在执行其地址空间中的代码。如果没有线程执行进程地址空间中的代码，进程也就没有继续存在的理由，系统将自动清除进程及其地址空间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;多线程的实现原理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;创建一个进程时，它的第一个线程称为主线程（Primary thread），由系统自动生成。然后可以由这个主线程生成额外的线程，而这些线程，又可以生成更多的线程。在运行一个多线程的程序时，从表面上看，这些线程似乎在同时运行。而实际情况并非如此，为了运行所有的这些线程，操作系统为每个独立线程安排一些CPU时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;单CPU操作系统以时间片轮转方式向线程提供时间片（Quantum），每个线程在使用完时间片后交出控制，系统再将CPU时间片分配给下一个线程。由于每个时间片足够的短，这样就给人一种假象，好像这些线程在同时运行。创建额外线程的唯一目的就是尽可能地利用CPU时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;多线程的问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用多线程编程可以给程序员带来很大的灵活性，同时也使原来需要复杂技巧才能解决的问题变得容易起来。但是，不应该人为地将编写的程序分成一些碎片，让这些碎片按各自的线程执行，这不是开发应用程序的正确方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;线程很有用，但当使用线程时，可能会在解决老问题的同时产生新问题。例如要开发一个字处理程序，并想让打印功能作为单独的线程自己执行。这听起来是很好的主意，因为在打印时，用户可立即返回，开始编辑文档。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但这样一来，在该文档被打印时文档中的数据就有可能被修改，打印的结果就不再是所期望的内容。也许最好不要把打印功能放在单独的线程中，不过如果一定要用多线程的话，也可以考虑用下面的方法解决：第一种方法是锁定正在打印的文档，让用户编辑其他的文档，这样在结束打印之前，该文档不会作任何修改；另一个方法可能更有效一些，即可以把该文档拷贝到一个临时文件中，打印这个临时文件的内容，同时允许用户对原来的文档进行修改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当包含文档的临时文件打印完成时，再删去这个临时文件。通过上面的分析可以看出，多线程在帮助解决问题的同时也可能带来新问题。因此有必要弄清楚，什么时候需要创建多线程，什么时候不需要多线程。总的来说，多线程往往用于在前台操作的同时还需要进行后台的计算或逻辑判断的情况。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;线程的分类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在MFC中，线程被分为两类，即工作线程和用户界面线程。如果一个线程只完成后台计算，不需要和用户交互，那么可以使用工作线程；如果需要创建一个处理用户界面的线程，则应使用用户界面线程。这两者的主要区别在于，MFC框架会给用户界面线程增加一个消息循环，这样用户界面线程就可以处理自己消息队列中的消息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样看来，如果需要在后台作一些简单的计算（如对电子表格的重算），则首先应考虑使用工作线程，而当 后台线程需要处理比较复杂的任务，确切地说，当后台线程的执行过程会随着实际情况的不同而改变时，就应该使用用户界面线程，以便能对不同的消息作出响应。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;线程的优先级&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;span&gt;当系统需要同时执行多个进程或多个线程时，有时会需要指定线程的优先级。线程的优先级一般是指这个线程的基优先级，即线程相对于本进程的相对优先级和包含此线程的进程的优先级的结合。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;操作系统以优先级为基础安排所有的活动线程，系统的每一个线程都被分配了一个优先级，优先级的范围从0到31。运行时，系统简单地给第一个优先级为31的线程分配CPU时间，在该线程的时间片结束后，系统给下一个优先级为31的线程分配CPU时间。当没有优先级为31的线程时，系统将开始给优先级为30的线程分配CPU时间，以此类推。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了程序员在程序中改变线程的优先级外，有时程序在执行过程中系统也会自动地动态改变线程的优先级，这是为了保证系统对终端用户的高度响应性。比如用户按了键盘上的某个键时，系统就会临时将处理WM_KEYDOWN消息的线程的优先级提高2到3。CPU按一个完整的时间片执行线程，当时间片执行完毕后，系统将该线程的优先级减1。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;线程的同步&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在使用多线程编程时，还有一个非常重要的问题就是线程同步。所谓线程同步是指线程之间在相互通信时避免破坏各自数据的能力。同步问题是由前面说到的Win32系统的CPU时间片分配方式引起的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;虽然在某一时刻，只有一个线程占用CPU（单CPU时）时间，但是没有办法知道在什么时候，在什么地方线程被打断，这样如何保证线程之间不破坏彼此的数据就显得格外重要。在MFC中，可以使用4个同步对象来保证多线程同时运行。它们分别是临界区对象（CCriticalSection）、互斥量对象（CMutex）、信号量对象（CS emaphore）和事件对象（CEvent）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在这些对象中，临界区对象使用起来最简单，它的缺点是只能同步同一个进程中的线程。另外，还有一种基本的方法，本文称为线性化方法，即在编程过程中对一定数据的写操作都在一个线程中完成。这样，由于同一线程中的代码总是按顺序执行的，就不可能出现同时改写数据的情况。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在线程中（相对与进程而言），线程是一个更加接近执行体的概念，它可以与同进程的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。这两者都可以提高程序的并发度，提高程序运行的效率和响应的时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源管理和保护；而进程正好相反。根本的区别就一点：用多进程每个进程有自己的地址空间，线程则共享地址空间，在速度方面：线程产生的速度快，线程间的通讯快，切换快等，因为他们在同一地址空间内。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在资源利用率方面：线程的资源率比较好也是因为他们在同一地址空间内。 在同步方面：线程使用公共变量/内存时需要使用同步机制，因为他们在同一地址空间内进程中：子进程是父进程的复制品，子进程获得父进程数据空间、堆和栈的复制品。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;∑编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;来源 | 民工哥Linux运维&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 29 Jun 2018 15:35:45 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/bFgNcbCudt</dc:identifier>
</item>
</channel>
</rss>