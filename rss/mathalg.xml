<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed43.com%2Fmathalg-jtks.xml&amp;max=5&amp;links=preserve&amp;exc=1" />
<atom:link rel="alternate" title="Source URL" href="http://feed43.com/mathalg-jtks.xml" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1" />
<title>算法与数学之美</title>
<link>http://www.jintiankansha.me/column/c9dZ5TM2aS</link>
<description>算法与数学之美 - 今天看啥</description>
<ttl>360</ttl>
<item>
<title>EM算法的九层境界：​Hinton和Jordan理解的EM算法</title>
<link>http://www.jintiankansha.me/t/pfpblOcZHU</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/pfpblOcZHU</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;导读&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;知乎上有一个讨论：EM算法存在的意义是什么？是什么原因使得EM算法这么流行呢？EM算法是Hinton和Jordan强强发力的领域，本文作者纵向解析EM算法的9层境界，深入浅出，值得一读。&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;Hinton, 这个深度学习的缔造者( 参考 &lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMjU1NTg3Ng==&amp;amp;mid=2247484201&amp;amp;idx=1&amp;amp;sn=733233e755ceddf7c848dd7186c44595&amp;amp;chksm=e8925722dfe5de34b86f95cff4642d21923099b4fa42ccc77218f9b4a6fef1300a146e5701a3&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;攒说 Geoff Hinton&lt;/span&gt;&lt;/a&gt;&lt;span&gt; ) ， Jordan 当世概率图模型的集大成者（参考 “&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMjU1NTg3Ng==&amp;amp;mid=2247484756&amp;amp;idx=1&amp;amp;sn=90012cd9420bc88f800c3b7a6887f108&amp;amp;chksm=e892515fdfe5d8497c42cb8ecd896d62140fe233a8c291f1d7a9f45babc9636820c291ae3dd4&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;乔丹上海行&lt;/span&gt;&lt;/a&gt;&lt;span&gt;”）， 他们碰撞的领域，EM算法！这个是PCA外的，另外一个无监督学习的经典，是我们的主题。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;他们怎么认识的呢？Jordan的导师，就是著名的链接主义核心人物Rumelhart&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（参考“&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMjU1NTg3Ng==&amp;amp;mid=2247486238&amp;amp;idx=1&amp;amp;sn=72a8321739eae5f8400c7ca4c7eb84f9&amp;amp;chksm=e8925f15dfe5d6031e149d5b9caf7160eba6ddc8dd91e7e65f6f6cd5e048bbb36f0525f9d2ab&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;易图秒懂の连接主义诞生&lt;/span&gt;&lt;/a&gt;&lt;span&gt;”）。在“&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMjU1NTg3Ng==&amp;amp;mid=2247486283&amp;amp;idx=1&amp;amp;sn=dfb0e9724ffe2f06323b4f0a031eebbe&amp;amp;chksm=e8925f40dfe5d656095ada908259c54319e7f01a6fdbf96f6db3762821fde0310dead36c4efe&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;人工智能深度学习人物关系[全]&lt;/span&gt;&lt;/a&gt;&lt;span&gt;”里面我们介绍到，Hinton和Rumelhart是同事，都在Francis Crick的小组。&lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;为什么说EM算法是他们强强发力的领域呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这里我们讨论Hinton和统计大神Jordan的强强发力的领域。当Bayes网络发展到高级阶段， 概率图模型使得计算成为问题，由此开启了Variational Bayes领域。在“&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMjU1NTg3Ng==&amp;amp;mid=2247484925&amp;amp;idx=1&amp;amp;sn=3dd62ca6d7c1ae67644a199bb87349ce&amp;amp;chksm=e89251f6dfe5d8e0d11539be1cf244ec5103e8032b0a355d0f31afa627d94de8e328c4ae692e&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;变の贝叶斯&lt;/span&gt;&lt;/a&gt;&lt;span&gt;”里面， 我们解释了研究Variational Bayes，有3拨人。 第一拨人， 把物理的能量搬到了机器学习（参考 “&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMjU1NTg3Ng==&amp;amp;mid=2247484912&amp;amp;idx=1&amp;amp;sn=dff471944558016349cc9142e751ee99&amp;amp;chksm=e89251fbdfe5d8ed47f3d453554601eed684f46ff668c9883528d429e0ee062c1ade84965be7&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;给能力以自由吧！&lt;/span&gt;&lt;/a&gt;&lt;span&gt;”）。 第二拨人， 就是Hinton，他将VB和EM算法联系了起来，奠定了现在我们看到的VB的基础。 第三拨人，就是Jordan， 他重建了VB的框架ELBO的基础。所以说EM算法扩展的VBEM算法，就是Hinton和Jordan共同发力的部分。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;  Hinton曾在采访中，不无感慨的说到， 他当时研究VB和EM算法的关系的时候， 主动去请教当时的EM算法的大佬们， 结果那些人说Hinton是异想天开，神经有问题。 但是最终， 他还是突破重围， 搞定了VBEM算法，打下了VB世界最闪光的那盏灯。老爷子真心不容易！ 如果想切实深入到VB的世界， 我推荐Daphne Koller的神书“Probabilistic Graphical Models: Principles and Techniques”， 尤其其中的第8章：The Exponential Family 和第19章 Partially Observed Data。 这两章几乎是Hinton对VBEM算法研究的高度浓缩。 国内机器学习牛人王飞跃老师， 率领各路弟子花了5年时间翻译了这本神书！所以有中文版， 买了，反复阅读8、19章，要的！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.4869029275808937&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1298&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FI5WWlRGFibib4etI71JrjBTbP0TfiatyZM54GD57NIlIOQuTHLPqrBZKQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;为什么无监督深度学习突出成果都是Hinton和Jordan家的？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;无监督深度学习，除了强化学习，主要包括BM、自动编码器AE和GAN领域。 1）这些领域中的DBN和DBM是Hinton搞的。2）AE中的经典，VAE是DP Kingma和M Welling搞得。 DP Kingma硕士导师是LeCun，LeCun的博士后导师是Hinton，并且Welling的博士后导师是Hinton。 3）而GAN是Ian Goodfellow和Yoshua Bengio的杰作， Goodfellow是Bengio的学生， 而Bengio的博士后导师是Jordan。 一句话， 无监督深度学习的经典模型几乎全是Hinton和Jordan家的。 为什么？ 因为能彻底理解EM算法到深不见底的人非Hinton和Jordan莫属。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;你现在明白彻底理解EM算法的重要性了吧？ 下面我浅薄的纵向理解（忽略EM的各种变种的横向）EM算法的9层境界，再回头反思一下Hinton和Jordan等会对EM算法的理解到何种程度， 简直叹而观止！&lt;/span&gt;&lt;/p&gt;

&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;EM算法理解的九层境界&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;3&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;EM 就是 E + M&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;EM 是一种局部下限构造&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;K-Means是一种Hard EM算法&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;从EM 到 广义EM&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;广义EM的一个特例是VBEM&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;广义EM的另一个特例是WS算法&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;广义EM的再一个特例是Gibbs抽样算法&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;WS算法是VAE和GAN组合的简化版&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;KL距离的统一&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;第一层境界， EM算法就是E 期望 + M 最大化&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;最经典的例子就是抛3个硬币，跑I硬币决定C1和C2，然后抛C1或者C2决定正反面，  然后估算3个硬币的正反面概率值。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6267942583732058&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;418&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FrbdlanCiaicEY8z6pfTTHslhYpic8MPibCwgS1ogMm9vpLYlzvZdQ1EQHw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这个例子为什么经典， 因为它告诉我们，当存在隐变量I的时候， 直接的最大似然估计无法直接搞定。 什么是隐变量？为什么要引入隐变量？ 对隐变量的理解是理解EM算法的第一要义！Chuong B Do &amp;amp; Serafim Batzoglou的Tutorial论文“What is the expectation maximization algorithm?”对此有详细的例子进行分析。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.1288209606986899&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;916&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FZohz9licIibF0wEmbSvjWThTSpuQibzDZ1KPys3dPIiaJIs1LhT0daVp1Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过隐变量，我们第一次解读了EM算法的伟大！突破了直接MLE的限制（不详细解释了）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.79&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FQWrFZgDRHzuiboTtaJ8V6ShCVjOq1ficmwibMOsum9xGq0Z1NxpsGUaVg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;至此， 你理解了EM算法的第一层境界，看山是山。 &lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;第二层境界， EM算法就一种局部下限构造&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;如果你再深入到基于隐变量的EM算法的收敛性证明， 基于log(x)函数的Jensen不等式构造， 我们很容易证明，EM算法是在反复的构造新的下限，然后进一步求解。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.116751269035533&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;788&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1Flv1VYDzJjMytdf3Yia6fkibQ3MT4AYxTjkI6DIsaQL5qJMlYfJ0ZNzyg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;所以，先固定当前参数， 计算得到当前隐变量分布的一个下届函数， 然后优化这个函数， 得到新的参数， 然后循环继续。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.0459770114942528&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1044&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FsyKfO2gcQSGW3Au54jhtiaAiagNqS6V9SACGcN8DicguKzXgvWqq64C6w/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也正是这个不停的构造下限的思想未来和VB方法联系起来了。 如果你理解了这个， 恭喜你， 进入理解EM算法的第二层境界， 看山看石。 &lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;第三层境界， K-均值方法是一种Hard EM算法&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;在第二层境界的基础上， 你就能随意傲游EM算法用到GMM和HMM模型中去了。 尤其是对GMM的深入理解之后， 对于有隐变量的联合概率，如果利用高斯分布代入之后： &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.2947976878612717&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;692&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FwZdVdz6EqbrNUicO0jsVF9bicxdZdov44KDFNiaAAMtA9xFle8YM0lSpQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;很容易就和均方距离建立联系：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.1620879120879121&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;728&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FJhAwwALnJdrbOwLNRibicSYDwxI5kDoTjrcLftP2ucYSuIK1s7hPu3lw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，能不能说K-均值就是高斯分布的EM算法呢？不是， 这里虽然拓展到了相同的距离公式， 但是背后逻辑还是不一样， 不一样在哪里呢？K-均值在讨论隐变量的决定时候，用的是dirac delta 分布， 这个分布是高斯分布的一种极限。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7789473684210526&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;760&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FZSP4ib7xppjP6aZLRbCV7HFe7via1OjpeicgX31wYBpu5BLAkicZFjBZOQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.675&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1F8jicDpiaXb6Y7uW9tUgPVOuxQsIMBiaXCYj4ZeJwzeCiaoqqjcN9qlQicOw/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;200&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果你觉得这个扩展不太好理解， 那么更为简单直观的就是， k-均值用的hard EM算法， 而我们说的EM算法是soft EM算法。 所谓hard 就是要么是，要么不是0-1抉择。 而Soft是0.7比例是c1，0.3比例是c2的情况。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.38341346153846156&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1664&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FyTUH1Oa3CicUUICpvic6txNO34ic9bVK3fovzlkBgWUIAiczzN1nPu8nXA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;那么充分理解了k-均值和EM算法本身的演化和差异有什么帮助呢？让你进一步理解到隐变量是存在一种分布的。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.3715277777777778&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;576&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FtiaGdsILMULhGOLsmoFCiaMjCRX8C7p3ECJ8DfDjgRtdfF5AgCOnXe8w/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果你理解了这个， 恭喜你， 进入理解EM算法的第三层境界， 看山看峰。 &lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;第四层境界，EM 是 广义EM的特例&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;通过前3层境界， 你对EM算法的理解要跨过隐变量， 进入隐分布的境界。 如果我们把前面的EM收敛证明稍微重复一下，但是引入隐分布。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.45136612021857925&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1830&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FITuoIz7o5r5FP68AqqfibIv6o9fHibPBWdSCf4yujcoia9SC5trTJ4uqQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这样我们把Jensen不等收右边的部分定义为自由能（如果你对自由能有兴趣，请参考“&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMjU1NTg3Ng==&amp;amp;mid=2247484912&amp;amp;idx=1&amp;amp;sn=dff471944558016349cc9142e751ee99&amp;amp;chksm=e89251fbdfe5d8ed47f3d453554601eed684f46ff668c9883528d429e0ee062c1ade84965be7&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;给能量以自由吧！&lt;/span&gt;&lt;/a&gt;&lt;span&gt;”，如果没有兴趣， 你就视为一种命名）。 那么E步骤是固定参数优化隐分布， M步骤是固定隐分布优化参数，这就是广义EM算法了。  &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7950310559006211&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;966&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FjNjTeNAuJicrGACJiast8dA0azDWQicO1E4uhoUjmQfQtsZBj0JibfbTNg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;有了广义EM算法之后， 我们对自由能深入挖掘， 发现自由能和似然度和KL距离之间的关系：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;img class=&quot;&quot; data-ratio=&quot;0.3663624511082138&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1534&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1F9XJse97da3SAHXTiciaeiczojibicibSPxiab3gPk5oHrtJTapSNQVFnDAqpA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;所以固定参数的情况下， 那么只能最优化KL距离了， 那么隐分布只能取如下分布：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.2123076923076923&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;650&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FBWJAibAtP6bHusYbMp3u6F10Mw3h3Az5TUOS6lqTKahofI6EjyMMLSQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而这个在EM算法里面是直接给出的。 所以EM算法是广义EM算法的天然最优的隐分布情况。 但是很多时候隐分布不是那么容易计算的！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;前面的推理虽然很简单， 但是要理解到位真心不容易， 首先要深入理解KL距离是如何被引入的？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6446280991735537&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;726&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FHmgfxbGic1ZX1XDIIhrStdI9d3qrYWNaRuDHSyiaoYnNlgSVYlqDic50g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;其次要理解， 为什么传统的EM算法， 不存在第一个最优化？因为在没有限制的隐分布（天然情况下）情况下， 第一个最优就是要求：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.14473684210526316&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;304&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FbXYgtibtdwtXHD6U3t0qQK7es7yN3SichCG343eoEdk3wpdmtdXRDxEA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而这个隐分布， EM算法里面是直接给出的，而不是让你证明得到的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.4279210925644917&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1318&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FwrL0DzatLhlY0rnllCichuars6H9LCoPjh5FickCrv1Nt3syYjJIL9Xg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这样， 在广义EM算法中，你看到两个优化步骤，我们进入了两个优化步骤理解EM算法的境界了。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果你理解了这个， 恭喜你， 进入理解EM算法的第四层境界， 有水有山。 &lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;第五层境界，广义EM的一个特例是VBEM&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;在隐分布没有限制的时候， 广义EM算法就是EM算法， 但是如果隐分布本身是有限制的呢？譬如有个先验分布的限制， 譬如有计算的限制呢？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;例如先验分布的限制：从pLSA到LDA就是增加了参数的先验分布！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6219081272084805&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1132&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FPrc8ckI2D7AviaTu5GlJ13ykAgS6nlobSCPwS3yjrBzBuiag7htqicLNg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如计算上的限制：mean-field计算简化的要求，分量独立。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6531986531986532&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;594&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FtLxWm6gGic5ugJMT9kkOT0PZYcWlHGOiblRj5w3Kcicd8vTCCwRWGf65A/640?wx_fmt=png&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;  诸如此类限制， 都使得广义EM里面的第一步E优化不可能达到无限制最优， 所以KL距离无法为0。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.45223880597014926&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1340&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1F5ZlVl5IyBUJuJQspbiaXLFHAUFA32efeO3XTtib8y6F4s9RRiaNnA876Q/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;基于有限制的理解， 再引入模型变分的思想， 根据模型m的变化， 对应参数和隐变量都有相应的分布： &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.3994082840236686&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;676&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FcRd9Lvb32gxOBKXAMzauEkrLbt2fllicDD2zNqQa7OrM6ibCKyaDuNTw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;并且满足分布独立性简化计算的假设：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.16993464052287582&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;306&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FBaqtnpdxUBls4rYLQFAx22YDq31zu2mibjYX5Ratic2Co6uDH8ib7Z7VA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在变分思想下， 自由能被改写了：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.11650485436893204&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;824&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1F8RnJ5icaZ74grG2E2xtp0ZUTzgLlliaicOhAzX1ZII5g1gJibPXJgLdgFw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样我们就得到了VBEM算法了：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.5845648604269293&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1218&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1Fbxjicogr9fA5LhMck0TibtqDYibYkickVwUbhT1hP8f16ILXeAt7m7SNjg/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.43098159509202455&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1304&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzKPQVzpEXl26Kiblh4tsfF1FzFtGw5GGNiaOcYLhJTtPkKtVuwZdphwVoU1ZGVaFCKbOoqAVHMEWia5A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果你理解了这个， 恭喜你， 进入理解EM算法的第五层境界， 水转山回。 &lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;第六层境界，广义EM的另一个特例是WS算法&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;Hinton老爷子搞定VBEM算法后， 并没有停滞， 他在研究DBN和DBM的Fine-Tuning的时候， 提出了Wake-Sleep算法。 我们知道在有监督的Fine-Tuning可以使用BP算法， 但是无监督的Fine-Tuning，使用的是Wake-Sleep算法。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.44481605351170567&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1196&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZZNKGokeJLgicwOUoMMctnxFqZ7W4qZGDDWSA0vyP784plpuYWic5YAKw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;就是这个WS算法，也是广义EM算法的一种特例。 WS算法分为认知阶段和生成阶段。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.5584615384615385&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1300&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZe3icPDjo8OaEOL9ez6vozq4OiappaJb7jiacXUg0tcicicpXqTkd5V0w5xQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;span&gt;在前面自由能里面，我们将KL距离引入了， 这里刚好这两个阶段分别优化了KL距离的两种形态。 固定P优化Q，和固定Q优化P。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7709923664122137&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1310&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZnPWcL1bRsMlNBQPxOibJibd9yUCKbXjteFX8UnBYlL8icwrnIF6I6ckNw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;所以当我们取代自由能理解， 全部切换到KL距离的理解， 广义EM算法的E步骤和M步骤就分别是E投影和M投影。 因为要求KL距离最优， 可以等价于垂直。 而这个投影， 可以衍生到数据D的流形空间， 和模型M的流形空间。 &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.875&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;464&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZwLog4BB8TWjRnozFckkZDicwiaZwDazUial537vnTxwYvdDNDqCiaUmahw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以你认同WS算法是一种广义EM算法（GEM）之后， 基于KL距离再认识GEM算法。 引入了数据流形和模型流形。 引入了E投影和M投影。  &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;不过要注意的wake识别阶段对应的是M步骤， 而sleep生成阶段对应的E步骤。 所以WS算法对应的是广义ME算法。 &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果你理解了这个， 恭喜你， 进入理解EM算法的第六层境界， 山高水深。 &lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;第七层境界，广义EM的再一个特例是Gibbs Sampling&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;其实，前面基于KL距离的认知， 严格放到信息理论的领域， 对于前面E投影和M投影都有严格的定义。 M投影的名称是类似的，但是具体是moment projection，但是E投影应该叫I投影，具体是information projection。 &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6726726726726727&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;666&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZNVK3RgicgibNbdFiareTRyn4t0Xxwx9wKTwNnNlvK2hFicE7CqJyPuib8hA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;上面这种可能不太容易体会到M投影和I投影的差异， 如果再回到最小KL距离，有一个经典的比较。 可以体会M投影和I投影的差异。 上面是I投影，只覆盖一个峰。 下面是M投影， 覆盖了两个峰。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.5927051671732523&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1316&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZlTv5Fam6jaJ04jq5u2fOmDZRCyicyqHx7ls3srk26BBlyuaZ7nqLl0A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当我们不是直接计算KL距离， 而是基于蒙特卡洛抽样方法来估算KL距离。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7075098814229249&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1012&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZ9KrUe0D4YXKkV4DOA0RvdVHgh44bBwnf6aDZWibKWJXApj8rHZQ9Eiag/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;有兴趣对此深入的，可以阅读论文“On Monte Carlo methods for estimating ratios of normalizing constants”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这时候， 广义EM算法，就是Gibbs Sampling了。 所以Gibbs Sampling，本质上就是采用了蒙特卡洛方法计算的广义EM算法。 &lt;/span&gt;&lt;/p&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; 
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.9553956834532374&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;695&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJPxMgqHbiasLYIOiabPXMVl5fP7oQSLN7IukVCbhic2Lxm9AVA7ayeXtYKHHvxianmSskZt8oWwPe4Yw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以， 如果把M投影和I投影看成是一个变量上的最小距离点，那么Gibbs Sampling和广义EM算法的收敛过程是一致的。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7915869980879541&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1046&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZS6ufv7SGNV8fex8uNXj8obC8ZnAPkmd7E9elRiawz4iatPbpM1TJpibzw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;VAE的发明者，Hinton的博士后， Max Welling在论文“Bayesian K-Means as a “Maximization-Expectation” Algorithm”中， 对这种关系有如下很好的总结！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.45454545454545453&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1232&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZmCECo2ibiaHSM3VB4pDk7rK3iaWgW0EG7r9rbru5MaopbLyVH6oPAeqibQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;另外， Zoubin Ghahramani， Jordan的博士， 在“Factorial Learning and the EM Algorithm”等相关论文也反复提到他们之间的关系。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这样， 通过广义EM算法把Gibbs Sampling和EM， VB， K-Means和WS算法全部联系起来了。 有了Gibbs Sampling的背书， 你是不是能更好的理解， 为什么WS算法可以是ME步骤，而不是EM的步骤呢？另外，我们知道坐标下降Coordinate Descent也可以看成一种Gibbs Sampling过程， 如果有人把Coordinate Descent和EM算法联系起来， 你还会觉得奇怪么？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.651356993736952&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;958&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZ44EklyialHvpibalCs88UdqiaVLKWOCRgCbZ42ac0uXZqpwj1Y2leOALw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;现在我们发现VB和Gibbs Sampling都可以放到广义EM的大框架下， 只是求解过程一个采用近似逼近， 一个采用蒙特卡洛采样。 有了EM算法和Gibbs Sampling的关系， 现在你理解， 为什么Hinton能够发明CD算法了么？ 细节就不展开了。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.23825503355704697&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1192&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZYT0Qj1ic9BqGhtLZRmIiaIicmLocAyYD7OCuXKmxCxqEPRRxtuGmibpaFw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.23011015911872704&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1634&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZjNq53qrt0HvjLEhGu1ZLlMnoo7EGuCSjkMLsribrRvyodaNW40OAD5w/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;如果你理解了这个， 恭喜你， 进入理解EM算法的第七层境界， 山水轮回。 &lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;第八层境界，WS算法是VAE和GAN组合的简化版&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;Jordan的弟子邢波老师，他的学生胡志挺，发表了一篇文章， On Unifying Deep Generative Models，试图通过WS算法，统一对VAE和GAN的理解。 &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;img class=&quot;&quot; data-ratio=&quot;0.4939759036144578&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1826&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZk7D4gkTCz660eemGytPzT0kDxNjacEgJjZLGO16MlL2buAkDOnWc7g/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;对VAE的理解， 变了加了正则化的KL距离， 而对于GAN的理解变成了加Jensen–Shannon 散度。  所以， 当我们把广义EM算法的自由能， 在WS算法中看成KL散度， 现在看成扩展的KL散度。  对于正则化扩展， 有很多类似论文， “Mode Regularized Generative Adversarial Networks”， “Stabilizing Training of Generative Adversarial Networks through Regularization” 有兴趣可以读读。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;所以对于VAE，类比WS算法的Wake认知阶段， 不同的是在ELBO这个VBEM目标的基础上加了KL散度作为正则化限制。 再应用再参数化技巧实现了VAE。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6052202283849919&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1226&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZjAJoZfYJsq8f1aicZbTGWAEOpMOI06WeDDXS9041YXRKc7ia7JBsupkA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;而对应到GAN，类比Sleep阶段，正则化限制换了JSD距离， 然后目标KL距离也随着不同GAN的变体也可以变化。 &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.605890603085554&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1426&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZMY1RG1zkKfagHOCG94bEjQUocPeVjBGkb8dicucp2VHUAYpf4ZcuYiaw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;所以， VAE和GAN都可以理解为有特殊正则化限制的Wake-Sleep步骤， 那么组合起来也并不奇怪。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.11907066795740562&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;2066&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZyuDku8sJoLCQic2GT4GG5LTwpNDxwAzRRIibcoib3e4R1icgkfKudom0Iw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这就是为什么那么多论文研究如何组合VAE/GAN到同一个框架下面去。目前对这方面的理解还在广泛探讨中。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果你理解了这个， 恭喜你， 进入理解EM算法的第八层境界， 水中有水、山外有山。  &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;第九层境界，KL距离的统一&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;Jordan 大佬的一片论文， 开启了KL距离的统一， “On surrogate loss functions and f-divergences”。 里面对于所谓的正反KL距离全部统一到 f 散度的框架下面。 Jordan 首先论述了对于损失函数统一的Margin理论的意义。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7344992050874404&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1258&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZibviaRB6oC9fTzfAIOdIibkJvuzmAnfRXRGibsl99Btu09HNWtI6S28hag/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;然后把这些损失函数也映射到  f 散度：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.38671875&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1536&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZCuhumOJbvm1cCxGmWskctiaMSM02fhWt2TE7e5KdAYBqOBeianW7TPicQ/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;p&gt;&lt;span&gt;然后微软的 Sebastian Nowozin， 把 f-散度扩展到GAN “f-GAN: Training Generative Neural Samplers using Variational Divergence Minimization”。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.27586206896551724&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1624&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZpb3RDkrYJyNLcXLApPxQOQIUqyJd0jWEz1XaKFf9urgPEWic3qwx8cA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;然后对正反KL散度也做了一次统一。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;对于 f-散度的理解离不开对Fenchel对偶的理解（参考“&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMjU1NTg3Ng==&amp;amp;mid=2247486047&amp;amp;idx=1&amp;amp;sn=77886f64de06eefa2f947027f0ffb43f&amp;amp;chksm=e8925e54dfe5d742a77d8ecb5f09a6d9d2109b8ad9d28bb86b8e43628e2832d657a7e3dd2e62&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;走近中神通Fenchel&lt;/span&gt;&lt;/a&gt;&lt;span&gt;”）。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.1414141414141414&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;990&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZ7hWzr95dp3HB7icMqE4mkfRNIhiajyCPb09pPLpTQnf41KUAlJF8flQw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;除了f-散度， 还有人基于bregman散度去统一正反KL散度的认知。 KL散度就是香农熵的bregman散度。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6370192307692307&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;832&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZ1g6hSicEvILnaW0EBF6jD8uEdb49dlhqQdsQ7KRtPRa5QibPUcQT4AqA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;而Bregman散度本身是基于一阶泰勒展开的一种偏离度的度量。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.618421052631579&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;760&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZfhjCnFQmRpgf94FuhCEOcxzS1upfT2Llbbh32IC0pTibV0oic5ZzztOw/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后再基于Bregman距离去研究最小KL投影， 函数空间采用香农熵（参考“&lt;/span&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzMjU1NTg3Ng==&amp;amp;mid=2247483866&amp;amp;idx=1&amp;amp;sn=60dc83098f0840e0f2132628cfff5015&amp;amp;chksm=e89255d1dfe5dcc77852d14e3968f01b03fd299634c4ec27cfc3763ed7755c3f81b2985a7b12&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;信息熵的由来&lt;/span&gt;&lt;/a&gt;&lt;span&gt;”）。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.4835680751173709&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;852&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/REGqUlN1rzJrL1SufSMeQCmKibxLVGQtZxFqt1fODiafdz8DDHEpQyKuNlyqiaRE4JBQicZN2OxVZZxT2FMaX2IfyA/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;无论f-散度还是bregman散度对正反KL距离的统一， 之后的广义EM算法， 都会变得空间的最优投影的交替出现。 或许广义EM算法也成了不同流形空间上的坐标梯度下降算法而已coodinate descent。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果你理解了这个， 恭喜你， 进入理解EM算法的第九层境界，山水合一。  &lt;/span&gt;&lt;/p&gt;


&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; 
&lt;p&gt;&lt;span&gt;这里浅薄的介绍了理解EM算法的9层境界，托名Hinton和Jordan，着实是因为佩服他们俩和各自的弟子们对EM算法，甚至到无监督深度学习的理解和巨大贡献。想来Hinton和Jordan对此必定会有更为深刻的理解， 很好奇会到何种程度 。。。 最后依然好奇， 为啥只有他们两家的子弟能够不停的突破无监督深度学习？Hinton 老仙说， 机器学习的未来在于无监督学习！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;本文经授权转载自AI2ML人工智能to机器学习，点击阅读原文查看原文。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;∑编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 31 Jul 2018 16:52:31 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/pfpblOcZHU</dc:identifier>
</item>
<item>
<title>算法动画 - 理解函数曲线</title>
<link>http://www.jintiankansha.me/t/XRLgz5q6XN</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/XRLgz5q6XN</guid>
<description>&lt;p&gt;&lt;span&gt;这篇梳理一些有关算法动画的生成思路。&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用算法生成动画，大致可分成两类。一类是基于时间( time-based )，一类是基于帧( frame-based )。其中有何区别，我们先通过两段 Processing 代码去理解。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;代码 01（ 基于帧 ）&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;200&quot; data-backw=&quot;600&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3333333333333333&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYiaibg6BDyktNEPFfzVbFSTXF4D2nVRicRFg6FFU85Cicb9oNic9hfsibvUMg/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;float x;
void setup(){
  size(600,200); 
  x = 100;
}

void draw(){
  background(239,234,228);
  if(x &amp;lt; 500){
      x += 5;
  }
  fill(50,120,133);
  noStroke();
  ellipse(x,height/2,50,50);
}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;代码浅析：&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;代码 02 （ 基于时间 ）&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;200&quot; data-backw=&quot;600&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3333333333333333&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYHiasicxrx6O4D2Q3yroLBpY0ssBicAwjicV9Kv5IcPIWB3C0xEE5R3VbVw/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;float time;
void setup(){
  size(600,200); 
  time = 3;
}

void draw(){
  background(239,234,228);
  float x = min(500,map(millis()/1000.0,0,time,100,500));
  fill(50,120,133);
  noStroke();
  ellipse(x,height/2,50,50);
}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;代码浅析：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;代码中创建了一个变量 time ，表示圆从左侧运动到右侧的时间&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;millis() 表示毫秒，因而 millis()/1000.0 表示秒。通过 map 函数，将时间从 0 到 time 的变化，映射为从 100 到 500 的变化。随着时间的递增，实现了小球从左到右的运动&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;min 函数用于限定 x 的大小，让数值不超过 500&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;简单比较&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;通过对比两段代码可以发现，虽然最终结果是近似的（小球从 100 匀速运动到 500），但决定运动的条件是不同的。前者限定了每次小球每次递增的距离，后者限定了整个运动的时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;条件的不同，决定了在某些场景下，某种方法会比另一种方法使用起来更便利。例如要绘制一个运行速度恒定的小车，使用基于帧的算法写起来会更简便。若希望小车从 A 点运行到 B 点的时间是固定值，又或者实现时间间隔固定的淡入淡出效果（将数值变化映射到颜色变化），基于时间的算法则更合适。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除此之外，它们两者间还有一个更重要的区别。使得自己在制作动画时，更倾向使用基于时间的思路。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面的例子中，由于绘制的都是一些非常简单的图形，所以程序运行必然非常流畅平稳的，维持在 60 fps。但如果程序有复杂的场景切换。某些场景绘制的元素多，占用更多计算资源。就会导致某个时间段运行帧率变慢。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们可以设想下这个情况。假如小车每帧往前移动 1 个单位，第一秒内如果程序的帧率正常（60fps），这一秒小车就会移动 60 个单位。到第二秒开始，若场景里出现很多元素，导致程序帧率变成 20 fps了，由于小车每帧累加的值是固定的，所以这一秒，小车就只移动了 20 个单位。合起来，在两秒的时间中，小车只移动了 80 个单位。相比帧率恒定的情况下移动 120 个单位，小车移动的距离明显变小了。而且整个动画连起来看，小车做的就不再是匀速运动，出现先快后慢的结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了避免这种情况，如果用基于时间的写法，效果就大有不同。因为这时小车的位置是根据时间的流逝多少决定的。它能保证在相应时间内，小车的位置都在“正确”的地方。只是帧率低的时候，画面运动的流畅度降低而已，整体小车的运行速度并没有变化。&lt;/span&gt;&lt;/p&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt; &lt;p&gt;&lt;span&gt;基于这种特性。游戏中的运动基本是采用基于时间的算法去实现的。毕竟不同玩家的电脑配置可能有很大的区别，如果开发一个赛场游戏，汽车运动算法是基于帧的。那电脑配置高的玩家，车的速度就变快，这显然是不合理的。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;运动的自然之道 - 使用函数曲线&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;200&quot; data-backw=&quot;600&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3333333333333333&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYHiasicxrx6O4D2Q3yroLBpY0ssBicAwjicV9Kv5IcPIWB3C0xEE5R3VbVw/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们再来看前面写的小球动画。虽然它是动起来了，但显得很呆板。为何会产生这种感觉？这是因为违背了人的视觉经验。在日常生活中，我们很难看见一个物体从完全静止的状态突然变成匀速运动的状态，也很难看到一个运动中的物体瞬间静止。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要改善这种状况，一个简单的方式是引入“力”。比如下面的例子，实现了小球从静止到加速。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;代码 03 ( 加速运动 )&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;200&quot; data-backw=&quot;600&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3333333333333333&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYYE0W39wjDcsu0oslkwMuDqaz3yTvWKicqR9GTiaN5wY4EmbWuGx3a2yQ/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;float posX;
float acc;
float vel;
void setup(){
  size(600,200); 
  posX = 100;
}

void draw(){
  background(239,234,228);
  acc = 0.5;
  vel += acc;
  posX += vel;
  if(posX &amp;gt; 500){
    posX = 500;
  }
  fill(50,120,133);
  noStroke();
  ellipse(posX,height/2,50,50);
}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;如果希望上面的小球在快接近目标的时候有减速的效果，就需要在上面增加一些属性或是添加判定条件。这样的做法显然有些繁琐，而且仍旧是“基于帧”的。如果我们希望准确地控制小球的运动时间，仅用上面代码是无法做到的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有更简便的方式吗？函数曲线此时就可以派上用场。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;函数曲线&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我们先选一个典型的数学函数 sin&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-backh=&quot;433&quot; data-backw=&quot;677&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6394779771615008&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1226&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYg7urWLHrBLPgRlFhm4vexu4u0hDv0NeVYmzjq9N4yqwv2FicWEdW5eQ/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;再结合图像理解下面代码&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;代码 04 ( 加速到减速 )&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;200&quot; data-backw=&quot;600&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3333333333333333&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYbprFyibWXTGl2MCUw9a9R0j4TK6hWeXicuuUE6ibqvvstXS061GpHkQyA/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;float time;
void setup(){
  size(600,200); 
  time = 3;
}

void draw(){
  background(239,234,228);
  float sinInput = map(min(time,millis()/1000.0),0,time,-PI/2,PI/2);
  float x = map(sin(sinInput),-1,1,100,500);
  fill(50,120,133);
  noStroke();
  ellipse(x,height/2,50,50);
}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;代码浅析：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;相比代码 03，例子 04 并没有用到速度，加速度等变量。但仍然可以看到小球有加速，减速的运动变化，而且可以通过 time 变量去控制小球的运动时间&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;虽然运动并不严格遵循牛顿力学，但整体效果还是比较自然的。它很巧妙地利用了 sin 函数曲线的变化来映射小球的位置变化。具体的操作，是在 x 方向上截取一段合适的区间，然后将对应函数值 y 的变化，映射到我们需要的变化区间之内。若有模糊的地方，可以对照下图去理解&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt; &lt;img class=&quot;&quot; data-backh=&quot;392&quot; data-backw=&quot;677&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5782881002087683&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;958&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYPDSQMsAiawJVC4ADoicuHQHLRiaibicv5mCT3gNnRM7hA5SIiaiajR9icYz5Mw/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;蓝线可以看成是“时间”（时间流逝速率恒定）。请脑补一个动画，蓝线以恒定的速度从 -0.5 π 的位置从左往右移动到 0.5 π 的位置。它与函数曲线的交点为 A。此时 A 点的 y 坐标就表示函数的输出值。可以看出在这个区间内移动，sin 函数的输出值就会从 -1 变化到 1。但这个输出的变化值我们不能直接使用，需要通过 map 函数，将它映射到在我们想要的范围内变化。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;sin 函数在这里其实就是一个中转站。只是使用它前，需要将输入值和输出值做两次处理 （调用两次 map）。第一次调用 map 函数，就是将时间从 0 到 time 的变化，映射为 -PI/2 到 PI／2 之间的变化，再传入函数中。第二次调用 map，则是函数的输出值映射为我们需要的位置数值。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3888&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1250&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYu9aMKdjI5Tkz08jKackdolFs82QAXrZxcucz3mFSWuaWpC9womZnKQ/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;同一个函数，选择的输入区间不同。得出的结果也不同。假如选择从 A 点到 B 点作为变化区间，整体的运动速率就是先慢后快的加速过程。如果选择从 B 点到 C 点，则整体的运动速率就是先快后快的减速过程。要判断是加速还是减速，可以对照函数曲线。越平的地方，就代表运动越慢，越陡峭，就表明运动变化越快。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;指数函数&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;当理解了上面的思路。现在数学函数就可以成为你的创作素材。常用的数学函数除了三角函数 sin，cos。还有指数函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一般地，y = a^x函数(a为常数且以a&amp;gt;0，a≠1)叫做指数函数。下图是 y=2^x 的图像。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-backh=&quot;380&quot; data-backw=&quot;677&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5608020698576973&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1546&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYsiap1cd4N5LibUddYkibI8iaaic7Dia9d8ZzOz7x6AOauwB2x8NZHVvczr2A/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;指数函数在 Processing 中写作&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;pow(a,b)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;其中 a 表示底数，b 表示指数。pow(2,2) 表示 2 的 3 次方，结果为 8。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有关指数函数的用法就不再展开，与上面例子是类似,找准输入输出区间再作映射即可。函数曲线的使用是非常灵活的。不仅可以单独使用，还可以组合使用。例如两个基本函数进行相加和相成，都会得到意想不到的效果。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;延展&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;现在仅仅靠指数函数与三角函数，就可以产生各种不同的函数曲线。下面代码就是指数函数与三角函数的叠加，它使得小球加速靠近的同时，能有一个来回的摆动。最终产生了带弹性的动画效果。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;float inputVal = min(map(millis()/1000.0,0,time,0,1),1);
  float x = map(cos(inputVal * 20) * pow(2,-10.0 * inputVal),1,0,100,500);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;( 替换例 04 的运动算法 )&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;200&quot; data-backw=&quot;600&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3333333333333333&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNY6oibHmoLwWZ1QtZicBA30YeeSYExBEXSziatK5al19FnYvB6miatrZ1STw/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;要尽可能理解函数曲线的特性。就需要多加实验。函数曲线可不仅仅只能用在运动动画上。下面用了 5 种常用函数输出了几组 gif。分别控制图形的位置，颜色，旋转角度，大小。可以去从中感受不同函数曲线的个性。&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;【 1 】线性递增(匀速变化)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;【 2 】sin 函数（区间 -PI/2 到 PI/2，从加速到减速）&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt; &lt;p&gt;&lt;span&gt;【 3 】指数函数(减速)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;【 4 】指数函数叠加 cos 函数(整体减速)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;【 5 】sin 函数(往复)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;377&quot; data-backw=&quot;677&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.55625&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYEra78JfU33th5M8ASbKB2bzy1T0dPErq41N3askZcTJp7CWPAPibZyA/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（ 控制位置 ）&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;252&quot; data-backw=&quot;677&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3725&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYwMPw1GmFVQ8rI3cu7ojHJH0p0rhIdEKdmpM1WeUNXo0WJdOicOOCkxw/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（ 控制透明度 ）&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;252&quot; data-backw=&quot;677&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3725&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYwAulhMJTNfYamMrCLdkPFlicOA26iaRQDHiceCy9eQqJ1qrTKiaqNjxmLA/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（ 控制旋转角度 ）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;252&quot; data-backw=&quot;677&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3725&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYLJI96PvqibCnEkcyhrVJcSaesU9IR4rG1w2kePd0ibazicibtCZ0SZpkQA/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（ 控制大小 ）&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后附上一张由 Kynd 整理的一张图，里面的函数曲线都很实用，有兴趣可以到此地址下载高清大图，了解更多函数曲线  ( http://thebookofshaders.com/05/kynd.png )&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-backh=&quot;422&quot; data-backw=&quot;538&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7843866171003717&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;538&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYibKzgkUib9Msx4FZJwZ2KdtObMjYOSG69Fon3tRrWhTqjGFvCqXbfY2w/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-backh=&quot;381&quot; data-backw=&quot;677&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5625&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1920&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNY36ibbBlmVvqu4QVlxJQ4ictJRW96iaCpr9HPfPuiajeZjYfYj43pJSKysA/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;补充&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;函数曲线非常实用，但如果在程序中每次使用都要考虑各种映射关系，显然有点繁琐。更好的做法是把一些常用的函数曲线用一个类把它封装起来。&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面分享一段自己创作时常用到的类（代码基于C++，框架 openframeworks）&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;class WenzyAni{
public:

float ratio; // 内部表示完成进度 （范围一般为 0 到 1）
float startVal,endVal; // 开始的数值，结束的数值
float val; // 当前的数值

float time; // 完成整个动画所需的时间
int aniMode; // 决定数值的变化曲线类型
bool startMoving; // 是否开始运动
float startTick; // 开始的时刻记录

WenzyAni(){

}

WenzyAni(float time_,float startVal_,float endVal_,int mode_ = 0){
    time = time_;
    startVal = startVal_;
    endVal = endVal_;
    aniMode = mode_;
    startMoving = false;
    val = startVal_;
}


void update(){
    if(startMoving){
        ratio = MIN(time,ofGetElapsedTimef() - startTick)/time;
        if(aniMode == 0){
            // 匀速平滑过渡
            val = ofMap(ratio,0,1,startVal,endVal);
        }else if(aniMode == 1){
            // 先加速后减速（经过 sin 函数处理）
            float ratio2 = ofMap(sin(ofMap(ratio,0,1,-PI/2,PI/2)),-1,1,0,1);
            val = ofMap(ratio2,0,1,startVal,endVal);
        }else if(aniMode == 2){
            // 持续减速（指数衰减）
            val = ofMap(pow(2,-10 * ratio),1,0,startVal,endVal);
        }else if(aniMode == 3){
            // 弹簧效果
            val = ofMap(cos(ratio * 20) * pow(2,-10 * ratio),1,0,startVal,endVal);
        }else if(aniMode == 4){
            // cos 式往复
            float n = 2; // n 表示往复次数
            val = ofMap(cos(ratio * n * 2 * PI + PI),1,-1,startVal,endVal);
        }
    }
}

void start(){
    startMoving = true;
    startTick = ofGetElapsedTimef();
}

};&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt; &lt;span&gt;应用范例 01&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;ofApp.h 内 —-&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;#include “WenzyAni.h”
...

WenzyAni ani;
ofEasyCam cam;&lt;/span&gt;
&lt;/pre&gt;
&lt;h3&gt;&lt;span&gt;ofApp.cpp 内 —-&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;void ofApp::setup(){
    ofSetWindowShape(1000,500);
    ofBackground(3,27,93);
    ani = WenzyAni(1, -300, 300,3);
}


void ofApp::update(){
    ani.update();
}


void ofApp::draw(){
    cam.begin();
    ofSetColor(233,60,37);
    ofDrawBox(ani.val,0,0,100);
    cam.end();
}

void ofApp::keyPressed(int key){
    if(key == '1'){
        ani.start();
    }
    if(key == '2'){
        ani = WenzyAni(1, -300, 300,3);
        ani.start();
    }
    if(key == '3'){
        ani = WenzyAni(1, 300, -300,3);
        ani.start();
    }
    if(key == '4'){
         ani = WenzyAni(1, -300, 300,0);
        ani.start();
     }
    if(key == '5'){
        ani = WenzyAni(1, -300, 300,1);
        ani.start();
    }
    if(key == '6'){
        ani = WenzyAni(1, -300, 300,2);
        ani.start();
    }
}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;279&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyAc6ZbX2xbNpF7Gcz7DichXvGibIwkxT4DjM29yYvB27LdDJk5eb7uVvxjQx4C6QBWsNS02PaB2bBFg/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码浅析：&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;start 函数为触发动画的函数。运行程序后按数字键 1 即开始执行，可以看到正方体将从左运动到右，并且带一点弹性动画。这是因为 setup 中有一句&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;  ani = WenzyAni(1, -300, 300,3)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;它将 ani 对象初始化时。第一个参数表示整个动画的运行时间，第二个参数表示初始的数值，第三个参数表示结束时的数值。第四个参数表示选择应用的曲线类型&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;draw 函数通过 ani.val 来表示正方体的横坐标&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;每按下一次数字键 1 执行 start 函数时，正方体的运动都会从左变化到右。这是因为 startVal 与 endVal 的值在初始化时已经确定。如果希望正方形实现从右到左的运动，则需要重新初始化。按下数字键 3 就能实现这一效果。而来回按数字键 2，3 则能实现往复运动。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;279&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyAc6ZbX2xbNpF7Gcz7DichXvC2eFO0JEz2Ly8wkE99MqiaOCLI14qLTdddjUQxSvoUg1aVQ8vSME6qA/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(数字键 4)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;279&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyAc6ZbX2xbNpF7Gcz7DichXvdedoXHEAO1wibAdRDnq8ZuMrgNk754wtFcFVeibjyBZmcfAFfnt1QIUA/640?wx_fmt=gif&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(数字键 5)&lt;br /&gt;&lt;/span&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;279&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyAc6ZbX2xbNpF7Gcz7DichXvHfibrzg4zTLLaJCUhIwxIhGha8wJvoHwcicCAfvwDISw5tUZHriceYagg/640?wx_fmt=gif&quot; /&gt;&lt;br /&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt;  (数字键 6）&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-backh=&quot;279&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyAc6ZbX2xbNpF7Gcz7DichXvicnSuVjt7WQDZcrcy3L72gQlicPCFFl1JnibJiaP1ZJfc49VpPhZO7LeAQ/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;应用范例 02&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;下面再附上上篇文章中展示的几个 gif 源码，还是使用同样的类&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;ofApp.h 内 —-&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;#include “WenzyAni.h”
...

vector ani;
int showMode;&lt;/span&gt;
&lt;/pre&gt;
&lt;h3&gt;&lt;span&gt;ofApp.cpp 内 —-&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;br /&gt;&lt;span&gt;void ofApp::setup(){
    ofSetWindowShape(1920,1080);
    ofBackground(239,234,228);
    for(int i = 0;i &amp;lt; 5;i++){
        ani.push_back(WenzyAni(2,0,1,i));
    }
    showMode = 0;
}

void ofApp::update(){
    for(int i = 0;i &amp;lt; ani.size();i++){
        ani[i].update();
    }
}

void ofApp::draw(){
    ofColor myColor(50,120,133);
    ofSetColor(myColor);
    ofSetCircleResolution(50);

    if(showMode == 0){
        int num = ani.size();
        float spaceRatio = 0.8; // 计算间隙占方块的大小比
        float rectW = ofGetHeight() / (num + (num + 1) * spaceRatio);
        float space = rectW * spaceRatio;
        int interval = (ofGetHeight() - space) / num;
        ofSetLineWidth(5);
        float startPos = ofGetWidth() * 0.1;
        float endPos = ofGetWidth() - startPos;
        for(int i = 0;i &amp;lt; num;i++){
            ofSetColor(myColor);
            float x = ofMap(ani[i].val,0,1,startPos,endPos);
            float y = space/2 + (i + 0.5)* interval;
            ofDrawCircle(x,y,25);
            ofDrawLine(startPos,y,endPos,y);
        }
    }else if(showMode == 1){
        int num = ani.size();
        float spaceRatio = 0.4; // 计算间隙占方块的大小比
        float rectW = ofGetWidth() / (num + (num + 1) * spaceRatio);
        float space = rectW * spaceRatio;
        float rectY = ofGetHeight() * 0.5;
        int interval = (ofGetWidth() - space) / num;
        for(int i = 0;i &amp;lt; num;i++){
            ofPushMatrix();
            float x = space/2 + (i + 0.5) * interval;
            ofTranslate(x, ofGetHeight()/2);
            ofSetColor(myColor,ofMap(ani[i].val,0,1,255,0));
            ofDrawCircle(0,0,rectW/2);
            ofPopMatrix();
        }
    }else if(showMode == 2){
        int num = ani.size();
        float spaceRatio = 0.4; // 计算间隙占方块的大小比
        float rectW = ofGetWidth() / (num + (num + 1) * spaceRatio);
        float space = rectW * spaceRatio;
        float rectY = ofGetHeight() * 0.5;
        int interval = (ofGetWidth() - space) / num;
        ofSetLineWidth(4);
        for(int i = 0;i &amp;lt; num;i++){
            ofSetColor(myColor);

            ofPushMatrix();
            float x = space/2 + (i + 0.5) * interval;
            ofTranslate(x, ofGetHeight()/2);
            ofRotate(ofMap(ani[i].val,0,1,0,180));
            ofDrawLine(0,rectW/2,0,-rectW/2);
            ofDrawCircle(0,rectW/2,30);
            ofDrawCircle(0,-rectW/2,30);
            ofPopMatrix();
        }
    }else if(showMode == 3){
        int num = ani.size();
        float spaceRatio = 0.4; // 计算间隙占方块的大小比
        float rectW = ofGetWidth() / (num + (num + 1) * spaceRatio);
        float space = rectW * spaceRatio;
        float rectY = ofGetHeight() * 0.5;
        int interval = (ofGetWidth() - space) / num;
        for(int i = 0;i &amp;lt; num;i++){
            ofPushMatrix();
            float x = space/2 + (i + 0.5) * interval;
            ofTranslate(x, ofGetHeight()/2);
            ofSetColor(myColor);
            float w = ofMap(ani[i].val,0,1,0,rectW);
            ofDrawCircle(0,0,w/2);
            ofPopMatrix();
        }
    }
    ofSetColor(0);
    ofDrawBitmapString(&quot;ShowMode:&quot; + ofToString(showMode),50,50);
}

void ofApp::keyPressed(int key){
    if(key == 'r'){
        for(int i = 0;i &amp;lt; ani.size();i++){
            ani[i].start();
        }
    }

    if(key == OF_KEY_DOWN){
        showMode--;
        showMode = MAX(0,showMode);
    }
    if(key == OF_KEY_UP){
        showMode++;
        showMode = MIN(3,showMode);
    }
}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;运行效果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.55625&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYEra78JfU33th5M8ASbKB2bzy1T0dPErq41N3askZcTJp7CWPAPibZyA/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3725&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYwMPw1GmFVQ8rI3cu7ojHJH0p0rhIdEKdmpM1WeUNXo0WJdOicOOCkxw/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3725&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYwAulhMJTNfYamMrCLdkPFlicOA26iaRQDHiceCy9eQqJ1qrTKiaqNjxmLA/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3725&quot; data-type=&quot;gif&quot; data-w=&quot;800&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyBPibf0L8CVpBogz1F9YicTNYLJI96PvqibCnEkcyhrVJcSaesU9IR4rG1w2kePd0ibazicibtCZ0SZpkQA/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码浅析：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;个人日常中还是倾向于通过自定义函数来使用曲线。如果你不想过于深究各类函数曲线的性质，只希望实现具体的效果。也有办法可以直接采用别人定制好的各类运动曲线。最后再推荐两个插件&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;OF 插件 - ofxAnimatable&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-backh=&quot;670&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.2005988023952097&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;668&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/NGdxb6BrGyAc6ZbX2xbNpF7Gcz7DichXvZ6MLtds8hQ2TtThzwbicpcREbhNXERdlKYgo2wXMrBaJP4vHO7QUBCA/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下载地址：&lt;span&gt;https://github.com/armadillu/ofxAnimatable&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;附带的范例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;__bg_gif&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.56&quot; data-type=&quot;gif&quot; data-w=&quot;600&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/NGdxb6BrGyAc6ZbX2xbNpF7Gcz7DichXvYpdrt3NxhRflbvsO0rM1pOAO5icHSn1eeVWplLYw8EX9f1ILTWiaU5DA/640?wx_fmt=gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Processing 插件 - Ani&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在 IDE 的 Libraries 菜单中输入 “animation”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.28243243243243243&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1480&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/NGdxb6BrGyAc6ZbX2xbNpF7Gcz7DichXvjc0iciadea35jrXDW8gomBYu3QWrATffw4JtibibeJibOxiaJHDNiaauCk99Q/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;又或是通过以下链接手动下载：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;http://www.looksgood.de/libraries/Ani/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.8609550561797753&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1424&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/NGdxb6BrGyAc6ZbX2xbNpF7Gcz7DichXvRxo15BctXUs2ddNkNaldMkicjKQjEcEYY8z1CiamRD89LZFmMqfYVR3g/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;2.4480712166172105&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;674&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/NGdxb6BrGyAc6ZbX2xbNpF7Gcz7DichXviajFibxs3yO25t40uabbDKlhtSo1C7BLPNrhtshyIjH4pnWicEyZUajYw/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;：）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;∑&lt;/span&gt;&lt;span&gt;编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;来源 | InsLab&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 31 Jul 2018 16:52:30 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/XRLgz5q6XN</dc:identifier>
</item>
<item>
<title>你需要学好知识图谱----用AI技术连接世界</title>
<link>http://www.jintiankansha.me/t/PigMkHgdOW</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/PigMkHgdOW</guid>
<description>&lt;p&gt;&lt;span&gt;知识图谱作为人工智能领域的一个分支，绝不是用个数据库写几条查询，或者是用规则写一个表格的提取，就能称为成功运用的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;知识图谱=人工智能的大脑&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;知识图谱为互联网上海量、异构、动态的大数据表达、组织、管理以及利用提供了一种更为有效的方式，从而提高网络的智能化水平，使其更接近于人类的认知思维。目前，知识图谱已在智能搜索、 深度问答、社交网络以及一些垂直行业中有所应用，并成为支撑这些应用发展的动力源泉。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在未来的几年时间内， 知识图谱仍将是大数据智能的前沿研究问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你需要学好知识图谱，用AI技术连接世界。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;随着国内外典型的开源知识库和技术资源的丰富，系统的掌握知识图谱的核心技术原理不再是难事。知识图谱在医疗、电商、金融等行业的广泛的应用也开始让更多的人意识到人工智能的强大。未来，用AI 技术连接世界，可望亦可及。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们向你推荐这门课程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;《知识图谱》第二期&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;主讲老师&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;王昊奋&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;博士毕业于上海交通大学&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;中国计算机学会术语审定工作委员会主任&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;中文信息学会语言与知识计算委员会副秘书长&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;漆桂林&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;东南大学教授、博导，获得“六大人才高峰”资助&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;英国贝尔法斯特女皇大学计算机科学博士学位&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;开放知识图谱联盟OpenKG的联合创始人之一&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;两位著名知识图谱专家将从理论知识到工程方法论，为你答疑解惑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;课程大纲&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-croporisrc=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/NhqC8rk8kacs1EtRwf1uvhWhkwwsHSTgjY0SbHK3fVAwRK6wZBrIgyibNT2nt8TJxbO0kgkrJUB8EMWHbibfiaqTg/?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;880&quot; data-cropy1=&quot;247.91878172588832&quot; data-cropy2=&quot;3236.3451776649745&quot; data-ratio=&quot;3.3954545454545455&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;880&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/NhqC8rk8kacs1EtRwf1uvhWhkwwsHSTgtfLSn6u3YH8mpDmVQHW0fyHmCGiaP1tchAsAavvodYug5AticdA7Yc0w/640?wx_fmt=jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;开课时间：8月3日 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;掌握人工智能的大脑是开启新世界的钥匙。&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;👇👇👇&lt;/span&gt;课程详情，请点击&lt;/span&gt;&lt;span&gt;【阅读原文】&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 31 Jul 2018 16:52:29 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/PigMkHgdOW</dc:identifier>
</item>
<item>
<title>爱因斯坦是怎样学习物理的？</title>
<link>http://www.jintiankansha.me/t/vTpY2OGWSP</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/vTpY2OGWSP</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;em&gt;来源：&lt;/em&gt;SCOTTHYOUNG（ID:Scott-H-Young）&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5628834355828221&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;652&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/fohqsGChm8kMooufeDE6uLVmTGQ7Hk0HxEnMxztDUPo3jWleOFicPAwJkfSQOjl3C3bib5KuQy4NPg9mACTc1iaiaw/640?wx_fmt=jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;我最近读完了沃尔特·艾萨克森写的&lt;/span&gt;&lt;span&gt;《爱因斯坦传》&lt;/span&gt;&lt;span&gt;。这部传记不仅讨论了爱因斯坦的学术成就，还涵盖了他的反战行动主义，婚姻波折和巨大的名声。不过，我只想分享我觉得最有趣的部分：爱因斯坦是怎样学习的？&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;想要了解爱因斯坦怎样学习物理，这个想法咋看似乎毫无意义，就如同望着飞鸟并用力摆动胳膊并不能让你展翅飞翔。你如何仿效一个成为“天才”代名词的人？&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;即使你我可能并没有引发物理学变革的聪明才智，但我认为对他的研究还是会给我们以启发。无论爱因斯坦在学习中做了什么，&lt;/span&gt;&lt;span&gt;他显然做“对”了一些事情，因此值得我们去搞清楚那具体是什么。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;爱因斯坦有多聪明？（他真的小学数学不及格？）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;关于爱因斯坦最耳熟能详的一个故事就是他小学数学没及格。我认为这是那种听起来很棒的说法，以至于无论真实与否，都注定会流传开来。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;遗憾的是，这不是真的。爱因斯坦从小在数学上就很优秀。他自己也承认：&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;“我数学从来没有不及格过。在十五岁之前，我就已经掌握了微积分。”&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;虽然爱因斯坦显然不是一个“笨小孩”，但他也同样不是一个公认的天才。&lt;/span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;大学期间，爱因斯坦在数学上经常很吃力，他的物理课得到的都是5分或6分的高分（满分为6分），而几乎所有数学课都只得到4分（勉强及格）。他的数学教授，也是后来的合作伙伴赫尔曼·闵可夫斯基（Hermann Minkowski）称他为“懒汉”，物理学教授让·佩尔内（Jean Pernet）甚至在一门实验物理学的课程中只给爱因斯坦打了1分（不及格）。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;大学结束，爱因斯坦不太光彩地以全班倒数第二名的成绩毕业。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;毫无疑问，爱因斯坦的困境部分源于他特立独行的反叛性格，使他难与学术环境和谐共处。而这一情况也伴随着他后来的学术生涯——他在大学寻找教职几经波折，甚至在完成了后来为其赢得诺贝尔奖的工作成果之后也遇到困难。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;span&gt;爱因斯坦在物理学上的发现无疑是革命性的，无论以何种标准来衡量，“天才”的头衔他都当之无愧。然而早期的爱因斯坦要比“天才”二字丰富得多。这些都启示我，事后判定一个人是天才&lt;/span&gt;&lt;span&gt;很容易，但是要提前预知却可能困难得多。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;爱因斯坦是如何学习数学和物理的？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;鉴于爱因斯坦对物理学的巨大贡献，我认为现在值得追问一下他是如何学习物理的。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;在阅读整部传记的过程中，每当提到他学习和探索的方法时，我都会做笔记记录。然后从中总结出一些方法和态度，正是这些方法和态度造就了爱因斯坦革命性的发现和对物理学科的深刻理解。&lt;/span&gt;&lt;/p&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 学习源自解决难题，而非上课出勤&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;在阅读爱因斯坦早期求学经历时，有一件事显而易见，就是他厌恶死记硬背和上课。让·佩尔内教授让爱因斯坦挂科的很大原因是他经常逃课。正如爱因斯坦所说的：“我经常逃课，并且在家中以虔诚的热情向理论物理学的大师们学习。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.4063324538258575&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;379&quot; data-backw=&quot;379&quot; data-backh=&quot;533&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/fohqsGChm8kMooufeDE6uLVmTGQ7Hk0HXzt8CpqXHYUngptSDHGh4BZSPluosWWracwKgRbNSKq04BSzP90m9g/640?wx_fmt=jpeg&quot; /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;童年时期的爱因斯坦&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;逃课从而专注于在自己的空闲时间里解决难题，这是他的叔叔雅各布·爱因斯坦（Jakob Einstein）所培养的习惯，也正是这位叔叔把爱因斯坦引入代数学的大门。那时十二岁的爱因斯坦已经偏爱解决复杂算术问题，他的父母为他买了一本高等数学的教材供他在夏天学习。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦学习物理的方式，不是靠循规蹈矩地上课出勤，而是着魔般地自己“把玩”物理概念和方程。做题，而非听讲，是他如何学习物理的起点。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 只有自己证明之后，才算真正理解&lt;/span&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;如何判断你是否真的理解了所学的东西？爱因斯坦的方法是试图自己证明定理。这种习惯始于早年雅各布叔叔给他的挑战——证明毕达哥拉斯定理：&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;“费了很大力气，我根据三角形的相似性成功证明了这个定理。”爱因斯坦这样回忆。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;艾萨克森解释说，爱因斯坦“遇到新的理论时会亲自证明它们”。这种对爱因斯坦而言自然而然的物理学习方式，源自他想要了解事物本质的强烈好奇心和认为 “可以用一种简单的数学结构去理解自然”的信念。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;这里值得关注的不仅是他用证明命题的方式来学习物理，也包括其内在的驱动力。很显然，爱因斯坦的好奇心不只局限于将物理概念自如运用，而是希望对其形成深刻的理解和敏锐的直觉。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 直觉比方程更重要&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;相较于作为数学家，爱因斯坦在物理学上有着更好的直觉。事实上，直到努力构建广义相对论的那些年，他才倾向于将数学的形式化体系作为研究物理的一种方式。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦早年阅读的亚伦·伯恩斯坦（Aaron Bernstein）撰写的一套科学书对他这种直观地研究物理的方式产生了影响。这套书用充满想象力的图片来理解物理现象，例如，通过《想象的太空之旅》来理解电子信号，甚至还讨论了光速的恒定性，而这恰是后来爱因斯坦发现的狭义相对论的基础。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦后来在瑞士阿劳接受的教育深受瑞士教育改革家约翰·海因里希·裴斯泰洛齐（Johann Heinrich Pestalozzi）哲学思想的影响。裴斯泰洛齐声称：“形象化的理解是教授如何正确判断事物必要且唯一正确的方式”，他补充道，“数学和语言的学习倒是次要的”。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-backh=&quot;300&quot; data-backw=&quot;203&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.477832512315271&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;203&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/fohqsGChm8kMooufeDE6uLVmTGQ7Hk0HB9oRUQW1dZs4YAUIxqeG8h4qtzbWaUvIduLLe7Q8HRospYnOlib4hlw/640?wx_fmt=jpeg&quot; /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;瑞士教育改革家&lt;span&gt;约翰·海因里希·裴斯泰洛齐&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;是这些早期的影响直接导致爱因斯坦后来倾向于用形象化的方式解决物理难题，还是他本就是这样的思维模式，那些影响仅仅起了顺水推舟的作用？这很难说清。但不论是哪种情况，我认为都可以说发展直觉思维，尤其是图像直觉，在物理中有无可估量的重要作用。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;如何发展这样的直觉？爱因斯坦自己认为，“直觉只不过是以前知识经验的产物”。爱因斯坦通过证明和解决难题建立起的深刻理解无疑有助于他的形象化能力，并使其尽可能地从中受益。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4. 思考需要一个安静的空间和深度的专注&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦是“&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU0NDcxMzU5MA==&amp;amp;mid=2247483681&amp;amp;idx=1&amp;amp;sn=ea8023c6d14276167fbdae1e22b25790&amp;amp;chksm=fb76bf38cc01362e6ecc8642fdf37ee62663b4369bc62f27e07c0045ebf496644d7b5258bd8c&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;深度工作&lt;/a&gt;”的大师。他有着难以置信的专注能力，他的儿子提到：&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt; &lt;span&gt;“即使是最吵闹的婴儿哭声也不会打扰到父亲，”他补充道，“他可以完全不受噪音干扰继续他的工作。”&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;虽然没能获得学术教职，但正是在伯尔尼专利局无聊的工作给了他独处的时间来揭开相对论的奥秘。爱因斯坦谈到：&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;“我能在两三个小时内完成一整天的工作。剩下的时间，我会求解一些自己的猜想。”&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦年轻时对解题的痴迷，最终帮助他在“疲惫而狂热“的四周时间里破解了广义相对论的难题。这种高强度的工作有时会影响他的身体健康，在求解数学难题张量场方程的重压下，他的胃病也日益严重。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦的专注能力和对独处的尊崇，使他完成了那些他在物理学中最重要的贡献。甚至在年老的时候，他仍然会在船上待好几个小时，悠闲地推着船舵，仿佛沉浸在自己的思绪中，又突然停下来，在笔记本上写下潦草的方程式。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5. 通过思想实验理解猜想&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦最著名的学习和探索物理的方法一定是思想实验。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;其中最著名的例子是他想象自己骑在一束光线上。如果他以同样的速度与光束一起飞行，光束会发生什么？好吧，光束一定会静止。这对于爱因斯坦来说似乎无法接受，因为他深信麦克斯韦的电磁方程。但是如果光束不静止，又会发生什么呢？&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;这些思想实验建立在他对物理的直觉理解上，而这些直觉理解又建立在理论基础和求解难题的经验上。思想实验的优势是能够注意到那些物理现象中的矛盾和混乱，而没有出色直觉的物理学家很容易忽视这些。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;甚至在对物理原理判断错误的时候，爱因斯坦进行思想实验的能力也起了作用。正是依靠这类思想实验，他在如今被称为“ERP悖论”的论文中驳斥了当时对量子物理学的理解，表明量子力学可以瞬间在系统中产生变化，违反了光速。不过在这里，爱因斯坦的直觉是错误的——量子力学系统确实是以这样古怪的方式运动的——现在这被称为量子纠缠。&lt;/span&gt;&lt;/p&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6. 用更多的常识来颠覆常识&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;狭义相对论和广义相对论因是史上最深奥难懂的科学发现而闻名。在狭义相对论中，爱因斯坦发现不存在绝对时间——当两个人以不同的速度运动时，他们所感知的时间流逝速度并不一致——两者没有对错之分。在广义相对论中，爱因斯坦更进一步说明，引力会扭曲空间和时间。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;因此我们很容易认为，要推翻这类符合常识的原理需要在某种程度上背离常识。但是爱因斯坦的天才之处在于他能够通过舍弃一条原理（空间和时间的绝对量度）而调和另外两条符合常识的原理——相对论和光速的恒定性。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦的才能还在于他能够捍卫那些自己认为最合理的思想，即使这意味着要抛弃那些更长久以来所公认的思想。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt; &lt;span&gt;这种依靠其他直觉推翻常识的能力也许最终成为他无法接受量子力学的原因，而那正是他帮助建立的一套广受认可的物理学理论。他对严格决定论的直觉，使他在一生的大部分时间里都支持试图推翻量子力学的徒劳努力。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦的这种做法也揭示了学习物理、数学中很多违背直觉的原理的一种方法——从建立不同的常识性前提开始。&lt;/span&gt;&lt;/p&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;7. 从与友人的散步中获得灵感&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;虽然独处和专注是爱因斯坦学习和研究物理的根本要素，但与他人的谈话常常使他取得突破。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;最有名的例子是他与老友米凯莱·贝索（Michele Besso）的一次散步。在他苦苦思索狭义相对论期间，某日，他边和朋友散步边试图向朋友解释自己的理论。非常沮丧地，他宣称他将要放弃继续研究这套理论。然而突然，他有了正确的领悟，第二天他告知贝索，自己已经“完全解决了这个难题”。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-backh=&quot;320&quot; data-backw=&quot;318&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0062893081761006&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;318&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/fohqsGChm8kMooufeDE6uLVmTGQ7Hk0HiadPJMVkTribFgHsmQicvSMDkKr4l8MricaGW2JzsL5eojkpsYxPkuBNnw/640?wx_fmt=jpeg&quot; /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦和&lt;span&gt;老友米凯莱·贝索&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;大声地和他人探讨、分享想法能够将之前不相关的思考联系起来。爱因斯坦很好地利用这个方法和朋友及同事探讨棘手的问题，即使他们只能倾听而无法积极地参与讨论。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;8. 具有反叛精神&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦从来不是一个墨守成规的人。虽然在努力寻找物理学的教职时，他的反叛精神很可能影响了他早期的学术生涯，但这也很可能促成了他最重大的科学发现并使他后来名声显赫。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;这种反叛精神可能对他学习物理很有帮助，因为他拒绝接受自己无法认同的正统学说。他厌恶德国的教育制度，艾萨克森在书中这样写道：“这种机械训练、不容置疑的教学风格是令人厌恶的。”这种对传统教育方式的抗拒促使他通过教科书和练习题自学物理。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;后来，同样的反叛精神在他引发物理学革命的过程中显得至关重要。例如，他对光量子的研究，最初是由马克斯·普朗克发现的。然而不同于年长的普朗克，爱因斯坦将光量子视为一种物理实体——光子——而不是一种数学发明物。他并不赞同光是以太中的波这一当时占主导地位的理论。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;当很多学生乐于遵从主流的教育制度和理论观点时，爱因斯坦却只认同他认为是对的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;9. 一切知识都源于好奇&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt; &lt;span&gt;“好奇心有其存在的意义，”爱因斯坦解释道，“当思考关于永恒、生命，以及了不起的现实结构的奥秘时，我们不禁心存敬畏。”&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;除了智力超群外，这种好奇心可能是爱因斯坦最具代表性的品质。他对物理的热爱始于他还是个小男孩的时候，当他拿着指南针，了解到指针会因为一股看不见的力量而转动时，他被深深吸引了。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;好奇心是他学习物理的动力。当爱因斯坦对一件事不感兴趣时，他会变得相当懒惰和固执，但对于理解事物的本质他却有着强烈的热情，“他从不花心思在成年人的琐事上”。在他自己心中，好奇心也是他取得伟大成就的最重要原因。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦坚信，“相比于义务，热爱是更好的老师”。对学习和知识的热爱可能是一种比自律更重要的能力，需要好好培养。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-backh=&quot;250&quot; data-backw=&quot;300&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.8333333333333334&quot; data-s=&quot;300,640&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/fohqsGChm8kMooufeDE6uLVmTGQ7Hk0HbickdfRgpX6M74ZsE2J2VJSMfjSChcicpyV07SmeJMMKbZ9NABQWNbFQ/640?wx_fmt=jpeg&quot; /&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;永远充满好奇心的爱因斯坦&lt;/span&gt;&lt;/p&gt;
&lt;h2 dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;像爱因斯坦一样学习&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;爱因斯坦的学习方法不能完全脱离他自身。他极度的专注是源自他的才智还是好奇心？他那轻而易举将思想实验形象化的能力是来自不同寻常的瑞士教育体系的培养，大量的练习，还是天生的能力？他在物理学的革命性成就是源自他的天赋才能、反叛精神，还是好运气？抑或兼而有之？我不确定这些问题是否存在明确的答案。&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;然而，可以确定的是爱因斯坦对大自然的敬畏和对研究对象的谦卑态度。正如他写道：&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;“宇宙的规律彰显着一个神灵，它的能力远远超过了人类，能力平凡的我们在它面前应当心存谦卑。”&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span&gt;因此，即使我们绝大多数人可能难以企及爱因斯坦的天才，但他的好奇心、谦卑和坚韧的态度依然值得我们效法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt; &lt;/em&gt;&lt;/span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 30 Jul 2018 16:02:35 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/vTpY2OGWSP</dc:identifier>
</item>
</channel>
</rss>