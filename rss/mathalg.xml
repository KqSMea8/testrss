<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed43.com%2Fmathalg-jtks.xml&amp;max=5&amp;links=preserve&amp;exc=1" />
<atom:link rel="alternate" title="Source URL" href="http://feed43.com/mathalg-jtks.xml" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1" />
<title>算法与数学之美</title>
<link>http://www.jintiankansha.me/column/c9dZ5TM2aS</link>
<description>算法与数学之美 - 今天看啥</description>
<ttl>360</ttl>
<item>
<title>改变世界的十位算法大师</title>
<link>http://www.jintiankansha.me/t/SVZ4dD9GnF</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/SVZ4dD9GnF</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;Don E.Knuth 高德纳&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.92&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz/uwuLjCrZICwtfZfdBQ9eLVvnkKNZwq5MLP6oeQzZCw3ARbtaibwpKVcGoibdadUFOb2Veiaul3DOVUeIia1ibUWicNew/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot; width=&quot;100%&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;算法和程序设计技术的先驱者。Oh,God!一些国外网站这样评价他。一般说来，不知道此人的程序员是不可原谅的。其经典著作《计算机程序设计艺术》更是被誉为算法中“真正”的圣经，像KMP和LR(K)这样令人不可思议的算法，在此书比比皆是。难怪连 Bill Gates都说：“如果能做对书里所有的习题，就直接来微软上班吧！”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;对于Don E.Knuth本人，一生中获得的奖项和荣誉不计其数，包括图灵奖，美国国家科学金奖，美国数学学会斯蒂尔将（AMS Steel Prize），以及发明先进技术荣获的极受尊重的京都奖（KyotoPrize）等等，写过19部书和160余篇论文，每一篇著作都能用影响深远来形容。 同时也是世上少有的编程达到40年以上的程序员之一。他除了是技术与科学上的泰斗外，更是无可非议的写作高手，技术文章堪称一绝，文风细腻，讲解透彻，思路清晰而且没有学究气，估计这也是《计算机程序设计艺术》被称为圣经的原因之一。&lt;/span&gt;&lt;/p&gt;

&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Udi Manber 乌迪·曼伯尔&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.4727272727272727&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz/uwuLjCrZICwtfZfdBQ9eLVvnkKNZwq5MbbPnoz6ZSiaHbVgdWVkQaZ9CicZdIZkfUzaQIXVnRtCBrL2Q4PoakkTw/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;220&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;他是首席算法官，世界上还有如此奇怪的职位？但是对于Amazon乃至Google来说，这一点也不奇怪。Udi Manber，这位前Amazon的“首席算法官”，现在是Google负责工程事务的副总裁。他研究WWW的应用程序、搜索以及隐藏在这背后的算法设计。在此期间，他与其他人共同开发了Agrep、Glimpse和Harvest等Unix上的搜索软件。1998年，Udi成为了Yahoo!的首席科 学家。2002年，Amazon创造性地给了Udi“首席算法官”的职位，和Udi为Amazon的“SearchInside the Book”搜索项目所做的工作相得益彰。&lt;/span&gt;&lt;/p&gt;

&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Edsger Wybe Dijkstra 艾兹格·迪科斯彻&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.145&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz/uwuLjCrZICwtfZfdBQ9eLVvnkKNZwq5MVslJcogMqeoU6HxwGiadfgqm0kmia7qBMF9Ftnwwbwl5leziaMia8ARm0A/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;400&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;1930年出生于荷兰阿姆斯特丹，2002年逝世于荷兰纽南。他在祖国荷兰获得数据和物理学学士，理论物理博士学位，2000年退休前一直是美国Texas大学的计算机科学和数学教授。以发现了图论中的最短路径算法（Dijkstra算法）而闻名于世，1972年因为ALGOL第二代编 程语言而获得图灵奖。“Go To StatementConsidered Harmful”(EWD215)也是被广为传颂的经典之作。除了科学研究之外，他最喜欢做的事情就是教学，被人称作“一天教学24小时”的教授。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;且不说Dijkstra算法对计算科学，网络科学发展的深远影响，单从他在1972年获得图灵奖时的演讲“The Humble Programmer”就不得不肃然起敬，在获得计算机科学中至高无上的奖项时，Edgs Wybe Dijkstra仍然称自己不过是一个谦逊普通的程序员，何等胸襟，举世之中几人可比。&lt;/span&gt;&lt;/p&gt;

&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;George Dantizig 乔治·伯纳德·丹齐格&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.52&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz/uwuLjCrZICwtfZfdBQ9eLVvnkKNZwq5MlsZibo9jibuO1QgMf2bEBvO6xpQ8yL6wXgswiaNIFniauoOF7RY78nywXQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;300&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;span&gt;运筹学大师，由他父亲一手培养出的天才。George的父亲是俄国人，曾在法国师从著名的科学家Henri Poincar e。他曾经这样回忆自己的父亲：“在我还是个中学生时，他就让我做几千道几何题……解决这些问题的大脑训练是父亲给我的最好礼物。这些几何题，在发展我分析能力的过程中，起了最最重要的作用。”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在伯克利学习的时候，有一天George上课迟到，只看到黑板上写着两个问题，他只当是课堂作业，随即将问题抄下来并做出解答。六个月后，这门课的老师 ——著名的统计学家Jerzy Neyman——帮助他把答案整理了一下，发表为论文，George这才发现自己解决了统计学领域中一直悬而未决的两个难题。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;George后来在运筹学建树极高，获得了包括“冯诺伊曼理论奖”在内的诸多奖项。他在Linearprogramming and extensions一书中研究了线性编程模型，为计算机语言的发展做出了不可磨灭的贡献。天妒英才，他于2005年5月13日去世。&lt;/span&gt;&lt;/p&gt;

&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;James Cooley&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.212686567164179&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz/uwuLjCrZICwtfZfdBQ9eLVvnkKNZwq5MibvveiaIEDJRD5kN6VM1ZjNRu71pfjI16aLnkPCRftZWaLtbL8f859EA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;268&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;美国数学家，哥伦比亚大学的数学博士，以他所创造的快速傅立叶变换(FFT)而著名，不能不说是意义极其重大，FFT的数学意 义不光在于使大家明白了傅立叶(Fourier)变换计算起来是多么容易，而且使得数字信号处理技术取得了突破性的进展，对于现在的网络通信，图形图像处理等等领域的发展与前进奠定了基础。Fourier变化的意义在于将电能变为了工业的命脉，而FFT的意义更是在于他推动了整个社会信息化的进程。在 IBM研究中心中主要从事数字信号处理的研究一直到1992年退休，同时他还是IEEE的数字信号处理委员会的成员。1980年获得ASSP's Meritorious Service Award,1984年获得ASSP Society Award以及IEEE Centennial Medal。&lt;/span&gt;&lt;/p&gt;

&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;John Backus 约翰·巴克斯&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.3018867924528301&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz/uwuLjCrZICwtfZfdBQ9eLVvnkKNZwq5MAgrxeUqH8NqgyCZXd7OFrlMfsMYTRD37pe8TuTFwDHQiaDc18WIkaEg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;265&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;FORTRAN之父，早年在Hill School学习的时候因为讨厌学习，成绩一踏糊涂而不得不在暑假补课。1943年他在父亲的要求下到维吉尼亚大学学习化学，随后参军、照顾头部受伤的伤员、在医学学校学习治疗，可是最后又都放弃了。不过还好，战后Backus进入纽约哥伦比亚大学学习数学，并于1949年毕业。在毕业前夕，他跑到了麦迪逊大街的IBM计算机中心参观。事情凑巧，和导游聊天的时候Backus谈到自己正在找工作，在导游的鼓励下，他和中心一位主管的面谈，成为了一名IBM?的程序员。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在IBM，Backus的才华得到了施展，发明了人类历史上第一个高级语言——FORTRAN。接着，又提出了规范描述编程语言语法的BNF。这位当年的“差生”终于被整个计算机世界肯定——美国计算机协会于1977年授予John Backus图灵奖。&lt;/span&gt;&lt;/p&gt;

&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Jon Bentley&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.45&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz/uwuLjCrZICwtfZfdBQ9eLVvnkKNZwq5MFrWhvWKkooE8nYEh48VmdKjNOtIVQEerqGYOl8KUU8To6AwKjM7SsQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;220&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;他写作过三本编程书籍，其中最著名的就是涵盖从算法理论到软件工程各种主题的Programming Pearls(《编程珠玑》)，这其实是他发表过的文章的合集。在这些文章里，Jon从工程实现的角度出发，为程序员们提供了一个个艰难问题的解决方案， 犹如一颗颗闪闪发亮的珍珠。Bentley的珍珠超出了可靠工程学的范畴，利用他的洞察力和创造力为那些恼人的问题提供了独特而巧妙的解决方案。&lt;br class=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Nicklaus Wirth 尼古拉斯·沃斯&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7638888888888888&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz/uwuLjCrZICwtfZfdBQ9eLVvnkKNZwq5MpPvQeDz0LCaUoLJa0qF89LKChIKcuRV68Mvm0ygy6SfxwOmbUheANg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;288&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;Pascal之父，如果说有一个人因为一句话而得到了图灵奖，那么这个人应该就是NicklausWirth，这句话就是他提出的著名公式“算法+数据结构=程序”。这个公式对计算机科学的影响程度足以类似物理学中爱因斯坦的“E=MC^2”——一个 公式展示出了程序的本质。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Nicklaus Wirth，1934年出生于瑞士，1963年在加州大学伯克利分校取得博士学位。取得博士学位后直接被以高门槛著称的斯坦福大学聘到刚成立的计算机科学 系工作。在斯坦福大学成功的开发出Algol W以及PL360后，爱国心极强的Nicklaus Wirth于1967年回到祖国瑞士，第二年在他的母校苏黎世工学院他创建与实现了Pascal语言——当时世界上最受欢迎的语言之一。后来他的学生 Philipe Kahn毕业后和Anders Hejlsberg(Delphi之父)创办了Borland公司靠Turbo Pascal起家，很快成为了将Borland发展成为全球最大的开发工作厂商，这一切都不得不说要归工于PASCAL语言的魅力。PASCAL已经影响 了整整几代的程序员，Nicklaus Wirth的思想还将会继续指引现在和以后的程序员前进的方向。&lt;/span&gt;&lt;/p&gt;

&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;1&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Robert Sedgewick 罗伯特·塞奇威克&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.65&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz/uwuLjCrZICwtfZfdBQ9eLVvnkKNZwq5MZNgkS7WOh78C1RiaGhE6UMRqR8Bson2g68S48IgDicvSLwPm6CSFRqibA/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;220&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;
&lt;section class=&quot;&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;算法的讲解者——是普林斯顿大学的计算机科学教授。他还是Adobe Systems的一名主管，也曾作为访问学者在Xerox PARC、IDA和INRIA工作。他在斯坦福大学获得博士学位。他的著作包括Algorithm in C、Algorithm in C++、Algorithm in Java等系列书籍，这些都再版多次。“没有人能够将算法和数据结构解释得比Robert Sedgewick更清楚易懂了！”很多读过他著作的程序员这样说。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;目前Robert正在研究算法设计、数据结构、算法分析等方面的基础理论。他善于通过数学方法评估和预测算法性能，设法发现算法、数据结构的通用机制，例如使用逼近方法寻找更快速更高效的算法。另外，他还将算法和图形学结合 起来，例如使用可视化方法评估算法效率，算法的图形化模拟，用于出版物的高质量算法表现方法等等。&lt;/span&gt;&lt;/p&gt;

&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Tony Hoare 托尼.霍尔&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz/uwuLjCrZICwtfZfdBQ9eLVvnkKNZwq5MyoaITRLwDwdBzV0ibAwyiajsSdcl801QibHhgQKS9xSokZcolHgWK3VKg/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;220&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;

&lt;section class=&quot;&quot; readability=&quot;14&quot;&gt;&lt;p&gt;&lt;span&gt;计算机领域的爵士，1934年出生于英国，1959年博士毕业于俄罗斯莫斯科国立大学，获得语言机器翻译专业学士学位。1960年发布了使他闻名于世的快速排序算法（Quick Sort），这个算法也是当前世界上使用最广泛的算法之一。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Tony Hoare在取得博士学位后，就职于Elliott Brothers，领导了Algol 60第一个商用编译器的设计与开发，由于其出色的成绩，最终成为该公司首席科学家。从1977年开始，Tony Hoare博士任职于牛津大学，投身于计算系统的精确性的研究、设计及开发。因其对Algol 60程序设计语言理论、互动式系统及APL的贡献，1980年被美国计算机协会授予“图灵奖”。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1999年在牛津大学退学后，Tony Hoare博士被微软剑桥研究院聘请担任高级程序员，从事微软剑桥研究院研究生成果的工业化应用的工作，以及协助其它研究人员进行服务于软件产业及用户的长期基础研究项目。2000年因为其在计算机科学与教育上做出的贡献被封为爵士。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;p&gt;&lt;span&gt;∑编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 13 Jul 2018 15:44:04 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/SVZ4dD9GnF</dc:identifier>
</item>
<item>
<title>贝叶斯法则：预测未来</title>
<link>http://www.jintiankansha.me/t/TacNBf37xX</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/TacNBf37xX</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.2654867256637168&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkymKiawEBibkSJiaNJ0qFH5q5oxZ6ic9At9iapD7UVKAAeg92xR6pjtyUjNzFuhpftiaLZYvxY6ZR9kYuKg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;113&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文节选自《算法之美：指导工作与生活的算法》&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;中信出版集团，2018年05月出版&lt;/span&gt;&lt;/p&gt;


&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;人类获得的所有知识都是不确定的、不准确的和不全面的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——伯特兰·罗素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;明天太阳会照常升起。你可以用你的一切来打赌太阳会出来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——安妮&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;1969年，J. 理查德·戈特三世在普林斯顿攻读天体物理博士学位之前，他去欧洲旅行了一趟。他看见了柏林墙，那是8年前建成的。站在墙的影子下，这仿佛是冷战的一个鲜明象征，他开始思索这墙会将东德和西德地区继续分割多久。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;从表面上看，试图做出这种预测有些荒谬。即使撇开地缘政治的不可预测性不说，这个问题仅在数学上似乎就很可笑：因为它试图从一个单一数据点进行预测。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;但是，尽管这看起来很可笑，但我们总是会根据需要做出这样的预测。你到了一个外国城市的公共车站，也许其他游客已经站在那里等了7分钟。下一班车什么时候到？继续等待是否值得？如果是这样的话，在放弃之前你应该再那等多久？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;或者你的一个朋友已经和某人约会了一个月，希望得到你的建议：邀请他们一起参加即将到来的人的婚礼是否太早？这种关系已经有了一个良好的开端，但是什么时候开始制订计划比较合适呢？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;谷歌的研究部主任彼得·诺维德曾进行过一次题为“数据的不合理有效性”的著名演讲，该演讲深究了“数十亿琐碎的数据点最终如何能被理解”。媒体不断告诉我们，我们生活在一个“大数据时代”，计算机可以筛选这数十亿的数据点并发现一些肉眼看不到的细节。但跟日常生活联系最密切的问题往往是另一种极端。我们的生活充满“小数据”，我们就像看到柏林墙的戈特一样，也就是通过一个单一的观察，做一个推论。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;那么我们一般怎么做呢？我们又应该怎样做？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;故事发生在18 世纪的英国，那时，有一个研究领域对伟大的数学思想家来说是不可抗拒的（对那些神职人员也是如此），那就是赌博。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;贝叶斯牧师的倒推理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;因此，如果我们相信过去的经验，并把它作为我们判断未来的标准，那这些标准就一定不是确定的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——大卫•休谟&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;250 年前 ，贝叶斯牧师就很重视小数据预测问题，他来自英国迷人的温泉城镇坦布里奇韦尔斯，是一位长老会的牧师。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;贝叶斯设想，如果我们买10 张新的、不熟悉的抽奖彩票，其中有5 张中奖，那么要估计中奖概率就似乎相对容易：5/10，或50%。但是，如果我们只买了一张彩票，并赢得奖品呢？我们真的认为中奖的概率就是1/1，或是100%的？这似乎过于乐观，不是吗？如果是这样的话，那中奖概率应该是多少？我们应该猜多少呢？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;对于那些曾在不确定性推理历史上产生如此重大影响的人来说，贝叶斯自己的故事也具有讽刺的不确定性。他出生于1701年或者1702年，出生地是英国的赫特福德郡，或是伦敦。在1746年，或1748年，或1747年，抑或是1749年，他写了一篇在数学界最具影响力的论文，他却未将它发表，并继续做其他事情。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在这两个事件之间我们有了更多的把握。作为牧师的儿子，贝叶斯去爱丁堡大学学习神学，并像他父亲一样被任命为牧师。他对数学和神学感兴趣，并在1736年为牛顿全新的 “微积分”理论写了一篇慷慨激昂的辩护书，以回应乔治伯克利主教对牛顿的攻击。这使他在1742年当选为皇家学会的成员，并被赞誉为“擅长几何、数学和哲学学习的绅士”。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1761年贝叶斯去世后，他的朋友理查德·普莱斯被要求整理他的数学论文，看是否有可发布的内容。一篇文章引起了他的兴趣，并令他特别兴奋——他说这篇文章“极为出色，值得保存”。这篇论文就论述了本文所讨论的彩票问题：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;span&gt;让我们想象一个人在抽奖的时候，对会不会中奖完全不知道，也不知道中奖和无奖的比例如何。让我们进一步假设，他要从他之前了解到的无奖的数量来推测相对的中奖数量，并询问他在这些情况下能做出什么合理的结论。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;贝叶斯的关键见解是，试图使用我们看到的中奖和未中奖彩票来分析彩票来源于整体彩票池的方法，本质上是在倒推。他说，要做到这一点，我们需要先用假设向前推理。换句话说，我们首先需要确定，如果各种可能场景都成真的情况下，我们中奖的可能性有多少。这个被现代统计学家称为“可能性”的概率给了我们解决问题所需要的信息。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;例如，假设我们买了三张彩票，三张都中奖了。现在，如果这种彩票中奖率特别高，所有彩票都能中奖，那我们的买三中三的中奖率就肯定会一直发生，在这种情况下就是100% 的概率。但如果只有一半的彩票能中奖，那我们三张彩票的中奖率就是1/2×1/2×1/2, 也就是1/8。如果1 000 张彩票只有一张能中奖，那么我们的中奖率将是1/1 000×1/1 000×1/1 000，也就是1×10–9。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;贝叶斯认为，因此我们应该判断如何能让所有彩票都尽可能中奖而不是一半能中奖，或者尽可能使一半的彩票中奖而不是1/1 000。也许我们生来便拥有这种直觉，但贝叶斯的逻辑思维却给我们提供了为这种直觉定量的方法。在同等条件下，我们应该想象成所有彩票都中奖的概率比一半中奖的概率要高8 倍，因为我们在这种情况下买的彩票正好是8 倍多的中奖概率（100% 与1/8）。同样的，一半的彩票中奖的概率正好是1 000 张中一张中奖的1.25 亿倍，我们已经通过比较1/8 和1×10–9 而得知其中的原因。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这是贝叶斯论证的关键所在。从假设的过去向前推理，并奠定了理论基础，让我们可以向后找到最大的可能性。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt;  这是一个巧妙和创新的方法，但它对抽奖问题没能提供一个完整的答案。普莱斯在向皇家学会提交贝叶斯的研究结果时，他能够确定，如果你买了一张彩票并中奖了，那么至少有一半的彩票都能中奖的概率是75%。但是，考虑概率的概率问题会让人有点儿头晕。更重要的是，如果有人在催促我们：“好吧，但是你认为彩票的中奖率到底是多少？”我们仍然不知道该说什么。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如何将所有可能的假设提取到单一的期望值，这一问题将在短短几年后由法国数学家皮埃尔·西蒙·拉普拉斯解答。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;拉普拉斯定理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1749年，拉普拉斯生于诺曼底，他父亲送他到一所天主教学校，并希望他成为神职人员。拉普拉斯继续在卡昂大学学习神学，他不像贝叶斯那样一生都能平衡对神学和科学的奉献，因此他最终放弃了做牧师，而专攻数学。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1774年，在完全不知道贝叶斯以前做的工作的情况下，拉普拉斯发表了一篇雄心勃勃的论文，名为“事件原因的概率论”。在这篇论文中，拉普拉斯终于解决了如何从观察到的效果向后推理并找出可能的原因这一问题。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如我们所见，贝叶斯找到了一种比较两种假设的相对可能性的方法。但是在彩票这一问题上，这里的假设几乎就是无穷的——每一个中奖彩票可能的比例。利用微积分这一曾备受争议却受到贝叶斯坚决拥护的数学学科，拉普拉斯能够证明这个巨大范围的可能性，这可以提取成一个单一的预估值和一个非常简洁的数字。他表示，如果我们提前真的不知道彩票的情况，然后当我们第一次买的三张彩票中的一张彩票中奖了，我们可以推测奖池里彩票的总中奖比例为2 / 3。如果我们买三张彩票，都中奖了，那我们可以推测总中奖比例正好是4/5。事实上，如果买n 张彩票共w 张中奖，那么中奖率就是中奖数加1，除以所购买的数目加2，即w+1/n+2。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这种令人难以置信的简单的方法估计概率的简单方法被称为拉普拉斯定律，它很容易就能适用于任何你需要通过历史事件来评估概率的情况。如果你做了10 次尝试，其中有5 次成功，拉普拉斯定律估计你的整体成功概率是6/12 或50%，这符合我们的直觉。如果你只试一次便取得成功，拉普拉斯给的估计是2/3，这比假设你每次都赢更合理，也比普莱斯的观点更具可操作性（它告诉我们，50% 或更大的成功概率有75% 的元概率）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;拉普拉斯继续将他的统计方法应用到广泛的时间问题上，包括评估男孩和女孩的出生率是否真正平均。（他发现，男婴其实比女婴的出生率稍高。）他还写了关于概率的哲学论文，可以说这是给大众读者的第一本关于概率的书，也是最好的概率书之一，此书奠定了他的理论基础并讲述了这些理论在法律、科学与日常生活上的应用。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;拉普拉斯定律为我们在现实世界中面对小数据时提供了第一种简单的经验法则。即使我们只进行了一些或一次观察，它也都能给予我们实际指导。想知道你的车晚点的概率吗？你的垒球队会赢吗？数一数过去已经发生的数量再加一，然后除以可能的机会数再加2。拉普拉斯定律的精髓就在于无论我们有一个单独的数据点或数以百万计的数据，它都同样适用。小安妮相信太阳明天会升起是有道理的，这句话告诉我们：地球已经连续看到太阳上升约1.6 万亿天，在下一次的“尝试”中看见太阳不升起来的机会，几乎没有可能。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;贝叶斯法则与先验信念&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;可以想象，所有这些假设都是一致并可以想象的。为什么我们要偏向其中一种，而这一种并不比其余的更一致或可以想象？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——大卫•休谟&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;拉普拉斯也考虑了另一种修饰贝叶斯理论的方法，这将被证明是至关重要的：那就是如何处理那些比其他假设可能性更大的假设。例如，买彩票时，99%的中奖率是有可能的，但我们可以假设中奖率更有可能只有1%。这一假设应该体现在我们的估算过程中。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;说得更具体点儿，例如有一个朋友给你看两个不同的硬币。一个是正常的“公平”硬币，正反两面都具有50–50的概率，另一种是两面都是头像的硬币。他把它们扔到一个袋子里，然后随意地拿出一个，他将硬币旋转一次：是头像。你认为你的朋友旋转的是哪个硬币？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;贝叶斯的反向工作方案使这个问题变得简单。那个公平硬币转到头像的概率是50%，另一个双头硬币转到头像的概率是100%。因此，我们可以自信地断言，转到这个硬币的概率是100%除以50%，或朋友掏出双头硬币的概率是它的两倍。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;现在考虑下面一次的旋转。这一次，朋友给你看9个公平硬币和一个双头像硬币，把所有10枚硬币都装进袋子，随机抽取一个，并翻转它：还是头像。现在你怎么想？这次是公平硬币还是双头像硬币？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;拉普拉斯预料到了这一点，而且答案又一次简单得令人印象深刻。如果和以前一样，一枚公平硬币转到头像的概率正好是一枚双头像硬币的一半。但现在，首先公平的硬币被抽到的概率就是双头像硬币的9 倍。事实证明，我们可以把这两个不同的概率都考虑进去，并把它们相乘：这就是说，你朋友持有一个公平的硬币的概率是双头像硬币的4.5 倍。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;描述这种关系的数学公式，将我们先前持有的观念和我们眼前的证据结合起来，就形成了后来的贝叶斯法则。有点儿讽刺的是，真正重要的工作却是由拉普拉斯完成的。它提供了一个非常简单的解决方案来如何处理现有的信念与观察到的证据：将它们的概率相乘。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;值得注意的是，有一些预先存在的信念，在计算这个公式时至关重要。如果你的朋友只是走近你说：“我从这个袋子里翻出了一枚硬币，最后转出头像那面。你认为这是一枚公平硬币的概率有多大？”除非你最开始就对袋子里是什么硬币有一定了解，否则你完全无法回答这个问题。（当你对任何一个概率都无从得知的时候，你便无法将两个概率相乘），在硬币翻转之前，你对“袋子里”是什么的感觉，或是说在你看到任何数据之前，每个假设的概率都是真实可能的，这就是所谓的先验概率，或者简称为“先验”。贝叶斯法则总是需要一些先验，即使它只是一个猜测。有多少枚双头像硬币？抽到他们的概率有多大？那么，你的朋友有多大可能是一个骗子呢？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;贝叶斯法则依赖于先验概率，这一点在历史上的某些时刻被认为是有争议的、有偏见的，甚至是不科学的。但在现实中，我们的头脑实际上很少会进入一个完全空白甚至停滞的状况。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当你对先验概率有一定的预估时，贝叶斯法则也适用于各种各样的预测问题，无论它们是大数据类型还是更常见的小数据排序。计算彩票获奖概率或扔硬币的概率仅仅是开始。由贝叶斯和拉普拉斯研究出的方法可以在任何时候帮助我们，尤其是当我们遇到不确定性或数据不足的问题和工作时。这正是我们试图预测未来时所面对的情况。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;哥白尼原则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;预测本就是一件难事，预测未来尤其如此。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——谚语&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;当理查德·戈特看到柏林墙时，他问了自己一个非常简单的问题：我在哪？也就是说，在这一人工建筑存在的全过程中，我是否恰好已经到达了呢？简而言之，他是在从时间角度问一个空间问题，而这一问题正是在400年前深深吸引着天文学家尼古拉·哥白尼的问题：我们在哪？地球在宇宙的什么位置？与前人不同，哥白尼激进地以为地球不是宇宙的中心，也就是说地球没有什么特别的。戈特决定采取同样的关于时间的分析步骤。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;他设想，他到达柏林墙的那一刻并不特别，因为这只是柏林墙整个历史中的一瞬。如果有任何一个时刻都有同样的可能性，那么平均来说，他的到来应该是在一个精确的中间点（因为他有50%概率是在此之前到来，或50%的概率是在此之后）。更普遍的是，除非我们确定我们在某个特定时间现象中出现的特定中间点。a如果我们假设我们到达的中间点有精确的时间，那么对于它在未来还可以持续多久的最佳猜测就变得很明显：确切地说就是它已经存在的时间。戈特看到柏林墙时已经建成8 年了，所以他最好的猜测是，它将再存在8 年。（最终，这个数字是20 年。）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt;  这个简单的推理，被戈特称为哥白尼原则，它可以得出一个简单的算法，能为各类事件做出预测判断。在没有任何先入为主的预测时，我们不仅可以用它来获得对柏林墙终结时间的预测，同时也可以预测任何其他短期和长期现象。哥白尼原则预测道，美利坚合众国作为一个国家将一直持续到2255 年左右，谷歌将持续到大约2032 年，你与你的朋友一个月前开始的一段关系将可能再持续约一个月（也许你该告诉他不要参加刚收到的婚礼邀请呢）。同样，它告诉我们要持怀疑态度，例如，《纽约客》杂志封面是一个人拿着一个6 英寸的智能手机，上面有大家熟悉的网格正方形应用程序图标，标题为“2525”。但这是令人怀疑的。据我们所知，智能手机刚诞生10 年，哥白尼原则告诉我们，它不可能出现在2025 年，更别说5 世纪后了。到2525年，即使还有一个纽约市存在，也会让人感到吃惊。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;更实际地说，如果我们正在考虑一份建筑工地的工作，他们的标牌表明“上一次工程事故发生在7 天前”，我们可能会想离开，除非这是一份我们计划做得特别短的工作。如果一个城市的公交系统承担不起可以告诉乘客下一班车什么时候会到来这一非常有用却很昂贵的实时提醒系统的话，哥白尼原则表明，可能有一个更简单也更便宜的替代品。那就是简单地显示前一辆公交车到达此处的时间距离现在有多久，这可以为判断下一辆公交车到来的时间提供一个实质性的提示。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;但是哥白尼原则就一定正确吗？当戈特在《自然》杂志上发表了他的猜想之后，该杂志收到了很多重要信件。当我们尝试将规则应用到一些比较熟悉的例子时，很容易理解这是为什么。如果你遇到一个90岁的男子，哥白尼原则预测他会活到180岁。同时，每个6岁的男孩都会被预测将在12岁时早逝。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;要理解为什么哥白尼原则是合理的，以及为什么它有时不合理，我们需要回归到贝叶斯法则。因为，哥白尼原则尽管具有明显的简单性，但其的确是贝叶斯法则的一个实例。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;贝叶斯与哥白尼&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在预测未来时，如柏林墙的寿命这类问题，我们需要评估的假设是所有手头上掌握的现象的持续时间：它会持续一个星期，一个月，一年，还是十年？正如我们已经看到的，要应用贝叶斯法则，我们首先需要给每个现象的持续时间分配一个先验概率。事实证明，哥白尼原则正是应用贝叶斯法则并使用了所谓的无信息先验的结果。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;起初，这似乎是一个矛盾。如果贝叶斯法则总是要求我们明确事先的预测和想法，我们又怎么能告诉它，我们没有任何预测结果呢？在彩票抽奖的情况下，为无知进行辩护的一个方法就是被称为“统一先验”的方法，这就是认为每个中奖彩票的比例都是相同的。在柏林墙这一例子中，无信息先验意味着：我们对将要预测的时间范畴一无所知：墙可能会在接下来的5 分钟或5 年后倒塌。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;除了这些无信息先验，如我们所见，我们供应给贝叶斯法则的唯一一部分数据，事实上就是我们到达柏林墙的时候，它已经存在了8 年。任何预测它小于8 年寿命的假设都可以被排除，因为这些假设不能解释我们这里的情况。（同样的，一枚双头像硬币就可以排除字那面的可能性。）任何超过8 年的预测都是有可能的，但是如果柏林墙要存在100 万年，那它将是一个很大的巧合，表明我们几乎是接近它存在的最初起点。因此，即使特别长的寿命不能排除，但它也不大可能出现。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当贝叶斯法则与所有这些概率结合——更有可能的短时限就拉低了平均预测，可能性更小但也有一定可能性的长时限又将其拉高，哥白尼原则便出现了：如果我们要预测某个事物还将持续存在多久（在对它没有其他任何了解时），我们可以做出的最好的猜测就是，它将再持续已经存在的时间。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;事实上，戈特并不是第一个提出类似哥白尼原则的人。20 世纪20 年代中期，贝叶斯统计学家哈罗德·杰佛利曾考虑仅仅通过一辆城市有轨电车的序号来确定一个城市有轨电车的数量，并得出了相同的答案：该数字的双倍。一个类似的问题出现得更早，在第二次世界大战期间，同盟国试图估计由德国制造的坦克数量。他们通过所捕获的坦克的序列号，在纯数学估计的基础上进行预测，得出的结果是德国每月生产246 辆坦克，而通过广泛的（高度危险的）空中侦察所获得的估计表明，这个数字更接近于1 400。而战后，德国记录显示的真实数字是：245。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在认识到哥白尼原则是无信息先验基础上的贝叶斯法则之后，就可以回答很多关于其有效性的问题。哥白尼原则在我们什么都不知道的情况下似乎是合理的、准确的，如在1969年看到的柏林墙，我们不确定什么时间范畴是合适的。同时，在我们对某一对象的确有所了解时，就会感觉这是完全错误的。预测一个90岁的人能活到180岁是不合理的，这恰恰是因为我们关于人类寿命已经了解了很多——在这种情况下，我们就可以预测得更好。我们给贝叶斯法则带来的先验信息越丰富，我们便能从中得到越有用的预测。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;真实世界的先验……&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从广义上讲，世界上有两种类型的事物：倾向于（或围绕）某种“自然”价值的事物，以及与之相反的事物。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;人类的生命跨度显然是属于前一类。它大体遵循所谓的“正态”的分布，也被称为“高斯”分布（这是以德国数学家卡尔·弗里德里希·高斯命名的），同时因其分布的形状特征也被形象地称为“钟形曲线”。这种形状能很好地表现人类的寿命，例如，美国男性的平均寿命集中在76岁左右，曲线顶端的两边呈现急剧下降的趋势。正态分布往往都有一个适当的比例：一位数的寿命往往会被认为是悲惨的，三位数的寿命是非凡的。自然世界的许多其他事情也都呈现正态分布的趋势，从人的身高、体重、血压，到城市正午的温度，或是果园的果实直径。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;世界上有许多事物看起来似乎并不呈现正态分布，但这只是因为你没有长远地看。例如，美国一个城镇的平均人口是8 226 人。但是如果你要按人口统计该城镇数量图表，你就不会看到像钟形曲线那样长远才能实现的东西。还有很多小镇的人口远不足8 226 人，同时，某些重要城镇的人口会比平均人口要大得多。这种模式就是所谓的“幂律分布”，也被称为“无标度分布”，因为他们可以在多个尺度的范围表达数量：一个城市能有几十，数百，数千，数万，数十万，甚至数百万名的居民，所以我们不能以一个单一的数值来定义一个“正常”的城镇有多大。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;幂律分布可以描述在日常生活中一系列与城镇人口分布类似的现象：大多数都低于平均值，少数是超过的。电影的票房收入，其范围可以是从4~10 位的数字，这是另一个例子。有些电影根本挣不了那么多钱，但偶尔也有像《泰坦尼克号》这样的高票房电影。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;事实上，一般来说，货币是一个充满权力法则的领域。幂律分布可以描述人民的财富和人民的收入。例如，美国的人均收入是55 68美元，但由于收入大致是呈幂律分布的，这样我们便会得知，平均值以下的人会比平均值以上的要多，而平均值以上的人的收入可能高得几乎偏离了图表。事实也的确如此：美国2/3 的人口收入低于平均收入，但前1% 的人的收入几乎是平均水平的10 倍。这1% 中的前1%的人的收入又是其余99% 的10 倍。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;人们常常感叹“富人会变得更富有”，实际上“偏好依附”的过程是产生幂律分布的最可靠的方法之一。我们使用最多的网站往往就是最有可能获得导入链接的网站，拥有最多人追随的网络红人就是最有可能获得新支持者的人，最有声望的公司就是最有可能吸引新客户的公司，最大的城市就是最有可能吸引新居民的城市。在这每一种情况下，幂律分布都会得出这个结果。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;贝叶斯法则告诉我们，在基于有限的证据进行预测时，很少有事情是和好的先验一样重要的，也就是说，我们期望证据可以从分布结果中得出。因此，良好的预测最开始要有良好的直觉，要能感觉到我们何时在处理一个正态分布，何时在处理一个幂律分布。事实证明，贝叶斯法则为我们处理这些情况各提供了一个简单但显著不同的预测经验法则。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;他们的预测规则&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;你是指“这会一直”朝好的方向发展吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;——本•勒纳&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;为了验证哥白尼原则，我们看到，当给贝叶斯法则一个无信息先验时，它会一直预测事物的总寿命为目前寿命的两倍。事实上，无信息先验的可能性有很宽泛的尺度，柏林墙可能继续存在几个月或几千年，这个尺度就是幂律分布。对于任何幂律分布，贝叶斯法则表明，一个合适的预测策略就是相乘法则：将迄今观察到的数量乘以一些常数。对于无信息先验，这个常数一般是2，哥白尼预测的方法由此得来；在其他幂律的情况下，所乘的数将取决于你工作的精确分布。例如，对于电影票房，它正好是1.4。所以，如果你听到一部电影到目前为止已经赚了600万美元，那么你可以猜测，它总共将赚840万美元。如果它现在赚了9 000万美元，那么可以预计的最高票房将是1.26亿美元。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;幂律分布不能表明它们所描述的现象的自然范畴，这就直接导致了相乘法则的出现。因此，唯一能给我们的预测提供一些关于范畴的想法的就是我们所拥有的单一数据点，比如柏林墙已经存在8 年了。单一数据点的值越大，我们可能要处理的范畴也就越大，反之亦然。当然这种情况也是有可能的：这部电影的票房现在是600 万美元，而实际上它只是在第一个小时票房惊人，它更可能是一个只有几百万美元票房的电影。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;另一方面，当我们将正态分布作为贝叶斯法则的先验时，我们会得到一个非常不同的指导。我们会得到一个“平均”规则，而不是相乘法则：使用分布的“自然”平均数作为指导。例如，如果有人还没达到平均寿命，那么就直接将其年龄预测为平均值。随着他们的年龄增长并超过平均水平，就预测他们还会再活几年。遵循这一规律为90岁和6 岁的两个人给出的合理预测年龄分别为94 岁和77 岁。（6 岁的孩子的预测寿命比76 岁的平均寿命略高是因为他已经顺利度过了婴儿期：这样我们就知道他不处于分布的尾端。）&lt;/span&gt;&lt;/p&gt;


</description>
<pubDate>Thu, 12 Jul 2018 14:38:03 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/TacNBf37xX</dc:identifier>
</item>
</channel>
</rss>