<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed43.com%2Fmathalg-jtks.xml&amp;max=5&amp;links=preserve&amp;exc=1" />
<atom:link rel="alternate" title="Source URL" href="http://feed43.com/mathalg-jtks.xml" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed43.com%252Fmathalg-jtks.xml%26max%3D5%26links%3Dpreserve%26exc%3D1" />
<title>算法与数学之美</title>
<link>http://www.jintiankansha.me/column/c9dZ5TM2aS</link>
<description>算法与数学之美 - 今天看啥</description>
<ttl>360</ttl>
<item>
<title>李飞飞离职了</title>
<link>http://www.jintiankansha.me/t/YYFRcgv0Pz</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/YYFRcgv0Pz</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;img class=&quot;&quot; data-croporisrc=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/4I1d5nkX897L0PP2IsaF2hHzdtG2x42HvbwsnnuspQZjD1a8klPCJYFia8yClcopCazHRdxibqesTdibERHicenoCA/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1000&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;1272.4014336917562&quot; data-ratio=&quot;1.272&quot; data-type=&quot;jpeg&quot; data-w=&quot;1000&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/4I1d5nkX897L0PP2IsaF2hHzdtG2x42HDSd9UULIzyXdFiabE6UBYN4S2xc8gZv2siaD5t4yycI3vN0wBFg9G5dw/640?wx_fmt=jpeg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;中国的教师节这一天，不止马云要回归老师的身份，李飞飞也要回归。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在执掌Google云的人工智能团队近两年之后，李飞飞终于要从现任的Google云AI/ML首席科学家任上离职，重返斯坦福校园任教。而她的接任者，是一周前宣布即将离职的前CMU计算机学院院长Andrew Moore。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;李飞飞离开现任工作后，还将保留Google云顾问的角色。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今早Google云CEO戴安娜·格林证实了这一消息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今年6月，就传出李飞飞将卸任现职，仅在Google挂名顾问，并重返斯坦福任教的消息。对于这一变动，实际上都在计划之中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.49074074074074076&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; height=&quot;300.219px&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/4I1d5nkX897L0PP2IsaF2hHzdtG2x42Hobpb0SQmWazggYyoJRLxdPUx3gicib6taYALwMhQvKib5TILjJ0Sibriaiag/640?wx_fmt=jpeg&quot; width=&quot;612px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;斯坦福大学计算机视觉实验室官网显示，李飞飞因担任谷歌云AI/ML首席科学家，从2017年初到2018年下半年，都从学校请了假，在这期间还会继续指导研究生和博士后。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但现在，2018年下半年已经到了，也就到了李飞飞假期结束重返学校的时候。作为斯坦福大学计算机系的教授、计算机视觉实验室主任，她在谷歌的工作时间难免要减少。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;李飞飞此前对量子位表示，“在美国，学术休假是一个正常的安排，是产学研的一个好普遍的现象。所以一个学者结束学术休假再回学校很正常，但我不会就此离开Google，也不会影响Google中国AI中心的推进。”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2017年初，李飞飞和李佳这对师生组合，正式加入Google云团队，负责人工智能和机器学习相关业务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;她们还推动建立了Google AI中国中心，这个中心也由李飞飞和李佳共同领导，李佳担任Google AI中国中心总裁。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今年7月的Google云大会之后，李佳坦露心迹称：“回想一年前的这段时间，正是我们举步维艰的时刻。”&lt;/span&gt;&lt;/p&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt; &lt;p&gt;&lt;span&gt;李佳回忆当时的情景说：“佳飞🐱”谷歌新人，团队产品主管空缺已几个月，工程总监离职，人力资源青黄不接……&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就在这种局面下，李飞飞和李佳在产品布局方面做出艰难而大胆的决定：大幅度投入AutoML和Contact Center，砍掉一些成功可能性比较小的产品。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也正是这个战略聚焦的举措，加上团队的共同努力，最终换来Google云在AI等领域的进步。今日的成绩。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;李飞飞感言&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;李佳今日也在朋友圈转发了李飞飞的离职感言。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;23&quot;&gt;
&lt;p&gt;&lt;span&gt;学术界和工业界人才的互动和思想的交流一直是硅谷传奇的重要精髓。随着斯坦福新学年的开学，我的学术假也告一段落，将把工作的重心重新转回学术界。非常荣幸和感恩这两年在谷歌的工作和成长。我为我们团队的成就感到骄傲，Cloud AI被Forrester， MIT Technology Review, Forbes等高度评价为工业界领先团队。 我们一起创造了多个有影响力的产品包括 AutoML, Contact Center AI, Dialogflow Enterprise, Vision/Speech/NL/Translation APIs, Cloud AI platform等等。我们的行业解决方案（包括零售，医疗，能源）也开始受到青睐。谢谢你们的信任和创造！[玫瑰]（尤其是佳飞猫组合的另一半—李佳。因为你的leadership,我们一起成长。因为你的friendship,我们一起分享成长经历里所有的泪与笑！[玫瑰]）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里还要向大家隆重推出Prof. Andrew Moore (CMU)，他是CS界资深的领袖。记得两年半前，我和刚从谷歌回到学术界的他还在他CMU办公室讨论我去哪里修学术假。他当时特别鼓励我来谷歌云，也和我分享了他自己之前在谷歌8年工作的心得和体验。现在我非常期待以AI顾问的身份和他进一步的合作与交流。另外小小剧透一下：斯坦福大学也会在不久的将来公开启动一个重要的AI Initiative。人类前行的道路需要思想灯塔的照耀，这是学术界和思想界在这个重要的历史时刻义不容辞的历史责任和机会。只有以人为本的科技才能真正地造福人类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;谷歌官网的链接在这里：&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;https://cloud.google.com/blog/topics/inside-google-cloud/google-cloud-ai-andrew-moore-joining-google-cloud-fei-fei-li-becoming-advisor&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;接任者Andrew Moore&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-croporisrc=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/4I1d5nkX897L0PP2IsaF2hHzdtG2x42HNpgBIBBZAcAibibJx7Sh6ylwszJV2pKE0ia63YJyGT630WiaStwibyudTpg/0?wx_fmt=jpeg&quot; data-cropx1=&quot;0&quot; data-cropx2=&quot;1080&quot; data-cropy1=&quot;0&quot; data-cropy2=&quot;685.1612903225806&quot; data-ratio=&quot;0.6333333333333333&quot; data-type=&quot;jpeg&quot; data-w=&quot;1080&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/4I1d5nkX897L0PP2IsaF2hHzdtG2x42HRpFwy4OzopaU01WmXvdwXToHIibhMSPvpfcx1ia6L1Y3E0bCic2FylfXQ/640?wx_fmt=jpeg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CMU今年8月29日宣布，Andrew Moore即将离职，不再担任计算机学院院长，以及计算机科学和机器人学教授。他要去追求一个新的职业机会，具体是什么目前还没有公开。Moore离开CMU的时间定在了年底。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Moore在CMU的任教历史相当长，他1991年在剑桥大学获得博士学位，1993年加入CMU，成为计算机科学和机器人学的助理教授，2014年8月回归校园，担任计算机学院第五任院长。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2006年到2014年间，他休了几年学术假期，为Google建立了匹兹堡办公室。这个部门负责开发Google广告、商务等系统底层的基础技术，现在已经有500多人。&lt;/span&gt;&lt;/p&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;&gt;&lt;/ins&gt; &lt;p&gt;&lt;span&gt;在Moore任院长的这些年里，CMU计算机学院发展迅速，目前在U.S. News全美大学排行榜上排名第一。而CMU人工智能研究生院，排在全球第一名。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Moore总结自己的院长任期时，最为感慨的就是两件事：一是人工智能研究的发展，二是学生群体的多样化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;他任职期间还达成了一项神奇的成就，那就是终于拉平了CMU计算机学院的男女比例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;大部分计算机学院中，男女生数量至今依然非常不均衡。但是，CMU计算机学院去年招收的本科新生里，女生超过一半，在这个专业里堪称史无前例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CMU计算机学院今年招收了211名新生，比4年前的139名提升了50%多。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另外，Moore去年夏天还发起了CMU AI计划，将全校人工智能相关的研究统一起来，壮大声势吸引企业和资本流向匹兹堡区域。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今年秋季，CMU计算机学院开设的全美国第一个人工智能本科专业也要开学了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另外，目前CMU计算机学院的下一任院长人选还未确定。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CMU校长Farnam Jahanian说，校方将会先任命一位临时院长，接下来几周也会在全国范围内寻找Moore的继任者。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;∑编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;来源 | 人工智能&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot; width=&quot;auto&quot; /&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot; rgb=&quot;&quot; caret-color:=&quot;&quot; text-align:=&quot;&quot;&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 12 Sep 2018 22:29:51 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/YYFRcgv0Pz</dc:identifier>
</item>
<item>
<title>TIOBE 9 月排行榜：C++ 式微，第 3 名被 Python 拿下</title>
<link>http://www.jintiankansha.me/t/w9qSqmfImf</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/w9qSqmfImf</guid>
<description>&lt;section data-role=&quot;outer&quot; label=&quot;Powered by 135editor.com&quot;&gt;&lt;section class=&quot;&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;93459&quot;&gt;&lt;section&gt;&lt;section/&gt;&lt;section readability=&quot;1.5&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;3&quot;&gt;&lt;p&gt;&lt;span pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; wenquanyi=&quot;&quot; micro=&quot;&quot; hei=&quot;&quot; helvetica=&quot;&quot; neue=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; rgb=&quot;&quot; box-sizing:=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot;&gt;TIOBE 发布了 9 月份的编程语言排行榜，上个月 Python 与第 3 名擦肩而过，而指数稳步上升的它在本月终于打败 C++，成功探花。&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;section/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.829686013320647&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky6TWGksMbvibBL1TquAJ3rZEQYA8pjC0r9S05U5K56FDNFh5zian3MmeuNOYeQmayNFO6fCD0JFUMw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1051&quot; height=&quot;872&quot; width=&quot;1051&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“人生苦短，我用 Python”，Python 的经典 slogan 讲究争分夺秒，然而在 TIOBE 拿下第 3 名宝座，却花了 Python 太长时间。自 20 世纪 90 年代初首次录入 TIOBE，Python 花了 10 年才首次进入指数前 10 名，随着它的不断应用与发展，Python 逐渐在网络安全与数据科学等领域大放异彩，近年来随着人工智能与数据分析等领域的大热，Python 也得到了前所未有的高度关注，目前在全球范围内它已经是大学的首选编程语言，同时也征服了工业界。越来越多人使用 Python，反映在 TIOBE 指数上就是它稳扎稳打地一步步向上爬，从前 10 到前 5，如今终于进入了前 3。 &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不过刚刚被挤下去的 C++ 咬得很紧，下个月的榜单第 3 名的宝座上坐着谁还不好说。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;榜单前 10 中需要注意的是，SQL 自 2018 年 2 月起被重新添加到了 TIOBE 排行榜中，由于没有以往的数据可以对比，所以会给人 SQL 语言指数突然暴涨的错觉。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本月榜单中值得关注的还有 &lt;span&gt;Objective-C 从上个月的 14 位上升到本月的第 10 名&lt;/span&gt;；&lt;span&gt;Rust 从 36 位跳到 31&lt;/span&gt;；还有上个月发布 1.0 版本的 &lt;span&gt;Julia 也借势从 50 位一跃排到了 39&lt;/span&gt;。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.170854271356784&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky6TWGksMbvibBL1TquAJ3rZvHoB1Q8oaJJCPReIAsTkGR066E4h3ujibNRdxPoTb2EKibTiaCicSpjPIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;796&quot; height=&quot;932&quot; width=&quot;796&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第 &lt;span&gt;51-100 &lt;/span&gt;名如下，由于它们之间的数值差异较小，仅以文本形式列出（按字母排序）：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4th Dimension/4D, ABC, ActionScript, bc, Bourne shell, C shell, CFML, CL (OS/400), CoffeeScript, Common Lisp, Crystal, cT, Elixir, Elm, Emacs Lisp, Erlang, Forth, Hack, Icon, Inform, Io, J, Korn shell, LiveCode, Maple, Mercury, ML, Modula-2, Monkey, MQL4, MS-DOS batch, MUMPS, NATURAL, OCaml, OpenCL, OpenEdge ABL, Oz, PL/I, PowerShell, Q, Racket, Ring, RPG, S, Snap!, SPARK, SPSS, Tex, TypeScript, VHDL&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; Top 10 编程语言 TIOBE 指数走势（2002-2018）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.4282029234737747&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky6TWGksMbvibBL1TquAJ3rZUpoJDX9wleiaVMsnuytgR7jV1NibbULXxA9EhBZVYb03lthqMwXiaQZxw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1163&quot; height=&quot;498&quot; width=&quot;1163&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;历史排名（1988-2018/每5年）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 以下排名位次取决于 12 个月的平均值：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6199829205807003&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky6TWGksMbvibBL1TquAJ3rZkXaSH3Pice6z3rfTLZd18pMmYMCxl1kAvugojhibrn5araJyej8ricWEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1171&quot; height=&quot;726&quot; width=&quot;1171&quot;/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 编程语言名人堂 &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;历届“年度编程语言”获奖名单如下图所示，该奖项授予一年中评分最高的编程语言：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.9151898734177215&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky6TWGksMbvibBL1TquAJ3rZicxSo52Ns19bOA0gSjlib0rZ5yYn2tlxyoZTcUYolwoicGQhuePESU7Hw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;790&quot; height=&quot;723&quot; width=&quot;790&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;TIOBE 编程社区指数（The TIOBE Programming Community index）是编程语言流行度的指标，该榜单每月更新一次，指数基于全球技术工程师、课程和第三方供应商的数量。包括流行的搜索引擎，如谷歌、必应、雅虎、维基百科、亚马逊、YouTube 和百度都用于指数计算。具体的计算方式见这里：https://www.tiobe.com/tiobe-index/programming-languages-definition/。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;值得注意的是，TIOBE 指数并不代表语言的好坏，开发者可以使用该榜单检查自身的编程技能是否需要更新，或者在开始构建新软件时对某一语言做出选择。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;详细榜单信息可以查看 TIOBE 官网。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;&lt;span&gt; 相关链接 &lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;ul class=&quot;link-list list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;Python 的详细介绍：&lt;/span&gt;&lt;span&gt;https://www.oschina.net/p/python&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;span&gt;Python 的下载地址：&lt;/span&gt;&lt;em&gt;&lt;span&gt;https://www.oschina.net/home/login?goto_page=https://www.oschina.net/news/99636/tiobe-index-201809&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;∑编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;来源 | 开源中国社区 [http://www.oschina.net]&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot; rgb=&quot;&quot; box-sizing:=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot; rgb=&quot;&quot; text-align:=&quot;&quot;&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot; rgb=&quot;&quot; text-align:=&quot;&quot;&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot; rgb=&quot;&quot; text-align:=&quot;&quot;&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 12 Sep 2018 22:29:50 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/w9qSqmfImf</dc:identifier>
</item>
<item>
<title>谷歌背后的数学</title>
<link>http://www.jintiankansha.me/t/ySGWo6QCUc</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/ySGWo6QCUc</guid>
<description>&lt;section class=&quot;&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;92498&quot;&gt;&lt;section&gt;&lt;section background-size=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot; fmt=&quot;png&quot; https=&quot;&quot; important=&quot;&quot; left=&quot;&quot; mmbiz=&quot;&quot; no-repeat=&quot;&quot; png=&quot;&quot; px=&quot;&quot; tjtgiabky1osjzibhbaikrwhib9yrxicav6silioptqyydibibp2zyukuwxkkhc4miasz5h2pxiac07jt6vzoriaqbhw=&quot;&quot; top=&quot;&quot; wx=&quot;&quot;&gt;&lt;section background-size=&quot;&quot; bottom=&quot;&quot; break-word=&quot;&quot; fmt=&quot;png&quot; https=&quot;&quot; important=&quot;&quot; mmbiz=&quot;&quot; no-repeat=&quot;&quot; png=&quot;&quot; px=&quot;&quot; right=&quot;&quot; tjtgiabky1osjzibhbaikrwhib9yrxica7hx90xnibebfloa2f2ojzjrufhrcvfoian9k9woxhpoxoayqqlgtddka=&quot;&quot; wx=&quot;&quot;&gt;&lt;section class=&quot;&quot; data-brushtype=&quot;text&quot;&gt;一. 引言&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;在如今这个互联网时代， 有一家公司家喻户晓——它自 1998 年问世以来， 在极短的时间内就声誉鹊起， 不仅超越了所有竞争对手， 而且彻底改观了整个互联网的生态。 这家公司就是当今互联网上的第一搜索引擎： 谷歌 (Google)。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在这样一家显赫的公司背后， 自然有许许多多商战故事， 也有许许多多成功因素。 但与普通商战故事不同的是， 在谷歌的成功背后起着最关键作用的却是一个数学因素。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;本文要谈的就是这个数学因素。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;谷歌作为一个搜索引擎， 它的核心功能顾名思义， 就是网页搜索。 说到搜索， 我们都不陌生， 因为那是凡地球人都会的技能。 我们在字典里查个生字， 在图书馆里找本图书， 甚至在商店里寻一种商品， 等等， 都是搜索。 只要稍稍推究一下， 我们就会发现那些搜索之所以可能， 并且人人都会， 在很大程度上得益于以下三条：&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;搜索对象的数量较小——比如一本字典收录的字通常只有一两万个， 一家图书馆收录的不重复图书通常不超过几十万种， 一家商店的商品通常不超过几万种， 等等。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;span&gt;搜索对象具有良好的分类或排序——比如字典里的字按拼音排序， 图书馆里的图书按主题分类， 商店里的商品按品种或用途分类， 等等。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;span&gt;搜索结果的重复度较低——比如字典里的同音字通常不超过几十个， 图书馆里的同名图书和商店里的同种商品通常也不超过几十种， 等等。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;但互联网的鲜明特点却是以上三条无一满足。 事实上， 即便在谷歌问世之前， 互联网上的网页总数就已超过了诸如图书馆藏书数量之类传统搜索对象的数目。 而且这还只是冰山一角， 因为与搜索图书时单纯的书名搜索不同， 互联网上的搜索往往是对网页内容的直接搜索， 这相当于将图书里的每一个字都变成了搜索对象， 由此导致的数量才是真正惊人的， 它不仅直接破坏了上述第一条， 而且连带破坏了二、 三两条。 在互联网发展的早期， 象雅虎 (Yahoo) 那样的门户网站曾试图为网页建立分类系统， 但随着网页数量的激增， 这种做法很快就 “挂一漏万” 了。 而搜索结果的重复度更是以快得不能再快的速度走向失控。 这其实是可以预料的， 因为几乎所有网页都离不开几千个常用词， 因此除非搜索生僻词， 否则出现几十万、 几百万、 甚至几千万条搜索结果都是不足为奇的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;互联网的这些 “不良特点” 给搜索引擎的设计带来了极大的挑战。 而在这些挑战之中， 相对来说， 对一、 二两条的破坏是比较容易解决的， 因为那主要是对搜索引擎的存储空间和计算能力提出了较高要求， 只要有足够多的钱来买 “装备”， 这些都还能算是容易解决的——套用电视连续剧《蜗居》中某贪官的台词来说， “能用钱解决的问题就不是大问题”。 但对第三条的破坏却要了命了， 因为无论搜索引擎的硬件如何强大， 速度如何快捷， 要是搜索结果有几百万条， 那么任何用户想从其中 “海选” 出自己真正想要的东西都是几乎不可能的。 这一点对早期搜索引擎来说可谓是致命伤， 而且它不是用钱就能解决的问题。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.0902061855670102&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicafbpKtB9Sic4ViaARTMmWgJeIbeDA7BPZ05TW10VtpsdNqrYby4icVy3jQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;388&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这致命伤该如何治疗呢？ 药方其实很简单， 那就是对搜索结果进行排序， 把用户最有可能需要的网页排在最前面， 以确保用户能很方便地找到它们。 但问题是： 网页的水平千差万别， 用户的喜好更是万别千差， 互联网上有一句流行语叫做： “在互联网上， 没人知道你是一条狗” (On the Internet, nobody knows you're a dog)。 连用户是人是狗都 “没人知道”， 搜索引擎又怎能知道哪些搜索结果是用户最有可能需要的， 并对它们进行排序呢？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在谷歌主导互联网搜索之前， 多数搜索引擎采用的排序方法， 是以被搜索词语在网页中的出现次数来决定排序——出现次数越多的网页排在越前面。 这个判据不能说毫无道理， 因为用户搜索一个词语， 通常表明对该词语感兴趣。 既然如此， 那该词语在网页中的出现次数越多， 就越有可能表示该网页是用户所需要的。 可惜的是， 这个貌似合理的方法实际上却行不大通。 因为按照这种方法， 任何一个象祥林嫂一样翻来复去倒腾某些关键词的网页， 无论水平多烂， 一旦被搜索到， 都立刻会 “金榜题名”， 这简直就是广告及垃圾网页制造者的天堂。 事实上， 当时几乎没有一个搜索引擎不被 “祥林嫂” 们所困扰， 其中最具讽刺意味的是： 在谷歌诞生之前的 1997 年 11 月， 堪称早期互联网巨子的当时四大搜索引擎在搜索自己公司的名字时， 居然只有一个能使之出现在搜索结果的前十名内， 其余全被 “祥林嫂” 们挤跑了。&lt;/span&gt;&lt;/p&gt;

&lt;section class=&quot;&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;92498&quot;&gt;&lt;section&gt;&lt;section background-size=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot; fmt=&quot;png&quot; https=&quot;&quot; important=&quot;&quot; left=&quot;&quot; mmbiz=&quot;&quot; no-repeat=&quot;&quot; png=&quot;&quot; px=&quot;&quot; tjtgiabky1osjzibhbaikrwhib9yrxicav6silioptqyydibibp2zyukuwxkkhc4miasz5h2pxiac07jt6vzoriaqbhw=&quot;&quot; top=&quot;&quot; wx=&quot;&quot;&gt;&lt;section background-size=&quot;&quot; bottom=&quot;&quot; break-word=&quot;&quot; fmt=&quot;png&quot; https=&quot;&quot; important=&quot;&quot; mmbiz=&quot;&quot; no-repeat=&quot;&quot; png=&quot;&quot; px=&quot;&quot; right=&quot;&quot; tjtgiabky1osjzibhbaikrwhib9yrxica7hx90xnibebfloa2f2ojzjrufhrcvfoian9k9woxhpoxoayqqlgtddka=&quot;&quot; wx=&quot;&quot;&gt;&lt;section class=&quot;&quot; data-brushtype=&quot;text&quot;&gt;二. 基本思路&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;正是在这种情况下， 1996 年初， 谷歌公司的创始人， 当时还是美国斯坦福大学 (Stanford University) 研究生的佩奇 (Larry Page) 和布林 (Sergey Brin) 开始了对网页排序问题的研究。 这两位小伙子之所以研究网页排序问题， 一来是导师的建议 (佩奇后来称该建议为 “我有生以来得到过的最好建议”)， 二来则是因为他们对这一问题背后的数学产生了兴趣。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;网页排序问题的背后有什么样的数学呢？ 这得从佩奇和布林看待这一问题的思路说起。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在佩奇和布林看来， 网页的排序是不能靠每个网页自己来标榜的， 无论把关键词重复多少次， 垃圾网页依然是垃圾网页。 那么， 究竟什么才是网页排序的可靠依据呢？ 出生于书香门第的佩奇和布林 (两人的父亲都是大学教授) 想到了学术界评判学术论文重要性的通用方法， 那就是看论文的引用次数。 在互联网上， 与论文的引用相类似的是显然是网页的链接。 因此， 佩奇和布林萌生了一个网页排序的思路， 那就是通过研究网页间的相互链接来确定排序。 具体地说， 一个网页被其它网页链接得越多， 它的排序就应该越靠前。 不仅如此， 佩奇和布林还进一步提出， 一个网页越是被排序靠前的网页所链接， 它的排序就也应该越靠前。 这一条的意义也是不言而喻的， 就好比一篇论文被诺贝尔奖得主所引用， 显然要比被普通研究者所引用更说明其价值。 依照这个思路， 网页排序问题就跟整个互联网的链接结构产生了关系， 正是这一关系使它成为了一个不折不扣的数学问题。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;思路虽然有了， 具体计算却并非易事， 因为按照这种思路， 想要知道一个网页&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;  的排序， 不仅要知道有多少网页链接了它， 而且还得知道那些网页各自的排序——因为来自排序靠前网页的链接更有分量。 但作为互联网大家庭的一员，&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;本身对其它网页的排序也是有贡献的， 而且基于来自排序靠前网页的链接更有分量的原则， 这种贡献与&lt;/span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;&lt;span&gt;本身的排序也有关。 这样一来， 我们就陷入了一个 “先有鸡还是先有蛋” 的循环： 要想知道&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;的排序， 就得知道与它链接的其它网页的排序， 而要想知道那些网页的排序， 却又首先得知道&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;的排序。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;为了打破这个循环， 佩奇和布林采用了一个很巧妙的思路， 即分析一个虚拟用户在互联网上的漫游过程。 他们假定： 虚拟用户一旦访问了一个网页后， 下一步将有相同的几率访问被该网页所链接的任何一个其它网页。 换句话说， 如果网页 &lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;有&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.25&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxica6PvHjoEyCCnfibuv7sriaWRb4CUcMa27uzkoib9laxfl4Vrfyud4MzGcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;16&quot;/&gt;&lt;span&gt;个对外链接， 则虚拟用户在访问了&lt;/span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;&lt;span&gt;之后， 下一步点击那些链接当中的任何一个的几率均为&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.696969696969697&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicacJwogTiboC1hcg2QHjgMQFSYnOG8xQa9FvxbRAvbB3O6Bt3LXNYt3yQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;33&quot;/&gt;&lt;span&gt;。 初看起来， 这一假设并不合理， 因为任何用户都有偏好， 怎么可能以相同的几率访问一个网页的所有链接呢？ 但如果我们考虑到佩奇和布林的虚拟用户实际上是对互联网上全体用户的一种平均意义上的代表， 这条假设就不象初看起来那么不合理了。 那么网页的排序由什么来决定呢？ 是由该用户在漫游了很长时间——理论上为无穷长时间——后访问各网页的几率分布来决定， 访问几率越大的网页排序就越靠前。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;为了将这一分析数学化， 我们用&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7647058823529411&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxica1BeibrxfjKGQ3SWZWwrpHuddokXSTvOAl24lgtOLJRs3tcNvpDjUa3w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;span&gt;表示虚拟用户在进行第 n 次浏览时访问网页&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;&lt;span&gt;的几率。 显然， 上述假设可以表述为 (请读者自行证明)：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.18032786885245902&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaRCGQ0unyH7WCc7ezn748Hc1DEZQgmbLbBKhJRAt0PqLCXSv4JliaEJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;183&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这里 pj→i 是一个描述互联网链接结构的指标函数 (indicator function)， 其定义是： 如果网页&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.15&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaJX9xuD51ffMUz9Uonp551NcjLRdHUZbGYnfWoEu1hlNnQLx7Y2TzOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;span&gt; 有链接指向网页&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;&lt;span&gt;， 则&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.263157894736842&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaRUtZXya46LNOwvXD4VG4ySNw9vIenymibHcWcCXZgy8giaVuG4ahzzpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;19&quot;/&gt;&lt;span&gt;→i 取值为 1， 反之则为 0。 显然， 这条假设所体现的正是前面提到的佩奇和布林的排序原则， 因为右端求和式的存在表明与&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;&lt;span&gt;有链接的所有网页&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.15&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaJX9xuD51ffMUz9Uonp551NcjLRdHUZbGYnfWoEu1hlNnQLx7Y2TzOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;span&gt; 都对&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.1363636363636365&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaKEZma3uMK0m3MnpR4pM9cgRia5UzXOatMKvHlOISCjYjeugCnb5CGVw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;&lt;span&gt;的排名有贡献， 而求和式中的每一项都正比于 pj， 则表明来自那些网页的贡献与它们的自身排序有关， 自身排序越靠前 (即&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.263157894736842&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaRUtZXya46LNOwvXD4VG4ySNw9vIenymibHcWcCXZgy8giaVuG4ahzzpw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;19&quot;/&gt;&lt;span&gt;越大)， 贡献就越大。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;为符号简洁起见， 我们将虚拟用户第 n 次浏览时访问各网页的几率合并为一个列向量&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.9523809523809523&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxica5SgedaCP2ooVgJKepk2NmeJ0wYcQGczbZmU7CQfYy91MpNGYZjGGLg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;21&quot;/&gt;&lt;span&gt;， 它的第 i 个分量为&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7058823529411765&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaIXFw4AUQarvlicMWF948KMtxp6MTiaD0p8Etvc87xQCdTACPP3793ZFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;34&quot;/&gt;&lt;span&gt;， 并引进一个只与互联网结构有关的矩阵 H， 它的第 i 行 j 列的矩阵元为&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.30434782608695654&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxica77HGe3Q35mmtel1gxjOP8HyGPUt1TW05XfaBO3LrvsEy83ZISlVxnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;92&quot;/&gt;&lt;span&gt;， 则上述公式可以改写为：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.2558139534883721&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaRaSPUBcibbQwPEx8LXDGibicPZWJg6xUN65zRibkRcG5BzBnlQ8hsZ9ibibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;86&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这就是计算网页排序的公式。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;熟悉随机过程理论的读者想必看出来了， 上述公式描述的是一种马尔可夫过程 (Markov process)， 而且是其中最简单的一类， 即所谓的平稳马尔可夫过程 (stationary Markov process)[注一]， 而 H 则是描述马尔可夫过程中的转移概率分布的所谓转移矩阵 (transition matrix)。 不过普通马尔可夫过程中的转移矩阵通常是随机矩阵 (stochastic matrix)， 即每一列的矩阵元之和都为 1 的矩阵 (请读者想一想， 这一特点的 “物理意义” 是什么？)[注二]。 而我们的矩阵 H 却可能有一些列是零向量， 从而矩阵元之和为 0， 它们对应于那些没有对外链接的网页， 即所谓的 “悬挂网页” (dangling page)[注三]。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;上述公式的求解是简单得不能再简单的事情， 即：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.29213483146067415&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaI4yYspPAhbYopwHK4G4W3qJLjcIrQ4bZOTYBFD2rUafv20LMrIwTvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;89&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;span&gt;其中 p0 为虚拟读者初次浏览时访问各网页的几率分布 (在佩奇和布林的原始论文中， 这一几率分布被假定为是均匀分布)。&lt;/span&gt;&lt;/p&gt;

&lt;section class=&quot;&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;92498&quot;&gt;&lt;section&gt;&lt;section background-size=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot; fmt=&quot;png&quot; https=&quot;&quot; important=&quot;&quot; left=&quot;&quot; mmbiz=&quot;&quot; no-repeat=&quot;&quot; png=&quot;&quot; px=&quot;&quot; tjtgiabky1osjzibhbaikrwhib9yrxicav6silioptqyydibibp2zyukuwxkkhc4miasz5h2pxiac07jt6vzoriaqbhw=&quot;&quot; top=&quot;&quot; wx=&quot;&quot;&gt;&lt;section background-size=&quot;&quot; bottom=&quot;&quot; break-word=&quot;&quot; fmt=&quot;png&quot; https=&quot;&quot; important=&quot;&quot; mmbiz=&quot;&quot; no-repeat=&quot;&quot; png=&quot;&quot; px=&quot;&quot; right=&quot;&quot; tjtgiabky1osjzibhbaikrwhib9yrxica7hx90xnibebfloa2f2ojzjrufhrcvfoian9k9woxhpoxoayqqlgtddka=&quot;&quot; wx=&quot;&quot;&gt;&lt;section class=&quot;&quot; data-brushtype=&quot;text&quot;&gt;三. 问题及解决&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;span&gt;如前所述， 佩奇和布林是用虚拟用户在经过很长——理论上为无穷长——时间的漫游后访问各网页的几率分布， 即&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.3561643835616438&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxica5aALSO4jXxBlyXcJswazRzKqwsgBxPicmkQgRicBjcLGQrRlKPUxxd9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;73&quot;/&gt;&lt;span&gt;， 来确定网页排序的。 这个定义要想管用， 显然要解决三个问题：&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span&gt;极限&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.3561643835616438&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxica5aALSO4jXxBlyXcJswazRzKqwsgBxPicmkQgRicBjcLGQrRlKPUxxd9Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;73&quot;/&gt;&lt;span&gt;是否存在？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果极限存在， 它是否与&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.2&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaBNzw4ib4T56mdYyjaVJvP0JDt2GnsOUAgjL65VYfiaMwn5DJkjre4erQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;span&gt;的选取无关？&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果极限存在， 并且与&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.2&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaBNzw4ib4T56mdYyjaVJvP0JDt2GnsOUAgjL65VYfiaMwn5DJkjre4erQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;20&quot;/&gt;&lt;span&gt;的选取无关， 它作为网页排序的依据是否真的合理？&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;如果这三个问题的答案都是肯定的， 那么网页排序问题就算解决了。 反之， 哪怕只有一个问题的答案是否定的， 网页排序问题也就不能算是得到了满意解决。 那么实际答案如何呢？ 很遗憾， 是后一种， 而且是其中最糟糕的情形， 即三个问题的答案全都是否定的。 这可以由一些简单的例子看出。 比方说， 在只包含两个相互链接网页的迷你型互联网上， 如果&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.30120481927710846&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaXTdyUw8vz8ibkrYxMeFdqQgUhHW5l7Mo7fAExzee4wnq2IQf5BpF55Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;83&quot;/&gt;&lt;span&gt;， 极限就不存在 (因为几率分布将在&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.5531914893617021&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaHgwwyVx8pCQ2MZZw0tbK0icqDSojibXZy6zBEvMIMFe9YJicu66UfxOOg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;47&quot;/&gt;&lt;span&gt;和&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.574468085106383&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicadcvM0EVG4kvL0zvFbY7ftILEZtCsvaHribiaIkicic5ykKicXPGH3Pys4Jw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;47&quot;/&gt;&lt;span&gt;之间无穷振荡)。 而存在几个互不连通 (即互不链接) 区域的互联网则会使极限——即便存在——与 p0 的选取有关 (因为把 p0 选在不同区域内显然会导致不同极限)。 至于极限存在， 并且与 p0 的选取无关时它作为网页排序的依据是否真的合理的问题， 虽然不是数学问题， 答案却也是否定的， 因为任何一个 “悬挂网页” 都能象黑洞一样， 把其它网页的几率 “吸收” 到自己身上 (因为虚拟用户一旦进入那样的网页， 就会由于没有对外链接而永远停留在那里)， 这显然是不合理的。 这种不合理效应是如此显著， 以至于在一个连通性良好的互联网上， 哪怕只有一个 “悬挂网页”， 也足以使整个互联网的网页排序失效， 可谓是 “一粒老鼠屎坏了一锅粥”。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;为了解决这些问题， 佩奇和布林对虚拟用户的行为进行了修正。 首先， 他们意识到无论真实用户还是虚拟用户， 当他们访问到 “悬挂网页” 时， 都不应该也不会 “在一棵树上吊死”， 而是会自行访问其它网页。 对于真实用户来说， 自行访问的网页显然与各人的兴趣有关， 但对于在平均意义上代表真实用户的虚拟用户来说， 佩奇和布林假定它将会在整个互联网上随机选取一个网页进行访问。 用数学语言来说， 这相当于是把 H 的列向量中所有的零向量都换成 e/N (其中 e 是所有分量都为 1 的列向量， N 为互联网上的网页总数)。 如果我们引进一个描述 “悬挂网页” 的指标向量 (indicator vector) a， 它的第 i 个分量的取值视 Wi 是否为 “悬挂网页” 而定——如果是 “悬挂网页”， 取值为 1， 否则为 0——并用 S 表示修正后的矩阵， 则：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.2743362831858407&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicarSmaZlZEbmMz44j5LggjzKvsDxXCDMYHO7ImxS8FIE0n0wF546bxibw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;113&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;显然， 这样定义的 S 矩阵的每一列的矩阵元之和都是 1， 从而是一个不折不扣的随机矩阵。 这一修正因此而被称为随机性修正 (stochasticity adjustment)。 这一修正相当于剔除了 “悬挂网页”， 从而可以给上述第三个问题带来肯定回答 (当然， 这一回答没有绝对标准， 可以不断改进)。 不过， 这一修正解决不了前两个问题。 为了解决那两个问题， 佩奇和布林引进了第二个修正。 他们假定， 虚拟用户虽然是虚拟的， 但多少也有一些 “性格”， 不会完全受当前网页所限， 死板地只访问其所提供的链接。 具体地说， 他们假定虚拟用户在每一步都有一个小于 1 的几率 α 访问当前网页所提供的链接， 同时却也有一个几率 1-α 不受那些链接所限， 随机访问互联网上的任何一个网站。 用数学语言来说 (请读者自行证明)， 这相当于是把上述 S 矩阵变成了一个新的矩阵 G：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.14814814814814814&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxica1opicavxoQlY3TornPet5NWbogACGr6pZ3lrNYRwrDSTRicoemXxRFvQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;162&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这个矩阵不仅是一个随机矩阵， 而且由于第二项的加盟， 它有了一个新的特点， 即所有矩阵元都为正 (请读者想一想， 这一特点的 “物理意义” 是什么？)， 这样的矩阵是所谓的素矩阵 (primitive matrix)[注四]。 这一修正因此而被称为素性修正 (primitivity adjustment)。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;经过这两类修正， 网页排序的计算方法就变成了：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.4166666666666667&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicaYDx96TibJT2FyHliaUO8dnGicSPwiclFXGFKZwPia1CTcF3XAagf5jicbkCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;84&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这个算法能给上述问题提供肯定答案吗？ 是的， 它能。 因为随机过程理论中有一个所谓的马尔可夫链基本定理 (fundamental theorem of Markov chains)， 它表明在一个马尔可夫过程中， 如果转移矩阵是素矩阵， 那么上述前两个问题的答案就是肯定的。 而随机性修正已经解决了上述第三个问题， 因此所有问题就都解决了。 如果我们用 p 表示&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.9545454545454546&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicamOfTxJx8M9cJpWC6zWteEkCFzdIgexU27tDYmYxiceMgjYD5Icx4GBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;22&quot;/&gt;&lt;span&gt;的极限[注五]， 则 p 给出的就是整个互联网的网页排序——它的每一个分量就是相应网页的访问几率， 几率越大， 排序就越靠前。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这样， 佩奇和布林就找到了一个不仅含义合理， 而且数学上严谨的网页排序算法， 他们把这个算法称为 PageRank， 不过要注意的是， 虽然这个名称的直译恰好是 “网页排序”， 但它实际上指的是 “佩奇排序”， 因为其中的 “Page” 不是指网页， 而是佩奇的名字。 这个算法就是谷歌排序的数学基础， 而其中的矩阵 G 则被称为谷歌矩阵 (Google matrix)。 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;细心的读者可能注意到了， 我们还遗漏了一样东西， 那就是谷歌矩阵中描述虚拟用户 “性格” 的那个 α 参数。 那个参数的数值是多少呢？ 从理论上讲， 它应该来自于对真实用户平均行为的分析， 不过实际上另有一个因素对它的选取产生了很大影响， 那就是&lt;/span&gt; &lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;img class=&quot;&quot; data-ratio=&quot;0.55&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicasibsLXstibrcJVCgtTLn9SMpSpKf8k6LVt15xIde68n9u2SqrrBZoIrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;40&quot;/&gt;&lt;span&gt;收敛于 p 的快慢程度。 由于 G 是一个 N×N 矩阵， 而 N 为互联网上——确切地说是被谷歌所收录的——网页的总数， 在谷歌成立之初为几千万， 目前为几百亿 (并且还在持续增加)， 是一个极其巨大的数字。 因此 G 是一个超大型矩阵， 甚至很可能是人类有史以来处理过的最庞大的矩阵。 对于这样的矩阵，&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.55&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicasibsLXstibrcJVCgtTLn9SMpSpKf8k6LVt15xIde68n9u2SqrrBZoIrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;40&quot;/&gt;&lt;span&gt;收敛速度的快慢是关系到算法是否实用的重要因素， 而这个因素恰恰与 α 有关。 可以证明， α 越小，&lt;/span&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.55&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicasibsLXstibrcJVCgtTLn9SMpSpKf8k6LVt15xIde68n9u2SqrrBZoIrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;40&quot;/&gt;&lt;span&gt;的收敛速度就越快。 但 α 也不能太小， 因为太小的话， “佩奇排序” 中最精华的部分， 即以网页间的彼此链接为基础的排序思路就被弱化了 (因为这部分的贡献正比于 α)， 这显然是得不偿失的。 因此， 在 α 的选取上有很多折衷的考虑要做， 佩奇和布林最终选择的数值是 α = 0.85。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;以上就是谷歌背后最重要的数学奥秘。 与以往那种凭借关键词出现次数所作的排序不同， 这种由所有网页的相互链接所确定的排序是不那么容易做假的， 因为做假者再是把自己的网页吹得天花乱坠， 如果没有真正吸引人的内容， 别人不链接它， 一切就还是枉然[注六]。 而且 “佩奇排序” 还有一个重要特点， 那就是它只与互联网的结构有关， 而与用户具体搜索的东西无关。 这意味着排序计算可以单独进行， 而无需在用户键入搜索指令后才临时进行。 谷歌搜索的速度之所以快捷， 在很大程度上得益于此。&lt;/span&gt;&lt;/p&gt;

&lt;section class=&quot;&quot; data-tools=&quot;135&amp;#x7F16;&amp;#x8F91;&amp;#x5668;&quot; data-id=&quot;92498&quot;&gt;&lt;section&gt;&lt;section background-size=&quot;&quot; border-box=&quot;&quot; break-word=&quot;&quot; fmt=&quot;png&quot; https=&quot;&quot; important=&quot;&quot; left=&quot;&quot; mmbiz=&quot;&quot; no-repeat=&quot;&quot; png=&quot;&quot; px=&quot;&quot; tjtgiabky1osjzibhbaikrwhib9yrxicav6silioptqyydibibp2zyukuwxkkhc4miasz5h2pxiac07jt6vzoriaqbhw=&quot;&quot; top=&quot;&quot; wx=&quot;&quot;&gt;&lt;section background-size=&quot;&quot; bottom=&quot;&quot; break-word=&quot;&quot; fmt=&quot;png&quot; https=&quot;&quot; important=&quot;&quot; mmbiz=&quot;&quot; no-repeat=&quot;&quot; png=&quot;&quot; px=&quot;&quot; right=&quot;&quot; tjtgiabky1osjzibhbaikrwhib9yrxica7hx90xnibebfloa2f2ojzjrufhrcvfoian9k9woxhpoxoayqqlgtddka=&quot;&quot; wx=&quot;&quot;&gt;&lt;section class=&quot;&quot; data-brushtype=&quot;text&quot;&gt;四. 结语&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.794344473007712&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicauvbgGCBwwiaQMsN1C5Hxic0YyrKtpXEnmiabFdK2SR04iaE45g7icJW3sQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;389&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在本文的最后， 我们顺便介绍一点谷歌公司的历史。 佩奇和布林对谷歌算法的研究由于需要收集和分析大量网页间的相互链接， 从而离不开硬件支持。 为此， 早在研究阶段， 他们就四处奔走， 为自己的研究筹集资金和硬件。 1998 年 9 月， 他们为自己的试验系统注册了公司——即如今大名鼎鼎的谷歌公司。 但这些行为虽然近乎于创业， 他们两人当时却并无长期从商的兴趣。 1999 年， 当他们觉得打理公司干扰了自己的研究时， 甚至萌生了卖掉公司的想法。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;他们的开价是 100 万美元。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;与谷歌在短短几年之后的惊人身价相比， 那简直就是 “跳楼大甩卖”。 可惜当时却无人识货。 佩奇和布林在硅谷 “叫卖” 了一圈， 连一个买家都没找到。 被他们找过的公司包括了当时搜索业巨头之一的 Excite (该公司后来想必连肠子都悔青了)。 为了不让自己的心血荒废， 佩奇和布林只得将公司继续办了下去， 一直办到今天， 这就是谷歌的 “发家史”。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;谷歌成立之初跟其它一些 “发迹于地下室” (one-man-in-basement) 的 IT 公司一样寒酸： 雇员只有一位 (两位老板不算)， 工作场所则是一位朋友的车库。 但它出类拔萃的排序算法很快为它赢得了声誉。 公司成立仅仅 3 个月，《PC Magzine》杂志就把谷歌列为了年度最佳搜索引擎。 2001 年， 佩奇为 “佩奇排序” 申请到了专利， 专利的发明人为佩奇， 拥有者则是他和布林的母校斯坦福大学。 2004 年 8 月， 谷歌成为了一家初始市值约 17 亿美元的上市公司。 不仅公司高管在一夜间成为了亿万富翁， 就连当初给过他们几十美元 “赞助费” 的某些同事和朋友也得到了足够终身养老所用的股票回报。 作为公司摇篮的斯坦福大学则因拥有 “佩奇排序” 的专利而获得了 180 万股谷歌股票。 2005 年 12 月， 斯坦福大学通过卖掉那些股票获得了 3.36 亿美元的巨额收益， 成为美国高校因支持技术研发而获得的有史以来最巨额的收益之一[注七]。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;谷歌在短短数年间就横扫整个互联网， 成为搜索引擎业的新一代霸主， 佩奇和布林的那个排序算法无疑居功至伟， 可以说， 是数学成就了谷歌[补注一]。 当然， 这么多年过去了， 谷歌作为 IT 界研发能力最强的公司之一， 它的网页排序方法早已有了巨大的改进， 由当年单纯依靠 “佩奇排序” 演变为了由 200 多种来自不同渠道的信息——其中包括与网页访问量有关的统计数据——综合而成的更加可靠的方法。 而当年曾给佩奇和布林带来过启示的学术界， 则反过来从谷歌的成功中借鉴了经验， 如今一些学术机构对论文影响因子 (impact factor) 的计算已采用了类似 “佩奇排序” 的算法。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在本文的最后， 还有一件事情在这里提一下， 那就是与佩奇和布林研究排序算法几乎同时， 有另外几人也相互独立地沿着类似的思路从事着研究[注八]。 他们中有一位是当时在美国新泽西州工作的中国人， 他的算法后来也成就了一家公司——一家中国公司。 此人的名字叫做李彦宏 (Robin Li)， 他所成就的那家公司就是百度[补注二]。 这些新公司的发展极好地印证了培根 (Francis Bacon) 的一句名言： 知识就是力量。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注释&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;38&quot;&gt;
&lt;p&gt;&lt;span&gt;马尔可夫过程， 也称为马尔可夫链 (Markov chain)， 是一类离散随机过程， 它的最大特点是每一步的转移概率分布都只与前一步有关。 而平稳马尔可夫过程则是指转移概率分布与步数无关的马尔可夫过程 (体现在我们的例子中， 即 H 与 n 无关)。 另外要说明的是， 本文在表述上不同于佩奇和布林的原始论文， 后者并未使用诸如 “马尔可夫过程” 或 “马尔可夫链” 那样的术语， 也并未直接运用这一领域内的数学定理。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在更细致的分类中， 这种每一列的矩阵元之和都为 1 的随机矩阵称为左随机矩阵 (left stochastic matrix)， 以区别于每一行的矩阵元之和都等于 1 的所谓右随机矩阵 (right stochastic matrix)。 这两者在应用上基本是等价的， 区别往往只在于约定。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这种几乎满足随机矩阵条件， 但有些列 (或行) 的矩阵元之和小于 1 的矩阵也有一个名称， 叫做亚随机矩阵 (substochastic matrix)。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;确切地说， 这种所有矩阵元都为正的矩阵不仅是素矩阵， 而且还是所谓的正矩阵 (positive matrix)。 这两者的区别是： 正矩阵要求所有矩阵元都为正， 而素矩阵只要求自己的某个正整数次幂为正矩阵。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;读者们想必看出来了， p 其实是矩阵 G 的本征值为 1 的本征向量， 而利用虚拟用户确定网页排序的思路其实是在用迭代法解决上述本征值问题。 在数学上可以证明， 上述本征向量是唯一的， 而且 G 的其它本征值 λ 全都满足 |λ|&amp;lt;1 (更准确地说，=&quot;&quot; 是=&quot;&quot; |λ|≤α=&quot;&quot; ——这也正是下文即将提到的&amp;lt;=&quot;&quot; span=&quot;&quot;&amp;gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.55&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky1oSJzibhBaIkrwHib9YRxicasibsLXstibrcJVCgtTLn9SMpSpKf8k6LVt15xIde68n9u2SqrrBZoIrQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;40&quot;/&gt;&lt;span&gt;的收敛速度与 α 有关的原因)。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当然， 这绝不意味着在网页排序上已不可能再做假。 相反， 这种做假在互联网上依然比比皆是， 比如许多广告或垃圾网页制造者用自动程序到各大论坛发贴， 建立对自己网页的链接， 以提高排序， 就是一种常见的做假手法。 为了遏制做假， 谷歌采取了很多技术手段， 并对有些做假网站采取了严厉的惩罚措施。 这种惩罚 (有时是误罚) 对于某些靠互联网吃饭的公司有毁灭性的打击力。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;从投资角度讲， 斯坦福大学显然是过早卖掉了股票， 否则获利将更为丰厚。 不过， 这正是美国名校的一个可贵之处， 它们虽擅长从支持技术研发中获利， 却并不唯利是图。 它们有自己的原则， 那就是不能让商业利益干扰学术研究。 为此， 它们通常不愿长时间持有特定公司的股票， 以免在无形中干扰与该公司存在竞争关系的学术研究的开展。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;那些研究与 “佩奇排序” 的类似仅仅在于大方向 (即都利用互联网的链接结构来决定网页排序)， 而非具体算法类似。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;参考文献&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;D. Austin, How Google Finds Your Needle in the Web's Haystack.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;em&gt;&lt;span&gt;J. Battelle, The Birth of Google, Wired (August 2005).&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;S. Brin and L. Page, The Anatomy of a Large-Scale Hypertextual Web Search Engine, Seventh International World-Wide Web Conference, April 14-18, 1998, Brisbane, Australia.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;O. Ibe, Markov Processes for Stochastic Modeling, (Elsevier Academic Press, 2009).&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;A. N. Langville and C. D. Meyer, Google's PageRank and Beyond: The Science of Search Engine Rankings, (Princeton University Press, 2006).&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;C. Rousseau and Y. Saint-Aubin, Mathematics and Technology, (Springer, 2008).&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;二零一零年十二月四日写于纽约&lt;br/&gt;二零一零年十二月五日发表于本站&lt;br/&gt;http://www.changhai.org/&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;补注&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;有些读者对 “是数学成就了谷歌” 这一说法不以为然， 认为是佩奇和布林的商业才能， 或将数学与商业结合起来的才能成就了谷歌。 这是一个见仁见智的问题， 看法不同不足为奇。 我之所以认为是数学成就了谷歌， 是因为谷歌当年胜过其它搜索引擎的地方只有算法。 除算法外， 佩奇和布林当年并无其它胜过竞争对手的手段， 包括商业手段。 如果让他们去当其它几家搜索引擎公司的老总， 用那几家公司的算法， 他们是不可能脱颖而出的； 而反过来， 如果让其它几家搜索引擎公司的老总来管理谷歌， 用谷歌的算法， 我相信谷歌依然能超越对手。 因此， 虽然谷歌后来确实用过不少出色的商业手段 (任何一家那样巨型的公司都必然有商业手段上的成功之处)， 而当年那个算法在今天的谷歌——如正文所述——则早已被更复杂的算法所取代， 但我认为谷歌制胜的根基和根源在于那个算法， 而非商业手段， 因此我说 “是数学成就了谷歌”。 [2011-01-01]&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;本文被收录于《因为星星在那里： 科学殿堂的砖与瓦》 (清华大学出版社 2015 年 6 月出版) 一书时未保留有关百度的这几句话， 因为实在是越来越觉得百度不配被提及。 不过本站版本由于在 “网友讨论选录” 中已作过说明， 将继续保留之。 [2016-05-03]&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;∑编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;来源 | 卢昌海主页&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 11 Sep 2018 09:04:16 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/ySGWo6QCUc</dc:identifier>
</item>
<item>
<title>丘成桐演讲全文：几何与计算数学的关系</title>
<link>http://www.jintiankansha.me/t/gpubO7qazH</link>
<guid isPermaLink="true" >http://www.jintiankansha.me/t/gpubO7qazH</guid>
<description>&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;/&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot;&gt;&lt;section class=&quot;&quot; powered-by=&quot;xiumi.us&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;1.5&quot;&gt;&lt;section class=&quot;&quot; readability=&quot;3&quot;&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2017年10月26日上午，第十四届中国计算机大会（CNCC 2017）正式在福州海峡国际会展中心开幕&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class=&quot;&quot;&gt;&lt;section/&gt;&lt;section&gt;&lt;br/&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;在大会第一天，菲尔兹奖获得者、哈佛大学终身教授丘成桐在会上作为特邀嘉宾做了首个演讲报告，报告主题为《现代几何学在计算机科学中的应用》。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;报告中丘成桐先生首先介绍了现代几何的发展历史，随后介绍了他与他的学生及朋友在计算机与几何交叉方面的一些研究。对于人工智能，丘成桐先生认为现代以神经网络为代表的统计方法及机器学习在工程实践中取得了很大的成功，但其理论基础非常薄弱，是一个黑箱算法；人工智能需要一个可以被证明的理论作为基础。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;胡事民（大会程序主席，清华大学教授）：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;大家都知道，计算机科学离不开数学，早期的计算机都是数学家帮我们奠定了基础。今天的第一个报告，我们非常荣幸地邀请到了著名的数学家、数学界最高奖菲尔兹奖获得者、哈佛大学教授丘成桐。丘老师不仅是伟大的数学家，他也在计算机方面做了很多工作。他开创了计算共形几何，广泛地应用在图形学、视觉传感器等方面。最近丘先生还在Nature上发表了一篇文章，研究社交网络。下面我们有请丘先生。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6518771331058021&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXfT2MicHicPZbgzTEpK08DMISdTialtr2saxgIvelclpTYH1NyGcwo5iblw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;293&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;丘成桐演讲全文：&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;今天很荣幸地收到你们的邀请来做一个演讲。我本人在数学上的贡献不在计算机数学，最近这十多年来，由于我的学生顾险峰以及其他朋友的缘故，他们叫我帮忙做些跟计算机有关的学问。我发觉，纯数学，尤其是几何学在计算机方面有很大的应用。所以我今天就滥竽充数，讲讲几何跟计算机数学的关系。 &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、现代几何的历史&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;首先，前面几分钟讲讲几何学历史。几何学一开始，就类似今天的人工智能，有很多工程上的应用以及产生的很多定理。不过随后欧几里得将当时主要的平面定理组合以后发现这些定理都可以由5个公理推出来。这是人类历史上很重要的一个里程碑，在很繁复的现象里，他找到了很简单但却很基本的五个公理，从而能将原来的这些公理全部推出来。我是很鼓励我们做人工智能的也能重复这个做法——从现在复杂多样的网络中找到它最简单的公理。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;由于希腊人的工具不够，所以除了二次方程定义的图形（圆形、直线、椭圆等）以外，他们没有能力处理更一般的图形。一直到阿基米德，才开始做微积分的无限算法（积分体积），同时他们也开始做射影几何的算法。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;微积分的出现使几何学进入了新纪元，微分几何也因此诞生。几何学在欧拉和高斯手上突飞猛进，变分方法和组合方法被大量地引入到几何学当中。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;现代几何（近两百年的几何）主要发源于黎曼在1854年的博士论文，这篇论文奠定了整个现代几何的基础，他把几何图像看成一个抽象但是能够自足的空间。这个空间后来成为了现代物理的基础，现在物理中研究引力波等都是从黎曼这里开始的，没有黎曼这个空间，爱因斯坦不可能研究出来广义相对论。同时假如我们细看黎曼的这篇论文的话，就会发现，黎曼还认为离散空间也是一个很重要的空间。这个离散的空间包括了我们现在研究的图论，也用来研究宇宙万物可能产生的一切。所以即使是150年以后的今天，我们依然能看到黎曼的这个观点很重要。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、对称的概念&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;几何学能够提供很多重要的想法，可以讲其影响是无所不在的。几何学的很多概念在高能物理和一般的物理学领域都产生重要的影响。其中一个重要的概念叫做“对称”。“对称”的概念是在1820年到1890年间由几个重要的数学家发展出来的。我们中国喜欢讲的阴阳，其实就是一个属于对称。在数学上有一个叫庞加莱对偶的概念，其实就是阴阳，但这个概念要比阴阳具体得多，同时也真正用在了数学的发展上。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;19世纪，Sophis Lee发展的李群，也是物理学界最重要的工具之一，在现代物理中几乎没有一个学科可以离开李群的。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在几何学上，1870年的时候，伟大的数学家克莱因发表了《埃尔朗根纲领》，在这个纲领里克莱因提出用对称来统治几何的重要原理，随后产生了很多重要的几何学，包括仿射几何、保角几何和投影几何等。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这些几何对于图像处理都有密切的关系。我以及我的学生和朋友这十多年来就是用保角几何及种种几何来处理不同的图像。即使是当年看上去不重要的几何，现在实际上都有它重要的用处。这种种的计算都是从对称这个概念发展出来的。从大范围对称到小范围对称，这些在20世纪的基础研究中都有很成功的影响。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、平行移动&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;另外一个很重要的概念，我想是很多做工程的人都没有注意到的，就是平行移动的概念。这个概念影响了整个数学界两千年。平行移动的概念其实就是一点和另外一点要有一个很好的比较的方法；计算机也好，图形学也好，在某一点上看到的事情要和其他点进行比较，比较的方法就叫平行移动。这也是一个很广泛、很重要的概念。现在在计算数学里面还没有大量的引进，但是在物理学界已经被大量地使用上了。所以我期望这些基本的概念以后能在计算机里面大量地使用。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、几何学与计算机相互之间的影响&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;现在我们具体来讲一些的事情。现代几何为计算数学奠定了很多理论的基础，并且指导了计算机科学未来发展的方向。现代几何广泛应用到计算机的所有分支。举例来讲，计算机图形学、计算机视觉、计算机辅助几何设计、计算机网络等等都有广泛的应用。再例如，黎曼几何可以用来理解社交网络；现代几何理论也可以用来理解人工智能的特性。要记住，我们讲的几何并不是高中时代的几何，所有与图像或者网络有关的都是几何的一部分。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;从另一方面来看，计算机学科的发展为现代几何提供了需求和挑战，也推动了跨学科的发展方向。例如：&lt;/span&gt;&lt;/p&gt;

&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;人工智能中的机械定理证明推动了计算代数的发展；&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;数据安全、比特币、区块链的发展推动了代数数论、椭圆曲线和模形式的发展；&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;社交网络、大数据的发展催生了持续同调理论（persistent homology）的发展；&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;动漫、游戏的发展推动了计算共性几何学科的诞生和发展；&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt; &lt;span&gt;机器学习的发展推动了最优传输理论的发展等等。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;五、计算机&amp;amp;几何学研究案例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们下面举几个具体的例子，分别是图论、计算机图形学、计算机视觉、人工智能、深度学习等。这几个和几何都有密切的联系。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、图论&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们先讲讲图论。图，就是一大堆顶点、一大堆边把它们连起来，这是最简单不过的事情。对于一个图，譬如交通图，我们要找出它们有着怎么样一个结构，什么地方比较拥挤。有时候我们也要研究怎么将这个图切成小部分，然后分解成简单的子图；如何衡量各个连通分支间的连接度；如何将图染色等。这些问题实际上都跟图上的特征函数有密切的关系。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;图上的特征函数跟光滑图形上的特征函数有很类似的地方。我在40年前跟几个朋友，郑绍远、李伟光，做了一个工作，将光滑黎曼流形的特征函数推广到图上，得到了很好的结果。这些结果可以用来决定图上的连结的生成，研究图上的边创造过程，尤其是有个量的估值来控制在图上发散的过程。约束发散的过程可以应用到许多实际的过程中。我们还研究了图上的薛定谔方程，定义了图上的量子隧道概念。这些概念都是从物理上来的，被借用到图上。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;假如我们在考虑有向图，就是每个点、每个边，给它一个方向，我们就可以将拓扑学整个引用到图上去，定义了图上的同调群。同调群可以用来研究图上密切的关系和它的内容。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;现在我们来讲讲我们做的关于博弈理论的一个事情。进化图论为表达种群结构提供了数学工具：顶点代表个体，边代表个体的交互作用。图可以用来代表各种具有空间结构的群，例如细菌、动植物、组织结构、多细胞器官和社交网络。在进化过程中，每个个体依据自身的适应程度，进行繁殖病侵占到邻近顶点。图的拓扑反映了基因的演化——变异和选择的平衡。类似的，互联网是一个大网，一个非常复杂的网络，我可以在上面研究它的变化。社交行为的进化可以用进化博弈论来研究。个体和邻居博弈，根据收益而繁殖。个体繁殖速率受到自身与其他个体的交互作用影响，从而产生博弈的动态演化。其中心的问题就在于对于给定的图如何决定哪种策略会取得成功。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们在今年年初的时候在nature上发了篇文章，我们得到一个结果，就是在任何给定的图上进行弱选择，自然选择从两种彼此竞争的策略中如何进行挑选，这个理论框架适用于人类决策，也适用于任何集群组织的生态演化。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们从弱选择极限得到的结果，解释了何种组织结构导致何种行为。我们发现，如果存在成对的强纽带结构，合作就会大规模出现。我们用数学证明了社会学方面的一个结论：稳定的伙伴或者伴侣，对于形成合作型的社会起到了骨干作用。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 2、计算机图形学：全局参数化 – 共形几何&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面我要讲的是“计算机图形学：全局参数化 – 共形几何”。这是我们发展了二十多年的一个学问。我和顾险峰从他还在哈佛念博士的时候（1999年）我们就开始做这个事情。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当我们将图形整体光滑映射到参数区域，使几何变得很小，会破坏掉整个图形；一般来讲这个要用手工来做，否则的话它变化非常大。针对这个问题，我们使用了纹理贴图、法向量贴图等等的方法。共性几何是一个很重要的从很古典的黎曼几何中产生的几何。&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6860068259385665&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXHEle3v5hT9PicYSXRoAvJK1IUYBTiaD8Ny1TL8JkMl5n8Wc3KsXic0buA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;293&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;举例来讲，这个大卫的雕像，我们将它保角地映射到平面上去。它表面上看好像变化很大，但实际上变化不大，因为它是保角不变的。这在图像处理中是一个很重要的事情。举个例子来讲，从图上要画格点，因为我们画到平面上去以后，我们就可以将平面上画的很好的格点映射到脸上，就可以变成很漂亮的四方形的格点。这对工程处理有很多好处，其好处就是它将图上很小的圆映射到对方图上还是一个很小的圆，不会有扭曲，不会有太大的变化。&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.552901023890785&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXcfuY6StFSYdSxZONPibPUokbpZaNsvVXvyPomPyUdS8doVMiaSzLr42A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;293&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;前面这些应用到一个数学上很重的定理，叫做庞加莱单值化定理，这是一个从黎曼时候开始的定理。就是讲映射的图形只跟它的拓扑性有关，这上面有三种几何，分别为：球面几何、欧氏几何、双曲几何。所有二维的几何，不管是什么样子的，我们都可以用这三种几何来分类。因此我们就可以将很复杂的事情很简单地描述出来。&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6216216216216216&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXKjVnc9tvlowOV69anHEZP0yicekx416ma2OxFjlOIdTBcdShaMXF6Gg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;296&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;上面这些我们得出了很好的结果。但是保角也有它的缺点，所以我们也发展了第二类映射，我们使得面元被保持，而角度不一定被保持。保角映射有时候可能将一个面拉的很远，左手边是保角映射，右手边是保面元映射。右面的图在不同的情形下会得出很好的结果。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、计算机视觉，表情追踪 – 拟共映射&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;共性映射也可以应用到表情识别和追踪当中。我们可以自动地找到球面上曲面间的光滑映射，使得特征点匹配，使映射带来的变化很小。这是我们得到的一个很重要的结果。 &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.5521885521885522&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXB0AXIR7kv8JZ7x7FQicdtHIYaYukXtMVCBgHFgsFrVwThKVNC7DkF3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;297&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;因此，我们可以用来追踪表情，表情捕捉。一个人他在笑、在哭、在种种不同的表现的时候，我们能够得到他的重要的面部特征，主要的方法就是我们将它映射到平面上，然后用共形映射或拟共形映射来研究它。这些都是很重要的数学工具，在计算上也有很重要的应用。&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6033898305084746&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXiaZz3VoWVez7ur3192ZwCdLRGicfAexnmp92xcwJVb5lia5nhd3MPb8bQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;295&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;拟共形映射到目前来讲，纯数学家把它看得还是非常重要的，它不是一个正则方程，而是一个伪正则方程，也即Beltrami方程。这个方程在我们研究图像变形时在数学上是非常重要的，所以我们应用到图形处理里面去也得到很重要的结果。我们可在微分同胚的空间进行变化到最优的映射。它对医疗和动漫都有很重要的应用。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、计算力学 – 六面体网格生成，叶状结构理论&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们也可以用同样的变化（保角映射）来产生六面体网格的生成和叶状结构理论。&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6292517006802721&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXCdYK9CDuCleKlxnqkZvEoWDv0WLSmpKkvdTsicv2FicfKMwECYEn1Buw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;294&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;这是在一只兔子上找到的好的网格。但是这个网格会产生一些奇异点（拓扑学的缘故）。针对这些奇异点，我们就做了一些研究，得出了很好的结论。&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6182432432432432&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXnwDI2ysJuF4443H6E1O2Wd1n5SMhSINToIV6TBqbQvvWvDXUUyCicwA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;296&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;再比如，我们看这个曲面，在这个曲面上我们画出一些叶状的结构，可是它也有一定的奇异点。我们将这些奇异点分类，得出了一些在计算机科学上有意义的结论。&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6348122866894198&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXhFOQkxQWFll3nicO2aczTOZydSRaIKdriaTUySjVEdxKHnrSKscNiapxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;293&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;此外，全纯二次微分的网络中间有个六边形的变化。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;5、数字几何处理-几何压缩：蒙日-安培理论，几何逼近理论&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面我们来看计算机的几何压缩中的蒙日-安培理论以及几何逼近理论。如何压缩复杂几何数据，同时保证几误差最小，保证黎曼度量、曲率测度、微分算子的收敛性，这些都是很重要的问题。我们用了很多共形映射的方法将曲面映射到平面去；再用蒙日-安培方程，将高曲率区域放大；随后重采样，在共性参数域上计算Delaunay三角剖分。这样得到的简化多面体网格就能够保证黎曼度量、曲率测度、微分算子收敛。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;6、区块链：数字安全，椭圆曲线理论&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这方面很多人都知道，这部分我就跳过去不再讲了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;7、人工智能&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;目前机器学习算法需要大量的样本。虽然现在比从前进步得多了，但规模还是很庞大。所以我们的想法是，让理论来帮忙处理这种复杂的数据学习。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在机器学习中有很多统计的内容，但是很多内容我们都不是很了解它是如何产生的。所以我们需要用一些比较严格的数学的理论来从这些复杂的现象中抽取出它们的本质。我们今天介绍一下用几何的方法来研究对抗生成网络（GAN）的事情。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-1837452791782084&quot; data-ad-slot=&quot;7041996284&quot;/&gt;  生成对抗网络GAN（Generative Adversarial Networks）其实就是以己之矛克己之盾，在矛盾中发展，使得矛更加锋利，盾更加强韧。这里的盾就被称为判别器（Descriminator），矛被称为生成器（Generator）。生成器G一般是将一个随机变量（例如高斯分布或者均匀分布），通过参数化的概率生成模型（通常是用一个深度神经网进行参数化），进行概率分布的逆变换采样，从而得到一个生成的概率分布。判别器D也通常采用深度卷积神经网络。&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6530612244897959&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdX7AQT0kp0XC6aHJPTiay4iavmdzWR0DKDRJJxX2OJZsicKQ1Grbus275QQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;294&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;举个例子来讲，有个概率分布u，u是基本的白噪音，影射到右手边的图片，一个概率分布v。我们从映射里看到GAN的问题其实就是：在两个概率分布u和v之间，找到一个最优的传输映射，从一个空间到另外一个空间，使它的概率分布是保持的。&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.711864406779661&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXj9mOQ0g00wicjiaiatXlrIwB6V8T7c5YhSsc8svHE30vtbJ4vpNl2Kxdg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;295&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;u通过phi映射到v上去，同时我们要将它传输的代价变得最小。这样的变化是我们所需要的，因为这就不再需要像刚才所说的矛盾变化来达到最好的结果。我们知道，映射可以用一个方程来解决，所以我们其实就是要找一个凸函数U，它的梯度是我们的映射函数phi，它满足一个方程：蒙日-安培方程。&lt;/span&gt;&lt;/p&gt;

&lt;section data-role=&quot;width&quot;&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6952054794520548&quot; data-s=&quot;300,640&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabkw0ZE91yg4ukVZIfiaDVnUdXr9foXDzR1atcUF82ZwVKhZETv0YsyqvtjNfG8W3GKdWBwYKMdkjLbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;292&quot;/&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;p&gt;&lt;span&gt;我们可以通过对这个方程进行求解的方式来找到最优传输映射，所以就节省很多生成对抗的时间。蒙日-安培方程本身其实是等价于微分几何中的亚历山大定理的。60年代就有人处理过这个方程，我自己也做过这个方程，前几年顾险峰跟他的学生也和我一起对它做了一个计算。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;对抗生成网络实质上就是用深度神经网络来计算概率测度之间的变换。虽然规模宏大，但是数学本质并不复杂。应用相对成熟的最优传输理论和蒙日-安培理论，我们可以为机器学习的黑箱给出透明的几何解释，这有助于设计出更为高效和可靠的计算方法。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;六、总结&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;我们看到现代数学和计算机科学的发展紧密相关，共形几何的单值化定理、蒙日-安培理论、最优传输理论等现代几何中的定理应用到计算机科学中的很多领域。我希望我们能够将更多那些表面上看来很高深的数学应用到我们日常的计算机上去，不但是能够有效地提出计算机的算法，同时也能够给它一个理论的基础。人工智能需要一个坚实的理论基础，否则它的发展会有很大困难。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;∑编辑 | Gemini&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;来源 | 雷锋网&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0437601296596435&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;617&quot; width=&quot;auto&quot; data-src=&quot;http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/951TjTgiabky7x6u1VxMVMia4MLibNzC2nrumY3zDflTsCeoM04M1BrkvPny8tsw6hYkIicUr42iarLmadL2x6JwV6A/640?wx_fmt=png&quot;/&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;算法数学之美微信公众号欢迎赐稿&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;稿件涉及数学、物理、算法、计算机、编程等相关领域，经采用我们将奉上稿酬。&lt;/span&gt;&lt;/p&gt;
&lt;p helvetica=&quot;&quot; neue=&quot;&quot; pingfang=&quot;&quot; sc=&quot;&quot; hiragino=&quot;&quot; sans=&quot;&quot; gb=&quot;&quot; microsoft=&quot;&quot; yahei=&quot;&quot; ui=&quot;&quot; arial=&quot;&quot; sans-serif=&quot;&quot; px=&quot;&quot; normal=&quot;&quot; center=&quot;&quot; border-box=&quot;&quot; important=&quot;&quot; break-word=&quot;&quot;&gt;&lt;span&gt;投稿邮箱：math_alg@163.com&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 11 Sep 2018 09:04:15 +0000</pubDate>
<dc:language>zh-CN</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.jintiankansha.me/t/gpubO7qazH</dc:identifier>
</item>
</channel>
</rss>