<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>elfinder源码浏览-Volume文件系统操作类（1） - Visitors</title>
<link>http://www.cnblogs.com/dmeck/p/8586482.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dmeck/p/8586482.html</guid>
<description>&lt;p&gt;今天看了一个文件管理的java后台源码，elfinder&lt;/p&gt;
&lt;p&gt;发现这个东东比我写的代码效率告到不知道哪去了，苦思冥想后还是抽点时间看看吧。。&lt;/p&gt;
&lt;p&gt;它实现了我们电脑上的所以关于文件操作的动作，并生成了api开放给前台，具体详细还是看官方文档吧，本人英文贼菜&lt;/p&gt;
&lt;p&gt;之间用了Java1.7中的NIO里的path类，此工具类可以使我们不在使用恶心的FIle对象啦，而且速度超快，看着代码整个人都舒服这里有它的介绍&lt;a title=&quot;JAVA NIO:Path ,File&quot; href=&quot;http://blog.csdn.net/kiss_the_sun/article/details/49931207&quot; target=&quot;_blank&quot;&gt;JAVA NIO:Path ,File&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目地址&lt;a title=&quot;elfinder-java-connector&quot; href=&quot;https://github.com/trustsystems/elfinder-java-connector&quot; target=&quot;_blank&quot;&gt;elfinder-java-connector&lt;/a&gt;此版本没有前台页面实现&lt;/p&gt;
&lt;p&gt;此版本有前台实现&lt;a title=&quot;elfinder-2.x-servlet&quot; href=&quot;https://github.com/bluejoe2008/elfinder-2.x-servlet&quot; target=&quot;_blank&quot;&gt;elfinder-2.x-servlet&lt;/a&gt;不过此版本没有Java源码，是通过maven导入的方式让我们调用它的核心类&lt;/p&gt;
&lt;p&gt;两种相差spring集成、加载配置文件到context的实现&lt;/p&gt;
&lt;p&gt;我今天看的是前者的代码&lt;/p&gt;
&lt;p&gt;首先我们先从底层看齐&lt;/p&gt;
&lt;p&gt;　　今天稍微看了一个大概&lt;/p&gt;
&lt;p&gt;　　首先定义了一个公共的接口向外部开放，所以的规则依据此接口开发&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Volume{&lt;br/&gt;　　各种需要操作文件的定义&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
String getMimeType(Target target) throws IOException;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;}
　合成这个接口的包装接口（设计模式中合成）
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Target {

    Volume getVolume();

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 好了之后实现了这个包装接口Target&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NIO2FileSystemTarget &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Target {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Path path;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Volume volume;
。。。。。。。。。。。。。。。。。。。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再然后聚合了这个几个接口和实现类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NIO2FileSystemVolume &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Volume {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String alias;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Path rootDir;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Detector detector;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; NIO2FileSystemVolume(Builder builder) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.alias =&lt;span&gt; builder.alias;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.rootDir =&lt;span&gt; builder.rootDir;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.detector = &lt;span&gt;new&lt;/span&gt; NIO2FileTypeDetector();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我今天大致弄明白了这个的实现&lt;/span&gt;
&lt;span&gt;        createRootDir();
    }&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
@Override&lt;br/&gt;public String getMimeType(Target target) throws IOException {&lt;br/&gt;Path path = fromTarget(target);&lt;br/&gt;return detector.detect(path);&lt;br/&gt;}
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;。。。。。。。。。。。。。。。。。。。。。。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们从这个聚合类开始看&lt;/p&gt;
&lt;p&gt;下面这个获取文件类型的实现是通过tika的工具获取的 &lt;span&gt;&lt;a title=&quot;文件内容读取--Tika&quot; href=&quot;http://blog.csdn.net/supermancoke/article/details/69942946&quot; target=&quot;_blank&quot;&gt;文件内容读取--Tika&lt;/a&gt;这个介绍比较详细&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Tika是Apache下开源的文档内容解析工具，支持上千种文档格式（如PPT、XLS、PDF）。Tika使用统一的方法对各种类型文件进行内容解析,封装了各种格式解析的内部实现，可用于搜索引擎索引、内容分析、转换等场景。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们来看他的具体实现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先是&lt;/span&gt;Detector 他的一个接口&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Detector {
    String detect(InputStream inputStream)&lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException;
    String detect(Path path)&lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt;  IOException;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NIO2DileTypeDetector &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Detector {

   &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;  &lt;span&gt;final&lt;/span&gt; Tika tika = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Tika();
。。。。。。。。。。。。。。。。。。。。。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;看了这些大概弄明白这个代码的大致写法心里有点小激动，我们写个测试类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    @org.junit.Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Test1()&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        Path path &lt;/span&gt;= Paths.get(&quot;F:\\[加密与解密(第三版)].段钢.扫描版.pdf&quot;&lt;span&gt;);
        NIO2DileTypeDetector detector &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NIO2DileTypeDetector();
        System.out.println(detector.detect(path));
    }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;C:\server\jdk1.8.0_77\bin\java 。。。。。。。。。。&lt;br/&gt;application/pdf&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



</description>
<pubDate>Fri, 16 Mar 2018 15:33:00 +0000</pubDate>
<dc:creator>Visitors</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dmeck/p/8586482.html</dc:identifier>
</item>
<item>
<title>数据分析之Pandas和Numpy学习笔记(持续更新) - xnchall</title>
<link>http://www.cnblogs.com/xnchll/p/8586241.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xnchll/p/8586241.html</guid>
<description>&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.max([axis, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;  返回根据指定的axis计算最大值&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.argmax([axis, out])&lt;span class=&quot;cm-tab&quot;&gt; 返回根据指定axis计算最大值的索引&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.min([axis, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;  返回根据指定的axis计算最小值&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.argmin([axis, out])&lt;span class=&quot;cm-tab&quot;&gt; 返回根据指定axis计算最小值的索引&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.ptp([axis, out])&lt;span class=&quot;cm-tab&quot;&gt;    返回根据指定axis计算最大值与最小值的差&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.clip([min, max, out])&lt;span class=&quot;cm-tab&quot;&gt;   返回数组元素限制在[min, max]之间的新数组（小于min的转为min，大于max的转为max）&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.round([decimals, out])&lt;span class=&quot;cm-tab&quot;&gt;  返回指定精度的数组（四舍五入）&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.trace([offset, axis1, axis2, dtype, out])&lt;span class=&quot;cm-tab&quot;&gt;   返回数组的迹（对角线元素的和）&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.sum([axis, dtype, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;   根据指定axis计算数组的和，默认求所有元素的和&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.cumsum([axis, dtype, out])&lt;span class=&quot;cm-tab&quot;&gt;  根据指定axis计算数组的累积和&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.mean([axis, dtype, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;  根据指定axis计算数组的平均值&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.var([axis, dtype, out, ddof, keepdims])&lt;span class=&quot;cm-tab&quot;&gt; 根据指定的axis计算数组的方差&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.std([axis, dtype, out, ddof, keepdims])&lt;span class=&quot;cm-tab&quot;&gt; 根据指定axis计算数组的标准差&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.prod([axis, dtype, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;  根据指定axis计算数组的积&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.cumprod([axis, dtype, out])&lt;span class=&quot;cm-tab&quot;&gt; 根据指定axis计算数据的累计积&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.all([axis, dtype, out])&lt;span class=&quot;cm-tab&quot;&gt; 根据指定axis判断所有元素是否全部为真&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot; CodeMirror-line&quot;&gt;
&lt;span&gt;ndarray.any([axis, out, keepdims])&lt;span class=&quot;cm-tab&quot;&gt;  根据指定axis判断是否有元素为真&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 16 Mar 2018 15:31:00 +0000</pubDate>
<dc:creator>xnchall</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xnchll/p/8586241.html</dc:identifier>
</item>
<item>
<title>逻辑回归(logistic regression) - 康行天下</title>
<link>http://www.cnblogs.com/makefile/p/logistic-regression.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/makefile/p/logistic-regression.html</guid>
<description>&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;逻辑回归从线性回归引申而来,对回归的结果进行logistic函数运算,将范围限制在[0,1]区间,并更改了损失函数.逻辑回归要求输入的标签数据是01分布(伯努利),其损失函数的定义方式,使得其可用于2分类问题(通过得到的概率值与阈值比较进行分类).而线性回归则是单纯的连续值回归.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;logistic分布&quot;&gt;logistic分布&lt;/h2&gt;
&lt;p&gt;X具有logistic分布是指X具有以下分布和密度函数:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{align} F(x)&amp;amp;=P(X\le x)={1\over 1+e^{-(x-\mu)/\gamma}} \\ f(x)&amp;amp;=F'(x) \end{align} \]&lt;/span&gt;&lt;br/&gt;式子中,&lt;span class=&quot;math inline&quot;&gt;\(\mu\)&lt;/span&gt;是位置参数,&lt;span class=&quot;math inline&quot;&gt;\(\gamma&amp;gt;0\)&lt;/span&gt;是形状参数.logistic分布函数是一条S型曲线,密度类似正态分布的钟型曲线.&lt;/p&gt;
&lt;h2 id=&quot;二项逻辑回归模型&quot;&gt;二项逻辑回归模型&lt;/h2&gt;
&lt;p&gt;一个事件的几率是该事件发生的概率与不发生的概率的比值,对数几率(log odds)或logit函数是:&lt;span class=&quot;math inline&quot;&gt;\(logit(p)=\log {p\over 1-p}\)&lt;/span&gt;.&lt;br/&gt;逻辑回归模型为:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ P(Y=1|x)={e^{w\cdot x}\over 1+e^{w\cdot x}} \\ P(Y=0|x)={1\over 1+e^{w\cdot x}} \]&lt;/span&gt;&lt;br/&gt;因此逻辑回归的对数几率是:&lt;span class=&quot;math inline&quot;&gt;\(\log{P(Y=1|x)\over P(Y=0|x)}=w\cdot x\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&quot;模型参数估计&quot;&gt;模型参数估计&lt;/h2&gt;
&lt;p&gt;可以应用极大似然估计法估计模型参数:&lt;br/&gt;设&lt;span class=&quot;math inline&quot;&gt;\(P(Y=1|x)=\pi(x),P(Y=0|x)=1-\pi(x)\)&lt;/span&gt;&lt;br/&gt;似然函数为:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \Pi_{i=1}^N[\pi(x_i)]^{y_i} [1-\pi(x_i)]^{1-y_i} \]&lt;/span&gt;&lt;br/&gt;对数似然函数为:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \begin{align} L(w)&amp;amp;=\log \Pi_{i=1}^N[\pi(x_i)]^{y_i} [1-\pi(x_i)]^{1-y_i} \\ &amp;amp;=\sum_{i=1}^N[y_i\log\pi(x_i)+(1-y_i)\log(1-\pi(x_i))] \end{align} \]&lt;/span&gt;&lt;br/&gt;对L(w)求极大值,得到w的估计值.而我们实际中求-L(w)的极小值,即二值交叉熵损失(binary cross entropy).&lt;br/&gt;二项逻辑回归的参数估计法可以推广到多项逻辑回归,即softmax.&lt;/p&gt;
&lt;h2 id=&quot;交叉熵&quot;&gt;交叉熵&lt;/h2&gt;
&lt;p&gt;假设类别&lt;span class=&quot;math inline&quot;&gt;\(y\in \{0,1,...,k\}\)&lt;/span&gt;,每个类别统计的样本个数分别为&lt;span class=&quot;math inline&quot;&gt;\(n_1,n_2,\cdots,n_k\)&lt;/span&gt;,且&lt;span class=&quot;math inline&quot;&gt;\(\sum_{i=1}^k n_i=n\)&lt;/span&gt;.假设样本服从多项式分布且相互独立,那么有&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ P(D|\theta)={n!\over n_1!\cdot n_2!\cdots n_k!}\Pi_{i=1}^Nf(x_i,\theta)^{y_i} \]&lt;/span&gt;&lt;br/&gt;取对数得:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \log P(D|\theta)=\log n!-\log n_1!\cdot n_2!\cdots n_k!+\sum_{i=1}^n y_i\log f(x_i,\theta) \]&lt;/span&gt;&lt;br/&gt;前边的log项与参数&lt;span class=&quot;math inline&quot;&gt;\(\theta\)&lt;/span&gt;无关,因此只需要最小化:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ -\sum_{i=1}^ny_i\log f(x_i,\theta) \]&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;逻辑回归-损失函数&quot;&gt;逻辑回归-损失函数&lt;/h3&gt;
&lt;p&gt;如果用平方误差（MSE）作为逻辑回归的损失函数,那么函数曲线将是跳跃式的,非凸的(non-convex),原因是logistic函数将数据范围限制在[0,1]区间,而真实标签值非0即1.最小化 MSE 损失容易陷入局部极小点.逻辑回归损失是如下的分情况的凸函数(单个x与y的损失):&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \text{Cost}(h_\theta(x),y)=\begin{cases} -\log(h_\theta(x)) &amp;amp;&amp;amp; \text{, $y=1$} \\ -\log(1-h_\theta(x)) &amp;amp;&amp;amp; \text{, $y=0$} \end{cases} \]&lt;/span&gt;&lt;br/&gt;符合直觉和逻辑.累计损失函数可以转化为如下(同时加上了正则项):&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ J(\theta)=[-{1\over m}\sum_{i=1}^m\big(y^{(i)}\log h_\theta(x^{(i)})+(1-y^{(i)})\log (1-h_\theta(x^{(i)}))\big)]+{\lambda \over 2m}\sum_{j=1}^n\theta_j^2 \]&lt;/span&gt;&lt;br/&gt;其中参数 &lt;span class=&quot;math inline&quot;&gt;\(\theta\)&lt;/span&gt; 同线性回归一样，但经过sigmoid函数得到输出：&lt;span class=&quot;math inline&quot;&gt;\(h_{\theta}(x)=g(\theta^{T}x)\)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ g(z)={1\over 1+e^{-z}} \tag{sigmoid} \]&lt;/span&gt;&lt;br/&gt;损失对&lt;span class=&quot;math inline&quot;&gt;\(\theta\)&lt;/span&gt;的偏导数为&lt;br/&gt;&lt;span class=&quot;math display&quot;&gt;\[ \frac{\partial}{\partial\theta_{j}}J(\theta) ={1\over m}\sum_{i=1}^{m}(h_\theta(x^{i})-y^i)x_j^i \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;与线性回归的偏导数相同，参考&lt;a href=&quot;https://math.stackexchange.com/questions/477207/derivative-of-cost-function-for-logistic-regression&quot;&gt;公式推导&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;模型的优势&quot;&gt;模型的优势&lt;/h2&gt;
&lt;p&gt;逻辑回归相比其它更复杂的模型的优势：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;LR能以概率的形式输出结果,而非只是0,1判定,如SVM难以用概率表示；&lt;/li&gt;
&lt;li&gt;LR的可解释性强,可控度高；&lt;/li&gt;
&lt;li&gt;训练快,feature engineering之后效果好；&lt;/li&gt;
&lt;li&gt;因为结果是概率,可以做ranking model；&lt;/li&gt;
&lt;li&gt;添加feature很简单。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在现实中很多推荐系统都是拿LR做基础版本的,其作用不容小觑.&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 15:29:00 +0000</pubDate>
<dc:creator>康行天下</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/makefile/p/logistic-regression.html</dc:identifier>
</item>
<item>
<title>Java高并发秒杀系统【观后总结】 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8586090.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8586090.html</guid>
<description>&lt;p&gt;在慕课网上发现了一个JavaWeb项目，内容讲的是高并发秒杀，觉得挺有意思的，就进去学习了一番。&lt;/p&gt;
&lt;p&gt;记录在该项目中学到了什么玩意..&lt;/p&gt;
&lt;p&gt;该项目源码对应的gitHub地址（由观看其视频的人编写，并非视频源代码）：&lt;a href=&quot;https://github.com/codingXiaxw/seckill&quot; class=&quot;uri&quot;&gt;https://github.com/codingXiaxw/seckill&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我结合其资料和观看视频的时候整理出从该项目学到了什么...&lt;/p&gt;

&lt;h2 id=&quot;日志记录工具&quot;&gt;日志记录工具：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;

    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--1.日志 java日志有:slf4j,log4j,logback,common-logging&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        slf4j:是规范/接口&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        日志实现:log4j,logback,common-logging&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        使用:slf4j+logback&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    --&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;mybatis之前没注意到的配置属性&quot;&gt;Mybatis之前没注意到的配置属性：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用jdbc的getGeneratekeys获取自增主键值&lt;/strong&gt;，这个属性还是挺有用的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;configuration
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--配置全局属性--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--使用jdbc的getGeneratekeys获取自增主键值--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;setting&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;useGeneratedKeys&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--使用列别名替换列名　　默认值为true&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        select name as title(实体中的属性名是title) form table;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        开启后mybatis会自动帮我们把表中name的值赋到对应实体的title属性中&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;setting&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;useColumnLabel&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--开启驼峰命名转换Table:create_time到 Entity(createTime)--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;setting&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;mapUnderscoreToCamelCase&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mybatis返回的对象如果有关联字段，除了使用resultMap还有下面这种方式（虽然我还是觉得resultMap会方便一点）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;select&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;queryByIdWithSeckill&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; resultType=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;SuccessKilled&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--根据seckillId查询SuccessKilled对象，并携带Seckill对象--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--如何告诉mybatis把结果映射到SuccessKill属性同时映射到Seckill属性--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--可以自由控制SQL语句--&amp;gt;&lt;/span&gt;
        SELECT
            sk.seckill_id,
            sk.user_phone,
            sk.create_time,
            sk.state,
            s.seckill_id &quot;seckill.seckill_id&quot;,
            s.name &quot;seckill.name&quot;,
            s.number &quot;seckill&quot;,
            s.start_time &quot;seckill.start_time&quot;,
            s.end_time &quot;seckill.end_time&quot;,
            s.create_time &quot;seckill.create_time&quot;
        FROM success_killed sk
        INNER JOIN seckill s ON sk.seckill_id=s.seckill_id
        WHERE sk.seckill_id=#{seckillId}
        AND sk.user_phone=#{userPhone}
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;数据库连接池可能用到的属性&quot;&gt;数据库连接池可能用到的属性：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--c3p0私有属性--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;maxPoolSize&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;30&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;minPoolSize&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--关闭连接后不自动commit--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;autoCommitOnClose&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--获取连接超时时间--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;checkoutTimeout&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1000&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--当获取连接失败重试次数--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;acquireRetryAttempts&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;spring与junit整合&quot;&gt;spring与Junit整合：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by codingBoy on 16/11/27.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 配置spring和junit整合，这样junit在启动时就会加载spring容器&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;//告诉junit spring的配置文件&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@ContextConfiguration&lt;/span&gt;({&lt;span class=&quot;st&quot;&gt;&quot;classpath:spring/spring-dao.xml&quot;&lt;/span&gt;})
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SeckillDaoTest {

    &lt;span class=&quot;co&quot;&gt;//注入Dao实现类依赖&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Resource&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; SeckillDao seckillDao;


    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;queryById&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
        &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; seckillId=&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;;
        Seckill seckill=seckillDao.&lt;span class=&quot;fu&quot;&gt;queryById&lt;/span&gt;(seckillId);
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(seckill.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;());
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(seckill);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;mybatis参数为一个以上时&quot;&gt;Mybatis参数为一个以上时&lt;/h2&gt;
&lt;p&gt;之前在学习MyBatis的时候，&lt;strong&gt;如果参数超过了一个，那么是使用Map集合来进行装载的！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这次教程中发现，可以不用Map集合（如果都是基本数据类型）！&lt;/p&gt;
&lt;p&gt;例子：&lt;a href=&quot;mailto:**使用@param就行了&quot;&gt;**使用@Param就行了&lt;/a&gt;！**&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;reduceNumber&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@Param&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;seckillId&quot;&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; seckillId, &lt;span class=&quot;fu&quot;&gt;@Param&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;killTime&quot;&lt;/span&gt;) Date killTime);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;在XML文件中可以直接忽略parameterType了！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;避免重复插入数据时抛出异常&quot;&gt;避免重复插入数据时抛出异常&lt;/h2&gt;
&lt;p&gt;如果主键重复插入数据的时候，Mybatis正常是会抛出异常的，我们又不希望它抛出异常，那么我们可以这样做：&lt;/p&gt;
&lt;p&gt;写ignore..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171208204853452-1658777702.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;tdo&quot;&gt;tdo&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;一个dto包作为传输层,dto和entity的区别在于:entity用于业务数据的封装，&lt;strong&gt;而dto用于完成web和service层的数据传递。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于dto这个概念，在之前我是接触过一次的，但是没有好好地实践起来。这次看到了它的用法了。&lt;/p&gt;
&lt;p&gt;我的理解是：&lt;strong&gt;Service与Web层数据传递数据的再包装了一个对象而已&lt;/strong&gt;。因为很多时候Service层返回的数据如果使用的是POJO，POJO很多的属性是多余的，还有一些想要的数据又包含不了。此时，&lt;strong&gt;dto又可以再一次对要传输的数据进行抽象，封装想获取的数据&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;定义多个异常对象&quot;&gt;定义多个异常对象&lt;/h2&gt;
&lt;p&gt;之前的异常对象都是针对整个业务的，&lt;strong&gt;其实还是可以细分多个异常类的出来的&lt;/strong&gt;。比如“重复秒杀”，”秒杀关闭“这些都是属于秒杀的业务。&lt;/p&gt;
&lt;p&gt;这样做的好处就是看到抛出的异常就能够知道是具体哪部分错了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于视频中在Service层就catch住了很多异常，我觉得可以在Service层直接抛出，在Controller也能抛出，直接使用统一异常处理器类来管理会更加方便！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171208210231437-328868932.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;提倡使用注解方式使用事务&quot;&gt;提倡使用注解方式使用事务&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171208210507468-1751220537.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171208210509187-1362910295.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我觉得就是代码更加清晰吧，使用注解的话。&lt;/p&gt;
&lt;p&gt;在视频下面还有同学说如果在Service中调用事务方法会有些坑，我暂时还没遇到过。先存起来吧：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;并发性上不去是因为当多个线程同时访问一行数据时，产生了事务，因此产生写锁，每当一个获取了事务的线程把锁释放，另一个排队线程才能拿到写锁，QPS和事务执行的时间有密切关系，事务执行时间越短，并发性越高，这也是要将费时的I/O操作移出事务的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;关于同类中调用事务方法的时候有个坑，同学们需要注意下AOP切不到调用事务方法。事务不会生效，解决办法有几种，可以搜一下，找一下适合自己的方案。本质问题时类内部调用时AOP不会用代理调用内部方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;“关于同类中调用事务方法的时候有个坑” 解决方案&lt;br/&gt;1、如果是基于接口动态代理 是没有问题的，直接使用接口调用&lt;br/&gt;2、如果是基于class的动态代理 可以用 AopContext.currentProxy() 解决，注意剥离方法一定是public 修饰 ！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;md5暴露接口&quot;&gt;MD5暴露接口&lt;/h2&gt;
&lt;p&gt;其实我也在想MD5暴露出去的url是不是真的有用，也见到有人提问了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.imooc.com/qadetail/164058&quot; class=&quot;uri&quot;&gt;https://www.imooc.com/qadetail/164058&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;回答者：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;不能说没作用，如果不加密，用户截取了你的访问地址，他看到了当前秒杀ID为1000，他完全可以推测出其他的秒杀地址，或者说他可以造出一批地址；视频中秒杀在数据库中判断了秒杀时间，其他时间他自然是秒杀不到，但是对数据库也有一定的冲击，如果他用定时器或者循环秒杀软件，你的系统承受力是个问题；另一方面对于一些还没开始的秒杀，他模拟地址以后，完全可以用定时器一直访问。加密以后由于他拿不到混淆码，就只能通过点击链接进行秒杀……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;简单理解：通过MD5加密以后，用户在秒杀之前模拟不出真实的地址，还是有一定作用的。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;枚举类&quot;&gt;枚举类&lt;/h2&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;在return new SeckillExecution(seckillId,1,&quot;秒杀成功&quot;,successKilled);代码中&lt;strong&gt;，我们返回的state和stateInfo参数信息应该是输出给前端的，但是我们不想在我们的return代码中硬编码这两个参数，所以我们应该考虑用枚举的方式将这些常量封装起来&lt;/strong&gt;，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; SeckillStatEnum {

    &lt;span class=&quot;fu&quot;&gt;SUCCESS&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;秒杀成功&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;END&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;秒杀结束&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;REPEAT_KILL&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;重复秒杀&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;INNER_ERROR&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;系统异常&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;DATE_REWRITE&lt;/span&gt;(-&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;数据篡改&quot;&lt;/span&gt;);

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; state;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String info;

    &lt;span class=&quot;fu&quot;&gt;SeckillStatEnum&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; state, String info) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;state&lt;/span&gt; = state;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt; = info;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getState&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; state;
    }


    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getInfo&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; info;
    }


    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; SeckillStatEnum &lt;span class=&quot;fu&quot;&gt;stateOf&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index)
    {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (SeckillStatEnum state : &lt;span class=&quot;fu&quot;&gt;values&lt;/span&gt;())
        {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (state.&lt;span class=&quot;fu&quot;&gt;getState&lt;/span&gt;()==index)
            {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; state;
            }
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;restful接口设计学习&quot;&gt;Restful接口设计学习&lt;/h2&gt;
&lt;p&gt;之前就已经接触过RESTful这样的思想理念的，可是在第一个项目中是没有用起来的。因为还是不大习惯，怕写成不伦不类的RESTful接口，打算在第二个项目中将RESTful全部应用起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210125727521-742272325.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210125730224-1596653774.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210125736021-816944531.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210125741865-893504055.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考博文：&lt;a href=&quot;http://kb.cnblogs.com/page/512047/&quot; class=&quot;uri&quot;&gt;http://kb.cnblogs.com/page/512047/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;springmvc之前不知道的细节&quot;&gt;SpringMVC之前不知道的细节&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;mailto:**@datetimeformat注解对时间进行格式化&quot;&gt;**@DateTimeFormat注解对时间进行格式化&lt;/a&gt;！（这个我暂时没有试验）**&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--配置spring mvc--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--1,开启springmvc注解模式&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    a.自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    b.默认提供一系列的功能:数据绑定，数字和日期的format@NumberFormat,@DateTimeFormat&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    c:xml,json的默认读写支持--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;mvc:annotation-driven/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--2.静态资源默认servlet配置--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        1).加入对静态资源处理：js,gif,png&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        2).允许使用 &quot;/&quot; 做整体映射&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;mvc:default-servlet-handler/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210130308521-790385614.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210125936068-195346094.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;返回统一格式的json&quot;&gt;返回统一格式的JSON&lt;/h2&gt;
&lt;p&gt;之前在Web层与Service中封装了dto来进行这两层的数据进行传输，而我们一般都是在Controller返回JSON给前端进行解析。&lt;/p&gt;
&lt;p&gt;最好的做法就是将JSON的格式也统一化。这样做就能够很好地形成规范了！&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;//将所有的ajax请求返回类型，全部封装成json数据&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SeckillResult&amp;lt;T&amp;gt; {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; success;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; T data;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String error;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SeckillResult&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; success, T data) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;success&lt;/span&gt; = success;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;data&lt;/span&gt; = data;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SeckillResult&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; success, String error) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;success&lt;/span&gt; = success;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt; = error;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isSuccess&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; success;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSuccess&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; success) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;success&lt;/span&gt; = success;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;fu&quot;&gt;getData&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; data;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setData&lt;/span&gt;(T data) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;data&lt;/span&gt; = data;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getError&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; error;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setError&lt;/span&gt;(String error) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt; = error;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;获取json数据方式&quot;&gt;获取JSON数据方式&lt;/h2&gt;
&lt;p&gt;之前获取JSON都是使用&lt;code&gt;object.properties&lt;/code&gt;的方式来获取的，这次还看到了另一种方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210130632552-859186745.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;javascript模块化&quot;&gt;JavaScript模块化&lt;/h2&gt;
&lt;p&gt;之前在项目中写JS代码都是要什么功能，写到哪里的。&lt;strong&gt;看了这次视频，发现JS都可以模块化！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JS模块化起来可读性还是比之前要好的，这是我之前没有接触过的，以后写JS代码就要注意了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面贴上一段代码来感受一下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;56&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *  模块化javaScript&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by jianrongsun on 17-5-25.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; seckill &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 封装秒杀相关的ajax的url&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/seckill/time/now&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;exposer&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (seckillId) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/seckill/&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; seckillId &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/exposer&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;execution&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/seckill/&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; seckillId &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; md5 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/execution&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 验证手机号码&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;validatePhone&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (phone) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!!&lt;/span&gt;(phone &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;phone&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;isNaN&lt;/span&gt;(phone))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 详情页秒杀业务逻辑&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 详情页开始初始化&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (params) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;获取手机号码&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 手机号验证登录，计时交互&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; userPhone &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cookie&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'userPhone'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 验证手机号&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;validatePhone&lt;/span&gt;(userPhone)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;未填写手机号码&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 验证手机控制输出&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; killPhoneModal &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#killPhoneModal&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;killPhoneModal&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;modal&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 显示弹出层&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;backdrop&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'static'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 静止位置关闭&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;keyboard&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// 关闭键盘事件&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#killPhoneBtn&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;提交手机号码按钮被点击&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; inputPhone &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#killPhoneKey&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;val&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;inputPhone&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; inputPhone)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;validatePhone&lt;/span&gt;(inputPhone)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// 把电话写入cookie&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cookie&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'userPhone'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; inputPhone&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/seckill'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// 验证通过 刷新页面&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;location&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;reload&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// todo 错误文案信息写到前端&lt;/span&gt;
                        &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#killPhoneMessage&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;label class='label label-danger'&amp;gt;手机号码错误&amp;lt;/label&amp;gt;&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;在cookie中找到了电话号码，开启计时&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 已经登录了就开始计时交互&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; startTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; params[&lt;span class=&quot;st&quot;&gt;'startTime'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; endTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; params[&lt;span class=&quot;st&quot;&gt;'endTime'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; seckillId &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; params[&lt;span class=&quot;st&quot;&gt;'seckillId'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始秒杀时间=======&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; startTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;结束秒杀时间========&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;now&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (result) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; result[&lt;span class=&quot;st&quot;&gt;'success'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; nowTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;convertTime&lt;/span&gt;(result[&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;服务器当前的时间==========&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; nowTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// 进行秒杀商品的时间判断，然后计时交互&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;countDown&lt;/span&gt;(seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; nowTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; startTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'结果:'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; result)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'result'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; result)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;handlerSeckill&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; mode) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 获取秒杀地址&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;mode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&amp;lt;button class=&quot;btn btn-primary btn-lg&quot; id=&quot;killBtn&quot;&amp;gt;开始秒杀&amp;lt;/button&amp;gt;'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;debug&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始进行秒杀地址获取&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;exposer&lt;/span&gt;(seckillId)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (result) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; result[&lt;span class=&quot;st&quot;&gt;'success'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; exposer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; result[&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (exposer[&lt;span class=&quot;st&quot;&gt;'exposed'&lt;/span&gt;]) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;有秒杀地址接口&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;// 开启秒杀，获取秒杀地址&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; md5 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; exposer[&lt;span class=&quot;st&quot;&gt;'md5'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; killUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;URL&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;execution&lt;/span&gt;(seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; md5)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀的地址为:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; killUrl)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;// 绑定一次点击事件&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#killBtn&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;one&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'click'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始进行秒杀,按钮被禁用&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// 执行秒杀请求，先禁用按钮&lt;/span&gt;
                        &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;addClass&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;disabled&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;co&quot;&gt;// 发送秒杀请求&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;post&lt;/span&gt;(killUrl&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (result) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; killResult &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; result[&lt;span class=&quot;st&quot;&gt;'data'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; state &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; killResult[&lt;span class=&quot;st&quot;&gt;'state'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; stateInfo &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; killResult[&lt;span class=&quot;st&quot;&gt;'stateInfo'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀状态&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; stateInfo)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;co&quot;&gt;// 显示秒杀结果&lt;/span&gt;
                            &lt;span class=&quot;va&quot;&gt;mode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&amp;lt;span class=&quot;label label-success&quot;&amp;gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; stateInfo &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;/span&amp;gt;'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;mode&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;show&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;还没有暴露秒杀地址接口,无法进行秒杀&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;// 未开启秒杀&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; now &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;convertTime&lt;/span&gt;(exposer[&lt;span class=&quot;st&quot;&gt;'now'&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; start &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;convertTime&lt;/span&gt;(exposer[&lt;span class=&quot;st&quot;&gt;'start'&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; end &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;convertTime&lt;/span&gt;(exposer[&lt;span class=&quot;st&quot;&gt;'end'&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;当前时间&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; now)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始时间&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; start)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;结束时间&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; end)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始倒计时&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;debug&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始进行倒计时&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;countDown&lt;/span&gt;(seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; now&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; start&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; end)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;服务器端查询秒杀商品详情失败&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'result'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;result&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;valueOf&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;countDown&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; nowTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; startTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; endTime) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀的商品ID:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; seckillId &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;,服务器当前时间：&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; nowTime &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;,开始秒杀的时间:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; startTime &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;,结束秒杀的时间&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//  获取显示倒计时的文本域&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; seckillBox &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#seckill-box&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//  获取时间戳进行时间的比较&lt;/span&gt;
        nowTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Date&lt;/span&gt;(nowTime).&lt;span class=&quot;at&quot;&gt;valueOf&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        startTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Date&lt;/span&gt;(startTime).&lt;span class=&quot;at&quot;&gt;valueOf&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        endTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Date&lt;/span&gt;(endTime).&lt;span class=&quot;at&quot;&gt;valueOf&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;转换后的Date类型当前时间戳&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; nowTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;转换后的Date类型开始时间戳&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; startTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;转换后的Date类型结束时间戳&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (nowTime &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; endTime &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; nowTime &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; startTime) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 秒杀开始&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀可以开始,两个条件符合&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handlerSeckill&lt;/span&gt;(seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; seckillBox)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (nowTime &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; endTime) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(nowTime &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// console.log(nowTime + &quot;&amp;gt;&quot; + startTime);&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(nowTime &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;// 秒杀结束&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀已经结束了,当前时间为:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; nowTime &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;,秒杀结束时间为&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; endTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;seckillBox&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀结束&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀还没开始&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(nowTime &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; startTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 秒杀未开启&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; killTime &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Date&lt;/span&gt;(startTime &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(killTime)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;开始计时效果&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;seckillBox&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;countdown&lt;/span&gt;(killTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (event) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 事件格式&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; format &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strftime&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;秒杀倒计时: %D天 %H时 %M分 %S秒&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(format)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;seckillBox&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;html&lt;/span&gt;(format)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;on&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'finish.countdown'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 事件完成后回调事件，获取秒杀地址，控制业务逻辑&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;准备执行回调,获取秒杀地址,执行秒杀&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;倒计时结束&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;seckill&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;handlerSeckill&lt;/span&gt;(seckillId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; seckillBox)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;cloneZero&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (time) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; cloneZero &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;:00&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;time&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;需要拼接时间&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            time &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; time &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; cloneZero&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; time&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;时间是完整的&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; time&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;convertTime&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (localDateTime) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; year &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; monthValue &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;monthValue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; dayOfMonth &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;dayOfMonth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; hour &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; minute &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;minute&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; second &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;localDateTime&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; year &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; monthValue &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; dayOfMonth &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; hour &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; minute &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; second&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前三篇已经做好了这个系统了，但是作为一个秒杀系统而言，它能支持的并发量是很低的。那我们现在要考虑怎么调优。&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;秒杀的地址接口可以借助redis来进行优化，不用多次访问数据库。&lt;/p&gt;
&lt;p&gt;秒杀操作是与数据库的事务相关的，不能使用缓存来替代了。下面给出的方案是需要修改源码的，难度是比较难的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131226365-333272915.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131232646-882735977.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131242286-612726285.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131303068-1662643561.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131314365-1036633925.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面分析瓶颈究竟在哪：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Mysql执行单条的SQL语句其实是非常快的。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主要是行级锁事务的等待，网络的延迟和GC回收！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131654365-1134416537.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131643427-2098892887.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131855833-1052024836.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131646365-1806803562.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131659536-927111669.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131651052-2102662776.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决思路&quot;&gt;解决思路：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131709177-1435493719.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210131932615-1660955449.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决秒杀接口&quot;&gt;解决秒杀接口&lt;/h2&gt;
&lt;p&gt;对于秒杀接口而言，需要使用到Redis将数据进行缓存起来。那么用户就访问就不用去访问数据库了，我们给Redis缓存的数据就好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210204233224-1462662274.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这次使用Jedis来操作Redis.&lt;/p&gt;
&lt;p&gt;还有值得 注意的地方：&lt;strong&gt;我们可以使用ProtostuffIOUtil来代替JDK的序列化，因为这个的序列化功能比JDK的要做得好很多！&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package com.suny.dao.cache;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import com.dyuproject.protostuff.LinkedBuffer;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.dyuproject.protostuff.ProtostuffIOUtil;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.dyuproject.protostuff.runtime.RuntimeSchema;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.suny.entity.Seckill;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.Logger;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.LoggerFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import redis.clients.jedis.Jedis;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import redis.clients.jedis.JedisPool;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 操作Redis的dao类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by 孙建荣 on 17-5-27.下午4:44&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RedisDao {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Logger logger = LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;());

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; JedisPool jedisPool;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; RuntimeSchema&amp;lt;Seckill&amp;gt; schema = RuntimeSchema.&lt;span class=&quot;fu&quot;&gt;createFrom&lt;/span&gt;(Seckill.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RedisDao&lt;/span&gt;(String ip, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; port) {
        jedisPool = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;JedisPool&lt;/span&gt;(ip, port);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Seckill &lt;span class=&quot;fu&quot;&gt;getSeckill&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; seckillId) {
        &lt;span class=&quot;co&quot;&gt;// redis操作业务逻辑&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Jedis jedis = jedisPool.&lt;span class=&quot;fu&quot;&gt;getResource&lt;/span&gt;()) {
            String key = &lt;span class=&quot;st&quot;&gt;&quot;seckill:&quot;&lt;/span&gt; + seckillId;
            &lt;span class=&quot;co&quot;&gt;// 并没有实现内部序列化操作&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//get-&amp;gt;byte[]字节数组-&amp;gt;反序列化&amp;gt;Object(Seckill)&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 采用自定义的方式序列化&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 缓存获取到&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = jedis.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(key.&lt;span class=&quot;fu&quot;&gt;getBytes&lt;/span&gt;());
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (bytes != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;co&quot;&gt;// 空对象&lt;/span&gt;
                Seckill seckill = schema.&lt;span class=&quot;fu&quot;&gt;newMessage&lt;/span&gt;();
                ProtostuffIOUtil.&lt;span class=&quot;fu&quot;&gt;mergeFrom&lt;/span&gt;(bytes, seckill, schema);
                &lt;span class=&quot;co&quot;&gt;// seckill被反序列化&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; seckill;
            }
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            logger.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(e.&lt;span class=&quot;fu&quot;&gt;getMessage&lt;/span&gt;(), e);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;putSeckill&lt;/span&gt;(Seckill seckill) {
        &lt;span class=&quot;co&quot;&gt;//  set Object(Seckill) -&amp;gt; 序列化 -&amp;gt; byte[]&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Jedis jedis = jedisPool.&lt;span class=&quot;fu&quot;&gt;getResource&lt;/span&gt;()) {
            String key = &lt;span class=&quot;st&quot;&gt;&quot;seckill:&quot;&lt;/span&gt; + seckill.&lt;span class=&quot;fu&quot;&gt;getSeckillId&lt;/span&gt;();
            &lt;span class=&quot;dt&quot;&gt;byte&lt;/span&gt;[] bytes = ProtostuffIOUtil.&lt;span class=&quot;fu&quot;&gt;toByteArray&lt;/span&gt;(seckill, schema,
                    LinkedBuffer.&lt;span class=&quot;fu&quot;&gt;allocate&lt;/span&gt;(LinkedBuffer.&lt;span class=&quot;fu&quot;&gt;DEFAULT_BUFFER_SIZE&lt;/span&gt;));
            &lt;span class=&quot;co&quot;&gt;// 超时缓存&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; timeout=&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; jedis.&lt;span class=&quot;fu&quot;&gt;setex&lt;/span&gt;(key.&lt;span class=&quot;fu&quot;&gt;getBytes&lt;/span&gt;(), timeout, bytes);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            logger.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(e.&lt;span class=&quot;fu&quot;&gt;getMessage&lt;/span&gt;(), e);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }


}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--导入连接redis的JAR包--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;redis.clients&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jedis&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.9.0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--添加序列化依赖--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.dyuproject.protostuff&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;protostuff-core&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.dyuproject.protostuff&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;protostuff-runtime&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RedisDao并不受Mybatis的代理影响，于是是需要我们自己手动创建的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210204636896-51246873.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最终，我们的service逻辑就会变成这样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210204726427-221186869.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;秒杀操作优化&quot;&gt;秒杀操作优化&lt;/h2&gt;
&lt;p&gt;再次回到我们的秒杀操作，其实需要优化的地方就是我们的GC和行级锁等待的时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210204846333-613906122.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们之前的逻辑是这样的：&lt;strong&gt;先执行减库存操作，再插入购买成功的记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其实，我们可以先插入成功购买的记录，再执行减库存的操作！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;那这两者有啥区别呢？？？&lt;strong&gt;减库存的操作会导致行级锁的等待，而我们先进行insert的话，那么就不会被行级锁所干扰了。并且，我们这中两个操作是在同一个事物中的，并不会出现“超卖”的情况！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;关于先执行insert与先执行update的区别,&lt;strong&gt;两个事务同时insert的情况下,没有锁竞争,执行速度会快,当两个事务先update同一行数据,会有一个事务获得行锁,锁在事务提交之前都不会释放,所以让锁被持有的时间最短能提升效率&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我们service层的逻辑可以改成这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210205146802-413188378.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这不是最终的方案，如果为了性能的优化我们还可以将SQL在Mysql中运行，不受Spring的事务来管理。&lt;strong&gt;在Mysql使用存储过程来进行提交性能&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;

&lt;span class=&quot;co&quot;&gt;-- 秒杀执行储存过程&lt;/span&gt;
DELIMITER $$ &lt;span class=&quot;co&quot;&gt;-- console ; 转换为&lt;/span&gt;
$$
&lt;span class=&quot;co&quot;&gt;-- 定义储存过程&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;-- 参数： in 参数   out输出参数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;-- row_count() 返回上一条修改类型sql(delete,insert,update)的影响行数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;-- row_count:0:未修改数据 ; &amp;gt;0:表示修改的行数； &amp;lt;0:sql错误&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;PROCEDURE&lt;/span&gt; `seckill`.`execute_seckill`
  (&lt;span class=&quot;kw&quot;&gt;IN&lt;/span&gt; v_seckill_id BIGINT, &lt;span class=&quot;kw&quot;&gt;IN&lt;/span&gt; v_phone BIGINT,
   &lt;span class=&quot;kw&quot;&gt;IN&lt;/span&gt; v_kill_time  &lt;span class=&quot;dt&quot;&gt;TIMESTAMP&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;OUT&lt;/span&gt; r_result &lt;span class=&quot;dt&quot;&gt;INT&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;DECLARE&lt;/span&gt; insert_count &lt;span class=&quot;dt&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TRANSACTION&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; IGNORE &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; success_killed
    (seckill_id, user_phone, create_time)
    &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (v_seckill_id, v_phone, v_kill_time);
    &lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; row_count()
    &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; insert_count;
    &lt;span class=&quot;kw&quot;&gt;IF&lt;/span&gt; (insert_count = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;THEN&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;ROLLBACK&lt;/span&gt;;
      &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; r_result = -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    ELSEIF (insert_count &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
      &lt;span class=&quot;kw&quot;&gt;THEN&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;ROLLBACK&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; r_result = -&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;ELSE&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;UPDATE&lt;/span&gt; seckill
      &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;WHERE&lt;/span&gt; seckill_id = v_seckill_id
            &lt;span class=&quot;kw&quot;&gt;AND&lt;/span&gt; end_time &amp;gt; v_kill_time
            &lt;span class=&quot;kw&quot;&gt;AND&lt;/span&gt; start_time &amp;lt; v_kill_time
            &lt;span class=&quot;kw&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
      &lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; row_count()
      &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; insert_count;
      &lt;span class=&quot;kw&quot;&gt;IF&lt;/span&gt; (insert_count = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
      &lt;span class=&quot;kw&quot;&gt;THEN&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;ROLLBACK&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; r_result = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
      ELSEIF (insert_count &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;THEN&lt;/span&gt;
          &lt;span class=&quot;kw&quot;&gt;ROLLBACK&lt;/span&gt;;
          &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; r_result = -&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;;
      &lt;span class=&quot;kw&quot;&gt;ELSE&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;COMMIT&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; r_result = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;

      &lt;span class=&quot;kw&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;IF&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;IF&lt;/span&gt;;
  &lt;span class=&quot;kw&quot;&gt;END&lt;/span&gt;;
$$
&lt;span class=&quot;co&quot;&gt;--  储存过程定义结束&lt;/span&gt;
DELIMITER ;
&lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; @r_result = -&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;;
&lt;span class=&quot;co&quot;&gt;--  执行储存过程&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;CALL&lt;/span&gt; execute_seckill(&lt;span class=&quot;dv&quot;&gt;1003&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;13502178891&lt;/span&gt;, now(), @r_result);
&lt;span class=&quot;co&quot;&gt;-- 获取结果&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; @r_result;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210205313177-1070986245.png&quot;/&gt;。&lt;/p&gt;
&lt;p&gt;Mybatis调用存储过程其实和JDBC是一样的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/16/1622f2c67b44484e?w=789&amp;amp;h=200&amp;amp;f=png&amp;amp;s=143578&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在使用存储过程的时候，我们需要4个参数，其实result是在存储过程中被赋值的。&lt;strong&gt;我们可以通过MapUtils来获取相对应的值。这是我之前没有接触过的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210205421458-844107091.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210205426552-1364409364.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后，对于部署的系统架构应该是这样子的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1053130/201712/1053130-20171210205441271-1111149294.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;花了点时间看了该视频教程，觉得还是学到了不少的东西的。之前没有接触过优化的相关问题，现在给我打开了思路，以及学到了不少的开发规范的问题，也是很赞的。如果是初学者的话是可以去学学的。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章，想要获取更多的Java资源的同学，可以&lt;strong&gt;关注微信公众号:Java3y&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 16 Mar 2018 14:26:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8586090.html</dc:identifier>
</item>
<item>
<title>写着写着停不下来的普通女程序员的总结 - 明眸善睐</title>
<link>http://www.cnblogs.com/joyce4/p/8577141.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/joyce4/p/8577141.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;认识自己的无知是认识世界的最可靠的方法。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;时间过得又快又慢回顾你过去将近3年的学习经历&quot;&gt;&lt;strong&gt;&lt;span&gt;时间过得又快又慢——回顾你过去将近3年的学习经历&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;当初你报考的时候是真正喜欢计算机这个专业吗&quot;&gt;&lt;strong&gt;&lt;span&gt;1. 当初你报考的时候，是真正喜欢计算机这个专业吗？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;高考志愿对于一个没什么爱好的理科女无疑是过去这十几年来做的最痛快但又艰难的一个决定，现在我就读的是我高考志愿的第一个学校的第一个专业。可能是偏偏想要违背家里人的建议，在排除掉那些文科生可能会选的专业以外，我所感兴趣的理科生能够选择的范围也并不是很大，众多专业之中偏偏想要挑战一下计算机专业，即使亲朋好友都劝说一个女孩子别学这个，可能会太累，但偏偏就是这么倔强，别人说的我偏要去试一试哦。小时候也能接触到计算机，所以对这个专业是抱着很多的期待和未知，就这么跌跌撞撞磕磕绊绊迷迷茫茫地踏进了这个专业的门槛，从此开启我新世界的大门，但那个时候对于计算机专业具体是学什么的还真的是没有深入地去了解，只有模模糊糊的一个毕业会成为一名程序员的概念，但这也算改变了我的人生轨迹，所以就是这样的矛盾想法，那时候不能说是真正的喜欢计算机，但也一点都不讨厌这个专业。&lt;/p&gt;
&lt;h3 id=&quot;你现在后悔选择了这个专业吗&quot;&gt;&lt;strong&gt;&lt;span&gt;2. 你现在后悔选择了这个专业吗？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;不后悔，虽然接触计算机这个专业快三年了，学习这些基础课和专业课什么的也快三年了，但还是会对这个专业抱着很大的兴趣和期待，即便我只是一个普普通通的学生，并不是一个计算机大神。或许这个专业莫名的对我有着吸引力，越学习越觉得自己懂的东西还太少了，对于专业知识的了解还是太浅显了，就越想去了解它，我想至少到现在为止我还没有后悔过选择这个专业，在这近三年的学习过程中，兴趣带给我的快乐和满足远超过它所带来的困难和痛苦。&lt;/p&gt;
&lt;h3 id=&quot;你认为你现在最喜欢的领域是什么可以是计算机的也可以是其它领域&quot;&gt;&lt;strong&gt;&lt;span&gt;3. 你认为你现在最喜欢的领域是什么（可以是计算机的也可以是其它领域）？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;以一个未来的程序员的角度来说：我对于前端开发和网页方面还是挺感兴趣，可能这也和我没有怎么接触过后端的东西有关系吧，前端的一些东西入门还是挺简单的，做出来的东西也特别有意思，可视化比较强。以一个对新鲜事物感兴趣的普通大学生的角度来说：在大学期间我在学院的新闻中心工作了三年，这期间也学会了很多关于计算机的基础技能，比如简单的PS、视频剪辑、图形设计，所以这也造成了我虽然不是一个艺术生，但是对于剪辑和设计之类的东西特别的感兴趣。如果以后能把这两个角度结合起来那我觉得这会是我最喜欢的领域了。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;一位普普通通的的女程序员总结你现在已经掌握的知识&quot;&gt;&lt;strong&gt;&lt;span&gt;一位普普通通的的女“程序员”——总结你现在已经掌握的知识&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;你都具备了哪些专业知识和能力&quot;&gt;&lt;strong&gt;&lt;span&gt;1. 你都具备了哪些专业知识和能力？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;作为计算机科学与技术专业的一名本科生，至今为止学习了一些关于专业方面的课程，例如程序设计、数据结构、编译原理、网络原理、组成原理等等，还有这学期接触的单片机、软件工程、操作系统及数据库等等，其实在课堂上学习的东西只是给我们一个开端，学校的课程学习时间短暂，不可能每一科都让我们有一个非常深入的理解，但是作为这个专业的学生，对于各个方面都有了一定的了解，在了解之后才会对这方面有更浓厚的兴趣。在大学期间学习了C和C++语言，自学了一点点html、css和Js，但只是特别特别浅显的一些东西，距离专业知识这个词还有很长的道路。并且自己编程的能力很一般，这和自己动手实践操作的时间太少有很大的一部分原因，毕竟只有勤奋多练习才能有所提高。&lt;/p&gt;
&lt;h3 id=&quot;你认为你已经为成为一个合格的计算机软件工程是做好准备了吗在专业技术个人能力以及其它方面你还有那些欠缺&quot;&gt;&lt;strong&gt;&lt;span&gt;2. 你认为你已经为成为一个合格的计算机软件工程是做好准备了吗？在专业技术、个人能力以及其它方面你还有那些欠缺？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;我认为现在我并不具备成为一个合格的计算机软件工程师的资格。首先，在专业技术方面，我的编程能力只是能够在完成作业的基础上再多那么一点，距离能够做一名程序员或者说一名工程师还有特别远的距离，并且我对于很多实际项目也没有什么太多的了解，所以并没有做好准备成为一名软件工程师。据我了解做软件工程师需要具备很多能力，不光是动手实践的编程能力，还需要有和团队和谐愉悦的合作能力、良好的沟通和交流能力、对待需求和疑惑能够沉稳不慌张的能力等等。现在的短短几节软件工程课程让我了解到软件工程是将很多学科都紧密的联系在一起，软件需求分析、软件设计、软件构件、测试和维护等等，每一个方面都需要很多专业知识，而我在任何方面都没有太多的经验，欠缺太多了。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;先定一个小目标畅想未来&quot;&gt;&lt;strong&gt;&lt;span&gt;先定一个小目标？——畅想未来&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;对照材料中前人的经历你还准备从事计算机这个行业吗&quot;&gt;&lt;strong&gt;&lt;span&gt;1. 对照材料中前人的经历，你还准备从事计算机这个行业吗？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;看了北航陈彦吉同学的&lt;a href=&quot;http://www.cnblogs.com/ChildishChange/p/7363123.html&quot;&gt;&lt;span&gt;那篇文章&lt;/span&gt;&lt;/a&gt;，以及他文中提到的那些计算机行业的大神们，我深深的感觉到了自己的弱小和卑微，无知和肤浅，有一种大学这几年都白白度过的感觉，自己这三年到底学了什么，为什么人与人之间的差距会这么大，虽说材料中的那些人都是人群中的佼佼者，但是没有对比就没有伤害，就不会有一种自我反省的冲动，也不会清醒地意识到自己只学了这么少的知识，以及我现在这样是否能够满足公司对于毕业生的要求。但是即使这样被打击，我还是会继续努力的，还会从事这个行业，只是会多了更多的反省。&lt;/p&gt;
&lt;h3 id=&quot;你认为与其它专业的同学相比你的优势都有哪些&quot;&gt;&lt;strong&gt;&lt;span&gt;2. 你认为与其它专业的同学相比，你的优势都有哪些？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在阅读的过程中，&lt;a href=&quot;https://coolshell.cn/articles/4561.html&quot;&gt;&lt;span&gt;这篇文章&lt;/span&gt;&lt;/a&gt;也带给了我很大的感触，建议大家去看一下。是否能在这条路上走下去，兴趣是第一大要素，只有喜爱才能投入热情，只有投入了热情才可能会做出成绩。我对于这个专业有着一定的兴趣，但是从另一个角度来说，兴趣和热情又不一定能让你走好这条路，只有自己的能力和强项才可以。从技术和专业层次上来讲，我和其他本专业能力强的同学相比有着很大的差距，所以我并没有太多的优势，这让我惭愧又忐忑，紧张又无助。但是计算机专业是一个发展过于迅速的专业，和其他专业的同学相比，我们所接触到的东西必须是紧跟着社会发展脚步的东西，社会发展越来越迅速，对于计算机行业人才的需求只会越来越大，在就业和薪资方面我们还是很有优势的。&lt;/p&gt;
&lt;h3 id=&quot;对已经不远的将来你的职涯规划是什么&quot;&gt;&lt;strong&gt;&lt;span&gt;3. 对已经不远的将来，你的职涯规划是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;转眼间已经到了大三的下半学期，距离毕业也只有一年的距离了，三年转瞬即逝，对于毕业大部分人都会从两条路中选择其一，考研和就业，而我衡量了多方面的因素决定选择前者。这其中的原因有很多，其中一个原因是我认为自身并没有太多的实力去和那些在专业方面实践能力强，造诣很深的同学相比，所以只能通过最普通的努力方法去改变我的未来。还有一个原因是我想通过再多两年的学习来确定我未来想继续研究的方面是什么，想进一步的去深入学习，为未来打下基础。目前这是最重要的事情，如果能够成功，那么希望能够找到并研究我喜欢的方向，在以后的日子里都对这方面抱有兴趣，一直坚持努力地做下去，成为计算机行业中的一员。&lt;/p&gt;
&lt;p&gt;最后送给自己也送给大家一句话：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;永远要相信旁边的人比你聪明。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;</description>
<pubDate>Fri, 16 Mar 2018 14:20:00 +0000</pubDate>
<dc:creator>明眸善睐</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/joyce4/p/8577141.html</dc:identifier>
</item>
<item>
<title>PHP/JAVA 杂谈 一（php 槽点） - zeopean</title>
<link>http://www.cnblogs.com/zeopean/p/8585633.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zeopean/p/8585633.html</guid>
<description>&lt;p&gt;【本文为个人意见，不喜就喷吧！】&lt;/p&gt;
&lt;p&gt;最近，同事问到我，『那时候为什么从PHP转成Java？』，我想了很久，且撇开主观上的原因，当初业务重构使用java确实有很多可以说道的地方。 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;槽点1：哪有最好的语言，只有最合适的语言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2017年的3月份，我所维护的业务，跑的是php，使用的是thinkphp3.2 框架。刚接手的时候，这个业务还是单机，还记得有同事笑道：『这台机厉害哈，单机一年能跑出200多万的流水来！』我当然是一笑置之。可是随着业务组扩展外部渠道，开始发展这个业务，我慢慢发现这样子的系统很难搞：难维护，难扩展，难自定义，不稳定。这样子的系统，每次改到支付功能，上线都是心虚的，就怕突然出现问题，影响用户体验。于是在一段煎熬的思索和过渡后，老大开始带着我进行重构。最开始的一套方案，是准备放弃原有的tp 框架，转而使用 yii2，但由于人手不够，老大亲自操刀，架起了一套 play1.4.3（业务端） + spring-mvc（后台管理） 的一套系统，所以，我也转到了java。&lt;/p&gt;
&lt;p&gt;我这里想说的是，一个项目选择啥语言，需要考虑团队的配置，不能上来就搞一套不切实际的东西，从实际出发，找到适合自己的语言。曾几何时，我也觉得php是世界上最好的语言，还没有之一，现在只觉得哪有最好的语言，只有最合适的语言。&lt;/p&gt;
&lt;p&gt;......&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;槽点2：面向对象编程，而不是面向数组编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也许你一定很想知道，如何才能完成从php 到 java 的转身呢？&lt;/p&gt;
&lt;p&gt;说实话，一开始的时候，确实很痛苦，基础薄弱就不说了，精神上还有压力，因为全世界都知道【你是写java的 php程序员】。举个特别糗的例子，刚刚写spring-mvc 的时候，不知道如何接收10多个参数，于是我很活该的使用了map， 我当时想啊，这不就是我们php 的 $_GET 和 $_POST 么【想当然害死人呀！】。可是写着写着我就发现不妥了，首先，别人并不知道你的map里面有啥子参数；然后，从map取出来的值不一定有值，如果是null，还要做逻辑判断，这样子代码又麻烦了。所以呀，虽然这个代码顺利上线了，也没发生过大的故障，但是我一直把这份代码当成我的【眼中钉，肉中刺】。后面我是知道了，其实用一个对象来接收这些参数，既优雅，有便于维护，可读性也好。&lt;/p&gt;
&lt;p&gt;下面，我把自己最恨的一段代码贴出来，告诫小伙伴们，【别这样子干啊】&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
   // 控制器 &lt;br/&gt;　　@RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)
    @ResponseBody
    public AjaxResponse getOrderList(@RequestParam Map&amp;lt;String, String&amp;gt; searchMap) {
        return orderService.getListsData(searchMap);
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;57&quot;&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
　// 恶心的逻辑
&lt;/pre&gt;
&lt;pre class=&quot;brush:java;collapse:true;;gutter:true;&quot;&gt;
  /**
     * 解析搜索关键词, 组装matches
     *
     * @param matches
     * @param searchKey
     * @param searchVal
     * @return
     */
    public Matches getMatchesBySearchMapEntry(Matches matches, String searchKey, String searchVal) {
        switch (searchKey) {
            
            case Properties.tradeType:
                if (Integer.parseInt(searchVal) &amp;gt; 0) {
                    matches.eq(Columns.tradeType, searchVal);
                }
                break;
            case Properties.state:
                int state = Integer.parseInt(searchVal);
                if (state == 4) {
                    matches.match(&quot;complete_status&quot;, 1);    // 表示已完成
                } else if (state == 3) {
                    matches.match(&quot;order_status&quot;, 0);   // 0 表示已下单
                } else if (state == 1) {
                    matches.match(&quot;order_status&quot;, 1);   // 1 表示已支付
                } else if (state == 2) {
                    matches.match(&quot;order_status&quot;, 2);   // 2 表示已退款
                }
                break;
            case Properties.channelId:
                
                List&amp;lt;Long&amp;gt; belongIds = accountService.getChannelIdBelongThisUser(HttpSessionUtils.getUseAccountId());
                if (belongIds == null) {
                    if (GeneralUtil.isObjNotZero(searchVal)) {
                        matches.match(&quot;channel_id&quot;, searchVal); 
                    }
                } else if (belongIds.size() &amp;gt; 0) {
                    Long id = Long.parseLong(searchVal);
                    if (belongIds.contains(id)) {
                        matches.match(&quot;channel_id&quot;, id); 
                    } else {
                        matches.match(&quot;channel_id&quot;, belongIds);
                    }
                }
                break;
            case Properties.cepingId:
                if (GeneralUtil.isObjNotZero(searchVal)) {
                    
                    List&amp;lt;Long&amp;gt; cepingIds = scalePoolDao.findIdsByParentId(Long.parseLong(searchVal));
                    matches.match(&quot;ceping_id&quot;, cepingIds); 

                }
                break;
            case Properties.orderNo:
                matches.match(&quot;order_no&quot;, searchVal);   
                break;
            case Properties.openId:
                String userKey = userDao.getUserKeyByOpenidAndUserType(searchVal, 1); 
                matches.match(&quot;user_key&quot;, userKey);
                break;
            case Properties.userKey:
                matches.match(&quot;user_key&quot;, searchVal);
                break;
            case Properties.createStartTime: // 下单时间
                Date createStartTime = DateTimeHelper.timeFormatStringToDate(searchVal);
                matches.gte(&quot;create_time&quot;, createStartTime);
                break;
            case Properties.createEndTime:
                Date createEndTime = DateTimeHelper.timeFormatStringToDate(searchVal);
                matches.lte(&quot;create_time&quot;, createEndTime);
                break;
            case Properties.payStartTime:    // 支付时间
                Date payStartTime = DateTimeHelper.timeFormatStringToDate(searchVal);
                matches.gte(&quot;pay_time&quot;, payStartTime);
                break;
            case Properties.payEndTime:
                Date payEndTime = DateTimeHelper.timeFormatStringToDate(searchVal);
                matches.lte(&quot;pay_time&quot;, payEndTime);
                break;
            case Properties.userType:
                int userType = Integer.parseInt(searchVal);
                if (userType &amp;gt; 0) {
                    matches.eq(Columns.userType, searchVal);
                }
                break;
            case Properties.buyType:
                int buyType = Integer.valueOf(searchVal);
                if (buyType &amp;gt; 0) {
                    if (buyType == BuyType.DEFAULT_COPY_ORDER.getCode()) { 
                        buyType = 0;
                    }
                    matches.eq(Columns.buyType, buyType);
                }

                break;

        }
        return matches;
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我现在用又臭又长来形容，这样子的code 既不方便阅读，出问题了也不好排查。而且这个代码，我还是放在个循环中来拼接的，可读性之烂可想而知。唉，要是我如果有时间了，就把这段代码改了。&lt;/p&gt;

&lt;p&gt;其实呢，说了这么多，我就想说，包括我在内的部分 phper额，太过分依赖数组了。是啊，在php里面，没有啥是一个数组搞不定的，如果有，那就俩个。我走心看了下其它业务线的php代码，哎哟喂，好家伙。推送服务配置用数组，微信公众号配置用数组，接受请求用数组，传参用数组（个人最不喜欢的方式），好像数组少些，项目就不能正常运行了。&lt;/p&gt;
&lt;p&gt;我并不是说不该用数组，但是数组确实不好维护。当我们思绪乱的时候，你根本记不清这个数组中有哪些参数，你也可能想不起这个return的对象有哪些对象，特别是return json的时候，如果一个数组不存在，这时候返回了null，这样子返回的接口数据，对客户端的同学来说就是一种灾难。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;槽点3：一包不扫，何以扫天下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除此之外，也是我最想吐槽的一点，就是php的命名空间和包管理。虽然php现在也有了composer，但是部分包载入时，还是需要做一下手动处理的，如果是一些小白的话，那久很尴尬了。相对于php呢，java就很成熟了，maven 一出，问题基本就解决了。而php的命名空间呢，我最不爽的一点是，明明一个包没关联上，项目居然还若无其事的走着，之前没觉得咋样，写java后就觉得，这样子特别不严谨，对于我这样的强迫症者来说，不能接受！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/631777/201803/631777-20180316210710618-184990006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;还有就是，需要手动载入 扩展，关于这点，php做的不够好 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/631777/201803/631777-20180316211054392-383641902.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;槽点4：定时任务 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 此外呢，php有一点做的不够好的，定时任务！（且不说用swoole做定时任务哈，毕竟swoole还是需要点学习成本的呢！）&lt;/p&gt;
&lt;p&gt;之前我很少用php做定时任务，如果要做的话，就要依赖linux系统crontab，或者用swoole 了。&lt;/p&gt;
&lt;p&gt;但是在java里面，完全不是这样子的体验，在play 或者 spring-mvc ,完全就是一个job 就搞定了，哪里要这般麻烦！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;槽点 5：必不可少的单元测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后呢，php 在单元测试方面比java 差挺多的。这里我不否认有idea 的功能，但是想要用phpunit 测试一个方法，我感觉千难万难，但是在java里，很容易就实现了！除此之外，包括我在内的部分phper，很少写单元测试，甚至有些压根就不知道这是咋回事！我觉得这是个可怕的现象，这样子的代码，连自己这关都没过，如何敢上线，如何能稳呢！基本上走过单元测试的代码，基本不存在啥语法错误，这就是妥妥的保障啊！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/631777/201803/631777-20180316211937391-199350752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;槽点6：你debug都不用，就不要假装在搬砖了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来， 包括我在内的部分phper 呢，很少去debug，有些甚至从来没这么搞过。在那段维护 thinkphp的时间了，我开始使用phpstrom的debug，说实话，代码质量，开发效率都有很大的提升！我实在不能再接受自己用 echo， var_dump 这样子去调试代码，这样子会让人觉得，这是个门外汉呢！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;槽点7：php是世界上最好的语言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请放下这个想法，你会发现，无论是python，golang，java 都不比咱php差，你不知，只因你未接触！&lt;/p&gt;

&lt;p&gt;好了，就到这里吧，接下来还会有一篇吐槽java的。&lt;/p&gt;

</description>
<pubDate>Fri, 16 Mar 2018 13:35:00 +0000</pubDate>
<dc:creator>zeopean</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zeopean/p/8585633.html</dc:identifier>
</item>
<item>
<title>【MyBatis】MyBatis自动生成代码查询之爬坑记 - leesf</title>
<link>http://www.cnblogs.com/leesf456/p/8585401.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leesf456/p/8585401.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;项目使用SSM框架搭建Web后台服务，前台后使用&lt;code&gt;restful api&lt;/code&gt;，后台使用MyBatisGenerator自动生成代码，在前台使用关键字进行查询时，遇到了一些很宝贵的坑，现记录如下。为展示所遇问题，将项目进行了精简。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目框架&quot;&gt;项目框架&lt;/h2&gt;
&lt;h3 id=&quot;后台框架&quot;&gt;后台框架&lt;/h3&gt;
&lt;p&gt;后台框架选型为&lt;code&gt;Spring + SpringMVC + Mybatis + Jetty&lt;/code&gt;，其中使用&lt;code&gt;MyBatisGenerator&lt;/code&gt;创建代码，&lt;code&gt;Jetty&lt;/code&gt;为内嵌的Web服务器。&lt;/p&gt;
&lt;h3 id=&quot;项目代码&quot;&gt;项目代码&lt;/h3&gt;
&lt;p&gt;代码已上传至&lt;a href=&quot;https://github.com/leesf/ssm&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;项目介绍&quot;&gt;项目介绍&lt;/h3&gt;
&lt;h4 id=&quot;数据准备&quot;&gt;数据准备&lt;/h4&gt;
&lt;p&gt;创建库&lt;code&gt;ssm&lt;/code&gt;和表&lt;code&gt;users&lt;/code&gt;，其中创建表&lt;code&gt;users&lt;/code&gt;的&lt;code&gt;SQL&lt;/code&gt;如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; `users` (
  `id` &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
  `name` &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  `address` &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  `hobby` &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  `content` text,
  &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (`id`)
) ENGINE=InnoDB &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; CHARSET=latin1

&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; users(name, address, hobby, content) &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;ot&quot;&gt;&quot;leesf&quot;&lt;/span&gt;, &lt;span class=&quot;ot&quot;&gt;&quot;hubei&quot;&lt;/span&gt;, &lt;span class=&quot;ot&quot;&gt;&quot;sport, race&quot;&lt;/span&gt;, &lt;span class=&quot;ot&quot;&gt;&quot;he is a boy&quot;&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; users(name, address, hobby, content) &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;ot&quot;&gt;&quot;dyd&quot;&lt;/span&gt;, &lt;span class=&quot;ot&quot;&gt;&quot;hubei&quot;&lt;/span&gt;, &lt;span class=&quot;ot&quot;&gt;&quot;painting, reading&quot;&lt;/span&gt;, &lt;span class=&quot;ot&quot;&gt;&quot;she is a girl&quot;&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;自动生成代码框架&quot;&gt;自动生成代码框架&lt;/h4&gt;
&lt;p&gt;使用MyBatisGenerator自动生成相应代码，其源码如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package com.leesf;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.junit.Test;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.mybatis.generator.api.MyBatisGenerator;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.mybatis.generator.config.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.mybatis.generator.config.xml.ConfigurationParser;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.mybatis.generator.internal.DefaultShellCallback;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.io.File;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.ArrayList;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; MybatisGenerator {
  &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;generator&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
    List&amp;lt;String&amp;gt; warnings = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();
    File configFile = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; File(
        &lt;span class=&quot;st&quot;&gt;&quot;F:/01_Code/01_Idea/ssm-master/src/test/generatorConfig.xml&quot;&lt;/span&gt;);
    ConfigurationParser cp = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ConfigurationParser&lt;/span&gt;(warnings);
    Configuration config = cp.&lt;span class=&quot;fu&quot;&gt;parseConfiguration&lt;/span&gt;(configFile);
    DefaultShellCallback callback = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DefaultShellCallback&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
    MyBatisGenerator myBatisGenerator =
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MyBatisGenerator&lt;/span&gt;(config, callback, warnings);
    myBatisGenerator.&lt;span class=&quot;fu&quot;&gt;generate&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;);
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中generatorConfig.xml文件如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;generatorConfiguration
        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;generatorConfiguration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- &amp;lt;context&amp;gt; 元素用于指定生成一组对象的环境。 子元素用于指定要连接到的数据库、 要生成对象的类型和要内省的表 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;context&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;testTables&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; targetRuntime=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;MyBatis3&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;commentGenerator&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;suppressAllComments&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/commentGenerator&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;jdbcConnection&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; driverClass=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        connectionURL=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jdbc:mysql://localhost:3306/ssm?useUnicode=true&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;&amp;amp;amp;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;characterEncoding=UTF-8&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        userId=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;root&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        password=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/jdbcConnection&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            NUMERIC 类型解析为java.math.BigDecimal --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;javaTypeResolver&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;forceBigDecimals&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/javaTypeResolver&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- targetProject:生成PO类的位置&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;         注意对于targetProject：In other environments（other than Eclipse）,&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;         this value should be an existing directory on the local file system.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;         即对于非eclipse项目需要指定绝对路径&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;         --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;javaModelGenerator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; targetPackage=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.leesf.po&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                            targetProject=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;F:/01_Code/01_Idea/ssm-master/src/main/java&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;enableSubPackages&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 从数据库返回的值被清理前后的空格 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;trimStrings&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/javaModelGenerator&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- targetProject:mapper映射文件生成的位置 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;sqlMapGenerator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; targetPackage=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.leesf.mapper&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                         targetProject=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;F:/01_Code/01_Idea/ssm-master/src/main/java&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;enableSubPackages&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/sqlMapGenerator&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- targetPackage：mapper接口生成的位置 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;javaClientGenerator&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;XMLMAPPER&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                             targetPackage=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.leesf.mapper&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                             targetProject=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;F:/01_Code/01_Idea/ssm-master/src/main/java&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;enableSubPackages&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/javaClientGenerator&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 指定数据库表 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;table&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; tableName=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- &amp;lt;table schema=&quot;&quot; tableName=&quot;sys_user&quot;&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        &amp;lt;table schema=&quot;&quot; tableName=&quot;sys_role&quot;&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        &amp;lt;table schema=&quot;&quot; tableName=&quot;sys_permission&quot;&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        &amp;lt;table schema=&quot;&quot; tableName=&quot;sys_user_role&quot;&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        &amp;lt;table schema=&quot;&quot; tableName=&quot;sys_role_permission&quot;&amp;gt;&amp;lt;/table&amp;gt; --&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 有些表的字段需要指定java类型&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;         &amp;lt;table schema=&quot;&quot; tableName=&quot;&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;            &amp;lt;columnOverride column=&quot;&quot; javaType=&quot;&quot; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;        &amp;lt;/table&amp;gt; --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/generatorConfiguration&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;webserver&quot;&gt;WebServer&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;WebServer&lt;/code&gt;为Web容器，其源码如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package com.leesf.main;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.net.UnknownHostException;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.concurrent.ArrayBlockingQueue;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.concurrent.TimeUnit;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.apache.commons.lang3.StringUtils;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.eclipse.jetty.server.Connector;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.eclipse.jetty.server.Server;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.eclipse.jetty.server.nio.SelectChannelConnector;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.eclipse.jetty.util.thread.ExecutorThreadPool;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.eclipse.jetty.webapp.WebAppContext;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.Logger;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.LoggerFactory;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; WebServer {
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String CONTEXT = &lt;span class=&quot;st&quot;&gt;&quot;/&quot;&lt;/span&gt;;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Logger LOG = LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(WebServer.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String DEFAULT_WEBAPP_PATH = &lt;span class=&quot;st&quot;&gt;&quot;webapps/&quot;&lt;/span&gt;;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Server server;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; port;

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;WebServer&lt;/span&gt;() {
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Server &lt;span class=&quot;fu&quot;&gt;createServerInSource&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; UnknownHostException {
    port = &lt;span class=&quot;dv&quot;&gt;8081&lt;/span&gt;;
    server = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Server&lt;/span&gt;();
    server.&lt;span class=&quot;fu&quot;&gt;setStopAtShutdown&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
    SelectChannelConnector connector = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SelectChannelConnector&lt;/span&gt;();
    connector.&lt;span class=&quot;fu&quot;&gt;setPort&lt;/span&gt;(port);
    connector.&lt;span class=&quot;fu&quot;&gt;setReuseAddress&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);

    connector.&lt;span class=&quot;fu&quot;&gt;setAcceptQueueSize&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;);
    connector.&lt;span class=&quot;fu&quot;&gt;setAcceptors&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);
    connector.&lt;span class=&quot;fu&quot;&gt;setThreadPool&lt;/span&gt;(
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ExecutorThreadPool&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;,
            &lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, TimeUnit.&lt;span class=&quot;fu&quot;&gt;SECONDS&lt;/span&gt;,
            &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayBlockingQueue&amp;lt;Runnable&amp;gt;(
                &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)));
    connector.&lt;span class=&quot;fu&quot;&gt;setLowResourcesMaxIdleTime&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3000&lt;/span&gt;);

    connector.&lt;span class=&quot;fu&quot;&gt;setReuseAddress&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
    connector.&lt;span class=&quot;fu&quot;&gt;setRequestBufferSize&lt;/span&gt;(
        &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt; * &lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;);
    connector.&lt;span class=&quot;fu&quot;&gt;setRequestHeaderSize&lt;/span&gt;(
        &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt; * &lt;span class=&quot;dv&quot;&gt;1024&lt;/span&gt;);

    server.&lt;span class=&quot;fu&quot;&gt;setConnectors&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Connector[] { connector });

    String basePath = &lt;span class=&quot;st&quot;&gt;&quot;src/main/webapps&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;(basePath)) {
      basePath = DEFAULT_WEBAPP_PATH;
    }
    WebAppContext webContext = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;WebAppContext&lt;/span&gt;(basePath, CONTEXT);
    webContext.&lt;span class=&quot;fu&quot;&gt;setContextPath&lt;/span&gt;(CONTEXT);
    webContext.&lt;span class=&quot;fu&quot;&gt;setDescriptor&lt;/span&gt;(basePath + &lt;span class=&quot;st&quot;&gt;&quot;/WEB-INF/web.xml&quot;&lt;/span&gt;);
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;-------------web.xml path is &quot;&lt;/span&gt; + webContext.&lt;span class=&quot;fu&quot;&gt;getDescriptor&lt;/span&gt;()
        + &lt;span class=&quot;st&quot;&gt;&quot;--------------&quot;&lt;/span&gt;);
    webContext.&lt;span class=&quot;fu&quot;&gt;setResourceBase&lt;/span&gt;(basePath);
    webContext.&lt;span class=&quot;fu&quot;&gt;setClassLoader&lt;/span&gt;(Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getContextClassLoader&lt;/span&gt;());
    server.&lt;span class=&quot;fu&quot;&gt;setHandler&lt;/span&gt;(webContext);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; server;
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (server == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;fu&quot;&gt;createServerInSource&lt;/span&gt;();
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (server != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
      server.&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;();
      LOG.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;WebServer has started at port:&quot;&lt;/span&gt; + port);
    }
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;stop&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (server != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
      server.&lt;span class=&quot;fu&quot;&gt;stop&lt;/span&gt;();
    }
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
    WebServer webServer = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;WebServer&lt;/span&gt;();
    webServer.&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;();
  }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用内嵌&lt;code&gt;Jetty&lt;/code&gt;方式提供Web服务，只做演示，其中参数并未进行调优处理。&lt;/p&gt;
&lt;h4 id=&quot;controller&quot;&gt;Controller&lt;/h4&gt;
&lt;p&gt;只存在&lt;code&gt;UserController&lt;/code&gt;，其源码如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package com.leesf.controller;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import com.leesf.po.Users;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.leesf.service.UserService;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.leesf.utils.ResultUtils;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Controller;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestMethod;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.RequestParam;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.web.bind.annotation.ResponseBody;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import javax.servlet.http.HttpServletRequest;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import javax.servlet.http.HttpServletResponse;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.io.OutputStreamWriter;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Controller&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/users&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserController {
  &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt; UserService userService;

  &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;st&quot;&gt;&quot;/listUsers&quot;&lt;/span&gt;, method = {
      RequestMethod.&lt;span class=&quot;fu&quot;&gt;POST&lt;/span&gt;, RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt; }) &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;listUsers&lt;/span&gt;(
      HttpServletRequest request, HttpServletResponse response,
      &lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt;(required = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;) String name,
      &lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt;(required = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;) String key) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Exception {
    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;xxxxxx&quot;&lt;/span&gt;);
    OutputStreamWriter out = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; OutputStreamWriter(response.&lt;span class=&quot;fu&quot;&gt;getOutputStream&lt;/span&gt;());
    List&amp;lt;Users&amp;gt; users = userService.&lt;span class=&quot;fu&quot;&gt;getUsers&lt;/span&gt;(name, key);
    ResultUtils.&lt;span class=&quot;fu&quot;&gt;resultSuccess&lt;/span&gt;(users, out);
  }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以根据用户名字和关键字查询用户。&lt;/p&gt;
&lt;h4 id=&quot;service&quot;&gt;Service&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;UserServiceImp&lt;/code&gt;为&lt;code&gt;UserService&lt;/code&gt;的实现类。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;根据用户名查询指定记录&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;其源码如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package com.leesf.service.impl;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import com.leesf.mapper.UsersMapper;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.leesf.po.Users;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.leesf.po.UsersExample;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.leesf.service.UserService;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.apache.commons.lang3.StringUtils;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.Logger;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.LoggerFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Service;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.HashMap;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Map;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Service&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;userService&quot;&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserServiceImp &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; UserService {
  &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt; UsersMapper usersMapper;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Logger LOG = LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;());

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Users&amp;gt; &lt;span class=&quot;fu&quot;&gt;getUsers&lt;/span&gt;(String name, String key) {
    UsersExample usersExample = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UsersExample&lt;/span&gt;();

    usersExample.&lt;span class=&quot;fu&quot;&gt;createCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;andNameLike&lt;/span&gt;(name);

    List&amp;lt;Users&amp;gt; users = usersMapper.&lt;span class=&quot;fu&quot;&gt;selectByExampleWithBLOBs&lt;/span&gt;(usersExample);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; users;
  }
}

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，该&lt;code&gt;Service&lt;/code&gt;根据&lt;code&gt;name&lt;/code&gt;查找匹配&lt;code&gt;name&lt;/code&gt;的记录，启动&lt;code&gt;WebServer&lt;/code&gt;，访问&lt;code&gt;http://localhost:8081/users/listUsers?name=sport&lt;/code&gt;，查看编译器运行的信息，发现构造了如下SQL语句，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select id, name, address, hobby , content from users WHERE ( name like ? )&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;url访问结果如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;
&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_code&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_msg&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Succeed!&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_content&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;leesf&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;hubei&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;hobby&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;sport, race&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;he is a boy&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;根据用户名和关键字查询指定记录&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;其源码如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package com.leesf.service.impl;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import com.leesf.mapper.UsersMapper;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.leesf.po.Users;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.leesf.po.UsersExample;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import com.leesf.service.UserService;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.apache.commons.lang3.StringUtils;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.Logger;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.slf4j.LoggerFactory;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Service;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import java.util.HashMap;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Map;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Service&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;userService&quot;&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserServiceImp &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; UserService {
  &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt; UsersMapper usersMapper;
  &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Logger LOG = LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;());

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Users&amp;gt; &lt;span class=&quot;fu&quot;&gt;getUsers&lt;/span&gt;(String name, String key) {
    UsersExample usersExample = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UsersExample&lt;/span&gt;();

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(key)) {
      usersExample.&lt;span class=&quot;fu&quot;&gt;or&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;andAddressLike&lt;/span&gt;(key);
      usersExample.&lt;span class=&quot;fu&quot;&gt;or&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;andHobbyLike&lt;/span&gt;(key);
    }

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(name)) {
      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (usersExample.&lt;span class=&quot;fu&quot;&gt;getOredCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;){
        usersExample.&lt;span class=&quot;fu&quot;&gt;createCriteria&lt;/span&gt;();
      }
      usersExample.&lt;span class=&quot;fu&quot;&gt;getOredCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;andNameEqualTo&lt;/span&gt;(name);
    }

    List&amp;lt;Users&amp;gt; users = usersMapper.&lt;span class=&quot;fu&quot;&gt;selectByExampleWithBLOBs&lt;/span&gt;(usersExample);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; users;
  }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;key&lt;/code&gt;可以匹配&lt;code&gt;address&lt;/code&gt;或者&lt;code&gt;hobby&lt;/code&gt;，而&lt;code&gt;name&lt;/code&gt;必须要匹配name，也就是希望构造这样的一条查询SQL&lt;code&gt;select * from users where (address like &quot;%sport%&quot; or hobby like &quot;%sport%&quot;) and name = &quot;leesf&quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;启动&lt;code&gt;WebServer&lt;/code&gt;，访问&lt;code&gt;http://localhost:8081/users/listUsers?key=sport&amp;amp;name=leesf&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;结果如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;
&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_code&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_msg&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Succeed!&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_content&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到访问结果中&lt;code&gt;result_content&lt;/code&gt;为空，查看运行日志，发现如下SQL语句&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
select id, name, address, hobby , content from users WHERE ( address like ? and name = ? ) or( hobby like ? ) 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程序实际构造的SQL并非之前所想的那样，此时查阅资料，发现MyBatis自动生成代码还不支持纯生的&lt;code&gt;(a or b) and c&lt;/code&gt; 这样的&lt;code&gt;SQL&lt;/code&gt;语句，需要进行等价变化，即&lt;code&gt;(a or b) and c = (a and c) or (b and c)&lt;/code&gt;，具体可查看如下&lt;a href=&quot;http://blog.csdn.net/cz_arel/article/details/9013087&quot;&gt;链接&lt;/a&gt;，按照这样的思路进行如下修改。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Users&amp;gt; &lt;span class=&quot;fu&quot;&gt;getUsers&lt;/span&gt;(String name, String key) {
    UsersExample usersExample = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UsersExample&lt;/span&gt;();

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(key)) {
      usersExample.&lt;span class=&quot;fu&quot;&gt;or&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;andAddressLike&lt;/span&gt;(key);
      usersExample.&lt;span class=&quot;fu&quot;&gt;or&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;andHobbyLike&lt;/span&gt;(key);
    }

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(name)){
      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (usersExample.&lt;span class=&quot;fu&quot;&gt;getOredCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;){
        usersExample.&lt;span class=&quot;fu&quot;&gt;createCriteria&lt;/span&gt;();
      }
      usersExample.&lt;span class=&quot;fu&quot;&gt;getOredCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;andNameEqualTo&lt;/span&gt;(name);
      usersExample.&lt;span class=&quot;fu&quot;&gt;getOredCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;andNameEqualTo&lt;/span&gt;(name);
    }

    List&amp;lt;Users&amp;gt; users = usersMapper.&lt;span class=&quot;fu&quot;&gt;selectByExampleWithBLOBs&lt;/span&gt;(usersExample);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; users;
  }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时，再次查询，发现还是没有结果，查看运行时信息发现如下&lt;code&gt;SQL&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select id, name, address, hobby , content from users WHERE ( address like ? and name = ? ) or( hobby like ? and name = ? )&lt;/code&gt;，看似&lt;code&gt;SQL&lt;/code&gt;语句没有任何问题，但是就是出不来结果，&lt;code&gt;like&lt;/code&gt;和前面也是一样的，百思不得其解，继续查阅资料也无解，后面尝试对&lt;code&gt;like&lt;/code&gt;添加&lt;code&gt;%&lt;/code&gt;处理，修改如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Users&amp;gt; &lt;span class=&quot;fu&quot;&gt;getUsers&lt;/span&gt;(String name, String key) {
    UsersExample usersExample = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UsersExample&lt;/span&gt;();

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(key)) {
      usersExample.&lt;span class=&quot;fu&quot;&gt;or&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;andAddressLike&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;%&quot;&lt;/span&gt; + key + &lt;span class=&quot;st&quot;&gt;&quot;%&quot;&lt;/span&gt;);
      usersExample.&lt;span class=&quot;fu&quot;&gt;or&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;andHobbyLike&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;%&quot;&lt;/span&gt; + key + &lt;span class=&quot;st&quot;&gt;&quot;%&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(name)) {
      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (usersExample.&lt;span class=&quot;fu&quot;&gt;getOredCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;){
        usersExample.&lt;span class=&quot;fu&quot;&gt;createCriteria&lt;/span&gt;();
      }
      usersExample.&lt;span class=&quot;fu&quot;&gt;getOredCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;andNameEqualTo&lt;/span&gt;(name);
      usersExample.&lt;span class=&quot;fu&quot;&gt;getOredCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;andNameEqualTo&lt;/span&gt;(name);
    }

    List&amp;lt;Users&amp;gt; users = usersMapper.&lt;span class=&quot;fu&quot;&gt;selectByExampleWithBLOBs&lt;/span&gt;(usersExample);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; users;
  }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重新运行并访问url，得到如下结果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;
&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_code&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_msg&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Succeed!&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_content&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;leesf&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;hubei&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;hobby&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;sport, race&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;he is a boy&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;在配合or使用的情况下，like必须显示添加%&lt;/strong&gt;才能生效，虽然按照这种等价的方式可以进行处理，还是有些麻烦，特别是当or字段非常多的时候，处理比较麻烦，如&lt;code&gt;(a or b or c or d) and e&lt;/code&gt;，其需要处理成&lt;code&gt;(a and e) or (b and e) or (c and e) or (d and e)&lt;/code&gt;，继续查阅资料，看是否有更为简便的写法，在&lt;a href=&quot;https://stackoverflow.com/questions/26504185/mybatis-or-criteria&quot;&gt;stackoverflow&lt;/a&gt;上发现有这样的处理方式，进行如下改造。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Users&amp;gt; &lt;span class=&quot;fu&quot;&gt;getUsers&lt;/span&gt;(String name, String key) {
    UsersExample usersExample = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UsersExample&lt;/span&gt;();

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(key)) {
      Map&amp;lt;String, String&amp;gt; maps = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;();
      maps.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;address&quot;&lt;/span&gt;, key);
      maps.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;hobby&quot;&lt;/span&gt;, key);
      usersExample.&lt;span class=&quot;fu&quot;&gt;createCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;multiColumnOrLike&lt;/span&gt;(maps);
    }

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(name)) {
      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (usersExample.&lt;span class=&quot;fu&quot;&gt;getOredCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;){
        usersExample.&lt;span class=&quot;fu&quot;&gt;createCriteria&lt;/span&gt;();
      }
      usersExample.&lt;span class=&quot;fu&quot;&gt;getOredCriteria&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;andNameEqualTo&lt;/span&gt;(name);
    }

    List&amp;lt;Users&amp;gt; users = usersMapper.&lt;span class=&quot;fu&quot;&gt;selectByExampleWithBLOBs&lt;/span&gt;(usersExample);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; users;
  }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改&lt;code&gt;UserExample.java&lt;/code&gt;的&lt;code&gt;Criteria&lt;/code&gt;如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Criteria &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; GeneratedCriteria {

        &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Criteria&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;();
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Criteria &lt;span class=&quot;fu&quot;&gt;multiColumnOrLike&lt;/span&gt;(Map&amp;lt;String, String&amp;gt; maps) {
            StringBuffer stringBuffer = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; StringBuffer();
            stringBuffer.&lt;span class=&quot;fu&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;( &quot;&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Map.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;String, String&amp;gt; entry : maps.&lt;span class=&quot;fu&quot;&gt;entrySet&lt;/span&gt;()) {
                stringBuffer.&lt;span class=&quot;fu&quot;&gt;append&lt;/span&gt;(entry.&lt;span class=&quot;fu&quot;&gt;getKey&lt;/span&gt;());
                stringBuffer.&lt;span class=&quot;fu&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot; like &quot;&lt;/span&gt;);
                stringBuffer.&lt;span class=&quot;fu&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;%&quot;&lt;/span&gt;);
                stringBuffer.&lt;span class=&quot;fu&quot;&gt;append&lt;/span&gt;(entry.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;());
                stringBuffer.&lt;span class=&quot;fu&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;%&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;);
                stringBuffer.&lt;span class=&quot;fu&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot; or &quot;&lt;/span&gt;);
            }

            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index = stringBuffer.&lt;span class=&quot;fu&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;or&quot;&lt;/span&gt;);
            stringBuffer.&lt;span class=&quot;fu&quot;&gt;delete&lt;/span&gt;(index, stringBuffer.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;());
            stringBuffer.&lt;span class=&quot;fu&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;)&quot;&lt;/span&gt;);
            &lt;span class=&quot;fu&quot;&gt;addCriterion&lt;/span&gt;(stringBuffer.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;());
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;;
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次启动运行，结果如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;
&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_code&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_msg&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Succeed!&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;er&quot;&gt;result_content&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;leesf&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;hubei&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;hobby&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;sport, race&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;er&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;he is a boy&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;可以看到使用MyBatisGenerator自动生成代码时，需要注意如下可能出现的坑。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当进行(a or b) and c查询时，可通过转变为(a and c) or (b and c)方式进行查询，但个人认为更好的方法是修改Example文件，进行定制化的查询处理。&lt;/li&gt;
&lt;li&gt;单独使用andxxxLike时，不需要添加&quot;%&quot;处理，而配合&lt;code&gt;or&lt;/code&gt;时，必须添加&quot;%&quot;才行。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 16 Mar 2018 13:13:00 +0000</pubDate>
<dc:creator>leesf</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leesf456/p/8585401.html</dc:identifier>
</item>
<item>
<title>【机器学习】正则化的线性回归 —— 岭回归与Lasso回归 - 昕-2008</title>
<link>http://www.cnblogs.com/Belter/p/8536939.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Belter/p/8536939.html</guid>
<description>&lt;p&gt;&lt;span&gt;注&lt;/span&gt;：正则化是用来防止过拟合的方法。在最开始学习机器学习的课程时，只是觉得这个方法就像某种魔法一样非常神奇的改变了模型的参数。但是一直也无法对其基本原理有一个透彻、直观的理解。直到最近再次接触到这个概念，经过一番苦思冥想后终于有了我自己的理解。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;0. 正则化（Regularization ）&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;前面使用多项式回归，如果多项式最高次项比较大，模型就容易出现过拟合。正则化是一种常见的防止过拟合的方法，一般原理是在代价函数后面加上一个对参数的约束项，这个约束项被叫做&lt;strong&gt;正则化项&lt;/strong&gt;（regularizer）。在线性回归模型中，通常有两种不同的正则化项：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;加上所有参数（不包括$\theta_0$）的绝对值之和，即$l1$范数，此时叫做Lasso回归；&lt;/li&gt;
&lt;li&gt;加上所有参数（不包括$\theta_0$）的平方和，即$l2$范数，此时叫做岭回归.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;看过不少关于正则化原理的解释，但是都没有获得一个比较直观的理解。下面用代价函数的图像以及正则化项的图像来帮助解释正则化之所以起作用的原因。&lt;/p&gt;
&lt;h4&gt;0.1 代价函数的图像&lt;/h4&gt;
&lt;p&gt;为了可视化，选择直线方程进行优化。假设一个直线方程以及代价函数如下：&lt;/p&gt;
&lt;p&gt;$\hat{h}_{\theta} = \theta_0 + \theta_1 x$，该方程只有一个特征$x$，两个参数$\theta_0$和$\theta_1$&lt;/p&gt;
&lt;p&gt;$J(\theta) = \frac{1}{m} \sum_{i=1}^{m}{(\theta_0 + \theta_1 x^{(i)} - y^{(i)})^2}$，该代价函数为均方误差函数（MSE），其中$m$表示样本量.&lt;/p&gt;
&lt;p&gt;为了保持简单，只取一个样本点$(1, 1)$代入上面的代价函数方程中，可得$J(\theta) = (\theta_0 + \theta_1 - 1)^2$. 该式是一个二元一次方程，可以在3维空间中作图（下面利用网站&lt;a href=&quot;https://www.geogebra.org/3d&quot; target=&quot;_blank&quot;&gt;GeoGebra&lt;/a&gt;画出该方程的图像）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180309212332576-1814287497.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;509&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图0-1，代入样本点$(1, 1)$后的代价函数MSE的图像&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由于多个样本点的代价函数是所有样本点代价函数之和，且不同的样本点只是相当于改变了代价函数中两个变量的参数（此时$\theta_0$和$\theta_1$是变量，样本点的取值时参数）。因此多样本的代价函数MSE的图像只会在图0-1上发生缩放和平移，而不会发生过大的形变。&lt;/p&gt;
&lt;p&gt;对于坐标轴，表示如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用$J$轴表示蓝色轴线，上方为正向；&lt;/li&gt;
&lt;li&gt;使用$\theta_1$表示红色轴线，左边为正向；&lt;/li&gt;
&lt;li&gt;使用$\theta_0$表示绿色轴线，指向屏幕外的方向为正向.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;此时的函数图像相当于一条抛物线沿着平面$J = 0$上直线$theta_0 = - \theta_1$平移后形成的图像。&lt;/p&gt;
&lt;h4&gt;0.2 正则化项的图像&lt;/h4&gt;
&lt;p&gt;这里使用$L1$范数作为正则化项，加上正则化项之后MSE代价函数变成：&lt;/p&gt;
&lt;p&gt;$J(\theta) = \frac{1}{m} \sum_{i=1}^{m}{(\theta_0 + \theta_1 x^{(i)} - y^{(i)})^2}  + \lambda ||\theta_1||_1$,&lt;/p&gt;
&lt;p&gt;上式中$\lambda$是正则化项的参数，为了简化取$\lambda = 1$。由于正则化项中始终不包含截距项$\theta_0$，此时的$L1$范数相当于参数$\theta_1$的绝对值，函数图像如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180309214629203-1373914476.jpg&quot; alt=&quot;&quot; width=&quot;637&quot; height=&quot;349&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图0-2，$L1$正则化项的图像&lt;/p&gt;
&lt;p&gt;此时的函数图像相当于一张对折后，半张开的纸。纸的折痕与平面$J = 0$上$\theta_0$轴重叠。&lt;/p&gt;
&lt;h4&gt;0.3 代价函数与正则化项图像的叠加&lt;/h4&gt;
&lt;p&gt;直接将这两个图像放在一起的样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180309215318513-1488834569.jpg&quot; alt=&quot;&quot; width=&quot;705&quot; height=&quot;427&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图0-3，同时显示代价函数与正则化项的图像&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;将两个方程相加之后，即$J(\theta) = (\theta_0 + \theta_1 - 1)^2 + |\theta_1|$，做图可以得到下面的图像：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180309215754079-894932428.jpg&quot; alt=&quot;&quot; width=&quot;648&quot; height=&quot;423&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图0-4，加入正则化项之后代价函数的图像&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此时的图像，就像是一个圆锥体被捏扁了之后，立在坐标原点上。观察添加正则化项前面的图像，我们会发现：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;加上正则化项之后，此时损失函数就分成了两部分：第1项为原来的MSE函数，第2项为正则化项，&lt;strong&gt;最终的结果是这两部分的线性组合&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;在第1项的值非常小但在第2项的值非常大的区域，这些值会受到正则化项的巨大影响，从而使得这些区域的值变的与正则化项近似：例如原来的损失函数沿$\theta_0 = -\theta_1$，$J$轴方向上的值始终为0，但是加入正则化项$J = |\theta_1|$后，该直线上原来为0的点，都变成了$\theta_1$的绝对值。这就像加权平均值一样，哪一项的权重越大，对最终结果产生的影响也越大;&lt;/li&gt;
&lt;li&gt;如果想象一种非常极端的情况：在参数的整个定义域上，第2项的取值都远远大于第一项的取值，那么最终的损失函数几乎100%都会由第2项决定，也就是整个代价函数的图像会非常类似于$J=|\theta_1|$（图0-2）而不是原来的MSE函数的图像（图0-1）。这时候就相当于$\lambda$的取值过大的情况，最终的全局最优解将会是坐标原点，这就是为什么在这种情况下最终得到的解全都为0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span&gt;1. 岭回归&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;岭回归与多项式回归唯一的不同在于代价函数上的差别。岭回归的代价函数如下：&lt;/p&gt;
&lt;p&gt;$$J(\theta) = \frac{1}{m} \sum_{i=1}^{m}{(y^{(i)} - (w x^{(i)} + b))^2}  + \lambda ||w||_2^2 = MSE(\theta) + \lambda \sum_{i = 1}^{n}{\theta_i^2} \ \quad \cdots \ (1 - 1)$$&lt;/p&gt;
&lt;p&gt;为了方便计算导数，通常也写成下面的形式：&lt;/p&gt;
&lt;p&gt;$$J(\theta) = \frac{1}{2m} \sum_{i=1}^{m}{(y^{(i)} - (w x^{(i)} + b))^2}  + \frac{\lambda}{2} ||w||_2^2 = \frac{1}{2}MSE(\theta) + \frac{\lambda}{2} \sum_{i = 1}^{n}{\theta_i^2} \ \quad \cdots \ (1 - 2)$$&lt;/p&gt;
&lt;p&gt;上式中的$w$是长度为$n$的向量，不包括截距项的系数$\theta_0$, $\theta$是长度为$n + 1$的向量，包括截距项的系数$\theta_0$，$m$为样本数，$n$为特征数.&lt;/p&gt;

&lt;p&gt;岭回归的代价函数仍然是一个凸函数，因此可以利用梯度等于0的方式求得全局最优解（正规方程）：&lt;/p&gt;
&lt;p&gt;$$\theta = (X^T X + \lambda I)^{-1}(X^T y)$$&lt;/p&gt;
&lt;p&gt;上述正规方程与一般线性回归的正规方程相比，多了一项$\lambda I$，其中$I$表示单位矩阵。假如$X^T X$是一个奇异矩阵（不满秩），添加这一项后可以保证该项可逆。由于单位矩阵的形状是对角线上为1其他地方都为0，看起来像一条山岭，因此而得名。&lt;/p&gt;

&lt;p&gt;除了上述正规方程之外，还可以使用梯度下降的方式求解（求梯度的过程可以参考&lt;a href=&quot;http://www.cnblogs.com/Belter/p/8487002.html&quot; target=&quot;_blank&quot;&gt;一般线性回归&lt;/a&gt;，3.2.2节）。这里采用式子$1 - 2$来求导：&lt;/p&gt;
&lt;p&gt;$$\nabla_{\theta} J(\theta) = \frac{1}{m} X^T \cdot (X \cdot \theta - y)  + \lambda w \ \quad \cdots \ (1 - 3) $$&lt;/p&gt;
&lt;p&gt;因为式子$1- 2$中和式第二项不包含$\theta_0$，因此求梯度后，上式第二项中的$w$本来也不包含$\theta_0$。为了计算方便，添加$\theta_0 = 0$到$w$.&lt;/p&gt;
&lt;p&gt;因此在梯度下降的过程中，参数的更新可以表示成下面的公式：&lt;/p&gt;
&lt;p&gt;$$\theta = \theta - (\frac{\alpha}{m} X^T \cdot (X \cdot \theta - y)  + \lambda w) \ \quad \cdots \ (1 - 4) $$&lt;/p&gt;
&lt;p&gt;其中$\alpha$为学习率，$\lambda$为正则化项的参数&lt;/p&gt;
&lt;h4&gt;1.1 数据以及相关函数&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; PolynomialFeatures
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sklearn.metrics &lt;span&gt;import&lt;/span&gt;&lt;span&gt; mean_squared_error
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; data = np.array([[ -2.95507616,  10.94533252&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;        [ -0.44226119,   2.96705822&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;        [ -2.13294087,   6.57336839&lt;span&gt;],
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;        [  1.84990823,   5.44244467&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;        [  0.35139795,   2.83533936&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;        [ -1.77443098,   5.6800407&lt;span&gt; ],
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;        [ -1.8657203 ,   6.34470814&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;        [  1.61526823,   4.77833358&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;        [ -2.38043687,   8.51887713&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;        [ -1.40513866,   4.18262786&lt;span&gt;]])
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; m = data.shape[0]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 样本大小&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; X = data[:, 0].reshape(-1, 1)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将array转换成矩阵&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; y = data[:, 1].reshape(-1, 1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;继续使用多项式回归中的数据。&lt;/p&gt;
&lt;h4&gt;1.2 岭回归的手动实现&lt;/h4&gt;
&lt;p&gt; 有了上面的理论基础，就可以自己实现岭回归了，下面是Python代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 代价函数&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; L_theta(theta, X_x0, y, lamb):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    lamb: lambda, the parameter of regularization
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    theta: (n+1)·1 matrix, contains the parameter of x0=1
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    X_x0: m·(n+1) matrix, plus x0
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     h = np.dot(X_x0, theta)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; np.dot 表示矩阵乘法&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     theta_without_t0 = theta[1&lt;span&gt;:]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     L_theta = 0.5 * mean_squared_error(h, y) + 0.5 * lamb *&lt;span&gt; np.sum(np.square(theta_without_t0))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; L_theta
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 梯度下降&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; GD(lamb, X_x0, theta, y, alpha):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    lamb: lambda, the parameter of regularization
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    alpha: learning rate
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    X_x0: m·(n+1), plus x0
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    theta: (n+1)·1 matrix, contains the parameter of x0=1
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(T):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         h =&lt;span&gt; np.dot(X_x0, theta) 
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         theta_with_t0_0 = np.r_[np.zeros([1, 1]), theta[1:]]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; set theta[0] = 0&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         theta -= (alpha * 1/m * np.dot(X_x0.T, h - y) + lamb*(theta_with_t0_0))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; add the gradient of regularization term&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; i%50000==&lt;span&gt;0:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(L_theta(theta, X_x0, y, lamb))
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; theta
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; T = 1200000  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 迭代次数&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; degree = 11
&lt;span&gt;31&lt;/span&gt; theta = np.ones((degree + 1, 1))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 参数的初始化，degree = 11，一个12个参数&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; alpha = 0.0000000006 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 学习率&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; alpha = 0.003  # 学习率&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; lamb = 0.0001
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; lamb = 0&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; poly_features_d = PolynomialFeatures(degree=degree, include_bias=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; X_poly_d =&lt;span&gt; poly_features_d.fit_transform(X)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; X_x0 = np.c_[np.ones((m, 1)), X_poly_d]  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ADD X0 = 1 to each instance&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; theta = GD(lamb=lamb, X_x0=X_x0, theta=theta, y=y, alpha=alpha)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面第10行对应公式$1-2$，第24行对应公式$1-3$。由于自由度比较大，此时利用梯度下降的方法训练模型比较困难，学习率稍微大一点就会出现出现损失函数的值越过最低点不断增长的情况。下面是训练结束后的参数以及代价函数值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[[  1.00078848e+00]
 [ -1.03862735e-05]
 [  3.85144400e-05]
 [ -3.77233288e-05]
 [  1.28959318e-04]
 [ -1.42449160e-04]
 [  4.42760996e-04]
 [ -5.11518471e-04]
 [  1.42533716e-03]
 [ -1.40265037e-03]
 [  3.13638870e-03]
 [  1.21862016e-03]]
3.59934190413
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的结果看，截距项的参数最大，高阶项的参数都比较小。下面是比较原始数据和训练出来的模型之间的关系：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; X_plot = np.linspace(-2.99, 1.9, 1000).reshape(-1, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; poly_features_d_with_bias = PolynomialFeatures(degree=degree, include_bias=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; X_plot_poly =&lt;span&gt; poly_features_d_with_bias.fit_transform(X_plot)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; y_plot =&lt;span&gt; np.dot(X_plot_poly, theta)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; plt.plot(X_plot, y_plot, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; plt.plot(X, y, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; plt.xlabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; plt.ylabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; plt.show()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180316181532747-232403273.png&quot; alt=&quot;&quot; width=&quot;668&quot; height=&quot;445&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 图1-1，手动实现岭回归的效果&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;图中模型与原始数据的匹配度不是太好，但是过拟合的情况极大的改善了，模型变的更简单了。&lt;/p&gt;
&lt;h4&gt;1.2 正规方程&lt;/h4&gt;
&lt;p&gt;下面使用正规方程求解：&lt;/p&gt;
&lt;p&gt; 其中$\lambda = 10$&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; theta2 = np.linalg.inv(np.dot(X_x0.T, X_x0) + 10*np.identity(X_x0.shape[1&lt;span&gt;])).dot(X_x0.T).dot(y)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(theta2)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(L_theta(theta2, X_x0, y, lamb))
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; X_plot = np.linspace(-3, 2, 1000).reshape(-1, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; poly_features_d_with_bias = PolynomialFeatures(degree=degree, include_bias=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; X_plot_poly =&lt;span&gt; poly_features_d_with_bias.fit_transform(X_plot)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; y_plot =&lt;span&gt; np.dot(X_plot_poly, theta2)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; plt.plot(X_plot, y_plot, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; plt.plot(X, y, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; plt.xlabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; plt.ylabel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; plt.show()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数即代价函数的值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[[ 0.56502653]
 [-0.12459546]
 [ 0.26772443]
 [-0.15642405]
 [ 0.29249514]
 [-0.10084392]
 [ 0.22791769]
 [ 0.1648667 ]
 [-0.05686718]
 [-0.03906615]
 [-0.00111673]
 [ 0.00101724]]
0.604428719639
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从参数来看，截距项的系数减小了，1-7阶都有比较大的参数都比较大，后面更高阶项的参数越来越小，下面是函数图像：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180316182356570-1687330906.png&quot; alt=&quot;&quot; width=&quot;737&quot; height=&quot;491&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 图1-2，使用正规方程求解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看到，虽然模型的自由度没变，还是11，但是过拟合的程度得到了改善。&lt;/p&gt;
&lt;h4&gt;1.3 使用scikit-learn&lt;/h4&gt;
&lt;p&gt;scikit-learn中有专门计算岭回归的函数，而且效果要比上面的方法好。使用scikit-learn中的岭回归，只需要输入以下参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;alpha: 上面公式中的$\lambda$，正则化项的系数；&lt;/li&gt;
&lt;li&gt;solver: 求解方法；&lt;/li&gt;
&lt;li&gt;X: 训练样本；&lt;/li&gt;
&lt;li&gt;y: 训练样本的标签.&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sklearn.linear_model &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Ridge
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 代价函数&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; L_theta_new(intercept, coef, X, y, lamb):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    lamb: lambda, the parameter of regularization
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    theta: (n+1)·1 matrix, contains the parameter of x0=1
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    X_x0: m·(n+1) matrix, plus x0
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     h = np.dot(X, coef) + intercept  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; np.dot 表示矩阵乘法&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     L_theta = 0.5 * mean_squared_error(h, y) + 0.5 * lamb *&lt;span&gt; np.sum(np.square(coef))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; L_theta
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; lamb = 10
&lt;span&gt;15&lt;/span&gt; ridge_reg = Ridge(alpha=lamb, solver=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cholesky&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;ridge_reg.fit(X_poly_d, y)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(ridge_reg.intercept_, ridge_reg.coef_)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(L_theta_new(intercept=ridge_reg.intercept_, coef=ridge_reg.coef_.T, X=X_poly_d, y=y, lamb=&lt;span&gt;lamb))
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; X_plot = np.linspace(-3, 2, 1000).reshape(-1, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; X_plot_poly =&lt;span&gt; poly_features_d.fit_transform(X_plot)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; h = np.dot(X_plot_poly, ridge_reg.coef_.T) +&lt;span&gt; ridge_reg.intercept_
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; plt.plot(X_plot, h, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; plt.plot(X, y, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; plt.show()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;训练结束后得到的参数为（分别表示截距，特征的系数；代价函数的值）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[ 3.03698398] [[ -2.95619849e-02   6.09137803e-02  -4.93919290e-02   1.10593684e-01
   -4.65660197e-02   1.06387336e-01   5.14340826e-02  -2.29460359e-02
   -1.12705709e-02  -1.73925386e-05   2.79198986e-04]]
0.213877232488
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180316185122332-1720185727.png&quot; alt=&quot;&quot; width=&quot;726&quot; height=&quot;484&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图1-3，使用scikit-learn训练岭回归&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;经过与前面两种方法得到的结果比较，这里得到的曲线更加平滑，不仅降低了过拟合的风险，代价函数的值也非常低。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2. Lasso回归&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt; Lasso回归于岭回归非常相似，它们的差别在于使用了不同的正则化项。最终都实现了约束参数从而防止过拟合的效果。但是Lasso之所以重要，还有另一个原因是：Lasso能够将一些作用比较小的特征的参数训练为0，从而获得稀疏解。也就是说用这种方法，在训练模型的过程中实现了降维的目的。&lt;/p&gt;
&lt;p&gt;Lasso回归的代价函数为：&lt;/p&gt;
&lt;p&gt;$$J(\theta) = \frac{1}{2m} \sum_{i=1}^{m}{(y^{(i)} - (w x^{(i)} + b))^2}  + \lambda ||w||_1 = \frac{1}{2}MSE(\theta) + \lambda \sum_{i = 1}^{n}{|\theta_i|} \ \quad \cdots \ (2 - 1)$$&lt;/p&gt;
&lt;p&gt;上式中的$w$是长度为$n$的向量，不包括截距项的系数$θ_0$, $θ$是长度为$n+1$的向量，包括截距项的系数$θ_0$，$m$为样本数，$n$为特征数.&lt;/p&gt;
&lt;p&gt;$||w||_1$表示参数$w$的$l1$范数，也是一种表示距离的函数。加入$w$表示3维空间中的一个点$(x, y, z)$，那么$||w||_1 = |x| + |y| + |z|$，即各个方向上的绝对值（长度）之和。&lt;/p&gt;

&lt;p&gt;式子$2-1$的梯度为：&lt;/p&gt;
&lt;p&gt;$$\nabla_{\theta}MSE(\theta) + \lambda \begin{pmatrix} sign(\theta_1) \\  sign(\theta_2) \\ \vdots \\ sign(\theta_n) \end{pmatrix} \quad \cdots \ (2-2)$$&lt;/p&gt;
&lt;p&gt; 其中$sign(\theta_i)$由$\theta_i$的符号决定: $\theta_i &amp;gt; 0, sign(\theta_i) = +1; \ \theta_i = 0, sign(\theta_i) = 0; \ \theta_i &amp;lt; 0, sign(\theta_i) = -1$.&lt;/p&gt;

&lt;h4&gt;2.1 Lasso的实现&lt;/h4&gt;
&lt;p&gt;直接使用scikit-learn中的函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sklearn.linear_model &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Lasso
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; lamb = 0.025
&lt;span&gt; 4&lt;/span&gt; lasso_reg = Lasso(alpha=&lt;span&gt;lamb)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;lasso_reg.fit(X_poly_d, y)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(lasso_reg.intercept_, lasso_reg.coef_)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(L_theta_new(intercept=lasso_reg.intercept_, coef=lasso_reg.coef_.T, X=X_poly_d, y=y, lamb=&lt;span&gt;lamb))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; X_plot = np.linspace(-3, 2, 1000).reshape(-1, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; X_plot_poly =&lt;span&gt; poly_features_d.fit_transform(X_plot)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; h = np.dot(X_plot_poly, lasso_reg.coef_.T) +&lt;span&gt; lasso_reg.intercept_
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; plt.plot(X_plot, h, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; plt.plot(X, y, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; plt.show()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终获得的参数即代价函数的值为：&lt;/p&gt;
&lt;p&gt;其中计算代价函数值的函数&quot;L_theta_new&quot;需要修改其中的&quot;L_theta&quot;为&quot;&lt;span&gt;L_theta = 0.5 * mean_squared_error(h, y) + lamb * np.sum(np.abs(coef))&lt;/span&gt;&quot;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[ 2.86435179] [ -0.00000000e+00   5.29099723e-01  -3.61182017e-02   9.75614738e-02
   1.61971116e-03  -3.42711766e-03   2.78782527e-04  -1.63421713e-04
  -5.64291215e-06  -1.38933655e-05   1.02036898e-06]
&lt;/pre&gt;
&lt;pre&gt;
0.0451291096773
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从结果可以看到，截距项的值最大，一次项的系数为0，二次项的系数是剩下的所有项中值最大的，也比较符合数据的真实来源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180316193924866-1560565495.png&quot; alt=&quot;&quot; width=&quot;780&quot; height=&quot;520&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图2-1，Lasso回归得到的图像&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;图2-1是目前在$degree=11$的情况下，得到的最好模型。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3. 弹性网络（ Elastic Net）&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;弹性网络是结合了岭回归和Lasso回归，由两者加权平均所得。据介绍这种方法在特征数大于训练集样本数或有些特征之间高度相关时比Lasso更加稳定。&lt;/p&gt;
&lt;p&gt;其代价函数为：&lt;/p&gt;
&lt;p&gt;$$J(\theta) = \frac{1}{2}MSE(\theta) + r\lambda \sum_{i = 1}^{n}{|\theta_i|} + \frac{1-r}{2} \lambda \sum_{i=1}^{n} {\theta_i^2} \ \quad \cdots \ (3 - 1)$$&lt;/p&gt;
&lt;p&gt;其中$r$表示$l1$所占的比例。&lt;/p&gt;
&lt;p&gt;使用scikit-learn的实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sklearn.linear_model &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ElasticNet
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 代价函数&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; L_theta_ee(intercept, coef, X, y, lamb, r):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    lamb: lambda, the parameter of regularization
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    theta: (n+1)·1 matrix, contains the parameter of x0=1
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    X_x0: m·(n+1) matrix, plus x0
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     h = np.dot(X, coef) + intercept  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; np.dot 表示矩阵乘法&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     L_theta = 0.5 * mean_squared_error(h, y) + r * lamb * np.sum(np.abs(coef)) + 0.5 * (1-r) * lamb *&lt;span&gt; np.sum(np.square(coef))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; L_theta
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; elastic_net = ElasticNet(alpha=0.5, l1_ratio=0.8&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;elastic_net.fit(X_poly_d, y)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(elastic_net.intercept_, elastic_net.coef_)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(L_theta_ee(intercept=elastic_net.intercept_, coef=elastic_net.coef_.T, X=X_poly_d, y=y, lamb=0.1, r=0.8&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; X_plot = np.linspace(-3, 2, 1000).reshape(-1, 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; X_plot_poly =&lt;span&gt; poly_features_d.fit_transform(X_plot)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; h = np.dot(X_plot_poly, elastic_net.coef_.T) +&lt;span&gt; elastic_net.intercept_
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; plt.plot(X_plot, h, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; plt.plot(X, y, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; plt.show()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到的结果为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[ 3.31466833] [ -0.00000000e+00   0.00000000e+00  -0.00000000e+00   1.99874040e-01
  -1.21830209e-02   2.58040545e-04   3.01117857e-03  -8.54952421e-04
   4.35227606e-05  -2.84995639e-06  -8.36248799e-06]
0.0807738447192
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该方法中得到了，更多的0，当然这也跟参数的设置有关。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180316202655358-1661433071.png&quot; alt=&quot;&quot; width=&quot;818&quot; height=&quot;545&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图3-1，使用elastic-net得到的结果&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;4. 正则化项的使用以及l1与l2的比较&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;根据吴恩达老师的机器学习公开课，建议使用下面的步骤来确定$\lambda$的值：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;创建一个$\lambda$值的列表，例如$\lambda \in {0, 0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 1.28, 2.56, 5.12, 10.24}$;&lt;/li&gt;
&lt;li&gt;创建不同degree的模型（或改变其他变量）;&lt;/li&gt;
&lt;li&gt;遍历不同的模型和不同的$\lambda$值;&lt;/li&gt;
&lt;li&gt;使用学习到的参数$\theta$（包含正则化项）计算验证集上的误差（&lt;span&gt;计算误差时不包含正则化项&lt;/span&gt;），$J_{CV}(\theta)$;&lt;/li&gt;
&lt;li&gt;选择在验证集上误差最小的参数组合（degree和$\lambda$）;&lt;/li&gt;
&lt;li&gt;使用选出来的参数和$\lambda$在测试集上测试，计算$J_{test}(\theta)$.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面通过一张图像来比较一下岭回归和Lasso回归：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1035701/201803/1035701-20180316204003222-180991110.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 图4-1，Lasso与岭回归的比较（俯瞰图）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;上图中，左上方表示$l1$（图中菱形图案）和代价函数（图中深色椭圆环）；左下方表示$l2$（椭圆形线圈）和代价函数（图中深色椭圆环）。同一条线上（或同一个环上），表示对应的函数值相同；图案中心分别表示$l1, l2$范数以及代价函数的最小值位置。&lt;/p&gt;
&lt;p&gt;右边表示代价函数加上对于的正则化项之后的图像。添加正则化项之后，会影响原来的代价函数的最小值的位置，以及梯度下降时的路线（如果参数调整合适的话，最小值应该在距离原来代价函数最小值附近且与正则化项的图像相交，因为此时这两项在相互约束的情况下都取到最小值，它们的和也最小）。右上图，显示了Lasso回归中参数的变化情况，最终停留在了$\theta_2 = 0$这条线上；右下方的取值由于受到了$l2$范数的约束，也产生了位移。&lt;/p&gt;
&lt;p&gt;当正则化项的权重非常大的时候，会产生左侧黄色点标识的路线，最终所有参数都为0，但是趋近原点的方式不同。这是因为对于范数来说，原点是它们的最小值点。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt; Reference&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html&lt;/p&gt;
&lt;p&gt;Géron A. Hands-on machine learning with Scikit-Learn and TensorFlow: concepts, tools, and techniques to build intelligent systems[M]. &quot; O'Reilly Media, Inc.&quot;, 2017. &lt;a href=&quot;https://github.com/ageron/handson-ml&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;https://www.coursera.org/learn/machine-learning&lt;/p&gt;
&lt;p&gt;edx: UCSanDiegoX - DSE220x Machine Learning Fundamentals&lt;/p&gt;

</description>
<pubDate>Fri, 16 Mar 2018 13:12:00 +0000</pubDate>
<dc:creator>昕-2008</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Belter/p/8536939.html</dc:identifier>
</item>
<item>
<title>世界，你好！ - WoLykos</title>
<link>http://www.cnblogs.com/WoLykos/p/8584965.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WoLykos/p/8584965.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　“Hello World”，这大概是每个程序员最熟悉的一句话了吧。每每我们进入一种语言的世界，第一句话就是向它问好。仔细想来，也许这就是我们的一种态度，一种出于习惯的礼貌，或者说是一种出于礼貌的问候吧。“世界，你好！”。短短的一句话，意味着从那一刻起，我们便正式进入了某一种语言的世界，所以也可以说是一种庄严的仪式。我们带着满载的善意，于是我们也希望被这个世界善待。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　话有点多了，然而**还是要装的，不然和咸鱼有什么区别呢？对于Python，实话实说，我并不怎么熟悉，只是在还未目睹它的身影之前，我便陆陆续续地听到了大佬们对于它的赞美，也因此而为她披上了一层神秘的薄纱。我渴望着能够接触到她，能够有幸进入到她的世界，能够感受到她的温柔。大佬们说：Python简单而优美，如豆蔻一般。我信了，并深有同感，在我与她浅尝之后。她是如此地优雅，如此的简洁清晰，以至于让这许许多多的人为之着迷，为之疯狂。她平易近人（学习简单），而又广结善缘（应用广泛）。她的身影不单留在买橘子的那一刻，更是多次出现于知乎、豆瓣、Google、Instagram ......等等乡绅仕宦的邀请函上。然而，人怕出名猪怕壮。当Python变壮之后，不对，出名之后，也有了些许风言。有人说它速度很慢，说它只是能做做脚本。这倒是让我为它打抱不平，因为在我看来，Python也可以不那么慢，只是那些人没去尝试着真正接近它而已。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当然，我不是个好人，这点是毋庸置疑的。接近Python，我肯定有所图，有我自己的小九九。关于“能学会什么”以及“学完后做什么”这两个问题在我看来并没有太大的区别，在这里便也“混为一谈”了。我想学爬虫，方便以后做坏事QAQ，还想学运维和开发，也许某一天我也会拥有自己的一个产物QAQ，甚至是机器学习和人工智能，毕竟这名字一听就特别适合装** ......还有好多好多，我是不是有点贪了0.0。不不不，一点都不贪，有欲望才有动力嘛。所以说啊，一个人要想成功，他首先就得有欲望，至于动力嘛，睡醒再说吧ZZ&lt;sup&gt;zzz~~&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 12:32:00 +0000</pubDate>
<dc:creator>WoLykos</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/WoLykos/p/8584965.html</dc:identifier>
</item>
<item>
<title>一切“归零”的开始 - wc的一些事一些情</title>
<link>http://www.cnblogs.com/wcd144140/p/8584764.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wcd144140/p/8584764.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180316200605803-1588031627.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在所有同学都在“烦恼”Offer之间选择的时候，在我毅然选择贷款的时候，家里还是放心不下并东拼西凑地给我准备了八千块钱的“程序员培训班”费用。我当时并不十分羡慕那些在大企业之间来回穿梭的同学，因为我选择了自己的内心所选，并为此而感到十分幸运。一个混了四年IT专业连考试怎么通过都不知道的我在临近毕业之际却对自己说：“我要当一名程序员”；更加幸运地是在培训阶段即将完成并准备找工作的时候遇到了培训机构资金流问题而倒闭反赔了我们五千块的培训费用；最幸运的是在我找工作的时候让我遇到了一个从零开始的企业，给了我一个开放的平台，放飞了我技术思想上的自由，且奠定了自我认识的基础。这一切看起来是多么地幸运，但如果我穿过幸运的表层往深看，我看到了自己在短短三个月所付出的汗水不比别人在大学四年付出的少；我还看到了自己在培训机构耍流氓的时候做了多少次维权；最清晰地是我看到了自己在一个没人带领没人指导的企业承受着无比巨大的一线压力去试错和承担。我知道，幸运离不开努力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180316200624207-2139542340.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;技术上的“瓶颈”&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; 既然程序员是我的起点，那么我会借助在技术上的学习、工具上的积累以及工作上的经验等IT领域手段来协助我对人性本质的探索，因为这都是起点决定了我在起始阶段自我认知和思考的载体。技术学习的积累、框架的研发以及大并发级别的项目经验，确实让真正品尝到了技术给我带来前所未有的幸福感，技术的魅力甚至让我在两年前信誓旦旦地向老板表明在公司我只做技术不做管理的决心。其实，我当时对技术的这种“痴迷”就像彼得·德鲁克《经济人的末日》所描述的“纳粹崛起”一样，是一个源自于内心没有方向没有退路而又不能无可寄托且无可奈何的选择。人要进步，社会也要发展，短暂的“假象”始终无法逃脱它自身日益膨胀的矛盾而走向灭亡的结果。而我在一年前对《深入理解计算机系统》的停阅正是我对“假象”认知的开始，因为假象已经隐瞒不了我“瓶颈焦虑”还客观存在的现实。从我目前自身的“高度”看，假设我继续埋头于纯技术上的专研，我的发展空间在不久后将局限于“高级企业”塔尖层面的选择，从本质上看，我个人价值实现的选择性会越来越局限，更本质的是，所在平台的大小不等于社会身份以及功能层次的高低。在技术领域的几年耕耘也确实让我得到了不少人性的自我认知和满足，但同时让我逐渐清晰地看到了技术本身价值呈现的决定性因素远远不止于其技术本身，更让我意识到单一技术领域知识面的狭窄严重地限制了我个人价值提升和呈现的想象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180316200704517-1708518868.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;“ 归零 ”的挑战&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; 同一条“杠杆”，有些人可以翘起一个“地球”，但有些人却把自己屁股翘开了花也翘不了什么。为了能驾驭这条“杠杆”，我必须突破当前视野去摸索那些影响我技（qi）术（dian）积累价值最大化呈现的其它关键因素所在。从人性本质上讲，我需要去追随更高层次的满足感和幸福感，因为“幸福”是我们每一个人一生的&lt;strong&gt;“唯一命题”&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180316200742731-829474265.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;幸福是有层次之分，但如果稍加不注意，就会很容易被“低层次”幸福感所诱惑而让自己深陷“低层次”勤奋的无底黑洞，这也是我“归零”的最大挑战。“身份”的变更让我所接触发生了很大的改变，最大的考验还是思维的准确切换以及“高度”的支撑。下有程序员思维的影响，上有市场与资本的诱惑，确实让我做的每一个选择相比以前难度有了指数级别的增长。严格来说，这应该是每一个人每一时刻都存在的考验，因为&lt;strong&gt;“专注”&lt;/strong&gt;意味着自身要具备识别所有当前所遇的事与物是否在自己当前所专注范围内的能力，把一切威胁拒之门外才能确保思路的清晰。这也是为什么我会把“高度”的追求视为我毕生追求的方向。因为“高度”给了我选择的标准，赋予了我识别当前所遇事物的“好”与“坏”的能力，增加了我果断选择的“正确性”，最最最重要的还是保证了我能一直&lt;strong&gt;“Wow”&lt;/strong&gt;下去的可行性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180316200819433-1829177034.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;结束语&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; 新的开始意味着一切所遇都是新的，每一个新的触点都是一个自我思考的驱动，更多的自我思考给予了我更多的自我认知，更多的自我认知让我有了更高层次的幸福追求，更高层次的幸福追求又给了我全新的思考触点......这一切都是我自身内在“价值观”的选择，还有什么比这来得更加真实。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/758472/201803/758472-20180316200847152-1991699656.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 12:14:00 +0000</pubDate>
<dc:creator>wc的一些事一些情</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wcd144140/p/8584764.html</dc:identifier>
</item>
</channel>
</rss>