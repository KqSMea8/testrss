<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>数据分析之pandas教程------数据处理 - 逝雪</title>
<link>http://www.cnblogs.com/songfy/p/8447712.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/songfy/p/8447712.html</guid>
<description>&lt;h3 id=&quot;数据合并&quot;&gt;数据合并&lt;/h3&gt;
&lt;h4 id=&quot;实现数据库表join功能&quot;&gt;实现数据库表join功能&lt;/h4&gt;
&lt;p&gt;当我们有多张表的时候, 经常会遇到的一个问题就是, 如何把这些表关联起来, 我们可以想想我们在数据库的时候,&lt;br/&gt;进场会遇到表连接的问题, 比如join, union等等, 其实这里等同于是在pandas里实现了这些&lt;br/&gt;功能. 首先, 我们来看看这个join在pandas里是怎么实现的.&lt;/p&gt;
&lt;p&gt;我们在pandas里主要通过merge来实现数据库的join工作.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; pandas &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Series, DataFrame
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; pd
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; np

sep &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;---------------------------------------------------------------------&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data1&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;]}
data2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data2&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]}

frame1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data1)
frame2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame1)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key
0      1   a
1      2   b
2      3   c
3      4   d
4      5   e
---------------------------------------------------------------------
   data2 key
0      1   a
1      2   b
2      3   c
3    100   f
---------------------------------------------------------------------
   data1 key  data2
0      1   a      1
1      2   b      2
2      3   c      3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意, 我们默认是inner方式的连接, 对于数据库怎么做连接的, 以及连接的种类, 留作作业.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业1: 熟悉数据库连接的方式.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 左外连&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'left'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key  data2
0      1   a    1.0
1      2   b    2.0
2      3   c    3.0
3      4   d    NaN
4      5   e    NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 右外连&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'right'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key  data2
0    1.0   a      1
1    2.0   b      2
2    3.0   c      3
3    NaN   f    100&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 外连接&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'outer'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key  data2
0    1.0   a    1.0
1    2.0   b    2.0
2    3.0   c    3.0
3    4.0   d    NaN
4    5.0   e    NaN
5    NaN   f  100.0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看到, 这和我们数据库的是一模一样, 我们主要到, on可以指定要关联的列名, 但是我们可能需要关联的列名不同, 这时候我们要分别指定.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data1&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key1&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;]}
data2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data2&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key2&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]}

frame1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data1)
frame2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame1)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame2)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key1
0      1    a
1      2    b
2      3    c
3      4    d
4      5    e
---------------------------------------------------------------------
   data2 key2
0      1    a
1      2    b
2      3    c
3    100    f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果我们要在把key1和key2关联起来, 我们可以怎么做呢? 在sql中, 我们可以用on (key1 = key2), 在pandas中, 我们可以这么做:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'inner'&lt;/span&gt;, left_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key1'&lt;/span&gt;, right_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key2'&lt;/span&gt;).drop(&lt;span class=&quot;st&quot;&gt;&quot;key1&quot;&lt;/span&gt;, axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1  data2 key2
0      1      1    a
1      2      2    b
2      3      3    c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们发现一个有趣的现象:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'outer'&lt;/span&gt;, left_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key1'&lt;/span&gt;, right_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key2'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data1 key1  data2 key2
0    1.0    a    1.0    a
1    2.0    b    2.0    b
2    3.0    c    3.0    c
3    4.0    d    NaN  NaN
4    5.0    e    NaN  NaN
5    NaN  NaN  100.0    f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们发现, 这个数据就不一样了, 因为我们是外连接,会保留所有的数据.&lt;/p&gt;
&lt;p&gt;多个键做关联也是一样的, 只不过把on改成一个list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业2: 研究多个键关联.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面我们来说一个有趣的东西, 我们来看:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;]}
data2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]}

frame1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data1)
frame2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame1)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data key
0     1   a
1     2   b
2     3   c
3     4   d
4     5   e
---------------------------------------------------------------------
   data key
0     1   a
1     2   b
2     3   c
3   100   f
---------------------------------------------------------------------
   data_x key  data_y
0       1   a       1
1       2   b       2
2       3   c       3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们发现对于列名重复的列, 会自动加上一个后缀, 左边+_x, 右边+_y, 注意这个后缀, 我们是可以自己定义的.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key'&lt;/span&gt;, suffixes&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;&quot;-a&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;-b&quot;&lt;/span&gt;]))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data-a key  data-b
0       1   a       1
1       2   b       2
2       3   c       3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们的问题来了, 如果我们要关联的列, 是索引怎么办 , 这个问题有点意思, 但是merge这个函数已经为大家都设计好了,&lt;br/&gt;我们可以这样搞:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;46&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;]}
data2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]}

frame1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data1, index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;])
frame2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data2, index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;])

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame1)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, left_index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;, right_index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;))

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

frame2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(data2, index &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'4'&lt;/span&gt;])

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(frame2)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(pd.merge(frame1, frame2, left_index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;, right_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'key'&lt;/span&gt;, how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'left'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   data key
a     1   a
b     2   b
c     3   c
d     4   d
e     5   e
---------------------------------------------------------------------
   data key
a     1   a
b     2   b
c     3   c
f   100   f
---------------------------------------------------------------------
   data_x key_x  data_y key_y
a       1     a       1     a
b       2     b       2     b
c       3     c       3     c
---------------------------------------------------------------------
   data key
1     1   a
2     2   b
3     3   c
4   100   f
---------------------------------------------------------------------
  key  data_x key_x  data_y key_y
1   a       1     a     1.0     a
2   b       2     b     2.0     b
3   c       3     c     3.0     c
4   d       4     d     NaN   NaN
4   e       5     e     NaN   NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后一个例子是把frame1的index和frame2的key连接了起来, 这里我们发现, frame1的索引因为被merge掉了, frame2的索引保留了下来, 同时frame1的key被保留了下来.&lt;/p&gt;
&lt;p&gt;我们还有一个函数是join, 他也是实现了按索引关联.&lt;/p&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;data&lt;/th&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;e&lt;/th&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;data&lt;/th&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;frame1.join(frame2, lsuffix&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_x&quot;&lt;/span&gt;, rsuffix&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_y&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;data_x&lt;/th&gt;
&lt;th&gt;key_x&lt;/th&gt;
&lt;th&gt;data_y&lt;/th&gt;
&lt;th&gt;key_y&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;e&lt;/th&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们发现&lt;strong&gt;调用者的索引被保留了下来&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 参数的索引和调用者的列关联在一起&lt;/span&gt;
frame2.join(frame1, lsuffix&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_x&quot;&lt;/span&gt;, rsuffix&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;_y&quot;&lt;/span&gt;, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;key&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;data_x&lt;/th&gt;
&lt;th&gt;key_x&lt;/th&gt;
&lt;th&gt;data_y&lt;/th&gt;
&lt;th&gt;key_y&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;这里设置了on参数, 因此是&lt;strong&gt;调用者的列&lt;/strong&gt;和&lt;strong&gt;参数的索引&lt;/strong&gt;关联, 最后保留了&lt;strong&gt;调用者的索引&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&quot;实现union功能&quot;&gt;实现union功能&lt;/h4&gt;
&lt;p&gt;上面介绍的都是列关联的,也就是join, 之后我们会看怎么做union. 所谓union就是在纵向上面做连接, 我们可以看到, 这种方式, 可以两张列相同的表拼接起来.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# Series的连接&lt;/span&gt;

a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Series([&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;], index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;])
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Series([&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;], index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt; , &lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;])
c &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Series([&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;], index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;])

pd.concat([a, b, c])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;a    1
b    2
c    3
d    3
e    4
e    6
f    7
dtype: int64&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看到, 这样就把这3个Series拼接起来了, 默认是在axis=0上连接的, 但是我们也可以在axis=1上连接, 我们来看看结果怎么样.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([a, b, c], axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;e&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;f&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们看到, 这个相当于是&lt;strong&gt;这3个Series按索引做外连接&lt;/strong&gt;. 如果我们要做内连接, 怎么办呢?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([b, c], axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, join&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'inner'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果要区分从原来哪些地方合并而来的, 我们可以指定keys:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([a, b, c], keys&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'three'&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;one     a    1
        b    2
        c    3
two     d    3
        e    4
threee  e    6
        f    7
dtype: int64&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([a, b, c], axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,  keys&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'three'&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;e&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;f&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们发现, 我们的keys在axis=1连接的时候, 变成了列头.&lt;/p&gt;
&lt;p&gt;我们下面来看看如果是两个DataFrame, 会怎么样.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;f1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(np.arange(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;).reshape(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;], columns&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;])

f2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(np.arange(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;).reshape(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;), index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;,  &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;], columns&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'three'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'four'&lt;/span&gt;])

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f1)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(f2)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   one  two
a    0    1
b    2    3
c    4    5
---------------------------------------------------------------------
   three  four
c      0     1
d      2     3&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([f1, f2])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;four&lt;/th&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;这就是我们要的union效果, 我们也可以区分出来源&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([f1, f2], keys&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th/&gt;
&lt;th&gt;four&lt;/th&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th rowspan=&quot;3&quot; valign=&quot;top&quot;&gt;1&lt;/th&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th rowspan=&quot;2&quot; valign=&quot;top&quot;&gt;2&lt;/th&gt;
&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([f1, f2], keys&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;], axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th colspan=&quot;2&quot;&gt;1&lt;/th&gt;
&lt;th colspan=&quot;2&quot;&gt;2&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;th&gt;four&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;a&lt;/th&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;b&lt;/th&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;c&lt;/th&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;d&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;如果我们不想要原来的索引, 而想要重新索引, 我们可以这样来:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.concat([f1, f2], ignore_index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;four&lt;/th&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;0&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;5.0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;总结起来, concat默认就是union的功能, 但是我们可以通过设置axis=1达到按索引关联的功能.&lt;/p&gt;
&lt;h3 id=&quot;数据转换&quot;&gt;数据转换&lt;/h3&gt;
&lt;h4 id=&quot;轴旋转&quot;&gt;轴旋转&lt;/h4&gt;
&lt;p&gt;这里我们要来聊聊轴旋转的课题, 其中主要用到两个函数:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;stack&lt;/strong&gt; 将列旋转为行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unstack&lt;/strong&gt; 将行旋转为列&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(np.arange(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;).reshape(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;), columns&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pd.Index([&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;], name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;column&quot;&lt;/span&gt;), index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pd.Index([&lt;span class=&quot;st&quot;&gt;&quot;one&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;two&quot;&lt;/span&gt;], name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;index&quot;&lt;/span&gt;))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;column  a  b  c
index          
one     0  1  2
two     3  4  5&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们来stack一下, 看看会有什么结果:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.stack())

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;][&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;])
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.loc[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;][&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;])

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.stack()[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;index  column
one    a         0
       b         1
       c         2
two    a         3
       b         4
       c         5
dtype: int32
---------------------------------------------------------------------
0
0
---------------------------------------------------------------------
0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看到, 我们把每一行都变成了一列, 然后堆了起来, 变成了一个Series.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.stack().unstack())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;column  a  b  c
index          
one     0  1  2
two     3  4  5&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们来看看, 如果我们把stack后的two, c项给删了, 会怎么样呢?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data.stack()
&lt;span class=&quot;kw&quot;&gt;del&lt;/span&gt; a[&lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;]

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(a.unstack())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;column    a    b    c
index                
one     0.0  1.0  2.0
two     3.0  4.0  NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在unstack的时候, 会自动补充NaN值来对齐, 而在stack的时候, 会删除这些NaN值.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a.unstack().stack()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;index  column
one    a         0.0
       b         1.0
       c         2.0
two    a         3.0
       b         4.0
dtype: float64&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们发现, 我们在做stack还是unstack的时候, 都是从最内测的轴开始的&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; a.unstack().stack()
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(b)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(b.unstack())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;index  column
one    a         0.0
       b         1.0
       c         2.0
two    a         3.0
       b         4.0
dtype: float64
---------------------------------------------------------------------
column    a    b    c
index                
one     0.0  1.0  2.0
two     3.0  4.0  NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;确实是内侧的column转到了列上面去. 如果我们要转外侧的索引呢, 我们可以指定数字或者列名.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(b.unstack(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(b.unstack(&lt;span class=&quot;st&quot;&gt;&quot;index&quot;&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;index   one  two
column          
a       0.0  3.0
b       1.0  4.0
c       2.0  NaN
index   one  two
column          
a       0.0  3.0
b       1.0  4.0
c       2.0  NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;index&lt;/th&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;count&lt;/th&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;2.000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;mean&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;3.500000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;std&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;0.707107&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;min&lt;/th&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;td&gt;3.000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;25%&lt;/th&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;3.250000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;50%&lt;/th&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;3.500000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;75%&lt;/th&gt;
&lt;td&gt;1.5&lt;/td&gt;
&lt;td&gt;3.750000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;max&lt;/th&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;td&gt;4.000000&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;这样, 行和列就互换了.&lt;/p&gt;
&lt;p&gt;强调一下:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stack: 把行变成列. 我们可以这么理解, 把行堆到了列上.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;unstack: 把列变成行, 把列反堆到了行上.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;数据转换-1&quot;&gt;数据转换&lt;/h4&gt;
&lt;h5 id=&quot;去重&quot;&gt;去重&lt;/h5&gt;
&lt;p&gt;去除重复数据, 我们这里主要讲讲怎么能够把重复的数据进行去除&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   one  two
0    1    1
1    1    1
2    2    2
3    2    2
4    3    3&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.drop_duplicates())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   one  two
0    1    1
2    2    2
4    3    3&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;'three'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;]})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   one  three  two
0    1      5    1
1    1      6    1
2    2      7    2
3    2      8    2
4    3      9    3&lt;/code&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;three&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;count&lt;/th&gt;
&lt;td&gt;5.00000&lt;/td&gt;
&lt;td&gt;5.000000&lt;/td&gt;
&lt;td&gt;5.00000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;mean&lt;/th&gt;
&lt;td&gt;1.80000&lt;/td&gt;
&lt;td&gt;7.000000&lt;/td&gt;
&lt;td&gt;1.80000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;std&lt;/th&gt;
&lt;td&gt;0.83666&lt;/td&gt;
&lt;td&gt;1.581139&lt;/td&gt;
&lt;td&gt;0.83666&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;min&lt;/th&gt;
&lt;td&gt;1.00000&lt;/td&gt;
&lt;td&gt;5.000000&lt;/td&gt;
&lt;td&gt;1.00000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;25%&lt;/th&gt;
&lt;td&gt;1.00000&lt;/td&gt;
&lt;td&gt;6.000000&lt;/td&gt;
&lt;td&gt;1.00000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;50%&lt;/th&gt;
&lt;td&gt;2.00000&lt;/td&gt;
&lt;td&gt;7.000000&lt;/td&gt;
&lt;td&gt;2.00000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;75%&lt;/th&gt;
&lt;td&gt;2.00000&lt;/td&gt;
&lt;td&gt;8.000000&lt;/td&gt;
&lt;td&gt;2.00000&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;max&lt;/th&gt;
&lt;td&gt;3.00000&lt;/td&gt;
&lt;td&gt;9.000000&lt;/td&gt;
&lt;td&gt;3.00000&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们可以按照某一列来进行去重&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data.drop_duplicates([&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;]))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;   one  three  two
0    1      5    1
2    2      7    2
4    3      9    3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;去重默认是按照保留最先出现的一个, 我们也可以保留最后出现的一个.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业3: 去重, 保留最后出现的一个.&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;对某一列运用函数&quot;&gt;对某一列运用函数&lt;/h5&gt;
&lt;p&gt;我们之前提到过, 对于一整列或者一整行, 可以用apply函数, 对于每个元素, 可以用applymap函数, 如果我们要对某一列的&lt;/p&gt;
&lt;p&gt;每个元素进行运算, 我们可以用map函数.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;].&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;.upper)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;  one two
0   a   e
1   b   d
2   c   f
---------------------------------------------------------------------
  one two
0   A   e
1   B   d
2   C   f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果我们只想把a变成大写呢, 我们可以用传入一个map的方法.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;'e'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'f'&lt;/span&gt;]})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(sep)

data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;].&lt;span class=&quot;bu&quot;&gt;map&lt;/span&gt;({&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;  one two
0   a   e
1   b   d
2   c   f
---------------------------------------------------------------------
  one two
0   A   e
1   b   d
2   c   f&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在最后一个例子中, 我们发现要提供b和c的值, 太麻烦了, 可以用replace函数:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;
data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;].replace(&lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;  one two
0   a   e
1   b   d
2   c   f&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;重命名行和列名&quot;&gt;重命名行和列名&lt;/h5&gt;
&lt;p&gt;这里我们来谈谈怎么重命名行或者列的名字. 我们可以用rename函数来完成, 比如我们希望把列名的首字母大写等等, 这个就留作作业.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业4: 重命名行名和列名, 把首字母大写.&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;离散化&quot;&gt;离散化&lt;/h5&gt;
&lt;p&gt;这里会讲一个很有用的技能, 就是离散化, 这个在我们后面处理特征的时候是非常有用的. 离散化主要是用到cut和qcut函数.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.arange(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(a)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.cut(a, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 这个4将最大值和最小值间分成4等分&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[(-0.019, 4.75], (-0.019, 4.75], (-0.019, 4.75], (-0.019, 4.75], (-0.019, 4.75], ..., (14.25, 19.0], (14.25, 19.0], (14.25, 19.0], (14.25, 19.0], (14.25, 19.0]]
Length: 20
Categories (4, interval[float64]): [(-0.019, 4.75] &amp;lt; (4.75, 9.5] &amp;lt; (9.5, 14.25] &amp;lt; (14.25, 19.0]]&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.qcut(a, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 这个4按照个数分成四等分&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[(-0.001, 4.75], (-0.001, 4.75], (-0.001, 4.75], (-0.001, 4.75], (-0.001, 4.75], ..., (14.25, 19.0], (14.25, 19.0], (14.25, 19.0], (14.25, 19.0], (14.25, 19.0]]
Length: 20
Categories (4, interval[float64]): [(-0.001, 4.75] &amp;lt; (4.75, 9.5] &amp;lt; (9.5, 14.25] &amp;lt; (14.25, 19.0]]&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;pd.qcut(a, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;).codes &lt;span class=&quot;co&quot;&gt;#输出codes&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3], dtype=int8)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们也可以按照我们指定的分割点来, 这个留作作业.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业5: 按照自己定义的分割点来分割&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;过滤数据&quot;&gt;过滤数据&lt;/h5&gt;
&lt;p&gt;这个小节的功能类似于select中的where语句, 但是要灵活的多, 我们先来看看怎么选出绝对值大于2的行.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame(np.random.randn(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;          0         1         2         3         4         5         6  \
0 -0.064111 -1.237009  0.040219 -0.300265 -0.195558  0.018277 -0.484843   
1 -0.497673 -0.010135 -1.482219 -0.239210 -0.789893  0.593664  0.345015   
2 -1.818869  0.613175 -0.165610  0.649670 -1.364698  0.444785 -0.146202   
3 -0.274151  0.718986  0.321961 -0.416124 -0.275706 -0.738405 -0.260420   
4  1.980359 -0.429317 -0.964024 -1.474141  0.339342 -0.932012 -0.116387   
5 -0.518374 -0.224879 -1.517607 -0.079120  0.728408  1.218297  1.191882   
6 -0.508048  2.010942  1.338983  2.026203 -0.794110 -1.370830  1.364660   
7  0.855870 -0.804471  0.939610  0.796154  0.467878  0.362091 -1.892815   
8  1.059561  0.223369  1.098954  1.583732  0.865225 -0.597980 -1.853170   
9 -0.434388  0.475098 -0.103491 -0.735113  0.823425 -0.905158  0.145539   

          7         8         9  
0 -1.370281  0.112070 -0.387124  
1  0.049215  0.578946  0.462688  
2  0.085562  2.906838 -1.059603  
3 -0.327103  0.504234  0.192760  
4  0.826963  1.188256  0.590085  
5 -0.061007  1.955653 -0.984727  
6 -0.471252  1.067497  0.550022  
7 -0.503244 -0.288634  1.121110  
8 -0.650933  0.138730 -0.389139  
9 -2.078052  0.158038 -0.109184  &lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data[np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;    0         1   2         3   4   5   6         7         8   9
0 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
1 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
2 NaN       NaN NaN       NaN NaN NaN NaN       NaN  2.906838 NaN
3 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
4 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
5 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
6 NaN  2.010942 NaN  2.026203 NaN NaN NaN       NaN       NaN NaN
7 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
8 NaN       NaN NaN       NaN NaN NaN NaN       NaN       NaN NaN
9 NaN       NaN NaN       NaN NaN NaN NaN -2.078052       NaN NaN&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;完了, 居然是这幅德行&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;0&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;5&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;7&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;8&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;9&lt;/th&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们发现, false的这些地方, 都被设为NaN, 我们不想要这些false的数据, 我们只需要存在一个大于2的行, 我们看看apply函数行不行呢?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data[(np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;bu&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;lambda&lt;/span&gt; x: x.name &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; x.&lt;span class=&quot;bu&quot;&gt;sum&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;, axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;).notnull()]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;-1.818869&lt;/td&gt;
&lt;td&gt;0.613175&lt;/td&gt;
&lt;td&gt;-0.165610&lt;/td&gt;
&lt;td&gt;0.649670&lt;/td&gt;
&lt;td&gt;-1.364698&lt;/td&gt;
&lt;td&gt;0.444785&lt;/td&gt;
&lt;td&gt;-0.146202&lt;/td&gt;
&lt;td&gt;0.085562&lt;/td&gt;
&lt;td&gt;2.906838&lt;/td&gt;
&lt;td&gt;-1.059603&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;-0.508048&lt;/td&gt;
&lt;td&gt;2.010942&lt;/td&gt;
&lt;td&gt;1.338983&lt;/td&gt;
&lt;td&gt;2.026203&lt;/td&gt;
&lt;td&gt;-0.794110&lt;/td&gt;
&lt;td&gt;-1.370830&lt;/td&gt;
&lt;td&gt;1.364660&lt;/td&gt;
&lt;td&gt;-0.471252&lt;/td&gt;
&lt;td&gt;1.067497&lt;/td&gt;
&lt;td&gt;0.550022&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;9&lt;/th&gt;
&lt;td&gt;-0.434388&lt;/td&gt;
&lt;td&gt;0.475098&lt;/td&gt;
&lt;td&gt;-0.103491&lt;/td&gt;
&lt;td&gt;-0.735113&lt;/td&gt;
&lt;td&gt;0.823425&lt;/td&gt;
&lt;td&gt;-0.905158&lt;/td&gt;
&lt;td&gt;0.145539&lt;/td&gt;
&lt;td&gt;-2.078052&lt;/td&gt;
&lt;td&gt;0.158038&lt;/td&gt;
&lt;td&gt;-0.109184&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;这样看上去实在是太复杂了, 其实可以简化&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;(np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;bu&quot;&gt;any&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;0    False
1    False
2     True
3    False
4    False
5    False
6     True
7    False
8    False
9     True
dtype: bool&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data[(np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(data) &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;bu&quot;&gt;any&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)] &lt;span class=&quot;co&quot;&gt;# 有一个真就是真&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;-1.818869&lt;/td&gt;
&lt;td&gt;0.613175&lt;/td&gt;
&lt;td&gt;-0.165610&lt;/td&gt;
&lt;td&gt;0.649670&lt;/td&gt;
&lt;td&gt;-1.364698&lt;/td&gt;
&lt;td&gt;0.444785&lt;/td&gt;
&lt;td&gt;-0.146202&lt;/td&gt;
&lt;td&gt;0.085562&lt;/td&gt;
&lt;td&gt;2.906838&lt;/td&gt;
&lt;td&gt;-1.059603&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;-0.508048&lt;/td&gt;
&lt;td&gt;2.010942&lt;/td&gt;
&lt;td&gt;1.338983&lt;/td&gt;
&lt;td&gt;2.026203&lt;/td&gt;
&lt;td&gt;-0.794110&lt;/td&gt;
&lt;td&gt;-1.370830&lt;/td&gt;
&lt;td&gt;1.364660&lt;/td&gt;
&lt;td&gt;-0.471252&lt;/td&gt;
&lt;td&gt;1.067497&lt;/td&gt;
&lt;td&gt;0.550022&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;9&lt;/th&gt;
&lt;td&gt;-0.434388&lt;/td&gt;
&lt;td&gt;0.475098&lt;/td&gt;
&lt;td&gt;-0.103491&lt;/td&gt;
&lt;td&gt;-0.735113&lt;/td&gt;
&lt;td&gt;0.823425&lt;/td&gt;
&lt;td&gt;-0.905158&lt;/td&gt;
&lt;td&gt;0.145539&lt;/td&gt;
&lt;td&gt;-2.078052&lt;/td&gt;
&lt;td&gt;0.158038&lt;/td&gt;
&lt;td&gt;-0.109184&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;这里这个any(1)相当于是apply(lambda x: x.name if x.sum() &amp;gt; 0 else None, axis=1).notnull()&lt;/p&gt;
&lt;h5 id=&quot;转换为onehot表示&quot;&gt;转换为onehot表示&lt;/h5&gt;
&lt;p&gt;下面我们来提一个东西, 就是怎么将数据转换为onehot的表示.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;: np.arange(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;), &lt;span class=&quot;st&quot;&gt;'two'&lt;/span&gt;: np.arange(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)})
data.join(pd.get_dummies(pd.cut(data[&lt;span class=&quot;st&quot;&gt;'one'&lt;/span&gt;],  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;).values.codes, prefix&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;one_&quot;&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;one&lt;/th&gt;
&lt;th&gt;two&lt;/th&gt;
&lt;th&gt;one__0&lt;/th&gt;
&lt;th&gt;one__1&lt;/th&gt;
&lt;th&gt;one__2&lt;/th&gt;
&lt;th&gt;one__3&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th&gt;0&lt;/th&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;1&lt;/th&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;2&lt;/th&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;3&lt;/th&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;4&lt;/th&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;5&lt;/th&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;6&lt;/th&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;7&lt;/th&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;8&lt;/th&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;9&lt;/th&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;10&lt;/th&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;11&lt;/th&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;12&lt;/th&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;13&lt;/th&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;14&lt;/th&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;15&lt;/th&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;16&lt;/th&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;17&lt;/th&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;18&lt;/th&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;19&lt;/th&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;是不是超级简单.&lt;/p&gt;
&lt;h5 id=&quot;字符串操作&quot;&gt;字符串操作&lt;/h5&gt;
&lt;p&gt;我们来看看字符串的操作, 其实主要还是正则表达式, 我们来看一个例子:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; DataFrame({&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;:[&lt;span class=&quot;st&quot;&gt;&quot;xiaoming@sina.com&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;xiaozhang@gmail.com&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;xiaohong@qq.com&quot;&lt;/span&gt;], &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;:[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]})
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(data)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;                     a  b
0    xiaoming@sina.com  1
1  xiaozhang@gmail.com  2
2      xiaohong@qq.com  3&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vs&quot;&gt;r'([A-Z]+)@([A-Z]+)\.([A-Z]{2,4})'&lt;/span&gt;

data[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;].&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;.findall(pattern, flags&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;re.IGNORECASE).&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;0     sina
1    gmail
2       qq
Name: a, dtype: object&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们看到, 我们可以用python的正则表达式来处理字符串问题.&lt;/p&gt;
&lt;p&gt;**作业6: 熟悉python正则表达式. &lt;a href=&quot;http://www.runoob.com/python3/python3-reg-expressions.html**&quot; class=&quot;uri&quot;&gt;http://www.runoob.com/python3/python3-reg-expressions.html**&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 15:32:00 +0000</pubDate>
<dc:creator>逝雪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/songfy/p/8447712.html</dc:identifier>
</item>
<item>
<title>wenpack-simple+elementUI配置 - 房东家的猫</title>
<link>http://www.cnblogs.com/fangdongdemao/p/8447697.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fangdongdemao/p/8447697.html</guid>
<description>&lt;p&gt;首先跟着element官方文档走一遍&lt;/p&gt;
&lt;p&gt;注意把.babelrc改成这样&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
  &quot;presets&quot;: [
    [&quot;env&quot;, { &quot;modules&quot;: false }],
    &quot;stage-3&quot;
  ],
  &quot;plugins&quot;: [[&quot;component&quot;, {
    &quot;libraryName&quot;: &quot;element-ui&quot;,
    &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;
  }
  ]]
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在webpack.config.js&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
        loader: 'url-loader',
        options: {
            limit: 10000,
            name: '[name].[ext]'
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装style-loader依赖&lt;code&gt;npm install --save-dev style-loader&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再安装url-loader&lt;code&gt;npm install --save-dev url-loader&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果安装less ,less-loader&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cnpm install less less-loader -D&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cnpm install node-sass sass-loader -D&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;style lang=&quot;sass&quot; scoped&amp;gt; .....&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;引用日历组件&lt;/p&gt;
&lt;p&gt;在src文件夹中新建components文件夹-&amp;gt;Date.vue复制内容注意template内记得用div包着&lt;/p&gt;
&lt;p&gt;在App.vue 中script标签中&lt;code&gt;import Date from &quot;./components/Date.vue&quot;``components:{Date}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在template插入&lt;code&gt;&amp;lt;Date&amp;gt;&amp;lt;/Date&amp;gt;标签&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;bower包管理器&quot;&gt;bower包管理器&lt;/h2&gt;
&lt;p&gt;下包: bower install 包名&lt;/p&gt;
&lt;p&gt;简写&lt;code&gt;i --&amp;gt;install D--&amp;gt;--save-dev S --&amp;gt;--save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如bootstrap&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bower install bootstrap&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后再index.html直接引用就可以了&lt;/p&gt;
&lt;h2 id=&quot;啰嗦几句改端口&quot;&gt;啰嗦几句改端口&lt;/h2&gt;
&lt;p&gt;在package.json中在&lt;code&gt;--hot --port 8800&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3vo2n0jj.bkt.clouddn.com/prefix_20180213235138.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 15:27:00 +0000</pubDate>
<dc:creator>房东家的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fangdongdemao/p/8447697.html</dc:identifier>
</item>
<item>
<title>微信小程序项目踩过的几个坑 - shoufengwei</title>
<link>http://www.cnblogs.com/shoufengwei/p/8447674.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shoufengwei/p/8447674.html</guid>
<description>&lt;p&gt;近期，开始了一段辛酸的还未开始就已经结束的“创业”（参见&lt;a href=&quot;https://www.jianshu.com/p/3f3677006376&quot;&gt;我的第二次创业，以梦为马，莫负韶华&lt;/a&gt;）。大体上是开发了一款微信小程序，关于创业这件事情就不细说了，本文主要介绍一下开发小程序的过程中踩过的几个坑。&lt;/p&gt;

&lt;p&gt;开发一款功能全乎的小程序，在未动键盘开始码代码之前就要涉及到账号注册、微信认证、支付申请等等，这里面也有一些坑。&lt;/p&gt;
&lt;p&gt;首先是必须要企业认证才能有微信支付功能，以个人名义申请不能进行支付。微信认证还算容易，只需要支付300元即可。支付申请的时候会让你选择需要申请的经营种类，此处如果与企业执照上相同会比较容易通过，我们的经营项目不太一致，刚开始写的比较简单被直接驳回，后面我写了一段比较长的话详细解释了一下要做个什么、为什么申请此类型，估计审核的人被我感动了，于是顺利通过。&lt;/p&gt;

&lt;p&gt;如果小程序需要和后台交互，那么交互时只能选择域名的方式，且此域名必须经过ICP备案，并且只能采用HTTPS方式。&lt;/p&gt;
&lt;p&gt;ICP备案比较麻烦，可以直接选择购买阿里云服务器，这应该是最方便的方式了吧。&lt;/p&gt;
&lt;p&gt;HTTPS建议使用百度云，可以申请到一年的免费证书，申请也比较容易。&lt;/p&gt;

&lt;p&gt;回归到本行。其实小程序开发是个涉及到方方面面的工作，要求还是蛮高的，一套下来基本也就是个全栈工程师了。&lt;/p&gt;
&lt;p&gt;小程序本身就分前台和后台，就类似与网站开发，wxml对应html、wxss对应css、js就是js、还多了个json用于配置等。说白了就是微信把这些东西以一定的方式封装起来了，但是我个人感觉封装的也不是那么理想，所以有点不太顺手。&lt;/p&gt;
&lt;p&gt;小程序通信的后台可以采用各种语言，相当于网页的后台，也基本等同于restful接口。此项目我们使用了python的django框架，开发起来还蛮容易的。&lt;/p&gt;
&lt;p&gt;整个一套下来，哪方面都有接触，我的合伙人包亮是个编程大牛，对我进行了很多指导，我对开发这件事情和js、python这两种语言都有了全新的认识。&lt;/p&gt;
&lt;p&gt;言归正传，下面开始介绍开发过程中踩过的坑。&lt;/p&gt;
&lt;h2 id=&quot;js回调&quot;&gt;4.1 js回调&lt;/h2&gt;
&lt;p&gt;刚开始js代码写的很冗长，一个函数有上百行。并不是我不懂得代码编写的艺术，而是小程序的js开发往往是一个请求中的sucess以及fail中嵌套另一个请求，函数只能越写越长，最后各种功能交织在一起，变量也混杂在仪器，我自己实在看不下去了，于是开始重构，将一些功能提取出来组成函数，整体代码清爽了不少，但是出现了一些让我很费解的bug，大神简单看了一下直接指出问题来了，本来应该嵌套的异步函数写成了并列，这样导致函数在执行的时候没有时间上的先后顺序，于是就会出现莫名其妙的bug，这个问题我是有所注意的，但是有些地方也确实没有注意到，他告诉我你应该将各种回掉函数作为参数传入，这样就不会再出问题。简单如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;b&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// do something when sucess&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;a&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;wx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;sucess&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;b&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;a&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是我原来写的方式，当然比这复杂的多，所以不注意的时候就会将b写到a的后面，其实真正的方式应该是这样：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;b&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// do something when sucess&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;a&lt;/span&gt;(aSucess) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;wx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;sucess&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;aSucess&lt;/span&gt;()
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;a&lt;/span&gt;(b)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就很清晰的知道a函数里当请求成功的时候做了什么事情，因为直接在调用a的时候就已经传入其中了。&lt;/p&gt;
&lt;h2 id=&quot;app.js中的异步函数如何保证可靠性&quot;&gt;4.2 app.js中的异步函数如何保证可靠性&lt;/h2&gt;
&lt;p&gt;有的时候需要在app.js的onLaunch事件中向后台请求一些数据，比如用户信息等等（非微信用户信息，但需要与微信openid关联），取出这些信息后在加载用户页面的时候会再向后台请求些数据进行展示等，但是app.js和页面之间无法进行普通回掉，这样就会造成在app.js中还没有请求完成，数据还是undefined而页面中使用此数据就会造成错误。后来查看了一些文档，发现可以在app.js中为特定数据自定义事件，用于在其他页面判断，方式如下：&lt;/p&gt;
&lt;p&gt;app.js中:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;wx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; res_user_info &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userIdCallback&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userIdCallback&lt;/span&gt;(res_user_info)
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;globalData&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;res_user_info&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就在app.js中定义了一个userIdCallback事件，该事件完成的时候表示已经从后台取到了用户数据。在其他页面即可通过此种方式进行判断：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;globalData&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;globalData&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;userIdCallback&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; res_user_id &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// do something&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即首先判断此数据是否已经请求到，如果还未完成则等待此数据完成，然后在其回调函数中再完成有关操作。&lt;/p&gt;
&lt;h2 id=&quot;tabbar之间的切换&quot;&gt;4.3 tabBar之间的切换&lt;/h2&gt;
&lt;p&gt;如果在app.js中设置了tabBar，则页面底部会出现相应的导航栏，但是页面中使用wx.navigateTo跳转到的页面底部不显示导航栏，并且如果需要切换到导航栏内的任何页面，都需要使用wx.switchTab函数而不是wx.navigateTo函数。&lt;/p&gt;
&lt;h2 id=&quot;数据绑定&quot;&gt;4.4 数据绑定&lt;/h2&gt;
&lt;p&gt;微信小程序没有数据双向绑定，在Page对象中设置的data只能单向改变前台渲染，而前台改变无法同步更改此变量。那么如果需要将前台的变化也同步到后台，只能监控前台控件的变化事件，如input的bindinput事件，在此事件中对输入值进行判断，如下：&lt;/p&gt;
&lt;pre class=&quot;wxml&quot;&gt;
&lt;code&gt;&amp;lt;input bindinput=&quot;bindMoney&quot; value=&quot;{{money}}&quot; /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中value=&quot;{{money}}&quot;用于后台到前台的绑定，而bindinput则用于前台到后台的绑定，如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;bindMoney&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (e) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;detail&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setData&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; value
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并且小程序在绑定变化的时候前台会出现undefined的情况，如果是图像的话就会造成请求错误，倒是无伤大雅，时间很短，前台基本不会察觉。&lt;/p&gt;

&lt;p&gt;这是最坑的一点，吭哧吭哧的做了半天，最后居然因为种种非技术原因而无法通过审核。好吧，最为个体我们真的无法说什么，只能对微信这个大平台言听计从，希望我们更改相应页面后能够通过审核。审核太严失去了自由的土壤，微信如何保证有好的产品出现呢？&lt;/p&gt;

&lt;p&gt;本文简单介绍了在微信小程序开发过程中踩过的一系列坑，希望对后来者能够有所帮助。&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 15:16:00 +0000</pubDate>
<dc:creator>shoufengwei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shoufengwei/p/8447674.html</dc:identifier>
</item>
<item>
<title>豹哥嵌入式讲堂：ARM Cortex-M调试过程探析（1）- 4线接口标准（JTAG） - Jay豹哥</title>
<link>http://www.cnblogs.com/henjay724/p/8447578.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/henjay724/p/8447578.html</guid>
<description>&lt;hr/&gt;&lt;p&gt;　　大家好，我是豹哥，猎豹的豹，犀利哥的哥。今天豹哥给大家讲的是&lt;strong&gt;嵌入式调试里的接口标准JTAG&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　在结束&lt;a href=&quot;http://www.cnblogs.com/henjay724/p/8166334.html&quot;&gt;《ARM Cortex-M开发文件详解》&lt;/a&gt;系列文章之后，豹哥修整了一小段时间，但是讲课的心完全停不下来啊，所以忍不住新开了一个系列文章，叫《ARM Cortex-M调试过程探析》，本文是这个系列文章的第一篇，欢迎各位嵌入式朋友前来围观捧场~~~&lt;br/&gt;　　嵌入式开发中，大家免不了需要仿真调试代码，尤其是当应用工程功能逻辑复杂到一定程度时，免不了在写代码时会引入一些逻辑bug，仅靠代码审查有时候并不一定能排除所有bug，所以在线调试便成为排除bug最有效直接的方式，今天我们要聊的是调试里最基础的东西，即接口标准。ARM内核原生支持2种业界通用的接口标准，分别是JTAG和SWD。本节课豹哥先给大家详细讲讲JTAG接口。&lt;/p&gt;
&lt;h3 id=&quot;一jtag接口标准&quot;&gt;一、JTAG接口标准&lt;/h3&gt;
&lt;p&gt;　　JTAG全称“Joint Test Action Group”，既是个标准也是个组织，这是个由几家主要的电子制造商（IBM、AT&amp;amp;T、TI、Philips等）成立于1985年的组织，这个组织成立的目的是发起制订一种PCB和芯片测试标准。&lt;br/&gt;　　JTAG标准于1990年被IEEE批准为IEEE1149.1测试访问端口和边界扫描结构标准。JTAG标准规定了进行边界扫描所需要的硬件和软件，主要应用于电路的边界扫描测试和可编程芯片的在线系统编程。&lt;/p&gt;
&lt;h4 id=&quot;ieee1149.1标准&quot;&gt;1.1 IEEE1149.1标准&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;// IEEE 1149.1工作组&lt;/span&gt;
http:&lt;span class=&quot;co&quot;&gt;//grouper.ieee.org/groups/1149/1/&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 最初版手册1149.1-1990&lt;/span&gt;
http:&lt;span class=&quot;co&quot;&gt;//standards.ieee.org/findstds/standard/1149.1-1990.html&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 最新版手册1149.1-2013&lt;/span&gt;
http:&lt;span class=&quot;co&quot;&gt;//standards.ieee.org/findstds/standard/1149.1-2013.html&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;jtag接口信号&quot;&gt;1.2 JTAG接口信号&lt;/h4&gt;
&lt;p&gt;　　JTAG接口，总称测试访问接口TAP（Test Access Port），使用如下信号来实现边界扫描操作：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;TCK（测试时钟）：同步内部状态机操作的时钟信号。&lt;/li&gt;
&lt;li&gt;TMS（测试模式选择）：控制内部状态机转换的模式信号（TCK上升沿采样）。&lt;/li&gt;
&lt;li&gt;TDI（测试数据输入）：移入器件测试或编程逻辑的数据（TCK上升沿采样）。&lt;/li&gt;
&lt;li&gt;TDO（测试数据输出）：移出器件测试或编程逻辑的数据（TCK下降沿采样）。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;　　除了以上信号线外，还有1个可选的信号：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;TRST（测试重置）：重置TAP控制器的状态机的复位信号。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;jtag系统内部构造&quot;&gt;1.3 JTAG系统内部构造&lt;/h4&gt;
&lt;p&gt;　　JTAG系统内部最基本的单元是边界扫描单元（其扫描获取的值存在边界扫描寄存器BSR（Boundary Scan Register）中），每个边界扫描单元都位于目标器件的边界上，所以很多时候JTAG测试也被称为边界扫描。&lt;br/&gt;　　所有目标器件核心逻辑与针脚之间的信号都会被串联的边界扫描单元所拦截。正常运行时，这些边界扫描单元是不可见的。但是，在测试模式下这些单元可以被用来设置/读取目标器件针脚或核心逻辑的值。&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-registers-cn.jpg&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/schematic_diagram_jtag_enab-cn.gif&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　除了上述BSR之外，JTAG系统还需要以下3个寄存器：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;指令寄存器：存储当前的指令，指令内容被TAP控制器用来决定如何处理接收到的信号。&lt;/li&gt;
&lt;li&gt;旁路寄存器（BYPASS）：把信息从TDI传到TDO的单位寄存器。&lt;/li&gt;
&lt;li&gt;识别码寄存器（IDCODES）：含有器件的识别码和版本序号，该信息可以使器件和它的边界扫描描述语言（BSDL）文件相关联。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;　　JTAG系统最核心的是TAP控制器，TAP控制器被设计用来与JTAG系统内部寄存器相互动，TAP控制器是一个被TMS信号控制转换的同步状态机，控制着JTAG系统的行为。&lt;br/&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-tap_state_machine-cn.gif&quot;/&gt;&lt;br/&gt;　　如上图所示，TAP控制器的内部状态机一共16个状态，关于各个状态具体含义可查阅IEEE1149.1手册。TAP控制器的基本功能是产生BSR和指令寄存器正常工作所需要的时钟和控制信号，其主要功能有以下几点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;提供信号将指令装入指令寄存器。&lt;/li&gt;
&lt;li&gt;提供信号将输入数据从TDI管脚移入内部寄存器、把输出数据从内部寄存器移出到TDO管脚。&lt;/li&gt;
&lt;li&gt;执行相应功能，如捕获、移位和更新数据等。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;　　指令寄存器是用来存储需要解释执行的指令的，IEEE 1149.1标准规定了JTAG兼容器件必须要具备的指令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;BYPASS：用单一单元旁路寄存器传送数据，缩短JTAG链上不必要的扫描链路。&lt;/li&gt;
&lt;li&gt;EXTEST：将已知值（存在BSR）驱动到芯片针脚上。&lt;/li&gt;
&lt;li&gt;SAMPLE/PRELOAD：将捕获到的芯片针脚值装入BSR。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;　　除了必备的指令外，IEEE 1149.1标准还规定了如下可选的指令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;IDCODE：将IDCODES寄存器中的数据移出。&lt;/li&gt;
&lt;li&gt;INTEST：将已知值（存在BSR）驱动到芯片核心逻辑上。&lt;/li&gt;
&lt;li&gt;RUNBIST：当TAP进入测试运行空闲状态时，芯片进行自检。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;jtag调试工具pinout&quot;&gt;1.4 JTAG调试工具pinout&lt;/h4&gt;
&lt;p&gt;　　通常支持JTAG接口的调试编程工具其实只是利用了JTAG技术的四线TAP通信协议，而除了标准TAP信号线外，有时还加入其他辅助信号线构成完整pinout，对于ARM JTAG调试工具来说，有两种比较通用的pinout标准，即ARM20 JTAG header和ARM14 JTAG header：&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-arm20-pinout.jpg&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-arm14-pinout.jpg&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　上述两种ARM JTAG header中除了标准TAP信号线外，其他辅助信号线含义如下：&lt;/p&gt;
&lt;table&gt;&lt;tbody readability=&quot;9&quot;&gt;&lt;tr&gt;&lt;th&gt;信号名&lt;/th&gt;
&lt;th&gt;ARM20-pin&lt;/th&gt;
&lt;th&gt;ARM14-pin&lt;/th&gt;
&lt;th&gt;信号含义&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Vref&lt;/td&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;P1，P13&lt;/td&gt;
&lt;td&gt;JTAG接口电平参考电压。用于检查目标系统是否供电，该引脚通常与目标系统Vdd相连，中间不允许串接电阻。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Vsupply&lt;/td&gt;
&lt;td&gt;P2&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;电源输入&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;nSRST&lt;/td&gt;
&lt;td&gt;P15&lt;/td&gt;
&lt;td&gt;P12&lt;/td&gt;
&lt;td&gt;System Reset信号，与目标系统复位信号相连。可以直接对目标系统复位，同时可以检测目标系统的复位情况。为了防止误触发，应在目标端加上适当的上拉电阻。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;RTCK&lt;/td&gt;
&lt;td&gt;P11&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Return Test Clock。由目标系统反馈给JTAG的时钟信号，用来动态控制TCK速率。不使用时可以直接接地。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;P4，P6，P8，P10，P12，P14，P16，P18，P20&lt;/td&gt;
&lt;td&gt;P2，P4，P6，P8，P10，P14&lt;/td&gt;
&lt;td&gt;接地&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;DBGRQ&lt;/td&gt;
&lt;td&gt;P17&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;连接到目标系统的调试请求信号&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;DBGACK&lt;/td&gt;
&lt;td&gt;P19&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;由目标系统反馈回来的调试应答信号&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;3.1609195402299&quot;&gt;
&lt;p&gt;Note：更多JTAG pinout详见JTAG test网站的整理 &lt;a href=&quot;http://www.jtagtest.com/pinouts/&quot; class=&quot;uri&quot;&gt;http://www.jtagtest.com/pinouts/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;二jtag接口进阶&quot;&gt;二、JTAG接口进阶&lt;/h3&gt;
&lt;p&gt;　　前面讲完了JTAG基础知识，下面豹哥再给大家多介绍一些JTAG相关的“黑科技”。&lt;/p&gt;
&lt;h4 id=&quot;bsdl文件&quot;&gt;2.1 BSDL文件&lt;/h4&gt;
&lt;p&gt;　　现如今支持JTAG接口的芯片越来越多，为了统一各芯片厂商的具体JTAG实现，促进整个电子行业的一致性，IEEE1149.1标准制订了BSDL语言规范。BSDL是JTAG设备的标准建模语言，它的语法是VHDL的子集，是对JTAG器件的边界扫描特性的描述，主要用来沟通芯片厂商、用户与测试工具之间的联系。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 免费的JTAG BSDL库网站，涵盖主流厂商的主流芯片的BSDL文件&lt;/span&gt;
http:&lt;span class=&quot;co&quot;&gt;//bsdl.info/&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　豹哥随便找一款芯片的BSDL文件（Freescale K60_1M（K24_144QFP））简单分析下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;53&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;entity k60_1m is
     generic (PHYSICAL_PIN_MAP : string := &lt;span class=&quot;st&quot;&gt;&quot;K24_144qfp&quot;&lt;/span&gt;);
-- 此处描述芯片所有引脚属性
    port (
                                PTA0:        in   bit;
                                  ...
                              XTAL32:   linkage   bit);
    use STD_1149_1_2001.all;
    use STD_1149_6_2003.all;
-- 描述芯片引脚pinout
    attribute COMPONENT_CONFORMANCE of k60_1m: entity is &lt;span class=&quot;st&quot;&gt;&quot;STD_1149_1_2001&quot;&lt;/span&gt;;
    attribute PIN_MAP of k60_1m: entity is PHYSICAL_PIN_MAP;
    constant K24_144qfp :PIN_MAP_STRING :=
                                &lt;span class=&quot;st&quot;&gt;&quot;PTA0:      50,&quot;&lt;/span&gt; &amp;amp;
                                   ...
                              &lt;span class=&quot;st&quot;&gt;&quot;XTAL32:      40&quot;&lt;/span&gt; ;
-- 描述JTAG信号在芯片引脚分配
    attribute TAP_SCAN_OUT of PTA2 : signal is true;
    attribute TAP_SCAN_CLOCK of PTA0 : signal is (&lt;span class=&quot;fl&quot;&gt;2.00e+07&lt;/span&gt;,BOTH);
    attribute TAP_SCAN_MODE of PTA3 : signal is true;
    attribute TAP_SCAN_IN of PTA1 : signal is true;
-- 描述JTAG指令寄存器相关属性
    attribute INSTRUCTION_LENGTH of k60_1m: entity is &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
    attribute INSTRUCTION_OPCODE of k60_1m: entity is
        &lt;span class=&quot;st&quot;&gt;&quot;BYPASS  (1111),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;CLAMP  (1100),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;EXTEST  (0100),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;HIGHZ  (1001),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;IDCODE  (0000),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;PRELOAD  (0010),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;SAMPLE  (0011),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;ENABLE_CENSOR_CTRL  (0111),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;ENABLE_TEST_CTRL  (0110),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;EZPORT  (1101),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_ABORT  (1000),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_APACC  (1011),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_DPACC  (1010),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_IDCODE  (1110)&quot;&lt;/span&gt;;
    attribute INSTRUCTION_CAPTURE of k60_1m: entity is  &lt;span class=&quot;st&quot;&gt;&quot;xx01&quot;&lt;/span&gt;;
    attribute INSTRUCTION_PRIVATE of k60_1m: entity is
        &lt;span class=&quot;st&quot;&gt;&quot;ENABLE_CENSOR_CTRL,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;ENABLE_TEST_CTRL,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;EZPORT,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_ABORT,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_APACC,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_DPACC,&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;JTAGDP_IDCODE&quot;&lt;/span&gt;;
-- 描述JTAG识别码寄存器相关属性
    attribute IDCODE_REGISTER of k60_1m: entity is
        &lt;span class=&quot;st&quot;&gt;&quot;0000&quot;&lt;/span&gt;  &amp;amp; -- Version
        &lt;span class=&quot;st&quot;&gt;&quot;1011001100011010&quot;&lt;/span&gt;  &amp;amp; -- Part Number
        &lt;span class=&quot;st&quot;&gt;&quot;00000001110&quot;&lt;/span&gt;  &amp;amp; -- Manufacturer Identity
        &lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;;  -- IEEE &lt;span class=&quot;fl&quot;&gt;1149.1&lt;/span&gt; Requirement
 
    attribute REGISTER_ACCESS of k60_1m: entity is
        &lt;span class=&quot;st&quot;&gt;&quot;BYPASS (BYPASS),&quot;&lt;/span&gt; &amp;amp;
        &lt;span class=&quot;st&quot;&gt;&quot;DEVICE_ID (IDCODE)&quot;&lt;/span&gt;;
-- 描述JTAG边界扫描寄存器相关属性
    attribute BOUNDARY_LENGTH of k60_1m: entity is &lt;span class=&quot;dv&quot;&gt;196&lt;/span&gt;;
    attribute BOUNDARY_REGISTER of k60_1m: entity is
-- num cell   port&lt;span class=&quot;co&quot;&gt;/*                            function  safe  [ccell  dis  rslt] &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&quot;   0  (BC_2, *,                                control,  1)                       ,&quot; &amp;amp;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&quot;   1  (BC_8, PTE0,                             bidir,    X,    0,      1,   Z)    ,&quot; &amp;amp;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&quot; 194  (BC_2, *,                                control,  1)                       ,&quot; &amp;amp;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&quot; 195  (BC_8, PTD15,                            bidir,    X,    194,    1,   Z)    &quot;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;end k60_1m;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;jtag菊花链&quot;&gt;2.2 JTAG菊花链&lt;/h4&gt;
&lt;p&gt;　　当你的系统中有多个JTAG设备时，为解决JTAG口过多占用PCB的问题，JTAG支持如下菊花链方式连接（在FPGA应用尤其广泛）：&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-device-symbol.PNG&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;http://odox9r8vg.bkt.clouddn.com/image/cnblogs/jtag-device-chain.PNG&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　从上图可以看出TMS、TCK是一主多从并联的结构（设备过多时TMS,TCK电路需加缓冲器（如74LVC245）增加驱动能力）；TDI、TDO是一主一从串联的结构，这种菊花链方式使得PCB上只需要一个JTAG接口便可以访问所有JTAG设备。&lt;/p&gt;
&lt;p&gt;　　至此，嵌入式调试里的接口标准JTAG豹哥便介绍完毕了，掌声在哪里~~~&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 14:35:00 +0000</pubDate>
<dc:creator>Jay豹哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/henjay724/p/8447578.html</dc:identifier>
</item>
<item>
<title>.NET Core版本七牛云SDK使用 - OMango</title>
<link>http://www.cnblogs.com/OMango/p/8447480.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/OMango/p/8447480.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、问题背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　公司目前正在将一部分的业务从.NET平台准备迁移到.NET Core上去，同时也准备启用docker进行.NET Core的部署，在项目迁移过程中，不可避免的碰到有些SDK只有在.NET Framework下有，而.NET Core没有的情况，而七牛就是碰到的其中一个，之前在nuget上看到qiniu的官方SDK引用进来后，会提醒你该sdk是基于.NET Framework版本，那如果部署在IIS下是没问题的，但是如果部署在linux下，那就跑不起来了，基于此，也为了以后方便其他项目的迁移，就捣鼓了一个.NET Core版本的七牛SDK，基于官方最新7.3的版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、修改说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　废话不多说，上代码，啊呸先上链接&lt;a href=&quot;https://github.com/Hello-Mango/MQiniu.Core&quot; target=&quot;_blank&quot;&gt;https://github.com/Hello-Mango/MQiniu.Core&lt;/a&gt;，这是我已经编译好的代码，并且已经上传NUGET（搜索MQiniu.Core，不敢用qiniu.core这个名字，觉得最好还是官方可以出一个）&lt;/p&gt;
&lt;p&gt;　　修改方案其实是非常简单的，官方的sdk源码语法上跟.NET Core其实就是一样的，最终需要修改的是HttpManager.cs文件中将&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
wReq.ServicePoint.Expect100Continue = &lt;span&gt;false&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　修改为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ServicePointManager.Expect100Continue = &lt;span&gt;false&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果不修改的话，会出现报错情况，具体啥报错给忘记了，这个也是我后来查找到的解决方案，如果有朋友有更好的解决方案，也麻烦请告知。&lt;/p&gt;
&lt;p&gt;　　以下是引用图：&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/465472/201802/465472-20180213213552437-76870299.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到使用MQiniu.Core时不会提示已使用.NETFrameWork&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、具体使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;如果大家想自己尝试的话，可以下载官方的SDK源码进行.NET Core的改造，官方sdk源码地址：&lt;a href=&quot;https://github.com/qiniu/csharp-sdk&quot; target=&quot;_blank&quot;&gt;https://github.com/qiniu/csharp-sdk&lt;/a&gt;，或者可以直接Nuget搜索MQiniu.Core&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;具体代码使用方法完全可以参照官方的文档进行，这里就不多说，这边只给出我这边的试验代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; List&amp;lt;Object&amp;gt; UploadQiniu()
        {
            Mac mac &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Mac(appSettings.qiniuupload.qiniuyunAK, appSettings.qiniuupload.qiniuyunSK);/AK SK使用
            PutPolicy putPolicy &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PutPolicy();
            putPolicy.Scope &lt;/span&gt;=&lt;span&gt; appSettings.qiniuupload.qiniuyunBucket;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; token =&lt;span&gt; Auth.CreateUploadToken(mac, putPolicy.ToJsonString());//token生成
            IFormFileCollection files &lt;/span&gt;=&lt;span&gt; Request.Form.Files;
            Config config &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Config()
            {
                Zone &lt;/span&gt;=&lt;span&gt; Zone.ZONE_CN_East,
                UseHttps &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            };
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; res =&lt;span&gt; Request.Form.ToArray();
&lt;/span&gt;
            FormUploader upload = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FormUploader(config);
            HttpResult result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpResult();
            List&lt;/span&gt;&amp;lt;Object&amp;gt; list = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Object&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (IFormFile file &lt;span&gt;in&lt;/span&gt;&lt;span&gt; files)//获取多个文件列表集合
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (file.Length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _fileName =&lt;span&gt; ContentDispositionHeaderValue
                                    .Parse(file.ContentDisposition)
                                    .FileName
                                    .Trim(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _qiniuName = appSettings.qiniuupload.prefixPath + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + DateTime.Now.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyyMMddHHmmssffffff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) +&lt;span&gt; _fileName;//重命名文件加上时间戳
                    Stream stream &lt;/span&gt;=&lt;span&gt; file.OpenReadStream();
                    result &lt;/span&gt;= upload.UploadStream(stream, _qiniuName, token, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (result.Code == &lt;span&gt;200&lt;/span&gt;&lt;span&gt;)
                    {
                        list.Add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; { fileName = _fileName, qiniuName = _qiniuName, uploadTime = DateTime.Now, Remark = res.First(p =&amp;gt; p.Key == _fileName).Value[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] });
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;result.RefText);//上传失败错误信息
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;四、总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;目前使用下来，qiniu是个非常好的CDN以及对象存储平台，开发测试中的免费使用量也基本都是够够的，但是觉得像.NET Core这种的SDK包最好还是由官方提供，然后后面也许会继续探索性的尝试七牛的容器平台。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;由于这个只是我个人的修改作品，未经过大量的验证，如果大家发现有什么问题的话，也请联系我。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作者： Mango&lt;/p&gt;
&lt;p&gt;出处： &lt;a href=&quot;http://www.cnblogs.com/OMango/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/OMango/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于自己：专注.Net桌面开发以及Web后台开发，开始接触微服务、docker等互联网相关&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出, &lt;a href=&quot;http://www.cnblogs.com/OMango/p/8447480.html&quot;&gt;原文链接&lt;/a&gt; 如有问题， 可邮件（hongjb@yizit.com）咨询.&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 13:50:00 +0000</pubDate>
<dc:creator>OMango</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/OMango/p/8447480.html</dc:identifier>
</item>
<item>
<title>Netty（一）：入门篇 - 匠心零度</title>
<link>http://www.cnblogs.com/lirenzuo/p/8447326.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lirenzuo/p/8447326.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;匠心零度 转载请注明原创出处，谢谢！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;说在前面&quot;&gt;说在前面&lt;/h3&gt;
&lt;p&gt;上篇文章对Netty进行了初探：&lt;a href=&quot;http://mp.weixin.qq.com/s/m-OHG12f2ZCADgzJazVC4A&quot;&gt;Netty初探&lt;/a&gt;，主要介绍了下我们为什么需要学习netty、netty介绍等；本篇文章接着上篇文章的内容。本篇为了方便大家快速入门、了解实践Netty特性、快速上手一个例子让大家有一个比较直接的认识。&lt;/p&gt;
&lt;h3 id=&quot;主题&quot;&gt;主题&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;版本选择及说明&lt;/li&gt;
&lt;li&gt;快速入门&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;版本选择及说明&quot;&gt;版本选择及说明&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;版本的选择&lt;/strong&gt;，这是一个很直接但是又经常需要面对的问题，特别是开源项目的时候，我们在选择版本的时候有很多考虑，比较jdk各个版本选择、zookeeper版本的选择、Tomcat版本选择，Spring系列版本选择等等，后续后空我们可以讨论讨论关于开源这些版本选择以及升级事宜交流，&lt;strong&gt;今天的重点是在netty版本的选择上面。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;netty目前版本说明&quot;&gt;netty目前版本说明&lt;/h5&gt;
&lt;p&gt;目前Netty大版本就分为三个：3.x、4.x、5.x。&lt;br/&gt;我们先看看官网怎么说：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-005fde483bb2e037.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注：&lt;/strong&gt;推荐使用的版本是4.x，那么我们再看看很多使用Netty的一些项目，的确使用的是4.x版本，据了解Dubbo3.x将会将Netty4.0.x升级到4.1.x版本。&lt;/p&gt;
&lt;p&gt;看看官网：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-477bec900fc30d8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;br/&gt;&lt;strong&gt;备注：&lt;/strong&gt;如果是在项目中进行使用那么我们可能会选择4.1.x的比如其他版本，需要考虑稳定性等，一般很少选择最新的，&lt;strong&gt;但是我们是来学习netty，那么我建议就选择最新版本：4.1.21.Final版本。&lt;/strong&gt;，因为当我们学习完了之后，可能已经很久了，21版本估计也稳定了，并且都是4.1x版本，一般仅仅是一些小的改动，就算后面选择新版本学习应该也不是特别困难。&lt;/p&gt;
&lt;h5 id=&quot;netty4.1.x简单介绍&quot;&gt;Netty4.1.x简单介绍&lt;/h5&gt;
&lt;p&gt;建议看官网&lt;strong&gt;New and noteworthy in 4.1&lt;/strong&gt;（&lt;a href=&quot;http://netty.io/wiki/new-and-noteworthy-in-4.1.html&quot; class=&quot;uri&quot;&gt;http://netty.io/wiki/new-and-noteworthy-in-4.1.html&lt;/a&gt;），先了解下有那些大概的变动（不要认为之前没用过，看就没有必要，看看也是它的一些亮点，后续可能要重点学习了解思考的）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要改变：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注：&lt;/strong&gt;具体详情记得去官网看看：&lt;a href=&quot;http://netty.io/wiki/new-and-noteworthy-in-4.1.html%EF%BC%8C%E8%BF%99%E6%AC%A1%E5%8F%AF%E4%BB%A5%E5%A4%A7%E6%A6%82%E4%BA%86%E8%A7%A3%E4%B8%8B%EF%BC%8C%E5%90%8E%E7%BB%AD%E6%9C%89%E7%A9%BA%E6%85%A2%E6%85%A2%E7%9C%8B%E7%9C%8B&quot; class=&quot;uri&quot;&gt;http://netty.io/wiki/new-and-noteworthy-in-4.1.html，这次可以大概了解下，后续有空慢慢看看&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;快速入门&quot;&gt;快速入门&lt;/h3&gt;
&lt;p&gt;说了那么多了，我们来一个简单的Demo来简单的感受下Netty。&lt;/p&gt;
&lt;h5 id=&quot;maven构建项目&quot;&gt;maven构建项目&lt;/h5&gt;
&lt;p&gt;新建一个Maven项目，之后去github上面找到netty对应的例子代码：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-94fb0cae75e01980.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;br/&gt;放到项目中，代码结构如图：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-1d3221e29308c4d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pom.xml中添加如下内容：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.&lt;span class=&quot;fu&quot;&gt;netty&lt;/span&gt;&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-all&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;&lt;span class=&quot;fl&quot;&gt;4.1.21&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Final&lt;/span&gt;&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;稍微在原来demo基础上面修改了点东西，解决半包、黏包问题（后续详细介绍）&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-5e987e07b763a563.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;以及发送内容等信息。&lt;/p&gt;
&lt;p&gt;我已经把代码提交到github上面去了，需要的小伙伴可以直接下载：&lt;a href=&quot;https://github.com/lirenzuo/nettydemo&quot; class=&quot;uri&quot;&gt;https://github.com/lirenzuo/nettydemo&lt;/a&gt;。&lt;/p&gt;
&lt;h5 id=&quot;运行效果截图&quot;&gt;运行效果截图&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-e800e1613aada2dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-a4d9f5d10d159e59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以与使用nio写的代码进行对比，&lt;a href=&quot;http://mp.weixin.qq.com/s/KN7ANdJBLidlKBs6fGCutQ&quot;&gt;NIO相关基础篇二&lt;/a&gt;，发现用Netty写一个TCP原来这么简单，都封装好了。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;使用Netty可以非常方便、快速的搭建网络开发环境，使得我们不用关心一些例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等的问题，所以使用Netty进行网络开发是非常合适的，&lt;strong&gt;本篇只是一个入门，后续有了Demo可以跑起来的时候，进行断点啥的也好进行学习了。&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;如果读完觉得有收获的话，欢迎点赞、关注、加公众号【匠心零度】，查阅更多精彩历史！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7849276-4d7901dbb854ad29.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 12:23:00 +0000</pubDate>
<dc:creator>匠心零度</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lirenzuo/p/8447326.html</dc:identifier>
</item>
<item>
<title>Linux内存机制以及手动释放swap和内存 - 飞天小子</title>
<link>http://www.cnblogs.com/Zfc-Cjk/p/8447270.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Zfc-Cjk/p/8447270.html</guid>
<description>&lt;p&gt;今天我们来谈谈Linux的内存机制。&lt;/p&gt;
&lt;p&gt;首先我们理一下概念&lt;/p&gt;
&lt;p&gt;一、什么是linux的内存机制？&lt;/p&gt;
&lt;p&gt;我们知道，直接从物理内存读写数据要比从硬盘读写数据要快的多，因此，我们希望所有数据的读取和写入都在内存完成，而内存是有限的，这样就引出了物理内存与虚拟内存的概念。&lt;/p&gt;&lt;p&gt;物理内存就是系统硬件提供的内存大小，是真正的内存，相对于物理内存，在linux下还有一个虚拟内存的概念，虚拟内存就是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存，用作虚拟内存的磁盘空间被称为交换空间（Swap Space）。&lt;/p&gt;&lt;p&gt;作为物理内存的扩展，linux会在物理内存不足时，使用交换分区的虚拟内存，更详细的说，就是内核会将暂时不用的内存块信息写到交换空间，这样以来，物理内存得到了释放，这块内存就可以用于其它目的，当需要用到原始的内容时，这些信息会被重新从交换空间读入物理内存。&lt;/p&gt;&lt;p&gt;Linux的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。&lt;/p&gt;
&lt;p&gt;要深入了解linux内存运行机制，需要知道下面提到的几个方面：&lt;/p&gt;
&lt;ol class=&quot;list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Linux系统会不时的进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux也会交换出暂时不用的内存页面。这可以避免等待交换所需的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Linux 进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，linux内核根据”最近最经常使用“算法，仅仅将一些不经常使用的页面文件交换到虚拟 内存，有时我们会看到这么一个现象：linux物理内存还有很多，但是交换空间也使用了很多。其实，这并不奇怪，例如，一个占用很大内存的进程运行时，需 要耗费很多内存资源，此时就会有一些不常用页面文件被交换到虚拟内存中，但后来这个占用很多内存资源的进程结束并释放了很多内存时，刚才被交换出去的页面 文件并不会自动的交换进物理内存，除非有这个必要，那么此刻系统物理内存就会空闲很多，同时交换空间也在被使用，就出现了刚才所说的现象了。关于这点，不 用担心什么，只要知道是怎么一回事就可以了。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;交换空间的页面在使用时会首先被交换到物理内存，如果此时没有足够的物理内存来容纳这些页 面，它们又会被马上交换出去，如此以来，虚拟内存中可能没有足够空间来存储这些交换页面，最终会导致linux出现假死机、服务异常等问题，linux虽 然可以在一段时间内自行恢复，但是恢复后的系统已经基本不可用了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;因此，合理规划和设计Linux内存的使用，是非常重要的.&lt;/p&gt;
&lt;p&gt;在Linux 操作系统中，当应用程序需要读取文件中的数据时，操作系统先分配一些内存，将数据从磁盘读入到这些内存中，然后再将数据分发给应用程序；当需要往文件中写 数据时，操作系统先分配内存接收用户数据，然后再将数据从内存写到磁盘上。然而，如果有大量数据需要从磁盘读取到内存或者由内存写入磁盘时，系统的读写性 能就变得非常低下，因为无论是从磁盘读数据，还是写数据到磁盘，都是一个很消耗时间和资源的过程，在这种情况下，Linux引入了buffers和 cached机制。&lt;/p&gt;&lt;p&gt;buffers与cached都是内存操作，用来保存系统曾经打开过的文件以及文件属性信息，这样当操作系统需要读取某些文件时，会首先在buffers 与cached内存区查找，如果找到，直接读出传送给应用程序，如果没有找到需要数据，才从磁盘读取，这就是操作系统的缓存机制，通过缓存，大大提高了操 作系统的性能。但buffers与cached缓冲的内容却是不同的。&lt;/p&gt;&lt;p&gt;buffers是用来缓冲块设备做的，它只记录文件系统的元数据（metadata）以及 tracking in-flight pages，而cached是用来给文件做缓冲。更通俗一点说：buffers主要用来存放目录里面有什么内容，文件的属性以及权限等等。而cached直接用来记忆我们打开过的文件和程序。&lt;/p&gt;
&lt;p&gt;为了验证我们的结论是否正确，可以通过vi打开一个非常大的文件，看看cached的变化，然后再次vi这个文件，感觉一下两次打开的速度有何异同，是不是第二次打开的速度明显快于第一次呢？&lt;br data-filtered=&quot;filtered&quot;/&gt;
接着执行下面的命令：&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-bsh prettyprinted&quot;&gt;
find /* -name  *.conf
&lt;/pre&gt;
&lt;p&gt;看看buffers的值是否变化，然后重复执行find命令，看看两次显示速度有何不同。&lt;/p&gt;


&lt;p&gt;二、linux什么时候开始使用虚拟内存（swap)？&lt;/p&gt;
&lt;p&gt;A.[root@wenwen ~]# cat /proc/sys/vm/swappiness&lt;/p&gt;
&lt;p&gt;60&lt;/p&gt;
&lt;p&gt;上面这个60代表物理内存在使用60%的时候才会使用swap&lt;/p&gt;
&lt;p&gt;swappiness=0的时候表示最大限度使用物理内存，然后才是 swap空间，&lt;/p&gt;
&lt;p&gt;swappiness＝100的时候表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面。&lt;/p&gt;
&lt;p&gt;通常情况下：&lt;/p&gt;
&lt;p&gt;swap分区设置建议是内存的两倍 （内存小于等于4G时），如果内存大于4G，swap只要比内存大就行。另外尽量的将swappiness调低，这样系统的性能会更好。&lt;/p&gt;
&lt;p&gt;B.修改swappiness参数&lt;/p&gt;
&lt;p&gt;临时性修改：&lt;/p&gt;
&lt;p&gt;[root@wenwen ~]# sysctl vm.swappiness=10&lt;/p&gt;
&lt;p&gt;vm.swappiness = 10&lt;/p&gt;
&lt;p&gt;[root@wenwen ~]# cat /proc/sys/vm/swappiness                 &lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;

&lt;p&gt;永久性修改：&lt;/p&gt;
&lt;p&gt;[root@wenwen ~]# vim /etc/sysctl.conf&lt;/p&gt;
&lt;p&gt;加入参数：&lt;/p&gt;
&lt;p&gt;vm.swappiness = 35&lt;/p&gt;
&lt;p&gt;然后在直接：&lt;/p&gt;
&lt;p&gt;[root@wenwen ~]# sysctl -p&lt;/p&gt;
&lt;p&gt;查看是否生效：&lt;/p&gt;
&lt;p&gt;cat /proc/sys/vm/swappiness&lt;/p&gt;
&lt;p&gt;35&lt;/p&gt;
&lt;p&gt;&lt;span data-filtered=&quot;filtered&quot;&gt; &lt;/span&gt;&lt;/p&gt;


&lt;p&gt;三、怎么释放内存？&lt;/p&gt;
&lt;p&gt;一般系统是不会自动释放内存的&lt;/p&gt;
&lt;p&gt;关键的&lt;a href=&quot;http://blog.51cto.com/9237101/***r_s/&quot;&gt;配置&lt;/a&gt;文件/proc/sys/vm/drop_caches。这个文件中记录了缓存释放的参数，默认值为0，也就是不释放缓存。他的值可以为0~3之间的任意数字，代表着不同的含义：&lt;/p&gt;
&lt;p&gt;0 – 不释放&lt;br data-filtered=&quot;filtered&quot;/&gt;
1 – 释放页缓存&lt;br data-filtered=&quot;filtered&quot;/&gt;
2 – 释放dentries和inodes&lt;br data-filtered=&quot;filtered&quot;/&gt;
3 – 释放所有缓存&lt;/p&gt;
&lt;p&gt;实操：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://s4.51cto.com/wyfs02/M02/93/28/wKiom1kIfqfCWjMwAABa_PWXhZ8253.png-wh_500x0-wm_3-wmp_4-s_3766427302.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;z.png&quot; src=&quot;https://s4.51cto.com/wyfs02/M02/93/28/wKiom1kIfqfCWjMwAABa_PWXhZ8253.png-wh_500x0-wm_3-wmp_4-s_3766427302.png&quot; alt=&quot;wKiom1kIfqfCWjMwAABa_PWXhZ8253.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很明显多出来很多空闲的内存了吧&lt;/p&gt;


&lt;p&gt;四、怎么释放swap？&lt;/p&gt;
&lt;p&gt;前提：首先要保证内存剩余要大于等于swap使用量，否则会宕机！根据内存机制，swap分区一旦释放，所有存放在swap分区的文件都会转存到物理内存上。通常通过重新挂载swap分区完成释放swap。&lt;/p&gt;
&lt;p&gt;a.查看当前swap分区挂载在哪？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s2.51cto.com/wyfs02/M02/93/27/wKioL1kIg_-QgRPNAAAc0YY8hDs713.png-wh_500x0-wm_3-wmp_4-s_3406965261.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;c.png&quot; src=&quot;https://s2.51cto.com/wyfs02/M02/93/27/wKioL1kIg_-QgRPNAAAc0YY8hDs713.png-wh_500x0-wm_3-wmp_4-s_3406965261.png&quot; alt=&quot;wKioL1kIg_-QgRPNAAAc0YY8hDs713.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;b.关停这个分区&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s4.51cto.com/wyfs02/M01/93/29/wKiom1kIhCjzKPz0AAAJ4nqUEqM343.png-wh_500x0-wm_3-wmp_4-s_3264097685.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;d.png&quot; src=&quot;https://s4.51cto.com/wyfs02/M01/93/29/wKiom1kIhCjzKPz0AAAJ4nqUEqM343.png-wh_500x0-wm_3-wmp_4-s_3264097685.png&quot; alt=&quot;wKiom1kIhCjzKPz0AAAJ4nqUEqM343.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;c.查看状态：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s5.51cto.com/wyfs02/M00/93/27/wKioL1kIhEuQnJNsAAARrgqCj1I720.png-wh_500x0-wm_3-wmp_4-s_1232276929.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;e.png&quot; src=&quot;https://s5.51cto.com/wyfs02/M00/93/27/wKioL1kIhEuQnJNsAAARrgqCj1I720.png-wh_500x0-wm_3-wmp_4-s_1232276929.png&quot; alt=&quot;wKioL1kIhEuQnJNsAAARrgqCj1I720.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;d.查看swap分区是否关停，最下面一行显示全0&lt;a href=&quot;https://s4.51cto.com/wyfs02/M00/93/27/wKioL1kIhGPAeVG_AAAmRTAqcso981.png-wh_500x0-wm_3-wmp_4-s_364449478.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;f.png&quot; src=&quot;https://s4.51cto.com/wyfs02/M00/93/27/wKioL1kIhGPAeVG_AAAmRTAqcso981.png-wh_500x0-wm_3-wmp_4-s_364449478.png&quot; alt=&quot;wKioL1kIhGPAeVG_AAAmRTAqcso981.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;e.将swap挂载到/dev/sda5上&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s3.51cto.com/wyfs02/M00/93/29/wKiom1kIhL-DWuyLAAAJq9dwCWk401.png-wh_500x0-wm_3-wmp_4-s_1562435597.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;g.png&quot; src=&quot;https://s3.51cto.com/wyfs02/M00/93/29/wKiom1kIhL-DWuyLAAAJq9dwCWk401.png-wh_500x0-wm_3-wmp_4-s_1562435597.png&quot; alt=&quot;wKiom1kIhL-DWuyLAAAJq9dwCWk401.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;f.查看挂载是否成功&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://s5.51cto.com/wyfs02/M01/93/27/wKioL1kIhJKAttdNAAAbWQ1IwjE929.png-wh_500x0-wm_3-wmp_4-s_4130644756.png&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;h.png&quot; src=&quot;https://s5.51cto.com/wyfs02/M01/93/27/wKioL1kIhJKAttdNAAAbWQ1IwjE929.png-wh_500x0-wm_3-wmp_4-s_4130644756.png&quot; alt=&quot;wKioL1kIhJKAttdNAAAbWQ1IwjE929.png-wh_50&quot;/&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;五、一些实际的小例子？&lt;/p&gt;
&lt;p&gt;我在设置mysql的时候，将&lt;/p&gt;
&lt;p&gt;my.cnf文件&lt;/p&gt;
&lt;p&gt;innodb_buffer_pool_size = 6G（我操作系统的内存就是6G，一般这个值设置为操作系统内存的80%）&lt;/p&gt;
&lt;p&gt;这个值并不是设置的越大越好。设置的过大，会导致system的swap空间被占用，导致操作系统变慢，从而减低sql查询的效率。&lt;/p&gt;
&lt;p&gt;这里你可以这么理解，当我将这个buffer_pool_size设置得过大，跟操作系统内存一样大的时候，我使用mysql,会在一段时间内调用大量的数据进内存，由于linux的内存机制，再根据最近最优的原则，将一部分数据筛选放入swap分区，而swap分区没有及时的清理掉数据，当再次调用其它数据的时候，又会将一部分数据筛选放入swap分区，可能会出现一个现象，就是物理内存还有剩余，甚至是空的，而swap分区却是满的。&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 11:36:00 +0000</pubDate>
<dc:creator>飞天小子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Zfc-Cjk/p/8447270.html</dc:identifier>
</item>
<item>
<title>如何使用 Bootstrap 搭建更合理的 HTML 结构 - 叙帝利</title>
<link>http://www.cnblogs.com/nzbin/p/7735883.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nzbin/p/7735883.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999445/201802/999445-20180212224801781-748317715.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;Bootstrap 的成功不仅在于其简单易用，更在于其样式的规范性以及 HTML 结构的合理性。但是很多人在使用 Bootstrap 时只是依照文档盲目的复制黏贴，并没有仔细考虑每个类的用处，也没有考虑 HTML 结构搭建的是否合理。在平时的工作中，我一直和同事强调，一定要挖掘框架的精髓，尽可能的使用框架本身具有的类实现布局，几乎所有的 UI 布局都可以使用框架本身完成而不需要编写额外的冗余的样式。本文的目的就是介绍如何使用 Bootstrap 搭建常用的布局，并保证布局具有合理的 HTML 结构。不管是传统开发，还是使用框架，搭建布局的思想是不会变的。本文所有案例均以 Bootstrap 3 为例， Bootstrap 4 变化较大，但也基本适用，需要读者仔细比对，不可盲目照抄。&lt;/p&gt;
&lt;h2&gt;合理利用栅格&lt;/h2&gt;
&lt;h3&gt;保证合理嵌套&lt;/h3&gt;
&lt;p&gt;Bootstrap 栅格类的随意嵌套是造成 HTML 结构混乱的主要原因，虽然 Bootstrap 的栅格类在随意嵌套时并不会出现严重问题，但会引发潜在的问题，对于细节控是无法容忍的。比如下面的这种常见错误嵌套：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表面看并没有大问题，但是如果将栅格描边，就会看出不同，见下面的 CodePen：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;ddNwww&quot; data-default-tab=&quot;result&quot; data-user=&quot;nzbin&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Bootstrap-demo&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/nzbin/pen/ddNwww/&quot;&gt;Bootstrap-demo&lt;/a&gt; by Zongbin (&lt;a href=&quot;https://codepen.io/nzbin&quot;&gt;@nzbin&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;我们必须明白每个 Bootstrap 栅格类的作用。其中 &lt;code&gt;.row&lt;/code&gt; 和 &lt;code&gt;.col-*&lt;/code&gt; 必须要搭配使用，缺一不可，因为 &lt;code&gt;.row&lt;/code&gt; 是为了抵消 &lt;code&gt;.col-*&lt;/code&gt; 的 margin 负值，所以并不是可有可无的类。所以，上面例子的正确结构如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;.col-md-6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是我工作过程中见过的最多的一种错误，必须格外注意。&lt;/p&gt;
&lt;h3&gt;灵活利用栅格偏移&lt;/h3&gt;
&lt;p&gt;栅格的列偏移 &lt;code&gt;.col-{breakpoint}-offset-*&lt;/code&gt; 应该也算是比较常用的布局类，但是我们往往忽视它在大块版面布局的作用。举个例子，比如一个登录框在右侧的登录页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999445/201802/999445-20180211232100560-638102136.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于表单在右侧的布局，实现方式有很多，比如单独使用 &lt;code&gt;float&lt;/code&gt; 实现偏移，或者使用绝对/相对定位实现。但是更好的方式应该是使用栅格的列偏移实现，因为栅格支持响应式布局。&lt;/p&gt;
&lt;p&gt;以下是响应式登录页的例子：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;450&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;zRZWev&quot; data-default-tab=&quot;result&quot; data-user=&quot;nzbin&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Bootstrap-demo&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/nzbin/pen/zRZWev/&quot;&gt;Bootstrap-demo&lt;/a&gt; by Zongbin (&lt;a href=&quot;https://codepen.io/nzbin&quot;&gt;@nzbin&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;建议在 CodePen 中打开查看效果，因为我的博客内容区较窄，所以只能看到响应式布局的小屏断点。&lt;/p&gt;
&lt;p&gt;虽然栅格布局很好，但在工作中一定要谨慎使用，因为很多不懂前端的设计师或产品会对前端人员吹毛求疵，这样的话也只能根据具体要求做一些调整了。&lt;/p&gt;
&lt;h2&gt;水平表单排列&lt;/h2&gt;
&lt;p&gt;表单中的横向栅格布局非常常见，Bootstrap 官网也给出了案例，但是对于多列的横向表单布局会稍显复杂，过多的栅格嵌套让人抓狂。但是只要记住一点，布局就会游刃有余。&lt;/p&gt;
&lt;p&gt;通过添加 &lt;code&gt;.form-horizontal&lt;/code&gt; 类，表单就可以横向排布，此时的 &lt;code&gt;.form-group&lt;/code&gt; 类就相当于  &lt;code&gt;.row&lt;/code&gt; 类，两者的行为是一样的，所以此时无需再添加  &lt;code&gt;.row&lt;/code&gt; 类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-horizontal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;inputEmail3&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2 control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Email&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;inputEmail3&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;Email&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
...
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，在 Bootstrap 4 中， &lt;code&gt;.row&lt;/code&gt; 类不能省略，需要写成这样 &lt;code&gt;.form-group row&lt;/code&gt; 才行。其实也没有什么区别，都是为了形成 .row &amp;gt; .col-* &amp;gt; .row &amp;gt; .col-* 这种结构。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&quot;inputEmail3&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2 col-form-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Email&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;inputEmail3&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;Email&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
...
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下是 Bootstrap 3 横向表单布局的例子：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;xYZVNz&quot; data-default-tab=&quot;result&quot; data-user=&quot;nzbin&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Bootstrap-demo&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/nzbin/pen/xYZVNz/&quot;&gt;Bootstrap-demo&lt;/a&gt; by Zongbin (&lt;a href=&quot;https://codepen.io/nzbin&quot;&gt;@nzbin&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;上面的例子比官网多了一层栅格，只有在大屏中才能看到效果，这种栅格内的表单嵌套在不熟悉 Bootstrap 的情况下很容易写乱，但只要记住了上面提到的规则，就可以轻而易举的写出来。&lt;/p&gt;
&lt;h2&gt;静态表单排列&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/999445/201802/999445-20180213190043187-1370669215.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;很多人在看到上面的结构时，几乎二话不说，就写出 ul&amp;gt;li 这样的布局，而且添加诸如 &lt;code class=&quot;highlighter-rouge&quot;&gt;.list&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;.item&lt;/code&gt; 这些无意义的类。依然是开篇提到的，我们必须始终坚持一个原则，尽可能不要随意添加样式，而是探索框架本身具有的类，几乎都可以找到解决方法。&lt;/p&gt;
&lt;p&gt;仔细想想，上面的例子中的布局方式无非就是栅格内的行内表单。所以实现方法非常简单，完全不用自己编写样式。&lt;/p&gt;
&lt;p&gt;以下是实时演示，建议在大屏查看效果：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;NypMNm&quot; data-default-tab=&quot;result&quot; data-user=&quot;nzbin&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Bootstrap-demo&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/nzbin/pen/NypMNm/&quot;&gt;Bootstrap-demo&lt;/a&gt; by Zongbin (&lt;a href=&quot;https://codepen.io/nzbin&quot;&gt;@nzbin&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;表格结构&lt;/h2&gt;
&lt;p&gt;关于表格可以说的并不多，只是建议全部采用响应式表格结构，也就是添加 &lt;code&gt;.table-responsive&lt;/code&gt; 元素。因为在实际工作中，表格的列数一般比较多，响应式表格应该是更通用的方案。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;table-responsive&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;table&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    ...
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;先排列，再排行&lt;/h2&gt;
&lt;p&gt;这条规则只是建议，因为 HTML 的块级元素默认是占一行，所以先排列可以减少 HTML 的结构，使结构更简洁。另一方面，对于高度不同的元素，哪怕是很小的差距，都会出现布局的错位，见下面的 CodePen：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;400&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;jZmxEd&quot; data-default-tab=&quot;result&quot; data-user=&quot;nzbin&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Bootstrap-demo&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/nzbin/pen/jZmxEd/&quot;&gt;Bootstrap-demo&lt;/a&gt; by Zongbin (&lt;a href=&quot;https://codepen.io/nzbin&quot;&gt;@nzbin&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;为了解决这个问题，必须在每一行都添加 &lt;code&gt;.row&lt;/code&gt; 。不过在某些时候，我们也不得不这样写。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  ...
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  ...
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  ...
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  ...
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是先排列，就不用担心上面的问题，这种排列方式有点像瀑布流。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  ...
  ...
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-xs-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  ...
  ...
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这条建议需要根据实际的需求调整，需要和设计师以及产品做好沟通，不然肯定面临返工的危险。只能说从结构上而言，先排列会好一些。假如使用 Flex  布局的话，就可以很好地解决这个问题了。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;先说点题外话，我一直觉得优秀的网页作品不是或者不全是设计师决定的，甚至不应该由设计师决定，因为国内的设计师真正懂前端的还是少数，而且设计风格难以紧跟潮流。设计师和产品经常将交互挂在嘴边，但是他们提出的很多交互形式在我们前端人员看来都是网页必备的基本要素，并不是一个亮点。反观国外，设计师懂前端甚至很精通，前端开发者也是设计师或者交互设计师，每个人都是复合型人才，这是值得我们学习的方面。&lt;/p&gt;
&lt;p&gt;言归正传，本文主要介绍了在使用 Bootstrap 时如何搭建更合理的结构，然而在实际工作中，不管我们用不用框架，都应该尽可能的精简并规范化 HTML 结构，这是前端开发人员应该养成的良好习惯。另外说明一点，因为框架是很多问题的抽象，所以在通用性的前提下，不可避免的会有一些冗余的 HTML 结构。&lt;/p&gt;
&lt;p&gt;我在开篇就强调尽量不要编写冗余的样式，但是如果真的不能满足布局要求时，我们首先应该使用 helper 解决，Bootstrap 3 的 helper 并不丰富，而 Bootstrap 4 则添加了大量的 helper 辅助类。我在之前也写了一篇关于 helper 的文章《&lt;a href=&quot;http://www.cnblogs.com/nzbin/p/7746047.html&quot; target=&quot;_blank&quot;&gt;如何编写通用的 Helper Class&lt;/a&gt;》，感兴趣的话可以看一看。&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 11:30:00 +0000</pubDate>
<dc:creator>叙帝利</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nzbin/p/7735883.html</dc:identifier>
</item>
<item>
<title>在Android上编写模块化项目（翻译） - 天天_byconan</title>
<link>http://www.cnblogs.com/tiantianbyconan/p/8447145.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiantianbyconan/p/8447145.html</guid>
<description>&lt;blockquote readability=&quot;4.4493927125506&quot;&gt;
&lt;p&gt;来源博客：&lt;a href=&quot;http://blog.wangjiegulu.com&quot;&gt;Wang Jie's Blog&lt;/a&gt;&lt;br/&gt;本文链接：&lt;a href=&quot;http://blog.wangjiegulu.com/2018/02/13/writing_a_modular_project_on_android&quot; class=&quot;uri&quot;&gt;http://blog.wangjiegulu.com/2018/02/13/writing_a_modular_project_on_android&lt;/a&gt;&lt;br/&gt;版权声明：本博客所有文章除特别声明外，均采用 CC BY 4.0 CN协议 许可协议。转载请注明出处。&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;0.52325581395349&quot;&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://medium.com/mindorks/writing-a-modular-project-on-android-304f3b09cb37&quot; class=&quot;uri&quot;&gt;https://medium.com/mindorks/writing-a-modular-project-on-android-304f3b09cb37&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当我们在 Android Studio 上创建一个新的项目时，自带一个 &lt;code&gt;app&lt;/code&gt; module。这时我们大多数人编写整个应用的地方。每次点击 &lt;code&gt;run&lt;/code&gt; 按钮都会触发我们整个所有 module 上的 gradle 构建，并检查所有文件是否有变化。这就是为什么 gradle 构建会在更大的应用程序上花费 &lt;a href=&quot;https://eng.uber.com/android-monorepo/&quot;&gt;10分钟&lt;/a&gt;的时间，并且减慢开发者的&lt;a href=&quot;https://imgs.xkcd.com/comics/compiling.png&quot;&gt;输出&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;要解决这个问题，复杂的应用程序，如 Uber 决定对它们的应用程序进行模块化并从中&lt;a href=&quot;https://www.youtube.com/watch?v=j6CiHlapado&quot;&gt;获得&lt;/a&gt;了很多。下面是试用模块化项目的一些优势：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://proandroiddev.com/modular-architecture-for-faster-build-time-d58397cb7bfe&quot;&gt;更快&lt;/a&gt;的 gradle 构建&lt;/li&gt;
&lt;li&gt;跨应用/模块复用通用的功能&lt;/li&gt;
&lt;li&gt;易于插拔到&lt;a href=&quot;https://developer.android.com/topic/instant-apps/overview.html#features&quot;&gt;Instant apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;更好的团队工作，一个人可以单独负责一个模块&lt;/li&gt;
&lt;li&gt;更流畅地git flows&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;由于上述优势，当我刚开始&lt;a href=&quot;https://github.com/karntrehan/Posts/&quot;&gt;Posts&lt;/a&gt;这个应用时，我就在始终坚持使用模块化方法。对此，Android 团队已经给我们提供了一些&lt;a href=&quot;https://developer.android.com/google/play/publishing/multiple-apks.html#CreatingApks&quot;&gt;工具&lt;/a&gt;，但是我确实遇到了一些障碍，一下是我学习到的内容：&lt;/p&gt;
&lt;h2 id=&quot;我该怎么分割我的-modules&quot;&gt;我该怎么分割我的 modules ？&lt;/h2&gt;
&lt;p&gt;你的应用程序是流程集构成的，比如，Google Play 有&lt;strong&gt;应用详情&lt;/strong&gt;流，它包含了简要，描述详情，应用截图，评论活动等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/36140651-ed8f0d6c-10dc-11e8-9733-e306fd72f9d0.jpeg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所有这些都可以归为同一模块 —— &lt;code&gt;app-details&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;你的应用会包含多个类似流程的模块，有 &lt;code&gt;authentication&lt;/code&gt;, &lt;code&gt;settings&lt;/code&gt;, &lt;code&gt;on-boarding&lt;/code&gt;等等。当然还有一些不需要UI元素呈现的模块如 —— &lt;code&gt;notifications&lt;/code&gt;, &lt;code&gt;analytics&lt;/code&gt;, &lt;code&gt;first-fetch&lt;/code&gt;等等。这些模块包含与流程有关的 activities, repositories, entities和依赖注入相关东西。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/36140945-09253f5a-10de-11e8-8ded-003e53fd78b6.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;但是这些模块中总是有一些共同的功能和工具。这就是为什么你需要一个 core 模块。&lt;/p&gt;
&lt;h2 id=&quot;什么是-core-模块&quot;&gt;什么是 core 模块 ？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Core&lt;/code&gt; 模块是一个你项目中简单的 module 库。core 库可以（除其它外），&lt;/p&gt;
&lt;h2 id=&quot;怎么使用第三方库&quot;&gt;怎么使用第三方库？&lt;/h2&gt;
&lt;p&gt;核心(&lt;code&gt;core&lt;/code&gt;)模块的其中一个职责是为你的功能(&lt;code&gt;feature&lt;/code&gt;)模块提供外部依赖。这使得很容易实现在你的 &lt;code&gt;feature&lt;/code&gt; 模块中共享相同版本的库。只需要在你的 &lt;code&gt;core&lt;/code&gt; 模块的 dependencies 中使用 &lt;code&gt;api&lt;/code&gt;，这样你就能在所有 &lt;code&gt;feature&lt;/code&gt; 模块中使用它们。&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api deps.support.appCompat
    api deps.support.recyclerView
    api deps.support.cardView
    api deps.support.support
    api deps.support.designSupport

    api deps.android.lifecycleExt
    api deps.android.lifecycleCommon
    api deps.android.roomRuntime
    api deps.android.roomRx

    api deps.kotlin.stdlib

    api deps.reactivex.rxJava
    api deps.reactivex.rxAndroid

    api deps.google.dagger
    kapt deps.google.daggerProcessor

    api deps.square.picasso
    api deps.square.okhttpDownloader

    api deps.square.retrofit
    api deps.square.okhttp
    api deps.square.gsonConverter
    api deps.square.retrofitRxAdapter

    implementation deps.facebook.stetho
    implementation deps.facebook.networkInterceptor

    testApi deps.test.junit
    androidTestApi deps.test.testRunner
    androidTestApi deps.test.espressoCore
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有种依赖的可能性是只有对 &lt;code&gt;feature-a&lt;/code&gt; 模块有用，但是在 &lt;code&gt;feature-b&lt;/code&gt; 中无用。对于这种情况，我推荐在你的 core 的依赖中使用 &lt;code&gt;api&lt;/code&gt;，因为 proguard 注意到而不会包含在 &lt;code&gt;feature-b&lt;/code&gt; instant app 中。&lt;/p&gt;
&lt;h2 id=&quot;怎么使用-room&quot;&gt;怎么使用 Room ？&lt;/h2&gt;
&lt;p&gt;这个困扰我挺久的时间。我们希望把我们的数据库定义到 &lt;code&gt;core&lt;/code&gt; 模块中，因为它是我们应用程序要共享的通用的功能。为了让 Room 工作，你需要一个包含了所有 entity 类的数据库文件。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode kotlin&quot;&gt;
&lt;code class=&quot;sourceCode kotlin&quot;&gt;@&lt;span class=&quot;fu&quot;&gt;Database&lt;/span&gt;(entities = [Post::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;, User::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;, Comment::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;], version = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,exportSchema = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PostDb : &lt;span class=&quot;fu&quot;&gt;RoomDatabase&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; fun &lt;span class=&quot;fu&quot;&gt;postDao&lt;/span&gt;(): PostDao
    &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; fun &lt;span class=&quot;fu&quot;&gt;userDao&lt;/span&gt;(): UserDao
    &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; fun &lt;span class=&quot;fu&quot;&gt;commentDao&lt;/span&gt;(): CommentDao
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，如上面提到的，我们的 entity 类是被定义在 &lt;code&gt;feature&lt;/code&gt; 模块中，而且 &lt;code&gt;core&lt;/code&gt; 模块不能去访问它们。这是我碰到障碍的地方，经过一番思考后，你做了一件最棒的事，寻求 &lt;a href=&quot;https://github.com/yigit&quot;&gt;Yigit&lt;/a&gt; 的帮助。&lt;/p&gt;
&lt;p&gt;Yigit 阐明了观点，你必须要在每个 &lt;code&gt;feature&lt;/code&gt;模块中都创建一个新的 db 文件，然后每个模块一个数据库。&lt;/p&gt;
&lt;p&gt;这有几个好处：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/google-developers/understanding-migrations-with-room-f01e04b07929&quot;&gt;迁移&lt;/a&gt;是模块化的&lt;/li&gt;
&lt;li&gt;即时 app 仅包含它们需要的表&lt;/li&gt;
&lt;li&gt;查询会更快&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;跨模块数据关系将不可能&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;注意：为了 Room 的注解能够工作，不要忘记在你的 &lt;code&gt;feature&lt;/code&gt; 模块中增加下面依赖&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;kapt &quot;android.arch.persistence.room:compiler:${versions.room}&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;怎么使用-dagger-2&quot;&gt;怎么使用 Dagger 2 ？&lt;/h2&gt;
&lt;p&gt;同样的问题 Dagger 也遇到了。我的 core 模块中的 application 类不能访问和初始化我 &lt;code&gt;feature&lt;/code&gt; 模块中的组件。这是从属组件完美的用例。&lt;/p&gt;
&lt;p&gt;你的 core 组件定义了它想要暴露给依赖组件的依赖关系&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode kotlin&quot;&gt;
&lt;code class=&quot;sourceCode kotlin&quot;&gt;@Singleton
@&lt;span class=&quot;fu&quot;&gt;Component&lt;/span&gt;(modules = [AppModule::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;, NetworkModule::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;, StorageModule::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;, ImageModule::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;])
interface CoreComponent {

    fun &lt;span class=&quot;fu&quot;&gt;context&lt;/span&gt;(): Context

    fun &lt;span class=&quot;fu&quot;&gt;retrofit&lt;/span&gt;(): Retrofit

    fun &lt;span class=&quot;fu&quot;&gt;picasso&lt;/span&gt;(): Picasso

    fun &lt;span class=&quot;fu&quot;&gt;sharedPreferences&lt;/span&gt;(): SharedPreferences

    fun &lt;span class=&quot;fu&quot;&gt;scheduler&lt;/span&gt;(): Scheduler
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您的模块组件将 &lt;code&gt;CoreComponent&lt;/code&gt; 定义为依赖项，并使用传递的依赖&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode kotlin&quot;&gt;
&lt;code class=&quot;sourceCode kotlin&quot;&gt;@ListScope
@&lt;span class=&quot;fu&quot;&gt;Component&lt;/span&gt;(dependencies = [CoreComponent::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;], modules = [ListModule::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;])
interface ListComponent {
    fun &lt;span class=&quot;fu&quot;&gt;inject&lt;/span&gt;(listActivity: ListActivity)
}

@Module
@ListScope
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ListModule {

    &lt;span class=&quot;co&quot;&gt;/*Uses parent's provided dependencies like Picasso, Context and Retrofit*/&lt;/span&gt;
    @Provides
    @ListScope
    fun &lt;span class=&quot;fu&quot;&gt;adapter&lt;/span&gt;(picasso: Picasso): ListAdapter = &lt;span class=&quot;fu&quot;&gt;ListAdapter&lt;/span&gt;(picasso)

    @Provides
    @ListScope
    fun &lt;span class=&quot;fu&quot;&gt;postDb&lt;/span&gt;(context: Context): PostDb = Room.&lt;span class=&quot;fu&quot;&gt;databaseBuilder&lt;/span&gt;(context, PostDb::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;java&lt;/span&gt;, Constants.&lt;span class=&quot;fu&quot;&gt;Posts&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;DB_NAME&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;()

    @Provides
    @ListScope
    fun &lt;span class=&quot;fu&quot;&gt;postService&lt;/span&gt;(retrofit: Retrofit): PostService = retrofit.&lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(PostService::&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;java&lt;/span&gt;)
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;在哪里初始化我的-components&quot;&gt;在哪里初始化我的 components ？&lt;/h2&gt;
&lt;p&gt;我为我的功能的所有组件创建了一个单例 holder。这个 holder 用于创建，维护和销毁我的 component 实例。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode kotlin&quot;&gt;
&lt;code class=&quot;sourceCode kotlin&quot;&gt;@Singleton
&lt;span class=&quot;kw&quot;&gt;object&lt;/span&gt; PostDH {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; listComponent: ListComponent? = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;

    fun &lt;span class=&quot;fu&quot;&gt;listComponent&lt;/span&gt;(): ListComponent {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (listComponent == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
            listComponent = DaggerListComponent.&lt;span class=&quot;fu&quot;&gt;builder&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;coreComponent&lt;/span&gt;(CoreApp.&lt;span class=&quot;fu&quot;&gt;coreComponent&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;()
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; listComponent &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; ListComponent
    }

    fun &lt;span class=&quot;fu&quot;&gt;destroyListComponent&lt;/span&gt;() {
        listComponent = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;注意：为了 Dagger 的注解能够工作，不要忘记在你的 &lt;code&gt;feature&lt;/code&gt; 模块中增加下面依赖&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;
&lt;code&gt;kapt &quot;com.google.dagger:dagger-compiler:${versions.dagger}&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;尽管把你的单独的 application 转成模块化有一些棘手，其中一些我试图通过上面的方法来解决，优点是深刻的。如果您在模块中遇到任何障碍，请随时在下面提及它们，我们可以一起讨论解决方案。&lt;/p&gt;
&lt;p&gt;谢谢。&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 10:07:00 +0000</pubDate>
<dc:creator>天天_byconan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiantianbyconan/p/8447145.html</dc:identifier>
</item>
<item>
<title>事务与隔离级别------《Designing Data-Intensive Applications》读书笔记10 - HappenLee</title>
<link>http://www.cnblogs.com/happenlee/p/8447134.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/happenlee/p/8447134.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;和数据库打交道的程序员绕不开的话题就是：&lt;strong&gt;事务&lt;/strong&gt;，作为一个简化访问数据库的应用程序的编程模型。通过使用事务，应用程序可以忽略某些潜在的错误场景和并发问题，由数据库负责处理它们。而并非每个应用程序都需要事务，有时削弱事务性担保或完全放弃事务，可以获得更高的性能或更高的可用性。怎么样更好的理解数据库中的事务与隔离级别呢？我们借这篇文章来聊一聊吧~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;acid&quot;&gt;1.ACID&lt;/h3&gt;
&lt;p&gt;1983年，&lt;a href=&quot;https://en.wikipedia.org/wiki/Andreas_Reuter&quot; title=&quot;Andreas Reuter&quot;&gt;Andreas Reuter&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Theo_H%C3%A4rder&quot; title=&quot;Theo Härder&quot;&gt;Theo Härder&lt;/a&gt; 提出了事务之中重要的四个特性：&lt;/p&gt;
&lt;ul readability=&quot;7&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;原子性（Atomicity）&lt;/strong&gt;：&lt;br/&gt;一般来说，原子指的是不能分解成更小的部分的东西。如果写操作被组合到一个原子事务中，并且由于一个错误，事务不能完成，那么事务将被中止，数据库必须丢弃或撤消它在该事务中所做的任何写入操作。原子性简化了数据库的数据模型：如果一个事务被中止时，应用程序可以确保它没有任何改变，因此可以被重试。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;一致性（Consistency）&lt;/strong&gt;：&lt;br/&gt;一致性的表述是：数据库之中的数据必须始终正确。例如，在一个会计系统，所有账户的收支必须平衡。应用程序有责任正确定义其事务，从而保持一致性。这不是数据库能保证的：如果你写了违反你的不变量的坏数据，数据库不能阻止你。应用程序可能会依赖于数据库的原子性和隔离性以达到一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;隔离性（Isolation）：&lt;/strong&gt;&lt;br/&gt;数据库由多个客户端同时访问时，如果他们访问相同的数据库记录，你会遇到并发问题。如下图所示：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-64b827db2453e047.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;并发写对隔离性的破坏&quot;/&gt;&lt;br/&gt;隔离性意味着并发执行的事务彼此隔离，数据库确保当事务提交时，结果与它们顺序运行相同，即使它们实际上是并发运行的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;持久性（Durability）：&lt;/strong&gt;&lt;br/&gt;持久性是一个承诺，一旦事务成功提交，它所写的任何数据将不会丢失，即使有硬件故障或数据库崩溃。在单节点数据库中，持久性通常意味着数据已写入非易失性存储（如硬盘驱动器或SSD）。它通常还需要写入日志，以便出现文件损坏时恢复工作。在分布式数据库中，持久性可能意味着数据已成功复制到一些节点上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在几种特性之中，隔离性是DBA对数据库调优最为侧重的部分，接下来，我们着重来聊一聊事务的隔离性。&lt;/p&gt;
&lt;h3 id=&quot;隔离级别&quot;&gt;2. 隔离级别&lt;/h3&gt;
&lt;p&gt;如果两个事务不触及相同的数据，它们可以安全地并行运行，因为两者都不依赖于其他数据。当一个事务读取另一个事务同时修改的数据，或者两个事务试图同时修改同一数据时，便会出现并发问题。&lt;/p&gt;
&lt;p&gt;并发错误很难通过测试发现，因为这种的错误触发具有偶然性，通常很难重现。并发性也很难推理，尤其是在大型应用程序中，因为开发人员不一定知道其他代码片段正在访问数据库。所以数据库通过提供事务的隔离性来隐藏应用程序开发者的并发问题，屏蔽了底层数据库的并发细节，提供了一个串行化的数据模型。&lt;/p&gt;
&lt;p&gt;天下没有免费的午餐，串行化的隔离级别会带来额外的性能开销，所以许多数据库会提供一些弱隔离级别作为选择，它们可以防止一部分并发问题。所以，接下来，我们将一一梳理，不同的隔离级别之间的差异。&lt;/p&gt;
&lt;h4 id=&quot;read-committed&quot;&gt;Read Committed&lt;/h4&gt;
&lt;p&gt;最基本的隔离级别是&lt;strong&gt;Read Committed&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当从数据库中读取数据时，只看到已提交的数据（没有脏读）。&lt;/li&gt;
&lt;li&gt;当写入数据库时，只覆盖已提交的数据（没有脏写）。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;脏读&quot;&gt;脏读:&lt;/h5&gt;
&lt;p&gt;一个事务已经向数据库写入了一些数据，但该事务尚未提交或中止。另一个事务可以看到未提交的数据，就称为&lt;strong&gt;脏读&lt;/strong&gt;。&lt;strong&gt;Read Committed&lt;/strong&gt;的隔离级别可以防止脏读。所以当事务提交之后，事务中的写操作才对其他人可见。如下图所示：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-962fba195d961ae1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;User2在User1事务提交之后才能读到新的值&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;脏写&quot;&gt;脏写:&lt;/h5&gt;
&lt;p&gt;写操作覆盖了一个未提交的值，被称之为&lt;strong&gt;脏写&lt;/strong&gt;。&lt;strong&gt;Read Committed&lt;/strong&gt;的隔离级别事务可以防止脏写，通常是通过延迟写操作直到前一个写事务已提交或中止时在继续写入。脏写会导致数据出现不一致，如下图所示：Alice和Bob要买同一个东西，脏写导致了最终的买家是Bob，而发票却寄给了Alice。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-7e15544a6f4e6118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;脏写导致了数据的不一致性&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;实现&quot;&gt;实现:&lt;/h5&gt;
&lt;p&gt;Read Committed是一种十分流行的隔离级别，许多数据库的默认隔离级别便是Read Committed。&lt;/p&gt;
&lt;p&gt;数据库通过使用行级锁防止脏写：当事务要修改某个特定行时，它必须首先获取该行的锁。然后必须保留该锁，直到事务提交或中止为止。只有一个事务可以锁定任何给定行的锁；如果另一个事务要写入同一个行，则必须等到第一个事务提交或中止后才可获取锁并继续。&lt;/p&gt;
&lt;p&gt;而使用行级锁避免脏读会产生很大的代价，容易找出读延迟。使用当事务正在进行时，读取同一行的任何其他事务都只给出旧值。只有当新值被提交时，事务才切换到读取新值。&lt;/p&gt;
&lt;h4 id=&quot;read-repeatable&quot;&gt;Read Repeatable&lt;/h4&gt;
&lt;p&gt;Read Committed看起来是一个很好的隔离级别了，但是它也会产生一些问题，我们看下面这个例子：如图所示，Alice在一家银行有1000美元的存款，在两个账户上拆分，每个账户有500美元。现在，一个事务从她的帐户转到另一个帐户100美元。如果她很不幸地在事务正在进行的同一时刻查看她的账户余额清单，她可能会看到一个账户余额在收到的款项到达之前（余额为500美元），另一个账户在已进行的转移之后（新余额为400美元），而100美元消失了。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-80185c87b307e089.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;消失的100美元&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在Read Committed隔离级别之下出现的这种异常被称为&lt;strong&gt;不可重复读&lt;/strong&gt;,我们需要寻找新的解决方案。&lt;/p&gt;
&lt;h5 id=&quot;快照隔离&quot;&gt;快照隔离&lt;/h5&gt;
&lt;p&gt;为了实现可重复读，我们需要快照隔离的技术。&lt;/p&gt;
&lt;p&gt;每个事务都从数据库的快照中读取的，即事务在事务开始时看到数据库中提交的所有数据。即使数据随后被另一个事务更改，每个事务只看到来自特定时间点的旧数据。当事务可以看到数据库的数据，在特定时间点被冻结了。&lt;/p&gt;
&lt;p&gt;快照隔离的实现通常使用写锁来防止脏写，这意味着编写的事务可以阻止写入同一对象的另一个事务的进程。实现快照隔离，数据库必须保留数据的几个不同的提交版本，因为各种正在进行的事务可能需要在不同的时间点查看数据库的状态，这种技术被称为&lt;strong&gt;多版本并发控制（MVCC）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如下图所示，每当一个事务向数据库写入任何内容时，它写入的数据都会用事务ID进行标记。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-33f0724bca50d789.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;通过事务ID实现MVCC&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当事务从数据库中读取时，事务ID用于决定哪些数据可见，哪些数据是不可见的。在每次更改值时创建新版本，数据库可以提供快照隔离，而只产生较小的开销。&lt;/p&gt;
&lt;h4 id=&quot;serializability&quot;&gt;Serializability&lt;/h4&gt;
&lt;p&gt;Read Repeatable虽然解决了读取数据的问题，但是依然没有办法解决并发写的问题。我们来看看下面这个例子：医院通常在任何时候都要有几个值班医生，必须至少有一位医生在值班。医生可以调整他们的轮班，前提是至少有一个同事在医院值班。Alice和Bob是两位今天值班的医生。两人都想调整轮班，不幸的是，他们碰巧点击按钮大约在同一时间取消轮班。接下来发生的情况如图所示：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-a9e5865c7a1e1106.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;并发写，产生的问题&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于数据库的隔离级别是快照隔离，两个人都检查到目前有两个人值班，因此两个事务都进入下一个阶段。Alice认为请假没有问题，Bob也认为请假没有问题。两个事务都提交了，现在没有医生在值班了，数据库的一致性出现了问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Serializability&lt;/strong&gt; 被看作是最强的隔离级别。数据库保证，如果事务在单独运行时行为正确，则它们在并发运行时仍然正确，换句话说，数据库防止所有可能的竞争条件。接下来我们将详细来聊一聊Serializability的隔离级别是如何实现的。&lt;/p&gt;
&lt;h5 id=&quot;两阶段锁2pl&quot;&gt;两阶段锁（2PL）&lt;/h5&gt;
&lt;p&gt;数据库发展几十年来，广泛使用的算法：&lt;strong&gt;两阶段锁（2PL）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;事务A获取了数据的读锁，而事务B想写对应的数据，则必须事务Ａ提交或中止后方可继续写入操作。这可以确保事务B不会意外地改变事务Ａ正在读取的数据。&lt;/li&gt;
&lt;li&gt;事务A获取了数据的写锁，事务B想读取对应的数据，事务B也必须等到事务Ａ提交或中止后方可进行读取。&lt;/li&gt;
&lt;li&gt;事务A获取了数据的写锁，事务B想写对应的数据，事务B也必须等到事务Ａ提交或中止后方可进行写入操作。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;由上面三个规则可以看出，&lt;strong&gt;2PL&lt;/strong&gt;提供串行化的访问，它可以防止任何的并发问题，但是由此带来的问题也显而易见，数据库的并发能力大大降低了。&lt;/p&gt;
&lt;h6 id=&quot;共享锁与独占锁&quot;&gt;共享锁与独占锁&lt;/h6&gt;
&lt;p&gt;两阶段锁的逻辑是通过共享锁与独占锁共同来实现的：&lt;br/&gt;如果事务Ａ要读取数据，则必须先获取共享锁。&lt;strong&gt;数据库允许多个事务同时拥有共享锁，但如果另一个事务拥有独占锁，则其他事务要获取共享锁则必须等待。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果事务A要写入数据，则必须先获取独占锁。任何其他事务都不能同时拥有锁，(&lt;strong&gt;无论是共享还是独占&lt;/strong&gt;)因此如果对象上存在任何锁，事务Ａ必须等待。&lt;/p&gt;
&lt;p&gt;如果事务A先读取数据，然后写入数据。&lt;strong&gt;它可以将共享锁升级为独占锁。升级与直接获得独占锁相同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在事务获得锁之后，它必须继续持有锁直到事务结束（提交或中止）。这就是“两阶段”的名称：第一阶段在获取锁时，第二阶段释放锁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于使用了这么多锁，所以很容易发生事务A被卡住等待事务B释放它的锁，反之亦然。这种情况称为&lt;strong&gt;死锁&lt;/strong&gt;。数据库自动检测死锁之后会终止事务，然后重启事务排队。&lt;/p&gt;
&lt;h5 id=&quot;序列化的快照隔离ssi&quot;&gt;序列化的快照隔离（SSI）&lt;/h5&gt;
&lt;p&gt;两阶段锁（2PL）由于采取了悲观的并发控制，不但容易引起死锁，且性能低下。所以接下来我们要来看看&lt;strong&gt;序列化的快照隔离（SSI）&lt;/strong&gt;，它提供了完整的串行化，但是只有很小的性能损失相比两阶段锁。&lt;/p&gt;
&lt;p&gt;当我们以前讨论快照隔离中的并发写问题，是因为事务从数据库读取一些数据，检查读取结果，并决定根据它看到的结果采取一些操作。然而，在快照隔离的情况下，原始查询的结果在事务提交时可能不再是最新的，因为数据可能在此期间进行了修改。所以查询和事务中的写之间可能存在因果依赖关系。&lt;strong&gt;为了提供串行化隔离，数据库可以检测到这种情况，并且终止不合法的事务。&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&quot;检测是否读取旧的数据&quot;&gt;检测是否读取旧的数据&lt;/h6&gt;
&lt;p&gt;快照隔离通常采用多版本并发控制实现，当一个事务读取一个数据库的一致性快照，它忽略了新的写入。为了防止这种异常，数据库需要跟踪事务时读取时是否忽略了另一个事务的写操作，当事务要提交时，数据库检查任何已忽略的写操作。&lt;strong&gt;如果忽略了写操作，则必须中止事务。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么要等到提交时，而不是检测到读取旧数据时就立即终止事务呢？那么，如果事务如果是只读事务，则不需要中止，在事务进行读取时，数据库还不知道该事务是否稍后将执行写入操作。上文Alice与Bob请假的例子可以通过这样的方式避免并发写的问题：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-0c0a7d653b600734.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;检测到读取了旧的数据，事务终止&quot;/&gt;&lt;/p&gt;
&lt;h6 id=&quot;检测影响先前读取的写入&quot;&gt;检测影响先前读取的写入&lt;/h6&gt;
&lt;p&gt;如果并没有检测到读取了旧的数据，仍然有可能出现并发写入的问题。&lt;/p&gt;
&lt;p&gt;所以当事务写入数据库时，它记录读取受影响数据的任何其他事务的索引。&lt;strong&gt;一旦第一个事务是成功提交，其他所有相关的索引事务必须终止。&lt;/strong&gt;通过这样快照隔离的方式，保证了并发写入的安全性。同样是上文的例子，下图暂时了索引终止技术：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-5f7e39b335d909de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;通过事务索引终止了被影响数据的其他事务&quot;/&gt;&lt;/p&gt;
&lt;p&gt;许多工程细节影响算法在实践中的工作效果。跟踪事务的读写的粒度。如果数据库非常详细地跟踪每一个事务的活动，那么它就可以精确地判断哪些事务需要中止，但是这些开销会变得很大。而不太详细的跟踪事务会更快速，但可能导致更多的事务被中止。&lt;strong&gt;相比与两阶段锁，可串行化隔离快照是大有好处的：一个事务不需要阻塞等待另一个事务持有的锁。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;小结&quot;&gt;小结：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;我们在本篇之中总结了数据库事务与隔离运用到的多种策略与技术，希望大家能够更好的认识事务在数据库系统之中的重要意义，并且能够为自己的开发环境运用最恰当的隔离级别。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 13 Feb 2018 10:00:00 +0000</pubDate>
<dc:creator>HappenLee</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/happenlee/p/8447134.html</dc:identifier>
</item>
</channel>
</rss>