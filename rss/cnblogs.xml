<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>kafka 内部原理及实例 - 陈艺馨</title>
<link>http://www.cnblogs.com/lilytao/p/9929466.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lilytao/p/9929466.html</guid>
<description>&lt;p&gt;                                                             kafka介绍&lt;/p&gt;
&lt;p&gt;Kakfa起初是由LinkedIn公司开发的一个分布式的消息系统，它使用Scala编写，后成为Apache的一部分，支持多种客户端语言（C++，JAVA,python）&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;目前越来越多的开源分布式处理系统如Cloudera、Apache Storm、Spark等都支持与Kafka集成。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;具有高水平扩展性、高容错性、访问速度快、分布式等特性&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;                                                           内部原理深度解析&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;1.producer： 生产者发布消息到 kafka 集群。生产者根据指定算法将消息发送到partition中&lt;br/&gt;2.consumer：消费者从 kafka 集群中消费消息。kafka中跟别的消息队列不一样的是consumer端记录offset（偏移量）&lt;br/&gt;3.broker：  每一个broker可以理解为kafka 集群中一台服务器。&lt;br/&gt;4.topic： 　　 kafka 集群的消息类别，即 kafka 是面向 topic 的。&lt;br/&gt;5.partition： 　　 每个 topic 包含一个或多个 partition。 Partition都是有序的，每个个consumer以partition为单位进行消费的。&lt;br/&gt;6.Consumer group：每个 consumer 都属于一个 consumer group，在同一个 consumer group 中的一个 Consumer 不能消费同一个partition，&lt;br/&gt;但不同consumer group Consumer 还是可以消费同一个partition&lt;br/&gt;7.replica： 　　 partition 的副本，保障 partition 的高可用。&lt;br/&gt;8.leader： 　　 replica 中的一个角色， producer 和 consumer 只跟 leader 交互。&lt;br/&gt;9.follower： 　　replica 中的一个角色，从 leader 中复制数据。&lt;br/&gt;10.zookeeper： 　　kafka 通过 zookeeper 管理元数据（meta） 信息，集群管理，Leader 选举&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1525254/201811/1525254-20181108153225644-162370676.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;                                                                              常用命令&lt;/p&gt;
&lt;p&gt;./bin/zookeeper-server-start.sh ./config/zookeeper.properties &amp;amp;      // 起动kafka 之前要先启动zookeeper&lt;br/&gt;./bin/kafka-server-start.sh ./config/server.properties &amp;amp;             //起动kafka&lt;br/&gt;./bin/kafka-server-stop.sh        停掉kafka&lt;br/&gt;./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic topicname    创建tipoc  replication-factor:指有同个备份&lt;br/&gt;./bin/kafka-topics.sh --list --zookeeper localhost:2181   查看tipic&lt;br/&gt;./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic topicnametest    生产端生产消息&lt;br/&gt;./bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic topicnametest --from-beginning   消费者消息消息，从头消费&lt;/p&gt;


&lt;p&gt;                                                                           kafka 实例&lt;/p&gt;
&lt;p&gt;  生产端代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1525254/201811/1525254-20181108154308890-202844084.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;消息端代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1525254/201811/1525254-20181108154411364-2040353525.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;





</description>
<pubDate>Thu, 08 Nov 2018 07:45:00 +0000</pubDate>
<dc:creator>陈艺馨</dc:creator>
<og:description>kafka介绍 Kakfa起初是由LinkedIn公司开发的一个分布式的消息系统，它使用Scala编写，后成为Apache的一部分，支持多种客户端语言（C++，JAVA,python） 目前越来越多的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lilytao/p/9929466.html</dc:identifier>
</item>
<item>
<title>VSCode插件开发全攻略（十）打包、发布、升级 - 我是小茗同学</title>
<link>http://www.cnblogs.com/liuxianan/p/vscode-plugin-publish.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuxianan/p/vscode-plugin-publish.html</guid>
<description>&lt;p&gt;更多文章请戳&lt;a href=&quot;https://www.cnblogs.com/liuxianan/p/vscode-plugin-overview.html&quot;&gt;VSCode插件开发全攻略系列目录导航&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;插件开发完了，如何发布出去分享给他人呢？主要有3种方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;方法一：直接把文件夹发给别人，让别人找到vscode的插件存放目录并放进去，然后重启vscode，一般不推荐；&lt;/li&gt;
&lt;li&gt;方法二：打包成vsix插件，然后发送给别人安装，如果你的插件涉及机密不方便发布到应用市场，可以尝试采用这种方式；&lt;/li&gt;
&lt;li&gt;方法三：注册开发者账号，发布到官网应用市场，这个发布和npm一样是不需要审核的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论是本地打包还是发布到应用市场都需要借助&lt;code&gt;vsce&lt;/code&gt;这个工具。&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;npm i vsce -g&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打包成&lt;code&gt;vsix&lt;/code&gt;文件：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;vsce package&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打包的时候如果没有设置&lt;code&gt;repository&lt;/code&gt;会有提示，所以最好设置一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201810/20181013_211058_449_1867.png&quot; alt=&quot;W1678xH212&quot;/&gt;&lt;/p&gt;
&lt;p&gt;生成好的vsix文件不能直接拖入安装，只能从扩展的右上角选择&lt;code&gt;Install from VSIX&lt;/code&gt;安装：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201810/20181013_211221_454_0291.png&quot; alt=&quot;W956xH688&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio Code的应用市场基于微软自己的&lt;code&gt;Azure DevOps&lt;/code&gt;，插件的身份验证、托管和管理都是在这里。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;要发布到应用市场首先得有应用市场的&lt;code&gt;publisher&lt;/code&gt;账号；&lt;/li&gt;
&lt;li&gt;而要有发布账号首先得有&lt;code&gt;Azure DevOps&lt;/code&gt;组织；&lt;/li&gt;
&lt;li&gt;而创建组织之前，首先得创建&lt;code&gt;Azure&lt;/code&gt;账号；&lt;/li&gt;
&lt;li&gt;创建&lt;code&gt;Azure&lt;/code&gt;账号首先得有&lt;code&gt;Microsoft&lt;/code&gt;账号；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;是不是有点晕，梳理一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个Microsoft账号可以创建多个&lt;code&gt;Azure&lt;/code&gt;组织；&lt;/li&gt;
&lt;li&gt;一个组织可以创建多个&lt;code&gt;publisher&lt;/code&gt;账号；&lt;/li&gt;
&lt;li&gt;同时一个组织可以创建多个&lt;code&gt;PAT&lt;/code&gt;（&lt;code&gt;Personal Access Token&lt;/code&gt;，个人访问令牌）；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;注册账号&quot;&gt;注册账号&lt;/h2&gt;
&lt;p&gt;首先访问 &lt;a href=&quot;https://login.live.com/&quot; class=&quot;uri&quot;&gt;https://login.live.com/&lt;/a&gt; 登录你的&lt;code&gt;Microsoft&lt;/code&gt;账号，没有的先注册一个：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201810/20181013_214258_739_0257.png&quot; alt=&quot;W579xH482&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后访问： &lt;a href=&quot;https://aka.ms/SignupAzureDevOps&quot; class=&quot;uri&quot;&gt;https://aka.ms/SignupAzureDevOps&lt;/a&gt; ，如果你从来没有使用过Azure，那么会看到如下提示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201810/20181013_214409_099_0799.png&quot; alt=&quot;W479xH330&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击继续，默认会创建一个以邮箱前缀为名的组织。&lt;/p&gt;
&lt;h2 id=&quot;创建令牌&quot;&gt;创建令牌&lt;/h2&gt;
&lt;p&gt;默认进入组织的主页后，点击右上角的&lt;code&gt;Security&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201810/20181013_214712_447_4540.png&quot; alt=&quot;W748xH607&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击创建新的个人访问令牌，这里特别要注意&lt;code&gt;Organization&lt;/code&gt;要选择&lt;code&gt;all accessible organizations&lt;/code&gt;，&lt;code&gt;Scopes&lt;/code&gt;要选择&lt;code&gt;Full access&lt;/code&gt;，否则后面发布会失败。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201810/20181013_215608_127_6001.png&quot; alt=&quot;W639xH502&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建令牌成功后你需要本地记下来，因为网站是不会帮你保存的。&lt;/p&gt;
&lt;h2 id=&quot;创建发布账号&quot;&gt;创建发布账号&lt;/h2&gt;
&lt;p&gt;获得个人访问令牌后，使用&lt;code&gt;vsce&lt;/code&gt;以下命令创建新的发布者：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;vsce create-publisher your-publisher-name&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;your-publisher-name&lt;/code&gt;必须是字母数字下划线，这是全网唯一的账号，然后会依次要求输入昵称、邮箱、令牌：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201810/20181013_221104_009_6828.png&quot; alt=&quot;W1200xH294&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建成功后会默认登录这个账号，接下来你可以直接发布了，当然，如果你是在其它地方创建的，可以试用&lt;code&gt;vsce login your-publisher-name&lt;/code&gt;来登录。&lt;/p&gt;
&lt;p&gt;除了用命令之外，你还可以使用网页版创建发布账号：&lt;a href=&quot;https://marketplace.visualstudio.com/manage&quot; class=&quot;uri&quot;&gt;https://marketplace.visualstudio.com/manage&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;发布&quot;&gt;发布&lt;/h2&gt;
&lt;p&gt;发布很简单：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;vsce publish&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201810/20181013_221636_405_8062.png&quot; alt=&quot;W1092xH254&quot;/&gt;&lt;/p&gt;
&lt;p&gt;发布成功后大概需要过几分钟才能在应用市场搜到。过几分钟就可以访问网页版的插件主页：&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sxei.vscode-plugin-demo&quot; class=&quot;uri&quot;&gt;https://marketplace.visualstudio.com/items?itemName=sxei.vscode-plugin-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201810/20181013_221942_272_1738.png&quot; alt=&quot;W646xH447&quot;/&gt;&lt;/p&gt;
&lt;p&gt;vscode里面也能搜到了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.haoji.me/201810/20181013_222332_214_5966.png&quot; alt=&quot;W738xH674&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;发布注意事项&quot;&gt;发布注意事项&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;README.md&lt;/code&gt;文件默认会显示在插件主页；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;README.md&lt;/code&gt;中的资源必须全部是&lt;code&gt;HTTPS&lt;/code&gt;的，如果是&lt;code&gt;HTTP&lt;/code&gt;会发布失败；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CHANGELOG.md&lt;/code&gt;会显示在变更选项卡；&lt;/li&gt;
&lt;li&gt;如果代码是放在git仓库并且设置了repository字段，发布前必须先提交git，否则会提示&lt;code&gt;Git working directory not clean&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;另外，如前面所说，如果&lt;code&gt;Organization&lt;/code&gt;没有选择&lt;code&gt;all accessible organizations&lt;/code&gt;，或者&lt;code&gt;Scopes&lt;/code&gt;没有选择&lt;code&gt;Full access&lt;/code&gt;，发布的时候可能会报如下错误：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;Error: Failed Request: Unauthorized(401) - https://marketplace.visualstudio.com/_apis/gallery
Be sure to use a Personal Access Token which has access to **all accessible accounts**.
See https://code.visualstudio.com/docs/tools/vscecli#_common-questions for more information.&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;增量发布&quot;&gt;增量发布&lt;/h3&gt;
&lt;p&gt;版本号：&lt;code&gt;major.minor.patch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果想让发布之后版本号的patch自增，例如：&lt;code&gt;1.0.2&lt;/code&gt; -&amp;gt; &lt;code&gt;1.0.3&lt;/code&gt;，可以这样：&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;vsce publish patch&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行这个命令后会自动修改&lt;code&gt;package.json&lt;/code&gt;里面的版本号。同理，&lt;code&gt;vsce publish minor&lt;/code&gt;也是可以的。&lt;/p&gt;
&lt;h2 id=&quot;取消发布&quot;&gt;取消发布&lt;/h2&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;vsce unpublish (publisher name).(extension name)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;更新&quot;&gt;更新&lt;/h2&gt;
&lt;p&gt;如果修改了插件代码想要重新发布，只需要修改版本号然后重新执行&lt;code&gt;vsce publish&lt;/code&gt;即可。&lt;/p&gt;

&lt;h2 id=&quot;发布到了应用市场&quot;&gt;发布到了应用市场&lt;/h2&gt;
&lt;p&gt;如果发布到了应用市场，那么一般来说会自动检测有没有新版本，有的话会自动无感知升级，但具体什么时候会去检测我还没有研究过，已经确定的是在扩展面板搜索插件名字会自动检测，重启vscode也会检测。&lt;/p&gt;
&lt;h2 id=&quot;如果是本地打包&quot;&gt;如果是本地打包&lt;/h2&gt;
&lt;p&gt;如果是打包成&lt;code&gt;vsix&lt;/code&gt;，那么只能自己实现升级检测功能呢，通过对比服务器上某个文件的版本号，具体我就不细讲了。&lt;/p&gt;
</description>
<pubDate>Thu, 08 Nov 2018 07:26:00 +0000</pubDate>
<dc:creator>我是小茗同学</dc:creator>
<og:description>更多文章请戳</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuxianan/p/vscode-plugin-publish.html</dc:identifier>
</item>
<item>
<title>scrapy爬虫框架 - 用心改变人生</title>
<link>http://www.cnblogs.com/ccmldl/p/9928984.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ccmldl/p/9928984.html</guid>
<description>&lt;p&gt;　　这是我近期学习的一些内容，可能不仅仅局限于scrapy爬虫框架，还会有很多知识的扩展。写的可能不是那么有条理，想到什么就写什么吧，毕竟也是自己以后深入学习的基础，有些知识说的不够明白欢迎留言，共同学习！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、框架详解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468653/201811/1468653-20181108102516816-85643662.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scrapy是由Twisted写的一个受欢迎的python事件驱动网络框架，它使用的是非阻塞的异步处理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.内部各组件的作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　ScrapyEngine(scrapy引擎)&lt;/strong&gt;：是用来控制整个系统的数据处理流程，并进行事务处理的触发。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;Scheduler(调度器)&lt;/strong&gt;：用来接收引擎发过来的请求，压入队列中，并在引擎再次请求的时候返回。它就像是一个URL的优先队列，由它来决定下一个要抓取的网址是什么，同时在这里会去除重复的网址。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;Downloader(下载器)&lt;/strong&gt;：用于下载网页内容，并将网页内容返回给爬虫(Spiders)(Scrapy下载器是建立在Twisted这个高效的异步模型上的)。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;Spiders(爬虫)&lt;/strong&gt;：爬虫主要是干活的，用于从特定网页中提取自己需要的信息，即所谓的实体(Item)。也可以从中提取URL，让scrapy继续爬取下一个页面。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;Pipeline(项目管道)&lt;/strong&gt;：负责处理爬虫从网页中爬取的实体，主要的功能就是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被送到项目管道，并经过几个特定的次序处理数据。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;Downloader Middlewares(下载器中间件)&lt;/strong&gt;：位于scrapy引擎和下载器之间的框架，主要是处理scrapy引擎与下载器之间的请求及响应。设置代理ip和用户代理可以在这里设置。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;Spider Middlewares(爬虫中间件)&lt;/strong&gt;：位于scrapy引擎和爬虫之间的框架，主要工作是处理爬虫的响应输入和请求输出。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;Scheduler Middlewares(调度中间件)&lt;/strong&gt;：位于scrapy引擎和调度器之间的框架，主要是处理从scrapy引擎发送到调度器的请求和响应。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.Scrapy运行流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　引擎从调度器中取出一个URL用于接下来的抓取&lt;/p&gt;
&lt;p&gt;　　引擎把URL封装成一个请求(Request)传给下载器&lt;/p&gt;
&lt;p&gt;　　下载器把资源下载下来，并封装成一个响应(Response)&lt;/p&gt;
&lt;p&gt;　　爬虫解析Response&lt;/p&gt;
&lt;p&gt;　　解析出的是实体(Item)，则交给项目管道(Pipeline)进行进一步的处理&lt;/p&gt;
&lt;p&gt;　　解析出的是链接(URL)，则把URL交给调度器等待下一步的抓取&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、为什么使用scrapy？爬虫能做什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Scrapy vs requests+beautifulsoup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　首先，requests和beautifulsoup都是库，scrapy是框架；在scrapy框架中可以加入requests和beautifulsoup，它是基于Twisted(异步非阻塞)实现的，性能上有很大的优势；scrapy方便扩展，提供了很多内置的功能；它内置的css和Xpath以及selector提取数据的时候非常高效，beautifulsoup最大的缺点就是慢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.爬虫能做什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　搜索引擎(如百度、Google)、推荐引擎(如今日头条)、机器学习的数据样本、数据分析(如金融数据分析)、舆情分析等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、爬虫基础知识&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.正则表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么使用正则表达式？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　有时候，我们爬取一些网页具体内容时，会发现我们只需要这个网页某个标签的一部分内容，或者这个标签的某个属性的值时，用xpath和css不太好提取数据，这时候我们就需要用到正则表达式去匹配提取。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;re模块简介　&lt;/strong&gt;　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;&lt;img id=&quot;code_img_closed_e34098da-6c7e-4c0a-83e6-daacb3c8faad&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e34098da-6c7e-4c0a-83e6-daacb3c8faad&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e34098da-6c7e-4c0a-83e6-daacb3c8faad&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;re.match函数
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;原型：match(pattern, string, flags=0)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;pattern：匹配的正则表达式
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;string：要匹配的字符串
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;flags：标志位，用于控制正则表达式的匹配方式，值如下
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;re.I： 忽略大小写
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;re.L： 做本地化识别
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;re.M： 多行匹配，只影响^和$，对每一行进行操作
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;re.S： 使.匹配包括换行符在内的所有字符
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;re.U： 根据Unicode字符集解析字符，影响\w \W \b \B
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;re.X： 使我们以更灵活的格式理解正则表达式
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;注意：多个选项同时使用时用&quot;|&quot;隔开，如：re.I|re.L|re.M|re.S|re.U|re.X
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;功能：尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配，成功的话返回None
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; www.baidu.com&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.match(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;www&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.match(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;www&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).span())
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.match(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;www&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wwW.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, flags=&lt;span&gt;re.I))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 返回None&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.match(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;www&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ww.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.match(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;www&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;baidu.www.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.match(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;www&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wwW.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 扫描整个字符串返回从起始位置成功的匹配&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;----------------------------------------------------------&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;re.search函数
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;原型：search(pattern, string, flags=0)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;pattern：匹配的正则表达式
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;string：要匹配的字符串
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;flags：标志位，用于控制正则表达式的匹配方式
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;功能：扫描整个字符串，并返回第一个成功的匹配
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;good man is sunck!sunck is nice&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;---------------------------------------------------------&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;re.findall函数
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;原型：findall(pattern, string, flags=0)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;pattern：匹配的正则表达式
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;string：要匹配的字符串
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;flags：标志位，用于控制正则表达式的匹配方式
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;功能：扫描整个字符串，并返回结果列表
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.findall(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;good man is sunck!sunck is nice&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.findall(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;good man is sunck!Sunck is nice&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, flags=&lt;span&gt;re.I))
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;---------------------------------------------------------&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;re模块&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;常用的一些正则元字符&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;&lt;img id=&quot;code_img_closed_c55b63f6-63c2-4c5f-8488-5714be5f856e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c55b63f6-63c2-4c5f-8488-5714be5f856e&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c55b63f6-63c2-4c5f-8488-5714be5f856e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;121&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;------------------匹配单个字符与数字------------------&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;.             匹配除换行符以外的任意字符
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;*             匹配0个或多个重复的字符，只装饰前面的一个字符    贪婪模式
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;+             匹配1个或者多个重复的字符，只装饰前面的一个字符   贪婪模式
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;?             匹配0个或者1个字符，只装饰前面的一个字符
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;[0123456789]  []是字符集合，表示匹配方括号中所包含的任意一个字符
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;[sunck]       匹配's','u','n','c','k'中的任意一个字符
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;[a-z]         匹配任意小写字母
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;[A-Z]         匹配任意大写字母
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;[0-9]         匹配任意数字，类似[0123456789]
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;[0-9a-zA-Z]   匹配任意的数字和字母
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;[0-9a-zA-Z_]  匹配任意的数字、字母和下划线
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;[^sunck]      匹配除了's','u','n','c','k'这几个字母以外的所有字符，中括号的&quot;^&quot;称为脱字符，表示不匹配集合中的字符
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;[^0-9]        匹配所有的非数字字符
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;\d            匹配所有的数字，效果同[0-9]
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;\D            匹配所有的非数字字符，效果同[^0-9]
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;\w            匹配数字、字母和下划线，效果同[0-9a-zA-Z_]
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;\W            匹配非数字、字母和下划线，效果同[^0-9a-zA-Z_]
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;\s            匹配所有的空白符（空格、换行、回车、换页、制表），效果同[ \r\n\f\t(v)]
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;\S            匹配任意的非空白符，效果同[^ \r\n\f\t(v)]
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[0123456789]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good 3 man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[0123456789]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good man 6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[sunck]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good 3 man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.findall(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[^\d]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good 3 man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;------------------锚字符（边界字符）------------------&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;^             行首匹配，和在[]里的^不是一个意思
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;$             行尾匹配
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;\A            匹配字符串开始，它和^的区别是：\A只匹配整个字符串的开头，即使在re.M模式下也不会匹配它行的行首
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;\Z            匹配字符串结尾，它和$的区别是：\Z只匹配整个字符串的结尾，即使在re.M模式下也不会匹配它行的行尾
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;\b            匹配一个单词的边界，指单词结束的位置能匹配,r'er\b'可以匹配never,不能匹配nerve，也就是-w和-W相邻的时候是边界     不转义的是时候是删除上一个字符
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;\B            匹配非单词的边界，指单词里面的位置能匹配，r'er\B'可以匹配nerve,不能匹配never
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^sunck&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;man$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;er\b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;never&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;er\b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nerve&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;er\B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;never&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;er\B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nerve&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;------------------匹配多个字符------------------&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;说明：下方的x、y、z均为假设的普通字符，n、m均为非负整数，不是正则表达式的元字符
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;(xyz)         匹配小括号内的xyz(作为一个整体去匹配)
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;x?            匹配0个或者1个x
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;x*            匹配0个或者任意多个x,(.* 表示匹配0个或者任意多个字符（换行符除外）)
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;x+            匹配至少一个x
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;x{n}          匹配确定的n个x（n是一个非负整数）
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;x{n,}         匹配至少n个x
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;x{n,m}        匹配至少n个最多m个x，注意：n &amp;lt;= m
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;x|y           匹配的是x或y，|表示或 
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;print(re.findall(r&quot;a.*c|b[\w]{2}$&quot;, 'asacbas'))
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;注意：多个正则表达式相或的时候，匹配过程是从左向右依次尝试匹配，如果左边有一个或者若干个匹配已经把整个字符串匹配完了，
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;那么后面的表达式将不再进行匹配。匹配是从左向右依次使用正则表达式去匹配前面匹配后剩下来的字符串
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.findall(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(sunck)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunckgood is a good man,sunck is a nice man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.findall(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;aaa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 非贪婪匹配（尽可能少的匹配）&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.findall(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;aaabbaaa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 贪婪匹配（尽可能多的匹配）&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.findall(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;aaabbaaaaaaaaaaaa&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 贪婪匹配（尽可能多的匹配）&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 需求，提取sunck----man&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt; str = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good man!sunck is a nice man!sunck is a very handsome man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.findall(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck.*?man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, str))
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;------------------特殊------------------&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;*?  +?  x?  最小匹配  通常都是尽可能多的匹配，可以使用这种方式解决贪婪匹配
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;(?:x)       类似(xyz),但不表示一个组，取消组的缓存，无法通过group()获取其中的组
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;(?P&amp;lt;name&amp;gt;)  给一个组起个别名，group()的时候可以直接使用该名字进行匹配
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;(?P=name)   命名反向引用，可以直接使用前面命名的组
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;(a|b)\1     匿名分组的反向引用，通过组号匹配（aa|bb）
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;(a|b)(c|d)\1\2 (acac|adad|bcbc|bdbd)
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;abc(?=123)  前向断言，匹配前面紧跟着123的abc
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;abc(?!123)  前向断言，匹配前面不能是紧跟着123的abc
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;(?&amp;lt;=123)abc 后向断言，匹配后面紧跟着123的abc
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;(?&amp;lt;!123)abc 后向断言，匹配后面不能是紧跟着123的abc
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注释： /* part1 */ /* part2 */&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.findall(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//*.*/*/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/* part1 */ /* part2 */&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.findall(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;//*.*?/*/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/* part1 */ /* part2 */&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 命名反向引用&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d(?P&amp;lt;first&amp;gt;ab)+(?P=first)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;asagghhdababhjdkfdabjjk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 匿名分组的反向引用，通过组号匹配&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt; m = re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d(a|b)\1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;daa|dbb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; m:
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(m.group())
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; m = re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d(a|b)(c|d)\1\2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dacac|dadad|dbcbc|dbdbd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; m:
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(m.group())
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 前向断言&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt; m = re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc(?=123)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; m:
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(m.group())
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; m = re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc(?!123)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc124&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; m:
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(m.group())
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 后向断言&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt; m = re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(?&amp;lt;=123)abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; m:
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(m.group())
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; m = re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(?&amp;lt;!123)abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; m:
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(m.group())
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; 
&lt;span&gt;109&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;.    通配符，代表一个任意字符
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r'l..e', a))&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt; &lt;span&gt;*    0个或者多个重复的字符，只装饰前面的一个字符   贪婪模式
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r'l.*e', a))&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt; &lt;span&gt;^    以......开头
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r'^I', a))&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt; &lt;span&gt;$    以......结尾
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r'^a.*b$', 'adfgfhb'))&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;+    1个或者多个重复的字符，只装饰前面的一个字符   贪婪模式
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r'^aa+b$', 'aaaa2aab'))&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt; &lt;span&gt;?    0个或者1个字符，只装饰前面的一个字符   可以把贪婪模式转换为非贪婪模式
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r'ab?', 'aaaa2aab'))&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt; &lt;span&gt;{m}    m个字符，只装饰前面的一个字符  
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r'ab{5}', 'aaabbbbba2aab'))&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt; &lt;span&gt;{m,n}    至少m个最多n个字符，只装饰前面的一个字符  
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r'ab{3,5}', 'aaabbbbba2aab'))&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt; &lt;span&gt;{m,}    至少m个字符，只装饰前面的一个字符  
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r'ab{3,}', 'aaabbbbba2aab'))&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt; &lt;span&gt;[]    是一个字符集合，在这里面元字符就失去原来的作用，成为普通字符
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;[^abc]   除了集合中的元素，其他的元素都可以匹配到
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;[^^]     只要不是^都可以匹配到
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;-     表示区间，如果想表示-写到最前面或者最后面[a-],或者使用转义'\'
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r'ab[a-z]', 'aaabbbbba2aab'))&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt; &lt;span&gt;\d{9}$ :表示以\d{9}结尾
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;\d            匹配所有的数字，效果同[0-9]
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;\D            匹配所有的非数字字符，效果同[^0-9]
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;\w            匹配数字、字母和下划线，效果同[0-9a-zA-Z_]
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;\W            匹配非数字、字母和下划线，效果同[^0-9a-zA-Z_]
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &lt;span&gt;\s            匹配所有的空白符（空格、换行、回车、换页、制表），效果同[ \r\n\f\t(v)]
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; &lt;span&gt;\S            匹配任意的非空白符，效果同[^ \r\n\f\t(v)]
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(re.findall(r&quot;a.*c|b[\w]{2}$&quot;, 'asacbas'))&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 注意：多个正则表达式相或的时候，匹配过程是从左向右依次尝试匹配，如果左边有一个或者若干个匹配已经把整个字符串匹配完了，&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 那么后面的表达式将不再进行匹配。匹配是从左向右依次使用正则表达式去匹配前面匹配后剩下来的字符串&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 匹配特殊字符可以使用'\'或者'[]',* + ? [] () {}等特殊字符就变成一个普通字符了&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ret = re.findall(r&quot;d(ab)+&quot;, 'asadacbdababadabs')&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(ret)&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(ret.group(1))&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(ret.group(2))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;元字符&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;&lt;img id=&quot;code_img_closed_210bee53-bb6c-4772-a28f-cf4d3fb60563&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_210bee53-bb6c-4772-a28f-cf4d3fb60563&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_210bee53-bb6c-4772-a28f-cf4d3fb60563&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;107&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;字符串切割
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; str = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck    is a good   man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.split(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt; +&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, str))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;re.finditer函数
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;原型：finditer(pattern, string, flags=0)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;pattern：匹配的正则表达式
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;string：要匹配的字符串
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;flags：标志位，用于控制正则表达式的匹配方式
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;功能：与findall类似，扫描整个字符串，返回的是一个迭代器
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; str1 = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good man!sunck is a nice man!sunck is a handsome man&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; d = re.finditer(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(sunck)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, str1)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         L =&lt;span&gt; next(d)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(L)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; StopIteration as e:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;sunck is a good man 
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;字符串的替换和修改
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;sub(pattern, repl, string, count=0, flags=0)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;subn(pattern, repl, string, count=0, flags=0
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;pattern： 正则表达式（规则）
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;repl：    指定的用来替换的字符串
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;string：  目标字符串
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;count：   最多替换次数
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;flags：   标志位，用于控制正则表达式的匹配方式
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;功能：在目标字符串中以正则表达式的规则匹配字符串，再把他们替换成指定的字符串。可以指定替换的次数，如果不指定，替换所有的匹配字符串 
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;区别：前者返回一个被替换的字符串，后者返回一个元组，第一个元素是被替换的字符串，第二个元素是被替换的次数
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; str2 = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sunck is a good good good man &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.sub(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(good)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nice&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, str2))
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(type(re.sub(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(good)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nice&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, str2)))
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.subn(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(good)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nice&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, str2))
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(type(re.subn(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(good)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nice&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, str2)))
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;分组：
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;概念：除了简单的判断是否匹配之外，正则表达式还有提取子串的功能。用()表示的就是提取出来的分组
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; str3 = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;010-52347654&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; m = re.match(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(?P&amp;lt;first&amp;gt;\d{3})-(?P&amp;lt;last&amp;gt;\d{8})&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, str3)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用序号获取对应组的信息，group(0)一直代表的是原始字符串&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(m.group(0))
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(m.group(1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(m.group(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(m.group(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;last&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(m.group(2&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 查看匹配的各组的情况&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(m.groups())
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; &lt;span&gt;编译：当我们使用正则表达式时，re模块会干两件事
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;1、编译正则表达式，如果正则表达式本身不合法，会报错
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;2、用编译后的正则表达式去匹配对象
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;compile(pattern, flags=0)
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;pattern:要编译的正则表达式
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;flags:标志位，用于控制正则表达式的匹配方式
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt; pat = r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^1(([3578]\d)|(47))\d{8}$&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re.match(pat, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;13600000000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 编译成正则对象&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt; re_telephone =&lt;span&gt; re.compile(pat)
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(re_telephone.match(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;13600000000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; 
&lt;span&gt;76&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re模块调用&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re对象调用&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt; 
&lt;span&gt;79&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re.match(pattern, string, flags=0)&lt;/span&gt;
&lt;span&gt;80&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re_telephone.match(string)&lt;/span&gt;
&lt;span&gt;81&lt;/span&gt; 
&lt;span&gt;82&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re.search(pattern, string, flags=0)&lt;/span&gt;
&lt;span&gt;83&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re_telephone.search(string)&lt;/span&gt;
&lt;span&gt;84&lt;/span&gt; 
&lt;span&gt;85&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re.findall(pattern, string, flags=0)&lt;/span&gt;
&lt;span&gt;86&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re_telephone.findall(string)&lt;/span&gt;
&lt;span&gt;87&lt;/span&gt; 
&lt;span&gt;88&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re.finditer(pattern, string, flags=0)&lt;/span&gt;
&lt;span&gt;89&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re_telephone.finditer(string)&lt;/span&gt;
&lt;span&gt;90&lt;/span&gt; 
&lt;span&gt;91&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re.split(pattern, string, maxsplit=0, flags=0)&lt;/span&gt;
&lt;span&gt;92&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re_telephone.split(string, maxsplit=0)&lt;/span&gt;
&lt;span&gt;93&lt;/span&gt; 
&lt;span&gt;94&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re.sub(pattern, repl, string, count=0, flags=0)&lt;/span&gt;
&lt;span&gt;95&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re_telephone.sub(repl, string, count=0)&lt;/span&gt;
&lt;span&gt;96&lt;/span&gt; 
&lt;span&gt;97&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re.subn(pattern, repl, string, count=0, flags=0)&lt;/span&gt;
&lt;span&gt;98&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; re_telephone.subn(repl, string, count=0)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;re模块深入&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_51a644b3-a1dc-4480-aca4-984d93120afc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_51a644b3-a1dc-4480-aca4-984d93120afc&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_51a644b3-a1dc-4480-aca4-984d93120afc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;JavaScript RegExp 对象
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;RegExp 对象：
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;正则表达式是描述字符模式的对象。正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;语法：var patt=new RegExp(pattern,modifiers);或者var patt=/pattern/modifiers;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;pattern（模式） 描述了表达式的模式
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;modifiers(修饰符) 用于指定全局匹配、区分大小写的匹配和多行匹配
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）。比如，以下是等价的：
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;var re = new RegExp(&quot;\\w+&quot;);
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;var re = /\w+/;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;修饰符:修饰符用于执行区分大小写和全局匹配
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;i    执行对大小写不敏感的匹配。
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;g    执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;m    执行多行匹配。
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;方括号:方括号用于查找某个范围内的字符
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;[abc]    查找方括号之间的任何字符。
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;[^abc]    查找任何不在方括号之间的字符。
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;[0-9]    查找任何从 0 至 9 的数字。
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;[a-z]    查找任何从小写 a 到小写 z 的字符。
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;[A-Z]    查找任何从大写 A 到大写 Z 的字符。
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;[A-z]    查找任何从大写 A 到小写 z 的字符。
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;[adgk]    查找给定集合内的任何字符。
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;[^adgk]    查找给定集合外的任何字符。
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;(red|blue|green)    查找任何指定的选项。
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;元字符:元字符（Metacharacter）是拥有特殊含义的字符
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;.        查找单个字符，除了换行和行结束符。
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;\w        查找单词字符。
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;\W        查找非单词字符。
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;\d        查找数字。
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;\D        查找非数字字符。
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;\s        查找空白字符。
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;\S        查找非空白字符。
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;\b        匹配单词边界。
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;\B        匹配非单词边界。
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;\0        查找 NUL 字符。
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;\n        查找换行符。
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;\f        查找换页符。
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;\r        查找回车符。
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;\t        查找制表符。
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;\v        查找垂直制表符。
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;\xxx    查找以八进制数 xxx 规定的字符。
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;\xdd    查找以十六进制数 dd 规定的字符。
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;\uxxxx    查找以十六进制数 xxxx 规定的 Unicode 字符。
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;量词
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;n+        匹配任何包含至少一个 n 的字符串。
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;n*        匹配任何包含零个或多个 n 的字符串。
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;n?        匹配任何包含零个或一个 n 的字符串。
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;n{X}    匹配包含 X 个 n 的序列的字符串。
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;n{X,Y}    匹配包含 X 至 Y 个 n 的序列的字符串。
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;n{X,}    匹配包含至少 X 个 n 的序列的字符串。
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;n$        匹配任何结尾为 n 的字符串。
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;^n        匹配任何开头为 n 的字符串。
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;?=n        匹配任何其后紧接指定字符串 n 的字符串。
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;?!n        匹配任何其后没有紧接指定字符串 n 的字符串。
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;JavaScript search() 方法
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;定义和用法：
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;语法：string.search(searchvalue)
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;searchvalue：必须。查找的字符串或者正则表达式。
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;返回值：Number（类型）    
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;与指定查找的字符串或者正则表达式相匹配的 String 对象起始位置。
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;JavaScript match() 方法
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;定义和用法：
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;注意： match() 方法将检索字符串 String Object，以找到一个或多个与 regexp 匹配的文本。这个方法的行为在很大程度上有赖于 regexp 是否具有标志 g。
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;语法：string.match(regexp)
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;regexp：    必需。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;返回值：Array（类型）
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。 如果没找到匹配结果返回 null 。
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;JavaScript replace() 方法
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;定义和用法：
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;该方法不会改变原始字符串。
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;语法：string.replace(searchvalue,newvalue)
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;searchvalue：必须。规定子字符串或要替换的模式的 RegExp 对象。请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;newvalue：必需。一个字符串值。规定了替换文本或生成替换文本的函数。
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;返回值：String（类型）    
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的。
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt; &lt;span&gt;JavaScript split() 方法
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;定义和用法：
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;split() 方法用于把一个字符串分割成字符串数组。
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;提示： 如果把空字符串 (&quot;&quot;) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;注意： split() 方法不改变原始字符串。
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;语法：string.split(separator,limit)
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;separator：可选。字符串或正则表达式，从该参数指定的地方分割 string Object。
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;limit：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;返回值：Array（类型）
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 string Object 分割成子串创建的。返回的数组中的字串不包括 separator 自身。
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt; 
&lt;span&gt;122&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;JavaScript compile() 方法
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;定义和用法：
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;compile() 方法用于在脚本执行过程中编译正则表达式。compile() 方法也可用于改变和重新编译正则表达式。
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;语法：RegExpObject.compile(regexp,modifier)
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;regexp：    正则表达式。
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;modifier：规定匹配的类型。&quot;g&quot; 用于全局匹配，&quot;i&quot; 用于区分大小写，&quot;gi&quot; 用于全局区分大小写的匹配。
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; 
&lt;span&gt;132&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt; &lt;span&gt;JavaScript exec() 方法
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;定义和用法：
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;exec() 方法用于检索字符串中的正则表达式的匹配。如果字符串中有匹配的值返回该匹配值，否则返回 null。
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;语法：RegExpObject.exec(string)
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;string：    Required. The string to be searched
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt; r&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt; &lt;span&gt;JavaScript test() 方法
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;定义和用法：
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;test() 方法用于检测一个字符串是否匹配某个模式。如果字符串中有匹配的值返回 true ，否则返回 false。
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;语法：RegExpObject.test(string)
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;参数：
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;string：    必需。要检测的字符串。
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;JavaScript正则表达式&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_6a001e9b-7c35-400c-8c6a-b95fe26288bf&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6a001e9b-7c35-400c-8c6a-b95fe26288bf&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6a001e9b-7c35-400c-8c6a-b95fe26288bf&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; 100--&lt;span&gt;客户必须继续发送请求
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 101--&lt;span&gt;客户要求服务器根据请求转换HTTP协议版本
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 200--交易成功***
&lt;span&gt; 4&lt;/span&gt; 201--&lt;span&gt;提示知道新文件的URL
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 202--&lt;span&gt;接收和处理，但处理未完成
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 203--&lt;span&gt;返回信息不确定或不完整
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 204--&lt;span&gt;请求收到，但返回信息为空
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 205--&lt;span&gt;服务器完成了请求，用户代理必须复位当前已经浏览过的文件
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 206--&lt;span&gt;服务器已经完成了部分用户的GET请求
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 300--&lt;span&gt;请求的资源可在多处得到
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 301--&lt;span&gt;删除请求数据
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 302--&lt;span&gt;在其他地址发现了请求数据
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 303--&lt;span&gt;建议客户访问其他URL或访问方式
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 304--客户端已经执行了GET，但文件为变化***
&lt;span&gt;15&lt;/span&gt; 305--&lt;span&gt;请求的资源必须从服务器指定的地址得到
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 306--&lt;span&gt;前一版本HTTP中使用的代码，现行版本中不再使用
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 307--&lt;span&gt;申明请求的资源临时性删除
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 400--&lt;span&gt;错误请求，如语法错误
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 401--&lt;span&gt;请求授权失败
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 402--&lt;span&gt;保留有效ChargeTo头响应
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 403--&lt;span&gt;请求不允许
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 404--没有发现文件、查询或URL***
&lt;span&gt;23&lt;/span&gt; 405--用户在Request-&lt;span&gt;Line字段定义的方法不允许
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 406--&lt;span&gt;根据用户发送的Accept拖，请求资源不可访问
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 407--&lt;span&gt;类似401，用户必须首先在代理服务器上得到授权
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 408--&lt;span&gt;客户端没有在用户指定的时间内完成请求
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 409--&lt;span&gt;对当前资源状态，请求不能完成
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 410--&lt;span&gt;服务器上不再有此资源且无进一步的参考地址
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 411--服务器拒绝用户定义的Content-&lt;span&gt;Length属性请求
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 412--&lt;span&gt;一个或多个请求头字段在当前请求中错误
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 413--&lt;span&gt;请求的资源大于服务器允许的大小
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 414--&lt;span&gt;请求的资源URL长于服务器允许的长度
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 415--&lt;span&gt;请求资源不支持请求项目格式
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 416--请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-&lt;span&gt;Range请求头字段
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 417--&lt;span&gt;服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 500--服务器产生内部错误***
&lt;span&gt;37&lt;/span&gt; 501--&lt;span&gt;服务器不支持请求的函数
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 502--&lt;span&gt;服务器暂时不可用，有时是为了防止发生系统过载
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 503--&lt;span&gt;服务器过载或暂停维修
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 504--&lt;span&gt;关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 505--服务器不支持或拒绝请求头中指定的HTTP版本
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;状态码&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.深度优先和广度优先遍历算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;深度优先搜索(DepthFirstSearch)&lt;/strong&gt;：深度优先搜索的主要特征就是，假设一个顶点有不少相邻顶点，当我们搜索到该顶点，我们对于它的相邻顶点并不是现在就对所有都进行搜索，而是对一个顶点继续往后搜索，直到某个顶点，它周围相邻顶点都已经被访问过了，这时它就可以返回，对它原来的那个顶点的其余顶点进行搜索。深度优先搜索的实现可以利用递归很简单的实现。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;广度优点搜索(BreadthFirstSearch)&lt;/strong&gt;：广度优先搜索相对于深度优先搜索侧重点不一样，深度优先好比一个人走迷宫，一次只能选定一条路走下去，而广度优先搜索好比是一次能有任意多个人，一次就走到和一个顶点相连的所有未访问过的顶点，然后再从这些顶点出发，继续这个过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.url常见的去重策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　将访问过的url保存到数据库中&lt;/p&gt;
&lt;p&gt;　　将访问过的url保存到set中，只需要o(1)的代价就可以查询url&lt;/p&gt;
&lt;p&gt;　　url经过MD5等方法哈希后保存到set中&lt;/p&gt;
&lt;p&gt;　　用bitmap方法，将访问过的url通过hash函数映射到某一位&lt;/p&gt;
&lt;p&gt;　　bloomfilter方法对bitmap进行改进，多重hash函数降低冲突&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.爬虫与反爬虫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本概念：&lt;/strong&gt;　　&lt;/p&gt;
&lt;p&gt;　　爬虫：自动获取网站数据的程序，关键是批量的获取&lt;/p&gt;
&lt;p&gt;　　反爬虫：使用技术手段防止爬虫程序的方法&lt;/p&gt;
&lt;p&gt;　　误伤：反爬虫技术将普通用户识别为爬虫，如果误伤过高，效果再好也不能用&lt;/p&gt;
&lt;p&gt;　　成本：反爬虫需要的人力和机器成本&lt;/p&gt;
&lt;p&gt;　　拦截：成功拦截爬虫，一般拦截率越高，误伤率越高&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反爬虫的目的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　应对初级爬虫(简单粗暴，不管服务器压力，容易弄挂网站的)、数据保护、失控的爬虫(由于某些情况下，忘记或者无法关闭的爬虫)、商业竞争对手&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;爬虫与反爬虫的对抗过程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1468653/201811/1468653-20181108124323901-1432109955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;防止爬虫被网站禁止的策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　图片验证码、ip访问频率限制、user-agent随机切换&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.提取数据工具&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f2d9cfb3-d458-4c2a-bb31-9ffb8b3dbb15&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f2d9cfb3-d458-4c2a-bb31-9ffb8b3dbb15&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f2d9cfb3-d458-4c2a-bb31-9ffb8b3dbb15&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;article         选取所有article元素的所有子节点
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; /&lt;span&gt;article        选取根元素article
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; article/&lt;span&gt;a       选取所有属于article的子元素的a元素
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; //&lt;span&gt;div           选取所有div子元素(不论出现在文档任何地方)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; article//&lt;span&gt;div    选取所有属于article元素的后代的div元素，不管它出现在article之下的任何位置
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; //@&lt;span&gt;class&lt;/span&gt;&lt;span&gt;        选取所有名为class的属性
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             
&lt;span&gt; 8&lt;/span&gt; /article/div[1&lt;span&gt;]         选取属于article子元素的第一个div元素
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; /article/&lt;span&gt;div[last()]    选取属于article子元素的最后一个div元素
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; /article/div[last()-1&lt;span&gt;]  选取属于article子元素的倒数第二个div元素
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; //&lt;span&gt;div[@lang]            选取所有拥有lang属性的div元素
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; //div[@lang=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;eng&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]      选取所有lang属性为eng的div元素
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             
&lt;span&gt;14&lt;/span&gt; /div/*&lt;span&gt;                  选取属于div元素的所有子节点
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; //*&lt;span&gt;                     选取所有元素
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; //div[@*&lt;span&gt;]                选取所有带属性的title元素
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; //div/a|//div/&lt;span&gt;p         选取所有div元素的a和p元素
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; //span|//&lt;span&gt;ul             选取文档中的span和ul元素
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; article/div/p|//span    选取所有属于article元素的div元素的p元素以及文档中所有的span元素
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;xpath选择器&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_bb37f4e0-8e92-4dea-a578-59dfec8e480b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bb37f4e0-8e92-4dea-a578-59dfec8e480b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bb37f4e0-8e92-4dea-a578-59dfec8e480b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; *&lt;span&gt;                    选择所有节点
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;container           选择id为container的节点&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;.container           选择所有class包含container的节点
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;li a                 选取所有li下的所有a节点
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; ul +&lt;span&gt; p               选择ul后面的第一个p元素
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; div&lt;span&gt;#&lt;/span&gt;&lt;span&gt;container &amp;gt; ul   选取id为container的div的第一个ul子元素&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; ul ~&lt;span&gt; p                        选取与ul相邻的所有p元素
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;a[title]                      选取所有有title属性的a元素
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; a[href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://jobbole.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]  选取所有href属性为jobbole.com值的a元素
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; a[href*=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jobbole&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]            选取所有href属性包含jobbole的a元素
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; a[href^=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]               选取所有href属性值以http开头的a元素
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; a[href$=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]               选取所有href属性值以.jpg结尾的a元素
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; input[type=&lt;span&gt;radio]:checked     选择选中的radio的元素
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; div:&lt;span&gt;not&lt;/span&gt;(&lt;span&gt;#&lt;/span&gt;&lt;span&gt;container)           选取所有id非container的div属性&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; li:nth-child(3&lt;span&gt;)               选取第三个li元素
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; tr:nth-child(2n)              第偶数个tr
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;css选择器&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;6.调试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;scrapy shell  要调试的网址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_49b5de8c-e73f-4e37-b60d-dc54db73b1e0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_49b5de8c-e73f-4e37-b60d-dc54db73b1e0&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_49b5de8c-e73f-4e37-b60d-dc54db73b1e0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; scrapy.cmdline &lt;span&gt;import&lt;/span&gt;&lt;span&gt; execute
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; sys.path.append(os.path.dirname(os.path.abspath(&lt;span&gt;__file__&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; execute([&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scrapy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;crawl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jobbole&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;main.py&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;7.安装开发环境&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_89e454ca-abe0-47f1-935a-b54f7d7970e3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_89e454ca-abe0-47f1-935a-b54f7d7970e3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_89e454ca-abe0-47f1-935a-b54f7d7970e3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;安装mysqlclient
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    windows:pip install mysqlclient
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     linux:sudo apt-get install libmysqlclient-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;安装虚拟环境
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    pip install virtualenv
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    pip install virtualenvwrapper
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;在Windows上运行workon
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     pip install virtualenvwrapper-&lt;span&gt;win
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;项目中安装的包，以及在别的项目中安装这些包
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     pip freeze &amp;gt;&lt;span&gt; requirements.txt
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;8.设置用户代理&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_bdf23835-f1c5-4b05-9172-b135a0fe8350&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bdf23835-f1c5-4b05-9172-b135a0fe8350&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bdf23835-f1c5-4b05-9172-b135a0fe8350&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; fake_useragent &lt;span&gt;import&lt;/span&gt;&lt;span&gt; UserAgent
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;  随机更换user-agent&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RandomUserAgentMiddleware(object):
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, crawler):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         super(RandomUserAgentMiddleware, self).&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         self.ua =&lt;span&gt; UserAgent()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在settings中配置RANDOM_UA_TYPE，可以获得相应浏览器的user-agent&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         self.ua_type = crawler.settings.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RANDOM_UA_TYPE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;random&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)  
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    @classmethod
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; from_crawler(cls, crawler):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cls(crawler)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_request(self, request, spider):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_ua():
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; getattr(self.ua, self.ua_type)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         request.headers.setdefault(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User_Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, get_ua())
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;middlewares.py&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;9.设置ip代理&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48.5&quot;&gt;&lt;img id=&quot;code_img_closed_b4594596-36e1-420c-a4ae-9292da3fade2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b4594596-36e1-420c-a4ae-9292da3fade2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b4594596-36e1-420c-a4ae-9292da3fade2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;92&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; scrapy.selector &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Selector
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; MySQLdb
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; conn = MySQLdb.connect(host=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, user=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, passwd=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ccmldl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, db=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;article_spider&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; cursor =&lt;span&gt; conn.cursor()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; crawl_ips():
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 爬取西刺的免费ip代理&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     headers =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(1, 3476&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         re = requests.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.xicidaili.com/nn/{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(i), headers=&lt;span&gt;headers)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         selector = Selector(text=&lt;span&gt;re.text)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         all_trs = selector.css(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#ip_list tr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         
&lt;span&gt;19&lt;/span&gt;         ip_list =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; tr &lt;span&gt;in&lt;/span&gt; all_trs[1&lt;span&gt;:]:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             speed_str = tr.css(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.bar::attr(title)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).extract_first()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; speed_str:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 speed = float(speed_str.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;秒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)[0])
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             all_texts = tr.css(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;td::text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).extract()
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             ip =&lt;span&gt; all_texts[0]
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             port = all_texts[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             proxy_type = all_texts[5&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            ip_list.append((ip, port, proxy_type, speed))
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; ip_info &lt;span&gt;in&lt;/span&gt;&lt;span&gt; ip_list:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            cursor.execute(
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insert into proxy_ip(ip, port, speed, proxy_type) values ('{0}', '{1}', {2}, '{3}')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                     ip_info[0], ip_info[1], ip_info[3], ip_info[2&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                )
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            )
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            conn.commit()
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GetIP(object):
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; delete_ip(self, ip):
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从数据库中删除无效的ip&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         delete_sql = &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            delete from proxy_ip where ip='{0}'
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;.format(ip)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        cursor.execute(delete_sql)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        conn.commit()
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; judeg_ip(self, ip, port, proxy_type):
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断ip是否可用&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;         http_url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;         proxy_url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}://{1}:{2}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(proxy_type.lower(), ip, port)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             proxy_dict =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: proxy_url
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             response = requests.get(http_url, proxies=&lt;span&gt;proxy_dict)
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; return True&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(&quot;invalid ip and port&quot;)&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;            self.delete_ip(ip)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;             code =&lt;span&gt; response.status_code
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; code &amp;gt;= 200 &lt;span&gt;and&lt;/span&gt; code &amp;lt; 300&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(&quot;effective ip&quot;)&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(&quot;invalid ip and port&quot;)&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt; &lt;span&gt;                self.delete_ip(ip)
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;     
&lt;span&gt;73&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_random_ip(self):
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从数据库中随机获取一个可用的ip&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt;         random_sql = &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt; &lt;span&gt;            select ip, port, proxy_type from proxy_ip order by rand() limit 1
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;         &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt;         result =&lt;span&gt; cursor.execute(random_sql)
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; ip_info &lt;span&gt;in&lt;/span&gt;&lt;span&gt; cursor.fetchall():
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;             ip =&lt;span&gt; ip_info[0]
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;             port = ip_info[1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;             proxy_type = ip_info[2&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;             
&lt;span&gt;84&lt;/span&gt;             judge_res =&lt;span&gt; self.judeg_ip(ip, port, proxy_type)
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; judge_res:
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0}://{1}:{2}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(proxy_type, ip, port)
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.get_random_ip()
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt; 
&lt;span&gt;90&lt;/span&gt; 
&lt;span&gt;91&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt; &lt;span&gt;    crawl_ips()
&lt;/span&gt;&lt;span&gt;93&lt;/span&gt;     get_ip =&lt;span&gt; GetIP()
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(get_ip.get_random_ip())
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;crawl_xici_ip.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_4e8d31ad-3b53-4b7e-b984-9428d2f0a1a4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4e8d31ad-3b53-4b7e-b984-9428d2f0a1a4&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4e8d31ad-3b53-4b7e-b984-9428d2f0a1a4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tools.crawl_xici_ip &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GetIP
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 动态设置ip代理&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RandomProxyMiddleware(object):
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_request(self, request, spider):
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         get_ip =&lt;span&gt; GetIP()
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;         request.meta[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;proxy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = get_ip.get_random_ip()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;middlewares.py&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;四、scrapy进阶开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.selenium(浏览器自动化测试框架)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_465f0cee-5241-4f2a-9743-ae99eb2f2175&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_465f0cee-5241-4f2a-9743-ae99eb2f2175&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_465f0cee-5241-4f2a-9743-ae99eb2f2175&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; scrapy.selector &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Selector
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; browser = webdriver.Chrome(executable_path=r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\谷歌浏览器\Google_Chrome_v68.0.3440.106_x64\chromedriver.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; browser.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.taobao.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; t_selector = Selector(text=&lt;span&gt;browser.page_source)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(t_selector.css(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;).extract())
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     
&lt;span&gt;10&lt;/span&gt; browser.find_element_by_css_selector(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;).send_keys()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; browser.find_element_by_css_selector(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;).click()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 模拟鼠标下滑加载动态页面&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;browser.execute_script(
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;window.scrollTo(0, document.body.scrollHeight); &lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     var lenOfPage=&lt;span&gt;document.body.scrollHeight; 
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; lenOfPage;&lt;span&gt;&quot;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    )
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置chromdriver不加载图片&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; chrome_opt =&lt;span&gt;webdriver.ChromeOptions()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; prefs = {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;profile.managed_default_content_settings.images&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 2&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; chrome_opt.add_experimental_option(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;prefs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: prefs)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; browser =&lt;span&gt; webdriver.Chrome(
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     executable_path=r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\谷歌浏览器\Google_Chrome_v68.0.3440.106_x64\chromedriver.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         chrome_options=&lt;span&gt;chrome_opt
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; browser.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.taobao.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; phantomjs，无界面的浏览器，多进程情况下phantomjs性能会下降很严重&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; browser = webdriver.Phantomjs(executable_path=r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\phantomjs-2.1.1-windows\bin\phantomjs.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; browser.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.taobao.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(browser.page_source)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; browser.quit()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;简单使用&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.将selenium集成到scrapy&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_6f9b5760-eb68-41d1-a486-ef7a39a201e2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6f9b5760-eb68-41d1-a486-ef7a39a201e2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6f9b5760-eb68-41d1-a486-ef7a39a201e2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; selenium &lt;span&gt;import&lt;/span&gt;&lt;span&gt; webdriver
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; scrapy.xlib.pydispatch &lt;span&gt;import&lt;/span&gt;&lt;span&gt; dispatcher
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; scrapy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; signals
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     self.browser = webdriver.Chrome(executable_path=r&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\谷歌浏览器\Google_Chrome_v68.0.3440.106_x64\chromedriver.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     super(JobboleSpider, self).&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 信号的作用：当spider关闭的时候我们做什么事情&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    dispatcher.connect(self.spider_closed, signals.spider_closed)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; spider_closed(self, spider):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当爬虫退出的时候关闭Chrome&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spider closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     self.browser.quit()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;spider&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_b4418193-5f25-4a13-a2f7-2f2340552331&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b4418193-5f25-4a13-a2f7-2f2340552331&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b4418193-5f25-4a13-a2f7-2f2340552331&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; scrapy.http &lt;span&gt;import&lt;/span&gt;&lt;span&gt; HtmlResponse
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过chromdriver请求动态页面&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; process_request(self, request, spider):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; spider.name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;jobbole&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        spider.browser.get(request.url)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;访问：{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(request.url))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; HtmlResponse(url=spider.browser.current_url, body=spider.browser.page_source, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, request=request)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;middlewares&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.scrapy的暂停与重启&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　job_info需要自己在工程中新建好　　&lt;/p&gt;
&lt;p&gt;　　scrapy crawl jobbole -s JOBDIR=job_info/001&lt;/p&gt;
&lt;p&gt;　　暂停的信号：Ctrl+c 需要接着原来的数据爬取就执行上面那句话&lt;/p&gt;
&lt;p&gt;　　如果需要重新爬取：scrapy crawl jobbole -s JOBDIR=job_info/002&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.数据收集(stats collection)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; scrapy.xlib.pydispatch &lt;span&gt;import&lt;/span&gt;&lt;span&gt; dispatcher
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; scrapy &lt;span&gt;import&lt;/span&gt;&lt;span&gt; signals
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JobboleSpider(scrapy.Spider):
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    ...
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 收集伯乐在线所有的404的url以及404页面数&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;      handle_httpstatus_list = [404&lt;span&gt;] 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;          self.fail_urls =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; parse(self, response):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt; response.status == 404&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            self.fail_urls.append(response.url)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             self.crawler.stats.inc_value(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;failed_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;未完待续...&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Nov 2018 06:43:00 +0000</pubDate>
<dc:creator>用心改变人生</dc:creator>
<og:description>这是我近期学习的一些内容，可能不仅仅局限于scrapy爬虫框架，还会有很多知识的扩展。写的可能不是那么有条理，想到什么就写什么吧，毕竟也是自己以后深入学习的基础，有些知识说的不够明白欢迎留言，共同学习</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ccmldl/p/9928984.html</dc:identifier>
</item>
<item>
<title>WebAssembly完全入门——了解wasm的前世今身 - detectiveHLH</title>
<link>http://www.cnblogs.com/detectiveHLH/p/9928915.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/detectiveHLH/p/9928915.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;接触WebAssembly之后，在google上看了很多资料。感觉对WebAssembly的使用、介绍、意义都说的比较模糊和笼统。感觉看了之后收获没有达到预期，要么是文章中的例子自己去实操不能成功，要么就是不知所云、一脸蒙蔽。本着业务催生技术的态度，这边文章就诞生了。前部分主要是对WebAssembly的背景做一些介绍，WebAssembly是怎么出现的，优势在哪儿。如果想直接开始撸代码试试效果，可以直接跳到最后一个&lt;a href=&quot;http://www.cnblogs.com/detectiveHLH/p/9928915.html#WebAssembly实操&quot;&gt;板块&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;webassembly是什么&quot;&gt;WebAssembly是什么？&lt;/h2&gt;
&lt;h3 id=&quot;定义&quot;&gt;定义&lt;/h3&gt;
&lt;p&gt;首先我们给它下个定义。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;WebAssembly 或者 wasm 是一个可移植、体积小、加载快并且兼容 Web 的全新格式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;
&lt;p&gt;当然，我知道，即使你看了定义也不知道WebAssembly到底是什么东西。废话不多说，我们通过一个简单的例子来看看WebAssembly到底是什么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1158320/201811/1158320-20181108142841917-1620766146.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图的左侧是用C++实现的求递归的函数。中间是十六进制的Binary Code。右侧是指令文本。可能有人就问，这跟WebAssembly有个屁的关系？其实，中间的十六进制的Binary Code就是WebAssembly。&lt;/p&gt;
&lt;h3 id=&quot;编译目标&quot;&gt;编译目标&lt;/h3&gt;
&lt;p&gt;大家可以看到，其可写性和可读性差到无法想象。那是因为WebAssembly不是用来给各位用手&lt;strong&gt;一行一行撸&lt;/strong&gt;的代码，WebAssembly是一个&lt;strong&gt;编译目标&lt;/strong&gt;。什么是编译目标？当我们写TypeScript的时候，Webpack最后打包生成的JavaScript文件就是编译目标。可能大家已经猜到了，上图的Binary就是左侧的C++代码经过编译器编译之后的结果。&lt;/p&gt;
&lt;h2 id=&quot;webassembly的由来&quot;&gt;WebAssembly的由来&lt;/h2&gt;
&lt;h3 id=&quot;性能瓶颈&quot;&gt;性能瓶颈&lt;/h3&gt;
&lt;p&gt;在业务需求越来越复杂的现在，前端的开发逻辑越来越复杂，相应的代码量随之变的越来越多。相应的，整个项目的起步的时间越来越长。在性能不好的电脑上，启动一个前端的项目甚至要花上十多秒。这些其实还好，说明前端越来越受到重视，越来越多的人开始进行前端的开发。&lt;/p&gt;
&lt;p&gt;但是除了逻辑复杂、代码量大，还有另一个原因是JavaScript这门语言本身的缺陷，JavaScript没有静态变量类型。这门解释型编程语言的作者Brendan Eich，仓促的创造了这门如果被广泛使用的语言，以至于JavaScript的发展史甚至在某种层面上变成了填坑史。为什么说没有静态类型会降低效率。这会涉及到一些JavaScript引擎的一些知识。&lt;/p&gt;
&lt;h3 id=&quot;静态变量类型所带来的问题&quot;&gt;静态变量类型所带来的问题&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1158320/201811/1158320-20181108142850242-1135104321.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是Microsoft Edge浏览器的JavaScript引擎ChakraCore的结构。我们来看一看我们的JavaScript代码在引擎中会经历什么。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;JavaScript文件会被下载下来。&lt;/li&gt;
&lt;li&gt;然后进入Parser，Parser会把代码转化成AST（抽象语法树）.&lt;/li&gt;
&lt;li&gt;然后根据抽象语法树，Bytecode Compiler字节码编译器会生成引擎能够直接阅读、执行的字节码。&lt;/li&gt;
&lt;li&gt;字节码进入翻译器，将字节码一行一行的翻译成效率十分高的Machine Code.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在项目运行的过程中，引擎会对执行次数较多的function记性优化，引擎将其代码编译成Machine Code后打包送到顶部的Just-In-Time(JIT) Compiler，下次再执行这个function，就会直接执行编译好的Machine Code。但是由于JavaScript的动态变量，上一秒可能是Array，下一秒就变成了Object。那么上一次引擎所做的优化，就失去了作用，此时又要再一次进行优化。&lt;/p&gt;
&lt;h3 id=&quot;asm.js出现&quot;&gt;asm.js出现&lt;/h3&gt;
&lt;p&gt;所以为了解决这个问题，WebAssembly的前身，asm.js诞生了。asm.js是一个Javascript的严格子集，合理合法的asm.js代码一定是合理合法的JavaScript代码，但是反之就不成立。同WebAssembly一样，asm.js不是用来给各位用手&lt;strong&gt;一行一行撸&lt;/strong&gt;的代码，asm.js是一个&lt;strong&gt;编译目标&lt;/strong&gt;。它的可读性、可读性虽然比WebAssembly好，但是对于开发者来说，仍然是无法接受的。&lt;/p&gt;
&lt;p&gt;asm.js强制静态类型，举个例子。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;function asmJs() {
    'use asm';
    
    let myInt = 0 | 0;
    let myDouble = +1.1;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为什么asm.js会有静态类型呢？因为像&lt;code&gt;0 | 0&lt;/code&gt;这样的，代表这是一个Int的数据，而&lt;code&gt;+1.1&lt;/code&gt;则代表这是一个Double的数据。&lt;/p&gt;
&lt;h3 id=&quot;asm.js不能解决所有的问题&quot;&gt;asm.js不能解决所有的问题&lt;/h3&gt;
&lt;p&gt;可能有人有疑问，这问题不是解决了吗？那为什么会有WebAssembly？WebAssembly又解决了什么问题？大家可以再看一下上面的ChakraCore的引擎结构。无论asm.js对静态类型的问题做的再好，它始终逃不过要经过Parser，要经过ByteCode Compiler，而这两步是JavaScript代码在引擎执行过程当中消耗时间最多的两步。而WebAssembly不用经过这两步。这就是WebAssembly比asm.js更快的原因。&lt;/p&gt;
&lt;h3 id=&quot;webassembly横空出世&quot;&gt;WebAssembly横空出世&lt;/h3&gt;
&lt;p&gt;所以在2015年，我们迎来了WebAssembly。WebAssembly是经过编译器编译之后的代码，体积小、起步快。在语法上完全脱离JavaScript，同时具有沙盒化的执行环境。WebAssembly同样的强制静态类型，是C/C++/Rust的编译目标。&lt;/p&gt;
&lt;h2 id=&quot;webassembly的优势&quot;&gt;WebAssembly的优势&lt;/h2&gt;
&lt;h3 id=&quot;webassembly和asm.js性能对比&quot;&gt;WebAssembly和asm.js性能对比&lt;/h3&gt;
&lt;p&gt;下面的图是Unity WebGL使用和不使用WebAssembly的起步时间对比的一个BenchMark，给大家当作一个参考。&lt;br/&gt;可以看到，在FireFox中，WebAssembly和asm.js的性能差异达到了2倍，在Chrome中达到了3倍，在Edge中甚至达到了6倍。通过这些对比也可以从侧面看出，目前所有的主流浏览器都已经支持WebAssembly V1（Node &amp;gt;= 8.0.0）.&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1158320/201811/1158320-20181108143238528-2136196189.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;与javascript做对比&quot;&gt;与JavaScript做对比&lt;/h3&gt;
&lt;p&gt;我自己在一个用&lt;code&gt;create-react-app&lt;/code&gt;新建的项目中，分别对比了WebAssembly版本和原生JavaScript版本的递归无优化的Fibonacci函数，下图是这两个函数在值是45、48、50的时候的性能对比。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1158320/201811/1158320-20181108143257319-1327221268.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看图说话，这就是WebAssembly与JavaScript很实际的一个性能对比。几乎稳定的是JavaScript的两倍。&lt;/p&gt;
&lt;h2 id=&quot;webassembly在大型项目中的应用&quot;&gt;WebAssembly在大型项目中的应用&lt;/h2&gt;
&lt;p&gt;在这里能够举的例子还是很多，比如AutoCAD、GoogleEarth、Unity、Unreal、PSPDKit、WebPack等等。拿其中几个来简单说一下。&lt;/p&gt;
&lt;h3 id=&quot;autocad&quot;&gt;AutoCAD&lt;/h3&gt;
&lt;p&gt;这是一个用于画图的软件，在很长的一段时间是没有Web的版本的，原因有两个，其一，是Web的性能的确不能满足他们的需求。其二，在WebAssembly没有面世之前，AutoCAD是用C++实现的，要将其搬到Web上，就意味着要重写他们所有的代码，这代价十分的巨大。&lt;/p&gt;
&lt;p&gt;而在WebAssembly面世之后，AutoCAD得以利用编译器，将其沉淀了30多年的代码直接编译成WebAssembly，同时性能基于之前的普通Web应用得到了很大的提升。正是这些原因，得以让AutoCAD将其应用从Desktop搬到Web中。&lt;/p&gt;
&lt;h3 id=&quot;google-earth&quot;&gt;Google Earth&lt;/h3&gt;
&lt;p&gt;Google Earth也就是谷歌地球，因为需要展示很多3D的图像，对性能要求十分高，所以采取了一些Native的技术。最初的时候就连Google Chrome浏览器都不支持Web的版本，需要单独下载Google Earth的Destop应用。而在WebAssembly之后呢，谷歌地球推出了Web的版本。而据说下一个可以运行谷歌地球的浏览器是FireFox。&lt;/p&gt;
&lt;h3 id=&quot;unity和unreal游戏引擎&quot;&gt;Unity和Unreal游戏引擎&lt;/h3&gt;
&lt;p&gt;这里给两个油管的链接自己体验一下，大家注意科学上网。&lt;/p&gt;
&lt;h2 id=&quot;webassembly要取代javascript&quot;&gt;WebAssembly要取代JavaScript？&lt;/h2&gt;
&lt;p&gt;答案是否定的，请看下图。&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1158320/201811/1158320-20181108143313036-1857703499.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到这是一个协作关系。WebAssembly是被设计成JavaScript的一个完善、补充，而不是一个替代品。WebAssembly将很多编程语言带到了Web中。但是JavaScript因其不可思议的能力，仍然将保留现有的地位。&lt;/p&gt;
&lt;h2 id=&quot;什么时候使用webassembly&quot;&gt;什么时候使用WebAssembly？&lt;/h2&gt;
&lt;p&gt;说了这么多，我到底什么时候该使用它呢？总结下来，大部分情况分两个点。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对性能有很高要求的App/Module/游戏&lt;/li&gt;
&lt;li&gt;在Web中使用C/C++/Rust/Go的库&lt;br/&gt;举个简单的例子。如果你要实现的Web版本的Ins或者Facebook， 你想要提高效率。那么就可以把其中对图片进行压缩、解压缩、处理的工具，用C++实现，然后再编译回WebAssembly。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;webassembly的几个开发工具&quot;&gt;WebAssembly的几个开发工具&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/AssemblyScript/assemblyscript&quot;&gt;AssemblyScript&lt;/a&gt;。支持直接将TypeScript编译成WebAssembly。这对于很多前端同学来说，入门的门槛还是很低的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kripken/emscripten&quot;&gt;Emscripten&lt;/a&gt;。可以说是WebAssembly的灵魂工具不为过，上面说了很多编译，这个就是那个编译器。将其他的高级语言，编译成WebAssembly。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/WebAssembly/wabt&quot;&gt;WABT&lt;/a&gt;。是个将WebAssembly在字节码和文本格式相互转换的一个工具，方便开发者去理解这个wasm到底是在做什么事。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;webassembly的意义&quot;&gt;WebAssembly的意义&lt;/h2&gt;
&lt;p&gt;在我的个人理解上，WebAssembly并没有要替代JavaScript，一统天下的意思。我总结下来就两个点。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;给了Web更好的性能&lt;/li&gt;
&lt;li&gt;给了Web更多的可能&lt;br/&gt;关于WebAssembly的性能问题，之前也花了很大的篇幅讲过了。而更多的可能，随着WebAssembly的技术越来越成熟，势必会有更多的应用，从Desktop被搬到Web上，这会使本来已经十分强大的Web更加丰富和强大。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;webassembly实操&quot;&gt;WebAssembly实操&lt;/h2&gt;
&lt;p&gt;要进行这个实际操作，你需要安装上文提到过的编译器&lt;a href=&quot;https://github.com/kripken/emscripten&quot;&gt;Emscripten&lt;/a&gt;，然后按照&lt;a href=&quot;http://webassembly.org.cn/getting-started/developers-guide/&quot;&gt;这个&lt;/a&gt;步骤去安装。以下的步骤都默认为你已经安装了Emscripten。&lt;/p&gt;
&lt;h3 id=&quot;webassembly在node中的应用&quot;&gt;WebAssembly在Node中的应用&lt;/h3&gt;
&lt;h4 id=&quot;导入emscripten环境变量&quot;&gt;导入Emscripten环境变量&lt;/h4&gt;
&lt;p&gt;进入到你的emscripten安装目录，执行以下代码。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;source emsdk/emsdk_env.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;新建c文件&quot;&gt;新建C文件&lt;/h4&gt;
&lt;p&gt;用C实现一个求和文件&lt;code&gt;test.c&lt;/code&gt;，如下。&lt;/p&gt;
&lt;pre class=&quot;c&quot;&gt;
&lt;code&gt;int add(int a, int b) {
    return a + b;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;使用emscripten编译c文件&quot;&gt;使用Emscripten编译C文件&lt;/h4&gt;
&lt;p&gt;在同样的目录下执行如下代码。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;emcc test.c -Os -s WASM=1 -s SIDE_MODULE=1 -o test.wasm&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;emcc&lt;/code&gt;就是Emscripten编译器，&lt;code&gt;test.c&lt;/code&gt;是我们的输入文件，&lt;code&gt;-Os&lt;/code&gt;表示这次编译需要优化，&lt;code&gt;-s WASM=1&lt;/code&gt;表示输出wasm的文件，因为默认的是输出asm.js，&lt;code&gt;-s SIDE_MODULE=1&lt;/code&gt;表示就只要这一个模块，不要给我其他乱七八糟的代码，&lt;code&gt;-o test.wasm&lt;/code&gt;是我们的输出文件。&lt;/p&gt;
&lt;p&gt;编译成功之后，当前目录下就会生成&lt;code&gt;test.wasm&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;编写在node中调用的代码&quot;&gt;编写在Node中调用的代码&lt;/h4&gt;
&lt;p&gt;新建一个js文件&lt;code&gt;test.js&lt;/code&gt;。代码如下。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;const fs = require('fs');
let src = new Uint8Array(fs.readFileSync('./test.wasm'));
const env = {
    memoryBase: 0,
    tableBase: 0,
    memory: new WebAssembly.Memory({
        initial: 256
    }),
    table: new WebAssembly.Table({
        initial: 2,
        element: 'anyfunc'
    }),
    abort: () =&amp;gt; {throw 'abort';}
}
WebAssembly.instantiate(src, {env: env})
.then(result =&amp;gt; {
    console.log(result.instance.exports._add(20, 89));
})
.catch(e =&amp;gt; console.log(e));&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;执行test.js&quot;&gt;执行test.js&lt;/h4&gt;
&lt;p&gt;运行以下代码。&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;
&lt;code&gt;node test.js&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后就可以看到输出的结果109了。&lt;/p&gt;
&lt;h3 id=&quot;webassembly在react当中的应用&quot;&gt;WebAssembly在React当中的应用&lt;/h3&gt;
&lt;h4 id=&quot;通过fetch的方法调用&quot;&gt;通过fetch的方法调用&lt;/h4&gt;
&lt;p&gt;直接用fetch的方式。大概的调用方式如下。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;const fibonacciUrl = './fibonacci.wasm';
const {_fibonacci} = await this.getExportFunction(fibonacciUrl);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而&lt;code&gt;getExportFunction&lt;/code&gt;具体代码如下。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;getExportFunction = async (url) =&amp;gt; {
    const env = {
      memoryBase: 0,
      tableBase: 0,
      memory: new WebAssembly.Memory({
        initial: 256
      }),
      table: new WebAssembly.Table({
        initial: 2,
        element: 'anyfunc'
      })
    };
    const instance = await fetch(url).then((response) =&amp;gt; {
      return response.arrayBuffer();
    }).then((bytes) =&amp;gt; {
      return WebAssembly.instantiate(bytes, {env: env})
    }).then((instance) =&amp;gt; {
      return instance.instance.exports;
    });
    return instance;
};&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;通过import-c文件来调用&quot;&gt;通过import C文件来调用&lt;/h4&gt;
&lt;p&gt;先通过Import的方式来引进依赖。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;import wasmC from './add.c';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后进行调用。具体的方式如下。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot;&gt;
&lt;code&gt;wasmC({
  'global': {},
  'env': {
    'memoryBase': 0,
    'tableBase': 0,
    'memory': new WebAssembly.Memory({initial: 256}),
    'table': new WebAssembly.Table({initial: 0, element: 'anyfunc'})
  }
}).then(result =&amp;gt; {
  const exports = result.instance.exports;
  const add = exports._add;
  const fibonacci = exports._fibonacci;
  console.log('C return value was', add(2, 5643));
  console.log('Fibonacci', fibonacci(2));
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;详细的代码在&lt;a href=&quot;https://github.com/detectiveHLH/webassembly-in-react&quot;&gt;这里&lt;/a&gt;，欢迎Star。&lt;/p&gt;
&lt;h2 id=&quot;写在后面&quot;&gt;写在后面&lt;/h2&gt;
&lt;p&gt;如今技术出现的越来越多，但是实际上在工作中能够用到的，越并不是那么多。其实很多大厂所输出的一些技术，都是有业务场景的，有业务做推动。而不是凭空造轮子。所以总结下来适合自己的才是最好的。当然不是说不要了解新技术，了解新技术跟上步伐是十分必要的。我们现在不用，不代表不需要了解。相反，以后再遇到类似的业务场景时，我们就会多一种选择，可以更加从容的对待。&lt;/p&gt;
&lt;h2 id=&quot;关于我&quot;&gt;关于我&lt;/h2&gt;
</description>
<pubDate>Thu, 08 Nov 2018 06:34:00 +0000</pubDate>
<dc:creator>detectiveHLH</dc:creator>
<og:description>前言 接触WebAssembly之后，在google上看了很多资料。感觉对WebAssembly的使用、介绍、意义都说的比较模糊和笼统。感觉看了之后收获没有达到预期，要么是文章中的例子自己去实操不能成</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/detectiveHLH/p/9928915.html</dc:identifier>
</item>
<item>
<title>Android程序员的Flutter学习笔记 - 圣骑士wind</title>
<link>http://www.cnblogs.com/mengdd/p/self-learning-notes-as-an-android-developer.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mengdd/p/self-learning-notes-as-an-android-developer.html</guid>
<description>&lt;p&gt;作为忠实与较资深的Android汪, 最近抽出了一些时间研究了一下Google的亲儿子Flutter, 尚属皮毛, 只能算是个简单的记录吧.&lt;/p&gt;
&lt;p&gt;Google自2017年第一次提出Flutter, 到2018年Beta, 再加之RN的各种风波与问题, 使得Flutter的热度不断上升, 国内不少公司都公布Flutter在其产品中的应用, 如美团, 闲鱼等.&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;Flutter作为跨平台框架, 常常被人拿出来与React Native, 以及Xamarin进行对比, 除了大家都是跨平台框架之外且能达到近乎Native的体验之外, Flutter与这两者的原理大不相同.&lt;/p&gt;
&lt;p&gt;让我们来看看这三者的结构图吧.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/325852/201811/325852-20181108141956636-229415947.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/325852/201811/325852-20181108142002143-9189354.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/325852/201811/325852-20181108142024220-900289616.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可能有一些复杂, 咱大致解释一下.&lt;/p&gt;
&lt;p&gt;React Native跟Xamarin都是基于mapping native代码来实现所谓的Native体验的框架, 只是RN基于JS引擎 + Bridge与native打交道, 并且在运行时进行绑定, 而Xamarin是基于微软的基于Linux的C#虚拟机mono + JNI与native进行通信.&lt;/p&gt;
&lt;p&gt;这里Android与iOS还是有差别的, 如RN在iOS上JS引擎不支持JIT, 会一定程度影响效率, Xamarin在iOS上可以直接编译成iOS平台可以执行的程序, 所以在实际运行起来的性能是一样的, 唯一的差别就是微软得更快的支持API同步.&lt;/p&gt;
&lt;p&gt;对于Flutter来说, 由于他的渲染引擎使用了Skia直绘, 加上基于C++的Dart引擎, 所以在不同平台上没有差别, 加之其实现了Android Material Design与iOS Cupertino两套UI组件, 所以即便是自绘组件, 看起来还是跟原生的一个样子.&lt;/p&gt;
&lt;p&gt;通过对三种跨平台引擎的大致了解, 我们可以看出来, 他们都达到了一定程度的Native体验, 然则各自都有一定的性能损耗, 比如RN的JS引擎加载JS, 以及Bridge通信的损耗, Xamarin Mono虚拟机与Java通信的损耗, 以及Flutter Skia渲染与Native Android渲染的差异等.&lt;/p&gt;
&lt;h2 id=&quot;flutter笔记&quot;&gt;Flutter笔记&lt;/h2&gt;
&lt;h3 id=&quot;如何启动一个app&quot;&gt;如何启动一个app&lt;/h3&gt;
&lt;p&gt;Android需要在Manfest里面指定带有MAIN action与LAUNCHER category的Activity声明, 而Flutter只需要一行.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void main() =&amp;gt; runApp(MyApp());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中MyApp就是一个普通的Widgets(View).&lt;/p&gt;
&lt;h3 id=&quot;view-vs-widgets&quot;&gt;View vs Widgets&lt;/h3&gt;
&lt;p&gt;Flutter没有View, 与之对应的是Widget, 并且分为StatelessWidgets与StatefulWidgets, 前者是个静态View, 后者是动态通过Data来更新的View.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Text(
  'I like Flutter!',
);&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;class StatefulText extends StatefulWidget {
  @override
  State&amp;lt;StatefulWidget&amp;gt; createState() =&amp;gt; _TextState();
}

class _TextState extends State&amp;lt;StatefulText&amp;gt; {
  // Default placeholder text
  String textToShow = &quot;I Like Flutter&quot;;

  void _updateText() {
    setState(() {
      // update the text
      textToShow = &quot;Flutter is Awesome!&quot;;
    });
  }
  @override
  Widget build(BuildContext context) {
      ...invoke _updateText
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实际上是因为StatefulWidgets通过调用&lt;code&gt;State&lt;/code&gt;的&lt;code&gt;setState&lt;/code&gt;方法来触发整个Widgets树的重绘, 并且在重绘之前会调用传进去的&lt;code&gt;(){ ... }&lt;/code&gt;block.&lt;/p&gt;
&lt;h3 id=&quot;怎么写layout-xml到哪里去了.&quot;&gt;怎么写Layout, XML到哪里去了.&lt;/h3&gt;
&lt;p&gt;实际上Flutter没有xml了, 并且是通过Widgets的嵌套来实现一个布局的.&lt;/p&gt;
&lt;p&gt;如:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Center&lt;/code&gt;是一个可以把子View放置在中央的容器.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Row&lt;/code&gt;对应的就是LinearLayout + Horizontal, &lt;code&gt;Column&lt;/code&gt;对应的就是LinearLayout + Vertical, 他们都具备一个属性叫做&lt;code&gt;crossAxisAlignment&lt;/code&gt;, 有点类似&lt;code&gt;gravity&lt;/code&gt;, 来控制子View相对于父View的位置.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expanded&lt;/code&gt;支持一个类似weight的属性, 叫&lt;code&gt;flex&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Container&lt;/code&gt;是一个具有&lt;code&gt;decoration&lt;/code&gt;属性的容器, 可以用来控制背景色, border, margin等等.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stack&lt;/code&gt;有点像是一个特殊的RelatetiveLayout或者ConstraintLayout, &lt;code&gt;children&lt;/code&gt;属性指定了它的子View, 第一个是Base View, &lt;code&gt;alignment&lt;/code&gt;属性指定了后面的子View相对于BaseView的位置, 如&lt;code&gt;alignment: const Alignment(0.6, 0.6)&lt;/code&gt;指定了位于BaseView右下角的位置.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ListTile&lt;/code&gt;是一个特殊的ListItem, 有三个属性, 分别是左边的Icon (leading), 文字 (title), 以及右边的Icon (trailing).&lt;/li&gt;
&lt;li&gt;还有诸如&lt;code&gt;ListView&lt;/code&gt;, &lt;code&gt;GridView&lt;/code&gt;, &lt;code&gt;Card&lt;/code&gt;等等比较熟悉的Widgets.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;另外有一个类似于我们Activity的Widgets:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;叫做&lt;code&gt;MaterialApp&lt;/code&gt;, 可以指定&lt;code&gt;theme&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, 以及子View &lt;code&gt;home&lt;/code&gt;, 还有更重要的页面跳转&lt;code&gt;routes&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;MaterialApp(
      title: 'Welcome to Flutter',
      home: ...,
      routes: &amp;lt;String, WidgetBuilder&amp;gt; ...,
      theme: ThemeData(
        primaryColor: Colors.white
      ),
    )&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还有一个类似于Fragment的:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;叫做&lt;code&gt;Scaffold&lt;/code&gt;, 中文意思是&lt;code&gt;脚手架&lt;/code&gt;, 它包含一个appBar (ActionBar)与一个body, appBar可以指定title与actions (类似于action button的点击事件).&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
        actions: &amp;lt;Widget&amp;gt;[...],
      ),
      body: ...,
    )&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;如何从父view中remove一个元素&quot;&gt;如何从父View中Remove一个元素&lt;/h3&gt;
&lt;p&gt;答案是没有... 因为在Flutter看来, Widgets的树结构是不可以被更改的, 但是如果想更改, 则是通过StatefulWidgets的方法, 通过setState来更改Data, 触发Widgets重绘, 从而替换掉之前的Widgets.&lt;/p&gt;
&lt;h3 id=&quot;喜欢画canvas的同学怎么办&quot;&gt;喜欢画Canvas的同学怎么办?&lt;/h3&gt;
&lt;p&gt;Flutter同样支持, &lt;code&gt;CustomPaint&lt;/code&gt;作为一个 Widgets就支持传入一个实现&lt;code&gt;CustomPainter&lt;/code&gt;抽象类的参数, 而&lt;code&gt;CustomPainter&lt;/code&gt;的抽象方法也类似于Android View的&lt;code&gt;onDraw&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void paint(Canvas canvas, Size size)

bool shouldRepaint(CustomPainter oldDelegate)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;如何自定义view&quot;&gt;如何自定义View&lt;/h3&gt;
&lt;p&gt;不用继承, 而使用类似Android ViewGroup的办法, 通过组合(composing)与封装的方法来实现, 通过小Widgets组合成需要的新Widgets.&lt;/p&gt;
&lt;h3 id=&quot;页面跳转怎么办-四大组件之一的intent跑哪里去了&quot;&gt;页面跳转怎么办, 四大组件之一的Intent跑哪里去了&lt;/h3&gt;
&lt;p&gt;貌似在讲类似于Activity的&lt;code&gt;MaterialApp&lt;/code&gt;的时候剧透了...&lt;/p&gt;
&lt;p&gt;就是使用&lt;code&gt;Navigator&lt;/code&gt;与&lt;code&gt;Routes&lt;/code&gt;来实现界面跳转, 实际上是整个Widgets的替换.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;routes: &amp;lt;String, WidgetBuilder&amp;gt; {
      '/a': (BuildContext context) =&amp;gt; MyPage(title: 'page A'),
      '/b': (BuildContext context) =&amp;gt; MyPage(title: 'page B'),
      '/c': (BuildContext context) =&amp;gt; MyPage(title: 'page C'),
    }
    
Navigator.of(context).pushNamed('/b');&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;如何处理外部的intent&quot;&gt;如何处理外部的Intent&lt;/h3&gt;
&lt;p&gt;实际上还是需要在Flutter App的Android壳子中注册这个filter, 然后在FlutterActivity中拿到存下来,&lt;/p&gt;
&lt;p&gt;FlutterView初始化后再通过Bridge, 官方叫&lt;code&gt;MethodChannel&lt;/code&gt;从Java里获取,进行下一步逻辑.&lt;/p&gt;
&lt;p&gt;可以看个简单的例子.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;new MethodChannel(getFlutterView(), &quot;app.channel.shared.data&quot;).setMethodCallHandler(
      new MethodCallHandler() {
        @Override
        public void onMethodCall(MethodCall call, MethodChannel.Result result) {
          if (call.method.contentEquals(&quot;getSharedText&quot;)) {
            result.success(sharedText);
            sharedText = null;
          }
        }
      });
      
      
getSharedText() async {
    var sharedData = await platform.invokeMethod(&quot;getSharedText&quot;);
    if (sharedData != null) {
      setState(() {
        dataShared = sharedData;
      });
    }
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;常用的startactivityforresult怎么办.&quot;&gt;常用的startActivityForResult怎么办.&lt;/h3&gt;
&lt;p&gt;这个Flutter有完全对应的办法, 而且用起来很方便, 结合之前说的页面跳转:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Map xxx = await Navigator.of(context).pushNamed('/xxx');


Navigator.of(context).pop({xxx});
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;异步怎么办-runonuithread哪里去了&quot;&gt;异步怎么办, runOnUiThread()哪里去了&lt;/h3&gt;
&lt;p&gt;Flutter有点像JS, 是一个单线程模式, 所以只是通过模拟来构建简单的异步, 关键字就是类似于kotlin coroutines一样, 通过&lt;code&gt;await&lt;/code&gt;+&lt;code&gt;async&lt;/code&gt;来处理.&lt;/p&gt;
&lt;p&gt;如:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;loadData() async {
    response = await http.get(xxx);
    setState(() {xxx});
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是由于它的单线程, 所以无法做很长的阻塞操作, 像http请求的延迟正常情况可能都是毫秒级的, 但是数据的处理等, 可能就得秒级了.&lt;/p&gt;
&lt;p&gt;这也是RN在线程方面的做android程序的一个痛点, Flutter采用了比较容易想到的曲线救国的办法, 提供了一个叫&lt;code&gt;Isolate&lt;/code&gt;的对象, 它实际是一个基于socket的数据通道, 相当于把数据放在一个独立的进程进行处理, 然后再通过socket发送回程序进程, 还记得进程间通信办法之一的&lt;code&gt;管道&lt;/code&gt;吗...&lt;/p&gt;
&lt;p&gt;具体API可以参考文档&lt;a href=&quot;https://flutter.io/docs/get-started/flutter-for/android-devs&quot;&gt;1...&lt;/a&gt;,&lt;a href=&quot;https://docs.flutter.io/flutter/dart-isolate/Isolate-class.html&quot;&gt;2...&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;flutter-替代okhttp的网络库&quot;&gt;Flutter 替代OkHttp的网络库&lt;/h3&gt;
&lt;p&gt;自带了http库, 直接&lt;code&gt;http.get(url)&lt;/code&gt;, 在线程部分的代码实例里也有涉及.&lt;/p&gt;
&lt;p&gt;通过类似gradle的文件&lt;code&gt;pubspec.yaml&lt;/code&gt;引入.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dependencies:
  ...
  http: ^0.12&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt;表示不升大版本, 并取最新版本, 比gradle的+要范围更小.&lt;/p&gt;
&lt;h3 id=&quot;常见的lceloading-content-error里面的loading怎么show&quot;&gt;常见的LCE(Loading Content Error)里面的Loading怎么show&lt;/h3&gt;
&lt;p&gt;Flutter有一个widget叫做&lt;code&gt;ProgressIndicator&lt;/code&gt;, 比如我们期望有一个转圈圈的Loading界面在数据加载出来之前.&lt;/p&gt;
&lt;p&gt;我们就可以通过StatefulWidgets, 根据数据, 或者List Widgets的个数 (如果是显示一个List的话)来判断是否显示Loading, 使用子类&lt;code&gt;CircularProgressIndicator&lt;/code&gt;, 来替换页面的Widgets.&lt;/p&gt;
&lt;p&gt;当然也是通过setState(() {...})来触发界面刷新的, 可以在initState()内触发加载数据的异步操作.&lt;/p&gt;
&lt;h3 id=&quot;不同分辨率的图片资源怎么放&quot;&gt;不同分辨率的图片资源怎么放&lt;/h3&gt;
&lt;p&gt;这个有点像iOS了, 即有1x,2x,3x:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;images/my_icon.png       // Base: 1.0x image
images/2.0x/my_icon.png  // 2.0x image
images/3.0x/my_icon.png  // 3.0x image&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不一样的一点还需要添加到类似gradle的文件&lt;code&gt;pubspec.yaml&lt;/code&gt;里.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;assets:
 - images/my_icon.jpeg&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;字符串怎么存储&quot;&gt;字符串怎么存储&lt;/h3&gt;
&lt;p&gt;Flutter没有像Android的&lt;code&gt;string.xml&lt;/code&gt;的东西, 目前来说最好的就就是存成静态字符串.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Strings {
  static String welcomeMessage = &quot;Welcome To Flutter&quot;;
}

Text(Strings.welcomeMessage)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;gradle变成什么了&quot;&gt;Gradle变成什么了&lt;/h3&gt;
&lt;p&gt;前面说网络库, 图片资源的时候提到过, 提供了一个叫&lt;code&gt;pubspec.yaml&lt;/code&gt;的文件, 具体支持的规则可以查看&lt;a href=&quot;https://www.dartlang.org/tools/pub/pubspec&quot;&gt;这个文档&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;fragment与activity呢&quot;&gt;Fragment与Activity呢?&lt;/h3&gt;
&lt;p&gt;之前做过类比, 如&lt;code&gt;MaterialApp&lt;/code&gt;有点类似于Activity, 而&lt;code&gt;Scaffold&lt;/code&gt;都点类似Fragment, 实际上他们两个都是Flutter的Widgets, 也就是说其实只有View的概念了.&lt;/p&gt;
&lt;h3 id=&quot;还有生命周期吗&quot;&gt;还有生命周期吗?&lt;/h3&gt;
&lt;p&gt;Flutter有一个叫做&lt;code&gt;WidgetsBinding&lt;/code&gt;的可以提供类似生命周期的回调.&lt;/p&gt;
&lt;p&gt;四种状态&lt;code&gt;inactive&lt;/code&gt; (iOS专用), &lt;code&gt;paused&lt;/code&gt;(相当于onPause, 退后台), &lt;code&gt;resumed&lt;/code&gt;(相当于onPostResume, 到前台), &lt;code&gt;suspending&lt;/code&gt;(android专用, 相当于onStop).&lt;/p&gt;
&lt;p&gt;一般在StatefulWidgets的State中注册与反注册.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;scrollview-vs-listview&quot;&gt;ScrollView vs ListView&lt;/h3&gt;
&lt;p&gt;Flutter没有ScrollView, 合并到了ListView, 通过ListView.builder创建的ListView提供了View复用的逻辑.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ListView.builder(
          itemCount: widgets.length,
          itemBuilder: (BuildContext context, int position) {
            return Text(xxx);
          }))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中itemBuilder有点像Android ListView的getView, 官方文档说它会自动回收Element给你, 但是事实上每次你都需要根据position生成新的Widgets, 所以呢应该是Flutter在内部回收了之前的Widgets并在你重新创建的时候又用上了.&lt;/p&gt;
&lt;p&gt;BTW, 通过ListView构造来显示就不具备这种特性, 所以大量数据需要用Builder.&lt;/p&gt;
&lt;h3 id=&quot;flutter横竖屏怎么玩.&quot;&gt;Flutter横竖屏怎么玩.&lt;/h3&gt;
&lt;p&gt;因为它实际上还是借助了Android程序的壳子, 所以如果AndroidManifect定义了&lt;code&gt;android:configChanges=&quot;orientation|screenSize&quot;&lt;/code&gt;, 则Flutter会自己hanlde.&lt;/p&gt;
&lt;h3 id=&quot;怎么处理gesture&quot;&gt;怎么处理Gesture&lt;/h3&gt;
&lt;p&gt;Flutter提供了&lt;code&gt;GestureDetector&lt;/code&gt;, 它相当于一个Container, 将我们期望接收手势的Widgets放进去, 再实现事件回调就行了.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;GestureDetector(
        child: FlutterLogo(
          size: 200.0,
        ),
        onTap: () {
          print(&quot;tap&quot;);
        },
      )&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它同样支持其他的手势, 如&lt;code&gt;onDoubleTap&lt;/code&gt;等等等.&lt;/p&gt;
&lt;h3 id=&quot;字体怎么弄&quot;&gt;字体怎么弄&lt;/h3&gt;
&lt;p&gt;首先需要在&lt;code&gt;pubspec.yaml&lt;/code&gt;里面配置需要的字体库:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fonts:
   - family: MyCustomFont
     fonts:
       - asset: fonts/MyCustomFont.ttf
       - style: italic&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后在Text的&lt;code&gt;style&lt;/code&gt;属性进行配置.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Text(
        'This is a custom font text',
        style: TextStyle(fontFamily: 'MyCustomFont'),
      )&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hint哪里去了-错误信息怎么输出&quot;&gt;Hint哪里去了, 错误信息怎么输出&lt;/h3&gt;
&lt;p&gt;对于输入框的Hint基本一致, 可能就是换了个名字, 一看便知.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;TextField(
    decoration: InputDecoration(hintText: &quot;This is a hint&quot;, errorText: _getErrorText()),
  )&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;Flutter在视图渲染上另辟蹊径, 性能优势凸显, 在跨平台框架属于一匹黑马, 又有Google撑腰, 值得在Mobile勤耕多年的同学入手.&lt;/p&gt;
&lt;p&gt;由于作者曾经从事过2年的Webkit开发工作, 拜读了Flutter的渲染模式, 很像是Webkit/Chrome/Blink的思路, 通过查证, 起草者确实有大批同样的人, 如果你还没有入坑RN, 或许Flutter可以作为跨平台方案学习的首选哦.&lt;/p&gt;
&lt;p&gt;同样Google自己也有很多Plugin去支持更多扩展功能, 如GPS, Camera, SharePreference, Database. 还例如Firebase这种亲儿子级的服务也是全面支持Flutter. 这些都可以通过&lt;a href=&quot;https://pub.dartlang.org&quot;&gt;Dartlang&lt;/a&gt;来查询.&lt;/p&gt;
&lt;p&gt;当然也可以自己去开发需要的Plugin来适配需要的功能, 基于的技术就是上面有提的&lt;code&gt;MethodChannel&lt;/code&gt;, NDK的支持也是同样的道理.&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;https://flutter.io/docs/get-started/flutter-for/android-devs&lt;/p&gt;
</description>
<pubDate>Thu, 08 Nov 2018 06:22:00 +0000</pubDate>
<dc:creator>圣骑士wind</dc:creator>
<og:description>Google自2017年第一次提出Flutter, 到2018年Beta, 再加之RN的各种风波与问题, 使得Flutter的热度不断上升, 国内不少公司都公布Flutter在其产品中的应用, 如美团</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mengdd/p/self-learning-notes-as-an-android-developer.html</dc:identifier>
</item>
<item>
<title>强化学习(十二) Dueling DQN - 刘建平Pinard</title>
<link>http://www.cnblogs.com/pinard/p/9923859.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pinard/p/9923859.html</guid>
<description>&lt;p&gt;　　　　在&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/pinard/p/9797695.html&quot;&gt;强化学习(十一) Prioritized Replay DQN&lt;/a&gt;中，我们讨论了对DQN的经验回放池按权重采样来优化DQN算法的方法，本文讨论另一种优化方法，Dueling DQN。本章内容主要参考了ICML 2016的&lt;a href=&quot;https://icml.cc/2016/tutorials/deep_rl_tutorial.pdf&quot; target=&quot;_blank&quot;&gt;deep RL tutorial&lt;/a&gt;和Dueling DQN的论文&amp;lt;Dueling Network Architectures for Deep Reinforcement Learning&amp;gt;(ICML 2016)。&lt;/p&gt;

&lt;p&gt;　　　　在前面讲到的DDQN中，我们通过优化目标Q值的计算来优化算法，在Prioritized Replay DQN中，我们通过优化经验回放池按权重采样来优化算法。而在Dueling DQN中，我们尝试通过优化神经网络的结构来优化算法。&lt;/p&gt;
&lt;p&gt;　　　　具体如何优化网络结构呢？Dueling DQN考虑将Q网络分成两部分，第一部分是仅仅与状态$S$有关，与具体要采用的动作$A$无关，这部分我们叫做价值函数部分，记做$V(S,w,\alpha)$,第二部分同时与状态状态$S$和动作$A$有关，这部分叫做优势函数(Advantage Function)部分,记为$A(S,A,w,\beta)$,那么最终我们的价值函数可以重新表示为：$$Q(S,A, w, \alpha, \beta) = V(S,w,\alpha) + A(S,A,w,\beta)$$&lt;/p&gt;
&lt;p&gt;　　　　其中，$w$是公共部分的网络参数，而$\alpha$是价值函数独有部分的网络参数，而$\beta$是优势函数独有部分的网络参数。&lt;/p&gt;

&lt;p&gt;　　　　由于Q网络的价值函数被分为两部分，因此Dueling DQN的网络结构也和之前的DQN不同。为了简化算法描述，这里不使用原论文的CNN网络结构，而是使用前面文中用到的最简单的三层神经网络来描述。是否使用CNN对Dueling DQN算法本身无影响。&lt;/p&gt;
&lt;p&gt;　　　　在前面讲到的DDQN等DQN算法中，我使用了一个简单的三层神经网络：一个输入层，一个隐藏层和一个输出层。如下左图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1042406/201811/1042406-20181107202017462-788522227.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　　　而在Dueling DQN中，我们在后面加了两个子网络结构，分别对应上面上到价格函数网络部分和优势函数网络部分。对应上面右图所示。最终Q网络的输出由价格函数网络的输出和优势函数网络的输出线性组合得到。&lt;/p&gt;
&lt;p&gt;　　　　我们可以直接使用上一节的价值函数的组合公式得到我们的动作价值，但是这个式子无法辨识最终输出里面$V(S,w,\alpha)$和$A(S,A,w,\beta)$各自的作用，为了可以体现这种可辨识性(identifiability),实际使用的组合公式如下：$$Q(S,A, w, \alpha, \beta) = V(S,w,\alpha) + (A(S,A,w,\beta) - \frac{1}{\mathcal{A}}\sum\limits_{a' \in \mathcal{A}}A(S,a', w,\beta))$$&lt;/p&gt;
&lt;p&gt;　　　　其实就是对优势函数部分做了中心化的处理。以上就是Duel DQN的主要算法思路。由于它仅仅涉及神经网络的中间结构的改进，现有的DQN算法可以在使用Duel DQN网络结构的基础上继续使用现有的算法。由于算法主流程和其他算法没有差异，这里就单独讲Duel DQN的算法流程了。&lt;/p&gt;

&lt;p&gt;　　　　下面我们用一个具体的例子来演示Dueling DQN的应用。仍然使用了OpenAI Gym中的CartPole-v0游戏来作为我们算法应用。CartPole-v0游戏的介绍参见&lt;a href=&quot;https://github.com/openai/gym/wiki/CartPole-v0&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。它比较简单，基本要求就是控制下面的cart移动使连接在上面的pole保持垂直不倒。这个任务只有两个离散动作，要么向左用力，要么向右用力。而state状态就是这个cart的位置和速度， pole的角度和角速度，4维的特征。坚持到200分的奖励则为过关。&lt;/p&gt;
&lt;p&gt;　　　　这个实例代基于Nature DQN，并将网络结构改为上图中右边的Dueling DQN网络结构，完整的代码参见我的github: https://github.com/ljpzzz/machinelearning/blob/master/reinforcement-learning/duel_dqn.py&lt;/p&gt;
&lt;p&gt; 　　　　这里我们重点关注Dueling DQN和Nature DQN的代码的不同之处。也就是网络结构定义部分，主要的代码如下，一共有两个相同结构的Q网络，每个Q网络都有状态函数和优势函数的定义，以及组合后的Q网络输出，如代码红色部分：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;def&lt;/span&gt;&lt;span&gt; create_Q_network(self):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; input layer&lt;/span&gt;
    self.state_input = tf.placeholder(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;float&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, [None, self.state_dim])
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; network weights&lt;/span&gt;
    with tf.variable_scope(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_net&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        W1 &lt;/span&gt;= self.weight_variable([self.state_dim,20&lt;span&gt;])
        b1 &lt;/span&gt;= self.bias_variable([20&lt;span&gt;])

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; hidden layer 1&lt;/span&gt;
        h_layer_1 = tf.nn.relu(tf.matmul(self.state_input,W1) +&lt;span&gt; b1)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; hidden layer  for state value&lt;/span&gt;
&lt;span&gt;        with tf.variable_scope('Value'):
          W21= self.weight_variable([20,1])
          b21 = self.bias_variable([1])
          self.V = tf.matmul(h_layer_1, W21) + b21

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; hidden layer  for action value&lt;/span&gt;
&lt;span&gt;        with tf.variable_scope('Advantage'):
          W22 = self.weight_variable([20,self.action_dim])
          b22 = self.bias_variable([self.action_dim])
          self.A = tf.matmul(h_layer_1, W22) + b22

          &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Q Value layer&lt;/span&gt;
          &lt;span&gt;self.Q_value = self.V + (self.A - tf.reduce_mean(self.A, axis=1, keep_dims=&lt;/span&gt;&lt;span&gt;&lt;span&gt;True))&lt;/span&gt;

    with tf.variable_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;target_net&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        W1t &lt;/span&gt;= self.weight_variable([self.state_dim,20&lt;span&gt;])
        b1t &lt;/span&gt;= self.bias_variable([20&lt;span&gt;])

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; hidden layer 1&lt;/span&gt;
        h_layer_1t = tf.nn.relu(tf.matmul(self.state_input,W1t) +&lt;span&gt; b1t)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; hidden layer  for state value&lt;/span&gt;
&lt;span&gt;        with tf.variable_scope('Value'):
          W2v = self.weight_variable([20,1])
          b2v = self.bias_variable([1])
          self.VT = tf.matmul(h_layer_1t, W2v) + b2v

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; hidden layer  for action value&lt;/span&gt;
&lt;span&gt;        with tf.variable_scope('Advantage'):
          W2a = self.weight_variable([20,self.action_dim])
          b2a = self.bias_variable([self.action_dim])
          self.AT = tf.matmul(h_layer_1t, W2a) + b2a

          &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Q Value layer&lt;/span&gt;
         &lt;span&gt; self.target_Q_value = self.VT + (self.AT - tf.reduce_mean(self.AT, axis=1, keep_dims=True))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　其余部分代码和Nature DQN基本相同。当然，我们可以也在前面DDQN，Prioritized Replay DQN代码的基础上，把网络结构改成上面的定义，这样Dueling DQN也可以起作用。&lt;/p&gt;

&lt;p&gt;　　　　DQN系列我花了5篇来讲解，一共5个前后有关联的算法：DQN(NIPS2013), Nature DQN, DDQN, Prioritized Replay DQN和Dueling DQN。目前使用的比较主流的是后面三种算法思路，这三种算法思路也是可以混着一起使用的，相互并不排斥。&lt;/p&gt;
&lt;p&gt;　　　　当然DQN家族的算法远远不止这些，还有一些其他的DQN算法我没有详细介绍，比如使用一些较复杂的CNN和RNN网络来提高DQN的表达能力，又比如改进探索状态空间的方法等，主要是在DQN的基础上持续优化。&lt;/p&gt;
&lt;p&gt;　　　　DQN算是深度强化学习的中的主流流派，代表了Value-Based这一大类深度强化学习算法。但是它也有自己的一些问题，就是绝大多数DQN只能处理离散的动作集合，不能处理连续的动作集合。虽然NAF DQN可以解决这个问题，但是方法过于复杂了。而深度强化学习的另一个主流流派Policy-Based而可以较好的解决这个问题，从下一篇我们开始讨论Policy-Based深度强化学习。&lt;/p&gt;

&lt;p&gt;（欢迎转载，转载请注明出处。欢迎沟通交流： liujianping-ok@163.com）&lt;/p&gt;
</description>
<pubDate>Thu, 08 Nov 2018 06:04:00 +0000</pubDate>
<dc:creator>刘建平Pinard</dc:creator>
<og:description>在强化学习(十一) Prioritized Replay DQN中，我们讨论了对DQN的经验回放池按权重采样来优化DQN算法的方法，本文讨论另一种优化方法，Dueling DQN。本章内容主要参考了I</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pinard/p/9923859.html</dc:identifier>
</item>
<item>
<title>一步一步实现web程序信息管理系统之二----后台框架实现跳转登陆页面 - 火炎_焱燚</title>
<link>http://www.cnblogs.com/oops-374565452/p/9928619.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/oops-374565452/p/9928619.html</guid>
<description>&lt;h2 id=&quot;springboot&quot;&gt;SpringBoot&lt;/h2&gt;
&lt;p&gt;springboot的目的是为了简化spring应用的开发搭建以及开发过程。内部使用了特殊的处理，使得开发人员不需要进行额外繁锁的xml文件配置的编写，其内部包含很多模块的配置只需要添加maven依赖即可使用，这项功能可谓对开发人员提供了大大的好处。使用springboot只需要简单配置一下就可以完成之前复杂的配置过程。可以到&lt;a href=&quot;https://start.spring.io/&quot; class=&quot;uri&quot;&gt;https://start.spring.io/&lt;/a&gt;此网站上，下载一个最简单的springboot应用，然后一步一步实现自已的应用。&lt;img src=&quot;https://img-blog.csdnimg.cn/20181108104354308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbnRpYW5fbWludHRpYW4=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;可以看出当前的稳定版本为2.1.0，点击Generate Project 按钮，即可下载一个可用的springboot应用。&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181108104508637.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;这个是我下载下来后，双击后出来的。可以看出以工程是一个基于maven的项目。你可以将其解压到任何一个目录下，通过eclipse或其他IDE进行导入后运行，eclipse导入流程为&lt;strong&gt;File-&amp;gt;import-&amp;gt;maven-&amp;gt;existing maven projects，查找到自己的项目目录&lt;/strong&gt;。也可以基于此工程来建立自已的maven项目。&lt;br/&gt;下面以建立自己的maven项目&lt;/p&gt;
&lt;h2 id=&quot;建立自己的springboot项目&quot;&gt;建立自己的springboot项目&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;创建工程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在建立项目时，可以创建一个多模块聚合项目，即在创建项目时选中&lt;img src=&quot;https://img-blog.csdnimg.cn/20181108105416289.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;选择为pom。&lt;br/&gt;创建后的工程结构为&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181108105834244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbnRpYW5fbWludHRpYW4=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181108105845722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbnRpYW5fbWludHRpYW4=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;jar包依赖&lt;br/&gt;打开从springboot官网中下载下来的工程目录，打开pom.xml文件&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.1.0.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
    &amp;lt;/parent&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
    &amp;lt;/properties&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将此段代码复制到 spring-boot-study工程中的pom文件中&lt;br/&gt;将下面的依赖复制到spring-boot-web工程中的pom文件中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;eclipse自动完成项目工程的配置。完成后项目中所有需要依赖的jar包自动配置完成。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;代码编写&lt;br/&gt;将application.properties文件拷贝到spring-boot-study项目的resources目录下。文件中的内容暂时先不要管，编写以下代码&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;@SpringBootApplication
@RestController
public class WebApplication {

    @RequestMapping(&quot;/hello&quot;)
    public String helloWorld() {
        return &quot;Hello World&quot;;
    }
    
    public static void main(String[] args) {
        SpringApplication.run(WebApplication.class, args);
    }
    
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;HelloWold就已经完成后。可以在浏览器中输入localhost:8080/hello即可看到效果&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181108113558669.png&quot; alt=&quot;在这里插入图片描述&quot;/&gt;&lt;br/&gt;springboot默认启动后的端口为8080，但可以在application.properties文件中进行修改。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;server.port=9001&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将端口修改为9001，重新启动项目后，在浏览器中输入入localhost:9001/hello同样可以看到相同的结果。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;整合login界面&lt;br/&gt;现在后台已经有转发功能，具备web浏览功能。但我们需要访问URL为“/”时跳转到登陆界面，即创建好的登陆界面。本人也是在学习过程中，在网上学习好久才发现使用html的话就使用thymeleaf模板就好了。下面就详细来说说如何使用thymeleaf开发html。&lt;br/&gt;在spring-boot-web项目中的pom文件中加上thymeleaf的依赖。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;    &amp;lt;!-- 加入thymeleaf的支持 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但在Spring Boot项目中，一般src/main/resources/static目录用于存放各类静态资源文件，例如css、js和image等。src/main/resources/templates用于存放页面文件，例如html，jsp等。所以在spring-boot-web中的resources目录下创建static目录与templates目录，并将相应的资源文件放置在各自的目录下。&lt;br/&gt;配置thymeleaf&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#thymeleaf
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.cache=false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;html文件修改，增加xmlns:th=&quot;http://www.thymeleaf.org&quot; 属性，资源文件的引入要修改。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;link href=&quot;../static/css/style.css&quot; th:href=&quot;@{/css/style.css}&quot; rel=&quot;stylesheet&quot; /&amp;gt;
&amp;lt;link href=&quot;../static/css/login.css&quot; th:href=&quot;@{/css/login.css}&quot; rel=&quot;stylesheet&quot; /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后编写 java代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Controller
public class IndexController {

    @RequestMapping(&quot;/&quot;)
    public String index() {
        return &quot;login&quot;;
    }
    
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新启动程序，访问localhost:9001/就可成功跳转至login.html登陆界面上。&lt;br/&gt;注：thymeleaf对html标签要求很严格，每一个标签都需要成对出现。&lt;br/&gt;调试过程中遇到下面异常信息&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;org.thymeleaf.exceptions.TemplateInputException: Error resolving template [login], template might not exist or might not be accessible by any of the configured Template Resolvers
    at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
    at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
    at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
    at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) [thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]
    at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) [thymeleaf-spring5-。。。。。。。。。。。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为错将templates写成templatse导致。&lt;/p&gt;
&lt;p&gt;至此实现从后端服务访问到登陆界面的搭建，还没有具体登陆逻辑实现。&lt;br/&gt;下一篇实现登陆业务逻辑。&lt;br/&gt;附上 本篇文章源代码&lt;br/&gt;&lt;a href=&quot;https://download.csdn.net/download/jintian_minttian/10772441&quot;&gt;一步一步实现web程序信息管理系统之二----后台框架实现跳转登陆页面&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 08 Nov 2018 05:52:00 +0000</pubDate>
<dc:creator>火炎_焱燚</dc:creator>
<og:description>一步一步实现web程序信息管理系统之二----后台框架实现跳转登陆页面。进一步实现从后端服务直接跳转到登陆页面上。</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/oops-374565452/p/9928619.html</dc:identifier>
</item>
<item>
<title>Spring知识点总结(四)之SpringAOP基础 - 代理设计模式 - 南岭寒</title>
<link>http://www.cnblogs.com/nanlinghan/p/9928596.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nanlinghan/p/9928596.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;    1. 分析程序中存在的问题(高内聚,低耦合)&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;        通过springIOC DI) 以及注解的使用,成功解决了在程序中层与层之间出现的耦合的问题，但是在很多地方仍然存在非该层应该实现的功能，造成了 无法“高内聚”的现象，同时存在大量存在重复代码，开发效率低下。&lt;br/&gt;         &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;  @Service
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserService {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;                @Autowired
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserDao userDao;   
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;                @Override
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; registUser(User user) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                         System.out.println(&quot;校验权限。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                         System.out.println(&quot;开启事务。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         System.out.println(&quot;记录日志。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                        userDao.addUser(user);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                         System.out.println(&quot;提交事务。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                         System.out.println(&quot;回滚事务&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                        e.printStackTrace();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                @Override
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; upToVIP(User user) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                         System.out.println(&quot;校验权限。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                         System.out.println(&quot;开启事务。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                         System.out.println(&quot;记录日志。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                        userDao.updateUser(user);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                         System.out.println(&quot;提交事务。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                     } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                         System.out.println(&quot;回滚事务&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                        e.printStackTrace();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                     
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                @Override
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeUser(User user) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                         System.out.println(&quot;校验权限。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                         System.out.println(&quot;开启事务。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                         System.out.println(&quot;记录日志。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                        userDao.deleteUser(user.getId());
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                         System.out.println(&quot;提交事务。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                         System.out.println(&quot;回滚事务&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                        e.printStackTrace();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        此时可以通过代理设计模式，将这部分代码提取到代理者中，简化层中的代码。
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         
&lt;span&gt;52&lt;/span&gt;     2&lt;span&gt;. 静态代理模式
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.tedu.staticproxy;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; SJSkill {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; 吃();
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; 唱歌();
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.tedu.staticproxy;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FBB &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; SJSkill{
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; 吃(){
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;                 System.out.println(&quot;fbb吃饭。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; 唱歌(){
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                 System.out.println(&quot;fbb唱歌。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         
&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.tedu.staticproxy;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; JJRStaticProxy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; SJSkill{
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;         
&lt;span&gt;72&lt;/span&gt;             &lt;span&gt;private&lt;/span&gt; FBB fbb = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FBB();
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             
&lt;span&gt;74&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; 吃() {
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;                 System.out.println(&quot;权限认证：你谁啊？？？？&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;                fbb.吃();
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;                 System.out.println(&quot;记录日志：等我，我记一下来访记录&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;         
&lt;span&gt;81&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; 唱歌() {
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;                 System.out.println(&quot;权限认证：你谁啊？？？？&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt;                fbb.唱歌();
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;                 System.out.println(&quot;记录日志：等我，我记一下来访记录&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;         
&lt;span&gt;88&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt;         
&lt;span&gt;90&lt;/span&gt;         &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.tedu.staticproxy;
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt;         &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StaticProxyTest {
&lt;/span&gt;&lt;span&gt;93&lt;/span&gt; &lt;span&gt;            @Test
&lt;/span&gt;&lt;span&gt;94&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test01(){
&lt;/span&gt;&lt;span&gt;95&lt;/span&gt;                 JJRStaticProxy jjr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JJRStaticProxy();
&lt;/span&gt;&lt;span&gt;96&lt;/span&gt; &lt;span&gt;                jjr.吃();
&lt;/span&gt;&lt;span&gt;97&lt;/span&gt; &lt;span&gt;                jjr.唱歌();
&lt;/span&gt;&lt;span&gt;98&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;99&lt;/span&gt;         }        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        静态代理设计模式特点：&lt;br/&gt;            优点：&lt;br/&gt;                结构清晰 易于理解&lt;br/&gt;            缺点：&lt;br/&gt;                如果被代理者有多个方法，则代理者也需要开发多个方法，其中往往存在大量重复代码，仍然存在代码重复。&lt;br/&gt;        &lt;br/&gt;        静态代理设计模式解决了软件分层过程中 额外的功能代码侵入模块的问题，将额外的功能代码提取到了代理者中进行，但是静态代理实现的代理者中存在大量重复的代码，并没有解决代码重复问题。所以在真正开发中--包括spring的底层，基本不会使用静态代理。&lt;br/&gt;        &lt;br/&gt;&lt;strong&gt;&lt;span&gt;    3. 动态代理 - jdk内置的动态代理&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;        在jdk中提供了动态代理实现的工具类，直接使用该工具类就可以创建出代理者，并且可以通过内置的回调函数指定代理在工作时的执行逻辑，从而实现基于jdk原生api的动态代理机制。&lt;br/&gt;&lt;span&gt;            java.lang.reflect&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            类 Proxy&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            java.lang.Object&lt;/span&gt;&lt;br/&gt;&lt;span&gt;            static Object    newProxyInstance(ClassLoader loader, Class&amp;lt;?&amp;gt;[] interfaces, InvocationHandler h)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;                          返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调&lt;/span&gt;用处理程序。&lt;br/&gt;        &lt;br/&gt;        案例：&lt;br/&gt;     &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;       &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.tedu.javaproxy;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;             
&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.InvocationHandler;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Proxy;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JavaProxyTest {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                @Test
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test01(){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 
&lt;span&gt;13&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;被代理者&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                     &lt;span&gt;final&lt;/span&gt; FBB fbb = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FBB();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     
&lt;span&gt;16&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;java动态代理方式 生成fbb的代理者&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                     * classLoader:用来生成代理者类的类加载器，通常可以传入被代理者类的类加载器
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                     * interfaces: 要求生成的代理者实现的接口们，通常就是实现和被代理者相同的接口，保证具有和被代理者相同的方法
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                     * invocationHandler: 用来设定回调函数的回调接口，使用者需要写一个类实现此接口，从而实现其中的invoke方法，
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                     * 在其中编写代码处理代理者调用方法时的回调过程，通常在这里调用真正对象身上的方法，并且在方法之前或之后做额外操作。
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                     SJSkill proxy = (SJSkill) Proxy.newProxyInstance(FBB.&lt;span&gt;class&lt;/span&gt;.getClassLoader(),FBB.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;.getInterfaces()
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                             ,&lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvocationHandler() {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                                @Override
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                                 &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                                 * proxy: 代理者
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                                 * method:当前调用的方法对象  由被代理的方法调用
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                                 * args:挡墙调用的方法的参数数组  方法调用的参数
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                                  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;                                 &lt;span&gt;public&lt;/span&gt; Object invoke(Object proxy, Method method, Object[] args)&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                                     &lt;span&gt;if&lt;/span&gt;(&quot;拍电影&quot;&lt;span&gt;.equals(method.getName())){
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                                         System.out.println(&quot;不好意思，给多少钱不拍了~~&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                                         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                                     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                                         System.out.println(&quot;检验权限。。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                                         Object returnObj =&lt;span&gt; method.invoke(fbb, args);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                                         System.out.println(&quot;记录日志。。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnObj;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;                                    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                                }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                            });
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从此之后，不允许直接调用被代理者身上的方法，而是要通过代理者来调用
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;fbb.吃();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;fbb.唱歌();&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                    proxy.吃();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                    proxy.唱歌();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                    proxy.拍电影();
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;        &lt;br/&gt;        java动态代理的原理图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1176659/201811/1176659-20181108134124583-1304977713.png&quot; alt=&quot;&quot; width=&quot;581&quot; height=&quot;620&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;            &lt;br/&gt;        java动态代理的特点：&lt;br/&gt;            优点：&lt;br/&gt;                不需要像静态代理一样被代理方法都要实现一遍，而只需要在回调函数中进行处理就可以了，重复代码只需编写一次。&lt;br/&gt;            缺点：&lt;br/&gt;                java的动态代理是通过代理者实现和被代理者相同的接口来保证两者具有相同的方法的，如果被代理者想要被代理的方法不属于任何接口，则生成的代理者自然无法具有这个方法，也就无法实现对该方法的代理。&lt;br/&gt;                所以java的动态代理机制是基于接口进行的，受制于要代理的方法是否有接口的支持。&lt;br/&gt;    &lt;br/&gt;   &lt;strong&gt;&lt;span&gt; 4. 动态代理 - 第三方包cglib实现的动态代理&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;        CGLIB是第三方提供的动态代理的实现工具，不管有没有接口都可以实现动态代理。&lt;br/&gt;        CGLIB实现动态代理的原理是 生成的动态代理是被代理者的子类，所以代理者具有和父类即被代理者 相同的方法，从而实现代理。&lt;br/&gt;        &lt;br/&gt;        a. 导入CGLIB相关包&lt;br/&gt;            之前导入的spring包中就包含了CGLIB&lt;br/&gt;                spring-core-3.2.3.RELEASE.jar&lt;br/&gt;        b. 开发CGLIB程序&lt;br/&gt;            案例：&lt;br/&gt;              &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.tedu.cglibproxy;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cglib.proxy.Enhancer;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cglib.proxy.MethodInterceptor;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cglib.proxy.MethodProxy;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 
&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CglibProxyTest {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                    @Test
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test01(){
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                         &lt;span&gt;final&lt;/span&gt; FBB fbb = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FBB();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                         
&lt;span&gt;13&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;增强器&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                         Enhancer enhancer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Enhancer();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                         
&lt;span&gt;16&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定接口 -- 此方法要求生成的动态代理额外实现指定接口们 ，单cglib动态代理不是靠接口实现的，所以可以不设置&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                        enhancer.setInterfaces(fbb.getClass().getInterfaces());
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         
&lt;span&gt;19&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定父类 -- 此处要传入被代理者的类，cglib是通过集成被代理者的类来持有和被代理者相同的方法的，此方法必须设置&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                        enhancer.setSuperclass(fbb.getClass());
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                         
&lt;span&gt;22&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设定回调函数 -- 为增强器设定回调函数，之后通过增强器生成的代理对象调用任何方法都会走到此回调函数中，实现调用真正被代理对象的方法的效果&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                         enhancer.setCallback(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MethodInterceptor() {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                            @Override
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                             &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object intercept(Object proxy, Method method, Object[] args,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                                     MethodProxy methodProxy) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                                 &lt;span&gt;if&lt;/span&gt;(&quot;拍电影&quot;&lt;span&gt;.equals(method.getName())){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                                     System.out.println(&quot;对不起，不拍了~~~&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                                 }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                                     System.out.println(&quot;检查权限。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                                     Object returnObj =&lt;span&gt; method.invoke(fbb, args);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                                     System.out.println(&quot;记录日志。。。&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnObj;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                                }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                        });
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                         
&lt;span&gt;39&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成代理对象&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                         FBB proxy =&lt;span&gt; (FBB) enhancer.create();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                        proxy.吃();
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                        proxy.唱歌();
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                        proxy.拍电影();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CGLIB动态代理原理图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1176659/201811/1176659-20181108134259834-105818572.png&quot; alt=&quot;&quot; width=&quot;653&quot; height=&quot;551&quot;/&gt;&lt;/p&gt;
&lt;p&gt;            CGLIB动态代理的特点：&lt;br/&gt;                优点：无论是否有接口都可以实现动态代理，使用场景基本不受限&lt;br/&gt;  　　　　  缺点：第三方提供的动态代理机制，不是原生的，需要导入第三方开发包才可以使用。&lt;/p&gt;

</description>
<pubDate>Thu, 08 Nov 2018 05:48:00 +0000</pubDate>
<dc:creator>南岭寒</dc:creator>
<og:description>1. 分析程序中存在的问题(高内聚,低耦合) 通过springIOC DI) 以及注解的使用,成功解决了在程序中层与层之间出现的耦合的问题，但是在很多地方仍然存在非该层应该实现的功能，造成了 无法“高</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nanlinghan/p/9928596.html</dc:identifier>
</item>
<item>
<title>Akka-Cluster（2）- distributed pub/sub mechanism 分布式发布/订阅机制 - 雪川大虫</title>
<link>http://www.cnblogs.com/tiger-xc/p/9928384.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiger-xc/p/9928384.html</guid>
<description>&lt;p&gt;&lt;span&gt;   上期我们介绍了cluster singleton，它的作用是保证在一个集群环境里永远会有唯一一个singleton实例存在。具体使用方式是在集群所有节点部署ClusterSingletonManager，由集群中的leader节点选定其中一个节点并指示上面的ClusterSingletonManager运行一个cluster singleton实例。与singleton实例交互则通过即时构建ClusterSingletonProxy实例当作沟通目标。从应用场景来说cluster singleton应该是某种pull模式的应用：我们把singleton当作中央操作协调，比如说管理一个任务清单，多个ClusterSingletonProxy从任务清单中获取（pull）自己应该执行的任务。如果需要实现push模式的任务派送：即由singleton主动通知集群里某种类型的actor执行任务，那么通过ClusterSingletonProxy沟通就不适用了，使用pub/sub方式是一个可行的解决方案。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;distributed pub/sub含两种发布方式：Publish/Send，分别代表群发和点对点发布模式。在集群环境里每个节点上akka-cluster系统都提供一个DistributedPubSubMediator实例作为该节点向外发布及订阅消息的渠道。发布者publisher只对每个节点发布一次消息，再由每个节点上唯一的Mediator接收并转发给节点本地所有订阅该类消息的subscriber。Publish是个类型：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;final &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Publish(topic: String, msg: Any, sendOneMessageToEachGroup: Boolean) extends DistributedPubSubMessage {
    def &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(topic: String, msg: Any) = &lt;span&gt;this&lt;/span&gt;(topic, msg, sendOneMessageToEachGroup = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
  }
  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; Publish {
    def apply(topic: String, msg: Any) &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Publish(topic, msg)
  }
...
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;发布操作就是把一个Publish消息发给本节点的Mediator：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Publisher extends Actor {
  import DistributedPubSubMediator.Publish
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; activate the extension&lt;/span&gt;
  val mediator =&lt;span&gt; DistributedPubSub(context.system).mediator

  def receive &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt;: String ⇒
      val &lt;/span&gt;&lt;span&gt;out&lt;/span&gt; = &lt;span&gt;in&lt;/span&gt;&lt;span&gt;.toUpperCase
      mediator &lt;/span&gt;! Publish(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;out&lt;/span&gt;，sendOneMessageToEachGroup = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
  }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;sendOneMessageToEachGroup默认=false，代表发布消息不会送达用group ID订阅的subscriber，true则代表消息不会送达没用group ID订阅的subscriber。同样Subscribe也是个类型：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; final &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Subscribe(topic: String, group: Option[String], &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;: ActorRef) {
    require(topic &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; topic != &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;topic must be defined&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Convenience constructor with `group` None
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    def &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(topic: String, &lt;span&gt;ref&lt;/span&gt;: ActorRef) = &lt;span&gt;this&lt;/span&gt;(topic, None, &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Java API: constructor with group: String
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    def &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(topic: String, group: String, &lt;span&gt;ref&lt;/span&gt;: ActorRef) = &lt;span&gt;this&lt;/span&gt;(topic, Some(group), &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;)
  }
  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; Subscribe {
    def apply(topic: String, &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;: ActorRef) = &lt;span&gt;new&lt;/span&gt; Subscribe(topic, &lt;span&gt;ref&lt;/span&gt;&lt;span&gt;)
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;订阅操作即向本地Mediator发送Subscribe消息：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  val mediator =&lt;span&gt; DistributedPubSub(context.system).mediator
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; subscribe to the topic named &quot;content&quot;&lt;/span&gt;
  mediator ! Subscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
  def receive &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; s: String ⇒
      log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Got {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, s)
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; SubscribeAck(Subscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, None, `self`)) ⇒
      log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subscribing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }



  mediator &lt;/span&gt;! UnSubscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
  def receive &lt;/span&gt;=&lt;span&gt; {
    ... 
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UnSubscribeAck ⇒
      log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unsubscribing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;取消订阅则发送UnSubscribe消息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Send/Put是一种点对点模式，不需要topic作为订阅标的。同样：Send和Put都是消息类型，Put代表订阅：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;val mediator =&lt;span&gt; DistributedPubSub(context.system).mediator
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; register to the path&lt;/span&gt;
  mediator !&lt;span&gt; Put(self)

  def receive &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; s: String ⇒
      log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Got {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, s)
  }
}

mediator &lt;/span&gt;! DistributedPubSubMediator.Remove(path)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;Put在Mediator上登记了self，包括path，所以取消订阅也就是从Mediator上取消特定path。由于是点对点模式，Send就是针对某个path发送消息：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;final &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Send(path: String, msg: Any, localAffinity: Boolean) extends DistributedPubSubMessage {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * Convenience constructor with `localAffinity` false
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    def &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(path: String, msg: Any) = &lt;span&gt;this&lt;/span&gt;(path, msg, localAffinity = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
  }
final &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SendToAll(path: String, msg: Any, allButSelf: Boolean = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) extends DistributedPubSubMessage {
    def &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(path: String, msg: Any) = &lt;span&gt;this&lt;/span&gt;(path, msg, allButSelf = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Send通过特定的路由策略从多个在不同节点上的匹配path选定一个节点发送消息。localAffinity=true代表消息发送节点本地登记的匹配path actor优先。SendToAll则代表对所有登记了匹配path的节点发送消息：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Sender extends Actor {
  import DistributedPubSubMediator.Send
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; activate the extension&lt;/span&gt;
  val mediator =&lt;span&gt; DistributedPubSub(context.system).mediator

  def receive &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt;: String ⇒
      val &lt;/span&gt;&lt;span&gt;out&lt;/span&gt; = &lt;span&gt;in&lt;/span&gt;&lt;span&gt;.toUpperCase
      mediator &lt;/span&gt;! Send(path = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/user/destination&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, msg = &lt;span&gt;out&lt;/span&gt;, localAffinity = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
  }
}


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SenderToAll extends Actor {
  import DistributedPubSubMediator.Send
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; activate the extension&lt;/span&gt;
  val mediator =&lt;span&gt; DistributedPubSub(context.system).mediator

  def receive &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt;: String ⇒
      val &lt;/span&gt;&lt;span&gt;out&lt;/span&gt; = &lt;span&gt;in&lt;/span&gt;&lt;span&gt;.toUpperCase
      mediator &lt;/span&gt;! SendToAll(path = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/user/destination&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, msg = &lt;span&gt;out&lt;/span&gt;&lt;span&gt;)
  }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下面我们还是举个例子来示范distributed pub/sub，同时示范对利用protobuf格式作为消息类型来实现发布/订阅机制。忽然想起前面介绍过的&lt;a href=&quot;https://www.cnblogs.com/tiger-xc/p/9345558.html&quot; target=&quot;_blank&quot;&gt;MongoDBStreaming&lt;/a&gt;，里面跨集群节点的数据库操作指令都是protobuf格式进行序列化的。在这个例子里我们把publisher作为一个数据库指挥，把MongoDB操作指令发布出去，然后subscriber订阅数据库操作指令。收到消息后解包成MongoDB操作指令，然后对数据库操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们首先看看在application.conf里是如何配置消息序列化格式的：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;  actor {
    provider &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cluster&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    serializers {
      java &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.serialization.JavaSerializer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      proto &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.remote.serialization.ProtobufSerializer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
    serialization&lt;/span&gt;-&lt;span&gt;bindings {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java.lang.String&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&lt;span&gt; java
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scalapb.GeneratedMessage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&lt;span&gt; proto
    }
  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;例子里的protobuf消息是由scalapb从.proto文件中自动产生的。下面我们先定义subscriber：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; trait PubMessage {}

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Gossip(msg: String) extends PubMessage

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; StopTalk

  &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Subscriber extends Actor with ActorLogging {
    import monix.execution.Scheduler.Implicits.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;
    &lt;span&gt;implicit&lt;/span&gt; val mgosys =&lt;span&gt; context.system
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val ec =&lt;span&gt; mgosys.dispatcher

    val clientSettings: MongoClientSettings &lt;/span&gt;=&lt;span&gt; MongoClientSettings.builder()
      .applyToClusterSettings {b &lt;/span&gt;=&amp;gt;&lt;span&gt;
        b.hosts(List(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ServerAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:27017&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).asJava)
      }.build()

    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val client: MongoClient =&lt;span&gt; MongoClient(clientSettings)

    val mediator &lt;/span&gt;=&lt;span&gt; DistributedPubSub(context.system).mediator

    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; def preStart() =&lt;span&gt; {
      mediator &lt;/span&gt;! Subscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;talks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
      mediator &lt;/span&gt;! Subscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
      super.preStart()
    }

    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; def receive: Receive =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Gossip(msg) =&amp;gt;&lt;span&gt;
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******* received message: $msg by ${self}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; SubscribeAck(sub) =&amp;gt;&lt;span&gt;
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******* $self Subscribed to ${sub.topic} ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; UnsubscribeAck(sub) =&amp;gt;&lt;span&gt;
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******* $self Unsubscribed from ${sub.topic} ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; StopTalk =&amp;gt;&lt;span&gt;
        mediator &lt;/span&gt;! Unsubscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;talks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
        mediator &lt;/span&gt;! Unsubscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; someProto @ Some(proto:ProtoMGOContext) =&amp;gt;&lt;span&gt;
        val ctx &lt;/span&gt;=&lt;span&gt; MGOContext.fromProto(proto)
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;****** received MGOContext: $someProto *********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

        val task &lt;/span&gt;=&lt;span&gt; mgoUpdate[Completed](ctx).toTask
        task.runOnComplete {
          &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(s) =&amp;gt; println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;operations completed successfully.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(exception) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error: ${exception.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        }

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; msg =&amp;gt;  log.info(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;**********received some messaged: $msg *********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    }
  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; Subscriber {
    def props &lt;/span&gt;= Props(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Subscriber)

    def create(port: Int): ActorRef &lt;/span&gt;=&lt;span&gt; {
      val config &lt;/span&gt;= ConfigFactory.parseString(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.remote.netty.tcp.port=$port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        .withFallback(ConfigFactory.load())
      val system &lt;/span&gt;= ActorSystem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PubSubSystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, config)

      system.actorOf(props, s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subscriber$port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

  }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;因为subscriber需要执行MongoDB指令，所有必须定义一个客户端：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    val clientSettings: MongoClientSettings =&lt;span&gt; MongoClientSettings.builder()
      .applyToClusterSettings {b &lt;/span&gt;=&amp;gt;&lt;span&gt;
        b.hosts(List(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ServerAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:27017&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).asJava)
      }.build()

    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val client: MongoClient =&lt;span&gt; MongoClient(clientSettings)

...

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; someProto @ Some(proto:ProtoMGOContext) =&amp;gt;&lt;span&gt;
        val ctx &lt;/span&gt;=&lt;span&gt; MGOContext.fromProto(proto)
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;****** received MGOContext: $someProto *********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

        val task &lt;/span&gt;=&lt;span&gt; mgoUpdate[Completed](ctx).toTask
        task.runOnComplete {
          &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(s) =&amp;gt; println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;operations completed successfully.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(exception) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error: ${exception.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;分别订阅两种消息： &lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    &lt;span&gt;override&lt;/span&gt; def preStart() =&lt;span&gt; {
      mediator &lt;/span&gt;! Subscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;talks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
      mediator &lt;/span&gt;! Subscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
      super.preStart()
    }

...

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; StopTalk =&amp;gt;&lt;span&gt;
        mediator &lt;/span&gt;! Unsubscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;talks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
        mediator &lt;/span&gt;! Unsubscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, self)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;publisher是这样定义的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Publisher extends Actor with ActorLogging {
    val mediator &lt;/span&gt;=&lt;span&gt; DistributedPubSub(context.system).mediator
    val ctx &lt;/span&gt;= MGOContext(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testdb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;friends&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; def receive: Receive =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Gossip(msg) =&amp;gt;&lt;span&gt;
        mediator &lt;/span&gt;! Publish(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;talks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Gossip(msg))
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published message: $msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; StopTalk =&amp;gt;&lt;span&gt;
        mediator &lt;/span&gt;! Publish(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;talks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StopTalk)
        log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;everyone stop!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; doc @ Document(_) =&amp;gt;&lt;span&gt;
        val c &lt;/span&gt;=&lt;span&gt; ctx.setCommand(MGOCommands.Insert(Seq(doc)))
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*****publishing mongo command: ${c}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        mediator &lt;/span&gt;! Publish(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,c.toSomeProto)
    }
  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; Publisher {
    def props &lt;/span&gt;= Props(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Publisher)

    def create(port: Int): ActorRef &lt;/span&gt;=&lt;span&gt; {
      val config &lt;/span&gt;= ConfigFactory.parseString(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.remote.netty.tcp.port=${port}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        .withFallback(ConfigFactory.load())
      val system &lt;/span&gt;= ActorSystem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PubSubSystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, config)

      system.actorOf(props, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;publisher&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;publisher构造指令：将一个Document当作一条记录插入到MongoDB friends表里。指令被转换成protobuf格式：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    val ctx = MGOContext(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testdb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;friends&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; def receive: Receive =&lt;span&gt; {
     ...
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; doc @ Document(_) =&amp;gt;&lt;span&gt;
        val c &lt;/span&gt;=&lt;span&gt; ctx.setCommand(MGOCommands.Insert(Seq(doc)))
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*****publishing mongo command: ${c}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        mediator &lt;/span&gt;! Publish(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,c.toSomeProto)
    }&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下面是publisher和subscribe&lt;/span&gt;r应用示范：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;package pubsubdemo
import org.mongodb.scala._
&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; PubSubDemo extends App {

  val publisher &lt;/span&gt;= Publisher.create(&lt;span&gt;2551&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;seed node&lt;/span&gt;
&lt;span&gt;  scala.io.StdIn.readLine()

  Subscriber.create(&lt;/span&gt;&lt;span&gt;2552&lt;/span&gt;&lt;span&gt;)
  scala.io.StdIn.readLine()

  Subscriber.create(&lt;/span&gt;&lt;span&gt;2553&lt;/span&gt;&lt;span&gt;)
  scala.io.StdIn.readLine()

  publisher &lt;/span&gt;! Gossip(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello everyone!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  scala.io.StdIn.readLine()

  publisher &lt;/span&gt;! Gossip(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;do you hear me ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  scala.io.StdIn.readLine()

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MongoDB 操作示范&lt;/span&gt;
  val peter = Document(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MAGRET KOON&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;28&lt;/span&gt;&lt;span&gt;)

  publisher &lt;/span&gt;!&lt;span&gt; peter
  scala.io.StdIn.readLine()

  publisher &lt;/span&gt;!&lt;span&gt; StopTalk
  scala.io.StdIn.readLine()
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;值得注意的是：系统构建了两个subscriber, 2552和2553，意味MongoDB操作指令会被重复执行两次。不过我们的示范不在意这些细节。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面是这次讨论中的示范源代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;project/scalapb.sbt&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
addSbtPlugin(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.thesamet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sbt-protoc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.99.18&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

libraryDependencies &lt;/span&gt;++=&lt;span&gt; Seq(
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.thesamet.scalapb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;compilerplugin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.7.4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;build.sbt&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;import scalapb.compiler.Version.scalapbVersion
import scalapb.compiler.Version.grpcJavaVersion

name :&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;distributed-pub-sub&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

version :&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

scalaVersion :&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.12.7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

scalacOptions &lt;/span&gt;+= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-Ypartial-unification&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

libraryDependencies :&lt;/span&gt;=&lt;span&gt; Seq(
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.typesafe.akka&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka-actor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.5.17&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.typesafe.akka&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka-cluster-tools&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.5.17&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.thesamet.scalapb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scalapb-runtime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % scalapbVersion % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;protobuf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;io.grpc&quot; % &quot;grpc-netty&quot; % grpcJavaVersion,&lt;/span&gt;
  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.thesamet.scalapb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scalapb-runtime-grpc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; scalapbVersion,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;io.monix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;monix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.3.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;for mongodb 4.0&lt;/span&gt;
  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.mongodb.scala&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongo-scala-driver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.4.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.lightbend.akka&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka-stream-alpakka-mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.20&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;other dependencies&lt;/span&gt;
  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;co.fs2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fs2-core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.9.7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ch.qos.logback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  %  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logback-classic&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;   % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.2.3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.typelevel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cats-core&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0.9.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;io.monix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;monix-execution&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.0.0-RC1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;io.monix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %% &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;monix-eval&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.0.0-RC1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
)

PB.targets &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; Compile :=&lt;span&gt; Seq(
  scalapb.gen() &lt;/span&gt;-&amp;gt; (sourceManaged &lt;span&gt;in&lt;/span&gt;&lt;span&gt; Compile).value
)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;protobuf/sdp.proto&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;syntax = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;proto3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;google/protobuf/wrappers.proto&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;google/protobuf/any.proto&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scalapb/scalapb.proto&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

option (scalapb.options) &lt;/span&gt;=&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; use a custom Scala package name
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; package_name: &quot;io.ontherocks.introgrpc.demo&quot;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; don't append file name to package&lt;/span&gt;
  flat_package: &lt;span&gt;true&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; generate one Scala file for all messages (services still get their own file)&lt;/span&gt;
  single_file: &lt;span&gt;true&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add imports to generated file
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; useful when extending traits or using custom types
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; import: &quot;io.ontherocks.hellogrpc.RockingMessage&quot;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; code to put at the top of generated file
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; works only with `single_file: true`
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;preamble: &quot;sealed trait SomeSealedTrait&quot;&lt;/span&gt;
&lt;span&gt;};

package sdp.grpc.services;


message ProtoDate {
  int32 yyyy &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  int32 mm   &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
  int32 dd   &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
}

message ProtoTime {
  int32 hh   &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  int32 mm   &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
  int32 ss   &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
  int32 nnn  &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
}

message ProtoDateTime {
   ProtoDate date &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
   ProtoTime time &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
}

message ProtoAny {
  bytes value &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;protobuf/mgo.proto&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
syntax = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;proto3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;google/protobuf/wrappers.proto&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;google/protobuf/any.proto&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scalapb/scalapb.proto&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;


option (scalapb.options) &lt;/span&gt;=&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; use a custom Scala package name
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; package_name: &quot;io.ontherocks.introgrpc.demo&quot;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; don't append file name to package&lt;/span&gt;
  flat_package: &lt;span&gt;true&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; generate one Scala file for all messages (services still get their own file)&lt;/span&gt;
  single_file: &lt;span&gt;true&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; add imports to generated file
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; useful when extending traits or using custom types
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; import: &quot;io.ontherocks.hellogrpc.RockingMessage&quot;

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; code to put at the top of generated file
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; works only with `single_file: true`
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;preamble: &quot;sealed trait SomeSealedTrait&quot;&lt;/span&gt;
&lt;span&gt;};

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
 * Demoes various customization options provided by ScalaPBs.
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

package sdp.grpc.services;

import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sdp.proto&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

message ProtoMGOBson {
  bytes bson &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
}

message ProtoMGODocument {
  bytes document &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
}

message ProtoMGOResultOption { &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
   int32 optType = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
   ProtoMGOBson bsonParam &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
   int32 valueParam &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
}

message ProtoMGOAdmin{
  &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; tarName = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  repeated ProtoMGOBson bsonParam  &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
  ProtoAny options &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; objName = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
}

message ProtoMGOContext {  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MGOContext&lt;/span&gt;
  &lt;span&gt;string&lt;/span&gt; dbName = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; collName = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
  int32 commandType &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
  repeated ProtoMGOBson bsonParam &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
  repeated ProtoMGOResultOption resultOptions &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
  repeated &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; targets = &lt;span&gt;6&lt;/span&gt;&lt;span&gt;;
  ProtoAny options &lt;/span&gt;= &lt;span&gt;7&lt;/span&gt;&lt;span&gt;;
  repeated ProtoMGODocument documents &lt;/span&gt;= &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
  google.protobuf.BoolValue only &lt;/span&gt;= &lt;span&gt;9&lt;/span&gt;&lt;span&gt;;
  ProtoMGOAdmin adminOptions &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PubSubActor.scala&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package pubsubdemo
import akka.actor._
import akka.cluster.pubsub.DistributedPubSubMediator._
import akka.cluster.pubsub._
import com.typesafe.config._
import akka.actor.ActorSystem
import org.mongodb.scala._
import sdp.grpc.services.ProtoMGOContext
import sdp.mongo.engine.MGOClasses._
import sdp.mongo.engine.MGOEngine._
import sdp.result.DBOResult._

import scala.collection.JavaConverters._
import scala.util._

  trait PubMessage {}

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Gossip(msg: String) extends PubMessage

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; StopTalk

  &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Subscriber extends Actor with ActorLogging {
    import monix.execution.Scheduler.Implicits.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;
    &lt;span&gt;implicit&lt;/span&gt; val mgosys =&lt;span&gt; context.system
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val ec =&lt;span&gt; mgosys.dispatcher

    val clientSettings: MongoClientSettings &lt;/span&gt;=&lt;span&gt; MongoClientSettings.builder()
      .applyToClusterSettings {b &lt;/span&gt;=&amp;gt;&lt;span&gt;
        b.hosts(List(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ServerAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;localhost:27017&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).asJava)
      }.build()

    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; val client: MongoClient =&lt;span&gt; MongoClient(clientSettings)

    val mediator &lt;/span&gt;=&lt;span&gt; DistributedPubSub(context.system).mediator

    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; def preStart() =&lt;span&gt; {
      mediator &lt;/span&gt;! Subscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;talks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
      mediator &lt;/span&gt;! Subscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
      super.preStart()
    }

    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; def receive: Receive =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Gossip(msg) =&amp;gt;&lt;span&gt;
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******* received message: $msg by ${self}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; SubscribeAck(sub) =&amp;gt;&lt;span&gt;
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******* $self Subscribed to ${sub.topic} ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; UnsubscribeAck(sub) =&amp;gt;&lt;span&gt;
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******* $self Unsubscribed from ${sub.topic} ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; StopTalk =&amp;gt;&lt;span&gt;
        mediator &lt;/span&gt;! Unsubscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;talks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)
        mediator &lt;/span&gt;! Unsubscribe(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, self)

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; someProto @ Some(proto:ProtoMGOContext) =&amp;gt;&lt;span&gt;
        val ctx &lt;/span&gt;=&lt;span&gt; MGOContext.fromProto(proto)
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;****** received MGOContext: $someProto *********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

        val task &lt;/span&gt;=&lt;span&gt; mgoUpdate[Completed](ctx).toTask
        task.runOnComplete {
          &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Success(s) =&amp;gt; println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;operations completed successfully.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Failure(exception) =&amp;gt; println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error: ${exception.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        }

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; msg =&amp;gt;  log.info(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;**********received some messaged: $msg *********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    }
  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; Subscriber {
    def props &lt;/span&gt;= Props(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Subscriber)

    def create(port: Int): ActorRef &lt;/span&gt;=&lt;span&gt; {
      val config &lt;/span&gt;= ConfigFactory.parseString(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.remote.netty.tcp.port=$port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        .withFallback(ConfigFactory.load())
      val system &lt;/span&gt;= ActorSystem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PubSubSystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, config)

      system.actorOf(props, s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;subscriber$port&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

  }


  &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Publisher extends Actor with ActorLogging {
    val mediator &lt;/span&gt;=&lt;span&gt; DistributedPubSub(context.system).mediator
    val ctx &lt;/span&gt;= MGOContext(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testdb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;friends&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; def receive: Receive =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Gossip(msg) =&amp;gt;&lt;span&gt;
        mediator &lt;/span&gt;! Publish(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;talks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Gossip(msg))
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;published message: $msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; StopTalk =&amp;gt;&lt;span&gt;
        mediator &lt;/span&gt;! Publish(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;talks&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StopTalk)
        log.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;everyone stop!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; doc @ Document(_) =&amp;gt;&lt;span&gt;

        val c &lt;/span&gt;=&lt;span&gt; ctx.setCommand(MGOCommands.Insert(Seq(doc)))
        log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;*****publishing mongo command: ${c}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        mediator &lt;/span&gt;! Publish(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,c.toSomeProto)
    }
  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; Publisher {
    def props &lt;/span&gt;= Props(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Publisher)

    def create(port: Int): ActorRef &lt;/span&gt;=&lt;span&gt; {
      val config &lt;/span&gt;= ConfigFactory.parseString(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;akka.remote.netty.tcp.port=${port}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        .withFallback(ConfigFactory.load())
      val system &lt;/span&gt;= ActorSystem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PubSubSystem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, config)

      system.actorOf(props, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;publisher&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PubSubDemo.scala&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package pubsubdemo
import org.mongodb.scala._
&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; PubSubDemo extends App {

  val publisher &lt;/span&gt;= Publisher.create(&lt;span&gt;2551&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;seed node&lt;/span&gt;
&lt;span&gt;  scala.io.StdIn.readLine()

  Subscriber.create(&lt;/span&gt;&lt;span&gt;2552&lt;/span&gt;&lt;span&gt;)
  scala.io.StdIn.readLine()

  Subscriber.create(&lt;/span&gt;&lt;span&gt;2553&lt;/span&gt;&lt;span&gt;)
  scala.io.StdIn.readLine()

  publisher &lt;/span&gt;! Gossip(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello everyone!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  scala.io.StdIn.readLine()

  publisher &lt;/span&gt;! Gossip(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;do you hear me ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  scala.io.StdIn.readLine()

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MongoDB 操作示范&lt;/span&gt;
  val peter = Document(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MAGRET KOON&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&amp;gt; &lt;span&gt;28&lt;/span&gt;&lt;span&gt;)

  publisher &lt;/span&gt;!&lt;span&gt; peter
  scala.io.StdIn.readLine()

  publisher &lt;/span&gt;!&lt;span&gt; StopTalk
  scala.io.StdIn.readLine()


}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MongoDBEngine.scala&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;315&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package sdp.mongo.engine

import java.text.SimpleDateFormat
import java.util.Calendar

import akka.NotUsed
import akka.stream.Materializer
import akka.stream.alpakka.mongodb.scaladsl._
import akka.stream.scaladsl.{Flow, Source}
import org.bson.conversions.Bson
import org.mongodb.scala.bson.collection.immutable.Document
import org.mongodb.scala.bson.{BsonArray, BsonBinary}
import org.mongodb.scala.model._
import org.mongodb.scala.{MongoClient, _}
import protobuf.bytes.Converter._
import sdp.file.Streaming._
import sdp.logging.LogSupport

import scala.collection.JavaConverters._
import scala.concurrent._
import scala.concurrent.duration._

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOClasses {
  type MGO_ACTION_TYPE &lt;/span&gt;=&lt;span&gt; Int
  val MGO_QUERY        &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
  val MGO_UPDATE       &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
  val MGO_ADMIN        &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;

  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;  org.mongodb.scala.FindObservable
    import com.mongodb.async.client.FindIterable
    val resultDocType = FindIterable[Document]
    val resultOption = FindObservable(resultDocType)
      .maxScan(...)
    .limit(...)
    .sort(...)
    .project(...) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

  type FOD_TYPE       &lt;/span&gt;=&lt;span&gt; Int
  val FOD_FIRST       &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def first(): SingleObservable[TResult], return the first item&lt;/span&gt;
  val FOD_FILTER      = &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def filter(filter: Bson): FindObservable[TResult]&lt;/span&gt;
  val FOD_LIMIT       = &lt;span&gt;2&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def limit(limit: Int): FindObservable[TResult]&lt;/span&gt;
  val FOD_SKIP        = &lt;span&gt;3&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def skip(skip: Int): FindObservable[TResult]&lt;/span&gt;
  val FOD_PROJECTION  = &lt;span&gt;4&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def projection(projection: Bson): FindObservable[TResult]
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sets a document describing the fields to return for all matching documents&lt;/span&gt;
  val FOD_SORT        = &lt;span&gt;5&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def sort(sort: Bson): FindObservable[TResult]&lt;/span&gt;
  val FOD_PARTIAL     = &lt;span&gt;6&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def partial(partial: Boolean): FindObservable[TResult]
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Get partial results from a sharded cluster if one or more shards are unreachable (instead of throwing an error)&lt;/span&gt;
  val FOD_CURSORTYPE  = &lt;span&gt;7&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def cursorType(cursorType: CursorType): FindObservable[TResult]
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sets the cursor type&lt;/span&gt;
  val FOD_HINT        = &lt;span&gt;8&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def hint(hint: Bson): FindObservable[TResult]
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sets the hint for which index to use. A null value means no hint is set&lt;/span&gt;
  val FOD_MAX         = &lt;span&gt;9&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def max(max: Bson): FindObservable[TResult]
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sets the exclusive upper bound for a specific index. A null value means no max is set&lt;/span&gt;
  val FOD_MIN         = &lt;span&gt;10&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def min(min: Bson): FindObservable[TResult]
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sets the minimum inclusive lower bound for a specific index. A null value means no max is set&lt;/span&gt;
  val FOD_RETURNKEY   = &lt;span&gt;11&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def returnKey(returnKey: Boolean): FindObservable[TResult]
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sets the returnKey. If true the find operation will return only the index keys in the resulting documents&lt;/span&gt;
  val FOD_SHOWRECORDID=&lt;span&gt;12&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;def showRecordId(showRecordId: Boolean): FindObservable[TResult]
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sets the showRecordId. Set to true to add a field `\$recordId` to the returned documents&lt;/span&gt;

  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ResultOptions(
                            optType: FOD_TYPE,
                            bson: Option[Bson] &lt;/span&gt;=&lt;span&gt; None,
                            value: Int &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ){
    def toProto &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOResultOption(
      optType &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.optType,
      bsonParam &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;.bson.map {b =&amp;gt;&lt;span&gt; sdp.grpc.services.ProtoMGOBson(marshal(b))},
      valueParam &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value
    )
    def toFindObservable: FindObservable[Document] &lt;/span&gt;=&amp;gt; FindObservable[Document] = find =&amp;gt;&lt;span&gt; {
      optType match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_FIRST        =&amp;gt;&lt;span&gt; find
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_FILTER       =&amp;gt; find.filter(bson.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_LIMIT        =&amp;gt;&lt;span&gt; find.limit(value)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_SKIP         =&amp;gt;&lt;span&gt; find.skip(value)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_PROJECTION   =&amp;gt; find.projection(bson.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_SORT         =&amp;gt; find.sort(bson.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_PARTIAL      =&amp;gt; find.&lt;span&gt;partial&lt;/span&gt;(value != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_CURSORTYPE   =&amp;gt;&lt;span&gt; find
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_HINT         =&amp;gt; find.hint(bson.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_MAX          =&amp;gt; find.max(bson.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_MIN          =&amp;gt; find.min(bson.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_RETURNKEY    =&amp;gt; find.returnKey(value != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;  FOD_SHOWRECORDID =&amp;gt; find.showRecordId(value != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)

      }
    }
  }
  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; ResultOptions {
    def fromProto(msg: sdp.grpc.services.ProtoMGOResultOption) &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ResultOptions(
      optType &lt;/span&gt;=&lt;span&gt; msg.optType,
      bson &lt;/span&gt;= msg.bsonParam.map(b =&amp;gt;&lt;span&gt; unmarshal[Bson](b.bson)),
      value &lt;/span&gt;=&lt;span&gt; msg.valueParam
    )

  }

  trait MGOCommands

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOCommands {

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Count(filter: Option[Bson] = None, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Distict(fieldName: String, filter: Option[Bson] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;  org.mongodb.scala.FindObservable
    import com.mongodb.async.client.FindIterable
    val resultDocType = FindIterable[Document]
    val resultOption = FindObservable(resultDocType)
      .maxScan(...)
    .limit(...)
    .sort(...)
    .project(...) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Find(filter: Option[Bson] =&lt;span&gt; None,
                       andThen: Seq[ResultOptions] &lt;/span&gt;=&lt;span&gt; Seq.empty[ResultOptions],
                       firstOnly: Boolean &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Aggregate(pipeLine: Seq[Bson]) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MapReduce(mapFunction: String, reduceFunction: String) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Insert(newdocs: Seq[Document], options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Delete(filter: Bson, options: Option[Any] = None, onlyOne: Boolean = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Replace(filter: Bson, replacement: Document, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Update(filter: Bson, update: Bson, options: Option[Any] = None, onlyOne: Boolean = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) extends MGOCommands


    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BulkWrite(commands: List[WriteModel[Document]], options: Option[Any] =&lt;span&gt; None) extends MGOCommands

  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOAdmins {

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DropCollection(collName: String) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CreateCollection(collName: String, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ListCollection(dbName: String) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CreateView(viewName: String, viewOn: String, pipeline: Seq[Bson], options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CreateIndex(key: Bson, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DropIndexByName(indexName: String, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DropIndexByKey(key: Bson, options: Option[Any] =&lt;span&gt; None) extends MGOCommands

    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DropAllIndexes(options: Option[Any] =&lt;span&gt; None) extends MGOCommands

  }

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MGOContext(
                         dbName: String,
                         collName: String,
                         actionType: MGO_ACTION_TYPE &lt;/span&gt;=&lt;span&gt; MGO_QUERY,
                         action: Option[MGOCommands] &lt;/span&gt;=&lt;span&gt; None,
                         actionOptions: Option[Any] &lt;/span&gt;=&lt;span&gt; None,
                         actionTargets: Seq[String] &lt;/span&gt;=&lt;span&gt; Nil
                       ) {
    ctx &lt;/span&gt;=&amp;gt;&lt;span&gt;
    def setDbName(name: String): MGOContext &lt;/span&gt;= ctx.copy(dbName =&lt;span&gt; name)

    def setCollName(name: String): MGOContext &lt;/span&gt;= ctx.copy(collName =&lt;span&gt; name)

    def setActionType(at: MGO_ACTION_TYPE): MGOContext &lt;/span&gt;= ctx.copy(actionType =&lt;span&gt; at)

    def setCommand(cmd: MGOCommands): MGOContext  &lt;/span&gt;= ctx.copy(action =&lt;span&gt; Some(cmd))

    def toSomeProto &lt;/span&gt;= MGOProtoConversion.ctxToProto(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)

  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOContext {
    def apply(db: String, coll: String) &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(db, coll)
    def fromProto(proto: sdp.grpc.services.ProtoMGOContext): MGOContext &lt;/span&gt;=&lt;span&gt;
      MGOProtoConversion.ctxFromProto(proto)
  }

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MGOBatContext(contexts: Seq[MGOContext], tx: Boolean = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) {
    ctxs &lt;/span&gt;=&amp;gt;&lt;span&gt;
    def setTx(txopt: Boolean): MGOBatContext &lt;/span&gt;= ctxs.copy(tx =&lt;span&gt; txopt)
    def appendContext(ctx: MGOContext): MGOBatContext &lt;/span&gt;=&lt;span&gt;
      ctxs.copy(contexts &lt;/span&gt;= contexts :+&lt;span&gt; ctx)
  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOBatContext {
    def apply(ctxs: Seq[MGOContext], tx: Boolean &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;) = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOBatContext(ctxs,tx)
  }

  type MGODate &lt;/span&gt;=&lt;span&gt; java.util.Date
  def mgoDate(yyyy: Int, mm: Int, dd: Int): MGODate &lt;/span&gt;=&lt;span&gt; {
    val ca &lt;/span&gt;=&lt;span&gt; Calendar.getInstance()
    ca.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(yyyy,mm,dd)
    ca.getTime()
  }
  def mgoDateTime(yyyy: Int, mm: Int, dd: Int, hr: Int, min: Int, sec: Int): MGODate &lt;/span&gt;=&lt;span&gt; {
    val ca &lt;/span&gt;=&lt;span&gt; Calendar.getInstance()
    ca.&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;(yyyy,mm,dd,hr,min,sec)
    ca.getTime()
  }
  def mgoDateTimeNow: MGODate &lt;/span&gt;=&lt;span&gt; {
    val ca &lt;/span&gt;=&lt;span&gt; Calendar.getInstance()
    ca.getTime
  }


  def mgoDateToString(dt: MGODate, formatString: String): String &lt;/span&gt;=&lt;span&gt; {
    val fmt&lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleDateFormat(formatString)
    fmt.format(dt)
  }

  type MGOBlob &lt;/span&gt;=&lt;span&gt; BsonBinary
  type MGOArray &lt;/span&gt;=&lt;span&gt; BsonArray

  def fileToMGOBlob(fileName: String, timeOut: FiniteDuration &lt;/span&gt;= &lt;span&gt;60&lt;/span&gt;&lt;span&gt; seconds)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer) =&lt;span&gt; FileToByteArray(fileName,timeOut)

  def mgoBlobToFile(blob: MGOBlob, fileName: String)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; mat: Materializer) =&lt;span&gt;  ByteArrayToFile(blob.getData,fileName)

  def mgoGetStringOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getString(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetIntOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getInteger(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetLonggOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getLong(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetDoubleOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getDouble(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetBoolOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getBoolean(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetDateOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      Some(doc.getDate(fieldName))
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetBlobOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      doc.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(fieldName).asInstanceOf[Option[MGOBlob]]
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }
  def mgoGetArrayOrNone(doc: Document, fieldName: String) &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (doc.keySet.contains(fieldName))
      doc.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(fieldName).asInstanceOf[Option[MGOArray]]
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; None
  }

  def mgoArrayToDocumentList(arr: MGOArray): scala.collection.immutable.List[org.bson.BsonDocument] &lt;/span&gt;=&lt;span&gt; {
    (arr.getValues.asScala.toList)
      .asInstanceOf[scala.collection.immutable.List[org.bson.BsonDocument]]
  }

  type MGOFilterResult &lt;/span&gt;= FindObservable[Document] =&amp;gt;&lt;span&gt; FindObservable[Document]
}

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOEngine extends LogSupport {

  import MGOClasses._
  import MGOAdmins._
  import MGOCommands._
  import sdp.result.DBOResult._


  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; TxUpdateMode {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; def mgoTxUpdate(ctxs: MGOBatContext, observable: SingleObservable[ClientSession])(
              &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; client: MongoClient, ec: ExecutionContext): SingleObservable[ClientSession] =&lt;span&gt; {
      log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoTxUpdate&amp;gt; calling ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      observable.map(clientSession &lt;/span&gt;=&amp;gt;&lt;span&gt; {

        val transactionOptions &lt;/span&gt;=&lt;span&gt;
          TransactionOptions.builder()
            .readConcern(ReadConcern.SNAPSHOT)
            .writeConcern(WriteConcern.MAJORITY).build()

        clientSession.startTransaction(transactionOptions)
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        val fut = Future.traverse(ctxs.contexts) { ctx =&amp;gt;
          mgoUpdateObservable[Completed](ctx).map(identity).toFuture()
        }
        Await.ready(fut, 3 seconds) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

        ctxs.contexts.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; { ctx =&amp;gt;&lt;span&gt;
          mgoUpdateObservable[Completed](ctx).map(identity).toFuture()
        }
        clientSession
      })
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; def commitAndRetry(observable: SingleObservable[Completed]): SingleObservable[Completed] =&lt;span&gt; {
      log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;commitAndRetry&amp;gt; calling ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      observable.recoverWith({
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; e: MongoException &lt;span&gt;if&lt;/span&gt; e.hasErrorLabel(MongoException.UNKNOWN_TRANSACTION_COMMIT_RESULT_LABEL) =&amp;gt;&lt;span&gt; {
          log.warn(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;commitAndRetry&amp;gt; UnknownTransactionCommitResult, retrying commit operation ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          commitAndRetry(observable)
        }
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt; {
          log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;commitAndRetry&amp;gt; Exception during commit ...: $e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; e
        }
      })
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; def runTransactionAndRetry(observable: SingleObservable[Completed]): SingleObservable[Completed] =&lt;span&gt; {
      log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;runTransactionAndRetry&amp;gt; calling ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      observable.recoverWith({
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; e: MongoException &lt;span&gt;if&lt;/span&gt; e.hasErrorLabel(MongoException.TRANSIENT_TRANSACTION_ERROR_LABEL) =&amp;gt;&lt;span&gt; {
          log.warn(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;runTransactionAndRetry&amp;gt; TransientTransactionError, aborting transaction and retrying ...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          runTransactionAndRetry(observable)
        }
      })
    }

    def mgoTxBatch(ctxs: MGOBatContext)(
            &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; client: MongoClient, ec: ExecutionContext): DBOResult[Completed] =&lt;span&gt; {

      log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoTxBatch&amp;gt;  MGOBatContext: ${ctxs}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

      val updateObservable: Observable[ClientSession] &lt;/span&gt;=&lt;span&gt; mgoTxUpdate(ctxs, client.startSession())
      val commitTransactionObservable: SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt;
        updateObservable.flatMap(clientSession &lt;/span&gt;=&amp;gt;&lt;span&gt; clientSession.commitTransaction())
      val commitAndRetryObservable: SingleObservable[Completed] &lt;/span&gt;=&lt;span&gt; commitAndRetry(commitTransactionObservable)

      runTransactionAndRetry(commitAndRetryObservable)

      valueToDBOResult(Completed())

    }
  }


  def mgoUpdateBatch(ctxs: MGOBatContext)(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; client: MongoClient, ec: ExecutionContext): DBOResult[Completed] =&lt;span&gt; {
    log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoUpdateBatch&amp;gt;  MGOBatContext: ${ctxs}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ctxs.tx) {
        TxUpdateMode.mgoTxBatch(ctxs)
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        val fut = Future.traverse(ctxs.contexts) { ctx =&amp;gt;
          mgoUpdate[Completed](ctx).map(identity) }

        Await.ready(fut, 3 seconds)
        Future.successful(new Completed) &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        ctxs.contexts.&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; { ctx =&amp;gt;&lt;span&gt;
          mgoUpdate[Completed](ctx).map(identity) }

         valueToDBOResult(Completed())
      }

  }

  def mongoStream(ctx: MGOContext)(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; client: MongoClient, ec: ExecutionContextExecutor): Source[Document, NotUsed] =&lt;span&gt; {
    log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongoStream&amp;gt;  MGOContext: ${ctx}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    def toResultOption(rts: Seq[ResultOptions]): FindObservable[Document] &lt;/span&gt;=&amp;gt; FindObservable[Document] = findObj =&amp;gt;&lt;span&gt;
      rts.foldRight(findObj)((a,b) &lt;/span&gt;=&amp;gt;&lt;span&gt; a.toFindObservable(b))

    val db &lt;/span&gt;=&lt;span&gt; client.getDatabase(ctx.dbName)
    val coll &lt;/span&gt;=&lt;span&gt; db.getCollection(ctx.collName)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( ctx.action ==&lt;span&gt; None) {
      log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongoStream&amp;gt; uery action cannot be null!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;query action cannot be null!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      ctx.action.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None, Nil, &lt;span&gt;false&lt;/span&gt;) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
&lt;span&gt;          MongoSource(coll.find())
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None, Nil, &lt;span&gt;true&lt;/span&gt;) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
&lt;span&gt;          MongoSource(coll.find().first())
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter), Nil, &lt;span&gt;false&lt;/span&gt;) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
&lt;span&gt;          MongoSource(coll.find(filter))
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter), Nil, &lt;span&gt;true&lt;/span&gt;) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
&lt;span&gt;          MongoSource(coll.find(filter).first())
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None, sro, _) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
          val next =&lt;span&gt; toResultOption(sro)
          MongoSource(next(coll.find[Document]()))
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter), sro, _) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
          val next =&lt;span&gt; toResultOption(sro)
          MongoSource(next(coll.find[Document](filter)))
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt;&lt;span&gt;
          log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongoStream&amp;gt; unsupported streaming query [${ctx.action.get}]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongoStream&amp;gt; unsupported streaming query [${ctx.action.get}]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

      }
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; { &lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt;
      log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongoStream&amp;gt; runtime error: ${e.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongoStream&amp;gt; Error: ${e.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

  }


  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; T =&amp;gt; FindIterable  e.g List[Document]&lt;/span&gt;
  def mgoQuery[T](ctx: MGOContext, Converter: Option[Document =&amp;gt; Any] = None)(&lt;span&gt;implicit&lt;/span&gt; client: MongoClient): DBOResult[T] =&lt;span&gt; {
    log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoQuery&amp;gt;  MGOContext: ${ctx}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    val db &lt;/span&gt;=&lt;span&gt; client.getDatabase(ctx.dbName)
    val coll &lt;/span&gt;=&lt;span&gt; db.getCollection(ctx.collName)

    def toResultOption(rts: Seq[ResultOptions]): FindObservable[Document] &lt;/span&gt;=&amp;gt; FindObservable[Document] = findObj =&amp;gt;&lt;span&gt;
      rts.foldRight(findObj)((a,b) &lt;/span&gt;=&amp;gt;&lt;span&gt; a.toFindObservable(b))


    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( ctx.action ==&lt;span&gt; None) {
      log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoQuery&amp;gt; uery action cannot be null!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      Left(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;query action cannot be null!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    }
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      ctx.action.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; match {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; count &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; Count(Some(filter), Some(opt)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.countDocuments(filter, opt.asInstanceOf[CountOptions])
            .toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Count(Some(filter), None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.countDocuments(filter).toFuture()
            .asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Count(None, None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.countDocuments().toFuture()
            .asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; distinct &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; Distict(field, Some(filter)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;DistinctObservable&lt;/span&gt;
&lt;span&gt;          coll.distinct(field, filter).toFuture()
            .asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Distict(field, None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;DistinctObservable&lt;/span&gt;
&lt;span&gt;          coll.distinct((field)).toFuture()
            .asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; find &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; Find(None, Nil, &lt;span&gt;false&lt;/span&gt;) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt; (Converter ==&lt;span&gt; None) coll.find().toFuture().asInstanceOf[Future[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find().map(Converter.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None, Nil, &lt;span&gt;true&lt;/span&gt;) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt; (Converter ==&lt;span&gt; None) coll.find().first().head().asInstanceOf[Future[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find().first().map(Converter.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).head().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter), Nil, &lt;span&gt;false&lt;/span&gt;) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt; (Converter ==&lt;span&gt; None) coll.find(filter).toFuture().asInstanceOf[Future[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find(filter).map(Converter.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter), Nil, &lt;span&gt;true&lt;/span&gt;) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt; (Converter ==&lt;span&gt; None) coll.find(filter).first().head().asInstanceOf[Future[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find(filter).first().map(Converter.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).head().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None, sro, _) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
          val next =&lt;span&gt; toResultOption(sro)
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Converter ==&lt;span&gt; None) next(coll.find[Document]()).toFuture().asInstanceOf[Future[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; next(coll.find[Document]()).map(Converter.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter), sro, _) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
          val next =&lt;span&gt; toResultOption(sro)
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Converter ==&lt;span&gt; None) next(coll.find[Document](filter)).toFuture().asInstanceOf[Future[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; next(coll.find[Document](filter)).map(Converter.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; aggregate AggregateObservable&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; Aggregate(pline) =&amp;gt;&lt;span&gt; coll.aggregate(pline).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; mapReduce MapReduceObservable&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; MapReduce(mf, rf) =&amp;gt;&lt;span&gt; coll.mapReduce(mf, rf).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; list collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; ListCollection(dbName) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ListConllectionObservable&lt;/span&gt;
&lt;span&gt;          client.getDatabase(dbName).listCollections().toFuture().asInstanceOf[Future[T]]

      }
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; { &lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt;
      log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoQuery&amp;gt; runtime error: ${e.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      Left(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; RuntimeException(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoQuery&amp;gt; Error: ${e.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    }
  }
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;T =&amp;gt; Completed, result.UpdateResult, result.DeleteResult&lt;/span&gt;
  def mgoUpdate[T](ctx: MGOContext)(&lt;span&gt;implicit&lt;/span&gt; client: MongoClient): DBOResult[T] =
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      mgoUpdateObservable[T](ctx).toFuture()
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; { &lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt;
      log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoUpdate&amp;gt; runtime error: ${e.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      Left(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; RuntimeException(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoUpdate&amp;gt; Error: ${e.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    }

  def mgoUpdateObservable[T](ctx: MGOContext)(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; client: MongoClient): SingleObservable[T] =&lt;span&gt; {
    log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoUpdateObservable&amp;gt;  MGOContext: ${ctx}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    val db &lt;/span&gt;=&lt;span&gt; client.getDatabase(ctx.dbName)
    val coll &lt;/span&gt;=&lt;span&gt; db.getCollection(ctx.collName)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( ctx.action ==&lt;span&gt; None) {
      log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoUpdateObservable&amp;gt; uery action cannot be null!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoUpdateObservable&amp;gt; query action cannot be null!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      ctx.action.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; match {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; insert &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; Insert(docs, Some(opt)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable[Completed]&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt; (docs.size &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
            coll.insertMany(docs, opt.asInstanceOf[InsertManyOptions]).asInstanceOf[SingleObservable[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.insertOne(docs.head, opt.asInstanceOf[InsertOneOptions]).asInstanceOf[SingleObservable[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Insert(docs, None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt; (docs.size &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) coll.insertMany(docs).asInstanceOf[SingleObservable[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.insertOne(docs.head).asInstanceOf[SingleObservable[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; delete &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; Delete(filter, None, onlyOne) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.deleteOne(filter).asInstanceOf[SingleObservable[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.deleteMany(filter).asInstanceOf[SingleObservable[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Delete(filter, Some(opt), onlyOne) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.deleteOne(filter, opt.asInstanceOf[DeleteOptions]).asInstanceOf[SingleObservable[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.deleteMany(filter, opt.asInstanceOf[DeleteOptions]).asInstanceOf[SingleObservable[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; replace &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; Replace(filter, replacement, None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.replaceOne(filter, replacement).asInstanceOf[SingleObservable[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Replace(filter, replacement, Some(opt)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.replaceOne(filter, replacement, opt.asInstanceOf[ReplaceOptions]).asInstanceOf[SingleObservable[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; update &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; Update(filter, update, None, onlyOne) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.updateOne(filter, update).asInstanceOf[SingleObservable[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.updateMany(filter, update).asInstanceOf[SingleObservable[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Update(filter, update, Some(opt), onlyOne) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.updateOne(filter, update, opt.asInstanceOf[UpdateOptions]).asInstanceOf[SingleObservable[T]]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.updateMany(filter, update, opt.asInstanceOf[UpdateOptions]).asInstanceOf[SingleObservable[T]]
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; bulkWrite &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; BulkWrite(commands, None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.bulkWrite(commands).asInstanceOf[SingleObservable[T]]
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; BulkWrite(commands, Some(opt)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.bulkWrite(commands, opt.asInstanceOf[BulkWriteOptions]).asInstanceOf[SingleObservable[T]]
      }
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; { &lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt;
      log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoUpdateObservable&amp;gt; runtime error: ${e.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoUpdateObservable&amp;gt; Error: ${e.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }
  }

  def mgoAdmin(ctx: MGOContext)(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; client: MongoClient): DBOResult[Completed] =&lt;span&gt; {
    log.info(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoAdmin&amp;gt;  MGOContext: ${ctx}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    val db &lt;/span&gt;=&lt;span&gt; client.getDatabase(ctx.dbName)
    val coll &lt;/span&gt;=&lt;span&gt; db.getCollection(ctx.collName)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( ctx.action ==&lt;span&gt; None) {
      log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoAdmin&amp;gt; uery action cannot be null!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      Left(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoAdmin&amp;gt; query action cannot be null!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    }
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
      ctx.action.&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; match {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; drop collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; DropCollection(collName) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
          val coll =&lt;span&gt; db.getCollection(collName)
          coll.drop().toFuture()
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; CreateCollection(collName, None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          db.createCollection(collName).toFuture()
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateCollection(collName, Some(opt)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          db.createCollection(collName, opt.asInstanceOf[CreateCollectionOptions]).toFuture()
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; list collection
      case ListCollection(dbName) =&amp;gt;   //ListConllectionObservable
        client.getDatabase(dbName).listCollections().toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create view &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; CreateView(viewName, viewOn, pline, None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          db.createView(viewName, viewOn, pline).toFuture()
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateView(viewName, viewOn, pline, Some(opt)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          db.createView(viewName, viewOn, pline, opt.asInstanceOf[CreateViewOptions]).toFuture()
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create index &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; CreateIndex(key, None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
          coll.createIndex(key).toFuture().asInstanceOf[Future[Completed]] &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   asInstanceOf[SingleObservable[Completed]]&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; CreateIndex(key, Some(opt)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
          coll.createIndex(key, opt.asInstanceOf[IndexOptions]).asInstanceOf[Future[Completed]] &lt;span&gt;//&lt;/span&gt;&lt;span&gt; asInstanceOf[SingleObservable[Completed]]&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; drop index &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;case&lt;/span&gt; DropIndexByName(indexName, None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.dropIndex(indexName).toFuture()
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByName(indexName, Some(opt)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.dropIndex(indexName, opt.asInstanceOf[DropIndexOptions]).toFuture()
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByKey(key, None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.dropIndex(key).toFuture()
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByKey(key, Some(opt)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.dropIndex(key, opt.asInstanceOf[DropIndexOptions]).toFuture()
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropAllIndexes(None) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.dropIndexes().toFuture()
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropAllIndexes(Some(opt)) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;          coll.dropIndexes(opt.asInstanceOf[DropIndexOptions]).toFuture()
      }
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt; { &lt;span&gt;case&lt;/span&gt; e: Exception =&amp;gt;&lt;span&gt;
      log.error(s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoAdmin&amp;gt; runtime error: ${e.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
      &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RuntimeException(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mgoAdmin&amp;gt; Error: ${e.getMessage}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }

  }

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    def mgoExecute[T](ctx: MGOContext)(implicit client: MongoClient): Future[T] = {
    val db = client.getDatabase(ctx.dbName)
    val coll = db.getCollection(ctx.collName)
    ctx.action match {
      /* count &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Count(Some(filter), Some(opt)) =&amp;gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.countDocuments(filter, opt.asInstanceOf[CountOptions])
          .toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Count(Some(filter), None) =&amp;gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.countDocuments(filter).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Count(None, None) =&amp;gt;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.countDocuments().toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; distinct &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Distict(field, Some(filter)) =&amp;gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;DistinctObservable&lt;/span&gt;
&lt;span&gt;        coll.distinct(field, filter).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Distict(field, None) =&amp;gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;DistinctObservable&lt;/span&gt;
&lt;span&gt;        coll.distinct((field)).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; find &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Find(None, None, optConv, &lt;span&gt;false&lt;/span&gt;) =&amp;gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find().toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find().map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None, None, optConv, &lt;span&gt;true&lt;/span&gt;) =&amp;gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find().first().head().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find().first().map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).head().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter), None, optConv, &lt;span&gt;false&lt;/span&gt;) =&amp;gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find(filter).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find(filter).map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter), None, optConv, &lt;span&gt;true&lt;/span&gt;) =&amp;gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) coll.find(filter).first().head().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; coll.find(filter).first().map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).head().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(None, Some(next), optConv, _) =&amp;gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) next(coll.find[Document]()).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; next(coll.find[Document]()).map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(Some(filter), Some(next), optConv, _) =&amp;gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FindObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (optConv ==&lt;span&gt; None) next(coll.find[Document](filter)).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; next(coll.find[Document](filter)).map(optConv.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; aggregate AggregateObservable&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Aggregate(pline) =&amp;gt;&lt;span&gt; coll.aggregate(pline).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; mapReduce MapReduceObservable&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; MapReduce(mf, rf) =&amp;gt;&lt;span&gt; coll.mapReduce(mf, rf).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; insert &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Insert(docs, Some(opt)) =&amp;gt;                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable[Completed]&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (docs.size &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) coll.insertMany(docs, opt.asInstanceOf[InsertManyOptions]).toFuture()
          .asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.insertOne(docs.head, opt.asInstanceOf[InsertOneOptions]).toFuture()
          .asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Insert(docs, None) =&amp;gt;                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (docs.size &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) coll.insertMany(docs).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.insertOne(docs.head).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; delete &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Delete(filter, None, onlyOne) =&amp;gt;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.deleteOne(filter).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.deleteMany(filter).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Delete(filter, Some(opt), onlyOne) =&amp;gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.deleteOne(filter, opt.asInstanceOf[DeleteOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.deleteMany(filter, opt.asInstanceOf[DeleteOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; replace &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Replace(filter, replacement, None) =&amp;gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.replaceOne(filter, replacement).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Replace(filter, replacement, Some(opt)) =&amp;gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.replaceOne(filter, replacement, opt.asInstanceOf[UpdateOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; update &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; Update(filter, update, None, onlyOne) =&amp;gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.updateOne(filter, update).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.updateMany(filter, update).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Update(filter, update, Some(opt), onlyOne) =&amp;gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (onlyOne) coll.updateOne(filter, update, opt.asInstanceOf[UpdateOptions]).toFuture().asInstanceOf[Future[T]]
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; coll.updateMany(filter, update, opt.asInstanceOf[UpdateOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; bulkWrite &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; BulkWrite(commands, None) =&amp;gt;                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.bulkWrite(commands).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; BulkWrite(commands, Some(opt)) =&amp;gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.bulkWrite(commands, opt.asInstanceOf[BulkWriteOptions]).toFuture().asInstanceOf[Future[T]]

      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; drop collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; DropCollection(collName) =&amp;gt;                   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
        val coll =&lt;span&gt; db.getCollection(collName)
        coll.drop().toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; CreateCollection(collName, None) =&amp;gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        db.createCollection(collName).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateCollection(collName, Some(opt)) =&amp;gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        db.createCollection(collName, opt.asInstanceOf[CreateCollectionOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; list collection &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; ListCollection(dbName) =&amp;gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ListConllectionObservable&lt;/span&gt;
&lt;span&gt;        client.getDatabase(dbName).listCollections().toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create view &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; CreateView(viewName, viewOn, pline, None) =&amp;gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        db.createView(viewName, viewOn, pline).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateView(viewName, viewOn, pline, Some(opt)) =&amp;gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        db.createView(viewName, viewOn, pline, opt.asInstanceOf[CreateViewOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; create index &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; CreateIndex(key, None) =&amp;gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.createIndex(key).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateIndex(key, Some(opt)) =&amp;gt;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.createIndex(key, opt.asInstanceOf[IndexOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; drop index &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
      &lt;span&gt;case&lt;/span&gt; DropIndexByName(indexName, None) =&amp;gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.dropIndex(indexName).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByName(indexName, Some(opt)) =&amp;gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.dropIndex(indexName, opt.asInstanceOf[DropIndexOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByKey(key, None) =&amp;gt;                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.dropIndex(key).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByKey(key, Some(opt)) =&amp;gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.dropIndex(key, opt.asInstanceOf[DropIndexOptions]).toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropAllIndexes(None) =&amp;gt;                       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.dropIndexes().toFuture().asInstanceOf[Future[T]]
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropAllIndexes(Some(opt)) =&amp;gt;                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;SingleObservable&lt;/span&gt;
&lt;span&gt;        coll.dropIndexes(opt.asInstanceOf[DropIndexOptions]).toFuture().asInstanceOf[Future[T]]
    }
  }
&lt;/span&gt;*/&lt;span&gt;


}


&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MongoActionStream {

  import MGOClasses._

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StreamingInsert[A](dbName: String,
                                collName: String,
                                converter: A &lt;/span&gt;=&amp;gt;&lt;span&gt; Document,
                                parallelism: Int &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
                               ) extends MGOCommands

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StreamingDelete[A](dbName: String,
                                collName: String,
                                toFilter: A &lt;/span&gt;=&amp;gt;&lt;span&gt; Bson,
                                parallelism: Int &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                                justOne: Boolean &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                               ) extends MGOCommands

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StreamingUpdate[A](dbName: String,
                                collName: String,
                                toFilter: A &lt;/span&gt;=&amp;gt;&lt;span&gt; Bson,
                                toUpdate: A &lt;/span&gt;=&amp;gt;&lt;span&gt; Bson,
                                parallelism: Int &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                                justOne: Boolean &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                               ) extends MGOCommands


  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InsertAction[A](ctx: StreamingInsert[A])(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt;&lt;span&gt; mongoClient: MongoClient) {

    val database &lt;/span&gt;=&lt;span&gt; mongoClient.getDatabase(ctx.dbName)
    val collection &lt;/span&gt;=&lt;span&gt; database.getCollection(ctx.collName)

    def performOnRow(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; ec: ExecutionContext): Flow[A, Document, NotUsed] =&lt;span&gt;
      Flow[A].map(ctx.converter)
        .mapAsync(ctx.parallelism)(doc &lt;/span&gt;=&amp;gt; collection.insertOne(doc).toFuture().map(_ =&amp;gt;&lt;span&gt; doc))
  }

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UpdateAction[A](ctx: StreamingUpdate[A])(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt;&lt;span&gt; mongoClient: MongoClient) {

    val database &lt;/span&gt;=&lt;span&gt; mongoClient.getDatabase(ctx.dbName)
    val collection &lt;/span&gt;=&lt;span&gt; database.getCollection(ctx.collName)

    def performOnRow(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; ec: ExecutionContext): Flow[A, A, NotUsed] =
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ctx.justOne) {
        Flow[A]
          .mapAsync(ctx.parallelism)(a &lt;/span&gt;=&amp;gt;&lt;span&gt;
            collection.updateOne(ctx.toFilter(a), ctx.toUpdate(a)).toFuture().map(_ &lt;/span&gt;=&amp;gt;&lt;span&gt; a))
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        Flow[A]
          .mapAsync(ctx.parallelism)(a &lt;/span&gt;=&amp;gt;&lt;span&gt;
            collection.updateMany(ctx.toFilter(a), ctx.toUpdate(a)).toFuture().map(_ &lt;/span&gt;=&amp;gt;&lt;span&gt; a))
  }


  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DeleteAction[A](ctx: StreamingDelete[A])(
    &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt;&lt;span&gt; mongoClient: MongoClient) {

    val database &lt;/span&gt;=&lt;span&gt; mongoClient.getDatabase(ctx.dbName)
    val collection &lt;/span&gt;=&lt;span&gt; database.getCollection(ctx.collName)

    def performOnRow(&lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; ec: ExecutionContext): Flow[A, A, NotUsed] =
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ctx.justOne) {
        Flow[A]
          .mapAsync(ctx.parallelism)(a &lt;/span&gt;=&amp;gt;&lt;span&gt;
            collection.deleteOne(ctx.toFilter(a)).toFuture().map(_ &lt;/span&gt;=&amp;gt;&lt;span&gt; a))
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        Flow[A]
          .mapAsync(ctx.parallelism)(a &lt;/span&gt;=&amp;gt;&lt;span&gt;
            collection.deleteMany(ctx.toFilter(a)).toFuture().map(_ &lt;/span&gt;=&amp;gt;&lt;span&gt; a))
  }

}

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOHelpers {

  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DocumentObservable[C](val observable: Observable[Document]) extends ImplicitObservable[Document] {
    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; val converter: (Document) =&amp;gt; String = (doc) =&amp;gt;&lt;span&gt; doc.toJson
  }

  &lt;/span&gt;&lt;span&gt;implicit&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GenericObservable[C](val observable: Observable[C]) extends ImplicitObservable[C] {
    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; val converter: (C) =&amp;gt; String = (doc) =&amp;gt;&lt;span&gt; doc.toString
  }

  trait ImplicitObservable[C] {
    val observable: Observable[C]
    val converter: (C) &lt;/span&gt;=&amp;gt;&lt;span&gt; String

    def results(): Seq[C] &lt;/span&gt;= Await.result(observable.toFuture(), &lt;span&gt;10&lt;/span&gt;&lt;span&gt; seconds)

    def headResult() &lt;/span&gt;= Await.result(observable.head(), &lt;span&gt;10&lt;/span&gt;&lt;span&gt; seconds)

    def printResults(initial: String &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;): Unit =&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (initial.length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) print(initial)
      results().&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(res =&amp;gt;&lt;span&gt; println(converter(res)))
    }

    def printHeadResult(initial: String &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;): Unit = println(s&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${initial}${converter(headResult())}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
  }

  def getResult[T](fut: Future[T], timeOut: Duration &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt; second): T =&lt;span&gt; {
    Await.result(fut, timeOut)
  }

  def getResults[T](fut: Future[Iterable[T]], timeOut: Duration &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt; second): Iterable[T] =&lt;span&gt; {
    Await.result(fut, timeOut)
  }

  import monix.eval.Task
  import monix.execution.Scheduler.Implicits.&lt;/span&gt;&lt;span&gt;global&lt;/span&gt;&lt;span&gt;

  final &lt;/span&gt;&lt;span&gt;class&lt;/span&gt; FutureToTask[A](x: =&amp;gt;&lt;span&gt; Future[A]) {
    def asTask: Task[A] &lt;/span&gt;=&lt;span&gt; Task.deferFuture[A](x)
  }

  final &lt;/span&gt;&lt;span&gt;class&lt;/span&gt; TaskToFuture[A](x: =&amp;gt;&lt;span&gt; Task[A]) {
    def asFuture: Future[A] &lt;/span&gt;=&lt;span&gt; x.runAsync
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;MGOProtoConversion.scala&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;260&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package sdp.mongo.engine
import org.mongodb.scala.bson.collection.immutable.Document
import org.bson.conversions.Bson
import sdp.grpc.services._
import protobuf.bytes.Converter._
import MGOClasses._
import MGOAdmins._
import MGOCommands._
import org.bson.BsonDocument
import org.bson.codecs.configuration.CodecRegistry
import org.mongodb.scala.bson.codecs.DEFAULT_CODEC_REGISTRY
import org.mongodb.scala.FindObservable

&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOProtoConversion {

  type MGO_COMMAND_TYPE &lt;/span&gt;=&lt;span&gt; Int
  val MGO_COMMAND_FIND            &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
  val MGO_COMMAND_COUNT           &lt;/span&gt;= &lt;span&gt;20&lt;/span&gt;&lt;span&gt;
  val MGO_COMMAND_DISTICT         &lt;/span&gt;= &lt;span&gt;21&lt;/span&gt;&lt;span&gt;
  val MGO_COMMAND_DOCUMENTSTREAM  &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
  val MGO_COMMAND_AGGREGATE       &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;
  val MGO_COMMAND_INSERT          &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
  val MGO_COMMAND_DELETE          &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;
  val MGO_COMMAND_REPLACE         &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;
  val MGO_COMMAND_UPDATE          &lt;/span&gt;= &lt;span&gt;6&lt;/span&gt;&lt;span&gt;


  val MGO_ADMIN_DROPCOLLECTION    &lt;/span&gt;= &lt;span&gt;8&lt;/span&gt;&lt;span&gt;
  val MGO_ADMIN_CREATECOLLECTION  &lt;/span&gt;= &lt;span&gt;9&lt;/span&gt;&lt;span&gt;
  val MGO_ADMIN_LISTCOLLECTION    &lt;/span&gt;= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;
  val MGO_ADMIN_CREATEVIEW        &lt;/span&gt;= &lt;span&gt;11&lt;/span&gt;&lt;span&gt;
  val MGO_ADMIN_CREATEINDEX       &lt;/span&gt;= &lt;span&gt;12&lt;/span&gt;&lt;span&gt;
  val MGO_ADMIN_DROPINDEXBYNAME   &lt;/span&gt;= &lt;span&gt;13&lt;/span&gt;&lt;span&gt;
  val MGO_ADMIN_DROPINDEXBYKEY    &lt;/span&gt;= &lt;span&gt;14&lt;/span&gt;&lt;span&gt;
  val MGO_ADMIN_DROPALLINDEXES    &lt;/span&gt;= &lt;span&gt;15&lt;/span&gt;


  &lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AdminContext(
                           tarName: String &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                           bsonParam: Seq[Bson] &lt;/span&gt;=&lt;span&gt; Nil,
                           options: Option[Any] &lt;/span&gt;=&lt;span&gt; None,
                           objName: String &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
                         ){
    def toProto &lt;/span&gt;=&lt;span&gt; sdp.grpc.services.ProtoMGOAdmin(
      tarName &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.tarName,
      bsonParam &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;.bsonParam.map {b =&amp;gt;&lt;span&gt; sdp.grpc.services.ProtoMGOBson(marshal(b))},
      objName &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.objName,
      options &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;.options.map(b =&amp;gt;&lt;span&gt; ProtoAny(marshal(b)))

    )
  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; AdminContext {
    def fromProto(msg: sdp.grpc.services.ProtoMGOAdmin) &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AdminContext(
      tarName &lt;/span&gt;=&lt;span&gt; msg.tarName,
      bsonParam &lt;/span&gt;= msg.bsonParam.map(b =&amp;gt;&lt;span&gt; unmarshal[Bson](b.bson)),
      objName &lt;/span&gt;=&lt;span&gt; msg.objName,
      options &lt;/span&gt;= msg.options.map(b =&amp;gt;&lt;span&gt; unmarshal[Any](b.value))
    )
  }

  &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Context(
                      dbName: String &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                      collName: String &lt;/span&gt;= &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                      commandType: MGO_COMMAND_TYPE,
                      bsonParam: Seq[Bson] &lt;/span&gt;=&lt;span&gt; Nil,
                      resultOptions: Seq[ResultOptions] &lt;/span&gt;=&lt;span&gt; Nil,
                      options: Option[Any] &lt;/span&gt;=&lt;span&gt; None,
                      documents: Seq[Document] &lt;/span&gt;=&lt;span&gt; Nil,
                      targets: Seq[String] &lt;/span&gt;=&lt;span&gt; Nil,
                      only: Boolean &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                      adminOptions: Option[AdminContext] &lt;/span&gt;=&lt;span&gt; None
                    ){

    def toProto &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
      dbName &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dbName,
      collName &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.collName,
      commandType &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.commandType,
      bsonParam &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.bsonParam.map(bsonToProto),
      resultOptions &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.resultOptions.map(_.toProto),
      options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.options ==&lt;span&gt; None)
        None &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
      &lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        Some(ProtoAny(marshal(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) },
      documents &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;.documents.map(d =&amp;gt;&lt;span&gt; sdp.grpc.services.ProtoMGODocument(marshal(d))),
      targets &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.targets,
      only &lt;/span&gt;= Some(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.only),
      adminOptions &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.adminOptions.map(_.toProto)
    )

  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGODocument {
    def fromProto(msg: sdp.grpc.services.ProtoMGODocument): Document &lt;/span&gt;=&lt;span&gt;
      unmarshal[Document](msg.document)
    def toProto(doc: Document): sdp.grpc.services.ProtoMGODocument &lt;/span&gt;=
      &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProtoMGODocument(marshal(doc))
  }

  &lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt; MGOProtoMsg {
    def fromProto(msg: sdp.grpc.services.ProtoMGOContext) &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Context(
      dbName &lt;/span&gt;=&lt;span&gt; msg.dbName,
      collName &lt;/span&gt;=&lt;span&gt; msg.collName,
      commandType &lt;/span&gt;=&lt;span&gt; msg.commandType,
      bsonParam &lt;/span&gt;=&lt;span&gt; msg.bsonParam.map(protoToBson),
      resultOptions &lt;/span&gt;= msg.resultOptions.map(r =&amp;gt;&lt;span&gt; ResultOptions.fromProto(r)),
      options &lt;/span&gt;= msg.options.map(a =&amp;gt;&lt;span&gt; unmarshal[Any](a.value)),
      documents &lt;/span&gt;= msg.documents.map(doc =&amp;gt;&lt;span&gt; unmarshal[Document](doc.document)),
      targets &lt;/span&gt;=&lt;span&gt; msg.targets,
      adminOptions &lt;/span&gt;= msg.adminOptions.map(ado =&amp;gt;&lt;span&gt; AdminContext.fromProto(ado))
    )
  }

  def bsonToProto(bson: Bson) &lt;/span&gt;=&lt;span&gt;
    ProtoMGOBson(marshal(bson.toBsonDocument(
      classOf[org.mongodb.scala.bson.collection.immutable.Document],DEFAULT_CODEC_REGISTRY)))

  def protoToBson(proto: ProtoMGOBson): Bson &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Bson {
    val bsdoc &lt;/span&gt;=&lt;span&gt; unmarshal[BsonDocument](proto.bson)
    &lt;/span&gt;&lt;span&gt;override&lt;/span&gt; def toBsonDocument[TDocument](documentClass: Class[TDocument], codecRegistry: CodecRegistry): BsonDocument =&lt;span&gt; bsdoc
  }

  def ctxFromProto(proto: ProtoMGOContext): MGOContext &lt;/span&gt;=&lt;span&gt; proto.commandType match {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_COMMAND_FIND =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_QUERY,
        action &lt;/span&gt;=&lt;span&gt; Some(Find())
      )
      def toResultOption(rts: Seq[ProtoMGOResultOption]): FindObservable[Document] &lt;/span&gt;=&amp;gt; FindObservable[Document] = findObj =&amp;gt;&lt;span&gt;
        rts.foldRight(findObj)((a,b) &lt;/span&gt;=&amp;gt;&lt;span&gt; ResultOptions.fromProto(a).toFindObservable(b))

      (proto.bsonParam, proto.resultOptions, proto.only) match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (Nil, Nil, None) =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (Nil, Nil, Some(b)) =&amp;gt; ctx.setCommand(Find(firstOnly =&lt;span&gt; b))
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (bp,Nil,None) =&amp;gt;&lt;span&gt; ctx.setCommand(
          Find(filter &lt;/span&gt;=&lt;span&gt; Some(protoToBson(bp.head))))
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (bp,Nil,Some(b)) =&amp;gt;&lt;span&gt; ctx.setCommand(
          Find(filter &lt;/span&gt;= Some(protoToBson(bp.head)), firstOnly =&lt;span&gt; b))
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (bp,fo,None) =&amp;gt;&lt;span&gt; {
          ctx.setCommand(
            Find(filter &lt;/span&gt;=&lt;span&gt; Some(protoToBson(bp.head)),
              andThen &lt;/span&gt;=&lt;span&gt; fo.map(ResultOptions.fromProto)
            ))
        }
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (bp,fo,Some(b)) =&amp;gt;&lt;span&gt; {
          ctx.setCommand(
            Find(filter &lt;/span&gt;=&lt;span&gt; Some(protoToBson(bp.head)),
              andThen &lt;/span&gt;=&lt;span&gt; fo.map(ResultOptions.fromProto),
              firstOnly &lt;/span&gt;=&lt;span&gt; b))
        }
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt;&lt;span&gt; ctx
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_COMMAND_COUNT =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_QUERY,
        action &lt;/span&gt;=&lt;span&gt; Some(Count())
      )
      (proto.bsonParam, proto.options) match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (Nil, None) =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (bp, None) =&amp;gt;&lt;span&gt; ctx.setCommand(
          Count(filter &lt;/span&gt;=&lt;span&gt; Some(protoToBson(bp.head)))
        )
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (Nil,Some(o)) =&amp;gt;&lt;span&gt; ctx.setCommand(
          Count(options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt;&lt;span&gt; ctx
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_COMMAND_DISTICT =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_QUERY,
        action &lt;/span&gt;= Some(Distict(fieldName =&lt;span&gt; proto.targets.head))
      )
      (proto.bsonParam) match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Nil =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; bp: Seq[ProtoMGOBson] =&amp;gt;&lt;span&gt; ctx.setCommand(
          Distict(fieldName &lt;/span&gt;= proto.targets.head,filter =&lt;span&gt; Some(protoToBson(bp.head)))
        )
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; _ =&amp;gt;&lt;span&gt; ctx
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_COMMAND_AGGREGATE =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_QUERY,
        action &lt;/span&gt;= Some(Aggregate(proto.bsonParam.map(p =&amp;gt;&lt;span&gt; protoToBson(p))))
      )
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_ADMIN_LISTCOLLECTION =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_QUERY,
        action &lt;/span&gt;=&lt;span&gt; Some(ListCollection(proto.dbName)))
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_COMMAND_INSERT =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_UPDATE,
        action &lt;/span&gt;=&lt;span&gt; Some(Insert(
          newdocs &lt;/span&gt;= proto.documents.map(doc =&amp;gt;&lt;span&gt; unmarshal[Document](doc.document))))
      )
      proto.options match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(o) =&amp;gt;&lt;span&gt; ctx.setCommand(Insert(
          newdocs &lt;/span&gt;= proto.documents.map(doc =&amp;gt;&lt;span&gt; unmarshal[Document](doc.document)),
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_COMMAND_DELETE =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_UPDATE,
        action &lt;/span&gt;=&lt;span&gt; Some(Delete(
          filter &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.head)))
      )
      (proto.options, proto.only) match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (None,None) =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (None,Some(b)) =&amp;gt;&lt;span&gt; ctx.setCommand(Delete(
          filter &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.head),
          onlyOne &lt;/span&gt;=&lt;span&gt; b))
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (Some(o),None) =&amp;gt;&lt;span&gt; ctx.setCommand(Delete(
          filter &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.head),
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (Some(o),Some(b)) =&amp;gt;&lt;span&gt; ctx.setCommand(Delete(
          filter &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.head),
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)),
          onlyOne &lt;/span&gt;=&lt;span&gt; b)
        )
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_COMMAND_REPLACE =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_UPDATE,
        action &lt;/span&gt;=&lt;span&gt; Some(Replace(
          filter &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.head),
          replacement &lt;/span&gt;=&lt;span&gt; unmarshal[Document](proto.documents.head.document)))
      )
      proto.options match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(o) =&amp;gt;&lt;span&gt; ctx.setCommand(Replace(
          filter &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.head),
          replacement &lt;/span&gt;=&lt;span&gt; unmarshal[Document](proto.documents.head.document),
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_COMMAND_UPDATE =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_UPDATE,
        action &lt;/span&gt;=&lt;span&gt; Some(Update(
          filter &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.head),
          update &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.tail.head)))
      )
      (proto.options, proto.only) match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (None,None) =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (None,Some(b)) =&amp;gt;&lt;span&gt; ctx.setCommand(Update(
          filter &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.head),
          update &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.tail.head),
          onlyOne &lt;/span&gt;=&lt;span&gt; b))
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (Some(o),None) =&amp;gt;&lt;span&gt; ctx.setCommand(Update(
          filter &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.head),
          update &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.tail.head),
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; (Some(o),Some(b)) =&amp;gt;&lt;span&gt; ctx.setCommand(Update(
          filter &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.head),
          update &lt;/span&gt;=&lt;span&gt; protoToBson(proto.bsonParam.tail.head),
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)),
          onlyOne &lt;/span&gt;=&lt;span&gt; b)
        )
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_ADMIN_DROPCOLLECTION =&amp;gt;
      &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN,
        action &lt;/span&gt;=&lt;span&gt; Some(DropCollection(proto.collName))
      )
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_ADMIN_CREATECOLLECTION =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN,
        action &lt;/span&gt;=&lt;span&gt; Some(CreateCollection(proto.collName))
      )
      proto.options match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(o) =&amp;gt;&lt;span&gt; ctx.setCommand(CreateCollection(proto.collName,
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_ADMIN_CREATEVIEW =&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN,
        action &lt;/span&gt;= Some(CreateView(viewName =&lt;span&gt; proto.targets.head,
          viewOn &lt;/span&gt;=&lt;span&gt; proto.targets.tail.head,
          pipeline &lt;/span&gt;= proto.bsonParam.map(p =&amp;gt;&lt;span&gt; protoToBson(p))))
      )
      proto.options match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(o) =&amp;gt; ctx.setCommand(CreateView(viewName =&lt;span&gt; proto.targets.head,
          viewOn &lt;/span&gt;=&lt;span&gt; proto.targets.tail.head,
          pipeline &lt;/span&gt;= proto.bsonParam.map(p =&amp;gt;&lt;span&gt; protoToBson(p)),
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_ADMIN_CREATEINDEX=&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN,
        action &lt;/span&gt;= Some(CreateIndex(key =&lt;span&gt; protoToBson(proto.bsonParam.head)))
      )
      proto.options match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(o) =&amp;gt; ctx.setCommand(CreateIndex(key =&lt;span&gt; protoToBson(proto.bsonParam.head),
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_ADMIN_DROPINDEXBYNAME=&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN,
        action &lt;/span&gt;= Some(DropIndexByName(indexName =&lt;span&gt; proto.targets.head))
      )
      proto.options match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(o) =&amp;gt; ctx.setCommand(DropIndexByName(indexName =&lt;span&gt; proto.targets.head,
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_ADMIN_DROPINDEXBYKEY=&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN,
        action &lt;/span&gt;= Some(DropIndexByKey(key =&lt;span&gt; protoToBson(proto.bsonParam.head)))
      )
      proto.options match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(o) =&amp;gt; ctx.setCommand(DropIndexByKey(key =&lt;span&gt; protoToBson(proto.bsonParam.head),
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
      }
    }
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; MGO_ADMIN_DROPALLINDEXES=&amp;gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MGOContext(
        dbName &lt;/span&gt;=&lt;span&gt; proto.dbName,
        collName &lt;/span&gt;=&lt;span&gt; proto.collName,
        actionType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN,
        action &lt;/span&gt;=&lt;span&gt; Some(DropAllIndexes())
      )
      proto.options match {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;&lt;span&gt; ctx
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(o) =&amp;gt;&lt;span&gt; ctx.setCommand(DropAllIndexes(
          options &lt;/span&gt;=&lt;span&gt; Some(unmarshal[Any](o.value)))
        )
      }
    }

  }

  def ctxToProto(ctx: MGOContext): Option[sdp.grpc.services.ProtoMGOContext] &lt;/span&gt;=&lt;span&gt; ctx.action match {
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; None =&amp;gt;&lt;span&gt; None
    &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Some(act) =&amp;gt;&lt;span&gt; act match {
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Count(filter, options) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_COMMAND_COUNT,
          bsonParam &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt; (filter ==&lt;span&gt; None) Seq.empty[ProtoMGOBson]
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; Seq(bsonToProto(filter.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))},
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
                      &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) }
      ))
      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Distict(fieldName, filter) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_COMMAND_DISTICT,
          bsonParam &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt; (filter ==&lt;span&gt; None) Seq.empty[ProtoMGOBson]
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; Seq(bsonToProto(filter.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))},
          targets &lt;/span&gt;=&lt;span&gt; Seq(fieldName)

        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Find(filter, andThen, firstOnly) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_COMMAND_FIND,
          bsonParam &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt; (filter ==&lt;span&gt; None) Seq.empty[ProtoMGOBson]
          &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; Seq(bsonToProto(filter.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))},
          resultOptions &lt;/span&gt;=&lt;span&gt; andThen.map(_.toProto)
        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Aggregate(pipeLine) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_COMMAND_AGGREGATE,
          bsonParam &lt;/span&gt;=&lt;span&gt; pipeLine.map(bsonToProto)
        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Insert(newdocs, options) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_COMMAND_INSERT,
          documents &lt;/span&gt;= newdocs.map(d =&amp;gt;&lt;span&gt; ProtoMGODocument(marshal(d))),
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) }
        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Delete(filter, options, onlyOne) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_COMMAND_DELETE,
          bsonParam &lt;/span&gt;=&lt;span&gt; Seq(bsonToProto(filter)),
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) },
          only &lt;/span&gt;=&lt;span&gt; Some(onlyOne)
        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Replace(filter, replacement, options) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_COMMAND_REPLACE,
          bsonParam &lt;/span&gt;=&lt;span&gt; Seq(bsonToProto(filter)),
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) },
          documents &lt;/span&gt;=&lt;span&gt; Seq(ProtoMGODocument(marshal(replacement)))
        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; Update(filter, update, options, onlyOne) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_COMMAND_UPDATE,
          bsonParam &lt;/span&gt;=&lt;span&gt; Seq(bsonToProto(filter),bsonToProto(update)),
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) },
          only &lt;/span&gt;=&lt;span&gt; Some(onlyOne)
        ))


      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropCollection(coll) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; coll,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN_DROPCOLLECTION
        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateCollection(coll, options) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; coll,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN_CREATECOLLECTION,
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) }
        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; ListCollection(dbName) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN_LISTCOLLECTION
        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateView(viewName, viewOn, pipeline, options) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN_CREATEVIEW,
          bsonParam &lt;/span&gt;=&lt;span&gt; pipeline.map(bsonToProto),
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) },
          targets &lt;/span&gt;=&lt;span&gt; Seq(viewName,viewOn)
        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; CreateIndex(key, options) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN_CREATEINDEX,
          bsonParam &lt;/span&gt;=&lt;span&gt; Seq(bsonToProto(key)),
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) }
        ))


      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByName(indexName, options) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN_DROPINDEXBYNAME,
          targets &lt;/span&gt;=&lt;span&gt; Seq(indexName),
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) }
        ))

      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropIndexByKey(key, options) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN_DROPINDEXBYKEY,
          bsonParam &lt;/span&gt;=&lt;span&gt; Seq(bsonToProto(key)),
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) }
        ))


      &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; DropAllIndexes(options) =&amp;gt;&lt;span&gt;
        Some(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; sdp.grpc.services.ProtoMGOContext(
          dbName &lt;/span&gt;=&lt;span&gt; ctx.dbName,
          collName &lt;/span&gt;=&lt;span&gt; ctx.collName,
          commandType &lt;/span&gt;=&lt;span&gt; MGO_ADMIN_DROPALLINDEXES,
          options &lt;/span&gt;= { &lt;span&gt;if&lt;/span&gt;(options == None) None &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Some(ProtoAny(com.google.protobuf.ByteString.EMPTY))&lt;/span&gt;
          &lt;span&gt;else&lt;/span&gt; Some(ProtoAny(marshal(options.&lt;span&gt;get&lt;/span&gt;&lt;span&gt;))) }
        ))

    }
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 08 Nov 2018 05:37:00 +0000</pubDate>
<dc:creator>雪川大虫</dc:creator>
<og:description>上期我们介绍了cluster singleton，它的作用是保证在一个集群环境里永远会有唯一一个singleton实例存在。具体使用方式是在集群所有节点部署ClusterSingletonManage</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiger-xc/p/9928384.html</dc:identifier>
</item>
<item>
<title>virtualbox 安装虚拟机（centos7） 并映射本地文件夹至虚拟机（增强工具） - xiaobaiskill</title>
<link>http://www.cnblogs.com/xiaobaiskill/p/9928450.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaobaiskill/p/9928450.html</guid>
<description>&lt;h3&gt;&lt;span&gt;一、安装环境&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　操作系统：windows10&lt;/p&gt;
&lt;p&gt;　　virtualbox: 5.2.20 &lt;span&gt;（在安装virtualbox 时可能需要 进入BIOS 设置虚拟化系统启动）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　centos7:&lt;a href=&quot;http://mirrors.ustc.edu.cn/&quot; target=&quot;_blank&quot;&gt;http://mirrors.ustc.edu.cn/&lt;/a&gt;  获取centos7  7 (x86_64, Minimal) 版本&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;二、新建虚拟机&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　　1、新建虚拟机的名称和设置虚拟机的类型与版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108115335246-187525434.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2、分配内存。可根据自己的实际情况分配，我的一般2048&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108115629072-1310798218.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108115702694-649142673.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108115716825-1527960339.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108115733967-408845845.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108115803588-1273005739.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108115917253-1723376052.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;三、安装虚拟机系统 &lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　1、启动虚拟机，选择之前下好的iso镜像文件，启动&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108120152164-1621471686.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2\&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108120256362-2119088582.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 3、配置信息&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108120408691-1324070437.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4、&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108120433966-641194766.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 5、不用动，点击完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108120505478-772249882.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6、开始安装&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108120541966-1576097030.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　7、 配置root 密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108120617565-2100022017.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;8、配置好密码，点两下完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108120702975-525760771.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;9、等待安装完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108120738408-1237068745.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;10、重启&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108121005687-1282291219.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt; &lt;/span&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;四、设置共享文件夹&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、进入设置，共享文件夹，添加&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108121347174-1527894909.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、配置共享文件夹，共享文件夹的路径，以及在虚拟机上的名称。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108121425099-1084242187.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;&lt;span&gt; 五、安装增加工具&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、进入设备有一个安装增强工具&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108121852014-2064494733.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、安装时会报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108122027855-435185686.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3、查看是否挂载上去&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;df&lt;/span&gt; -h&lt;br/&gt;# 查看共享盘是否挂载上来了
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108122834560-1319337225.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;没有挂载上（并没有之前的www 名称的共享盘）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;4、先登录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108121217837-1564490321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;5、 手动安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mount&lt;/span&gt; /dev/cdrom /&lt;span&gt;mnt
# 先将cdrom 挂载道&lt;/span&gt;/mnt下&lt;br/&gt;cd /mnt&lt;br/&gt;./VBoxLinuxAdditions.run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行后报错(没有找到bzip2)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108122759759-2098166208.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 6、按照bzip2&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; &lt;span&gt;bzip2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之前忘记设置网络了，所以在这里下载不下了.下面设置一下网络。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（关机设置）&lt;/span&gt;&lt;span&gt;四个网卡设置网络地址转换，桥接网卡，内部网络，host-only (我也不知道具体哪一个是有用的，多设计几个网卡)。然后开机&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108124048200-901524987.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;7、下载好后，再执行，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mount /dev/cdrom /mnt&lt;br/&gt;cd /mnt&lt;br/&gt;./VBoxLinuxAdditions.run
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;8、还是按照失败&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108124650499-1902583854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;9、根据提示还需要安装一些东西&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;yum&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; &lt;span&gt;gcc&lt;/span&gt; &lt;span&gt;make&lt;/span&gt; &lt;span&gt;perl&lt;/span&gt; kernel-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# 整体更新一下&lt;br/&gt;yum update &lt;br/&gt;&lt;/span&gt;&lt;span&gt;# 重启命令&lt;br/&gt;&lt;/span&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;shutdown &lt;/span&gt;-r now&lt;/em&gt;&lt;/em&gt;&lt;/em&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 基本是到这一步就ok。&lt;/p&gt;

&lt;p&gt;再来一次&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mount&lt;/span&gt; /dev/cdrom /&lt;span&gt;mnt
cd &lt;/span&gt;/&lt;span&gt;mnt
.&lt;/span&gt;/VBoxLinuxAdditions.run
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此时你会发现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108130107026-1385203883.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输入yes,出车，安装完成&lt;/p&gt;
&lt;p&gt;此时查看df -h&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1332211/201811/1332211-20181108130340508-1499493416.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cd /media/&lt;span&gt;sf_www
# 查看是否是你本地的文件一样&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 10、最后将该文件软连接到你想知道的目录下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ln&lt;/span&gt; -s /media/sf_www /home/www&lt;span&gt;
cd &lt;/span&gt;/home/&lt;br/&gt;# 查看一下是否有www的文件夹
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 08 Nov 2018 05:09:00 +0000</pubDate>
<dc:creator>xiaobaiskill</dc:creator>
<og:description>一、安装环境 操作系统：windows10 virtualbox: 5.2.20 （在安装virtualbox 时可能需要 进入BIOS 设置虚拟化系统启动） centos7:http://mirro</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaobaiskill/p/9928450.html</dc:identifier>
</item>
</channel>
</rss>