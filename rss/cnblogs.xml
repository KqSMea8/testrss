<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>vue学习心得 - 不止前端</title>
<link>http://www.cnblogs.com/buzhiqianduan/p/7620102.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/buzhiqianduan/p/7620102.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;使用vue框架有一段时间了，这里总结一下心得，主要为新人提供学习vue一些经验方法和项目中一些解决思路。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;文中谨代表个人观点，如有错误，欢迎指正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;环境搭建&lt;/h2&gt;
&lt;p&gt;假设你已经通读vue官方文档（文档都没读一遍（至少），那不建议动手撸码），在大致了解vue是什么东西，有什么用，核心概念之后我们就可以开始着手学习vue。首先搭建环境。&lt;/p&gt;
&lt;p&gt;学习vue，我的建议是通过官手脚手架起步。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;Installation

$ npm install -g vue-cli

&amp;gt;&amp;gt;Usage

$ vue init &amp;lt;template-name&amp;gt; &amp;lt;project-name&amp;gt;

&amp;gt;&amp;gt;&amp;gt;&amp;gt;Example:

$ vue init webpack my-project
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据需要安装插件yes or no,一直回车，脚手架就生成了。接下来剖析脚手架结构。&lt;/p&gt;
&lt;h2 id=&quot;脚手架结构剖析&quot;&gt;脚手架结构剖析&lt;/h2&gt;
&lt;p&gt;再开始写项目之前，我们需要弄清什么地方写什么代码。&lt;/p&gt;
&lt;h3 id=&quot;build文件夹&quot;&gt;build文件夹&lt;/h3&gt;
&lt;p&gt;webpack配置文件。此处配置webpack规则。整个项目是通过webpack支持的。比如你要使用less，你需要在webapck规则里使用less。&lt;/p&gt;
&lt;h3 id=&quot;src-文件夹&quot;&gt;src 文件夹&lt;/h3&gt;
&lt;p&gt;撸码的地方～基本你所有的代码都在这一块完成。&lt;/p&gt;
&lt;p id=&quot;assets文件夹&quot;&gt;assets文件夹&lt;/p&gt;
&lt;p&gt;存放web中引用的图片 媒体资源。&lt;/p&gt;
&lt;p id=&quot;components文件夹&quot;&gt;components文件夹&lt;/p&gt;
&lt;p&gt;主要存放可复用组件，你可以在任意页面中复用这些组件。&lt;/p&gt;
&lt;p id=&quot;router文件夹&quot;&gt;router文件夹&lt;/p&gt;
&lt;p&gt;index.js 路由配置文件。在此处配置各个页面的跳转引用关系。&lt;/p&gt;
&lt;p id=&quot;app.vue&quot;&gt;APP.vue&lt;/p&gt;
&lt;p&gt;这里看一看做页面的根部。我们可以在这个页面进行一些css reset 操作。&lt;/p&gt;
&lt;p id=&quot;main.js&quot;&gt;main.js&lt;/p&gt;
&lt;p&gt;根逻辑，页面加载首先会加载这份js文件。&lt;/p&gt;
&lt;h3 id=&quot;static文件夹&quot;&gt;static文件夹&lt;/h3&gt;
&lt;p&gt;主要存放外部引用资源。比如xxx.min.js&lt;/p&gt;
&lt;h3 id=&quot;index.html&quot;&gt;index.html&lt;/h3&gt;
&lt;p&gt;vue是spa应用，所以只有一个入口，也就是index文件，这里我们进行一些不可更改资源（比如某某库）的引用，和html页面meta 、title之类的设定。&lt;/p&gt;
&lt;h2 id=&quot;vue核心概念&quot;&gt;vue核心概念&lt;/h2&gt;
&lt;p&gt;vue的核心概念是‘数据驱动’，假如我们需要切换view层，我们应该修改的是数据。下面我会分享一些我自己在学习vue中收获的一些实例，大家自行感受。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;实例展示的是方法论，概念性一样的东西，不要被例子局限，要将思维扩散出去。知识点学习还是看官方文档为主。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;vue如何处理dom显示样式切换动态样式&quot;&gt;vue如何处理dom显示，样式切换，动态样式&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-ad237443fb85f3bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;实例&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;watch-和-computed的-简析&quot;&gt;watch 和 computed的 简析&lt;/h2&gt;
&lt;p&gt;vue提供了2个动态监测data的函数，一个是watch，一个是computed。&lt;/p&gt;
&lt;p&gt;watch： 主要监测已经存在的data，处理data变化后的钩子&lt;/p&gt;
&lt;p&gt;computed： 处理一个已存在的data，返回一个data&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-64b0e2ebf78ac93a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;实例&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;vuex 是一个比较好的例子，可以用来学习监测，什么时候用什么方法去处理这些变化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;v-for-列表渲染机制&quot;&gt;v-for 列表渲染机制&lt;/h2&gt;
&lt;p&gt;v-for 是我认为vue中一个非常非常强大的指令，所有规律性动态数据的展示，都可以用for指令来完成。&lt;br/&gt;v-for是非常强大，可以追踪循环体内任意一个值的变化，针对变化来单独渲染。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;v－for 建议仔细阅读官方文档，而不是通读。在项目中，我们应该养成习惯。对于可变化的，规律性数据都采用for指令渲染。 我之所以又把for指令写了一遍，是因为我在开始写vue时，根本就没有活用for指令的简便和强大，还是古老的ul li 循环，繁杂的事件绑定委托。估计人类本性对一个东西还不太了解的时候会习惯性的用自己熟悉的方式去操作的原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-6d9204e4278534c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;嵌套数据展示和灵活操作&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;vue中引入组件以及父子组件的数据交互&quot;&gt;vue中引入组件以及父子组件的数据交互&lt;/h2&gt;
&lt;p&gt;关于组件，任意vue文件你都可以看做一个组件。 在项目中我们一般使用的应该都是单文件组件，单文件组件与页面结构无异，是具有完整功能的一个模块。比如一个评论框，你就可以剥离成一个组件，在任意页面文件中引入这个组件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-000a1a5d1aa54545.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;父组件（页面）&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-7b9abe7e834883eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;子组件&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;vue过滤器&quot;&gt;vue过滤器&lt;/h2&gt;
&lt;p&gt;在有一些业务场景需要对数据进行一些转换，比如后端图片地址的前缀匹配，这个时候filters就派上大用场了。看个例子感受一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-cc92acbac86dc286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;过滤器的使用&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;vue路由&quot;&gt;vue路由&lt;/h2&gt;
&lt;p&gt;路由对于spa应用的重要性不言而喻，整个应用的页面关系都是通过路由定义的。我们先来看看一个路由文件大致是什么样子&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-0b6bae81fbda8c8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;vue路由&quot;/&gt;&lt;/p&gt;
&lt;p&gt;vue 使用history模式，我们就可以去使用history的API，需要在路由配置中启用。默认hash模式，history模式也是一般应用的常用模式。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//切换当前地址，同 history.replaceState
 this.$router.replace({name: 'list'})  
//向history推入一级，同history.push
 this.$router.push({name: 'list'})  
//添加参数
 this.$router.push({name: 'list', query: {setting: 'setting'}})

//监测路由变化
watch:{
      '$route': function () {
       //处理事件
      }
    },


》》》》可以在页面任意处打印this.$route查看路由对象

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;vue的路由配置相对来说，是比较简单的，阅读一遍router文档，就可以快速上手。&lt;/p&gt;
&lt;blockquote readability=&quot;6.6543209876543&quot;&gt;
&lt;p&gt;路由是非常重要的一块，在动手开始写你的vue项目之前，你非常有必要通读一遍路由文档。而不是碰到问题再去解决。嵌套路由，动态路由会对你的开发起到非常有用的帮助。&lt;a href=&quot;https://router.vuejs.org/zh-cn/installation.html&quot;&gt;官方路由&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;可监测的全局变量vuex&quot;&gt;可监测的全局变量——vuex&lt;/h2&gt;
&lt;p&gt;项目开发中，往往我们会有一些全局变量，但是正常全局变量，vue是不能监测的，这个时候vuex就派上用场了。 &lt;a href=&quot;https://vuex.vuejs.org/zh-cn/intro.html&quot;&gt;vuex官方文档&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm install vuex --save

／／安装好vuex后，我们先新建一个store文件夹，存放vuex相关文件，如下图所示
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; index.js

import Vue from 'vue'
import Vuex from 'vuex'
import modulesApp from './modules/app'  //引入一个app模块
Vue.use(Vuex)

let store = new Vuex.Store({
  strict: process.env.NODE_ENV !== 'production',
  modules: {
    app: modulesApp
  }
})

export default store

———————————————— 分割线——————————————————

&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;app.js    //这里是个我的示例结构，可以查阅文档选择自己喜欢的书写方式

let state = {
  height: document.documentElement.scrollHeight + 'px',
  total: 1,
  list: [],

};

let getters = {};

let mutations = {
  height: state =&amp;gt; state.height = document.documentElement.scrollHeight + 'px',
  totalChange (state, total) {
    state.total = total
  },
  listChange (state, list) {
    state.list = list
  },


};

let actions = {};

export default {
  state,
  getters,
  mutations,
  actions
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-bc0af16b6933ec28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;vuex&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何开始写第一个demo项目&quot;&gt;如何开始写第一个demo项目&lt;/h2&gt;
&lt;p&gt;看完以上内容，想必大家对vue都有了进一步的了解。在通读官方文档后，我们对vue都有一个大致的了解，这样其实对于新手而言还是没有方向去写一个demo出来的，我们往往想写个漂亮的demo，但这样就必须花大量时间去写html和css，这点博主深有体会，看了2遍文档后还是不知道怎么去入手写个demo练手。这里博主有个建议就是：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;专注于vue本身，而不是花过多的时间去写html，css。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上我们已经搭建了一个vue开发环境，接下来就是找一款心仪的UI组件库，博主这里推荐&lt;a href=&quot;https://www.iviewui.com/components/form&quot;&gt;iview&lt;/a&gt;，个人感觉非常漂亮。然后就是构思你的demo要写什么，好了，拖组件搭UI，开始写真正写项目代码把，把更多时间花在vue学习之上。&lt;/p&gt;
&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;写到这里也就告一段落了。通过项目去学习vue，在这个过程碰到问题解决问题，就是一个效率的学习方法。&lt;br/&gt;以后回过头来看，“自己以前这个demo写的这么垃圾？” 就说明你又进步了。入门第一步，框架用的好，用的熟练，当表面已经无法满足我们的时候，OK ，深入框架的时机到了。可以开始研究vue是怎么实现数据绑定，怎么实现数据响应式这些更深层的技术原理了。&lt;/p&gt;
&lt;p&gt;博主打算对vue-cli进行二次开发，封装一些有用的命令。敬请期待！前段路坎坷，共勉～&lt;br/&gt;如果觉得本文对你有所帮助，就star一下吧～大传送之术！ &lt;a href=&quot;https://github.com/xu455255849/myBlog&quot;&gt;我的博客Github&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 14:07:00 +0000</pubDate>
<dc:creator>不止前端</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/buzhiqianduan/p/7620102.html</dc:identifier>
</item>
<item>
<title>我的Spring学习记录（四） - 156庄威龙</title>
<link>http://www.cnblogs.com/lger/p/7622792.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lger/p/7622792.html</guid>
<description>&lt;p&gt;虽然Spring管理这我们的Bean很方便，但是，我们需要使用xml配置大量的Bean信息，告诉Spring我们要干嘛，这还是挺烦的，毕竟当我们的Bean随之增多的话，xml的各种配置会让人很头疼。&lt;br/&gt;所以我们需要一种东西来解决这个问题，这就是——注解，这次我们使用注解来将我们学过的所有东西重新做过一遍。&lt;/p&gt;
&lt;h3 id=&quot;了解注解&quot;&gt;&lt;strong&gt;1. 了解注解&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;定义&quot;&gt;&lt;strong&gt;1.1 定义&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;注解是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。&lt;/p&gt;
&lt;h4 id=&quot;组成&quot;&gt;&lt;strong&gt;1.2 组成&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;元注解&lt;br/&gt;&lt;a href=&quot;mailto:包括@retention&quot;&gt;包括@Retention&lt;/a&gt;、@Target、@Document、@Inherited四种&lt;/li&gt;
&lt;li&gt;jdk注解&lt;br/&gt;&lt;a href=&quot;mailto:包括@override&quot;&gt;包括@Override&lt;/a&gt;、@Deprecated、@SuppressWarnings&lt;/li&gt;
&lt;li&gt;自定义注解&lt;br/&gt;自定义注解就是通过一定的规范，通过编写代码实现的&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;3.7661538461538&quot;&gt;
&lt;p&gt;这里有几篇博文可供大家参考，其实了解注解可以让自己使用Spring的注解时不会很诧异，所以了解一下还是有好处的&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/Qian123/p/5256084.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/Qian123/p/5256084.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.importnew.com/14479.html&quot; class=&quot;uri&quot;&gt;http://www.importnew.com/14479.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/yejg1212/p/3187362.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/yejg1212/p/3187362.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/lyy-2016/p/6288535.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/lyy-2016/p/6288535.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;加入maven依赖&quot;&gt;&lt;strong&gt;2. 加入maven依赖&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;这里的依赖于上篇博客的并没有什么不同之处，依赖主要如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;properties&amp;gt;
        &amp;lt;spring.version&amp;gt;4.3.10.RELEASE&amp;lt;/spring.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;


        &amp;lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;druid&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.0.31&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;


        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.1.44&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-beans&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-expression&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-aop&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-aspects&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

    &amp;lt;/dependencies&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;spring配置文件&quot;&gt;&lt;strong&gt;3. Spring配置文件&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;添加了相关的依赖后我们现在就要对Spring进行配置了，以下便是classpath下的applicationContext.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&amp;gt;
        
    &amp;lt;!--开启aspect注解--&amp;gt;
    &amp;lt;aop:aspectj-autoproxy /&amp;gt;

    &amp;lt;!--加载db.properties配置文件--&amp;gt;
    &amp;lt;context:property-placeholder location=&quot;db.properties&quot;/&amp;gt;
    &amp;lt;!--扫描包下的所有类，遇到相关注解会进行一些注册工作--&amp;gt;
    &amp;lt;context:component-scan base-package=&quot;cn.lger&quot;/&amp;gt;

    &amp;lt;!--开启注解--&amp;gt;
    &amp;lt;context:annotation-config/&amp;gt;

    &amp;lt;!--配置DataSource--&amp;gt;
    &amp;lt;bean name=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&amp;gt;
        &amp;lt;!--以下是数据库连接的具体信息 通过表达式将db.properties的信息注入--&amp;gt;
        &amp;lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&amp;gt;
        &amp;lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&amp;gt;
        &amp;lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driver}&quot;/&amp;gt;
        &amp;lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!--注册事务管理类--&amp;gt;
    &amp;lt;bean name=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&amp;gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!--开启事务注解 注解添加事务管理类映射--&amp;gt;
    &amp;lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&amp;gt;

&amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的配置文件当中跟之前有所不同的就是添加了context约束，还有利用context加载了&lt;code&gt;db.properties&lt;/code&gt;，这是有关数据库的相关配置，之前是直接在配置文件写入，现在进行了提取，然后利用了context进行加载。&lt;br/&gt;db.properties文件也是置于classpath下，具体内容是&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/spring_demo_1
jdbc.username=root
jdbc.password=root
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用注解装配bean&quot;&gt;&lt;strong&gt;4. 使用注解装配Bean&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;好，经过上面的折腾之后就可使用注解开发我们程序了，接下来进入主题。&lt;/p&gt;
&lt;p&gt;现在有一个场景，就是一个人拥有一只小狗叫旺财，如果参考之前的博客&lt;a href=&quot;http://blog.csdn.net/lger_pro/article/details/78061967&quot;&gt;我的Spring学习记录（二）&lt;/a&gt;就会发现我们需要配置的东西很多，现在我们用全新的方式来装配我们的Bean。现在我们给出实体，如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//这里为Man的超类，方便之后引申一些东西实现多态
public abstract class Human {
    public abstract String myNameIs();
}

//注册为Spring的Bean Bean的名字叫man
@Component(value = &quot;man&quot;)
public class Man extends Human{

    @Value(value = &quot;张三&quot;)
    private String name;

    //自动将Spring容器中Dog类型的Bean装配到dog
    @Autowired
    private Dog dog;

    public String getUsername() {
        return name;
    }

    public void setUsername(String username) {
        this.name = username;
    }

    public Dog getDog() {
        return dog;
    }

    public void setDog(Dog dog) {
        this.dog = dog;
    }

    public String myNameIs() {
        return name;
    }
    
    public void noFreeTime(){
        System.out.println(&quot;狗主人没有时间(public void noFreeTime())&quot;);
    }

    @Override
    public String toString() {
        return &quot;Man{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, dog=&quot; + dog +
                '}';
    }

}

&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//注册为Spring的Bean
@Component(value = &quot;dog&quot;)
public class Dog {

    //注入值
    @Value(value = &quot;旺财&quot;)
    private String name;
    @Value(value = &quot;土狗&quot;)
    private String breed;
    @Value(value = &quot;公&quot;)
    private String sex;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBreed() {
        return breed;
    }

    public void setBreed(String breed) {
        this.breed = breed;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    @Override
    public String toString() {
        return &quot;Dog{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, breed='&quot; + breed + '\'' +
                &quot;, sex='&quot; + sex + '\'' +
                '}';
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有了上面的准备工作之后，我们可以对我们的代码进行简单的测试了，我们现在不使用&lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt;来加载我们的Bean了，而是使用Spring test，同样的利用注解可以剩下很多事情，代码主要如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//junit运行的时候就会加载 SpringJUnit4ClassRunner,
//SpringJUnit4ClassRunner是Spring test提供的主要是方便测试    
@RunWith(SpringJUnit4ClassRunner.class)
//加载Spring 配置文件
@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)
public class TestWired {

    @Autowired
    private Man man;

    /**
     * 测试注解装配是否成功
     */
    @Test
    public void test01(){
        System.out.println(man);
    }

}

//打印结果：Man{username='张三', money=9600.0, dog=Dog{name='旺财', breed='土狗', sex='公'}}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用注解完成aop&quot;&gt;&lt;strong&gt;5. 使用注解完成AOP&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;现在我们的 &lt;code&gt;Man&lt;/code&gt;没有时间去看管我们的狗狗 &lt;code&gt;Dog&lt;/code&gt;了，迫切地需要找到一个帮忙照看狗狗的代理人 &lt;code&gt;Proxy&lt;/code&gt;，让他帮忙照看遛狗，&lt;code&gt;Proxy&lt;/code&gt;的代码实现如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Aspect
//这里必须注册为Spring的Bean，虽然有了Aspect
//但是需要Spring调用这个切面还是需要注册为Spring的组件
@Component
public class Proxy {

    @Pointcut(&quot;execution(* cn.lger.domain.Man.noFreeTime())&quot;)
    public void noFreeTime(){}

    @Before(value = &quot;noFreeTime()&quot;)
    public void before(){
        System.out.println(&quot;代理人去被代理人家里牵狗，然后遛狗&quot;);
    }

    @After(value = &quot;noFreeTime()&quot;)
    public void after(){
        System.out.println(&quot;代理人带狗狗回家&quot;);
    }


}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看到了上面的代码之后想想我们之前使用xml配置切面是不是很简单了。&lt;br/&gt;接下来我们测试一下我们的AOP是否能够成功&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)
public class TestAspect {

    @Autowired
    private Man man;

    @Test
    public void test01(){
        man.noFreeTime();
    }

}
//打印结果: 代理人去被代理人家里牵狗，然后遛狗
//         狗主人没有时间(public void noFreeTime())
//         代理人带狗狗回家
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过以上的测试我们基本上可以知道，与我们之前使用xml配置的AOP并没有什么结果上的不同，成功。&lt;/p&gt;
&lt;h3 id=&quot;使用注解完成spring事务&quot;&gt;&lt;strong&gt;6. 使用注解完成Spring事务&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;好，通过AOP后我们接下来的就是利用AOP实现的Spring声明式事务&lt;br/&gt;首先这里有 &lt;code&gt;dao&lt;/code&gt;和 &lt;code&gt;service&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Component
public class TransferDao extends JdbcTemplate {

    /**
     * 将钱的数目转向当前user的账户
     * @param money money
     * @param username username
     */
    public void transferMoneyToOne(Float money, String username){
        this.update(&quot;UPDATE account SET money = money + (?) WHERE username = ?&quot;, money, username);
    }

    /**
     * 通过有参构造函数注入DataSource
     * @param dataSource dataSource
     */
    @Autowired
    public TransferDao(DataSource dataSource){
        //因为没用xml注入dataSource所以这里需要自己设置
        //调用超类的构造函数设置dataSource
        super(dataSource);
    }
    
}

@Component
public class TransferService {

    @Autowired
    private TransferDao dao;

    /**
     * 转账业务，这里为了方便直接写了张三转给了李四100块钱
     */
    @Transactional
    public void transferMoney(){
        dao.transferMoneyToOne((float) -100, &quot;张三&quot;);
//        int i = 1 / 0;//这里模仿转账过程中可能出现的异常，测试时可以去掉注释用于测试事务是否成功执行
        dao.transferMoneyToOne((float) 100, &quot;李四&quot;);
//        throw new RuntimeException(&quot;这里突然死机了&quot;);
    }

    public TransferDao getDao() {
        return dao;
    }

    public void setDao(TransferDao dao) {
        this.dao = dao;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面我们进行测试工作来看看代码是否能够成功执行事务性的操作&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)
public class TestTransaction {

    @Autowired
    private TransferService transferService;

    /**
     * 测试转账事务
     */
    @Test
    public void test01(){
        transferService.transferMoney();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;经过我们的测试证明当没有出现异常的情况张三成功给了李四转账了，当我们去掉注释出现异常结果是转账不成功。注解式的Spring事务配置就先是这么多&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;strong&gt;7. 总结&lt;/strong&gt;&lt;/h3&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;注解替代我们的xml配置可以帮助我们节省下很多的开发步骤，提高我们的开发效率，但是注解也是有一定的缺陷的，比如有没有觉得我们好好的xml把所有的东西都放在一起看着就能够集中一点，而注解就是相对的分散，这样可能我们维护的时候就会在各个类直接的注解中转来转去。所以各有各的好处。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Spring的注解远远不止是这么多，比如装配我们的Bean的Autowired在某种情况下就会出错，比如我们多态的实现，有两个子类作为组件，那么它要注入哪个？？ 所以需要一个东西去辅助它，声明是哪一个Bean要被注入，除了Autowired装配还有Resource、Inject等；&lt;br/&gt;装配之外还有其他的注解都需要学习一下，但是这篇的长度就会很长很长了，所以我就没有详细的写明，我给出一些链接，希望给大家的学习节省一些时间，如果之后我闲着的时候我将会以这篇为导引，写多一些注解来一起学习&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;0.5748502994012&quot;&gt;
&lt;p&gt;Spring注解相关博文&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/xyh820/article/details/7303330/&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/xyh820/article/details/7303330/&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/u010987379/article/details/52152795&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/u010987379/article/details/52152795&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/szlbm/p/5512931.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/szlbm/p/5512931.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/zheng0518/article/details/49206847&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/zheng0518/article/details/49206847&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/lindonglian/article/details/47043727&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/lindonglian/article/details/47043727&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/biehongli/p/6640406.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/biehongli/p/6640406.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上的代码可以在&lt;a href=&quot;https://github.com/Mr-Pro/spring-demo/tree/master/spring-annotation&quot;&gt;Github&lt;/a&gt;下载&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 14:05:00 +0000</pubDate>
<dc:creator>156庄威龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lger/p/7622792.html</dc:identifier>
</item>
<item>
<title>Hadoop 2:Mapper和Reduce - 堅持╅信念★</title>
<link>http://www.cnblogs.com/lanston/p/hadoop_mapper_reduce.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lanston/p/hadoop_mapper_reduce.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Understanding and Practicing Hadoop Mapper and Reduce&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1 Mapper过程&lt;/h2&gt;
&lt;p&gt;Hadoop将输入数据划分为等长的小数据块(默认为64MB)的过程叫做分片,并为每个分片构建一个Mappper任务,并由Mapper任务执行用户自定义的函数处理分片中的数据,mapper就是将这些数据中包含我们感兴趣或要处理的数据构成一个以键值存储的数据集,比如按年月分析NCDC每月最高温度信息(关于NCDC温度数据格式和说明,请参考官方说明文档&lt;a href=&quot;ftp://ftp.ncdc.noaa.gov/pub/data/gsod/readme.txt&quot;&gt;NCDC DATA Readme.txt&lt;/a&gt;);&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;STN--- WBAN   YEARMODA    TEMP       DEWP      SLP        STP       VISIB      WDSP     MXSPD   GUST    MAX     MIN   
484310 99999  19720101    69.1 18    50.8 18  1034.4 17  1007.0 17    7.0 18    6.6 18   19.0  999.9    79.3*   60.3* 
484310 99999  19720102    67.6 19    51.4 19  1032.3 19  1004.9 19    6.9 19    3.9 19    8.0  999.9    78.3*   58.3* 
484310 99999  19720103    72.6 14    52.8 14  1032.0 14  1004.9 14    7.0 14    4.1 14    8.9  999.9    81.3*   62.4* 
035623 99999  19720208    43.9 24    36.8 24  9999.9  0  9999.9  0    3.4 24    9.4 24   19.0  999.9    50.0*   37.4* 99.99  999.9  110000
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;YEARMODA记录年月日,TEMP记录当天温度,由于我们只对年月分析,Mapper后得到如下键值存储的数据集;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;(197201,[69.1,67.6,72.6])
(197202,[43.9])
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后发送到Reduce函数.由于分片处理,当数据量越大拥有的分片数量就越多,处理每个分片所需要的时间少于处理整个输入的时间,所以如果在同一个机架上并行处理每个分片,并且分片数据比较少,那整个处理过程将获得更好的负载均衡.但如果由于硬件故障或任务运行失败,hadoop会将任务重新分配到其它可能不在同一个机架或数据中心的节点运行,这会导致机架或数据中心之间的网络传输,从而降低Mapper的处理效率.所以同等比率数据,本地化处理效率比较占优势.&lt;/p&gt;
&lt;h2&gt;2 Reduce 过程&lt;/h2&gt;
&lt;p&gt;Reduce合并Mapper传递过来的键值数据,对数据进行排序和按照用户自定义函数进行计算,最后将输出写入到本地节点,再流式同步到其它节点;比如计算当月最高温度,上面的Mapper键值数据经过Reduce后计算出如下的结果;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;(197201,72.6)
(197202,43.9)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于数据合并操作可能涉及不同机架上的节点间传递数据到合并的节点,所以网络带宽经常会遭遇到瓶颈和莫名其妙的延迟,为了更好的监控和避免这些意外发生,2.x版本增强了在处理过程中reporter功能,开发时善用这个功能,能避免和及时发现一些问题发生.&lt;/p&gt;
&lt;h2&gt;3 MapReduce的开发&lt;/h2&gt;
&lt;p&gt;MapReduce的开发需要编写Mapper函数,Reduce函数和运行作业的函数,同样以上面的按年月分析NCDC中当月最高温度为了例来介绍.首先编写Mapper函数(完整的代码可以在&lt;a href=&quot;https://github.com/LanstonWu/MyHadoop&quot;&gt;github获取&lt;/a&gt;;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;import java.io.IOException;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.JobContext;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reporter;
/***
 * 分析最高温度Mapper类
 * @author lanstonwu
 *
 */
public class TemperatureMapper extends MapReduceBase implements Mapper&amp;lt;LongWritable, Text, Text, DoubleWritable&amp;gt; {
    static enum MyCounters {
        NUM_RECORDS
    }
    private final double MISSING = 999.9;


    private String mapTaskId;
    private String inputFile;
    private int noRecords = 0;
    // 获取作业信息
    public void configure(JobConf job) {
        mapTaskId = job.get(JobContext.TASK_ATTEMPT_ID);
        inputFile = job.get(JobContext.MAP_INPUT_FILE);
    }

    public void map(LongWritable offset, Text input, OutputCollector&amp;lt;Text, DoubleWritable&amp;gt; output, Reporter reporter)
            throws IOException {
        String line = input.toString();//将输入转换为字符
        String yearStr = line.substring(14, 20), //截取年月字符
                tempStr = line.substring(25,30); // 截取温度字符
        double maxTemp = 0;

        ++noRecords;
        // Increment counters
        reporter.incrCounter(MyCounters.NUM_RECORDS, 1);

        // 更新作业状态信息
        if ((noRecords % 100) == 0) {
            reporter.setStatus(mapTaskId + &quot; processed &quot; + noRecords + &quot; from input-file: &quot; + inputFile);
        }
        if (!tempStr.matches(&quot;^([^A-Za-z]*?[A-Z][A-Za-z]*?)+.?&quot;)) {//匹配非字符情况时进行下面的操作
            maxTemp = Double.parseDouble(tempStr);
            if (maxTemp != MISSING)
                output.collect(new Text(yearStr), new DoubleWritable(maxTemp));
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;MapReduceBase是个虚拟类,为几种方法提供默认的无操作实现,在特殊的应用程序中可能需要覆盖其中的一些方法,目的是增强程序的扩展能力.&lt;br/&gt;Mapper是个接口,实现map函数,函数有四个参数,第一个LongWritable(键)表示输入文件offset,在开发中我们暂时用不到;第二Text(值)表示输入数据,第三个output表示输出,通过将结果写入该对象传递到reduce;第四个reporter表示对作业的当前状态处理.&lt;br/&gt;通过重写configure函数获取作业信息,用于在map函数中更新作业状态.&lt;br/&gt;map函数中首先将输入对象转换为字符,再通过substring截取分析的数据(年月和温度);然后更新进度更新作业状态,最后再对温度进行处理,由于温度数据是通过全年数据合并而来,合并前每个文件首行为字段列，合并是未进行处理，所以输入中会包含从其它文件合并而来的列名,所以这里进行正则匹配,当非字符时对温度进行转型为double,值不为999.99的情况下写出.然后再开发Reduce;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;import java.io.IOException;
import java.util.Iterator;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;

public class TemperatureReduce extends MapReduceBase implements Reducer&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt; ,&lt;span class=&quot;attribute&quot;&gt;DoubleWritable&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;Text&lt;/span&gt; , &lt;span class=&quot;attribute&quot;&gt;DoubleWritable&lt;/span&gt;&amp;gt;&lt;/span&gt;{
    public void reduce(Text key, Iterator&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;DoubleWritable&lt;/span&gt;&amp;gt;&lt;/span&gt; values, OutputCollector&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text,&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;DoubleWritable&lt;/span&gt;&amp;gt;&lt;/span&gt; output,Reporter reporter) throws IOException {
        double maxVal = 0; 
        while (values.hasNext()){
             maxVal=Double.max(Double.MIN_VALUE,values.next().get());
        }
        output.collect(key,new DoubleWritable(maxVal));
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Reduce 类实现Reducer的reduce函数,函数有4个参数,第一个key表示键,即从mapper函数output中传递过来的键;第二个values表示值,即mapper函数output中传递过来的value,第三个output表示输出,即结果输出;第四个reporter表示对作业状态的处理;&lt;br/&gt;reduce函数遍历key所对应的整个结果集,再通过对比最小的MIN_VALUE得出最大值;最后开发运行作业的类;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;import java.io.IOException;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.io.Text;
import com.sywu.hadoop.mapper.TemperatureMapper;
import com.sywu.hadoop.reduce.TemperatureReduce;

public class TemperatureMain {
    public static void main(String[] args) {
        if (args.length != 2) {
            System.err.print(&quot;参数传入错误!使用示例: WordCount &amp;lt;输入路径&amp;gt; &amp;lt;结果输出路径&amp;gt;&quot;);
            System.exit(-1);
        }

        JobConf jobConf = new JobConf();
        jobConf.setJobName(&quot;TemperatureMapperReduce&quot;);
        jobConf.setJarByClass(TemperatureMain.class);
        jobConf.setMapperClass(TemperatureMapper.class);
        jobConf.setReducerClass(TemperatureReduce.class);
        // 设置输入路径
        FileInputFormat.addInputPath(jobConf, new Path(args[0]));
        // 设置输出路径
        FileOutputFormat.setOutputPath(jobConf, new Path(args[1]));
        // 设置键输出格式
        jobConf.setOutputKeyClass(Text.class);
        // 设置键值输出格式
        jobConf.setOutputValueClass(DoubleWritable.class);
        try {
            JobClient.runJob(jobConf);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于最终的MapReduce要打包成jar包在命令行调用,需要传递必要的输入参数,所以TemperatureMain类先对输入参数进行了判断,再通过JobConf设置job名称,setJarByClass表示在运行的hadoop环境中通过类名找到和调用jar文件(通过HADOOP_CLASSPATH或运行时设置jar);setMapperClass设置用于处理的Mapper类;setReducerClass设置用于处理的Reduce类;再通过FileInputFormat抽象类的静态方法设置输入输出路径;如果结果输出格式和默认格式不同,则需要通过setOutputKeyClass和setOutputValueClass定义,最后通过JobClient运行job.&lt;/p&gt;
&lt;h2&gt;4 运行MapReduce&lt;/h2&gt;
&lt;p&gt;将类打包成jar上传到hadoop服务器,调用hadoop命令运行MapReduce.比如分析1972年每月最高温度;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;hadoop jar /tmp/myhadoop-1.0-SNAPSHOT.jar com.sywu.hadoop.main.TemperatureMain /ncdc_year_gz/gsod_1972.gz /tmp/result/02
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;jar表示设置hadoop运行时调用的jar,也可以设置HADOOP_CLASSPATH变量实现;com.sywu.hadoop.main.TemperatureMain是执行的主类,如果类放置在包内,则必须包名和类型全路径表示;/ncdc_year_gz/gsod_1972.gz是输入文件,即TemperatureMain类所需的第一个参数,如果该参数是目录路径,则hadoop依次传入目录下的所有文件进行处理;/tmp/result/02是输出路径,即TemperatureMain类所需的第二个参数,reduce输出的结果会写入该目录下,在作业运行前该目录必须不存在,hadoop不允许覆盖已有的文件.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;17/10/02 18:44:00 INFO client.RMProxy: Connecting to ResourceManager at gp-sdw1/192.168.56.12:8032
17/10/02 18:44:01 INFO client.RMProxy: Connecting to ResourceManager at gp-sdw1/192.168.56.12:8032
17/10/02 18:44:02 WARN mapreduce.JobResourceUploader: Hadoop command-line option parsing not performed. Implement the Tool interface and execute your application with ToolRunner to remedy this.
17/10/02 18:44:03 INFO mapred.FileInputFormat: Total input paths to process : 1
17/10/02 18:44:04 INFO mapreduce.JobSubmitter: number of splits:1
17/10/02 18:44:05 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1506922345100_0016
17/10/02 18:44:06 INFO impl.YarnClientImpl: Submitted application application_1506922345100_0016
17/10/02 18:44:06 INFO mapreduce.Job: The url to track the job: http://gp-sdw1:8088/proxy/application_1506922345100_0016/
17/10/02 18:44:06 INFO mapreduce.Job: Running job: job_1506922345100_0016
17/10/02 18:44:31 INFO mapreduce.Job: Job job_1506922345100_0016 running in uber mode : false
17/10/02 18:44:31 INFO mapreduce.Job:  map 0% reduce 0%
17/10/02 18:44:48 INFO mapreduce.Job:  map 100% reduce 0%
17/10/02 18:45:04 INFO mapreduce.Job:  map 100% reduce 100%
17/10/02 18:45:08 INFO mapreduce.Job: Job job_1506922345100_0016 completed successfully
17/10/02 18:45:09 INFO mapreduce.Job: Counters: 50
    File System Counters
        FILE: Number of bytes read=3420746
        FILE: Number of bytes written=7078435
        FILE: Number of read operations=0
        FILE: Number of large read operations=0
        FILE: Number of write operations=0
        HDFS: Number of bytes read=4556912
        HDFS: Number of bytes written=148
        HDFS: Number of read operations=6
        HDFS: Number of large read operations=0
        HDFS: Number of write operations=2
    Job Counters 
        Launched map tasks=1
        Launched reduce tasks=1
        Data-local map tasks=1
        Total time spent by all maps in occupied slots (ms)=13755
        Total time spent by all reduces in occupied slots (ms)=13803
        Total time spent by all map tasks (ms)=13755
        Total time spent by all reduce tasks (ms)=13803
        Total vcore-milliseconds taken by all map tasks=13755
        Total vcore-milliseconds taken by all reduce tasks=13803
        Total megabyte-milliseconds taken by all map tasks=14085120
        Total megabyte-milliseconds taken by all reduce tasks=14134272
    Map-Reduce Framework
        Map input records=201807
        Map output records=201220
        Map output bytes=3018300
        Map output materialized bytes=3420746
        Input split bytes=97
        Combine input records=0
        Combine output records=0
        Reduce input groups=12
        Reduce shuffle bytes=3420746
        Reduce input records=201220
        Reduce output records=12
        Spilled Records=402440
        Shuffled Maps =1
        Failed Shuffles=0
        Merged Map outputs=1
        GC time elapsed (ms)=597
        CPU time spent (ms)=11880
        Physical memory (bytes) snapshot=453296128
        Virtual memory (bytes) snapshot=4201644032
        Total committed heap usage (bytes)=298319872
    Shuffle Errors
        BAD_ID=0
        CONNECTION=0
        IO_ERROR=0
        WRONG_LENGTH=0
        WRONG_MAP=0
        WRONG_REDUCE=0
    com.sywu.hadoop.mapper.TemperatureMapper$MyCounters
        NUM_RECORDS=201807
    File Input Format Counters 
        Bytes Read=4556815
    File Output Format Counters 
        Bytes Written=148
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;日志记录作业名,输入文件信息(Total input paths to process),分片信息(number of splits),跟踪作业运行情况的url(The url to track the job)通过这个URL可以查看到作业运行情况,如果在map和reduce函数中有开发reporter,实时的状态信息可以在这里查看到,如果hadoop未启用historyserver这些信息和url访问将在作业结束时丢失;其它的还有map和reduce完成比率和Counters信息.&lt;/p&gt;
&lt;h2&gt;5 查看结果&lt;/h2&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;$ hadoop fs -ls /tmp/result/02/ 
Found 2 items
-rw-r--r--   3 hadoop supergroup          0 2017-10-02 18:45 /tmp/result/02/_SUCCESS
-rw-r--r--   3 hadoop supergroup        148 2017-10-02 18:45 /tmp/result/02/part-00000
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于分析的年度数据量小,hadoop只对文件进行1个分片,分片一个map任务和1个reduce任务,所以也只有一个reduce写出.查询结果文件便可以看到分析结果.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;xml&quot;&gt;$ hadoop fs -cat /tmp/result/02/part-00000 
197201  96.3
197202  99.1
197203  91.6
197204  94.2
197205  92.1
197206  102.4
197207  106.8
197208  107.0
197209  98.0
197210  94.1
197211  98.8
197212  102.6
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;6 总结&lt;/h2&gt;
&lt;p&gt;开发MapReduce作业需要开发Mapper函数,Reduce函数,和运行MapReduce作业的类;Mapper函数实现对输入数据生成键值格式数据,并传递给Reduce函数;Reduce函数合并Mapper传递过来的结果,排序和计算后输出到HDFS.开发Mapper和Reduce函数建议继承MapReduceBase虚拟类,以增强程序可扩展性.2.x版本可以通过reporter更新作业的状态和进度信息.&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 13:20:00 +0000</pubDate>
<dc:creator>堅持╅信念★</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lanston/p/hadoop_mapper_reduce.html</dc:identifier>
</item>
<item>
<title>初学node.js有感三 - 精心出精品</title>
<link>http://www.cnblogs.com/zyrblog/p/7619899.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zyrblog/p/7619899.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;WebStorm下的node.js&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、回顾与继续&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;      在前面，我们知道了node.js的基本框架和思路，在这些原生环境下我们对node.js的设计思想有了比较深刻的认识，并且具有了编写大型程序的能力了，但是程序的代码可能会比较拉杂，因此，我们就需要用到现有的框架了，在我们的社会上，不需要造太多的轮子，而需要在更高层次上去设计‘车’，因此使用别人做好的模板去完成自己的业务是一个比较节省时间并且有创造性的事情，在node.js中我们有太多的&lt;span&gt;轮子&lt;/span&gt;，比如说express框架，为我们提供了封装好的很多做事情的接口，我们可以方便的进行组装和搭配，比如ejs、jade这些现有的模板引擎，为我们提供了很多可扩展的能力，在这个基础上我们可以最大限度的发挥自己的&lt;span&gt;创造性&lt;/span&gt;，去完成自己业务。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、Express框架&lt;br/&gt;&lt;span&gt;       Express框架是后台的Node框架，所以和jQuery、zepto、yui、bootstrap都不一个东西。Express在后台的受欢迎的程度，和jQuery一样，就是企业的事实上的标准。&lt;/span&gt;&lt;span&gt;原生Node开发，会发现有很多问题。比如：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;     呈递静态页面很不方便，需要处理每个HTTP请求，还要考虑304问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;     路由处理代码不直观清晰，需要写很多正则表达式和字符串函数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;     不能集中精力写业务，要考虑很多其他的东西&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;        Express的哲学是在你的想法和服务器之间充当薄薄的一层。这并不意味着他不够健壮，或者没有足够的有用特性，而是尽量少干预你，让你充分表达自己的思想，同时提供一些有用的东西。同样的，我们还是使用npm来安装该框架：&lt;span&gt;--save参数&lt;/span&gt;，表示自动修改package.json文件，&lt;span&gt;自动添加依赖项&lt;/span&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;1&lt;/span&gt; npm install --save express&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;   用express框架写一个最简单的程序：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; express();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; app.get(&quot;/&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     res.send(&quot;success！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; app.get(/\/student\/([\d]{10})/,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     res.send(&quot;student info：&quot;+req.params[0&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;})
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; app.listen(3100);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;       在这里我们首先引用了该框架，其次通过new关键字创建了该对象，之后，我们对于首页的访问返回成功，对于路径名为‘/student/十位数字’的访问，我们通过正则表达式返回了相应的学号，在这里之所以可以使用req的&lt;span&gt;params[0]&lt;/span&gt;返回相应的数字，是因为我们在正则表达式中用（）对相应的地方进行了选中，同样的，我们还可以对更长的路径名进行这样的过滤，道理是一样的，同样的我们可以看到get方法可以对用户访问的路径进行解析，当然post主要是对表单进行处理的，另外在这里除了用正则表达式之外我们还可以使用  &lt;span&gt;:  &lt;/span&gt;来对我们想要表达的文字进行表示，比如这里我们就可以写为“/student/:id”，那么我们就可以得到id的值了，只要再使用正则表达式判断位数就可以了。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     app.get(&quot;/student/:id&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; id = req.params[&quot;id&quot;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; reg= /^[\d]{6}$/;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;正则验证&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(reg.test(id)){
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;            res.send(id);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;             res.send(&quot;请检查格式&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;      运行结果如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002114039818-1262558398.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      在这里我们还可以使用use方法来暴露静态文件，也叫静态文件&lt;span&gt;伺服&lt;/span&gt;能力：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;app.use(express.static(&quot;./public&quot;));&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;      这样我们就可以在网址中输入public文件夹下的任何路径而不需要输入public，很好的隐藏了一些重要的内容、迷惑了黑客的视线。并且假如public文件夹下有一个a.html文件，我们可以直接用127.0.0.1:3100/a.html来访问，更强大的是如果public文件夹下有一个index.html文件，则直接输入127.0.0.1:3100即可以访问。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   a、get用法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;         GET请求的参数在URL中，在原生Node中，需要使用url模块来识别参数字符串。在Express中，不需要使用url模块了。可以直接使用&lt;span&gt;req.query对象。&lt;/span&gt;&lt;br/&gt;     当用get请求访问一个网址的时候，做什么事情：&lt;br/&gt;     app.get(&quot;网址&quot;,function(req,res){&lt;br/&gt;      });&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;    这里的网址，&lt;span&gt;不分大小写&lt;/span&gt;，也就是说，路由是&lt;br/&gt;      app.get(&quot;/AAb&quot;,function(req,res){&lt;br/&gt;          res.send(&quot;你好&quot;);&lt;br/&gt;      });&lt;br/&gt;     实际上&lt;span&gt;小写&lt;/span&gt;的访问也行。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;    所有的GET参数，? 后面的都已经被忽略。 锚点#也被忽略，路由到/a ， 实际&lt;span&gt;/a?id=2&amp;amp;sex=nan&lt;/span&gt; 也能被处理。&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     &lt;strong&gt;表单可以自己提交到自己上。&lt;br/&gt;        app.get(&quot;/&quot;,function(req,res){&lt;br/&gt;           res.render(&quot;form&quot;);&lt;br/&gt;        });&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;     适合进行 RESTful路由设计。简单说，就是一个路径，但是http method不同，对这个页面的使用也不同。&lt;br/&gt;     /student/345345&lt;br/&gt;       get       读取学生信息&lt;br/&gt;       add      添加学生信息&lt;br/&gt;       delete  删除学生信息&lt;br/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;doctype html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;   b、post用法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        POST请求在express中不能直接获得，必须使用body-parser模块。使用后，将可以用req.body得到参数。但是如果表单中含有文件上传，那么还是需要使用formidable模块。当用post访问一个网址的时候可以使用下面的格式：&lt;br/&gt;    app.post(&quot;网址&quot;,function(req,res){&lt;br/&gt;    });&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;   app.post(&quot;/&quot;,function(req,res){&lt;br/&gt;        //将数据添加进入数据库&lt;br/&gt;        res.send(&quot;成功&quot;);&lt;br/&gt;    });&lt;/strong&gt;&lt;br/&gt;    c、all的用法：&lt;br/&gt;     如果想处理这个网址的任何method的请求，那么写all&lt;br/&gt;      app.all(&quot;/&quot;,function(){&lt;br/&gt;      });&lt;br/&gt;&lt;span&gt;&lt;strong&gt;三、中间件&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       我们输入的网址就像一个水流，中间件就像是过滤水流的大网，水流中的某些东西流经某一个地方被阻挡住的话就不会再向下面流去了，因此网的大小（中间件）的前后顺序非常重要，如果get、post回调函数中，没有next参数，那么就匹配上第一个路由，就不会往下匹配了。如果想往下匹配的话，那么需要写next()。&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     app.get(&quot;/&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res,next){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         console.log(&quot;1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;        next();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     app.get(&quot;/&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         console.log(&quot;2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;     让我们看一个例子，下面两个路由，感觉没有关系：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     app.get(&quot;/:username/:id&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         console.log(&quot;1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         res.send(&quot;用户信息&quot; +&lt;span&gt; req.params.username);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     app.get(&quot;/admin/login&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         console.log(&quot;2&quot;&lt;span&gt;);        
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;             res.send(&quot;管理员登录&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;      但是实际上冲突了，因为admin可以当做用户名 login可以当做id。&lt;br/&gt;      &lt;span&gt;解决方法1：交换位置。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        也就是说，express中所有的路由（中间件）的顺序至关重要。&lt;br/&gt;        匹配上第一个，就不会往下匹配了。 具体的往上写，抽象的往下写。&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;      app.get(&quot;/admin/login&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         console.log(&quot;2&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         res.send(&quot;管理员登录&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;     });
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     app.get(&quot;/:username/:id&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         console.log(&quot;1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         res.send(&quot;用户信息&quot; +&lt;span&gt; req.params.username);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;     解决方法2： 使用next()&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    app.get(&quot;/:username/:id&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res,next){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; username =&lt;span&gt; req.params.username;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检索数据库，如果username不存在，那么next()&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(检索数据库){
            console.log(&lt;/span&gt;&quot;1&quot;&lt;span&gt;);
            res.send(&lt;/span&gt;&quot;用户信息&quot;&lt;span&gt;);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            next();
        }
    });
    
    app.get(&lt;/span&gt;&quot;/admin/login&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
        console.log(&lt;/span&gt;&quot;2&quot;&lt;span&gt;);
        res.send(&lt;/span&gt;&quot;管理员登录&quot;&lt;span&gt;);
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;           路由get、post这些东西，就是中间件，中间件讲究顺序，匹配上第一个之后，就不会往后匹配了。next函数才能够继续往后匹配。&lt;br/&gt;          app.use()也是一个中间件。与get、post不同的是，他的网址不是精确匹配的。而是能够有小文件夹拓展的。&lt;br/&gt;          比如网址：  http://127.0.0.1:3000/admin/aa/bb/cc/dd&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     app.use(&quot;/admin&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         res.write(req.originalUrl + &quot;\n&quot;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    /admin/aa/bb/cc/dd&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         res.write(req.baseUrl + &quot;\n&quot;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   /admin&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         res.write(req.path + &quot;\n&quot;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    /aa/bb/cc/dd&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;         res.end(&quot;你好&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;      当不写路径的时候，实际上就相当于&quot;/&quot;，就是所有网址&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    app.use(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res,next){
        console.log(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date());
        next();
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;       app.use()就给了我们增加一些特定功能的便利场所。&lt;br/&gt;       大多数情况下，渲染内容用res.render()，将会根据views中的模板文件进行渲染。如果不想使用views文件夹，想自己设置文件夹名字，那么&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
app.set(&quot;views&quot;,&quot;aaaa&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;       如果想写一个快速测试页，当然可以使用res.send()。这个函数将根据内容，自动帮我们设置了Content-Type头部和200状态码。send()只能用一次，和end一样。和end不一样在于能够自动设置MIME类型。如果想使用不同的状态码，可以： &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; res.status(404).send('Sorry, we cannot find that!');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;     如果想使用不同的Content-Type，可以： &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
res.set('Content-Type', 'text/html');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;四、小小相册中的大大智慧&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       讲了这么多理论性的东西，我们需要实战来检验自己的掌握程度，因此，在这里我们使用node.js为服务器，制作一个相册管理器，我们可以在上面上传相片，也可以查看不同文件夹中的相片，在这里我们使用MVC模型来进行项目的布局、设计和实现！&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;     程序的功能：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    1、B/S模式，使用node.js作为服务器，浏览器为客户端，可以远程访问，至少保持局域网内的可访问性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    2、具有图片的上传能力，可以将特定的图片上传到特定的文件夹中，对上传图片的大小有限制，上传的图片具有统一格式的命名。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    3、具有高效路由能力，可以通过静态路由功能找到相应文件夹下的图片并且显示出来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    4、需要用到bootstrap、express框架、jQuery支持、ejs模板引擎、MVC等多种技术。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    首先让我们看一下工程的目录：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002192106740-863466994.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     其中node_modules中至少包含express、ejs、silly-datetime、formidable这些基本的模块。工程采用了MVC的模式，具有很强的可扩展性，在app.js是整个工程的配置和启动，在controller中是对app.js中的命令的一种解析和执行，对于不同的请求采用不同的方法进行响应，在models中是对数据的一种管理，比如读取文件的目录或者文件夹的目录等，并且返回这些数据给controller，而controller拿着这些数据交给views去渲染，并且显示相应的页面，可以说后端的呈递完全就是对数据的操作和显示，这些数据包括简单的数值、变量、对象、数组、字节流、字符流、多媒体数据等，而前端主要用来进行渲染和展现，在这里我们还是使用ejs模板引擎将得到的数据进行渲染和显示，并且使用了bootstrap技术和JQuery技术来增加美化程度，更快更好地完善我们的功能。uploads静态文件夹用来保存上传过来的图片，temp文件夹用来间接地呈递我们上传的图片，作为中转。public静态文件夹主要存放一下浏览器可以直接访问到的数据，比如css、HTML、图片、bootstrap等数据和文件，这就是文件的结构了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   4.1、app.js文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; express=require(&quot;express&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; app=&lt;span&gt;express();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; router=require(&quot;./controller/router.js&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;strong&gt;app.set(&quot;view engine&quot;,&quot;ejs&quot;&lt;span&gt;);
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;strong&gt;&lt;span&gt; 6 app.use(express.static(&quot;./public&quot;));
 7 app.use(express.static(&quot;./uploads&quot;));
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; app.get(&quot;/&quot;&lt;span&gt;,router.showIndex);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11 app.get(&quot;/up&quot;,router.showUp);
12 app.post(&quot;/up&quot;,router.doPost);
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;strong&gt;&lt;span&gt;14&lt;/span&gt; app.get(&quot;/:albumName&quot;&lt;span&gt;,router.showAlbum);
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;strong&gt;&lt;span&gt;16&lt;/span&gt; app.use(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (req,res) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     res.render(&quot;err&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;19&lt;/span&gt; app.listen(3100);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;         这是整个工程的指导文件，&lt;span&gt;对于每一个请求都将通过该文件进行分发和处理，可以说是核心枢纽&lt;/span&gt;，实现使用了ejs模板引擎，默认文件夹views为将要渲染的文件夹。其次暴露了两个文件夹作为静态文件夹，提供了对这两个文件夹下的所有文件的路由能力。然后对于首页访问命令，直接通过controller层进行细节的处理，通过MVC框架来呈现首页，然后是对于文件上传的两个界面，首先我们需要跳转到上传文件界面，这个时候使用get命令即可完成，并且返回填写信息界面，因此走了一遍MVC，其次是填写完表单需要提交的时候，我们需要使用post命令来提交表单，并且通过formidable来处理上传的图片信息。然后是对于图片文件夹的访问，我们对于不同的文件夹呈现不同的图片列表，最后是对于任意上面处理不了的信息，我们返回错误页面，当然也是通过ejs渲染之后来呈现。然后令程序监听3000以后的某个端口，避免冲突。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;   4.2、controller下面的router.js文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; file=require(&quot;../models/file.js&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; formidable = require('formidable'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; sd = require(&quot;silly-datetime&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; path = require(&quot;path&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; fs=require(&quot;fs&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;首页信息&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; exports.showIndex=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     file.getAllAlbums(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err,allAlbums) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(err){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             res.render(&quot;err&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         res.render(&quot;index&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             {&quot;albums&quot;&lt;span&gt;:allAlbums}
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        );
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    })
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示图片列表&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; exports.showAlbum=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; albumName=&lt;span&gt;req.params.albumName;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     file.getAllImagesByAlbumname(albumName,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(err,imageArray){
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(err){
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             res.render(&quot;err&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         res.render(&quot;album&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &quot;albumName&quot;:albumName, &quot;images&quot;&lt;span&gt;:imageArray
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        );
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示填写上传文件ejs&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; exports.showUp=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     file.getAllAlbums(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(err,albums)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         res.render(&quot;up&quot;&lt;span&gt;, {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &quot;allAlbums&quot;&lt;span&gt;: albums
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;提交上传的文件并处理，持久化&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; exports.doPost=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(req,res){
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; form = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; formidable.IncomingForm();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     form.uploadDir = &quot;./temp/&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     form.parse(req, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err, fields, files) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        console.log(fields);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        console.log(files);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; size=&lt;span&gt;parseInt(files.picture.size);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; if(size&amp;gt;1024*1024)&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     res.send(&quot;图片尺寸应小于1M&quot;);&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     //删除图片&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     fs.unlink(files.picture.path);&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     console.log(&quot;删除成功！&quot;)&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     return;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; ttt = sd.format(&lt;span&gt;new&lt;/span&gt; Date(), 'YYYYMMDDHHmmss'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; ran = parseInt(Math.random() * 89999 + 10000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; extname =&lt;span&gt; path.extname(files.picture.name);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; oldpath = __dirname + &quot;/../&quot; +&lt;span&gt; files.picture.path;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; newpath = __dirname + &quot;/../uploads/&quot; +fields.folder+&quot;/&quot;+ ttt + ran +&lt;span&gt; extname;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        console.log(oldpath);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        console.log(newpath);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;         fs.rename(oldpath, newpath, &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err) {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (err) {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; Error(&quot;改名失败&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                 console.log(&quot;失败&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;             res.render(&quot;success&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             console.log(&quot;成功&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;        这个文件可以说是&lt;span&gt;承上启下&lt;/span&gt;，首先分派一个任务交由models层来完成，得到相应的数据，然后拿着这些数据通过res.render()来渲染并且显示，并且暴露自己，可以让app.js访问到。在这里，我们需要注意异步编程的特点，一定要用callback函数来处理那些需要读写文件系统或者其他I/O设备的操作，不然将会出现异常和错误。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   &lt;strong&gt;   4.3、models文件夹下面的file.js文件&lt;/strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; fs = require(&quot;fs&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回所有文件夹列表&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; exports.getAllAlbums=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(callback){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     fs.readdir(&quot;./uploads&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err,files) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(err){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             callback(&quot;读取文件夹失败！&quot;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; allAlbums=&lt;span&gt;[];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         (&lt;span&gt;function&lt;/span&gt;&lt;span&gt; iterator(i) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(i==&lt;span&gt;files.length)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 callback (&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,allAlbums);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             fs.stat(&quot;./uploads/&quot;+files[i],&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err,stats) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(err){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     callback(&quot;解析文件夹失败！&quot;+files[i],&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(stats.isDirectory())
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    allAlbums.push(files[i]);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 iterator(i+1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         })(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据文件夹的名字来找到该文件夹下的所有图片文件并且返回&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; exports.getAllImagesByAlbumname =&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(albumname,callback){
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     fs.readdir(&quot;./uploads/&quot;+albumname,&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err,files) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(err){
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             callback(&quot;读取文件夹失败！&quot;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; allImages=&lt;span&gt;[];
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         (&lt;span&gt;function&lt;/span&gt;&lt;span&gt; iterator(i) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(i==&lt;span&gt;files.length)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 callback (&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,allImages);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                console.log(allImages);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             fs.stat(&quot;./uploads/&quot;+albumname+&quot;/&quot;+files[i],&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err,stats) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(err){
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                     callback(&quot;解析文件失败&quot;+files[i],&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(stats.isFile())
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                    allImages.push(files[i]);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 iterator(i+1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         })(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;      其实我们仔细思考一下就能明白，对文件的数据进行读，我们只有这两种操作，一种是&lt;span&gt;&lt;span&gt;返回所有文件夹列表&lt;/span&gt;，另一种是&lt;span&gt;根据文件夹的名字来找到该文件夹下的所有图片文件并且返回&lt;/span&gt;，这两种操作就是完全精细的，适用于我们项目需求的&lt;span&gt;原子操作&lt;/span&gt;，可以用来复用。在这里我们使用了iterator来保证同步执行。值得注意的是，如果我们文件读取失败或者文件夹读取失败，会提示&lt;span&gt;isFile()&lt;/span&gt;或者&lt;span&gt;isDirectory()&lt;/span&gt;未定义，这个时候，我们需要做的就是仔细看一下文件或者文件夹是否因为路径的原因而没有读取成功。这点在编程中十分重要。还有crtl+alt+I（i），注意这个地方一定是I，而不是L,可以对我们选中的（crtl+A）代码进行整理，这些编程技巧十分重要！！！！！！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;  &lt;strong&gt;&lt;strong&gt;   4.4、views文件夹下面的ejs文件&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;      完成了这些我们就需要关注一下前端的实现了，在这里我们通过ejs来进行渲染，同样的，我们借鉴了bootstrap中的模板，在www.bootcss.com网站中我们可以清楚的找到属于我们的组件和实例，并且搭建最基本的前端界面，本程序就是从上面借鉴的！我们从这个网站中下载bootstrap，然后解压之后，放到我们的public文件夹下面去，然后在该网站中找到“起步”，从中下载最简单的使用代码，然后在“全局CSS样式”和“组件”中，我们根据自己的业务要求选择适合自己使用的控件进行布局，具体的细节这里就略去不提了，最重要的是bootstrap中对jQuery有依赖，因此我们需要从网上下载jQuery的函数库，就是一个文件而已，然后放到bootstrap文件夹中的js文件夹下，这样我们就完成了准备工作！！！！！！&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002200141458-269979471.png&quot; alt=&quot;&quot; width=&quot;772&quot; height=&quot;392&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002200222568-289490736.png&quot; alt=&quot;&quot; width=&quot;750&quot; height=&quot;420&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002200708911-113694538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      准备完成了之后，让我们看一下ejs代码，下面的是index.ejs的代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html lang=&quot;zh-CN&quot;&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt;     &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;title&amp;gt;小小相册&amp;lt;/title&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&lt;span&gt;&lt;strong&gt;10     &amp;lt;style type=&quot;text/css&quot;&amp;gt;
11         .row h4{
12             text-align:center;
13         }
14     &amp;lt;/style&amp;gt;&lt;/strong&gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;16&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &amp;lt;&lt;strong&gt;nav&lt;/strong&gt; class=&quot;navbar navbar-default&quot;&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;div class=&quot;container-fluid&quot;&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;!-- Brand and toggle get grouped &lt;span&gt;for&lt;/span&gt; better mobile display --&amp;gt;
&lt;span&gt;22&lt;/span&gt;         &amp;lt;div class=&quot;navbar-header&quot;&amp;gt;
&lt;span&gt;23&lt;/span&gt;             &amp;lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot; aria-expanded=&quot;false&quot;&amp;gt;
&lt;span&gt;24&lt;/span&gt;                 &amp;lt;span class=&quot;sr-only&quot;&amp;gt;Toggle navigation&amp;lt;/span&amp;gt;
&lt;span&gt;25&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;26&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;27&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;28&lt;/span&gt;             &amp;lt;/button&amp;gt;
&lt;span&gt;29&lt;/span&gt;             &amp;lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&amp;gt;小小相册&amp;lt;/a&amp;gt;
&lt;span&gt;30&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &amp;lt;!-- Collect the nav links, forms, and other content &lt;span&gt;for&lt;/span&gt; toggling --&amp;gt;
&lt;span&gt;33&lt;/span&gt;         &amp;lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&amp;gt;
&lt;span&gt;34&lt;/span&gt;             &amp;lt;ul class=&quot;nav navbar-nav&quot;&amp;gt;
&lt;span&gt;35&lt;/span&gt;                 &amp;lt;li class=&quot;active&quot;&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;全部相册 &amp;lt;span class=&quot;sr-only&quot;&amp;gt;(current)&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;36&lt;/span&gt;                &lt;span&gt;&lt;strong&gt; &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/up&quot;&amp;gt;上传&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/strong&gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt;38&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;39&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;40&lt;/span&gt; &amp;lt;/nav&amp;gt;
&lt;span&gt;41 &amp;lt;div class=&quot;container&quot;&amp;gt;
42     &amp;lt;div class=&quot;row&quot;&amp;gt;
43         &amp;lt;% for (var i=0;i&amp;lt;albums.length;i++){%&amp;gt;
44         &amp;lt;div class=&quot;col-xs-6 col-md-3&quot;&amp;gt;
45             &amp;lt;a href=&quot;&amp;lt;%=albums[i]%&amp;gt;&quot; class=&quot;thumbnail&quot;&amp;gt;
46                 &amp;lt;img src=&quot;images/folder.jpg&quot; alt=&quot;&quot;&amp;gt;
47             &amp;lt;/a&amp;gt;
48             &amp;lt;h4&amp;gt;&amp;lt;%=albums[i]%&amp;gt;&amp;lt;/h4&amp;gt;
49         &amp;lt;/div&amp;gt;
50         &amp;lt;%}%&amp;gt;
51     &amp;lt;/div&amp;gt;
52 &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;&lt;strong&gt;54 &amp;lt;script src=&quot;js/jquery-1.11.3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
55 &amp;lt;script src=&quot;js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/strong&gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;57&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;    同样的，其他的ejs文件渲染如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;  album.ejs:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_003b91e2-d799-497a-80ef-363cd04033ea&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_003b91e2-d799-497a-80ef-363cd04033ea&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_003b91e2-d799-497a-80ef-363cd04033ea&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html lang=&quot;zh-CN&quot;&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt;     &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;title&amp;gt;小小相册&amp;lt;/title&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;link href=&quot;/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;style type=&quot;text/css&quot;&amp;gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .row h4{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             text-&lt;span&gt;align:center;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &amp;lt;/style&amp;gt;
&lt;span&gt;15&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;16&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &amp;lt;nav class=&quot;navbar navbar-default&quot;&amp;gt;
&lt;span&gt;19&lt;/span&gt;     &amp;lt;div class=&quot;container-fluid&quot;&amp;gt;
&lt;span&gt;20&lt;/span&gt;         &amp;lt;!-- Brand and toggle get grouped &lt;span&gt;for&lt;/span&gt; better mobile display --&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;div class=&quot;navbar-header&quot;&amp;gt;
&lt;span&gt;22&lt;/span&gt;             &amp;lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot; aria-expanded=&quot;false&quot;&amp;gt;
&lt;span&gt;23&lt;/span&gt;                 &amp;lt;span class=&quot;sr-only&quot;&amp;gt;Toggle navigation&amp;lt;/span&amp;gt;
&lt;span&gt;24&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;25&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;26&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;27&lt;/span&gt;             &amp;lt;/button&amp;gt;
&lt;span&gt;28&lt;/span&gt;             &amp;lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&amp;gt;小小相册&amp;lt;/a&amp;gt;
&lt;span&gt;29&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &amp;lt;!-- Collect the nav links, forms, and other content &lt;span&gt;for&lt;/span&gt; toggling --&amp;gt;
&lt;span&gt;32&lt;/span&gt;         &amp;lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&amp;gt;
&lt;span&gt;33&lt;/span&gt;             &amp;lt;ul class=&quot;nav navbar-nav&quot;&amp;gt;
&lt;span&gt;34&lt;/span&gt;                 &amp;lt;li &amp;gt;&amp;lt;a href=&quot;../&quot;&amp;gt;全部相册 &amp;lt;span class=&quot;sr-only&quot;&amp;gt;(current)&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;35&lt;/span&gt;                 &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/up&quot;&amp;gt;上传&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;36&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt;37&lt;/span&gt;         &amp;lt;/div&amp;gt;&amp;lt;!-- /.navbar-collapse --&amp;gt;
&lt;span&gt;38&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!-- /.container-fluid --&amp;gt;
&lt;span&gt;39&lt;/span&gt; &amp;lt;/nav&amp;gt;
&lt;span&gt;40&lt;/span&gt; &amp;lt;ol class=&quot;breadcrumb&quot;&amp;gt;
&lt;span&gt;41&lt;/span&gt;     &amp;lt;li&amp;gt;&amp;lt;a href=&quot;../&quot;&amp;gt;全部相册&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;42&lt;/span&gt;     &amp;lt;li class=&quot;active&quot;&amp;gt;&amp;lt;%=albumName%&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;43&lt;/span&gt; &amp;lt;/ol&amp;gt;
&lt;span&gt;44&lt;/span&gt; &amp;lt;div class=&quot;container&quot;&amp;gt;
&lt;span&gt;45&lt;/span&gt;     &amp;lt;div class=&quot;row&quot;&amp;gt;
&lt;span&gt;46&lt;/span&gt;         &amp;lt;% &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;images.length;i++){%&amp;gt;
&lt;span&gt;47&lt;/span&gt;         &amp;lt;div class=&quot;col-xs-6 col-md-3&quot;&amp;gt;
&lt;span&gt;48&lt;/span&gt;             &amp;lt;a href=&quot;#&quot; class=&quot;thumbnail&quot;&amp;gt;
&lt;span&gt;49&lt;/span&gt;                 &amp;lt;img src=&quot;&amp;lt;%=images[i]%&amp;gt;&quot; alt=&quot;&quot;&amp;gt;
&lt;span&gt;50&lt;/span&gt;             &amp;lt;/a&amp;gt;
&lt;span&gt;51&lt;/span&gt;             &amp;lt;h4&amp;gt;&amp;lt;%=images[i]%&amp;gt;&amp;lt;/h4&amp;gt;
&lt;span&gt;52&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;53&lt;/span&gt;         &amp;lt;%}%&amp;gt;
&lt;span&gt;54&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;55&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;56&lt;/span&gt; &amp;lt;script src=&quot;/js/jquery-1.11.3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;57&lt;/span&gt; &amp;lt;script src=&quot;/js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;58&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;59&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;   err.ejs:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_13b5a813-e2d7-426b-8e6b-2da0c8bbb03e&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_13b5a813-e2d7-426b-8e6b-2da0c8bbb03e&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_13b5a813-e2d7-426b-8e6b-2da0c8bbb03e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html lang=&quot;zh-CN&quot;&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt;     &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;title&amp;gt;小小相册&amp;lt;/title&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;link href=&quot;/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;style type=&quot;text/css&quot;&amp;gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .row h4{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             text-&lt;span&gt;align:center;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &amp;lt;/style&amp;gt;
&lt;span&gt;15&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;16&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &amp;lt;nav class=&quot;navbar navbar-default&quot;&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;div class=&quot;container-fluid&quot;&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;!-- Brand and toggle get grouped &lt;span&gt;for&lt;/span&gt; better mobile display --&amp;gt;
&lt;span&gt;22&lt;/span&gt;         &amp;lt;div class=&quot;navbar-header&quot;&amp;gt;
&lt;span&gt;23&lt;/span&gt;             &amp;lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot; aria-expanded=&quot;false&quot;&amp;gt;
&lt;span&gt;24&lt;/span&gt;                 &amp;lt;span class=&quot;sr-only&quot;&amp;gt;Toggle navigation&amp;lt;/span&amp;gt;
&lt;span&gt;25&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;26&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;27&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;28&lt;/span&gt;             &amp;lt;/button&amp;gt;
&lt;span&gt;29&lt;/span&gt;             &amp;lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&amp;gt;小小相册&amp;lt;/a&amp;gt;
&lt;span&gt;30&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &amp;lt;!-- Collect the nav links, forms, and other content &lt;span&gt;for&lt;/span&gt; toggling --&amp;gt;
&lt;span&gt;33&lt;/span&gt;         &amp;lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&amp;gt;
&lt;span&gt;34&lt;/span&gt;             &amp;lt;ul class=&quot;nav navbar-nav&quot;&amp;gt;
&lt;span&gt;35&lt;/span&gt;                 &amp;lt;li class=&quot;active&quot;&amp;gt;&amp;lt;a href=&quot;../&quot;&amp;gt;全部相册 &amp;lt;span class=&quot;sr-only&quot;&amp;gt;(current)&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;36&lt;/span&gt;                 &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/up&quot;&amp;gt;上传&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;37&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt;38&lt;/span&gt;         &amp;lt;/div&amp;gt;&amp;lt;!-- /.navbar-collapse --&amp;gt;
&lt;span&gt;39&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!-- /.container-fluid --&amp;gt;
&lt;span&gt;40&lt;/span&gt; &amp;lt;/nav&amp;gt;
&lt;span&gt;41&lt;/span&gt; &amp;lt;div class=&quot;container&quot;&amp;gt;
&lt;span&gt;42&lt;/span&gt;     &amp;lt;img src=&quot;/images/1.jpg&quot; alt=&quot;&quot;&amp;gt;
&lt;span&gt;43&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; &amp;lt;script src=&quot;/js/jquery-1.11.3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;46&lt;/span&gt; &amp;lt;script src=&quot;/js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;47&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;48&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;err&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;   success.ejs:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_d7199766-80d3-49de-90be-5a804965c1ee&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d7199766-80d3-49de-90be-5a804965c1ee&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d7199766-80d3-49de-90be-5a804965c1ee&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html lang=&quot;zh-CN&quot;&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt;     &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;title&amp;gt;小小相册&amp;lt;/title&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;link href=&quot;/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;style type=&quot;text/css&quot;&amp;gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .row h4{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             text-&lt;span&gt;align:center;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &amp;lt;/style&amp;gt;
&lt;span&gt;15&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;16&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &amp;lt;nav class=&quot;navbar navbar-default&quot;&amp;gt;
&lt;span&gt;20&lt;/span&gt;     &amp;lt;div class=&quot;container-fluid&quot;&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;!-- Brand and toggle get grouped &lt;span&gt;for&lt;/span&gt; better mobile display --&amp;gt;
&lt;span&gt;22&lt;/span&gt;         &amp;lt;div class=&quot;navbar-header&quot;&amp;gt;
&lt;span&gt;23&lt;/span&gt;             &amp;lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot; aria-expanded=&quot;false&quot;&amp;gt;
&lt;span&gt;24&lt;/span&gt;                 &amp;lt;span class=&quot;sr-only&quot;&amp;gt;Toggle navigation&amp;lt;/span&amp;gt;
&lt;span&gt;25&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;26&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;27&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;28&lt;/span&gt;             &amp;lt;/button&amp;gt;
&lt;span&gt;29&lt;/span&gt;             &amp;lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&amp;gt;小小相册&amp;lt;/a&amp;gt;
&lt;span&gt;30&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &amp;lt;!-- Collect the nav links, forms, and other content &lt;span&gt;for&lt;/span&gt; toggling --&amp;gt;
&lt;span&gt;33&lt;/span&gt;         &amp;lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&amp;gt;
&lt;span&gt;34&lt;/span&gt;             &amp;lt;ul class=&quot;nav navbar-nav&quot;&amp;gt;
&lt;span&gt;35&lt;/span&gt;                 &amp;lt;li class=&quot;active&quot;&amp;gt;&amp;lt;a href=&quot;../&quot;&amp;gt;全部相册 &amp;lt;span class=&quot;sr-only&quot;&amp;gt;(current)&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;36&lt;/span&gt;                 &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/up&quot;&amp;gt;上传&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;37&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt;38&lt;/span&gt;         &amp;lt;/div&amp;gt;&amp;lt;!-- /.navbar-collapse --&amp;gt;
&lt;span&gt;39&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!-- /.container-fluid --&amp;gt;
&lt;span&gt;40&lt;/span&gt; &amp;lt;/nav&amp;gt;
&lt;span&gt;41&lt;/span&gt; &amp;lt;div class=&quot;container&quot;&amp;gt;
&lt;span&gt;42&lt;/span&gt;     &amp;lt;img src=&quot;/images/2.jpg&quot; alt=&quot;&quot;&amp;gt;
&lt;span&gt;43&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; &amp;lt;script src=&quot;/js/jquery-1.11.3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;46&lt;/span&gt; &amp;lt;script src=&quot;/js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;47&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;48&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;   up.ejs:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html lang=&quot;zh-CN&quot;&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
&lt;span&gt; 5&lt;/span&gt;     &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;     &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt;     &amp;lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;title&amp;gt;小小相册&amp;lt;/title&amp;gt;
&lt;span&gt; 9&lt;/span&gt;     &amp;lt;link href=&quot;/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&lt;span&gt;10&lt;/span&gt;     &amp;lt;style type=&quot;text/css&quot;&amp;gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        .row h4{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             text-&lt;span&gt;align:center;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &amp;lt;/style&amp;gt;
&lt;span&gt;15&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;16&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &amp;lt;nav class=&quot;navbar navbar-default&quot;&amp;gt;
&lt;span&gt;19&lt;/span&gt;     &amp;lt;div class=&quot;container-fluid&quot;&amp;gt;
&lt;span&gt;20&lt;/span&gt;         &amp;lt;!-- Brand and toggle get grouped &lt;span&gt;for&lt;/span&gt; better mobile display --&amp;gt;
&lt;span&gt;21&lt;/span&gt;         &amp;lt;div class=&quot;navbar-header&quot;&amp;gt;
&lt;span&gt;22&lt;/span&gt;             &amp;lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot; aria-expanded=&quot;false&quot;&amp;gt;
&lt;span&gt;23&lt;/span&gt;                 &amp;lt;span class=&quot;sr-only&quot;&amp;gt;Toggle navigation&amp;lt;/span&amp;gt;
&lt;span&gt;24&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;25&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;26&lt;/span&gt;                 &amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
&lt;span&gt;27&lt;/span&gt;             &amp;lt;/button&amp;gt;
&lt;span&gt;28&lt;/span&gt;             &amp;lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&amp;gt;小小相册&amp;lt;/a&amp;gt;
&lt;span&gt;29&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &amp;lt;!-- Collect the nav links, forms, and other content &lt;span&gt;for&lt;/span&gt; toggling --&amp;gt;
&lt;span&gt;32&lt;/span&gt;         &amp;lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&amp;gt;
&lt;span&gt;33&lt;/span&gt;             &amp;lt;ul class=&quot;nav navbar-nav&quot;&amp;gt;
&lt;span&gt;34&lt;/span&gt;                 &amp;lt;li &amp;gt;&amp;lt;a href=&quot;../&quot;&amp;gt;全部相册 &amp;lt;span class=&quot;sr-only&quot;&amp;gt;(current)&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;35&lt;/span&gt;                 &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/up&quot;&amp;gt;上传&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt;36&lt;/span&gt;             &amp;lt;/ul&amp;gt;
&lt;span&gt;37&lt;/span&gt;         &amp;lt;/div&amp;gt;&amp;lt;!-- /.navbar-collapse --&amp;gt;
&lt;span&gt;38&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!-- /.container-fluid --&amp;gt;
&lt;span&gt;39&lt;/span&gt; &amp;lt;/nav&amp;gt;
&lt;span&gt;40&lt;/span&gt; 
&lt;strong&gt;&lt;span&gt;41&lt;/span&gt; &amp;lt;div class=&quot;container&quot;&amp;gt;
&lt;span&gt;42&lt;/span&gt;     &amp;lt;div class=&quot;row&quot;&amp;gt;
&lt;span&gt;43&lt;/span&gt;         &amp;lt;form style=&quot;width:40%&quot;  method=&quot;post&quot; action=&quot;#&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;
&lt;span&gt;44&lt;/span&gt;             &amp;lt;div class=&quot;form-group&quot;&amp;gt;
&lt;span&gt;45&lt;/span&gt;                 &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&quot;exampleInputEmail1&quot;&amp;gt;选择文件夹&amp;lt;/label&amp;gt;
&lt;span&gt;46                 &amp;lt;select class=&quot;form-control&quot;  name=&quot;folder&quot;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;                     &amp;lt;% &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;allAlbums.length;i++){%&amp;gt;
&lt;span&gt;48&lt;/span&gt;                     &amp;lt;option&amp;gt;&amp;lt;%=allAlbums[i]%&amp;gt;&amp;lt;/option&amp;gt;
&lt;span&gt;49&lt;/span&gt;                     &amp;lt;%}%&amp;gt;
&lt;span&gt;50&lt;/span&gt;                 &amp;lt;/select&amp;gt;
&lt;span&gt;51&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt;             &amp;lt;div class=&quot;form-group&quot;&amp;gt;
&lt;span&gt;54&lt;/span&gt;                 &amp;lt;label &lt;span&gt;for&lt;/span&gt;=&quot;exampleInputFile&quot;  &amp;gt;选择图片&amp;lt;/label&amp;gt;
&lt;span&gt;55                 &amp;lt;input type=&quot;file&quot; id=&quot;exampleInputFile&quot; name=&quot;picture&quot;&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;                 &amp;lt;p class=&quot;help-block&quot;&amp;gt;Example block-level help text here.&amp;lt;/p&amp;gt;
&lt;span&gt;57&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;             &amp;lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&amp;gt;Submit&amp;lt;/button&amp;gt;
&lt;span&gt;60&lt;/span&gt;         &amp;lt;/form&amp;gt;
&lt;span&gt;61&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;62&lt;/span&gt; &amp;lt;/div&amp;gt;&lt;/strong&gt;
&lt;span&gt;63&lt;/span&gt; &amp;lt;script src=&quot;/js/jquery-1.11.3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;64&lt;/span&gt; &amp;lt;script src=&quot;/js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;65&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;66&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;        最后是我们的总依赖package.json，在这里我们对自己的工程进行布局和显示：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_d8216cfb-cc3d-4fee-b347-dff6729d7a2a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d8216cfb-cc3d-4fee-b347-dff6729d7a2a&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d8216cfb-cc3d-4fee-b347-dff6729d7a2a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;  &quot;name&quot;: &quot;little-album&quot;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;  &quot;version&quot;: &quot;1.0.0&quot;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;  &quot;description&quot;: &quot;&quot;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;  &quot;main&quot;: &quot;app.js&quot;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  &quot;dependencies&quot;: {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    &quot;body-parser&quot;: &quot;^1.18.2&quot;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    &quot;ejs&quot;: &quot;^2.5.7&quot;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    &quot;express&quot;: &quot;^4.16.1&quot;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    &quot;formidable&quot;: &quot;^1.1.1&quot;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    &quot;silly-datetime&quot;: &quot;^0.1.2&quot;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  &quot;devDependencies&quot;: {},
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  &quot;scripts&quot;: {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;  &quot;author&quot;: &quot;&quot;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;  &quot;license&quot;: &quot;ISC&quot;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;        综上就是我们的程序了，算是一个demo，我们可以对其进行扩充，我们的架子已经搭好了，以后就是按着这样的套路来不断地增砖添瓦，并且对前端进行美工。让我们来看一下运行效果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002201904802-241017786.png&quot; alt=&quot;&quot; width=&quot;722&quot; height=&quot;333&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202009380-583088019.png&quot; alt=&quot;&quot; width=&quot;599&quot; height=&quot;325&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202101880-1667697481.png&quot; alt=&quot;&quot; width=&quot;609&quot; height=&quot;386&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202135740-1129308690.png&quot; alt=&quot;&quot; width=&quot;589&quot; height=&quot;308&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202221052-114093911.png&quot; alt=&quot;&quot; width=&quot;443&quot; height=&quot;288&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202331411-1708869191.png&quot; alt=&quot;&quot; width=&quot;577&quot; height=&quot;341&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202442536-388863124.png&quot; alt=&quot;&quot; width=&quot;388&quot; height=&quot;295&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202521130-465319597.png&quot; alt=&quot;&quot; width=&quot;708&quot; height=&quot;296&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202758161-2006953502.png&quot; alt=&quot;&quot; width=&quot;502&quot; height=&quot;242&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202823443-1165302680.png&quot; alt=&quot;&quot; width=&quot;539&quot; height=&quot;137&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202839771-1980622330.png&quot; alt=&quot;&quot; width=&quot;396&quot; height=&quot;147&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1157683/201710/1157683-20171002202859083-749176913.png&quot; alt=&quot;&quot; width=&quot;426&quot; height=&quot;151&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     由此可见程序完美执行了相应的任务，完成了相应的功能！！！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    工程文件已经压缩并且放在百度云上，网址为：&lt;a title=&quot;工程源码&quot; target=&quot;_blank&quot;&gt;http://pan.baidu.com/s/1gfL7UM3&lt;/a&gt;， 密码为：z6qv！！！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;六、总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       这也是一篇比较耗时的文章，算是对自己能力的一种锤炼，花了自己一两天的时间去学习和整理，最后使用一个工程来讲自己的所学所思所说所讲都用在了实践中，从最简单的实践中，一步步的去粗取精，最后实现了一个文件资源管理器的部分功能，如果想做的话还可以继续进行，文件夹的创建、修改和删除、文件的增删改查、移动到其他文件夹等功能，方法都和上传类似，到了这里总算可以歇一会儿了，领略一下站在半山腰看着山下的风景的美丽，对于nodejs我们已经掌握的不错了，但是还远远算不上精通，其实没有那个人可以完全对一门技术精通，即使是创造这门技术的人也没有绝对的把握去这样说，但是我们的确已经入门了，并且有了不错的成果和收获，将自己从其他语言中学到的MVC等技术运用到这个工程中是一种质的提升和成功，善于总结的人永远都是最有底气的人，因为积累了足够多的错误才能更加自信的去面对未知的技术和困难，永远保持一颗&lt;span&gt;谦逊&lt;/span&gt;的心，成功就在眼前！！！！！！&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 12:51:00 +0000</pubDate>
<dc:creator>精心出精品</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zyrblog/p/7619899.html</dc:identifier>
</item>
<item>
<title>UI自动化测试简介及Selenium工具的介绍和环境搭建 - 温一壶清酒</title>
<link>http://www.cnblogs.com/hong-fithing/p/7622215.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hong-fithing/p/7622215.html</guid>
<description>&lt;p&gt;&lt;span&gt;1.1何为自动化测试？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　是把以人为驱动的测试转化为机器执行的一种过程，它是一种以程序测试程序的过程。换言之，就是以程序实现的方式来代替手工测试。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.2自动化测试分类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　分为功能自动化测试和性能自动化测试&lt;/p&gt;
&lt;p&gt;一般所说的自动化测试是指功能自动化测试，是通过编码的方式，用一段程序来测试一个软件的功能，这样就可以重复执行程序来进行重复测试的目的。如果一个软件有小部分功能发生改变，只要修改一部分自动化测试代码，就可以重复对软件进行测试，从而提高测试效率。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.3做自动化测试应该满足哪些要求？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1.&lt;span class=&quot;fontstyle0&quot;&gt;任务测试明确， 不会频繁变动&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　2.&lt;span class=&quot;fontstyle0&quot;&gt;每日构建后的验证测试&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　3.&lt;span class=&quot;fontstyle0&quot;&gt;比较频繁的回归测试&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;　　4.&lt;span class=&quot;fontstyle0&quot;&gt;软件系统界面稳定， 变化少&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;　　5.&lt;/span&gt;需要在多平台运行相同的测试用例、组合遍历型的测试、大量的重复测试&lt;/p&gt;
&lt;p&gt;　　6.&lt;span class=&quot;fontstyle0&quot;&gt;软件维护周期长&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　7.&lt;span class=&quot;fontstyle0&quot;&gt;项目进度压力不太长&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　8.&lt;span class=&quot;fontstyle0&quot;&gt;被测系统软件开发比较规范， 能够保证系统的可测试性&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　9.&lt;span class=&quot;fontstyle0&quot;&gt;具备大量的自动化测试平台&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　10.&lt;span class=&quot;fontstyle0&quot;&gt;测试人员具备较强的编程能力&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通常情况下，只要满足以下三种情况就可以开展自动化测试：软件需求变更不频繁、 项目周期较长、 自动化测试脚本可重复使用&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.4自动化测试流程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1.4.1自动化测试的介入点：&lt;/p&gt;
&lt;p&gt;　　老式：一般是在&lt;strong&gt;系统测试&lt;/strong&gt;阶段开始介入， 多用于系统测试的回归测试和性能测试&lt;/p&gt;
&lt;p&gt;       新式：开发开始概要设计评审就可以开始介入&lt;/p&gt;
&lt;p&gt;1.4.2自动化测试流程：&lt;/p&gt;
&lt;p&gt;       可行性分析&amp;gt;测试需求分析（来源于测试团队内部）&amp;gt;制定测试计划&amp;gt;自动化测试设计&amp;gt;测试脚本开发&amp;gt; 无人职守测试&amp;gt;提交测试报告&amp;gt;脚本维护阶段&lt;/p&gt;
&lt;p&gt;1.4.3手工测试优缺点&lt;/p&gt;
&lt;p&gt;手工测试的缺点：重复性、精确性、效率&lt;/p&gt;
&lt;p&gt;手工测试的优点：&lt;span class=&quot;fontstyle0&quot;&gt;手工测试不可替代的地方至少包括 以下几个方面：&lt;/span&gt;测试用例的设计、经验和猜测错误能力、界面和用户体验测试、正确性的检查、人的思维和逻辑能力&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.5自动化测试工具&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;QTP&lt;/strong&gt;：是quicktest Professional的简称， 是一款商业化的自动化测试工具。 提供了强大易用的录制回放功能。 支撑B/S、 C/S两种架构的软件测试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Robot Framework&lt;/strong&gt;：是一款python编写的功能自动化测试框架。具备良好的可扩展性，支持关键字驱动，可以同时测试多种类型的客户端或者接口，可以进行分布式测试执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Selenium&lt;/strong&gt;: 是一款用于Web应用程序测试的工具，它支持多平台、多语言、多浏览去实现自动化测试。&lt;/p&gt;

&lt;p&gt;2.1Selenium工具简介&lt;/p&gt;
&lt;p&gt;Selenium是ThoughtWorks专门为Web应用而开发的自动化测试工具， 适合进行功能测试、验收测试，同时支持所有基于web的管理任务自动化。主要功能包括：测试与浏览器的兼容性，测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能，创建回归测试检验软件功能和用户需求。&lt;/p&gt;
&lt;p&gt;2.2Selenium特点：&lt;/p&gt;
&lt;p&gt;       开源、免费&lt;/p&gt;
&lt;p&gt;       多浏览器支持：Firefox、Chrome、IE、Opera&lt;/p&gt;
&lt;p&gt;       多平台支撑：windows、linux、MAC&lt;/p&gt;
&lt;p&gt;       对web页面有良好的支撑&lt;/p&gt;
&lt;p&gt;       简单（API简单）、灵活（用开发语言驱动）&lt;/p&gt;
&lt;p&gt;       支持分布式执行测试用例&lt;/p&gt;
&lt;p&gt;2.3Selenium工具组成&lt;/p&gt;
&lt;p&gt;是由几个工具组成，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002192902693-1181484182.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;①Selenium IDE 是嵌入到Firefox浏览器中的一个插件，实现简单的浏览器录制与回放功能。&lt;/p&gt;
&lt;p&gt;实际场景中如何使用？&lt;/p&gt;
&lt;p&gt;快速的创建BUG重现脚本，在测试人员的测试过程中，发现了BUG之后可以通过IDE将重现的步骤记录下来，以帮助开发人员更容易的重现BUG。IDE录制的脚本可以转换成多种语言，从而帮助我们快速的开发脚本。&lt;/p&gt;
&lt;p&gt;②Selenium Gird是一种自动化测试的辅助工具，Gird通过现有的计算机基础设施，能加快web_app的功能测试，利用Gird，可以很方便的同时在多台机器上和异构环境中并行运行多个测试用例。&lt;/p&gt;
&lt;p&gt;其主要特点：并行执行，通过一个主机统一控制用例在不同环境、不同浏览器下运行，灵活添加变动测试机&lt;/p&gt;
&lt;p&gt;③Selenium RC是Selenium家族的核心工具， Selenium RC支持多种不同的语言编写自动化测试脚本， 通过Selenium RC的服务器为代理服务器去访问应用从而达到测试的目的。Selenium RC使用分Client Libraries和Selenium Server， ClientLibraries库主要用于编写测试脚本， 用来控制Selenium Server的库。&lt;/p&gt;
&lt;p&gt;Selenium Server负责控制浏览器的行为， 它主要包含3部分：Launcher、Http Proxy、Core。&lt;/p&gt;
&lt;p&gt;其中Core是被Selenium Server嵌入到浏览器页面中， 它本质是JS函数的集合， 通过对这些JS函数进行操作，实现用程序对浏览器进行操作。Launcher 用于启动浏览器，把Core加载到浏览器页面中，并把浏览器代理设置成为Selenium Server的HttpProxy。&lt;/p&gt;
&lt;p&gt;④WebDriver针对各个浏览器而开发， 取代了嵌入到被测web应用中的javascript， 与浏览器紧密集成。同时 WebDriver还利用操作系统级的调用模拟用户输入。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;准备工具如下：&lt;br/&gt;&lt;span class=&quot;fontstyle1&quot;&gt;JDK&lt;span class=&quot;fontstyle0&quot;&gt;安装包： &lt;span class=&quot;fontstyle1&quot;&gt;JDK1.8&lt;span class=&quot;fontstyle0&quot;&gt;及以上&lt;br/&gt;&lt;span class=&quot;fontstyle1&quot;&gt;Eclipse &lt;span class=&quot;fontstyle0&quot;&gt;压缩包： &lt;span class=&quot;fontstyle1&quot;&gt;http://www.eclipse.org/downloads/&lt;br/&gt;Selenium&lt;span class=&quot;fontstyle0&quot;&gt;压缩包： &lt;span class=&quot;fontstyle1&quot;&gt;http://code.google.com/p/selenium/downloads/list，Selenium建议使用Java中的Maven下载，更方便&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;环境搭建就以Maven为例，要用Maven这个插件，就得查看该插件是否已集成在自己使用的Eclipse中，查看方式如下：&lt;/p&gt;
&lt;p&gt;Window&amp;gt;Preferences，查看是否有Maven文件，若有，则说明已经集成好了（或已配置好了），可以使用，若没有，则需要自己手动配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002194355958-1077683640.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第一步：&lt;/p&gt;
&lt;p&gt;1.1新建一个Maven工程，File&amp;gt;New&amp;gt;Other&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002194710708-2101550785.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.2选择Maven&amp;gt;选择Maven Project&amp;gt;点击Next&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002194754052-1292505148.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.3弹出如下界面，默认下一即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002194956208-494292111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 1.4在接下来的窗口中，选择maven-archetype-quickstart&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002195050536-157823029.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.5此处需要填写信息，包名及工程名，随意自己填写&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002195401271-1271722305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.6点击Finish后，就会生成一个工程，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002195536068-1478533804.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二步，下载Selenium需要的jar包&lt;/p&gt;
&lt;p&gt;2.1打开该网址：&lt;a href=&quot;http://www.mvnrepository.com/&quot; target=&quot;_blank&quot;&gt;http://www.mvnrepository.com/&lt;/a&gt;，在输入框中输入Selenium，点击搜索，出现如下界面，由于我们配置的环境是Java+Selenium，所以选择第一个即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002195901536-2085738919.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.2版本有很多，看个人选择，我下载的3.4.0版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002200028583-1452882289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.3点击3.4.0，出现如下界面，把如下代码复制到所建工程的pom.xml文件中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002200223318-682576371.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.4粘贴到pom.xml文档中，保存便会自动下载&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002200525333-1675277174.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.5下载完成后，可查看到刚下载的Selenium中包含的jar包，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1242227/201710/1242227-20171002200721505-127616685.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三步：&lt;/p&gt;
&lt;p&gt;环境已配置完毕，就去写第一个自动化代码吧。在百度输入框中输入12306并点击搜索，代码实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.test.auto;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.openqa.selenium.By;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.openqa.selenium.WebDriver;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.openqa.selenium.WebElement;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.openqa.selenium.chrome.ChromeDriver;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; yihuqingjiu_test_12306 {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;chrom浏览器驱动的位置&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         System.setProperty(&quot;webdriver.chrome.driver&quot;,&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chromedriver.exe&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;web驱动指向chrom驱动并创建对象driver&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         WebDriver driver=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ChromeDriver();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取网址&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         driver.get(&quot;https://www.baidu.com&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;浏览器最大化&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        driver.manage().window().maximize();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;kw是输入框的id，12306是在输入框中药输入的内容&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         driver.findElement(By.id(&quot;kw&quot;)).sendKeys(&quot;12306&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;su是搜索按钮的id&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         WebElement btn=driver.findElement(By.id(&quot;su&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击事件&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        btn.click();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;休眠时间&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         Thread.sleep(3000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭页面&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        driver.close();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;23.41935483871&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;本文仅代表作者观点，系作者@温一壶清酒发表。转载请注明出处：&lt;a href=&quot;http://www.cnblogs.com/hong-fithing/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/hong-fithing/&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 02 Oct 2017 12:13:00 +0000</pubDate>
<dc:creator>温一壶清酒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hong-fithing/p/7622215.html</dc:identifier>
</item>
<item>
<title>Javascript 中 ==(相等运算符) 和 ===(严格相等运算符) 区别 - 奋勇前行</title>
<link>http://www.cnblogs.com/fyqx/p/7622201.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fyqx/p/7622201.html</guid>
<description>&lt;p&gt;　　在JS中,&quot;===&quot;叫做严格运算符，&quot;==&quot;叫做相等运算符。&lt;/p&gt;
&lt;p&gt;它们的区别是相等运算符（&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;）比较两个值是否相等，严格相等运算符（&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;）比较它们是否为“同一个值”。&lt;/p&gt;
&lt;p&gt;如果两个值不是同一类型，严格相等运算符（&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;）直接返回&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;，而相等运算符（&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;）会将它们转化成同一个类型，再用严格相等运算符进行比较。&lt;/p&gt;

&lt;p&gt;严格运算符的运算规则如下:&lt;/p&gt;
&lt;p&gt;(1)不同类型值 如果两个值的类型不同，直接返回false。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
18 === &quot;18&quot;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&quot;true&quot;=== &lt;span&gt;true;&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;br/&gt;1===1; //true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(2)同一类的原始类型值 同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false。  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
NaN === NaN;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;NaN与任何值都不相等;（包括自身）&lt;/span&gt;
+0 === -0; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(3)同一类的复合类型值  两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个对象。  &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
{} === {}; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
[] === []; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
(&lt;span&gt;function&lt;/span&gt; (){} === &lt;span&gt;function&lt;/span&gt; (){}); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; v1 =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; v2 =&lt;span&gt; v1;
v1 &lt;/span&gt;=== v2; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;两个变量引用同一个对象，则它们相等&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(4)undefined和null  undefined 和 null 与自身严格相等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
undefined === undefined; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;span&gt;null&lt;/span&gt; === &lt;span&gt;null;&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var &lt;span class=&quot;nx&quot;&gt;v1&lt;span class=&quot;p&quot;&gt;;
&lt;span class=&quot;kd&quot;&gt;var &lt;span class=&quot;nx&quot;&gt;v2&lt;span class=&quot;p&quot;&gt;;
&lt;span class=&quot;nx&quot;&gt;v1 &lt;span class=&quot;o&quot;&gt;=== &lt;span class=&quot;nx&quot;&gt;v2; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;//变量声明后默认值是&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;，因此两个只声明未赋值的变量是相等的。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;相等运算符在比较相同类型的数据时，与严格相等运算符完全一样。&lt;/p&gt;
&lt;p&gt; 在比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。类型转换规则如下：&lt;/p&gt;
&lt;p&gt;(1)原始类型的值  原始类型的数据会转换成数值类型再进行比较。字符串和布尔值都会转换成数值.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1 == &lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 1 === 1&lt;/span&gt;

0 == &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 0 === 0&lt;/span&gt;

2 == &lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 2 === 1&lt;/span&gt;

2 == &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 2 === 0&lt;/span&gt;

'true' == &lt;span&gt;true&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 Number('true') === Number(true)&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 NaN === 1&lt;/span&gt;

'' == 0; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 Number('') === 0&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 0 === 0&lt;/span&gt;

'' == &lt;span&gt;false&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 Number('') === Number(false)&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 0 === 0&lt;/span&gt;

'1' == &lt;span&gt;true&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 Number('1') === Number(true)&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 等同于 1 === 1&lt;/span&gt;

'\n  123  \t' == 123; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 因为字符串转为数字时，省略前置和后置的空格&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; (2)对象与原始类型值比较  对象（这里指广义的对象，包括数值和函数）与原始类型的值比较时，对象转化成原始类型的值，再进行比较。&lt;/p&gt;


&lt;p&gt; (3)undefined和null  undefined和null与其他类型的值比较时，结果都为false，它们互相比较时结果为true。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;false&lt;/span&gt; == &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;span&gt;false&lt;/span&gt; == undefined; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;

0 == &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
0 == undefined; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;span&gt;
undefined &lt;/span&gt;== &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特别提醒:相等运算符的缺点&lt;/p&gt;
&lt;p&gt;1.相等运算符隐藏的类型转换，会带来一些违反直觉的结果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
'' == '0'  ;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
0 == '';             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
0 == '0' ;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;

2 == &lt;span&gt;true&lt;/span&gt; ;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
2 == &lt;span&gt;false&lt;/span&gt;;          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;

&lt;span&gt;false&lt;/span&gt; == 'false' ;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;span&gt;false&lt;/span&gt; == '0' ;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;

&lt;span&gt;false&lt;/span&gt; == undefined;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;span&gt;false&lt;/span&gt; == &lt;span&gt;null&lt;/span&gt;;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;span&gt;null&lt;/span&gt; == undefined ;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;

' \t\r\n ' == 0;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.使用相等运算符可能会对后续代码造成意外影响.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; a =&lt;span&gt; undefined; 
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){     
    console.log(&lt;/span&gt;&quot;1&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;} 
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a =&lt;span&gt; undefined; 
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a === &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){     
    console.log(&lt;/span&gt;&quot;1&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;无输出&lt;/span&gt;
}&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用不当,执行意图发生改变.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;总结:建议尽量使用严格相等运算符。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐一下阮一峰的文章:http://javascript.ruanyifeng.com/grammar/operator.html#toc9&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 12:07:00 +0000</pubDate>
<dc:creator>奋勇前行</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fyqx/p/7622201.html</dc:identifier>
</item>
<item>
<title>初识Hibernate之理解持久化类 - Single_Yam</title>
<link>http://www.cnblogs.com/yangming1996/p/7622147.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangming1996/p/7622147.html</guid>
<description>&lt;p&gt;     上一篇文章我们简单介绍了Hibernate相关的一些最基本的文件及其作用，并在最后完整的搭建了Hibernate的运行环境，成功的完成了与数据库的映射。但是至于其中的一些更加细节的地方并没有很详尽的解释，本篇则主要介绍Hibernate中的一个关键元素，持久化类。主要涉及以下一些内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;定义用作持久化类的基本要求&lt;/li&gt;
&lt;li&gt;持久化对象的几种不同状态及其相互之间的转换&lt;/li&gt;
&lt;li&gt;使用Hibernate完成对数据库的crud操作&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;一、定义用作持久化类的基本要求&lt;/strong&gt;&lt;br/&gt;     所谓的持久化类其实本质上也就是一个普通的Java类，只不过我们通过配置文件让它与数据库中的某张表形成对应关系。虽然Hibernate号称低侵入式设计，对持久化类基本不做要求，但是实际上为了一些优化效率而言，遵守一定的规则则可以提高我们框架的运行效率。&lt;br/&gt;     首先，在该类中需要提供一个无参的构造器。因为我们的持久化类和数据库中具体的数据表形成了映射，那么我们从数据库中取出的数据都会被转换成持久化类的对象返回，这里的无参构造器就是用于框架在反射时构建持久化类对象时候使用的。当然，这一点一般不用我们关心，在Java类中如果没有显式指定构造器都会有一个默认的无参构造器。&lt;br/&gt;     其次，在该类中定义的属性，也就是用于与数据表的字段相对应的元素，它们需要满足Javabean规范，提供相对应的getter和setter方法。这一点毋庸置疑，和我们平常对类属性方法策略是相同的，但是如果有其他需要，也可以自定义访问策略，此处只是Hibernate建议。&lt;br/&gt;     最后，该类不能不定义为final类。在Hibernate中通过生成代理对象来优化框架性能是很常见的操作，而大部分生成代理的方式是通过javassist生成持久化的子类进行代理，如果持久化被定义为final，显然是无法进行代理的。&lt;/p&gt;
&lt;p&gt;     还有一些其他的规则需要遵守，但是由于并不是强制要求且只有在某些场景下才具有相应的应用价值，此处暂时不做介绍，等到相应的场景再进行补充。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、持久化对象的三种不同的状态&lt;/strong&gt;&lt;br/&gt;     一个持久化对象对应于数据表中的一条记录，那么无论是对数据表的增加删除还是修改都是基于该持久化对象的。比如我想要插入一条记录到数据表中，我就可以new一个持久化对象并为其各个属性（对应于数据表的字段）赋值，然后映射到数据表中。这就是典型的以操作对象的方式操作数据库，但是这个持久化对象是有几种状态的，某个状态下对对象的修改是可以映射到数据表的，而某个状态下则不能作为持久化对象与数据表进行映射操作。而持久化对象主要有以下三个不同状态：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;瞬态：对象刚刚被new创建出来，只是一个普通的类对象。&lt;/li&gt;
&lt;li&gt;持久化：持久化对象与一个Hibernate Session相关联，在这个状态下，对象的所有属性值的改动，都是可以在事务结束时提交到数据库中的&lt;/li&gt;
&lt;li&gt;脱管：原本处于持久状态的对象因为其对应的Session被关闭，而失去持久化能力。此时的对象就处于脱管状态。一旦有Session愿意关联脱管对象，那么该对象就可以立马变为持久状态。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;至于这三种不同状态下的相互转换可以用下面这张图很明显的表示出来：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171001160412193?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，Transient表示瞬态，Persisitent表示持久化，Detached表示脱管状态。这张图同时也囊括了持久化对象的整个生命周期，至于其中各个方法的详细介绍，本篇的下一小节将陆续介绍，通过这些方法的调用来感受持久化对象的状态变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、使用Hibernate完成对数据库的crud操作&lt;/strong&gt;&lt;br/&gt;     上述主要介绍了有关Hibernate持久化对象的一些基本状态等内容，但是对于上图中具体方法调用后，持久化对象状态改变情况并不是很直观。本小节就将从具体代码执行的结果看这些状态之间的切换，至于一些配置文件的内容此处不再编写（详见上篇文章，此处节约篇幅突出重点），首先我们看insert操作。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;1、持久化实体对象&lt;/strong&gt;&lt;br/&gt;     持久化实体对象也可以理解为插入一条记录到数据表中，反正最终都是让我们new出来的持久化对象和数据表中的某一行相关联。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Transaction transaction = session.beginTransaction();

UserInfo user = new UserInfo();
user.setName(&quot;single&quot;);
user.setAge(21);

session.save(user);
//提交事务
transaction.commit();
session.close();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此处只列出了最核心的一部分代码。我们首先创建了一个user的持久化对象，此时该对象只是一个普通Java对象并不具备持久化能力，这个状态就是瞬态。接着我们调用save方法，这个方法就会将user对象当前各个属性的值映射到数据库中，并且在save方法调用后，user这个对象此时的状态就变成了持久化状态。所以说，我们的插入操作也是持久化实体对象的一个过程。从Navicat中可以显然的看出来，新数据已经插入：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171001200202720?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时的user，只要session不关闭就可以不断的通过修改user属性的值来映射数据表。例如下面一段程序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;UserInfo user = new UserInfo();
user.setName(&quot;single&quot;);
user.setAge(21);

session.save(user);

user.setName(&quot;cyy&quot;);
//提交事务
transaction.commit();
session.close();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们在save方法之后再次对user对象的属性进行修改，然后我们看保存到数据库中的是什么。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171001211823025?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再看看控制台的输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171001211904286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然，调用save方法，Hibernate会为我们生成一条insert语句，我们重新修改user对象的属性值，Hibernate又为我们生成了一条update语句。&lt;br/&gt;但是在没有提交事务之前，所有的Sql语句对于数据库的操作都是预操作，并不会实际改变数据库。直到事务提交的时候，所有的操作才变为实际数据表的变化。还有几个和save相关的方法在这里简单介绍下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Serializable save(Object var1)：这是我们上述一直在使用的save方法，var1就是我们的持久化对象，通过调用该方法，Hibernate会为我们生成一条insert语句并立即对数据库进行一次预插入操作。最后返回该对象所对应的数据表中一行的主键值。&lt;/li&gt;
&lt;li&gt;void persist(Object var1)：这个方法所做的事情和save方法是一样的，都是将持久化对象的各个属性值去映射到数据表中的一行数据，只是不返回对应的主键的值。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;除此之外，persisit方法和save方法还有一个重要区别。save方法在调用后会立马向数据库发送一条Sql，做一次预插入操作。而perisist方法采用懒加载机制，persist如果在事务之外调用，它不会立即向数据库发送Sql语句进行预插入，而是暂时被缓存直到清除缓存的时候才向数据进行插入。这样做有一个好处就是减少了对数据库的访问次数，但是缺点就在于数据库中的数据始终没有得到更新，容易产生脏数据读取。通过个例子看看：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;UserInfo user = new UserInfo();
user.setName(&quot;single&quot;);
user.setAge(21);

session.save(user);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们将这段代码从事务中抽离出来单独执行，通过打断点可以看到在save方法调用结束之时控制台输出的信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171002151044351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然，save方法调用结束就会立马对数据库进行预插入操作。下面我们看persisit方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;UserInfo user = new UserInfo();
user.setName(&quot;single&quot;);
user.setAge(21);
        
session.persist(user);
session.flush();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过断点调试，可以看到perisist方法调用结束后，控制台并没有输出任何信息，反而在flush方法调用完毕之后，控制台输出insert语句。这就是persisit的懒加载思想，平常的一般操作首选save，在一些长会话流程的时候可以选择persist方法降低数据库压力。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;2、根据主键加载持久化实体&lt;/strong&gt;&lt;br/&gt;     以上我们可以通过save方法向数据库中插入一条记录，同样我们也可以使用get方法根据主键的值从数据库中加载出来一个持久化对象。下面我们看个例子，首先展示下userinfo表中内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171002172233250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着我们使用Hibernate取出其中某条记录：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/*这里依然只是展示部分代码，说明问题即可*/
UserInfo user = (UserInfo)session.get(UserInfo.class,2);
System.out.println(&quot;name: &quot;+user.getName()+&quot;,age: &quot;+ user.getAge());

//提交事务
transaction.commit();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的get方法主要有两个参数，第一个参数指定要加载的数据表，第二个参数指定主键值。Hibernate将根据该主键的值进行加载，最后会返回一个Object对象。运行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171002174211358?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从运行结果来看，显然我们成功的根据主键值加载出来一个userInfo对象。除此之外，get方法调用结束后也会立即向数据库进行访问操作，这点和save方法是类似的。当然，如果主键的值不存在，那么将返回null，否则则会返回相对应的持久化对象。这里需要注意一点的是，我们的get方法是用于加载一个持久化对象的，而对于数据库的各种查询操作将在后文介绍。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;3、更新持久化实体&lt;/strong&gt;&lt;br/&gt;     除了insert和get，我们还可以通过操作持久化对象的属性值来修改数据表中的数据内容。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;UserInfo user = (UserInfo)session.get(UserInfo.class, 2);
user.setName(&quot;aaaa&quot;);
user.setAge(111);

session.update(user);

transaction.commit();
session.close();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程序比较简单，从数据库的变化来看，上述程序将主键值为2的记录name和age字段的信息做了修改。程序在控制台一共输出了两条Sql语句，一条是get方法调用结束生成的，一条是commit时候生成的update更新语句。也就是说update方法调用结束后并没有立即访问数据库，而是暂时存放在缓存中，等事务提交的时候在要求数据库执行。&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;3、删除持久化实体&lt;/strong&gt;&lt;br/&gt;     Hibernate中提供delete方法通过持久化对象来删除数据表中的一行记录。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//删除数据库中id为3的记录
UserInfo user = (UserInfo)session.get(UserInfo.class,3);

session.delete(user);

//提交事务
transaction.commit();
session.close();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;首先我们获得数据表中id为3的一条记录的引用，然后直接调用delete方法删除该记录。同样的，Hibernate为我们生成两条Sql语句，一条是get生成的，一条是delete方法产生的，但是delete方法结束后并没有立即向数据库发送Sql语句，而是等到事务提交之时。&lt;/p&gt;
&lt;p&gt;最后还要提到两个方法，这两个方法用于清除session中的持久化对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;clear：调用该方法将清除与session绑定的所有持久化对象，这些对象统统变为脱管状态，或者说游离状态&lt;/li&gt;
&lt;li&gt;evict：该方法有一个参数，调用该方法将显式指定清除session中的某个具体的持久化对象，调用完毕之后，该对象将处于游离状态&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;至此，有关持久化类及其生成的对象的相关知识，已经简单的介绍了，下篇我们将学习映射。总结不到之处，望指出。&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 11:44:00 +0000</pubDate>
<dc:creator>Single_Yam</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangming1996/p/7622147.html</dc:identifier>
</item>
<item>
<title>MySQL优化原理 - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/7620964.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/7620964.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;说起&lt;span lang=&quot;EN-US&quot;&gt;MySQL的查询优化，相信大家收藏了一堆：不能使用&lt;span lang=&quot;EN-US&quot;&gt;SELECT *、不使用&lt;span lang=&quot;EN-US&quot;&gt;NULL字段、合理创建索引、为字段选择合适的数据类型&lt;span lang=&quot;EN-US&quot;&gt;..... 你是否真的理解这些优化技巧？是否理解其背后的工作原理？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;在实际场景下性能真有提升吗？我想未必。因而理解这些优化建议背后的原理就尤为重要，希望本文能让你重新审视这些优化建议，并在实际业务场景下合理的运用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;如果能在头脑中构建一幅MySQL各组件之间如何协同工作的架构图，有助于深入理解MySQL服务器。下图展示了MySQL的逻辑架构图。&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928110355446.png&quot; alt=&quot;&quot; data-=&quot;&quot; data-fail=&quot;0&quot; data-ratio=&quot;0.9566787003610109&quot; data-type=&quot;png&quot; data-w=&quot;277&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MySQL逻辑架构整体分为三层，最上层为客户端层，并非MySQL所独有，诸如：连接处理、授权认证、安全等功能均在这一层处理。&lt;/p&gt;
&lt;p&gt;MySQL大多数核心服务均在中间这一层，包括查询解析、分析、优化、缓存、内置函数(比如：时间、数学、加密等函数)。所有的跨存储引擎的功能也在这一层实现：存储过程、触发器、视图等。&lt;/p&gt;
&lt;p&gt;最下层为存储引擎，其负责MySQL中的数据存储和提取。和Linux下的文件系统类似，每种存储引擎都有其优势和劣势。中间的服务层通过API与存储引擎通信，这些API接口屏蔽了不同存储引擎间的差异。&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;我们总是希望MySQL能够获得更高的查询性能，最好的办法是弄清楚MySQL是如何优化和执行查询的。一旦理解了这一点，就会发现：很多的查询优化工作实际上就是遵循一些原则让MySQL的优化器能够按照预想的合理方式运行而已。&lt;/p&gt;
&lt;p&gt;当向MySQL发送一个请求的时候，MySQL到底做了些什么呢？&lt;/p&gt;
&lt;p&gt;　　&lt;img class=&quot;img_loading&quot; src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928110411496.jpg&quot; alt=&quot;&quot; data-=&quot;&quot; data-ratio=&quot;0.5854838709677419&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　MySQL查询过程&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;1）MySQL客户端/服务端通信协议是“半双工”的：在任一时刻，要么是服务器向客户端发送数据，要么是客户端向服务器发送数据，这两个动作不能同时发生。一旦一端开始发送消息，另一端要接收完整个消息才能响应它，&lt;/p&gt;
&lt;p&gt;　　所以我们无法也无须将一个消息切成小块独立发送，也没有办法进行流量控制。&lt;/p&gt;
&lt;p&gt;2）客户端用一个单独的数据包将查询请求发送给服务器，所以当查询语句很长的时候，需要设置max_allowed_packet参数。但是需要注意的是，如果查询实在是太大，服务端会拒绝接收更多数据并抛出异常。 &lt;/p&gt;
&lt;p&gt;3）与之相反的是，服务器响应给用户的数据通常会很多，由多个数据包组成。但是当服务器响应客户端请求时，客户端必须完整的接收整个返回结果，而不能简单的只取前面几条结果，然后让服务器停止发送。&lt;/p&gt;
&lt;p&gt;　　因而在实际开发中，尽量保持查询简单且只返回必需的数据，减小通信间数据包的大小和数量是一个非常好的习惯，这也是查询中尽量避免使用SELECT *以及加上LIMIT限制的原因之一。&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;1）在解析一个查询语句前，如果查询缓存是打开的，那么MySQL会检查这个查询语句是否命中查询缓存中的数据。如果当前查询恰好命中查询缓存，在检查一次用户权限后直接返回缓存中的结果。&lt;/p&gt;
&lt;p&gt;　　这种情况下，查询不会被解析，也不会生成执行计划，更不会执行。&lt;/p&gt;
&lt;p&gt;2）MySQL将缓存存放在一个引用表（不要理解成table，可以认为是类似于HashMap的数据结构），通过一个哈希值索引，这个哈希值通过查询本身、当前要查询的数据库、客户端协议版本号等一些可能影响结果的信息计算得来。&lt;/p&gt;
&lt;p&gt;　　所以两个查询在任何字符上的不同（例如：空格、注释），都会导致缓存不会命中。&lt;/p&gt;
&lt;p&gt;3）如果查询中包含任何用户自定义函数、存储函数、用户变量、临时表、MySQL库中的系统表，其查询结果都不会被缓存。比如函数NOW()或者CURRENT_DATE()会因为不同的查询时间，返回不同的查询结果，&lt;/p&gt;
&lt;p&gt;　　再比如包含CURRENT_USER或者CONNECION_ID()的查询语句会因为不同的用户而返回不同的结果，将这样的查询结果缓存起来没有任何的意义。&lt;/p&gt;
&lt;p&gt;4）既然是缓存，就会失效，那查询缓存何时失效呢？MySQL的查询缓存系统会跟踪查询中涉及的每个表，如果这些表（数据或结构）发生变化，那么和这张表相关的所有缓存数据都将失效。正因为如此，在任何的写操作时，&lt;/p&gt;
&lt;p&gt;　　MySQL必须将对应表的所有缓存都设置为失效。如果查询缓存非常大或者碎片很多，这个操作就可能带来很大的系统消耗，甚至导致系统僵死一会儿。而且查询缓存对系统的额外消耗也不仅仅在写操作，读操作也不例外：&lt;/p&gt;
&lt;p&gt;　　　　　　　　任何的查询语句在开始之前都必须经过检查，即使这条SQL语句永远不会命中缓存&lt;/p&gt;
&lt;p&gt;　　　　　　　　如果查询结果可以被缓存，那么执行完成后，会将结果存入缓存，也会带来额外的系统消耗&lt;/p&gt;
&lt;p&gt;5）基于此，我们要知道并不是什么情况下查询缓存都会提高系统性能，缓存和失效都会带来额外消耗，只有当缓存带来的资源节约大于其本身消耗的资源时，才会给系统带来性能提升。&lt;/p&gt;
&lt;p&gt;　　但要如何评估打开缓存是否能够带来性能提升是一件非常困难的事情，也不在本文讨论的范畴内。如果系统确实存在一些性能问题，可以尝试打开查询缓存，并在数据库设计上做一些优化，比如：&lt;/p&gt;
&lt;p&gt;　　　　　　用多个小表代替一个大表，注意不要过度设计&lt;/p&gt;
&lt;p&gt;　　　　　　批量插入代替循环单条插入&lt;/p&gt;
&lt;p&gt;　　　　　　合理控制缓存空间大小，一般来说其大小设置为几十兆比较合适&lt;/p&gt;
&lt;p&gt;　　　　　　可以通过SQL_CACHE和SQL_NO_CACHE来控制某个查询语句是否需要进行缓存&lt;/p&gt;

&lt;p&gt;最后的忠告是不要轻易打开查询缓存，特别是写密集型应用。如果你实在是忍不住，可以将query_cache_type设置为DEMAND，这时只有加入SQL_CACHE的查询才会走缓存，其他查询则不会，这样可以非常自由地控制哪些查询需要被缓存。&lt;/p&gt;
&lt;p&gt;当然查询缓存系统本身是非常复杂的，这里讨论的也只是很小的一部分，其他更深入的话题，比如：缓存是如何使用内存的？如何控制内存的碎片化？事务对查询缓存有何影响等等，读者可以自行阅读相关资料，这里权当抛砖引玉吧。&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;MySQL通过关键字将SQL语句进行解析，并生成一颗对应的解析树。这个过程解析器主要通过语法规则来验证和解析。比如SQL中是否使用了错误的关键字或者关键字的顺序是否正确等等。预&lt;/p&gt;
&lt;p&gt;处理则会根据MySQL规则进一步检查解析树是否合法。比如检查要查询的数据表和数据列是否存在等。&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;经过前面的步骤生成的语法树被认为是合法的了，并且由优化器将其转化成查询计划。多数情况下，一条查询可以有很多种执行方式，最后都返回相应的结果。优化器的作用就是找到这其中最好的执行计划。&lt;/p&gt;
&lt;p&gt;MySQL使用基于成本的优化器，它尝试预测一个查询使用某种执行计划时的成本，并选择其中成本最小的一个。在MySQL可以通过查询当前会话的last_query_cost的值来得到其计算当前查询的成本。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; &lt;span&gt;select&lt;/span&gt; * &lt;span&gt;from&lt;/span&gt; t_message limit &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;

...省略结果集

 

mysql&lt;/span&gt;&amp;gt; show status like &lt;span&gt;'&lt;/span&gt;&lt;span&gt;last_query_cost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;+-----------------+-------------+

| Variable_name   | Value       |

+-----------------+-------------+

| Last_query_cost | &lt;span&gt;6391.799000&lt;/span&gt; |

+-----------------+-------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例中的结果表示优化器认为大概需要做6391个数据页的随机查找才能完成上面的查询。这个结果是根据一些列的统计信息计算得来的，这些统计信息包括：每张表或者索引的页面个数、索引的基数、索引和数据行的长度、索引的分布情况等等。&lt;/p&gt;
&lt;p&gt;有非常多的原因会导致MySQL选择错误的执行计划，比如统计信息不准确、不会考虑不受其控制的操作成本（用户自定义函数、存储过程）、MySQL认为的最优跟我们想的不一样（我们希望执行时间尽可能短，但MySQL值选择它认为成本小的，&lt;/p&gt;
&lt;p&gt;但成本小并不意味着执行时间短）等等。&lt;/p&gt;
&lt;p&gt;MySQL的查询优化器是一个非常复杂的部件，它使用了非常多的优化策略来生成一个最优的执行计划：&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;4&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;重新定义表的关联顺序（多张表关联查询时，并不一定按照SQL中指定的顺序进行，但有一些技巧可以指定关联顺序）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;优化MIN()和MAX()函数（找某列的最小值，如果该列有索引，只需要查找B+Tree索引最左端，反之则可以找到最大值，具体原理见下文）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;提前终止查询（比如：使用Limit时，查找到满足数量的结果集后会立即终止查询）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;优化排序（在老版本MySQL会使用两次传输排序，即先读取行指针和需要排序的字段在内存中对其排序，然后再根据排序结果去读取数据行，而新版本采用的是单次传输排序，&lt;br/&gt;　　也就是一次读取所有的数据行，然后根据给定的列排序。对于I/O密集型应用，效率会高很多）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;随着MySQL的不断发展，优化器使用的优化策略也在不断的进化，这里仅仅介绍几个非常常用且容易理解的优化策略，其他的优化策略，大家自行查阅吧。&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;在完成解析和优化阶段以后，MySQL会生成对应的执行计划，查询执行引擎根据执行计划给出的指令逐步执行得出结果。整个执行过程的大部分操作均是通过调用存储引擎实现的接口来完成，这些接口被称为handler API。&lt;/p&gt;
&lt;p&gt;查询过程中的每一张表由一个handler实例表示。实际上，MySQL在查询优化阶段就为每一张表创建了一个handler实例，优化器可以根据这些实例的接口来获取表的相关信息，包括表的所有列名、索引统计信息等。&lt;/p&gt;
&lt;p&gt;存储引擎接口提供了非常丰富的功能，但其底层仅有几十个接口，这些接口像搭积木一样完成了一次查询的大部分操作。&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;查询执行的最后一个阶段就是将结果返回给客户端。即使查询不到数据，MySQL仍然会返回这个查询的相关信息，比如该查询影响到的行数以及执行时间等。 &lt;/p&gt;
&lt;p&gt;如果查询缓存被打开且这个查询可以被缓存，MySQL也会将结果存放到缓存中。&lt;/p&gt;
&lt;p&gt;结果集返回客户端是一个增量且逐步返回的过程。有可能MySQL在生成第一条结果时，就开始向客户端逐步返回结果集了。这样服务端就无须存储太多结果而消耗过多内存，也可以让客户端第一时间获得返回结果。&lt;/p&gt;
&lt;p&gt;需要注意的是，结果集中的每一行都会以一个满足①中所描述的通信协议的数据包发送，再通过TCP协议进行传输，在传输过程中，可能对MySQL的数据包进行缓存然后批量发送。&lt;/p&gt;
&lt;p&gt;回头总结一下MySQL整个查询执行过程，总的来说分为6个步骤：&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;客户端向MySQL服务器发送一条查询请求&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;服务器首先检查查询缓存，如果命中缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;服务器进行SQL解析、预处理、再由优化器生成对应的执行计划&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;MySQL根据执行计划，调用存储引擎的API来执行查询&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;将结果返回给客户端，同时缓存查询结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;p&gt;看了这么多，你可能会期待给出一些优化手段，是的，下面会从3个不同方面给出一些优化建议。但请等等，还有一句忠告要先送给你：不要听信你看到的关于优化的“绝对真理”，&lt;/p&gt;
&lt;p&gt;包括本文所讨论的内容，而应该是在实际的业务场景下通过测试来验证你关于执行计划以及响应时间的假设。&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;9.1、&lt;/em&gt;Scheme设计与数据类型优化 &lt;/h2&gt;
&lt;p&gt;　　选择数据类型只要遵循小而简单的原则就好，越小的数据类型通常会更快，占用更少的磁盘、内存，处理时需要的CPU周期也更少。越简单的数据类型在计算时需要更少的CPU周期，&lt;/p&gt;
&lt;p&gt;　　比如，整型就比字符操作代价低，因而会使用整型来存储ip地址，使用DATETIME来存储时间，而不是使用字符串。&lt;/p&gt;
&lt;p&gt;　　这里总结几个可能容易理解错误的技巧：&lt;/p&gt;
&lt;p&gt;　　　　1）通常来说把可为NULL的列改为NOT NULL不会对性能提升有多少帮助，只是如果计划在列上创建索引，就应该将该列设置为NOT NULL。&lt;/p&gt;
&lt;p&gt;　　　　2）对整数类型指定宽度，比如INT(11)，没有任何卵用。INT使用32位（4个字节）存储空间，那么它的表示范围已经确定，所以INT(1)和INT(20)对于存储和计算是相同的。&lt;/p&gt;
&lt;p&gt;　　　　3）UNSIGNED表示不允许负值，大致可以使正数的上限提高一倍。比如TINYINT存储范围是-128 ~ 127，而UNSIGNED TINYINT存储的范围却是0 - 255。&lt;/p&gt;
&lt;p&gt;　　　　4）通常来讲，没有太大的必要使用DECIMAL数据类型。即使是在需要存储财务数据时，仍然可以使用BIGINT。比如需要精确到万分之一，&lt;/p&gt;
&lt;p&gt;　　　　　　那么可以将数据乘以一百万然后使用BIGINT存储。这样可以避免浮点数计算不准确和DECIMAL精确计算代价高的问题。&lt;/p&gt;
&lt;p&gt;　　　　5）TIMESTAMP使用4个字节存储空间，DATETIME使用8个字节存储空间。因而，TIMESTAMP只能表示1970 - 2038年，比DATETIME表示的范围小得多，而且TIMESTAMP的值因时区不同而不同。&lt;/p&gt;
&lt;p&gt;　　　　6）大多数情况下没有使用枚举类型的必要，其中一个缺点是枚举的字符串列表是固定的，添加和删除字符串（枚举选项）必须使用ALTER TABLE（如果只只是在列表末尾追加元素，不需要重建表）。&lt;/p&gt;
&lt;p&gt;　　　　7）schema的列不要太多。原因是存储引擎的API工作时需要在服务器层和存储引擎层之间通过行缓冲格式拷贝数据，然后在服务器层将缓冲内容解码成各个列，这个转换过程的代价是非常高的。&lt;/p&gt;
&lt;p&gt;　　　　　　如果列太多而实际使用的列又很少的话，有可能会导致CPU占用过高。&lt;/p&gt;
&lt;p&gt;　　　　8）大表ALTER TABLE非常耗时，MySQL执行大部分修改表结果操作的方法是用新的结构创建一个张空表，从旧表中查出所有的数据插入新表，然后再删除旧表。尤其当内存不足而表又很大，&lt;/p&gt;
&lt;p&gt;　　　　　　而且还有很大索引的情况下，耗时更久。当然有一些奇技淫巧可以解决这个问题，有兴趣可自行查阅。&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;9.2、&lt;/em&gt;创建高性能索引&lt;/h2&gt;
&lt;p&gt;　　索引是提高MySQL查询性能的一个重要途径，但过多的索引可能会导致过高的磁盘使用率以及过高的内存占用，从而影响应用程序的整体性能。应当尽量避免事后才想起添加索引，&lt;/p&gt;
&lt;p&gt;　　因为事后可能需要监控大量的SQL才能定位到问题所在，而且添加索引的时间肯定是远大于初始添加索引所需要的时间，可见索引的添加也是非常有技术含量的。&lt;/p&gt;
&lt;p&gt;　　接下来将向你展示一系列创建高性能索引的策略，以及每条策略其背后的工作原理。但在此之前，先了解与索引相关的一些算法和数据结构，将有助于更好的理解后文的内容。&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;9.3、&lt;/em&gt;索引相关的数据结构和算法&lt;/h2&gt;
&lt;p&gt;　　通常我们所说的索引是指B-Tree索引，它是目前关系型数据库中查找数据最为常用和有效的索引，大多数存储引擎都支持这种索引。使用B-Tree这个术语，是因为MySQL在CREATE TABLE或其它语句中使用了这个关键字，&lt;/p&gt;
&lt;p&gt;　　但实际上不同的存储引擎可能使用不同的数据结构，比如InnoDB就是使用的B+Tree。&lt;/p&gt;
&lt;p&gt;　　B+Tree中的B是指balance，意为平衡。需要注意的是，B+树索引并不能找到一个给定键值的具体行，它找到的只是被查找数据行所在的页，接着数据库会把页读入到内存，再在内存中进行查找，最后得到要查找的数据。&lt;/p&gt;
&lt;p&gt;　　在介绍B+Tree前，先了解一下二叉查找树，它是一种经典的数据结构，其左子树的值总是小于根的值，右子树的值总是大于根的值，如下图①。如果要在这课树中查找值为5的记录，其大致流程：先找到根，其值为6，大于5，所以查找左子树，&lt;/p&gt;
&lt;p&gt;　　找到3，而5大于3，接着找3的右子树，总共找了3次。同样的方法，如果查找值为8的记录，也需要查找3次。所以二叉查找树的平均查找次数为(3 + 3 + 3 + 2 + 2 + 1) / 6 = 2.3次，而顺序查找的话，查找值为2的记录，仅需要1次，&lt;/p&gt;
&lt;p&gt;　　但查找值为8的记录则需要6次，所以顺序查找的平均查找次数为：(1 + 2 + 3 + 4 + 5 + 6) / 6 = 3.3次，因此大多数情况下二叉查找树的平均查找速度比顺序查找要快。&lt;/p&gt;

&lt;p&gt;　　　　&lt;img class=&quot;img_loading&quot; src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928110603365.jpg&quot; alt=&quot;&quot; data-=&quot;&quot; data-ratio=&quot;0.37540453074433655&quot; data-type=&quot;png&quot; data-w=&quot;618&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　二叉查找树和平衡二叉树&lt;/p&gt;

&lt;p&gt;　　由于二叉查找树可以任意构造，同样的值，可以构造出如图②的二叉查找树，显然这棵二叉树的查询效率和顺序查找差不多。若想二叉查找数的查询性能最高，需要这棵二叉查找树是平衡的，也即平衡二叉树（AVL树）。&lt;/p&gt;

&lt;p&gt;　　平衡二叉树首先需要符合二叉查找树的定义，其次必须满足任何节点的两个子树的高度差不能大于1。显然图②不满足平衡二叉树的定义，而图①是一课平衡二叉树。&lt;/p&gt;
&lt;p&gt;　　平衡二叉树的查找性能是比较高的（性能最好的是最优二叉树），查询性能越好，维护的成本就越大。比如图①的平衡二叉树，当用户需要插入一个新的值9的节点时，就需要做出如下变动。&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img class=&quot;img_loading&quot; src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928110632744.jpg&quot; alt=&quot;&quot; data-=&quot;&quot; data-ratio=&quot;0.41821561338289964&quot; data-type=&quot;png&quot; data-w=&quot;538&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　平衡二叉树旋转&lt;/p&gt;

&lt;p&gt;　　通过一次左旋操作就将插入后的树重新变为平衡二叉树是最简单的情况了，实际应用场景中可能需要旋转多次。至此我们可以考虑一个问题，平衡二叉树的查找效率还不错，&lt;/p&gt;
&lt;p&gt;　　实现也非常简单，相应的维护成本还能接受，为什么MySQL索引不直接使用平衡二叉树？&lt;/p&gt;

&lt;p&gt;　　随着数据库中数据的增加，索引本身大小随之增加，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级。&lt;/p&gt;
&lt;p&gt;　　可以想象一下一棵几百万节点的二叉树的深度是多少？如果将这么大深度的一颗二叉树放磁盘上，每读取一个节点，需要一次磁盘的I/O读取，整个查找的耗时显然是不能够接受的。那么如何减少查找过程中的I/O存取次数？&lt;/p&gt;

&lt;p&gt;　　一种行之有效的解决方法是减少树的深度，将二叉树变为m叉树（多路搜索树），而B+Tree就是一种多路搜索树。理解B+Tree时，只需要理解其最重要的两个特征即可：第一，所有的关键字（可以理解为数据）都存储在叶子节点（Leaf Page），&lt;/p&gt;
&lt;p&gt;　　非叶子节点（Index Page）并不存储真正的数据，所有记录节点都是按键值大小顺序存放在同一层叶子节点上。其次，所有的叶子节点由指针连接。如下图为高度为2的简化了的B+Tree。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img_loading&quot; src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928110717901.jpg&quot; alt=&quot;&quot; data-=&quot;&quot; data-ratio=&quot;0.25478348439073517&quot; data-type=&quot;png&quot; data-w=&quot;993&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　简化B+Tree&lt;/p&gt;
&lt;p&gt;　　怎么理解这两个特征？MySQL将每个节点的大小设置为一个页的整数倍（原因下文会介绍），也就是在节点空间大小一定的情况下，每个节点可以存储更多的内结点，这样每个结点能索引的范围更大更精确。&lt;/p&gt;
&lt;p&gt;　　所有的叶子节点使用指针链接的好处是可以进行区间访问，比如上图中，如果查找大于20而小于30的记录，只需要找到节点20，就可以遍历指针依次找到25、30。如果没有链接指针的话，就无法进行区间查找。这也是MySQL使用B+Tree作为索引存储结构的重要原因。&lt;/p&gt;

&lt;p&gt;　　MySQL为何将节点大小设置为页的整数倍，这就需要理解磁盘的存储原理。磁盘本身存取就比主存慢很多，在加上机械运动损耗（特别是普通的机械硬盘），磁盘的存取速度往往是主存的几百万分之一，&lt;/p&gt;
&lt;p&gt;　　为了尽量减少磁盘I/O，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存，预读的长度一般为页的整数倍。&lt;/p&gt;&lt;p&gt;　　“页是计算机管理存储器的逻辑块，硬件及OS往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（许多OS中，页的大小通常为4K）。主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，&lt;/p&gt;
&lt;p&gt;　　会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后一起返回，程序继续运行。”&lt;br/&gt; &lt;/p&gt;
&lt;p&gt;　　MySQL巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。为了达到这个目的，每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，&lt;/p&gt;
&lt;p&gt;　　加之计算机存储分配都是按页对齐的，就实现了读取一个节点只需一次I/O。假设B+Tree的高度为h，一次检索最多需要h-1I/O（根节点常驻内存），复杂度$O(h) = O(\log_{M}N)$。&lt;/p&gt;
&lt;p&gt;　　实际应用场景中，M通常较大，常常超过100，因此树的高度一般都比较小，通常不超过3。&lt;/p&gt;

&lt;p&gt;　　最后简单了解下B+Tree节点的操作，在整体上对索引的维护有一个大概的了解，虽然索引可以大大提高查询效率，但维护索引仍要花费很大的代价，因此合理的创建索引也就尤为重要。&lt;/p&gt;

&lt;p&gt;　　仍以上面的树为例，我们假设每个节点只能存储4个内节点。首先要插入第一个节点28，如下图所示。&lt;/p&gt;

&lt;p&gt;　　　　&lt;img class=&quot;img_loading&quot; src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928110929738.jpg&quot; alt=&quot;&quot; data-=&quot;&quot; data-ratio=&quot;0.27157894736842103&quot; data-type=&quot;png&quot; data-w=&quot;950&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　leaf page和index page都没有满&lt;/p&gt;

&lt;p&gt;　　接着插入下一个节点70，在Index Page中查询后得知应该插入到50 - 70之间的叶子节点，但叶子节点已满，这时候就需要进行也分裂的操作，当前的叶子节点起点为50，所以根据中间值来拆分叶子节点，如下图所示。&lt;/p&gt;

&lt;p&gt;　　　　　　　　　　　　　　&lt;img class=&quot;img_loading&quot; src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928111008797.jpg&quot; alt=&quot;&quot; data-=&quot;&quot; data-ratio=&quot;0.5872844827586207&quot; data-type=&quot;png&quot; data-w=&quot;928&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　Leaf Page拆分&lt;/p&gt;

&lt;p&gt;　　最后插入一个节点95，这时候Index Page和Leaf Page都满了，就需要做两次拆分，如下图所示。&lt;/p&gt;

&lt;p&gt;　　　　　　　　&lt;img class=&quot;img_loading&quot; src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928111030590.jpg&quot; alt=&quot;&quot; data-=&quot;&quot; data-ratio=&quot;0.6347634763476347&quot; data-type=&quot;png&quot; data-w=&quot;909&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　Leaf Page与Index Page拆分&lt;/p&gt;

&lt;p&gt;　　拆分后最终形成了这样一颗树。&lt;/p&gt;

&lt;p&gt;　　　　　　　　　　　　&lt;img class=&quot;img_loading&quot; src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928111101767.jpg&quot; alt=&quot;&quot; data-=&quot;&quot; data-ratio=&quot;0.23123732251521298&quot; data-type=&quot;png&quot; data-w=&quot;986&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　最终树&lt;/p&gt;

&lt;p&gt;　　B+Tree为了保持平衡，对于新插入的值需要做大量的拆分页操作，而页的拆分需要I/O操作，为了尽可能的减少页的拆分操作，B+Tree也提供了类似于平衡二叉树的旋转功能。当Leaf Page已满但其左右兄弟节点没有满的情况下，&lt;/p&gt;
&lt;p&gt;　　B+Tree并不急于去做拆分操作，而是将记录移到当前所在页的兄弟节点上。通常情况下，左兄弟会被先检查用来做旋转操作。就比如上面第二个示例，当插入70的时候，并不会去做页拆分，而是左旋操作。&lt;/p&gt;

&lt;p&gt;　　　　　　　　　　&lt;img class=&quot;img_loading&quot; src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928111127899.jpg&quot; alt=&quot;&quot; data-=&quot;&quot; data-ratio=&quot;0.7050067658998647&quot; data-type=&quot;png&quot; data-w=&quot;739&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　左旋操作&lt;/p&gt;

&lt;p&gt;　　通过旋转操作可以最大限度的减少页分裂，从而减少索引维护过程中的磁盘的I/O操作，也提高索引维护效率。需要注意的是，删除节点跟插入节点类似，仍然需要旋转和拆分操作，这里就不再说明。&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;通过上文，相信你对B+Tree的数据结构已经有了大致的了解，但MySQL中索引是如何组织数据的存储呢？以一个简单的示例来说明，假如有如下数据表：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE TABLE People(

    last_name varchar(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;) not &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,

    first_name varchar(&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;) not &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,

    dob date not &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,

    gender &lt;/span&gt;&lt;span&gt;enum&lt;/span&gt;(`m`,`f`) not &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,

    key(last_name,first_name,dob)

);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于表中每一行数据，索引中包含了last_name、first_name、dob列的值，下图展示了索引是如何组织数据存储的。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img_loading&quot; src=&quot;http://dbaplus.cn/uploadfile/2017/0928/20170928111258595.jpg&quot; alt=&quot;&quot; data-=&quot;&quot; data-ratio=&quot;0.1978131212723658&quot; data-type=&quot;png&quot; data-w=&quot;1006&quot;/&gt;&lt;/p&gt;
&lt;p&gt;索引如何组织数据存储，来自：高性能MySQL&lt;/p&gt;
&lt;p&gt;可以看到，索引首先根据第一个字段来排列顺序，当名字相同时，则根据第三个字段，即出生日期来排序，正是因为这个原因，才有了索引的“最左原则”。&lt;/p&gt;
&lt;p&gt;1）MySQL不会使用索引的情况：非独立的列 &lt;/p&gt;
&lt;p&gt;　　“独立的列”是指索引列不能是表达式的一部分，也不能是函数的参数。比如：&lt;/p&gt;
&lt;p&gt; 　　select * from where id + 1 = 5&lt;/p&gt;
&lt;p&gt;　　我们很容易看出其等价于 id = 4，但是MySQL无法自动解析这个表达式，使用函数是同样的道理。&lt;/p&gt;
&lt;p&gt;2）前缀索引 &lt;/p&gt;
&lt;p&gt;　　如果列很长，通常可以索引开始的部分字符，这样可以有效节约索引空间，从而提高索引效率。&lt;/p&gt;
&lt;p&gt;3）多列索引和索引顺序&lt;/p&gt;
&lt;p&gt;　　在多数情况下，在多个列上建立独立的索引并不能提高查询性能。理由非常简单，MySQL不知道选择哪个索引的查询效率更好，所以在老版本，比如MySQL5.0之前就会随便选择一个列的索引，&lt;/p&gt;
&lt;p&gt;　　而新的版本会采用合并索引的策略。举个简单的例子，在一张电影演员表中，在actor_id和film_id两个列上都建立了独立的索引，然后有如下查询：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;select&lt;/span&gt; film_id,actor_id &lt;span&gt;from&lt;/span&gt; film_actor &lt;span&gt;where&lt;/span&gt; actor_id = &lt;span&gt;1&lt;/span&gt; or film_id = &lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　老版本的MySQL会随机选择一个索引，但新版本做如下的优化：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; film_id,actor_id &lt;span&gt;from&lt;/span&gt; film_actor &lt;span&gt;where&lt;/span&gt; actor_id = &lt;span&gt;1&lt;/span&gt;&lt;span&gt; 

union all

&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; film_id,actor_id &lt;span&gt;from&lt;/span&gt; film_actor &lt;span&gt;where&lt;/span&gt; film_id = &lt;span&gt;1&lt;/span&gt; and actor_id &amp;lt;&amp;gt; &lt;span&gt;1&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;当出现多个索引做相交操作时（多个AND条件），通常来说一个包含所有相关列的索引要优于多个独立索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;当出现多个索引做联合操作时（多个OR条件），对结果集的合并、排序等操作需要耗费大量的CPU和内存资源，特别是当其中的某些索引的选择性不高，需要返回合并大量数据时，查询成本更高。所以这种情况下还不如走全表扫描。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　因此explain时如果发现有索引合并（Extra字段出现Using union），应该好好检查一下查询和表结构是不是已经是最优的，如果查询和表都没有问题，那只能说明索引建的非常糟糕，应当慎重考虑索引是否合适，有可能一个包含所有相关列的多列索引更适合。&lt;/p&gt;

&lt;p&gt;　　前面我们提到过索引如何组织数据存储的，从图中可以看到多列索引时，索引的顺序对于查询是至关重要的，很明显应该把选择性更高的字段放到索引的前面，这样通过第一个字段就可以过滤掉大多数不符合条件的数据。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;section style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;margin: 10px 0px; padding: 15px 20px 15px 45px; max-width: 100%; box-sizing: border-box; font-size: 14px; line-height: 22.39px; outline: 0px; border-width: 0px; border-style: initial; border-color: currentcolor; vertical-align: baseline; background-image: url(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; http:=&lt;span&gt;&quot;&quot;&lt;/span&gt; mmbiz.qpic.cn=&lt;span&gt;&quot;&quot;&lt;/span&gt; mmbiz_jpg=&lt;span&gt;&quot;&quot;&lt;/span&gt; tibrg3aoijttt5wd7pstdp8xn9fcaqn0hzm4ung7awpvy0vhxe5stzfr97tfcd3orepfelzkiawqpkjmvgnbnenq=&lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;?wx_fmt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jpeg&amp;amp;quot;);&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; =&lt;span&gt;&quot;&quot;&lt;/span&gt; background-position:=&lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;%=&lt;span&gt;&quot;&quot;&lt;/span&gt; 5px;=&lt;span&gt;&quot;&quot;&lt;/span&gt; background-repeat:=&lt;span&gt;&quot;&quot;&lt;/span&gt; no-repeat;=&lt;span&gt;&quot;&quot;&lt;/span&gt; word-wrap:=&lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;break&lt;/span&gt;-word=&lt;span&gt;&quot;&quot;&lt;/span&gt; !important;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　索引选择性是指不重复的索引值和数据表的总记录数的比值，选择性越高查询效率越高，因为选择性越高的索引可以让MySQL在查询时过滤掉更多的行。唯一索引的选择性是1，这时最好的索引选择性，性能也是最好的。&lt;/p&gt;

&lt;p&gt;　　理解索引选择性的概念后，就不难确定哪个字段的选择性较高了，查一下就知道了，比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 SELECT * FROM payment &lt;span&gt;where&lt;/span&gt; staff_id = &lt;span&gt;2&lt;/span&gt; and customer_id = &lt;span&gt;584&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　是应该创建(staff_id,customer_id)的索引还是应该颠倒一下顺序？执行下面的查询，哪个字段的选择性更接近1就把哪个字段索引前面就好。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; count(distinct staff_id)/count(*) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; staff_id_selectivity,

       count(distinct customer_id)&lt;/span&gt;/count(*) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; customer_id_selectivity,

       count(&lt;/span&gt;*) &lt;span&gt;from&lt;/span&gt; payment
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　多数情况下使用这个原则没有任何问题，但仍然注意你的数据中是否存在一些特殊情况。举个简单的例子，比如要查询某个用户组下有过交易的用户信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;select&lt;/span&gt; user_id &lt;span&gt;from&lt;/span&gt; trade &lt;span&gt;where&lt;/span&gt; user_group_id = &lt;span&gt;1&lt;/span&gt; and trade_amount &amp;gt; &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　MySQL为这个查询选择了索引(user_group_id,trade_amount)，如果不考虑特殊情况，这看起来没有任何问题，但实际情况是这张表的大多数数据都是从老系统中迁移过来的，由于新老系统的数据不兼容，&lt;/p&gt;
&lt;p&gt;　　所以就给老系统迁移过来的数据赋予了一个默认的用户组。这种情况下，通过索引扫描的行数跟全表扫描基本没什么区别，索引也就起不到任何作用。&lt;/p&gt;

&lt;p&gt;　　推广开来说，经验法则和推论在多数情况下是有用的，可以指导我们开发和设计，但实际情况往往会更复杂，实际业务场景下的某些特殊情况可能会摧毁你的整个设计。&lt;/p&gt;
&lt;p&gt;4）避免多个范围条件&lt;/p&gt;
&lt;p&gt;　　实际开发中，我们会经常使用多个范围条件，比如想查询某个时间段内登录过的用户：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;select&lt;/span&gt; user.* &lt;span&gt;from&lt;/span&gt; user &lt;span&gt;where&lt;/span&gt; login_time &amp;gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2017-04-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; and age between &lt;span&gt;18&lt;/span&gt; and &lt;span&gt;30&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个查询有一个问题：它有两个范围条件，login_time列和age列，MySQL可以使用login_time列的索引或者age列的索引，但无法同时使用它们。&lt;/p&gt;
&lt;p&gt;5）覆盖索引 &lt;/p&gt;
&lt;p&gt;　　如果一个索引包含或者说覆盖所有需要查询的字段的值，那么就没有必要再回表查询，这就称为覆盖索引。覆盖索引是非常有用的工具，可以极大的提高性能，因为查询只需要扫描索引会带来许多好处： &lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;索引条目远小于数据行大小，如果只读取索引，极大减少数据访问量&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;索引是有按照列值顺序存储的，对于I/O密集型的范围查询要比随机从磁盘读取每一行数据的IO要少的多&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;6）使用索引扫描来排序&lt;/p&gt;
&lt;p&gt;　　MySQL有两种方式可以生产有序的结果集，其一是对结果集进行排序的操作，其二是按照索引顺序扫描得出的结果自然是有序的。如果explain的结果中type列的值为index表示使用了索引扫描来做排序。&lt;/p&gt;

&lt;p&gt;　　扫描索引本身很快，因为只需要从一条索引记录移动到相邻的下一条记录。但如果索引本身不能覆盖所有需要查询的列，那么就不得不每扫描一条索引记录就回表查询一次对应的行。&lt;/p&gt;
&lt;p&gt;　　这个读取操作基本上是随机I/O，因此按照索引顺序读取数据的速度通常要比顺序地全表扫描要慢。&lt;/p&gt;

&lt;p&gt;　　在设计索引时，如果一个索引既能够满足排序，又满足查询，是最好的。&lt;/p&gt;

&lt;p&gt;　　只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向也一样时，才能够使用索引来对结果做排序。如果查询需要关联多张表，则只有ORDER BY子句引用的字段全部为第一张表时，才&lt;/p&gt;
&lt;p&gt;　　能使用索引做排序。ORDER BY子句和查询的限制是一样的，都要满足最左前缀的要求（有一种情况例外，就是最左的列被指定为常数，下面是一个简单的示例），其它情况下都需要执行排序操作，而无法利用索引排序。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最左列为常数，索引：(date,staff_id,customer_id)&lt;/span&gt;

&lt;span&gt;select&lt;/span&gt;  staff_id,customer_id &lt;span&gt;from&lt;/span&gt; demo &lt;span&gt;where&lt;/span&gt; date = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2015-06-01&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; order by staff_id,customer_id

 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;7）冗余和重复索引 &lt;/p&gt;
&lt;p&gt;　　冗余索引是指在相同的列上按照相同的顺序创建的相同类型的索引，应当尽量避免这种索引，发现后立即删除。比如有一个索引(A,B)，再创建索引(A)就是冗余索引。冗&lt;/p&gt;
&lt;p&gt;　　余索引经常发生在为表添加新索引时，比如有人新建了索引(A,B)，但这个索引不是扩展已有的索引(A)。&lt;/p&gt;

&lt;p&gt;　　大多数情况下都应该尽量扩展已有的索引而不是创建新索引。但有极少情况下出现性能方面的考虑需要冗余索引，比如扩展已有索引而导致其变得过大，从而影响到其他使用该索引的查询。&lt;/p&gt;
&lt;p&gt;8）删除长期未使用的索引&lt;/p&gt;
&lt;p&gt;　　定期删除一些长时间未使用过的索引是一个非常好的习惯。&lt;/p&gt;

&lt;p&gt;　　关于索引这个话题打算就此打住，最后要说一句，索引并不总是最好的工具，只有当索引帮助提高查询速度带来的好处大于其带来的额外工作时，索引才是有效的。对于非常小的表，&lt;/p&gt;
&lt;p&gt;　　简单的全表扫描更高效。对于中到大型的表，索引就非常有效。对于超大型的表，建立和维护索引的代价随之增长，这时候其他技术也许更有效，比如分区表。最后的最后，explain后再提测是一种美德。&lt;/p&gt;

&lt;hr/&gt;
&lt;h2&gt;11.1、优化COUNT()查询&lt;/h2&gt;
&lt;p&gt;　　COUNT()可能是被大家误解最多的函数了，它有两种不同的作用，其一是统计某个列值的数量，其二是统计行数。统计列值时，要求列值是非空的，它不会统计NULL。如果确认括号中的表达式不可能为空时，&lt;/p&gt;
&lt;p&gt;　　实际上就是在统计行数。最简单的就是当使用COUNT(*)时，并不是我们所想象的那样扩展成所有的列，实际上，它会忽略所有的列而直接统计所有的行数。&lt;/p&gt;

&lt;p&gt;　　我们最常见的误解也就在这儿，在括号内指定了一列却希望统计结果是行数，而且还常常误以为前者的性能会更好。但实际并非这样，如果要统计行数，直接使用COUNT(*)，意义清晰，且性能更好。&lt;/p&gt;

&lt;p&gt;　　有时候某些业务场景并不需要完全精确的COUNT值，可以用近似值来代替，EXPLAIN出来的行数就是一个不错的近似值，而且执行EXPLAIN并不需要真正地去执行查询，所以成本非常低。&lt;/p&gt;
&lt;p&gt;　　通常来说，执行COUNT()都需要扫描大量的行才能获取到精确的数据，因此很难优化，MySQL层面还能做得也就只有覆盖索引了。如果不还能解决问题，只有从架构层面解决了，比如添加汇总表，或者使用redis这样的外部缓存系统。&lt;/p&gt;
&lt;h2&gt;11.2、优化关联查询 &lt;/h2&gt;
&lt;p&gt;　　在大数据场景下，表与表之间通过一个冗余字段来关联，要比直接使用JOIN有更好的性能。如果确实需要使用关联查询的情况下，需要特别注意的是：&lt;/p&gt;
&lt;p&gt;　　　　1）确保ON和USING字句中的列上有索引。在创建索引的时候就要考虑到关联的顺序。当表A和表B用列c关联的时候，如果优化器关联的顺序是A、B，那么就不需要在A表的对应列上创建索引。没&lt;/p&gt;
&lt;p&gt;　　　　　　有用到的索引会带来额外的负担，一般来说，除非有其他理由，只需要在关联顺序中的第二张表的相应列上创建索引（具体原因下文分析）&lt;/p&gt;
&lt;p&gt;　　　　2）确保任何的GROUP BY和ORDER BY中的表达式只涉及到一个表中的列，这样MySQL才有可能使用索引来优化。&lt;/p&gt;
&lt;p&gt;　　要理解优化关联查询的第一个技巧，就需要理解MySQL是如何执行关联查询的。当前MySQL关联执行的策略非常简单，它对任何的关联都执行嵌套循环关联操作，即先在一个表中循环取出单条数据，&lt;/p&gt;
&lt;p&gt;　　然后在嵌套循环到下一个表中寻找匹配的行，依次下去，直到找到所有表中匹配的行为为止。然后根据各个表匹配的行，返回查询中需要的各个列。&lt;/p&gt;
&lt;p&gt;　　太抽象了？以上面的示例来说明，比如有这样的一个查询：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT A.xx,B.yy

FROM A INNER JOIN B USING(c)

WHERE A.xx IN (&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)

 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;假设MySQL按照查询中的关联顺序A、B来进行关联操作，那么可以用下面的伪代码表示MySQL如何完成这个查询：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
outer_iterator = SELECT A.xx,A.c FROM A WHERE A.xx IN (&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;&lt;span&gt;);

outer_row &lt;/span&gt;=&lt;span&gt; outer_iterator.next;

&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(outer_row) {

    inner_iterator &lt;/span&gt;= SELECT B.yy FROM B WHERE B.c =&lt;span&gt; outer_row.c;

    inner_row &lt;/span&gt;=&lt;span&gt; inner_iterator.next;

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt;(inner_row) {

        output[inner_row.yy,outer_row.xx];

        inner_row &lt;/span&gt;=&lt;span&gt; inner_iterator.next;

    }

    outer_row &lt;/span&gt;=&lt;span&gt; outer_iterator.next;

}&lt;/span&gt;　　可以看到，最外层的查询是根据A.xx列来查询的，A.c上如果有索引的话，整个关联查询也不会使用。再看内层的查询，很明显B.c上如果有索引的话，能够加速查询，因此只需要在关联顺序中的第二张表的相应列上创建索引即可。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;　&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;11.3、优化LIMIT分页&lt;/h2&gt;
&lt;p&gt;　　当需要分页操作时，通常会使用LIMIT加上偏移量的办法实现，同时加上合适的ORDER BY字句。如果有对应的索引，通常效率会不错，否则，MySQL需要做大量的文件排序操作。&lt;/p&gt;

&lt;p&gt;　　一个常见的问题是当偏移量非常大的时候，比如：LIMIT 10000 20这样的查询，MySQL需要查询10020条记录然后只返回20条记录，前面的10000条都将被抛弃，这样的代价非常高。&lt;/p&gt;

&lt;p&gt;　　优化这种查询一个最简单的办法就是尽可能的使用覆盖索引扫描，而不是查询所有的列。然后根据需要做一次关联查询再返回所有的列。对于偏移量很大时，这样做的效率会提升非常大。考虑下面的查询：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 SELECT film_id,description FROM film ORDER BY title LIMIT &lt;span&gt;50&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果这张表非常大，那么这个查询最好改成下面的样子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;
SELECT film.film_id,film.description

FROM film INNER JOIN (

    SELECT film_id FROM film ORDER BY title LIMIT &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;&lt;span&gt;

) AS tmp USING(film_id);

 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　这里的延迟关联将大大提升查询效率，让MySQL扫描尽可能少的页面，获取需要访问的记录后在根据关联列回原表查询所需要的列。&lt;/p&gt;

&lt;p&gt;　　有时候如果可以使用书签记录上次取数据的位置，那么下次就可以直接从该书签记录的位置开始扫描，这样就可以避免使用OFFSET，比如下面的查询：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 SELECT id FROM t LIMIT &lt;span&gt;10000&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　改为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 SELECT id FROM t WHERE id &amp;gt; &lt;span&gt;10000&lt;/span&gt; LIMIT &lt;span&gt;10&lt;/span&gt;; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其它优化的办法还包括使用预先计算的汇总表，或者关联到一个冗余表，冗余表中只包含主键列和需要做排序的列。&lt;/p&gt;
&lt;h2&gt;11.4、优化UNION&lt;/h2&gt;
&lt;p&gt;　　MySQL处理UNION的策略是先创建临时表，然后再把各个查询结果插入到临时表中，最后再来做查询。因此很多优化策略在UNION查询中都没有办法很好的时候。&lt;/p&gt;
&lt;p&gt;　　经常需要手动将WHERE、LIMIT、ORDER BY等字句“下推”到各个子查询中，以便优化器可以充分利用这些条件先优化。&lt;/p&gt;

&lt;p&gt;　　除非确实需要服务器去重，否则就一定要使用UNION ALL，如果没有ALL关键字，MySQL会给临时表加上DISTINCT选项，这会导致整个临时表的数据做唯一性检查，这样做的代价非常高。&lt;/p&gt;
&lt;p&gt;　　当然即使使用ALL关键字，MySQL总是将结果放入临时表，然后再读出，再返回给客户端。虽然很多时候没有这个必要，比如有时候可以直接把每个子查询的结果返回给客户端。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;结语   &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;理解查询是如何执行以及时间都消耗在哪些地方，再加上一些优化过程的知识，可以帮助大家更好的理解MySQL，理解常见优化技巧背后的原理。希望本文中的原理、示例能够帮助大家更好的将理论和实践联系起来，更多的将理论知识运用到实践中。&lt;/p&gt;
&lt;p&gt;其他也没啥说的了，给大家留两个思考题吧，可以在脑袋里想想答案，这也是大家经常挂在嘴边的，但很少有人会思考为什么？&lt;/p&gt;
&lt;p&gt;　　　　　　1）有非常多的程序员在分享时都会抛出这样一个观点：尽可能不要使用存储过程，存储过程非常不容易维护，也会增加使用成本，应该把业务逻辑放到客户端。既然客户端都能干这些事，那为什么还要存储过程？&lt;/p&gt;
&lt;p&gt;　　　　　　2）JOIN本身也挺方便的，直接查询就好了，为什么还需要视图呢？&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 11:01:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/7620964.html</dc:identifier>
</item>
<item>
<title>好用的前端页面性能检测工具—sitespeed.io - Young Dreamer</title>
<link>http://www.cnblogs.com/wmhuang/p/7620223.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wmhuang/p/7620223.html</guid>
<description>&lt;h2&gt;引言&lt;/h2&gt;
&lt;p&gt;最近在做HTTP2技术相关调研，想确认一下HTTP2在什么情境下性能会比HTTP1.x有显著提升，当我把http2的本地环境（nginx+PHP）部署完成后进行相关测试时，我遇到了以下问题：&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;（1）平时使用的都是在线分析工具，如google的&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot; target=&quot;_blank&quot;&gt;PageSpeed Insights&lt;/a&gt;和&lt;a href=&quot;https://gtmetrix.com/analyze.html&quot; target=&quot;_blank&quot;&gt;GTmetrix&lt;/a&gt;，这些工具无法提供线下测试环境；&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;（2）自己通过chrome dev-tool的Perfomance进行分析，需要手动刷新，并手动记录，需要大量的重复工作，尤其是要控制变量测试的情况；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）通过代码打log，即通过performance.timing中记录的TimeEvent时刻计算页面性能指标，指标的完整性和图形化展示仍需要工作量；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（4）能否在真机上测试，现在都是在PC上模拟。&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;10.608308605341&quot;&gt;于是就想着能否有一个工具能够调起浏览器，利用浏览器debug面板中的各种数据（请求、事件等）为用户提供页面性能分析结果，最好能图形化或表格展示。检索了一下，发现了&lt;a href=&quot;https://www.sitespeed.io/&quot; target=&quot;_blank&quot;&gt;sitespeed.io&lt;/a&gt;这个开源工具，基本符合我的预期，这里跟大伙分享一下这个工具。 &lt;/div&gt;
&lt;h2&gt; sitespeed.io相关介绍&lt;/h2&gt;
&lt;h3&gt;sitespeed.io的产出&lt;/h3&gt;
&lt;p&gt;介绍sitespeed.io之前，先看看sitespeed.io的产出。&lt;/p&gt;
&lt;p&gt;安装sitespeed.io之后，如果要分析一下百度PC首页性能，执行以下命令：&lt;/p&gt;

&lt;div readability=&quot;31.355488418933&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sitespeed.io  -n &lt;span&gt;5&lt;/span&gt; -v https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.baidu.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该命令将会在chrome浏览器下调起URL为https://www.baidu.com 5次，产出了一个分析文件夹，文件夹下载请戳&lt;a href=&quot;https://github.com/huangwenming/demos/tree/master/sitespeed-result/www.baidu.com/2017-09-29-16-32-46&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/605230/201710/605230-20171002141550130-256954487.png&quot; alt=&quot;&quot; width=&quot;642&quot; height=&quot;173&quot;/&gt;&lt;/p&gt;

&lt;p&gt;打开index.html文件后，我们可以看到关于页面性能的相关总结。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/605230/201710/605230-20171002141811005-632268066.png&quot; alt=&quot;&quot; width=&quot;656&quot; height=&quot;605&quot;/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;页面性能总结&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/605230/201710/605230-20171002170750068-1379235906.png&quot; alt=&quot;&quot;/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;页面相关意见&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;我们可以看到该工具围绕：页面性能（Performance）、Web最佳实践（Web Best Practice）和可用性（Accessibility）三个核心指标进行打分，每个核心指标考核的内容可以在help.html文件中查找。页面中的其他指标，如文件压缩、文件大小、请求数、缓存时间、请求状态码、首次渲染时间、前端渲染用时、页面加载用时、DNS解析时长等，这些指标都有详细的统计，而且不同等级用相应的颜色表示，基本满足我的诉求。&lt;/p&gt;
&lt;h3&gt;sitespeed.io的工作原理&lt;/h3&gt;
&lt;p&gt;sitespeed.io是一个开源工具，旨在检测和提高web页面的性能。它拥有一套插件，如&lt;a href=&quot;https://www.sitespeed.io/documentation/coach/&quot; target=&quot;_blank&quot;&gt;Coach&lt;/a&gt;、&lt;a href=&quot;https://www.sitespeed.io/documentation/browsertime/&quot; target=&quot;_blank&quot;&gt;Broswertime&lt;/a&gt;、&lt;a href=&quot;https://github.com/sitespeedio/chrome-har&quot; target=&quot;_blank&quot;&gt;Chrome-HAR&lt;/a&gt;等，帮助sitespeed搜集浏览器debug状态下的数据，并基于网站最佳实践给出相应的打分和意见，最后把数据可视化展示。&lt;/p&gt;
&lt;p&gt;sitespeed.io评价网页的主要依据是：浏览器的网络请求和TimeLine中的Time Event。&lt;/p&gt;
&lt;p&gt;Browsertime插件会使用Selenium NodeJS操控浏览器，让浏览器加载指定的页面，并执行配置的JS代码，采集Timeline中各个Time Event触发的时间数据，同时借助Chrome-HAR插件把页面中HTTP请求过程存储在.har文件中，为了便于分析，sitespeed.io利用&lt;a href=&quot;https://www.sitespeed.io/documentation/pagexray/&quot; target=&quot;_blank&quot;&gt;PageXray&lt;/a&gt;插件将.har文件转换成JSON文件；然后Coach插件根据相应的指标进行打分，并提出改进意见。总的来说，sitespeed.io的工作原理如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/605230/201710/605230-20171002171009083-1137117296.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sitespeed.io工作原理图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由于接触sitespeed.io的时间比较短，目前积累比较少，这次仅做个简单的分享，希望更多前端的小伙伴能够接触并使用该工具，写出高性能的页面。&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 02 Oct 2017 09:46:00 +0000</pubDate>
<dc:creator>Young Dreamer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wmhuang/p/7620223.html</dc:identifier>
</item>
<item>
<title>《深入理解Java虚拟机》读书笔记-垃圾收集器与内存分配策略 - sullivan123</title>
<link>http://www.cnblogs.com/sujing/p/7593028.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sujing/p/7593028.html</guid>
<description>&lt;p&gt;　　在堆里存放着java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前需要知道哪些对象还存活，哪些对象已经死去。那怎么样去判断对象是否存活呢？&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　一、判断对象是否存活算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;1、引用计数法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　实现思路：给对象添加一个引用计数器。每当有一个地方引用它时，计数器加1；引用失效时计数器减1。在任何时刻计数器为0的对象就是不可能再被使用的。&lt;/p&gt;
&lt;p&gt;　　优点：实现简单，效率高。&lt;/p&gt;
&lt;p&gt;　　缺点：很难解决对象之间的相互循环引用。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;2、可达性分析算法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　实现思路：通过GC Roots的对象作为起始点，从这些节点向下搜索，搜索走过的路径成为引用链，当一个对象到GC Root没有任何引用链相连时，则证明对象是不可用的。&lt;/p&gt;
&lt;p&gt;　　优点：可以很好的解决对象相互循环引用的问题。&lt;/p&gt;
&lt;p&gt;　　缺点：没想到&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;二、在java中，哪些对象可以作为GC Roots呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1、虚拟机栈（栈帧中的本地变量表）中引用的对象&lt;/p&gt;
&lt;p&gt;　　2、方法区中静态类属性和常量引用的对象&lt;/p&gt;
&lt;p&gt;　　3、本地方法栈中JNI（Native方法）引用的对象&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　三、对象标记回收过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果一个对象在可达性分析算法中是不可达的，那是不是这个对象就一定会被回收呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　答案是否定的，这些对象还有一次复活的机会。&lt;/span&gt;&lt;span&gt;要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与任何的GC Roots相连接的引用链，那它会被第一次标记，且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。在什么情况下不会执行对象的finalize方法呢？&lt;/span&gt;&lt;span&gt;1、当对象没有覆盖finalize()方法。2、该对象的finalize()方法已经被虚拟机调用过。&lt;span&gt;如果一个对象被判定为有必要执行finalize方法，那这个对象会被放置在一个F-Queue的队列中，等待虚拟机自己创建的一个低优先级的Finalizer线程去执行。finalize方法是这些对象逃脱死亡命运的最后一次机会，如果对象要在finalize中成功拯救自己，只要重新与引用链上的任何一个对象建立关联即可，譬如把自己赋值给某个变量或者对象的成员变量。那在第二次标记是它将被移除“即将回收”集合。否则就只能等待着回收了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　但是，finalize方法运行代价高，不确定性大，无法保证各个对象的调用顺序。&lt;span&gt;在日常开发中强烈不建议使用这个方法&lt;/span&gt;，如果需要有“关闭外部资源”之类的工作，使用try-finally或者其他方式都可以做得更好更及时。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;　　四、垃圾收集算法&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;span&gt;1、标记-清除算法&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　实现思路：标记算法实现很简单，通过前面介绍的可达性分析算法标记所有需要回收的对象，然后统一回收所有被标记的对象。&lt;span&gt;它是最基础的收集算法，后续的收集算法都是基于这种思路并对其不足进行改进而得到的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　缺点：效率不高、产生内存碎片&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2、复制算法V1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　实现思路：将内存按容量划分为大小相等的两块，每次使用其中的一块。当一块的内存用完了，就将还存活的对象复制到另一块上面，然后再把已使用过的内存空间一次清理掉。这样每次都是针对整个半区的内存进行回收，不用考虑内存碎片问题。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　优点：简单高效、不会有内存碎片问题&lt;em id=&quot;__mceDel&quot;&gt;&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　缺点：内存会缩小为原来一半，代价高&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;3、复制算法V2（新生代采用的算法）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　实现思路：替代原来将内存一分为二的方案，将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次Eden使用其中的一块Survivor。当回收时，讲Eden和Survivor中还存活的对象一次性赋值到另外一块Survivor空间上，最后清理掉Eden和刚才使用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1（研究表明，新时代中98%的对象是朝生夕死的），也就是每次新时代中可用内存空间为整个新时代容量的90%。只有10%的内存会被浪费。但是，如果存活的对象占用的内存大于新时代的10%怎么办？这就需要依赖其他内存（老年代）进行分配担保了。&lt;/p&gt;
&lt;p&gt;　　优点：改善了第二点中的缺点。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;4、标记-整理算法（老年代采用的算法）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　实现思路：过程与标记-清除算法一样，但后续步骤不是直接对可回收对象进行清理。而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存。&lt;/p&gt;

</description>
<pubDate>Mon, 02 Oct 2017 09:43:00 +0000</pubDate>
<dc:creator>sullivan123</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sujing/p/7593028.html</dc:identifier>
</item>
</channel>
</rss>