<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Effective Java 第三版——9. 使用try-with-resources语句替代try-finally语句 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/8142615.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/8142615.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;《Effective Java, Third Edition》一书英文版已经出版，这本书的第二版想必很多人都读过，号称Java四大名著之一，不过第二版2009年出版，到现在已经将近8年的时间，但随着Java 6，7，8，甚至9的发布，Java语言发生了深刻的变化。&lt;br/&gt;在这里第一时间翻译成中文版。供大家学习分享之用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-ca5216df5c1029f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Effective Java, Third Edition&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Java类库中包含许多必须通过调用&lt;code&gt;close&lt;/code&gt;方法手动关闭的资源。 比如&lt;code&gt;InputStream&lt;/code&gt;，&lt;code&gt;OutputStream&lt;/code&gt;和&lt;code&gt;java.sql.Connection&lt;/code&gt;。 客户经常忽视关闭资源，其性能结果可想而知。 尽管这些资源中有很多使用finalizer机制作为安全网，但finalizer机制却不能很好地工作（条目 8）。&lt;/p&gt;
&lt;p&gt;从以往来看，try-finally语句是保证资源正确关闭的最佳方式，即使是在程序抛出异常或返回的情况下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// try-finally - No longer the best way to close resources!
static String firstLineOfFile(String path) throws IOException {
    BufferedReader br = new BufferedReader(new FileReader(path));
    try {
        return br.readLine();
    } finally {
        br.close();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这可能看起来并不坏，但是当添加第二个资源时，情况会变得更糟：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// try-finally is ugly when used with more than one resource!
static void copy(String src, String dst) throws IOException {
    InputStream in = new FileInputStream(src);
    try {
        OutputStream out = new FileOutputStream(dst);
        try {
            byte[] buf = new byte[BUFFER_SIZE];
            int n;
            while ((n = in.read(buf)) &amp;gt;= 0)
                out.write(buf, 0, n);
        } finally {
            out.close();
        }
    } finally {
        in.close();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这可能很难相信，但即使是优秀的程序员，大多数时候也会犯错误。首先，我在Java Puzzlers[Bloch05]的第88页上弄错了，多年来没有人注意到。事实上，2007年Java类库中使用&lt;code&gt;close&lt;/code&gt;方法的三分之二都是错误的。&lt;/p&gt;
&lt;p&gt;即使是用try-finally语句关闭资源的正确代码，如前面两个代码示例所示，也有一个微妙的缺陷。 try-with-resources块和finally块中的代码都可以抛出异常。 例如，在&lt;code&gt;firstLineOfFile&lt;/code&gt;方法中，由于底层物理设备发生故障，对&lt;code&gt;readLine&lt;/code&gt;方法的调用可能会引发异常，并且由于相同的原因，调用&lt;code&gt;close&lt;/code&gt;方法可能会失败。 在这种情况下，第二个异常完全冲掉了第一个异常。 在异常堆栈跟踪中没有第一个异常的记录，这可能使实际系统中的调试非常复杂——通常这是你想要诊断问题的第一个异常。 虽然可以编写代码来抑制第二个异常，但是实际上没有人这样做，因为它太冗长了。&lt;/p&gt;
&lt;p&gt;当Java 7引入了try-with-resources语句时，所有这些问题一下子都得到了解决[JLS,14.20.3]。要使用这个构造，资源必须实现 &lt;code&gt;AutoCloseable&lt;/code&gt;接口，该接口由一个返回为&lt;code&gt;void&lt;/code&gt;的&lt;code&gt;close&lt;/code&gt;组成。Java类库和第三方类库中的许多类和接口现在都实现或继承了&lt;code&gt;AutoCloseable&lt;/code&gt;接口。如果你编写的类表示必须关闭的资源，那么这个类也应该实现&lt;code&gt;AutoCloseable&lt;/code&gt;接口。&lt;/p&gt;
&lt;p&gt;以下是我们的第一个使用try-with-resources的示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// try-with-resources - the the best way to close resources!
static String firstLineOfFile(String path) throws IOException {
    try (BufferedReader br = new BufferedReader(
           new FileReader(path))) {
       return br.readLine();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是我们的第二个使用try-with-resources的示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// try-with-resources on multiple resources - short and sweet
static void copy(String src, String dst) throws IOException {
    try (InputStream   in = new FileInputStream(src);
         OutputStream out = new FileOutputStream(dst)) {
        byte[] buf = new byte[BUFFER_SIZE];
        int n;
        while ((n = in.read(buf)) &amp;gt;= 0)
            out.write(buf, 0, n);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不仅 try-with-resources版本比原始版本更精简，更好的可读性，而且它们提供了更好的诊断。 考虑&lt;code&gt;firstLineOfFile&lt;/code&gt;方法。 如果调用&lt;code&gt;readLine&lt;/code&gt;和（不可见）&lt;code&gt;close&lt;/code&gt;方法都抛出异常，则后一个异常将被抑制（suppressed），而不是前者。 事实上，为了保留你真正想看到的异常，可能会抑制多个异常。 这些抑制的异常没有呗被抛弃， 而是打印在堆栈跟踪中，并标注为被抑制了。 你也可以使用&lt;code&gt;getSuppressed&lt;/code&gt;方法以编程方式访问它们，该方法在Java 7中已添加到的&lt;code&gt;Throwable&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;可以在 try-with-resources语句中添加catch子句，就像在常规的try-finally语句中一样。这允许你处理异常，而不会在另一层嵌套中污染代码。作为一个稍微有些做作的例子，这里有一个版本的&lt;code&gt;firstLineOfFile&lt;/code&gt;方法，它不会抛出异常，但是如果它不能打开或读取文件，则返回默认值：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// try-with-resources with a catch clause
static String firstLineOfFile(String path, String defaultVal) {
    try (BufferedReader br = new BufferedReader(
           new FileReader(path))) {
        return br.readLine();
    } catch (IOException e) {
        return defaultVal;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结论明确：在处理必须关闭的资源时，使用try-with-resources语句替代try-finally语句。 生成的代码更简洁，更清晰，并且生成的异常更有用。 try-with-resources语句在编写必须关闭资源的代码时会更容易，也不会出错，而使用try-finally语句实际上是不可能的。&lt;/p&gt;
</description>
<pubDate>Thu, 28 Dec 2017 22:45:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/8142615.html</dc:identifier>
</item>
<item>
<title>java显示目录文件列表和删除目录 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/8140831.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/8140831.html</guid>
<description>&lt;p&gt;以d:\a目录为例，假设D:\a目录内的结构如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;d:\a
|
|
|
|  |
|  |  |
|  |  |
|  |  `
|  `
|     |
|     |
|     `
|
|  |
|  |  |
|  |  |
|  |  `
|  `
|     |
|     |
|     `
`
   |
   |
   |
   |
   |
   `
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;4-1-1-&quot;&gt;4.1 示例1：列出整个目录中的文件(递归)&lt;/h3&gt;
&lt;p&gt;思路：&lt;br/&gt;1.遍历目录d:\a。&lt;br/&gt;2.每遍历到d:\a中的一个目录就遍历这个子目录。因此需要判断每个遍历到的元素是否是目录。&lt;/p&gt;
&lt;p&gt;以下是从普通代码到递归代码前的部分代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;File dir = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d:/a&quot;&lt;/span&gt;);
File[] file_list = dir.listFiles();
&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (File &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt; : file_list) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;.isDirectory()) {
        File dir_1 = &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;.listFiles();   
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (dir_1.isDirectory()) {
            ....
        }
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
        System.out.println(&lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;.getAbsolutePath());
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对重复的代码部分进行封装，于是使用递归方法，既封装代码，又解决无限递归问题。最终代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;import java.io.*;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ListAllFiles&lt;/span&gt; {
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{
        File dir = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d:/a&quot;&lt;/span&gt;);
        System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dir------&amp;gt;&quot;&lt;/span&gt;+dir.getAbsolutePath());
        listAll(dir);
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;listAll&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(File dir)&lt;/span&gt; &lt;/span&gt;{
        File[] file_list = dir.listFiles();
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (File file : file_list) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (file.isDirectory()) {
                System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dir------&amp;gt;&quot;&lt;/span&gt;+file.getAbsolutePath());
                listAll(file);
            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file------&amp;gt;&quot;&lt;/span&gt;+file.getAbsolutePath());
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;4-2-2-&quot;&gt;4.2 示例2：列出整个目录中的文件(队列)&lt;/h3&gt;
&lt;p&gt;思路：&lt;br/&gt;1.遍历给定目录。将遍历到的目录名放进集合中。&lt;br/&gt;2.对集合中的每个目录元素进行遍历，并将遍历到的子目录添加到集合中，最后每遍历结束一个目录就从集合中删除它。&lt;br/&gt;3.这样一来，只要发现目录，就会一直遍历下去，直到某个目录整个都遍历完，开始遍历下一个同级目录。&lt;/p&gt;
&lt;p&gt;需要考虑的是使用什么样的集合。首先集合内目录元素无需排序、不同目录内子目录名可能重复，因此使用List集合而非set集合，又因为频繁增删元素，因此使用linkedlist而非arraylist集合，linkedlist集合最突出的特性就是FIFO队列。&lt;/p&gt;
&lt;p&gt;相比于递归遍历，使用队列遍历目录的好处是元素放在容器中，它们都在堆内存中，不容易内存溢出。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.*;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.*;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ListAllFiles2&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{
        File dir = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d:/a&quot;&lt;/span&gt;);
        Queue&amp;lt;File&amp;gt; file_queue = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Queue&amp;lt;File&amp;gt;();   

        File[] list = dir.listFiles();
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (File file : list) {             
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(file.isDirectory()) {
                System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dir------&amp;gt;&quot;&lt;/span&gt;+file.getAbsolutePath());
                file_queue.add(file);
            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file------&amp;gt;&quot;&lt;/span&gt;+file.getAbsolutePath());
            }
        }

        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (!file_queue.isNull()) {   
            File subdirs = file_queue.get();   
            File[] subFiles = subdirs.listFiles();   
            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (File subdir : subFiles) {     
                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(subdir.isDirectory()) {
                    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dir------&amp;gt;&quot;&lt;/span&gt;+subdir.getAbsolutePath());
                    file_queue.add(subdir);    
                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                    System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file------&amp;gt;&quot;&lt;/span&gt;+subdir.getAbsolutePath());
                }
            }
        }
    }
}


&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Queue&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;E&lt;/span&gt;&amp;gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; LinkedList&amp;lt;E&amp;gt; linkedlist;
    Queue() {
        linkedlist = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;E&amp;gt;();
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(E e)&lt;/span&gt; &lt;/span&gt;{
        linkedlist.addFirst(e);  
    }
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;hljs-title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; linkedlist.removeLast();    
    }
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; linkedlist.isEmpty();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;4-3-3-&quot;&gt;4.3 示例3：树形结构显示整个目录中的文件(递归)&lt;/h3&gt;
&lt;p&gt;思路：&lt;br/&gt;1.先列出一级目录和文件。&lt;br/&gt;2.如果是目录，则加一个构成树形的前缀符号。然后再遍历这个目录，在此需要递归遍历。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;import java.io.*;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TreeFiles&lt;/span&gt; {
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{
        File dir = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d:/a&quot;&lt;/span&gt;);
        System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(dir.getName());
        listChilds(dir,&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;listChilds&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(File f,&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; level)&lt;/span&gt; &lt;/span&gt;{
        String prefix = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;level;i++) {
            prefix = &lt;span class=&quot;hljs-string&quot;&gt;&quot;|  &quot;&lt;/span&gt; + prefix;
        }
        File[] files = f.listFiles();
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (File file : files) {
            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(file.isDirectory()) {
                System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(prefix + file.getName());
                listChilds(file,level+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);
            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
                System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(prefix + file.getName());
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a
|  a.sql
|  b
|  |  e
|  |  |  &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;.txt
|  |  |  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;.txt
|  |  |  &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;.txt
|  |  f
|  |  |  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;.txt
|  |  |  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;.txt
|  |  |  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;.txt
|  back.&lt;span class=&quot;hljs-keyword&quot;&gt;log&lt;/span&gt;
|  c
|  |  e
|  |  |  ace1.txt
|  |  |  ace2.txt
|  |  |  ace3.txt
|  |  f
|  |  |  &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;.txt
|  |  |  &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;.txt
|  |  |  &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;.txt
|  d
|  |  a.java
|  |  abc (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;).txt
|  |  abc (&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;).txt
|  |  abc (&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;).txt
|  |  b.java
|  |  c.java
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;4-4-&quot;&gt;4.4 删除整个目录&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.*;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;FileDelete&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{
        File file = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;d:/a&quot;&lt;/span&gt;);
        rm(file);
    }

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;rm&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(File f)&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(!f.exists()){
            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;file not found!&quot;&lt;/span&gt;);
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        } &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(f.isFile()&lt;/span&gt;) &lt;/span&gt;{
            f.delete();
            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;
        }

        File[] dir = f.listFiles();
        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(File file : dir) {
            rm(file);
        }
        f.delete();
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注：若您觉得这篇文章还不错请点击右下角推荐，您的支持能激发作者更大的写作热情，非常感谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 28 Dec 2017 17:45:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/8140831.html</dc:identifier>
</item>
<item>
<title>Python云端系统开发入门——框架基础 - Python学习者</title>
<link>http://www.cnblogs.com/yan-lei/p/8140373.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yan-lei/p/8140373.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1043750/201712/1043750-20171229004108163-1052295157.jpg&quot; alt=&quot;&quot; width=&quot;208&quot; height=&quot;117&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是我学习北京理工大学嵩天老师的《Python云端系统开发入门》课程的笔记，在此我特别感谢老师的精彩讲解和对我的引导。&lt;/p&gt;
&lt;h2&gt;1、&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;简介与安装&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1043750/201712/1043750-20171229004224897-331011278.jpg&quot; alt=&quot;&quot; width=&quot;483&quot; height=&quot;245&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Django是一个免费、开源的Web应用框架，由Python写成。采用了MTV（Model-Template-View）的框架模式。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。 ————百度百科&lt;/p&gt;
&lt;p&gt;Django是一个产品级框架，支持全球近万个网站及云端。相比其他框架，Django充分利用Python特点，开发效率更高。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1043750/201712/1043750-20171229011735084-232845629.jpg&quot; alt=&quot;&quot; width=&quot;498&quot; height=&quot;276&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Django框架的官方文档：&lt;a href=&quot;https://docs.djangoproject.com/en/2.0/&quot;&gt;https://docs.djangoproject.com/en/2.0/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Django官方对Django的支持：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1043750/201712/1043750-20171229004315444-467089575.png&quot; alt=&quot;&quot; width=&quot;445&quot; height=&quot;207&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用“pip”命令进行安装：&lt;code&gt;pip install django&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1043750/201712/1043750-20171229004414663-764068672.png&quot; alt=&quot;&quot; width=&quot;536&quot; height=&quot;172&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Django版本查看：cmd执行 “python -m django --version”&lt;/p&gt;
&lt;p&gt;因为Django 1.x版本和Django 2.x版本差异较大，确认安装的环境是python 3.x和Django 2.x版本。&lt;/p&gt;
&lt;p&gt;如果安装了Django 1.x版本，可以使用“&lt;code&gt;pip list&lt;/code&gt;”进行查看。可以使用“&lt;code&gt;pip uninstall django&lt;/code&gt;”命令进行卸载后，再安装Djang 2.0。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1043750/201712/1043750-20171229004948866-1783118358.png&quot; alt=&quot;&quot; width=&quot;543&quot; height=&quot;173&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2、Django框架的最小程序&lt;/h2&gt;
&lt;h3&gt;步骤1：建立一个Web框架工程&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
\&amp;gt;django-admin startproject mysite
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行命令后，会生成一个文件夹。工程目录结构：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
mysite/&lt;span&gt;                           外层目录，名字可以更改
        mysite&lt;/span&gt;/&lt;span&gt;                   工程目录，保存代码和文件
            &lt;/span&gt;|-&lt;span&gt; __init__.py        一个将mysite定义为包的空文件
            &lt;/span&gt;|-&lt;span&gt; settings.py        部署和配置整个工程的配置文件（配置文件）
            &lt;/span&gt;|-&lt;span&gt; urls.py            URL路由的声明文件（路由文件）
            &lt;/span&gt;|-&lt;span&gt; wsgi.py            基于WSGI的Web服务器的配置文件
        manage.py                 一个与Django工程进行交互的命令工具&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;步骤2：修改工程，增加功能&lt;/h3&gt;
&lt;p&gt;可以跳过这一步，直接执行步骤3，不配置任何路由时，显示如下界面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1043750/201712/1043750-20171229011943413-862376223.jpg&quot; alt=&quot;&quot; width=&quot;542&quot; height=&quot;269&quot;/&gt;           &lt;img src=&quot;https://images2017.cnblogs.com/blog/1043750/201712/1043750-20171229011954866-1569930710.jpg&quot; alt=&quot;&quot; width=&quot;369&quot; height=&quot;278&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;步骤2-1：创建一个具体应用（app）&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
\&amp;gt;python manage.py startapp helloapp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;工程和应用之间的关系：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;工程对应于一个网站，是配置和应用的集合&lt;/li&gt;
&lt;li&gt;应用对应于特定功能，是具体功能的载体&lt;/li&gt;
&lt;li&gt;配置和功能分离是高度模块化的体现&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;步骤2-2、修改应用的views.py：对URL的具体响应功能&lt;/h4&gt;
&lt;p&gt;&quot;在helloapp\&quot;下新建一个&quot;templates/&quot;目录，并在目录下新建一个&quot;HTMLJSDemo.html&quot;文件。&lt;/p&gt;
&lt;p&gt;views.py中包含对某个HTTP请求（url）的响应。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.shortcuts &lt;span&gt;import&lt;/span&gt;&lt;span&gt; render
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your views here.&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; hello(request):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HTMLJSDemo.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;render()是一个打包函数，第一个参数是request，第二个是参数是页面。&lt;/p&gt;
&lt;h4&gt;2-3：在hello2app应用中，新增urls.py文件（本地路由文件）&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; path
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; . &lt;span&gt;import&lt;/span&gt;&lt;span&gt; views
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; . 代表当前app&lt;/span&gt;
&lt;span&gt;
urlpatterns &lt;/span&gt;=&lt;span&gt; [
    path(&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,views.hello),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, admin.site.urls),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2-4：在全局路由文件中增加对本地应用路由文件的引用&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; path,include
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; include()函数，用于引入其他路由文件&lt;/span&gt;
&lt;span&gt;
urlpatterns &lt;/span&gt;=&lt;span&gt; [
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;helloapp.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, admin.site.urls),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2-5：设置模板路径&lt;/h4&gt;
&lt;p&gt;设置模板路径，让Django框架找到模板所在目录。 修改mysite/settings.py文件中的TEMPLATES属性。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
TEMPLATES =&lt;span&gt; [
    {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;BACKEND&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.template.backends.django.DjangoTemplates&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;'DIRS': [&lt;span&gt;os.path.join(BASE_DIR,'hello2app/templates')&lt;/span&gt;],
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;APP_DIRS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True,
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;OPTIONS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;context_processors&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: [
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.template.context_processors.debug&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.template.context_processors.request&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.auth.context_processors.auth&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.messages.context_processors.messages&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            ],
        },
    },
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;步骤3：调试运行Web框架&lt;/h3&gt;
&lt;p&gt;在mysite工程目录下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
\&amp;gt;python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;django-admin：Django框架全局的管理工具&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
\&amp;gt;django-admin &amp;lt;command&amp;gt; [options]
&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;建立并管理Django工程&lt;/li&gt;
&lt;li&gt;建立并管理Django工程使用的数据库&lt;/li&gt;
&lt;li&gt;控制调试或日志信息&lt;/li&gt;
&lt;li&gt;运行并维护Django工程&lt;/li&gt;
&lt;li&gt;可以使用“\&amp;gt;django-admin help”查看到更多的功能。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h4&gt;manage.py&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
\&amp;gt;python manage.py &amp;lt;command&amp;gt; [options]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与django-admin类似，但仅针对当前项目。&lt;/p&gt;
&lt;h2&gt;3、Django的MTV开发模式&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1043750/201712/1043750-20171229011310600-182394531.jpg&quot; alt=&quot;&quot; width=&quot;425&quot; height=&quot;226&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;M:Models模型（数据）&lt;/h4&gt;
&lt;p&gt;与数据组织相关的功能&lt;/p&gt;
&lt;p&gt;组织和存储数据的方法和模式，与数据模型相关的操作。&lt;/p&gt;
&lt;h4&gt;T:Templates模板（样式）&lt;/h4&gt;
&lt;p&gt;与表现相关的所有功能&lt;/p&gt;
&lt;p&gt;页面展示风格方式，与具体数据分离，用于定义表现风格。&lt;/p&gt;
&lt;h4&gt;V：Views视图（处理）&lt;/h4&gt;
&lt;p&gt;针对请求选取数据的功能&lt;/p&gt;
&lt;p&gt;选择哪些数据用于展示，指定显示模板，每个URL对应一个回调函数。&lt;/p&gt;
&lt;h2&gt;4、实例1：云端留言板之基础框架&lt;/h2&gt;
&lt;h3&gt;4.1、基本功能定义&lt;/h3&gt;
&lt;h3&gt;4.2、开发要求&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;弱化Web设计，有简单的Web界面即可&lt;/li&gt;
&lt;li&gt;重视云端设计，掌握Django库的使用&lt;/li&gt;
&lt;li&gt;数据用文件的方式存储&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;4.2、云端留言板开发流程&lt;/h3&gt;
&lt;h4&gt;1.新建工程cloudms&lt;/h4&gt;
&lt;h4&gt;2-1.新建应用msgapp&lt;/h4&gt;
&lt;h4&gt;2-2.增加模板，即显示页面的HTML/CSS/JS代码，配置路径&lt;/h4&gt;
&lt;h4&gt;2-3.设定URL路由，本地路由和全局路由&lt;/h4&gt;
&lt;h4&gt;2-4.编写交互代码&lt;/h4&gt;
&lt;h4&gt;3.运行工程&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.icourse163.org/course/attachment.htm?fileName=PYC02-cloudms.zip&amp;amp;nosKey=1424C7ACFB133C930CF32B7F0E15267B-1514253291123&quot;&gt;代码下载&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 28 Dec 2017 17:22:00 +0000</pubDate>
<dc:creator>Python学习者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yan-lei/p/8140373.html</dc:identifier>
</item>
<item>
<title>JaveScript运算符(JS知识点归纳三) - AmorR</title>
<link>http://www.cnblogs.com/AmorR/p/8138847.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/AmorR/p/8138847.html</guid>
<description>&lt;p&gt;&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/AmorR/p/8083039.html&quot;&gt;JaveScript&lt;/a&gt;中有许多的运算符,在这里就只说明一些需要注意的.&lt;/p&gt;

&lt;p&gt;一元:指的是参与运算的操作数只有一个&lt;/p&gt;
&lt;p&gt;最经常使用的是++   -- &lt;/p&gt;
&lt;p&gt;计算规则:&lt;/p&gt;
&lt;p&gt;++/-- 前置于操作数的时候 , 先进行 a=a+1,再去进行运算&lt;/p&gt;
&lt;p&gt;++/--后置于操作数的时候 , 先进行运算,在进行a=a+1&lt;/p&gt;
&lt;p&gt;无论++/--前置于操作数还是后置于操作数,都只能决定当前位置的取值,本次计算结束后,对其他位置的影响的完全相同的&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 　　　　 &lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;var&lt;/span&gt; b = ++a + ++a; console.log(b);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;var&lt;/span&gt; b = a++ + ++a + --a; console.log(b);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;var&lt;/span&gt; b = a++ + a++; console.log(b);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;var&lt;/span&gt; b = ++a + a++; console.log(b);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;逻辑运算符有两种操作.都是根据布尔类型值进行逻辑判断操作的.&lt;/p&gt;
&lt;p&gt;1.两个值都是布尔值的时:&lt;/p&gt;
&lt;p&gt; 逻辑与  两个操作数都是true ,结果是true ,否则为false&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;true　　&lt;/span&gt;&amp;amp;&amp;amp;　　&lt;span&gt;true　　　　&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;true　　&lt;/span&gt;&amp;amp;&amp;amp;　　&lt;span&gt;false　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;false　　&lt;/span&gt;&amp;amp;&amp;amp;　　&lt;span&gt;true　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 逻辑或  两个操作数都是false,结果是false,否则为true&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;false&lt;/span&gt; || &lt;span&gt;false&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;false&lt;/span&gt; || &lt;span&gt;true&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;true&lt;/span&gt; || &lt;span&gt;false&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑非  对操作数取反&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
!&lt;span&gt;false&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
!&lt;span&gt;true&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.某个操作数不是布尔值时&lt;/p&gt;
&lt;p&gt;逻辑与  和  逻辑非 &lt;/p&gt;
&lt;p&gt;1&amp;gt; 从左往右看&lt;/p&gt;
&lt;p&gt;2&amp;gt;如果不是布尔值,进行隐式转换&lt;/p&gt;
&lt;p&gt;3&amp;gt;根据操作数一进行判断,如果直接可以决定运算结果,直接返回操作数一(返回的是原值,不是转换之后的结果)&lt;/p&gt;
&lt;p&gt;4&amp;gt;如果操作数一无法决定式子的结果,则返回操作数二(返回的是原值,不是转换之后的结果)&lt;/p&gt;
&lt;p&gt;注意: 操作数一直接决定结果,那么操作数二不会被JS解析器读取(称之为短路操作.短路的话,后续就不会在进行执行)&lt;/p&gt;
&lt;p&gt;逻辑非&lt;/p&gt;
&lt;p&gt;如果操作数不是布尔类型,则隐式转换为布尔类型后,再去进行取反操作&lt;/p&gt;

</description>
<pubDate>Thu, 28 Dec 2017 16:05:00 +0000</pubDate>
<dc:creator>AmorR</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/AmorR/p/8138847.html</dc:identifier>
</item>
<item>
<title>shell编辑crontab任务 - 昊羲</title>
<link>http://www.cnblogs.com/haoxi/p/8138801.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haoxi/p/8138801.html</guid>
<description>&lt;p&gt;crontab是Linux下执行定时任务的工具，之前偶尔需要用到时都是通过执行&lt;code&gt;crontab -e&lt;/code&gt;命令或者通过root身份直接编辑&lt;code&gt;/etc/cron.*/&lt;/code&gt;下的文件来添加定时任务。这段时间遇到了需要通过shell来自动添加或删除crontab的需求。在shell中无法通过&lt;code&gt;crontab -e&lt;/code&gt;来与crontab编辑器交互，同时执行命令的人不一定有root身份，也无法直接编辑&lt;code&gt;/etc/cron.*/&lt;/code&gt;下的文件。&lt;/p&gt;
&lt;p&gt;经过一番实践，通过&lt;code&gt;crontab -l&lt;/code&gt;配合&lt;code&gt;sed&lt;/code&gt;命令来完成了这个自动添加及删除crontab的操作，在此记录下。&lt;/p&gt;
&lt;h4 id=&quot;crontab的语法&quot;&gt;crontab的语法&lt;/h4&gt;
&lt;p&gt;一张很明晰的crontab语法图，附在这以备用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohyn8f189.bkt.clouddn.com/17-12-28/62834492.jpg&quot; alt=&quot;crontab的语法&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;shell控制脚本&quot;&gt;shell控制脚本&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;co&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;ot&quot;&gt;CUR_PATH=$(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# 要定时执行的任务&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;TASK_COMMAND=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;echo 'aaa' &amp;gt;&amp;gt; /var/cron_test&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# 要添加的crontab任务&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;CRONTAB_TASK=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;*/30 * * * * &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;${TASK_COMMAND}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# 备份原始crontab记录文件&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;CRONTAB_BAK_FILE=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;${CUR_PATH}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/crontab_bak&quot;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# 创建crontab任务函数&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; create_crontab()&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Create crontab task...'&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;crontab&lt;/span&gt; -l &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;${CRONTAB_BAK_FILE}&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;2&amp;gt;&lt;/span&gt;/dev/null
    &lt;span class=&quot;kw&quot;&gt;sed&lt;/span&gt; -i &lt;span class=&quot;st&quot;&gt;&quot;/.*&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;${TASK_COMMAND}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/d&quot;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;${CRONTAB_BAK_FILE}&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;# 已存在任务时会被sed删除，防止重复添加&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;${CRONTAB_TASK}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;${CRONTAB_BAK_FILE}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;crontab&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;${CRONTAB_BAK_FILE}&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Complete'&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# 清除crontab任务函数&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt; clear_crontab()&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Delete crontab task...'&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;crontab&lt;/span&gt; -l &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;${CRONTAB_BAK_FILE}&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;2&amp;gt;&lt;/span&gt;/dev/null
    &lt;span class=&quot;kw&quot;&gt;sed&lt;/span&gt; -i &lt;span class=&quot;st&quot;&gt;&quot;/.*&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;${SCRIPT_NAME}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;/d&quot;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;${CRONTAB_BAK_FILE}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;crontab&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;${CRONTAB_BAK_FILE}&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Complete'&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;if [&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$#&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-lt&lt;/span&gt; 1&lt;span class=&quot;kw&quot;&gt; ]&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; [start | stop]&quot;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;exit&lt;/span&gt; 1
&lt;span class=&quot;kw&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt; in&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'start'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;create_crontab&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'stop'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;clear_crontab&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;esac&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 28 Dec 2017 16:03:00 +0000</pubDate>
<dc:creator>昊羲</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/haoxi/p/8138801.html</dc:identifier>
</item>
<item>
<title>windows环境下mysql主从配置 - 可惜mei如果</title>
<link>http://www.cnblogs.com/naruto123/p/8138708.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/naruto123/p/8138708.html</guid>
<description>&lt;p&gt;&lt;strong&gt;mysql主从配置。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;相关理论知识可以百度一下，这里就不多说了，直接说如何配置。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、环境介绍及说明&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　主库所在的操作系统：win7&lt;/p&gt;
&lt;p&gt;　　主库的版本：mysql-5.6.24-winx64.zip&lt;/p&gt;
&lt;p&gt;　　主库的ip地址：127.0.0.1&lt;/p&gt;
&lt;p&gt;　　主库的端口：3306&lt;/p&gt;
&lt;p&gt;　　从库所在的操作系统：win7&lt;/p&gt;
&lt;p&gt;　　从库的版本：&lt;span class=&quot;page-subtitle&quot;&gt;mysql-5.6.38-winx64.zip&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　从库的ip地址：127.0.0.1&lt;/p&gt;
&lt;p&gt;　　从库的端口：3307&lt;/p&gt;
&lt;p&gt;下载地址：https://www.mysql.com/downloads/&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果有多余的服务器也可以不用都配置到一台电脑上，只需要各服务器ip能通就行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注：主库和从库版本可以一致也可以不一致，需要说明一点，如果两者版本不一致，一般主库的版本需要比从库的版本低，这样就可以避免由于版本问题，有些sql不能执行的问题。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、数据库的安装&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　由于我下载的mysql都是解压版的，所以只需要把下载好的zip包解压到服务器上即可，就不需要安装了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我的解压目录如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228214059069-65649573.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 1）、主库（master）的安装及配置&lt;/p&gt;
&lt;p&gt; 　　进入主库mysql-5.6.24-winx64目录中，在此目录中新建my.ini文件并添加一下配置。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228215244944-87572023.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　具体文件内容如下，将里面的路径修改成你自己的主库路径。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_af512fa1-76c1-4148-bd9f-107f07b9f089&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_af512fa1-76c1-4148-bd9f-107f07b9f089&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_af512fa1-76c1-4148-bd9f-107f07b9f089&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# For advice on how to change settings please see
# http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html&lt;/span&gt;
# *** DO NOT EDIT THIS FILE. It's a template which will be copied to the
# *** &lt;span&gt;default&lt;/span&gt; location during install, and will be replaced &lt;span&gt;if&lt;/span&gt;&lt;span&gt; you
# &lt;/span&gt;***&lt;span&gt; upgrade to a newer version of MySQL.

[mysqld]

# Remove leading # and set to the amount of RAM &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; the most important data
# cache in MySQL. Start at &lt;/span&gt;70% of total RAM &lt;span&gt;for&lt;/span&gt; dedicated server, &lt;span&gt;else&lt;/span&gt; 10%&lt;span&gt;.
# innodb_buffer_pool_size &lt;/span&gt;=&lt;span&gt; 128M

# Remove leading # to turn on a very important data integrity option: logging
# changes to the binary log between backups.
# log_bin

# These are commonly set, remove the # and set as required.
# basedir &lt;/span&gt;=&lt;span&gt; .....
# datadir &lt;/span&gt;=&lt;span&gt; .....
# port &lt;/span&gt;=&lt;span&gt; .....
# server_id &lt;/span&gt;=&lt;span&gt; .....


# Remove leading # to set options mainly useful &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; reporting servers.
# The server defaults are faster &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; transactions and fast SELECTs.
# Adjust sizes as needed, experiment to find the optimal values.
# join_buffer_size &lt;/span&gt;=&lt;span&gt; 128M
# sort_buffer_size &lt;/span&gt;=&lt;span&gt; 2M
# read_rnd_buffer_size &lt;/span&gt;=&lt;span&gt; 2M 

# 以下内容手动添加
[client]
port&lt;/span&gt;=3307
&lt;span&gt;default&lt;/span&gt;-character-set=&lt;span&gt;utf8
[mysqld]
#主库配置
server_id&lt;/span&gt;=1&lt;span&gt;
log_bin&lt;/span&gt;=master-&lt;span&gt;bin
log_bin&lt;/span&gt;-index=master-&lt;span&gt;bin.index

#端口
port&lt;/span&gt;=3306&lt;span&gt;
character_set_server&lt;/span&gt;=&lt;span&gt;utf8
#解压目录
basedir&lt;/span&gt;=G:\Mysql\mysql-5.6.24-&lt;span&gt;winx64
#解压目录下data目录
datadir&lt;/span&gt;=G:\Mysql\mysql-5.6.24-&lt;span&gt;winx64\data

sql_mode&lt;/span&gt;=&lt;span&gt;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
[WinMySQLAdmin]
G:\Mysql\mysql&lt;/span&gt;-5.6.24-winx64\bin\mysqld.exe
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;my.ini&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　安装主库服务。&lt;/p&gt;
&lt;p&gt;　　cmd进入主库的bin目录中，如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228215703756-1248317337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　执行命令：mysqld --install master --defaults-file=&quot;G:\Mysql\mysql-5.6.24-winx64\my.ini&quot;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　注：其中的master为主库mysql的服务名称&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　出现以下提示，表示服务安装成功。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228220011397-2117021464.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　启动主库的mysql服务器&lt;/p&gt;
&lt;p&gt;　　执行命令：net start master&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注：net stop master 为停止命令&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　  出现以下提示信息表示主库启动成功&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228220311788-402289224.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　使用命令 mysql -uroot -p 登录master数据库（&lt;span&gt;默认安装好的mysql的root用户是没有密码的&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228221057678-1420226029.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　登录上之后修改root用户的密码（这里修改成root）&lt;/p&gt;
&lt;p&gt;　　执行命令&lt;/p&gt;
&lt;p&gt;　　use mysql;&lt;/p&gt;
&lt;p&gt;　　update  user set password=password(&quot;root&quot;) where user=&quot;root&quot;;&lt;/p&gt;
&lt;p&gt;　　flush privileges;&lt;/p&gt;
&lt;p&gt;　　执行完毕后如图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228221528256-1615415801.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这样就设置好了root用户的密码了。&lt;/p&gt;

&lt;p&gt;2）从库（slave）的安装与配置　　&lt;/p&gt;
&lt;p&gt; 　　进入主库mysql-5.6.38-winx64目录中，在此目录中新建my.ini文件并添加一下配置。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228224016459-265689164.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　具体文件内容如下，将里面的路径修改成你自己的从库路径。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_b20804f5-1a49-4677-a8c0-ce9e0170cece&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b20804f5-1a49-4677-a8c0-ce9e0170cece&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b20804f5-1a49-4677-a8c0-ce9e0170cece&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# For advice on how to change settings please see
# http:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html&lt;/span&gt;
# *** DO NOT EDIT THIS FILE. It's a template which will be copied to the
# *** &lt;span&gt;default&lt;/span&gt; location during install, and will be replaced &lt;span&gt;if&lt;/span&gt;&lt;span&gt; you
# &lt;/span&gt;***&lt;span&gt; upgrade to a newer version of MySQL.

[mysqld]

# Remove leading # and set to the amount of RAM &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; the most important data
# cache in MySQL. Start at &lt;/span&gt;70% of total RAM &lt;span&gt;for&lt;/span&gt; dedicated server, &lt;span&gt;else&lt;/span&gt; 10%&lt;span&gt;.
# innodb_buffer_pool_size &lt;/span&gt;=&lt;span&gt; 128M

# Remove leading # to turn on a very important data integrity option: logging
# changes to the binary log between backups.
# log_bin

# These are commonly set, remove the # and set as required.
# basedir &lt;/span&gt;=&lt;span&gt; .....
# datadir &lt;/span&gt;=&lt;span&gt; .....
# port &lt;/span&gt;=&lt;span&gt; .....
# server_id &lt;/span&gt;=&lt;span&gt; .....


# Remove leading # to set options mainly useful &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; reporting servers.
# The server defaults are faster &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; transactions and fast SELECTs.
# Adjust sizes as needed, experiment to find the optimal values.
# join_buffer_size &lt;/span&gt;=&lt;span&gt; 128M
# sort_buffer_size &lt;/span&gt;=&lt;span&gt; 2M
# read_rnd_buffer_size &lt;/span&gt;=&lt;span&gt; 2M 

# 以下内容手动添加
[client]
port&lt;/span&gt;=3307
&lt;span&gt;default&lt;/span&gt;-character-set=&lt;span&gt;utf8
[mysqld]
#从库配置
server_id&lt;/span&gt;=2&lt;span&gt;
relay&lt;/span&gt;-log-index=slave-relay-&lt;span&gt;bin.index
relay&lt;/span&gt;-log=slave-relay-&lt;span&gt;bin
#端口
port&lt;/span&gt;=3307&lt;span&gt;
character_set_server&lt;/span&gt;=&lt;span&gt;utf8
#解压目录
basedir&lt;/span&gt;=G:\Mysql\mysql-5.6.38-&lt;span&gt;winx64
#解压目录下data目录
datadir&lt;/span&gt;=G:\Mysql\mysql-5.6.38-&lt;span&gt;winx64\data

sql_mode&lt;/span&gt;=&lt;span&gt;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
[WinMySQLAdmin]
G:\Mysql\mysql&lt;/span&gt;-5.6.38-winx64\bin\mysqld.exe
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;my.ini&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　安装从库服务。&lt;/p&gt;
&lt;p&gt;　　cmd进入从的bin目录中，如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228224306381-656316522.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　执行命令：mysqld --install slave --defaults-file=&quot;G:\Mysql\mysql-5.6.38-winx64\my.ini&quot;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　注：其中的slave为主库mysql的服务名称&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　出现以下提示，表示服务安装成功。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228224554569-1046704734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　启动从的mysql服务器&lt;/p&gt;
&lt;p&gt;　　执行命令：net start slave&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注：net stop slave为停止命令&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　  出现以下提示信息表示主库启动成功&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228224742100-1992313114.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　同样的登录从库修改从库root用户的密码为root&lt;/p&gt;
&lt;p&gt;　　执行命令&lt;/p&gt;
&lt;p&gt;　　use mysql;&lt;/p&gt;
&lt;p&gt;　　update  user set password=password(&quot;root&quot;) where user=&quot;root&quot;;&lt;/p&gt;
&lt;p&gt;　　flush privileges;&lt;/p&gt;
&lt;p&gt;　　执行完毕后如图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228225151913-1671615662.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　至此，主、从数据库的安装及配置就完成了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、关联主库（master）与从库（slave）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　上面我们已经把master和slave相关配置文件都已添加，并分别启动了master与slave，现在我们分别登录到master和slave的mysql中，如图：&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;master的mysql 执行命令 show master status查看master的状态&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228230608944-260570125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;slave的mysql  &lt;span&gt;执行命令 show slave status查看slave的状态&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228230702069-2074140050.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们可以发现 ，master的状态下，生成了一个二进制的日志文件，而slave下是空的，所以我们现在就要把主库与从库关联起来。只需要让从库（slave）知道主库（master）&lt;/p&gt;
&lt;p&gt; 　　的地址就可以了。&lt;/p&gt;
&lt;p&gt;　　首先我们需要在主库（master）中创建一个用户用于与从库同步的用户名和密码（这里我创建一个test用户，密码为mysql），并给test用户授权，以用于主库操作从库。&lt;/p&gt;
&lt;p&gt;　　具体如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228232306100-1630605370.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　相关命令：&lt;br/&gt;　　create user test;&lt;br/&gt;　　grant replication slave on *.* to '从库用户名(test)'@'从库主机地址(127.0.0.1)'identified by '密码(mysql)';&lt;br/&gt;　　flush privileges;&lt;/p&gt;
&lt;p&gt;　　现在我们切到从库（slave），把主库与从库联系起来。&lt;/p&gt;
&lt;p&gt;　　执行以下命令：&lt;/p&gt;
&lt;p&gt;　　change master to master_host='127.0.0.1',master_port=3306,master_user='test',master_password='mysql',master_log_file='master-bin.000001',master_log_pos=0;&lt;/p&gt;
&lt;p&gt; 　　然后执行命令 start slave 开启主从同步&lt;/p&gt;
&lt;p&gt;　　如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228233109538-306403719.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后执行命令查看 slave的状态&lt;/p&gt;
&lt;p&gt;　　show slave status \G;&lt;/p&gt;
&lt;p&gt;　　出现如下图，则开启主从跟踪成功&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228233544194-1801159785.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　至此，主从跟踪已经开启，并全部配置完成&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 四、验证主从同步&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　我们进入master和slave并查看他们的数据库，如下图：&lt;/p&gt;
&lt;p&gt;　　然后我们在主库中创建一个数据库user，看一下从库有没有变化。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1176523/201712/1176523-20171228234455288-740821118.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;至此，主从同步已配置完毕。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;说明：注意不要往从库中写数据，如果从库写入数据，master_log_pos是不会变化的，主库的信息没有发生变化，当主库又变化和从库一样的操作时就有可能会产生冲突，因此，只能在主库中写数据，从库只能读数据，当然主库也可以读数据。&lt;/span&gt;&lt;/p&gt;




</description>
<pubDate>Thu, 28 Dec 2017 16:00:00 +0000</pubDate>
<dc:creator>可惜mei如果</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/naruto123/p/8138708.html</dc:identifier>
</item>
<item>
<title>std::shared_ptr的工作原理 - imjustice</title>
<link>http://www.cnblogs.com/imjustice/p/how_shared_ptr_void_works.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imjustice/p/how_shared_ptr_void_works.html</guid>
<description>&lt;h2 id=&quot;前戏&quot;&gt;前戏&lt;/h2&gt;
&lt;p&gt;先抛出两个问题&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果&lt;code&gt;delete&lt;/code&gt;一个指针，但是它真实的类型和指针类型不一样会发生什么？&lt;/li&gt;
&lt;li&gt;是谁调用了析构函数？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面这段代码会发生什么有趣的事情？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; delete_diff_type.cpp&lt;/span&gt;
#include &amp;lt;iostream&amp;gt;

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo
{
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    Foo() { cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Foo()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl; }
    &lt;/span&gt;~Foo() { cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~Foo()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl; }
};

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; FakeFoo
{
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    FakeFoo() { cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FakeFoo()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl; }
    &lt;/span&gt;~FakeFoo() { cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~FakeFoo()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl; }
};

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt; argv[]) {
    
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;* vptr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Foo();
    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt; vptr;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; warning
    
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    FakeFoo* ffptr = static_cast&amp;lt;FakeFoo*&amp;gt;(new Foo()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; error&lt;/span&gt;
    FakeFoo* ffptr = reinterpret_cast&amp;lt;FakeFoo*&amp;gt;(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Foo());
    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; ffptr;
    
    Foo&lt;/span&gt;* fptr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Foo();
    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; fptr;
    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}

输出:
Foo()
Foo()
&lt;/span&gt;~&lt;span&gt;FakeFoo()
Foo()
&lt;/span&gt;~Foo()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;看一下汇编代码可以看到&lt;code&gt;main&lt;/code&gt;函数主要做了下面这几件事&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 ; symbol stub &lt;span&gt;for&lt;/span&gt;: &lt;span&gt;operator&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;(unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;)
 ; Foo::Foo at delete_diff_type.cpp:&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
 ; symbol stub &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;: &lt;span&gt;operator&lt;/span&gt; &lt;span&gt;delete&lt;/span&gt;(&lt;span&gt;void&lt;/span&gt;*&lt;span&gt;)

 ; symbol stub &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;: &lt;span&gt;operator&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;(unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;)
 ; Foo::Foo at delete_diff_type.cpp:&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
 ; FakeFoo::&lt;/span&gt;~FakeFoo at delete_diff_type.cpp:&lt;span&gt;16&lt;/span&gt;&lt;span&gt;
 ; symbol stub &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;: &lt;span&gt;operator&lt;/span&gt; &lt;span&gt;delete&lt;/span&gt;(&lt;span&gt;void&lt;/span&gt;*&lt;span&gt;)

 ; symbol stub &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;: &lt;span&gt;operator&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;(unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;)
 ; Foo::Foo at delete_diff_type.cpp:&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
 ; Foo::&lt;/span&gt;~Foo at delete_diff_type.cpp:&lt;span&gt;9&lt;/span&gt;&lt;span&gt;
 ; symbol stub &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;: &lt;span&gt;operator&lt;/span&gt; &lt;span&gt;delete&lt;/span&gt;(&lt;span&gt;void&lt;/span&gt;*)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从汇编中可以看出，构造造函数和析构函数是编译器根据指针的类型生成的调用代码。而且编译器是不允许没有继承关系的指针之间进行转换的，&lt;code&gt;void*&lt;/code&gt; 是个例外，只要不作死用&lt;code&gt;reinterpret_cast&lt;/code&gt;把指针转换成不相关的类型是不会有问题的。&lt;/p&gt;
&lt;p&gt;所以上面两个问题大概就有答案了。&lt;code&gt;delete&lt;/code&gt;语句会至少产生两个动作，一个是调用指针对应类型的析构函数，然后去调用&lt;code&gt;operator delete&lt;/code&gt;释放内存。所以如果&lt;code&gt;delete&lt;/code&gt;的指针和其指向的真实类型不一样的时候，编译器只会调用指针类型的析构函数，这也就为什么基类的析构函数需要声明称虚函数才能够保证&lt;code&gt;delete&lt;/code&gt;基类指针的时候子类析构函数能够被正确的调用。&lt;br/&gt;&lt;code&gt;operator delete&lt;/code&gt;是都会被调用到的，所以指针指向的那块内存是能够“正常的”被释放掉用。&lt;/p&gt;
&lt;h2 id=&quot;stdsharedptrvoid-的行为&quot;&gt;&lt;code&gt;std::shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt; 的行为&lt;/h2&gt;
&lt;p&gt;那么这个跟&lt;code&gt;std::shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt; 有什么关系呢？&lt;/p&gt;
&lt;p&gt;先看一段代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#include &amp;lt;iostream&amp;gt;

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Foo
{
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    Foo() { cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Foo()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl; }
    &lt;/span&gt;~Foo() { cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~Foo()&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl; }
};

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;const&lt;/span&gt; &lt;span&gt;char&lt;/span&gt; *&lt;span&gt; argv[]) {
    shared_ptr&lt;/span&gt;&amp;lt;&lt;span&gt;void&lt;/span&gt;&amp;gt; vptr = shared_ptr&amp;lt;Foo&amp;gt;(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Foo);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}
输出：
Foo()
&lt;/span&gt;~Foo()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;与第一段代码中类似，不过把&lt;code&gt;void*&lt;/code&gt;换成了&lt;code&gt;std::shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt;，那么&lt;code&gt;shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt;为什么能够调用到正确的析构函数呢？一定是&lt;code&gt;shared_ptr&lt;/code&gt;里面搞了什么鬼。&lt;/p&gt;
&lt;h2 id=&quot;stdsharedptrvoid-为啥能正常工作&quot;&gt;&lt;code&gt;std::shared_ptr&amp;lt;void&amp;gt;&lt;/code&gt; 为啥能正常工作&lt;/h2&gt;
&lt;p&gt;那么就看看源代码看看到底为啥这货能够工作，下面是&lt;em&gt;libcxx&lt;/em&gt;中&lt;code&gt;shared_ptr&lt;/code&gt;的部分源码，把关键的部分抠出来了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* C1. shared_ptr 构造函数 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

template&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; _Tp&amp;gt;&lt;span&gt;
template&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; _Yp&amp;gt;&lt;span&gt;
shared_ptr&lt;/span&gt;&amp;lt;_Tp&amp;gt;::shared_ptr(_Yp*&lt;span&gt; __p,
                            typename enable_if&lt;/span&gt;&amp;lt;is_convertible&amp;lt;_Yp*, element_type*&amp;gt;::value, __nat&amp;gt;&lt;span&gt;::type)
    : __ptr_(__p)
{
    unique_ptr&lt;/span&gt;&amp;lt;_Yp&amp;gt;&lt;span&gt; __hold(__p);
    typedef typename __shared_ptr_default_allocator&lt;/span&gt;&amp;lt;_Yp&amp;gt;&lt;span&gt;::type _AllocT;
    typedef __shared_ptr_pointer&lt;/span&gt;&amp;lt;_Yp*, default_delete&amp;lt;_Yp&amp;gt;, _AllocT &amp;gt;&lt;span&gt; _CntrlBlk;
    __cntrl_ &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; _CntrlBlk(__p, default_delete&amp;lt;_Yp&amp;gt;&lt;span&gt;(), _AllocT());
    __hold.release();
    __enable_weak_this(__p, __p);
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* C2. shared_ptr 拷贝构造 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
template&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; _Tp&amp;gt;&lt;span&gt;
inline
shared_ptr&lt;/span&gt;&amp;lt;_Tp&amp;gt;::shared_ptr(&lt;span&gt;const&lt;/span&gt; shared_ptr&amp;amp;&lt;span&gt; __r) _NOEXCEPT
    : __ptr_(__r.__ptr_),
      __cntrl_(__r.__cntrl_)
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (__cntrl_)
        __cntrl_&lt;/span&gt;-&amp;gt;&lt;span&gt;__add_shared();
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* C3. shared_ptr::__cntrl_ 类型 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
__shared_weak_count&lt;/span&gt;*&lt;span&gt; __cntrl_;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* C4. shared_ptr 析构函数 *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

template&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; _Tp&amp;gt;&lt;span&gt;
shared_ptr&lt;/span&gt;&amp;lt;_Tp&amp;gt;::~&lt;span&gt;shared_ptr()
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (__cntrl_)
        __cntrl_&lt;/span&gt;-&amp;gt;&lt;span&gt;__release_shared();
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* C5. __shared_weak_count::__release_shared *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; __release_shared() _NOEXCEPT {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (__libcpp_atomic_refcount_decrement(__shared_owners_) == -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
    __on_zero_shared();
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* C6. __shared_ptr_pointer::__release_shared *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
template &lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; _Tp, &lt;span&gt;class&lt;/span&gt; _Dp, &lt;span&gt;class&lt;/span&gt; _Alloc&amp;gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 重点 !!! virtual !!! &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt;
__shared_ptr_pointer&lt;/span&gt;&amp;lt;_Tp, _Dp, _Alloc&amp;gt;&lt;span&gt;::__on_zero_shared() _NOEXCEPT
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; __data__ 是 内部工具类__compressed_pair
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; __data_.first().second()是 deleter
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; __data_.first().first() 是 shared_ptr&amp;lt;T&amp;gt; 中T类型的指针&lt;/span&gt;
&lt;span&gt;    __data_.first().second()(__data_.first().first());
    __data_.first().second().&lt;/span&gt;~&lt;span&gt;_Dp();
}


&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;* C7. default deleter *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

template &lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; _Tp&amp;gt;
&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; _LIBCPP_TEMPLATE_VIS default_delete {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ... 此处省略若干行&lt;/span&gt;
  &lt;span&gt;void&lt;/span&gt; &lt;span&gt;operator&lt;/span&gt;()(_Tp* __ptr) &lt;span&gt;const&lt;/span&gt;&lt;span&gt; _NOEXCEPT {
    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; __ptr;
  }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不要慌，给你慢慢道来。&lt;/p&gt;
&lt;p&gt;这个故事简单得说是这样的：&lt;br/&gt;- 每一个&lt;code&gt;shared_ptr&lt;/code&gt; 内部有一个&lt;code&gt;control block&lt;/code&gt;，里面会存放一个要维护的指针，一个计数，一个删除器(&lt;code&gt;deleter&lt;/code&gt;)，一个分配(&lt;code&gt;allocator&lt;/code&gt;)。这里我们要关心的是删除器。顾名思义，它是用来删除指针的。&lt;br/&gt;- &lt;code&gt;shared_ptr&lt;/code&gt;中的 有一个&lt;code&gt;__cntrl_&lt;/code&gt;即&lt;code&gt;control block&lt;/code&gt;。字段的类型是&lt;code&gt;__shared_weak_count&lt;/code&gt;指针，这个类是一个非模板类。&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;创建的&lt;code&gt;control block&lt;/code&gt;的类型是一个类模板&lt;code&gt;template &amp;lt;class _Tp, class _Dp, class _Alloc&amp;gt; __shared_ptr_pointer&lt;/code&gt;继承自&lt;code&gt;__shared_weak_count&lt;/code&gt;。 见&lt;strong&gt;代码C3&lt;/strong&gt;。&lt;br/&gt;- 当创建一个新的&lt;code&gt;shared_ptr&lt;/code&gt;的时候，构建一个新的&lt;code&gt;control block&lt;/code&gt;。见&lt;strong&gt;代码C1&lt;/strong&gt;。&lt;br/&gt;- 当一个&lt;code&gt;shared_ptr&lt;/code&gt; A赋值或者拷贝构造给另一个&lt;code&gt;shared_ptr&lt;/code&gt;B的时候（当然是在类型能够转换的前提下），B会把A的&lt;code&gt;__cntrl_&lt;/code&gt;拷一份，同时将其引用加一。注意，这个时候拷贝的是指针，&lt;code&gt;__cntrl_&lt;/code&gt;还是指向最初创建的那个对象。见&lt;strong&gt;代码C2&lt;/strong&gt;。&lt;br/&gt;- 当&lt;code&gt;shared_ptr&lt;/code&gt;被析构或者重置的时候会调用&lt;code&gt;__cntrl_-&amp;gt;__release_shared()&lt;/code&gt;。见&lt;strong&gt;代码C4&lt;/strong&gt;。&lt;br/&gt;- &lt;code&gt;__cntrl_-&amp;gt;__release_shared()&lt;/code&gt;如果发现当前的计数为-1的时候，调用&lt;code&gt;__on_zero_shared()&lt;/code&gt;。见&lt;strong&gt;代码C5&lt;/strong&gt;。&lt;br/&gt;- &lt;code&gt;__on_zero_shared&lt;/code&gt;是一个虚方法，那么它就会调用到最初创建的&lt;code&gt;__shared_ptr_pointer&lt;/code&gt;的实现。&lt;br/&gt;- &lt;code&gt;__shared_ptr_pointer&lt;/code&gt;的实现中是有完整的类型和删除器的信息的。见&lt;strong&gt;代码C6&lt;/strong&gt;。&lt;br/&gt;- 默认的删除器很简单的执行了&lt;code&gt;delete __ptr&lt;/code&gt;操作，因为类型是已知的所以能够正确的调用到析构函数。见&lt;strong&gt;代码C7&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;这种实现方式给sharedptr带来额外好处&quot;&gt;这种实现方式给&lt;code&gt;shared_ptr&lt;/code&gt;带来额外好处&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Effective C++&lt;/em&gt; 条款07告诉我们“要为多态基类声明 virtual 析构函数”。当然我认为建议依然有效，但是用了&lt;code&gt;shared_ptr&lt;/code&gt;以后带来的一个额外好处就是即便你的析构函数忘记写成&lt;code&gt;virtual&lt;/code&gt;也能帮你正确的调用析构函数。&lt;/p&gt;

&lt;p&gt;&lt;a title=&quot;=======&amp;gt;&quot; href=&quot;http://zhengyi.me/2017/12/28/how-shared-ptr-void-works/&quot; target=&quot;_blank&quot;&gt; == eof == &lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 28 Dec 2017 15:41:00 +0000</pubDate>
<dc:creator>imjustice</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imjustice/p/how_shared_ptr_void_works.html</dc:identifier>
</item>
<item>
<title>关于《Head First Python》一书中print_lol()函数的思考 - 王俊玺</title>
<link>http://www.cnblogs.com/wang-junxi/p/8138338.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wang-junxi/p/8138338.html</guid>
<description>
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;　　在《Head First Python》第一章中，讲述到Python处理复杂数据（以电影数据列表为例），首先将电影数据创建为Python列表，由于Python的变量标识符没有类型，列表中的每一个数据项可以是任何类型的数据，甚至可以是另外一个列表，并且可以无限嵌套。下面开始print()和print_lol()的表演。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1305383/201712/1305383-20171228234045131-939326892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 　　列表  movies = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The Holy Grail&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 1975, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Terry Jones &amp;amp; Terry Gilliam&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, 91&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; 　　　　　　　　　　　　　　[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Graham Chapman&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; 　　　　　　　　　　　　　　　　　　[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Michael Palin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;John Cleese&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Terry Gilliam&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Eric Idle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Terry Jones&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]]]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;step1（使用数据偏移量进行列表内数据的精准查找）：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(movies[4][1][3])  &lt;/pre&gt;
&lt;pre&gt;
输出结果为：&lt;/pre&gt;
&lt;img src=&quot;https://images2017.cnblogs.com/blog/1305383/201712/1305383-20171228232159866-609920731.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;step2（使用一层print()对整个列表进行输出）：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(movies)&lt;p&gt;输出结果为：&lt;/p&gt;&lt;/pre&gt;
&lt;img src=&quot;https://images2017.cnblogs.com/blog/1305383/201712/1305383-20171228232046522-1906985050.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;


&lt;p&gt;step3（使用print()加上一层for循环对整个列表进行输出）：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;　　for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; movies: 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     　　&lt;span&gt;print&lt;/span&gt;(i)&lt;p&gt;输出结果为：&lt;/p&gt;&lt;/pre&gt;
&lt;img src=&quot;https://images2017.cnblogs.com/blog/1305383/201712/1305383-20171228232302647-2061614060.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;step4（使用print()加上两层for循环加上一个if else对整个列表进行输出）：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; movies:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(i,list):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; i:
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(j)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(i)
&lt;/pre&gt;
&lt;pre&gt;
&lt;br/&gt;输出结果为：
&lt;/pre&gt;
&lt;img src=&quot;https://images2017.cnblogs.com/blog/1305383/201712/1305383-20171228232654209-449238170.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;step5（使用print()加上三层for循环加上两个if else对整个列表进行输出）：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; movies:
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(i,list):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; i:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(j,list):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; j:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(k)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(j)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(i)
&lt;/pre&gt;
&lt;pre&gt;
&lt;br/&gt;输出结果为：
&lt;/pre&gt;
&lt;img src=&quot;https://images2017.cnblogs.com/blog/1305383/201712/1305383-20171228233057397-1506309254.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;step6（多层嵌套实在是太麻烦了，试试构造函数然后递归，祭出今天的重场戏print_lol()）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;首先定义函数：
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; print_lol(the_list):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; the_list:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(i,list):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            print_lol(i)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(i)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;然后使用print_lol()来对movies列表进行输出，即print_lol(movies)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 输出结果为：&lt;/pre&gt;
&lt;img src=&quot;https://images2017.cnblogs.com/blog/1305383/201712/1305383-20171228233659819-486470548.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;　　今天加班太晚了，有点累了，那么就将关于print_lol()函数不断趋于完善的过程的思考放在明天的博客中，要努力奋斗，同时晚安好梦。&lt;/p&gt;

</description>
<pubDate>Thu, 28 Dec 2017 15:41:00 +0000</pubDate>
<dc:creator>王俊玺</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wang-junxi/p/8138338.html</dc:identifier>
</item>
<item>
<title>第四次大作业-用户调研及结论 - 17级软件工程1班5组</title>
<link>http://www.cnblogs.com/hustsoftware1701/p/8138313.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hustsoftware1701/p/8138313.html</guid>
<description>&lt;p&gt;　　最近，小组同学们在紧张的复习期间，抽出时间完成了第二阶段的任务：对于博客网的用户调研，并总结分析得出结论。以下，将从4个部分去展示这一次的小组工作，分别是&lt;/p&gt;
&lt;p&gt;　　1对象的背景和需求&lt;/p&gt;
&lt;p&gt;　　2对面使用产品&lt;/p&gt;
&lt;p&gt;　　3使用过程&lt;/p&gt;
&lt;p&gt;　　4分析和建议&lt;/p&gt;
&lt;p&gt;然后最后部分是总结相关。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;对象的背景和需求&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　本次采访对象是一位计算机专业的同学,在几年前曾在老师的推荐下使用过博客园产品,注册了账号想通过阅读博客上的相关知识提高自己的专业技能,后来因为觉得一直要寻找自己需要的博客很麻烦,以及部分自身原因,就搁置了使用博客园学习的计划。&lt;/p&gt;
&lt;p&gt;　　对象的需求是重新使用博客园产品，查找自己需要的知识。同时体验班级博客的功能，查找同学和查看班级动态。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;对象使用产品&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;采访对象正在使用博客园产品：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1278710/201712/1278710-20171228233118694-133448729.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;使用过程&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　(1)由于被采访对象在之前就注册过博客园的帐号，因此直接使用当初注册的账户进行登录。但在登录时却遇到了问题，该同学尝试在用户名栏填入邮箱地址，以及输入密码进行验证后进行登录，系统却提示：用户名不存在！但是该同学十分确定自己当初就是使用这个邮箱地址进行的注册，输入的密码也绝对是正确的，不明白为何会出现这种情况。&lt;/p&gt;
&lt;p&gt;于是我告诉她，博客园仅支持通过用户名进行登录，所以要输入当初注册时填写的用户名。同学表示很无奈：“当初注册时系统一直提示用户名重复，最后随便输入了一串字符才注册成功，随便输的我哪能记得那么清楚？”我回答可以找回用户名的。同学哀怨：“怎么这么麻烦！登录淘宝系统的时候输手机号用户名支付宝帐号都能登录，这个怎么只能输入用户名！”&lt;/p&gt;
&lt;p&gt;在点击“找回”链接后，在页面中又输入了自己的邮箱地址，系统提示“用户名已经发至您的邮箱。”然后同学登录邮箱这才找到了自己的用户名，登录成功了。光是登录就花费了五六分钟。&lt;/p&gt;
&lt;p&gt; 　　(2)登录进入主页后，该同学想找一篇关于SSH框架的博文，在“找一找”中搜索“SSH”后，出现了66499篇博文，同学一下子选择困难症了，不知道从何看起。我说你可以选择查看被推荐数高的。同学：“那我按被推荐数由高到低排序吧！应该点哪排序？”我：“好像没有这个功能。”同学：“淘宝都能按销量排序。博客就不能加一个按推荐数排序的功能吗？要不然我一个个的对比多麻烦。”&lt;/p&gt;
&lt;p&gt;　　(3)该同学想要搜索另一位同学并关注，但是找了半天没找到搜索人的按钮，每次搜索出来的都是相关博客。最后在点击关注 “0”后跳转的页面右下角才看到有搜索园友的按钮。&lt;/p&gt;
&lt;p&gt;　　(4)该同学点击关注园友后，想要查看园友所在的班级，但是却无法在其个人中心找到所属班级，也没有“该园友未加入班级”的提示。后来她在主页点击班级按钮后发现有搜索框，我让她输入“软件测试”，结果中有显示我们的班级，也能看到班级中有哪些学生。原来博客园仅支持通过班级找园友，而不能通过园友得知该园友所在的班级。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h2&gt;分析与建议&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　（1）    既然是通过邮箱来和用户进行绑定，能否也能使用邮箱地址进行登录，而不是一定要使用注册时的用户名。毕竟邮箱地址不会被忘记，而用户名很容易被遗忘。&lt;/p&gt;
&lt;p&gt;　　（2）    一个用户两个昵称（登录名称和显示名称），很容易让人混淆，有点画蛇添足。能否合二为一便于用户记忆？&lt;/p&gt;
&lt;p&gt;　　（3）    搜索自己想找的园友实在是很麻烦，能否把查找园友按钮放在主界面的一个板块？&lt;/p&gt;
&lt;p&gt;　　（4）    能否设置查看自己所关注的园友所在班级的功能？&lt;/p&gt;

&lt;p&gt;　　经过以上工作，我们对博客园产品的评价是(c)一般。除了这个定性结论，还给出定量结论如表3-1所示。其中每栏的评分标准是：满分10分,良好8分,及格6分，较差3分，聊胜于无1分,很差-3分。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;表3-1 定量分析&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;9&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;类别&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot;&gt;
&lt;p align=&quot;center&quot;&gt;描述&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;评分&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td rowspan=&quot;6&quot; valign=&quot;top&quot; width=&quot;104&quot;&gt;

&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;功能&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;核心功能&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;发表博文、搜索查看博文、评价博文等功能良好&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;细节&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;如设置两个昵称，很多余&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;-3&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;用户体验&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;没有不断弹出的广告，按钮设置不太合理&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;辅助功能&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;可以在个人中心查看新闻、招聘信息等&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;差异化功能&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot;&gt;
&lt;p&gt;班级功能的设置&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;系统的效能&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;启动速度快，能快速响应用户请求&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td rowspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;104&quot;&gt;

&lt;p align=&quot;center&quot;&gt;体验&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;软件的适应性&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;断网时无法使用，没有鼠标不能流畅操作&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;成长性&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;未设置记住用户的选择的功能&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;用户有控制权&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;用户的操作有误时，系统有部分提示&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;104&quot;&gt;
&lt;p align=&quot;center&quot;&gt;其它&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;142&quot;&gt;
&lt;p&gt;界面美观度&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;402&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;搜索博文的结果界面不够简洁&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;63&quot;&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Thu, 28 Dec 2017 15:33:00 +0000</pubDate>
<dc:creator>17级软件工程1班5组</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hustsoftware1701/p/8138313.html</dc:identifier>
</item>
<item>
<title>SQL Server-聚焦ROW_NUMBER VS TOP N性能 - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/8138248.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/8138248.html</guid>
<description>&lt;p&gt;抱歉各位，从八月份开始一直在着手写EntityFramework 6.x和EntityFramework Core 2.0的书籍写作，所以最近一直遗漏了对博客的管理，后面会着手于写SQL Server、EntityFramework Core和.NET Core方面的博客。我们知道如果需要查询前N行数据，除了可以利用TOP N进行查询外，同样也可以利用ROW_NUMBER来达到同样的效果，那么二者使用哪个性能会更好呢？下面我们来比较下。&lt;/p&gt;
&lt;h2&gt;ROW_NUMBER VS TOP N&lt;/h2&gt;
&lt;p&gt;我们利用AdventureWorks2012示例库中的Production.Product表来进行演示，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;DBCC&lt;/span&gt;&lt;span&gt; DROPCLEANBUFFERS()
&lt;/span&gt;&lt;span&gt;DBCC&lt;/span&gt;&lt;span&gt; FREEPROCCACHE()
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt;ROW_NUMBER QUERY&lt;/span&gt;
&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; ProductID
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; (
    &lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; ProductID, ROW_NUMBER() &lt;span&gt;OVER&lt;/span&gt; (&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; ProductID) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; RN
    &lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; Production.Product
    ) &lt;/span&gt;&lt;span&gt;AS&lt;/span&gt;&lt;span&gt; T
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt; T.RN &lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;
&lt;span&gt;GO&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt; TOP N QUERY&lt;/span&gt;
&lt;span&gt;SELECT&lt;/span&gt; 
    &lt;span&gt;TOP&lt;/span&gt; &lt;span&gt;100&lt;/span&gt;&lt;span&gt; ProductID
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; Production.Product
&lt;/span&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; ProductID
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/589642/201712/589642-20171228224331491-373195070.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图所知，对于这两个查询计划的成本是一样的，都为50%。 如果我们要检查在两个聚集索引扫描操作符中读取的估计行数，那么我们会注意到两者都显示相同的值，即100。可以说聚集索引扫描的估计和实际行数是相同的都是100，如下。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/589642/201712/589642-20171228224514959-1767680874.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是不是就以此说明二者性能是一样的呢？稍等片刻，接下来我们将查询基数再设置大一点看看，比如1000而不再是100，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;DBCC&lt;/span&gt;&lt;span&gt; DROPCLEANBUFFERS()
&lt;/span&gt;&lt;span&gt;DBCC&lt;/span&gt;&lt;span&gt; FREEPROCCACHE()
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;
&lt;span&gt;SET&lt;/span&gt; &lt;span&gt;STATISTICS&lt;/span&gt; IO &lt;span&gt;ON&lt;/span&gt;
&lt;span&gt;SET&lt;/span&gt; &lt;span&gt;STATISTICS&lt;/span&gt; TIME &lt;span&gt;ON&lt;/span&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;ROW_NUMBER QUERY&lt;/span&gt;
&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; ProductID
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; (
    &lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; ProductID, ROW_NUMBER() &lt;span&gt;OVER&lt;/span&gt; (&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt; ProductID) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; RN
    &lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; Production.Product
    ) &lt;/span&gt;&lt;span&gt;AS&lt;/span&gt;&lt;span&gt; T
&lt;/span&gt;&lt;span&gt;WHERE&lt;/span&gt; T.RN &lt;span&gt;&amp;lt;=&lt;/span&gt; &lt;span&gt;1000&lt;/span&gt;
&lt;span&gt;GO&lt;/span&gt;

&lt;span&gt;--&lt;/span&gt;&lt;span&gt; TOP N QUERY&lt;/span&gt;
&lt;span&gt;SELECT&lt;/span&gt; 
    &lt;span&gt;TOP&lt;/span&gt; &lt;span&gt;1000&lt;/span&gt;&lt;span&gt; ProductID
&lt;/span&gt;&lt;span&gt;FROM&lt;/span&gt;&lt;span&gt; Production.Product
&lt;/span&gt;&lt;span&gt;ORDER&lt;/span&gt; &lt;span&gt;BY&lt;/span&gt;&lt;span&gt; ProductID
&lt;/span&gt;&lt;span&gt;GO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/589642/201712/589642-20171228224807194-1395725417.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从如上截图可以看出，使用ROW_NUMBER进行查询的速度要明显快于TOP N，即29%和71%。 但是，我们还需要在等一下，因为我们在这里看到的成本只是估计成本。 如果操作的估算不准确，那么查询计划估算成本也将不准确。 接下来我们检查两个计划中的聚集索引扫描的属性：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/589642/201712/589642-20171228225844366-2138348276.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/589642/201712/589642-20171228230047850-2137391052.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到，使用ROW_NUMBER查询的估计行数为100，而实际数量为504，查询计划的估计成本是基于估计的行数所计算得来，即100。我们还是不能够相信估计的计划成本。 我们再来看看统计数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/589642/201712/589642-20171228230222147-1590272510.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;经过上面的统计，我们可以根据统计数据而做出最终决定，而不是比较执行计划的估计成本。TOP N的查询性能优于ROW_NUMBER。 &lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;从上比较TOP N和ROW_NUMBER的查询得知，查询计划所得到的成本并不是判断性能的最终依据，只是基础性的判断，我们最终还得集合IO和TIME等来综合判断性能差异。&lt;/p&gt;
</description>
<pubDate>Thu, 28 Dec 2017 15:10:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/8138248.html</dc:identifier>
</item>
</channel>
</rss>