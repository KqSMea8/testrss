<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>java  I/O流详解 - nianzhilian</title>
<link>http://www.cnblogs.com/nianzhilian/p/9022366.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nianzhilian/p/9022366.html</guid>
<description>&lt;h3&gt;概况&lt;/h3&gt;
&lt;p&gt;I/O流主要分为二大类别：字符流和字节流。&lt;/p&gt;
&lt;h4&gt;字节流（基本流）&lt;/h4&gt;
&lt;p&gt;1、字节输入流    类名：FileInputStream    特点：读（对文件进行读取操作）    父类：&lt;strong&gt;InputStream&lt;/strong&gt;   &lt;/p&gt;
&lt;p&gt;2、字节输出流    类名：FileOutputStream 特点：写 （对文件进行写入操作）    父类：OutputStream&lt;/p&gt;
&lt;h4&gt;字符流（基本流）&lt;/h4&gt;
&lt;p&gt;1、字符输入流    类名：&lt;strong&gt;FileReader&lt;/strong&gt;   特点：读（对文件进行读取操作）     父类：&lt;strong&gt;InputStreamReader&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;2、字符输出流    类名：FileWriter       特点：写 （对文件进行写入操作）    父类：OutputStreamWriter&lt;/p&gt;
&lt;h3&gt;缓冲流&lt;/h3&gt;
&lt;h4&gt;字节缓冲流&lt;/h4&gt;
&lt;p&gt;1、缓冲字节输入流  类名：BufferedInputStream    特点：读（对文件进行读取操作）  父类：FilterInputStream&lt;/p&gt;
&lt;p&gt;2、缓冲字节输出流  类名：&lt;strong&gt;BufferedOutputStream&lt;/strong&gt;  特点：写 （对文件进行写入操作）  父类：FilterOutputStream&lt;/p&gt;
&lt;h4&gt;字符缓冲流&lt;/h4&gt;
&lt;p&gt;1、缓冲字符输入流  类名：BufferedReader    特点：读（对文件进行读取操作）  父类：Reader   （基本输入流多了&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/java/io/BufferedReader.html#readLine()&quot;&gt;readLine&lt;/a&gt;&lt;/strong&gt;()&lt;/code&gt;一次读取一行方法）&lt;/p&gt;
&lt;p&gt;2、缓冲字符输出流  类名：BufferedWriter      特点：写 （对文件进行写入操作）  父类：Writer    （比基本输出流多了&lt;code&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/java/io/BufferedWriter.html#newLine()&quot;&gt;newLine&lt;/a&gt;&lt;/strong&gt;()&lt;/code&gt; 换行方法）&lt;/p&gt;
&lt;h3&gt;转换流&lt;/h3&gt;
&lt;p&gt;1、InputStreamReader     特点：读 （对文件进行读取操作） 输入流    父类：Reader&lt;/p&gt;
&lt;p&gt;2、OutputStreamWriter    特点：写 （对文件进行写入操作） 输出流    父类：Writer&lt;/p&gt;
&lt;h3&gt;打印流&lt;/h3&gt;
&lt;p&gt;1、PrintStream        特点：写 （对文件进行写入操作）     底层：基本字节流&lt;/p&gt;
&lt;p&gt;2、PrintWriter          特点：写 （对文件进行写入操作）     底层：基本字符流&lt;/p&gt;
&lt;h3&gt;基本字节流和基本字符流的区别：&lt;/h3&gt;
&lt;p&gt;1、字节流可以读写任何文件      字符流只能读取普通文件&lt;/p&gt;
&lt;p&gt;2、读写文本文件尽量使用字符流   这要比字节流效率高&lt;/p&gt;
&lt;p&gt;3、读写媒体文件用字节流&lt;/p&gt;
&lt;p&gt;4、基本字节流没有缓冲区&lt;/p&gt;
&lt;p&gt;5、基本字符流有缓冲区  默认大小为8k （不能指定缓冲区大小）&lt;/p&gt;
&lt;p&gt;6、字节流是一个一个字节读  效率比较低  虽然可以读取各种各样的文件但是 最适用于读取媒体文件&lt;/p&gt;
&lt;p&gt;7、字符流是一个一个字符读 效率比较高&lt;/p&gt;
&lt;h3&gt;缓冲流和基本流的区别：&lt;/h3&gt;
&lt;p&gt;1、缓冲流效率要高于基本流&lt;/p&gt;
&lt;p&gt;2、缓冲字符流弥补了基本字符流不能设置缓冲区大小的缺口&lt;/p&gt;
&lt;p&gt;3、缓冲字节流和基本字节流相比   建议使用基本字节流&lt;/p&gt;
&lt;p&gt;4、缓冲字符流和基本字符流相比  建议使用缓冲字符流&lt;/p&gt;
&lt;h3&gt;转换流的作用&lt;/h3&gt;
&lt;p&gt;转换流的作用主要是解决在进行读写操作时出现的中文乱码  （java默认处理文件时是gbk  当将文本文件保存为utf-8的时候 进行读写操作就会出现中文乱码）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
//         用转换流读写
                OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;a.txt&quot;), &quot;utf-8&quot;);
                osw.write(&quot;中国&quot;);
                osw.close();
                
                
                InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;a.txt&quot;),&quot;utf-8&quot;);
                
                char[] cc = new char[10];
                isr.read(cc);
                String ss = new String(cc);
                System.out.println(ss);
                isr.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; API图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/795484/201805/795484-20180513153730653-408224934.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;用法总结：&lt;/h3&gt;
&lt;p&gt;1、多媒体类    用字节流&lt;/p&gt;
&lt;p&gt;读：基本字节输入流&lt;/p&gt;
&lt;p&gt;写：基本字节输出流&lt;/p&gt;
&lt;p&gt;2、文件文件   用字符流&lt;/p&gt;
&lt;p&gt;读：建议用字符缓冲输入流&lt;/p&gt;
&lt;p&gt;写：建议用字符缓冲输出流    如果写的数据多种多样的建议用打印流（PrintStream、PrintWriter）&lt;/p&gt;
&lt;p&gt;3、比较明显意图的数据流&lt;/p&gt;
&lt;p&gt;读写对象只能用对象流（ObjectInputStream、ObjectOutputStream）&lt;/p&gt;
&lt;p&gt;如果在读写文件的过程中遇到中文乱码只能用转换流（InputStreamReader、OutputStreamWriter）&lt;/p&gt;
&lt;h3&gt;简单实例：&lt;/h3&gt;
&lt;p&gt; 复制较小文件代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
//         复制较小文件
//              先读后写   读的时候文件必须存在 不会自动创建  写的时候文件可以不存在会自动创建
                File f = new File(&quot;D:\\practice\\backend\\a.txt&quot;);
                FileInputStream fis = new FileInputStream(f);
                byte[] b = new byte[(int)f.length()]; 
                fis.read(b);
                fis.close();
                
//              写
                FileOutputStream fos = new FileOutputStream(&quot;D:\\practice\\backend\\b.txt&quot;);//不存在会自动创建
                fos.write(b);
                fos.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 复制较大文件代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
//         读取复制大文件
//              一边读一边写
                FileInputStream fis = new FileInputStream(&quot;D:\\practice\\backend\\hello.mp4&quot;);//不存在不会自动创建
                FileOutputStream fos = new FileOutputStream(&quot;D:\\practice\\backend\\h.mp4&quot;);//不存在会自动创建
                byte[] b = new byte[1024*1024];//每次读取1M
                while(true){
                        int len = fis.read(b);
                        System.out.println(len);
                        if(len == -1){
                                break;//当返回值是-1  证明文件已经读取完  终止循环
                        }
                        fos.write(b, 0, len);
                }
                fis.close();
                fos.close();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 利用递归查找某个目录下的视频文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Demo7 {
        public static void findAvi(String pathName){
                File ff = new File(pathName);
                File[] fss = ff.listFiles();
                for (File fa : fss) {
                        if(fa.isFile()){//判断是否是文件
                                if(fa.getName().endsWith(&quot;.mp4&quot;)){//判断是否是视频文件
                                        System.out.println(fa);
                                }
                        }else{
                                findAvi(fa.getPath());
                        }
                }
        }
        public static void main(String[] args) {
//              递归查找某个目录下的视频文件
//              E:\迅雷下载
                String ss = &quot;E:\\迅雷下载&quot;;
                findAvi(ss);//静态方法只能访问静态方法
        }
}
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 13 May 2018 07:45:00 +0000</pubDate>
<dc:creator>nianzhilian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nianzhilian/p/9022366.html</dc:identifier>
</item>
<item>
<title>嵌入Python系列 | 调用Python模块中无参数函数 - 林哥学堂</title>
<link>http://www.cnblogs.com/zhanglin-0/p/9032194.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhanglin-0/p/9032194.html</guid>
<description>&lt;div id=&quot;output_wrapper_id&quot; class=&quot;output_wrapper&quot; readability=&quot;27.829243865799&quot;&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;开发环境&lt;br/&gt;Python版本：3.6.4 (32-bit)&lt;br/&gt;编辑器：Visual Studio Code&lt;br/&gt;C++环境：Visual Studio 2013&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;需求说明&lt;/code&gt;&lt;br/&gt;在用VS2013编写的Win32程序CallPy.exe中，调用Python模块say_hi.py中的prt_hi()函数，从而实现C++中Python的嵌入。&lt;/p&gt;
&lt;h3 id=&quot;h0say_hipy&quot;&gt;&lt;span&gt;0 准备say_hi.py模块&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1119441/201805/1119441-20180513152420008-1873804311.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;h1callpy&quot;&gt;&lt;span&gt;1 设置主程序CallPy环境&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;使用VS2013新建一个名为CallPy的Win32空项目，添加主程序文件CallPy.cpp，再按照下图将Python安装目录下的include和libs两个文件夹的完整路径添加到项目中：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1119441/201805/1119441-20180513152431733-187878294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;然后包含Python头文件，最终的主程序代码如下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1119441/201805/1119441-20180513152439769-203152953.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;code&gt;此时编译一下CallPy，会提示类似下图的无法打开文件“python36_d.lib”的错误&lt;/code&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1119441/201805/1119441-20180513152447113-1777078130.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;这是因为我们当前在Debug下，而Python没有提供Debug版的lib文件，有如下的方法可以解决这一问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;第1种方法&lt;/code&gt;将Python安装目录下libs中python36.lib复制一份,并将副本改名为python36_d.lib&lt;/li&gt;
&lt;li&gt;&lt;code&gt;第2种方法&lt;/code&gt;修改Python安装目录下include中的pyconfig.h文件，搜索一下“python36_d.lib”，并将其改为“python36.lib”，让python都使用非Debug版的lib&lt;/li&gt;
&lt;li&gt;&lt;code&gt;第3种方法&lt;/code&gt;自行编译Python源代码生成python36_d.dll&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h2&quot;&gt;&lt;span&gt;2 开始嵌入&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Step 1&lt;/code&gt;初始化Python解释器进行&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1119441/201805/1119441-20180513152456088-469845938.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;code&gt;Step 2&lt;/code&gt;导入say_hi.py模块&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1119441/201805/1119441-20180513152503103-88664355.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;调试时发现pModule依然为NULL，因为在搜索路径中找不到say_hi模块，有两种解决方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;第1种方法&lt;/code&gt;将say_hi.py放到与CallPy.exe相同的目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;第2种方法&lt;/code&gt;使用PyRun_SimpleString等方法将say_hi.py所在的路径加到搜索路径中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Step 3&lt;/code&gt;获取需要调用的函数prt_hi()&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1119441/201805/1119441-20180513152511257-309287468.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;code&gt;Step 4&lt;/code&gt;调用prt_hi()&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1119441/201805/1119441-20180513152523683-1870748116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;调用后运行效果&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1119441/201805/1119441-20180513152531228-567136692.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;code&gt;修改say_hi模块中prt_hi函数的实现，而不用重新编译CallPy.exe程序，即可得到不同的输出结果。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;code&gt;Step 5&lt;/code&gt;善后清理工作&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1119441/201805/1119441-20180513152539485-809609504.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;h3&quot;&gt;&lt;span&gt;3 一些注意事项&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;Python模块的名称不能为test&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;注意Python模块的存放位置&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;导入模块时不能加后缀.py&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;需要自行解决缺python36_d.lib的问题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;使用一致平台，如都使用32位&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;源代码链接：&lt;a href=&quot;https://pan.baidu.com/s/1RFRL4M0jB6R7LSXh45DQDQ&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://pan.baidu.com/s/1RFRL4M0jB6R7LSXh45DQDQ&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;密码：mffw&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 13 May 2018 07:34:00 +0000</pubDate>
<dc:creator>林哥学堂</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhanglin-0/p/9032194.html</dc:identifier>
</item>
<item>
<title>月光下的凤尾竹—彩云之南西双版纳游记 - Edison Chou</title>
<link>http://www.cnblogs.com/edisonchou/p/9030452.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edisonchou/p/9030452.html</guid>
<description>&lt;p&gt;　　今天距离汶川大地震已整整10年，依然记得10年之前，我刚下完课走回寝室的路上，一瞬间脚下的地面开始震动，骚动的叫声此起彼伏。地震，就这么毫无征兆地来了，距离我那么近。幸运的是，我没有受伤。不幸的是，汶川的人民们受伤了，他们失去了家园，也失去了部分亲人。2008年512大地震，总计造成约45万人伤亡，近2万人失踪，是建国以来破坏力最大的地震，也是唐山大地震后伤亡最严重的一次地震。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512225504414-1663688215.jpg&quot; alt=&quot;&quot; width=&quot;553&quot; height=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　10年已经过去，现在的汶川也已经在废墟中发展起来，曾经的废墟之上，城乡面貌发生巨变，百姓安居乐业，处处欣欣向荣。在此，还是希望逝者安息，也向坚强和重生致敬！&lt;/p&gt;

&lt;p&gt;　　首先，说下为什么要去长途旅行？受钱钟书先生的《围城》小说影响，一直也相信“&lt;span class=&quot;ask-title&quot;&gt;&lt;strong&gt;&lt;em&gt;如果两个人经过旅行之后还能够相处并互不讨厌的话，那才可以结婚&lt;/em&gt;&lt;/strong&gt;”。因为&lt;/span&gt;旅行最试验得出一个人的品性，旅行是最劳顿最麻烦，叫人本毕现的时候。我知道我和妹子都存在一些或多或少的问题，希望可以通过长途旅行去发现，并在以后的相处中去解决，这才可以考虑是否会进行后续的打算，比如结婚。&lt;/p&gt;
&lt;p&gt;　　其次，最开始打算去的地方是泰国的岛屿（普及/苏梅等），但是因为如下原因改变为西双版纳。&lt;/p&gt;
&lt;p&gt;　　Reason 1 : 妹子没有及时办好护照&lt;/p&gt;
&lt;p&gt;　　好吧，我承认这个是一个原因。&lt;/p&gt;
&lt;p&gt;　　Reason 2 : 妹子的年假不好更改，更改需要找其他同事更换&lt;/p&gt;
&lt;p&gt;　　Reason 3 : 我提议去云南作为折中，妹子就提议西双版纳，所以就去了 =&amp;gt; &lt;span&gt;&lt;strong&gt;这是最主要的Reason&lt;/strong&gt;&lt;/span&gt;！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512230126784-1821950095.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3.1 地理位置&lt;/h2&gt;
&lt;p&gt;　　西双版纳傣族自治州，位于中华人民共和国云南省西南端，是云南省下辖的一个自治州。“西双”是傣语“12”的意思，“版纳”是指比县小一些的行政区域，“西双版纳”意为“十二个行政区”。西双版纳，古代傣语为“&lt;em&gt;&lt;strong&gt;勐巴拉那西&lt;/strong&gt;&lt;/em&gt;”，意思是“理想而神奇的乐土”，这里以神奇的热带雨林自然景观和少数民族风情而闻名于世，是中国的热点旅游城市之一。此外，它还临近老挝，缅甸，泰国和越南。当地人常常笑说：版纳出国容易（2-4个小时就可出国，如果在边境，更快），出省难（去一趟昆明要8个小时以上，更别说来四川了）。&lt;/p&gt;
&lt;h2&gt;3.2 气候&lt;/h2&gt;
&lt;p&gt;　　西双版纳地区属于&lt;strong&gt;&lt;em&gt;热带雨林气候&lt;/em&gt;&lt;/strong&gt;，夏无酷暑，冬无严寒，四季温暖宜人。西双版纳的气候只有干湿之分，每年11月-次年4月为干季，雨季在每年5-10月间。年平均气温21℃，这里从来不下雪，即使在1月份，白天气温也很高，一件毛衣足可过冬。=&amp;gt;亲测，5月份温度可达38度，热热热，重要的事情说三遍！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512231004362-118800840.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.3 民族&lt;/h2&gt;
&lt;p&gt;　　西双版纳一共有6个民族：傣族（占绝大多数，其中4月12日的泼水节是傣族最重大的节日，如果你是打算上半年去版纳旅游，那么绝逼建议泼水节去玩3天，绝对值得，可惜我们去的时候是五月，泼水节结束了）、哈尼族（据说跟傣族还打过仗的，没多少了解，我们的导游是哈尼族人）、拉祜族、布朗族、基诺族（第56个民族，总共就2万多人，全在版纳）和瑶族（不太了解）。&lt;/p&gt;

&lt;h2&gt;4.1 携程的自营半自助游&lt;/h2&gt;
&lt;p&gt;　　我不是个喜欢做攻略的自由行爱好者，所以为了方便，直接上了携程看跟团游，考虑到旅游质量，选择了携程自营的半自助小团游，贵是贵了点，但是白纸黑字合同写明（无购物，纯玩，小团小车）有保障。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512232952707-2031846717.jpg&quot; alt=&quot;&quot; width=&quot;307&quot; height=&quot;188&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.2 Day 1 - 成都到版纳&lt;/h2&gt;
&lt;p&gt;　　第一天上午和妹子到双流机场做灰机直飞版纳，不得不说，直飞的航班只有祥鹏航空，这个航空公司的灰机真的是很“经济”，对了，行李箱托运超过10斤要自己贴哟，少带点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512232305514-1772034146.jpg&quot; alt=&quot;&quot; width=&quot;220&quot; height=&quot;220&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　飞到版纳之后，才知道版纳的这个（国际）机场又叫做嘎洒机场，主要因为其位于西双版纳州府景洪市西南部嘎洒镇，从而得名。版纳的这个机场也修的十分的本土风情化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512232656736-1512849033.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;413&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　刚下灰机，携程接机已经到了很久了，于是乎坐上小巴直奔酒店。机场距离市区也就4-5公里，版纳的道路还是比较宽敞的，三到四车道，每个车道的路口都有指示灯（提示你是该前行还是转弯，在成都只有一个绿灯和左转灯）。听司机师傅说，版纳景洪市区，几乎每个路口都有摄像头，违规查的还是挺严格的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512233326552-91094960.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我选择的是位于告庄西双景的一个吾之别苑客栈，主要考虑到其位于告庄里边，吃饭购物夜生活都比较丰富且方便，而且价格相对其他供选择的酒店便宜一些。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513090422348-1070558974.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;388&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　说到告庄，不得不说这是版纳的一个重点游客聚集地，里边大多数都是各种酒店和客栈，以及吃饭的店。由于靠近澜沧江，因此造就了西双版纳的几大夜市之一的湄公河星光夜市，每天晚上8点到凌晨，澜沧江边灯火通明，各种摆摊的，各种烧烤，各种菠萝饭，各种非洲手鼓，应有尽有，也算是养育了一方人（虽然这里摆摊的很多人都不是版纳土著，大多都是河南和东北那嘎达的银）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512234508594-1090531819.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　位于告庄里边的大金塔也是告庄的一大代表性建筑之一：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512234739346-637646579.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.2 Day 2 - 中科院热带植物园 + 野象谷 + 湄公河星光夜市&lt;/h2&gt;
&lt;p&gt;　　早上8点40，坐上小车，我们的导游优甲（哈尼族人，在携程上评分较高）就开始给我们介绍这两天的行程。由于这天没有其他家庭一起（其他家庭在当天中午猜到版纳），所以享受了一把私家团的待遇。上午去的是热带植物园，这是一个必去的地方，原因在于只有去了这里你才知道神马是热带雨林！高大威猛的树，随处可见的各式各样的花，是一种可以真正近距离接触自然的地方，而且植物园里有大概13000多种种类的植物，属国内种量第一。这里还是中科院的科研基地，供游客观赏的主要在西区，东区主要是中科院科研基地。不得不说，这个植物园的面积是&lt;strong&gt;真tmd大&lt;/strong&gt;啊，不坐电瓶车1天都走不完，当然电瓶车车费也是蛮贵的，50元一人。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512235907545-2002124362.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大门口&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180512235935786-1081133863.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;　　&lt;/p&gt;
&lt;p&gt;据说是每个游客过来必拍的标志性景点，从这可以一窥热带雨林的风貌&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513000233676-918486265.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513000319551-698254665.jpg&quot; alt=&quot;&quot; width=&quot;365&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513000400606-2018952278.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;铁树王这片区域，有很多常委级的领导人过来种植的数目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513000438326-962787192.jpg&quot; alt=&quot;&quot; width=&quot;315&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（全程我没有什么照片，主要是给妹子当&lt;strong&gt;&lt;span&gt;专职摄影师&lt;/span&gt;&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;　　中午在一家本地人的饭馆里（没有菜谱没有价格，直接去厨房点菜，有啥菜点啥）吃了一顿饭（两菜一汤，均价20，总耗费60），期间老板不定期来推荐它的罗汉果。饭后就马不停蹄的开往野象谷，野象谷位于西双版纳国家级自然保护区勐养子保护区，离市区大概30-40公里，可以走高速，是中国首家以动物保护和环境保护为主题的国家公园。据统计，目前，西双版纳是亚洲象在中国&lt;em&gt;&lt;strong&gt;唯一的栖息地&lt;/strong&gt;&lt;/em&gt;。不过，导游说在野象谷看到野象的几率不高，&lt;strong&gt;可遇不可求&lt;/strong&gt;，所以你不一定到了野象谷就能看到野象。我们去的时候，也毫无疑问的没有看到，但看到两三天前它们经过的脚印。&lt;/p&gt;
&lt;p&gt;　　进入野象谷，首先会去蝴蝶园，那里满屋的蝴蝶飞舞，适合拍抖音短视频~~~所以，这里我么有拍照。&lt;/p&gt;
&lt;p&gt;　　其次会去大象学校，野象谷有有我国第一所驯象学校，游人大多在此观看大象表演节目（什么大象排队、大象踢足球、大象与友人的互动等等等）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513002223919-1162785047.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513002306571-896747583.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后我们又去了百鸟园，观看各种鸟类的表演，此处也比较适合拍抖音视频。这里最激动的就是，只要你把手张开放到头顶右侧，鸟儿就会飞到你手上来站立（虽然都是被训练过的，这样好让摄影师给你拍照，然后20元一张卖给你），那种感觉就像你有一只座山雕的feeling。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513002608840-1189204656.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最后呢，就是乘坐观光索道，大概要做30多分钟，到山的另一头，那边就是野象经常活动的地方了，有游览步行道、专供游人观看野象活动的的高架走廊、大树旅馆、森林酒吧。由于木有看到野象，也就没有怎么拍照。这里，我从网上照了一张，给你们解解渴。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513003121698-2123877874.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　逛完野象谷，回到酒店，就已经快6点了。由于靠近夜市，于是乎就打算去逛逛夜市。在夜市可以吃的特色小吃很多，比如傣家烧烤、菠萝紫米饭、老挝自助小火锅（58元一人）、香茅草烤鱼等等，都值得一尝。吃完饭，我就和妹子朝着澜沧江边去了。虽然版纳的时区和内陆保持一致，但实际上和邻国趋近，夜市从9点开始人才变多。说到澜沧江，大家或许有印象，这里不得不说一下湄公河（也许你看过湄公河行动，对，没错，就是这个湄公河）。澜沧江是&lt;em&gt;&lt;strong&gt;湄公河上游在中国境内河段的名称&lt;/strong&gt;&lt;/em&gt;，藏语拉楚，意思为“獐子河”。它也是中国西南地区的大河之一，是世界第七长河，亚洲第三长河，东南亚第一长河。所以，澜沧江就是湄公河，但是湄公河不一定是指澜沧江（只有中国境内的才叫澜沧江）。在版纳的勐腊县出境后就成为老挝和缅甸的界河，后始称湄公河。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513085357332-2078634139.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;澜沧江畔，当地人和游客饭后喜欢到这里散步，走在水中，好不惬意&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513085521563-902622056.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;夜幕降临下的澜沧江畔，远处就是西双版纳大桥，可以看人妖表演的轮船正缓缓而来&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513085815202-839797892.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;围绕着大金塔的外围，各种小摊，吃喝玩乐应有尽有&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513090001405-544833253.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;坐在大金塔背后的阶梯上，望着繁华的也是，然后静静地听一个小伙子弹吉他唱着《后来》也是个不错的享受&lt;/p&gt;
&lt;h2&gt;4.3 Day 3 - 勐泐大佛寺 + 傣族民居 + 基诺山寨 + 湄公河之夜篝火晚会&lt;/h2&gt;
&lt;p&gt;　　这天由于有了新的两个家庭的加入，我们成了三个家庭的小团游。上午去的是位于景洪市区的大佛寺，它是在古代傣王朝的皇家寺院“景飘佛寺”的原址上恢复重建的，“景飘佛寺”是傣族历史上一位名叫拨龙的傣王为纪念病故的王妃南纱维扁而修建（可见傣王对王妃的思念）。王妃一生信奉佛法，所以每逢节日傣王就亲临寺院，举行大型法会，以纪念爱妃同时弘扬佛法。同时，大佛寺也是南传佛教象征十二版纳的标志性建筑之一，是版纳佛教活动的重要场所。说到佛教，一共有3大分支，分别是：北传佛教，南传佛教以及藏传佛教。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;北传佛教：即汉传佛教，演变到后来唐僧取经归来的大乘佛教，主要传播地域就是中国，朝鲜半岛以及日本。&lt;/li&gt;
&lt;li&gt;藏传佛教：主要流传于中国西藏地区、尼泊尔、巴基斯坦，北印度等地域。&lt;/li&gt;
&lt;li&gt;南传佛教：即小乘佛教，信仰简单感性虔诚，主要分布于中国西双版纳以及东南亚各个佛国。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513091506358-1194030362.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　勐泐大佛寺门口&lt;/p&gt;
&lt;p&gt;　　这里再说一下勐泐和勐在版纳的应用：勐泐直译为汉语是“泐国”，因王都在澜沧江畔的“景陇”，被中国史籍翻译为“景陇国”或“景陇金殿国”；是傣族先民在澜沧江/湄公河中游地区建立的联盟国家。理解了勐泐就好理解为什么在版纳一些地方会以勐泐作为名字的开头，比如勐泐大佛寺，它们都是带有皇宫性质的。而很多地方只有锰，它们则不代表皇宫性质，更多的只是一些城镇，比如勐海镇。&lt;/p&gt;
&lt;p&gt;　　版纳本土人民大多信封佛教，男孩则会在6,7岁时被送到佛寺里面吃斋念佛进行一些学习，3-5年后可以自愿选择是否还俗。不还俗的话也可以，云南十八怪里有一句：“云南十八怪，小和尚也能谈恋爱”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513092209010-414967033.jpg&quot; alt=&quot;&quot; width=&quot;343&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;温馨提示&lt;/strong&gt;：&lt;span&gt;&lt;strong&gt;&lt;em&gt;大佛背后和寺庙里面都不能拍照哦，而且进入寺庙内得脱掉鞋子，如果碰到外国人在寺庙内拍照，请一定虔诚地跟他们说&quot;No photoes here!&quot;&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　此外，大佛寺一共1500个台阶，所以建议购买单程的电瓶车到山顶，再一边看风景一边下台阶，山顶可以看到整个景洪市的全貌，景色也是灰常的不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513092532168-2082512203.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　下台阶的两侧都有很多拿着化缘钵的僧侣&lt;/p&gt;
&lt;p&gt;　　大佛寺除了传统的佛教寺庙，还有一个孔雀园，有孔雀放飞的表演，大概会有好几十只孔雀从山顶飞翔下来到你眼前，并且开屏给你看。这里我拍了一段视频，但还没有上传。这里你可以选择去近距离喂食孔雀，当然你得花上10元钱买一包所谓的食物，虽然它们也不怎么愿意搭理你。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513093100761-1249955492.jpg&quot; alt=&quot;&quot; width=&quot;343&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;傲娇的孔雀不给我甩一个正面&lt;/p&gt;
&lt;p&gt;　　逛完大佛寺，还未到12点，我们便去了傣族民居，看看真正的傣族居民的生活。一个傣族的文化代表（它们那儿学习过汉语的妹子很多都是它们村里的文化代表，负责接待游客参观它们的家庭并介绍傣族的民俗风情）带着我们逛了一下它们村并参观她家。这里需要注意的是，傣族人的楼房一般都是两层楼，二楼一般是客厅和卧室在一起，要进去首先得脱鞋，并不要随便进入人家的卧室，这是要忌讳的地方。且傣族民居一般都没有很高的围墙，在佛教文化的洗礼下，人人都是虔诚而且简单的，而且傣族人一般没有姓氏，男的都姓岩(念“癌”音)，女的都姓玉，所以到了那里，见到男的都可以叫“小岩”，女的都可以叫“小玉”，所以不存在什么“传宗接代”的观念，没有属相（女的属孔雀，男的属大象），没有身份证，只有边民证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513094510601-1332263117.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　傣族是一个重女轻男的民族，认为生男孩是赔钱货，而且男孩会嫁入女方家庭，并在结婚前会给女方家里做3年苦力（比如上山砍柴火，割橡胶，种田，银矿采银等等），并在第3年凑够足够的嫁妆（比如送给女方家500颗橡胶）。因此，小玉说傣族人的离婚率很低，因为这三年真的是不好熬啊！傣族女人的嫁妆都是独一无二的，因为都是由自己心爱的人亲手打造的。首先男人得去挖银矿，自己提炼加工，光990高度纯银就需要提炼20次之多，平时在我们在外面商场卖的只是925的纯度，云南的的特产就包括了990的高度纯银。由此可以看出，在傣族做男人，真的是辛苦，不过可见傣族男子对自己心爱的人的付出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513094257104-1886749390.jpg&quot; alt=&quot;&quot; width=&quot;434&quot; height=&quot;245&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　此外，傣族人一般叫帅哥和美女为“猫哆哩”和“骚哆哩”，如果你看到傣族妹子，请一定叫她“骚哆哩”而不是“美女”，如果你叫“美女”，她会不理你的，因为一般年长的傣族女人才会叫“美女”，而且大多年长的傣族女人都不会汉语，也听不懂你说的话。&lt;/p&gt;
&lt;p&gt;　　中午在告庄吃饭，下午便去了基诺山寨。基诺族是一个单一民族，是排序第56的56个民族之一，也只聚居在西双版纳，因此参观其山寨也是西双版纳的旅游路线之一。“基诺”是本民族的自称，可释意为“舅舅的后人”或 “尊重舅舅的民族”。过去汉语译为“攸乐”，故又习称其居住的基诺山为“攸乐山”。说到基诺，不得不说其舅舅文化。当地人传说，在远古的时代，洪水淹没大地，只有一对善良勇敢的同胞兄妹玛黑、玛纽受仙人保护和指点，幸免于难， 经过各种艰难波折，最终结为夫妻。此外，基诺族出嫁的女子如果没有舅舅，需要找棵榕树或者蚂蚁堆认作舅舅才可以结婚。&lt;/p&gt;
&lt;p&gt;　　到了基诺山寨，会有一个当地的基诺族美女讲解员带领你游览整个基诺山寨。走进基诺山寨大门，只见书上挂着牛头，讲解员说每个牛头代表一个成年男子，而女子的成年礼则一定要煮茶织布，男女成年礼是一个重大的人生转折，同时也意味着可以自由恋爱了。参加“成年礼”是基诺族人生的一个重大转折点，从此，他们便成为村庄的一名正式成员，要承担起社会的各种义务。他们要参加青年男女相互结交的社会组织，即“统考”和“米考”。男青年要巡逻放哨，维护村舍法规和寨子治安，调解纠纷，对违法的人进行教育和惩罚，同时他们可以享受村舍成员的一切权利，取得了谈恋爱的资格。关于成年礼，在基诺的表演中会有这样的一个节目，带你领略基诺的成年礼，很有值得一看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513095814948-304406042.jpg&quot; alt=&quot;&quot; width=&quot;343&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;各种牛头所在的基诺山寨入口处，看到舅舅了吗？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513100055644-1832961782.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;基诺族各年龄段各角色的着装展示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513100201731-987522542.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;基诺族的非物质文化遗产-大鼓舞，十分震撼！&lt;/p&gt;
&lt;p&gt;　　此外，基诺山寨还有很多特色的风俗表演，例如捕猎等，还可以一边品尝基诺族的特色风味小吃一边观看。&lt;/p&gt;
&lt;p&gt;　　参观完基诺山寨，我们便去了曼听公园，那里有很多人推荐的湄公河之夜篝火晚会，很多人称之为去版纳不得不看的晚会。这个晚会的门票包含了自助晚餐和晚会以及防水灯的几个环节。自助晚餐的菜品一般，晚会的质量的确是很高，各个民族的风情舞蹈（舞台效果也很不错），还有贱贱的主持人现场飙车，以及令人泼妇大笑的互动环节（体验追求傣族姑娘），总之的确是值得一看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513101225456-1609893930.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513101339998-889951107.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513101422809-1022385544.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;放水灯祈福是傣族人的风俗&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513101508199-964126056.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后在周总理纪念碑前面的篝火周围大家跟着起舞&lt;/p&gt;
&lt;p&gt;　　曼听公园除了夜间的篝火晚会，白天也有一些可以看的，不过我们没有选择再去。&lt;/p&gt;
&lt;h2&gt;4.4 Day 4 - 花卉园 + 购物&lt;/h2&gt;
&lt;p&gt;　　这一天是自由行，前面几天的玩耍也比较累了，这一天选择了睡到自然醒（虽然也是八点多就起来了）。逛到一家达州老乡开的重庆面馆，就当早饭吃了。这个老乡从达州老车坝去了重庆定居，然后去年又来了版纳开面馆，生意不错，特别是晚间夜宵吃面的人很多。不过，我还是喜欢达州口味的牛肉面，重庆风味也还好，不过还是喜欢家乡味。&lt;/p&gt;
&lt;p&gt;　　本来这一天可以选择去中缅边境或者望天树，但是都要做好几个小时的车（单程），就没有去，就在市区里逛了逛。看到市区还有一个热带花卉园，就跟刘大姐一起逛了逛。由于花卉园跟植物园的功能有点重叠，且花卉园相比植物园小很多，故游客人数也相对少了很多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513133920898-201900766.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;花卉园的主入口的水池&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513134027804-1504234720.jpg&quot; alt=&quot;&quot; width=&quot;345&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;傣族人的独门活-割橡胶&lt;/p&gt;
&lt;p&gt;　　这里说说割橡胶，橡胶可以说是和傣族人民的历史文化紧紧地结合在了一起，因为它的种植打破了原初傣族人民一贯自给自足的以水稻种植为主的生产方式，橡胶的用处很多，比如交通运输业（轮胎，气垫等），又如工业（胶带，胶管等）。天然橡胶具有人工橡胶无可比拟的弹性，天然橡胶的价格也比较贵。总之，它是傣族人民的经济来源之一，以前几乎每家都有胶林，但是近年来版纳认识到种植橡胶虽然可以带来利益，但是是以牺牲子孙后代的自然环境为基础的（橡胶大规模种植对土壤环境的破坏毋庸置疑，影响土壤的酸碱，水资源流失大），因此颁布了一些相关的禁止大规模种植橡胶的政策。在花卉园，可以看到一些橡胶被割的情景，而且傣族人民割胶一般都是在清晨（次日的三四点左右），因为清晨是一天中温度最低和湿度最大的时间，同时，橡胶树经过一夜休息，体内水分饱满，树叶的蒸腾水分也最少，所以这时候割胶最好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513135415720-2014292990.jpg&quot; alt=&quot;&quot; width=&quot;574&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;宽敞明亮的花卉园道路&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513135546151-2049739597.jpg&quot; alt=&quot;&quot; width=&quot;345&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;望着远方，你有诗吗？&lt;/p&gt;
&lt;p&gt;　　整个花卉园并不大，不一会就逛完了，于是就回告庄午饭，然后回酒店午休了。在版纳，由于天气炎热，这里的人民工作时间也不会太久，午休是必须要的。因此，开上房间的空调，好好休息一个小时真的是种享受。下午去购物，可以给亲人和朋友带的东西大概有云南十八怪（例如水果干等）、普洱茶（云南普洱茶）、鲜花饼（这个不用介绍了，重点是在云南买）。我给朋友买了云南十八怪，给CAS2.0的同事买了鲜花饼，只怪箱子笑了，不然可以带更多回来。&lt;/p&gt;
&lt;p&gt;　　另外，说说我在夜市上看到的非洲手鼓show，之前在抖音上看到丽江的美女鼓手夏微的手鼓翻唱《小宝贝》，觉得手鼓应该比较好学且动感。在版纳的夜市里是很常见的，有很多鼓手在那里拍着手鼓，唱着《小宝贝》或《一瞬间》，还有一些小孩也在玩。自己看着看着手也跟着节拍打了起来，于是对其念念不忘，想着空了的时候也上网淘一个来玩。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513140426151-103071639.jpg&quot; alt=&quot;&quot; width=&quot;569&quot; height=&quot;397&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.5 Day 5 - 版纳回成都&lt;/h2&gt;
&lt;p&gt;　　自然醒，整理衣物，中午送机的就送我们去机场了，下午1点50的飞机直飞成都双流机场，就这样结束五日四晚的行程，整个人也已被晒黑了一圈。值得提醒的是，去西双版纳，一定得带好防晒用品（防晒霜，藿香正气液以及雨伞）。&lt;/p&gt;

&lt;h2&gt;5.1 “美丽的西双版啊，留不住我的爸爸”&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513141441351-24199045.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　相信很多跟我一样是80后的骚年们，一定在小时候都听过这首歌词“美丽的西双版纳，留不住我的爸爸”，我问刘大姐听过没，她说没有，看来我们真不是一个时代的，哭。这首歌我记得是小时候我爸看的一个电视剧《孽债》的主题曲，我就只记住了这样一句，来了版纳之后，跟导游和司机聊起这首歌以及这部电视剧，重新温故了一下这个电视剧的背景：那个时代几十万知青响应号召奔赴云南边疆，在边疆挥洒汗水贡献自己的力量，也和版纳本地人留下了青春结晶-孩子。十年一梦，大返城的浪潮又把他们卷回了城市。当这些没有爸爸的孩子渐渐长大，懂事了，有的隐隐约约知道了自己的生身秘密，于是他们中的一些胆大的便瞒着养父母偷偷踏上了去上海的列车，去找他们的爸爸，但是当他们找到了，却发现自己的爸爸也已经有了新的家庭......&lt;/p&gt;
&lt;h2&gt;5.2 玉观音&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513141635585-2134927610.jpg&quot; alt=&quot;&quot; width=&quot;305&quot; height=&quot;458&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　记得是在快10年前跟我爸妈一起看的《玉观音》，当时已经是当红明星的佟大为、孙俪、何润东、海清等在《玉观音》里却还是一副很稚嫩的样子，但不得不说演技和原著都是经典。该剧讲述了缉毒女警察安心如何从一个单纯普通的女孩子最终成长为一名打入贩毒集团内部的坚强战士的故事。孙俪对于安心这个人物的刻画，是演绎的十分真实可信的，而佟大为扮演的杨瑞，开始让人感到有些稚嫩，但随着这个角色从玩世不恭的大男孩转变为感情执著成熟的男人。剧中所描述的广屏实就是写的西双版纳，并且在西双版纳取景拍摄的，也适合西双版纳有很大联系的一部电视剧了。&lt;/p&gt;

&lt;p&gt;　　去一个地方旅游，不仅要看风景，也要了解当地的文化，特别是像西双版纳这种地方，更需要了解其多民族的文化和历史。读万卷书，行万里路，这是我跟刘大姐的第一次长途旅行，希望明年我们可以去另一个不同的地方。我们常说：“曾梦想仗剑走天涯，后来工作忙没去”，工作只是生活的一部分，生活不在别处，而是在此处。对我来说，代码如诗，写一个遵循规范和设计原则的代码就是我的骄傲，那么，诗已经有了，让我们一起去远方吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/381412/201805/381412-20180513142542851-1480622905.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div id=&quot;Copyright&quot; readability=&quot;8.2242990654206&quot;&gt;
&lt;p&gt;&lt;span&gt;作者：&lt;a title=&quot;author&quot; href=&quot;http://www.edisonchou.cn&quot; target=&quot;_blank&quot;&gt;周旭龙&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;出处：&lt;a title=&quot;from&quot; href=&quot;http://edisonchou.cnblogs.com&quot; target=&quot;_blank&quot;&gt;http://edisonchou.cnblogs.com&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 13 May 2018 06:31:00 +0000</pubDate>
<dc:creator>Edison Chou</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edisonchou/p/9030452.html</dc:identifier>
</item>
<item>
<title>汽车之家店铺商品详情数据抓取 DotnetSpider实战[二] - FunnyBoy</title>
<link>http://www.cnblogs.com/FunnyBoy/p/9029937.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/FunnyBoy/p/9029937.html</guid>
<description>&lt;p&gt;自从上一篇文章发布到现在，大约差不多有3个月的样子，其实一直想把这个实战入门系列的教程写完，一个是为了支持DotnetSpider，二个是为了.Net 社区发展献出一份绵薄之力，这个开源项目作者一直都在更新，相对来说还是很不错的，上次教程的版本还是2.4.4，今天浏览了一下这个项目，最近一次更新是在3天前，已经更新到了2.5.0，而且项目star也已经超过1000了，还是挺受大家所喜爱的，也在这感谢作者们不断的努力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/695198/201805/695198-20180512130957386-128926226.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之所以中间这么长一段时间没有好好写文章，是因为笔者为参加3月份PMP考试备考了，然后考完差不多就到4月份，到了4月份，项目催的急，所以一直拖到了现在才有一点空余时间，希望我的文章完成之后，会对大家有一定的帮助。&lt;/p&gt;

&lt;p&gt; 刚刚提到DotnetSpider升级到了2.5.0，所以我们更新一下库，使用最新的版本，技术要与时俱进嘛，将下图中两个类库添加进去就行了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/695198/201805/695198-20180512132205223-571796855.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3.1分析商品详情页数据&lt;/h2&gt;
&lt;p&gt; ①上次我们发现，当点击参数配置的时候，页面会发送两个ajax请求，分别去获取车型的基本参数，和配置参数，返回的数据是JSON格式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/695198/201805/695198-20180513132355895-694506602.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt; ②通过Chrome的Network抓包可以发现，这两个请求有一个共同点，提交的参数都有data[specid]:28762，我猜测这应该是skuid，大家可以试着在浏览器直接打开这两个地址，直接就可以返回出车型的相关信息，所以问题的关键就是要解决如何获取skuid的问题，获取到了这些车型的数据那不就是手到擒来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/695198/201805/695198-20180513131822343-94572674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.2如何获取商品的sku&lt;/h2&gt;
&lt;p&gt;其实这个确实是让我很苦恼的一个问题，因为我们打开页面的时候页面的链接中并未包含skuid，[https://mall.autohome.com.cn/detail/284641-0-0.html]，所以从URL中获取是不太现实的了，所以我用Element去页面中搜索这个skuid的值，结果发现两个地方有这个值，一个存在于HTML元素中，一个是存在js全局变量中，相比较而言，我认为HTML元素中的相对来说会比较好处理一点，直接获取元素的属性就行了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/695198/201805/695198-20180513132937138-2140622450.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/695198/201805/695198-20180513133135062-1906879464.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;4.1准备Processor&lt;/h2&gt;
&lt;p&gt;这次为什么要单独的写一段准备Processor呢，因为此次准备了三个Processor，分别用来处理3个数据，第一个用于获取skuid，第二个用于获取车型基本参数，第三个用于获取车型配置,细心的小伙伴们肯定会发现，这次我们每个Processor都使用了构造函数，里面可以清晰的看到有我们熟悉的正则表达式(PS正则表达式写的很烂，自己有更好的正则写法可以回复在评论里面，让我膜拜一下，嘻嘻)，肯定会有人问为什么要这么写呢？&lt;/p&gt;
&lt;p&gt;相比上次的教程，这次的抓取流程更为的复杂了，上次我们只是抓了一个列表页，一个接口完全可以搞定，此次我们的流程变成了，第一步，我们需要获取车型详情页的页面，从页面中找到skuid，第二部，将获取的skuid拼接好request放入爬虫的请求集合中，通过新构造的请求去获取数据，那么我们怎么知道哪个请求用哪个Processor进行处理呢，DotnetSpider提供了对url进行校验的进行判断，使用哪个Processor对数据进行处理。 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; GetSkuProcessor : BasePageProcessor &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取skuid&lt;/span&gt;
&lt;span&gt;        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; GetSkuProcessor()
            {
                TargetUrlsExtractor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; RegionAndPatternTargetUrlsExtractor(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;^https://mall\.autohome\.com\.cn/detail/*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Handle(Page page)
            {
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; skuid = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
                skuid &lt;/span&gt;= page.Selectable.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//a[@class='carbox-compare_detail']/@link&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).GetValue();
                page.AddResultItem(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;skuid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, skuid);
                page.AddTargetRequest(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;https://mall.autohome.com.cn/http/data.html?data[_host]=//car.api.autohome.com.cn/v1/carprice/spec_paramsinglebyspecid.ashx&amp;amp;data[_appid]=mall&amp;amp;data[specid]=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; skuid);
                page.AddTargetRequest(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;https://mall.autohome.com.cn/http/data.html?data[_host]=//car.api.autohome.com.cn/v2/carprice/Config_GetListBySpecId.ashx&amp;amp;data[_appid]=mall&amp;amp;data[specid]=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; skuid);
            }

        }
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; GetBasicInfoProcessor : BasePageProcessor &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取车型基本参数&lt;/span&gt;
&lt;span&gt;        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; GetBasicInfoProcessor()
            {
                TargetUrlsExtractor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; RegionAndPatternTargetUrlsExtractor(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;^https://mall\.autohome\.com\.cn/http/data\.html\?data\[_host\]=//car\.api\.autohome\.com\.cn/v1/carprice/spec_paramsinglebyspecid\.ashx*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Handle(Page page)
            {
                page.AddResultItem(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BaseInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, page.Content);
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; GetExtInfoProcessor : BasePageProcessor &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取车型配置&lt;/span&gt;
&lt;span&gt;        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; GetExtInfoProcessor()
            {
                TargetUrlsExtractor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; RegionAndPatternTargetUrlsExtractor(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;^https://mall\.autohome\.com\.cn\/http\/data\.html\?data\[_host\]=//car\.api\.autohome\.com\.cn/v2/carprice/Config_GetListBySpecId\.ashx*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Handle(Page page)
            {
                page.AddResultItem(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExtInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, page.Content);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.2、创建Pipeline&lt;/h2&gt;
&lt;p&gt; Pipeline基本上变化不大，稍微改造了一下，so easy。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; PrintSkuPipe : BasePipeline
        {

            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Process(IEnumerable&amp;lt;ResultItems&amp;gt;&lt;span&gt; resultItems, ISpider spider)
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; resultItem &lt;span&gt;in&lt;/span&gt;&lt;span&gt; resultItems)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (resultItem.GetResultItem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;skuid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        Console.WriteLine(resultItem.Results[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;skuid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &lt;span&gt;as&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (resultItem.GetResultItem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BaseInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; t = JsonConvert.DeserializeObject&amp;lt;AutoCarParam&amp;gt;(resultItem.Results[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BaseInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.WriteLine(resultItem.Results[&quot;BaseInfo&quot;]);&lt;/span&gt;
&lt;span&gt;                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (resultItem.GetResultItem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExtInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; t = JsonConvert.DeserializeObject&amp;lt;AutoCarConfig&amp;gt;(resultItem.Results[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ExtInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Console.WriteLine(resultItem.Results[&quot;ExtInfo&quot;]);&lt;/span&gt;
&lt;span&gt;                    }

                }
                
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新增两个实体类AutoCarParam,AutoCarConfig,其实有重复的，子项可以再进行抽象一下，代码可以减少，还可以节省一点硬盘空间&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AutoCarConfig
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ConfigResult result { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; returncode { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConfigResult
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; specid { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;configtypeitem&amp;gt; configtypeitems { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; configtypeitem
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;configitem&amp;gt; configitems { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; configitem
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; value { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AutoCarParam
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; message { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ParamResult result { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; returncode { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ParamResult
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; specid { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;paramtypeitem&amp;gt; paramtypeitems { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; paramtypeitem
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;paramitem&amp;gt; paramitems { &lt;span&gt;get&lt;/span&gt;;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;;}
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; paramitem
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; value { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt; 4.3、构造爬虫&lt;/h2&gt;
&lt;p&gt;这一块变化也不是很大，变化的的地方看我的注释，因为我们需要有多个Processor，把这几个都添加进去就行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; site = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Site
            {
                CycleRetryTimes &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                SleepTime &lt;/span&gt;= &lt;span&gt;200&lt;/span&gt;&lt;span&gt;,
                Headers &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;()
                {
                    { &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Accept&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
                    { &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cache-Control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;no-cache&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
                    { &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keep-alive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
                    { &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded; charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; },
                    { &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
                }

            };
            List&lt;/span&gt;&amp;lt;Request&amp;gt; resList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Request&amp;gt;&lt;span&gt;();
            Request res &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Request();
            res.Url &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://mall.autohome.com.cn/detail/284641-0-0.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            res.Method &lt;/span&gt;=&lt;span&gt; System.Net.Http.HttpMethod.Get;
            resList.Add(res);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; spider = Spider.Create(site, &lt;span&gt;new&lt;/span&gt; QueueDuplicateRemovedScheduler(), &lt;span&gt;new&lt;/span&gt; GetSkuProcessor(),&lt;span&gt;new&lt;/span&gt; GetBasicInfoProcessor(),&lt;span&gt;new&lt;/span&gt; GetExtInfoProcessor()) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为我们有多个Processor，所以都要添加进来&lt;/span&gt;
&lt;span&gt;                .AddStartRequests(resList.ToArray())
                .AddPipeline(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; PrintSkuPipe());
            spider.ThreadNum &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            spider.Run();
            Console.Read();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/695198/201805/695198-20180513140925361-928216601.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这次憋了那么久才写第二篇文章的，实属惭愧，本来2月底这篇文章就要出来的，一直拖到现在，上一篇文章的阅读量整体来说还是不错的超出了我的预期，下面评论也有小伙伴希望我快点出这篇文章，整体来说还是不错的。这次的文章我希望就是说不仅仅是大家学会了如何去使用DotnetSpider，并且能够让大家了解一下如何爬数据，给大家提供一点点思路，所以我会结合实际场景来写这篇文章，不然的话，感觉会太过于枯燥了。&lt;/p&gt;
&lt;p&gt;希望大家多多拍砖&lt;/p&gt;

&lt;p&gt;下次文章会涉及文件抓取&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/695198/201805/695198-20180513143445043-248613951.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;顺便说一句，有需要参加PMP或者高项考试的可以联系我，我有一些资料可以提供&lt;/p&gt;
&lt;p&gt;2018年5月13日&lt;/p&gt;
</description>
<pubDate>Sun, 13 May 2018 06:28:00 +0000</pubDate>
<dc:creator>FunnyBoy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/FunnyBoy/p/9029937.html</dc:identifier>
</item>
<item>
<title>基于.net的爬虫应用-DotnetSpider - ITIBB-Shrek</title>
<link>http://www.cnblogs.com/sall/p/9031868.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sall/p/9031868.html</guid>
<description>&lt;p&gt;        最近应朋友的邀请，帮忙做了个简单的爬虫程序，要求不高，主要是方便对不同网站的爬取进行扩展，获取到想要的数据信息即可。当然，基于数据的后期分析功能是后话，以后的随笔我会逐步的介绍。&lt;/p&gt;
&lt;p&gt;        开源的爬虫框架比较多，之前我研究过java的nutch,同时它还兼备基于Lucene全文检索的功能,还有Python爬虫等等。为什么我会选择用DotnetSpider呢，我之前有使用.net开发过一套分布式框架，框架的实现机制和DotnetSpider有相似之处，所以上手之后，甚是喜欢。&lt;/p&gt;
&lt;p&gt;        先看下解决方案的整体分层情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/643132/201805/643132-20180513122024469-1043381651.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;InternetSpider：控制台程序，后续可以服务的方式部署在windows环境中&lt;/p&gt;
&lt;p&gt;ISee.Shaun.Spiders.Business：爬虫程序的中心调度层，负责爬虫的配置，启动，执行等&lt;/p&gt;
&lt;p&gt;ISee.Shaun.Spiders.Common：通用类，包括反射代码、大众点评的数据字典、回调委托的定义等&lt;/p&gt;
&lt;p&gt;ISee.Shaun.Spiders.Pipeline：BasePipeline的实现层，主要实现了数据保存&lt;/p&gt;
&lt;p&gt;ISee.Shaun.Spiders.Processor：BasePageProcessor的实现层，主要实现了通过xpath的数据提取&lt;/p&gt;
&lt;p&gt;ISee.Shaun.Spiders.SpiderModel：数据模型层，负责实体定义和EF数据操作&lt;/p&gt;

&lt;p&gt;以爬取大众点评湘菜数据为例，程序的执行过程如下：&lt;/p&gt;
&lt;p&gt;InternetSpider读取配置文件，获取需要爬取的URL地址，大众点评数据分页仅支持50页，所以，需要获取更多数据我们需要将检索条件进行细化，观察后发现通过重点地区进行爬取，效果尚可，地址为http://www.dianping.com/search/keyword/2/10_湖南菜/{0}p{1}。&lt;/p&gt;
&lt;p&gt;图一：湘菜检索地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/643132/201805/643132-20180513124252125-606822779.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图二：分类检索地址，共11页&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/643132/201805/643132-20180513124416529-1457416993.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么行政区地址从哪里来的呢？我们直接使用谷歌浏览器，代码全在里面了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/643132/201805/643132-20180513124618300-1415068506.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;字典直接附上：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Common
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DazhongdianpingArea
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; areaDic = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; GetAreaDic()
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (areaDic == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                areaDic &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r16&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;西城区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r15&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;东城区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r17&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;海淀区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r328&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;石景山区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r14&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;朝阳区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r20&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;丰台区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r9158&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;顺义区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r5950&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;昌平区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r5952&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;大兴区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r9157&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;房山区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r5951&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;通州区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c4453&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;怀柔区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c435&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;延庆区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c434&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;密云区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c4454&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;门头沟区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                areaDic.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c4455&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;平谷区&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; areaDic;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK，在看一下配置文件，对应好需要的地址 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configSections&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;section &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;entityFramework&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;&lt;/span&gt;&lt;span&gt; requirePermission&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configSections&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;appSettings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 大分类抓取地址，共五十页 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;add &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;WebUrls&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;http://www.dianping.com/search/keyword/2/10_湖南菜/p{0}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 细化后地址，加入了地区 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;add &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;WebAreaUrls&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;http://www.dianping.com/search/keyword/2/10_湖南菜/{0}p{1}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;appSettings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;supportedRuntime &lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;=&quot;v4.0&quot;&lt;/span&gt;&lt;span&gt; sku&lt;/span&gt;&lt;span&gt;=&quot;.NETFramework,Version=v4.6.1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;connectionStrings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库连接字符串 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;add &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;ConnectionStr&quot;&lt;/span&gt;&lt;span&gt; connectionString&lt;/span&gt;&lt;span&gt;=&quot;data source=.;initial catalog=Membership_Spider;integrated security=True;user id=sa;password=123asd!@#;multipleactiveresultsets=True;&quot;&lt;/span&gt;&lt;span&gt; providerName&lt;/span&gt;&lt;span&gt;=&quot;System.Data.SqlClient&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;connectionStrings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entityFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;defaultConnectionFactory &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameters&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parameter &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;mssqllocaldb&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parameters&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;defaultConnectionFactory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;providers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;provider &lt;/span&gt;&lt;span&gt;invariantName&lt;/span&gt;&lt;span&gt;=&quot;System.Data.SqlClient&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;providers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entityFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;获取到页面地址后，我们需要初始化爬虫服务，我定义了一个RunSpider，初始化时，传递Processor和Pipeline实现类字符串，编码格式等。直接调用run方法，开始执行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Business;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Common;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Configuration;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; InternetSpider
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; urlInfo = ConfigurationManager.AppSettings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WebUrls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; urlAreaInfo = ConfigurationManager.AppSettings[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WebAreaUrls&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            Run();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Begin spider
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Run()
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Add other areaInfo&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; areaDic =&lt;span&gt; DazhongdianpingArea.GetAreaDic();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; urls = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt;&lt;span&gt; areaDic.Keys)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span&gt;50&lt;/span&gt;; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                     urls.Add(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Format(urlAreaInfo, key, i));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             RunSpider runSpiders = &lt;span&gt;new&lt;/span&gt; RunSpider(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DazhongdianpingProcessor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DazhongdianpingPipeline&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            runSpiders.Run(urls);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;RunSpider runSpider = new RunSpider(&quot;DazhongdianpingProcessor&quot;, &quot;DazhongdianpingPipeline&quot;, &quot;UTF-8&quot;, true);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;runSpider.Run(urlInfo, 50);&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 关于RunSpider,我不在重复说明，请看代码注释（RunSpider类的主要功能就是方便新任务的开启，或者不通域名下站点的调用，或者说我这里的委托中开启的子页面调用等；反射的使用，便于在后续扩展时，创建批量任务配置文件，自动执行任务才加入的）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core.Downloader;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core.Pipeline;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core.Processor;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core.Scheduler;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Common;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Pipeline;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Processor;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Business
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RunSpider
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ASSEMBLY_PROCESSOR_NAME = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ISee.Shaun.Spiders.Processor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ASSEMBLY_PIPELINE_NAME = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ISee.Shaun.Spiders.Pipeline&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; BaseProcessor processor = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; BasePipeline pipeline = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Site site = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; encoding = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; removeOutBound = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; spiderThreadNums = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; SpiderThreadNums { &lt;span&gt;get&lt;/span&gt; =&amp;gt; spiderThreadNums; &lt;span&gt;set&lt;/span&gt; =&amp;gt; spiderThreadNums =&lt;span&gt; value; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Constructor
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;processorName&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;pipeLineName&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; RunSpider(&lt;span&gt;string&lt;/span&gt; processorName, &lt;span&gt;string&lt;/span&gt; pipeLineName, &lt;span&gt;string&lt;/span&gt; encoding, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; removeOutBound)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过反射，获取当前处理类&lt;/span&gt;
            processor = ReflectionInvoke.GetInstance(ASSEMBLY_PROCESSOR_NAME, processorName, &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; BaseProcessor;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果需要回写信息，使用当前委托，如这里，继续子页面的抓取调用&lt;/span&gt;
            processor.InvokeFoodUrls = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.InvokeNext;
            pipeline &lt;/span&gt;= ReflectionInvoke.GetInstance(ASSEMBLY_PIPELINE_NAME, pipeLineName, &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; BasePipeline;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.encoding =&lt;span&gt; encoding;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.removeOutBound =&lt;span&gt; removeOutBound;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行，按照页号
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;urlInfo&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;times&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Run(&lt;span&gt;string&lt;/span&gt; urlInfo, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; times)
        {
            SetSite(encoding, removeOutBound, urlInfo, times);
            Run();
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 执行，按照地址集合
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;urlList&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Run(List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; urlList)
        {
            SetSite(encoding, removeOutBound, urlList);
            Run();
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Begin spider
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Run()
        {
            Spider spider &lt;/span&gt;= Spider.Create(site, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QueueDuplicateRemovedScheduler(), processor);
            spider.AddPipeline(pipeline);
            spider.Downloader &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpClientDownloader();
            spider.ThreadNum &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.spiderThreadNums;
            spider.EmptySleepTime &lt;/span&gt;= &lt;span&gt;3000&lt;/span&gt;&lt;span&gt;;
            spider.Deep &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
            spider.Run();
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InvokeNext(&lt;span&gt;string&lt;/span&gt; processorName, &lt;span&gt;string&lt;/span&gt; pipeLineName, List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; foodUrls)
        {
            RunSpider runSpider &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; RunSpider(processorName, pipeLineName, &lt;span&gt;this&lt;/span&gt;.encoding, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            runSpider.Run(foodUrls);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 通过可变页号，设定站点URL
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;encoding&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;removeOutBound&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;urlInfo&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;times&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SetSite(&lt;span&gt;string&lt;/span&gt; encoding, &lt;span&gt;bool&lt;/span&gt; removeOutBound, &lt;span&gt;string&lt;/span&gt; urlInfo, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; times)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.site = &lt;span&gt;new&lt;/span&gt; Site { EncodingName = encoding, RemoveOutboundLinks = &lt;span&gt;false&lt;/span&gt;&lt;span&gt; };
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (times == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.site.AddStartUrl(urlInfo);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                List&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; urls = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= times; ++&lt;span&gt;i)
                {
                    urls.Add(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Format(urlInfo, i));
                }
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.site.AddStartUrls(urls);
            }
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 通过URL集合设置站点URL
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;encoding&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;removeOutBound&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;urlList&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SetSite(&lt;span&gt;string&lt;/span&gt; encoding, &lt;span&gt;bool&lt;/span&gt; removeOutBound, List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; urlList)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.site = &lt;span&gt;new&lt;/span&gt; Site { EncodingName = encoding, RemoveOutboundLinks = &lt;span&gt;false&lt;/span&gt;&lt;span&gt; };
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.site.AddStartUrls(urlList);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;关于Processor，我后续会扩展出不通的网站实现类，那么涉及到通用属性等需要进行抽象处理，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core.Processor;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Common.DelegeteDefine;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Processor
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BaseProcessor : BasePageProcessor
    {
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; foodUrls = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; CallbackEventHandler InvokeFoodUrls { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; SourceWebsite { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BaseProcessor() { foodUrls = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;(); }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Handle(Page page)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InvokeCallback(&lt;span&gt;string&lt;/span&gt; processorName, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; pipeLineName)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (InvokeFoodUrls != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.foodUrls.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                InvokeFoodUrls(processorName, pipeLineName, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.foodUrls);
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来看具体的实现类（关于xpath不在多加说明，网上资料很多，如果结构不清楚，可以使用谷歌的开发者工具，或者在调试中，拿到html结构，自行分析，本文不再增加次类演示截图）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core.Processor;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core.Selector;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Common;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.SpiderModel.Model;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Common.DelegeteDefine;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Processor
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DazhongdianpingProcessor : BaseProcessor
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DazhongdianpingProcessor() : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标记当前数据来源&lt;/span&gt;
            SourceWebsite = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;大众点评&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 重新父类方法，开始执行数据获取操作
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;page&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Handle(Page page)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 利用 Selectable 查询并构造自己想要的数据对象&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; totalVideoElements = page.Selectable.SelectList(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//div[@class='shop-list J_shop-list shop-all-list']/ul/li&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).Nodes();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (totalVideoElements == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义需处理数据集合&lt;/span&gt;
            List&amp;lt;Restaurant&amp;gt; restaurantList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Restaurant&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; restElement &lt;span&gt;in&lt;/span&gt;&lt;span&gt; totalVideoElements)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; restaurant = &lt;span&gt;new&lt;/span&gt; Restaurant() { SourceWebsite =&lt;span&gt; SourceWebsite };
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下面通过xpath开始获取餐厅信息&lt;/span&gt;
                restaurant.Name = restElement.Select(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//h4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).GetValue();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; price= restElement.Select(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//div[@class='txt']/div/a[@class='mean-price']/b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).GetValue();
                restaurant.AveragePrice &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(price) ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : price.Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;￥&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
                restaurant.Type &lt;/span&gt;= restElement.Select(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//div[@class='txt']/div[@class='tag-addr']/a/span[@class='tag']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).GetValue();
                restaurant.Star &lt;/span&gt;= restElement.Select(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//div[@class='txt']/div[@class='comment']/span/@title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).GetValue();
                restaurant.ImageUrl &lt;/span&gt;= restElement.Select(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//div[@class='pic']/a/img/@src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).GetValue();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; areaCode = page.Url.Substring(page.Url.LastIndexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(areaCode) &amp;amp;&amp;amp; (areaCode.Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)|| areaCode.Contains(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
                {
                    Dictionary&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; areaDic =&lt;span&gt; DazhongdianpingArea.GetAreaDic();
                    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; result= areaCode.Substring(&lt;span&gt;0&lt;/span&gt;, areaCode.IndexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;));
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (areaDic.ContainsKey(result))
                    {
                        restaurant.Area &lt;/span&gt;=&lt;span&gt; areaDic[result];
                    }
                }

                List&lt;/span&gt;&amp;lt;ISelectable&amp;gt; infoList = restElement.SelectList(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;./div[@class='txt']/span[@class='comment-list']/span/b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)).Nodes() &lt;span&gt;as&lt;/span&gt; List&amp;lt;ISelectable&amp;gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (infoList != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; infoList.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = infoList[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].GetValue();
                    restaurant.Taste &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(result) ? &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty : result;
                    result &lt;/span&gt;= infoList[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;].GetValue();
                    restaurant.Environment &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(result) ? &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty : result;
                    result &lt;/span&gt;= infoList[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;].GetValue();
                    restaurant.ServiceScore &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(result) ? &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty : result;
                }

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; recommetList = restElement.SelectList(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//div[@class='txt']/div[@class='recommend']/a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).Nodes();
                restaurant.Recommendation &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;.Join(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, recommetList.Select(o =&amp;gt;&lt;span&gt; o.GetValue()));
                restaurant.Address &lt;/span&gt;= restElement.Select(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//div[@class='txt']/div[@class='tag-addr']/span&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).GetValue();
                restaurant.Position&lt;/span&gt;= restElement.Select(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//div[@class='txt']/div[@class='tag-addr']/a[@data-click-name='shop_tag_region_click']/span[@class='tag']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).GetValue();

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; shopUrl = restElement.Select(Selectors.XPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.//div[@class='txt']/div/a/@href&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)).GetValue();
                restaurant.Code &lt;/span&gt;= shopUrl.Substring(shopUrl.LastIndexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                restaurantList.Add(restaurant);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;add next links&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(shopUrl))
                {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.foodUrls.Add(shopUrl);
                }
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果进行二级爬虫，取消注释，并且实现对应的两个类
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;InvokeCallback(&quot;DazhongdianpingFoodProcessor&quot;, &quot;DazhongdianpingFoodPipeline&quot;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Save data object by key. 以自定义KEY存入page对象中供Pipeline调用&lt;/span&gt;
            page.AddResultItem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RestaurantList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, restaurantList);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;数据实体的定义：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations.Schema;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.SpiderModel.Model
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FoodInfo
    {
        [Key]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; RestaurantId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Code { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; RestaurantCode { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Price { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; FoodImageUrl { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        [ForeignKey(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RestaurantId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Restaurant restaurant { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据获取下来之后，爬虫会自动将任务分配给pipeline来处理收集到的数据信息，直接上代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DotnetSpider.Core.Pipeline;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.SpiderModel.Model;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.SpiderModel;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ISee.Shaun.Spiders.Pipeline
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DazhongdianpingPipeline : BasePipeline
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 处理餐厅信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;resultItems&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;spider&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Process(IEnumerable&amp;lt;ResultItems&amp;gt;&lt;span&gt; resultItems, ISpider spider)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;便利结果集&lt;/span&gt;
            &lt;span&gt;foreach&lt;/span&gt; (ResultItems entry &lt;span&gt;in&lt;/span&gt;&lt;span&gt; resultItems)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义EF实体&lt;/span&gt;
                &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; rEntity = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FoodInfoEntity())
                {
                    List&lt;/span&gt;&amp;lt;Restaurant&amp;gt; resList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Restaurant&amp;gt;&lt;span&gt;();
                    &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (Restaurant result &lt;span&gt;in&lt;/span&gt; entry.Results[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RestaurantList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;])
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过餐厅名称和地址作为筛重条件&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; resultList = rEntity.RestaurantInfo.Where(o =&amp;gt; o.Name == result.Name &amp;amp;&amp;amp; o.Address ==&lt;span&gt; result.Address).ToList();
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (resultList.Count == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                        {
                            resList.Add(result);
                        }
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (resList.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                    {
                        rEntity.RestaurantInfo.AddRange(resList);
                        rEntity.SaveChanges();
                    }
                }
            }

        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;好了，整体下来，就是这样简单，当然我还要强调一下几个问题：&lt;/p&gt;
&lt;p&gt;1.如果需要对大量的页面进行数据爬取，可增加额外的xml配置文件，来定义抓取的规则或者任务。（不再细说，如有疑问可留言交流）&lt;/p&gt;
&lt;p&gt;2.如果要完成比如美团网等网站的扩展，在Processor和Pipeline分别实现对应的类即可&lt;/p&gt;
&lt;p&gt;3.关于数据实体，我采用了EF的Code first方式，大家可以随意扩展自己想要的方式，或者更换数据库等，请参阅网上大量的关于EF的文章。&lt;/p&gt;

&lt;p&gt;好了，今天就到这里了，基本都在上代码，关于丽姐各自体会吧，另外，下周开始，停发两年多的1024伐木累还会继续更新，只想好好的把这件事做完，愿一切安好！&lt;/p&gt;

</description>
<pubDate>Sun, 13 May 2018 05:17:00 +0000</pubDate>
<dc:creator>ITIBB-Shrek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sall/p/9031868.html</dc:identifier>
</item>
<item>
<title>Python--Seaborn绘图和可视化--基本语法 - 渔单渠</title>
<link>http://www.cnblogs.com/yudanqu/p/9031869.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yudanqu/p/9031869.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　博客地址：&lt;a title=&quot;博主地址&quot; href=&quot;http://www.cnblogs.com/yudanqu/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/yudanqu/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;　　Seaborn是对matplotlib的extend，是一个数据可视化库，提供更高级的API封装，在应用中更加的方便灵活。下面我简单介绍一下他的用法，实际应用的时候，可以直接从文档中查找这个库，这时候使用就很快捷了。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:as3;gutter:false;&quot;&gt;
提要：1、直方图和密度图

　　　2、柱状图和热力图

　　　3、设置图形显示效果

　　　4、调色功能
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　老样子，首先将使用它所需要的库导入进来，当然，其中包括numpy之类的是为了演示它的功能才导入的，大家要先理解一下每个库的作用。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; pandas &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Series,DataFrame
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; seaborn as sns
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　如果在交互式环境中，可以通过&lt;span&gt;&lt;em&gt;%matplotlab&lt;/em&gt;&lt;/span&gt;来解决每次通过&lt;em&gt;&lt;span&gt;plt.show()&lt;/span&gt;&lt;/em&gt;来显示图像（本人在ipython中，貌似jupyter中%matplotlib inline等等）&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;# matplotlib&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; s1 = Series(np.random.randn(1000)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成1000个点的符合正态分布的随机数&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; plt.hist(s1) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直方图，也可以通过plot(),修改里面kind参数实现&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; s1.plot(kind=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;kde&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 密度图&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1279674/201805/1279674-20180513121657423-878951974.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;# seaborn&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; sns.distplot(s1,hist=True,kde=True,rug=True) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 前两个默认就是True,rug是在最下方显示出频率情况，默认为False&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; bins=20 表示等分为20份的效果，同样有label等等参数&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; sns.kdeplot(s1,shade=True,color=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; shade表示线下颜色为阴影,color表示颜色是红色&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; sns.rugplot(s1) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在下方画出频率情况&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1279674/201805/1279674-20180513121542768-1342736237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　给出两种方式通过最基本的方式画出来的效果，怎么样，是不是发现seaborn很强大。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　（1）下载实验数据：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; df = sns.load_dataset(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;flights&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在线下载一个数据用于实验，在sns.load_dataset()函数里有很多的数据，想了解更多的可以到GitHub中找到源码，你就会很清楚了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;我们可以先看一下里面的数据，可以看到，这是一个航空的数据，里面有年、月和乘客数量，接下来我们就要在这份数据上进行分析。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1279674/201805/1279674-20180513122401969-294953984.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　（2）&lt;/span&gt;&lt;span&gt;我们可以通过透视表来先对这份数据进行一下处理：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; df = df.pivot(index=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;month&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,columns=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;year&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,values=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;passengers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成一个透视表，得到一个以年、月为轴的二维数据表&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　大家可以自己试一下，这样生成的结果是以年为columns，以月为index，表内数据为对应的乘客数量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;（3）绘制柱状图&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; s =&lt;span&gt; df.sum()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过matplotlib绘出图形&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; s.plot(kind=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过seaborn绘出图形&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; sns.barplot(x=s.index,y=s.values)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1279674/201805/1279674-20180513123753269-1641829196.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;（4）绘制热力图&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; df.plot() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 线性的显示数据情况&lt;/span&gt;
2 sns.heatmap(df) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生成热力图&lt;/span&gt;
3 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; sns.heatmap(df,annot=True,fmt='d') # annot参数是指显示数据，fmt='d'是指以整数形式显示&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1279674/201805/1279674-20180513124035331-471996359.png&quot; alt=&quot;&quot; width=&quot;467&quot; height=&quot;350&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1279674/201805/1279674-20180513124043549-1247494172.png&quot; alt=&quot;&quot; width=&quot;492&quot; height=&quot;369&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;（1）axes_style and set_style&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; x = np.linspace(0,14,100&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; y1 =&lt;span&gt; np.sin(x)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; y2 = np.sin(x+2)*1.25
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; sinplot():
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;    plt.plot(x,y1)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;    plt.plot(x,y2)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 
&lt;span&gt;8&lt;/span&gt; sinplot() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 以matplotlib显示，生成两个函数图像&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1279674/201805/1279674-20180513124838483-1613743142.png&quot; alt=&quot;&quot; width=&quot;410&quot; height=&quot;307&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; seaborn的5种装饰风格&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; styles = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;darkgrid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;whitegrid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;tricks&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 颜色代表背景颜色，grid代表是否有网格&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; sns.set_style(style[0]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 进行装饰，括号内可以直接写装饰风格&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; sinplot() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 经过修饰之后的图像&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; sns.axes_style() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 显示当前主题的内容，这些数据都可以修改微调&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 更改的时候就将其信息的以字典形式复制到set_style()里，当做参数来修改（注意是以字典的形式）&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; sns.set() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置风格为空，即清空自己定义的，恢复到默认的时候&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1279674/201805/1279674-20180513125322479-1942077037.png&quot; alt=&quot;&quot; width=&quot;414&quot; height=&quot;310&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;（2）plotting_context() and set_context()&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; context = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;paper&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;notebook&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;talk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;poster&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;#&lt;/span&gt;&lt;span&gt; seaborn本身定义好的&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; sns.set_context(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;paper&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,rc={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;grid.linewidth&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:3.0}) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; rc参数&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;sinplot()
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; sns.plotting_context() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 显示出当前状态的数据&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; sns.set() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 恢复到默认&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1279674/201805/1279674-20180513125541994-865598065.png&quot; alt=&quot;&quot; width=&quot;410&quot; height=&quot;308&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　图像貌似一样，但并不是没有成功，只是变化比较细微，真正用到的时候就可以体会到了。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 先绘制一个图像&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; sinplot1():
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     x = np.linspace(0,14,100&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     plt.figure(figsize=(8,6)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 图像比较小时，通过这个函数更改大小&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(4&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     　　plt.plot(x,np.sin(x+i)*(i+0.75),label=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sin(x+%s)*(%s+0.75)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (i,i))
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;    plt.legend()
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; sinplot1()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1279674/201805/1279674-20180513130100768-240273641.png&quot; alt=&quot;&quot; width=&quot;554&quot; height=&quot;415&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 引入seaborn&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; sns.color_palette() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用调色板&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 不传入参数返回当前使用的调色板（RGB）&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; sns.palplot(sns.color_palette()) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 画出调色板，参数为上面的调色板&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;接下来，我们就要调整我们的调色板了&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; pal.style = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;deep&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;nuted&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pastel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bright&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;colorblind&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;#&lt;/span&gt;&lt;span&gt; seaborn默认定义的调色板&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第一种设置画板方式&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; sns.set_palette(sns.color_palette(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dark&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置色板&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; sns.set() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 恢复默认风格&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第二种设置画板方式，并且最后恢复到默认&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;with sns.color_palette():
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     sinplot1() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在内部调整画板输出图形，当with结束时，则恢复默认&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;调色板里的颜色是定义好的，那么如果我们将要绘制的图形包括很多的函数，需要更多的颜色，该怎么办呢。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 默认提供的色板数量是固定的，如果图像是更多的函数，那么颜色将循环色板中的风格。如果想不使他颜色有相同，可以通过sns.color_palette()来修改&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; sns.color_palette([(0.5,0.2,0.6),(0.3,0.3,0.4)]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 因为色板是以列表的形式存储的，里面的每种风格以元组的形式存在所以需要用[()]&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第二种增加色板颜色的方法&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; sns.color_palette(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,8) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; hls方法，后面写参数8，即生成有8种不同颜色的色板&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　作者：渔单渠（yudanqu）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　博客地址：&lt;a title=&quot;博主地址&quot; href=&quot;http://www.cnblogs.com/yudanqu/&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/yudanqu/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 13 May 2018 05:14:00 +0000</pubDate>
<dc:creator>渔单渠</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yudanqu/p/9031869.html</dc:identifier>
</item>
<item>
<title>解密TTY - 李秋豪</title>
<link>http://www.cnblogs.com/liqiuhao/p/9031803.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liqiuhao/p/9031803.html</guid>
<description>&lt;p&gt;&lt;span&gt;本文内容来自&lt;a href=&quot;http://www.linusakesson.net/programming/tty/&quot;&gt;The TTY demystified&lt;/a&gt; ，讲述了*NIX系统中TTY的历史与工作原理，看完后解决了我很多疑惑，于是做此翻译，与大家分享。&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;译者：&lt;a href=&quot;http://www.cnblogs.com/liqiuhao/&quot;&gt;李秋豪&lt;/a&gt; &lt;a href=&quot;http://jiangjiawei.pw/blog/&quot;&gt;江家伟&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;审校：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;V1.0 Sun May 13 12:42:01 CST 2018&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;一直以来，TTY子系统都是Linux/Unix设计中的一个关键点。不幸的是，这种重要性通常都被忽略了，并且也很难找到相关的介绍性文章。我认为，对Linux中TTYs的基础知识理解应是每一个开发人员和高级使用者所必备的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：你将阅读到的东西并不是那么“优雅”。事实上，尽管在用户角度看非常实用，TTY子系统是由很多繁杂的东西和特殊情况组成的。为了理解它们的由来，我们必须回到过去：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124439269-432314665.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;历史&quot;&gt;&lt;span&gt;历史&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在1869年，证券报价机（stock ticker）被发明了。这是一台由打字机，一对长电缆和一个自动收录机打印机组成的电动机械机器，其目的是长距离实时传播股票的价格。这个概念逐渐演变成更快的基于ASCII的电传机（&lt;em&gt;teletype&lt;/em&gt;）。Teletypes曾经在世界各地的大型网络中连接，并被称为Telex，其主要用于传输商业电报，但此时尚未连接到任何计算机。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;与此同时，计算机（虽然还是又笨重又昂贵）也开始支持多任务处理了，即能够实时和多个用户进行交互。当命令行最终取代了古老的批处理模型后，teletypes被用作输入和输出设备，因为它们在市场上很容易买到。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是在市场上有许多种电传机，它们的模型都略有不同，因此需要计算机在软件层形成兼容。在UNIX世界中，使用的方法是让操作系统内核处理所有底层细节，例如字长，波特率，流量控制，奇偶校验，用于基本行编辑（rudimentary line）的控制代码等等。而视频终端（例如20世纪70年代后期出现的VT-100等）的光标移动，彩色输出和其他高级功能则留给了应用层。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在，物理电传机和视频终端实际上已经灭绝了。除非你在访问博物馆或者你是一个硬件爱好者，否则你看到的所有TTY都是模拟视频终端，即软件仿真出来的终端。但我们即将看到，这些远古的知识依然潜藏在现代TTY设计之中。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;用例&quot;&gt;&lt;span&gt;用例&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;如下图所示，用户在终端（terminal）打字（物理电传机），该终端通过一对电缆连接到计算机上的UART（通用异步接收器和发送器）。操作系统中有一个UART驱动程序，用于管理字节的物理传输，包括奇偶校验和流量控制。在一个原始的系统中，UART驱动程序会将传入的字节直接传送给某个应用程序进程，但是这种方法将缺乏以下基本特征：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124344120-892390477.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;行编辑&lt;/strong&gt;。大多数用户都会在输入时犯错，所以退格键会很有用。这当然可以由应用程序本身来实现，但是根据UNIX设计“哲学”，应用程序应尽可能保持简单。为了方便起见，操作系统提供了一个编辑缓冲区和一些基本的编辑命令（退格，清除单个单词，清除行，重新打印），这些命令在行规范（&lt;em&gt;line discipline&lt;/em&gt;）内默认启用。高级应用程序可以通过将行规范设置为原始模式（&lt;em&gt;raw&lt;/em&gt; mode）而不是默认的成熟或准则模式（&lt;em&gt;cooked&lt;/em&gt; and &lt;em&gt;canonical&lt;/em&gt;）来禁用这些功能。大多数交互程序（编辑器，邮件客户端，shell，及所有依赖&lt;code&gt;curses&lt;/code&gt;或&lt;code&gt;readline&lt;/code&gt;的程序）均以原始模式运行，并自行处理所有的行编辑命令。行规范还包含字符回显和回车换行（译者注：&lt;code&gt;\r\n&lt;/code&gt; 和 &lt;code&gt;\n&lt;/code&gt;）间自动转换的选项。如果你喜欢，可以把它看作是一个原始的内核级&lt;code&gt;sed(1)&lt;/code&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;另外，内核提供了几种不同的行规范。一次只能将其中一个连接到给定的串行设备。行规范的默认规则称为N_TTY（&lt;code&gt;drivers/char/n_tty.c&lt;/code&gt;，如果你想继续探索的话）。其他的规则被用于其他目的，例如管理数据包交换（ppp，IrDA，串行鼠标），但这不在本文的讨论范围之内。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;会话（Session）管理&lt;/strong&gt;。用户可能想要同时运行多个程序，并且一次只与其中一个交互。如果一个程序进入无限循环，用户可能想要终止或挂起它。在后台启动的程序应该能够独立运行，直到它们尝试向终端写入（被挂起）。同样，用户的输入应该指向前台程序。对于这些功能，操作系统是在TTY驱动程序（ &lt;em&gt;TTY driver&lt;/em&gt; &lt;code&gt;drivers/char/tty_io.c&lt;/code&gt;）中实现的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在操作系统中，如果已经进程有执行上下文，我们就说它是“活着的”（有一个执行上下文），这也意味着它可以独立执行操作。而TTY驱动程序不是“活”的; 在面向对象的术语中，TTY驱动程序是被动对象（passive object）。它有一些数据字段和一些方法，但让它做某事的唯一方法是当它的某个方法从别的进程的上下文或内核中断处理程序中调用时。行规范（&lt;em&gt;line discipline&lt;/em&gt;）同样是一个被动对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在把它们放在一起看，UART驱动，行规范和TTY驱动这个三元组就可以被称为TTY设备，即我们常说的TTY。用户进程可以通过在&lt;code&gt;/dev&lt;/code&gt;下操作相应的设备文件来影响任何TTY设备的行为。由于对设备文件写入权限是必需的，因此当用户登录特定的TTY时，该用户必须成为设备文件的所有者——这通常由&lt;code&gt;login(1)&lt;/code&gt;程序完成，该程序以root权限运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上图中的物理电线也可以是长途电话线路（Modem），除了系统必须处理调制解调器挂断的情况，这并没有带来其他的改变：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124350794-1281373714.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;让我们继续讨论典型的桌面系统。下图是Linux控制台的工作原理：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124356149-1897089175.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在上图中，TTY驱动和行规范的行为与前面的示例类似，但不再有UART或物理终端。相反，软件仿真出视频终端（字符和图形字符属性帧缓冲器的复杂状态机），并最终被渲染到VGA显示器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果我们在用户空间也进行终端仿真，情况会变得更加灵活（和抽象）。下图是&lt;code&gt;xterm(1)&lt;/code&gt;及其克隆的工作方式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124403552-625614208.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了便于将终端仿真移入用户空间，同时仍保持TTY子系统（会话管理和行规范）的完整，伪终端被发明了出来（&lt;em&gt;pseudo terminal&lt;/em&gt; 或 &lt;em&gt;pty&lt;/em&gt; ）。你可能已经猜到，当你开始在伪终端中运行伪终端时，事情变得更加复杂，例如 &lt;code&gt;screen(1)&lt;/code&gt; 或 &lt;code&gt;ssh(1)&lt;/code&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在让我们退一步看看所有这些东西是如何和进程联系起来的。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;进程&quot;&gt;&lt;span&gt;进程&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Linux进程可以处于下面状态之一：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124410714-2086139392.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;不可中断睡眠（等待某个事件）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;可中断睡眠（等待一些事件或者信号）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;停止（收到了工作管理信号或者进程正在被调试器追踪）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;僵尸进程（被它的父进程终止但是没有被回收的进程）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;运行或者可运行（在运行队列中）&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;通过运行 &lt;code&gt;ps l&lt;/code&gt;, 你可以看到哪个进程正在运行，以及哪个进程正在睡眠。如果一个进程处于睡眠状态， &lt;code&gt;WCHAN&lt;/code&gt; 列(&quot;wait channel&quot;, 等待队列的名字)将会告诉你这个进程正在等待哪个内核事件。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code&gt;$ ps l
F   UID   PID  PPID PRI  NI    VSZ   RSS WCHAN  STAT TTY        TIME COMMAND
0   500  5942  5928  15   0  12916  1460 wait   Ss   pts/14     0:00 -/bin/bash
0   500 12235  5942  15   0  21004  3572 wait   S+   pts/14     0:01 vim index.php
0   500 12580 12235  15   0   8080  1440 wait   S+   pts/14     0:00 /bin/bash -c (ps l) &amp;gt;/tmp/v727757/1 2&amp;gt;&amp;amp;1
0   500 12581 12580  15   0   4412   824 -      R+   pts/14     0:00 ps l
&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&quot;&lt;code&gt;wait&lt;/code&gt;&quot;等待队列对应于系统调用 &lt;code&gt;wait(2)&lt;/code&gt; ,因此这个队列中的进程的子进程不论什么时候改变了状态，它们都会被移入运行状态。有两种睡眠状态：可中断睡眠和不可中断睡眠。可中断睡眠（最常见的情况）意味着当进程在等待队列中时，它实际上也可能由于收到了一个信号而被移入运行状态。如果你深入到内核源码中，你将会发现每个处理等待事件的内核源码都会检查在schedule()调用返回之后是否有待处理的信号，如果有，就从系统调用&lt;code&gt;wait(2)&lt;/code&gt;中返回。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在上面列出的 &lt;code&gt;ps&lt;/code&gt; 结果中, &lt;code&gt;STAT&lt;/code&gt; 列展示了每个进程的当前状态。这一列中可能会显示一个或多个属性或标记：&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;这个进程是前台进程组的一员&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;这些属性被用于工作管理。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;译者注：我之前翻译过两篇有关于进程标志的文章，可参考&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/7704742.html&quot;&gt;&lt;em&gt;Linux 进程状态标识 Process State Definition&lt;/em&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/7704567.html&quot;&gt;&lt;em&gt;Linux 可运行进程 Runnable Process Definition&lt;/em&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;工作与会话管理&quot;&gt;&lt;span&gt;工作与会话管理&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;当你按下 &lt;code&gt;^Z&lt;/code&gt; 挂起程序或者使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 在后台运行程序时，工作管理就发生了。一个工作（job）等同于一个进程组。shell内置的命令如 &lt;code&gt;jobs&lt;/code&gt;, &lt;code&gt;fg&lt;/code&gt; 和 &lt;code&gt;bg&lt;/code&gt; 可以用来管理一个会话（session）中的所有工作。每一个会话是由一个会话领导（session leader），即shell来管理的，它会利用复杂的协议，例如信号和一些系统调用和内核打交道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面的例子解释了进程、工作、会话之间的关系。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;下面的shell交互...&quot;&gt;&lt;span&gt;下面的shell交互...&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124423875-805729941.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;对应这些进程...&quot;&gt;&lt;span&gt;...对应这些进程...&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124430273-1265605153.png&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;和这些内核数据结构&quot;&gt;&lt;span&gt;...和这些内核数据结构&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;TTY 驱动 (/dev/pts/0).&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;span&gt;&lt;code&gt;  Size: 45x13
  Controlling process group: (101)
  Foreground process group: (103)
  UART configuration (忽略d, since this is an xterm):
    Baud rate, parity, word length and much more.
  Line discipline configuration:
    cooked/raw mode, linefeed correction,
    meaning of interrupt characters etc.
  Line discipline state:
    edit buffer (currently empty),
    cursor position within buffer etc.
&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code&gt;  Readable end (connected to PID 104 as file descriptor 0)
  Writable end (connected to PID 103 as file descriptor 1)
  Buffer
&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;其中基本的思想是每个管道都是一项工作，因为管道中的每个进程都应该被同时进行操作（停止，恢复，终止）。这也是为什么 &lt;code&gt;kill(2)&lt;/code&gt; 允许你发送信号到整个进程组。默认情况下， &lt;code&gt;fork(2)&lt;/code&gt; 将新创建的子进程放置在与其父进程相同的进程组中，例如，键盘上的 &lt;code&gt;^C&lt;/code&gt; 会影响父进程和子进程。但是，作为会话领导责任的一部分，每次启动管道时，shell都会创建一个新的进程组。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;TTY驱动程序会记录前台进程组ID（PID），但这只能以被动方式进行。会话领导必须在必要时主动更新此信息。同样，TTY驱动程序会记录连接终端的属性（例如窗口大小），但这些信息必须由终端仿真程序甚至用户主动更新。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正如在上图中所看到的，几个进程将 &lt;code&gt;/dev/pts/0&lt;/code&gt; 作为它们的标准输入。但只有前台工作 &lt;code&gt;ls | sort&lt;/code&gt; 才会接收来自TTY的输入。同样，只有前台工作才被允许写入TTY设备（默认配置下）。如果&lt;code&gt;cat&lt;/code&gt;进程试图写入TTY，内核将使用信号将它挂起。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;信号控制&quot;&gt;&lt;span&gt;信号控制&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;现在让我们更近距离地看看内核中的TTY驱动、行规范和UART驱动是如何和用户态进程交互的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;UNIX文件，包括TTY设备文件，可以被读和写，并且由于许多TTY相关的操作都已经被定义，可以使用神奇的 &lt;code&gt;ioctl(2)&lt;/code&gt;系统调用（UNIX的“瑞士军刀”）进行进一步操作。但是，&lt;code&gt;ioctl&lt;/code&gt;请求必须在进程内被初始化，因此它们不能在内核需要和应用进行异步通信的场景下被使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在&lt;em&gt;The Hitchhiker's Guide to the Galaxy（银河系漫游指南）&lt;/em&gt;中，Douglas Adams提到了一个“死星”，上面居住这一群消沉的人类和某种长着尖牙的动物。这些动物通过狠狠地咬人类的大腿来和人类交流（&lt;em&gt;译者：喵喵喵？&lt;/em&gt;）。这和UNIX惊人地相似：在UNIX中，内核通过发送“瘫痪或者致命”的信号给用户进程来和进程通信。一些进程可能能够拦截一些信号，并且尝试调整适应当前的情况，但是大多数进程不会这么做。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因此信号是一个“粗暴”的机制，它允许内核和进程进行异步通信。UNIX中的信号定义是不规整或者不统一的；相反，每个信号都是独特的，我们必须单独研究它们。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你可以使用命令 &lt;code&gt;kill -l&lt;/code&gt; 来看看你的系统实现了哪些命令。结果看起来像下面这样：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code&gt;$ kill -l
 1) SIGHUP   2) SIGINT   3) SIGQUIT  4) SIGILL
 5) SIGTRAP  6) SIGABRT  7) SIGBUS   8) SIGFPE
 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2
13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT
17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP
21) SIGTTIN 22) SIGTTOU 23) SIGURG  24) SIGXCPU
25) SIGXFSZ 26) SIGVTALRM   27) SIGPROF 28) SIGWINCH
29) SIGIO   30) SIGPWR  31) SIGSYS  34) SIGRTMIN
35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3  38) SIGRTMIN+4
39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12
47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14
51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10
55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7  58) SIGRTMAX-6
59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX    
&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;正如你看到的，信号被从1开始的数字编号。然而当它们被在掩码中（例如在&lt;code&gt;ps -s&lt;/code&gt;的输出里）被使用时，最低有效位对应信号1。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这篇文章将会关注以下信号： &lt;code&gt;SIGHUP&lt;/code&gt;, &lt;code&gt;SIGINT&lt;/code&gt;, &lt;code&gt;SIGQUIT&lt;/code&gt;, &lt;code&gt;SIGPIPE&lt;/code&gt;, &lt;code&gt;SIGCHLD&lt;/code&gt;,&lt;code&gt;SIGSTOP&lt;/code&gt;, &lt;code&gt;SIGCONT&lt;/code&gt;, &lt;code&gt;SIGTSTP&lt;/code&gt;, &lt;code&gt;SIGTTIN&lt;/code&gt;, &lt;code&gt;SIGTTOU&lt;/code&gt; 以及&lt;code&gt;SIGWINCH&lt;/code&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sighup&quot;&gt;&lt;span&gt;SIGHUP&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;终止&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 终止, 忽略, 函数调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当检测到挂断（hangup）条件时，UART驱动会将&lt;code&gt;SIGHUP&lt;/code&gt; 发送到整个会话。通常情况下，这会杀死所有进程。某些程序（如 &lt;code&gt;nohup(1)&lt;/code&gt; 和 &lt;code&gt;screen(1)&lt;/code&gt;）会从其会话（和TTY）中分离，以便其子进程不会注意到挂断。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigint&quot;&gt;&lt;span&gt;SIGINT&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;终止&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 终止, 忽略, 函数调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;如果输入流中出现交互式注意（ &lt;em&gt;interactive attention&lt;/em&gt; ）字符（通常为 &lt;code&gt;^C&lt;/code&gt;，其代码为ASCII码3），那么&lt;code&gt;SIGINT&lt;/code&gt; 就会由TTY驱动发送到当前的前台工作，除非此配置已被关闭。任何有权访问TTY设备的人都可以更改交互式注意字符并开关此配置; 此外，会话管理器会跟踪每个工作的TTY配置，并在有工作切换时更新TTY。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigquit&quot;&gt;&lt;span&gt;SIGQUIT&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;内核转储(core dump)&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 内核转储, 忽略, 函数调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;code&gt;SIGQUIT&lt;/code&gt; 的工作方式和 &lt;code&gt;SIGINT&lt;/code&gt;相似, 但是使用的字符是 &lt;code&gt;^\&lt;/code&gt; 并且默认操作不同。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigpipe&quot;&gt;&lt;span&gt;SIGPIPE&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;终止&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 终止, 忽略, 函数调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;内核会给每一个试图往没有读取者的管道中写数据的进程发送 &lt;code&gt;SIGPIPE&lt;/code&gt; 信号。 这是很有用的，因为没有这个信号的话，类似 &lt;code&gt;yes | head&lt;/code&gt;这样的工作就永远不会停止了。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigchld&quot;&gt;&lt;span&gt;SIGCHLD&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;忽略&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 忽略, 函数调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;当进程死亡或更改状态（停止/继续）时，内核会向其父进程发送一个 &lt;code&gt;SIGCHLD&lt;/code&gt; 。 &lt;code&gt;SIGCHLD&lt;/code&gt; 信号携带着终止进程的附加信息，即进程标识，用户标识，退出状态（或终止信号）以及一些执行时间的统计信息。会话领导（shell）使用这个信号追踪其工作。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigstop&quot;&gt;&lt;span&gt;SIGSTOP&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;挂起&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 挂起&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;该信号将无条件地挂起接收者，即其信号动作不能被重新配置。要注意的是，在工作控制期间，&lt;code&gt;SIGSTOP&lt;/code&gt;不会由内核发送。相反，&lt;code&gt;^Z&lt;/code&gt; 通常会触发一个 &lt;code&gt;SIGTSTP&lt;/code&gt;，它可以被应用程序拦截。然后应用程序可以进行例如将光标移动到屏幕底部等操作，然后使用&lt;code&gt;SIGSTOP&lt;/code&gt;将自己置于睡眠状态。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigcont&quot;&gt;&lt;span&gt;SIGCONT&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;唤醒&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 唤醒, 唤醒 + 函数调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;code&gt;SIGCONT&lt;/code&gt; 将“反挂起”（un-suspend，continue）一个停止的进程。当用户调用&lt;code&gt;fg&lt;/code&gt;命令时，它会由shell发送出去。由于 &lt;code&gt;SIGSTOP&lt;/code&gt; 不能被应用程序拦截，因此意料之外的&lt;code&gt;SIGCONT&lt;/code&gt; 信号可能表明该进程在某段时间之前被挂起，然后被唤醒。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigtstp&quot;&gt;&lt;span&gt;SIGTSTP&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;挂起&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 挂起, 忽略, 函数调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;code&gt;SIGTSTP&lt;/code&gt; 与 &lt;code&gt;SIGINT&lt;/code&gt; 和 &lt;code&gt;SIGQUIT&lt;/code&gt; 的工作原理相似，但是它使用的是 &lt;code&gt;^Z&lt;/code&gt; 字符，并且默认的操作是挂起进程。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigttin&quot;&gt;&lt;span&gt;SIGTTIN&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;挂起&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 挂起, 忽略, 函数调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;如果一个后台工作中的进程尝试从TTY设备中进行读取，TTY会向整个工作（组）发送一个 &lt;code&gt;SIGTTIN&lt;/code&gt;信号，这通常会挂起这个工作。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigttou&quot;&gt;&lt;span&gt;SIGTTOU&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;挂起&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 挂起, 忽略, 函数调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;如果一个后台工作中的进程尝试向TTY设备中进行写入，TTY会向整个工作（组）发送一个 &lt;code&gt;SIGTTIN&lt;/code&gt;信号，这通常会挂起这个工作。这种行为可以通过配置TTY关闭。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;sigwinch&quot;&gt;&lt;span&gt;SIGWINCH&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;默认操作： &lt;strong&gt;忽略&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可能的操作： 忽略, 函数调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;如前所述，TTY设备会记录终端的窗口大小，但这些信息需要手动更新。只要发生这种更新，TTY设备就会向前台工作发送 &lt;code&gt;SIGWINCH&lt;/code&gt; 。行为良好的交互式应用程序（例如编辑器）会对此作出反应，从TTY设备获取新的终端窗口大小并重绘GUI。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;译者注：我之前翻译过一篇有关于进程和信号的文章，可参考&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/liqiuhao/p/7689667.html&quot;&gt;&lt;em&gt;Linux 进程与信号的概念和操作&lt;/em&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;一个例子&quot;&gt;&lt;span&gt;一个例子&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;假设你正在编辑（基于终端的）编辑器中的文件。此时光标位于屏幕中间的某个位置，编辑器正在执行一些任务，例如对大文件执行搜索和替换操作。现在你按 &lt;code&gt;^Z&lt;/code&gt;，由于行规范已被配置为拦截此字符（&lt;code&gt;^Z&lt;/code&gt; 是一个单字节，ASCII码为26），因此你无需等待编辑器完成其任务然后从TTY设备开始读取。相反，行规范子系统会立即将 &lt;code&gt;SIGTSTP&lt;/code&gt; 发送到前台进程组。该进程组包含编辑器以及由其创建的任何子进程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;编辑器为 &lt;code&gt;SIGTSTP&lt;/code&gt; 安装（install）了一个信号处理程序，因此内核将程序执行流转移到信号处理程序代码中。通过将相应的控制序列写入TTY设备，该代码将光标移动到屏幕的最后一行。由于编辑器仍处于前台，控制序列按要求发送。随后编辑器会将 &lt;code&gt;SIGSTOP&lt;/code&gt; 发送到其自己的进程组（正如上节信号中说的那样）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;编辑器现在已经停止，&lt;code&gt;SIGCHLD&lt;/code&gt; 信号向会话领导通告这个事件，其中包括该进程的ID。当前台工作中的所有进程都被挂起时，会话领导从TTY设备读取当前配置，并将其存储起来以供以后使用。会话领导继续使用 &lt;code&gt;ioctl&lt;/code&gt; 调用将其自身安装为TTY的当前前台进程组。然后，它会打印类似 &quot;[1]+ Stopped&quot; 的内容，以通知用户工作已暂停。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此时， &lt;code&gt;ps(1)&lt;/code&gt; 会告诉您编辑器进程处于停止状态（“&lt;code&gt;T&lt;/code&gt;”）。如果我们试图使用内置shell命令&lt;code&gt;bg&lt;/code&gt;或使用 &lt;code&gt;kill(1)&lt;/code&gt; 向进程发送 &lt;code&gt;SIGCONT&lt;/code&gt;来唤醒它，编辑器将开始执行其 &lt;code&gt;SIGCONT&lt;/code&gt;信号处理程序。而该处理程序会尝试通过写入TTY设备来重新绘制编辑器的GUI界面。但现在编辑器是一个后台工作，TTY设备将不允许它进行写入。所以，TTY会给编辑器发送 &lt;code&gt;SIGTTOU&lt;/code&gt; 信号，令其再次停止。这个事件将通过使用 &lt;code&gt;SIGCHLD&lt;/code&gt;传递给会话领导（shell），而shell会再次向终端写入“[1] + Stopped”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，当我们键入&lt;code&gt;fg&lt;/code&gt;时，shell首先恢复先前保存的行规范配置。它通知TTY驱动编辑器工作应该从现在起作为前台工作。最后，它向进程组发送一个&lt;code&gt;SIGCONT&lt;/code&gt; 信号。编辑器试图重绘它的GUI，这次它不会被&lt;code&gt;SIGTTOU&lt;/code&gt; 中断，因为它现在是前台工作的一部分。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;译者注：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124334047-1334157018.gif&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;流控制与io阻塞&quot;&gt;&lt;span&gt;流控制与I/O阻塞&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124446355-2097410438.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在 &lt;code&gt;xterm&lt;/code&gt;中运行 &lt;code&gt;yes&lt;/code&gt; ，你会看到很多“&lt;code&gt;y&lt;/code&gt;”出现在你眼前。自然，&lt;code&gt;yes&lt;/code&gt;进程能够很快的产生&lt;code&gt;y&lt;/code&gt;，以至于&lt;code&gt;xterm&lt;/code&gt;来不及进行帧缓冲区更新，与X服务器通信（&lt;em&gt;译者注：&lt;/em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/X_Window_System&quot;&gt;X Window System&lt;/a&gt;）以便滚动窗口等操作。那么这些程序是如何进行配合的呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;答案在于I/O阻塞。伪终端只能在其内核缓冲区内保存一定数量的数据，当该缓冲区满并且 &lt;code&gt;yes&lt;/code&gt; 尝试调用 &lt;code&gt;write(2)&lt;/code&gt;时，&lt;code&gt;write(2)&lt;/code&gt;将被阻止，并将&lt;code&gt;yes&lt;/code&gt; 进程移至可中断的睡眠状态，直到&lt;code&gt;xterm&lt;/code&gt;能够读取缓冲中的字节。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果TTY连接到串行端口，也会发生同样的情况。假设 &lt;code&gt;yes&lt;/code&gt; 能够以比9600波特的速率传输数据，但是如果串行端口被限制在低的多速度上，内核缓冲区很快就会被填满，并且任何后续的 &lt;code&gt;write(2)&lt;/code&gt; 调用都会导致进程睡眠（或收到返回的错误号 &lt;code&gt;EAGAIN&lt;/code&gt; ，如果进程要求非阻塞I/O的话）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果我告诉过你，即使内核缓冲区中还有剩余空间，也可以主动地将TTY置于阻塞状态，更进一步的说，每个试图 &lt;code&gt;write(2)&lt;/code&gt; 到TTY的进程都会自动阻塞。那么这种功能的用途是什么？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;假设我们正在以9600波特率的速度与一些旧的VT-100通信。我们刚刚发送了一个复杂的控制序列，要求终端滚动显示。此时，终端会因执行滚动操作无法以9600波特的全速率接收新数据。实际上，UART仍然以9600波特运行，但终端中没有足够的缓冲空间来保持接收字符。现在就是将TTY置于阻塞状态的好时机。但是，我们该如何从终端做到这一点？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们已经看到，TTY设备可以被配置为给某些数据字节特殊的处理。例如，在默认配置中，收到的 &lt;code&gt;^C&lt;/code&gt; 字节不会通过&lt;code&gt;read(2)&lt;/code&gt;传递给应用程序，而是会将 &lt;code&gt;SIGINT&lt;/code&gt; 信号传递到前台工作。类似地，可以将TTY配置为对停止流和开始流做出反应，通常分别是 &lt;code&gt;^S&lt;/code&gt; （ASCII码19）和 &lt;code&gt;^Q&lt;/code&gt; （ASCII码17）。旧的硬件终端会自动传输这些字节，并期望操作系统相应地调节其数据流。这被称为流控制，这就是为什么当你偶然按下 &lt;code&gt;^S&lt;/code&gt; 时，你的&lt;code&gt;xterm&lt;/code&gt; 会“锁定”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里有一个重要的区别：写入由于流控制而停止的TTY，或者由于缺少内核缓冲区空间，只会阻塞你的进程，而从后台工作中写入TTY将导致&lt;code&gt;SIGTTOU&lt;/code&gt; 暂停整个进程组。我不知道为什么UNIX的设计师必须发明 &lt;code&gt;SIGTTOU&lt;/code&gt; 和 &lt;code&gt;SIGTTIN&lt;/code&gt; ，而不是仅仅依靠I/O阻塞，但我最好的猜测是负责工作控制的TTY驱动是为了监视和操纵整个工作——而不是其中的单个进程。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;配置tty设备&quot;&gt;&lt;span&gt;配置TTY设备&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1072319/201805/1072319-20180513124455318-67585722.jpg&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了找出你的shell调用的控制TTY，你可以使用前面说过的&lt;code&gt;ps l&lt;/code&gt;，或者运行&lt;code&gt;tty(1)&lt;/code&gt;命令。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;进程可以使用 &lt;code&gt;ioctl(2)&lt;/code&gt;读取或修改打开的TTY设备的配置。 该API在 &lt;code&gt;tty_ioctl(4)&lt;/code&gt;中有描述。 由于它是Linux应用程序和内核之间的二进制接口的一部分，它将在Linux版本迭代中得到保持。 但是，该接口是不可移植的，应用程序应该使用 &lt;code&gt;termios(3)&lt;/code&gt; 手册页中描述的POSIX包装器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我不会详细讨论 &lt;code&gt;termios(3)&lt;/code&gt; 接口的细节，但是如果你正在编写C程序并希望在 &lt;code&gt;^C&lt;/code&gt; 变成 &lt;code&gt;SIGINT&lt;/code&gt;之前拦截 &lt;code&gt;^C&lt;/code&gt; ，或者禁用行规范或字符回显，或将更改一个串的口波特率，关闭流控制等，你就会发现你需要上述的手册页（man page）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里还有一个名为 &lt;code&gt;stty(1)&lt;/code&gt;的命令行工具来操作TTY设备。 它使用的是 &lt;code&gt;termios(3)&lt;/code&gt; API。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;让我们试试吧！&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sh&quot;&gt;
&lt;span&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;stty&lt;/span&gt; -a

&lt;span class=&quot;kw&quot;&gt;speed&lt;/span&gt; 38400 baud&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rows&lt;/span&gt; 73&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;columns&lt;/span&gt; 238&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;line&lt;/span&gt; = 0&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;intr&lt;/span&gt; = ^C&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;quit&lt;/span&gt; = ^&lt;span class=&quot;dt&quot;&gt;\;&lt;/span&gt; erase = ^?&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;kill&lt;/span&gt; = ^U&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;eof&lt;/span&gt; = ^D&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;eol&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;undef&lt;span class=&quot;kw&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;eol2&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;undef&lt;span class=&quot;kw&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;swtch&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;undef&lt;span class=&quot;kw&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;start&lt;/span&gt; = ^Q&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;stop&lt;/span&gt; = ^S&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;susp&lt;/span&gt; = ^Z&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;rprnt&lt;/span&gt; = ^R&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;werase&lt;/span&gt; = ^W&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;lnext&lt;/span&gt; = ^V&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;flush&lt;/span&gt; = ^O&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;min&lt;/span&gt; = 1&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;time&lt;/span&gt; = 0&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;-parenb&lt;/span&gt; -parodd cs8 -hupcl -cstopb cread -clocal -crtscts

&lt;span class=&quot;kw&quot;&gt;-ignbrk&lt;/span&gt; brkint ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc -ixany imaxbel -iutf8

&lt;span class=&quot;kw&quot;&gt;opost&lt;/span&gt; -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0

&lt;span class=&quot;kw&quot;&gt;isig&lt;/span&gt; icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;-a&lt;/code&gt; 参数是让&lt;code&gt;stty&lt;/code&gt;显示&lt;strong&gt;所有&lt;/strong&gt;的设置。默认情况下，它将查看连接到shell的TTY设备，但可以通过&lt;code&gt;-F&lt;/code&gt;指定其他的设备。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在上面显示出的设置中，一些会改变UART参数，一些会影响行规范，一些则用于工作控制。我们先来看看第一行：&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;rows, columns&lt;/td&gt;
&lt;td&gt;TTY驱动&lt;/td&gt;
&lt;td&gt;该TTY设备的终端的大小（以字符作为基准）。基本上，它只是内核空间中的一对变量，你可以自由设置和获取。设置它们将导致TTY驱动程序向前台工作发送&lt;code&gt;SIGWINCH&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;line&lt;/td&gt;
&lt;td&gt;行规范&lt;/td&gt;
&lt;td&gt;该TTY设备的行规范. 0 代表 &lt;code&gt;N_TTY&lt;/code&gt;. 所有可用的数值在 &lt;code&gt;/proc/tty/ldiscs&lt;/code&gt;中有列出. 使用未列出的数值等价于使用 &lt;code&gt;N_TTY&lt;/code&gt;, 但是不要依赖于这一点.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;speed&lt;/td&gt;
&lt;td&gt;UART&lt;/td&gt;
&lt;td&gt;波特率。伪终端忽略这个参数。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;尝试以下操作：启动一个 &lt;code&gt;xterm&lt;/code&gt;。记下它的TTY设备（ &lt;code&gt;tty&lt;/code&gt;命令获得）及其窗口大小（由&lt;code&gt;stty -a获得&lt;/code&gt;）。接着在&lt;code&gt;xterm&lt;/code&gt;中启动 &lt;code&gt;vim&lt;/code&gt; （或其他一些全屏终端应用程序）。&lt;code&gt;vim&lt;/code&gt;编辑器会向TTY设备查询当前的终端窗口大小，以此填充整个窗口。现在，从另一个shell窗口输入：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;span&gt;&lt;code&gt;stty -F X rows Y&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;其中X是刚才获得的TTY设备，Y是终端高度的一半。这将更新内核内存中的TTY数据结构，并向编辑器发送 &lt;code&gt;SIGWINCH&lt;/code&gt; ，&lt;code&gt;vim&lt;/code&gt;将使用可用窗口区域的上半部分重绘GUI。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;code&gt;stty -a&lt;/code&gt; 输出的第二行列出了所有特殊的字符，开一个新的 &lt;code&gt;xterm&lt;/code&gt; 然后试试这个：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;span&gt;&lt;code&gt;stty intr o&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;现在，&quot;&lt;code&gt;o&lt;/code&gt;&quot;而不是 &lt;code&gt;^C&lt;/code&gt;将向前台工作发送 &lt;code&gt;SIGINT&lt;/code&gt; 。尝试运行一些程序，比如 &lt;code&gt;cat&lt;/code&gt;，并看看你能不能用 &lt;code&gt;^C&lt;/code&gt;杀死它。然后，尝试在其中输入“hello”。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;有时候，你可能会遇到退格键不起作用的Unix系统——当终端仿真器发送与TTY设备中的擦除设置不匹配的退格码（ASCII 8或ASCII 127）时，就会发生这种情况。为了解决这个问题，请设置 &lt;code&gt;stty erase ^H&lt;/code&gt; （ASCII 8）或 &lt;code&gt;stty erase ^?&lt;/code&gt; （ASCII 127）。要注意的是，许多终端应用程序使用&lt;code&gt;readline&lt;/code&gt;，这使得行规范处于原始模式，即这些应用程序不受到影响。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;最后，&lt;code&gt;stty -a&lt;/code&gt;列出了一系列开关（没有特定顺序列出）。其中一些与UART相关，一些影响线路规范行为，一些用于流量控制，一些用于工作控制。短划线（ - ）表示开关关闭;否则它是开着的。所有的开关都在stty（1）手册页中进行了解释，所以我将简单地提一下：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;icanon&lt;/strong&gt;用于将行规范切换为规则（基于行）模式。在一个新的 &lt;code&gt;xterm&lt;/code&gt;中试试这个，关闭这个模式：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;span&gt;&lt;code&gt;stty -icanon; cat&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;现在所有的行编辑字符，例如退格或者&lt;code&gt;^U&lt;/code&gt;都会停止工作。另外注意到&lt;code&gt;cat&lt;/code&gt; 会一次接受一个字符（并连续输出），而不是一次接受一行。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;echo&lt;/strong&gt; 是启用字符回显的开关（默认也是开着的）。现在重新启动规则模式（&lt;code&gt;stty icanon&lt;/code&gt;）然后试试这个：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;span&gt;&lt;code&gt;stty -echo; cat&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;当你输入时，你的终端仿真器将信息传送给内核，而内核通常会将相同的信息回显给终端仿真器，以便让你看到之前键入的内容。现在没有了字符回显，你就不能看到你输入的内容。不过我们处于熟化（cooked）模式，所以行编辑工具仍在工作。一旦你按下回车键，行规范就会把编辑缓冲区的数据传送给cat，显示出你刚刚键入的内容。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;tostop&lt;/strong&gt; 是控制后台进程是否允许写入终端的开关，先试试这个：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;span&gt;&lt;code&gt;stty tostop; (sleep 5; echo hello, world) &amp;amp;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 会使得该命令作为后台工作运行。五秒钟后，该工作将尝试写入TTY。 TTY驱动程序将使用 &lt;code&gt;SIGTTOU&lt;/code&gt;将其挂起，并且shell可能会立即报告此事件，或者发出别的提示。现在尝试下面的代码：&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;span&gt;&lt;code&gt;stty -tostop; (sleep 5; echo hello, world) &amp;amp;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;五秒钟之后，后台工作会在你当前的光标位置输出 &lt;code&gt;hello, world&lt;/code&gt; 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后, &lt;code&gt;stty sane&lt;/code&gt; 会将你的TTY设置成一个相对合理的配置。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;结语&quot;&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我希望这篇文章为你提供了足够的信息去了解TTY驱动和行规范，以及它们与终端，行编辑和工作控制之间的关系。 更多细节可以在我提到的各种手册页以及glibc手册（&lt;code&gt;info libc&lt;/code&gt;，&quot;Job Control&quot;）中找到。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后，尽管我没有足够的时间来回答所有问题，但我欢迎任何对本网站上的其他网页提出的反馈意见。 谢谢阅读！&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;译者注：更多有关于tty、shell、console的知识，可以参考&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 13 May 2018 04:52:00 +0000</pubDate>
<dc:creator>李秋豪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liqiuhao/p/9031803.html</dc:identifier>
</item>
<item>
<title>spring 整合 shiro框架 - 海小鑫</title>
<link>http://www.cnblogs.com/xiexin2015/p/9031785.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiexin2015/p/9031785.html</guid>
<description>
&lt;p&gt;　　shiro是用来干嘛的？从它的官网上（&lt;a href=&quot;http://shiro.apache.org/&quot; target=&quot;_blank&quot;&gt;http://shiro.apache.org/&lt;/a&gt;）基本可以了解到，她主要提供以下功能：&lt;/p&gt;
&lt;p&gt;　　（1）Authentication（认证）&lt;/p&gt;
&lt;p&gt;　　（2）Authorization（授权）&lt;/p&gt;
&lt;p&gt;　　（3）Session Management（会话管理）&lt;/p&gt;
&lt;p&gt;　　（4）Cryptography （加密）&lt;/p&gt;
&lt;p&gt;　　首先，认证服务，也就是说通过她可以完成身份认证，让她去判断用户是否为真实的会员。&lt;/p&gt;
&lt;p&gt;　　其次，授权服务，说白了就是“访问控制”服务，也就是让她来识别用户拥有哪些权限。再说的白一点，就是通过判断用户是什么角色，来赋予他哪些操作权限。&lt;/p&gt;
&lt;p&gt;　　然后，还有会话管理服务， 这时一个独立的Session管理框架，和我们熟知的Http Session 不太一样。&lt;/p&gt;
&lt;p&gt;　　最后，她还提供了Cryptography（加密）服务，封装了很多密码学的算法。&lt;/p&gt;

&lt;p&gt;　　今天，我就不全说了，重点说下她的 &lt;strong&gt;&lt;span&gt;会话管理功能&lt;/span&gt;&lt;/strong&gt;， 其实这个也是几乎所有的web应该都会涉及到的。&lt;/p&gt;
&lt;p&gt;　　在说shiro的会话管理服务前，先回顾下之前的会话管理我们是怎么做的。&lt;/p&gt;
&lt;p&gt;　　1、最初我们是直接用的web服务器的 Http Session的机制， 也就是用户第一次进来的话，web容器会为这个请求创建一个session，然后把这个session存储起来，通过将对应的sessionId，作为cookie传给客户端，&lt;/p&gt;
&lt;p&gt;如果客户端再次向这个服务器发送请求的话，会自动将这个sessionId带过来， 然后web服务器会根据客户端带过来的 sessionId， 判断其对于的session 是否还存在于内存中（session是有过期时间的，可以在web.xml文件里面配置），如果找不到对应的session了，说明已经过了session失效时间，这时web服务器会再次为它创建一个session，然后和之前一样，将这个新的sessionId传给客户端。&lt;/p&gt;
&lt;p&gt;　　因此，我们可以通过这种机制，在程序里管理用户的登录会话，比如我们在用户第一次登录成功后，将用户的基本信息存储在session里（比如：session.setAttribute(&quot;user&quot;, &quot;userInfo&quot;)），下次用户再次访问的时候，我们根据获取当前session里的user信息&lt;/p&gt;
&lt;p&gt;（session.getAttribute(&quot;user&quot;)），来判断用户是否过期，如果获取不到，那么提示用户重新登录。&lt;/p&gt;

&lt;p&gt;　　2、第二种方式，就是我们将存储信息的地方转移到第三方介质中，比如&lt;strong&gt;&lt;span&gt;缓存&lt;/span&gt;&lt;/strong&gt;里，memecache或者Redis都可以，这种方式主要是因为分布式系统的出现而采用的。&lt;/p&gt;
&lt;p&gt;　　这种情况下，就需要我们自己生成sessionId了，一般我们会用一个定义好的前缀&lt;span&gt;（user:login:token）再加上userid&lt;/span&gt;，或者时间戳都可以。 然后我们会将这个sessionId作为缓存的key， 用户的信息作为value，存入缓存中，并设置失效时间：&lt;/p&gt;
&lt;p&gt;　　jedisClient.set(tokenKey, JsonUtil.toJSONString(userInfo));&lt;/p&gt;
&lt;p&gt;　　jedisClient.expire(tokenKey, TOKEN_LOSE_SECONDS);&lt;/p&gt;
&lt;p&gt;　　我们还要将生成的这个tokenKey通过cookie传到客户端： CookieUtils.setCookie(request, response, &quot;&lt;span&gt;TT_TOKEN&lt;/span&gt;&quot;, tokenKey);&lt;/p&gt;
&lt;p&gt;　　这样，我们在用户下次访问的时候（定义一个拦截器），就可以从cookie里取出对应的tokenKey，然后用这个tokenKey去到缓存里取相应的值，如果获取不到，说明这个key已经失效了，提示用户重新登录。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注： tokenKey 很重要，她是连接缓存端和客户端的枢纽。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;span&gt;3、最后一种就是我们shiro方式了，思路也类似，代码挺简单的，那我就直接上代码吧：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　1）、新建一个 applicationContext-shiro.xml文件：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
    xmlns:context&lt;/span&gt;=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&lt;span&gt;
    xmlns:aop&lt;/span&gt;=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/context &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/context/spring-context-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/aop &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/tx&lt;/span&gt; &lt;span&gt;http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&lt;/span&gt;
    http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/util &lt;/span&gt;&lt;span&gt;http://www.springframework.org/schema/util/spring-util-4.0.xsd&lt;/span&gt;&lt;span&gt;&quot;&amp;gt;&lt;/span&gt;

    &amp;lt;bean id=&quot;shiroFilter&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&amp;gt;
        &amp;lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;loginUrl&quot; value=&quot;/loginPage&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;unauthorizedUrl&quot; value=&quot;/pages/unauthorized.jsp&quot;/&amp;gt;
        &amp;lt;property name=&quot;filterChainDefinitions&quot;&amp;gt;
            &amp;lt;value&amp;gt;
                /jcaptcha* =&lt;span&gt; anon
                &lt;/span&gt;/logout =&lt;span&gt; anon
            &lt;/span&gt;&amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;org.springframework.beans.factory.config.MethodInvokingFactoryBean&quot;&amp;gt;
        &amp;lt;property name=&quot;staticMethod&quot; value=&quot;org.apache.shiro.SecurityUtils.setSecurityManager&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;arguments&quot; ref=&quot;securityManager&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;bean id=&quot;securityManager&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&amp;gt;
        &amp;lt;property name=&quot;cacheManager&quot; ref=&quot;cacheManager&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;sessionManager&quot; ref=&quot;sessionManager&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;bean id=&quot;sessionManager&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.apache.shiro.web.session.mgt.DefaultWebSessionManager&quot;&amp;gt;
        &amp;lt;property name=&quot;sessionDAO&quot; ref=&quot;sessionDAO&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &lt;span&gt;&amp;lt;bean id=&quot;sessionDAO&quot; class=&quot;com.smart.core.shiro.MySessionDAO&quot;&amp;gt;&amp;lt;/bean&amp;gt;　　&lt;span&gt;//这个类是需要自己实现的&lt;/span&gt;&lt;/span&gt;
    &amp;lt;bean id=&quot;cacheManager&quot; &lt;span&gt;class&lt;/span&gt;=&quot;org.apache.shiro.cache.MemoryConstrainedCacheManager&quot;&amp;gt;&amp;lt;/bean&amp;gt;

&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2）、在web.xml 里配置相应的 filter：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
　　&amp;lt;filter&amp;gt;
        &amp;lt;filter-name&amp;gt;shiroFilter&amp;lt;/filter-name&amp;gt;
        &amp;lt;filter-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.springframework.web.filter.DelegatingFilterProxy&amp;lt;/filter-&lt;span&gt;class&lt;/span&gt;&amp;gt;
        &amp;lt;init-param&amp;gt;
            &amp;lt;param-name&amp;gt;targetFilterLifecycle&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
    &amp;lt;/filter&amp;gt;
    &amp;lt;filter-mapping&amp;gt;
        &amp;lt;filter-name&amp;gt;shiroFilter&amp;lt;/filter-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3）写一个实现类，继承 AbstractSessionDAO，实现相应的方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.jdd.core.shiro;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.smart.core.redis.RedisManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.Session;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.UnknownSessionException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.session.mgt.eis.AbstractSessionDAO;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.util.SerializationUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.io.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Collection;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MySessionDAO &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractSessionDAO {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RedisManager redisManager;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; update(Session session) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; UnknownSessionException {
        redisManager.set(SerializationUtils.serialize(session.getId().toString()), SerializationUtils.serialize(session));
        redisManager.expire(SerializationUtils.serialize(session.getId().toString()), &lt;/span&gt;60&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; delete(Session session) {
        redisManager.del(SerializationUtils.serialize(session.getId().toString()));
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Collection&amp;lt;Session&amp;gt;&lt;span&gt; getActiveSessions() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Session&amp;gt;&lt;span&gt;();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Serializable doCreate(Session session) {　　　　&lt;span&gt;//这就是第一次访问的时候，创建sessionId&lt;/span&gt;
        Serializable sid &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.generateSessionId(session);
        assignSessionId(session, sid);
        redisManager.set(SerializationUtils.serialize(session.getId().toString()), SerializationUtils.serialize(session));
        redisManager.expire(SerializationUtils.serialize(session.getId().toString()), &lt;/span&gt;60&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sid;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Session doReadSession(Serializable serializable) {　　&lt;span&gt;//这个方法其实就是通过sessionId读取session，每读一次，都要重新设置失效时间
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] aa =&lt;span&gt; redisManager.get(SerializationUtils.serialize(serializable.toString()));
        Session session &lt;/span&gt;=&lt;span&gt; (Session) SerializationUtils.deserialize(aa);
        redisManager.set(SerializationUtils.serialize(serializable.toString()), SerializationUtils.serialize(session));
        redisManager.expire(SerializationUtils.serialize(serializable.toString()), &lt;/span&gt;60&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; session;
    }
   
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4）下一步，我就是要在登录成功之后的逻辑里，获取到shiro 的session，然后将用户信息设置进去&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.smart.controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.smart.pojo.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.smart.service.UserService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.SecurityUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.mgt.SecurityManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.subject.Subject;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.ui.Model;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;

@Controller
@RequestMapping(&lt;/span&gt;&quot;/user&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserController {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
    &lt;span&gt;@Autowired
    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;private SecurityManager sm;　　&lt;span&gt;//注入SecurityManager

    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Logger logger = LoggerFactory.getLogger(UserController.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    @RequestMapping(value &lt;/span&gt;= &quot;/loginPage&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String loginPage(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;user/userLogin&quot;&lt;span&gt;;
    }

    @RequestMapping(value &lt;/span&gt;= &quot;/userLogin&quot;, method =&lt;span&gt; RequestMethod.POST)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String userLogin(@RequestParam(value=&quot;name&quot;) String name, @RequestParam(value=&quot;pwd&quot;&lt;span&gt;) String pwd, Model model){

        logger.info(&lt;/span&gt;&quot;enter userLogin...&quot;&lt;span&gt;);
        User user &lt;/span&gt;=&lt;span&gt; userService.getUserByNameAndPassword(name, pwd);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            logger.info(&lt;/span&gt;&quot;user is not exist...&quot;&lt;span&gt;);
            model.addAttribute(&lt;/span&gt;&quot;login_error&quot;, &quot;用户名或密码错误&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;user/userLogin&quot;&lt;span&gt;;
        }

        &lt;span&gt;SecurityUtils.setSecurityManager(sm);
        Subject currentUser &lt;/span&gt;&lt;/span&gt;&lt;span&gt;= SecurityUtils.getSubject();　　　　
        currentUser.getSession().setAttribute(&quot;LOGIN_USER&quot;, user);　
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;redirect:/employee/list&quot;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　获取当前用户，在shiro里是主题，然后获取对应的session，并将用户信息设置进去，是不是感觉有点像Http session的操作的样子，哈哈。&lt;/p&gt;
&lt;p&gt;　　5）、最后，定义一个springmvc 的拦截器，在拦截器里获取相应的session里的而用户信息，如果获取不到，则跳转到登录界面。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.smart.core.shiro;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.smart.pojo.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.SecurityUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.mgt.SecurityManager;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.shiro.subject.Subject;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.Logger;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.slf4j.LoggerFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.HandlerInterceptor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletResponse;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LoginInterceptor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HandlerInterceptor {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Logger logger = LoggerFactory.getLogger(LoginInterceptor.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; SecurityManager sm;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        logger.info(&lt;/span&gt;&quot;enter LoginInterceptor...&quot;&lt;span&gt;);
        HttpServletRequest request &lt;/span&gt;=&lt;span&gt; httpServletRequest;
        HttpServletResponse response &lt;/span&gt;=&lt;span&gt; httpServletResponse;
        logger.info(&lt;/span&gt;&quot;request uri===&amp;gt;&quot;+&lt;span&gt;request.getRequestURI());&lt;br/&gt;　　　　　&lt;span&gt;　//如果是登录页面的请求，则不拦截，否则会陷入死循环
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(request.getRequestURI().contains(&quot;loginPage&quot;) || request.getRequestURI().contains(&quot;userLogin&quot;&lt;span&gt;)){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            SecurityUtils.setSecurityManager(sm);
            Subject currentUser &lt;/span&gt;=&lt;span&gt; SecurityUtils.getSubject();
            &lt;span&gt;Object obj &lt;/span&gt;&lt;/span&gt;&lt;span&gt;= currentUser.getSession().getAttribute(&quot;LOGIN_USER&quot;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(obj==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                &lt;span&gt;response.sendRedirect(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;http://localhost:8080/user/loginPage&quot;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                User user &lt;/span&gt;=&lt;span&gt; (User)obj;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(user==&lt;span&gt;null&lt;/span&gt; || user.getName()==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                    &lt;span&gt;response.sendRedirect(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;http://localhost:8080/user/loginPage&quot;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            }

        }

    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {

    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {

    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　到这里就基本结束了，如果你现在直接访问主页信息的话，它会自动跳到登录页面。&lt;/p&gt;
</description>
<pubDate>Sun, 13 May 2018 04:31:00 +0000</pubDate>
<dc:creator>海小鑫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiexin2015/p/9031785.html</dc:identifier>
</item>
<item>
<title>终于等到你: 图形化开源爬虫Hawk 3发布! - FerventDesert</title>
<link>http://www.cnblogs.com/buptzym/p/9031753.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/buptzym/p/9031753.html</guid>
<description>&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/287060/201805/287060-20180512202119241-2084353771.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;超级图形化爬虫Hawk已经发布两年半时间了，2015年升级到第二版，收到上千条用户反馈(tucao)，100多个红包，总共666块五毛~一直想攒着这笔钱，去北境之王天通苑的龙德商场买最心爱的阿迪王！&lt;/p&gt;
&lt;p&gt;啥，你不知道Hawk是什么？它是智能而强大的网络数据采集工具，全图形化无需编程，一些功能强大到作者自己都不会用(这是真的)，下面的文章有更多的细节：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/buptzym/p/5454190.html&quot;&gt;第一版: 【重磅开源】Hawk-数据抓取工具：简明教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/buptzym/p/6252488.html&quot;&gt;设计Hawk背后的故事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hawk开源地址如下，记得在全世界最大的同性交友网站上给沙漠君点个star~:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Github.com/ferventdesert/Hawk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;某天夜里，一位神秘人物突然加我微信，知道我是Hawk的设计者之后，二话不说就发了200块红包！在确认对方不是仙人跳之后。我赶紧给这位客户老爷千恩万谢，明天可以加鸡腿了！&lt;/p&gt;
&lt;p&gt;这位VIP客户跟我语音聊了接近一个小时，在无数条对Hawk的赞美之后，话锋一转，说“你这Hawk用户体验好差，界面太丑了，就不能好好优化一下么？”&lt;/p&gt;
&lt;p&gt;我说：好啊，你来提需求，我来改？我们一拍即合！这位神秘人物，就叫他升哥吧(可惜不是妹子啊)&lt;/p&gt;
&lt;p&gt;从17年10月份开始，我们开始了你织布来我缝衣的模式（好哲♂学），升哥负责测试，用户体验，提需求；我来负责改代码。宝刀未老的沙漠君竟然还能记得四五年前写的C#代码！平时工作太太太太忙了，只能抽周六日坐在马桶上优化代码，差点搞成前列腺炎！平日我们会在地铁和公交上，通过微信讨论各种体验细节，画风是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/buptzym/q5r2hq6dqfdwq7kpx46bs4r4/image.png&quot; alt=&quot;image.png-517.5kB&quot;/&gt;{:height=&quot;100px&quot; width=&quot;400px&quot;}&lt;/p&gt;
&lt;p&gt;这样的聊天记录少说上万条，我们脑暴更好的体验，更快的算法，抠每个交互细节，在有限的时间内尽可能打磨和优化Hawk这款产品。后来参与内测的同学越来越多，我也收到了更多的反馈。&lt;/p&gt;
&lt;p&gt;时间过得好快，朝鲜改革开放了，杭州买房要摇号了，半年多瞬间过去了。经过无数个“死也不改版”，拥有多个重大功能更新，两百多个体验升级后，Hawk3总算千呼万唤屎出来啦！&lt;/p&gt;
&lt;p&gt;那Hawk3带来哪些令客官老爷们吃惊的体验呢？我们重点说明Hawk3强化的功能，已有的介绍可参考之前的文章哦。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/287060/201805/287060-20180512201642686-325007988.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;更智能的网页采集器&quot;&gt;1. 更智能的网页采集器&lt;/h2&gt;
&lt;p&gt;输入网址，点击【手气不错】，Hawk就会自动将所有高价值的数据表提取出来，相比上一代，更是支持智能排序和自定义，动动鼠标，就能在多个结果间来回筛选，点击确定就完成了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/287060/201805/287060-20180512203827617-1470633207.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;手气不错不仅能列表，还能支持详情页，在链家页面上随便输入一个信息，点手气不错，房产的详细信息就都出来了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/287060/201805/287060-20180512221426878-671049210.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;网页采集器不仅支持xpath，更能混合使用selector语法，搜索关键词还能实现页面自动定位跳转高亮，智能地让你想哭！ 除了显示html源码，还能以浏览器模式预览！&lt;/p&gt;
&lt;h2 id=&quot;更易用的数据清洗&quot;&gt;2. 更易用的数据清洗&lt;/h2&gt;
&lt;p&gt;Hawk最引以为傲的功能是：用户可组装灵活的数据清洗任务，先洗菜再切菜，最后扔锅里爆炒，所见即所得。&lt;/p&gt;
&lt;p&gt;Hawk3大幅度改进了用户体验，模仿播放器设计，你可以对任务的各个模块灵活修改，快进后退！处理数据就像播放岛国大片一样流畅刺激！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/287060/201805/287060-20180512223428072-1414269646.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以将多个数据清洗任务互相调用，实现更复杂和高级的功能，新版提供了对子任务的更友好的配置界面，让你像写Python函数一样实现子任务。Hawk调用Python实现自定义处理的功能也得到了增强，支持引入一部分第三方库，处理数据更加灵活。&lt;/p&gt;
&lt;p&gt;Hawk同样大大强化了调试功能，能够实时监控web请求数和频次，分析任务中模块的工作和异常，快速确定问题，再也不用担心一脸懵逼找不到bug了!&lt;/p&gt;
&lt;h2 id=&quot;两百多个微创新&quot;&gt;3. 两百多个微创新！&lt;/h2&gt;
&lt;p&gt;一款软件，增加新功能不是重点，而是打磨核心功能，用无数个细节编织出的微创新。你会发现：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;以往需要手工输入的文本框现在都支持下拉菜单自动提示&lt;/li&gt;
&lt;li&gt;能更容易地暂停和取消正在运行的任务&lt;/li&gt;
&lt;li&gt;错误弹窗更加人性化，支持拼音快速检索模块&lt;br/&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;超快的导出excel数据库&quot;&gt;4. 超快的导出Excel/数据库&lt;/h2&gt;
&lt;p&gt;早期版本的Hawk，大数据导出Excel卡得让男人沉默，女人流泪。优化后的Excel导出速度提升了15倍，百万级数据都轻轻松松。&lt;/p&gt;
&lt;p&gt;更何况，Hawk还支持了文件级数据库Sqlite，千万数据毫无压力。完全不需要配置，再也不用担心数据太多爆内存了！&lt;/p&gt;
&lt;h2 id=&quot;想自动化部署的客官有福了&quot;&gt;5. 想自动化部署的客官有福了！&lt;/h2&gt;
&lt;p&gt;新的Hawk支持从Windows命令行模式执行，大概是下面的样子:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;cmd&amp;gt; HawkScheduler project.xml task_name&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Hawk图形界面上设计工程，命令行输入工程名和任务名，即可直接执行任务，速度更快更轻量，但记得用执行器把数据导出到数据库或者文件里哦！&lt;/p&gt;
&lt;p&gt;微软的跨平台战略太不给力，让Hawk支持Linux和Mac的成本实在太高了，所以目前依然只能在Windows上运行。由于更新较多，新的Hawk基本上不能支持以前的工程文件，好在爬虫配置一遍也不是费事，对吧^-^&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;哎呀太多了写不完，在使用过程中，你能慢慢发现这些细节和惊喜。&lt;/p&gt;
&lt;p&gt;考虑到之前用户的使用习惯，大部分改进都是平滑的，但早期工程已经不兼容。界面依然很工科癌。说界面丑的妹子欢迎给我们提意见~&lt;/p&gt;
&lt;p&gt;通过阅读文档和视频，研究教学工程，5分钟就能上手使用，半小时就能成为老司机。你肯定迫不及待地想问我在哪里下载？点击GitHub地址，即可到达项目主页，那里有下载地址，文档，视频教程，以及你想要的全部资料！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/287060/201805/287060-20180512224642865-586244898.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于时间极度紧张，可能视频和文档还有不完全之处，请关注“沙漠之鹰”微信公众号，Hawk的消息会在第一时间推送给你~最后，如果使用中有任何问题和建议，欢迎加入QQ群546750531，或者在GitHub上发言答疑，如果你是程序员，那麻烦给这个开源项目点个star呗~~&lt;/p&gt;
&lt;p&gt;祝使用Hawk愉快！&lt;/p&gt;
</description>
<pubDate>Sun, 13 May 2018 04:20:00 +0000</pubDate>
<dc:creator>FerventDesert</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/buptzym/p/9031753.html</dc:identifier>
</item>
<item>
<title>HTTP协议、Ajax请求 - 杨。。</title>
<link>http://www.cnblogs.com/yanglianwei/p/9031640.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yanglianwei/p/9031640.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　今天这篇文章呢，主要讲的就是关于HTTP协议、Ajax请求以及一些相关的小知识点。虽然内容不算多，可是是很重点的东西~&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;HTTP协议&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1. http:超文本传输协议。简单、快速、灵活、无状态、无连接。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2. url:统一资源定位符。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     组成部分：协议名://主机名(主机ip):端口号/项目资源地址?传递参数的键值对#锚点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     eg: http://192.168.5.151:8080/js/index.php?name=zhangsan#top&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     ① ip地址在同一网段是唯一的。如果是在公网中，整个公网的i是唯一的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     ② 端口号默认是:80，可以省略不写。常见的端口号: 80 Apache 8080 tomcat&lt;/span&gt;&lt;br/&gt;&lt;span&gt;     ③ 本机ip：localhost 或者 127.0.0.1&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;【JSON 对象与JSON字符串】&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1. JSON对象：JSON对象就是键值对的集合，键与值之间用:分隔，多对键值对之间用,分隔。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    注意：JSON对象，要求键必须使用&quot;&quot;包裹的字符串。''无效！！！&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2. JSON字符串：将JSON对象，用字符串的形式进行包裹。可用单引号也可用双引号;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    如果用&quot;&quot;包裹，里面用&quot;&quot;包裹的键的双引号要用\转义符转移。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; jsonObj='{&quot;name&quot; : &quot;zhangsan&quot;,age: 12,sex : &quot;男&quot;}'; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;报错，不能不用双引号包起来&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; jsonObj=&quot;{'name' : 'zhangsan','age': 12,'sex' : &quot;男&quot;}&quot;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;报错，键必须用双引号包起来&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; jsonObj=&quot;{'name' : 'zhangsan',age: 12,sex : &quot;男&quot;}&quot;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;报错，不能单引号包着双引号&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3. JSON对象与JSON字符串的相互转换：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    ① 对象转字符串：JSON.stringify(obj)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    ② 字符串转对象：JSON.parse(jsonObj)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    JQuery也提供了字符串转对象的方法：$.parseJSON(jsonObj)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;console.log($.parseJSON(jsonObj)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;JSON对象转为字符串&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; jsonObj='{&quot;name&quot; : &quot;zhangsan&quot;,&quot;age&quot;: 12,&quot;sex&quot; : &quot;男&quot;}'&lt;span&gt;;
console.log(jsonObj);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;本身打印出来是个字符串&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; obj=JSON.parse(jsonObj); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;字符串转对象&lt;/span&gt;
&lt;span&gt;console.log(obj);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str=JSON.stringify(obj); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象转字符串&lt;/span&gt;
console.log(str);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;4. JSON数组：将多个JSON对象组成数组的形式存放，称为JSON数组。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    JSON数组可以和JSON对象相互嵌套，也就是说，JSON对象的值可以是JSON数组。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以直接接收数组，数组内部有多个对象&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; jsonArr=&lt;span&gt;[
    {
     &lt;/span&gt;&quot;name&quot;:&quot;zhangsan&quot;&lt;span&gt;,
     &lt;/span&gt;&quot;hobby&quot;:[{&quot;吃&quot;:&quot;水果&quot;,&quot;玩&quot;:&quot;游戏&quot;&lt;span&gt;}]
    },
    {
     &lt;/span&gt;&quot;name&quot;:&quot;zhangsan&quot;&lt;span&gt;,
     &lt;/span&gt;&quot;hobby&quot;:[{&quot;吃&quot;:&quot;水果&quot;,&quot;玩&quot;:&quot;游戏&quot;&lt;span&gt;}]
    },
    {
     &lt;/span&gt;&quot;name&quot;:&quot;zhangsan&quot;&lt;span&gt;,
     &lt;/span&gt;&quot;hobby&quot;:[{&quot;吃&quot;:&quot;水果&quot;,&quot;玩&quot;:&quot;游戏&quot;&lt;span&gt;}]
    }
];
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; strArr=JSON.stringify(jsonArr); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;JSON对象转数组&lt;/span&gt;
&lt;span&gt;console.log(strArr);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; jsonArr1=JSON.parse(strArr); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;JSON数组转为对象&lt;/span&gt;
console.log(jsonArr1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;h2&gt;&lt;span&gt;后台请求数据的方法&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1. $.load():选中当前界面的一个DOM节点。并在当前DOM节点中加载一块HTML代码片段； &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    接受的参数：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;   ① 可以是一个html文件的地址，表示将整个的html文件加载到当前区域；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;   $(&quot;#div1&quot;).load(&quot;test.html&quot;);&lt;/span&gt;&lt;br/&gt;&lt;span&gt;   ② 可以是一个html文件+各种选择器，表示选择该页面的指定区域进行加载。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;   $(&quot;#div1&quot;).load(&quot;test.html #ul&quot;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. $.ajax():是JQuery中最底层的ajax函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    参数接收一个大对象，用对象的键值对表示ajax请求的相关设置：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   ① type:表示Ajax请求的方法，可以是get和post&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   ② url:表示请求的后台url地址。&lt;/p&gt;
&lt;p&gt;   ③ success：表示请求成功的回调函数。回调函数将接受三个参数，其中第一个参数是请求成功返回的数据。后两个不用管不重要。&lt;/p&gt;
&lt;p&gt;                         使用数据时，需注意返回的数据是JSON字符串还是JSON对象。&lt;/p&gt;
&lt;p&gt;   ④ error:当请求失败时执行的回调函数。&lt;/p&gt;
&lt;p&gt;   ⑤ complete:请求完成后，无论成功或者失败都会执行的回调函数.。&lt;/p&gt;
&lt;p&gt;   ⑥ statusCode:接收一个对象，对象的键是各种status状态码，对象的值表示每种状态码对应的回调函数。&lt;/p&gt;
&lt;p&gt;   ⑦ async:设为true表示异步请求(默认)；设为false表示同步请求。&lt;/p&gt;
&lt;p&gt;   ⑧ data：请求时，向后台请求的数据，是一个对象类型，以键值对的形式分别表示 name:value。非常常用！！！！！&lt;/p&gt;
&lt;p&gt;   ⑨ dataType：与其返回的数据类型格式。常见的有 JSON/text/html&lt;/p&gt;
&lt;p&gt;   ⑩ timeout：设置请求超时时间。&lt;br/&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;$.ajax({
    type:&lt;/span&gt;&quot;get&quot;&lt;span&gt;,
    url:&lt;/span&gt;&quot;java1801.json?age=14&quot;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;往后台传参(小数据)，也可以在后面加上?age=14&lt;/span&gt;
    async:&lt;span&gt;true&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否进行异步请求，不写默认是异步&lt;/span&gt;
    data:{ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;往后台传参，以对象形式。发送到服务器的数据，将自动转换为请求字符串格式。&lt;/span&gt;
        &quot;name&quot;:&quot;zhangsan&quot;&lt;span&gt;
    },
    dataType:&lt;/span&gt;&quot;text&quot;&lt;span&gt;,
    timeout:&lt;/span&gt;1,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置请求超时时间。默认就行，不用写&lt;/span&gt;
    success:&lt;span&gt;function&lt;/span&gt;(data,textStatus,jqXHR){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求成功返回的回调函数&lt;/span&gt;
        console.log(data); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回一个对象&lt;/span&gt;
        console.log(textStatus);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求成功返回success&lt;/span&gt;
        console.log(jqXHR); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;jqXHR对象&lt;/span&gt;
        console.log(jqXHR.responseText) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回字符串&lt;/span&gt;
        console.log(jqXHR.responseJSON) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回对象&lt;/span&gt;
&lt;span&gt;    },
    error:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;(XMLHttpRequest,textStatus,errorThrown){&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 请求失败返回的回调函数&lt;/span&gt;
        console.log(XMLHttpRequest); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;XMLHttpRequest对象&lt;/span&gt;
        console.log(textStatus); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;错误信息：error、timeout&lt;/span&gt;
        console.log(errorThrown);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;捕获的异常对象：Not Found&lt;/span&gt;
&lt;span&gt;    },
    complete:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;(XHR,TS){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回success或者error ，不管请求成不成功都会执行&lt;/span&gt;
&lt;span&gt;        console.log(XHR);
        console.log(TS);
    },
    statusCode:{ &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求成功或失败的状态码&lt;/span&gt;
        200:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            console.log(&lt;/span&gt;&quot;请求成功！&quot;&lt;span&gt;)
        },
        &lt;/span&gt;404:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            console.log(&lt;/span&gt;&quot;页面没有找到&quot;&lt;span&gt;)
        }
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;【检测页面中所有Ajax状态】&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;执行回调函数。可做了解。。。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$(document).ajaxStart(&lt;span&gt;function&lt;/span&gt;(){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Ajax请求开始时执行函数&lt;/span&gt;
&lt;span&gt;    console.log(ajaxStart);
});
$(document).ajaxError(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;(){   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Ajax请求发生错误时执行函数&lt;/span&gt;
&lt;span&gt;    console.log(ajaxError);
});
$(document).ajaxSend(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;(){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Ajax请求发送前执行函数&lt;/span&gt;
&lt;span&gt;    console.log(ajaxSend);
});
$(document).ajaxStop(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;(){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Ajax请求结束时执行函数&lt;/span&gt;
&lt;span&gt;    console.log(ajaxStop);
});
$(document).ajaxSuccess(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;(){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Ajax请求成功时执行函数&lt;/span&gt;
&lt;span&gt;    console.log(ajaxSuccess);
});&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3. $.get():在$.ajax()的基础上，进行封装，默认使用get请求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    接受四个参数：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    ① 请求的后台url；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    ② 传递给后台的数据，对象类型。相当于ajax中的data属性；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    ③ 请求成功的回调函数，相当于ajax中的success；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;    ④ 预期返回的数据类型，相当于ajax中的dataType；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4. $.post():使用方法同$.get()&lt;/p&gt;
&lt;p&gt;5. $.getJSON():通过get方式，请求JSON数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$.get(&quot;java.json&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){ 
    console.log(data);
},&lt;/span&gt;&quot;text&quot;&lt;span&gt;);

$.post(&lt;/span&gt;&quot;java.json&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
    console.log(data);
},&lt;/span&gt;&quot;json&quot;&lt;span&gt;);
            
$.getJSON(&lt;/span&gt;&quot;java.json&quot;,&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
    console.log(data);
});&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;span&gt;【Ajax请求三大过程】&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;同步：页面代码在遇到JS代码时被阻断，等待JS代码请求完全完成后继续执行。&lt;/p&gt;
&lt;p&gt;异步：页面代码在遇到JS代码时不会被阻断，等待JS代码请求完成后立即插入继续执行。&lt;/p&gt;
&lt;p&gt;          &amp;lt;script src=&quot;js/jquery-1.10.2.js&quot;  async=&quot;async&quot;&amp;gt;&amp;lt;/script&amp;gt;  //异步&lt;/p&gt;
&lt;p&gt;延迟：页面代码在遇到JS代码时不会被阻断，等到JS代码请求完成后再等到页面代码加载完成后才能执行。&lt;/p&gt;
&lt;p&gt;           &amp;lt;script src=&quot;js/jquery-1.10.2.js&quot;  defer=&quot;defer&quot;&amp;gt;&amp;lt;/script&amp;gt;  //延时&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1342408/201805/1342408-20180513101602197-1020968046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;常见的状态码&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;200-请求成功&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;202-服务器接受请求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;400-代码错误&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;403-访问被拒绝&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;404-页面没找到&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;500-服务器错误&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;501-服务器不支持请求的功能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;505-服务器不支持&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以下我附上HTTP状态码详解的链接，里面有更加清楚的解释，大家可以自行查看：&lt;/span&gt;&lt;a href=&quot;http://tool.oschina.net/commons?type=5&quot; target=&quot;_blank&quot;&gt;http://tool.oschina.net/commons?type=5&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 13 May 2018 03:44:00 +0000</pubDate>
<dc:creator>杨。。</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yanglianwei/p/9031640.html</dc:identifier>
</item>
</channel>
</rss>