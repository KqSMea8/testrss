<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>预告 — 容器平台技术 - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/7834113.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/7834113.html</guid>
<description>&lt;p&gt;&lt;span&gt;容器我们已经学了大半年，先回顾一下容器生态系统：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171112-1510474320332077046.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171112-1510474320332077046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;容器生态系统包含三个部分：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;容器核心知识，包括架构、镜像、容器、网络和存储。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;容器平台技术，包括容器编排引擎、容器管理平台和基于容器的 PaaS。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;容器支持技术，包括多主机管理、跨主机网络方案、监控和日志管理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;掌握了这三部分知识，就打下了在工作中应用容器的坚实基础。&lt;/p&gt;
&lt;p&gt;前面我们已经完成了第1和第3部分，接下来将&lt;span&gt;开始&lt;/span&gt;学习平台技术。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171112-1510474323007099072.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171112-1510474323007099072.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;容器编排引擎、容器管理平台和基于容器的 PaaS 在大规模生产部署中占有相当重要的位置。其中容器编排引擎是核心，而最重要的编排引擎则是 &lt;strong&gt;Kubernetes&lt;/strong&gt;，这当然也是这个教程的重中之重。&lt;/p&gt;
&lt;p&gt;下面是本&lt;span&gt;教程的&lt;/span&gt;推荐使用方法：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;跟着教程进行操作，在实践中掌握核心技能。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在之后的工作中，可将本教程作为参考资料，按需查找相关知识点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;CloudMan 将继续与大家一起实现和提升自我价值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;下一节我们&lt;/span&gt;将从 Docker Swarm 开始。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171010-1507627732322012171.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171010-1507627732322012171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 23:27:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/7834113.html</dc:identifier>
</item>
<item>
<title>基于Cef内核的多店铺登录器(含源码) - 小特工作室</title>
<link>http://www.cnblogs.com/xiyang1011/p/7837151.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiyang1011/p/7837151.html</guid>
<description>&lt;p&gt;        公司是做电商的，在速卖通平台上开了若干店铺，每天都需要登录店铺打理，如：发货提交、获取运单号等。多个店铺的情况下，同时使用浏览器就会非常繁琐，如：要记住帐户名和密码，还要在不同店铺间切换。如果能够制作一个多店铺登录器，就可以解决上述问题。好了，背景描述完毕，下面开干&lt;/p&gt;
&lt;p&gt;        首先想到的是微信原生的WebBrowser组件，第一轮开发结束测试，发现帐户间会互相干扰，就是店铺A登录成功后，再登录店铺B的话，店铺A的数据会被冲掉。此控件直接pass，继续新尝试&lt;/p&gt;
&lt;p&gt;        后来又找到一个将WebBrowser二次封装的控件，好像不能解决弹出页面，第二轮也宣告失败，继续尝试&lt;/p&gt;
&lt;p&gt;        第三轮，尝试使用Cef控件，这是基于Google浏览器的内核，开发完成测试，发现基本能满足所要求的功能&lt;/p&gt;
&lt;p&gt;        先来看看界面是啥样子？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://images2017.cnblogs.com/blog/70305/201711/70305-20171115065208843-1263581712.jpg&quot;&gt;&lt;img title=&quot;clip_image002&quot; src=&quot;http://images2017.cnblogs.com/blog/70305/201711/70305-20171115065209062-1326043389.jpg&quot; alt=&quot;clip_image002&quot; width=&quot;693&quot; height=&quot;433&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码本身并不多，关键的技术点有以下&lt;/p&gt;
&lt;p&gt;1， Winform应用启动时，args参数使用&lt;/p&gt;
&lt;p&gt;2， 双击树控件结点时，判断此结点的地址是否已打开，若未打开，则再启动一个exe程序&lt;/p&gt;
&lt;p&gt;3， 登录帐号和页面大小和位置能够随时记录，保证下次登录时，和上次一样&lt;/p&gt;

&lt;p&gt;下面逐个技术点说明&lt;/p&gt;
&lt;p&gt;1， args参数&lt;/p&gt;
&lt;p&gt;解析代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
//3,打开应用程序.注:根据外部传入参数.默认登录器
//登录器格式:功能类型 内外网 登录用户 选中店铺
if (args != null &amp;amp;&amp;amp; args.Length &amp;gt; 0)
{
    //FormUIHelper.ShowMessage(&quot;args参数:&quot; + JsonHelper.GetJsonByObject(args));

    if (args.Length &amp;gt;= 1)
    {
        //默认登录器
        string actionTypeTemp = args[0];
        int logonType = StringHelper.ObjectToInt(actionTypeTemp, 1);

        BaseHelper.ActionType = logonType;
    }
    if (args.Length &amp;gt;= 2)
    {
        List&amp;lt;string&amp;gt; listP = new List&amp;lt;string&amp;gt;() { &quot;In&quot;, &quot;Out&quot; };
        string logonType = args[1];
        if (!listP.Contains(logonType))
        {
            logonType = &quot;Out&quot;;
        }
        BaseHelper.LogonType = EnumHelper.ToEnumObject&amp;lt;MetaCodeEnum.LogonType&amp;gt;(logonType);
    }
    if (args.Length &amp;gt;= 3)
    {
        CurrentUserInfo.UserCode = args[2];
        CurrentUserInfo.UserName = args[2];
        CurrentUserInfo.UserInfo = new UserInfo()
        {
            UserCode = CurrentUserInfo.UserCode,
            UserName = CurrentUserInfo.UserName
        };
    }
    if (args.Length &amp;gt;= 4)
    {
        CurrentAppInfo.ShopCode = args[3];
    }
    if (args.Length &amp;gt;= 5)
    {
        CurrentAppInfo.ItemSnapUrl = args[4];
    }
}
else
{
    //默认登录器
    BaseHelper.ActionType = 1;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
//若没有找到,则直接打开exe文件
string message = string.Empty;
string fileName = CurrentAppInfo.AppPath + @&quot;\&quot; + CurrentAppInfo.AppName;
string args = BaseHelper.ActionType + &quot; &quot; + BaseHelper.LogonType.ToString() + &quot; &quot; + CurrentUserInfo.UserCode + &quot; &quot; + shopCode;
SystemHelper.OpenFile(fileName, args);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2， 启动exe程序&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
foreach (TreeNode node in treeShop.Nodes)
{
    foreach (TreeNode cilNode in node.Nodes)
    {
        if (cilNode.Text != shopName)
        {
            string title = shopName + &quot;  &quot; + cilNode.Text;
            IntPtr handleID1 = SystemHelper.FindWindow(null, title);
            if (handleID1.ToInt64() &amp;gt; 0)
            {
                //窗体最小化
                SystemHelper.ShowWindow(handleID1, 2);
            }
        }
    }
}

//再判断页面标题是此标题的页面是否已经打开
IntPtr handleID = SystemHelper.FindWindow(null, formTitle);
if (handleID.ToInt64() &amp;gt; 0)
{
    //说明已经打开
    SystemHelper.SwitchToThisWindow(handleID, true);
}
else
{
    //若没有找到,则直接打开exe文件
    string message = string.Empty;
    string fileName = CurrentAppInfo.AppPath + @&quot;\&quot; + CurrentAppInfo.AppName;
    string args = BaseHelper.ActionType + &quot; &quot; + BaseHelper.LogonType.ToString() + &quot; &quot; + CurrentUserInfo.UserCode + &quot; &quot; + shopCode;
    SystemHelper.OpenFile(fileName, args);
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3， 记录用户配置项&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;56&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#region (OK)窗体Resize,位置保存相关代码
private void FormLogonerMain_ResizeBegin(object sender, EventArgs e)
{
    //窗体Resize开始，拖动调整窗体大小时触发
    resizing = true;
}

private void FormLogonerMain_ResizeEnd(object sender, EventArgs e)
{
    //窗体Resize结束，保存最新的窗体大小和位置
    this.lonService.SetUserSettingsValue(&quot;x&quot;, this.Location.X.ToString());
    this.lonService.SetUserSettingsValue(&quot;y&quot;, this.Location.Y.ToString());
    this.lonService.SetUserSettingsValue(&quot;Width&quot;, this.Size.Width.ToString());
    this.lonService.SetUserSettingsValue(&quot;Height&quot;, this.Size.Height.ToString());

    resizing = false;
}

private void FormLogonerMain_SizeChanged(object sender, EventArgs e)
{
    //窗体状态变化处理
    if (WindowState == FormWindowState.Maximized)
    {
        this.lonService.SetUserSettingsValue(&quot;Maximize&quot;, &quot;true&quot;);
    }
    else if (WindowState == FormWindowState.Normal)
    {
        this.lonService.SetUserSettingsValue(&quot;Maximize&quot;, &quot;false&quot;);

        if (resizing == false)
        {
            if (this.lonService.CheckUserConfigValue())
            {
                int width = int.Parse(this.lonService.GetUserSettingsValue(&quot;Width&quot;));
                int height = int.Parse(this.lonService.GetUserSettingsValue(&quot;Height&quot;));
                int x = int.Parse(this.lonService.GetUserSettingsValue(&quot;x&quot;));
                int y = int.Parse(this.lonService.GetUserSettingsValue(&quot;y&quot;));

                this.Location = new Point(x, y);
                this.Size = new Size(width, height);
            }
            else
            {
                resizing = true;
                string swidthRateTemp = ConfigHelper.GetAppSettingsValue(&quot;WidthRate&quot;);
                string sheightRateTemp = ConfigHelper.GetAppSettingsValue(&quot;HeightRate&quot;);
                double douWidthRate = StringHelper.ObjectToDouble(swidthRateTemp, 0.95);
                double douHeightRate = StringHelper.ObjectToDouble(sheightRateTemp, 0.95);
                FormUIHelper.SetFormSizeAndLocationCenter(this, douWidthRate, douHeightRate);

                this.lonService.SetUserSettingsValue(&quot;x&quot;, this.Location.X.ToString());
                this.lonService.SetUserSettingsValue(&quot;y&quot;, this.Location.Y.ToString());
                this.lonService.SetUserSettingsValue(&quot;Width&quot;, this.Size.Width.ToString());
                this.lonService.SetUserSettingsValue(&quot;Height&quot;, this.Size.Height.ToString());

                resizing = false;
            }
        }
    }
}

private void FormLogonerMain_Activated(object sender, EventArgs e)
{
    //在窗体激活时，将蓝色的当前店铺置为选中店铺
    foreach (TreeNode node in treeShop.Nodes)
    {
        foreach (TreeNode cilNode in node.Nodes)
        {
            if (cilNode.ForeColor == Color.Blue)
            {
                treeShop.SelectedNode = cilNode;
            }
        }
    }
}
#endregion
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;核心代码就是这些，程序本身已经封装成一个产品，使用方法参考下面的地址，而且永久免费！！！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/xiyang1011/p/7837148.html&quot; target=&quot;_blank&quot;&gt;登录器下载地址&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 14 Nov 2017 22:52:00 +0000</pubDate>
<dc:creator>小特工作室</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiyang1011/p/7837151.html</dc:identifier>
</item>
<item>
<title>8小时与8节课 - stoneniqiu</title>
<link>http://www.cnblogs.com/stoneniqiu/p/7833349.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stoneniqiu/p/7833349.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/417688/201711/417688-20171114164603687-2024562624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;辞去程序员的工作已经有一个半月，十一假期过后一直在学校学习。这段时间有两句话颇有感触，一句是专英老师说的：“+1班有这样的到课率我已经受宠若惊了，本科生有三分之一到课率就不错了。”，还有一句是导航老师说的：“可能是大家知道找工作的艰辛，所以大家都来了，听课都很认真，不像本科宝宝们，即使来了也只关心他的王者荣耀”。&lt;/p&gt;
&lt;p&gt;的的确确，培训班每堂课的到课率都很满，因为中途还添了一些学生，教室坐不下，只好去隔壁搬来椅子坐在最后面。这样的一个班，有研究生也有本科生，有英语专业的，也有电子专业的，有的工作了好几年比如我，有的是校招进入民航圈的，但无论怎样，学习态度真的是很好。我想正如导航老师说的那样，是知道找工作的艰辛。再学一个专业，不说耗费的时间和精力，而是等于重新开始，如若学习不好，最终没有达标，未来工作就丢了。加上大部分的学生都是自己先垫付的近2万的学费，不能达标，也是无法报销的；另外所学都是和未来工作紧密相关的，现在学好点，未来就少走弯路少犯错。所以大部分人没有选择，只有好好学。&lt;/p&gt;
&lt;h4&gt;行为与代价&lt;/h4&gt;
&lt;hr/&gt;&lt;p&gt;其实大家也是从本科过来的，本科那会儿逃课是常态。大学四年，基本上都不清楚未来会在什么行业工作，在哪个城市生活，不清楚所学知识在未来的实用性，最明确的短期目标无非就是应付考试，而考试基本上都已经套路化了，期末老师画画重点，再找历年习题做一做就ok了。所以平时逃逃课没有什么大不了的。因此，逃课与不逃课只是付出的直接代价不同罢了。那间接的代价呢，就是失去了课堂上老师教授的知识。&lt;/p&gt;
&lt;p&gt;一个学期就四个月多，要学8门专业课，让一个人去自学简直太难了，特别是专业课，老师的讲授非常受用，比如专英课，除了讲解语法、行业规则还会纠正你的发音、分析行业案例，比如这次特朗普来华，北京管制与空军一号对接，我们的专英老师就整理了这次陆空对话的录音，并分析学习；有的老师上课很生动耐心，一个知识点讲到你理解为止，而不必去死记公式定理。这些太难得了，如果这些时间去打游戏，就太不值得。老师所授有章有法，脉路清晰，有老师教真是件幸福的事情。步入工作之后，想要找个大牛带带，往往求之不得。突击性记忆的一些东西，考试完了基本上也就扔了，理解性，关联性的知识会在脑海里根深蒂固，而且还会生长。所以本科生应该珍惜这样的时光。&lt;/p&gt;
&lt;p&gt;上班的时候一天8小时，加班不多，现在在学校课满的时候一天8节课，再上上自习，节奏都蛮相似。但内心很渴望早日学成归去，毕竟这个年龄是被需要的时候。&lt;/p&gt;

</description>
<pubDate>Tue, 14 Nov 2017 22:43:00 +0000</pubDate>
<dc:creator>stoneniqiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stoneniqiu/p/7833349.html</dc:identifier>
</item>
<item>
<title>Docker容器 - 姚红</title>
<link>http://www.cnblogs.com/yaohong/p/7836701.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaohong/p/7836701.html</guid>
<description>&lt;h2&gt;&lt;span class=&quot;fontstyle0&quot;&gt;一：什么是容器&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;如果容器理解为独立运行的&lt;span&gt;一个或一组应用&lt;/span&gt;，以及它们的&lt;span&gt;运行态环境&lt;/span&gt;。 而虚拟机则为可理解为跑在上面的应用。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;fontstyle0&quot;&gt;二：创建容器&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;创建文件名为&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile的空目录&lt;/code&gt;，将以下三个文件复制到其中。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; 1.添加文件&lt;/h3&gt;
&lt;p&gt;    Dockerfile文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
# Use an official Python runtime as&lt;span&gt; a parent image
FROM python:2.7-&lt;span&gt;slim

# Set the working directory to /&lt;span&gt;app
WORKDIR /&lt;span&gt;app

# Copy the current directory contents into the container at /&lt;span&gt;app
ADD . /&lt;span&gt;app

# Install any needed packages specified in&lt;span&gt; requirements.txt
RUN pip install --trusted-host pypi.python.org -&lt;span&gt;r requirements.txt

# Make port 80 available to the world outside this&lt;span&gt; container
EXPOSE 80&lt;span&gt;

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD [&quot;python&quot;, &quot;app.py&quot;&lt;span&gt;]&lt;br/&gt;# Set proxy server, replace host:port with values for&lt;span&gt; your servers
ENV http_proxy host:port
ENV https_proxy host:port&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Flask
Redis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
from&lt;span&gt; flask import Flask
from&lt;span&gt; redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host=&quot;redis&quot;, db=0, socket_connect_timeout=2, socket_timeout=2&lt;span&gt;)

app =&lt;span&gt; Flask(__name__)

@app.route(&quot;/&quot;&lt;span&gt;)
def hello():
    try&lt;span&gt;:
        visits = redis.incr(&quot;counter&quot;&lt;span&gt;)
    except RedisError:
        visits = &quot;&amp;lt;i&amp;gt;cannot connect to Redis, counter disabled&amp;lt;/i&amp;gt;&quot;&lt;span&gt;

    html = &quot;&amp;lt;h3&amp;gt;Hello {name}!&amp;lt;/h3&amp;gt;&quot;&lt;span&gt; \
           &quot;&amp;lt;b&amp;gt;Hostname:&amp;lt;/b&amp;gt; {hostname}&amp;lt;br/&amp;gt;&quot;&lt;span&gt; \
           &quot;&amp;lt;b&amp;gt;Visits:&amp;lt;/b&amp;gt; {visits}&quot;
    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=&lt;span&gt;visits)

if __name__ == &quot;__main__&quot;&lt;span&gt;:
    app.run(host='0.0.0.0', port=80&lt;span&gt;)
 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.创建镜像&lt;/h3&gt;
&lt;p&gt;查看文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ls
Dockerfile        app.py            requirements.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在“Dockerfile”文件夹下运行下面命令，创建了一个以“friendlyhello”命名的Docker镜像。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#docker build -t friendlyhello .
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3.查看新建镜像&lt;/h3&gt;
&lt;p&gt;新建的镜像在Docker 镜像registry中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#docker images
&lt;/pre&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;REPOSITORY            TAG                 IMAGE ID
friendlyhello         latest              326387cea398&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4.运行应用程序&lt;/h3&gt;
&lt;p&gt;运行该APP(应用程序)，并将4000映射到80端口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#docker run -p 4000:80 friendlyhello
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 并在浏览器中输入http://localhost:4000，注意如果是win7则将localhost修改为IP&lt;/p&gt;

&lt;h3&gt; 5.后台运行应用程序&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#docker run -d -p 4000:80 friendlyhello
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6.查看容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED
1fa4ab2cf395        friendlyhello       &quot;python app.py&quot;     28 seconds ago&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt; 7.停止容器&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#docker container stop 1fa4ab2cf395
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt; 三：分享镜像&lt;/h2&gt;
&lt;h3&gt;1.登录Docker&lt;/h3&gt;
&lt;p&gt;  登录到本地计算机上公共的Docker注册表。如果没有账号，可以登录到&lt;a href=&quot;https://cloud.docker.com/&quot; target=&quot;_blank&quot;&gt;https://cloud.docker.com/&lt;/a&gt;中注册&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
#docker login
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.标记镜像&lt;/h3&gt;
&lt;pre&gt;
形如docker tag image username/repository:tag，意思是用户john将镜像“ friendlyhello”上传至“get-started”存储库，标记为“part2”。
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#docker tag friendlyhello john/get-started:part2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3. 查看镜像&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;# docker images&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4.发布镜像&lt;/h3&gt;
&lt;p&gt;形如“docker push username/repository:tag”，镜像一旦上传将会被公开&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#docker push john/get-started:part2
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;5.取出镜像&lt;/h3&gt;
&lt;p&gt;输入形如“docker run -p 4000:80  username/repository:tag”如下命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#docker run -p 4000:80 john/get-started:part2
&lt;/pre&gt;
&lt;p&gt;返回如下：&lt;/p&gt;
&lt;p&gt;Unable to find image 'john/get-started:part2' locally&lt;br/&gt;part2: Pulling from john/get-started&lt;br/&gt;10a267c67f42: Already exists&lt;br/&gt;f68a39a6a5e4: Already exists&lt;br/&gt;9beaffc0cf19: Already exists&lt;br/&gt;3c1fe835fb6b: Already exists&lt;br/&gt;4c9f1fa8fcb8: Already exists&lt;br/&gt;ee7d8f576a14: Already exists&lt;br/&gt;fbccdcced46e: Already exists&lt;br/&gt;Digest: sha256:0601c866aab2adcc6498200efd0f754037e909e5fd42069adeff72d1e2439068&lt;br/&gt;Status: Downloaded newer image for john/get-started:part2&lt;br/&gt;* Running on http://0.0.0.0:80/ (Press CTRL+C to quit)&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;四：附录：&lt;/h2&gt;
&lt;p&gt;如果想知道更多容器相关命令可试着运行下列命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
docker build -t friendlyname .              # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyname          # Run &quot;friendlyname&quot; mapping port 4000 to 80&lt;span&gt;
docker run -d -p 4000:80 friendlyname       # Same thing, but in&lt;span&gt; detached mode
docker container ls                         # List all running containers
docker container ls -&lt;span&gt;a                      # List all containers, even those not running
docker container stop &amp;lt;hash&amp;gt;&lt;span&gt;                # Gracefully stop the specified container
docker container kill &amp;lt;hash&amp;gt;&lt;span&gt;                # Force shutdown of the specified container
docker container rm &amp;lt;hash&amp;gt;                  # Remove specified container from this&lt;span&gt; machine
docker container rm $(docker container ls -a -&lt;span&gt;q)         # Remove all containers
docker image ls -a                          # List all images on this&lt;span&gt; machine
docker image rm &amp;lt;image id&amp;gt;                  # Remove specified image from this&lt;span&gt; machine
docker image rm $(docker image ls -a -q)    # Remove all images from this&lt;span&gt; machine
docker login             # Log in this CLI session using&lt;span&gt; your Docker credentials
docker tag &amp;lt;image&amp;gt; username/repository:tag  # Tag &amp;lt;image&amp;gt; for&lt;span&gt; upload to registry
docker push username/&lt;span&gt;repository:tag         # Upload tagged image to registry
docker run username/repository:tag          # Run image from a registry&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 14 Nov 2017 18:13:00 +0000</pubDate>
<dc:creator>姚红</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaohong/p/7836701.html</dc:identifier>
</item>
<item>
<title>[Intel Edison开发板] 06、Edison开发在linux中烧写、配置、搭建开发环境 - beautifulzzzz</title>
<link>http://www.cnblogs.com/zjutlitao/p/7836645.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zjutlitao/p/7836645.html</guid>
<description>
&lt;h4&gt;1、前言&lt;/h4&gt;
&lt;p&gt;linux上烧写、配置、搭建Edison环境，&lt;strong&gt;&lt;span&gt;千万不要用默认的setup tool for ubuntu!!!&lt;/span&gt;&lt;/strong&gt; (即使，你用的就是ubuntu)&lt;/p&gt;
&lt;p&gt;因为，其默认的工具会从一个坏链接下载配置文件：https://downloadmirror.intel.com/25871/eng/iot_data.xml，而该链接早已变为404。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;建议到下面这一步从我圈的红色部分继续进行！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt; https://software.intel.com/en-us/get-started-edison-linux-step2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/506370/201711/506370-20171115005134406-642348518.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt;2、烧写固件到Edison&lt;/h4&gt;
&lt;p&gt; 官方介绍setup tool是一种较好的方法来烧写固件，而dfu-util是为了某些手动想烧写固件的需求准备的。而在linux中setup tool会有第一节中描述的问题，因此我们选用dfu-util进行烧写。&lt;span&gt;&lt;a href=&quot;https://software.intel.com/node/9bebd5c4-2e6b-41ee-b4d2-2cbe68fc446e&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
This process uses dfu-util, an open source program that implements the USB DFU (USB Device Firmware Upgrade) protocol.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用dfu-util操作比较简单，可以完全按照介绍进行：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt; https://software.intel.com/en-us/getting-started-troubleshooting-edison-for-linux#manual-flash-process&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/506370/201711/506370-20171115010450296-308746455.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注：&lt;/span&gt;&lt;/strong&gt;需要注意USB数据线的连接方式及switch开关的拨动位置；烧写大概用5min，不要断电或拔下数据线！&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
╭─btfz@btfz-pc ~/Tool/Edison/&lt;span&gt;Image  
╰─$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; ./flashall.&lt;span&gt;sh&lt;/span&gt;                                                                                                                                                        &lt;span&gt;254&lt;/span&gt;&lt;span&gt; ↵
Using U&lt;/span&gt;-Boot target: edison-&lt;span&gt;blankcdc
Now waiting &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; dfu device &lt;span&gt;8087&lt;/span&gt;&lt;span&gt;:0a99
Please plug and reboot the board
Flashing IFWI
Download    [&lt;/span&gt;=========================] &lt;span&gt;100&lt;/span&gt;%      &lt;span&gt;4194304&lt;/span&gt;&lt;span&gt; bytes
Download    [&lt;/span&gt;=========================] &lt;span&gt;100&lt;/span&gt;%      &lt;span&gt;4194304&lt;/span&gt;&lt;span&gt; bytes
Flashing U&lt;/span&gt;-&lt;span&gt;Boot
Download    [&lt;/span&gt;=========================] &lt;span&gt;100&lt;/span&gt;%       &lt;span&gt;237568&lt;/span&gt;&lt;span&gt; bytes
Flashing U&lt;/span&gt;-&lt;span&gt;Boot Environment
Download    [&lt;/span&gt;=========================] &lt;span&gt;100&lt;/span&gt;%        &lt;span&gt;65536&lt;/span&gt;&lt;span&gt; bytes
Flashing U&lt;/span&gt;-&lt;span&gt;Boot Environment Backup
Download    [&lt;/span&gt;=========================] &lt;span&gt;100&lt;/span&gt;%        &lt;span&gt;65536&lt;/span&gt;&lt;span&gt; bytes
Rebooting to apply partition changes
Now waiting &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; dfu device &lt;span&gt;8087&lt;/span&gt;&lt;span&gt;:0a99
Flashing boot partition (kernel)
Download    [&lt;/span&gt;=========================] &lt;span&gt;100&lt;/span&gt;%      &lt;span&gt;6144000&lt;/span&gt;&lt;span&gt; bytes
Flashing rootfs, (it can take up to &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; minutes... Please be patient)
Download    [&lt;/span&gt;=========================] &lt;span&gt;100&lt;/span&gt;%   &lt;span&gt;1373159424&lt;/span&gt;&lt;span&gt; bytes
Rebooting
U&lt;/span&gt;-boot &amp;amp;&lt;span&gt; Kernel System Flash Success...
Your board needs to reboot to complete the flashing procedure, please &lt;/span&gt;&lt;span&gt;do&lt;/span&gt; not unplug it &lt;span&gt;for&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; minutes.
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;3、串口连接与配置密码及wifi&lt;/h4&gt;
&lt;p&gt;参照官方介绍，使用screen进行连接：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;gt;&amp;gt; https://software.intel.com/en-us/get-started-edison-linux-step3&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;主要是安装screen：sudo apt-get install screen&lt;/li&gt;
&lt;li&gt;将板子通过USB线连接到电脑，查看USB设备：ls /dev/ttyUSB*&lt;/li&gt;
&lt;li&gt;通过USB连接到板子：sudo screen /dev/ttyUSB0 115200&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/506370/201711/506370-20171115011510281-1624499867.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;等用screen登录成功板子后，便可参考：https://software.intel.com/en-us/get-started-edison-linux-step4 对板子进行配置用户名和密码，以及配置wifi等操作～&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;系列链接：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;:: 如果您觉得不错，请推荐给更多人，帮助他们更快地解决实际问题中的坑~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
@beautifulzzzz
智能硬件、物联网，热爱技术，关注产品
博客：http://blog.beautifulzzzz.com
园友交流群：414948975
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 14 Nov 2017 17:22:00 +0000</pubDate>
<dc:creator>beautifulzzzz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zjutlitao/p/7836645.html</dc:identifier>
</item>
<item>
<title>Ubuntu &amp; Docker &amp; Consul &amp; Fabio &amp; ASP.NET Core 2.0 微服务跨平台实践 - 田园里的蟋蟀</title>
<link>http://www.cnblogs.com/xishuai/p/ubuntu-docker-consul-fabio-aspnet-core.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xishuai/p/ubuntu-docker-consul-fabio-aspnet-core.html</guid>
<description>&lt;p&gt;相关博文：&lt;/p&gt;
&lt;p&gt;阅读目录：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Docker 运行 Consul 环境&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker 运行 Fabio 环境&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 Consul 注册 ASP.NET Core 2.0 服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 Docker 发布部署 ASP.NET Core 2.0 服务&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本篇博文的目的：在 Mac OS 中使用 VS Code 开发 ASP.NET Core 2.0 应用程序，然后在 Ubuntu 服务器配置 Docker 环境，并使用 Docker 运行 Consul 和 Fabio 环境，最后使用 Docker 运行 ASP.NET Core 2.0 应用程序。&lt;/p&gt;
&lt;p&gt;你要的项目源码：&lt;a href=&quot;https://github.com/yuezhongxin/HelloDocker.Sample&quot; class=&quot;uri&quot;&gt;https://github.com/yuezhongxin/HelloDocker.Sample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面配置看起来还蛮简单，但实际去操作的时候，还是遇到了蛮多的问题，并且花了很多的时间去解决，比如 Docker 运行 Consul 和 Fabio，下面详细说下过程。&lt;/p&gt;
&lt;h2 id=&quot;docker-运行-consul-环境&quot;&gt;1. Docker 运行 Consul 环境&lt;/h2&gt;
&lt;p&gt;关于 &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; 的概念：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，比如 Airbnb 的 SmartStack 等相比，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等）。使用起来也较 为简单。Consul 用 Golang 实现，因此具有天然可移植性(支持 Linux、windows 和 Mac OS X)；安装包仅包含一个可执行文件，方便部署，与 Docker 等轻量级容器可无缝配合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Consul Docker 镜像地址：&lt;a href=&quot;https://hub.docker.com/_/consul/&quot; class=&quot;uri&quot;&gt;https://hub.docker.com/_/consul/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配置 Consul 的微服务集群环境，需要先配置下 Server 服务端（需要独立服务器环境），配置命令（没有使用 Docker）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;consul&lt;/span&gt; agent -server -bootstrap-expect 1 -data-dir /tmp/consul -ui-dir=./dist  -config-dir /etc/consul.d -bind=10.9.10.110&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一开始，我想在 Mac OS 环境中使用 Docker 配置 Consul Client 客户端，但遇到了一些问题，配置命令：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; run -d --net=host --name=consul-client consul agent -bind=10.9.10.190 -client=0.0.0.0 -node=mac-xishuai -retry-join=10.9.10.236&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先解析下命令的意思：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;--net=host&lt;/code&gt;：&lt;code&gt;host&lt;/code&gt;网络模式，容器的网络接口和主机一样，也就是共享一个 IP 地址，如果没有此命令，默认是&lt;code&gt;bridge&lt;/code&gt;网络模式，也就是我们常用的桥接模式，Docker 会分配给容器一个独立的 IP 地址（端口也是独立的），并且容器和主机之间可以相互访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-bind=&lt;/code&gt;：Consul Client 绑定的 IP 地址，一般是内网的私有 IP 地址，需要内网服务器之前可以相互访问到，注意并不是&lt;code&gt;127.0.0.1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-retry-join=&lt;/code&gt;：加入 Consul 集群中，地址是 Consul Server 的 IP 地址，也可以是&lt;code&gt;-join=&lt;/code&gt;，加上&lt;code&gt;retry&lt;/code&gt;会不断进行重试。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一台服务器一般会配置一个 Consul Client，所以我们可以直接让 Consul 容器和主机的 IP 地址一样（我使用的），但使用了 Docker 之后，一台服务器就可以配置多个 Consul Client，我们就可以使用&lt;code&gt;bridge&lt;/code&gt;网络模式，一台服务器可以完成配置整个 Consul 集群环境。&lt;/p&gt;
&lt;p&gt;这里需要再重点说下&lt;code&gt;-client=&lt;/code&gt;，一开始我没有理解，先看下官方说明：&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;If you want to expose the Consul interfaces to other containers via a different network, such as the bridge network, use the&lt;code&gt;-client&lt;/code&gt;option for Consul.&lt;br/&gt;With this configuration, Consul's client interfaces will be bound to the bridge IP and available to other containers on that network, but not on the host network. Note that we still keep the cluster address out on the host network for performance. Consul will also accept the&lt;code&gt;-client=0.0.0.0&lt;/code&gt;option to bind to all interfaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;啥意思呢？Consul 服务注册的时候，一般是通过 &lt;a href=&quot;https://www.consul.io/api/index.html&quot;&gt;HTTP API&lt;/a&gt; 接口进行注册，比如：&lt;a href=&quot;http://10.9.10.190:8500/v1/agent/service/register&quot; class=&quot;uri&quot;&gt;http://10.9.10.190:8500/v1/agent/service/register&lt;/a&gt;，就是往 Consul 集群中注册服务，需要注意的是，&lt;code&gt;10.9.10.190&lt;/code&gt;一般是 Consul Client 的 IP 地址（也可以是 Consul Server），&lt;code&gt;-client&lt;/code&gt;配置的就是此地址，简单来说，就是用来服务注册并能访问到的地址，换句话说，服务注册可以跨服务器（服务和 Consul Client 并不需要在同一台服务器上），&lt;code&gt;0.0.0.0&lt;/code&gt;表示任何本机的相关 IP 地址都可以访问，推荐此配置。&lt;/p&gt;
&lt;p&gt;这里需要再说明下，Docker 部署 ASP.NET Core 2.0、Consul 和 Fabio 有两种方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;使用一个 Docker 容器&lt;/strong&gt;：很简单，在一个容器中完成服务部署，并且配置 Consul 和 Fabio 环境，这样容器就会很臃肿，并且每次发布的时候都得重新配置 Consul 和 Fabio 环境，如果服务很多的话，想想就觉得恐怖。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分别独立 Docker 容器&lt;/strong&gt;：服务部署、配置 Consul 和 Fabio 环境，都是独立容器实现，互不影响，也可以跨服务实现，简单灵活。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;显而易见，推荐第二种方式。&lt;/p&gt;
&lt;p&gt;回到正题，上面配置命令，在 Mac OS 报如下错误：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; logs consul-client
==&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Starting&lt;/span&gt; Consul agent...
==&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Error&lt;/span&gt; starting agent: Failed to start Consul client: Failed to start lan serf: Failed to create memberlist: Could not set up network transport: failed to obtain an address: Failed to start TCP listener on &lt;span class=&quot;st&quot;&gt;&quot;10.9.10.190&quot;&lt;/span&gt; port 8301: listen tcp 10.9.10.190:8301: bind: cannot assign requested address&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个问题花了很多时间也没有解决，奇怪的是不使用 Docker，直接运行 Consul Client 配置命令，却是可以的，后来没办法，我就在 Mac OS 中使用 Ubuntu 虚拟机了（版本 14.04），使用的 &lt;a href=&quot;http://www.cnblogs.com/xishuai/p/macos-use-vagrant-with-virtualbox.html&quot;&gt;Vagrant&lt;/a&gt; 管理工具。&lt;/p&gt;
&lt;p&gt;再重新运行配置命令：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; run -d --net=host --name=consul-client consul agent -bind=10.9.10.89 -client=0.0.0.0 -node=vagrant-ubuntu-xishuai -retry-join=10.9.2.236

$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; ps
&lt;span class=&quot;kw&quot;&gt;CONTAINER&lt;/span&gt; ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
&lt;span class=&quot;kw&quot;&gt;9c4988cf475f&lt;/span&gt;        consul              &lt;span class=&quot;st&quot;&gt;&quot;docker-entrypoint...&quot;&lt;/span&gt;   2 seconds ago       Up 2 seconds                            consul-client

$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; logs consul-client
==&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Starting&lt;/span&gt; Consul agent...
==&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Consul&lt;/span&gt; agent running!
           &lt;span class=&quot;kw&quot;&gt;Version&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'v1.0.0'&lt;/span&gt;
           &lt;span class=&quot;kw&quot;&gt;Node&lt;/span&gt; ID: &lt;span class=&quot;st&quot;&gt;'34e63f0a-d361-f152-3803-b9fda0642e4d'&lt;/span&gt;
         &lt;span class=&quot;kw&quot;&gt;Node&lt;/span&gt; name: &lt;span class=&quot;st&quot;&gt;'vagrant-ubuntu-xishuai'&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;Datacenter&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'dc1'&lt;/span&gt; (Segment: &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;Server&lt;/span&gt;: false (Bootstrap: false)
       &lt;span class=&quot;kw&quot;&gt;Client&lt;/span&gt; Addr: [0.0.0.0] (HTTP: 8500, HTTPS: -1, DNS: 8600)
      &lt;span class=&quot;kw&quot;&gt;Cluster&lt;/span&gt; Addr: 10.9.10.89 (LAN: 8301, WAN: 8302)
           &lt;span class=&quot;kw&quot;&gt;Encrypt&lt;/span&gt;: Gossip: false, TLS-Outgoing: false, TLS-Incoming: false

==&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Log&lt;/span&gt; data will now stream in as it occurs:

    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] serf: EventMemberJoin: vagrant-ubuntu-xishuai 10.9.10.89
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] agent: Started DNS server 0.0.0.0:8600 (udp)
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] agent: Started DNS server 0.0.0.0:8600 (tcp)
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] agent: Started HTTP server on [::]:8500 (tcp)
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] agent: Retry join LAN is supported for: aws azure gce softlayer
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] agent: Joining LAN cluster...
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] agent: (LAN) &lt;span class=&quot;kw&quot;&gt;joining&lt;/span&gt;: [10.9.2.236]
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [WARN] manager: No servers available
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [ERR] agent: failed to sync remote state: No known Consul servers
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] serf: EventMemberJoin: agent_1 10.9.2.236
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] agent: (LAN) &lt;span class=&quot;kw&quot;&gt;joined&lt;/span&gt;: 1 Err: &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;nil&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] agent: Join LAN completed. Synced with 1 initial agents
    &lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 06:40:52 [INFO] consul: adding server agent_1 (Addr: tcp/10.9.2.236:8300) &lt;span class=&quot;kw&quot;&gt;(DC&lt;/span&gt;: dc1&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开 Consul UI 界面，就可以看到我们配置的 Consul Client 了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/435188/201711/435188-20171114220608593-356241440.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;docker-运行-fabio-环境&quot;&gt;2. Docker 运行 Fabio 环境&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eBay/fabio&quot;&gt;Fabio&lt;/a&gt; 是一个快速、现代、zero-conf 负载均衡 HTTP(S) 路由器，用于部署 Consul 管理的微服务。&lt;/p&gt;
&lt;p&gt;Fabio Docker 镜像地址：&lt;a href=&quot;https://hub.docker.com/r/magiconair/fabio/&quot; class=&quot;uri&quot;&gt;https://hub.docker.com/r/magiconair/fabio/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配置命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ docker run -d --net=host --name=fabio -e 'registry_consul_addr=10.9.10.89:8500' magiconair/fabio&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行日志：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;99&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; logs fabio
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 09:43:49 [INFO] Setting log level to INFO
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 09:43:49 [INFO] Runtime config
&lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;Proxy&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;Strategy&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;rnd&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;Matcher&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;prefix&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;NoRouteStatus&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;404&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;MaxConn&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;10000&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;ShutdownWait&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;0&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;DialTimeout&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;30000000000&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;ResponseHeaderTimeout&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;0&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;KeepAliveTimeout&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;0&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;FlushInterval&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;1000000000&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;LocalIP&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;10.0.2.15&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;ClientIPHeader&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;TLSHeader&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;TLSHeaderValue&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;GZIPContentTypes&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;RequestID&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;st&quot;&gt;&quot;Registry&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;Backend&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;consul&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;Static&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&quot;Routes&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;File&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&quot;Path&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;Consul&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&quot;Addr&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;10.9.10.89:8500&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;Scheme&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;http&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;Token&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;KVPath&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;/fabio/config&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;TagPrefix&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;urlprefix-&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;Register&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;ServiceAddr&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;:9998&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;ServiceName&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;fabio&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;ServiceTags&quot;&lt;/span&gt;: &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;ServiceStatus&quot;&lt;/span&gt;:&lt;span class=&quot;kw&quot;&gt; [&lt;/span&gt;
                &lt;span class=&quot;st&quot;&gt;&quot;passing&quot;&lt;/span&gt;
            ],
            &lt;span class=&quot;st&quot;&gt;&quot;CheckInterval&quot;&lt;/span&gt;: 1000000000,
            &lt;span class=&quot;st&quot;&gt;&quot;CheckTimeout&quot;&lt;/span&gt;: 3000000000,
            &lt;span class=&quot;st&quot;&gt;&quot;CheckScheme&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;http&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;CheckTLSSkipVerify&quot;&lt;/span&gt;: false
        },
        &lt;span class=&quot;st&quot;&gt;&quot;Timeout&quot;&lt;/span&gt;: 10000000000,
        &lt;span class=&quot;st&quot;&gt;&quot;Retry&quot;&lt;/span&gt;: 500000000
    },
    &lt;span class=&quot;st&quot;&gt;&quot;Listen&quot;&lt;/span&gt;: [
        {
            &lt;span class=&quot;st&quot;&gt;&quot;Addr&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;:9999&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;Proto&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;http&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;ReadTimeout&quot;&lt;/span&gt;: 0,
            &lt;span class=&quot;st&quot;&gt;&quot;WriteTimeout&quot;&lt;/span&gt;: 0,
            &lt;span class=&quot;st&quot;&gt;&quot;CertSource&quot;&lt;/span&gt;: {
                &lt;span class=&quot;st&quot;&gt;&quot;Name&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;Type&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;CertPath&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;KeyPath&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;ClientCAPath&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;CAUpgradeCN&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;Refresh&quot;&lt;/span&gt;: 0,
                &lt;span class=&quot;st&quot;&gt;&quot;Header&quot;&lt;/span&gt;: null
            },
            &lt;span class=&quot;st&quot;&gt;&quot;StrictMatch&quot;&lt;/span&gt;: false,
            &lt;span class=&quot;st&quot;&gt;&quot;TLSMinVersion&quot;&lt;/span&gt;: 0,
            &lt;span class=&quot;st&quot;&gt;&quot;TLSMaxVersion&quot;&lt;/span&gt;: 0,
            &lt;span class=&quot;st&quot;&gt;&quot;TLSCiphers&quot;&lt;/span&gt;: null
        }
    ],
    &lt;span class=&quot;st&quot;&gt;&quot;Log&quot;&lt;/span&gt;: {
        &lt;span class=&quot;st&quot;&gt;&quot;AccessFormat&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;common&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;AccessTarget&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;RoutesFormat&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;delta&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;Level&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;INFO&quot;&lt;/span&gt;
    },
    &lt;span class=&quot;st&quot;&gt;&quot;Metrics&quot;&lt;/span&gt;: {
        &lt;span class=&quot;st&quot;&gt;&quot;Target&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;Prefix&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;{{clean .Hostname}}.{{clean .Exec}}&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;Names&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;{{clean .Service}}.{{clean .Host}}.{{clean .Path}}.{{clean .TargetURL.Host}}&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;Interval&quot;&lt;/span&gt;: 30000000000,
        &lt;span class=&quot;st&quot;&gt;&quot;Timeout&quot;&lt;/span&gt;: 10000000000,
        &lt;span class=&quot;st&quot;&gt;&quot;Retry&quot;&lt;/span&gt;: 500000000,
        &lt;span class=&quot;st&quot;&gt;&quot;GraphiteAddr&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;StatsDAddr&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;Circonus&quot;&lt;/span&gt;: {
            &lt;span class=&quot;st&quot;&gt;&quot;APIKey&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;APIApp&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;fabio&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;APIURL&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;CheckID&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;BrokerID&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;
        }
    },
    &lt;span class=&quot;st&quot;&gt;&quot;UI&quot;&lt;/span&gt;: {
        &lt;span class=&quot;st&quot;&gt;&quot;Listen&quot;&lt;/span&gt;: {
            &lt;span class=&quot;st&quot;&gt;&quot;Addr&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;:9998&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;Proto&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;http&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;ReadTimeout&quot;&lt;/span&gt;: 0,
            &lt;span class=&quot;st&quot;&gt;&quot;WriteTimeout&quot;&lt;/span&gt;: 0,
            &lt;span class=&quot;st&quot;&gt;&quot;CertSource&quot;&lt;/span&gt;: {
                &lt;span class=&quot;st&quot;&gt;&quot;Name&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;Type&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;CertPath&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;KeyPath&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;ClientCAPath&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;CAUpgradeCN&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
                &lt;span class=&quot;st&quot;&gt;&quot;Refresh&quot;&lt;/span&gt;: 0,
                &lt;span class=&quot;st&quot;&gt;&quot;Header&quot;&lt;/span&gt;: null
            },
            &lt;span class=&quot;st&quot;&gt;&quot;StrictMatch&quot;&lt;/span&gt;: false,
            &lt;span class=&quot;st&quot;&gt;&quot;TLSMinVersion&quot;&lt;/span&gt;: 0,
            &lt;span class=&quot;st&quot;&gt;&quot;TLSMaxVersion&quot;&lt;/span&gt;: 0,
            &lt;span class=&quot;st&quot;&gt;&quot;TLSCiphers&quot;&lt;/span&gt;: null
        },
        &lt;span class=&quot;st&quot;&gt;&quot;Color&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;light-green&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;Title&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
        &lt;span class=&quot;st&quot;&gt;&quot;Access&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;rw&quot;&lt;/span&gt;
    },
    &lt;span class=&quot;st&quot;&gt;&quot;Runtime&quot;&lt;/span&gt;: {
        &lt;span class=&quot;st&quot;&gt;&quot;GOGC&quot;&lt;/span&gt;: 800,
        &lt;span class=&quot;st&quot;&gt;&quot;GOMAXPROCS&quot;&lt;/span&gt;: 1
    },
    &lt;span class=&quot;st&quot;&gt;&quot;ProfileMode&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;,
    &lt;span class=&quot;st&quot;&gt;&quot;ProfilePath&quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;/tmp&quot;&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的两个属性值：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Proxy.LocalIP:10.0.2.15&lt;/code&gt;：绑定本机的 IP 地址，服务器的 IP 地址是&lt;code&gt;10.9.10.89&lt;/code&gt;，所以配置的&lt;code&gt;10.0.2.15&lt;/code&gt;是错误的，这个 IP 地址内网是访问不了的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Registry.Consul.Addr:10.9.10.89:8500&lt;/code&gt;：绑定 Consul 地址，我们上面已经完成的 Consul Client 地址就是&lt;code&gt;10.9.10.89:8500&lt;/code&gt;，所以是正确的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这个配置命令研究了好久，也没有解决绑定本机 IP 地址的问题，后来又找到了另外一种方式。&lt;/p&gt;
&lt;p&gt;首先，在&lt;code&gt;/etc/fabio/&lt;/code&gt;目录下创建一个&lt;code&gt;fabio.properties&lt;/code&gt;文件（&lt;a href=&quot;https://raw.githubusercontent.com/eBay/fabio/master/fabio.properties&quot;&gt;示例配置&lt;/a&gt;），然后&lt;code&gt;vim fabio.properties&lt;/code&gt;增加下面配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;registry.consul.register.addr = 10.9.10.89:9998

registry.consul.addr = 10.9.10.89:8500&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;registry.consul.register.addr&lt;/code&gt;绑定 Fabio 地址（本机 IP 地址），&lt;code&gt;registry.consul.addr&lt;/code&gt;绑定 Consul 地址。&lt;/p&gt;
&lt;p&gt;然后切换到&lt;code&gt;/etc/fabio/&lt;/code&gt;目录，执行配置命令：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; run -d -p 9999:9999 -p 9998:9998 --net=host --name=fabio -v &lt;span class=&quot;ot&quot;&gt;$PWD&lt;/span&gt;/fabio.properties:/etc/fabio/fabio.properties magiconair/fabio

$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; ps
&lt;span class=&quot;kw&quot;&gt;CONTAINER&lt;/span&gt; ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES
&lt;span class=&quot;kw&quot;&gt;301fe4a5b40b&lt;/span&gt;        magiconair/fabio    &lt;span class=&quot;st&quot;&gt;&quot;/fabio -cfg /etc/...&quot;&lt;/span&gt;   About a minute ago   Up About a minute                       fabio
&lt;span class=&quot;kw&quot;&gt;9c4988cf475f&lt;/span&gt;        consul              &lt;span class=&quot;st&quot;&gt;&quot;docker-entrypoint...&quot;&lt;/span&gt;   4 hours ago          Up 4 hours                              consul-client&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看执行日志：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; logs fabio
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Version 1.5.3 starting
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Go runtime is go1.9.2
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Metrics disabled
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Setting GOGC=800
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Setting GOMAXPROCS=1
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] consul: Connecting to &lt;span class=&quot;st&quot;&gt;&quot;10.9.10.89:8500&quot;&lt;/span&gt; in datacenter &lt;span class=&quot;st&quot;&gt;&quot;dc1&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Admin server access mode &lt;span class=&quot;st&quot;&gt;&quot;rw&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Admin server listening on &lt;span class=&quot;st&quot;&gt;&quot;:9998&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Waiting for first routing table
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] consul: Using dynamic routes
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] consul: Using tag prefix &lt;span class=&quot;st&quot;&gt;&quot;urlprefix-&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] consul: Watching KV path &lt;span class=&quot;st&quot;&gt;&quot;/fabio/config&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] consul: Manual config changed to &lt;span class=&quot;co&quot;&gt;#3723938&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] HTTP proxy listening on :9999
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Access logging disabled
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Using routing strategy &lt;span class=&quot;st&quot;&gt;&quot;rnd&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] Using route matching &lt;span class=&quot;st&quot;&gt;&quot;prefix&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:58 [INFO] consul: Health changed to &lt;span class=&quot;co&quot;&gt;#3727339&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:59 [INFO] consul: Registered fabio with id &lt;span class=&quot;st&quot;&gt;&quot;fabio-vagrant-ubuntu-trusty-9998&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:59 [INFO] consul: Registered fabio with address &lt;span class=&quot;st&quot;&gt;&quot;10.9.10.89&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:59 [INFO] consul: Registered fabio with tags &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:10:59 [INFO] consul: Registered fabio with health check to &lt;span class=&quot;st&quot;&gt;&quot;http://[10.9.10.89]:9998/health&quot;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;2017/11/14&lt;/span&gt; 10:11:00 [INFO] Config updates&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过 Consul UI，进行查看 Fabio 是否正常：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/435188/201711/435188-20171114220630952-383243943.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也可以直接浏览 &lt;a href=&quot;http://10.9.10.89:9998/routes?filter=&quot; class=&quot;uri&quot;&gt;http://10.9.10.89:9998/routes?filter=&lt;/a&gt;，查看已经注册的服务：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/435188/201711/435188-20171114220650484-1660488026.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实，如果不清楚配置命令的话，我们也可以查看 Consul 源码，有可能会帮助我们熟悉命令，比如（&lt;a href=&quot;https://github.com/fabiolb/fabio/blob/master/registry/consul/register.go&quot; class=&quot;uri&quot;&gt;https://github.com/fabiolb/fabio/blob/master/registry/consul/register.go&lt;/a&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/435188/201711/435188-20171114220700921-225210511.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用-consul-注册-asp.net-core-2.0-服务&quot;&gt;3. 使用 Consul 注册 ASP.NET Core 2.0 服务&lt;/h2&gt;
&lt;p&gt;在 Mac OS 中使用 VS Code 开发 ASP.NET Core 2.0 应用程序，就像写 Markdown 一样方便。&lt;/p&gt;
&lt;p&gt;Consul 注册 ASP.NET Core 2.0 服务，使用的是 Consul 组件，地址：&lt;a href=&quot;https://github.com/PlayFab/consuldotnet&quot; class=&quot;uri&quot;&gt;https://github.com/PlayFab/consuldotnet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装程序包（VS Code 需要使用&lt;code&gt;NuGet Pakcage Manager&lt;/code&gt;命令安装）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; install-package Conusl&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后添加一个&lt;code&gt;RegisterWithConsul&lt;/code&gt;扩展服务：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; System;
&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; System.&lt;span class=&quot;fu&quot;&gt;Collections&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Generic&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; System.&lt;span class=&quot;fu&quot;&gt;Linq&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; Consul;
&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; Microsoft.&lt;span class=&quot;fu&quot;&gt;AspNetCore&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Builder&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; Microsoft.&lt;span class=&quot;fu&quot;&gt;AspNetCore&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Hosting&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; Microsoft.&lt;span class=&quot;fu&quot;&gt;AspNetCore&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Hosting&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Server&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Features&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; Microsoft.&lt;span class=&quot;fu&quot;&gt;AspNetCore&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Http&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; Microsoft.&lt;span class=&quot;fu&quot;&gt;AspNetCore&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Http&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Features&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; Microsoft.&lt;span class=&quot;fu&quot;&gt;Extensions&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;DependencyInjection&lt;/span&gt;;

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ApplicationBuilderExtensions
{
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; IApplicationBuilder &lt;span class=&quot;fu&quot;&gt;RegisterWithConsul&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt; IApplicationBuilder app, IApplicationLifetime lifetime)
    {
        &lt;span class=&quot;co&quot;&gt;//var consulClient = new ConsulClient(x =&amp;gt; x.Address = new Uri($&quot;http://{Program.IP}:8500&quot;));//如果服务和 Consul 在同一台服务器上，使用此代码&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; consulClient = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ConsulClient&lt;/span&gt;(x =&amp;gt; x.&lt;span class=&quot;fu&quot;&gt;Address&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Uri&lt;/span&gt;($&lt;span class=&quot;st&quot;&gt;&quot;http://10.9.10.89:8500&quot;&lt;/span&gt;));&lt;span class=&quot;co&quot;&gt;//请求注册的 Consul 地址&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; httpCheck = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;AgentServiceCheck&lt;/span&gt;()
        {
            DeregisterCriticalServiceAfter = TimeSpan.&lt;span class=&quot;fu&quot;&gt;FromSeconds&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;),&lt;span class=&quot;co&quot;&gt;//服务启动多久后注册&lt;/span&gt;
            Interval = TimeSpan.&lt;span class=&quot;fu&quot;&gt;FromSeconds&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;),&lt;span class=&quot;co&quot;&gt;//健康检查时间间隔，或者称为心跳间隔&lt;/span&gt;
            HTTP = $&lt;span class=&quot;st&quot;&gt;&quot;http://{Program.IP}:{Program.Port}/health&quot;&lt;/span&gt;,&lt;span class=&quot;co&quot;&gt;//健康检查地址&lt;/span&gt;
            Timeout = TimeSpan.&lt;span class=&quot;fu&quot;&gt;FromSeconds&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)
        };

        &lt;span class=&quot;co&quot;&gt;// Register service with consul&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; registration = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;AgentServiceRegistration&lt;/span&gt;()
        {
            Checks = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt;[] { httpCheck },
            ID = Guid.&lt;span class=&quot;fu&quot;&gt;NewGuid&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;ToString&lt;/span&gt;(),
            Name = Program.&lt;span class=&quot;fu&quot;&gt;ServiceName&lt;/span&gt;,
            Address = Program.&lt;span class=&quot;fu&quot;&gt;IP&lt;/span&gt;,
            Port = Program.&lt;span class=&quot;fu&quot;&gt;Port&lt;/span&gt;,
            Tags = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt;[] { $&lt;span class=&quot;st&quot;&gt;&quot;urlprefix-/{Program.ServiceName}&quot;&lt;/span&gt; }&lt;span class=&quot;co&quot;&gt;//添加 urlprefix-/servicename 格式的 tag 标签，以便 Fabio 识别&lt;/span&gt;
        };

        consulClient.&lt;span class=&quot;fu&quot;&gt;Agent&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ServiceRegister&lt;/span&gt;(registration).&lt;span class=&quot;fu&quot;&gt;Wait&lt;/span&gt;();&lt;span class=&quot;co&quot;&gt;//服务启动时注册，内部实现其实就是使用 Consul API 进行注册（HttpClient发起）&lt;/span&gt;
        lifetime.&lt;span class=&quot;fu&quot;&gt;ApplicationStopping&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Register&lt;/span&gt;(() =&amp;gt;
        {
            consulClient.&lt;span class=&quot;fu&quot;&gt;Agent&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ServiceDeregister&lt;/span&gt;(registration.&lt;span class=&quot;fu&quot;&gt;ID&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;Wait&lt;/span&gt;();&lt;span class=&quot;co&quot;&gt;//服务停止时取消注册&lt;/span&gt;
        });
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; app;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Start.cs&lt;/code&gt;配置代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Configure&lt;/span&gt;(IApplicationBuilder app, IHostingEnvironment env, 
              ILoggerFactory loggerFactory, IApplicationLifetime lifetime)
{
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (env.&lt;span class=&quot;fu&quot;&gt;IsDevelopment&lt;/span&gt;())
    {
        app.&lt;span class=&quot;fu&quot;&gt;UseDeveloperExceptionPage&lt;/span&gt;();
    }

    app.&lt;span class=&quot;fu&quot;&gt;UseMvc&lt;/span&gt;();
    app.&lt;span class=&quot;fu&quot;&gt;RegisterWithConsul&lt;/span&gt;(lifetime);&lt;span class=&quot;co&quot;&gt;//here&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Program.cs&lt;/code&gt;配置代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Program
{
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;string&lt;/span&gt; IP = &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Port = &lt;span class=&quot;dv&quot;&gt;54917&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;string&lt;/span&gt; ServiceName = &lt;span class=&quot;st&quot;&gt;&quot;hello-docker&quot;&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;string&lt;/span&gt; Version = &lt;span class=&quot;st&quot;&gt;&quot;v1&quot;&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;string&lt;/span&gt;[] args)
    {
        &lt;span class=&quot;co&quot;&gt;//Program.IP = LocalIPAddress;//使用 Docker 的时候，获取的是 IP 地址不正确，需要进行完善&lt;/span&gt;
        Program.&lt;span class=&quot;fu&quot;&gt;IP&lt;/span&gt; = &lt;span class=&quot;st&quot;&gt;&quot;10.9.10.190&quot;&lt;/span&gt;;&lt;span class=&quot;co&quot;&gt;//Docker 容器中的 IP 地址，如果使用 host 网络模式，也是主机的 IP 地址&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;BuildWebHost&lt;/span&gt;(args).&lt;span class=&quot;fu&quot;&gt;Run&lt;/span&gt;();
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; IWebHost &lt;span class=&quot;fu&quot;&gt;BuildWebHost&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;string&lt;/span&gt;[] args) =&amp;gt;
        WebHost.&lt;span class=&quot;fu&quot;&gt;CreateDefaultBuilder&lt;/span&gt;(args)
            .&lt;span class=&quot;fu&quot;&gt;UseUrls&lt;/span&gt;($&lt;span class=&quot;st&quot;&gt;&quot;http://*:{Program.Port}&quot;&lt;/span&gt;)
            .&lt;span class=&quot;fu&quot;&gt;UseStartup&lt;/span&gt;&amp;lt;Startup&amp;gt;()
            .&lt;span class=&quot;fu&quot;&gt;Build&lt;/span&gt;();

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;string&lt;/span&gt; LocalIPAddress
    {
        get
        {
            UnicastIPAddressInformation mostSuitableIp = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
            &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; networkInterfaces = NetworkInterface.&lt;span class=&quot;fu&quot;&gt;GetAllNetworkInterfaces&lt;/span&gt;();

            &lt;span class=&quot;kw&quot;&gt;foreach&lt;/span&gt; (var network &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; networkInterfaces)
            {
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (network.&lt;span class=&quot;fu&quot;&gt;OperationalStatus&lt;/span&gt; != OperationalStatus.&lt;span class=&quot;fu&quot;&gt;Up&lt;/span&gt;)
                    &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
                &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; properties = network.&lt;span class=&quot;fu&quot;&gt;GetIPProperties&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (properties.&lt;span class=&quot;fu&quot;&gt;GatewayAddresses&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Count&lt;/span&gt; == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
                    &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;

                &lt;span class=&quot;kw&quot;&gt;foreach&lt;/span&gt; (var address &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; properties.&lt;span class=&quot;fu&quot;&gt;UnicastAddresses&lt;/span&gt;)
                {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (address.&lt;span class=&quot;fu&quot;&gt;Address&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;AddressFamily&lt;/span&gt; != AddressFamily.&lt;span class=&quot;fu&quot;&gt;InterNetwork&lt;/span&gt;)
                        &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (IPAddress.&lt;span class=&quot;fu&quot;&gt;IsLoopback&lt;/span&gt;(address.&lt;span class=&quot;fu&quot;&gt;Address&lt;/span&gt;))
                        &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
                    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; address.&lt;span class=&quot;fu&quot;&gt;Address&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ToString&lt;/span&gt;();
                }
            }
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; mostSuitableIp != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
                ? mostSuitableIp.&lt;span class=&quot;fu&quot;&gt;Address&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ToString&lt;/span&gt;()
                : &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;;
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;健康检查配置代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;[&lt;span class=&quot;fu&quot;&gt;Route&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;[controller]&quot;&lt;/span&gt;)]
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HealthController : Controller
{
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;readonly&lt;/span&gt; HttpClient _httpClient;

    &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HealthController&lt;/span&gt;()
    {
        _httpClient = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HttpClient&lt;/span&gt;();
    }

    [HttpGet]
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; IActionResult &lt;span class=&quot;fu&quot;&gt;Get&lt;/span&gt;() =&amp;gt; &lt;span class=&quot;fu&quot;&gt;Ok&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ok&quot;&lt;/span&gt;);

    &lt;span class=&quot;co&quot;&gt;//或者使用fabio进行健康检查&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//[Route(&quot;&quot;)]&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//[HttpGet]&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//public async Task&amp;lt;HttpResponseMessage&amp;gt; GetWithFabio() =&amp;gt; await _httpClient.GetAsync(&quot;http://127.0.0.1:9998/health&quot;);&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;使用-docker-发布部署-asp.net-core-2.0-服务&quot;&gt;4. 使用 Docker 发布部署 ASP.NET Core 2.0 服务&lt;/h2&gt;
&lt;p&gt;我们需要在 ASP.NET Core 2.0 应用程序目录下，添加一个&lt;code&gt;Dockerfile&lt;/code&gt;文件，用来构建自定义镜像（命令参考：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/image/build.html&quot;&gt;使用 Dockerfile 定制镜像&lt;/a&gt;），示例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode dockerfile&quot;&gt;
&lt;code class=&quot;sourceCode dockerfile&quot;&gt;&lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; microsoft/aspnetcore-build AS build-env
&lt;span class=&quot;kw&quot;&gt;WORKDIR&lt;/span&gt; /app

&lt;span class=&quot;co&quot;&gt;# copy csproj and restore as distinct layers&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;COPY&lt;/span&gt; *.csproj ./
&lt;span class=&quot;kw&quot;&gt;RUN&lt;/span&gt; dotnet restore

&lt;span class=&quot;co&quot;&gt;# copy everything else and build&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;COPY&lt;/span&gt; . ./
&lt;span class=&quot;kw&quot;&gt;RUN&lt;/span&gt; dotnet publish -c Release -o out

&lt;span class=&quot;co&quot;&gt;# build runtime image&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; microsoft/aspnetcore
&lt;span class=&quot;kw&quot;&gt;WORKDIR&lt;/span&gt; /app
&lt;span class=&quot;kw&quot;&gt;COPY&lt;/span&gt; --from=build-env /app/out .
&lt;span class=&quot;kw&quot;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;dotnet&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;HelloDocker.Web.dll&quot;&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单来说，就是先使用&lt;code&gt;microsoft/aspnetcore-build&lt;/code&gt;镜像，还原程序包并发布，然后再使用&lt;code&gt;microsoft/aspnetcore&lt;/code&gt;镜像，运行 ASP.NET Core 2.0 应用程序。&lt;/p&gt;
&lt;p&gt;构建镜像命令：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; build -t hello-docker:v1 .
&lt;span class=&quot;kw&quot;&gt;Sending&lt;/span&gt; build context to Docker daemon  41.98kB
&lt;span class=&quot;kw&quot;&gt;Step&lt;/span&gt; 1/10 : FROM microsoft/aspnetcore-build AS build-env
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; d6273f7c44d4
&lt;span class=&quot;kw&quot;&gt;Step&lt;/span&gt; 2/10 : WORKDIR /app
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; e37f90cd9aaf
&lt;span class=&quot;kw&quot;&gt;Removing&lt;/span&gt; intermediate container a4e4db93ea06
&lt;span class=&quot;kw&quot;&gt;Step&lt;/span&gt; 3/10 : COPY *.csproj ./
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; 56278755f94c
&lt;span class=&quot;kw&quot;&gt;Step&lt;/span&gt; 4/10 : RUN dotnet restore
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; Running in 3b7e8c5d01f4
  &lt;span class=&quot;kw&quot;&gt;Restoring&lt;/span&gt; packages for /app/HelloDocker.Web.csproj...
  &lt;span class=&quot;kw&quot;&gt;Restore&lt;/span&gt; completed in 411.99 ms for /app/HelloDocker.Web.csproj.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; System.Security.Principal.Windows 4.4.0-preview1-25305-02.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; Microsoft.NETCore.Platforms 2.0.0-preview1-25305-02.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; System.Security.AccessControl 4.4.0-preview1-25305-02.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; Microsoft.Win32.Registry 4.3.0.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; System.Security.Permissions 4.4.0-preview1-25305-02.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; System.Diagnostics.Process 4.3.0.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; Newtonsoft.Json 10.0.2.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; System.Net.Http.WinHttpHandler 4.0.0.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; CoreCompat.System.Drawing.v2 5.2.0-preview1-r131.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; System.Data.Common 4.3.0.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; System.Security.Cryptography.Pkcs 4.3.0.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; System.Xml.XPath.XmlDocument 4.3.0.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; Pomelo.EntityFrameworkCore.MySql 2.0.0.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; MySqlConnector 0.26.4.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; Pomelo.JsonObject 1.1.1.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; Consul 0.7.2.3.
  &lt;span class=&quot;kw&quot;&gt;Installing&lt;/span&gt; EPPlus.Core 1.5.2.
  &lt;span class=&quot;kw&quot;&gt;Generating&lt;/span&gt; MSBuild file /app/obj/HelloDocker.Web.csproj.nuget.g.props.
  &lt;span class=&quot;kw&quot;&gt;Generating&lt;/span&gt; MSBuild file /app/obj/HelloDocker.Web.csproj.nuget.g.targets.
  &lt;span class=&quot;kw&quot;&gt;Restore&lt;/span&gt; completed in 5.71 sec for /app/HelloDocker.Web.csproj.
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; cdf6ca65acf6
&lt;span class=&quot;kw&quot;&gt;Removing&lt;/span&gt; intermediate container 3b7e8c5d01f4
&lt;span class=&quot;kw&quot;&gt;Step&lt;/span&gt; 5/10 : COPY . ./
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; fffa81d15ddc
&lt;span class=&quot;kw&quot;&gt;Step&lt;/span&gt; 6/10 : RUN dotnet publish -c Release -o out
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; Running in 291c8eea750f
&lt;span class=&quot;kw&quot;&gt;Microsoft&lt;/span&gt; (R) &lt;span class=&quot;kw&quot;&gt;Build&lt;/span&gt; Engine version 15.4.8.50001 for .NET Core
&lt;span class=&quot;kw&quot;&gt;Copyright&lt;/span&gt; (C) &lt;span class=&quot;kw&quot;&gt;Microsoft&lt;/span&gt; Corporation. All rights reserved.

  &lt;span class=&quot;kw&quot;&gt;HelloDocker.Web&lt;/span&gt; -&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; /app/bin/Release/netcoreapp2.0/HelloDocker.Web.dll
  &lt;span class=&quot;kw&quot;&gt;HelloDocker.Web&lt;/span&gt; -&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; /app/out/
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; 078311772175
&lt;span class=&quot;kw&quot;&gt;Removing&lt;/span&gt; intermediate container 291c8eea750f
&lt;span class=&quot;kw&quot;&gt;Step&lt;/span&gt; 7/10 : FROM microsoft/aspnetcore
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; b97d3cf55223
&lt;span class=&quot;kw&quot;&gt;Step&lt;/span&gt; 8/10 : WORKDIR /app
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; b0637e3d706b
&lt;span class=&quot;kw&quot;&gt;Removing&lt;/span&gt; intermediate container 7095565fbbca
&lt;span class=&quot;kw&quot;&gt;Step&lt;/span&gt; 9/10 : COPY --from=build-env /app/out .
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; c3cb8a708c4b
&lt;span class=&quot;kw&quot;&gt;Step&lt;/span&gt; 10/10 : ENTRYPOINT dotnet HelloDocker.Web.dll
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; Running in d4111dc055f8
 &lt;span class=&quot;kw&quot;&gt;---&amp;gt;&lt;/span&gt; 29121f0eb2b0
&lt;span class=&quot;kw&quot;&gt;Removing&lt;/span&gt; intermediate container d4111dc055f8
&lt;span class=&quot;kw&quot;&gt;Successfully&lt;/span&gt; built 29121f0eb2b0
&lt;span class=&quot;kw&quot;&gt;Successfully&lt;/span&gt; tagged hello-docker:v1&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面构建镜像的过程，非常详细，我们可以得到很多的信息，这边就不叙述了，构建完镜像之后，我们可以查看下是否成功：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; images
&lt;span class=&quot;kw&quot;&gt;REPOSITORY&lt;/span&gt;                   TAG                 IMAGE ID            CREATED             SIZE
&lt;span class=&quot;kw&quot;&gt;hello-docker&lt;/span&gt;                 v1                  29121f0eb2b0        Less than a second ago   284MB
&lt;span class=&quot;kw&quot;&gt;&amp;lt;none&amp;gt;&lt;/span&gt;                       &lt;span class=&quot;kw&quot;&gt;&amp;lt;&lt;/span&gt;none&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;              078311772175        Less than a second ago   1.9GB
&lt;span class=&quot;kw&quot;&gt;microsoft/aspnetcore-build&lt;/span&gt;   latest              d6273f7c44d4        4 days ago          1.85GB
&lt;span class=&quot;kw&quot;&gt;microsoft/aspnetcore&lt;/span&gt;         latest              b97d3cf55223        4 days ago          280MB
&lt;span class=&quot;kw&quot;&gt;consul&lt;/span&gt;                       latest              dff07cab6abd        9 days ago          51.8MB
&lt;span class=&quot;kw&quot;&gt;magiconair/fabio&lt;/span&gt;             latest              b0d96559369f        10 days ago         11.8MB&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;hello-docker&lt;/code&gt;下面没命名的镜像，是临时生成的，作用是使用&lt;code&gt;microsoft/aspnetcore-build&lt;/code&gt;镜像，还原程序包的时候，不需要重新安装了。&lt;/p&gt;
&lt;p&gt;另外，我们可以在 ASP.NET Core 2.0 应用程序目录下，添加&lt;code&gt;.dockerignore&lt;/code&gt;文件，来减少我们构建的镜像文件大小，示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bin/*
obj/*&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要说明下，Consul 和 Fabio 我都是部署在虚拟机的 Docker 容器中，ASP.NET Core 2.0 应用程序，我打算运行在 Mac OS 系统中，也就是说服务和 Consul 是跨服务器的。&lt;/p&gt;
&lt;p&gt;运行命令：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; run -d -p 54917:54917 --name hello-docker-web hello-docker:v1&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看下是否运行成功：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; ps
&lt;span class=&quot;kw&quot;&gt;CONTAINER&lt;/span&gt; ID        IMAGE               COMMAND                  CREATED                  STATUS              PORTS                      NAMES
&lt;span class=&quot;kw&quot;&gt;396d42f37185&lt;/span&gt;        hello-docker:v1        &lt;span class=&quot;st&quot;&gt;&quot;dotnet Hello-Dock...&quot;&lt;/span&gt;   Less than a second ago   Up 2 seconds        0.0.0.0:54917-&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;54917/tcp   hello-docker-web

$ &lt;span class=&quot;kw&quot;&gt;docker&lt;/span&gt; logs hello-docker-web
&lt;span class=&quot;kw&quot;&gt;Hosting&lt;/span&gt; environment: Production
&lt;span class=&quot;kw&quot;&gt;Content&lt;/span&gt; root path: /app
&lt;span class=&quot;kw&quot;&gt;Now&lt;/span&gt; listening on: http://[::]:54917
&lt;span class=&quot;kw&quot;&gt;Application&lt;/span&gt; started. Press Ctrl+C to shut down.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，运行是成功的。&lt;/p&gt;
&lt;p&gt;我们可以请求验证下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;curl&lt;/span&gt; http://10.9.10.190:54917/api/values
[&lt;span class=&quot;st&quot;&gt;&quot;value1&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;value2&quot;&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者使用 Fabio 的网关请求（Fabio 可以用作负载均衡）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;curl&lt;/span&gt; http://10.9.10.89:9999/hello-docker/api/values
[&lt;span class=&quot;st&quot;&gt;&quot;value1&quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&quot;value2&quot;&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以查看 Consul UI 中的服务是否运行正常：&lt;/p&gt;
&lt;p&gt;图片&lt;/p&gt;
&lt;p&gt;或者查看 Fabio UI 中的服务是否存在（通过健康检查后会出现）：&lt;/p&gt;
&lt;p&gt;图片&lt;/p&gt;
&lt;p&gt;查看资料：&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 16:53:00 +0000</pubDate>
<dc:creator>田园里的蟋蟀</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xishuai/p/ubuntu-docker-consul-fabio-aspnet-core.html</dc:identifier>
</item>
<item>
<title>讨论.NET Core 配置对GC 工作模式与内存的影响 - YOYOFx</title>
<link>http://www.cnblogs.com/maxzhang1985/p/7836088.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/maxzhang1985/p/7836088.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/PqhUzvFpzopU7rVRgdy7eg&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/s/PqhUzvFpzopU7rVRgdy7eg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章中讨论了，在默认情况下，ASP.NET Core程序跑在K8s的Docker中内存使用率&amp;gt;=600MB，导致Docker容器频繁重启。并探讨并做了将ASP.NET Core项目配置System.GC.Server设置为False后，内存小于&amp;lt;=150MB的实验。&lt;/p&gt;
&lt;p&gt;这文主要讲下什么是System.GC.Server，还有GC的二种模式。&lt;/p&gt;

&lt;h2 id=&quot;net-core-两种gc模式&quot;&gt;.NET Core 两种GC模式:&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;Server GC / Workstation GC &lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;server-gc&quot;&gt;Server GC :&lt;/h2&gt;
&lt;p&gt;主要应用于多处理器系统，并且作为ASP.NET Core宿主的默认配置。它会为每个处理器都创建一个GC Heap,并且会并行执行回收操作。该模式的GC可以最大化吞吐量和较好的收缩性。这种模式的特点是初始分配的内存较大，并且尽可能不回收内存,进行回收用时会很耗时,并进行内存碎片整理工作。&lt;/p&gt;
&lt;h2 id=&quot;workstation-gc&quot;&gt;Workstation GC :&lt;/h2&gt;
&lt;p&gt;主要应用于单处理器系统，Workstation GC尽可能地通过减少垃圾回收过程中程序的暂停次数来提高性能。低负载且不常在后台（如服务）执行任务的应用程序，可以在禁用并发垃圾回收的情况下使用工作站垃圾回收。特点是会频繁回收，来阻止一次较长时间的回收。&lt;/p&gt;
&lt;h2 id=&quot;concurrent-gc-工作方式&quot;&gt;Concurrent GC 工作方式 :&lt;/h2&gt;
&lt;p&gt;是一种GC的工作方式,如果你是单处理器的机器，那么即便配置了Concurrent选项为True，也不会生效。Server GC 和Workstation GC都可以开启Concurrent GC，在GC回收的过程中大部分时间用户线程可以并发运行。但只能影响到2代对象GC的过程，因为0代1代的时间太短了。&lt;/p&gt;
&lt;h2 id=&quot;asp.net-core-project-gc配置&quot;&gt;5.ASP.NET Core Project GC配置:&lt;/h2&gt;
&lt;p&gt;ASP.NET CORE项目中，通过System.GC.Server配置进行GC模式设置,创建项目默认的GC模式是: System.GC.Server : true (Server GC Concurrent Mode) 每CPU分配GC ；System.GC.Server : false (Workstation GC Concurrent mode),且Concurrent=1。&lt;/p&gt;
&lt;h2 id=&quot;gc-内存分配原则&quot;&gt;GC 内存分配原则：&lt;/h2&gt;
&lt;p&gt;GC heap用于保存0、1、2代的对象时，需要向系统申请时的基本单位是Segment，系统会分配指定值大小的Segment用于存储对象，这些值会随着程序的实际执行情况，由GC动态调整。正是由于有Segment的概念所以回出现内存碎片的问题，所以GC在垃圾回收过程中会进行内存整理，以减少内存碎片提高内存使用率。&lt;/p&gt;
&lt;p&gt;Segment的大小取决于系统是32位还是64位，以及它正在运行的垃圾收集器的类型，下表列出了分配时系统所使用的默认值：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Workstation GC&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;16 MB&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;256 MB&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Server GC&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;64 MB&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;4 GB&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Server GC with &amp;gt; 4 logical CPUs&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;32 MB&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2 GB&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Server GC with &amp;gt; 8 logical CPUs&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;16 MB&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1 GB&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Segment包括第2代对象，第2代对象会在内存允许的情况尽可能多的申请到内存，并使用多个段进行内存存储。&lt;br/&gt;从GC中释放的内存量仅限于Segment的大小，但由于Segment采用动态大小进行了分配，这就使得释放后的大量内存占位导致内存使用率低下，前面也说过了，为了解决这个问题GC要对内存碎片进行整理，并中断所有线程的处理。&lt;/p&gt;

&lt;h2 id=&quot;concurrent-workstation-gc&quot;&gt;Concurrent &amp;amp; Workstation GC&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ServerGarbageCollection&amp;gt;&lt;/span&gt;false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ServerGarbageCollection&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;ConcurrentGarbageCollection&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ConcurrentGarbageCollection&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特点:在吞吐量和相应速度上寻找平衡点, GC Heap数量为1，GC threads在分配空间的线程,GC线程优先权和工作线程具有相同的优先权，工作线程（非GC线程）会因为GC工作过程中短暂多次挂起。&lt;/p&gt;
&lt;h2 id=&quot;background-workstation-gc&quot;&gt;Background &amp;amp; Workstation GC&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ServerGarbageCollection&amp;gt;&lt;/span&gt;false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ServerGarbageCollection&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;ConcurrentGarbageCollection&amp;gt;&lt;/span&gt;false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ConcurrentGarbageCollection&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特点:最大化吞吐量并优化gen2 GC性能, GC Heap数量为1，background GC线程与工作线程有相同优先级，但都低于前台GC线程 ，工作线程（非GC线程）会因为GC工作过程中短暂多次挂起，较并发性能更加（针对Gen2的）。&lt;/p&gt;
&lt;h2 id=&quot;concurrent-server-gc&quot;&gt;Concurrent &amp;amp; Server GC&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ServerGarbageCollection&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ServerGarbageCollection&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;ConcurrentGarbageCollection&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ConcurrentGarbageCollection&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特点:多处理器机器上使用多线程处理相同类型的请求以便最大化服务程序吞吐量, GC Heap数量为每处理器1个，每个处理器都有一个专职的GC线程,GC线程拥有最高线程的优先级，工作线程（非GC线程）会因为GC工作过程中会被挂起。&lt;/p&gt;
&lt;h2 id=&quot;background-server-gc&quot;&gt;Background &amp;amp; Server GC&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ServerGarbageCollection&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ServerGarbageCollection&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;ConcurrentGarbageCollection&amp;gt;&lt;/span&gt;false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ConcurrentGarbageCollection&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;特点:在Concurrent &amp;amp; Server GC基础上优化gen2 GC性能, GC Heap数量为每处理器1个，每个处理器都有一个专职的GC background线程,background GC线程与工作线程有相同优先级，但都低于前台GC线程，工作线程（非GC线程）会因为GC工作过程中短暂多次挂起，较并发性能更加（针对Gen2的）&lt;br/&gt;ephemeral generation的前台GC工作时会挂起其他所有线程。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/seteplia/2017/01/05/understanding-different-gc-modes-with-concurrency-visualizer/&quot; class=&quot;uri&quot;&gt;https://blogs.msdn.microsoft.com/seteplia/2017/01/05/understanding-different-gc-modes-with-concurrency-visualizer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals&quot; class=&quot;uri&quot;&gt;https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aspnet/Home/issues/2056&quot; class=&quot;uri&quot;&gt;https://github.com/aspnet/Home/issues/2056&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub：&lt;a href=&quot;https://github.com/maxzhang1985/YOYOFx&quot; class=&quot;uri&quot;&gt;https://github.com/maxzhang1985/YOYOFx&lt;/a&gt; 如果觉还可以请Star下， 欢迎一起交流。&lt;/p&gt;
&lt;p&gt;.NET Core 开源学习群：&lt;a href=&quot;http://shang.qq.com/wpa/qunwpa?idkey=1ca46dc1b9884998e93bbbf672d4e7b920cb75529c7295da2ea69b12ef262409&quot;&gt;214741894&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 16:29:00 +0000</pubDate>
<dc:creator>YOYOFx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/maxzhang1985/p/7836088.html</dc:identifier>
</item>
<item>
<title>如何编写通用的 Helper Class - nzbin</title>
<link>http://www.cnblogs.com/nzbin/p/7746047.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nzbin/p/7746047.html</guid>
<description>&lt;blockquote readability=&quot;1.1931818181818&quot;&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/nzbin/snack-helper&quot; target=&quot;_blank&quot;&gt;https://github.com/nzbin/snack-helper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docs: &lt;a href=&quot;https://nzbin.github.io/snack-helper&quot; target=&quot;_blank&quot;&gt;https://nzbin.github.io/snack-helper&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/999445/201711/999445-20171113173443046-443477403.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;什么是 helper ？任何框架都不是万能的，而业务需求却是多种多样，很多时候我们只需要更改组件的部分属性，而 helper 就是调整细节的工具。我在之前的文章《&lt;a href=&quot;http://www.cnblogs.com/nzbin/p/7073601.html&quot; target=&quot;_blank&quot;&gt;如何编写轻量级 CSS 框架&lt;/a&gt;》中也举过例子，我们完全没必要因为几个属性的不同而重新编写新组件。大部分的 helper 都是一个类对应一个 CSS 属性，属于最细小的类。通过工作的实践总结，我觉得编写一套简单易用、通俗易懂的 helper 非常重要。本文的目的就是探讨 helper 的组成部分、编写方式以及如何精简 helper 的命名。&lt;/p&gt;
&lt;h2&gt;组件与零件&lt;/h2&gt;
&lt;p&gt;详细介绍如何编写 helper 之前，先说一下我对于组件以及零件的看法。在之前编写轻量级 CSS 框架的时候，我们是以组件的方式开发。而编写 helper 更像是开发一个零件，因为 helper 的属性单一，而且多个 helper 可以形成一个组件。比如下面的例子：&lt;/p&gt;
&lt;p&gt;假设有 &lt;code&gt;.boxes&lt;/code&gt; 组件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.boxes &lt;/span&gt;{&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt; 1px solid #eee&lt;/span&gt;;&lt;span&gt;
    border-radius&lt;/span&gt;:&lt;span&gt; 5px&lt;/span&gt;;&lt;span&gt;
    margin-bottom&lt;/span&gt;:&lt;span&gt; 15px&lt;/span&gt;;&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假设有如下 helper&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.b-1 &lt;/span&gt;{&lt;span&gt;
    border&lt;/span&gt;:&lt;span&gt; 1px solid #eee !important&lt;/span&gt;;
}&lt;span&gt;
.r-5&lt;/span&gt;{&lt;span&gt;
    border-radius&lt;/span&gt;:&lt;span&gt; 5px !important&lt;/span&gt;;
}&lt;span&gt;
.m-b-15&lt;/span&gt;{&lt;span&gt;
    margin-bottom&lt;/span&gt;:&lt;span&gt; 15px !important&lt;/span&gt;;
}&lt;span&gt;
.overflow-hidden &lt;/span&gt;{&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden !important&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;则 &lt;code&gt;.boxes&lt;/code&gt; = &lt;code&gt;.b-1&lt;/code&gt; + &lt;code&gt;.r-5&lt;/code&gt; + &lt;code&gt;.m-b-15&lt;/code&gt; + &lt;code&gt;.overflow-hidden&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我是一个模型爱好者，这样的组合方式让我想到了寿屋的 &lt;a href=&quot;http://acg.78dm.net/ct/109890.html&quot; target=&quot;_blank&quot;&gt;HEXA GEAR 系列模型&lt;/a&gt;，这个系列的特点是“&lt;span&gt;零件+零件＝组件、组件+组件＝骨架、骨架+骨架＝素体、素体+武装＝机体&lt;/span&gt;”。&lt;/p&gt;
&lt;p&gt;在编写 helper 的时候，基于以上想法，我在思考是否可以把 helper 拆分的足够精细，这样它就可以自成一体形成一个框架，也就是“零件+零件=组件、组件+组件=框架”。事实证明，我的想法已经被人实践，前几天浏览 GitHub 时发现了相关的项目 &lt;a href=&quot;https://github.com/tailwindcss/tailwindcss&quot; target=&quot;_blank&quot;&gt;tailwindcss&lt;/a&gt;，这个框架就是以 helper 为基础，通过属性叠加的方式添加样式。&lt;/p&gt;
&lt;p&gt;组件式框架和零件式框架是两种完全不同的思想，难分伯仲，各有优缺点。&lt;/p&gt;
&lt;h2&gt;Helper 的组成部分&lt;/h2&gt;
&lt;p&gt;一套完整的 helper 应该包含哪些内容呢？一般常用的有 &lt;code&gt;padding&lt;/code&gt;、&lt;code&gt;margin&lt;/code&gt;、&lt;code&gt;font-size&lt;/code&gt;、&lt;code&gt;font-weight&lt;/code&gt; 等。为了编写更为通用的 helper，我们需要更细致的划分。虽然我们并没有打算把它写成一个框架，但是我们希望 helper 的功能足够强大。通过对比和思考，我将 helper 暂时划分成以下几个模块：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Colors（颜色，包括 bg-color 及 text-color）&lt;/li&gt;
&lt;li&gt;Paddings（内边距序列）&lt;/li&gt;
&lt;li&gt;Margins（外边距序列）&lt;/li&gt;
&lt;li&gt;Typography（排版，包括 font-size 及 font-weight）&lt;/li&gt;
&lt;li&gt;Border（边框线）&lt;/li&gt;
&lt;li&gt;Radius（圆角）&lt;/li&gt;
&lt;li&gt;Shadow（阴影）&lt;/li&gt;
&lt;li&gt;Size（尺寸，包括 height 及 width）&lt;/li&gt;
&lt;li&gt;Gutters（栅格间距序列）&lt;/li&gt;
&lt;li&gt;Alignment（主要是 vertical-align）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;和之前编写轻量级框架一样，我们同样使用 Sass 预编译器。helper 类几乎都是 Sass 循环生成的，所以源代码看上去很精简。&lt;/p&gt;
&lt;h2&gt;颜色变量&lt;/h2&gt;
&lt;p&gt;因为颜色稍微特殊一点，我将颜色与其它内容分开单独介绍。在编写轻量级框架的时候，我也定义了常用的一些颜色，但是面对特殊需求时略显单一，所以我们需要使用 helper 扩充颜色集群。但是颜色是一个无法量化的概念，所以再强大的 helper 也无法面面俱到，只能是一定程度上的补充。参考常用的颜色值，最终我设置了红、橙、黄、绿、青、蓝、靛、紫、粉、冷灰、暖灰等几种色系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/999445/201711/999445-20171112220124388-1605308281.jpg&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;187&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中每个颜色都有六个亮度值，分别用 &lt;code&gt;-lightest&lt;/code&gt;、&lt;code&gt;-lighter&lt;/code&gt;、&lt;code&gt;-light&lt;/code&gt;、&lt;code&gt;-dark&lt;/code&gt;、&lt;code&gt;-darker&lt;/code&gt;、&lt;code&gt;-darkest&lt;/code&gt; 表示，此处有参考 tailwindcss 的颜色命名。这些颜色都是通过 Sass 的颜色函数生成的。以灰色为例，Sass 代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$gray:#999;
$gray-light:lighten($gray, 15%);
$gray-lighter:lighten($gray, 25%);
$gray-lightest:lighten($gray, 35%);
$gray-dark:darken($gray, 15%);
$gray-darker:darken($gray, 25%);
$gray-darkest:darken($gray, 35%);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些颜色序列看上去很像一套马克笔，不过马克笔灰色系更丰富，包括冷灰、暖灰、蓝灰、绿灰。&lt;/p&gt;
&lt;p&gt;其中背景色的循环方式如下，为了便于循环，我们定义了一个 &lt;code&gt;color map&lt;/code&gt;，然后用 &lt;code&gt;@each&lt;/code&gt; 方法循环。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$color-list:(
    'gray':$gray,
    'brown':$brown,
    'red':$red,
    'orange':$orange,
    'yellow':$yellow,
    'green':$green,
    'teal':$teal,
    'blue':$blue,
    'indigo':$indigo,
    'purple':$purple,
    'pink':$pink
);

@each $name,$color in $color-list &lt;/span&gt;{&lt;span&gt;
    .bg-#{$name&lt;/span&gt;} {&lt;span&gt;
        background-color&lt;/span&gt;:&lt;span&gt; $color&lt;/span&gt;;
    }&lt;span&gt;
    .bg-#&lt;/span&gt;{&lt;span&gt;$name&lt;/span&gt;}&lt;span&gt;-light &lt;/span&gt;{&lt;span&gt;
        background-color&lt;/span&gt;:&lt;span&gt; lighten($color, 15%)&lt;/span&gt;;
    }&lt;span&gt;
    .bg-#&lt;/span&gt;{&lt;span&gt;$name&lt;/span&gt;}&lt;span&gt;-lighter &lt;/span&gt;{&lt;span&gt;
        background-color&lt;/span&gt;:&lt;span&gt; lighten($color, 25%)&lt;/span&gt;;
    }&lt;span&gt;
    .bg-#&lt;/span&gt;{&lt;span&gt;$name&lt;/span&gt;}&lt;span&gt;-lightest &lt;/span&gt;{&lt;span&gt;
        background-color&lt;/span&gt;:&lt;span&gt; lighten($color, 35%)&lt;/span&gt;;
    }&lt;span&gt;
    .bg-#&lt;/span&gt;{&lt;span&gt;$name&lt;/span&gt;}&lt;span&gt;-dark &lt;/span&gt;{&lt;span&gt;
        background-color&lt;/span&gt;:&lt;span&gt; darken($color, 15%)&lt;/span&gt;;
    }&lt;span&gt;
    .bg-#&lt;/span&gt;{&lt;span&gt;$name&lt;/span&gt;}&lt;span&gt;-darker &lt;/span&gt;{&lt;span&gt;
        background-color&lt;/span&gt;:&lt;span&gt; darken($color, 25%)&lt;/span&gt;;
    }&lt;span&gt;
    .bg-#&lt;/span&gt;{&lt;span&gt;$name&lt;/span&gt;}&lt;span&gt;-darkest &lt;/span&gt;{&lt;span&gt;
        background-color&lt;/span&gt;:&lt;span&gt; darken($color, 35%)&lt;/span&gt;;
    }&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;命名策略&lt;/h2&gt;
&lt;p&gt;理所当然，我又提到了命名策略。在编写轻量级框架的时候，我也着重讨论了类命名策略以及比较了一些框架的命名方式。无论是框架还是 helper，类命名都决定了其易用性，而且会影响使用者的习惯，所以我会从简洁、直观、易用等几个角度命名。不过 helper 的命名比较简单，因为几乎大多数都是单一的 CSS 样式，所以命名策略基本都是对 CSS 属性的抽象与简化。&lt;/p&gt;
&lt;h3&gt;数字型命名 VS. 尺寸型命名&lt;/h3&gt;
&lt;p&gt;我在工作中接触过两种 helper 序列的表示方法，一种是常见的数字型，另一种是尺寸型。以 &lt;code&gt;padding&lt;/code&gt; 为例：&lt;/p&gt;
&lt;p&gt;数字型&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.p-5 &lt;/span&gt;{&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 5px !important&lt;/span&gt;;
}&lt;span&gt;
.p-10 &lt;/span&gt;{&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 10px !important&lt;/span&gt;;
}&lt;span&gt;
.p-15 &lt;/span&gt;{&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 15px !important&lt;/span&gt;;
}&lt;span&gt;
.p-20 &lt;/span&gt;{&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 20px !important&lt;/span&gt;;
}&lt;span&gt;
.p-25 &lt;/span&gt;{&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 25px !important&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尺寸型&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.p-xs &lt;/span&gt;{&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 5px !important&lt;/span&gt;;
}&lt;span&gt;
.p-sm &lt;/span&gt;{&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 10px !important&lt;/span&gt;;
}&lt;span&gt;
.p-md &lt;/span&gt;{&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 15px !important&lt;/span&gt;;
}&lt;span&gt;
.p-lg &lt;/span&gt;{&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 20px !important&lt;/span&gt;;
}&lt;span&gt;
.p-xl &lt;/span&gt;{&lt;span&gt;
  padding&lt;/span&gt;:&lt;span&gt; 25px !important&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然在实际应用时，尺寸型写法并没有什么不妥，但很明显它的扩展性很差，而且不直观。作为例子，我只写了五个数值，但如果我们希望添加更多的 padding 值的话，尺寸型命名就乏力了。我认为，凡是可以量化的属性，比如 &lt;code&gt;padding&lt;/code&gt;、&lt;code&gt;margin&lt;/code&gt;、&lt;code&gt;font-size&lt;/code&gt;、&lt;code&gt;border-width&lt;/code&gt; 等，应该直接用数值表示，而对于不可以量化的属性，比如 &lt;code&gt;box-shadow&lt;/code&gt;，用尺寸型命名比较合适。&lt;/p&gt;
&lt;h3&gt;精简命名&lt;/h3&gt;
&lt;p&gt;大多数的 helpr 命名都是 CSS 属性的首字母缩写形式。比如 &lt;code&gt;p&lt;/code&gt; 表示 &lt;code&gt;padding&lt;/code&gt;、&lt;code&gt;m&lt;/code&gt; 表示 &lt;code&gt;margin&lt;/code&gt;、&lt;code&gt;f-s&lt;/code&gt; 表示 &lt;code&gt;font-size&lt;/code&gt; 等。这符合我们期望的简洁直观的要求。但也不能唯缩写论，所有的命名都用缩写，因为有些属性的缩写会重复，而且有些缩写之后就不知道具体含义了。我们可以沿用之前的规则，可以量化的属性都用缩写，不可以量化的属性用简化的全称（比如 &lt;code&gt;box-shadow&lt;/code&gt; 可以替换为 &lt;code&gt;shadow&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;以 padding 循环为例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@for $counter from 0 through 6 &lt;/span&gt;{&lt;span&gt;
    .p-#{ $counter * 5 &lt;/span&gt;} {&lt;span&gt;
        padding&lt;/span&gt;:&lt;span&gt; ($counter * 5px) !important&lt;/span&gt;;
    }&lt;span&gt;
    .p-t-#&lt;/span&gt;{&lt;span&gt; $counter * 5 &lt;/span&gt;} {&lt;span&gt;
        padding-top&lt;/span&gt;:&lt;span&gt; ($counter * 5px) !important&lt;/span&gt;;
    }&lt;span&gt;
    .p-r-#&lt;/span&gt;{&lt;span&gt; $counter * 5 &lt;/span&gt;} {&lt;span&gt;
        padding-right&lt;/span&gt;:&lt;span&gt; ($counter * 5px) !important&lt;/span&gt;;
    }&lt;span&gt;
    .p-b-#&lt;/span&gt;{&lt;span&gt; $counter * 5 &lt;/span&gt;} {&lt;span&gt;
        padding-bottom&lt;/span&gt;:&lt;span&gt; ($counter * 5px) !important&lt;/span&gt;;
    }&lt;span&gt;
    .p-l-#&lt;/span&gt;{&lt;span&gt; $counter * 5 &lt;/span&gt;} {&lt;span&gt;
        padding-left&lt;/span&gt;:&lt;span&gt; ($counter * 5px) !important&lt;/span&gt;;
    }&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于其它几个 helper 与此类似，循环也很简单。&lt;/p&gt;
&lt;h3&gt;关于 Margin 负值&lt;/h3&gt;
&lt;p&gt;margin 的 helper 相比其它来说比较特殊，因为它有负值，所以我们必须考虑如何表示负值。有些框架用 &lt;code&gt;n&lt;/code&gt; （negtive）表示负值。比如 &lt;code&gt;m-{t,r,b,l}-n-*&lt;/code&gt; 的形式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.m-t-n-5 &lt;/span&gt;{&lt;span&gt;
  margin-top&lt;/span&gt;:&lt;span&gt; -5px !important&lt;/span&gt;;
}&lt;span&gt;
.m-r-n-5 &lt;/span&gt;{&lt;span&gt;
  margin-right&lt;/span&gt;:&lt;span&gt; -5px !important&lt;/span&gt;;
}&lt;span&gt;
.m-b-n-5 &lt;/span&gt;{&lt;span&gt;
  margin-bottom&lt;/span&gt;:&lt;span&gt; -5px !important&lt;/span&gt;;
}&lt;span&gt;
.m-l-n-5 &lt;/span&gt;{&lt;span&gt;
  margin-left&lt;/span&gt;:&lt;span&gt; -5px !important&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我觉得完全可以简化一步，用 &lt;code&gt;-&lt;/code&gt; 表示负值，简单易懂，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.m-t--5 &lt;/span&gt;{&lt;span&gt;
  margin-top&lt;/span&gt;:&lt;span&gt; -5px !important&lt;/span&gt;;
}&lt;span&gt;
.m-r--5 &lt;/span&gt;{&lt;span&gt;
  margin-right&lt;/span&gt;:&lt;span&gt; -5px !important&lt;/span&gt;;
}&lt;span&gt;
.m-b--5 &lt;/span&gt;{&lt;span&gt;
  margin-bottom&lt;/span&gt;:&lt;span&gt; -5px !important&lt;/span&gt;;
}&lt;span&gt;
.m-l--5 &lt;/span&gt;{&lt;span&gt;
  margin-left&lt;/span&gt;:&lt;span&gt; -5px !important&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然这种命名方式很简洁，但看上去和其它 helper 不太统一。&lt;/p&gt;
&lt;h3&gt;关于圆角&lt;/h3&gt;
&lt;p&gt;圆角的 CSS 属性名为 &lt;code&gt;border-radius&lt;/code&gt;，如果直接简写的话和 &lt;code&gt;border-right&lt;/code&gt; 就重复了，参见其它框架的表示方法有 &lt;code&gt;corner-rounded&lt;/code&gt;、&lt;code&gt;rounded&lt;/code&gt; 等。我们也可以简化一下，比如直接用 r 表示，既可以代表  &lt;code&gt;rounded&lt;/code&gt; 也可以代表 &lt;code&gt;radius&lt;/code&gt;，一举两得。这样的表示方法应该不会有歧义，毕竟在我们的脑海中，&lt;code&gt;r&lt;/code&gt; 表示半径算是一个根深蒂固的概念。Sass 代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@for $counter from 0 through 10 &lt;/span&gt;{&lt;span&gt;
    .r-#{ $counter &lt;/span&gt;} {&lt;span&gt;
        border-radius&lt;/span&gt;:&lt;span&gt; ($counter * 1px) !important&lt;/span&gt;;
    }&lt;span&gt;
    .r-t-l-#&lt;/span&gt;{&lt;span&gt; $counter &lt;/span&gt;} {&lt;span&gt;
        border-top-left-radius&lt;/span&gt;:&lt;span&gt; ($counter * 1px) !important&lt;/span&gt;;
    }&lt;span&gt;
    .r-t-r-#&lt;/span&gt;{&lt;span&gt; $counter &lt;/span&gt;} {&lt;span&gt;
        border-top-right-radius&lt;/span&gt;:&lt;span&gt; ($counter * 1px) !important&lt;/span&gt;;
    }&lt;span&gt;
    .r-b-r-#&lt;/span&gt;{&lt;span&gt; $counter &lt;/span&gt;} {&lt;span&gt;
        border-bottom-right-radius&lt;/span&gt;:&lt;span&gt; ($counter * 1px) !important&lt;/span&gt;;
    }&lt;span&gt;
    .r-b-l-#&lt;/span&gt;{&lt;span&gt; $counter &lt;/span&gt;} {&lt;span&gt;
        border-bottom-left-radius&lt;/span&gt;:&lt;span&gt; ($counter * 1px) !important&lt;/span&gt;;
    }&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们用 &lt;code&gt;-full&lt;/code&gt; 表示 &lt;code&gt;100%&lt;/code&gt;，其它框架也基本如此，稍后再谈论 &lt;code&gt;r-100%&lt;/code&gt; 这种形式的可行性及问题所在。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.r-full &lt;/span&gt;{&lt;span&gt;
    border-radius&lt;/span&gt;:&lt;span&gt; 100%
&lt;/span&gt;}&lt;span&gt;
.r-t-l-full &lt;/span&gt;{&lt;span&gt;
    border-top-left-radius&lt;/span&gt;:&lt;span&gt; 100%
&lt;/span&gt;}&lt;span&gt;
.r-t-r-full &lt;/span&gt;{&lt;span&gt;
    border-top-right-radius&lt;/span&gt;:&lt;span&gt; 100%
&lt;/span&gt;}&lt;span&gt;
.r-b-r-full &lt;/span&gt;{&lt;span&gt;
    border-bottom-right-radius&lt;/span&gt;:&lt;span&gt; 100%
&lt;/span&gt;}&lt;span&gt;
.r-b-l-full &lt;/span&gt;{&lt;span&gt;
    border-bottom-left-radius&lt;/span&gt;:&lt;span&gt; 100%
&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的，高度和宽度的 &lt;code&gt;100%&lt;/code&gt; 数值也用 &lt;code&gt;-full&lt;/code&gt; 表示，循环方式类似。&lt;/p&gt;
&lt;h3&gt;关于阴影&lt;/h3&gt;
&lt;p&gt;我们在之前反复提到了阴影属于非量化的属性，所以只能使用尺寸型命名法，当然用数字也不是不可以，一会儿再详细说明。先看源代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.shadow-xs&lt;/span&gt;{&lt;span&gt;
    box-shadow&lt;/span&gt;:&lt;span&gt;0 1px 5px 1px rgba(0,0,0,.15)&lt;/span&gt;;
}&lt;span&gt;
.shadow-sm&lt;/span&gt;{&lt;span&gt;
    box-shadow&lt;/span&gt;:&lt;span&gt;0 2px 10px 2px rgba(0,0,0,.15)&lt;/span&gt;;
}&lt;span&gt;
.shadow-md&lt;/span&gt;{&lt;span&gt;
    box-shadow&lt;/span&gt;:&lt;span&gt;0 3px 20px 3px rgba(0,0,0,.15)&lt;/span&gt;;
}&lt;span&gt;
.shadow-lg&lt;/span&gt;{&lt;span&gt;
    box-shadow&lt;/span&gt;:&lt;span&gt;0 4px 30px 4px rgba(0,0,0,.15)&lt;/span&gt;;
}&lt;span&gt;
.shadow-xl&lt;/span&gt;{&lt;span&gt;
    box-shadow&lt;/span&gt;:&lt;span&gt;0 5px 40px 5px rgba(0,0,0,.15)&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整体而言，比较简洁，不过阴影的数值我是粗略添加的，实际情况要做调整。说点题外话，我个人觉得对于非量化的属性本身而言，或许用处就不大，因为这些属性能够满足业务需求的可能微乎其微，但是它仍然是不可获取的一部分。所以说“通用的” helper 并不一定通用。&lt;/p&gt;
&lt;h3&gt;关于强度表示法&lt;/h3&gt;
&lt;p&gt;通过 &lt;code&gt;font-weight&lt;/code&gt; 说一下关于强度的表示法，&lt;code&gt;font-weight&lt;/code&gt; 的 CSS 属性本身就有两种表示法，一种是直接文字命名，比如 &lt;code&gt;.f-s-thin&lt;/code&gt; , &lt;code&gt;.f-s-normal&lt;/code&gt;, &lt;code&gt;.f-s-bold&lt;/code&gt; 等，另一种是比较直接的 100 ~ 900 数值型表示法。以我个人观点，我更倾向于数值型表示法，简单直观，并没有歧义，也算是约定俗成的规定吧。&lt;code&gt;font-weight&lt;/code&gt; 的循环比较简单，而且数值有限，我们可以直接写出从 100 ~ 900 的所有 helper。其它类似的 helper  也可以用 100 ~ 900 表示强度，比如颜色。&lt;/p&gt;
&lt;p&gt;需要注意的是，编写 helper 时一定要对数值型、尺寸型、强度型命名做好归类与统一，切记毫无章法地胡乱使用。&lt;/p&gt;
&lt;h3&gt;类命名中的特殊字符&lt;/h3&gt;
&lt;p&gt;对于 &lt;code&gt;r-100%&lt;/code&gt; 或者 &lt;code&gt;w-100%&lt;/code&gt; 这样的写法是可以的，但是在定义 CSS 时要进行字符转义，比如&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.r-100\% &lt;/span&gt;{&lt;span&gt;
    border-radius&lt;/span&gt;:&lt;span&gt; 100%
&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用方式如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;div class=&quot;r-100%&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这种写法总给人怪怪的感觉，而且输入时要按 &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;%&lt;/code&gt;，不太方便，所以暂时只作为参考。另一方面，我们可以通过特殊字符定义百分数，比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.w-50 &lt;/span&gt;{&lt;span&gt;
   width&lt;/span&gt;:&lt;span&gt; 50px&lt;/span&gt;;
}&lt;span&gt;
.w\:50 &lt;/span&gt;{&lt;span&gt;
   height&lt;/span&gt;:&lt;span&gt; 50%
&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过约定的这种规则，我们就可以为 helper 添加栅格系统了。不过这只是暂时的想法，毕竟我们已经有一套轻量级 CSS 框架了。&lt;/p&gt;
&lt;h2&gt;序列数量&lt;/h2&gt;
&lt;p&gt;因为 helper 是循环生成的，所以循环的数量决定了 helper 的丰富度。那么循环的数量多少合适呢？这是所有 helper 最难统一的地方。不可否认，helper 的数量越多，通用性越强，也就越灵活。任何事物都有两面性，虽然 helper 越多越好，但是数量太多会造成文件臃肿。目前我写的 helper 的文件体积几乎和之前的轻量级框架差不多，某种程度上来说确实在向“零件化”的框架发展。另一方面，其实 helper 并没有必要写的太全面，很多数值会造成冗余。&lt;/p&gt;
&lt;p&gt;简单来说，对于有限值的 helper 就可以全部写出，比如对其方式、font-weight 等。而对于任意数值的 helper 来说，我们需要选择常用的一些数值，比如 padding、margin 等属性，基本 1~50 px 之间就可以了，而圆角 1~20 px 足矣。不能量化的属性比如阴影就完全看个人喜好了，我觉得五个尺寸就差不多。对于实在特殊的需求也只能特殊对待了。&lt;/p&gt;
&lt;h2&gt;实例测试&lt;/h2&gt;
&lt;p&gt;现在我们测试一下我们所写的 helper 是不是能够满足一般需求，比如一个带有圆角阴影的用户卡片，如下：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;qVjJeB&quot; data-default-tab=&quot;result&quot; data-user=&quot;nzbin&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;snack-helper-test&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/nzbin/pen/qVjJeB/&quot;&gt;snack-helper-test&lt;/a&gt; by Zongbin (&lt;a href=&quot;https://codepen.io/nzbin&quot;&gt;@nzbin&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这个实例全部是用 helper 完成的，可惜这套 helper 没有栅格系统，所以布局并不灵活，但是结合之前的轻量级框架，会显示出它强大的功能。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;编写 helper 比编写框架要容易的多，但简单易用、通俗易懂的 helper 还需要严谨的思考，详细的 helper 可以参见 &lt;a href=&quot;https://github.com/nzbin/snack-helper&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; 源码。虽然我一直声称没有打算把 helper 写成一个框架，但随着细节的追加与调整，比如添加栅格系统，这个通用的 helper 已经趋向于一个“零件化”的框架了。至于组件式框架和零件式框架哪个更好，这是一个很难选择的问题。但是我更倾向于组件与零件的结合，因为我不希望整个 HTML 文件被冗长的 CSS 类装饰的支离破碎。&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 15:59:00 +0000</pubDate>
<dc:creator>nzbin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nzbin/p/7746047.html</dc:identifier>
</item>
<item>
<title>71、django之Ajax续 - 布吉岛丶</title>
<link>http://www.cnblogs.com/liluning/p/7834415.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liluning/p/7834415.html</guid>
<description>&lt;p&gt;&lt;span&gt;接上篇随笔。继续介绍ajax的使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上篇友情连接：&lt;a href=&quot;http://www.cnblogs.com/liluning/p/7831169.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/liluning/p/7831169.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;本篇导航：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、Ajax响应参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上篇最后介绍了ajax的请求参数现在补充一个响应参数&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;dataType：  
预期服务器返回的数据类型,服务器端返回的数据会根据这个值解析后，传递给回调函数。 默认不需要显性指定这个属性，
ajax会根据服务器返回的content Type来进行转换； 比如我们的服务器响应的content Type为json格式，这时ajax
方法就会对响应的内容进行一个json格式的转换，if转换成功，我们在success的回调函数里就会得到一个json格式的对
象；转换失败就会触发error这个回调函数。如果我们明确地指定目标类型，就可以使用 data Type。dataType的可用
值：html｜xml｜json｜text｜script&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单说就是告诉服务器需要返回什么数据类型&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、csrf 跨站请求伪造&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们之前用form表单POST提交时如果没有｛% csrf_token %｝客户端收不到数据会报错同样用ajax POST提交数据也有同样的错误那么准么解决呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、方法一&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$.ajaxSetup({
    data: {csrfmiddlewaretoken: &lt;/span&gt;'{{ csrf_token }}'&lt;span&gt; },
});

$.ajax({
   ... 
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;缺点：当js与html文件分离时，{{ csrf_token }} 无法被渲染失去作用，用方法一必须将js和html写在一起&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、方法二&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
{% csrf_token %&lt;span&gt;}

$.ajax({
    url:&lt;/span&gt;&quot;&quot;&lt;span&gt;,
    type:&lt;/span&gt;&quot;POST&quot;&lt;span&gt;,
    data:{
        csrfmiddlewaretoken:$(&lt;/span&gt;&quot;[name='csrfmiddlewaretoken']&quot;&lt;span&gt;).val(),  
    }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;缺点：html body标签中必须存在{% csrf_token %}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、方法三&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&amp;lt;script src=&quot;{% static 'js/jquery.cookie.js' %}&quot;&amp;gt;&amp;lt;/script&amp;gt; 需要下载对应文件&lt;/span&gt;
&amp;lt;script src=&quot;https://cdn.bootcss.com/jquery-cookie/1.4.1/jquery.cookie.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt;
$.ajax({
    headers:{&lt;/span&gt;&quot;X-CSRFToken&quot;:$.cookie('csrftoken'&lt;span&gt;)},
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;缺点：基本通用哈哈哈&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、jQuery.serialize()&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;serialize()&lt;/code&gt;函数用于&lt;strong&gt;序列化一组表单元素，将表单内容编码为用于提交的字符串&lt;/strong&gt;。&lt;/span&gt;&lt;span&gt;&lt;code&gt;serialize()&lt;/code&gt;函数常用于将表单内容序列化，以便用于AJAX提交。&lt;/span&gt;&lt;span&gt;该函数主要根据&lt;strong&gt;用于提交&lt;/strong&gt;的&lt;strong&gt;有效&lt;/strong&gt;表单控件的name和value，将它们拼接为一个可直接用于表单提交的文本字符串，该字符串已经过标准的URL编码处理(字符集编码为UTF-8)。&lt;/span&gt;&lt;span&gt;该函数不会序列化不需要提交的表单控件，这和常规的表单提交行为是一致的。例如：不在&amp;lt;form&amp;gt;标签内的表单控件不会被提交、没有name属性的表单控件不会被提交、带有disabled属性的表单控件不会被提交、没有被选中的表单控件不会被提交。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简单总结：就是说我们如果有很多input标签内容需要提交总不会全部写在data中罗列出来吧，这就用到&lt;code&gt;serialize()&lt;/code&gt;函数了可以帮我们一次性提交数据到客户端。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3ed8b707-cac5-4057-b38f-cb097c0d8557&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3ed8b707-cac5-4057-b38f-cb097c0d8557&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3ed8b707-cac5-4057-b38f-cb097c0d8557&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;myForm&quot;&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;&lt;span&gt;=&quot;http://www.365mini.com&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uid&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;hidden&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;张三&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;123456&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;grade&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;grade&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;一年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;二年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt; selected&lt;/span&gt;&lt;span&gt;=&quot;selected&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;三年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;四年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;五年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;六年级&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; checked&lt;/span&gt;&lt;span&gt;=&quot;checked&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;男
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sex&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;radio&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;女
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hobby&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; checked&lt;/span&gt;&lt;span&gt;=&quot;checked&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;游泳
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hobby&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; checked&lt;/span&gt;&lt;span&gt;=&quot;checked&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;跑步
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hobby&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;羽毛球
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;btn&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;btn&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;点击&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;提交数据&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;对&amp;lt;form&amp;gt;元素进行序列化可以直接序列化其内部的所有表单元素。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;序列化所有：&lt;/span&gt;$(&quot;form&quot;).serialize()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
uid=1&lt;span&gt;&amp;amp;username&lt;/span&gt;=%E5%BC%A0%E4%B8%89&lt;span&gt;&amp;amp;password&lt;/span&gt;=123456&lt;span&gt;&amp;amp;grade&lt;/span&gt;=3&lt;span&gt;&amp;amp;sex&lt;/span&gt;=1&lt;span&gt;&amp;amp;hobby&lt;/span&gt;=1&lt;span&gt;&amp;amp;hobby&lt;/span&gt;&lt;span&gt;=2&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;部分序列化：$(&quot;:text, select, :checkbox&quot;).serialize()&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
username=%E5%BC%A0%E4%B8%89&lt;span&gt;&amp;amp;password&lt;/span&gt;=123456&lt;span&gt;&amp;amp;grade&lt;/span&gt;=3&lt;span&gt;&amp;amp;hobby&lt;/span&gt;=1&lt;span&gt;&amp;amp;hobby&lt;/span&gt;=2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;view视图函数如何取值呢？和以前的POST请求相同&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
request.POST.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  //input中的name属性
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、上传文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、普通上传文件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）template&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;/upload/&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt; enctype&lt;/span&gt;&lt;span&gt;=&quot;multipart/form-data&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% csrf_token %}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户名&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;头像&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;avatar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;enctype属性不可缺少&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）view&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; upload(request):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; request.method==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, request.POST)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FILES&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,request.FILES)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; FILES &amp;lt;MultiValueDict: {}&amp;gt;&lt;/span&gt;
&lt;span&gt;
        file_obj&lt;/span&gt;=request.FILES.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;avatar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(file_obj.name,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-----&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        with open(file_obj.name,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) as f:
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; file_obj:
                f.write(i)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; render(request,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;upload.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这是将上传的文件写入到本地file_obj的name方法可以取到文件名称&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、&lt;/span&gt;&lt;span&gt;Ajax(FormData)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;XMLHttpRequest Level 2添加了一个新的接口&lt;code&gt;FormData&lt;/code&gt;.利用&lt;code&gt;FormData对象&lt;/code&gt;,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用XMLHttpRequest的&lt;code&gt;send()&lt;/code&gt;方法来异步的提交这个&quot;表单&quot;.比起普通的ajax,使用&lt;code&gt;FormData&lt;/code&gt;的最大优点就是我们可以异步上传一个二进制文件.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）template&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_935c10cd-e34b-49b7-bea1-10c106c1a5b0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_935c10cd-e34b-49b7-bea1-10c106c1a5b0&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_935c10cd-e34b-49b7-bea1-10c106c1a5b0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;s1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;密码&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;头像&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;upload_avatar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;Ajax_send&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;提交&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;login_error&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.js &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://cdn.bootcss.com/jquery-cookie/1.4.1/jquery.cookie.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; foo() {
        $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.login_error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).html(&lt;/span&gt;&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;)
    }
    $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.Ajax_send&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; formData&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; FormData();
        formData.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,$(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val());
        formData.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,$(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val());
        formData.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;avatar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,$(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#upload_avatar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].files[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);
        $.ajax({
            url:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/get_ajax/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            type:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            headers:{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;X-CSRFToken&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:$.cookie(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;csrftoken&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)},
            data:formData,
            contentType:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            processData:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
            success:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; data&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;JSON.parse(data);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;data[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]){
                    $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.login_error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).html(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名或者密码错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                    setTimeout(foo,&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;)
                }
            }
        })
    })
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2）view&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_ajax(request):
    username&lt;/span&gt;=request.POST.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    password&lt;/span&gt;=request.POST.get(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FIFLE&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,request.FILES)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,request.POST)
    response&lt;/span&gt;={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:False}
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; username==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bjd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; password==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        response[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]=&lt;span&gt;True
    &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; json
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HttpResponse(json.dumps(response))
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 14 Nov 2017 15:31:00 +0000</pubDate>
<dc:creator>布吉岛丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liluning/p/7834415.html</dc:identifier>
</item>
<item>
<title>redis源码分析之事务Transaction（上） - 凌风郎少</title>
<link>http://www.cnblogs.com/lfls/p/7835333.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lfls/p/7835333.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;这周学习了一下redis事务功能的实现原理，本来是想用一篇文章进行总结的，写完以后发现这块内容比较多，而且多个命令之间又互相依赖，放在一篇文章里一方面篇幅会比较大，另一方面文章组织结构会比较乱，不容易阅读。因此把事务这个模块整理成上下两篇文章进行总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://www.jianshu.com/p/acb97d620ad7&quot; class=&quot;uri&quot;&gt;http://www.jianshu.com/p/acb97d620ad7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章我们重点分析一下redis事务命令中的两个辅助命令：watch跟unwatch。&lt;/p&gt;
&lt;h3 id=&quot;一redis事务辅助命令简介&quot;&gt;一、redis事务辅助命令简介&lt;/h3&gt;
&lt;p&gt;依然从server.c文件的命令表中找到相应的命令以及它们对应的处理函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//watch，unwatch两个命令我们把它们叫做redis事务辅助命令
{&quot;watch&quot;,watchCommand,-2,&quot;sF&quot;,0,NULL,1,-1,1,0,0},
{&quot;unwatch&quot;,unwatchCommand,1,&quot;sF&quot;,0,NULL,0,0,0,0,0},&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;watch，用于客户端关注某个key，当这个key的值被修改时，整个事务就会执行失败（注：该命令需要在事务开启前使用）。&lt;/li&gt;
&lt;li&gt;unwatch，用于客户端取消已经watch的key。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;用法举例如下：&lt;br/&gt;clientA&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1:6379&amp;gt; watch a
OK
127.0.0.1:6379&amp;gt; multi
OK
127.0.0.1:6379&amp;gt; set b b
QUEUED
//在执行前插入clientB的操作如下，事务就会执行失败
127.0.0.1:6379&amp;gt; exec
(nil)
127.0.0.1:6379&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;clientB&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1:6379&amp;gt; set a aa
OK
127.0.0.1:6379&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;二redis事务辅助命令源码分析&quot;&gt;二、redis事务辅助命令源码分析&lt;/h3&gt;
&lt;p&gt;在看具体执行函数之前首先了解几个数据结构：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//每个客户端对象中有一个watched_keys链表来保存已经watch的key
typedef struct client {
    list *watched_keys;  
}
//上述链表中每个节点的数据结构
typedef struct watchedKey {
    //watch的key
    robj *key;
    //指向的DB，后面细说
    redisDb *db;
} watchedKey;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关于事务的几个命令所对应的函数都放在了multi.c文件中。&lt;br/&gt;一起看下watch命令对应处理函数的源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void watchCommand(client *c) {
    int j;
    //如果客户端处于事务状态，则返回错误信息
    //由此可以看出，watch必须在事务开启前使用
    if (c-&amp;gt;flags &amp;amp; CLIENT_MULTI) {
        addReplyError(c,&quot;WATCH inside MULTI is not allowed&quot;);
        return;
    }
    //依次watch客户端的各个参数（这里说明watch命令可以一次watch多个key）
    //注：0表示命令本身，所以参数从1开始
    for (j = 1; j &amp;lt; c-&amp;gt;argc; j++)
        watchForKey(c,c-&amp;gt;argv[j]);
    //返回结果
    addReply(c,shared.ok);
}

//具体的watch操作，代码较长，慢慢分析
void watchForKey(client *c, robj *key) {
    list *clients = NULL;
    listIter li;
    listNode *ln;
    //上面已经提到了数据结构
    watchedKey *wk;

    //首先判断key是否已经被客户端watch
    //listRewind这个函数在发布订阅那篇文章里也有，就是把客户端的watched_keys赋值给li
    listRewind(c-&amp;gt;watched_keys,&amp;amp;li);
    while((ln = listNext(&amp;amp;li))) {
        wk = listNodeValue(ln);
        //这里一个wk节点中有db，key两个字段
        if (wk-&amp;gt;db == c-&amp;gt;db &amp;amp;&amp;amp; equalStringObjects(key,wk-&amp;gt;key))
            return; 
    }
    //开始watch指定key
    //整个watch操作保存了两套数据结构，一套是在db-&amp;gt;watched_keys中的字典结构，如下：
    clients = dictFetchValue(c-&amp;gt;db-&amp;gt;watched_keys,key);
    //如果是key第一次出现，则进行初始化
    if (!clients) {
        clients = listCreate();
        dictAdd(c-&amp;gt;db-&amp;gt;watched_keys,key,clients);
        incrRefCount(key);
    }
    //把当前客户端加到该key的watch链表中
    listAddNodeTail(clients,c);
    //另一套是在c-&amp;gt;watched_keys中的链表结构：如下
    wk = zmalloc(sizeof(*wk));
    //初始化各个字段
    wk-&amp;gt;key = key;
    wk-&amp;gt;db = c-&amp;gt;db;
    incrRefCount(key);
    //加入到链表最后
    listAddNodeTail(c-&amp;gt;watched_keys,wk);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;整个watch的数据结构比较复杂，我这里画了一张图方便理解：&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/11/14/15fbb11cdf6e1733?w=1015&amp;amp;h=690&amp;amp;f=png&amp;amp;s=53791&quot; alt=&quot;watch数据结构&quot;/&gt;&lt;br/&gt;简单解释一下上面的图，首先redis把每个客户端连接包装成了一个client对象，上图中db，watch_keys就是其中的两个字段（client对象里面还有很多其他字段，包括上篇文章中提到的pub/sub）。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;db字段指向给该client对象分配的储存空间，&lt;strong&gt;db对象&lt;/strong&gt;中也含有一个watched_keys字段，是字典类型（也就是哈希表），以想要watch的key做key，存储的链表则是所有watch该key的客户端。&lt;/li&gt;
&lt;li&gt;watch_keys字段则是一个链表类型，每个节点类型为watch_key，其中包含两个字段，key表示watch的key，&lt;strong&gt;db则指向了当前client对象的db字段&lt;/strong&gt;，如上图。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;看完watch命令的源码以后，再来看一下unwatch命令，如果搞明白了上面提到的两套数据结构，那么看unwatch的源码应该会比较容易，毕竟就是删除数据结构中对应的内容。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void unwatchCommand(client *c) {
    //取消watch所有key
    unwatchAllKeys(c);
    //修改客户端状态
    c-&amp;gt;flags &amp;amp;= (~CLIENT_DIRTY_CAS);
    addReply(c,shared.ok);
}

//取消watch的key
void unwatchAllKeys(client *c) {
    listIter li;
    listNode *ln;
    //如果客户端没有watch任何key，则直接返回
    if (listLength(c-&amp;gt;watched_keys) == 0) return;
    //注意这里操作的是链表字段
    listRewind(c-&amp;gt;watched_keys,&amp;amp;li);
    while((ln = listNext(&amp;amp;li))) {
        list *clients;
        watchedKey *wk;
        //遍历取出该客户端watch的key
        wk = listNodeValue(ln);
        //取出所有watch了该key的客户端，这里则是字典（即哈希表）
        clients = dictFetchValue(wk-&amp;gt;db-&amp;gt;watched_keys, wk-&amp;gt;key);
        //空指针判断
        serverAssertWithInfo(c,NULL,clients != NULL);
        //从watch列表中删除该客户端
        listDelNode(clients,listSearchKey(clients,c));
        //如果key只有一个当前客户端watch，则删除
        if (listLength(clients) == 0)
            dictDelete(wk-&amp;gt;db-&amp;gt;watched_keys, wk-&amp;gt;key);
        //从当前client的watch列表中删除该key
        listDelNode(c-&amp;gt;watched_keys,ln);
        //减少引用数
        decrRefCount(wk-&amp;gt;key);
        //释放内存
        zfree(wk);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后我们考虑一下watch机制的触发时机，现在我们已经把想要watch的key加入到了watch的数据结构中，可以想到触发watch的时机应该是修改key的内容时，通知到所有watch了该key的客户端。&lt;/p&gt;
&lt;p&gt;感兴趣的用户可以任意选一个修改命令跟踪一下源码，例如set命令，我们发现所有对key进行修改的命令最后都会调用touchWatchedKey()函数，&lt;strong&gt;而该函数源码就位于multi.c文件中&lt;/strong&gt;，该函数就是触发watch机制的关键函数，源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//这里入参db就是客户端对象中的db，上文已经提到，不赘述
void touchWatchedKey(redisDb *db, robj *key) {
    list *clients;
    listIter li;
    listNode *ln;
    //保存watchkey的字典为空，则返回
    if (dictSize(db-&amp;gt;watched_keys) == 0) return;
    //注意这里操作的是字典（即哈希表）数据结构
    clients = dictFetchValue(db-&amp;gt;watched_keys, key);
    //如果没有客户端watch该key，则返回
    if (!clients) return;
    //把client赋值给li
    listRewind(clients,&amp;amp;li);
    //遍历watch了该key的客户端，修改他们的状态
    while((ln = listNext(&amp;amp;li))) {
        client *c = listNodeValue(ln);
        c-&amp;gt;flags |= CLIENT_DIRTY_CAS;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;跟我们猜测的一样，就是每当key的内容被修改时，则遍历所有watch了该key的客户端，设置相应的状态为CLIENT_DIRTY_CAS。&lt;/p&gt;
&lt;h3 id=&quot;三redis事务辅助命令总结&quot;&gt;三、redis事务辅助命令总结&lt;/h3&gt;
&lt;p&gt;上面就是redis事务命令中watch，unwatch的实现原理，其中最复杂的应该就是watch对应的那两套数据结构了，跟之前的pub/sub类似，都是使用链表+哈希表的结构存储，另外也是通过修改客户端的状态位FLAG来通知客户端。&lt;/p&gt;
&lt;p&gt;代码比较多，而且C++代码看上去会比较费劲，需要慢慢读，反复读。&lt;/p&gt;
</description>
<pubDate>Tue, 14 Nov 2017 15:13:00 +0000</pubDate>
<dc:creator>凌风郎少</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lfls/p/7835333.html</dc:identifier>
</item>
</channel>
</rss>