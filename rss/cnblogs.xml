<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【第二十一篇】C# MVC 微信授权登录 OAuth2.0授权登录 - KingDuDu</title>
<link>http://www.cnblogs.com/kingdudu/p/8795928.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kingdudu/p/8795928.html</guid>
<description>&lt;p&gt;首先一定要熟读，最起码过一遍微信开发者文档&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1421140842&quot; target=&quot;_blank&quot;&gt;微信开发者文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/719415/201804/719415-20180411151634020-1677256531.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;文档写的很清楚 &lt;/p&gt;
&lt;p&gt;授权登录四步走&lt;/p&gt;

&lt;p&gt;在正文开始前，我得讲清楚一个事情&lt;/p&gt;
&lt;p&gt;敲黑板，划重点：微信一共有两个 access_token&lt;/p&gt;
&lt;p&gt;一个是7200就过期的，一个是登录用的。这两个有本质区别，授权登录只会用到后者&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/719415/201804/719415-20180411151703516-787129543.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/719415/201804/719415-20180411151710635-745837124.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;======================正文开始======================&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 微信登录  
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;  
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult WechatLogin()  
{  
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(Request[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]))  
    {  
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据appid，secret，code取到用户的全部信息  &lt;/span&gt;
        Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; dic = GetUserInfoByCode(AppId, AppSecret, Request[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString());  
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (dic.ContainsKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;errcode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))  
        {  
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Redirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/WError/Index?Msg=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + dic[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;errmsg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString());  
        }  
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; openid = dic[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;openid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();  
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据微信唯一标识openid  去数据库判断是否存在  
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.不存在就新增  &lt;/span&gt;
        Model.TBase_UserInfo u =&lt;span&gt; BLL.TBase_UserInfo.Instence.GetUserByOpenId(openid);  
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (u == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)  
        {  
            u &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Model.TBase_UserInfo();  
            u.Code &lt;/span&gt;= GetCode&amp;lt;Model.TBase_UserInfo&amp;gt;&lt;span&gt;();  
            u.NickName &lt;/span&gt;= dic[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nickname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();  
            u.HeadImage &lt;/span&gt;= dic[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;headimgurl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();  
            u.OpenId &lt;/span&gt;=&lt;span&gt; openid;  
            u.IsOrder &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;  
            u.Status &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;  
            u.State &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;  
            u.AddDate &lt;/span&gt;=&lt;span&gt; DateTime.Now;  
  
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; id =&lt;span&gt; BLL.TBase_UserInfo.Instence.Add(u);  
            u.ID &lt;/span&gt;=&lt;span&gt; id;  
        }  
        Session[Esluo.Basic.Config.SESSION_KEY_FOR_USER] &lt;/span&gt;=&lt;span&gt; u;  
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Redirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/WHome/Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);  
    }  
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;  
    {  
        &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; redirect_uri = HttpUtility.UrlEncode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + Request.Url.Authority +&lt;span&gt; Request.Url.PathAndQuery);  
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Redirect(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://open.weixin.qq.com/connect/oauth2/authorize?appid={0}&amp;amp;redirect_uri={1}&amp;amp;response_type=code&amp;amp;scope={2}&amp;amp;state=STATE#wechat_redirect&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, AppId, redirect_uri, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;snsapi_userinfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));  
    }  
}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获得Code  
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;T&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;表&lt;/span&gt;&lt;span&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;  
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; GetCode&amp;lt;T&amp;gt;&lt;span&gt;()  
{  
    Type type &lt;/span&gt;= &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(T);  
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; BLL.TSYS_Code.Instence.GetCode(type.Name);  
}  
  
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt;&lt;span&gt;用code换取获取用户信息（包括非关注用户的）(此access_token是网页授权的和普通无关)  
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;Appid&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;Appsecret&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;Code&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;回调页面带的code参数&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;获取用户信息（json格式）&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;  
&lt;span&gt;public&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; GetUserInfoByCode(&lt;span&gt;string&lt;/span&gt; Appid, &lt;span&gt;string&lt;/span&gt; Appsecret, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Code)  
{  
    JavaScriptSerializer Jss &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JavaScriptSerializer();  
    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; url = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://api.weixin.qq.com/sns/oauth2/access_token?appid={0}&amp;amp;secret={1}&amp;amp;code={2}&amp;amp;grant_type=authorization_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Appid, Appsecret, Code);  
    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; ReText = WebRequestPostOrGet(url, &lt;span&gt;&quot;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;post/get方法获取信息  &lt;/span&gt;
    Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; DicText = (Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt;)Jss.DeserializeObject(ReText);  
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!DicText.ContainsKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;openid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))  
    {  
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; DicText;  
    }  
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;  
    {  
        Dictionary&lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; respDic = (Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;)Jss.DeserializeObject(WebRequestPostOrGet(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://api.weixin.qq.com/sns/userinfo?access_token=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + DicText[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;access_token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;openid=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + DicText[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;openid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;lang=zh_CN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;));  
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; respDic;  
    }  
}  
 
&lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; Post/Get提交调用抓取  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt;&lt;span&gt; Post/get 提交调用抓取  
&lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;url&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;提交地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;param&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;参数&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;  
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;  
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; WebRequestPostOrGet(&lt;span&gt;string&lt;/span&gt; sUrl, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; sParam)  
{  
    &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] bt =&lt;span&gt; System.Text.Encoding.UTF8.GetBytes(sParam);  
  
    Uri uriurl &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri(sUrl);  
    HttpWebRequest req &lt;/span&gt;= (HttpWebRequest)HttpWebRequest.Create(uriurl);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(url + (url.IndexOf(&quot;?&quot;) &amp;gt; -1 ? &quot;&quot; : &quot;?&quot;) + param);  &lt;/span&gt;
    req.Method = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;  
    req.Timeout &lt;/span&gt;= &lt;span&gt;120&lt;/span&gt; * &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;;  
    req.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;  
    req.ContentLength &lt;/span&gt;=&lt;span&gt; bt.Length;  
  
    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (Stream reqStream = req.GetRequestStream())&lt;span&gt;//&lt;/span&gt;&lt;span&gt;using 使用可以释放using段内的内存  &lt;/span&gt;
&lt;span&gt;    {  
        reqStream.Write(bt, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, bt.Length);  
        reqStream.Flush();  
    }  
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;  
    {  
        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (WebResponse res =&lt;span&gt; req.GetResponse())  
        {  
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在这里对接收到的页面内容进行处理   &lt;/span&gt;
&lt;span&gt;  
            Stream resStream &lt;/span&gt;=&lt;span&gt; res.GetResponseStream();  
  
            StreamReader resStreamReader &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamReader(resStream, System.Text.Encoding.UTF8);  
  
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; resLine;  
  
            System.Text.StringBuilder resStringBuilder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; System.Text.StringBuilder();  
  
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; ((resLine = resStreamReader.ReadLine()) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)  
            {  
                resStringBuilder.Append(resLine &lt;/span&gt;+&lt;span&gt; System.Environment.NewLine);  
            }  
  
            resStream.Close();  
            resStreamReader.Close();  
  
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; resStringBuilder.ToString();  
        }  
    }  
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)  
    {  
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ex.Message;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;url错误时候回报错  &lt;/span&gt;
&lt;span&gt;    }  
}  
&lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt; Post/Get提交调用抓取  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没了&lt;/p&gt;
&lt;p&gt;没错，就是这么简单，只有这么点内容就已经完成了整个微信授权登录的事情&lt;/p&gt;

&lt;p&gt;--------------------------------------------------------------------------------------------------------- &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转载请记得说明作者和出处哦-.-&lt;/strong&gt;&lt;br/&gt;作者：&lt;a href=&quot;http://home.cnblogs.com/u/kingdudu/&quot;&gt;KingDuDu&lt;/a&gt;&lt;br/&gt;原文出处：http://www.cnblogs.com/kingdudu/p/8795928.html&lt;/p&gt;
&lt;p&gt;---------------------------------------------------------------------------------------------------------&lt;/p&gt;

</description>
<pubDate>Wed, 11 Apr 2018 07:19:00 +0000</pubDate>
<dc:creator>KingDuDu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kingdudu/p/8795928.html</dc:identifier>
</item>
<item>
<title>内置模块 - 十三、</title>
<link>http://www.cnblogs.com/songxuexiang/p/8745123.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/songxuexiang/p/8745123.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、time、datetime模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、random模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、logging模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、os模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、sys模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;六、hashlib模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;七、josn、&lt;/span&gt;&lt;/strong&gt;pickle&lt;strong&gt;&lt;span&gt;模块&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;八、shutil模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;九、subprocess模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;十、re模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;十一、xml模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;十二、shelve模块&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;h3&gt;一、time模块&lt;/h3&gt;
&lt;p&gt; time模块中时间表现的格式主要有三种：&lt;/p&gt;
&lt;p&gt;　　a、timestamp时间戳，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量&lt;/p&gt;
&lt;p&gt;　　b、struct_time时间元组，共有九个元素组。&lt;/p&gt;
&lt;p&gt;　　c、format time 格式化时间，已格式化的结构使时间更具可读性。包括自定义格式和固定格式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、时间格式转换图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/996085/201610/996085-20161026171443546-488752980.png&quot; alt=&quot;&quot; width=&quot;612&quot; height=&quot;623&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、主要time生成方法和time格式转换方法实例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
import time

&lt;strong&gt;# 生成timestamp&lt;/strong&gt;
time.time()
# 1477471508.05&lt;br data-filtered=&quot;filtered&quot;/&gt;#struct_time to timestamp&lt;br data-filtered=&quot;filtered&quot;/&gt;time.mktime(time.localtime())
&lt;/pre&gt;
&lt;pre&gt;
&lt;strong&gt;#生成struct_time&lt;/strong&gt;
# timestamp to struct_time 本地时间
time.localtime()
time.localtime(time.time())
# time.struct_time(tm_year=2016, tm_mon=10, tm_mday=26, tm_hour=16, tm_min=45, tm_sec=8, tm_wday=2, tm_yday=300, tm_isdst=0)

# timestamp to struct_time 格林威治时间
time.gmtime()
time.gmtime(time.time())
# time.struct_time(tm_year=2016, tm_mon=10, tm_mday=26, tm_hour=8, tm_min=45, tm_sec=8, tm_wday=2, tm_yday=300, tm_isdst=0)

#format_time to struct_time
time.strptime('2011-05-05 16:37:06', '%Y-%m-%d %X')
# time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=16, tm_min=37, tm_sec=6, tm_wday=3, tm_yday=125, tm_isdst=-1)

&lt;strong&gt;#生成format_time&lt;/strong&gt;
#struct_time to format_time
time.strftime(&quot;%Y-%m-%d %X&quot;)
time.strftime(&quot;%Y-%m-%d %X&quot;,time.localtime())
# 2016-10-26 16:48:41


&lt;strong&gt;#生成固定格式的时间表示格式&lt;/strong&gt;
time.asctime(time.localtime())
time.ctime(time.time())
# Wed Oct 26 16:45:08 2016
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;struct_time元组元素结构&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
属性                            值
tm_year（年）                  比如2011 
tm_mon（月）                   1 - 12
tm_mday（日）                  1 - 31
tm_hour（时）                  0 - 23
tm_min（分）                   0 - 59
tm_sec（秒）                   0 - 61
tm_wday（weekday）             0 - 6（0表示周日）
tm_yday（一年中的第几天）        1 - 366
tm_isdst（是否是夏令时）        默认为-1
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;format time结构化表示&lt;/strong&gt;&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;12.5&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;格式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;含义&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%a&lt;/td&gt;
&lt;td&gt;本地（locale）简化星期名称&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%A&lt;/td&gt;
&lt;td&gt;本地完整星期名称&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%b&lt;/td&gt;
&lt;td&gt;本地简化月份名称&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%B&lt;/td&gt;
&lt;td&gt;本地完整月份名称&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;本地相应的日期和时间表示&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;一个月中的第几天（01 - 31）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%H&lt;/td&gt;
&lt;td&gt;一天中的第几个小时（24小时制，00 - 23）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%I&lt;/td&gt;
&lt;td&gt;第几个小时（12小时制，01 - 12）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%j&lt;/td&gt;
&lt;td&gt;一年中的第几天（001 - 366）&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%m&lt;/td&gt;
&lt;td&gt;月份（01 - 12）&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%M&lt;/td&gt;
&lt;td&gt;分钟数（00 - 59）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%p&lt;/td&gt;
&lt;td&gt;本地am或者pm的相应符&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%S&lt;/td&gt;
&lt;td&gt;秒（01 - 61）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;%U&lt;/td&gt;
&lt;td&gt;一年中的星期数。（00 - 53星期天是一个星期的开始。）第一个星期天之前的所有天数都放在第0周。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%w&lt;/td&gt;
&lt;td&gt;一个星期中的第几天（0 - 6，0是星期天）&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%W&lt;/td&gt;
&lt;td&gt;和%U基本相同，不同的是%W以星期一为一个星期的开始。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%x&lt;/td&gt;
&lt;td&gt;本地相应日期&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%X&lt;/td&gt;
&lt;td&gt;本地相应时间&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%y&lt;/td&gt;
&lt;td&gt;去掉世纪的年份（00 - 99）&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%Y&lt;/td&gt;
&lt;td&gt;完整的年份&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;%Z&lt;/td&gt;
&lt;td&gt;时区的名字（如果不存在为空字符）&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;%%&lt;/td&gt;
&lt;td&gt;‘%’字符&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

















&lt;p&gt;常见结构化时间组合：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
print time.strftime(&quot;%Y-%m-%d %X&quot;)
#2016-10-26 20:50:13
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3、time加减&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
#timestamp加减单位以秒为单位
import time
t1 = time.time()
t2=t1+10

print time.ctime(t1)#Wed Oct 26 21:15:30 2016
print time.ctime(t2)#Wed Oct 26 21:15:40 2016
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;二、datetime模块&lt;/h3&gt;
&lt;p&gt;datatime模块重新封装了time模块，提供更多接口，提供的类有：date,time,datetime,timedelta,tzinfo。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、date类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;datetime.date(year, month, day)&lt;/p&gt;
&lt;p&gt;静态方法和字段&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
date.max、date.min：date对象所能表示的最大、最小日期；
date.resolution：date对象表示日期的最小单位。这里是天。
date.today()：返回一个表示当前本地日期的date对象；
date.fromtimestamp(timestamp)：根据给定的时间戮，返回一个date对象；
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_74b80f86-2905-4220-bed7-48dd82ee467e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt; &lt;span class=&quot;cnblogs_code_collapse&quot;&gt;output&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;方法和属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
d1 = date(2011,06,03)#date对象
d1.year、date.month、date.day：年、月、日；
d1.replace(year, month, day)：生成一个新的日期对象，用参数指定的年，月，日代替原有对象中的属性。（原有对象仍保持不变）
d1.timetuple()：返回日期对应的time.struct_time对象；
d1.weekday()：返回weekday，如果是星期一，返回0；如果是星期2，返回1，以此类推；
d1.isoweekday()：返回weekday，如果是星期一，返回1；如果是星期2，返回2，以此类推；
d1.isocalendar()：返回格式如(year，month，day)的元组；
d1.isoformat()：返回格式如'YYYY-MM-DD’的字符串；
d1.strftime(fmt)：和time模块format相同。
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_450b6c19-73dd-41a5-b6cf-56d082545e46&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt; &lt;span class=&quot;cnblogs_code_collapse&quot;&gt;output&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2、time类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;datetime.time(hour&lt;span class=&quot;optional&quot;&gt;[ , minute&lt;span class=&quot;optional&quot;&gt;[ , second&lt;span class=&quot;optional&quot;&gt;[ , microsecond&lt;span class=&quot;optional&quot;&gt;[ , tzinfo&lt;span class=&quot;optional&quot;&gt;] &lt;span class=&quot;optional&quot;&gt;] &lt;span class=&quot;optional&quot;&gt;] &lt;span class=&quot;optional&quot;&gt;] ) &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;optional&quot;&gt;静态方法和字段&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
time.min、time.max：time类所能表示的最小、最大时间。其中，time.min = time(0, 0, 0, 0)， time.max = time(23, 59, 59, 999999)；
time.resolution：时间的最小单位，这里是1微秒；
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;方法和属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
t1 = datetime.time(10,23,15)#time对象&lt;br data-filtered=&quot;filtered&quot;/&gt;t1.hour、t1.minute、t1.second、t1.microsecond：时、分、秒、微秒；
t1.tzinfo：时区信息；
t1.replace([ hour[ , minute[ , second[ , microsecond[ , tzinfo] ] ] ] ] )：创建一个新的时间对象，用参数指定的时、分、秒、微秒代替原有对象中的属性（原有对象仍保持不变）；
t1.isoformat()：返回型如&quot;HH:MM:SS&quot;格式的字符串表示；
t1.strftime(fmt)：同time模块中的format；
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3、datetime类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;datetime相当于date和time结合起来。&lt;br data-filtered=&quot;filtered&quot;/&gt;
datetime.datetime (year, month, day[ , hour[ , minute[ , second[ , microsecond[ , tzinfo] ] ] ] ] )&lt;/p&gt;
&lt;p&gt;静态方法和字段&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
datetime.today()：返回一个表示当前本地时间的datetime对象；
datetime.now([tz])：返回一个表示当前本地时间的datetime对象，如果提供了参数tz，则获取tz参数所指时区的本地时间；
datetime.utcnow()：返回一个当前utc时间的datetime对象；#格林威治时间
datetime.fromtimestamp(timestamp[, tz])：根据时间戮创建一个datetime对象，参数tz指定时区信息；
datetime.utcfromtimestamp(timestamp)：根据时间戮创建一个datetime对象；
datetime.combine(date, time)：根据date和time，创建一个datetime对象；
datetime.strptime(date_string, format)：将格式字符串转换为datetime对象；
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;方法和属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
dt=datetime.now()#datetime对象
dt.year、month、day、hour、minute、second、microsecond、tzinfo：
dt.date()：获取date对象；
dt.time()：获取time对象；
dt. replace ([ year[ , month[ , day[ , hour[ , minute[ , second[ , microsecond[ , tzinfo] ] ] ] ] ] ] ])：
dt. timetuple ()
dt. utctimetuple ()
dt. toordinal ()
dt. weekday ()
dt. isocalendar ()
dt. isoformat ([ sep] )
dt. ctime ()：返回一个日期时间的C格式字符串，等效于time.ctime(time.mktime(dt.timetuple()))；
dt. strftime (format)
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4.timedelta类，时间加减&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用timedelta可以很方便的在日期上做天days，小时hour，分钟，秒，毫秒，微妙的时间计算，如果要计算月份则需要另外的办法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
#coding:utf-8
from  datetime import *

dt = datetime.now()
#日期减一天
dt1 = dt + timedelta(days=-1)#昨天
dt2 = dt - timedelta(days=1)#昨天
dt3 = dt + timedelta(days=1)#明天
delta_obj = dt3-dt
print type(delta_obj),delta_obj#&amp;lt;type 'datetime.timedelta'&amp;gt; 1 day, 0:00:00
print delta_obj.days ,delta_obj.total_seconds()#1 86400.0
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; 5、tzinfo时区类&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
#! /usr/bin/python
# coding=utf-8

from datetime import datetime, tzinfo,timedelta

&quot;&quot;&quot;
tzinfo是关于时区信息的类
tzinfo是一个抽象类，所以不能直接被实例化
&quot;&quot;&quot;
class UTC(tzinfo):
    &quot;&quot;&quot;UTC&quot;&quot;&quot;
    def __init__(self,offset = 0):
        self._offset = offset

    def utcoffset(self, dt):
        return timedelta(hours=self._offset)

    def tzname(self, dt):
        return &quot;UTC +%s&quot; % self._offset

    def dst(self, dt):
        return timedelta(hours=self._offset)

#北京时间
beijing = datetime(2011,11,11,0,0,0,tzinfo = UTC(8))
print &quot;beijing time:&quot;,beijing
#曼谷时间
bangkok = datetime(2011,11,11,0,0,0,tzinfo = UTC(7))
print &quot;bangkok time&quot;,bangkok
#北京时间转成曼谷时间
print &quot;beijing-time to bangkok-time:&quot;,beijing.astimezone(UTC(7))

#计算时间差时也会考虑时区的问题
timespan = beijing - bangkok
print &quot;时差:&quot;,timespan

#Output==================
# beijing time: 2011-11-11 00:00:00+08:00
# bangkok time 2011-11-11 00:00:00+07:00
# beijing-time to bangkok-time: 2011-11-10 23:00:00+07:00
# 时差: -1 day, 23:00:00
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印进度条&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
def progress(percent,width=&lt;span&gt;50&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; percent &amp;gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;:
        percent&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    show_str&lt;/span&gt;=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%%-%ds]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %width) %(&lt;span&gt;int&lt;/span&gt;(width*percent)*&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r%s %d%%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(show_str,&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;*percent)),file=sys.stdout,flush=True,end=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
data_size&lt;/span&gt;=&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
recv_size&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;while&lt;/span&gt; recv_size &amp;lt;&lt;span&gt; data_size:
    time.sleep(&lt;/span&gt;&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;) #模拟数据的传输延迟
    recv_size&lt;/span&gt;+=&lt;span&gt;100&lt;/span&gt;&lt;span&gt; #每次收1024
    percent&lt;/span&gt;=recv_size/&lt;span&gt;data_size #接收的比例
    progress(percent,width&lt;/span&gt;=&lt;span&gt;70&lt;/span&gt;) #进度条的宽度70
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;random.random()用于生成&lt;/p&gt;
&lt;p&gt;用于生成一个指定范围内的随机符点数，两个参数其中一个是上限，一个是下限。如果a &amp;gt; b，则生成随机数&lt;/p&gt;
&lt;div class=&quot;jb51code&quot;&gt;
&lt;div id=&quot;highlighter_924535&quot; class=&quot;syntaxhighlighter py&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
n: a &amp;lt;= n &amp;lt;= b。如果 a &amp;lt;b， 则 b &amp;lt;= n &amp;lt;=&lt;span&gt; a。
print random.uniform(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;&lt;span&gt;) 
print random.uniform(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;) 
#&lt;/span&gt;----&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;18.7356606526&lt;/span&gt;&lt;span&gt; 
#&lt;/span&gt;&lt;span&gt;12.5798298022&lt;/span&gt;&lt;span&gt; 
random.randint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;用于生成一个指定范围内的整数。其中参数a是下限，参数b是上限，Python生成随机数&lt;/p&gt;
&lt;div class=&quot;jb51code&quot;&gt;
&lt;div id=&quot;highlighter_502761&quot; class=&quot;syntaxhighlighter py&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
print random.randint(&lt;span&gt;12&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;) #生成的随机数n: &lt;span&gt;12&lt;/span&gt; &amp;lt;= n &amp;lt;= &lt;span&gt;20&lt;/span&gt;&lt;span&gt; 
print random.randint(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;, &lt;span&gt;20&lt;/span&gt;&lt;span&gt;) #结果永远是20
#print random.randint(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;) #该语句是错误的。
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;下限必须小于上限。&lt;/p&gt;
&lt;p&gt;random.randrange&lt;/p&gt;
&lt;p&gt;从指定范围内，按指定基数递增的集合中 ，这篇文章就是对python生成随机数的应用程序的部分介绍。&lt;/p&gt;
&lt;p&gt;随机整数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import random
random.randint(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;99&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;p&gt;随机选取0到100间的偶数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import random
random.randrange(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;101&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;42&lt;/p&gt;
&lt;p&gt;随机浮点数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import random
random.random() 
&lt;/span&gt;&lt;span&gt;0.85415370477785668&lt;/span&gt;&lt;span&gt;
random.uniform(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5.4221167969800881&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随机字符：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import random
random.choice(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdefg&amp;amp;#%^*f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多个字符中选取特定数量的字符：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import random
random.sample(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcdefghij&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;) 
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多个字符中选取特定数量的字符组成新字符串：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; import random
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;span&gt;string&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;string&lt;/span&gt;.join(random.sample([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;j&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)).r
eplace(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随机选取字符串：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import random
random.choice ( [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;apple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;peach&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;orange&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lemon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;] )
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lemon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;洗牌：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import random
items &lt;/span&gt;= [&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;&lt;span&gt;]
random.shuffle(items)
items&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随机验证码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def make_code(n):
    res&lt;/span&gt;=&lt;span&gt;''&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(n):
        s1&lt;/span&gt;=str(random.randint(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;&lt;span&gt;))
        s2&lt;/span&gt;=chr(random.randint(&lt;span&gt;65&lt;/span&gt;,&lt;span&gt;90&lt;/span&gt;&lt;span&gt;))
        res&lt;/span&gt;+=&lt;span&gt;random.choice([s1,s2])
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res

print(make_code(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;一日志相关概念&quot;&gt;一、日志相关概念&lt;/h2&gt;
&lt;p&gt;日志是一种可以追踪某些软件运行时所发生事件的方法。软件开发人员可以向他们的代码中调用日志记录相关的方法来表明发生了某些事情。一个事件可以用一个可包含可选变量数据的消息来描述。此外，事件也有重要性的概念，这个重要性也可以被称为严重性级别（level）。&lt;/p&gt;
&lt;h3 id=&quot;日志的作用&quot;&gt;1.日志的作用&lt;/h3&gt;
&lt;p&gt;通过log的分析，可以方便用户了解系统或软件、应用的运行情况；如果你的应用log足够丰富，也可以分析以往用户的操作行为、类型喜好、地域分布或其他更多信息；如果一个应用的log同时也分了多个级别，那么可以很轻易地分析得到该应用的健康状况，及时发现问题并快速定位、解决问题，补救损失。&lt;br data-filtered=&quot;filtered&quot;/&gt;
简单来讲就是，我们通过记录和分析日志可以了解一个系统或软件程序运行情况是否正常，也可以在应用程序出现故障时快速定位问题。比如，做运维的同学，在接收到报警或各种问题反馈后，进行问题排查时通常都会先去看各种日志，大部分问题都可以在日志中找到答案。再比如，做开发的同学，可以通过IDE控制台上输出的各种日志进行程序调试。对于运维老司机或者有经验的开发人员，可以快速的通过日志定位到问题的根源。可见，日志的重要性不可小觑。日志的作用可以简单总结为以下3点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;程序调试&lt;/li&gt;
&lt;li&gt;了解软件程序运行情况，是否正常&lt;/li&gt;
&lt;li&gt;软件程序运行故障分析与问题定位&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果应用的日志信息足够详细和丰富，还可以用来做用户行为分析，如：分析用户的操作行为、类型洗好、地域分布以及其它更多的信息，由此可以实现改进业务、提高商业利益。&lt;/p&gt;
&lt;h3 id=&quot;日志的等级&quot;&gt;2.日志的等级&lt;/h3&gt;
&lt;p&gt;我们先来思考下下面的两个问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作为开发人员，在开发一个应用程序时需要什么日志信息？在应用程序正式上线后需要什么日志信息？&lt;/li&gt;
&lt;li&gt;作为应用运维人员，在部署开发环境时需要什么日志信息？在部署生产环境时需要什么日志信息？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在软件开发阶段或部署开发环境时，为了尽可能详细的查看应用程序的运行状态来保证上线后的稳定性，我们可能需要把该应用程序所有的运行日志全部记录下来进行分析，这是非常耗费机器性能的。当应用程序正式发布或在生产环境部署应用程序时，我们通常只需要记录应用程序的异常信息、错误信息等，这样既可以减小服务器的I/O压力，也可以避免我们在排查故障时被淹没在日志的海洋里。那么，怎样才能在不改动应用程序代码的情况下实现在不同的环境记录不同详细程度的日志呢？这就是日志等级的作用了，我们通过配置文件指定我们需要的日志等级就可以了。&lt;/p&gt;
&lt;p&gt;不同的应用程序所定义的日志等级可能会有所差别，分的详细点的会包含以下几个等级：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;DEBUG&lt;/li&gt;
&lt;li&gt;INFO&lt;/li&gt;
&lt;li&gt;NOTICE&lt;/li&gt;
&lt;li&gt;WARNING&lt;/li&gt;
&lt;li&gt;ERROR&lt;/li&gt;
&lt;li&gt;CRITICAL&lt;/li&gt;
&lt;li&gt;ALERT&lt;/li&gt;
&lt;li&gt;EMERGENCY&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;日志字段信息与日志格式&quot;&gt;3.日志字段信息与日志格式&lt;/h3&gt;
&lt;p&gt;本节开始问题提到过，一条日志信息对应的是一个事件的发生，而一个事件通常需要包括以下几个内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;事件发生时间&lt;/li&gt;
&lt;li&gt;事件发生位置&lt;/li&gt;
&lt;li&gt;事件的严重程度--日志级别&lt;/li&gt;
&lt;li&gt;事件内容&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面这些都是一条日志记录中可能包含的字段信息，当然还可以包括一些其他信息，如进程ID、进程名称、线程ID、线程名称等。日志格式就是用来定义一条日志记录中包含那些字段的，且日志格式通常都是可以自定义的。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;说明：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输出一条日志时，日志内容和日志级别是需要开发人员明确指定的。对于而其它字段信息，只需要是否显示在日志中就可以了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;日志功能的实现&quot;&gt;4.日志功能的实现&lt;/h3&gt;
&lt;p&gt;几乎所有开发语言都会内置日志相关功能，或者会有比较优秀的第三方库来提供日志操作功能，比如：log4j，log4php等。它们功能强大、使用简单。Python自身也提供了一个用于记录日志的标准库模块--logging。&lt;/p&gt;
&lt;h2 id=&quot;二logging模块简介&quot;&gt;二、logging模块简介&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;logging模块定义的函数和类为应用程序和库的开发实现了一个灵活的事件日志系统。logging模块是Python的一个标准库模块，由标准库模块提供日志记录API的关键好处是所有Python模块都可以使用这个日志记录功能。所以，你的应用日志可以将你自己的日志信息与来自第三方模块的信息整合起来。&lt;/p&gt;
&lt;h3 id=&quot;logging模块的日志级别&quot;&gt;1. logging模块的日志级别&lt;/h3&gt;
&lt;p&gt;logging模块默认定义了以下几个日志等级，它允许开发人员自定义其他日志级别，但是这是不被推荐的，尤其是在开发供别人使用的库时，因为这会导致日志级别的混乱。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;DEBUG&lt;/td&gt;
&lt;td&gt;最详细的日志信息，典型应用场景是 问题诊断&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;INFO&lt;/td&gt;
&lt;td&gt;信息详细程度仅次于DEBUG，通常只记录关键节点信息，用于确认一切都是按照我们预期的那样进行工作&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;WARNING&lt;/td&gt;
&lt;td&gt;当某些不期望的事情发生时记录的信息（如，磁盘可用空间较低），但是此时应用程序还是正常运行的&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;由于一个更严重的问题导致某些功能不能正常运行时记录的信息&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;CRITICAL&lt;/td&gt;
&lt;td&gt;当发生严重错误，导致应用程序不能继续运行时记录的信息&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;开发应用程序或部署开发环境时，可以使用DEBUG或INFO级别的日志获取尽可能详细的日志信息来进行开发或部署调试；应用上线或部署生产环境时，应该使用WARNING或ERROR或CRITICAL级别的日志来降低机器的I/O压力和提高获取错误日志信息的效率。日志级别的指定通常都是在应用程序的配置文件中进行指定的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;说明：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;上面列表中的日志等级是从上到下依次升高的，即：DEBUG &amp;lt; INFO &amp;lt; WARNING &amp;lt; ERROR &amp;lt; CRITICAL，而日志的信息量是依次减少的；&lt;/li&gt;
&lt;li&gt;当为某个应用程序指定一个日志级别后，应用程序会记录所有日志级别大于或等于指定日志级别的日志信息，而不是仅仅记录指定级别的日志信息，nginx、php等应用程序以及这里要提高的python的logging模块都是这样的。同样，logging模块也可以指定日志记录器的日志级别，只有级别大于或等于该指定日志级别的日志记录才会被输出，小于该等级的日志记录将会被丢弃。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;logging模块的使用方式介绍&quot;&gt;2. logging模块的使用方式介绍&lt;/h3&gt;
&lt;p&gt;logging模块提供了两种记录日志的方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一种方式是使用logging提供的模块级别的函数&lt;/li&gt;
&lt;li&gt;第二种方式是使用Logging日志系统的四大组件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其实，logging所提供的模块级别的日志记录函数也是对logging日志系统相关类的封装而已。&lt;/p&gt;
&lt;h5 id=&quot;logging模块定义的模块级别的常用函数&quot;&gt;logging模块定义的模块级别的常用函数&lt;/h5&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;20&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;logging.debug(msg, *args, **kwargs)&lt;/td&gt;
&lt;td&gt;创建一条严重级别为DEBUG的日志记录&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;logging.info(msg, *args, **kwargs)&lt;/td&gt;
&lt;td&gt;创建一条严重级别为INFO的日志记录&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;logging.warning(msg, *args, **kwargs)&lt;/td&gt;
&lt;td&gt;创建一条严重级别为WARNING的日志记录&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;logging.error(msg, *args, **kwargs)&lt;/td&gt;
&lt;td&gt;创建一条严重级别为ERROR的日志记录&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;logging.critical(msg, *args, **kwargs)&lt;/td&gt;
&lt;td&gt;创建一条严重级别为CRITICAL的日志记录&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;logging.log(level, *args, **kwargs)&lt;/td&gt;
&lt;td&gt;创建一条严重级别为level的日志记录&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;logging.basicConfig(**kwargs)&lt;/td&gt;
&lt;td&gt;对root logger进行一次性配置&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;其中&lt;code&gt;logging.basicConfig(**kwargs)&lt;/code&gt;函数用于指定“要记录的日志级别”、“日志格式”、“日志输出位置”、“日志文件的打开模式”等信息，其他几个都是用于记录各个级别日志的函数。&lt;/p&gt;
&lt;h5 id=&quot;logging模块的四大组件&quot;&gt;logging模块的四大组件&lt;/h5&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;loggers&lt;/td&gt;
&lt;td&gt;提供应用程序代码直接使用的接口&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;handlers&lt;/td&gt;
&lt;td&gt;用于将日志记录发送到指定的目的位置&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;filters&lt;/td&gt;
&lt;td&gt;提供更细粒度的日志过滤功能，用于决定哪些日志记录将会被输出（其它的日志记录将会被忽略）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;formatters&lt;/td&gt;
&lt;td&gt;用于控制日志信息的最终输出格式&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;说明：&lt;/em&gt;&lt;/strong&gt; logging模块提供的模块级别的那些函数实际上也是通过这几个组件的相关实现类来记录日志的，只是在创建这些类的实例时设置了一些默认值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;三使用logging提供的模块级别的函数记录日志&quot;&gt;三、使用logging提供的模块级别的函数记录日志&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;回顾下前面提到的几个重要信息：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可以通过logging模块定义的模块级别的方法去完成简单的日志记录&lt;/li&gt;
&lt;li&gt;只有级别大于或等于日志记录器指定级别的日志记录才会被输出，小于该级别的日志记录将会被丢弃。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;最简单的日志输出&quot;&gt;1.最简单的日志输出&lt;/h3&gt;
&lt;p&gt;先来试着分别输出一条不同日志级别的日志记录：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import logging

logging.debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a debug log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a info log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.warning(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a warning log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a error log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.critical(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a critical log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
也可以这样写：

logging.log(logging.DEBUG, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a debug log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.log(logging.INFO, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a info log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.log(logging.WARNING, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a warning log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.log(logging.ERROR, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a error log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.log(logging.CRITICAL, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a critical log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
输出结果：

WARNING:root:This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; a warning log.
ERROR:root:This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; a error log.
CRITICAL:root:This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; a critical log.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;那么问题来了&quot;&gt;2. 那么问题来了&lt;/h3&gt;
&lt;h5 id=&quot;问题1为什么前面两条日志没有被打印出来&quot;&gt;问题1：为什么前面两条日志没有被打印出来？&lt;/h5&gt;
&lt;p&gt;这是因为logging模块提供的日志记录函数所使用的日志器设置的日志级别是&lt;code&gt;WARNING&lt;/code&gt;，因此只有&lt;code&gt;WARNING&lt;/code&gt;级别的日志记录以及大于它的&lt;code&gt;ERROR&lt;/code&gt;和&lt;code&gt;CRITICAL&lt;/code&gt;级别的日志记录被输出了，而小于它的&lt;code&gt;DEBUG&lt;/code&gt;和&lt;code&gt;INFO&lt;/code&gt;级别的日志记录被丢弃了。&lt;/p&gt;
&lt;h5 id=&quot;问题2打印出来的日志信息中各字段表示什么意思为什么会这样输出&quot;&gt;问题2：打印出来的日志信息中各字段表示什么意思？为什么会这样输出？&lt;/h5&gt;
&lt;p&gt;上面输出结果中每行日志记录的各个字段含义分别是：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;日志级别:日志器名称:日志内容&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;之所以会这样输出，是因为logging模块提供的日志记录函数所使用的日志器设置的日志格式默认是BASIC_FORMAT，其值为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;%(levelname)s:%(name)s:%(message)s&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;问题3如果将日志记录输出到文件中而不是打印到控制台&quot;&gt;问题3：如果将日志记录输出到文件中，而不是打印到控制台？&lt;/h5&gt;
&lt;p&gt;因为在logging模块提供的日志记录函数所使用的日志器设置的处理器所指定的日志输出位置默认为:&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;code&gt;sys.stderr&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;问题4我是怎么知道这些的&quot;&gt;问题4：我是怎么知道这些的？&lt;/h5&gt;
&lt;p&gt;查看这些日志记录函数的实现代码，可以发现：当我们没有提供任何配置信息的时候，这些函数都会去调用&lt;code&gt;logging.basicConfig(**kwargs)&lt;/code&gt;方法，且不会向该方法传递任何参数。继续查看&lt;code&gt;basicConfig()&lt;/code&gt;方法的代码就可以找到上面这些问题的答案了。&lt;/p&gt;
&lt;h5 id=&quot;问题5怎么修改这些默认设置呢&quot;&gt;问题5：怎么修改这些默认设置呢？&lt;/h5&gt;
&lt;p&gt;其实很简单，在我们调用上面这些日志记录函数之前，手动调用一下basicConfig()方法，把我们想设置的内容以参数的形式传递进去就可以了。&lt;/p&gt;
&lt;h3 id=&quot;logging.basicconfig函数说明&quot;&gt;3. logging.basicConfig()函数说明&lt;/h3&gt;
&lt;p&gt;该方法用于为logging日志系统做一些基本配置，方法定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;logging&lt;span class=&quot;hljs-selector-class&quot;&gt;.basicConfig(**&lt;span class=&quot;hljs-selector-tag&quot;&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该函数可接收的关键字参数如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;12.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;filename&lt;/td&gt;
&lt;td&gt;指定日志输出目标文件的文件名，指定该设置项后日志信心就不会被输出到控制台了&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;filemode&lt;/td&gt;
&lt;td&gt;指定日志文件的打开模式，默认为'a'。需要注意的是，该选项要在filename指定时才有效&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;format&lt;/td&gt;
&lt;td&gt;指定日志格式字符串，即指定日志输出时所包含的字段信息以及它们的顺序。logging模块定义的格式字段下面会列出。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;datefmt&lt;/td&gt;
&lt;td&gt;指定日期/时间格式。需要注意的是，该选项要在format中包含时间字段%(asctime)s时才有效&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;level&lt;/td&gt;
&lt;td&gt;指定日志器的日志级别&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;stream&lt;/td&gt;
&lt;td&gt;指定日志输出目标stream，如sys.stdout、sys.stderr以及网络stream。需要说明的是，stream和filename不能同时提供，否则会引发 &lt;code&gt;ValueError&lt;/code&gt;异常&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;style&lt;/td&gt;
&lt;td&gt;Python 3.2中新添加的配置项。指定format格式字符串的风格，可取值为'%'、'{'和'$'，默认为'%'&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;5&quot;&gt;&lt;td&gt;handlers&lt;/td&gt;
&lt;td&gt;Python 3.3中新添加的配置项。该选项如果被指定，它应该是一个创建了多个Handler的可迭代对象，这些handler将会被添加到root logger。需要说明的是：filename、stream和handlers这三个配置项只能有一个存在，不能同时出现2个或3个，否则会引发ValueError异常。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;logging模块定义的格式字符串字段&quot;&gt;4. logging模块定义的格式字符串字段&lt;/h3&gt;
&lt;p&gt;我们来列举一下logging模块中定义好的可以用于format格式字符串中字段有哪些：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;19&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;asctime&lt;/td&gt;
&lt;td&gt;%(asctime)s&lt;/td&gt;
&lt;td&gt;日志事件发生的时间--人类可读时间，如：2003-07-08 16:49:45,896&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;created&lt;/td&gt;
&lt;td&gt;%(created)f&lt;/td&gt;
&lt;td&gt;日志事件发生的时间--时间戳，就是当时调用time.time()函数返回的值&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;relativeCreated&lt;/td&gt;
&lt;td&gt;%(relativeCreated)d&lt;/td&gt;
&lt;td&gt;日志事件发生的时间相对于logging模块加载时间的相对毫秒数（目前还不知道干嘛用的）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;msecs&lt;/td&gt;
&lt;td&gt;%(msecs)d&lt;/td&gt;
&lt;td&gt;日志事件发生事件的毫秒部分&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;td&gt;levelname&lt;/td&gt;
&lt;td&gt;%(levelname)s&lt;/td&gt;
&lt;td&gt;该日志记录的文字形式的日志级别（'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;levelno&lt;/td&gt;
&lt;td&gt;%(levelno)s&lt;/td&gt;
&lt;td&gt;该日志记录的数字形式的日志级别（10, 20, 30, 40, 50）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;%(name)s&lt;/td&gt;
&lt;td&gt;所使用的日志器名称，默认是'root'，因为默认使用的是 rootLogger&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;message&lt;/td&gt;
&lt;td&gt;%(message)s&lt;/td&gt;
&lt;td&gt;日志记录的文本内容，通过 &lt;code&gt;msg % args&lt;/code&gt;计算得到的&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;pathname&lt;/td&gt;
&lt;td&gt;%(pathname)s&lt;/td&gt;
&lt;td&gt;调用日志记录函数的源码文件的全路径&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;filename&lt;/td&gt;
&lt;td&gt;%(filename)s&lt;/td&gt;
&lt;td&gt;pathname的文件名部分，包含文件后缀&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;module&lt;/td&gt;
&lt;td&gt;%(module)s&lt;/td&gt;
&lt;td&gt;filename的名称部分，不包含后缀&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;lineno&lt;/td&gt;
&lt;td&gt;%(lineno)d&lt;/td&gt;
&lt;td&gt;调用日志记录函数的源代码所在的行号&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;funcName&lt;/td&gt;
&lt;td&gt;%(funcName)s&lt;/td&gt;
&lt;td&gt;调用日志记录函数的函数名&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;process&lt;/td&gt;
&lt;td&gt;%(process)d&lt;/td&gt;
&lt;td&gt;进程ID&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;processName&lt;/td&gt;
&lt;td&gt;%(processName)s&lt;/td&gt;
&lt;td&gt;进程名称，Python 3.1新增&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;%(thread)d&lt;/td&gt;
&lt;td&gt;线程ID&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;threadName&lt;/td&gt;
&lt;td&gt;%(thread)s&lt;/td&gt;
&lt;td&gt;线程名称&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;经过配置的日志输出&quot;&gt;5.经过配置的日志输出&lt;/h3&gt;
&lt;h5 id=&quot;先简单配置下日志器的日志级别&quot;&gt;先简单配置下日志器的日志级别&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
logging.basicConfig(level=&lt;span&gt;logging.DEBUG)

logging.debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a debug log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a info log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.warning(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a warning log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a error log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.critical(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a critical log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
输出结果：

DEBUG:root:This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; a debug log.
INFO:root:This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; a info log.
WARNING:root:This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; a warning log.
ERROR:root:This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; a error log.
CRITICAL:root:This &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; a critical log.
所有等级的日志信息都被输出了，说明配置生效了。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;在配置日志器日志级别的基础上在配置下日志输出目标文件和日志格式&quot;&gt;在配置日志器日志级别的基础上，在配置下日志输出目标文件和日志格式&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
LOG_FORMAT = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%(asctime)s - %(levelname)s - %(message)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
logging.basicConfig(filename&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;my.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, level=logging.DEBUG, format=&lt;span&gt;LOG_FORMAT)

logging.debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a debug log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a info log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.warning(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a warning log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a error log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.critical(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a critical log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
此时会发现控制台中已经没有输出日志内容了，但是在python代码文件的相同目录下会生成一个名为&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;my.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;的日志文件，该文件中的内容为：

&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;,&lt;span&gt;783&lt;/span&gt; - DEBUG - This &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a debug log.
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;,&lt;span&gt;784&lt;/span&gt; - INFO - This &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a info log.
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;,&lt;span&gt;784&lt;/span&gt; - WARNING - This &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a warning log.
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;,&lt;span&gt;784&lt;/span&gt; - ERROR - This &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a error log.
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;08&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;,&lt;span&gt;784&lt;/span&gt; - CRITICAL - This &lt;span&gt;is&lt;/span&gt; a critical log.
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;在上面的基础上我们再来设置下日期时间格式&quot;&gt;在上面的基础上，我们再来设置下日期/时间格式&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
LOG_FORMAT = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%(asctime)s - %(levelname)s - %(message)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
DATE_FORMAT &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%m/%d/%Y %H:%M:%S %p&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

logging.basicConfig(filename&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;my.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, level=logging.DEBUG, format=LOG_FORMAT, datefmt=&lt;span&gt;DATE_FORMAT)

logging.debug(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a debug log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.info(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a info log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.warning(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a warning log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a error log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
logging.critical(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;This is a critical log.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
此时会在my.log日志文件中看到如下输出内容：

&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;/&lt;span&gt;08&lt;/span&gt;/&lt;span&gt;2017&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt; PM - DEBUG - This &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a debug log.
&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;/&lt;span&gt;08&lt;/span&gt;/&lt;span&gt;2017&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt; PM - INFO - This &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a info log.
&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;/&lt;span&gt;08&lt;/span&gt;/&lt;span&gt;2017&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt; PM - WARNING - This &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a warning log.
&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;/&lt;span&gt;08&lt;/span&gt;/&lt;span&gt;2017&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt; PM - ERROR - This &lt;span&gt;is&lt;/span&gt;&lt;span&gt; a error log.
&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;/&lt;span&gt;08&lt;/span&gt;/&lt;span&gt;2017&lt;/span&gt; &lt;span&gt;14&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt; PM - CRITICAL - This &lt;span&gt;is&lt;/span&gt; a critical log.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;掌握了上面的内容之后，已经能够满足我们平时开发中需要的日志记录功能。&lt;/p&gt;
&lt;h3 id=&quot;其他说明&quot;&gt;6. 其他说明&lt;/h3&gt;
&lt;h5 id=&quot;几个要说明的内容&quot;&gt;几个要说明的内容：&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;logging.basicConfig()&lt;/code&gt;函数是一个一次性的简单配置工具使，也就是说只有在第一次调用该函数时会起作用，后续再次调用该函数时完全不会产生任何操作的，多次调用的设置并不是累加操作。&lt;/li&gt;
&lt;li&gt;日志器（Logger）是有层级关系的，上面调用的logging模块级别的函数所使用的日志器是&lt;code&gt;RootLogger&lt;/code&gt;类的实例，其名称为'root'，它是处于日志器层级关系最顶层的日志器，且该实例是以单例模式存在的。&lt;/li&gt;
&lt;li&gt;如果要记录的日志中包含变量数据，可使用一个格式字符串作为这个事件的描述消息（logging.debug、logging.info等函数的第一个参数），然后将变量数据作为第二个参数*args的值进行传递，如:&lt;code&gt;logging.warning('%s is %d years old.', 'Tom', 10)&lt;/code&gt;，输出内容为&lt;code&gt;WARNING:root:Tom is 10 years old.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;logging.debug(), logging.info()等方法的定义中，除了msg和args参数外，还有一个**kwargs参数。它们支持3个关键字参数: &lt;code&gt;exc_info, stack_info, extra&lt;/code&gt;，下面对这几个关键字参数作个说明。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;exc_info：&lt;/em&gt;&lt;/strong&gt; 其值为布尔值，如果该参数的值设置为True，则会将异常异常信息添加到日志消息中。如果没有异常信息则添加None到日志信息中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;stack_info：&lt;/em&gt;&lt;/strong&gt; 其值也为布尔值，默认值为False。如果该参数的值设置为True，栈信息将会被添加到日志信息中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;extra：&lt;/em&gt;&lt;/strong&gt; 这是一个字典（dict）参数，它可以用来自定义消息格式中所包含的字段，但是它的key不能与logging模块定义的字段冲突。&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;一个例子&quot;&gt;一个例子：&lt;/h5&gt;
&lt;p&gt;在日志消息中添加exc_info和stack_info信息，并添加两个自定义的字端 ip和user&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
LOG_FORMAT = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%(asctime)s - %(levelname)s - %(user)s[%(ip)s] - %(message)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
DATE_FORMAT &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%m/%d/%Y %H:%M:%S %p&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

logging.basicConfig(format&lt;/span&gt;=LOG_FORMAT, datefmt=&lt;span&gt;DATE_FORMAT)
logging.warning(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Some one delete the log file.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, exc_info=True, stack_info=True, extra={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;47.98.53.222&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
输出结果：

&lt;/span&gt;&lt;span&gt;05&lt;/span&gt;/&lt;span&gt;08&lt;/span&gt;/&lt;span&gt;2017&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; PM - WARNING - Tom[&lt;span&gt;47.98&lt;/span&gt;.&lt;span&gt;53.222&lt;/span&gt;] -&lt;span&gt; Some one delete the log file.
NoneType
Stack (most recent call last):
  File &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:/Users/wader/PycharmProjects/LearnPython/day06/log.py&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, line &lt;span&gt;45&lt;/span&gt;, &lt;span&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;&lt;span&gt;
    logging.warning(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Some one delete the log file.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, exc_info=True, stack_info=True, extra={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Tom&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;47.98.53.222&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;})
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;四logging模块日志流处理流程&quot;&gt;四、logging模块日志流处理流程&lt;/h2&gt;
&lt;p&gt;在介绍logging模块的高级用法之前，很有必要对logging模块所包含的重要组件以及其工作流程做个全面、简要的介绍，这有助于我们更好的理解我们所写的代码（将会触发什么样的操作）。&lt;/p&gt;
&lt;h3 id=&quot;logging日志模块四大组件&quot;&gt;1. logging日志模块四大组件&lt;/h3&gt;
&lt;p&gt;在介绍logging模块的日志流处理流程之前，我们先来介绍下logging模块的四大组件：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;日志器&lt;/td&gt;
&lt;td&gt;Logger&lt;/td&gt;
&lt;td&gt;提供了应用程序可一直使用的接口&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;处理器&lt;/td&gt;
&lt;td&gt;Handler&lt;/td&gt;
&lt;td&gt;将logger创建的日志记录发送到合适的目的输出&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;过滤器&lt;/td&gt;
&lt;td&gt;Filter&lt;/td&gt;
&lt;td&gt;提供了更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;格式器&lt;/td&gt;
&lt;td&gt;Formatter&lt;/td&gt;
&lt;td&gt;决定日志记录的最终输出格式&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;logging模块就是通过这些组件来完成日志处理的，上面所使用的logging模块级别的函数也是通过这些组件对应的类来实现的。&lt;/p&gt;
&lt;h5 id=&quot;这些组件之间的关系描述&quot;&gt;这些组件之间的关系描述：&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;日志器（logger）需要通过处理器（handler）将日志信息输出到目标位置，如：文件、sys.stdout、网络等；&lt;/li&gt;
&lt;li&gt;不同的处理器（handler）可以将日志输出到不同的位置；&lt;/li&gt;
&lt;li&gt;日志器（logger）可以设置多个处理器（handler）将同一条日志记录输出到不同的位置；&lt;/li&gt;
&lt;li&gt;每个处理器（handler）都可以设置自己的过滤器（filter）实现日志过滤，从而只保留感兴趣的日志；&lt;/li&gt;
&lt;li&gt;每个处理器（handler）都可以设置自己的格式器（formatter）实现同一条日志以不同的格式输出到不同的地方。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;简单点说就是：日志器（logger）是入口，真正干活儿的是处理器（handler），处理器（handler）还可以通过过滤器（filter）和格式器（formatter）对要输出的日志内容做过滤和格式化等处理操作。&lt;/p&gt;
&lt;h3 id=&quot;logging日志模块相关类及其常用方法介绍&quot;&gt;2. logging日志模块相关类及其常用方法介绍&lt;/h3&gt;
&lt;p&gt;下面介绍下与logging四大组件相关的类：Logger, Handler, Filter, Formatter。&lt;/p&gt;
&lt;h5 id=&quot;logger类&quot;&gt;Logger类&lt;/h5&gt;
&lt;p&gt;Logger对象有3个任务要做：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1）向应用程序代码暴露几个方法，使应用程序可以在运行时记录日志消息；&lt;/li&gt;
&lt;li&gt;2）基于日志严重等级（默认的过滤设施）或filter对象来决定要对哪些日志进行后续处理；&lt;/li&gt;
&lt;li&gt;3）将日志消息传送给所有感兴趣的日志handlers。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Logger对象最常用的方法分为两类：配置方法 和 消息发送方法&lt;/p&gt;
&lt;p&gt;最常用的配置方法如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Logger.setLevel()&lt;/td&gt;
&lt;td&gt;设置日志器将会处理的日志消息的最低严重级别&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Logger.addHandler() 和 Logger.removeHandler()&lt;/td&gt;
&lt;td&gt;为该logger对象添加 和 移除一个handler对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Logger.addFilter() 和 Logger.removeFilter()&lt;/td&gt;
&lt;td&gt;为该logger对象添加 和 移除一个filter对象&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;关于Logger.setLevel()方法的说明：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内建等级中，级别最低的是DEBUG，级别最高的是CRITICAL。例如setLevel(logging.INFO)，此时函数参数为INFO，那么该logger将只会处理INFO、WARNING、ERROR和CRITICAL级别的日志，而DEBUG级别的消息将会被忽略/丢弃。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;logger对象配置完成后，可以使用下面的方法来创建日志记录：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;8&quot;&gt;&lt;td&gt;Logger.debug(), Logger.info(), Logger.warning(), Logger.error(), Logger.critical()&lt;/td&gt;
&lt;td&gt;创建一个与它们的方法名对应等级的日志记录&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Logger.exception()&lt;/td&gt;
&lt;td&gt;创建一个类似于Logger.error()的日志消息&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Logger.log()&lt;/td&gt;
&lt;td&gt;需要获取一个明确的日志level参数来创建一个日志记录&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;说明：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Logger.exception()与Logger.error()的区别在于：Logger.exception()将会输出堆栈追踪信息，另外通常只是在一个exception handler中调用该方法。&lt;/li&gt;
&lt;li&gt;Logger.log()与Logger.debug()、Logger.info()等方法相比，虽然需要多传一个level参数，显得不是那么方便，但是当需要记录自定义level的日志时还是需要该方法来完成。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;那么，怎样得到一个Logger对象呢？一种方式是通过Logger类的实例化方法创建一个Logger类的实例，但是我们通常都是用第二种方式--logging.getLogger()方法。&lt;/p&gt;
&lt;p&gt;logging.getLogger()方法有一个可选参数name，该参数表示将要返回的日志器的名称标识，如果不提供该参数，则其值为'root'。若以相同的name参数值多次调用getLogger()方法，将会返回指向同一个logger对象的引用。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;关于logger的层级结构与有效等级的说明：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;logger的名称是一个以'.'分割的层级结构，每个'.'后面的logger都是'.'前面的logger的children，例如，有一个名称为 foo 的logger，其它名称分别为 foo.bar, foo.bar.baz 和 foo.bam都是 foo 的后代。&lt;/li&gt;
&lt;li&gt;logger有一个&quot;有效等级（effective level）&quot;的概念。如果一个logger上没有被明确设置一个level，那么该logger就是使用它parent的level;如果它的parent也没有明确设置level则继续向上查找parent的parent的有效level，依次类推，直到找到个一个明确设置了level的祖先为止。需要说明的是，root logger总是会有一个明确的level设置（默认为 WARNING）。当决定是否去处理一个已发生的事件时，logger的有效等级将会被用来决定是否将该事件传递给该logger的handlers进行处理。&lt;/li&gt;
&lt;li&gt;child loggers在完成对日志消息的处理后，默认会将日志消息传递给与它们的祖先loggers相关的handlers。因此，我们不必为一个应用程序中所使用的所有loggers定义和配置handlers，只需要为一个顶层的logger配置handlers，然后按照需要创建child loggers就可足够了。我们也可以通过将一个logger的propagate属性设置为False来关闭这种传递机制。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h5 id=&quot;handler类&quot;&gt;Handler类&lt;/h5&gt;
&lt;p&gt;Handler对象的作用是（基于日志消息的level）将消息分发到handler指定的位置（文件、网络、邮件等）。Logger对象可以通过addHandler()方法为自己添加0个或者更多个handler对象。比如，一个应用程序可能想要实现以下几个日志需求：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1）把所有日志都发送到一个日志文件中；&lt;/li&gt;
&lt;li&gt;2）把所有严重级别大于等于error的日志发送到stdout（标准输出）；&lt;/li&gt;
&lt;li&gt;3）把所有严重级别为critical的日志发送到一个email邮件地址。&lt;br data-filtered=&quot;filtered&quot;/&gt;
这种场景就需要3个不同的handlers，每个handler复杂发送一个特定严重级别的日志到一个特定的位置。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一个handler中只有非常少数的方法是需要应用开发人员去关心的。对于使用内建handler对象的应用开发人员来说，似乎唯一相关的handler方法就是下面这几个配置方法：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Handler.setLevel()&lt;/td&gt;
&lt;td&gt;设置handler将会处理的日志消息的最低严重级别&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;Handler.setFormatter()&lt;/td&gt;
&lt;td&gt;为handler设置一个格式器对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;Handler.addFilter() 和 Handler.removeFilter()&lt;/td&gt;
&lt;td&gt;为handler添加 和 删除一个过滤器对象&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;需要说明的是，应用程序代码不应该直接实例化和使用Handler实例。因为Handler是一个基类，它只定义了素有handlers都应该有的接口，同时提供了一些子类可以直接使用或覆盖的默认行为。下面是一些常用的Handler：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;12&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;logging.StreamHandler&lt;/td&gt;
&lt;td&gt;将日志消息发送到输出到Stream，如std.out, std.err或任何file-like对象。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;logging.FileHandler&lt;/td&gt;
&lt;td&gt;将日志消息发送到磁盘文件，默认情况下文件大小会无限增长&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;logging.handlers.RotatingFileHandler&lt;/td&gt;
&lt;td&gt;将日志消息发送到磁盘文件，并支持日志文件按大小切割&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;logging.hanlders.TimedRotatingFileHandler&lt;/td&gt;
&lt;td&gt;将日志消息发送到磁盘文件，并支持日志文件按时间切割&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;logging.handlers.HTTPHandler&lt;/td&gt;
&lt;td&gt;将日志消息以GET或POST的方式发送给一个HTTP服务器&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;logging.handlers.SMTPHandler&lt;/td&gt;
&lt;td&gt;将日志消息发送给一个指定的email地址&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;logging.NullHandler&lt;/td&gt;
&lt;td&gt;该Handler实例会忽略error messages，通常被想使用logging的library开发者使用来避免'No handlers could be found for logger XXX'信息的出现。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h5 id=&quot;formater类&quot;&gt;Formater类&lt;/h5&gt;
&lt;p&gt;Formater对象用于配置日志信息的最终顺序、结构和内容。与logging.Handler基类不同的是，应用代码可以直接实例化Formatter类。另外，如果你的应用程序需要一些特殊的处理行为，也可以实现一个Formatter的子类来完成。&lt;/p&gt;
&lt;p&gt;Formatter类的构造方法定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs python&quot;&gt;logging.Formatter.__init__(fmt=&lt;span class=&quot;hljs-keyword&quot;&gt;None, datefmt=&lt;span class=&quot;hljs-keyword&quot;&gt;None, style=&lt;span class=&quot;hljs-string&quot;&gt;'%')&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见，该构造方法接收3个可选参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;fmt：指定消息格式化字符串，如果不指定该参数则默认使用message的原始值&lt;/li&gt;
&lt;li&gt;datefmt：指定日期格式字符串，如果不指定该参数则默认使用&quot;%Y-%m-%d %H:%M:%S&quot;&lt;/li&gt;
&lt;li&gt;style：Python 3.2新增的参数，可取值为 '%', '{'和 '$'，如果不指定该参数则默认使用'%'&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;filter类&quot;&gt;Filter类&lt;/h5&gt;
&lt;p&gt;Filter可以被Handler和Logger用来做比level更细粒度的、更复杂的过滤功能。Filter是一个过滤器基类，它只允许某个logger层级下的日志事件通过过滤。该类定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs delphi&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class logging.Filter(name=&lt;span class=&quot;hljs-string&quot;&gt;'')
    filter(&lt;span class=&quot;hljs-keyword&quot;&gt;record)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;比如，一个filter实例化时传递的name参数值为'A.B'，那么该filter实例将只允许名称为类似如下规则的loggers产生的日志记录通过过滤：'A.B'，'A.B,C'，'A.B.C.D'，'A.B.D'，而名称为'A.BB', 'B.A.B'的loggers产生的日志则会被过滤掉。如果name的值为空字符串，则允许所有的日志事件通过过滤。&lt;/p&gt;
&lt;p&gt;filter方法用于具体控制传递的record记录是否能通过过滤，如果该方法返回值为0表示不能通过过滤，返回值为非0表示可以通过过滤。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;说明：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果有需要，也可以在filter(record)方法内部改变该record，比如添加、删除或修改一些属性。&lt;/li&gt;
&lt;li&gt;我们还可以通过filter做一些统计工作，比如可以计算下被一个特殊的logger或handler所处理的record数量等。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;logging日志流处理流程&quot;&gt;3. logging日志流处理流程&lt;/h3&gt;
&lt;p&gt;下面这个图描述了日志流的处理流程：&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/1063221/201705/1063221-20170511145312144-488305597.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们来描述下上面这个图的日志流处理流程：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1）（在用户代码中进行）日志记录函数调用，如：logger.info(...)，logger.debug(...)等；&lt;/li&gt;
&lt;li&gt;2）判断要记录的日志级别是否满足日志器设置的级别要求（要记录的日志级别要大于或等于日志器设置的级别才算满足要求），如果不满足则该日志记录会被丢弃并终止后续的操作，如果满足则继续下一步操作；&lt;/li&gt;
&lt;li&gt;3）根据日志记录函数调用时掺入的参数，创建一个日志记录（LogRecord类）对象；&lt;/li&gt;
&lt;li&gt;4）判断日志记录器上设置的过滤器是否拒绝这条日志记录，如果日志记录器上的某个过滤器拒绝，则该日志记录会被丢弃并终止后续的操作，如果日志记录器上设置的过滤器不拒绝这条日志记录或者日志记录器上没有设置过滤器则继续下一步操作--将日志记录分别交给该日志器上添加的各个处理器；&lt;/li&gt;
&lt;li&gt;5）判断要记录的日志级别是否满足处理器设置的级别要求（要记录的日志级别要大于或等于该处理器设置的日志级别才算满足要求），如果不满足记录将会被该处理器丢弃并终止后续的操作，如果满足则继续下一步操作；&lt;/li&gt;
&lt;li&gt;6）判断该处理器上设置的过滤器是否拒绝这条日志记录，如果该处理器上的某个过滤器拒绝，则该日志记录会被当前处理器丢弃并终止后续的操作，如果当前处理器上设置的过滤器不拒绝这条日志记录或当前处理器上没有设置过滤器测继续下一步操作；&lt;/li&gt;
&lt;li&gt;7）如果能到这一步，说明这条日志记录经过了层层关卡允许被输出了，此时当前处理器会根据自身被设置的格式器（如果没有设置则使用默认格式）将这条日志记录进行格式化，最后将格式化后的结果输出到指定位置（文件、网络、类文件的Stream等）；&lt;/li&gt;
&lt;li&gt;8）如果日志器被设置了多个处理器的话，上面的第5-8步会执行多次；&lt;/li&gt;
&lt;li&gt;9）这里才是完整流程的最后一步：判断该日志器输出的日志消息是否需要传递给上一级logger（之前提到过，日志器是有层级关系的）的处理器，如果propagate属性值为1则表示日志消息将会被输出到处理器指定的位置，同时还会被传递给parent日志器的handlers进行处理直到当前日志器的propagate属性为0停止，如果propagate值为0则表示不向parent日志器的handlers传递该消息，到此结束。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可见，一条日志信息要想被最终输出需要依次经过以下几次过滤：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;日志器等级过滤；&lt;/li&gt;
&lt;li&gt;日志器的过滤器过滤；&lt;/li&gt;
&lt;li&gt;日志器的处理器等级过滤；&lt;/li&gt;
&lt;li&gt;日志器的处理器的过滤器过滤；&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;需要说明的是：&lt;/em&gt;&lt;/strong&gt; 关于上面第9个步骤，如果propagate值为1，那么日志消息会直接传递交给上一级logger的handlers进行处理，此时上一级logger的日志等级并不会对该日志消息进行等级过滤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;五使用logging四大组件记录日志&quot;&gt;五、使用logging四大组件记录日志&lt;/h2&gt;
&lt;p&gt;现在，我们对logging模块的重要组件及整个日志流处理流程都应该有了一个比较全面的了解，下面我们来看一个例子。&lt;/p&gt;
&lt;h3 id=&quot;需求&quot;&gt;1. 需求&lt;/h3&gt;
&lt;p&gt;现在有以下几个日志记录的需求：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1）要求将所有级别的所有日志都写入磁盘文件中&lt;/li&gt;
&lt;li&gt;2）all.log文件中记录所有的日志信息，日志格式为：日期和时间 - 日志级别 - 日志信息&lt;/li&gt;
&lt;li&gt;3）error.log文件中单独记录error及以上级别的日志信息，日志格式为：日期和时间 - 日志级别 - 文件名[:行号] - 日志信息&lt;/li&gt;
&lt;li&gt;4）要求all.log在每天凌晨进行日志切割&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;分析&quot;&gt;2. 分析&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;1）要记录所有级别的日志，因此日志器的有效level需要设置为最低级别--DEBUG;&lt;/li&gt;
&lt;li&gt;2）日志需要被发送到两个不同的目的地，因此需要为日志器设置两个handler；另外，两个目的地都是磁盘文件，因此这两个handler都是与FileHandler相关的；&lt;/li&gt;
&lt;li&gt;3）all.log要求按照时间进行日志切割，因此他需要用logging.handlers.TimedRotatingFileHandler; 而error.log没有要求日志切割，因此可以使用FileHandler;&lt;/li&gt;
&lt;li&gt;4）两个日志文件的格式不同，因此需要对这两个handler分别设置格式器；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;代码实现&quot;&gt;3. 代码实现&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import logging
import logging.handlers
import datetime

logger &lt;/span&gt;= logging.getLogger(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mylogger&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger.setLevel(logging.DEBUG)

rf_handler &lt;/span&gt;= logging.handlers.TimedRotatingFileHandler(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;all.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, when=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;midnight&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, interval=&lt;span&gt;1&lt;/span&gt;, backupCount=&lt;span&gt;7&lt;/span&gt;, atTime=datetime.time(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
rf_handler.setFormatter(logging.Formatter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%(asctime)s - %(levelname)s - %(message)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))

f_handler &lt;/span&gt;= logging.FileHandler(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
f_handler.setLevel(logging.ERROR)
f_handler.setFormatter(logging.Formatter(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%(asctime)s - %(levelname)s - %(filename)s[:%(lineno)d] - %(message)s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))

logger.addHandler(rf_handler)
logger.addHandler(f_handler)

logger.debug(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;debug message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger.info(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;info message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger.warning(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;warning message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger.error(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
logger.critical(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;critical message&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
all.log文件输出

&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;612&lt;/span&gt; - DEBUG -&lt;span&gt; debug message
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;612&lt;/span&gt; - INFO -&lt;span&gt; info message
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;612&lt;/span&gt; - WARNING -&lt;span&gt; warning message
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;612&lt;/span&gt; - ERROR -&lt;span&gt; error message
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;613&lt;/span&gt; - CRITICAL -&lt;span&gt; critical message
error.log文件输出

&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;612&lt;/span&gt; - ERROR - log.py[:&lt;span&gt;81&lt;/span&gt;] -&lt;span&gt; error message
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;05&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt;,&lt;span&gt;613&lt;/span&gt; - CRITICAL - log.py[:&lt;span&gt;82&lt;/span&gt;] - critical message
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;六配置logging的几种方式&quot;&gt;4、配置logging的几种方式&lt;/h2&gt;
&lt;p&gt;作为开发者，我们可以通过以下3中方式来配置logging:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1）使用Python代码显式的创建loggers, handlers和formatters并分别调用它们的配置函数；&lt;/li&gt;
&lt;li&gt;2）创建一个日志配置文件，然后使用&lt;code&gt;fileConfig()&lt;/code&gt;函数来读取该文件的内容；&lt;/li&gt;
&lt;li&gt;3）创建一个包含配置信息的dict，然后把它传递个&lt;code&gt;dictConfig()&lt;/code&gt;函数；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;具体说明请参考另一篇博文&lt;a href=&quot;http://www.cnblogs.com/yyds/p/6885182.html&quot;&gt;《python之配置日志的几种方式》&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;七向日志输出中添加上下文信息&quot;&gt;5、向日志输出中添加上下文信息&lt;/h2&gt;
&lt;p&gt;除了传递给日志记录函数的参数外，有时候我们还想在日志输出中包含一些额外的上下文信息。比如，在一个网络应用中，可能希望在日志中记录客户端的特定信息，如：远程客户端的IP地址和用户名。这里我们来介绍以下几种实现方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通过向日志记录函数传递一个&lt;code&gt;extra&lt;/code&gt;参数引入上下文信息&lt;/li&gt;
&lt;li&gt;使用LoggerAdapters引入上下文信息&lt;/li&gt;
&lt;li&gt;使用Filters引入上下文信息 &lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;六、模板&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;logging配置
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;
import os
import logging.config

# 定义三种日志输出格式 开始

standard_format &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
                  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(levelname)s][%(message)s]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; #其中name为getlogger指定的名字

simple_format &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

id_simple_format &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;[%(levelname)s][%(asctime)s] %(message)s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

# 定义日志输出格式 结束

logfile_dir &lt;/span&gt;=&lt;span&gt; os.path.dirname(os.path.abspath(__file__))  # log文件的目录

logfile_name &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;all2.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  # log文件名

# 如果不存在定义的日志目录就创建一个
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; not os.path.isdir(logfile_dir):
    os.mkdir(logfile_dir)

# log文件的全路径
logfile_path &lt;/span&gt;=&lt;span&gt; os.path.join(logfile_dir, logfile_name)

# log配置字典
LOGGING_DIC &lt;/span&gt;=&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;disable_existing_loggers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: False,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatters&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: standard_format
        },
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;simple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;format&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: simple_format
        },
    },
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;filters&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {},
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        #打印到终端的日志
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;logging.StreamHandler&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  # 打印到屏幕
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;simple&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        },
        #打印到文件的日志,收集info及以上的日志
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;logging.handlers.RotatingFileHandler&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  # 保存到文件
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;formatter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;standard&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;filename&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: logfile_path,  # 日志文件
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;maxBytes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;5&lt;/span&gt;&lt;span&gt;,  # 日志大小 5M
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;backupCount&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;encoding&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  # 日志文件的编码，再也不用担心中文log乱码了
        },
    },
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loggers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: {
        #logging.getLogger(__name__)拿到的logger配置
        &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;: {
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;handlers&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],  # 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEBUG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;propagate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True,  # 向上（更高level的logger）传递
        },
    },
}


def load_my_logging_cfg():
    logging.config.dictConfig(LOGGING_DIC)  # 导入上面定义的logging配置
    logger &lt;/span&gt;=&lt;span&gt; logging.getLogger(__name__)  # 生成一个log实例
    logger.info(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;It works!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)  # 记录该文件的运行状态

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    load_my_logging_cfg()

logging配置文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;os模块的作用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　os，语义为操作系统，所以肯定就是操作系统相关的功能了，可以处理文件和目录这些我们日常手动需要做的操作，就比如说：显示当前目录下所有文件/删除某个文件/获取文件大小……&lt;/p&gt;
&lt;p&gt;　　另外，os模块不受平台限制，也就是说：当我们要在linux中显示当前路径时就要用到pwd命令，而Windows中cmd命令行下就要用到这个，额...我擦，我还真不知道，（甭管怎么着，肯定不是pwd），这时候我们使用python中os模块的os.path.abspath(name)功能，甭管是linux或者Windows都可以获取当前的绝对路径。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;os模块的常用功能：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1  os.name      #显示当前使用的平台&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.name
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;nt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;                  #这表示Windows
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.name
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;posix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;             #这表示Linux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2  os.getcwd()      #显示当前python脚本工作路径&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.getcwd()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\Capital-D\\PycharmProjects\\untitled&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;    #使用pycharm

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.getcwd()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;         #Linux平台在/root目录直接使用python3命令
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3  os.listdir('dirname')        #返回指定目录下的所有文件和目录名&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#相对于os.getcwd路径下的文件
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.listdir()
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.idea&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.listdir()
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.bash_logout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Python-3.4.4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.mysql_history&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.tcshrc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Python-3.4.4.tar.xz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.bash_profile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.lesshst&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;install.log.syslog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.cshrc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;04.sql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;anaconda-ks.cfg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.viminfo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;phpMyAdmin-4.4.15-all-languages.tar.bz2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.bashrc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;binlog.sql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;back.sql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;install.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;binlog4.sql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.bash_history&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;backup.sql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;text.py&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.rnd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4  os.remove('filename')       #删除一个文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
[root@slyoyo ~&lt;span&gt;]# touch hahaha
[root@slyoyo &lt;/span&gt;~&lt;span&gt;]# ls
&lt;/span&gt;&lt;span&gt;04&lt;/span&gt;.sql           back.sql     binlog.sql   install.log.syslog                       Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.xz  text.py
1test            backup.sql   hahaha       phpMyAdmin&lt;/span&gt;-&lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;15&lt;/span&gt;-all-&lt;span&gt;languages.tar.bz2  test
anaconda&lt;/span&gt;-ks.cfg  binlog4.sql  install.log  Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;                             test1
#hahaha（粉色字体）存在
[root@slyoyo &lt;/span&gt;~&lt;span&gt;]# python3
Python &lt;/span&gt;&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt; (&lt;span&gt;default&lt;/span&gt;, Apr  &lt;span&gt;5&lt;/span&gt; &lt;span&gt;2016&lt;/span&gt;, &lt;span&gt;04&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;&lt;span&gt;) 
[GCC &lt;/span&gt;&lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt; &lt;span&gt;20120313&lt;/span&gt; (Red Hat &lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)] on linux
Type &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;help&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;copyright&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;credits&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; or &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;license&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; more information.
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; import os
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.remove(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hahaha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; exit()
[root@slyoyo &lt;/span&gt;~&lt;span&gt;]# ls
&lt;/span&gt;&lt;span&gt;04&lt;/span&gt;.sql  anaconda-ks.cfg  backup.sql   binlog.sql   install.log.syslog                       Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;         test   text.py
1test   back.sql         binlog4.sql  install.log  phpMyAdmin&lt;/span&gt;-&lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;15&lt;/span&gt;-all-languages.tar.bz2  Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.xz  test1
#hahaha已被删&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5  os.makedirs('dirname/dirname')     #可生成多层递规目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
[root@slyoyo ~&lt;span&gt;]# ls
&lt;/span&gt;&lt;span&gt;04&lt;/span&gt;.sql  anaconda-ks.cfg  backup.sql   binlog.sql   install.log.syslog                       Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;         test   text.py
1test   back.sql         binlog4.sql  install.log  phpMyAdmin&lt;/span&gt;-&lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;15&lt;/span&gt;-all-languages.tar.bz2  Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.xz  test1
[root@slyoyo &lt;/span&gt;~&lt;span&gt;]# python3
Python &lt;/span&gt;&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt; (&lt;span&gt;default&lt;/span&gt;, Apr  &lt;span&gt;5&lt;/span&gt; &lt;span&gt;2016&lt;/span&gt;, &lt;span&gt;04&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;&lt;span&gt;) 
[GCC &lt;/span&gt;&lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt; &lt;span&gt;20120313&lt;/span&gt; (Red Hat &lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)] on linux
Type &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;help&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;copyright&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;credits&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; or &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;license&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; more information.
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; import os
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.makedirs(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hahaha/linghuchong&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; exit()
[root@slyoyo &lt;/span&gt;~&lt;span&gt;]# ls
&lt;/span&gt;&lt;span&gt;04&lt;/span&gt;.sql           back.sql     binlog.sql   install.log.syslog                       Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.xz  text.py
1test            backup.sql   hahaha       phpMyAdmin&lt;/span&gt;-&lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;15&lt;/span&gt;-all-&lt;span&gt;languages.tar.bz2  test
anaconda&lt;/span&gt;-ks.cfg  binlog4.sql  install.log  Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;                             test1
[root@slyoyo &lt;/span&gt;~]# ls hahaha/&lt;span&gt;
linghuchong
[root@slyoyo &lt;/span&gt;~]# ls hahaha/linghuchong/&lt;span&gt;
[root@slyoyo &lt;/span&gt;~]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6  os.rmdir('dirname')     #删除单级目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
[root@slyoyo ~&lt;span&gt;]# ls
&lt;/span&gt;&lt;span&gt;04&lt;/span&gt;.sql           back.sql     binlog.sql   install.log.syslog                       Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.xz  text.py
1test            backup.sql   hahaha       phpMyAdmin&lt;/span&gt;-&lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;15&lt;/span&gt;-all-&lt;span&gt;languages.tar.bz2  test
anaconda&lt;/span&gt;-ks.cfg  binlog4.sql  install.log  Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;                             test1
[root@slyoyo &lt;/span&gt;~]# ls hahaha/&lt;span&gt;
linghuchong
[root@slyoyo &lt;/span&gt;~]# ls hahaha/linghuchong/&lt;span&gt;
[root@slyoyo &lt;/span&gt;~&lt;span&gt;]# python3
Python &lt;/span&gt;&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt; (&lt;span&gt;default&lt;/span&gt;, Apr  &lt;span&gt;5&lt;/span&gt; &lt;span&gt;2016&lt;/span&gt;, &lt;span&gt;04&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;&lt;span&gt;) 
[GCC &lt;/span&gt;&lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt; &lt;span&gt;20120313&lt;/span&gt; (Red Hat &lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)] on linux
Type &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;help&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;copyright&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;credits&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; or &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;license&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; more information.
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; import os
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.rmdir(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hahaha/linghuchong&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; exit()
[root@slyoyo &lt;/span&gt;~]# ls hahaha/&lt;span&gt;
[root@slyoyo &lt;/span&gt;~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7  os.rename(&quot;oldname&quot;,&quot;newname&quot;)    #重命名文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.getcwd()
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/root/hahaha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.listdir()
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.rename(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test_new&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.listdir()
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test_new&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8  os.system()    #运行shell命令,注意：这里是打开一个新的shell，运行命令，当命令结束后，关闭shell&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; os.system(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;/root/&lt;span&gt;hahaha
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;9  os.sep    #显示当前平台下路径分隔符&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.sep
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;               #linux

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.sep
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;             #windows
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10  os.linesep    #给出当前平台使用的行终止符&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.linesep
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;      #linux

&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; os.linesep
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    #windows
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;11  os.environ    #获取系统环境变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;85&quot;&gt;
&lt;pre&gt;
&lt;span&gt;os.environ
environ({&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;USERPROFILE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\Capital-D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROCESSOR_ARCHITECTURE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x86&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SESSIONNAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Console&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;UGII_BASE_DIR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\\Program Files (x86)\\Siemens\\NX 8.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMMONPROGRAMW6432&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files\\Common Files&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMMONPROGRAMFILES(X86)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)\\Common Files&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;MOZ_PLUGIN_PATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\plugins\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ALLUSERSPROFILE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\ProgramData&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PYTHONIOENCODING&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NUMBER_OF_PROCESSORS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;APPDATA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\Capital-D\\AppData\\Roaming&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TERM&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;emacs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TEMP&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\CAPITA~1\\AppData\\Local\\Temp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROGRAMDATA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\ProgramData&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMSPEC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\windows\\system32\\cmd.exe&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;WINDIR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROCESSOR_IDENTIFIER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Intel64 Family 6 Model 58 Stepping 9, GenuineIntel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PATHEXT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Common Files\\NetSarang;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;UGII_ROOT_DIR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D:\\Program Files (x86)\\Siemens\\NX 8.0\\UGII\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMPUTERNAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IDEA-PC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USERDOMAIN&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;idea-PC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;TMP&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\CAPITA~1\\AppData\\Local\\Temp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SYSTEMROOT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\windows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROCESSOR_REVISION&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3a09&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FP_NO_HOST_CHECK&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;NO&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROGRAMFILES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PYTHONDONTWRITEBYTECODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LOCALAPPDATA&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\Capital-D\\AppData\\Local&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PYTHONUNBUFFERED&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LOGONSERVER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\\\IDEA-PC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;UGII_LANG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;simpl_chinese&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SYSTEMDRIVE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PUBLIC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\Public&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HOMEPATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\\Users\\Capital-D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PYTHONPATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)\\JetBrains\\PyCharm 5.0.2\\helpers\\pydev&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USERNAME&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Capital-D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;UGS_LICENSE_SERVER&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;28000@idea-pc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;USERDOMAIN_ROAMINGPROFILE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;idea-PC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PYCHARM_HOSTED&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;OS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Windows_NT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROCESSOR_ARCHITEW6432&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;AMD64&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROGRAMFILES(X86)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROGRAMW6432&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PSMODULEPATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMMONPROGRAMFILES&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Program Files (x86)\\Common Files&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;IPYTHONENABLE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;HOMEDRIVE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CONFIGSETROOT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\windows\\ConfigSetRoot&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROCESSOR_LEVEL&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;12  os.path.abspath(path)    #显示当前绝对路径&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; os.path.abspath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\Capital-D\\PycharmProjects\\untitled\\test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;13  os.path.dirname(path)    #返回该路径的父目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; os.path.abspath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\Capital-D\\PycharmProjects\\untitled\\test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; os.path.dirname(os.path.abspath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\Capital-D\\PycharmProjects\\untitled&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;14  os.path.basename(path)    #返回该路径的最后一个目录或者文件,如果path以／或\结尾，那么就会返回空值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; os.path.dirname(os.path.abspath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\\Users\\Capital-D\\PycharmProjects\\untitled&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; os.path.basename(os.path.dirname(os.path.abspath(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;untitled&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;15  os.path.isfile(path)     #如果path是一个文件，则返回True&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
[root@slyoyo ~&lt;span&gt;]# ls
&lt;/span&gt;&lt;span&gt;04&lt;/span&gt;.sql           back.sql     binlog.sql   install.log.syslog                       Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.xz  text.py
1test            backup.sql   hahaha       phpMyAdmin&lt;/span&gt;-&lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;15&lt;/span&gt;-all-&lt;span&gt;languages.tar.bz2  test
anaconda&lt;/span&gt;-ks.cfg  binlog4.sql  install.log  Python-&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;                             test1
[root@slyoyo &lt;/span&gt;~&lt;span&gt;]# python3
Python &lt;/span&gt;&lt;span&gt;3.4&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt; (&lt;span&gt;default&lt;/span&gt;, Apr  &lt;span&gt;5&lt;/span&gt; &lt;span&gt;2016&lt;/span&gt;, &lt;span&gt;04&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;&lt;span&gt;) 
[GCC &lt;/span&gt;&lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt; &lt;span&gt;20120313&lt;/span&gt; (Red Hat &lt;span&gt;4.4&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)] on linux
Type &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;help&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;copyright&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;credits&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; or &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;license&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;&lt;span&gt; more information.
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; import os
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; os.path.isfile(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;16  os.path.isdir(path)    #如果path是一个目录，则返回True&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; os.path.isdir(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hahaha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;17  os.stat()    #获取文件或者目录信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; os.stat(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
os.stat_result(st_mode&lt;/span&gt;=&lt;span&gt;33188&lt;/span&gt;, st_ino=&lt;span&gt;137149&lt;/span&gt;, st_dev=&lt;span&gt;2050&lt;/span&gt;, st_nlink=&lt;span&gt;1&lt;/span&gt;, st_uid=&lt;span&gt;0&lt;/span&gt;, st_gid=&lt;span&gt;0&lt;/span&gt;, st_size=&lt;span&gt;85&lt;/span&gt;, st_atime=&lt;span&gt;1462373193&lt;/span&gt;, st_mtime=&lt;span&gt;1462373186&lt;/span&gt;, st_ctime=&lt;span&gt;1462373186&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;18  os.path.split(path)  #将path分割成路径名和文件名。（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; os.path.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/root/test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;19  os.path.join(path,name)   #连接目录与文件名或目录 结果为path/name&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; os.path.join(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/root/haha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/root/haha/test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;sys模块的常见函数列表&quot;&gt;sys模块的常见函数列表&lt;/h3&gt;
&lt;ul readability=&quot;12.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;sys.argv&lt;/code&gt;: 实现从程序外部向程序传递参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;sys.exit([arg])&lt;/code&gt;: 程序中间的退出，arg=0为正常退出。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;sys.getdefaultencoding()&lt;/code&gt;: 获取系统当前编码，一般默认为ascii。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;sys.setdefaultencoding()&lt;/code&gt;: 设置系统默认编码，执行dir（sys）时不会看到这个方法，在解释器中执行不通过，可以先执行reload(sys)，在执行 setdefaultencoding('utf8')，此时将系统默认编码设置为utf8。（见设置系统默认编码 ）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt;: 获取文件系统使用编码方式，Windows下返回'mbcs'，mac下返回'utf-8'.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;sys.path&lt;/code&gt;: 获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;sys.platform&lt;/code&gt;: 获取当前系统平台。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;code&gt;sys.stdin,sys.stdout,sys.stderr&lt;/code&gt;: stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象. 如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们, 这时候你就可以重定向输出和输入到其它设备( device ), 或者以非标准的方式处理它们&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;sys.argv&quot;&gt;sys.argv&lt;/h3&gt;
&lt;p&gt;功能：在外部向程序内部传递参数&lt;br data-filtered=&quot;filtered&quot;/&gt;
示例：&lt;code&gt;sys.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
#!/usr/bin/&lt;span&gt;env python

import sys
print sys.argv[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]
print sys.argv[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]
运行：

# python sys.py argv1
sys.py
argv1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;sys.exitn&quot;&gt;sys.exit(n)&lt;/h3&gt;
&lt;p&gt;功能：执行到主程序末尾，解释器自动退出，但是如果需要中途退出程序，可以调用sys.exit函数，带有一个可选&lt;/p&gt;
&lt;p&gt;　　　的整数参数返回给调用它的程序，表示你可以在主程序中捕获对sys.exit的调用。（0是正常退出，其他为异常）&lt;/p&gt;
&lt;p&gt;示例：&lt;code&gt;exit.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
#!/usr/bin/&lt;span&gt;env python

import sys

def exitfunc(value):
    print value
    sys.exit(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)

print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    sys.exit(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
except SystemExit,value:
    exitfunc(value)

print &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;come?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
运行：

# python exit.py
hello
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;sys.path&quot;&gt;sys.path&lt;/h3&gt;
&lt;p&gt;功能：获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; import sys
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; sys.path
[&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/lib/python2.7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/lib/python2.7/plat-x86_64-linux-gnu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/lib/python2.7/lib-tk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/lib/python2.7/lib-old&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/lib/python2.7/lib-dynload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/local/lib/python2.7/dist-packages&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/lib/python2.7/dist-packages&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/lib/python2.7/dist-packages/PILcompat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/lib/python2.7/dist-packages/gtk-2.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/lib/python2.7/dist-packages/ubuntu-sso-client&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
sys.path.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;自定义模块路径&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;sys.modules&quot;&gt;sys.modules&lt;/h3&gt;
&lt;p&gt;功能：&lt;code&gt;sys.modules&lt;/code&gt;是一个全局字典，该字典是python启动后就加载在内存中。每当程序员导入新的模块，&lt;code&gt;sys.modules&lt;/code&gt;将自动记录该模块。当第二次再导入该模块时，python会直接到字典中查找，从而加快了程序运行的速度。它拥有字典所拥有的一切方法。&lt;/p&gt;
&lt;p&gt;示例：&lt;code&gt;modules.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
#!/usr/bin/&lt;span&gt;env python

import sys

print sys.modules.keys()

print sys.modules.values()

print sys.modules[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;os&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
运行：

python modules.py
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;copy_reg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sre_compile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_sre&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;encodings&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;site&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__builtin__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,......
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;sys.stdinstdoutstderr&quot;&gt;sys.stdin\stdout\stderr&lt;/h3&gt;
&lt;p&gt;功能：stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象. 如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们, 这时候你就可以重定向输出和输入到其它设备( device ), 或者以非标准的方式处理它们&lt;/p&gt;

&lt;p&gt;hashlib 模块用于加密相关的操作，主要提供 SHA1，SHA224，SHA256，SHA384，SHA512，MD5 算法&lt;/p&gt;
&lt;p&gt;1. 对字符串做散列&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; import hashlib         
&amp;gt;&amp;gt;&amp;gt; md5 = hashlib.md5()               //我们使用MD5算法，先实例化一个对象
&amp;gt;&amp;gt;&amp;gt; md5.update(&quot;abc&quot;)                 //update()方法用于对字符串&quot;abc&quot;做MD5加密&lt;br/&gt;&amp;gt;&amp;gt;&amp;gt; md5.update(&quot;def&quot;)                 //如果继续使用update()方法则会更新摘要，相当于对'abcdef'做MD5加密，即update()有累加的含义
&amp;gt;&amp;gt;&amp;gt; md5.hexdigest()                   //hexdigest()方法用于查看hash值
'952711933da73cc2bd2629004d378f18'
&amp;gt;&amp;gt;&amp;gt; hashlib.md5(&quot;abc&quot;).hexdigest()    //直接这样写也可以
'952711933da73cc2bd2629004d378f18'
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;2. 对文件做散列&lt;/p&gt;
&lt;p&gt;思路：先打开文件并读取文件内容，然后再对内容做散列，下面例1是简单的写法，但是通常我们用例2的方法来写，避免文件太大占用内存资源&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
#!/usr/bin/env python

import hashlib
import sys

with open(sys.argv[1]) as fd:
    data = fd.read()
    print hashlib.md5(data).hexdigest()
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
#!/usr/bin/python
import hashlib
import sys

def md5sum(f):
    m = hashlib.md5()
    fd = open(f)
    while True:
        data = fd.read(4096)    //这里并不一次性读取文件内容，而是一次读取4096字节，避免占用内存资源
        if data:                
            m.update(data)
        else:
            break
    fd.close()
    return m.hexdigest()

if __name__ == &quot;__main__&quot;:
    try:
        print md5sum(sys.argv[1])
    except IndexError:
        print &quot;%s follow an argument&quot; % __file__
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;strong&gt;一：json&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span id=&quot;wordhighlight_id1&quot; class=&quot;wordhighlight_ext wordhighlight_word0&quot;&gt;JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。JSON的数据格式其实就是python里面的字典格式，里面可以包含方括号括起来的数组，也就是python里面的列表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在python中，有专门处理json格式的模块—— json 和 picle模块&lt;/p&gt;
&lt;p&gt;  Json   模块提供了四个方法： dumps、dump、loads、load&lt;/p&gt;
&lt;p&gt;pickle 模块也提供了四个功能：dumps、dump、loads、load&lt;/p&gt;

&lt;p&gt;一. dumps 和 dump:&lt;/p&gt;
&lt;p&gt; dumps和dump   序列化方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      &lt;/strong&gt; dumps只完成了序列化为str，&lt;/p&gt;
&lt;p&gt;       dump必须传文件描述符，将序列化的str保存到文件中&lt;/p&gt;

&lt;p&gt;查看源码：&lt;/p&gt;
&lt;div readability=&quot;114&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True,
        allow_nan=True, cls=None, indent=None, separators=None,
        default=None, sort_keys=False, **kw):
    # Serialize ``obj`` to a JSON formatted ``str``.
    # 序列号 “obj” 数据类型 转换为 JSON格式的字符串 
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True,
        allow_nan=True, cls=None, indent=None, separators=None,
        default=None, sort_keys=False, **kw):
    &quot;&quot;&quot;Serialize ``obj`` as a JSON formatted stream to ``fp`` (a
    ``.write()``-supporting file-like object).
     我理解为两个动作，一个动作是将”obj“转换为JSON格式的字符串，还有一个动作是将字符串写入到文件中，也就是说文件描述符fp是必须要的参数 &quot;&quot;&quot;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;示例代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; import json
&amp;gt;&amp;gt;&amp;gt; json.dumps([])    # dumps可以格式化所有的基本数据类型为字符串
'[]'
&amp;gt;&amp;gt;&amp;gt; json.dumps(1)    # 数字
'1'
&amp;gt;&amp;gt;&amp;gt; json.dumps('1')   # 字符串
'&quot;1&quot;'
&amp;gt;&amp;gt;&amp;gt; dict = {&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:23}  
&amp;gt;&amp;gt;&amp;gt; json.dumps(dict)     # 字典
'{&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 23}'
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
a = {&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:23}
with open(&quot;test.json&quot;, &quot;w&quot;, encoding='utf-8') as f:
    # indent 超级好用，格式化保存字典，默认为None，小于0为零个空格
    f.write(json.dumps(a, indent=4))
    # json.dump(a,f,indent=4)   # 和上面的效果一样
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存的文件效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/1146853/201705/1146853-20170502135800898-438371220.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;二. loads 和 load &lt;/p&gt;
&lt;p&gt;loads和load  反序列化方法&lt;/p&gt;
&lt;p&gt;       loads 只完成了反序列化，&lt;/p&gt;
&lt;p&gt;       load 只接收文件描述符，完成了读取文件和反序列化&lt;/p&gt;

&lt;p&gt; 查看源码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
    &quot;&quot;&quot;Deserialize ``s`` (a ``str`` instance containing a JSON document) to a Python object.
       将包含str类型的JSON文档反序列化为一个python对象&quot;&quot;&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
def load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
    &quot;&quot;&quot;Deserialize ``fp`` (a ``.read()``-supporting file-like object containing a JSON document) to a Python object.
        将一个包含JSON格式数据的可读文件饭序列化为一个python对象&quot;&quot;&quot;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;实例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; json.loads('{&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:23}')
{'age': 23, 'name': 'Tom'}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
import json
with open(&quot;test.json&quot;, &quot;r&quot;, encoding='utf-8') as f:
    aa = json.loads(f.read())
    f.seek(0)
    bb = json.load(f)    # 与 json.loads(f.read())
print(aa)
print(bb)

# 输出：
{'name': 'Tom', 'age': 23}
{'name': 'Tom', 'age': 23}
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;三. json 和 picle 模块&lt;/p&gt;
&lt;p&gt; json模块和picle模块都有  dumps、dump、loads、load四种方法，而且用法一样。&lt;/p&gt;
&lt;p&gt;不用的是json模块序列化出来的是通用格式，其它编程语言都认识，就是普通的字符串，&lt;/p&gt;
&lt;p&gt;而picle模块序列化出来的只有python可以认识，其他编程语言不认识的，表现为乱码&lt;/p&gt;
&lt;p&gt;不过picle可以序列化函数，但是其他文件想用该函数，在该文件中需要有该文件的定义（定义和参数必须相同，内容可以不同）&lt;/p&gt;
&lt;p&gt;四. python对象（obj） 与json对象的对应关系&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
    +-------------------+---------------+
    | Python            | JSON          |
    +===================+===============+
    | dict              | object        |
    +-------------------+---------------+
    | list, tuple       | array         |
    +-------------------+---------------+
    | str               | string        |
    +-------------------+---------------+
    | int, float        | number        |
    +-------------------+---------------+
    | True              | true          |
    +-------------------+---------------+
    | False             | false         |
    +-------------------+---------------+
    | None              | null          |
    +-------------------+---------------+
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt; 五. 总结&lt;/p&gt;
&lt;p&gt; 1. json序列化方法：&lt;/p&gt;
&lt;p&gt;          dumps：无文件操作            dump：序列化+写入文件&lt;/p&gt;
&lt;p&gt;  2. json反序列化方法：&lt;/p&gt;
&lt;p&gt;          loads：无文件操作              load： 读文件+反序列化&lt;/p&gt;
&lt;p&gt;  3. json模块序列化的数据 更通用&lt;/p&gt;
&lt;p&gt;      picle模块序列化的数据 仅python可用，但功能强大，可以序列号函数&lt;/p&gt;
&lt;p&gt;  4. json模块可以序列化和反序列化的  数据类型 见  python对象（obj） 与json对象的对应关系表&lt;/p&gt;
&lt;p&gt;  5. 格式化写入文件利用  indent = 4 &lt;/p&gt;
&lt;h2&gt;二、pickle&lt;/h2&gt;
&lt;p&gt;python的pickle模块实现了基本的数据序列和反序列化。通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储；通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。&lt;/p&gt;
&lt;p&gt;　　基本接口：&lt;/p&gt;
&lt;p&gt;　　pickle.dump(obj, file, [,protocol])&lt;br data-filtered=&quot;filtered&quot;/&gt;
　　注解：将对象obj保存到文件file中去。&lt;br data-filtered=&quot;filtered&quot;/&gt;
　　　　　protocol为序列化使用的协议版本，0：ASCII协议，所序列化的对象使用可打印的ASCII码表示；1：老式的二进制协议；2：2.3版本引入的新二进制协议，较以前的更高效。其中协议0和1兼容老版本的python。protocol默认值为0。&lt;br data-filtered=&quot;filtered&quot;/&gt;
　　　　　file：对象保存到的类文件对象。file必须有write()接口， file可以是一个以'w'方式打开的文件或者一个StringIO对象或者其他任何实现write()接口的对象。如果protocol&amp;gt;=1，文件对象需要是二进制模式打开的。&lt;/p&gt;
&lt;p&gt;　　pickle.load(file)&lt;br data-filtered=&quot;filtered&quot;/&gt;
　　注解：从file中读取一个字符串，并将它重构为原来的python对象。&lt;br data-filtered=&quot;filtered&quot;/&gt;
　　file:类文件对象，有read()和readline()接口。&lt;/p&gt;
&lt;p&gt;　　A Simple Code&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre readability=&quot;25&quot;&gt;
#使用pickle模块将数据对象保存到文件&lt;p&gt;import pickle&lt;/p&gt;&lt;p&gt;data1 = {'a': [1, 2.0, 3, 4+6j],&lt;br data-filtered=&quot;filtered&quot;/&gt;         'b': ('string', u'Unicode string'),&lt;br data-filtered=&quot;filtered&quot;/&gt;         'c': None}&lt;/p&gt;&lt;p&gt;selfref_list = [1, 2, 3]&lt;br data-filtered=&quot;filtered&quot;/&gt;selfref_list.append(selfref_list)&lt;/p&gt;&lt;p&gt;output = open('data.pkl', 'wb')&lt;/p&gt;&lt;p&gt;# Pickle dictionary using protocol 0.&lt;br data-filtered=&quot;filtered&quot;/&gt;pickle.dump(data1, output)&lt;/p&gt;&lt;p&gt;# Pickle the list using the highest protocol available.&lt;br data-filtered=&quot;filtered&quot;/&gt;pickle.dump(selfref_list, output, -1)&lt;/p&gt;&lt;p&gt;output.close()
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39.5&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre readability=&quot;10&quot;&gt;
#使用pickle模块从文件中重构python对象&lt;p&gt;import pprint, pickle&lt;/p&gt;&lt;p&gt;pkl_file = open('data.pkl', 'rb')&lt;/p&gt;&lt;p&gt;data1 = pickle.load(pkl_file)&lt;br data-filtered=&quot;filtered&quot;/&gt;pprint.pprint(data1)&lt;/p&gt;&lt;p&gt;data2 = pickle.load(pkl_file)&lt;br data-filtered=&quot;filtered&quot;/&gt;pprint.pprint(data2)&lt;/p&gt;&lt;p&gt;pkl_file.close()
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 align=&quot;left&quot;&gt;1.    基本复制方法&lt;/h3&gt;
&lt;p&gt;采用给出2个文件对象的方式，在2个文件对象之间进行数据复制达到目的。&lt;/p&gt;
&lt;p&gt;copyfileobj源码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
def copyfileobj(fsrc, fdst, length=16*1024):&lt;br data-filtered=&quot;filtered&quot;/&gt;    &quot;&quot;&quot;copy data from file-like object fsrc to file-like object fdst&quot;&quot;&quot;&lt;br data-filtered=&quot;filtered&quot;/&gt;    while 1:&lt;br data-filtered=&quot;filtered&quot;/&gt;        buf = fsrc.read(length)&lt;br data-filtered=&quot;filtered&quot;/&gt;        if not buf:&lt;br data-filtered=&quot;filtered&quot;/&gt;            break&lt;br data-filtered=&quot;filtered&quot;/&gt;        fdst.write(buf)
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;分析：给出2个文件对象，通过读取原文件的内容，写入到新文件对象中，每次写入16KB。&lt;/p&gt;
&lt;p&gt;这个方法实际是不常用的，而是为了我们的常用方式做准备的。注意这个方法这里没有流文件对象并没有关闭，即这确实只是一个基础方法。&lt;/p&gt;

&lt;p&gt;Copyfile源码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre readability=&quot;9&quot;&gt;
def copyfile(src, dst):&lt;br data-filtered=&quot;filtered&quot;/&gt;    &quot;&quot;&quot;Copy data from src to dst&quot;&quot;&quot;&lt;br data-filtered=&quot;filtered&quot;/&gt;    if _samefile(src, dst):&lt;br data-filtered=&quot;filtered&quot;/&gt;        raise Error, &quot;`%s` and `%s` are the same file&quot; % (src, dst)&lt;p&gt;fsrc = None&lt;br data-filtered=&quot;filtered&quot;/&gt;    fdst = None&lt;br data-filtered=&quot;filtered&quot;/&gt;    try:&lt;br data-filtered=&quot;filtered&quot;/&gt;        fsrc = open(src, 'rb')&lt;br data-filtered=&quot;filtered&quot;/&gt;        fdst = open(dst, 'wb')&lt;br data-filtered=&quot;filtered&quot;/&gt;        copyfileobj(fsrc, fdst)&lt;br data-filtered=&quot;filtered&quot;/&gt;    finally:&lt;br data-filtered=&quot;filtered&quot;/&gt;        if fdst:&lt;br data-filtered=&quot;filtered&quot;/&gt;            fdst.close()&lt;br data-filtered=&quot;filtered&quot;/&gt;        if fsrc:&lt;br data-filtered=&quot;filtered&quot;/&gt;            fsrc.close()
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这里代码没有任何难度，读取2个文件对象，调用刚才的copyfileobject对象。&lt;/p&gt;
&lt;p&gt;测试.&lt;/p&gt;
&lt;p&gt;条件：&lt;/p&gt;
&lt;p&gt;E:\test\a文件夹下有一个文件jquery.min.js&lt;/p&gt;
&lt;p&gt;E:\test\b下没有任何文件,但必须指定一个文件名&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
#! -*- encoding:utf-8 -*-&lt;br data-filtered=&quot;filtered&quot;/&gt;import shutil&lt;br data-filtered=&quot;filtered&quot;/&gt;shutil.copyfile(&quot;E:\\test\\a\\jquery.min.js&quot;, &quot;E:\\test\\b\\jquery.min.js&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果在E:\test\b目录下生成了一个名为jquery.min.js的文件。&lt;/p&gt;

&lt;p&gt;外部调用方法&lt;/p&gt;
&lt;p&gt;Copy源码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre readability=&quot;11&quot;&gt;
def copy(src, dst):&lt;br data-filtered=&quot;filtered&quot;/&gt;    &quot;&quot;&quot;Copy data and mode bits (&quot;cp src dst&quot;).&lt;p&gt;The destination may be a directory.&lt;/p&gt;&lt;p&gt;&quot;&quot;&quot;&lt;br data-filtered=&quot;filtered&quot;/&gt;    if os.path.isdir(dst):&lt;br data-filtered=&quot;filtered&quot;/&gt;        dst = os.path.join(dst, os.path.basename(src))&lt;br data-filtered=&quot;filtered&quot;/&gt;    copyfile(src, dst)&lt;br data-filtered=&quot;filtered&quot;/&gt;    copymode(src, dst)
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以看到这里有有趣的一行注释copy data and mode bits(“cp src dst”)复制文件内容的执行模式，完成的功能类似于cp src dst，在linux中不就是这个命令么，当然linux最终底层怎么实现的不得而知。 猜测也差不了多少。&lt;/p&gt;
&lt;p&gt;代码解释，这里有一个条件，即如果dst是文件夹，而不是文件对象，那么就使用原来文件的文件名。即这个copy方法可以不用管是否拷贝对象是否是一个完整路径，文件夹也行，只不过文件夹的话，就以原来的文件名为新文件的文件名了。&lt;/p&gt;
&lt;p&gt;测试,将刚才上个测试程序b文件夹中的文件清除，可以执行下面程序。会有新文件复制成功。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;
&lt;pre readability=&quot;6&quot;&gt;
#! -*- encoding:utf-8 -*-&lt;br data-filtered=&quot;filtered&quot;/&gt;import shutil&lt;p&gt;shutil.copy(&quot;E:\\test\\a\\jquery.min.js&quot;, &quot;E:\\test\\b&quot;)
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Copy2源码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre readability=&quot;11&quot;&gt;
def copy2(src, dst):&lt;br data-filtered=&quot;filtered&quot;/&gt;    &quot;&quot;&quot;Copy data and all stat info (&quot;cp -p src dst&quot;).&lt;p&gt;The destination may be a directory.&lt;/p&gt;&lt;p&gt;&quot;&quot;&quot;&lt;br data-filtered=&quot;filtered&quot;/&gt;    if os.path.isdir(dst):&lt;br data-filtered=&quot;filtered&quot;/&gt;        dst = os.path.join(dst, os.path.basename(src))&lt;br data-filtered=&quot;filtered&quot;/&gt;    copyfile(src, dst)&lt;br data-filtered=&quot;filtered&quot;/&gt;    copystat(src, dst)
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;对比copy和copy2，发现只有copyfile下面的方法变了，而注释变成了cp –p src dst，熟悉linux的同学应该了解各种参数意义。&lt;/p&gt;
&lt;p&gt;这里将原有文件的所有属性状态都copy过去了&lt;/p&gt;

&lt;p&gt;Copytree源码&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_65453&quot; class=&quot;syntaxhighlighter nogutter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;13.5&quot;&gt;&lt;tr readability=&quot;27&quot;&gt;&lt;td class=&quot;code&quot; readability=&quot;41&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;81&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;def&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;copytree(src, dst, symlinks&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python color1&quot;&gt;False&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, ignore&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python color1&quot;&gt;None&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;names&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;os.listdir(src)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;if&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;ignore&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;is&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;not&lt;/code&gt; &lt;code class=&quot;python color1&quot;&gt;None&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;ignored_names&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;ignore(src, names)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;else&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;ignored_names&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;set&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;os.makedirs(dst)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;errors&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;for&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;name&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;names:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;if&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;name&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;ignored_names:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;            &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;continue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;srcname&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;os.path.join(src, name)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;dstname&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;os.path.join(dst, name)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;try&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;            &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;if&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;symlinks&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;and&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;os.path.islink(srcname):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;                &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;linkto&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;os.readlink(srcname)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;                &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;os.symlink(linkto, dstname)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;            &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;elif&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;os.path.isdir(srcname):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;                &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;copytree(srcname, dstname, symlinks, ignore)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;            &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;else&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;                &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;copy2(srcname, dstname)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;            &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;except&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(IOError, os.error), why:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;            &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;errors.append((srcname, dstname,&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;str&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(why)))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;except&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;Error, err:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;            &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;errors.extend(err.args[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;try&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;copystat(src, dst)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;except&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;OSError, why:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;if&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;WindowsError&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;is&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;not&lt;/code&gt; &lt;code class=&quot;python color1&quot;&gt;None&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;and&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;isinstance&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(why, WindowsError):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;            &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;            &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;pass&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;else&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;            &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;errors.extend((src, dst,&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;str&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(why)))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;if&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;errors:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;raise&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;Error, errors&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;该方法给出一个原始文件夹系统，下面可以有N个文件夹和文件，给出dst，即给出你想copy的路径的根路径，注意，这个根路径当前是必须不存在的，源码中标注红色部分，如果存在，会产生错误。这一点上，感觉该做一个条件判断的，可惜没做。当然不是大问题。有点吹毛求疵了。&lt;/p&gt;
&lt;p&gt;测试:&lt;/p&gt;
&lt;p&gt;E:\test\a 在a 目录下任意新建文件夹和文件,N多层次，test下也只有a这个文件夹。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;
&lt;pre readability=&quot;6&quot;&gt;
#! -*- encoding:utf-8 -*-&lt;br data-filtered=&quot;filtered&quot;/&gt;import shutil&lt;p&gt;shutil.copytree(&quot;E:\\test\\a&quot;, &quot;E:\\test\\b&quot;)
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行后会在test文件夹下多出一个b文件夹，并且b文件夹下有a文件夹下的所有内容.&lt;/p&gt;

&lt;p&gt;Rmtree源码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
def rmtree(path, ignore_errors=False, onerror=None):&lt;br data-filtered=&quot;filtered&quot;/&gt;    if ignore_errors:&lt;br data-filtered=&quot;filtered&quot;/&gt;        def onerror(*args):&lt;br data-filtered=&quot;filtered&quot;/&gt;            pass&lt;br data-filtered=&quot;filtered&quot;/&gt;    elif onerror is None:&lt;br data-filtered=&quot;filtered&quot;/&gt;        def onerror(*args):&lt;br data-filtered=&quot;filtered&quot;/&gt;            raise&lt;br data-filtered=&quot;filtered&quot;/&gt;    try:&lt;br data-filtered=&quot;filtered&quot;/&gt;        if os.path.islink(path):&lt;br data-filtered=&quot;filtered&quot;/&gt;            # symlinks to directories are forbidden, see bug #1669&lt;br data-filtered=&quot;filtered&quot;/&gt;            raise OSError(&quot;Cannot call rmtree on a symbolic link&quot;)&lt;br data-filtered=&quot;filtered&quot;/&gt;    except OSError:&lt;br data-filtered=&quot;filtered&quot;/&gt;        onerror(os.path.islink, path, sys.exc_info())&lt;br data-filtered=&quot;filtered&quot;/&gt;        # can't continue even if onerror hook returns&lt;br data-filtered=&quot;filtered&quot;/&gt;        return&lt;br data-filtered=&quot;filtered&quot;/&gt;    names = []&lt;br data-filtered=&quot;filtered&quot;/&gt;    try:&lt;br data-filtered=&quot;filtered&quot;/&gt;        names = os.listdir(path)&lt;br data-filtered=&quot;filtered&quot;/&gt;    except os.error, err:&lt;br data-filtered=&quot;filtered&quot;/&gt;        onerror(os.listdir, path, sys.exc_info())&lt;br data-filtered=&quot;filtered&quot;/&gt;    for name in names:&lt;br data-filtered=&quot;filtered&quot;/&gt;        fullname = os.path.join(path, name)&lt;br data-filtered=&quot;filtered&quot;/&gt;        try:&lt;br data-filtered=&quot;filtered&quot;/&gt;            mode = os.lstat(fullname).st_mode&lt;br data-filtered=&quot;filtered&quot;/&gt;        except os.error:&lt;br data-filtered=&quot;filtered&quot;/&gt;            mode = 0&lt;br data-filtered=&quot;filtered&quot;/&gt;        if stat.S_ISDIR(mode):&lt;br data-filtered=&quot;filtered&quot;/&gt;            rmtree(fullname, ignore_errors, onerror)&lt;br data-filtered=&quot;filtered&quot;/&gt;        else:&lt;br data-filtered=&quot;filtered&quot;/&gt;            try:&lt;br data-filtered=&quot;filtered&quot;/&gt;                os.remove(fullname)&lt;br data-filtered=&quot;filtered&quot;/&gt;            except os.error, err:&lt;br data-filtered=&quot;filtered&quot;/&gt;                onerror(os.remove, fullname, sys.exc_info())&lt;br data-filtered=&quot;filtered&quot;/&gt;    try:&lt;br data-filtered=&quot;filtered&quot;/&gt;        os.rmdir(path)&lt;br data-filtered=&quot;filtered&quot;/&gt;    except os.error:&lt;br data-filtered=&quot;filtered&quot;/&gt;        onerror(os.rmdir, path, sys.exc_info())
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;我想看名字你就该知道这个方法是干嘛的了。&lt;/p&gt;
&lt;p&gt;刚才copytree执行成功后立即执行下面的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
#! -*- encoding:utf-8 -*-&lt;br data-filtered=&quot;filtered&quot;/&gt;import shutil&lt;p&gt;shutil.rmtree(&quot;E:\\test\\b&quot;)
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以发现b文件夹连同下面的文件都消失了。&lt;/p&gt;

&lt;p&gt;Move源码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
def move(src, dst):&lt;br data-filtered=&quot;filtered&quot;/&gt;    real_dst = dst&lt;br data-filtered=&quot;filtered&quot;/&gt;    if os.path.isdir(dst):&lt;br data-filtered=&quot;filtered&quot;/&gt;        real_dst = os.path.join(dst, _basename(src))&lt;br data-filtered=&quot;filtered&quot;/&gt;        if os.path.exists(real_dst):&lt;br data-filtered=&quot;filtered&quot;/&gt;            raise Error, &quot;Destination path '%s' already exists&quot; % real_dst&lt;br data-filtered=&quot;filtered&quot;/&gt;    try:&lt;br data-filtered=&quot;filtered&quot;/&gt;        os.rename(src, real_dst)&lt;br data-filtered=&quot;filtered&quot;/&gt;    except OSError:&lt;br data-filtered=&quot;filtered&quot;/&gt;        if os.path.isdir(src):&lt;br data-filtered=&quot;filtered&quot;/&gt;            if destinsrc(src, dst):&lt;br data-filtered=&quot;filtered&quot;/&gt;                raise Error, &quot;Cannot move a directory '%s' into itself '%s'.&quot; % (src, dst)&lt;br data-filtered=&quot;filtered&quot;/&gt;            copytree(src, real_dst, symlinks=True)&lt;br data-filtered=&quot;filtered&quot;/&gt;            rmtree(src)&lt;br data-filtered=&quot;filtered&quot;/&gt;        else:&lt;br data-filtered=&quot;filtered&quot;/&gt;            copy2(src, real_dst)&lt;br data-filtered=&quot;filtered&quot;/&gt;            os.unlink(src)
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;同上，看名字就知道的功能，类似于windows的ctrl+x-&amp;gt;ctrl+v操作。&lt;/p&gt;

&lt;p&gt;测试。&lt;/p&gt;
&lt;p&gt;执行完rmtree后，test目录只有一个a文件夹，执行下面程序，可以看到a文件夹没有了，取而代之的是b文件夹下有a文件夹的所有内容。有点想os.rename了，但是只是因为我将这2个测试文件都放在了一起而已，即他能比较笨的完成os.rename的功能，但os.rename不可能会做move的功能。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
#! -*- encoding:utf-8 -*-&lt;br data-filtered=&quot;filtered&quot;/&gt;import shutil&lt;br data-filtered=&quot;filtered&quot;/&gt;shutil.move(&quot;E:\\test\\a&quot;, &quot;E:\\test\\b&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，解释下这个模块的名字,shutil ， shu+til?中国人相信第一次看见都那么分的， 从上面分析的功能看应该是sh+util,即完成shell的一些功能的工具集。&lt;/p&gt;

&lt;p&gt;subprocess模块是python从2.4版本开始引入的模块。主要用来取代 一些旧的模块方法，如os.system、os.spawn*、os.popen*、commands.*等。subprocess通过子进程来执行外部指令，并通过input/output/error管道，获取子进程的执行的返回信息。&lt;/p&gt;
&lt;p&gt;常用方法：&lt;/p&gt;
&lt;p&gt;subprocess.call()：执行命令，并返回执行状态，其中shell参数为False时，命令需要通过列表的方式传入，当shell为True时，可直接传入命令&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; a = subprocess.call(['df','-hT'],shell=False)
Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/sda2     ext4     94G   64G   26G  72% /
tmpfs        tmpfs    2.8G     0  2.8G   0% /dev/shm
/dev/sda1     ext4    976M   56M  853M   7% /boot

&amp;gt;&amp;gt;&amp;gt; a = subprocess.call('df -hT',shell=True)
Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/sda2     ext4     94G   64G   26G  72% /
tmpfs        tmpfs    2.8G     0  2.8G   0% /dev/shm
/dev/sda1     ext4    976M   56M  853M   7% /boot&lt;/pre&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; print a&lt;br data-filtered=&quot;filtered&quot;/&gt;
0&lt;/p&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;subprocess.check_call()：用法与subprocess.call()类似，区别是，当返回值不为0时，直接抛出异常&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; a = subprocess.check_call('df -hT',shell=True)
Filesystem    Type    Size  Used Avail Use% Mounted on
/dev/sda2     ext4     94G   64G   26G  72% /
tmpfs        tmpfs    2.8G     0  2.8G   0% /dev/shm
/dev/sda1     ext4    976M   56M  853M   7% /boot
&amp;gt;&amp;gt;&amp;gt; print a
0
&amp;gt;&amp;gt;&amp;gt; a = subprocess.check_call('dfdsf',shell=True)
/bin/sh: dfdsf: command not found
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
  File &quot;/usr/lib64/python2.6/subprocess.py&quot;, line 502, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command 'dfdsf' returned non-zero exit status 127
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;subprocess.check_output()：用法与上面两个方法类似，区别是，如果当返回值为0时，直接返回输出结果，如果返回值不为0，直接抛出异常。需要说明的是，该方法在python3.x中才有。&lt;/p&gt;
&lt;p&gt;subprocess.Popen()：&lt;/p&gt;
&lt;p&gt;在一些复杂场景中，我们需要将一个进程的执行输出作为另一个进程的输入。在另一些场景中，我们需要先进入到某个输入环境，然后再执行一系列的指令等。这个时候我们就需要使用到suprocess的Popen()方法。该方法有以下参数：&lt;/p&gt;
&lt;p&gt;args：shell命令，可以是字符串，或者序列类型，如list,tuple。&lt;/p&gt;
&lt;p&gt;bufsize：缓冲区大小，可不用关心&lt;/p&gt;
&lt;p&gt;stdin,stdout,stderr：分别表示程序的标准输入，标准输出及标准错误&lt;/p&gt;
&lt;p&gt;shell：与上面方法中用法相同&lt;/p&gt;
&lt;p&gt;cwd：用于设置子进程的当前目录&lt;/p&gt;
&lt;p&gt;env：用于指定子进程的环境变量。如果env=None，则默认从父进程继承环境变量&lt;/p&gt;
&lt;p&gt;universal_newlines：不同系统的的换行符不同，当该参数设定为true时，则表示使用\n作为换行符&lt;/p&gt;

&lt;p&gt;示例1，在/root下创建一个suprocesstest的目录：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; a = subprocess.Popen('mkdir subprocesstest',shell=True,cwd='/root') 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例2，使用python执行几个命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
import subprocess

obj = subprocess.Popen([&quot;python&quot;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
obj.stdin.write('print 1 \n')
obj.stdin.write('print 2 \n')
obj.stdin.write('print 3 \n')
obj.stdin.write('print 4 \n')
obj.stdin.close()

cmd_out = obj.stdout.read()
obj.stdout.close()
cmd_error = obj.stderr.read()
obj.stderr.close()

print cmd_out
print cmd_error
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;也可以使用如下方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
import subprocess

obj = subprocess.Popen([&quot;python&quot;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
obj.stdin.write('print 1 \n')
obj.stdin.write('print 2 \n')
obj.stdin.write('print 3 \n')
obj.stdin.write('print 4 \n')

out_error_list = obj.communicate()
print out_error_list
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;示例3，将一个子进程的输出，作为另一个子进程的输入：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
import subprocess
child1 = subprocess.Popen([&quot;cat&quot;,&quot;/etc/passwd&quot;], stdout=subprocess.PIPE)
child2 = subprocess.Popen([&quot;grep&quot;,&quot;0:0&quot;],stdin=child1.stdout, stdout=subprocess.PIPE)
out = child2.communicate()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
import subprocess
child = subprocess.Popen('sleep 60',shell=True,stdout=subprocess.PIPE)
child.poll()    #检查子进程状态
child.kill()     #终止子进程
child.send_signal()    #向子进程发送信号
child.terminate()   #终止子进程
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;正则表达式本身是一种小型的、高度专业化的编程语言，而在python中，通过内嵌集成re模块，程序媛们可以直接调用来实现正则匹配。正则表达式模式被编译成一系列的字节码，然后由用C编写的匹配引擎执行。&lt;/p&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;&gt;&lt;tbody readability=&quot;15&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;普通字符&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;匹配自身&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;匹配任意除换行符&quot;\n&quot;外的字符(在DOTALL模式中也能匹配换行符&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a.c&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;\&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;转义字符，使后一个字符改变原来的意思&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a\.c;a\\c&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a.c;a\c&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;*&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;匹配前一个字符0或多次&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc*&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;ab;abccc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;+&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;匹配前一个字符1次或无限次&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc+&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc;abccc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;?&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;匹配一个字符0次或1次&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc?&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;ab;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;^&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;匹配字符串开头。在多行模式中匹配每一行的开头&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;^abc&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;$&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;匹配字符串末尾，在多行模式中匹配每一行的末尾&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;abc$&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;|&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;或。匹配|左右表达式任意一个，从左到右匹配，如果|没有包括在()中，则它的范围是整个正则表达式&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc|def&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;p&gt;def&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot;&gt;{}&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;{m}匹配前一个字符m次，{m,n}匹配前一个字符m至n次，若省略n，则匹配m至无限次&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;ab{1,2}c&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;p&gt;abbc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;[]&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;字符集。对应的位置可以是字符集中任意字符。字符集中的字符可以逐个列出，也可以给出范围，如[abc]或[a-c]。[^abc]表示取反，即非abc。&lt;br data-filtered=&quot;filtered&quot;/&gt;
所有特殊字符在字符集中都失去其原有的特殊含义。用\反斜杠转义恢复特殊字符的特殊含义。&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a[bcd]e&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abe&lt;/p&gt;
&lt;p&gt;ace&lt;/p&gt;
&lt;p&gt;ade&lt;/p&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;()&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;被括起来的表达式将作为分组，从表达式左边开始没遇到一个分组的左括号“（”，编号+1.&lt;br data-filtered=&quot;filtered&quot;/&gt;
分组表达式作为一个整体，可以后接数量词。表达式中的|仅在该组中有效。&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;(abc){2}&lt;br data-filtered=&quot;filtered&quot;/&gt;
a(123|456)c&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abcabc&lt;/p&gt;
&lt;p&gt;a456c&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;\d&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;数字:[0-9]&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a\bc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a1c&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;\D&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;非数字:[^\d]&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a\Dc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;\s&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;匹配任何空白字符:[&amp;lt;空格&amp;gt;\t\r\n\f\v]&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a\sc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a c&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;\S&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;非空白字符:[^\s]&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a\Sc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;\w&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;匹配包括下划线在内的任何字字符:[A-Za-z0-9_]&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a\wc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;\W&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;匹配非字母字符，即匹配特殊字符&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a\Wc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a c&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;\A&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;仅匹配字符串开头,同^&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;\Aabc&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;\Z&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;仅匹配字符串结尾，同$&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc\Z&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;\b&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;匹配\w和\W之间，即匹配单词边界匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配&quot;never&quot; 中的 'er'，但不能匹配 &quot;verb&quot; 中的 'er'。&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;\babc\b&lt;br data-filtered=&quot;filtered&quot;/&gt;
a\b!bc&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;空格abc空格&lt;br data-filtered=&quot;filtered&quot;/&gt;
a!bc&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;\B&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;[^\b]&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;a\Bbc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;abc&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import re
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;asdsa@#$%^*!_454548{}[]|\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))#数字字母下划线
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\W&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;asdsa@#$%$^*!_454548{}[]|\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))#非数字字母下划线
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;asdsa@#$%^*!_454548{}[]|\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))#空(空格，换行，制表符)
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;asdsa@#$%^*!_454548{}[]|\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))#非空(空格，换行，制表符)
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;asdsa@#$%^*!_454548{}[]!\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))#数字
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;asdsa@#$%^*!|{}][_454548\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))#非数字
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ds&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;asds a@#$%ds ^*!_45454ds8{}[]|\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))#规定&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ds&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;匹配
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^ds&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ds a@#$%ds ^*!_45454ds8{}[]|\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))#非&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ds&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;匹配
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;asds a@#$%ds ^*!_45454ds8{}[]|\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))#&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;匹配
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;asds a@#$%ds ^*!_45454ds8{}[]|\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))非&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;匹配
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;asds a@#$%ds ^*!a_d45454ds8{}[]|\n \t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))#点表示任意  一个.表示一个
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ab{1,3}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a ab abb abbb abbbbbb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))#{m,n}给b规定范围1-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ab.*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a ab abb abbb albbbbb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))#贪婪匹配   找寻最后一个b
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ab.*?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a ab abb abb albbbbb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))#
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a[0-9][0-9]c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alc a+c a2c a9c a88c a-c acc aAc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))#匹配&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;和&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;之间的有两位数字的
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a[-+*]c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alc a+c a2c a9c allc a-c acc aAc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))#匹配&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;和&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;之间有一位+、-、*&lt;span&gt;的
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a[a-zA-Z]c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alc a+c a2c a9c allc a-c acc aAc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))#匹配&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;和&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;之间有一位大小写的
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;([a-z]+)_sb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egon alex_sb123123wxxxxxxxxxx_sb,lxx_sb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
# print(re.findall(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a[^a-zA-Z]c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a c alc a+c a2c a9c a*c a11c a-c aAc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1、compile()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编译正则表达式模式，返回一个对象的模式。（可以把那些常用的正则表达式编译成正则表达式对象，这样可以提高一点效率。）&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;p&gt;re.compile(pattern,flags=0)&lt;/p&gt;
&lt;p&gt;pattern: 编译时用的表达式字符串。&lt;/p&gt;
&lt;p&gt;flags 编译标志位，用于修改正则表达式的匹配方式，如：是否区分大小写，多行匹配等。常用的flags有：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;标志&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;含义&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;re.S(DOTALL)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;使.匹配包括换行在内的所有字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;re.I（IGNORECASE）&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;使匹配对大小写不敏感&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;re.L（LOCALE）&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;4&quot;&gt;
&lt;div readability=&quot;7&quot;&gt;做本地化识别（locale-aware)匹配，法语等&lt;img src=&quot;file:///C:/Users/tina/AppData/Local/YNote/data/heoffer@126.com/15ef610b4afd4cf0aea99402f970595e/19c23298f53f40f1b1d0168871156605.jpg&quot; alt=&quot;&quot; data-media-type=&quot;image&quot; data-attr-org-src-id=&quot;EDF5A9BC07E7467D84F9FD39AA6D0AAC&quot; data-attr-org-img-file=&quot;file:///C:/Users/tina/AppData/Local/YNote/data/heoffer@126.com/15ef610b4afd4cf0aea99402f970595e/19c23298f53f40f1b1d0168871156605.jpg&quot;/&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;re.M(MULTILINE)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;多行匹配，影响^和$&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;re.X(VERBOSE)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;该标志通过给予更灵活的格式以便将正则表达式写得更易于理解&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;re.U&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
import re
tt = &quot;Tina is a good girl, she is cool, clever, and so on...&quot;
rr = re.compile(r'\w*oo\w*')
print(rr.findall(tt))   #查找所有包含'oo'的单词
执行结果如下：
['good', 'cool']
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2、match()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;决定RE是否在字符串刚开始的位置匹配。//注：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符'$'&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;p&gt;re.match(pattern, string, flags=0)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
print(re.match('com','comwww.runcomoob').group())
print(re.match('com','Comwww.runcomoob',re.I).group())
执行结果如下：
com
com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3、search()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 格式：&lt;/p&gt;
&lt;p&gt;re.search(pattern, string, flags=0)&lt;/p&gt;
&lt;p&gt;re.search函数会在字符串内查找模式匹配,只要找到第一个匹配然后返回，如果字符串没有匹配，则返回None。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
print(re.search('\dcom','www.4comrunoob.5com').group())
执行结果如下：
4com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;*注：match和search一旦匹配成功，就是一个match object对象，而match object对象有以下方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;group() 返回被 RE 匹配的字符串&lt;/li&gt;
&lt;li&gt;start() 返回匹配开始的位置&lt;/li&gt;
&lt;li&gt;end() 返回匹配结束的位置&lt;/li&gt;
&lt;li&gt;span() 返回一个元组包含匹配 (开始,结束) 的位置&lt;/li&gt;
&lt;li&gt;group() 返回re整体匹配的字符串，可以一次输入多个组号，对应组号匹配的字符串。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;a. group（）返回re整体匹配的字符串，&lt;br data-filtered=&quot;filtered&quot;/&gt;
b. group (n,m) 返回组号为n，m所匹配的字符串，如果组号不存在，则返回indexError异常&lt;br data-filtered=&quot;filtered&quot;/&gt;
c.groups（）groups() 方法返回一个包含正则表达式中所有小组字符串的元组，从 1 到所含的小组号，通常groups()不需要参数，返回一个元组，元组中的元就是正则表达式中定义的组。 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
import re
a = &quot;123abc456&quot;
 print(re.search(&quot;([0-9]*)([a-z]*)([0-9]*)&quot;,a).group(0))   #123abc456,返回整体
 print(re.search(&quot;([0-9]*)([a-z]*)([0-9]*)&quot;,a).group(1))   #123
 print(re.search(&quot;([0-9]*)([a-z]*)([0-9]*)&quot;,a).group(2))   #abc
 print(re.search(&quot;([0-9]*)([a-z]*)([0-9]*)&quot;,a).group(3))   #456&lt;br data-filtered=&quot;filtered&quot;/&gt;###group(1) 列出第一个括号匹配部分，group(2) 列出第二个括号匹配部分，group(3) 列出第三个括号匹配部分。###
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4、findall()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;re.findall遍历匹配，可以获取字符串中所有匹配的字符串，返回一个列表。&lt;/p&gt;
&lt;p&gt; 格式：&lt;/p&gt;
&lt;p&gt;re.findall(pattern, string, flags=0)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
p = re.compile(r'\d+')
print(p.findall('o1n2m3k4'))
执行结果如下：
['1', '2', '3', '4']
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
import re
tt = &quot;Tina is a good girl, she is cool, clever, and so on...&quot;
rr = re.compile(r'\w*oo\w*')
print(rr.findall(tt))
print(re.findall(r'(\w)*oo(\w)',tt))#()表示子表达式 
执行结果如下：
['good', 'cool']
[('g', 'd'), ('c', 'l')]
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5、finditer()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。找到 RE 匹配的所有子串，并把它们作为一个迭代器返回。&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;p&gt;re.finditer(pattern, string, flags=0)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
iter = re.finditer(r'\d+','12 drumm44ers drumming, 11 ... 10 ...')
for i in iter:
    print(i)
    print(i.group())
    print(i.span())
执行结果如下：
&amp;lt;_sre.SRE_Match object; span=(0, 2), match='12'&amp;gt;
12
(0, 2)
&amp;lt;_sre.SRE_Match object; span=(8, 10), match='44'&amp;gt;
44
(8, 10)
&amp;lt;_sre.SRE_Match object; span=(24, 26), match='11'&amp;gt;
11
(24, 26)
&amp;lt;_sre.SRE_Match object; span=(31, 33), match='10'&amp;gt;
10
(31, 33)
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;6、split()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按照能够匹配的子串将string分割后返回列表。&lt;/p&gt;
&lt;p&gt;可以使用re.split来分割字符串，如：re.split(r'\s+', text)；将字符串按空格分割成一个单词列表。&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;p&gt;re.split(pattern, string[, maxsplit])&lt;/p&gt;
&lt;p&gt;maxsplit用于指定最大分割次数，不指定将全部分割。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
print(re.split('\d+','one1two2three3four4five5'))
执行结果如下：
['one', 'two', 'three', 'four', 'five', '']
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;7、sub()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用re替换string中每一个匹配的子串后返回替换后的字符串。&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;p&gt;re.sub(pattern, repl, string, count)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
import re
text = &quot;JGood is a handsome boy, he is cool, clever, and so on...&quot;
print(re.sub(r'\s+', '-', text))
执行结果如下：
JGood-is-a-handsome-boy,-he-is-cool,-clever,-and-so-on...
&lt;/pre&gt;
&lt;p&gt;其中第二个函数是替换后的字符串；本例中为'-'&lt;/p&gt;
&lt;p&gt;第四个参数指替换个数。默认为0，表示每个匹配项都替换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;re.sub还允许使用函数对匹配项的替换进行复杂的处理。&lt;/p&gt;
&lt;p&gt;如：re.sub(r'\s', lambda m: '[' + m.group(0) + ']', text, 0)；将字符串中的空格' '替换为'[ ]'。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
import re
text = &quot;JGood is a handsome boy, he is cool, clever, and so on...&quot;
print(re.sub(r'\s+', lambda m:'['+m.group(0)+']', text,0))
执行结果如下：
JGood[ ]is[ ]a[ ]handsome[ ]boy,[ ]he[ ]is[ ]cool,[ ]clever,[ ]and[ ]so[ ]on...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;8、subn()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 返回替换次数&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;p&gt;subn(pattern, repl, string, count=0, flags=0)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
print(re.subn('[1-2]','A','123456abcdef'))
print(re.sub(&quot;g.t&quot;,&quot;have&quot;,'I get A,  I got B ,I gut C'))
print(re.subn(&quot;g.t&quot;,&quot;have&quot;,'I get A,  I got B ,I gut C'))
执行结果如下：
('AA3456abcdef', 2)
I have A,  I have B ,I have C
('I have A,  I have B ,I have C', 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;1. 什么是xml？有何特征？&lt;/h3&gt;
&lt;p&gt;xml即&lt;strong&gt;可扩展标记语言&lt;/strong&gt;，它可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。&lt;/p&gt;
&lt;p&gt;例子：del.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;catalog&amp;gt;
    &amp;lt;maxid&amp;gt;4&amp;lt;/maxid&amp;gt;
    &amp;lt;login username=&quot;pytest&quot; passwd='123456'&amp;gt;
        &amp;lt;caption&amp;gt;Python&amp;lt;/caption&amp;gt;
        &amp;lt;item id=&quot;4&quot;&amp;gt;
            &amp;lt;caption&amp;gt;test&amp;lt;/caption&amp;gt;
        &amp;lt;/item&amp;gt;
    &amp;lt;/login&amp;gt;
    &amp;lt;item id=&quot;2&quot;&amp;gt;
        &amp;lt;caption&amp;gt;Zope&amp;lt;/caption&amp;gt;
    &amp;lt;/item&amp;gt;
&amp;lt;/catalog&amp;gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;从结构上，很像HTML超文本标记语言。但他们被设计的目的是不同的，超文本标记语言被设计用来显示数据，其焦点是数据的外观。它被设计用来&lt;strong&gt;传输&lt;/strong&gt;和&lt;strong&gt;存储&lt;/strong&gt;数据，其焦点是数据的&lt;strong&gt;内容&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么它有如下特征：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;它是有&lt;strong&gt;标签对&lt;/strong&gt;组成，&amp;lt;aa&amp;gt;&amp;lt;/aa&amp;gt;&lt;/li&gt;
&lt;li&gt;标签可以有属性：&amp;lt;aa id='123'&amp;gt;&amp;lt;/aa&amp;gt;&lt;/li&gt;
&lt;li&gt;标签对可以嵌入数据：&amp;lt;aa&amp;gt;abc&amp;lt;/aa&amp;gt;&lt;/li&gt;
&lt;li&gt;标签可以嵌入子标签（具有层级关系）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 获得标签属性&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
#coding: utf-8
import xml.dom.minidom
dom = xml.dom.minidom.parse(&quot;del.xml&quot;)  #打开xml文档

root = dom.documentElement              #得到xml文档对象
print &quot;nodeName:&quot;, root.nodeName        #每一个结点都有它的nodeName，nodeValue，nodeType属性
print &quot;nodeValue:&quot;, root.nodeValue      #nodeValue是结点的值，只对文本结点有效
print &quot;nodeType:&quot;, root.nodeType
print &quot;ELEMENT_NODE:&quot;, root.ELEMENT_NODE
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;nodeType是结点的类型。catalog是ELEMENT_NODE类型&lt;/p&gt;
&lt;p&gt;现在有以下几种：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div id=&quot;highlighter_548616&quot; class=&quot;syntaxhighlighter css&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ATTRIBUTE_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CDATA_SECTION_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;COMMENT_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DOCUMENT_FRAGMENT_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DOCUMENT_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DOCUMENT_TYPE_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ELEMENT_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENTITY_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENTITY_REFERENCE_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;NOTATION_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;PROCESSING_INSTRUCTION_NODE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;'&lt;/span&gt;&lt;span&gt;TEXT_NODE&lt;/span&gt;&lt;span&gt;'&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;nodeName: catalog&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;nodeValue: None&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;nodeType: &lt;/code&gt;&lt;code class=&quot;css value&quot;&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;ELEMENT_NODE: &lt;/code&gt;&lt;code class=&quot;css value&quot;&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;3. 获得子标签&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
#coding: utf-8
import xml.dom.minidom
dom = xml.dom.minidom.parse(&quot;del.xml&quot;)  

root = dom.documentElement
bb = root.getElementsByTagName('maxid')
print type(bb)
print bb
b = bb[0]
print b.nodeName
print b.nodeValue&lt;br/&gt;运行结果
&lt;/pre&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;　　&amp;lt;class &lt;/code&gt;&lt;code class=&quot;css string&quot;&gt;'xml.dom.minicompat.NodeList'&lt;/code&gt;&lt;code class=&quot;css plain&quot;&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;　　[&amp;lt;DOM Element: maxid at &lt;/code&gt;&lt;code class=&quot;css value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;css plain&quot;&gt;x&lt;/code&gt;&lt;code class=&quot;css value&quot;&gt;2707&lt;/code&gt;&lt;code class=&quot;css plain&quot;&gt;a&lt;/code&gt;&lt;code class=&quot;css value&quot;&gt;48&lt;/code&gt;&lt;code class=&quot;css plain&quot;&gt;&amp;gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;　　maxid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;　　None&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;4. 获得标签属性值&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
#coding: utf-8
import xml.dom.minidom
dom = xml.dom.minidom.parse(&quot;del.xml&quot;)  

root = dom.documentElement
itemlist = root.getElementsByTagName('login')
item = itemlist[0]
print item.getAttribute(&quot;username&quot;)
print item.getAttribute(&quot;passwd&quot;)

itemlist = root.getElementsByTagName(&quot;item&quot;)
item = itemlist[0]                   #通过在itemlist中的位置区分
print item.getAttribute(&quot;id&quot;) 

item2 = itemlist[1]                  #通过在itemlist中的位置区分
&lt;/pre&gt;
&lt;pre&gt;
print item2.getAttribute(&quot;id&quot;)&lt;br/&gt;运行结果
&lt;/pre&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;　　pytest&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css value&quot;&gt;　　123456&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css value&quot;&gt;　　4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css value&quot;&gt;　　2&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;5. 获得标签对之间的数据&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
#coding: utf-8
import xml.dom.minidom
dom = xml.dom.minidom.parse(&quot;del.xml&quot;)  

root = dom.documentElement
itemlist = root.getElementsByTagName('caption')

item = itemlist[0]
print item.firstChild.data

item2 = itemlist[1]
print item2.firstChild.data&lt;br/&gt;运行结果
&lt;/pre&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;　　Python&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;css plain&quot;&gt;　　test&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;6. 例子&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;
&amp;lt;users&amp;gt;
    &amp;lt;user id=&quot;1000001&quot;&amp;gt;
        &amp;lt;username&amp;gt;Admin&amp;lt;/username&amp;gt;
        &amp;lt;email&amp;gt;admin@live.cn&amp;lt;/email&amp;gt;
        &amp;lt;age&amp;gt;23&amp;lt;/age&amp;gt;
        &amp;lt;sex&amp;gt;boy&amp;lt;/sex&amp;gt;
    &amp;lt;/user&amp;gt;
    &amp;lt;user id=&quot;1000002&quot;&amp;gt;
        &amp;lt;username&amp;gt;Admin2&amp;lt;/username&amp;gt;
        &amp;lt;email&amp;gt;admin2@live.cn&amp;lt;/email&amp;gt;
        &amp;lt;age&amp;gt;22&amp;lt;/age&amp;gt;
        &amp;lt;sex&amp;gt;boy&amp;lt;/sex&amp;gt;
    &amp;lt;/user&amp;gt;
    &amp;lt;user id=&quot;1000003&quot;&amp;gt;
        &amp;lt;username&amp;gt;Admin3&amp;lt;/username&amp;gt;
        &amp;lt;email&amp;gt;admin3@live.cn&amp;lt;/email&amp;gt;
        &amp;lt;age&amp;gt;27&amp;lt;/age&amp;gt;
        &amp;lt;sex&amp;gt;boy&amp;lt;/sex&amp;gt;
    &amp;lt;/user&amp;gt;
    &amp;lt;user id=&quot;1000004&quot;&amp;gt;
        &amp;lt;username&amp;gt;Admin4&amp;lt;/username&amp;gt;
        &amp;lt;email&amp;gt;admin4@live.cn&amp;lt;/email&amp;gt;
        &amp;lt;age&amp;gt;25&amp;lt;/age&amp;gt;
        &amp;lt;sex&amp;gt;girl&amp;lt;/sex&amp;gt;
    &amp;lt;/user&amp;gt;
    &amp;lt;user id=&quot;1000005&quot;&amp;gt;
        &amp;lt;username&amp;gt;Admin5&amp;lt;/username&amp;gt;
        &amp;lt;email&amp;gt;admin5@live.cn&amp;lt;/email&amp;gt;
        &amp;lt;age&amp;gt;20&amp;lt;/age&amp;gt;
        &amp;lt;sex&amp;gt;boy&amp;lt;/sex&amp;gt;
    &amp;lt;/user&amp;gt;
    &amp;lt;user id=&quot;1000006&quot;&amp;gt;
        &amp;lt;username&amp;gt;Admin6&amp;lt;/username&amp;gt;
        &amp;lt;email&amp;gt;admin6@live.cn&amp;lt;/email&amp;gt;
        &amp;lt;age&amp;gt;23&amp;lt;/age&amp;gt;
        &amp;lt;sex&amp;gt;girl&amp;lt;/sex&amp;gt;
    &amp;lt;/user&amp;gt;
&amp;lt;/users&amp;gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;把name、email、age、sex输出 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考代码&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
# -*- coding:utf-8 -*-
from xml.dom import minidom

def get_attrvalue(node, attrname):
     return node.getAttribute(attrname) if node else ''

def get_nodevalue(node, index = 0):
    return node.childNodes[index].nodeValue if node else ''

def get_xmlnode(node, name):
    return node.getElementsByTagName(name) if node else []

def get_xml_data(filename = 'user.xml'):
    doc = minidom.parse(filename) 
    root = doc.documentElement

    user_nodes = get_xmlnode(root, 'user')
    print &quot;user_nodes:&quot;, user_nodes

    user_list=[]
    for node in user_nodes: 
        user_id = get_attrvalue(node, 'id') 
        node_name = get_xmlnode(node, 'username')
        node_email = get_xmlnode(node, 'email')
        node_age = get_xmlnode(node, 'age')
        node_sex = get_xmlnode(node, 'sex')

        user_name =get_nodevalue(node_name[0])
        user_email = get_nodevalue(node_email[0])
        user_age = int(get_nodevalue(node_age[0]))
        user_sex = get_nodevalue(node_sex[0])

        user = {}
        user['id'] , user['username'] , user['email'] , user['age'] , user['sex'] = (
            int(user_id), user_name , user_email , user_age , user_sex
        )
        user_list.append(user)
    return user_list

def test_load_xml():
    user_list = get_xml_data()
    for user in user_list :
        print '-----------------------------------------------------'
        if user:
            user_str='No.:\t%d\nname:\t%s\nsex:\t%s\nage:\t%s\nEmail:\t%s' % (int(user['id']) , user['username'], user['sex'] , user['age'] , user['email'])
            print user_str

if __name__ == &quot;__main__&quot;:
    test_load_xml()
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
C:\Users\wzh94434\Desktop\xml&amp;gt;&lt;span&gt;python user.py
user_nodes: [&lt;/span&gt;&amp;lt;DOM Element: user at &lt;span&gt;0x2758c48&lt;/span&gt;&amp;gt;, &amp;lt;DOM Element: user at &lt;span&gt;0x2756288&lt;/span&gt;&amp;gt;&lt;span&gt;,
 &lt;/span&gt;&amp;lt;DOM Element: user at &lt;span&gt;0x2756888&lt;/span&gt;&amp;gt;, &amp;lt;DOM Element: user at &lt;span&gt;0x2756e88&lt;/span&gt;&amp;gt;, &amp;lt;&lt;span&gt;DOM Elemen
t: user at &lt;/span&gt;&lt;span&gt;0x275e4c8&lt;/span&gt;&amp;gt;, &amp;lt;DOM Element: user at &lt;span&gt;0x275eac8&lt;/span&gt;&amp;gt;&lt;span&gt;]
&lt;/span&gt;-----------------------------------------------------&lt;span&gt;
No.:    &lt;/span&gt;&lt;span&gt;1000001&lt;/span&gt;&lt;span&gt;
name:   Admin
sex:    boy
age:    &lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;
Email:  admin@live.cn
&lt;/span&gt;-----------------------------------------------------&lt;span&gt;
No.:    &lt;/span&gt;&lt;span&gt;1000002&lt;/span&gt;&lt;span&gt;
name:   Admin2
sex:    boy
age:    &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;
Email:  admin2@live.cn
&lt;/span&gt;-----------------------------------------------------&lt;span&gt;
No.:    &lt;/span&gt;&lt;span&gt;1000003&lt;/span&gt;&lt;span&gt;
name:   Admin3
sex:    boy
age:    &lt;/span&gt;&lt;span&gt;27&lt;/span&gt;&lt;span&gt;
Email:  admin3@live.cn
&lt;/span&gt;-----------------------------------------------------&lt;span&gt;
No.:    &lt;/span&gt;&lt;span&gt;1000004&lt;/span&gt;&lt;span&gt;
name:   Admin4
sex:    gril
age:    &lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;span&gt;
Email:  admin4@live.cn
&lt;/span&gt;-----------------------------------------------------&lt;span&gt;
No.:    &lt;/span&gt;&lt;span&gt;1000005&lt;/span&gt;&lt;span&gt;
name:   Admin5
sex:    boy
age:    &lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;
Email:  admin5@live.cn
&lt;/span&gt;-----------------------------------------------------&lt;span&gt;
No.:    &lt;/span&gt;&lt;span&gt;1000006&lt;/span&gt;&lt;span&gt;
name:   Admin6
sex:    gril
age:    &lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;
Email:  admin6@live.cn　&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;7. 总结&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;minidom.parse(filename)
加载读取XML文件
 
doc.documentElement
获取XML文档对象
 
node.getAttribute(AttributeName)
获取XML节点属性值
 
node.getElementsByTagName(TagName)
获取XML节点对象集合
 
node.childNodes #返回子节点列表。
 
node.childNodes[index].nodeValue
获取XML节点值
 
node.firstChild
#访问第一个节点。等价于pagexml.childNodes[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]
 
doc &lt;/span&gt;=&lt;span&gt; minidom.parse(filename)
doc.toxml(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
返回Node节点的xml表示的文本
 
Node.attributes[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]
a.name #就是上面的 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
a.value #属性的值
访问元素属性&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;shelve中有用的函数就是open(),但是下面编写的数据库函数中调用路径是经常出错，如果直接调用一个从来没有用过的文件却能正常运行，暂时没有找出原因。&lt;/p&gt;
&lt;p&gt;调用shelve.open()会返回一个shelf对象用来存储内容，将它当做一个普通的字典来存储数据（字典的键一定要是字符串），在存储完毕之后要调用close()函数，关闭文件。&lt;/p&gt;
&lt;p&gt;注意为了正确的使用shelve模块修改存储的对象，必须将临时变量绑定到获得的副本上，并且在修改后重新存储这个副本。或者直接将open()中writeback参数设为True。&lt;/p&gt;

&lt;p&gt;下面是利用shelve模块建立的小型数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
 1 #encoding=utf-8
 2 __author__ = 'heng'
 3 #简单的数据库应用程序
 4 
 5 import sys, shelve
 6 
 7 def store_person(db):
 8     &quot;&quot;&quot;
 9     Query user for data and store it in the shelf object
10     &quot;&quot;&quot;
11     pid = raw_input('Enter unique ID number: ')
12     person = {}
13     person['name'] = raw_input('Enter name: ')
14     person['age'] = raw_input('Enter age: ')
15     person['phone'] = raw_input('Enter phone number: ')
16     db[pid] = person
17 
18 def lookup_person(db):
19     &quot;&quot;&quot;
20     Query user for ID and desired field, and fetch the corresponding data from
21     the shelf object
22     &quot;&quot;&quot;
23     pid = raw_input('Enter ID number: ')
24     field = raw_input('What would you like to know? (name, age, phone) ')
25     field = field.strip().lower()
26     print field.capitalize() + ':', \
27         db[pid][field]
28 
29 def print_help():
30     print 'The available commons are: '
31     print 'store  :Stores information about a person'
32     print 'lookup :Looks up a person from ID number'
33     print 'quit   :Save changes and exit'
34     print '?      :Print this message'
35 
36 def enter_command():
37     cmd = raw_input('Enter command (? for help): ')
38     cmd = cmd.strip().lower()
39     return cmd
40 
41 def main():
42     database = shelve.open('testdata.dat')
43     try:
44         while True:
45             cmd = enter_command()
46             if cmd == 'store':
47                 store_person(database)
48             elif cmd == 'lookup':
49                 lookup_person(database)
50             elif cmd == '?':
51                 print_help()
52             elif cmd == 'quit':
53                 return
54     finally:
55         database.close()
56 if __name__ == '__main__': main()
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 11 Apr 2018 07:16:00 +0000</pubDate>
<dc:creator>十三、</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/songxuexiang/p/8745123.html</dc:identifier>
</item>
<item>
<title>MYSQL 面试中 查询系列常考问题 - 大大大温</title>
<link>http://www.cnblogs.com/laowenBlog/p/8795865.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laowenBlog/p/8795865.html</guid>
<description>&lt;h2 id=&quot;section&quot;/&gt;
&lt;h3 id=&quot;表结构&quot;&gt;表结构：&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;`student`（'id'、'name'、'code'、'age'、'sex'）学生表
`teacher`（'id'、'name'）教师表
`course`（'id'、'name'、'teacher_id'）课程表
`score`（'student_id'、'course_id'、'score'）成绩表&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;问题&quot;&gt;问题：&lt;/h3&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/laowenBlog/p/8795865.html#question_1&quot;&gt;1: 查询001课程比002课程成绩高的所有学生的信息&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/laowenBlog/p/8795865.html#question_2&quot;&gt;2: 查询所有课程成绩小于60分的同学的信息名&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/laowenBlog/p/8795865.html#question_3&quot;&gt;3: 查询平均成绩大于60分的同学平均成绩和学生的信息&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/laowenBlog/p/8795865.html#question_4&quot;&gt;4: 查询所有同学的信息、选课数、总成绩&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/laowenBlog/p/8795865.html#question_5&quot;&gt;5: 查询没学过 “叶平老师” 课的同学的信息&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/laowenBlog/p/8795865.html#question_6&quot;&gt;6: 查询学过“001”并且也学过编号“002”课程的同学的信息&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/laowenBlog/p/8795865.html#question_7&quot;&gt;7: 查询没有学全所有课的同学的信息&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/laowenBlog/p/8795865.html#question_8&quot;&gt;8: 查询至少有一门课与学号为“1001”的同学所学相同同学的信息&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/laowenBlog/p/8795865.html#question_9&quot;&gt;9: 查询至少学过学号为1001的同学所有课程的 其他同学的信息&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/laowenBlog/p/8795865.html#question_10&quot;&gt;10: 把“score”表中“叶平老师”教的课的成绩都更改为此课程的平均成绩&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;解决&quot;&gt;解决：&lt;/h3&gt;
&lt;h5 id=&quot;创建表&quot;&gt;创建表&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;CREATE TABLE `student` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(30) DEFAULT NULL,
  `code` varchar(15) DEFAULT NULL,
  `age` int(11) DEFAULT NULL,
  `sex` int(11) DEFAULT '1' COMMENT '1 男 2 女',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;


CREATE TABLE `teacher` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(30) DEFAULT '' COMMENT '老师名',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;


CREATE TABLE `course` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(30) DEFAULT NULL COMMENT '课程名',
  `teache_id` int(11) DEFAULT NULL COMMENT '教师ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;


CREATE TABLE `score` (
  `student_id` int(11) DEFAULT NULL COMMENT '学生ID',
  `course_id` int(11) DEFAULT NULL COMMENT '课程ID',
  `score` int(11) DEFAULT NULL COMMENT '成绩'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;问题1-查询001课程比002课程成绩高的所有学生的信息&quot;&gt;&lt;a id=&quot;question_1&quot;&gt;问题1: 查询001课程比002课程成绩高的所有学生的信息;&lt;/a&gt;&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;SELECT st.* FROM student st WHERE ( SELECT sc.`score` FROM score sc LEFT JOIN `course` co ON co.`id`=sc.`course_id` WHERE st.`id` = sc.`student_id` AND co.`name` = '001' ) &amp;gt; ( SELECT sc.`score` FROM score sc LEFT JOIN `course` co ON co.`id`=sc.`course_id` WHERE st.`id` = sc.`student_id` AND co.`name` = '002' );&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;p&gt;1: 按题意理解、写的如下SQL&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT st.* FROM student st WHERE ( ) &amp;gt; ( );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 获取指定ID的学生的001课程的成绩&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;score&lt;/code&gt; FROM score sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt;=sc.&lt;code&gt;course_id&lt;/code&gt; WHERE [指定ID] = sc.&lt;code&gt;student_id&lt;/code&gt; AND co.&lt;code&gt;name&lt;/code&gt; = '001';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3: 获取指定ID的学生的002课程的成绩&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;score&lt;/code&gt; FROM score sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt;=sc.&lt;code&gt;course_id&lt;/code&gt; WHERE [指定ID] = sc.&lt;code&gt;student_id&lt;/code&gt; AND co.&lt;code&gt;name&lt;/code&gt; = '002';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4: 组装SQL&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;SELECT st.* FROM student st WHERE ( SELECT sc.&lt;code&gt;score&lt;/code&gt; FROM score sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt;=sc.&lt;code&gt;course_id&lt;/code&gt; WHERE st.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;student_id&lt;/code&gt; AND co.&lt;code&gt;name&lt;/code&gt; = '001' ) &amp;gt; ( SELECT sc.&lt;code&gt;score&lt;/code&gt; FROM score sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt;=sc.&lt;code&gt;course_id&lt;/code&gt; WHERE st.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;student_id&lt;/code&gt; AND co.&lt;code&gt;name&lt;/code&gt; = '002' );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;问题2-查询所有课程成绩小于60分的同学的信息&quot;&gt;&lt;a id=&quot;question_2&quot;&gt;问题2: 查询所有课程成绩小于60分的同学的信息;&lt;/a&gt;&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;SELECT st.* FROM `student` st WHERE st.id NOT IN ( SELECT sc.`student_id` FROM `score` sc WHERE sc.`score` &amp;gt; 60 );&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;10.5&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;p&gt;1: 先是获取成绩大于60的同学 (题意是所有成绩都小于60的才符合、那么排除只要有一门成绩大于60的即可)&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;score&lt;/code&gt; &amp;gt; 60;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 然后获取剩余的学生信息（通过NOT IN）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT st.* FROM &lt;code&gt;student&lt;/code&gt; st WHERE st.&lt;code&gt;id&lt;/code&gt; NOT IN ( SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;score&lt;/code&gt; &amp;gt; 60 );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;问题3-查询平均成绩大于60分的同学的学号和平均成绩和学生的信息&quot;&gt;&lt;a id=&quot;question_3&quot;&gt;问题3: 查询平均成绩大于60分的同学的学号和平均成绩和学生的信息;&lt;/a&gt;&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;SELECT st.*,AVG( sc.`score`) as AvgScore  FROM `score` sc LEFT JOIN student st ON st.`id` = sc.`student_id` GROUP BY sc.`student_id` HAVING AVG( sc.`score` ) &amp;gt; 60;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;HAVING 应用与对 where 和 group by 查询出来的分组进行过滤、查询出满足条件的分组结果。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;1&amp;gt; having 只能应用与 group by（分组统计语句中）&lt;br/&gt;2&amp;gt; where 是用于在初始表中筛选查询，having用于在where和group by 结果分组中查询&lt;br/&gt;3&amp;gt; having 子句中的每一个元素也必须出现在select列表中&lt;br/&gt;4&amp;gt; having语句可以使用聚合函数，而where不使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;问题4-查询所有同学的信息选课数总成绩&quot;&gt;&lt;a id=&quot;question_4&quot;&gt;问题4: 查询所有同学的信息、选课数、总成绩;&lt;/a&gt;&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;SELECT st.*,(SELECT COUNT( sc.`course_id`) FROM `score` sc WHERE sc.`student_id` = st.`id` ) courseNum, (SELECT SUM(sc.`score`) FROM `score` sc WHERE sc.`student_id` = st.`id`) scoreNum FROM student st;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;14.5&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;p&gt;1: 获取所有同学的信息&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT st.* FROM student st;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 获取选课数（ 每一个同学都是一个特定的ID）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT COUNT( sc.&lt;code&gt;course_id&lt;/code&gt;) FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = [特定ID];&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3: 获取总成绩（每一个同学的）&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT SUM(sc.&lt;code&gt;score&lt;/code&gt;) FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = [特定ID];&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4: 组装SQL&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;SELECT st.*,(SELECT COUNT( sc.&lt;code&gt;course_id&lt;/code&gt;) FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; ) courseNum, (SELECT SUM(sc.&lt;code&gt;score&lt;/code&gt;) FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt;) scoreNum FROM student st;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;问题5-查询没学过-叶平老师-课的同学信息&quot;&gt;&lt;a id=&quot;question_5&quot;&gt;问题5: 查询没学过 “叶平老师” 课的同学信息&lt;/a&gt;&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;SELECT st.* FROM `student` st WHERE st.`id` NOT IN ( SELECT sc.`student_id` FROM `score` sc LEFT JOIN `course` co ON co.`id` = sc.`course_id` LEFT JOIN `teacher` te ON te.`id` = co.`teache_id` WHERE te.`name` = '叶平老师' );&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;10.5&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;p&gt;1: 根据题意、取反、先获取学过“叶平老师”课的同学&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; LEFT JOIN &lt;code&gt;teacher&lt;/code&gt; te ON te.&lt;code&gt;id&lt;/code&gt; = co.&lt;code&gt;teache_id&lt;/code&gt; WHERE te.&lt;code&gt;name&lt;/code&gt; = '叶平老师';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 然后在取反、获取剩余的学生信息即可&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;SELECT st.* FROM &lt;code&gt;student&lt;/code&gt; st WHERE st.&lt;code&gt;id&lt;/code&gt; NOT IN ( SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; LEFT JOIN &lt;code&gt;teacher&lt;/code&gt; te ON te.&lt;code&gt;id&lt;/code&gt; = co.&lt;code&gt;teache_id&lt;/code&gt; WHERE te.&lt;code&gt;name&lt;/code&gt; = '叶平老师' );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;问题6-查询学过001也学过编号002课程的同学信息&quot;&gt;&lt;a id=&quot;question_6&quot;&gt;问题6: 查询学过“001”也学过编号“002”课程的同学信息&lt;/a&gt;&lt;/h5&gt;
&lt;h6 id=&quot;解决方法1&quot;&gt;解决方法1:&lt;/h6&gt;
&lt;pre&gt;
&lt;code&gt;SELECT st.* FROM `student` st WHERE (SELECT count(*) FROM `score` sc LEFT JOIN `course` co ON co.`id` = sc.`course_id` WHERE sc.`student_id` = st.`id` AND co.`name` = '001') &amp;gt; 0 AND (SELECT count(*) FROM `score` sc LEFT JOIN `course` co ON co.`id` = sc.`course_id` WHERE sc.`student_id` = st.`id` AND co.`name` = '002') &amp;gt; 0;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;p&gt;1: 统计某一学生是否学过 001 课程的信息&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT count(*) FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = [特定ID] AND co.&lt;code&gt;name&lt;/code&gt; = '001';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 统计某一学生是否学过 002 课程的信息&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT count(*) FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = [特定ID] AND co.&lt;code&gt;name&lt;/code&gt; = '002';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3: 直接获取 条件1 和 条件2 同时成立的数据&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;SELECT st.* FROM &lt;code&gt;student&lt;/code&gt; st WHERE (SELECT count(&lt;em&gt;) FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; AND co.&lt;code&gt;name&lt;/code&gt; = '001') &amp;gt; 0 AND (SELECT count(&lt;/em&gt;) FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; AND co.&lt;code&gt;name&lt;/code&gt; = '002') &amp;gt; 0;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;解决方法2&quot;&gt;解决方法2:&lt;/h6&gt;
&lt;pre&gt;
&lt;code&gt;SELECT * FROM `student` st WHERE st.`id` IN ( SELECT st1.student_id FROM ( SELECT sc.`student_id` FROM `score` sc LEFT JOIN `course` co ON co.`id` = sc.`course_id` WHERE co.`name` = '001' ) st1,( SELECT sc.`student_id` FROM `score` sc LEFT JOIN `course` co ON co.`id` = sc.`course_id` WHERE co.`name` = '002' )st2 WHERE st1.`student_id` = st2.`student_id` );

或者

SELECT st.* FROM `student` st,(SELECT st1.student_id FROM ( SELECT sc.`student_id` FROM `score` sc LEFT JOIN `course` co ON co.`id` = sc.`course_id` WHERE co.`name` = '001' ) st1,( SELECT sc.`student_id` FROM `score` sc LEFT JOIN `course` co ON co.`id` = sc.`course_id` WHERE co.`name` = '002' )st2 WHERE st1.`student_id` = st2.`student_id`) st3 WHERE st3.`student_id`= st.`id`;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;20.5&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;p&gt;1: 获取学过 001 课程的学生ID&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE co.&lt;code&gt;name&lt;/code&gt; = '001';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 获取学过 001 课程的学生ID&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE co.&lt;code&gt;name&lt;/code&gt; = '002'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3: 获取即学过 001 又学过 002 课程的学生ID&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;SELECT st1.student_id FROM ( SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE co.&lt;code&gt;name&lt;/code&gt; = '001' ) st1, ( SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE co.&lt;code&gt;name&lt;/code&gt; = '002' ) st2 WHERE st1.&lt;code&gt;student_id&lt;/code&gt; = st2.&lt;code&gt;student_id&lt;/code&gt;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4:根据学生ID获取学生信息（可以有多种写法）&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;-- IN 写法：&lt;br/&gt;SELECT * FROM &lt;code&gt;student&lt;/code&gt; st WHERE st.&lt;code&gt;id&lt;/code&gt; IN ( SELECT st1.student_id FROM ( SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE co.&lt;code&gt;name&lt;/code&gt; = '001' ) st1,( SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE co.&lt;code&gt;name&lt;/code&gt; = '002' )st2 WHERE st1.&lt;code&gt;student_id&lt;/code&gt; = st2.&lt;code&gt;student_id&lt;/code&gt; );&lt;br/&gt;-- 把结果当作一个表、起别名再去查询：&lt;br/&gt;SELECT st.* FROM &lt;code&gt;student&lt;/code&gt; st,(SELECT st1.student_id FROM ( SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE co.&lt;code&gt;name&lt;/code&gt; = '001' ) st1,( SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; WHERE co.&lt;code&gt;name&lt;/code&gt; = '002' )st2 WHERE st1.&lt;code&gt;student_id&lt;/code&gt; = st2.&lt;code&gt;student_id&lt;/code&gt;) st3 WHERE st3.&lt;code&gt;student_id&lt;/code&gt;= st.&lt;code&gt;id&lt;/code&gt;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;问题7-查询没有学全所有课的同学的信息&quot;&gt;&lt;a id=&quot;question_7&quot;&gt;问题7: 查询没有学全所有课的同学的信息&lt;/a&gt;&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;SELECT st.* FROM `student` st WHERE (SELECT count(*) FROM `score` sc WHERE sc.`student_id` = st.`id`) &amp;lt; (SELECT count(*) FROM `course`);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;13.5&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;p&gt;1: 获取课的总数;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT count(*) FROM &lt;code&gt;course&lt;/code&gt;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 获取每个人的学习的课的总数;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT count(*) FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = [特定ID];&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3: 然后查询的是 没有学全所有课的学生、也就是学习的课数小于总课数&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;(SELECT count(* ) FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = [特定ID]) &amp;lt; (SELECT count(*) FROM &lt;code&gt;course&lt;/code&gt; );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4:获取学生的所有信息、组合sql 如下：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT st.* FROM &lt;code&gt;student&lt;/code&gt; st WHERE (SELECT count(* ) FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt;) &amp;lt; (SELECT count(*) FROM &lt;code&gt;course&lt;/code&gt;);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;问题8-查询至少有一门课与学号为1001的同学所学相同同学的信息&quot;&gt;&lt;a id=&quot;question_8&quot;&gt;问题8: 查询至少有一门课与学号为1001的同学所学相同同学的信息&lt;/a&gt;&lt;/h5&gt;
&lt;h6 id=&quot;解决方法-1&quot;&gt;解决方法 1:&lt;/h6&gt;
&lt;pre&gt;
&lt;code&gt;SELECT DISTINCT st.* FROM `student` st INNER JOIN `score` sc ON sc.`student_id` = st.`id` WHERE sc.`course_id` IN ( SELECT sc.`course_id` FROM `student` st LEFT JOIN `score` sc ON sc.`student_id` = st.`id` WHERE st.`code` = '1001' );&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;先获取到学号为1001同学的所有学习课程、然后根据获取的课程ID去查所有的学生信息、然后 DISTINCT 去重即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1: 先获取到学号为1001同学的所有学习课程;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;course_id&lt;/code&gt; FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 然后根据获取的课程ID去查所有的学生信息、同时去重即可;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;SELECT DISTINCT st.* FROM &lt;code&gt;student&lt;/code&gt; st INNER JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE sc.&lt;code&gt;course_id&lt;/code&gt; IN ( SELECT sc.&lt;code&gt;course_id&lt;/code&gt; FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001' );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;解决方法-2&quot;&gt;解决方法 2:&lt;/h6&gt;
&lt;pre&gt;
&lt;code&gt;SELECT st.* FROM `student` st WHERE st.`id` IN (  SELECT DISTINCT sc.`student_id` FROM `score` sc WHERE sc.`course_id` IN ( SELECT sc.`course_id` FROM `student` st LEFT JOIN `score` sc ON sc.`student_id` = st.`id` WHERE st.`code` = '1001' ) );&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;15.5&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;先获取学号为1001学生的课程、然后根据获取到课程ID获取学生ID、然后去重、然后获取学生信息。(嵌套子查询）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1: 先获取到学号为1001同学的所有学习课程;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;course_id&lt;/code&gt; FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 然后根据获取到课程ID获取学生ID;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT DISTINCT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;course_id&lt;/code&gt; IN ( SELECT sc.&lt;code&gt;course_id&lt;/code&gt; FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001' );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3: 然后获取学生信息&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;SELECT st.* FROM &lt;code&gt;student&lt;/code&gt; st WHERE st.&lt;code&gt;id&lt;/code&gt; IN ( SELECT DISTINCT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;course_id&lt;/code&gt; IN ( SELECT sc.&lt;code&gt;course_id&lt;/code&gt; FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001' ) );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;问题9-查询至少学过学号为1001的同学所有课程的-其他同学的信息&quot;&gt;&lt;a id=&quot;question_9&quot;&gt;问题9: 查询至少学过学号为1001的同学所有课程的 其他同学的信息&lt;/a&gt;&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;SELECT st.* FROM `student` st WHERE st.`id` IN ( SELECT sc1.`student_id` FROM ( SELECT sc.* FROM `score` sc WHERE sc.`course_id` IN ( SELECT sc.`course_id` FROM `student` st LEFT JOIN `score` sc ON sc.`student_id` = st.`id` WHERE st.`code` = '1001' ) ) sc1 GROUP BY sc1.`student_id` HAVING COUNT(*) = ( SELECT COUNT(*) FROM `student` st LEFT JOIN `score` sc ON sc.`student_id` = st.`id` WHERE st.`code` = '1001' ) );&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;24&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;p&gt;1: 获取学号为 1001 的同学的所有课程ID;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;course_id&lt;/code&gt; FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 获取对应课程的所有学习同学的ID、并且分组;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;course_id&lt;/code&gt; IN ( SELECT sc.&lt;code&gt;course_id&lt;/code&gt; FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001' ) GROUP BY sc.&lt;code&gt;student_id&lt;/code&gt;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;到此为止发现问题：只学了其中一门的也被查询出来了、应该去掉.&lt;/p&gt;
&lt;p&gt;3: 获取学号为 1001 的同学所学课程数量&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;SELECT COUNT(*) FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001';&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4: 所以所有的符合条件的学生的ID集为:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;course_id&lt;/code&gt; IN ( SELECT sc.&lt;code&gt;course_id&lt;/code&gt; FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001' ) GROUP BY sc.&lt;code&gt;student_id&lt;/code&gt; HAVING COUNT(&lt;em&gt;) = ( SELECT COUNT(&lt;/em&gt;) FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001' );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5: 组装SQL、查询学生信息。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;SELECT st.* FROM &lt;code&gt;student&lt;/code&gt; st WHERE st.&lt;code&gt;id&lt;/code&gt; IN ( SELECT sc.&lt;code&gt;student_id&lt;/code&gt; FROM &lt;code&gt;score&lt;/code&gt; sc WHERE sc.&lt;code&gt;course_id&lt;/code&gt; IN ( SELECT sc.&lt;code&gt;course_id&lt;/code&gt; FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001' ) GROUP BY sc.&lt;code&gt;student_id&lt;/code&gt; HAVING COUNT(&lt;em&gt;) = ( SELECT COUNT(&lt;/em&gt;) FROM &lt;code&gt;student&lt;/code&gt; st LEFT JOIN &lt;code&gt;score&lt;/code&gt; sc ON sc.&lt;code&gt;student_id&lt;/code&gt; = st.&lt;code&gt;id&lt;/code&gt; WHERE st.&lt;code&gt;code&lt;/code&gt; = '1001' ) );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;问题10-把score表中叶平老师教的课的成绩都更改为此课程的平均成绩&quot;&gt;&lt;a id=&quot;question_10&quot;&gt;问题10: 把“score”表中“叶平老师”教的课的成绩都更改为此课程的平均成绩&lt;/a&gt;&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;UPDATE `score` sc SET sc.`score` = ( SELECT AVG(sc1.`score`) avgScore FROM (SELECT sc.* FROM `score` sc LEFT JOIN `course` co ON co.`id` = sc.`course_id` LEFT JOIN `teacher` te ON te.`id` = co.`teache_id` WHERE te.`name` = '叶平老师' ) sc1 ) WHERE sc.`course_id` = ( SELECT co.`id` FROM `course` co LEFT JOIN `teacher` te ON te.`id` = co.`teache_id` WHERE te.`name` = '叶平老师' );&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;19&quot;&gt;
&lt;p&gt;分解:&lt;/p&gt;
&lt;p&gt;1: 理解为修改特定ID的数据&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;UPDATE &lt;code&gt;score&lt;/code&gt; sc SET sc.&lt;code&gt;score&lt;/code&gt; = () WHERE sc.&lt;code&gt;course_id&lt;/code&gt; = ();&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2: 要修改的数据（ 获取“score”表中“叶平老师”教的课的成绩）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT sc.* FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; LEFT JOIN &lt;code&gt;teacher&lt;/code&gt; te ON te.&lt;code&gt;id&lt;/code&gt; = co.&lt;code&gt;teache_id&lt;/code&gt; WHERE te.&lt;code&gt;name&lt;/code&gt; = '叶平老师'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3: 确定要修改的值（获取要修改的数据的平均值）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT AVG(sc1.&lt;code&gt;score&lt;/code&gt;) avgScore FROM (SELECT sc.* FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; LEFT JOIN &lt;code&gt;teacher&lt;/code&gt; te ON te.&lt;code&gt;id&lt;/code&gt; = co.&lt;code&gt;teache_id&lt;/code&gt; WHERE te.&lt;code&gt;name&lt;/code&gt; = '叶平老师' ) sc1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4: 确定修改的条件（获取叶平老师所带课程的ID）&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;SELECT co.* FROM &lt;code&gt;course&lt;/code&gt; co LEFT JOIN &lt;code&gt;teacher&lt;/code&gt; te ON te.&lt;code&gt;id&lt;/code&gt; = co.&lt;code&gt;teache_id&lt;/code&gt; WHERE te.&lt;code&gt;name&lt;/code&gt; = '叶平老师'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5: 组装SQL即可&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;UPDATE &lt;code&gt;score&lt;/code&gt; sc SET sc.&lt;code&gt;score&lt;/code&gt; = ( SELECT AVG(sc1.&lt;code&gt;score&lt;/code&gt;) avgScore FROM (SELECT sc.* FROM &lt;code&gt;score&lt;/code&gt; sc LEFT JOIN &lt;code&gt;course&lt;/code&gt; co ON co.&lt;code&gt;id&lt;/code&gt; = sc.&lt;code&gt;course_id&lt;/code&gt; LEFT JOIN &lt;code&gt;teacher&lt;/code&gt; te ON te.&lt;code&gt;id&lt;/code&gt; = co.&lt;code&gt;teache_id&lt;/code&gt; WHERE te.&lt;code&gt;name&lt;/code&gt; = '叶平老师' ) sc1 ) WHERE sc.&lt;code&gt;course_id&lt;/code&gt; = ( SELECT co.&lt;code&gt;id&lt;/code&gt; FROM &lt;code&gt;course&lt;/code&gt; co LEFT JOIN &lt;code&gt;teacher&lt;/code&gt; te ON te.&lt;code&gt;id&lt;/code&gt; = co.&lt;code&gt;teache_id&lt;/code&gt; WHERE te.&lt;code&gt;name&lt;/code&gt; = '叶平老师' );&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 11 Apr 2018 07:10:00 +0000</pubDate>
<dc:creator>大大大温</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laowenBlog/p/8795865.html</dc:identifier>
</item>
<item>
<title>访问权限控制 - 一只黑色的猫</title>
<link>http://www.cnblogs.com/yangming1996/p/8795848.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangming1996/p/8795848.html</guid>
<description>&lt;p&gt;访问权限控制又称「隐藏具体实现」，也就是说，我们可以通过它来决定某个类或者类中的成员在程序中的可见范围。例如，被修饰为 public 的元素在全局范围可见，而被修饰为 private 的元素只能可见于类的内部。&lt;/p&gt;
&lt;p&gt;Java 的访问权限控制提供了四种不同的访问权限限定词，用于描述元素在程序中的可见范围。下面我们具体来看一看：&lt;/p&gt;
&lt;h3 id=&quot;包的概念&quot;&gt;包的概念&lt;/h3&gt;
&lt;p&gt;Java 中最基本的文件单位就是类，每个类文件的文件名不允许重复，以保证类的唯一确定性，但是 Java 中有着成千上万的类，每新建一个类就需要定义一个与之前所有类不同的类名，想必光是找到一个不重复并且有点象征意义的名称就已经弹尽援绝了。&lt;/p&gt;
&lt;p&gt;Java 引入包管理机制以解决这个问题，将一部分类圈到一起放入一个「文件夹」中，于是即便不同的文件夹下有着相同类名的类也不会构成冲突，大大降低了类的命名冲突概率。而这里所谓的「文件夹」官方点说，就是包。&lt;/p&gt;
&lt;p&gt;而每个类都应该位于一个包下，每当新建一个类的时候，系统就将检索&lt;strong&gt;当前包&lt;/strong&gt;下是否具有重名的类，而不再检索整个类路径。&lt;/p&gt;
&lt;p&gt;有了包之后，对于类的定位与引用也发生了变化，一般需要使用「全限定类名」进行唯一确定。例如：java.lang.String，java.util.Date 等&lt;/p&gt;
&lt;p&gt;其实对于包的命名并没有明确的约束，只是有一个不成文的惯例：&lt;strong&gt;包名称一般由一个域名的逆向顺序构成&lt;/strong&gt;。例如：com.baidu.Test，net.csdn.Date 等。因为一般域名是唯一不重复的，所以利用域名来命名包的确实一个很好的策略。&lt;/p&gt;
&lt;p&gt;所以 import 的作用很简单，就是省略包名，减少不必要的重复。不过它不是万能的，如果你要在一个 Java 文件中同时使用 java.util.Date 和 java.sql.Date 的话，那么 import 就只能适用其中的一个，另一个你还得用完整的类名。&lt;/p&gt;
&lt;h3 id=&quot;类的访问修饰符&quot;&gt;类的访问修饰符&lt;/h3&gt;
&lt;p&gt;对于类而言，Java 只允许使用两种访问权限限定符进行修饰。（内部类除外）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;public：被 public 修饰的类，于全局任何位置都是可见的&lt;/li&gt;
&lt;li&gt;默认修饰符：默认修饰符是没有具体的关键字对应的，只要你 Class 之前没有修饰符，就使用默认的修饰符，该修饰符指定类于包范围内可见&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//创建一个类，位于包 Class_AccessModefier 下
package Class_AccessModefier;

public class PublicClass {

}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//相同包的其他位置是可以访问的
package Class_AccessModefier;

public class Test {
    public static void main(String[] args){
        PublicClass publicClass = new PublicClass();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//不同包下的其他位置也是可以访问的
package Others;

import Class_AccessModefier.PublicClass;

public class Test {
    public static void main(String[] args){
        PublicClass publicClass = new PublicClass();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显然，一旦将一个类声明为 public，那么该类将在整个 Java 程序的任何位置可见。&lt;/p&gt;
&lt;p&gt;再看一段代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package Class_AccessModefier;

class DefaultClass {
    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//同包下的其他位置对于该类是可见的
package Class_AccessModefier;

public class Test {
    public static void main(String[] args){
        DefaultClass defaultClass = new DefaultClass();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//不同包下无法访问类
package Others;

public class Test {
    public static void main(String[] args){
        //编译器找不到该类
        DefaultClass defaultClass = new DefaultClass();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里我们讨论的都是外部类，并不包含内部类，外部类只允许使用 public 和默认修饰符对类进行访问限定，而内部类会宽泛很多，我们以后再做详细描述。&lt;/p&gt;
&lt;h3 id=&quot;类成员的访问修饰符&quot;&gt;类成员的访问修饰符&lt;/h3&gt;
&lt;p&gt;类成员包括类的字段属性和方法，针对它们，Java 中提供了四种不同的限定符限制可见范围。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;public：被 public 修饰的方法或属性，可见性最高，于任何地方可访问&lt;/li&gt;
&lt;li&gt;protected：被 protected 修饰的方法或属性，首先是包范围内可见，并且还允许不在同一个包的子类访问，也就是可以被子类继承过去&lt;/li&gt;
&lt;li&gt;默认：默认修饰符修饰的方法或属性对于同包下的任何位置是可见的&lt;/li&gt;
&lt;li&gt;private：外部不可访问，但是该类的内部是可以访问的&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们看一些代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//我们定义了四个成员属性，并且具有不同的可见性
public class PublicClass {
    public String name = &quot;hello world&quot;;
    protected String sex = &quot;man&quot;;
    int age = 23;
    private String tel = &quot;3234234234&quot;;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//相同包下的访问情况
package Member_AccessModefier;

public class Test {
    public static void main(String[] args){
        PublicClass publicClass = new PublicClass();
        System.out.println(publicClass.name);
        System.out.println(publicClass.age);
        System.out.println(publicClass.sex);
        //编译器报错，不可访问的 tel 属性
        System.out.println(publicClass.tel);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;public 修饰的属性于任何位置都是可见的，这不用多说。&lt;/p&gt;
&lt;p&gt;protected 修饰的 sex 也是可以访问的，原因是我们的 main 函数的 PublicClass 类位于同一个包下，所以自然是可访问的&lt;/p&gt;
&lt;p&gt;未加修饰符的 age 属性也是能够被访问的，也是因为 main 函数的 PublicClass 类位于同一个包下&lt;/p&gt;
&lt;p&gt;而 private 修饰的 tel 属性则不可见，说明 private 不允许外部的任何位置访问该属性，即便你是我的子类也不行&lt;/p&gt;
&lt;p&gt;而同样的代码，我们置放于另一个包中，结果就是不同的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package Others;

import Member_AccessModefier.PublicClass;

public class Test {
    public static void main(String[] args){
        PublicClass publicClass = new PublicClass();
        System.out.println(publicClass.name);
        //编译器报错，不可访问的 age 属性
        System.out.println(publicClass.age);
        //编译器报错，不可访问的 sex 属性
        System.out.println(publicClass.sex);
        //编译器报错，不可访问的 tel 属性
        System.out.println(publicClass.tel);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只有被修饰为 public 的 name 属性是可见的，其他都不可访问。&lt;/p&gt;
&lt;p&gt;age 是默认修饰符修饰的，包可见范围，出了包范围即刻不可访问。&lt;/p&gt;
&lt;p&gt;sex 是 protected 修饰的，既超出了包的范围，又没有继承目标类，所以不可见。&lt;/p&gt;
&lt;p&gt;private 不用说，任何外部位置都不可见。&lt;/p&gt;
&lt;p&gt;这里，一旦我们 Test 类继承了 PublicClass ，那么 sex 属性即刻变为可以访问，大家可以试试看。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;文章中的所有代码、图片、文件都云存储在我的 GitHub 上：&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;https://github.com/SingleYam/overview_java&quot; class=&quot;uri&quot;&gt;https://github.com/SingleYam/overview_java&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;欢迎关注微信公众号：扑在代码上的高尔基，所有文章都将同步在公众号上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180305113628126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 11 Apr 2018 07:08:00 +0000</pubDate>
<dc:creator>一只黑色的猫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangming1996/p/8795848.html</dc:identifier>
</item>
<item>
<title>Centos6.9minimal安装图形化界面 - 渣渣辉</title>
<link>http://www.cnblogs.com/Dev0ps/p/8795809.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Dev0ps/p/8795809.html</guid>
<description>&lt;p&gt;有时我们会用到图形化界面来操作，下面介绍是在虚拟机上安装Centos6.9minimal版安装图形化界面（其他系统版本都类似吧，，，），如果是在物理机上安装进入的话要用的远程桌面工具VNC。&lt;/p&gt;
&lt;p&gt;VNC安装详情：https://www.cnblogs.com/Dev0ps/p/7921056.html&lt;/p&gt;
&lt;p&gt;安装步骤如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、安装Desktop组&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@oracle ~]# yum groupinstall &quot;Desktop&quot; -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、安装 X Window System&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@oracle ~]# yum groupinstall &quot;X Window System&quot; -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3、安装中文支持（可选）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@oracle ~]#  yum groupinstall &quot;Chinese Support&quot; -y
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;4、运行级别改为5&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@oracle ~]# tail -1 /etc/inittab 
id:5:initdefault:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;5、重启系统&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@oracle ~]# reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 重新启动就会出现图形化界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1271786/201804/1271786-20180411150003122-1675459368.png&quot; alt=&quot;&quot; width=&quot;759&quot; height=&quot;543&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 11 Apr 2018 07:02:00 +0000</pubDate>
<dc:creator>渣渣辉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Dev0ps/p/8795809.html</dc:identifier>
</item>
<item>
<title>其实你并不懂如何定义一个 PHP 函数 - Summer2018</title>
<link>http://www.cnblogs.com/summerblue/p/8795463.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/summerblue/p/8795463.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/162383/201804/162383-20180411142307440-733633214.jpg&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php
function divide($dividend, $divisor){
    return $dividend / $divisor;
}
echo divide(12, 4);
echo divide('sa', 'sd');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码乍一看没毛病，但是如果你向它传递「任意」参数，它就会出问题。&lt;/p&gt;
&lt;p&gt;写出好的代码是一个学无止境的过程。让我们来改进我们编写 PHP 函数的方式。 看下上面的代码，想想第二个函数调用那里会发生什么情况？ 它会接受你输入的任何参数，并且尝试执行然后抛出一个数学错误。 但是我们怎么才能让一个函数严格接收能使其正确执行的参数呢？ 现代的 PHP 解决了这个问题，并且有更多妙法能让你的代码质量更进一层，没有 bug。&lt;/p&gt;
&lt;h4 id=&quot;函数参数与它们的数据类型&quot;&gt;函数参数与它们的数据类型&lt;/h4&gt;
&lt;p&gt;你可以严格控制你的函数，使其只接收让它正确运行的参数。让我们改变上面的函数定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php
function divide(int $dividend, int $divisor){
    return $dividend / $divisor;
}
echo divide(12, 4);
echo divide('sa', 'sd');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在，第二次调用这个函数将会抛出一个致命错误，指出其需要的参数必须是整数类型。你可以用不同的方式处理参数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php
// 可选参数
function getName(string $firstName, string $lastName = ''){
    return $firstName . ' ' . $lastName;
}
echo getName('Muhammad', 'Nauman'); // Muhammad Nauman
echo getName('Adam'); // Adam
function divide(int $dividend, int $divisor = 2){
      return $dividend / $divisor;
}
echo divide(12, 4); // 3
echo divide(12); // 6
// 仅接收 Request 类的实例参数 $request
function getReuestParams(Request $request){
    return $request-&amp;gt;only('name', 'email');
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在定义的时候，将可选参数或带默认值的参数作为最后一个参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PHP 7.1 也给可迭代数据介绍了一种伪类型。它能接收任何可迭代的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lccdn.phphub.org/uploads/images/201804/09/1/MfygJggsmF.png?imageView2/2/w/1240/h/0&quot; alt=&quot;file&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是使用了 &lt;code&gt;iterable&lt;/code&gt; 数据类型的函数。&lt;/p&gt;
&lt;p&gt;现在通过代码，我们可以控制的更多了，不是吗？没错，确实如此！&lt;/p&gt;
&lt;h4 id=&quot;函数与它们的返回值&quot;&gt;函数与它们的返回值&lt;/h4&gt;
&lt;p&gt;正如你可以控制传递给指定函数的参数类型一样，你也可以控制函数的返回值类型。它能确保你的函数总是返回同一个数据类型，并且不会崩溃。我们改变一下上面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php
// 可选参数
function getName(string $firstName, string $lastName = '') : string {
    return $firstName . ' ' . $lastName;
}
echo getName('Muhammad', 'Nauman'); // Muhammad Nauman
echo getName('Adam'); // Adam
function divide(int $dividend, int $divisor = 2) : int {
      return $dividend / $divisor;
}
echo divide(12, 4); // 3
echo divide(12); // 6
// 仅接收 Request 类的实例 $request 作为参数
function getReuestParams(Request $request) : array {
    return $request-&amp;gt;only('name', 'email');
}
// 返回 void 类型
$attribute = 2;
function changeAttribute(string &amp;amp;$param, $value) : void {
    $param = $value;
}
changeAttribute($attribute, 5);
echo $attribute; // 5&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PHP 逐渐引入了这些功能，如：5.1 版引入的数组类型作为参数，5.4 版引入的可调用类型（callable type），以及 7.1 版引入的 void 返回类型等。&lt;/p&gt;
&lt;h4 id=&quot;可选参数-vs-可空参数&quot;&gt;可选参数 VS 可空参数&lt;/h4&gt;
&lt;p&gt;除了可选参数外，你还可以定义可空（nullable）参数，这意味着你可以定义一种可空参数类型。我们来看个例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?php
function nullableParameter(?string $name)
{
    return $name;
}
echo nullableParameter(null); // 不会返回任何东西
echo nullableParameter('Nauman'); // Nauman
echo nullableParameter(); // 致命错误
function nullableParameterWithReturnType(?string $name) : string
{
    return $name;
}
echo nullableParameter(null); // 致命错误，必须返回 string 类型
echo nullableParameter('Nauman'); // Nauman
function nullableReturnType(string $name) : ?string
{
    return $name;
}
echo nullableParameter(null); // 致命错误，$name 应该是 string 类型
echo nullableParameter('Nauman'); // Nauman&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显然，可空参数不是可选参数，你必须传递一个值或者是 &lt;code&gt;null&lt;/code&gt;。我个人喜欢使用空值作为可选参数，但这取决于你的任务需求。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;从我开启职业生涯的时候我就使用 PHP 了，我真的很爱这门语言。在过去很长一段时间里，它都是开发 web 应用的不二之选。现在 7.x 版本又填补了许多高级特性和现代化应用的需求，并且提高了开发者的效率。这门语言正不断的发生改变，找出这些变化，并停止过去的写法，放弃你原来的习惯并自豪的使用这些新特性，让你的代码更易读易懂。 Happy coding :)&lt;/p&gt;
&lt;blockquote readability=&quot;3&quot;&gt;
&lt;p&gt;更多现代化 PHP 知识，请前往 &lt;a href=&quot;https://laravel-china.org/topics/9661&quot;&gt;Laravel / PHP 知识社区&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 11 Apr 2018 06:23:00 +0000</pubDate>
<dc:creator>Summer2018</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/summerblue/p/8795463.html</dc:identifier>
</item>
<item>
<title>Spring之AOP编程 - 非洲铜</title>
<link>http://www.cnblogs.com/africancu/p/8795397.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/africancu/p/8795397.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、AOP简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    AOP的英文全称是Aspect Oriented Programming，意为：面向切面编程。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    AOP采取&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;横向抽取的机制，取代了传统&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;纵向继承体系的代码复用。AOP常用于：事务管理，性能监视，安全检查，缓存，日志等。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    Spring AOP使用纯Java实现，在程序运行期间通过代理的方式向目标类织入增强代码。&lt;/p&gt;
&lt;p&gt;    AspectJ是一个基于Java语言的AOP框架，Spring在2.0版本引入了对Aspect的支持，AspectJ扩展了Java语言，提供了一个专门的编译器，在编译期间提供横向代码的织入。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、spring-aop的实现原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    spring-aop的底层采用代理机制进行实现。&lt;/p&gt;
&lt;p&gt;    如果目标类实现了接口，spring默认采用jdk的动态代理；&lt;/p&gt;
&lt;p&gt;    如果目标类没有实现接口，spring默认采用cglib字节码增强。不过，我们可以声明强制使用cglib的代理方式。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、AOP的术语【重要】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    1. target（目标类），需要被代理的类。我们将会用：UserService + UserServiceImpl作为目标类。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    2. joinPoint（连接点），连接点是指那些可能被拦截到的方法。例如：目标类中的所有方法&lt;/p&gt;
&lt;p&gt;    3. pointCut（切入点），已经被增强的连接点。例如：目标类中的addUser()方法。切入点是连接点的一个子集。&lt;/p&gt;
&lt;p&gt;    4. advice（通知 / 增强），增强代码。例如：切面类中的before、after方法。&lt;/p&gt;
&lt;p&gt;    5. weaving（织入），指把通知（advice）应用到目标对象（target）来创建新的代理对象（proxy）的过程。可知，织入是一个过程。&lt;/p&gt;
&lt;p&gt;    6. proxy（代理类）&lt;/p&gt;
&lt;p&gt;    7. aspect（切面），切面是指切入点（pointcut）和通知(advice)的结合。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四、用JDK的动态代理实现AOP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    JDK的动态代理是对装饰者设计模式的简化。使用的前提是目标类必须实现接口。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    用JDK动态代理有三个主要模块需要实现：&lt;/p&gt;
&lt;p&gt;    1. 目标类：接口+实现类（UserService + UserServiceImpl）&lt;/p&gt;
&lt;p&gt;    2. 切面类：切面类用于存放通知（MyAspect）&lt;/p&gt;
&lt;p&gt;    3. 工厂类：工厂类用来生成代理对象&lt;/p&gt;
&lt;p&gt;    4. 测试类&lt;/p&gt;

&lt;div readability=&quot;24.5&quot;&gt;
&lt;p&gt;    下面给出一个JDK动态代理实现AOP的例子&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;1. 目标类（接口+实现类）&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;47&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.service;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; UserService {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addUser();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateUser();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteUser();
}

&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.service;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserService {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addUser() {
        System.out.println(&lt;/span&gt;&quot;addUser...&quot;&lt;span&gt;);
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateUser() {
        System.out.println(&lt;/span&gt;&quot;updateUser...&quot;&lt;span&gt;);
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteUser() {
        System.out.println(&lt;/span&gt;&quot;deleteUser...&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;    2. 切面类&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.aspect;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyAspect {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; before() {
        System.out.println(&lt;/span&gt;&quot;before&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; after() {
        System.out.println(&lt;/span&gt;&quot;after&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;    3. 工厂类&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.factory;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.InvocationHandler;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Proxy;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.aspect.MyAspect;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.service.UserService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.service.UserServiceImpl;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyFactoryBean {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; UserService createService() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1. 目标对象&lt;/span&gt;
        UserService userService = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserServiceImpl();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2. 切面对象&lt;/span&gt;
        MyAspect myAspect = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyAspect();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3. 代理对象&lt;/span&gt;
        UserService proxyService =&lt;span&gt; (UserService) Proxy.newProxyInstance(
                MyFactoryBean.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;.getClassLoader(),
                userService.getClass().getInterfaces(), 
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; InvocationHandler() {
                    @Override
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object invoke(Object proxy, Method method, Object[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前置通知&lt;/span&gt;
&lt;span&gt;                        myAspect.before();
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行目标类的方法&lt;/span&gt;
                        Object object =&lt;span&gt; method.invoke(userService, args);
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;后置通知&lt;/span&gt;
&lt;span&gt;                        myAspect.after();
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
                    }
                });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4. 返回代理对象&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; proxyService;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    我们重点分析工厂类中代理对象的生成：&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;    &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;public &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;static Object newProxyInstance(ClassLoader loader,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;                                          Class&amp;lt;?&amp;gt;[] interfaces,&lt;/p&gt;
&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                                          InvocationHandler h)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;            参数1：loader，类加载器。因为动态代理是在运行时创建代理对象，而任何类都需要类加载器将其加载到内存，所以我们要给将来运行期间产生的这个代理类提供一个类加载器。   一般情况下，使用  当前类.class.getClassLoader()，或者  目标实例.getClass().getClassLoader()；其实他们俩是一个ClassLoader。&lt;/p&gt;
&lt;p&gt;            参数2：&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;interfaces，代理类需要实现的所有接口。有两个方式来提供这些接口：&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                        方式1：目标实例.getClass().getInterfaces()；&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;但是这种方式只能获得自己的接口，不能获得父类的接口。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                     &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;  方式2：new Class[ ] { UserService.class }；这种方式可以获得父类的接口&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;            参数3：&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;InvocationHandler，处理类，这是JDK反射包中提供的接口，里面只有一个invoke方法，&lt;strong&gt;代理类的每一个方法执行时，都将调用一次invoke方法&lt;/strong&gt;。InvocationHandler需要实现，一般采用匿名内部类来实现。&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                        我们在分析这个invoke方法，方法的格式为：&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;public&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; Object invoke(Object &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;proxy&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;, Method &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;method&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;, Object[] &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;args&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;) &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;throws&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; Throwable&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                        参数3.1：proxy，代理对象&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                        参数3.2：method：代理对象当前要执行的方法&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;                        参数3.3：args：要执行的方法的入参&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;    &lt;strong&gt;4. 测试类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div readability=&quot;14.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.factory.MyFactoryBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.service.UserService;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestJdkProxy {
    
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testJdkProxy() {
        UserService userService &lt;/span&gt;=&lt;span&gt; MyFactoryBean.createService();
        userService.addUser();
        System.out.println(&lt;/span&gt;&quot;--------------&quot;&lt;span&gt;);
        userService.updateUser();
        System.out.println(&lt;/span&gt;&quot;--------------&quot;&lt;span&gt;);
        userService.deleteUser();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt; 打印结果：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;21&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1133643/201804/1133643-20180411140244199-434241330.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;五、用CGLIB实现AOP&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;    如果&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;目标类没有实现接口，就无法使用JDK的动态代理来生成代理类，这时候我们采用&lt;strong&gt;纵向继承&lt;/strong&gt;机制来实现目标类的代码增强，这就是cglib要完成的工作。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    cglib代理是在程序运行期间，创建目标类的子类，在子类中对目标类的方法进行增强。&lt;/p&gt;
&lt;p&gt;    cglib有两个jar包依赖：cglib.jar和asm.jar，但这两个jar都已经被整合在spring-core.jar中了。&lt;/p&gt;
&lt;p&gt;    下面我们手动实现一个cglib代理：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    1. 目标类&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;20&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.service;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserServiceImpl {    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addUser() {
        System.out.println(&lt;/span&gt;&quot;addUser...&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateUser() {
        System.out.println(&lt;/span&gt;&quot;updateUser...&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteUser() {
        System.out.println(&lt;/span&gt;&quot;deleteUser...&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;    2. 切面类&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.aspect;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyAspect {    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; before() {
        System.out.println(&lt;/span&gt;&quot;before&quot;&lt;span&gt;);
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; after() {
        System.out.println(&lt;/span&gt;&quot;after&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    &lt;strong&gt;3. 工厂类&lt;/strong&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;                  &lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    采用cglib，底层将创建目标类的子类&lt;/p&gt;
&lt;div readability=&quot;24.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.factory;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cglib.proxy.Enhancer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cglib.proxy.MethodInterceptor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cglib.proxy.MethodProxy;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.aspect.MyAspect;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.service.UserService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.service.UserServiceImpl;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CglibBeanFactory {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; UserService createService() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 目标类&lt;/span&gt;
        UserServiceImpl userService = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserServiceImpl();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 切面类&lt;/span&gt;
        MyAspect myAspect = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyAspect();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1. 核心类&lt;/span&gt;
        Enhancer enhancer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Enhancer();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2. 设置父类&lt;/span&gt;
        enhancer.setSuperclass(UserServiceImpl.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3. 设置回调函数&lt;/span&gt;
        enhancer.setCallback(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MethodInterceptor() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)
                    &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
                myAspect.before();
                Object object &lt;/span&gt;=&lt;span&gt; method.invoke(userService, args);
                myAspect.after();
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
            }
        });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4. 创建代理&lt;/span&gt;
        UserServiceImpl proxyService =&lt;span&gt; (UserServiceImpl) enhancer.create();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; proxyService;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    我们解释一下这个回调函数：&lt;/p&gt;
&lt;p&gt;    MethodInterceptor接口类似于JDK中的InvocationHandler接口，而intercept方法类似于InvocationHandler接口中的invoke方法。&lt;/p&gt;
&lt;p&gt;    前三个参数和invoke方法中的三个参数是一样的。&lt;/p&gt;
&lt;p&gt;    第四个参数methodProxy是方法代理，可以通过它执行代理类的父类，也就是执行目标类。&lt;/p&gt;
&lt;p&gt;    Object object = method.invoke(userService, args) 可以替换成 methodProxy.invokeSuper(proxy, args)，两个效果是一样的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;    4. 测试类&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;13&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.factory.CglibBeanFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.service.UserService;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestCglibProxy {
    
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; demo01() {
        UserService userService &lt;/span&gt;=&lt;span&gt; CglibBeanFactory.createService();
        userService.addUser();
        System.out.println(&lt;/span&gt;&quot;--------------&quot;&lt;span&gt;);
        userService.updateUser();
        System.out.println(&lt;/span&gt;&quot;--------------&quot;&lt;span&gt;);
        userService.deleteUser();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印结果：&lt;/p&gt;
&lt;div readability=&quot;27.5&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1133643/201804/1133643-20180411140816091-1942965552.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;&lt;strong&gt;六、半自动代理实现AOP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    我们之所以称之为半自动代理，是因为Spring自动创建了代理对象，但是却需要我们手动去容器中获取这个代理对象。&lt;/p&gt;
&lt;p&gt;    在实现这个半自动的demo之前，我们首先介绍一下aop联盟（aopalliance）定义的一套通知（advice）接口规范。&lt;/p&gt;

&lt;p&gt;    音乐博士&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;Rod Johnson童鞋在aop联盟的规范里定义了一个空的通知接口Advice：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;37&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.aopalliance.aop;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Tag interface for Advice. Implementations can be any type
 * of advice, such as Interceptors.
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Rod Johnson
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; $Id: Advice.java,v 1.1 2004/03/19 17:02:16 johnsonr Exp $
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; Advice {}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    Spring按照通知在目标类方法上连接点的位置，把通知又分为以下五大接口规范：&lt;/p&gt;
&lt;p&gt;    1. 前置通知：org.springframework.aop.MethodBeforeAdvice&lt;/p&gt;
&lt;p&gt;    2. 后置通知：org.springframework.aop.AfterReturningAdvice&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;  3. 环绕通知：org.aopalliance.intercept.MethodInterceptor&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;        注意环绕通知并不是定义在spring中，而是在aop联盟的规范中。同时也要注意在cglib代理中设置回调函数的时候new了一个org.springframework.cglib.proxy.MethodInterceptor的匿名实现，这是两个不同的MethodInterceptor，注意区分。环绕通知是我们的重点。&lt;/p&gt;
&lt;p&gt;    4. 异常抛出通知：org.springframework.aop.ThrowsAdvice&lt;/p&gt;
&lt;p&gt;    5. 引介通知：org.springframework.aop.IntroductionInterceptor&lt;/p&gt;
&lt;p&gt;        引介通知用来在目标类中添加一些新的属性和方法，但是很少用。&lt;/p&gt;

&lt;p&gt;    我们先模拟一下环绕通知的流程。注意，环绕通知必须手动执行目标方法。&lt;/p&gt;
&lt;div readability=&quot;20&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1. 前置通知
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2. 执行目标方法
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3. 后置通知&lt;/span&gt;
}&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4. 抛出异常通知&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    1,2,3如果有任何一处抛出异常，都会停止后面代码的执行，进入catch块。&lt;/p&gt;
&lt;p&gt;    所以，如果在前置通知中抛出异常，可以阻止目标方法的执行。&lt;/p&gt;
&lt;p&gt;    后置通知是在目标方法执行后执行，所以它可以获得目标方法的返回值。&lt;/p&gt;

&lt;p&gt;    下面我们来实现一个半自动代理的demo：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    1. 目标类&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;19.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.service;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; UserService {
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; addUser();
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateUser();
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteUser();
}

&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.service;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserService {    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addUser() {
        System.out.println(&lt;/span&gt;&quot;addUser...&quot;&lt;span&gt;);
    }    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateUser() {
        System.out.println(&lt;/span&gt;&quot;updateUser...&quot;&lt;span&gt;);
    }    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteUser() {
        System.out.println(&lt;/span&gt;&quot;deleteUser...&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;    2. 切面类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        切面类中装有通知，我们环绕通知为例，所以这个类需要实现环绕通知的接口&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;org.aopalliance.intercept.MethodInterceptor。同时要注意到，环绕通知必须手动执行目标方法。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;30&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.aspect;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aopalliance.intercept.MethodInterceptor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aopalliance.intercept.MethodInvocation;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyAspect &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; MethodInterceptor {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object invoke(MethodInvocation invocation) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 前置通知&lt;/span&gt;
        System.out.println(&quot;before&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 手动执行目标方法，这是一个放行方法&lt;/span&gt;
        Object object =&lt;span&gt; invocation.proceed();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 后置通知&lt;/span&gt;
        System.out.println(&quot;after&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;    3. bean-aop.xml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 1. 目标类 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;userService&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;cn.african.service.UserServiceImpl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 2. 切面类 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;myAspect&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;cn.african.aspect.MyAspect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 3. 代理类 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;proxyService&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;interfaces&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;cn.african.service.UserService&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;target&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;userService&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;interceptorNames&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;myAspect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;property name=&quot;optimize&quot; value=&quot;true&quot;&amp;gt;&amp;lt;/property&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;如果声明optimize=true，无论是否有接口，都采用cglib代理&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    我们分下一下代理类的配置：&lt;/p&gt;
&lt;p&gt;    org.springframework.aop.framework.ProxyFactoryBean是FactoryBean的一个实现，它是一个代理类的工厂Bean，专门用来生成代理对象，底层会调用ProxyFactoryBean中的getObject()方法来返回这个代理对象。&lt;/p&gt;
&lt;p&gt;    interfaces：确定接口&lt;/p&gt;
&lt;p&gt;    target：确定目标类&lt;/p&gt;
&lt;p&gt;    interceptorNames：切面类实例的Bean ID，但是这里使用value，却没有使用ref，这是因为&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;setInterceptorNames接收的参数是个String的可可变参数，本质上是一个String[ ]。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    optimize：当值为true时，强制使用cglib代理；默认值为false。&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;    4. 测试类&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;17&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.service.UserService;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestAop {
    
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; demo01() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        ApplicationContext context &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&quot;beans-aop.xml&quot;&lt;span&gt;);
        UserService userService &lt;/span&gt;= context.getBean(&quot;proxyService&quot;, UserService.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        userService.addUser();
        System.out.println(&lt;/span&gt;&quot;----------------&quot;&lt;span&gt;);
        userService.updateUser();
        System.out.println(&lt;/span&gt;&quot;----------------&quot;&lt;span&gt;);
        userService.deleteUser();
        context.getClass().getMethod(&lt;/span&gt;&quot;close&quot;&lt;span&gt;).invoke(context);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1133643/201804/1133643-20180411141249385-1717326321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;七、Spring AOP编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    从Spring容器中获取目标对象，如果配置了AOP，Spring将自动生成代理对象并返回。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    想要确定目标类，得使用AspectJ的切入点表达式。关于AspectJ我们将在另一篇文章中详细介绍。&lt;/p&gt;
&lt;p&gt;    下面是一个AOP编程的demo：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    1. 目标类&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;25.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.service;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; UserService {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addUser();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateUser();
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteUser();
}

&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.service;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; UserService {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addUser() {
        System.out.println(&lt;/span&gt;&quot;addUser...&quot;&lt;span&gt;);
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; updateUser() {
        System.out.println(&lt;/span&gt;&quot;updateUser...&quot;&lt;span&gt;);
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteUser() {
        System.out.println(&lt;/span&gt;&quot;deleteUser...&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;    2. 切面类&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    我们使用环绕通知，环绕通知要手动执行目标方法。&lt;/p&gt;
&lt;div readability=&quot;42&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.aspect;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aopalliance.intercept.MethodInterceptor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.aopalliance.intercept.MethodInvocation;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyAspect &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; MethodInterceptor {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object invoke(MethodInvocation invocation) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 前置通知&lt;/span&gt;
        System.out.println(&quot;before&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 手动执行目标方法，这是一个放行方法&lt;/span&gt;
        Object object =&lt;span&gt; invocation.proceed();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 后置通知&lt;/span&gt;
        System.out.println(&quot;after&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;    3. beans-aop.xml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 1. 目标类 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;userService&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;cn.african.service.UserServiceImpl&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 2. 切面类 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;myAspect&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;cn.african.aspect.MyAspect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 3. AOP配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aop:config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aop:pointcut &lt;/span&gt;&lt;span&gt;expression&lt;/span&gt;&lt;span&gt;=&quot;execution(* cn.african.service.UserServiceImpl.*(..))&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;myPointcut&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;aop:advisor &lt;/span&gt;&lt;span&gt;advice-ref&lt;/span&gt;&lt;span&gt;=&quot;myAspect&quot;&lt;/span&gt;&lt;span&gt; pointcut-ref&lt;/span&gt;&lt;span&gt;=&quot;myPointcut&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;aop:config&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    下面解释一下这段AOP的配置：&lt;/p&gt;
&lt;p&gt;    1. 使用&amp;lt;aop:config&amp;gt;必须要导入aop的命名空间。&lt;/p&gt;
&lt;p&gt;    2. aop编程就是在&amp;lt;aop:config&amp;gt;之间进行配置：&lt;/p&gt;
&lt;p&gt;            &amp;lt;aop:pointcut&amp;gt;：切入点，从目标对象中获取具体的方法&lt;/p&gt;
&lt;p&gt;            &amp;lt;aop:advisor&amp;gt;：这个标签描述一个特殊的&lt;strong&gt;切面&lt;/strong&gt;，这个特殊的切面是一个通知和一个切入点的结合。&lt;/p&gt;
&lt;p&gt;                        advice-ref：通知的引用&lt;/p&gt;
&lt;p&gt;                        pointcut-ref：切入点的引用&lt;/p&gt;
&lt;p&gt;                        注意advisor和advice的区别！！！&lt;/p&gt;
&lt;p&gt;    3. 切入点表达式&lt;/p&gt;
&lt;p&gt;            execution(* cn.african.service.UserServiceImpl.*(..))&lt;/p&gt;
&lt;p&gt;            execution：按照官方的解释是： for matching method execution join points, this is the primary pointcut designator(指示符) you will use when working with Spring AOP。&lt;/p&gt;
&lt;p&gt;             execution(     &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*      &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;cn.african.service.  &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;UserServiceImpl.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;*        (..)  )&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;                           &lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;返回类型任意&lt;span class=&quot;Apple-converted-space&quot;&gt;    &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;包名              &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;类名           &lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;方法任意&lt;span class=&quot;Apple-converted-space&quot;&gt;   参数任意&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;4. 测试类&lt;/strong&gt;&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; cn.african.test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cn.african.service.UserService;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestAop {
    
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; demo01() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        ApplicationContext context &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&quot;beans-aop.xml&quot;&lt;span&gt;);
        UserService userService &lt;/span&gt;= context.getBean(&quot;userService&quot;, UserService.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        userService.addUser();
        System.out.println(&lt;/span&gt;&quot;----------------&quot;&lt;span&gt;);
        userService.updateUser();
        System.out.println(&lt;/span&gt;&quot;----------------&quot;&lt;span&gt;);
        userService.deleteUser();
        context.getClass().getMethod(&lt;/span&gt;&quot;close&quot;&lt;span&gt;).invoke(context);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1133643/201804/1133643-20180411141432721-1620910283.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 11 Apr 2018 06:15:00 +0000</pubDate>
<dc:creator>非洲铜</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/africancu/p/8795397.html</dc:identifier>
</item>
<item>
<title>测试驱动开发实践4————testSave之新增文档分类 - 云开发</title>
<link>http://www.cnblogs.com/cloud-dev/p/ce-shi-qu-dong-kai-fa-shi-jian4testSave-zhi-xin-ze.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloud-dev/p/ce-shi-qu-dong-kai-fa-shi-jian4testSave-zhi-xin-ze.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;【内容指引】&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;1.确定“新增文档分类”的流程及所需的参数&lt;br/&gt;2.根据业务规则设计测试用例&lt;br/&gt;3.为测试用例赋值并驱动开发&lt;/p&gt;
&lt;h2 id=&quot;toc_0&quot;&gt;一、确定“新增文档分类”的流程及所需的参数&lt;/h2&gt;
&lt;p&gt;假定本项目由五部分组成：客户端、Zuul微服务网关、“项目管理”微服务、“团队管理”微服务和“文档管理”微服务。微服务网关是客户端和微服务之间的桥梁。客户端和微服务之间参数的传递模型如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135112491-790427339.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;1.在客户端Post提交Form表单，需要提供“项目”(projectId)、“分类名称”(name)、“排序”(sequence)和“操作者”(operator)这四个参数，其中“分类名称”和“排序”通过输入控件提供参数，“项目”通过下拉框控件、隐藏控件或session提供参数，“操作者”通过Session或cookie提供参数；&lt;br/&gt;2.请求先经过Zuul微服务网关，网关调用“项目管理”微服务，对projectId参数的有效性进行校验，然后通过“团队管理”微服务对“操作者”的身份及该操作者对此项目添加文档分类的权限进行判断，如拥有权限，则将请求转发到“文档管理”微服务。所以在“文档管理”微服务中不需要再次对“项目”和“操作者”做校验；&lt;br/&gt;3.在“文档管理”微服务中需要对“分类名称”和“排序”做输入校验，并且对“分类名称”在该项目中唯一性做逻辑校验。&lt;/p&gt;
&lt;p&gt;综上，在“文档管理”微服务中需要接收四个参数：projectId,operator,name和sequence。&lt;/p&gt;
&lt;h2 id=&quot;toc_1&quot;&gt;二、根据业务规则设计测试用例&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;设计测试用例常用技巧&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;等价类划分法&lt;/em&gt;：将测试的范围划分成几个互不相交的子集，它们的并集是全集。从每个子集选出若干个有代表性的值作为测试用例；&lt;br/&gt;&lt;em&gt;边界值分析法&lt;/em&gt;：针对各种边界情况设计测试用例。选出的测试用例，应选取正好等于、刚刚大于、刚刚小于边界的值；&lt;br/&gt;&lt;em&gt;错误推测法&lt;/em&gt;：根据经验或直觉推测程序中可能存在的各种错误，从而有针对性编写检查这些错误的测试用例的方法；&lt;br/&gt;&lt;em&gt;判定表法&lt;/em&gt;：又称为策略表，基于策略表的测试，是功能测试中最严密的测试方法。该方法适合于逻辑判断复杂的场景，通过穷举条件获得结果，对结果在进行优化合并，会得到一个判断清晰的策略表；&lt;br/&gt;&lt;em&gt;正交实验法&lt;/em&gt;：在各因素互相独立的情况下，设计出一种特殊的表格，找出能以少数替代全面的测试用例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;/strong&gt;&lt;br/&gt;1.列出所有可能输入的参数项，对于无须校验的参数，在其它测试用例中直接赋正确参数值即可，无须设计测试用例；&lt;br/&gt;2.针对每个需要校验的参数各个击破，先考虑输入校验，再考虑逻辑校验；&lt;br/&gt;2.1 输入校验&lt;br/&gt;首选“等价类划分法”设计测试用例，辅以“边界值分析法“。&lt;br/&gt;2.1.1 合法等价类先设计合法中间值，然后设计合法边界值(Min，Min+，Max，Max-);&lt;br/&gt;2.1.2 非法等价类中也可使用非法边界值(Min-,Max+)、空值和其它数据类型的参数值设计测试用例;&lt;br/&gt;2.2 逻辑校验&lt;br/&gt;2.2.1 考虑是否需要数据唯一性的判断；&lt;br/&gt;2.2.2 如果逻辑复杂，可用“判定表法”设计测试用例；&lt;br/&gt;3.如有必要，在上述测试用例基础上根据经验使用“错误推测法”和“正交表法”设计测试用例。&lt;/p&gt;
&lt;p&gt;可借助XMind进行陈列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135114316-322977370.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;最终我们设计出如下测试用例：&lt;br/&gt;用例1:全部参数使用合法中间值&lt;br/&gt;ProjectId=1L；&lt;br/&gt;name=&quot;测试新增文档分类一&quot;;&lt;br/&gt;sequence=&quot;10&quot;;&lt;br/&gt;operator=&quot;1L&quot;;&lt;/p&gt;
&lt;p&gt;用例2:name采用合法边界值Min：name=&quot;测&quot;;&lt;br/&gt;(其它参数沿用用例1的合法中间值)&lt;/p&gt;
&lt;p&gt;用例3:name采用合法边界值Min+:name=&quot;测试&quot;;&lt;/p&gt;
&lt;p&gt;用例4:name采用合法边界值Max:name=&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试&quot;;&lt;/p&gt;
&lt;p&gt;用例5:name采用合法边界值Max:name=&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测&quot;;&lt;/p&gt;
&lt;p&gt;用例6:name采用非法等价类：空值；&lt;/p&gt;
&lt;p&gt;用例7:name采用非法边界值Max+:name=&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测超长&quot;;&lt;/p&gt;
&lt;p&gt;用例8:name同项目下唯一性逻辑校验：name=“文档分类一”(采用SetUp()中相同的值)；&lt;/p&gt;
&lt;p&gt;用例9:sequence采用合法边界值Min：sequence=1；&lt;/p&gt;
&lt;p&gt;用例10:sequence采用合法边界值Min+：sequence=2；&lt;/p&gt;
&lt;p&gt;用例11:sequence采用合法边界值Max：sequence=Integer.MAX_VALUE；&lt;/p&gt;
&lt;p&gt;用例12:sequence采用合法边界值Max-：sequence=Integer.MAX_VALUE-1；&lt;/p&gt;
&lt;p&gt;用例13:sequence采用非法等价类：空值；&lt;/p&gt;
&lt;p&gt;用例14:sequence采用非法边界值Min-：sequence=0；&lt;/p&gt;
&lt;p&gt;用例15:sequence采用非法边界值：sequence=-1；&lt;/p&gt;
&lt;p&gt;用例16:sequence采用非法边界值Max+：sequence=Integer.MAX_VALUE+1；&lt;/p&gt;
&lt;p&gt;用例17:sequence采用非法等价类：abc(字符)；&lt;/p&gt;
&lt;h2 id=&quot;toc_2&quot;&gt;三、为测试用例赋值并驱动开发&lt;/h2&gt;
&lt;p&gt;首先打开测试方法testSave,这个方法中会依次测试新增文档分类和修改文档分类的逻辑，定位在“测试新增文档分类”处：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135112760-2051348011.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;首先，我们完成第一个任务“//TODO 列出新增文档分类测试用例清单”。将上面列出的“测试用例清单文档”写入多行注释中，作为测试清单。以后还有可能往这个清单中增加新的测试用例。让测试用例代码成为有价值的开发文档；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 测试新增文档分类
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 列出新增文档分类测试用例清单
         *
         用例1:全部参数使用合法中间值
         ProjectId=1L；
         name=&quot;测试新增文档分类一&quot;;
         sequence=&quot;10&quot;;
         operator=&quot;1L&quot;;

         用例2:name采用合法边界值Min：name=&quot;测&quot;;
         (其它参数沿用用例1的合法中间值)

         用例3:name采用合法边界值Min+:name=&quot;测试&quot;;

         用例4:name采用合法边界值Max:name=&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试&quot;;

         用例5:name采用合法边界值Max:name=&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测&quot;;

         用例6:name采用非法等价类：空值；

         用例7:name采用非法边界值Max+:name=&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测超长&quot;;

         用例8:name同项目下唯一性逻辑校验：name=“文档分类一”(采用SetUp()中相同的值)；

         用例9:sequence采用合法边界值Min：sequence=1；

         用例10:sequence采用合法边界值Min+：sequence=2；

         用例11:sequence采用合法边界值Max：sequence=Integer.MAX_VALUE；

         用例12:sequence采用合法边界值Max-：sequence=Integer.MAX_VALUE-1；

         用例13:sequence采用非法等价类：空值；

         用例14:sequence采用非法边界值Min-：sequence=0；

         用例15:sequence采用非法边界值：sequence=-1；

         用例16:sequence采用非法边界值Max+：sequence=Integer.MAX_VALUE+1；

         用例17:sequence采用非法等价类：abc(字符)；
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;“云开发”平台生成的初始化代码中已经为我们设计了一个”测试新增文档分类“的测试模版，由“测试用例赋值”、“模拟请求”及“测试断言”组成。代码如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试用例赋值&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;TODO 将下面的null值换为测试参数&lt;/span&gt;
        Category category = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Category();
        category.setProjectId(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        category.setName(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        category.setSequence(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);

        Long operator &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        Long id &lt;/span&gt;= 4L&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;模拟请求&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                        MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                                .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                                .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                                .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                                .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;测试断言&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每一个测试用例的测试代码均由“测试用例赋值+模拟请求+测试断言组成”，&lt;em&gt;测试用例赋值不同，模拟请求的参数和测试断言就应相应调整&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&quot;toc_3&quot;&gt;1.全部参数使用合法中间值：&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;第一个新增文档分类的测试用例代码，就在原测试模版的基础上修改即可。&lt;/em&gt;修改后代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例1：全部参数使用合法中间值&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Category category &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Category();
        category.setProjectId(&lt;/span&gt;1L&lt;span&gt;);
        category.setName(&lt;/span&gt;&quot;用例1文档分类&quot;&lt;span&gt;);
        category.setSequence(&lt;/span&gt;10&lt;span&gt;);

        Long operator &lt;/span&gt;= 1L&lt;span&gt;;
        Long id &lt;/span&gt;= 8L&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                        MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                                .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                                .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                                .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                                .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;代码解说&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例1：全部参数使用合法中间值&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        Category category &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Category();
        category.setProjectId(&lt;/span&gt;1L&lt;span&gt;);
        category.setName(&lt;/span&gt;&quot;用例1文档分类&quot;&lt;span&gt;);
        category.setSequence(&lt;/span&gt;10&lt;span&gt;);

        Long operator &lt;/span&gt;= 1L&lt;span&gt;;
        Long id &lt;/span&gt;= 8L&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;给operator赋值为1，因为是Long型，所以写为“1L”。&lt;br/&gt;为id赋值为“8L”。为什么输入为“8”？这里需要解释一下：&lt;br/&gt;在CategoryControllerTest类运行时，先会执行testList方法，接着执行testSave方法。在执行testList方法前执行了setUp方法，其中添加了一条数据，id为“1”。接着，在testList方法中添加了5条数据，所以testList方法执行完时，User的数据库表主键id变为“6”了，虽然执行完testList方法后这6条数据都因为事务回滚清空了，但是id值“1-6”已被占用了。接着准备执行testSave方法前又执行了一次setUp方法，再次添加了一条数据，id变为“7”。所以，在testSave中添加的第一条数据的主键id值应为“8”，因为是Long型字段，所以赋值为“8L”。如果在setUp或testList中插入了更多数据，那么这个值也应相应调整，原理已说明。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                        MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                                .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                                .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                                .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                                .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码是利用mockMvc模拟post访问&quot;/category/create&quot;这个微服务Rest控制器接口，模拟表单提交了四个参数&quot;projectId&quot;、&quot;name&quot;、“sequence”和“operator”，值已经在上面的测试用例赋值中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
                .andDo(print())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个是用来将请求及返回结果打印到控制台中，方便测试人员查看及分析。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
                .andExpect(status().isOk())
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个是基本的检查，正确的请求返回的状态码应为“200”，如果是“404”或其它值，就代表有问题。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;)))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果新增数据成功，那么应返回category的实例json数据，其中含有category(和领域类名称相同)这个节点。如果表单验证通不过，则返回“formErrors”节点，如果发生异常，则返回“errorMessage”节点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是对返回的json数据的进一步判断，其中：&lt;br/&gt;categoryId的值应该等于前面定义的id值&quot;8&quot;；&lt;br/&gt;projectId、name和sequence：返回值应该等于前面赋的参数值；&lt;br/&gt;creationTime：创建时间应该有值，所以可以用“.isNotEmpty()”来断言；&lt;br/&gt;creatorUserId：创建者ID，应该等于前面给操作员参数赋的值1(operator)；&lt;br/&gt;lastModificationTime：最近修改时间，注册时未修改，所以应保存为null，因此返回值可用“isEmpty()”断言；&lt;br/&gt;lastModifierUserId：最近修改者，应返回默认值“0”；&lt;br/&gt;isDeleted：新增的数据应该是未删除的，所以该字段应返回“false”；&lt;br/&gt;deletionTime：删除时间应保存为null，所以返回值可用“isEmpty()”断言；&lt;br/&gt;deleterUserId：删除者，应返回默认值“0”；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;执行测试&lt;/strong&gt;&lt;br/&gt;写完测试代码后，我们运行下单元测试，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135113587-1282227890.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;异常定位在“测试修改文档分类”代码中，说明第一个新增文档分类测试用例已通过。&lt;/p&gt;
&lt;p&gt;现在为新增文档分类写第二个测试用例代码。&lt;br/&gt;仅为name赋值，由于是合法边界值，所以主键ID加1。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例2:name采用合法边界值Min：name=&quot;测&quot;;&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;测&quot;&lt;span&gt;);
        id&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同理，将用例2测试代码拷贝修改为用例3-用例5，每次给id赋值加1:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例3:name采用合法边界值Min+:name=&quot;测试&quot;;&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;测试&quot;&lt;span&gt;);
        id&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例4:name采用合法边界值Max:name=&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试&quot;;&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试&quot;&lt;span&gt;);
        id&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例5:name采用合法边界值Max:name=&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测&quot;;&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测&quot;&lt;span&gt;);
        id&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行单元测试，上述用例均通过测试。接下来，我们添加非法等价类：空值。我们期望非空的错误能被检查出来，返回formErrors，code应为“NotBlank”，客户端可利用返回的错误信息提示给用户。由于预期添加数据失败，所以这里就不需要让主键ID加1了，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例6:name采用非法等价类：空值；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;formErrors&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;formErrors&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;\&quot;code\&quot; : \&quot;NotBlank\&quot;&quot;&lt;span&gt;)))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同理，我们为name的非法等价类用例添加用例7：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例7:name采用非法边界值Max+:name=&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测超长&quot;;&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测试新增文档分类测超长&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;formErrors&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;formErrors&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;\&quot;code\&quot; : \&quot;Length\&quot;&quot;&lt;span&gt;)))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行单元测试，用例6和用例7均通过了测试。原因是，从“云开发”平台初始化Category领域类代码时已经给name字段加好了如下注解：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 分类名称
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @NotBlank(groups&lt;/span&gt;={CheckCreate.&lt;span&gt;class&lt;/span&gt;, CheckModify.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;})
    @Length(min &lt;/span&gt;= 1, max = 50, groups={CheckCreate.&lt;span&gt;class&lt;/span&gt;, CheckModify.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;})
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@Pattern(regexp = &quot;&quot;, groups={CheckCreate.class, CheckModify.class})&lt;/span&gt;
    @Column(nullable = &lt;span&gt;false&lt;/span&gt;, name = &quot;name&quot;, length = 50&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String name = &quot;&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码的含义是：添加和修改name字段时会启用“@NotBlank”和“@Length”校验。&lt;/p&gt;
&lt;p&gt;现在继续写单元测试用例代码，模拟“同一项目下文档分类名称已存在(违反唯一性)”的情况，前面我们在setUp()方法中装配了一条数据，分类名称为“文档分类一”(projectId=1)的分类且添加成功。现在数据库中已存在分类名称为“文档分类一”的数据，我们故意再添加一条这样的数据，期望能引起报错。由于这个数据并没有违反分类名称输入的基本校验，而是违反唯一性，错误提示为“该项目下已存在同名文档分类！”，这个需要通过逻辑校验，所以应返回异常：errorMessage。我们给这个异常一个编码：10001(这个编码可以根据自己的规则去编写，但是不同异常的错误编码不能相同)，所以我们期望返回的结果中包含&quot;&quot;errorMessage&quot; : &quot;[10001]&quot;，测试用例代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例8:name同项目下唯一性逻辑校验：name=“文档分类一”(采用SetUp()中相同的值)；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;文档分类一&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
        )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;errorMessage&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;\&quot;errorMessage\&quot; : \&quot;[10001]&quot;&lt;span&gt;)))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行单元测试，测试结果显示，添加数据成功，并未检测到数据重复的异常。对于逻辑校验而言，代码应写在服务实现层：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135112789-1986265418.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;我们需要在新增文档分类的服务实现层代码中加入逻辑判断代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;if&lt;/span&gt;(category.getCategoryId()==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断同一项目里是否有同名文档分类&lt;/span&gt;
            List&amp;lt;Category&amp;gt; list =&lt;span&gt; categoryRepository.findByProjectIdAndNameAndIsDeletedFalse(category.getProjectId(),category.getName());
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(list.size() &amp;gt; 0&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(ErrorCode.Category_Name_Exists);
            }

            category.setCreatorUserId(Long.valueOf(request.getParameter(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;)));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; categoryRepository.save(category);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135116040-755777067.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;相应增加一个Dao接口和错误码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135116152-27441996.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135117737-1710658588.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;同时，我们需要在i18n的messages配置中配置好相应的错误提示多国语言包(实现异常提示信息的本地化)，语言包配置位置为资源文件夹下的&quot;i18n/messages&quot;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135119213-262702977.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;其中，中文做了64位转码，如果直接使用中文，有可能客户端出现乱码。这里介绍一个转码工具：CodeText，这是Mac系统下的一个转码工具，Windows系统下也可以找找类似工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135149651-1595091114.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;英文语言包配置如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135120601-58858914.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;中文语言包和默认语言包设置一致.&lt;/p&gt;
&lt;p&gt;现在运行单元测试，确实返回了我们期望的异常信息，测试通过了：&lt;/p&gt;
&lt;p&gt;现在编写排序字段的测试用例代码：&lt;br/&gt;用例9添加的是合法边界值1，所以主键ID应加一。同时请注意，由于对name做了唯一性逻辑校验，所以name取值为一个从未使用的值，这里使用用例序号做前缀：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例9:sequence采用合法边界值Min：sequence=1；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;用例9文档分类&quot;&lt;span&gt;);
        category.setSequence(&lt;/span&gt;1&lt;span&gt;);
        id&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
        )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样方法，对排序的其它合法边界值测试用例进行编写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例10:sequence采用合法边界值Min+：sequence=2；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;用例10文档分类&quot;&lt;span&gt;);
        category.setSequence(&lt;/span&gt;2&lt;span&gt;);
        id&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例11:sequence采用合法边界值Max：sequence=Integer.MAX_VALUE；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;用例11文档分类&quot;&lt;span&gt;);
        category.setSequence(Integer.MAX_VALUE);
        id&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例12:sequence采用合法边界值Max-：sequence=Integer.MAX_VALUE-1；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;用例12文档分类&quot;&lt;span&gt;);
        category.setSequence(Integer.MAX_VALUE&lt;/span&gt;-1&lt;span&gt;);
        id&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;category&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;category&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.category.categoryId&quot;&lt;span&gt;).value(id))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.projectId&quot;&lt;span&gt;).value(category.getProjectId()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.name&quot;&lt;span&gt;).value(category.getName()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.sequence&quot;&lt;span&gt;).value(category.getSequence()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creationTime&quot;&lt;span&gt;).isNotEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.creatorUserId&quot;&lt;span&gt;).value(operator))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModificationTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.lastModifierUserId&quot;).value(0&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.isDeleted&quot;).value(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deletionTime&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.category.deleterUserId&quot;).value(0&lt;span&gt;))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经测试，均通过。&lt;/p&gt;
&lt;p&gt;现在针对排序字段的非法等价类空值写测试代码：&lt;br/&gt;由于是非法等价类，期望操作失败，所以id不必加一；为防止name重名，所以name仍然赋值；sequence是int型数据，无法通过“category.setSequence()”赋空值，所以直接通过.param(&quot;sequence&quot;,&quot;&quot;)给参数赋值:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例13:sequence采用非法等价类：空值；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;用例13文档分类&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;,&quot;&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;int型数据空值参数直接在mock请求中传参&lt;/span&gt;
                        .param(&quot;operator&quot;&lt;span&gt;,operator.toString())
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;formErrors&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;formErrors&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;\&quot;code\&quot; : \&quot;NotNull\&quot;&quot;&lt;span&gt;)))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行单元测试，发现返回了“errorMessage”异常，而不是formErrors：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180411135123509-1775492450.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;从领域类category的sequence字段注解着手修改代码，修改前代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 排序
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;@Range(min=value,max=value, groups={CheckCreate.class, CheckModify.class})&lt;/span&gt;
    @Column(nullable = &lt;span&gt;false&lt;/span&gt;, name = &quot;sequence&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Integer sequence;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改后代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 排序
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @NotNull(groups&lt;/span&gt;={CheckCreate.&lt;span&gt;class&lt;/span&gt;, CheckModify.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;})
    @Min(value &lt;/span&gt;= 1, groups={CheckCreate.&lt;span&gt;class&lt;/span&gt;, CheckModify.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;})
    @Column(nullable &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;, name = &quot;sequence&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Integer sequence;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次运行测试，通过。剩下的测试用例代码直接贴代码，测试通过：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例14:sequence采用非法边界值Min-：sequence=0；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;用例14文档分类&quot;&lt;span&gt;);
        category.setSequence(&lt;/span&gt;0&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
        )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;formErrors&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;formErrors&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;\&quot;code\&quot; : \&quot;Min\&quot;&quot;&lt;span&gt;)))
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例15:sequence采用非法边界值：sequence=-1；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;用例15文档分类&quot;&lt;span&gt;);
        category.setSequence(&lt;/span&gt;-1&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
        )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;formErrors&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;formErrors&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;\&quot;code\&quot; : \&quot;Min\&quot;&quot;&lt;span&gt;)))
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例16:sequence采用非法边界值Max+：sequence=Integer.MAX_VALUE+1；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;用例16文档分类&quot;&lt;span&gt;);
        category.setSequence(Integer.MAX_VALUE&lt;/span&gt;+1&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;&lt;span&gt;,category.getSequence().toString())
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
        )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;formErrors&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;formErrors&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;\&quot;code\&quot; : \&quot;Min\&quot;&quot;&lt;span&gt;)))
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用例17:sequence采用非法等价类：abc(字符)；&lt;/span&gt;
        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        category.setName(&lt;/span&gt;&quot;用例17文档分类&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.mockMvc.perform(
                MockMvcRequestBuilders.post(&lt;/span&gt;&quot;/category/create&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;projectId&quot;&lt;span&gt;,category.getProjectId().toString())
                        .param(&lt;/span&gt;&quot;name&quot;&lt;span&gt;,category.getName())
                        .param(&lt;/span&gt;&quot;sequence&quot;,&quot;abc&quot;&lt;span&gt;)
                        .param(&lt;/span&gt;&quot;operator&quot;&lt;span&gt;,operator.toString())
        )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查内容有&quot;formErrors&quot;&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;formErrors&quot;&lt;span&gt;)))
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(content().string(containsString(&quot;\&quot;code\&quot; : \&quot;typeMismatch\&quot;&quot;&lt;span&gt;)))
                .andReturn();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过以上17个测试用例，完成了“添加文档分类”所需的单元测试代码，如果后续仍发现未被覆盖到的情况，可以在此基础上继续增加测试用例。&lt;/p&gt;

</description>
<pubDate>Wed, 11 Apr 2018 05:52:00 +0000</pubDate>
<dc:creator>云开发</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloud-dev/p/ce-shi-qu-dong-kai-fa-shi-jian4testSave-zhi-xin-ze.html</dc:identifier>
</item>
<item>
<title>jenkins配置findbugs失败---不要随便忽略警告！一个因为文件所有权引发的血案 - 三国梦回</title>
<link>http://www.cnblogs.com/grey-wolf/p/8795095.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/grey-wolf/p/8795095.html</guid>
<description>&lt;p&gt;这两天组长让我这边搭一个持续集成环境。梳理了需求后，因为我们的项目都是maven项目，所以我选择了jenkins+外置maven（区别于直接从jenkins里面安装）的方案。（centos 7）&lt;/p&gt;
&lt;p&gt;jenkins的安装先不细说，maven的安装也是直接参考了https://maven.apache.org/install.html。&lt;/p&gt;
&lt;p&gt;maven信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
[root@pas upload]# mvn -&lt;span&gt;v
Apache Maven &lt;/span&gt;&lt;span&gt;3.5&lt;/span&gt;.&lt;span&gt;3&lt;/span&gt; (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt;-25T03:&lt;span&gt;49&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt;+&lt;span&gt;08&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;)
&lt;span&gt;Maven home: &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;/usr/local/apache-maven-3.5.3&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;
Java version: &lt;/span&gt;&lt;span&gt;1.8&lt;/span&gt;&lt;span&gt;.0_161, vendor: Oracle Corporation
Java home: &lt;/span&gt;/usr/local/jdk1.&lt;span&gt;8&lt;/span&gt;.0_161/&lt;span&gt;jre
Default locale: zh_CN, platform encoding: UTF&lt;/span&gt;-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
OS name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, version: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.10.0-693.el7.x86_64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, arch: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;amd64&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, family: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，说下我的maven的配置。&lt;/p&gt;
&lt;p&gt;我修改了maven安装目录下的conf下的settings.xml（/usr/local/apache-maven-3.5.3/conf/settings.xml）&lt;/p&gt;
&lt;h2&gt;1.修改仓库位置&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;localRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/home/upload/Repo_backup&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;localRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;由于我的windows服务器上已经有了本地仓库，所以直接压缩成zip后上传到了centos上，解压到了 /home/upload/Repo_backup。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411132003924-747306940.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2.增加私服相关配置&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('54ad4587-1cef-4cda-8998-f9be08680263')&quot; readability=&quot;49.5&quot;&gt;&lt;img id=&quot;code_img_closed_54ad4587-1cef-4cda-8998-f9be08680263&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_54ad4587-1cef-4cda-8998-f9be08680263&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('54ad4587-1cef-4cda-8998-f9be08680263',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_54ad4587-1cef-4cda-8998-f9be08680263&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;94&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
&quot;License&quot;); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
 | This is the configuration file for Maven. It can be specified at two levels:
 |
 |  1. User Level. This settings.xml file provides configuration for a single user,
 |                 and is normally provided in ${user.home}/.m2/settings.xml.
 |
 |                 NOTE: This location can be overridden with the CLI option:
 |
 |                 -s /path/to/user/settings.xml
 |
 |  2. Global Level. This settings.xml file provides configuration for all Maven
 |                 users on a machine (assuming they're all using the same Maven
 |                 installation). It's normally provided in
 |                 ${maven.conf}/settings.xml.
 |
 |                 NOTE: This location can be overridden with the CLI option:
 |
 |                 -gs /path/to/global/settings.xml
 |
 | The sections in this sample file are intended to give you a running start at
 | getting the most out of your Maven installation. Where appropriate, the default
 | values (values used when the setting is not specified) are provided.
 |
 |&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;settings &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;&lt;/span&gt;&lt;span&gt;
          xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
          xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; localRepository
   | The path to the local repository maven will use to store artifacts.
   |
   | Default: ${user.home}/.m2/repository
  &amp;lt;localRepository&amp;gt;/path/to/local/repo&amp;lt;/localRepository&amp;gt;
  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;localRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/home/upload/Repo_backup&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;localRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; interactiveMode
   | This will determine whether maven prompts you when it needs input. If set to false,
   | maven will use a sensible default value, perhaps based on some other setting, for
   | the parameter in question.
   |
   | Default: true
  &amp;lt;interactiveMode&amp;gt;true&amp;lt;/interactiveMode&amp;gt;
  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; offline
   | Determines whether maven should attempt to connect to the network when executing a build.
   | This will have an effect on artifact downloads, artifact deployment, and others.
   |
   | Default: false
  &amp;lt;offline&amp;gt;false&amp;lt;/offline&amp;gt;
  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; pluginGroups
   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.
   | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers
   | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list.
   |&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginGroups&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; pluginGroup
     | Specifies a further group identifier to use for plugin lookup.
    &amp;lt;pluginGroup&amp;gt;com.your.plugins&amp;lt;/pluginGroup&amp;gt;
    &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginGroups&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; proxies
   | This is a list of proxies which can be used on this machine to connect to the network.
   | Unless otherwise specified (by system property or command-line switch), the first proxy
   | specification in this list marked as active will be used.
   |&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;proxies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; proxy
     | Specification for one proxy, to be used in connecting to the network.
     |
    &amp;lt;proxy&amp;gt;
      &amp;lt;id&amp;gt;optional&amp;lt;/id&amp;gt;
      &amp;lt;active&amp;gt;true&amp;lt;/active&amp;gt;
      &amp;lt;protocol&amp;gt;http&amp;lt;/protocol&amp;gt;
      &amp;lt;username&amp;gt;proxyuser&amp;lt;/username&amp;gt;
      &amp;lt;password&amp;gt;proxypass&amp;lt;/password&amp;gt;
      &amp;lt;host&amp;gt;proxy.host.net&amp;lt;/host&amp;gt;
      &amp;lt;port&amp;gt;80&amp;lt;/port&amp;gt;
      &amp;lt;nonProxyHosts&amp;gt;local.net|some.host.com&amp;lt;/nonProxyHosts&amp;gt;
    &amp;lt;/proxy&amp;gt;
    &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;proxies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; servers
   | This is a list of authentication profiles, keyed by the server-id used within the system.
   | Authentication profiles can be used whenever maven must make a connection to a remote server.
   |&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;bol-release&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;admin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;admin123&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;bol-snapshot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;admin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;admin123&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; server
     | Specifies the authentication information to use when connecting to a particular server, identified by
     | a unique name within the system (referred to by the 'id' attribute below).
     |
     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are
     |       used together.
     |
    &amp;lt;server&amp;gt;
      &amp;lt;id&amp;gt;deploymentRepo&amp;lt;/id&amp;gt;
      &amp;lt;username&amp;gt;repouser&amp;lt;/username&amp;gt;
      &amp;lt;password&amp;gt;repopwd&amp;lt;/password&amp;gt;
    &amp;lt;/server&amp;gt;
    &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Another sample, using keys to authenticate.
    &amp;lt;server&amp;gt;
      &amp;lt;id&amp;gt;siteServer&amp;lt;/id&amp;gt;
      &amp;lt;privateKey&amp;gt;/path/to/private/key&amp;lt;/privateKey&amp;gt;
      &amp;lt;passphrase&amp;gt;optional; leave empty if not used.&amp;lt;/passphrase&amp;gt;
    &amp;lt;/server&amp;gt;
    &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; mirrors
   | This is a list of mirrors to be used in downloading artifacts from remote repositories.
   |
   | It works like this: a POM may declare a repository to use in resolving certain artifacts.
   | However, this repository may have problems with heavy traffic at times, so people have mirrored
   | it to several places.
   |
   | That repository definition will have a unique id, so we can create a mirror reference for that
   | repository, to be used as an alternate download site. The mirror site will be the preferred
   | server for that repository.
   |&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mirrors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mirror&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;bolRemote&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mirrorOf&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mirrorOf&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cts&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://192.168.19.210:8081/nexus/content/groups/public/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mirror&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; mirror
     | Specifies a repository mirror site to use instead of a given repository. The repository that
     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used
     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.
     |
    &amp;lt;mirror&amp;gt;
      &amp;lt;id&amp;gt;mirrorId&amp;lt;/id&amp;gt;
      &amp;lt;mirrorOf&amp;gt;repositoryId&amp;lt;/mirrorOf&amp;gt;
      &amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt;
      &amp;lt;url&amp;gt;http://my.repository.com/repo/path&amp;lt;/url&amp;gt;
    &amp;lt;/mirror&amp;gt;
     &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mirrors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; profiles
   | This is a list of profiles which can be activated in a variety of ways, and which can modify
   | the build process. Profiles provided in the settings.xml are intended to provide local machine-
   | specific paths and repository locations which allow the build to work in the local environment.
   |
   | For example, if you have an integration testing plugin - like cactus - that needs to know where
   | your Tomcat instance is installed, you can provide a variable here such that the variable is
   | dereferenced during the build process to configure the cactus plugin.
   |
   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles
   | section of this document (settings.xml) - will be discussed later. Another way essentially
   | relies on the detection of a system property, either matching a particular value for the property,
   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a
   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.
   | Finally, the list of active profiles can be specified directly from the command line.
   |
   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact
   |       repositories, plugin repositories, and free-form properties to be used as configuration
   |       variables for plugins in the POM.
   |
   |&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;profiles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nexus&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Enable snapshots for the built in central repo to direct &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;all requests to nexus via the mirror &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;central&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://central&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginRepositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;central&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://central&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;releases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginRepository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginRepositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;profile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;profiles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;activeProfiles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;activeProfile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;nexus&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;activeProfile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;activeProfiles&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;3.jenkins安装maven插件并新建maven项目&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411132338244-2114528383.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;系统管理--》管理插件--》可选插件--》Maven Integration plugin&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411132416465-1575447606.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;勾选后点直接安装，等待安装完成后，新建任务中就会出现下图所示的“构建一个maven项目”的选项：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411125116698-1641737748.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.项目配置&lt;/h2&gt;
&lt;p&gt;配置svn&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411132730691-1472544365.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置maven goal：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411132928267-2076714298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后点保存，启动立即构建后，works well。&lt;/p&gt;


&lt;p&gt;我准备给这个项目加上findbugs来进行代码分析检查。&lt;/p&gt;
&lt;p&gt;步骤很简单，我只是在build中增加了findbugs:findbugs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411133111688-1507965172.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;ok。以上配置完成，开始构建。&lt;/p&gt;
&lt;p&gt;然而构建总是报错，提示如下：&lt;/p&gt;
&lt;pre class=&quot;console-output&quot; readability=&quot;4.2654028436019&quot;&gt;
&lt;span class=&quot;error-inline&quot;&gt;&lt;span&gt;[ERROR] Failed to execute goal org.codehaus.mojo:findbugs-maven-plugin:3.0.5:findbugs (default-cli) on project my-app: Execution default-cli of goal org.codehaus.mojo:findbugs-maven-plugin:3.0.5:findbugs failed: Plugin org.codehaus.mojo:findbugs-maven-plugin:3.0.5 or one of its dependencies could not be resolved: Failed to collect dependencies at org.codehaus.mojo:findbugs-maven-plugin:jar:3.0.5 -&amp;gt; org.apache.maven.reporting:maven-reporting-impl:jar:3.0.0 -&amp;gt; org.apache.maven.doxia:doxia-core:jar:1.7 -&amp;gt; xmlunit:xmlunit:jar:1.5: Failed to read artifact descriptor for xmlunit:xmlunit:jar:1.5: Could not transfer artifact xmlunit:xmlunit:pom:1.5 from/to central (&lt;a href=&quot;https://repo.maven.apache.org/maven2&quot;&gt;&lt;span&gt;https://repo.maven.apache.org/maven2&lt;/span&gt;&lt;/a&gt;): /home/upload/Repo_backup/xmlunit/xmlunit/1.5/xmlunit-1.5.pom.part.lock (没有那个文件或目录) -&amp;gt; [Help 1]
&lt;/span&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span&gt;[ERROR] 
&lt;/span&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span&gt;[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
&lt;/span&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span&gt;[ERROR] Re-run Maven using the -X switch to enable full debug logging.
&lt;/span&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span&gt;[ERROR] 
&lt;/span&gt;&lt;span class=&quot;error-inline&quot; readability=&quot;3.1609947643979&quot;&gt;&lt;span&gt;[ERROR] For more information about the errors and possible solutions, please read the following articles:
&lt;/span&gt;&lt;span class=&quot;error-inline&quot; readability=&quot;6.2127659574468&quot;&gt;&lt;span&gt;[ERROR] [Help 1] &lt;/span&gt;&lt;a href=&quot;http://cwiki.apache.org/confluence/display/MAVEN/PluginResolutionException&quot;&gt;&lt;span&gt;http://cwiki.apache.org/confluence/display/MAVEN/PluginResolutionException&lt;/span&gt;&lt;/a&gt;排除过程：&lt;br/&gt;1.我感觉是因为私服有问题，可能私服中不存在该版本的findbugs插件的依赖，导致下载失败。&lt;p&gt;首先尝试了&lt;span&gt;将maven的settings.xml中的私服配置去掉，然后重新构建，依然有问题。后来发现项目的pom中配置了私服，因此换了个项目（该项目的pom中没有用到私服中的包），重新构建。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.问题依旧。这次依旧没有了私服，难道是maven中央仓库的问题，仔细去找了maven库，依赖都存在啊。&lt;br/&gt;3.难道是下载不下来么？ 尝试了去本地库中将&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;error-inline&quot;&gt;findbugs-maven-plugin目录删除掉，希望能重新下载下来，构建却依然报错。&lt;br/&gt;3.既然下载有问题，于是又从windows开发机器上将&lt;/span&gt;&lt;span class=&quot;error-inline&quot; readability=&quot;3&quot;&gt;findbugs-maven-plugin拷贝到centos上后，重新构建，依然报错。&lt;p&gt;后来（很后很后，昨天一下午都没搞定，所以是后到了今天上午）发现：&lt;br/&gt;编译过程中有些警告：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411130525142-528151161.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;我就想：为啥会创建这些东西失败呢？感觉没道理啊。&lt;/p&gt;
&lt;p&gt;没有权限吗？但如下图所示，我早就将该目录下的文件所有者改成了jenkins。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411130646802-273136122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;那？难道是？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411132003924-747306940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;console-output&quot;&gt;
&lt;span class=&quot;error-inline&quot;&gt;注意上图，刚开始的时候，我是从windows上上传了Repo_backup.zip，然后解压缩到Repo_backup。因为是root用户操作的，所以&lt;br/&gt;&lt;strong&gt;&lt;span&gt;理所当然，Repo_backup的用户和用户组是root&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;console-output&quot;&gt;
&lt;strong&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot; readability=&quot;3&quot;&gt;&lt;span class=&quot;error-inline&quot; readability=&quot;6&quot;&gt;而这会导致jenkins在执行时，所用的jenkins用户根本无法写入Repo_backup目录。所以才有了诸多的创建失败。&lt;p&gt;创建失败，为啥没报错呢？因为那些jar包，在我本地的windows上是有的，但是jenkins重新去maven中央仓库更新时，看到本地仓库有了，但是应该还是会更新下.lastUpdated之类的文件&lt;br/&gt;来刷新时间戳吧（我猜的）。&lt;/p&gt;&lt;p&gt;总之，当我将Repo_backup的用户和组修改为jenkins后，findbugs终于正常了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411131227075-673513481.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;

&lt;pre class=&quot;console-output&quot;&gt;
&lt;strong&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/519126/201804/519126-20180411131241762-190473532.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span&gt;所以，其实最后呢，还是因为自己的马虎大意或者说对linux还是不够懂，也可以说：已经习惯性地忽略警告信息导致了这次的大坑。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;&lt;span class=&quot;error-inline&quot;&gt;以后，大概不会再随便忽略warning信息了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 11 Apr 2018 05:39:00 +0000</pubDate>
<dc:creator>三国梦回</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/grey-wolf/p/8795095.html</dc:identifier>
</item>
<item>
<title>两款不同应用场景的Wpf分页控件 - _AlexYIN</title>
<link>http://www.cnblogs.com/y-yp/p/8795075.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/y-yp/p/8795075.html</guid>
<description>&lt;p&gt;        今天给大家分享两个Wpf分页控件，本篇博客主要介绍一些实现思路和使用方法，具体实现和应用代码请参考文末的Demo链接&lt;/p&gt;
&lt;p&gt;        废话不多说，先看一下效果~   &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/843442/201804/843442-20180411111205208-1881146190.png&quot; alt=&quot;&quot; width=&quot;608&quot; height=&quot;445&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                             （两款控件显示效果是一样的）&lt;/p&gt;


&lt;h2&gt;        一款控件是用MVVM进行数据绑定，这里用到了命令，我们暂且叫它命令驱动控件吧。  具体调用代码：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/843442/201804/843442-20180411113455422-1450915183.png&quot; alt=&quot;&quot; width=&quot;1051&quot; height=&quot;87&quot;/&gt;&lt;/p&gt;

&lt;p&gt;        其实XAML调用这仅仅一行，非常方便，  这里的Pagination 主要记录包括当前页数的一些信息，结合QueryCommand查询数据库后，把对应的数据源绑定到DataGrid，那分页信息绑定到Pagination， 这里通过扩展MvvmLight的ModelBase来实现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/843442/201804/843442-20180411112830481-1112608536.png&quot; alt=&quot;&quot; width=&quot;739&quot; height=&quot;645&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        ViewModel中的数据绑定&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/843442/201804/843442-20180411113032248-1087788764.png&quot; alt=&quot;&quot; width=&quot;892&quot; height=&quot;492&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;        另一款控件是在Code-behind直接进行数据绑定，因为在控件里用到了事件和委托，我们就叫它事件驱动控件吧。  具体调用代码：&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/843442/201804/843442-20180411113511672-1375837262.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        没错！它的XAML调用甚至更简单    这里的实现思路第一次加载直接通过ItemsSource绑定数据源， 后续加载通过委托传入列表控件和数据源，在分页控件内部进行绑定渲染&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/843442/201804/843442-20180411124352331-930213742.png&quot; alt=&quot;&quot; width=&quot;1060&quot; height=&quot;158&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    控件内部绑定实现，包含实现加载菊花图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/843442/201804/843442-20180411124626719-711077772.png&quot; alt=&quot;&quot; width=&quot;727&quot; height=&quot;338&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        控件已经介绍完了，软件一直是不断的进步和优化的，这两款控件可能还存在很多不足，欢迎大家留言提出改进，同时也希望给一些初学者带来一些灵感 :)&lt;/p&gt;
&lt;p&gt;        谢谢&lt;/p&gt;


&lt;p&gt;        链接：  &lt;a href=&quot;https://github.com/yypyinyipeng/WpfControl.git&quot; target=&quot;_blank&quot;&gt;https://github.com/yypyinyipeng/WpfControl.git&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 11 Apr 2018 04:56:00 +0000</pubDate>
<dc:creator>_AlexYIN</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/y-yp/p/8795075.html</dc:identifier>
</item>
</channel>
</rss>