<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>决策树应用（一） - DeepLearningLovers</title>
<link>http://www.cnblogs.com/xlandll/p/9410957.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xlandll/p/9410957.html</guid>
<description>&lt;p&gt;      &lt;span&gt;  上一篇讲了ID3决策树原理，现在开始拿一个例子进行实战&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、python机器学习库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       &lt;span&gt;scikit-learn。sklearn是一个Python第三方提供的非常强力的机器学习库，它包含了从数据预处理到训练模型的各个方面。在实战使用scikit-learn中可以极大的节省我们编写代码的时间以及减少我们的代码量，使我们有更多的精力去分析数据分布，调整模型和修改超参。sklearn基本包含了所有机器学习的方式，如&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Classification 分类，如SVM&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Regression 回归 ，如LR&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Clustering 非监督分类，如聚类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Dimensionality reduction 数据降维，如PCA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Model Selection 模型选择&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Preprocessing 数据预处理       &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;sklearn包含了所有的机器学习算法，例如本文将用到sklearn中的ID3算法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在python环境中可以通过 &lt;span&gt;from sklearn.XXXX import XXXX&lt;span&gt;的形式导入sklearn包，例如，本例要使用sklean中决策树将以&lt;span&gt;from sklearn import tree&lt;/span&gt;的形式在python环境中导入决策树算法。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;二、实战演练&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;span&gt;1、项目说明&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;span&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;本例数据将用上一篇文章电脑销售数据，运用ID3决策树的算法对数据进行分类，即用python编程，得到最终的决策树，数据如下&lt;/span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我将数据放入excel表格里面&lt;/span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;是为了方面python读取数据。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180803193415908-499359834.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、数据预处理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;      &lt;span&gt;这里要说明，sklearn提供的tree类，只接受数值型的数据，不接受文本数据，所以需要对数据进行预处理，在本例中需要对数据转化成&lt;span&gt;虚拟变量（dummy variable）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;   （1）虚拟变量（dummy variable）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;            虚拟变量又称虚设变量、名义变量或哑变量，用以反映质的属性的一个人工变量,是量化了的质变量，通常取值为0或1，一般地，在虚拟变量的设置中：基础类型、肯定类型取值为1；比较类型，否定类型取值为0。这些概念往往让人看不懂，其实说白了就是将数据都变成1或者0，但具体怎么转化？拿本例的age属性来说，age有三个取值｛youth，senior,middle_aged｝现在将age的取值转化为dummy variable，将youth转化为[1,0,0] ，即1代表youth，后面两个0代表senior和middle_aged，同理，将senior转化为[0,1,0]，将middle_aged转化为[0,0,1]。再拿student属性来说，student有两个属性｛yes，no｝，现在将student的取值转化为dummy variable，将yes转化为[1,0]，将no转化为[0,1]。按照同样的原理将整个表的数据都转化成dummy variable。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;            在sklearn中有个DictVectorizer类可以直接将数据转化为dummy variable，但DictVectorizer需要接受字典的形式，所以本次&lt;span&gt;数据预处理的步骤有&lt;/span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;            1、将数据转为字典形式，如表中编号1数据，转化为字典形式为：[{'age':'youth'},{'income':'high'},{'student':'no'},{'credit_rating':'fair'},{'buys'_computer:'no'}],同理其他数据也要转化呈这种形式，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;最后将这些字典放在一个列表当中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;            &lt;span&gt;2、将上一步所得的列表传入DictVectorizer中，将数据转化为dummy variable。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;     （2）代码实现预处理过程&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; data=pd.read_excel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./data/决策树1.xls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; data=&lt;span&gt;pd.DataFrame(data)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; valuedata=data.values&lt;span&gt;#&lt;/span&gt;&lt;span&gt;表里面的数据&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; header=list(data.columns)[1:6]&lt;span&gt;#&lt;/span&gt;&lt;span&gt;表头&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; featureList=[]&lt;span&gt;#&lt;/span&gt;&lt;span&gt;这个列表用于存放处理后得到的字典&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; labelList=data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Class_buys_computer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]&lt;span&gt;#&lt;/span&gt;&lt;span&gt;存放表中Class_buys_computer属性的数据&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt;&lt;span&gt; valuedata:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     featureDict=&lt;span&gt;{}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(4&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         featureDict[header[i]]=value[i+1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    featureList.append(featureDict)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;以上的代码是将数据变成字典的过程，输出的featureList为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805185248249-887174923.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;将得到的featureList传送给sklearn中的DictVectorizer的对象，最后将数据转化为dummy variable。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sklearn.feature_extraction &lt;span&gt;import&lt;/span&gt;&lt;span&gt; DictVectorizer
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sklearn &lt;span&gt;import&lt;/span&gt;&lt;span&gt; preprocessing
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; vec=&lt;span&gt;DictVectorizer()
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; dummyX=&lt;span&gt;vec.fit_transform(featureList).toarray()
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; lb=&lt;span&gt;preprocessing.LabelBinarizer()
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; dummyY=lb.fit_transform(labelList)
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;preprocessing是sklearn中的预处理模块，而preprocessing.LabelBinarizer()是专门将标签变量进行二值化，比如本例，将Class_buys_computer中的取值yes和no转化为1和0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;打印dummyX和dummyY的结果为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805190333748-2045094864.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805190451487-773109428.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;



&lt;pre&gt;
&lt;br/&gt;&lt;span&gt;3、建立决策树&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tree
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.externals.six &lt;span&gt;import&lt;/span&gt;&lt;span&gt; StringIO

clf&lt;/span&gt;=tree.DecisionTreeClassifier(criterion=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;entropy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
clf&lt;/span&gt;=clf.fit(dummyX,dummyY)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt;在python环境中通过from sklearn import tree导入决策树模块，调用tree.DecisionTreefier（）建立决策树模型，在参数中criterion是选择决策树中的类型，&lt;br/&gt;entropy代表信息熵，所以选择ID3模型。再调用fit（）函数对预处理得到的dummyX，和dummyY进行训练。将得到的clf打印出来结果为：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805232226930-57323887.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;可以看到，我们建立ID3决策树的具体参数配置，具体参数的意义，可以自行查阅。现在需要对最后的模型进行可视化，决策树的可视化需要另外安装Graphviz环境，他的下载地址为&lt;br/&gt;&lt;a href=&quot;http://www.graphviz.org/&quot;&gt;http://www.graphviz.org/&lt;/a&gt;，下载安装完后，需要加入环境变量，具体下载安装过程网上有很多。这里不再赘述。&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;allElectronicsInformationGainOri.dot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
    f&lt;/span&gt;=tree.export_graphviz(clf,feature_names=vec.get_feature_names(),out_file=f)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt;它会在本目录下生成一个叫，allElecrionInformationGainOri.dot文件，里面的内容为：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805233214469-359622796.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;这种dot文件都是文字叙述，看起来有点乱，但Graphviz可以将dot文件转化为pdf格式，内容为最后的决策树形状&lt;br/&gt;但需要执行一个命令，就是先打开windows的命令窗口， 转化dot文件至pdf可视化决策树语句：dot -Tpdf iris.dot -o outpu.pdf，再本目录里面会得到一个pdf文件&lt;br/&gt;里面是最终的决策树：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805233610205-676126697.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span readability=&quot;2&quot;&gt;这个决策树跟我们手工算出得出的形状不太一样，这是sklearn将决策树进行了优化，优化的手段有“剪枝”等处理，这将会在后续文章，进行讲解。&lt;br/&gt;至此整个应用到此完毕，请读者手动去实践一下吧。&lt;p&gt;下一篇文章： 决策树原理（二）&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;



























</description>
<pubDate>Sun, 05 Aug 2018 15:39:00 +0000</pubDate>
<dc:creator>DeepLearningLovers</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xlandll/p/9410957.html</dc:identifier>
</item>
<item>
<title>从 0 到 1 实现 React 系列 —— 4.setState优化和ref的实现 - 牧云云</title>
<link>http://www.cnblogs.com/MuYunyun/p/9427911.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MuYunyun/p/9427911.html</guid>
<description>&lt;p&gt;看源码一个痛处是会陷进理不顺主干的困局中，本系列文章在实现一个 (x)react 的同时理顺 React 框架的主干内容(JSX/虚拟DOM/组件/生命周期/diff算法/setState/ref/...)&lt;/p&gt;
&lt;h3 id=&quot;同步-setstate-的问题&quot;&gt;同步 setState 的问题&lt;/h3&gt;
&lt;p&gt;而在现有 setState 逻辑实现中，每调用一次 setState 就会执行 render 一次。因此在如下代码中，每次点击增加按钮，因为 click 方法里调用了 10 次 setState 函数，页面也会被渲染 10 次。而我们希望的是每点击一次增加按钮只执行 render 函数一次。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;export default class B extends Component {
  constructor(props) {
    super(props)
    this.state = {
      count: 0
    }
    this.click = this.click.bind(this)
  }

  click() {
    for (let i = 0; i &amp;lt; 10; i++) {
      this.setState({ // 在先前的逻辑中，没调用一次 setState 就会 render 一次
        count: ++this.state.count
      })
    }
  }

  render() {
    console.log(this.state.count)
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={this.click}&amp;gt;增加&amp;lt;/button&amp;gt;
        &amp;lt;div&amp;gt;{this.state.count}&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;异步调用-setstate&quot;&gt;异步调用 setState&lt;/h3&gt;
&lt;p&gt;查阅 setState 的 api，其形式如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;setState(updater, [callback])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它能接收两个参数，其中第一个参数 updater 可以为对象或者为函数 (&lt;code&gt;(prevState, props) =&amp;gt; stateChange&lt;/code&gt;)，第二个参数为回调函数；&lt;/p&gt;
&lt;p&gt;确定优化思路为：将多次 setState 后跟着的值进行浅合并，并借助事件循环等所有值合并好之后再进行渲染界面。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let componentArr = []

// 异步渲染
function asyncRender(updater, component, cb) {
  if (componentArr.length === 0) {
    defer(() =&amp;gt; render())       // 利用事件循环，延迟渲染函数的调用
  }

  if (cb) defer(cb)             // 调用回调函数
  if (_.isFunction(updater)) {  // 处理 setState 后跟函数的情况
    updater = updater(component.state, component.props)
  }
  // 浅合并逻辑
  component.state = Object.assign({}, component.state, updater)
  if (componentArr.includes(component)) {
    component.state = Object.assign({}, component.state, updater)
  } else {
    componentArr.push(component)
  }
}

function render() {
  let component
  while (component = componentArr.shift()) {
    renderComponent(component) // rerender
  }
}

// 事件循环，关于 promise 的事件循环和 setTimeout 的事件循环后续会单独写篇文章。
const defer = function(fn) {
  return Promise.resolve().then(() =&amp;gt; fn())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时，每点击一次增加按钮 render 函数只执行一次了。&lt;/p&gt;
&lt;h3 id=&quot;ref-的实现&quot;&gt;ref 的实现&lt;/h3&gt;
&lt;p&gt;在 react 中并不建议使用 ref 属性，而应该尽量使用&lt;a href=&quot;https://doc.react-china.org/docs/lifting-state-up.html&quot;&gt;状态提升&lt;/a&gt;，但是 react 还是提供了 ref 属性赋予了开发者操作 dom 的能力，react 的 ref 有 &lt;code&gt;string&lt;/code&gt;、&lt;code&gt;callback&lt;/code&gt;、&lt;code&gt;createRef&lt;/code&gt; 三种形式，分别如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// string 这种写法未来会被抛弃
class MyComponent extends Component {
  componentDidMount() {
    this.refs.myRef.focus()
  }
  render() {
    return &amp;lt;input ref=&quot;myRef&quot; /&amp;gt;
  }
}

// callback(比较通用)
class MyComponent extends Component {
  componentDidMount() {
    this.myRef.focus()
  }
  render() {
    return &amp;lt;input ref={(ele) =&amp;gt; {
      this.myRef = ele
    }} /&amp;gt;
  }
}

// react 16.3 增加，其它 react-like 框架还没有同步
class MyComponent extends Component {
  constructor() {
    super() {
      this.myRef = React.createRef()
    }
  }
  componentDidMount() {
    this.myRef.current.focus()
  }
  render() {
    return &amp;lt;input ref={this.myRef} /&amp;gt;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/40462264&quot;&gt;React ref 的前世今生&lt;/a&gt; 罗列了三种写法的差异，下面对上述例子中的第二种写法(比较通用)进行实现。&lt;/p&gt;
&lt;p&gt;首先在 setAttribute 方法内补充上对 ref 的属性进行特殊处理，&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function setAttribute(dom, attr, value) {
  ...
  else if (attr === 'ref') {          // 处理 ref 属性
    if (_.isFunction(value)) {
      value(dom)
    }
  }
  ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;针对这个例子中 &lt;code&gt;this.myRef.focus()&lt;/code&gt; 的 focus 属性需要异步处理，因为调用 componentDidMount 的时候，界面上还未添加 dom 元素。处理 renderComponent 函数：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function renderComponent(component) {
  ...
  else if (component &amp;amp;&amp;amp; component.componentDidMount) {
    defer(component.componentDidMount.bind(component))
  }
  ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;刷新页面，可以发现 input 框已为选中状态。&lt;/p&gt;
&lt;p&gt;&lt;embed src=&quot;http://oqhtscus0.bkt.clouddn.com/d35589fbbff45a2437c6c13e24ba8058.jpg-200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;处理完普通元素的 ref 后，再来处理下自定义组件的 ref 的情况。之前默认自定义组件上是没属性的，现在只要针对自定义组件的 ref 属性做相应处理即可。稍微修改 vdomToDom 函数如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function vdomToDom(vdom) {
  if (_.isFunction(vdom.nodeName)) { // 此时是自定义组件
    ...
    for (const attr in vdom.attributes) { // 处理自定义组件的 ref 属性
      if (attr === 'ref' &amp;amp;&amp;amp; _.isFunction(vdom.attributes[attr])) {
        vdom.attributes[attr](component)
      }
    }
    ...
  }
  ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;跑如下测试用例：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;class A extends Component {
  constructor() {
    super()
    this.state = {
      count: 0
    }
    this.click = this.click.bind(this)
  }

  click() {
    this.setState({
      count: ++this.state.count
    })
  }

  render() {
    return &amp;lt;div&amp;gt;{this.state.count}&amp;lt;/div&amp;gt;
  }
}

class B extends Component {
  constructor() {
    super()
    this.click = this.click.bind(this)
  }

  click() {
    this.A.click()
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={this.click}&amp;gt;加1&amp;lt;/button&amp;gt;
        &amp;lt;A ref={(e) =&amp;gt; { this.A = e }} /&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oqhtscus0.bkt.clouddn.com/reactref%E6%B5%8B%E8%AF%951&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MuYunyun/cpreact&quot;&gt;项目地址&lt;/a&gt;，&lt;a href=&quot;https://github.com/MuYunyun/cpreact/blob/master/.github/PULL_REQUEST_TEMPLATE.md&quot;&gt;关于如何 pr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本系列文章拜读和借鉴了 &lt;a href=&quot;https://github.com/hujiulong/simple-react&quot;&gt;simple-react&lt;/a&gt;，在此特别感谢 &lt;a href=&quot;https://github.com/hujiulong&quot;&gt;Jiulong Hu&lt;/a&gt; 的分享。&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 15:35:00 +0000</pubDate>
<dc:creator>牧云云</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MuYunyun/p/9427911.html</dc:identifier>
</item>
<item>
<title>Nginx-rtmp 直播媒体实时流实现 - 无脑仔的小明</title>
<link>http://www.cnblogs.com/wunaozai/p/9427730.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wunaozai/p/9427730.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;0. 前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这段时间在搭建一个IPCamera项目服务器。视频点对点通话，客户端会查看设备端的音视频实时流。为了省流量，是通过P2P进行穿透。但是由于NAT设备的原因和IPV4的枯竭。有些设备是无法进行点对点传输实时流。所以需要进行服务器转发。这里为了快速实现原型，同时参考现在主流的流媒体协议。发现很多使用的是RTMP协议。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下图是总体设计图，为了整合多平台，会自建RTMP流媒体服务器和使用云厂商SaaS的RTMP流媒体服务。但是由于有时候会传输一些非流媒体数据，需要传输一些二进制文件，所以会需要自定义媒体转发服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　以下是我实际项目中，用到的架构实现流程图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/485067/201808/485067-20180805224250622-955288547.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;. 客户端A无法进行P2P穿透，请求业务服务器要进行转发。
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;. 业务服务器根据客户端A，请求类型，返回对应的转发服务器地址和对应的房间号RoomID/&lt;span&gt;Token等信息
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;. 上述请求类型，可以是请求自建RTMP流媒体服务，购买于云厂商RTMP流媒体服务或者自定义协议媒体转发服务
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;. 客户端A得到业务服务器返回的媒体服务器地址和RoomID/&lt;span&gt;Token
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;. 通过信令服务器或者MQTT服务器，把对应的媒体服务器地址和RoomID/&lt;span&gt;Token告诉另一端客户端B
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;. 客户端A和客户端B同时进入相同房间Room，客户端A进行推流，客户端B进行拉流
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;. 其他媒体信息，如编解码格式，清晰度，播放，暂停，拍照等命令，通过上述信令或MQTT服务器进行命令控制
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 编译Nginx&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　RTMP流媒体服务器，现成的开源方案有很多，有SRS，Red5，wowoza，FMS等，我这里使用的是Nginx的rtmp插件实现实时流转发。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下载 nginx-rtmp-module  &lt;a href=&quot;https://github.com/arut/nginx-rtmp-module&quot;&gt;https://github.com/arut/nginx-rtmp-module&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　重新编译nginx &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; --prefix=/opt/nginx --with-stream --with-http_ssl_module --with-stream_ssl_module --with-debug --add-module=../nginx-rtmp-module
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 配置Nginx.conf&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　基本的nginx配置，这里就不进行介绍了，需要了解的可以参考我其他博客，里面有介绍。这里只介绍rtmp段的定义。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;rtmp{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    server{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         listen &lt;span&gt;8081&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         access_log logs/&lt;span&gt;rtmp_access.log;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         on_connect http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_connect;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        application rtmp {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            live on;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            notify_method get;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             on_play http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_play;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             on_publish http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_publish;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             on_done http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_done;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             on_play_done http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_play_done;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             on_publish_done http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_publish_done;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             on_record_done http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_record_done;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             on_update http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_update;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            notify_update_timeout 10s;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        application vod {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             play /opt/openresty/&lt;span&gt;video;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. HTTP异步通知回调&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　Nginx-rtmp-module插件实现了针对RTMP协议的一些命令做了事件通知。这里我通过一个简单的SpringBoot项目，快速搭建一个HTTP服务来接收RTMP的回调。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.wunaozai.rtmp.notify.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; @RequestMapping(value=&quot;/v1/rtmp/&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RTMPNotifyController {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     @GetMapping(value=&quot;/on_connect&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onConnect(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         debug(request, &quot;on_connect&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_connect&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     @GetMapping(value=&quot;/on_play&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onPlay(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         debug(request, &quot;on_play&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_play&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     @GetMapping(value=&quot;/on_publish&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onPublish(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         debug(request, &quot;on_publish&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_publish&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     @GetMapping(value=&quot;/on_done&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onDone(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         debug(request, &quot;on_done&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_done&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     @GetMapping(value=&quot;/on_play_done&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onPlayDone(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         debug(request, &quot;on_play_done&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_play_done&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     @GetMapping(value=&quot;/on_publish_done&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onPublishDone(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         debug(request, &quot;on_publish_done&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_publish_done&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     @GetMapping(value=&quot;/on_record_done&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onRecordDone(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         debug(request, &quot;on_record_done&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_record_done&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     @GetMapping(value=&quot;/on_update&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onUpdate(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         debug(request, &quot;on_update&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_update&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     
&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String debug(HttpServletRequest request, String action){
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         String str = action + &quot;: &quot; + request.getRequestURI() + &quot; &quot; +&lt;span&gt; request.getQueryString();
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        System.out.println(str);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; str;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 运行效果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(1) 启动nginx和SpringBoot&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(2) 以下是SpringBoot打印信息(各位可以简单分析一下这些日志的)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178269841&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; on_publish: /v1/rtmp/on_publish app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=541&amp;amp;call=publish&amp;amp;name=room&amp;amp;type=live&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=541&amp;amp;call=update_publish&amp;amp;time=10&amp;amp;timestamp=3999&amp;amp;name=room&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; on_done: /v1/rtmp/on_done app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=541&amp;amp;call=done&amp;amp;name=room&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; on_publish_done: /v1/rtmp/on_publish_done app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=541&amp;amp;call=publish_done&amp;amp;name=room&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178305623&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; on_publish: /v1/rtmp/on_publish app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=publish&amp;amp;name=room&amp;amp;type=live&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=10&amp;amp;timestamp=7296&amp;amp;name=room&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=20&amp;amp;timestamp=17248&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=30&amp;amp;timestamp=27328&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=40&amp;amp;timestamp=37280&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=50&amp;amp;timestamp=47296&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=60&amp;amp;timestamp=57312&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=70&amp;amp;timestamp=67264&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178380351&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; on_play: /v1/rtmp/on_play app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=557&amp;amp;call=play&amp;amp;name=room&amp;amp;start=4294966296&amp;amp;duration=0&amp;amp;reset=0&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; on_play_done: /v1/rtmp/on_play_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=557&amp;amp;call=play_done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; on_done: /v1/rtmp/on_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=557&amp;amp;call=done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=80&amp;amp;timestamp=77344&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178388202&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; on_play: /v1/rtmp/on_play app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=563&amp;amp;call=play&amp;amp;name=room&amp;amp;start=4294966296&amp;amp;duration=0&amp;amp;reset=0&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; on_done: /v1/rtmp/on_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=563&amp;amp;call=done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; on_play_done: /v1/rtmp/on_play_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=563&amp;amp;call=play_done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=90&amp;amp;timestamp=87360&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178396146&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; on_play: /v1/rtmp/on_play app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=569&amp;amp;call=play&amp;amp;name=room&amp;amp;start=4294966296&amp;amp;duration=0&amp;amp;reset=0&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; on_done: /v1/rtmp/on_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=569&amp;amp;call=done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; on_play_done: /v1/rtmp/on_play_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=569&amp;amp;call=play_done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178403666&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; on_play: /v1/rtmp/on_play app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=574&amp;amp;call=play&amp;amp;name=room&amp;amp;start=4294966296&amp;amp;duration=0&amp;amp;reset=0&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=100&amp;amp;timestamp=97311&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=574&amp;amp;call=update_play&amp;amp;time=10&amp;amp;timestamp=105504&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=110&amp;amp;timestamp=107199&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; on_done: /v1/rtmp/on_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=574&amp;amp;call=done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; on_play_done: /v1/rtmp/on_play_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//rtmp.wunaozai.com&lt;/span&gt;&lt;span&gt;:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=574&amp;amp;call=play_done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=120&amp;amp;timestamp=117344&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=130&amp;amp;timestamp=122815&amp;amp;name=room&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　(3) 客户端进行推流，这里的推流软件，我是使用这个 http://www.iavcast.com/html/ruanjian/iavcast.html &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/485067/201808/485067-20180805231915378-1626592119.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(4) 移动端，我使用微信小程序里的 腾讯视频云  这个小程序里面有RTMP测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/485067/201808/485067-20180805232149241-1055414099.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(5) nginx-rtmp 日志&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;18&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PUBLISH &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; - &lt;span&gt;2646572&lt;/span&gt; &lt;span&gt;687&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FMLE/3.0 (compatible; FMSc/1.0)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; (1m 46s)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;:&lt;span&gt;49&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;542&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;542&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;542&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;542&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;871&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;647163&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (12s)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;31&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PUBLISH &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; - &lt;span&gt;4961955&lt;/span&gt; &lt;span&gt;409&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FMLE/3.0 (compatible; FMSc/1.0)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; (1m 30s)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;06&lt;/span&gt;:&lt;span&gt;47&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PUBLISH &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; - &lt;span&gt;425763&lt;/span&gt; &lt;span&gt;529&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FMLE/3.0 (compatible; FMSc/1.0)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; (13s)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;871&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt;:&lt;span&gt;37&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;871&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt;:&lt;span&gt;45&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;871&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;926026&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (17s)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PUBLISH &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; - &lt;span&gt;7061016&lt;/span&gt; &lt;span&gt;409&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FMLE/3.0 (compatible; FMSc/1.0)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; (2m 20s)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5. RTMP鉴权方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　 一般商用的话，为了防止被其他人使用和安全性考虑，所以需要对RTMP进行鉴权处理。鉴权如果有特殊性的，可以通过修改nginx-rtmp-module的源代码，然后进行修改，其实就是增加个auth函数，这个函数可以查询数据库之类的，然后决定返回0成功还是-1表示失败。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　除了上面说到的方式，还可以通过简单的方式，就是上面提到的HTTP回调。如果HTTP回调返回的HTTP状态码是2xx的，表示成功。如果是返回5xx的状态码，那么表示失败。那样的话，服务器就是断开RTMP连接。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　就是在rtmp://rtmp.wunaozai.com/rtmp_live/room?username=username&amp;amp;password=password&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　至于实现，这里暂时还没有，其实就是在SpringBoot项目中对每个请求，判断一下参数即可。如果后面有机会就详细写一下，关联Redis数据库，实现房间号功能。但是可能不会写了，因为实际上不难。就是整个流程跑通还是比较多代码要写的，在博客里贴太多代码有点不好。博客最主要的还是提供思路。实际实现就应该在项目中实现了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;6. 其他&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这里是一些配置说明和示例&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;Application 创建一个RTMP应用，这里有点区别于http的location
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;Timeout 60s 
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;stocket超时，可以配合keepalive和ping值来实现不让服务器端长期处于监听连接客户端状态，实现快速关掉socket
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;Ping 3m
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;ping_timeout 30s
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;RTMP ping用于检查活动连接的协议。发送一个特殊的包远程连接，在ping_timeout指定时间内期待一个回复，如果没有收到回复，连接断开
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; max_streams &lt;span&gt;32&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;设置RTMP流的最大数目，单一流数据最大限制，一般默认的32就可以了
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; ack_window &lt;span&gt;5000000&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;设置RTMP窗口的大小
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; chunk_size &lt;span&gt;4096&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;数据块大小 设置值越大CPU负载就越小
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;max_queue
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;最大队列数，一般默认即可
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;max_message 1M
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;输入数据消息的最大大小。所有输入数据消息都会保存在内存中，等待完成流媒体转发。在理论上传入的消息可以是非常大，对服务器稳定性影响较大，所以一般默认即可。
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;out_queue
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;out_cork
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;Buflen 5s
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;设置默认缓冲区长度。通常客户端发送播放前RTMP set_buflen命令并重置该设置
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;访问控制
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;Access
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; Allow/&lt;span&gt;deny
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; 允许来自指定地址或者所有地址发布/&lt;span&gt;播放
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; Allow public &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;Deny publish all;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; Allow play &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;Deny play all;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;Exec命令
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;Exce 
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;exec_options on;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;启动一些exec指令选项，通过一些exec事件来干预整个RTMP流
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;可以仔细一些外部编解码功能
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; Exec ffmpeg -i rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost?src/$name -vcodec libx264 -vprofile baseline -g 10 -s 300x200 -acodec libfaac -ar 44100 -ac 1 -f flv rtmp:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/hls/$name 2&amp;gt;&amp;gt; /var/log/ffmpeg-$name.log;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;Exce_statc 
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;类似exce，属于静态命令，不支持传递上下文参数
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;Exec_kill_signal term;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;Exec_kill_signal user1;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; Exec_kill_signal &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;Exec_pull 
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;Exec_push
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;Exec_publish
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;指定与参数外部命令要在发布事件执行。
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;Exec_play
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;指定与要在打开事件执行外部命令
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;Exec_play_done
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;指定要在打开完成事件执行外部命令
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;Exec_publish_done
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;Exec_record_done
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;例子
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; exec_play bash -c “&lt;span&gt;echo&lt;/span&gt; $addr $pageurl &amp;gt;&amp;gt; /tmp/&lt;span&gt;clients”
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; Exec_publish base -c “&lt;span&gt;echo&lt;/span&gt; $addr $flashver &amp;gt;&amp;gt; /tmp/&lt;span&gt;publishers”
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;转录
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; Exec_record_done ffmpeg -y -i $path -acodec libmp31ame -&lt;span&gt;ar&lt;/span&gt; &lt;span&gt;44100&lt;/span&gt; -ac &lt;span&gt;1&lt;/span&gt; -vcodec libx264 $&lt;span&gt;dirname&lt;/span&gt;/$&lt;span&gt;basename&lt;/span&gt;&lt;span&gt;.mp4
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; 
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;Live 模式
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;Live on
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;切换直播模式，即一对多广播
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; Meta on/copy/&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;奇幻发送元数据到客户端 默认on
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; Interleave on/&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;切换交叉模式。在该模式下，音视频会在同一个RTMPchunk流中传输。默认为off
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; wait_key on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;使视频流从一个关键帧开始，默认为off
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; wait_video on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;在一个视频帧发送前禁用音频。默认off
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 通过wait_key/&lt;span&gt;wait_video进行组合以使客户端可以收到具有所有其他数据的视频关键帧。但这样会增加连接延迟。不过可以通过编解码器中调整关键帧间隔来减少延迟。
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;Publish_notify on
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;发送NetStream.Publish.Start和NetStream.Publish.Stop给用户，默认off
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;Drop_idle_publisher 10s
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;终止指定时间内闲置（没有音频、视频）的发布连接，默认为off。注意这个仅仅对于发布模式的连接起作用（发送publish命令之后）
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;Sync 10ms
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;同步音视频流。如果用户带宽不足以接收发布率，服务器会丢弃一些帧。这将导致同步问题。当时间戳差超过sync指定值，将会发送一个绝对帧来解决这个问题，默认为300ms
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;Play_restart off
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; 使nginx-&lt;span&gt;rtmp能够在发布启动或者停止时发送NetStream.Play.Start 和 NetStrem.Play.Stop到每个用户。如果关闭的话，那么每个用户就只能在回放的开始结束时收到该通知了。默认为on
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;Record 模式
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; Record off|all|audio|video|keyframes|&lt;span&gt;manual
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;切换录制模式，流可以被记录到flv文件
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;Off 不录制
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;All 录制音频和视频
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;Audio
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;Video
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;Keyframes 只录制关键视频帧
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;Manual 不自动启动录制，使用控制接口来进行启动和停止
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; Record_path /tmp/&lt;span&gt;rec
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;指定录制的flv文件存放目录
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; Record_suffix -%d-%b-%y-%&lt;span&gt;T.flv
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;录制后缀strftime格式
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; Record_unique on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;是否添加时间戳到录制文件，防止文件被覆盖，默认off
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; record_append on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;切换文件附加模式。开启后，录制时将新数据附加到旧文件后面。默认off
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; record_lock on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;锁定文件，调用系统的fcntl
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;record_max_size 128K
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;设置录制文件的最大值
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; Record_max_frames &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;设置每个录制文件的视频帧最大数量
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; Record_interval 1s/&lt;span&gt;15m
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;在这个指令指定的时间之后重启录制。默认off设置为0表示录制中无延迟。如果record_unique为off时所有的记录都会被写到同一个文件中。否则就会以时间戳区分在不同文件
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; Record_notify on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;奇幻当定义录制启动或者停止文件时发送NetStream.Record.Start和NetStream.Record.Stop状态信息onStatus到发布者。
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;应用
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;Application rtmp{
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;Live on;
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;Record all;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; Record_path /var/&lt;span&gt;rec;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;Recorder audio{
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;Record audio;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;Record_suffix .audio.flv;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;Recorder chunked{
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;Record all;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;Record_interval 15s;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; Record_path /var/rec/&lt;span&gt;chunked;
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;创建录制块。可以在单个application中创建多个记录 。
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; 
&lt;span&gt;125&lt;/span&gt; &lt;span&gt;VOD媒体
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; Play &lt;span&gt;dir&lt;/span&gt;|http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;loc &lt;/span&gt;
&lt;span&gt;127&lt;/span&gt; 播放指定目录或者HTTP地址的flv或者mp4文件。注意HTTP播放是要在整个文件下载完后才开始播放。同一个play可以播放多个视频地址(用于负载)。MP4格式要在编解码都被RTMP支持才可以播放。一般常见的就是H264/&lt;span&gt;AAC
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;Application vod{
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; Play /var/&lt;span&gt;flvs;
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;Application vod_http{
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; Play http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/vod;&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; Play_temp_path /&lt;span&gt;www
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;设置远程VOD文件完全下载之后复制于play_temp_path之后的路径。空值的话禁用此功能。
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; Play_local_path &lt;span&gt;dir&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt; 在播放前设置远程存储VOD文件路径，默认/&lt;span&gt;tmp
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; Play_local_path /tmp/&lt;span&gt;videos;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; Paly /tmp/videos http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/videos&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; 表示播放视频，先播放本地缓存，如果没有的话，从localhost/videos下载到本地/tmp/&lt;span&gt;videos后，在进行播放
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; 
&lt;span&gt;142&lt;/span&gt; 
&lt;span&gt;143&lt;/span&gt; &lt;span&gt;Relay模式
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; Pull url [key=&lt;span&gt;value]
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;创建pull中继。主要是从远程服务器拉取流媒体。并进行重新发布。
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; Url语法 [rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;]host[:port][/app[/playpath]] 如果application找不到那么将会使用本地application名，如果找不到playpath那么久用当前流名称。&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt; 参数如下(使用Key=&lt;span&gt;Value方式)
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;app 明确application名
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;Name 捆绑到relay的bending流名称。如果为空，那么会使用application中所有本地流
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;tcUrl
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;pageUrl
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;swfUrl
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;flashVer
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;playPath
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;Live
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;Start
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;Stop
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &lt;span&gt;Static
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; Pull rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;cdn.example.com/main/ch?id=1234 name=channel;&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt; Push url [key=&lt;span&gt;value]
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; &lt;span&gt;与pull类似，只是push推送发布流到远程服务器。
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;Push_reconnect 1s
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;在断开连接后，在push重新连接钱等待的时间，默认3秒
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;Session_relay on;
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;切换会话relay模式。在这种情况下关闭时relay销毁。
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; 
&lt;span&gt;167&lt;/span&gt; &lt;span&gt;Notify 模式
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; &lt;span&gt;这个功能主要是提供HTTP回调。当发送一些连接操作是，一个HTTP请求异步发送。命令处理会被暂停挂起，知道它返回结果代码。当HTTP返回2xx成功状态码时，RTMP会话继续。3xx状态码会使RTMP重定向到另一个从HTTP返回头获取到的application，否则连接丢失。其他状态码，连接断开。目前用来做简单的鉴权。
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; &lt;span&gt;On_connect url
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt; &lt;span&gt;设置HTTP连接回调。当客户分发连接命令时。
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; &lt;span&gt;例子：
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; On_connect http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/my_auth;&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt; Location /&lt;span&gt;on_connect{
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; If($arg_flashver !=&lt;span&gt; “my_secret_flashver”){
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; Rewrite ^.*$ fallback?&lt;span&gt;permanent;
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; &lt;span&gt;On_play url
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; &lt;span&gt;设置HTTP播放回调。分发客户分发播放命令时。
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;http {
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt; Location /&lt;span&gt;redirect {
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; Rewrite ^.*$ newname?&lt;span&gt;permanent;
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; &lt;span&gt;Rtmp{
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt; &lt;span&gt;Application myqpp{
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &lt;span&gt;Live on;
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt; On_play http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/redirect;&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; &lt;span&gt;On_publish
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; &lt;span&gt;On_doone
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; &lt;span&gt;On_play_done
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt; &lt;span&gt;On_publish_done
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; &lt;span&gt;On_record_done
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt; &lt;span&gt;On_update
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt; &lt;span&gt;Notify_update_timeout
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;设置on_update回调时间
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; Notify_update_strict on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;Notify_relay_redirect on
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; &lt;span&gt;Notify_method get
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt; 设置HTTP方法通知，默认是application/x-www-form-urlencodeed 的POST内容类型。有时候可能会需要GET方法，在nginx的http{}部分处理调用。在这种情况下可以使用arg_*&lt;span&gt;变量去访问参数。
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt; &lt;span&gt;例如如果是method为get时
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt; Location /&lt;span&gt;on_play{
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; If($arg_pageUrl ~*&lt;span&gt; localhost){
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt; Return &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt; Return &lt;span&gt;500&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt; 
&lt;span&gt;211&lt;/span&gt; &lt;span&gt;HLS 模式
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt; Hls on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt; &lt;span&gt;使application 切换HLS协议直播
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt; Hls_path /tmp/&lt;span&gt;hls;
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt; &lt;span&gt;设置HLS播放列表和分段目录。这一目录必须在nginx启动前就已经存在。
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; &lt;span&gt;Hls_fragment 15s;
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; &lt;span&gt;设置HLS分段长度，默认5秒，这个跟直播延迟有比较大的影响
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; &lt;span&gt;Hls_playlist_length 20m;
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt; &lt;span&gt;设置HLS播放列表长度，默认30秒。这个跟直播缓存有关。
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt; Hls_sync &lt;span&gt;time&lt;/span&gt;
&lt;span&gt;221&lt;/span&gt; 设置HLS时间戳同步阈值。默认2ms。这个功能防止由低分辨率RTMP(1KHz)转换到高分辨率MPEG-&lt;span&gt;TS(90KHz)之后出现的噪音。
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt; Hls_continuous on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt; &lt;span&gt;切换HLS连续模式，默认off。
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt; Hls_nested on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt; &lt;span&gt;切换HLS嵌套模式。默认off。
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt; Hls_cleanup on|&lt;span&gt;off;
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt; &lt;span&gt;切换HLS清理。默认on
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt; 
&lt;span&gt;229&lt;/span&gt; &lt;span&gt;AccessLog日志
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; Access_log off|&lt;span&gt;path [format_name]
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt; &lt;span&gt;Log_format new_format ‘$remote_addr’;
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt; Access_log logs/&lt;span&gt;rtmp_access.log new_format;
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt; &lt;span&gt;Log_format 指定日志格式
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt; &lt;span&gt;创建指定的日志格式。日志格式看起来很像 nginx HTTP 日志格式。日志格式里支持的几个变量有：
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt; * connection -&lt;span&gt; 连接数。
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt; * remote_addr -&lt;span&gt; 客户端地址。
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt; * app -&lt;span&gt; application 名。
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt; * name -&lt;span&gt; 上一个流名。
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt; * args - 上一个流播放/&lt;span&gt;发布参数。
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt; * flashver -&lt;span&gt; 客户端 flash 版本。
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt; * swfurl -&lt;span&gt; 客户端 swf url。
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt; * tcurl -&lt;span&gt; 客户端 tcUrl。
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt; * pageurl -&lt;span&gt; 客户端页面 url。
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt; * command - 客户端发送的播放/发布命令：NONE、PLAY、PUBLISH、PLAY+&lt;span&gt;PUBLISH。
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; * bytes_sent -&lt;span&gt; 发送到客户端的字节数。
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt; * bytes_received -&lt;span&gt; 从客户端接收到的字节数。
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt; * time_local -&lt;span&gt; 客户端连接结束的本地时间。
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt; * session_time -&lt;span&gt; 持续连接的秒数。
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt; * session_readable_time -&lt;span&gt; 在可读格式下的持续时间。
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt; &lt;span&gt;默认的日志格式叫做 combined。这里是这一格式的定义：
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt; $remote_addr [$time_local] $command &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$args&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt; 
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt; $bytes_received $bytes_sent &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$pageurl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$flashver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ($session_readable_time)
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt; 
&lt;span&gt;254&lt;/span&gt; &lt;span&gt;Limits限制
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt; &lt;span&gt;max_connections number;
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt; &lt;span&gt;设置rtmp引擎最大连接数，默认off
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt; 
&lt;span&gt;258&lt;/span&gt; &lt;span&gt;Application hls{
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt; &lt;span&gt;Live on;
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; &lt;span&gt;Hls on;
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt; Hls_path /tmp/&lt;span&gt;hls;
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt; &lt;span&gt;Hls_fragment 15s;
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参考资料&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://github.com/arut/nginx-rtmp-module&quot;&gt;https://github.com/arut/nginx-rtmp-module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://blog.csdn.net/cui918/article/details/53540397&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/cui918/article/details/53540397&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/zx-admin/p/5783523.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/zx-admin/p/5783523.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/lidabo/p/7099501.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/lidabo/p/7099501.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://blog.csdn.net/wei389083222/article/details/78721074&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/wei389083222/article/details/78721074&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文地址： &lt;a href=&quot;https://www.cnblogs.com/wunaozai/p/9427730.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/wunaozai/p/9427730.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 15:35:00 +0000</pubDate>
<dc:creator>无脑仔的小明</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wunaozai/p/9427730.html</dc:identifier>
</item>
<item>
<title>微信小程序之多列表的显示和隐藏功能（附源码） - yanyw</title>
<link>http://www.cnblogs.com/YYW303/p/9427753.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YYW303/p/9427753.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4041074-105a3a3fff873861.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;51Y58PICRDJ.jpg&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;今天在项目碰到一个问题，之前在项目首页实现单列表的显示和隐藏，通过wx:if判断就可实现，现在要实现多列表的单项显示和隐藏功能应该如何实现呢？如果还用wx:if实现的话会出现点击一个列表项，多个列表同时显示和隐藏，明显不适合功能需求，然后简单地查了资料也没发现有类似的功能，最后思考一番后，慢慢地理清了思路...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;效果图&quot;&gt;效果图：&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4041074-9d66bfd6440d7bb6.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;显示和隐藏.gif&quot;/&gt;&lt;/p&gt;
&lt;h6 id=&quot;实现思路&quot;&gt;实现思路：&lt;/h6&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;实现单个列表的显示和隐藏应该使用唯一元素让程序知道你应该显示和隐藏哪个列表项，可以用数据的id；&lt;/li&gt;
&lt;li&gt;css中定义一个hidden{display：none}控制显示和隐藏，然后通过三元运算符来判断；&lt;/li&gt;
&lt;li&gt;wxml定义一个点击事件来动态修改这个列表项的变量值。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h6 id=&quot;功能实现&quot;&gt;功能实现：&lt;/h6&gt;
&lt;p&gt;好了，思路有了，就开始按照思路来用代码验证。果不其然，使用代码实现之后，发现自己的思路还是没错的。此功能点也可以应用到其它类似的列表的显示和隐藏中。&lt;/p&gt;
&lt;h6 id=&quot;示例代码&quot;&gt;示例代码：&lt;/h6&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!--pages/myOrder/myOrder.wxml--&amp;gt;
&amp;lt;view class='container'&amp;gt;
  &amp;lt;!-- 订单列表 --&amp;gt;
  &amp;lt;block wx:for-items=&quot;{{carInfoData}}&quot;&amp;gt;
    &amp;lt;view class='card  b-shadow' bindtap='toggleBtn' id=&quot;{{item.id}}&quot;&amp;gt;
      &amp;lt;view class='nearCard-fl'&amp;gt;
        &amp;lt;image src='{{item.imgurl}}'&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;/view&amp;gt;
      &amp;lt;view class='nearCard-fr'&amp;gt;
        &amp;lt;view&amp;gt;日期：
          &amp;lt;text class='c-green'&amp;gt;{{item.useDate}}&amp;lt;/text&amp;gt;
        &amp;lt;/view&amp;gt;
        &amp;lt;view&amp;gt;车型：
          &amp;lt;text class='c-green'&amp;gt;{{item.cx}}&amp;lt;/text&amp;gt;
        &amp;lt;/view&amp;gt;
        &amp;lt;view&amp;gt;时长：
          &amp;lt;text class='c-green'&amp;gt;{{item.time}}&amp;lt;/text&amp;gt;
        &amp;lt;/view&amp;gt;
        &amp;lt;view&amp;gt;费用：
          &amp;lt;text class='c-green'&amp;gt;{{item.feiyong}}&amp;lt;/text&amp;gt;
        &amp;lt;/view&amp;gt;
      &amp;lt;/view&amp;gt;
      &amp;lt;view class='down clearfix {{uhide==item.id?&quot;&quot;:&quot;hidden&quot;}}'&amp;gt;
        &amp;lt;view class='ml30'&amp;gt;启用时间：2018.01.01 11:33&amp;lt;/view&amp;gt;
        &amp;lt;view class='ml30'&amp;gt;结束时间：2018.01.01 11:33&amp;lt;/view&amp;gt;
        &amp;lt;view class='ml30'&amp;gt;租赁地区：舟山市桃花岛景区海湾浪琴&amp;lt;/view&amp;gt;
        &amp;lt;view class='feedBack'&amp;gt;意见反馈&amp;lt;/view&amp;gt;
      &amp;lt;/view&amp;gt;
    &amp;lt;/view&amp;gt;
  &amp;lt;/block&amp;gt;
&amp;lt;/view&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;// pages/myOrder/myOrder.js
Page({

  /**
   * 页面的初始数据
   */
  data: {
    uhide: 0
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    var that = this;

    var data = {
      &quot;datas&quot;: [
        {
          &quot;id&quot;: 1,
          &quot;imgurl&quot;: &quot;../../images/car.png&quot;,
          &quot;useDate&quot;: &quot;2017-12-22&quot;,
          &quot;cx&quot;: &quot;奇瑞EQ1&quot;,
          &quot;time&quot;: &quot;1小时&quot;,
          &quot;feiyong&quot;: &quot;20元&quot;
        },
        {
          &quot;id&quot;: 2,
          &quot;imgurl&quot;: &quot;../../images/car.png&quot;,
          &quot;useDate&quot;: &quot;2017-12-22&quot;,
          &quot;cx&quot;: &quot;奇瑞EQ1&quot;,
          &quot;time&quot;: &quot;1小时&quot;,
          &quot;feiyong&quot;: &quot;20元&quot;
        },
        {
          &quot;id&quot;: 3,
          &quot;imgurl&quot;: &quot;../../images/car.png&quot;,
          &quot;useDate&quot;: &quot;2017-12-22&quot;,
          &quot;cx&quot;: &quot;奇瑞EQ1&quot;,
          &quot;time&quot;: &quot;1小时&quot;,
          &quot;feiyong&quot;: &quot;20元&quot;
        },
        {
          &quot;id&quot;: 4,
          &quot;imgurl&quot;: &quot;../../images/car.png&quot;,
          &quot;useDate&quot;: &quot;2017-12-22&quot;,
          &quot;cx&quot;: &quot;奇瑞EQ1&quot;,
          &quot;time&quot;: &quot;1小时&quot;,
          &quot;feiyong&quot;: &quot;20元&quot;
        }
      ]
    };
    //console.log(data.datas);
    //设置车辆展示信息
    that.setData({
      carInfoData: data.datas
    })
  },

  //点击切换隐藏和显示
  toggleBtn: function (event) { 
    var that = this;
    var toggleBtnVal = that.data.uhide;
    var itemId = event.currentTarget.id; 
    if (toggleBtnVal == itemId) {
      that.setData({
        uhide: 0
      })
    } else {
      that.setData({
        uhide: itemId
      })
    } 
  }
})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;GitHub源码地址：&lt;a href=&quot;https://github.com/1501372739/wx-show.git&quot;&gt;小程序显示和隐藏&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 14:56:00 +0000</pubDate>
<dc:creator>yanyw</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/YYW303/p/9427753.html</dc:identifier>
</item>
<item>
<title>Apollo 9 — adminService 主/灰度版本发布 - 莫那-鲁道</title>
<link>http://www.cnblogs.com/stateis0/p/9427663.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stateis0/p/9427663.html</guid>
<description>&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;Controller 层&lt;/li&gt;
&lt;li&gt;Service 层 publish 方法&lt;/li&gt;
&lt;li&gt;发送 ReleaseMessage 消息&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;controller-层&quot;&gt;1. Controller 层&lt;/h2&gt;
&lt;p&gt;主版本发布即点击主版本发布按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-c827c10ed25ebd7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;具体接口位置：&lt;code&gt;com.ctrip.framework.apollo.adminservice.controller&lt;/code&gt; 包下 &lt;code&gt;ReleaseController#publish&lt;/code&gt;&lt;br/&gt;实际上灰度版本发布也是调用这个接口的。&lt;br/&gt;代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;  /**
   * 主版本发布
   */
  @Transactional
  @RequestMapping(path = &quot;/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases&quot;, method = RequestMethod.POST)
  public ReleaseDTO publish(@PathVariable(&quot;appId&quot;) String appId,
                            @PathVariable(&quot;clusterName&quot;) String clusterName,
                            @PathVariable(&quot;namespaceName&quot;) String namespaceName,
                            @RequestParam(&quot;name&quot;) String releaseName,
                            @RequestParam(name = &quot;comment&quot;, required = false) String releaseComment,
                            @RequestParam(&quot;operator&quot;) String operator,
                            @RequestParam(name = &quot;isEmergencyPublish&quot;, defaultValue = &quot;false&quot;) boolean isEmergencyPublish) {
    // 校验存在与否
    Namespace namespace = namespaceService.findOne(appId, clusterName, namespaceName);
    if (namespace == null) {
      throw new NotFoundException(String.format(&quot;Could not find namespace for %s %s %s&quot;, appId,
                                                clusterName, namespaceName));
    }
    // 发布
    Release release = releaseService.publish(namespace, releaseName, releaseComment, operator, isEmergencyPublish);

    //send release message 发送消息到 ReleaseMessage
    Namespace parentNamespace = namespaceService.findParentNamespace(namespace);
    String messageCluster;
    if (parentNamespace != null) {
      messageCluster = parentNamespace.getClusterName();
    } else {
      messageCluster = clusterName;
    }
    messageSender.sendMessage(ReleaseMessageKeyGenerator.generate(appId, messageCluster, namespaceName),
                              Topics.APOLLO_RELEASE_TOPIC);
    return BeanUtils.transfrom(ReleaseDTO.class, release);
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;该层主要做了 2 件事情，1是调用 Service 层的 public 方法做真正的发布操作，2是发送“发布消息”到数据库——等待 ConfigService 消费。&lt;/p&gt;
&lt;p&gt;所以，我们主要关注 Service 层的 publish 方法。&lt;/p&gt;
&lt;h2 id=&quot;service-层-publish-方法&quot;&gt;2. Service 层 publish 方法&lt;/h2&gt;
&lt;p&gt;该方法有些繁琐，主要流程图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-7e6e131876893357.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;publish 流程图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以通过比对流程图和代码来看。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;  @Transactional
  public Release publish(Namespace namespace, String releaseName, String releaseComment,
                         String operator, boolean isEmergencyPublish) {
    // 检查锁
    checkLock(namespace, isEmergencyPublish, operator);
    // 获取 item
    Map&amp;lt;String, String&amp;gt; operateNamespaceItems = getNamespaceItems(namespace);

    // 根据当前 namespace 找到父 namespace, 也就是灰度的主版本.
    Namespace parentNamespace = namespaceService.findParentNamespace(namespace);

    //branch release // 父 namespace 不是 null, 说明当前就是灰度版本.
    if (parentNamespace != null) {
      // 发布灰度版本.
      return publishBranchNamespace(parentNamespace, namespace, operateNamespaceItems,
                                    releaseName, releaseComment, operator, isEmergencyPublish);
    }

    // 非灰度版本, 找到子版本
    Namespace childNamespace = namespaceService.findChildNamespace(namespace);

    Release previousRelease = null;
    if (childNamespace != null) {
      // 找到上一个版本
      previousRelease = findLatestActiveRelease(namespace);
    }

    //master release
    Map&amp;lt;String, Object&amp;gt; operationContext = Maps.newHashMap();
    // 记录是否紧急发布
    operationContext.put(ReleaseOperationContext.IS_EMERGENCY_PUBLISH, isEmergencyPublish);
    // 主版本发布
    Release release = masterRelease(namespace, releaseName, releaseComment, operateNamespaceItems,
                                    operator, ReleaseOperation.NORMAL_RELEASE, operationContext);


    //merge to branch and auto release
    // 将主版本合并到灰度版本. 并自动发布
    if (childNamespace != null) {
      mergeFromMasterAndPublishBranch(namespace, childNamespace, operateNamespaceItems,
                                      releaseName, releaseComment, operator, previousRelease,
                                      release, isEmergencyPublish);
    }
    return release;
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;检查锁：如果不是紧急发布，就需要检查锁，如果这个 namespace 的最后修改者就是当前用户，那么就抛出异常。禁止其修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;根据 namespace 获取所有的 item，也就是配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;判断当前的 namespace 是否有父 namespace，如果有，说明当前 namespace 是灰度 namespace，则进行灰度发布（主版本发布和灰度发布逻辑不同）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这里说下父子 namespace 在 apollo 的设计：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-e94fb9c5c13105d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;主体E-R Diagram 图片来自 apollo wiki&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看出，namespace 和 cluster 是多对一的关系，而 cluster 有个字段：ParentClusterId，也就是说，cluster 是有层级的。每当创建一个灰度配置，实际上，就是创建了一个新的 cluster，这个新的 cluster 的名字就是 &lt;code&gt;时间戳-字符串&lt;/code&gt;，大概是这样的：&lt;code&gt;20180705150428-1dc5208dc9e8146b&lt;/code&gt;. 然后再在这个新 cluster 下面创建新的 namespace，那么，namespace 无形中也有了层级（父子）关系。&lt;/p&gt;
&lt;ol readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;如果没有父 namespace，说明是主版本发布，那么就需要处理他的子 （灰度）版本，同时，为了后面比对灰度版本和上一个版本的区别（如果灰度修改了上一个版本的数据，就需要记录，否则，灰度数据和主版本将无法对应），还要记录上一个版本的 release 信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;发布主版本&lt;/strong&gt;。并保存发布历史。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果存在灰度版本，就更新灰度版本的配置，并发布灰度版本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;关于灰度版本，这里多提一句，每次发布都是一个 release，release 对象有个 configuration，包含了此次发布的全量配置，因此，灰度发布的 configuration 中，包含了每次对应的主版本的配置，如果主版本发生了变化，那么灰度版本肯定也是要变更的。所以需要重新发布灰度版本。&lt;/p&gt;
&lt;p&gt;其中关键的方法就是 &lt;code&gt;mergeConfiguration&lt;/code&gt;，该方法表明了灰度发布的主要逻辑：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;  private Map&amp;lt;String, String&amp;gt; mergeConfiguration(Map&amp;lt;String, String&amp;gt; baseConfigurations,
                                                 Map&amp;lt;String, String&amp;gt; coverConfigurations) {
    Map&amp;lt;String, String&amp;gt; result = new HashMap&amp;lt;&amp;gt;();
    //copy base configuration
    for (Map.Entry&amp;lt;String, String&amp;gt; entry : baseConfigurations.entrySet()) {
      result.put(entry.getKey(), entry.getValue());
    }

    //update and publish
    for (Map.Entry&amp;lt;String, String&amp;gt; entry : coverConfigurations.entrySet()) {
      result.put(entry.getKey(), entry.getValue());
    }

    return result;
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;方法很简单：两个参数，主版本配置，灰度版本配置。首先将主版本配置保存到 Map 中，然后将灰度版本配置也 put 到 Map 中，利用 Map 唯一 Key 的特性，保证灰度版本覆盖主版本。&lt;/p&gt;
&lt;p&gt;所以这个方法的 put 顺序决定了&lt;strong&gt;灰度版本覆盖主版本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;publish 方法更多的细节不再赘述，有疑惑的地方可以交流。&lt;/p&gt;
&lt;h2 id=&quot;发送-releasemessage-消息&quot;&gt;3. 发送 ReleaseMessage 消息&lt;/h2&gt;
&lt;p&gt;这个发送消息的操作本来应该是 MQ，apollo 为了减少依赖，直接使用的 mysql，但已经留好了MQ 的设计。关于 ReleaseMessage 的设计，我这里引用一下 apollo 的文档：&lt;/p&gt;
&lt;blockquote readability=&quot;7.2596078431373&quot;&gt;
&lt;p&gt;Admin Service在配置发布后，需要通知所有的Config Service有配置发布，从而Config Service可以通知对应的客户端来拉取最新的配置。&lt;br/&gt;从概念上来看，这是一个典型的消息使用场景，Admin Service作为producer发出消息，各个Config Service作为consumer消费消息。通过一个消息组件（Message Queue）就能很好的实现Admin Service和Config Service的解耦。&lt;br/&gt;在实现上，考虑到Apollo的实际使用场景，以及为了尽可能减少外部依赖，我们没有采用外部的消息中间件，而是通过数据库实现了一个简单的消息队列。&lt;br/&gt;&lt;strong&gt;实现方式如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Admin Service在配置发布后会往ReleaseMessage表插入一条消息记录，消息内容就是配置发布的AppId+Cluster+Namespace，参见&lt;a href=&quot;https://github.com/ctripcorp/apollo/blob/master/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/message/DatabaseMessageSender.java&quot;&gt;DatabaseMessageSender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Config Service有一个线程会每秒扫描一次ReleaseMessage表，看看是否有新的消息记录，参见&lt;a href=&quot;https://github.com/ctripcorp/apollo/blob/master/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/message/ReleaseMessageScanner.java&quot;&gt;ReleaseMessageScanner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Config Service如果发现有新的消息记录，那么就会通知到所有的消息监听器（&lt;a href=&quot;https://github.com/ctripcorp/apollo/blob/master/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/message/ReleaseMessageListener.java&quot;&gt;ReleaseMessageListener&lt;/a&gt;），如&lt;a href=&quot;https://github.com/ctripcorp/apollo/blob/master/apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2.java&quot;&gt;NotificationControllerV2&lt;/a&gt;，消息监听器的注册过程参见&lt;a href=&quot;https://github.com/ctripcorp/apollo/blob/master/apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/ConfigServiceAutoConfiguration.java&quot;&gt;ConfigServiceAutoConfiguration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NotificationControllerV2得到配置发布的AppId+Cluster+Namespace后，会通知对应的客户端&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4236553-e1372f1232717d10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;apollo 定义了 MessageSender 接口，定义了一个 sendMessage 方法，这个方法目前只有基于 Mysql 的实现，即 DatabaseMessageSender 实现类。&lt;/p&gt;
&lt;p&gt;该类会将数据直接保存到数据库。然后清理掉&lt;code&gt;比刚刚存的消息旧的消息&lt;/code&gt;—— 防止消息表不断增大。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;4. 总结&lt;/h2&gt;
&lt;p&gt;发布分为主版本发布，灰度版本发布，全量发布，这次说了前两个，全量发布下次再说。&lt;/p&gt;
&lt;p&gt;而主/灰发布的一个比较繁琐的地方就是两个版本的合并，&lt;strong&gt;灰度版本发布要合并主版本。主版本发布要更新灰度版本&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同时，灰度的设计也有点绕，中间隔了一层 cluster。&lt;/p&gt;
&lt;p&gt;在发布成功之后，需要发送消息到数据库，让 ConfigService 能够感知到此次发布，并通知客户端。关于如何通知客户端，下次再说。&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 14:36:00 +0000</pubDate>
<dc:creator>莫那-鲁道</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stateis0/p/9427663.html</dc:identifier>
</item>
<item>
<title>谈一下对绩效和自身技能发展的理解 - HarlanC</title>
<link>http://www.cnblogs.com/harlanc/p/9416141.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/harlanc/p/9416141.html</guid>
<description>&lt;h2 id=&quot;什么样的公司才能积累技术&quot;&gt;什么样的公司才能积累技术？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http:/par7be692.bkt.clouddn.com/8.4.2018_10:12:40.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果你想成为在某一个领域内的技术专家，该怎么做？有些同学表示到一家相关技术的公司努力工作持续积累就可以了，如果能找到这种理想的平台，你是非常幸运的。什么才能叫做理想的平台？到一家不太大的公司，业务能够持续发展，公司目标明确，不要持续更换方向，今天区块链火，号召技术人员钻研区块链，明天芯片火了，举全公司之力进军芯片行业，这样的公司是不行的，我说的有些夸张，也有些公司为了找到市场的爆点，频繁更换小方向，叫做打一枪换一个地方，如果用到的技术栈不一样，对技术的积累也是不利的。因此，公司能够在某个领域的技术上做持续的投入，这个领域的发展对公司是至关重要的，你能够跟着公司一点点的成长，从一开始的明确需求，到技术调研，设计，开发测试，产品上线。随着产品上市，在这一个领域的技术上需要不断的深入，才能满足各种需求，你获取的技能都是实打实的从实战中获取的，不会纸上得来终觉浅，这样的公司对你的积累才是有利的。当然你的绩效也不会低。&lt;/p&gt;
&lt;h2 id=&quot;绩效和技术积累能兼得么&quot;&gt;绩效和技术积累能兼得么？&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http:/par7be692.bkt.clouddn.com/8.4.2018_10:14:39.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说到绩效，它是和公司挂钩的，你技术再牛，写出来的代码没有给公司带来效益，那你的绩效也好不到哪去。你说你算法特别牛逼，能够通过算法把执行效率提升n倍，这的确是见程序员功力的地方，但对不起，公司的这个项目用不到这么高深的算法，数据量也没这么大，两个for循环就能解决了，为了代码的简洁易懂，最终还是选择了两个for循环。在这个项目上，for循环比你的牛逼算法值钱，但是如果你在这种项目里待久了，你给公司创造了效益，绩效也还可以，到你自身的水平能提高么？这里只是一个例子，看今天这篇帖子的标题，绩效和自身技能发展，在某些，应该说是大多数情况下是矛盾的。大多数小型公司不会让你在一个方向上做自己的工作，今天有后端的需求，你去做后端吧，明天前端人手不够了，你去前端支援吧，后天测试缺人手，你去做测试吧。今天做了一款视频应用，上线后效果不理想，明天再做一款游戏吧看看效果怎么样。在这种情况下，在公司里实现技术的积累和沉淀还有可能么？&lt;/p&gt;
&lt;p&gt;再说下大公司，大公司的业务和产品基本上都已经定型，各种软件的架构和基本功能都已成型，所以在这样的公司中你确实会在一个领域中积累技术，但做的基本上是维护（bug修复）或者在原有架构基础上实现一些新的功能。在这样的公司中做技术的积累和提升完全拷自觉学习，你不可能去参与技术架构了，项目的核心问题也都已经被前人攻克，你要做的就是完成一个功能，但不要以为做完一个功能就可以了，要趁这个机会把功能相关的代码都捋一遍，因为这样边写代码边学习的理解更加深刻，第一次会非常痛苦，但第一次熟悉之后，后面再遇到这些相关代码的问题回信手拈来。你也要从不同方面来理解代码，如果设计优秀的代码，学习下这些代码是如何组织起来的，用到哪些设计模式。如果代码让你感觉很清晰，看一下别人是如何写出clean code的等等。能做到这些更好，但往往事不如意，为了赶时间，想一蹴而就，了解代码的表面意思以后就立刻动手写代码，写完觉得没问题就交给测试了。&lt;/p&gt;
&lt;h2 id=&quot;如何才能积累技术&quot;&gt;如何才能积累技术？&lt;/h2&gt;
&lt;p&gt;既然绩效和自身积累不能兼得，如何才能有效的做到技术的沉淀，从而成为某一领域的技术专家？是的，那就只能靠业余时间了。工作中的有些地方有可能是自己不愿意做的，因为对自己的技术提升没有任何好处，但是为了工资不得已而为之。下了班的业余时间你就可以自由的支配了。选择一个感兴趣的方向，找到几本大牛权威的书籍，找到几个相关的流行的开源项目，边学边练。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:/par7be692.bkt.clouddn.com/8.4.2018_10:19:42.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择方向大方向还是要和自己的工作相关的，你工作是区块链相关的，不要尝试去深入学习芯片相关的知识，你会发现即使学了，没有实践，时间久了，和没学一样。这对工作也没有帮助。&lt;/p&gt;
&lt;p&gt;找书籍，网上一搜，多的很，可以去豆瓣看书评。找真正高质量书籍来学习。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http:/par7be692.bkt.clouddn.com/8.4.2018_10:23:21.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看代码，做技术的不读写代码是纸上谈兵，看一些优秀的开源项目，自己尝试动手写一些项目或者参与一个项目，会让你的知识消化的更快，你离10万行代码的距离还差多远？&lt;/p&gt;
&lt;p&gt;最后我想说的是，如今IT行业热门方向有很多，人工智能，区块链，大数据等等。诱惑实在太多，不要今天看到某某技术多好，工资多高，就头脑发热买一堆书籍去学习，要抵得住诱惑，耐得住寂寞，心中要有定力，选择定一个方向坚持下去，做技术的靠得就是两个字，踏实。&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 14:01:00 +0000</pubDate>
<dc:creator>HarlanC</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/harlanc/p/9416141.html</dc:identifier>
</item>
<item>
<title>hashCode详解 - AstrophelYang</title>
<link>http://www.cnblogs.com/NathanYang/p/9427456.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NathanYang/p/9427456.html</guid>
<description>&lt;h2&gt;一、hashcode是什么&lt;/h2&gt;
&lt;p&gt;要理解hashcode首先要理解hash表这个概念&lt;/p&gt;
&lt;h3&gt;1. 哈希表&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;hash表也称散列表（Hash table），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。&lt;/li&gt;
&lt;li&gt;给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。&lt;/li&gt;
&lt;li&gt;简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。&lt;/li&gt;
&lt;li&gt;具有快速查找和插入操作的优点&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2. hashcode&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;hashcode 通过hash函数计算得到，hashcode就是在hash表中有对应的位置&lt;/li&gt;
&lt;li&gt;每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2&gt; 二、hashcode的作用&lt;/h2&gt;
&lt;p&gt;    HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的&lt;/p&gt;
&lt;p&gt;    对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。&lt;/p&gt;
&lt;p&gt;   在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;   如何判别在集合中是否已经存在该对象了？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。    此时hashCode方法的作用就体现出来了，当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值，如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了；如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了。&lt;/p&gt;
&lt;p&gt;    这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。&lt;/p&gt;
&lt;p&gt;           &lt;span&gt;&lt;strong&gt; &lt;span&gt;所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt; 三、 hashCode()和equals()&lt;/h2&gt;
&lt;p&gt;Java的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite)&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;&lt;span&gt;1. equals方法&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Object类中equals()方法实现如下&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object obj) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt; ==&lt;span&gt; obj);
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;虽然可以重写equals()方法，但是有一些注意事项；JDK中说明了实现equals()方法应该遵守的约定&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;自反性：x.equals(x)必须返回true。&lt;/li&gt;
&lt;li&gt;对称性：x.equals(y)与y.equals(x)的返回值必须相等。&lt;/li&gt;
&lt;li&gt;传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。&lt;/li&gt;
&lt;li&gt;一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。&lt;/li&gt;
&lt;li&gt;非null：x不是null，y为null，则x.equals(y)必须为false。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;strong&gt;&lt;span&gt;2. hashCode 方法&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Object类中hashCode()方法的声明如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;native&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; hashCode();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;（1）hashCode()在哈希表中起作用，如java.util.HashMap。&lt;/li&gt;
&lt;li&gt;（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。&lt;/li&gt;
&lt;li&gt;（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。&lt;/li&gt;
&lt;li&gt;（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2&gt; 四、实例讲解&lt;/h2&gt;
&lt;ul readability=&quot;5.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;HashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash(Object key) {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; h;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16&lt;span&gt;);
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;这段代码类似作用是为了增加hashcode的随机性&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;key.hashCode()的作用是返回键值key所属类型自带的hashcode，返回int散列类型，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.5&quot;&gt;
&lt;p&gt;hashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个&quot;与&quot;操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; indexFor(&lt;span&gt;int&lt;/span&gt; h, &lt;span&gt;int&lt;/span&gt; length) { &lt;span&gt;return&lt;/span&gt; h &amp;amp; (length-1);}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。&lt;/li&gt;
&lt;li readability=&quot;-1.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  01111010 00111100 00100101
&amp;amp; 00000000 00000000 00001111
----------------------------------
  00000000 00000000 00000101
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;高位全部归零，只保留末四位 &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;but 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上成个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;这时候 “hash”函数作用就出来了&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。&lt;/li&gt;
&lt;li&gt;设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成的因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。&lt;/li&gt;
&lt;li&gt;根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;hashMap中 MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时桶大小已经是2的31次方了），表明不进行扩容了）&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 05 Aug 2018 13:51:00 +0000</pubDate>
<dc:creator>AstrophelYang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NathanYang/p/9427456.html</dc:identifier>
</item>
<item>
<title>微信小程序开发06-一个业务页面的完成 - 叶小钗</title>
<link>http://www.cnblogs.com/yexiaochai/p/9419368.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yexiaochai/p/9419368.html</guid>
<description>&lt;p&gt;接上文：&lt;a href=&quot;http://www.cnblogs.com/yexiaochai/p/9412951.html&quot;&gt;微信小程序开发05-日历组件的实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/yexiaochai/wxdemo&quot; target=&quot;_blank&quot;&gt;https://github.com/yexiaochai/wxdemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里来说一说我们的理念，我们也学习小程序开发有一周多了，从近期的使用上来说，小程序可以作为底层，但是缺少一个框架层，这个框架层需要提供：&lt;/p&gt;
&lt;p&gt;① 组件库&lt;/p&gt;
&lt;p&gt;② 更好的代码组织方式，也就是让我们可以做到轻松的组件化开发&lt;/p&gt;
&lt;p&gt;我们从最开始到现在，都在沿着这个方向去分解小程序学习，其实小程序本身的东西差不多了，但是我们代码过程中有时候却越高越复杂，多了很多封装，其实这所有的复杂都是为了设置一个基本的架构，一个标准的开发模式，让后面写业务代码的同学能更高效的写代码，经过一年多的发展，事实上这种较为成熟的框架已经有了，比如我们正在使用的：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tencent.github.io/wepy/&quot; target=&quot;_blank&quot;&gt;https://tencent.github.io/wepy/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是，可以看到小程序基本还是原生JS，这其实是个非常好的学习整理机会，所以我这边一步步和大家对小程序进行了拆分，期望能形成一套还能用的雏形，帮助大家理解，所以我们继续今天的学习吧，为了降低单页面难度，我们将首页进行下改造。&lt;/p&gt;

&lt;p&gt;首页做了一点改造，变成了这个样式了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804135258598-635933189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里需要三个点击时间点，因为日历组件，我们昨天就做好了，而他这个出发日期事实上就是我们日历组件的selecedDate，处理这块逻辑：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6874f2d7-913f-4569-af74-960bee32f2d7')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_6874f2d7-913f-4569-af74-960bee32f2d7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6874f2d7-913f-4569-af74-960bee32f2d7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6874f2d7-913f-4569-af74-960bee32f2d7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6874f2d7-913f-4569-af74-960bee32f2d7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;searchbox&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row search-line&quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;start&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;       出发&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span9 js-start search-line-txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;       请选择出发地&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row search-line&quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;arrive&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;       到达&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span9 js-arrive search-line-txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;       请选择到达地&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row search-line&quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;arrive&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;       出发日期&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span9 js-arrive search-line-txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;       {{calendarSelectedDate || '请选择出发日期'}} &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row &quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;arrive&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;btn-primary full-width js_search_list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;查询&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row search-line&quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;arrive&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     出发日期&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span9 js-arrive search-line-txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     {{calendarSelectedDate || '请选择出发日期'}} &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;点击时候我们弹出我们的日历，这个时候我们日历模块释放一个事件显示日历：&lt;/p&gt;
&lt;p&gt;PS:template不与页面级别WXML共享一个作用域，所以我暂时都采用的include引入&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804142453528-761780001.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2be08a27-8db2-44c0-9b0c-2f418d8a0105')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2be08a27-8db2-44c0-9b0c-2f418d8a0105&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2be08a27-8db2-44c0-9b0c-2f418d8a0105&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2be08a27-8db2-44c0-9b0c-2f418d8a0105',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2be08a27-8db2-44c0-9b0c-2f418d8a0105&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row search-line&quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;start&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     出发&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span9 js-start search-line-txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     请选择出发地&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row search-line&quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;arrive&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     到达&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span9 js-arrive search-line-txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     请选择到达地&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row search-line&quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;arrive&quot;&lt;/span&gt;&lt;span&gt; ontap&lt;/span&gt;&lt;span&gt;=&quot;showCalendar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     出发日期&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span9 js-arrive search-line-txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     {{calendarSelectedDateStr}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row &quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;arrive&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;btn-primary full-width js_search_list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;查询&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;./mod/calendar.wxml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../../utils/abstract-page.wxml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-row search-line&quot;&lt;/span&gt;&lt;span&gt; data-flag&lt;/span&gt;&lt;span&gt;=&quot;arrive&quot;&lt;/span&gt;&lt;span&gt; ontap&lt;/span&gt;&lt;span&gt;=&quot;showCalendar&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     出发日期&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;c-span9 js-arrive search-line-txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;     {{calendarSelectedDateStr}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;事实上一个mod就只是一个对象,只不过为了方便拆分,将对象分拆成一个个的mod
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;一个mod对应一个wxml,但是共享外部的css,暂时如此设计
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;所有日历模块的需求全部再此实现
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; const util = require('../../../utils/util.js'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; let selectedDate = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; module.exports =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   showCalendar: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;       isCalendarShow: ''
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;   onCalendarDayTap: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     let data =&lt;span&gt; e.detail;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; date = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(data.year, data.month, data.day);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    console.log(date)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;      calendarSelectedDate: date,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;       calendarSelectedDateStr: util.dateUtil.format(date, 'Y年M月D日'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;  data: {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     isCalendarShow: 'none'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     calendarDisplayMonthNum: 2&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     calendarDisplayTime: &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(),
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    calendarSelectedDate: selectedDate,
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     calendarSelectedDateStr: util.dateUtil.format(selectedDate, 'Y年M月D日'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显然，这里的日历这样摆设有点丑，我们这里将其封装成一个弹出层，所以我们这里再做一个容器类组件，专门用于装载页面样式用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804152051891-7512903.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804152032012-2040413603.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cm-modal &quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;z-index: {{uiIndex}}; position: fixed; display: {{isShow}}; &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;slot &lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;slot&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cm-overlay&quot;&lt;/span&gt;&lt;span&gt; bindtap&lt;/span&gt;&lt;span&gt;=&quot;onMaskEvent&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;z-index: {{maskzIndex}}; display: {{isShow}}&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-container &lt;/span&gt;&lt;span&gt;bindonContainerHide&lt;/span&gt;&lt;span&gt;=&quot;onContainerHide&quot;&lt;/span&gt;&lt;span&gt; is-show&lt;/span&gt;&lt;span&gt;=&quot;{{isCalendarShow}}&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;calendar-wrapper-box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;box-hd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fl icon-back js_back &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fr icon-next js_next&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-calendar &lt;/span&gt;&lt;span&gt;bindonDayTap&lt;/span&gt;&lt;span&gt;=&quot;onCalendarDayTap&quot;&lt;/span&gt;&lt;span&gt; displayTime&lt;/span&gt;&lt;span&gt;=&quot;{{calendarDisplayTime}}&quot;&lt;/span&gt;&lt;span&gt; &lt;br/&gt;selectedDate&lt;/span&gt;&lt;span&gt;=&quot;{{calendarSelectedDate}}&quot;&lt;/span&gt;&lt;span&gt; displayMonthNum&lt;/span&gt;&lt;span&gt;=&quot;{{calendarDisplayMonthNum}}&quot;&lt;/span&gt;&lt;span&gt; &lt;br/&gt;is-show&lt;/span&gt;&lt;span&gt;=&quot;{{isCalendarShow}}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-calendar&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这里也引起了其他问题，因为引入了shadow-dom概念，我的样式不能重用，组件内部样式与外部是不能通信的，但是这里是页面级别容器，内容的样式肯定是来源页面的，这里没什么问题，所以我们这里显示的是正确的，但是我这里想做一个出格一点的操作，我想用样式将这里日历月标题换个位置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804152447290-2058897594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而日历组件和外部是不能通信的，我们这里该如何处理呢，我这里想了两个方案：&lt;/p&gt;
&lt;p&gt;① 设置一个全局使用的组件库样式，让所有组件继承，但是不知道这里对性能是否有影响，因为这样的话体积不会太小&lt;/p&gt;
&lt;p&gt;② 小程序设计了可以传入组件的方法，比如我们这里的日历组件我们可以这样改变其样式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;.calendar-cm-month &lt;/span&gt;{
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    position&lt;/span&gt;:&lt;span&gt; absolute&lt;/span&gt;;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    top&lt;/span&gt;:&lt;span&gt; 0&lt;/span&gt;;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt; 90rpx&lt;/span&gt;;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;    line-height&lt;/span&gt;:&lt;span&gt; 90rpx&lt;/span&gt;;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;    color&lt;/span&gt;:&lt;span&gt; #00b358&lt;/span&gt;;
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
&lt;span&gt;9&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;Component({
&lt;/span&gt;&lt;span&gt;&lt;strong&gt; 2   externalClasses: ['ex-class'],
&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;  behaviors: [
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    View
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;  ],
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  properties: {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    displayMonthNum: {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;      type: Number
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    displayTime: {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;      type: Date
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    selectedDate: {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;      type: Date
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;  data: {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     weekDayArr: ['日', '一', '二', '三', '四', '五', '六'&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;   attached: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () { 
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;console.log(this)&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; debugger&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;  methods: {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     onDayTap: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.triggerEvent('onDayTap'&lt;span&gt;, e.currentTarget.dataset)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-container &lt;/span&gt;&lt;span&gt;bindonContainerHide&lt;/span&gt;&lt;span&gt;=&quot;onContainerHide&quot;&lt;/span&gt;&lt;span&gt; is-show&lt;/span&gt;&lt;span&gt;=&quot;{{isCalendarShow}}&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;calendar-wrapper-box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;box-hd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fl icon-back js_back &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;text &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fr icon-next js_next&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ui-calendar &lt;/span&gt;&lt;strong&gt;&lt;span&gt;ex-class&lt;/span&gt;&lt;span&gt;=&quot;calendar-cm-month&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; bindonDayTap&lt;/span&gt;&lt;span&gt;=&quot;onCalendarDayTap&quot;&lt;/span&gt;&lt;span&gt; &lt;br/&gt;displayTime&lt;/span&gt;&lt;span&gt;=&quot;{{calendarDisplayTime}}&quot;&lt;/span&gt;&lt;span&gt; selectedDate&lt;/span&gt;&lt;span&gt;=&quot;{{calendarSelectedDate}}&quot;&lt;/span&gt;&lt;span&gt; &lt;br/&gt;displayMonthNum&lt;/span&gt;&lt;span&gt;=&quot;{{calendarDisplayMonthNum}}&quot;&lt;/span&gt;&lt;span&gt; is-show&lt;/span&gt;&lt;span&gt;=&quot;{{isCalendarShow}}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-calendar&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ui-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体各位去github上查看，总而言之，我们的页面变成了这个样子了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804155751880-792053985.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;PS：这里发现一个不知道是不是坑点的点，我们这里属性传递的是一个date对象，但是到了组件层之间变成了对象，不知微信底层做了什么：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
calendarDisplayTime: &lt;span&gt;new&lt;/span&gt; Date()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804162533542-992526413.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好像变成了一个空对象，这里可能发生的情况是，经过传递的日期对象会被某种特殊处理，但是具体发生了什么事情就不知道了，这个却引起了我们不小的麻烦，这里大概去翻开了一下源码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804163923016-360673947.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;极有可能，小程序本身就不支持date属性的传递，我们的日历组件能跑起来的原因是什么，我这里都有点疑惑了......&lt;/p&gt;
&lt;p&gt;而且就算以对象方式传递到组件的date类型都会变成莫名其妙的东西：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;    ttt: {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;       key: 'date'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;      value: selectedDate
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     },
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804164638654-1839663319.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个特性有点令人抓不住头脑了，这里根据探查，很有可能Component将date对象传入WXML解释时候，自动转为了日期字符串了，所以我们这里看上去是对象的东西其实是字符串，这里的建议是：&lt;strong&gt;&lt;span&gt;跟组件的date传递，暂时全部使用字符串代替，以免自我麻烦&lt;/span&gt;&lt;/strong&gt;，然后我们先将之前的日历操作全部变成字符串，再为我们的前后按钮加上事件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; module.exports =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;   showCalendar: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;       isCalendarShow: ''
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   hideCalendar: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;       isCalendarShow: 'none'
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;   preMonth: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;       calendarDisplayTime: util.dateUtil.preMonth(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.data.calendarDisplayTime).toString()
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;   nextMonth: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;       calendarDisplayTime: util.dateUtil.nextMonth(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.data.calendarDisplayTime).toString()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;   onCalendarDayTap: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     let data =&lt;span&gt; e.detail;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; date = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date(data.year, data.month, data.day);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    console.log(date)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;       isCalendarShow: 'none'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;      calendarSelectedDate: date.toString(),
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;       calendarSelectedDateStr: util.dateUtil.format(date, 'Y年M月D日'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;   onContainerHide: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.hideCalendar();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;  data: {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    ttt: {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;       key: 'date'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;      value: selectedDate
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     isCalendarShow: ''&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     calendarDisplayMonthNum: 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     calendarDisplayTime: &lt;span&gt;new&lt;/span&gt; Date(2018, 9&lt;span&gt;).toString(),
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    calendarSelectedDate: selectedDate,
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     calendarSelectedDateStr: util.dateUtil.format(&lt;span&gt;new&lt;/span&gt; Date(selectedDate), 'Y年M月D日'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然看上去恶心了一点，但是总是不会出什么明显的问题，忍一忍吧......日期部分基本结束了，还有些小的限制没有做上，比如哪些时段能选，哪些不能，这块就有待各位发现吧，我们这里毕竟是学习，做细了很花功夫，我们接下来做出发目的地选择部分。&lt;/p&gt;

&lt;h2&gt;城市列表&lt;/h2&gt;
&lt;p&gt;城市列表这里看起来需要新开一个页面，但是我这里想做在一个页面中，考虑篇幅，我们使用弹出层容器组件看并且尽量削弱一些特性，几天下来别说写的还有些累......&lt;/p&gt;
&lt;p&gt;这个又作为首页的一个模块而存在：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804184248239-1226654003.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;display: {{isCityShow}}; &quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;city-wrapper&quot;&lt;/span&gt;  &lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;city-list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;A&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;city-list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;A&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;成都&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;事实上一个mod就只是一个对象,只不过为了方便拆分,将对象分拆成一个个的mod
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;一个mod对应一个wxml,但是共享外部的css,暂时如此设计
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;所有日历模块的需求全部再此实现
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; const util = require('../../../utils/util.js'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; let selectedDate = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().toString();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; module.exports =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   showCitylist: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     let flag =&lt;span&gt; e.currentTarget.dataset.flag;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(flag === 'start'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于设置城市数据&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;   setCityData: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;   showCity: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         isCityShow: ''
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;      });
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;   shideCity: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;       isCityShow: 'none'
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;  data: {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     isCityShow: ''
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首页调用代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取公共ui操作类实例&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; const _page = require('../../utils/abstract-page.js'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; let modCalendar = require('./mod/calendar.js'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; let modCity = require('./mod/city.js'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取应用实例&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; const app =&lt;span&gt; getApp()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;Page(_page.initPage({
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  data: {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; methods: uiUtil.getPageMethods(),&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  methods: {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;   onShow: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     global.sss = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     let scope = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;  },
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;   onLoad: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; this.setPageMethods();&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}, {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;  modCalendar: modCalendar,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;  modCity: modCity
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804184637440-959795880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里我们开始有数据请求模块了，小程序使用这个接口请求数据，这里比较尴尬的是他要设置域名白名单：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
wx.request(OBJECT)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而我们使用的是测试账号没有可以设置的地方，所以我们还是去申请个小程序账号吧...配置成功，我们继续代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180804192343675-1015524717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到数据请求已经回来了，但是我们一般来说一个接口不止会用于一个地方，每次重新写好像有些费事，加之我这里想将重复的请求缓存起来，所以我们这里封装一套数据访问层出来&lt;/p&gt;
&lt;h2&gt;数据缓存（持久层）&lt;/h2&gt;
&lt;p&gt;之前在浏览器中，我们一般使用localstorage存储一些不太更改的数据，微信里面提供了接口处理这一切：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
wx.setStorage(OBJECT)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们这里需要对其进行简单封装，便与后面更好的使用，一般来说有缓存就一定要有过期，所以我们动态给每个缓存对象增加一个过期时间：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;class Store {
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;  constructor(opts) {
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; opts === 'string') &lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; opts;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; Object.assign(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, opts);
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有传过期时间,则默认30分钟&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;this&lt;/span&gt;.lifeTime) &lt;span&gt;this&lt;/span&gt;.lifeTime = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;本地缓存用以存放所有localstorage键值与过期日期的映射&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;._keyCache = 'SYSTEM_KEY_TIMEOUT_MAP'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取过期时间,单位为毫秒&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;  _getDeadline() {
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.lifeTime * 60 * 1000&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取一个数据缓存对象,存可以异步,获取我同步即可&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;  get(sign){
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;     let key = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.key;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;     let now = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; data =&lt;span&gt; wx.getStorageSync(key);
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!data) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;     data =&lt;span&gt; JSON.parse(data);
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据过期&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (data.deadLine &amp;lt;&lt;span&gt; now) {
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.removeOverdueCache();
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(data.sign) {
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt;(sign === data.sign) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data.data;
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;       &lt;span&gt;else&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt;   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;产出页面组件需要的参数
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;  sign 为格式化后的请求参数，用于同一请求不同参数时候返回新数据，比如列表为北京的城市，后切换为上海，会判断tag不同而更新缓存数据，tag相当于签名
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;  每一键值只会缓存一条信息
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;   &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;  set(data, sign) {
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     let timeout = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;     let time = timeout.setTime(timeout.getTime() + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._getDeadline());
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._saveData(data, time, sign);
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;  _saveData(data, time, sign) {
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;     let key = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.key;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;     let entity =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;      deadLine: time,
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;      data: data,
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;      sign: sign
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     let scope = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;    wx.setStorage({
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;      key: key,
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;      data: JSON.stringify(entity),
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;       success: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次真实存入前,需要往系统中存储一个清单&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;        scope._saveSysList(key, entity.deadLine);
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;  _saveSysList(key, timeout) {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!key || !timeout || timeout &amp;lt; &lt;span&gt;new&lt;/span&gt; Date().getTime()) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;     let keyCache = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._keyCache;
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;    wx.getStorage({
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;      key: keyCache,
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;       complete: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         let oldData =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(data.data) oldData =&lt;span&gt; JSON.parse(data.data);
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         oldData[key] =&lt;span&gt; timeout;
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;        wx.setStorage({
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;          key: keyCache,
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;          data: JSON.stringify(oldData)
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除过期缓存&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;  removeOverdueCache() {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;     let now = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;     let keyCache = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._keyCache;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;    wx.getStorage({
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;      key: keyCache,
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;       success: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(data &amp;amp;&amp;amp; data.data) data =&lt;span&gt; JSON.parse(data.data);
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(let k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data) {
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt;(data[k] &amp;lt;&lt;span&gt; now) {
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;delete&lt;/span&gt;&lt;span&gt; data[k];
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;             wx.removeStorage({key: k, success: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){}});
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;        wx.setStorage({
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;          key: keyCache,
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;          data: JSON.stringify(data)
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt; module.exports = Store
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个类的使用也非常简单，这里举个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; sss = &lt;span&gt;new&lt;/span&gt; global.Store({key: 'qqq', lifeTime: 1&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; sss.set({a: 1}, 2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; sss.get()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为没有秘钥会是null&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; sss.get(2)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;sss.get(2)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候我们开始写我们数据请求的类：&lt;/p&gt;
&lt;p&gt;首先还是实现了一个抽象类和一个业务基类，然后开始在业务层请求数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class Model {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;  constructor() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.url = ''&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.param =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.validates =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  pushValidates(handler) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; handler === 'function'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.validates.push(handler);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;  setParam(key, val) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; key === 'object'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;       Object.assign(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.param, key);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.param[key] =&lt;span&gt; val;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;@override&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;  buildurl() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.url;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;  onDataSuccess() {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行数据请求逻辑&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;  execute(onComplete) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     let scope = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     let _success = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;       let _data =&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; data == 'string') _data =&lt;span&gt; JSON.parse(data);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; @description 开发者可以传入一组验证方法进行验证&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;       &lt;span&gt;for&lt;/span&gt; (let i = 0, len = scope.validates.length; i &amp;lt; len; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;scope.validates[i](data)) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt; @description 如果一个验证不通过就返回&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;           &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; onError === 'function'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; onError.call(scope || &lt;span&gt;this&lt;/span&gt;&lt;span&gt;, _data, data);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;           } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;          }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; @description 对获取的数据做字段映射&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;       let datamodel = &lt;span&gt;typeof&lt;/span&gt; scope.dataformat === 'function' ?&lt;span&gt; scope.dataformat(_data) : _data;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (scope.onDataSuccess) scope.onDataSuccess.call(scope, datamodel, data);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; onComplete === 'function'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        onComplete.call(scope, datamodel, data);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;._sendRequest(_success);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除过期缓存&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;  _sendRequest(callback) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     let url = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.buildurl();
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    wx.request({
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;       url: &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.buildurl(),
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;       data: &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.param,
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;       success: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; success(data) {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         callback &amp;amp;&amp;amp;&lt;span&gt; callback(data);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; module.exports = Model
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5707c582-f2bc-4958-a8f9-3f149260796c')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_5707c582-f2bc-4958-a8f9-3f149260796c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5707c582-f2bc-4958-a8f9-3f149260796c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5707c582-f2bc-4958-a8f9-3f149260796c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5707c582-f2bc-4958-a8f9-3f149260796c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; let Model = require('./abstract-model.js'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class DemoModel extends Model {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;  constructor() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    super();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     let scope = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.domain = 'https://apikuai.baidu.com'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.param =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;      head: {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         version: '1.0.1'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         ct: 'ios'
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果需要缓存,可以在此设置缓存对象&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.cacheData = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.pushValidates(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;       &lt;span&gt;return&lt;/span&gt;&lt;span&gt; scope._baseDataValidate(data);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;首轮处理返回数据，检查错误码做统一验证处理&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;  _baseDataValidate(data) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; data === 'string') data =&lt;span&gt; JSON.parse(data);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (data.data) data =&lt;span&gt; data.data;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (data.errno === 0) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;  dataformat(data) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; data === 'string') data =&lt;span&gt; JSON.parse(data);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (data.data) data =&lt;span&gt; data.data;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (data.data) data =&lt;span&gt; data.data;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;  buildurl() {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.domain + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.url;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;  getSign() {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     let param = &lt;span&gt;this&lt;/span&gt;.getParam() ||&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; JSON.stringify(param);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;  onDataSuccess(fdata, data) {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.cacheData &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cacheData.set)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;       &lt;span&gt;this&lt;/span&gt;.cacheData.set(fdata, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSign());
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有缓存直接读取缓存,没有才请求&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;  execute(onComplete, ajaxOnly) {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     let data = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!ajaxOnly &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.cacheData &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cacheData.get) {
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;       data = &lt;span&gt;this&lt;/span&gt;.cacheData.get(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSign());
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        onComplete(data);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;    super.execute(onComplete);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt; &lt;span&gt;class CityModel extends DemoModel {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;  constructor() {
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;    super();
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.url = '/city/getstartcitys'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt; module.exports =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;   cityModel: &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CityModel
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; 
&lt;span&gt;76&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;业务基类&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;接下来是实际调用代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; let model =&lt;span&gt; models.cityModel;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;model.setParam({
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;   type: 1
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; model.execute(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data) {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;  console.log(data);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;   &lt;span&gt;debugger&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据便请求结束了，有了这个类我们可以做非常多的工作，比如：&lt;/p&gt;
&lt;p&gt;① 前端设置统一的错误码处理逻辑&lt;/p&gt;
&lt;p&gt;② 前端打点，统计所有的接口响应状态&lt;/p&gt;
&lt;p&gt;③ 每次请求相同参数做数据缓存&lt;/p&gt;
&lt;p&gt;④ 这个对于错误处理很关键，一般来说前端出错很大可能都是后端数据接口字段有变化，而这种错误是比较难寻找的，如果我这里做一个统一的收口，每次数据返回记录所有的返回字段的标志上报呢，就以这个城市数据为例，我们可以这样做：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class CityModel extends DemoModel {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;  constructor() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    super();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.url = '/city/getstartcitys'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次数据访问成功，错误码为0时皆会执行这个回调&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  onDataSuccess(fdata, data) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    super.onDataSuccess(fdata, data);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始执行自我逻辑&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     let o =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;       _indate: &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(let k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fdata) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;       o[k] = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; fdata[k];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行数据上报逻辑&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    console.log(JSON.stringify(o));
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里就会输出以下信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
{&quot;_indate&quot;:1533436847778,&quot;cities&quot;:&quot;object&quot;,&quot;hots&quot;:&quot;object&quot;,&quot;total&quot;:&quot;number&quot;,&quot;page&quot;:&quot;string&quot;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果对数据要求非常严苛，对某些接口做到字段层面的验证，那么加一个Validates验证即可，这样对接口的控制会最大化，就算哪次出问题，也能很好从数据分析系统之中可以查看到问题所在，如果我现在想要一个更为具体的功能呢？我想要首次请求一个接口时便将其数据记录下来，第二次便不再请求呢，这个时候我们之前设计的数据持久层便派上了用处：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; let Store = require('./abstract-store.js'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class CityStore extends Store {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;  constructor() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    super();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.key = 'DEMO_CITYLIST'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;30分钟过期时间&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.lifeTime = 30&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; module.exports =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;   cityStore: &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CityStore
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;class CityModel extends DemoModel {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;  constructor() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    super();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.url = '/city/getstartcitys'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.cacheData =&lt;span&gt; Stores.cityStore;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每次数据访问成功，错误码为0时皆会执行这个回调&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  onDataSuccess(fdata, data) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    super.onDataSuccess(fdata, data);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始执行自我逻辑&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     let o =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;       _indate: &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(let k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fdata) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;       o[k] = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; fdata[k];
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行数据上报逻辑&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    console.log(JSON.stringify(o));
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候第二次请求时候便会直接读取缓存了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180805105530333-250691170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来便可以回到我们的页面渲染逻辑了，这个时候就变得非常简单了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;display: {{isCityShow}}; &quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;city-wrapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;block &lt;/span&gt;&lt;span&gt;wx:for&lt;/span&gt;&lt;span&gt;=&quot;{{cityData}}&quot;&lt;/span&gt;&lt;span&gt; wx:key&lt;/span&gt;&lt;span&gt;=&quot;k&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;city-list&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;block &lt;/span&gt;&lt;span&gt;wx:for&lt;/span&gt;&lt;span&gt;=&quot;{{item}}&quot;&lt;/span&gt;&lt;span&gt; wx:key&lt;/span&gt;&lt;span&gt;=&quot;kk&quot;&lt;/span&gt;&lt;span&gt; wx:for-index&lt;/span&gt;&lt;span&gt;=&quot;key&quot;&lt;/span&gt;&lt;span&gt; wx:for-item&lt;/span&gt;&lt;span&gt;=&quot;value&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{key}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;block &lt;/span&gt;&lt;span&gt;wx:for&lt;/span&gt;&lt;span&gt;=&quot;{{value}}&quot;&lt;/span&gt;&lt;span&gt; wx:key&lt;/span&gt;&lt;span&gt;=&quot;kkk&quot;&lt;/span&gt;&lt;span&gt; wx:for-index&lt;/span&gt;&lt;span&gt;=&quot;i&quot;&lt;/span&gt;&lt;span&gt; wx:for-item&lt;/span&gt;&lt;span&gt;=&quot;v&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;view &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;list-item&quot;&lt;/span&gt;&lt;span&gt; data-cnname&lt;/span&gt;&lt;span&gt;=&quot;{{v.name}}&quot;&lt;/span&gt;&lt;span&gt; data-id&lt;/span&gt;&lt;span&gt;=&quot;{{v.regionid}}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{v.cnname}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于设置城市数据&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   setCityData: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     data =&lt;span&gt; data.cities;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     let citys = {}, sortCitys =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     let k, gname, name, i, tmp =&lt;span&gt; {}, index;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;首先处理每个name生成唯一K&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; data) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;       name =&lt;span&gt; data[k].name;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;name) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;       gname = name[0&lt;span&gt;].toUpperCase();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (!citys[gname]) citys[gname] =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;      citys[gname].push(data[k]);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (i = 65; i &amp;lt; 91; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;       tmp =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;       tmp[String.fromCharCode(i)] =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;      sortCitys.push(tmp);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; citys) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;       index = k.charCodeAt() - 65&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;       tmp =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;       tmp[k] =&lt;span&gt; citys[k];
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;       sortCitys[index] =&lt;span&gt; tmp;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setData({
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;      cityData: sortCitys,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;       isCityShow: ''
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    });
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;   },
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180805201851938-1805482768.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们这里为组件绑定事件等就比较简单了，大家可以自己看github，于是我们首页的功能便完成了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/294743/201808/294743-20180805210429656-1406829350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;经过一个多星期的学习，我们慢慢的完成了我们的首页，好像也就几个元素，但是后面的一切却不简单啊，我们明天继续完成list页面逻辑，便开始总结小程序开发&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 13:02:00 +0000</pubDate>
<dc:creator>叶小钗</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yexiaochai/p/9419368.html</dc:identifier>
</item>
<item>
<title>consistent hash(一致性哈希算法) - CloudGeek</title>
<link>http://www.cnblogs.com/cloudgeek/p/9427036.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloudgeek/p/9427036.html</guid>
<description>&lt;p&gt;今天咱不去长篇大论特别详细地讲解consistent hash，我争取用最轻松的方式告诉你consistent hash算法是什么，如果需要深入，Google一下~。&lt;/p&gt;
&lt;p&gt;举个栗子吧：&lt;/p&gt;
&lt;p&gt;比如有 N 个 cache 服务器，需要将一个object 映射到 N 个 cache 上，我们可以用类似下面的方法计算 object 的 hash 值，然后均匀的映射到到 N 个 cache 上：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hash(object)%N&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如object是“hello”，hash（object）是100，N为3，100%3=1，这个数据会被存到第1个cache上（0、1、2三个cache）。这样就能解决一堆数据放到N个cache上的问题。&lt;/p&gt;
&lt;p&gt;现在有个突发情况，0、1、2三个cache中1损坏了！&lt;/p&gt;
&lt;p&gt;怎么办呢，cache 1上的数据首先需要迁移，可用cache数量变为2，这个时候我们需要重新计算所有数据的hash值，上面的公式变成了这样：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hash(object)%(N-1)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这次重新计算意味着每一份数据hash之后的结果几乎都变了！也就是意味着在cache系统中会发生大规模cache失效，数据访问会直接冲击cache后面的服务器，好玩了，崩了。&lt;/p&gt;
&lt;p&gt;咋个办呢，consistent hash出现了！&lt;/p&gt;

&lt;p&gt;　　consistent hash简单的说，就是要在cache数量变化时，能够尽可能小的改变已存在 key 映射关系，也就是增加一个cache或者减少一个cache服务器，对已经存在的缓存数据不要产生大影响。怎么做到呢，，，&lt;/p&gt;
&lt;p&gt;　　我们先想象一条链子，第一个格子是0，最后一个格子是2^32-1，这条链子就是一个地址空间为2^32的hash值空间，现在将链子首位相连，组成一个ring，就像下面这样（这里画图太麻烦了，下面的环环相关的图来自互联网，侵删吧）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AicibUllQlLBhMywIGVdvwBJ60icWz1J7Ku0QWHtpT5dq3laXA0u3Hvicq05ASm4ZHwhbgz837XYeEA0VWIGicmlJvg/640?wx_fmt=jpeg&quot; alt=&quot;&quot; data-ratio=&quot;1.1428571428571428&quot; data-type=&quot;jpeg&quot; data-w=&quot;91&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后考虑我们由object1~object4这样四个数据，通过hash算法后映射到这个ring上【类似这样：hash(object1)=key1】&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AicibUllQlLBhMywIGVdvwBJ60icWz1J7Ku3deibicrc0ia2LdVldTk1R5a1CEDFXW0wJDkeD8MYQCBCbfq5nFYtrXLQ/640?wx_fmt=jpeg&quot; alt=&quot;&quot; data-ratio=&quot;1.0811965811965811&quot; data-type=&quot;jpeg&quot; data-w=&quot;234&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里应该很好理解，4个数据得到4个key，接下来我们要将cache服务器也映射到这个ring上，假设由3个cache服务器，分别是cache A、cache B、cache C，然后用hash算法：hash(cache A)=key A，将3个cache服务器丢到这个ring上，就可用得到如下结果（计算cache服务器的hash值时可以用其ip等信息）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AicibUllQlLBhMywIGVdvwBJ60icWz1J7KuH0f4nviaBvFDza0wH7Pq845YQRyjQXcePyZhhQWS6Yic004Tz3sGUpCw/640?wx_fmt=jpeg&quot; alt=&quot;&quot; data-ratio=&quot;0.8939929328621908&quot; data-type=&quot;jpeg&quot; data-w=&quot;283&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　然后顺着这个ring，收集object数据，遇到cache的时候就丢进去，这样就可以将数据和cache对应起来，于是我们可以得到如下结果：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;object1：Cache A&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;object4：Cache B&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;object2/object3： Cache C&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　ok，这样就完成了数据映射，然后我们考虑一下前面普通hash算法遇到的cache服务器数量变化的情况，看一下ring hash是否解决了这个问题。&lt;/p&gt;
&lt;p&gt;　　假设cache B掉线&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AicibUllQlLBhMywIGVdvwBJ60icWz1J7Ku8HpmtyBqMkR6620UoUFDUJoiaThOVb7Ys8UNpmTbibJBcIL2w8lMicPUg/640?wx_fmt=jpeg&quot; alt=&quot;&quot; data-ratio=&quot;0.8939929328621908&quot; data-type=&quot;jpeg&quot; data-w=&quot;283&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这个时候可以发现只有原先映射到Cache B上的object4收到了影响，需要转移到Cache C上。&lt;/p&gt;
&lt;p&gt;　　如果增加一个Cache结点呢？假设增加一个Cache D：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AicibUllQlLBhMywIGVdvwBJ60icWz1J7KuRPjhcZLDfmLAqGXmCJFGBBGaYqopIkTplS3trSPZf2uKUfLBfZXLEQ/640?wx_fmt=jpeg&quot; alt=&quot;&quot; data-ratio=&quot;0.8939929328621908&quot; data-type=&quot;jpeg&quot; data-w=&quot;283&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这个时候只需要将object2转移到Cache D上，其他的没有变化。是不是很神奇？&lt;/p&gt;
&lt;p&gt;　　这里可能大家会意识到一个问题，当cache服务器数量少的时候，这个算法很容易导致数据分布不均匀，所以ring hash中还有一个虚拟节点的概念，前面只剩下cache A和cache C的例子中A上有1个数据，而C中存了3个，我们将cache（假设用ip值表示）加上一个编号，然后进行hash运算，得到更多的虚拟cache结点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hash(&quot;192.168.0.1#1&quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hash(&quot;192.168.0.1#2&quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hash(&quot;192.168.0.2#1&quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hash(&quot;192.168.0.2#2&quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　类似上面这样，一个cache服务器就对应了2个hash值，这样我们再丢到ring上就会得到如下结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/AicibUllQlLBhMywIGVdvwBJ60icWz1J7Kuek2ibJW16zcwADKBfM3uyImmKAG8GbNyHBZJZMDBJr3DXWbTeRWVP4g/640?wx_fmt=jpeg&quot; alt=&quot;&quot; data-ratio=&quot;0.8939929328621908&quot; data-type=&quot;jpeg&quot; data-w=&quot;283&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这时候object1就会落在Cache A2上，object2会落在Cache A1上，物理上其实A1和A2都是cache A，通过这种方式直观看我们将原先的1、3分布变成了2、2分布（A上1个数据C上3个数据变成A上2个数据B上2个数据）&lt;/p&gt;
&lt;p&gt;　　引入“虚拟节点”后，映射关系就从 { 对象 -&amp;gt; 节点 } 转换到了 { 对象 -&amp;gt; 虚拟节点 }，于是乎这个算法的平衡性就更好了。&lt;/p&gt;
&lt;p&gt;　　ok，一致性hash算法的原理就介绍到这里，下面可以看groupcahce中的consistent hash如何实现了。&lt;/p&gt;

&lt;p&gt;　　终于要看代码了！！！&lt;/p&gt;
&lt;p&gt;　　源码主要就如下几个package，今天我们看一下第一个package：【package consistenthash】的内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBhMywIGVdvwBJ60icWz1J7KulpggMdd0u9Vf0icLbprSMCygG6tBoN93TfVpJR1qvTfgOictQ1LUAWDA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.561877667140825&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;703&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBhMywIGVdvwBJ60icWz1J7KuBobDr6Sn1c5TJeFCibczDOlkic8msqCHtrfdKDezbnds3ULV9sdoZ5yQ/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;1.1396648044692737&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;716&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从上图我们可以看到，这里只需要关注consistenthash.go这源码文件，里面有2个类型：Hash和Map，1个函数New，Map类型有4个不可导出的属性以继3个绑定的方法。&lt;/p&gt;
&lt;p&gt;下面一个个看吧~&lt;/p&gt;
&lt;p&gt;　　1、类型Hash（需要记得Hash是一个函数类型哦）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBhMywIGVdvwBJ60icWz1J7KuO6dCa3fjhSDia82IbhZlpORDVDlB7RQPPjXQYUicRTYZU0QN5g2d4pEg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.7609289617486339&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;732&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2、Map类型（Map类型的第一个属性就是上面的Hash类型变量hash，replicas属性表示的是副本数，还记得上面我们提到的为了解决平衡性问题而引入的虚拟节点的概念吗？这些虚拟节点这是这里描述的副本数）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBhMywIGVdvwBJ60icWz1J7Ku4vCkNibR35bR9syuGUloMBibZPAWCH4leRBwlVhq9lGcDAicFeQImClwA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.4970414201183432&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1014&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3、New()函数（这个函数明显就是用来获取上面的Map类型变量实例的，初始化副本数、hash函数、hashMap表，hashMap表的key是一个表示cache服务器或者副本的hash值，value为一个具体的cache服务器，这样就完成了Cache A、Cache A1、Cache A2等副本全部映射到Cache A的功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBhMywIGVdvwBJ60icWz1J7Kuz7EiaBDBuYJJrJASlNCyV1ZpyC0QvsyUegtt23WDOwSU9A2NPjgofVg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.551923076923077&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1040&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　4、IsEmpty()函数(这个函数就没啥可讲的了，非空判断）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBhMywIGVdvwBJ60icWz1J7KuBhfA9NbjwNKhG7qGL1K0729Sz5V9tEYz3iakzyDm3ySQxRVkClxanaA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.21527041357370094&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;943&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　5、Add()函数（将缓存服务器加到Map中，比如Cache A、Cache B作为keys，如果副本数指定的是2，那么Map中存的数据是Cache A#1、Cache A#2、Cache B#1、Cache B#2的hash结果）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBhMywIGVdvwBJ60icWz1J7KupVh7kGibUDticyOia1qYH3gsiaY6t5TPyT4pHW6YiaumzWQehEtsfnDlbEg/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.6107834877843302&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1187&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　6、Get()函数（这个函数相对复杂一点，比如有一个数据：name=&quot;张三&quot;这条数据需要存，这时候通过这个函数选择一个cache服务器，返回的string类型可以是服务器ip，比如：&quot;192.168.0.1&quot;,从而调用者能够将name=&quot;张三&quot;存到&quot;192.168.0.1&quot;上）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/AicibUllQlLBhMywIGVdvwBJ60icWz1J7KuYzqKicv0DmCemUpq59F5cKFzxPK82T6BicOMzJYvOA6WiaPG1GlFMhqRA/640?wx_fmt=png&quot; alt=&quot;&quot; data-ratio=&quot;0.9888123924268503&quot; data-s=&quot;300,640&quot; data-type=&quot;png&quot; data-w=&quot;1162&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　ok，讲完了，今天的内容有点多，可能需要多花点时间消化一下~&lt;/p&gt;
&lt;p&gt;　　下一讲我们介绍groupcachepb这个package，当然不可避免地要介绍一下Protocol Buffers了，行，今天就讲到这里！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/AicibUllQlLBhLWj4k70QKTtYwJialqBaaSwODasvwtfq7vWSfrX9iat1Pw49d32E1sT19FPzaMx3xJMeVZ7siahHTA/640?wx_fmt=gif&quot; alt=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7326565143824028&quot; data-type=&quot;gif&quot; data-w=&quot;591&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 05 Aug 2018 12:28:00 +0000</pubDate>
<dc:creator>CloudGeek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloudgeek/p/9427036.html</dc:identifier>
</item>
<item>
<title>深入理解java虚拟机学习笔记（二）垃圾回收策略 - 曦阳x</title>
<link>http://www.cnblogs.com/be-thinking/p/9379598.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/be-thinking/p/9379598.html</guid>
<description>&lt;p&gt;            上篇文章介绍了JVM内存模型的相关知识，其实还有些内容可以更深入的介绍下，比如运行时常量池的动态插入，直接内存等，后期抽空再完善下上篇博客，今天来介绍下JVM中的一些垃圾回收策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       一、finailize()方法&lt;/strong&gt;&lt;strong&gt;              &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;            在介绍GC策略前，先介绍下GC中的finailize方法。当对象没有任何引用的时候，通常这个对象会被回收掉，但如果我们想在对象被回收前进行一些操作，比如关闭一些资源，或者让这个对象复活，不让他被回收怎么办？这时候就要用到finailize方法了。finailize方法是Object类中定义的方法，意味着任何一个对象都有这个方法。但这个方法只会调用一次，如果把这个对象复活后再次让这个对象死亡，那第2次回收该对象的时候是不会调用finailize方法的，而且优先级比较低，并不能保证一定会被执行，因此不建议使用finalize方法。总结起来就是3个特性：&lt;strong&gt; ①、GC之前被调用 。②、只会被调用一次。③、不可靠，不能保证被执行，不建议使用&lt;/strong&gt;。关于finalize使用方法，参考如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FinalizeTest {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; FinalizeTest test;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;     * VM参数：-XX: +PrintGCDetails -Xmx=1M -Xms=1M
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先对test对象赋值&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         test = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FinalizeTest();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; _1m = 1024 * 1024&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将test置为null，便于回收&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         test = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            System.gc();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟睡眠5s，finalize优先级较低，保证finalize能执行&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             Thread.sleep(5000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (test != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             System.out.println(&quot;first,i am alive&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             System.out.println(&quot;first,i am dead&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;由于test在finalize方法里复活了，再次将test置为null&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         test = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            System.gc();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             Thread.sleep(5000);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟睡眠5s，让GC回收&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (test != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             System.out.println(&quot;second,i am alive&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             System.out.println(&quot;second,i am dead&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; finalize() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         test = &lt;span&gt;this&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         System.out.println(&quot;finalize excuted&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;.finalize();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用父类的finailize方法&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;         该代码运行结果如下：&lt;/p&gt;
&lt;p&gt;         &lt;img src=&quot;https://images2018.cnblogs.com/blog/1038767/201808/1038767-20180805105129169-811327388.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         可以看到，finalize方法执行后，test对象又被重新激活了，因此打印了first,i am alive。但是第二次GC的时候，finalize方法并未被执行，因此打印了second,i am dead。前面提到finalize是优先级低不可靠的，那如果没有Thread.sleep(5000)，再来看下代码和结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FinalizeTest {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; FinalizeTest test;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;     * VM参数：-XX: +PrintGCDetails -Xmx=1M -Xms=1M
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;     *
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; args
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先对test对象赋值&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         test = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FinalizeTest();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; _1m = 1024 * 1024&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将test置为null，便于回收&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         test = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            System.gc();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟睡眠5s，finalize优先级较低，保证finalize能执行
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不执行睡眠操作，Thread.sleep(5000);&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (test != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             System.out.println(&quot;first,i am alive&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             System.out.println(&quot;first,i am dead&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;由于test在finalize方法里复活了，再次将test置为null&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         test = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            System.gc();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不执行睡眠操作，Thread.sleep(5000);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟睡眠5s，让GC回收&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            e.printStackTrace();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (test != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             System.out.println(&quot;second,i am alive&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             System.out.println(&quot;second,i am dead&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; finalize() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Throwable {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         test = &lt;span&gt;this&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         System.out.println(&quot;finalize excuted&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;super&lt;/span&gt;.finalize();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用父类的finailize方法&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        运行结果如下：  &lt;/p&gt;
&lt;p&gt;       &lt;img src=&quot;https://images2018.cnblogs.com/blog/1038767/201808/1038767-20180805105832781-1890687022.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       这里可以很清楚地看到，finalize方法的优先级是比较低的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       关于这个例子的反思：这个例子中第一段代码是参考《深入理解java虚拟机》里的代码实现的，但是总感觉有2点疑问：为什么test对象是以static修饰的成员变量方式存在？如果是static修饰，那就是存在方法区了，而方法区的GC通常效果不太好的。另一个是以成员变量的方式存在，这样finalize回收的时候，体现不出是对当前对象本身的回收，所以感觉这个例子并不是很好。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;      二、引用计数法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;     &lt;/span&gt;&lt;/strong&gt; &lt;span&gt;引用计数法是一种比较早的GC回收算法，目前一般不采用，其主要思想是：&lt;strong&gt;每个对象都维持一个引用计数器，初始值为0，当一个对象被引用的时候，该对象的引用计数器就加1，当不被引用的时候，该对象的引用计数器就减1，如果一个对象的引用计数器变为了0，则该对象被认为是可以回收的&lt;/strong&gt;。采用这种方式的优缺点都很明显，优点是实现简单，效率高，缺点是可能存在循环引用，导致内存溢出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;strong&gt;&lt;strong&gt; &lt;/strong&gt;三、标记-清除法&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;       &lt;/strong&gt;&lt;/strong&gt;  标记-清除法按名字分为“标记”和“清除”2个阶段，其基本思想是：&lt;strong&gt;首先标记出所有存活的对象，标记完成后，统一清除所有被标记的对象。那怎么判断某个对象是可以回收的呢？GC时，从一系列GC Roots根节点开始遍历，遍历时走过的路径即称为引用链，如果一个对象和GC Roots没有任何引用链相关，那么这个对象就不可用，就会被判定为可回收，这种算法也叫根搜索算法&lt;/strong&gt;。&lt;/span&gt;那么哪些对象可以成为GC Roots对象呢？在java语言里，可以作为GC Roots的对象包括下面4种： &lt;/p&gt;
&lt;p&gt;            虚拟机栈中的引用变量 &lt;/p&gt;
&lt;p&gt;            方法区中的类静态属性引用的对象 &lt;/p&gt;
&lt;p&gt;           方法区中的常量引用的对象 &lt;/p&gt;
&lt;p&gt;           本地方法栈中JNI（即native方法）的引用的对象&lt;/p&gt;
&lt;p&gt;           标记-清除法的算法示意图如下：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1038767/201808/1038767-20180805195423307-1673345945.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;     注：本文的GC回收算法图片转自一个网友的文章（&lt;a href=&quot;http://www.360doc.com/content/12/1219/15/495229_255087879.shtml&quot; target=&quot;_blank&quot;&gt;点这里&lt;/a&gt;），该网友的图片内容也与原著一致，只是颜色不同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;     四、新生代的复制法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;         &lt;/span&gt;&lt;/strong&gt; &lt;span&gt; 复制法的基本思想是：&lt;strong&gt;将内存分为大小相等的2块，每次只使用其中一块，GC时每次将所有存活的对象复制到另一块区域，然后清理该内存&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;           这几种都是方法区和栈中的引用对象。&lt;/span&gt;&lt;span&gt;复制法的优点是：实现简单，回收速度快，且不会产生内存碎片。但由于每次只使用其中一块，导致内存利用率较低。复制算法的示意图如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        &lt;img src=&quot;https://images2018.cnblogs.com/blog/1038767/201808/1038767-20180805194004973-1890871427.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        现在的商业虚拟机都采用复制法来回收新生代，由于新生代的对象98%以上都是朝生夕死的，所以并不需要按照1：1来分配，而是将内存分为较大的Eden区和2块较小的Survivor区（通常Eden和Survivor区大小的比值为8:1:1，可以根据SurvivorRationJVM内存参数来设置比值），每次使用Eden区和其中一块Survivor区类分配对象，GC时，将Eden区和Survivor区中的存活对象复制到另一块Survivor区域，这样一来，内存利用率就高了，而且运行速度也很快。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       五、老年代的标记-整理法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;           &lt;/strong&gt;复制法在对象存活率较高时，回收效率就变低了，而在老年代中，大部分的对象都是存活期较高的对象，因此就不适宜采用复制法进行老年代的GC。根据老年代的特点，并结合标记-清除法的思路，于是提出了标记-整理法。其主要思路是：标记过程与标记-清除法一致，只是标记完成后，不直接对未存活进行清除，而是将所有存活的对象都向一端移动，然后清理掉端边界以外的所有内存区域。这种方法的优点是不会产生内存碎片。标记-整理法的算法示意图如下：       &lt;img src=&quot;https://images2018.cnblogs.com/blog/1038767/201808/1038767-20180805193929545-1671683650.png&quot; alt=&quot;&quot;/&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 05 Aug 2018 12:07:00 +0000</pubDate>
<dc:creator>曦阳x</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/be-thinking/p/9379598.html</dc:identifier>
</item>
</channel>
</rss>