<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>从零开始学 Web 之 jQuery（五）操作元素其他属性，为元素绑定事件 - Daotin</title>
<link>http://www.cnblogs.com/lvonve/p/9289334.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lvonve/p/9289334.html</guid>
<description>&lt;blockquote readability=&quot;6.9491150442478&quot;&gt;
&lt;p&gt;大家好，这里是「 从零开始学 Web 系列教程 」，并在下列地址同步更新......&lt;/p&gt;
&lt;p&gt;在这里我会从 Web 前端零基础开始，一步步学习 Web 相关的知识点，期间也会分享一些好玩的项目。现在就让我们一起进入 Web 前端学习的冒险之旅吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Daotin/pic/raw/master/fgx.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;方法一&quot;&gt;1、方法一&lt;/h2&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;元素.css(&quot;width&quot;);
元素.css(&quot;height&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;最后得到的是字符串类型的，比如 200px。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们在设置为原来宽高2倍的时候，就要先把获取的宽高转换成数字类型，再乘以2，这样操作比较麻烦，有没有简单的方法呢？&lt;/p&gt;
&lt;h2 id=&quot;方法二&quot;&gt;2、方法二&lt;/h2&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;元素.width(属性值或者数字);
元素.height(属性值或者数字);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;1、jQuery中用以上方式可以获取和设置元素的宽高。&lt;/p&gt;
&lt;p&gt;2、当没有参数的时候是获取元素的宽高属性。&lt;/p&gt;
&lt;p&gt;3、当设置参数为 &lt;code&gt;200 或者 200px&lt;/code&gt;的时候是设置元素的宽高为 200px。&lt;/p&gt;
&lt;p&gt;4、以上方法不仅可以获取行内式元素的宽高，也可以获取嵌入式写法元素的宽高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre class=&quot;html&quot;&gt;
&lt;code&gt;&amp;lt;script&amp;gt;
  $(function () {
  $(&quot;#btn&quot;).click(function () {
    $(&quot;#dv&quot;).width( $(&quot;#dv&quot;).width()*2);
    $(&quot;#dv&quot;).height( $(&quot;#dv&quot;).height()*2);
  });
});
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;方法一-1&quot;&gt;1、方法一&lt;/h2&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;元素.css(&quot;left&quot;);
元素.css(&quot;left&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;方法二-1&quot;&gt;2、方法二&lt;/h2&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 元素的left和top获取
元素.offset();
// 元素的left和top设置
元素.offset({&quot;left&quot;:值, &quot;top&quot;,值};&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;1、&lt;code&gt;元素.offset();&lt;/code&gt; 返回值是一个对象。（比如：{top: 200, left: 200}）&lt;/p&gt;
&lt;p&gt;2、这里的 left 是包括：left 的值和 margin-left 值之和。&lt;/p&gt;
&lt;p&gt;3、这里的 top 是包括：top 的值和 margin-top 值之和。&lt;/p&gt;
&lt;p&gt;4、在设置的时候，left 和 top 的值是数字，没有 px。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;$(function () {
    $(&quot;#btn&quot;).click(function () {                                       $(&quot;#dv&quot;).offset({&quot;left&quot;:$(&quot;#dv&quot;).offset().left*2, &quot;top&quot;:$(&quot;#dv&quot;).offset().top*2});
    });
});&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;语法：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 获取元素向左卷曲出去的距离
元素.scrollLeft();
// 获取元素向上卷曲出去的距离
元素.scrollTop();&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;PS：没有 scrollWidth() 和 scrollHeight()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;元素.scroll(function() {}); // 元素卷曲事件，元素在向上或向左卷曲的时候触发的事件。&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;方式一事件名&quot;&gt;1、方式一：（事件名）&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;元素.事件名(事件处理函数);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 绑定鼠标进入，离开，点击事件
    $(&quot;#btn&quot;).mouseenter(function () {
        console.log(&quot;mouseenter&quot;);
    });
    $(&quot;#btn&quot;).mouseleave(function () {
        console.log(&quot;mouseleave&quot;);
    });
    $(&quot;#btn&quot;).click(function () {
        console.log(&quot;click&quot;);
    });

// 链式编程
$(&quot;#btn&quot;).mouseenter(function () {
        console.log(&quot;mouseenter&quot;);
    }).mouseleave(function () {
        console.log(&quot;mouseleave&quot;);
    }).click(function () {
        console.log(&quot;click&quot;);
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;方法二bind方法&quot;&gt;2、方法二：（bind方法）&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;元素.bind(&quot;事件名&quot;, 事件处理函数);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;    $(&quot;#btn&quot;).bind(&quot;mouseenter&quot;, function () {
        console.log(&quot;bind:mouseenter&quot;);
    });
    $(&quot;#btn&quot;).bind(&quot;mouseleave&quot;, function () {
        console.log(&quot;bind:mouseleave&quot;);
    });
    $(&quot;#btn&quot;).bind(&quot;click&quot;, function () {
        console.log(&quot;bind:click&quot;);
    });

// 链式编程
    $(&quot;#btn&quot;).bind(&quot;mouseenter&quot;, function () {
        console.log(&quot;bind:mouseenter&quot;);
    }).bind(&quot;mouseleave&quot;, function () {
        console.log(&quot;bind:mouseleave&quot;);
    }).bind(&quot;click&quot;, function () {
        console.log(&quot;bind:click&quot;);
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;方法三bind对象&quot;&gt;3、方法三：（bind对象）&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;元素.bind({&quot;事件名1&quot;:事件处理函数1, &quot;事件名2&quot;:事件处理函数2,...});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;    $(&quot;#btn&quot;).bind({
        &quot;mouseenter&quot;: function () {
            console.log(&quot;bind-obj:mouseenter&quot;);
        }, &quot;mouseleave&quot;: function () {
            console.log(&quot;bind-obj:mouseleave&quot;);
        }, &quot;click&quot;: function () {
            console.log(&quot;bind-obj:click&quot;);
        }
    });&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;使用 bind 对象的方式，只需要一个bind，可以绑定多个事件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;方式四delegate方法&quot;&gt;4、方式四：（delegate方法）&lt;/h2&gt;
&lt;p&gt;语法：（父元素替子元素绑定事件）&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;父元素.delegate(&quot;子元素&quot;，&quot;事件名&quot;，事件处理函数);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 为div下p标签绑定点击事件
$(&quot;#dv&quot;).delegate(&quot;p&quot;, &quot;click&quot;, function () {
  //....
});&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;方式五on方法&quot;&gt;5、方式五：（on方法）&lt;/h2&gt;
&lt;p&gt;我发现 delegate 方法内部调用的是 on 方法，那么 on 方法也可以绑定事件（注意：on 的参数顺序和 delegate 相反）。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;父元素.on(&quot;事件名&quot;, &quot;子元素&quot;, 事件处理函数);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// 为div下p标签绑定点击事件
$(&quot;#dv&quot;).on(&quot;click&quot;, &quot;p&quot;, function () {
  //....
});&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;PS：on 其实不仅可以给子元素绑定事件，还可以给自己绑定事件，这时候只需要把子元素的参数去掉就好了。&lt;/p&gt;
&lt;p&gt;语法：&lt;code&gt;元素.on(&quot;事件名&quot;, 事件处理函数);&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Daotin/pic/raw/master/fgx.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 10 Jul 2018 07:28:00 +0000</pubDate>
<dc:creator>Daotin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lvonve/p/9289334.html</dc:identifier>
</item>
<item>
<title>Ubuntu 18.04 下如何配置mysql 及 配置远程连接 - 野菊花</title>
<link>http://www.cnblogs.com/Jackyye/p/9289275.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Jackyye/p/9289275.html</guid>
<description>&lt;p&gt;首先是大家都知道的老三套，啥也不说上来就放三个大招：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sudo apt-get install mysql-&lt;span&gt;server

sudo apt isntall mysql-&lt;span&gt;client

sudo apt install libmysqlclient-dev&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这三步下来mysql就装好了，然后我们偷偷检查一下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sudo netstat -tap | grep mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好，其实这个检查并没有什么卵用，&lt;/p&gt;
&lt;p&gt;接下来大家可能纳闷了，数据库没密码？？没见过要设置密码啊；&lt;/p&gt;
&lt;p&gt;没办法只能偷偷看一下备用密码；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sudo vim /etc/mysql/debian.cnf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开用vim打开这个文件，看到如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/795169/201807/795169-20180710150131836-1979840520.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;OK，没错，debian-sys-maint 就是备用用户名， 下面那一串很嗨长的就是密码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#接下来你就可以用
mysql -u debain-sys-maint -&lt;span&gt;p
#输入你的密码后登录了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;登录完第一件事请改密码；&lt;/p&gt;
&lt;p&gt;说是改密码其实是添加一个用户，使用中老年上网冲浪术，我们给自己加一个用户：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; grant all on *.* to admin@&quot;%&quot; identified by &quot;123&quot;&lt;span&gt; ;
#admin是你的用户名，123是密码，并给它开放全部权限&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后再掏出mysql基本语法，看看添加成功没；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
mysql &amp;gt; select User,Host from&lt;span&gt; mysql.user 
#看看自己用户名有没有添加进去，和是不是*权限&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后 exit();  !!!!!!!!!!!&lt;/p&gt;
&lt;p&gt;重启一哈；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sudo /etc/init.d/mysql restart
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;远程连接呢，怎么弄，这个简单 ，掏出管理员模式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
sudo su #进入管理员
sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf #打开这个文件
#把127.0.0.0 的那一行前面加个#号，：w保存：q退出
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再重启一下 ，解决问题，可以用nevicat登录了 白白！&lt;/p&gt;

</description>
<pubDate>Tue, 10 Jul 2018 07:21:00 +0000</pubDate>
<dc:creator>野菊花</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Jackyye/p/9289275.html</dc:identifier>
</item>
<item>
<title>【二代示波器教程】第13章 RTX操作系统版本二代示波器实现 - 席萌0209</title>
<link>http://www.cnblogs.com/armfly/p/9289260.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/armfly/p/9289260.html</guid>
<description>&lt;p&gt;&lt;span&gt;本章教程为大家讲解RTX操作系统版本的二代示波器实现。主要讲解RTOS设计框架，即各个任务实现的功能，任务间的通信方案选择，任务栈，系统栈以及全局变量共享问题。同时，工程调试方法也专门做了说明。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13.1  注意事项（重要必读）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13.2  任务功能划分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13.3  用户任务优先级设置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13.4  全局变量分配，系统堆栈和任务堆栈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13.5  任务间通信和全局变量共享问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13.6  RTX配置向导&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13.7  RTX系统调试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13.8  MDK优化等级&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13.9  总结&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;13.1  注意事项（重要必读）&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、学习本章节前，务必保证已经学习完毕前面章节。&lt;span&gt;另外，工程代码注释已经比较详细，了解了框架后，直接看源码即可。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、RTX操作系统版本的限制使用MDK4.74，其它MDK版本不支持。详情看我们RTX教程即可：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=14837&quot;&gt;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=14837&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、仅支持800*480分辨率显示屏，如果是电容屏，无需校准。如果是电阻屏，需要校准，按下按键K1即可进入校准界面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、由于按键不够用，在MainTask.c文件的MainTask函数里面对按键K1的消息处理做了一个条件编译，大家可以根据需要选择执行触摸校准功能还是截图功能。#if 1表示执行触摸校准，#if 0表示执行截图功能。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;case&lt;/span&gt;&lt;span&gt; KEY_1_DOWN:

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***********由于按键不够用，将截图功能取消**********&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

     &lt;span&gt;#if&lt;/span&gt; 0&lt;span&gt;

         hTouchWin &lt;/span&gt;= WM_CreateWindowAsChild(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,

                                                  &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,

                                                  &lt;/span&gt;&lt;span&gt;800&lt;/span&gt;&lt;span&gt;,

                                                  &lt;/span&gt;&lt;span&gt;480&lt;/span&gt;&lt;span&gt;,

                                                  WM_HBKWIN,

                                                  WM_CF_SHOW,

                                                  _cbTouchCalibration,

                                                  &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

         WM_Exec();

         WM_SelectWindow(hTouchWin);

 

         &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 执行触摸校准 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

         TOUCH_Calibration();

 

         WM_SelectWindow(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

 

         WM_DeleteWindow(hTouchWin);

         WM_Exec();

 

         &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 自动触发暂停状态 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

         &lt;span&gt;if&lt;/span&gt;(g_Flag-&amp;gt;hWinRunStop == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)

         {

              g_Flag&lt;/span&gt;-&amp;gt;ucWaveRefresh = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

         }

    

         &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 普通触发暂停状态 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

         &lt;span&gt;if&lt;/span&gt;(TriggerFlag == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)

         {

              TriggerFlag &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;

         }

     &lt;/span&gt;&lt;span&gt;#else&lt;/span&gt;&lt;span&gt;

         os_sem_send (&lt;/span&gt;&amp;amp;&lt;span&gt;semaphore);

     &lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;

     &lt;span&gt;break&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;5、文件系统是用的RL-FlashFS，如果大家想学习RL-FlashFS的使用，学习KEIL给的手册即可：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=2988&quot;&gt;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=2988&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6、MDK安装目录里面带的emWin5.4x版本的截图功能有bug，详情看此贴：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=82445&quot;&gt;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=82445&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当前用的5.36版本，也是来自MDK。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;13.2  任务功能划分&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;前面第三章已经将任务功能划分好：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1379107/201807/1379107-20180710151801958-889086935.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据这个功能划分，创建所需要的任务。另外，RTX本身是不支持CPU利用率统计的，所以专门创建了一个任务实现CPU利用率统计。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;13.2.1  主函数创建&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在main.c文件实现：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

*********************************************************************************************************

*    函 数 名: main

*    功能说明: 标准c程序入口。

*    形    参: 无

*    返 回 值: 无

*********************************************************************************************************

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;int&lt;/span&gt; main (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)

{   

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化外设 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     bsp_Init();

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 创建启动任务 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     os_sys_init_user (AppTaskStart,              &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务函数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

                       &lt;span&gt;6&lt;/span&gt;,                         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务优先级 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

                       &amp;amp;AppTaskStartStk,          &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务栈 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

                       &lt;span&gt;sizeof&lt;/span&gt;(AppTaskStartStk));  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务栈大小，单位字节数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

     &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;硬件外设的初始化函数bsp_Init是在 bsp.c 文件实现：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

*********************************************************************************************************

*    函 数 名: bsp_Init

*    功能说明: 初始化所有的硬件设备。该函数配置CPU寄存器和外设的寄存器并初始化一些全局变量。只需要调用一次

*    形    参：无

*    返 回 值: 无

*********************************************************************************************************

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;void&lt;/span&gt; bsp_Init(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)

{

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

         由于ST固件库的启动文件已经执行了CPU系统时钟的初始化，所以不必再次重复配置系统时钟。

         启动文件配置了CPU主时钟频率、内部Flash访问速度和可选的外部SRAM FSMC初始化。

 

         系统时钟缺省配置为168MHz，如果需要更改，可以修改 system_stm32f4xx.c 文件

     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

    

     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 优先级分组设置为4，可配置0-15级抢占式优先级，0级子优先级，即不存在子优先级。&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);

 

     SystemCoreClockUpdate();    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 根据PLL配置更新系统时钟频率变量 SystemCoreClock &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

 

     bsp_InitDWT();          &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化DWT &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     bsp_InitUart();         &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化串口 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     bsp_InitKey();         &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化按键变量（必须在 bsp_InitTimer() 之前调用） &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    

     bsp_InitI2C();             &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 配置I2C总线 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    

     bsp_InitExtSDRAM();

     bsp_DetectLcdType();    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 检测触摸板和LCD面板型号, 结果存在全局变量 g_TouchType, g_LcdType &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    

     TOUCH_InitHard();      &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化配置触摸芯片 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     LCD_ConfigLTDC();       &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化配置LTDC &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

 

     DSO_ConfigCtrlGPIO();   &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化示波器模块的引脚配置 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; 

    

     bsp_InitADC();          &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化ADC1，ADC2和ADC3 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     bsp_InitDAC1();         &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化DAC1 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    

     g_DAC1.ucDuty &lt;/span&gt;= &lt;span&gt;50&lt;/span&gt;;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化DAC配置，用于信号发生器 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     g_DAC1.ucWaveType &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

     g_DAC1.ulAMP &lt;/span&gt;= &lt;span&gt;4095&lt;/span&gt;&lt;span&gt;;

     g_DAC1.ulFreq &lt;/span&gt;= &lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;

     dac1_SetSinWave(g_DAC1.ulAMP, g_DAC1.ulFreq);

 

     MountSD();               &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 挂载SD卡 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

        

     TIM8_MeasureTrigConfig(); &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化TIM8用于记录一段波形 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;创建任务的主要功能是硬件外设初始化和启动任务的创建，相对比较简单。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;13.2.2 启动任务（信号处理）&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;启动任务用于二代示波器的信号处理：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

*********************************************************************************************************

*    函 数 名: AppTaskStart

*    功能说明: 启动任务，也是最高优先级任务，用于信号处理。

*    形    参: 无

*    返 回 值: 无

*   优 先 级: 6 

*********************************************************************************************************

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

__task &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; AppTaskStart(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)

{

     OS_RESULT xResult;

    

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 优先创建统计任务-----------------&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     HandleTaskStat &lt;/span&gt;= os_tsk_create_user(AppTaskStatistic,        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务函数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

                                         &lt;span&gt;1&lt;/span&gt;,                       &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务优先级 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

                                           &amp;amp;AppTaskStatStk,         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务栈 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

                                           &lt;span&gt;sizeof&lt;/span&gt;(AppTaskStatStk)); &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务栈大小，单位字节数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    

     OSStatInit();

 

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 创建任务间通信机制和动态内存分配，此函数要优先调用 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     AppObjCreate();

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 创建任务 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     AppTaskCreate();

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 实数序列FFT长度 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     fftSize &lt;/span&gt;= &lt;span&gt;2048&lt;/span&gt;&lt;span&gt;;

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 正变换 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    ifftFlag &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 初始化结构体S中的参数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     arm_rfft_fast_init_f32(&lt;/span&gt;&amp;amp;&lt;span&gt;S, fftSize);

    

     HandleTaskStart &lt;/span&gt;=&lt;span&gt; os_tsk_self();

 

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)

    {

         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(os_evt_wait_or(StartTaskWaitFlag, &lt;span&gt;0xFFFF&lt;/span&gt;) ==&lt;span&gt; OS_R_EVT)

        {

            xResult &lt;/span&gt;=&lt;span&gt; os_evt_get ();

        

              &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (xResult)

            {

                   &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; DspFFT2048Pro_15:

                       &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 读取的是ADC3的位置 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

                       g_DSO1&lt;/span&gt;-&amp;gt;usCurPos = &lt;span&gt;10240&lt;/span&gt; - DMA2_Stream1-&amp;gt;&lt;span&gt;NDTR;

                  

                        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 读取的是ADC1的位置 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

                       g_DSO2&lt;/span&gt;-&amp;gt;usCurPos = &lt;span&gt;10240&lt;/span&gt; - DMA2_Stream0-&amp;gt;&lt;span&gt;NDTR;

                  

                       DSO2_WaveTrig(g_DSO2&lt;/span&gt;-&amp;gt;&lt;span&gt;usCurPos);

                       DSO1_WaveTrig(g_DSO1&lt;/span&gt;-&amp;gt;&lt;span&gt;usCurPos);

                       DSO2_WaveProcess();

                       DSO1_WaveProcess();

                       &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

 

                   &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; DspMultiMeterPro_0:

                       g_uiAdcAvgSample &lt;/span&gt;=&lt;span&gt; ADC_GetSampleAvgN();

                       &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

                  

                   &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 其它位暂未使用 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

                   &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:

                       printf_taskdbg(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xResult = %x\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, xResult);

                       &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

            }

         }

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;除了信号处理，还有一个重要的功能要在启动任务里面优先实现，就是统计任务的创建和执行，用于统计CPU利用率，实现步骤如下：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;进入到启动任务后，其它任何任务都不要创建，先创建一个统计任务，不让执行。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;启动任务延迟100ms，延迟的这100ms时间基本都是空闲任务在执行，在空闲任务里面做32位变量加1计算。我们就以这100ms，变量计数的最大值作为CPU利用率的分母。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;然后开启统计任务的执行，每100ms执行一次，统计即可。空闲任务此时的计数值作为分子。通过这种方式就实现了CPU利用率的统计。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;统计任务执行后就是任务间通信机制函数AppObjCreate（动态内存分配也是在这个函数里面实现，在本章13.4小节有说明）和任务创建函数AppTaskCreate，代码比较简单，我们这里就不贴出来了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;说完了前面这些，最重要的还是信号处理。根据不同的事件标志处理不同的功能，任务里面主要是分为了两类：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、双通道波形数据处理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;主要实现软件触发，计算FFT ，FIR ，RMS，最大值，最小值，平均值和峰峰值。两个通道都进行了处理。具体实现方法已经在前面章节为大家做了讲解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、另一个是简单电压测量处理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个功能比较简单，就是获取一组ADC数值，然后求平均。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;13.2.3 统计任务&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;统计任务的实现代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

*********************************************************************************************************

*    函 数 名: AppTaskStatistic

*    功能说明: 统计任务，用于实现CPU利用率的统计。为了测试更加准确，可以开启注释调用的全局中断开关

*    形    参: 无

*    返 回 值: 无

*   优 先 级: 1 (数值越小优先级越低，这个跟uCOS相反)

*********************************************************************************************************

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;void&lt;/span&gt;  OSStatInit (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)

{

     OSStatRdy &lt;/span&gt;=&lt;span&gt; FALSE;

    

    os_dly_wait(&lt;/span&gt;&lt;span&gt;2u&lt;/span&gt;);            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 时钟同步 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

    

    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;__disable_irq();&lt;/span&gt;
&lt;span&gt;
    OSIdleCtr    &lt;/span&gt;= &lt;span&gt;0uL&lt;/span&gt;;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 清空闲计数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;__enable_irq();&lt;/span&gt;
&lt;span&gt;
    

    os_dly_wait(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;);           &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 统计100ms内，最大空闲计数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

    

     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;__disable_irq();&lt;/span&gt;
&lt;span&gt;
    OSIdleCtrMax &lt;/span&gt;= OSIdleCtr;   &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 保存最大空闲计数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    OSStatRdy    &lt;/span&gt;=&lt;span&gt; TRUE;

     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;__enable_irq();&lt;/span&gt;
&lt;span&gt;
}

 

__task &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;  AppTaskStatistic (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)

{

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (OSStatRdy ==&lt;span&gt; FALSE)

     {

        os_dly_wait(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;);     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 等待统计任务就绪 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    }

 

    OSIdleCtrMax &lt;/span&gt;/= &lt;span&gt;100uL&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (OSIdleCtrMax == &lt;span&gt;0uL&lt;/span&gt;&lt;span&gt;)

     {

        OSCPUUsage &lt;/span&gt;= &lt;span&gt;0u&lt;/span&gt;&lt;span&gt;;

    }

    

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;__disable_irq();&lt;/span&gt;
&lt;span&gt;
    OSIdleCtr &lt;/span&gt;= OSIdleCtrMax * &lt;span&gt;100uL&lt;/span&gt;;  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置初始CPU利用率 0% &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;__enable_irq();&lt;/span&gt;

    

    &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (;;)

     {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;__disable_irq();&lt;/span&gt;
&lt;span&gt;
        OSIdleCtrRun &lt;/span&gt;= OSIdleCtr;    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 获得100ms内空闲计数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

        OSIdleCtr    &lt;/span&gt;= &lt;span&gt;0uL&lt;/span&gt;;          &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 复位空闲计数 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;__enable_irq();            /* 计算100ms内的CPU利用率 */&lt;/span&gt;
&lt;span&gt;
        OSCPUUsage   &lt;/span&gt;= (&lt;span&gt;100uL&lt;/span&gt; - (&lt;span&gt;float&lt;/span&gt;)OSIdleCtrRun /&lt;span&gt; OSIdleCtrMax);

        os_dly_wait(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;);            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 每100ms统计一次 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;统计任务的实现思路就是前面13.2.2小节中介绍的方法。这个统计任务的实现思路是由uCOS-II修改而来的，如果大家研究过uCOS-II的源码，这里的代码还是比较好理解的。没有研究过也没有关系，直接根据13.2.2小节里面介绍的思路看统计任务的实现代码即可。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;13.2.4 GUI任务&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;emWin任务的实现代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

*********************************************************************************************************

*    函 数 名: AppTaskGUI

*    功能说明: GUI任务。

*    形    参: 无

*    返 回 值: 无

*   优 先 级: 2

*********************************************************************************************************

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

__task &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; AppTaskGUI(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)

{

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)

    {

         MainTask();

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;emWin的代码都是在函数MainTask里面实现，这样做是方便在main.c文件里面统一管理任务。关于GUI部分最重要的界面优化，波形刷新优化，波形浏览等，在前面章节已经都做了讲解，我们这里不再赘述。更详细的实现，需要结合前面章节的讲解去看源码。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;13.2.5 用户接口任务&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;这个任务暂时未执行任何功能，保留供以后升级使用。代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

*********************************************************************************************************

*    函 数 名: AppTaskUserIF

*    功能说明: 保留，暂未使用。

*    形    参: 无

*    返 回 值: 无

*   优 先 级: 3

*********************************************************************************************************

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

__task &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; AppTaskUserIF(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)

{

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)

    {

         os_dly_wait(&lt;/span&gt;&lt;span&gt;2000&lt;/span&gt;&lt;span&gt;);

     }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;13.2.6 文件系统处理任务&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;当前文件系统处理任务主要用来做截图功能，将GUI界面以BMP格式存储到SD卡里面：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

*********************************************************************************************************

*    函 数 名: AppTaskFsPro

*    功能说明: 文件系统处理任务。

*    形    参: 无

*    返 回 值: 无

*   优 先 级: 4 

*********************************************************************************************************

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

__task &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; AppTaskFsPro(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)

{

     OS_RESULT xResult;

     &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; uint16_t usMaxBlockTime = &lt;span&gt;0xFFFF&lt;/span&gt;&lt;span&gt;;

     uint8_t  Pic_Name &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

     &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; buf[&lt;span&gt;40&lt;/span&gt;&lt;span&gt;];

    

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)

    {

         xResult &lt;/span&gt;= os_sem_wait (&amp;amp;&lt;span&gt;semaphore, usMaxBlockTime);

        

         &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (xResult)

         {

              &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 无需等待接受到信号量同步信号 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

              &lt;span&gt;case&lt;/span&gt;&lt;span&gt; OS_R_OK:

 

              &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 信号量不可用，usMaxBlockTime等待时间内收到信号量同步信号 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

              &lt;span&gt;case&lt;/span&gt;&lt;span&gt; OS_R_SEM:

                   sprintf((&lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *)buf,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;M0:\\PicSave\\%d.bmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,Pic_Name);

             

                   foutbmp &lt;/span&gt;= fopen (buf, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

                   &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (foutbmp !=&lt;span&gt; NULL)

                   {

                       &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 向SD卡绘制BMP图片 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

                       GUI_BMP_Serialize(_WriteByte2File, foutbmp);

                      

                       &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 关闭文件 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

                       fclose(foutbmp);

                   }

                   printf_taskdbg(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;截图完成\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);          

                   Pic_Name&lt;/span&gt;++&lt;span&gt;;  

                   &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

 

              &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 超时 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

              &lt;span&gt;case&lt;/span&gt;&lt;span&gt; OS_R_TMO:

                   &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

             

              &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 其他值不处理 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

              &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:                    

                   &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

         }   

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;后期这个任务将被升级，用于将波形数据以CSV文件格式存储到SD卡里面。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;13.2.7 触摸和按键任务&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;触摸和按键任务实现的功能比较简单，主要是按键扫描和触摸扫描：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

*********************************************************************************************************

*    函 数 名: AppTaskMsgPro

*    功能说明: 按键和触摸检测

*    形    参: 无

*    返 回 值: 无

*   优 先 级: 5 

*********************************************************************************************************

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

__task &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; AppTaskMsgPro(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)

{

     uint8_t  ucCount &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

    

    

    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)

    {

         &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 1ms一次触摸扫描，电阻触摸屏 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

         &lt;span&gt;if&lt;/span&gt;(g_tTP.Enable == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)

         {

              TOUCH_Scan();

             

              &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 按键扫描 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

              ucCount&lt;/span&gt;++&lt;span&gt;;

              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ucCount == &lt;span&gt;10&lt;/span&gt;&lt;span&gt;)

              {

                   ucCount &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

                   bsp_KeyScan();

              }

              os_dly_wait(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);                 

         }

        

         &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 10ms一次触摸扫描，电容触摸屏GT811 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

         &lt;span&gt;if&lt;/span&gt;(g_GT811.Enable == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)

         {

              bsp_KeyScan();

              GT811_OnePiontScan();

              os_dly_wait(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);           

         }

        

         &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 10ms一次触摸扫描，电容触摸屏FT5X06 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

         &lt;span&gt;if&lt;/span&gt;(g_tFT5X06.Enable == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)

         {

              bsp_KeyScan();

              FT5X06_OnePiontScan();

              os_dly_wait(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);

         }

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;知识点拓展：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新版emWin教程第4章或者第5章，对触摸的实现做了详细讲解：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=19834&quot;&gt;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=19834&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;13.3 用户任务优先级设置&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;当前任务的优先级安排如下（数值越小，优先级越低）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;AppTaskStatistic任务&lt;/span&gt;&lt;/strong&gt;  : 优先级1。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;统计任务的优先级最低，这个毫无争议，因为它要统计CPU利用率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;AppTaskGUI任务&lt;/span&gt;&lt;/strong&gt;      : 优先级2。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;emWin任务是除了空闲任务，统计任务以外最低优先级的，因为emWin极其占用系统资源，而且时间长，如果这个任务设置为高优先级，会直接影响低优先级任务的执行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;AppTaskUserIF任务&lt;/span&gt;&lt;/strong&gt;   : 优先级3。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;保留，未使用任务，暂且安排为这个优先级。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;AppTaskFsPro任务&lt;/span&gt;&lt;/strong&gt;    : 优先级4。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;AppTaskMsgPro任务&lt;/span&gt;&lt;/strong&gt;  : 优先级5。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;触摸和按键任务，以及文件系统任务的优先级谁高谁低都没有关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;AppTaskStart任务  &lt;/span&gt;&lt;/strong&gt;   : 优先级6。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;DSP任务一定要是优先级最高的，因为采集的数据要实时处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;知识点拓展：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于任务优先级的安排，在我们RTX操作系统教程第8章的8.2小节有些拓展：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=14837&quot;&gt;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=14837&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在我们FreeRTOS操作系统教程的第13章的13.2小节有些拓展：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=17658&quot;&gt;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=17658&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;13.4 全局变量分配，系统堆栈和任务堆栈&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1、全局变量分配&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;示波器的设计需要很多变量进行逻辑管理，从设计之初就需要将变量分类进行结构体封装，方便以后的维护升级。这一步至关重要，实际中差不多要定义上百个变量，如果不进行分类管理，以后的升级维护将非常麻烦。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种方式还有一个好处是方便我们将F429的CCM RAM空间分配给这些变量使用。使用CCM RAM的好处是速度比通用RAM要快些，缺点是这部分空间不支持DMA操作。初次使用的用户比较容易在这个地方犯错误。所以在使用局部变量时，切勿将局部变量用于DMA传输。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当前需要频繁调用的变量已经通过动态内存管理分配给各个结构体变量，使用的CCM RAM空间。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 

uint64_t AppMallocCCM[&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;*&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;] __attribute__((at(&lt;span&gt;0x10000000&lt;/span&gt; + &lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;24&lt;/span&gt;))); &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 数字信号处理 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

 

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

*********************************************************************************************************

*    函 数 名: AppObjCreate

*    功能说明: 创建任务通信机制和动态内存分配

*    形    参: 无

*    返 回 值: 无

*********************************************************************************************************

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; AppObjCreate (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)

{

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 创建信号量计数值是0, 用于任务同步 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     os_sem_init (&lt;/span&gt;&amp;amp;semaphore, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 将内部CCM SRAM的40KB全部供动态内存使用 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     os_init_mem(AppMallocCCM, &lt;/span&gt;&lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;40&lt;/span&gt;&lt;span&gt;);

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 申请示波器通道1动态内存 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    g_DSO1 &lt;/span&gt;= (DSO_T *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(DSO_T));

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 申请示波器通道2动态内存 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    g_DSO2 &lt;/span&gt;= (DSO_T *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(DSO_T));

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 申请游标测量结构体变量动态内存 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    g_Cursors &lt;/span&gt;= (CURSORS_T *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(CURSORS_T));

 

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 申请标志位结构体变量动态内存 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    g_Flag &lt;/span&gt;= (FLAG_T *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(FLAG_T));

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 申请触发结构体变量动态内存 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    g_TrigVol &lt;/span&gt;= (TRIVOLTAGE_T *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(TRIVOLTAGE_T));

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 申请FFT动态内存 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    testInput_fft_2048 &lt;/span&gt;= (float32_t *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;(float32_t)*&lt;span&gt;2048&lt;/span&gt;&lt;span&gt;);

    testOutput_fft_2048 &lt;/span&gt;= (float32_t *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;(float32_t)*&lt;span&gt;2048&lt;/span&gt;&lt;span&gt;);

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 申请RMS动态内存 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

     g_RMSBUF &lt;/span&gt;= (float32_t *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;(float32_t)*&lt;span&gt;600&lt;/span&gt;&lt;span&gt;);

    

     &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 申请FIR动态内存 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

    FirDataInput &lt;/span&gt;= (float32_t *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;(float32_t)*&lt;span&gt;FIR_LENGTH_SAMPLES);

    FirDataOutput &lt;/span&gt;= (float32_t *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;(float32_t)*&lt;span&gt;FIR_LENGTH_SAMPLES);

     firStateF32 &lt;/span&gt;= (float32_t *)os_alloc_mem(AppMallocCCM, &lt;span&gt;sizeof&lt;/span&gt;(float32_t)*&lt;span&gt;FIR_StateBufSize);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、任务栈分配&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;任务栈也是用的CCM RAM空间，具体分配如下：

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;

**********************************************************************************************************

                                            任务栈和任务句柄

**********************************************************************************************************

&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;static&lt;/span&gt; uint64_t AppTaskStatStk[&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;]   __attribute__((at(&lt;span&gt;0x10000000&lt;/span&gt;)));         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务栈 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;static&lt;/span&gt; uint64_t AppTaskGUIStk[&lt;span&gt;4096&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;]    __attribute__((at(&lt;span&gt;0x10000000&lt;/span&gt;+&lt;span&gt;1024&lt;/span&gt;)));    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务栈 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;static&lt;/span&gt; uint64_t AppTaskUserIFStk[&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;] __attribute__((at(&lt;span&gt;0x10000000&lt;/span&gt;+&lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;5&lt;/span&gt;)));  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务栈 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;static&lt;/span&gt; uint64_t AppTaskFsProStk[&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;]  __attribute__((at(&lt;span&gt;0x10000000&lt;/span&gt;+&lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;6&lt;/span&gt;)));  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务栈 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;static&lt;/span&gt; uint64_t AppTaskMsgProStk[&lt;span&gt;1024&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;] __attribute__((at(&lt;span&gt;0x10000000&lt;/span&gt;+&lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;7&lt;/span&gt;)));  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务栈 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;static&lt;/span&gt; uint64_t AppTaskStartStk[&lt;span&gt;4096&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;]  __attribute__((at(&lt;span&gt;0x10000000&lt;/span&gt;+&lt;span&gt;1024&lt;/span&gt;*&lt;span&gt;8&lt;/span&gt;)));  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 任务栈 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;将任务栈定义成uint64_t类型可以保证任务栈是8字节对齐的，8字节对齐的含义就是数组的首地址对8求余等于0。如果不做8字节对齐的话，部分C语言库函数、浮点运算和uint64_t类型数据运算会出问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;知识点拓展：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于任务栈大小应该分配多大的问题，可以看FreeRTOS教程第11章，对于RTX系统也是适用的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=17658&quot;&gt;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=17658&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、系统栈分配&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;系统栈分配的大小如下：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1379107/201807/1379107-20180710151829215-606598915.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;h2&gt;13.5 任务间通信和全局变量共享问题&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;二代示波器的双通道ADC通过DMA方式在实时的采集数据，每个通道的缓冲大小是1024*20字节，采集的数据经过信号处理后送给GUI任务进行波形显示和测量值显示。为了实现这个功能，专门测试了两种方案。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;（1）方案一&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;采用DMA双缓冲，一路缓冲采集波形的时候，另一路已经采集的波形数据发给数字信号处理任务，信号处理任务再将整理好的波形数据和测量值发给emWin任务做刷新。这种方式的优点是ADC采集的数据可以实时处理。缺点是F429处理不过来，比如我们一个通道的采样率是2Msps，缓冲大小设置为2048，将缓冲填满需要1ms左右的时间，而我们仅做一个2048点的实数FFT就需要0.862ms，其它的FIR，RMS等都还没有做，而且已经没有时间发消息给emWin任务做界面刷新了。如果我们降低FFT，FIR等信号处理的点数，也就失去了实时处理的意义。也许读者会说，加大缓冲不就好了，其实不然。如果我们加大了缓冲，我们要处理的数据也增加了，还是处理不过来，而且我们现在要处理的是双通道。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了F429的性能问题，这种方式还有一个比较棘手的问题需要解决，就是用户操作界面的时候，GUI任务基本已经没有时间去处理数字信号处理任务发来的数据，为了解决这个问题，大大增加了软件设计的复杂度，特别是波形暂停和运行的切换，窗口的切换以及其它操作时，都要注意这个问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果没有复杂的界面操作，而且采样率较低的话，方案一还是比较合适的。由于我们需要滑动操作波形，而且要实现双通道，每个通道最高采样率是2.8Msps，所以放弃这种方案。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;（2）方案二&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;与方案一恰恰相反，ADC数据依然是通过DMA方式实时采集，而任务间的通信反过来进行，emWin任务需要波形数据刷新时给数字信号处理任务发消息获取，这样就有效地解决了方案一中F429性能不够的问题，而且方案一中棘手的软件问题得到了很好的解决，随时都可以操作界面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;并且这种方式无形中解决了emWin任务和数字信号处理任务之间共同操作全局变量的问题，因为emWin是低优先级任务，而数字信号处理任务在emWin任务发消息后才会执行，这样就不存在抢占问题了，有效地解决了全局变量共享问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是这种方式也有一个缺陷，无法实时刷新波形和测量值了，不过可以通过普通触发来解决了，普通触发方式实时采集了触发值前后各1024字节的数据，并且可以滑动浏览。不过工程中未对这种方式做FFT和FIR的支持。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总结，二代示波器中最终选择了方案二。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;13.6 RTX配置向导&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;RTX配置向导详情如下：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1379107/201807/1379107-20180710151839556-585435848.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Task Configuration&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）Number of concurrent running tasks&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;允许创建9个任务，实际创建了如下6个任务：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;AppTaskStatistic任务  : 统计任务，获取CPU利用率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;AppTaskGUI任务      : emWin任务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;AppTaskUserIF任务   : 保留，暂未使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;AppTaskFsPro任务    : 文件系统任务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;AppTaskMsgPro任务  : 按键和触摸检测。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;AppTaskStart任务     : 启动任务，也是最高优先级任务，用于信号处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）Number of tasks with user-provided stack&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8个任务可以采用自定义堆栈方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）Run in privileged mode&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设置任务运行在非特权级模式。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;13.7 RTX系统调试&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;MDK自带RTX调试组件，展示系统信息非常方便，本工程的展示效果如下：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1379107/201807/1379107-20180710151847025-1611980972.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;调试组件的使用方法请看F429的RTX教程第3章3.4小节，有详细说明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=14837&quot;&gt;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=14837&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;13.8 MDK优化等级&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;为了发挥STM32F429的最高性能，需要大家开启最高等级优化和时间优化，即下面两个选项：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1379107/201807/1379107-20180710151853639-1484274579.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;知识点拓展：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MDK曾经做的专题：如何实现MDK编译器的代码最小优化和性能最佳优化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=1794&quot;&gt;http://forum.armfly.com/forum.php?mod=viewthread&amp;amp;tid=1794&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;13.9 总结&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;RTX系统设计二代示波器的关键问题在本章节都做了阐释，建议大家学习完本章节后，直接看源码做实战演练，这样理解的更透彻，而且这时再做改进拓展也容易些。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 10 Jul 2018 07:19:00 +0000</pubDate>
<dc:creator>席萌0209</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/armfly/p/9289260.html</dc:identifier>
</item>
<item>
<title>【小思考】Python里面有声明和定义分离这一说么？ - 黄烤鸭</title>
<link>http://www.cnblogs.com/sbhyc/p/9289199.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sbhyc/p/9289199.html</guid>
<description>&lt;p&gt;&lt;span&gt;第一部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;探究这个问题，还是因为编程的时候碰到了这个错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710102409743-1597876943.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;提示tcplink没有定义，tcplink是我自己写的一个给监听到的tcp连接请求分配新线程的函数，不过是写在了下面，就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710102643699-974358883.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果是C++里面的话，解决这个问题很简单。在文件开头的时候，加上该函数的声明式就OK，这样不仅方便，还能最大限度的保持美观（雾）。但是问题来了，Python里面好像没有声明和定义这一说呀！&lt;/p&gt;
&lt;p&gt;到底有没有呢？这个得要从Python脚本的运行机制来看了。&lt;/p&gt;
&lt;p&gt;在C++里面，声明是告诉编译器我的程序里将会有这个符号，编译器将声明内容进行记录，在定义处记录入口，分配内存。换言之，由于C++是编译型语言，这就可以对完整的程序进行扫描，进行跨文本域的联系。&lt;/p&gt;
&lt;p&gt;然而，Python却不可以，Python是解释型语言，虽然我们自己写的脚本是一个完整文件，但是在给Python解释器执行的时候，依然相当于是把脚本文件里的内容一行一行输入进解释器并执行。这就造成了如果执行的当前语句要调用tcplink，解释器立马会在之前输入的内容中寻找tcplink的定义并执行，如果无法执行则报错。因为有这个机制，直接就导致了不能像C/C++那样，先放个声明式在前面，在把定义放到其他地方。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第二部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;有些人可能会问，拉倒吧，我编程的时候这样写，funcb在funcc前面，funcb内将执行funcc，为啥运行的时候什么错误都不会报呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710110329601-513528875.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这就更有的说了，我们先来把这一小段放到Python命令行交互模式下，看结果如何：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710110548688-343095556.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对，依然也是什么错误都没发生。那么，根据之前所说，Python解释器是进来一行解释一行，如果无法解释就会立马报错，为什么这里解释器读入了funcc，用户也没有进行funcc的定义，解释器却没有报错呢？&lt;/p&gt;
&lt;p&gt;其实，“Python解释器是进来一行解释一行” 这种说法其实还不太严谨。细心的读者能够发现，当在Python解释器输入def funcb（）:并回车的时候，&amp;gt;&amp;gt;&amp;gt;变成了...，只有在funcb用户定义完成后并确认，才又会回到&amp;gt;&amp;gt;&amp;gt;。一般情况下，用户是输入一行回车，&amp;gt;&amp;gt;&amp;gt;不发生改变，并输出应该有的结果。所以这说明了什么呢？两点问题：&lt;/p&gt;
&lt;p&gt;1.在定义funcb()的时候，用户的回车没有让输入的语句执行。&lt;/p&gt;
&lt;p&gt;2.定义完成funcb()向解释器发送回车确认的时候，解释器也没有执行&lt;strong&gt;之前定义内的内容&lt;/strong&gt;。（因为如果执行了，一定会报错，就像下面这样）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710111719876-682766625.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;新的问题又出现了，所以之前解释器到底执行了什么？答案就是：执行了“定义funcb（）”这一个语句。这样，第二部分开头的那个问题，我想大家心里应该有答案了。把第二部分开头的那段程序执行过程画个图来理解，就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710113441992-617539962.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;简而言之，如果当前只是执行了“定义XXX”的语句，&lt;strong&gt;解释器并不关心你具体定义的内容&lt;/strong&gt;，此时进来的内容，解释器暂不执行。所以由于之前的funcc()是funcb()内定义的内容，自然不执行，也就无关乎是否此时存在funcc()。但！如果我此时调用funcb，解释器就会转而执行funcb内的具体内容，此时如果funcc()还没有被定义，一定会报not defined的错误！咱们来验证一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710114043896-505428296.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看来，说的不错。而第二部分开头的代码，在funcc实际被执行的时候，已经获得了完整的定义，故就不会报not defined的错误拉~&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;那么，有没有什么方法，能够让我的Python程序看起来更加整洁美观——不让所谓的“主程序”文件内函数太多而显得杂乱呢？&lt;/p&gt;
&lt;p&gt;其实，import是个挺不错的方法，稍微熟悉Python的人都明白，import可以引用其他地方的py等模块，还可以用from module import function的形式，单独引入指定模块内的指定函数、类。&lt;/p&gt;
&lt;p&gt;甚至！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710134337475-1666695031.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于一个从C++过来的人，真是傻了。Python的import相当于“把import的东西原封不动塞进import处一整坨”，所以由于是在函数定义内import的，所以import的东西只有在该函数内才可使用~然而C++/C的单独#include预处理指令则是做不到的。&lt;/p&gt;
&lt;p&gt;等等。是不是错过了什么重要的东西……&lt;/p&gt;
&lt;p&gt;是的，如果import直接导入本文件，是否是可以的呢？如果可以的话，那岂不是之前的例子中，在之前加上：&lt;/p&gt;
&lt;p&gt;from 本文件 import funca/b/c，就可以实现类似C++函数声明的作用了？万一成功了，那岂不是……真香？&lt;/p&gt;
&lt;p&gt;我们来试试：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710140332504-769401520.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看来，真香失败。那么，为什么这种方法不行呢？我们来回顾一下第二部分中部那个我自己画的流程图，由于Python解释器是进来一句执行一句，所以这里执行的内容是：导入daliywork中的funcb。执行这一句的时候，funcb没有定义，故导入失败。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第四部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最后一个问题，如果import整个文件自己本身，可不可以实现这种结果呢？（就和只执行定义XXX时解释器不会探究具体定义的内容一样，这种只执行导入整个文件的操作，解释器是否会关心整个文件内的具体内容呢？）&lt;/p&gt;
&lt;p&gt;我们再来回顾一下第三部分内关于import一个很直观的解释：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710141059363-1132901238.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，有了这个解释，我觉得大部分人心里已经有答案了。测试代码如下，我们直接执行来看一下结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710141555358-331023307.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;异常栈首先提示funca没有定义，指向daliywork第六行，但这个错误又是因为daliywork的第三行import导致的。这是因为import整个文件后，&lt;strong&gt;相当于&lt;/strong&gt;把除了import这句以外的部分，替换到了import本身的地方，然后执行这些代码，这时候，在引入的部分内，执行到funca，发现还是没有进行定义，这时候再报出funca没有进行定义的错误。&lt;strong&gt;需要注意，错误内报了funca没有经过定义，并不是报的执行文件中的funca没有定义（因为此时在源文件line3 import这一句就已经抛出异常了，程序已经停在这里了！），而是import的daliywork里面的第六行出现的错误&lt;/strong&gt;。这一点十分重要，可以用以下的图解进行解释（PS：画图真好用）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1266846/201807/1266846-20180710144557139-799675366.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然引入的内容里，包括了所有的定义内容，&lt;strong&gt;但是由于引入的文件也会发生执行&lt;/strong&gt;，所以依然无法实现我们想要的效果……&lt;/p&gt;
&lt;p&gt;看来，由于Python特殊的解释执行机制，导致了没什么方法可以只把函数的声明提前。以后写代码的时候，还是乖乖要么把定义的函数都放到其他文件通过import module方式导入，通过module.function()形式进行调用；要么乖乖放在要执行该函数的代码的前面吧……&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;span&gt;无题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 声明定义要分离，Python解释行不行？&lt;/p&gt;
&lt;p&gt;千变万化难模拟，绕了一圈空叹息。&lt;/p&gt;



</description>
<pubDate>Tue, 10 Jul 2018 07:12:00 +0000</pubDate>
<dc:creator>黄烤鸭</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sbhyc/p/9289199.html</dc:identifier>
</item>
<item>
<title>C#/VB.NET 操作Word批注（二）——如何插入图片、读取、回复Word批注内容 - E-iceblue</title>
<link>http://www.cnblogs.com/Yesi/p/9289108.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Yesi/p/9289108.html</guid>
<description>&lt;h2&gt;序&lt;/h2&gt;
&lt;p&gt;在前面的文章&lt;a href=&quot;http://www.cnblogs.com/Yesi/p/8779294.html&quot; target=&quot;_blank&quot;&gt;C# 如何插入、修改、删除Word批注&lt;/a&gt;一文中介绍了如何操作Word批注的一些方法，在本篇文章中继续介绍操作Word批注的方法。分以下三种情况来介绍：&lt;/p&gt;
&lt;p&gt;1. 插入图片到Word批注&lt;/p&gt;
&lt;p&gt;2. 读取Word批注&lt;/p&gt;
&lt;p&gt;3. 回复Word批注&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;所需工具&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; PS：下载安装Free Spire.Doc 后，注意在你的程序中添加引用Spire.Doc.dll（dll文件可以在安装路径下的Bin文件夹中获取）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706090/201807/706090-20180710141444006-1457177922.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/h2&gt;
&lt;h3&gt;1. 插入图片到Word批注&lt;/h3&gt;
&lt;p&gt;步骤 1：添加using指令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc.Documents;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc.Fields;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; System.Drawing;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤 2：创建文档，加载测试文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Document doc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Document();
doc.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testfile.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤 3 ：获取段落&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Paragraph paragraph = doc.Sections[&lt;span&gt;0&lt;/span&gt;].Paragraphs[&lt;span&gt;2&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤 4 ：添加文本、图片到批注&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Comment comment = paragraph.AppendComment(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;探索黑科技，小米为发烧而生!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);&lt;br/&gt;comment.Format.Author &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Administor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;  &lt;br/&gt;&lt;/span&gt;
DocPicture docPicture = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DocPicture(doc);
Image img &lt;/span&gt;= Image.FromFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mi.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
docPicture.LoadImage(img);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入图片到批注&lt;/span&gt;
comment.Body.AddParagraph().ChildObjects.Add(docPicture);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤 5 ：保存文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
doc.SaveToFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileFormat.Docx2013);
System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706090/201807/706090-20180710143341452-1775275854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;C#全部代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_b580e22b-4b61-4053-86f4-1de6d5620817&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b580e22b-4b61-4053-86f4-1de6d5620817&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b580e22b-4b61-4053-86f4-1de6d5620817&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc.Documents;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc.Fields;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Drawing;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; InsertImgToComment_Doc
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化Document类，加载文档&lt;/span&gt;
            Document doc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Document();
            doc.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testfile.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取需要添加批注的段落&lt;/span&gt;
            Paragraph paragraph = doc.Sections[&lt;span&gt;0&lt;/span&gt;].Paragraphs[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加文本批注内容、批注作者&lt;/span&gt;
            Comment comment = paragraph.AppendComment(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;探索黑科技，小米为发烧而生!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            comment.Format.Author &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Administor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
           
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化DocPicture类，加载图片&lt;/span&gt;
            DocPicture docPicture = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DocPicture(doc);
            Image img &lt;/span&gt;= Image.FromFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mi.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            docPicture.LoadImage(img);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入图片到批注&lt;/span&gt;
&lt;span&gt;            comment.Body.AddParagraph().ChildObjects.Add(docPicture);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存文件并打开文档&lt;/span&gt;
            doc.SaveToFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileFormat.Docx2013);
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;VB.NET代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_c4fb3ee0-d3ba-4b2d-91cc-109e96888b91&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c4fb3ee0-d3ba-4b2d-91cc-109e96888b91&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c4fb3ee0-d3ba-4b2d-91cc-109e96888b91&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; Spire.Doc
&lt;/span&gt;&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; Spire.Doc.Documents
&lt;/span&gt;&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; Spire.Doc.Fields
&lt;/span&gt;&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; System.Drawing

&lt;/span&gt;&lt;span&gt;Namespace&lt;/span&gt;&lt;span&gt; InsertImgToComment_Doc
    &lt;/span&gt;&lt;span&gt;Class&lt;/span&gt;&lt;span&gt; Program
        &lt;/span&gt;&lt;span&gt;Private&lt;/span&gt; &lt;span&gt;Shared&lt;/span&gt; &lt;span&gt;Sub&lt;/span&gt; Main(&lt;span&gt;ByVal&lt;/span&gt; args &lt;span&gt;As&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;())
            &lt;/span&gt;&lt;span&gt;Dim&lt;/span&gt; doc &lt;span&gt;As&lt;/span&gt; Document = &lt;span&gt;New&lt;/span&gt;&lt;span&gt; Document()
            doc.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testfile.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;Dim&lt;/span&gt; paragraph &lt;span&gt;As&lt;/span&gt; Paragraph = doc.Sections(&lt;span&gt;0&lt;/span&gt;).Paragraphs(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;Dim&lt;/span&gt; comment &lt;span&gt;As&lt;/span&gt; Comment = paragraph.AppendComment(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;探索黑科技，小米为发烧而生!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            comment.Format.Author &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Administor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;Dim&lt;/span&gt; docPicture &lt;span&gt;As&lt;/span&gt; DocPicture = &lt;span&gt;New&lt;/span&gt;&lt;span&gt; DocPicture(doc)
            &lt;/span&gt;&lt;span&gt;Dim&lt;/span&gt; img &lt;span&gt;As&lt;/span&gt; Image = Image.FromFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mi.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            docPicture.LoadImage(img)
            comment.Body.AddParagraph().ChildObjects.Add(docPicture)
            doc.SaveToFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileFormat.Docx2013)
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;End Sub&lt;/span&gt;
    &lt;span&gt;End Class&lt;/span&gt;
&lt;span&gt;End Namespace&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;2.读取Word批注&lt;/h3&gt;
&lt;p&gt;步骤 1 ：添加using指令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc.Documents;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; Spire.Doc.Fields;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤 2 ：创建实例，加载文档&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Document doc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Document();
doc.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤 3 ：将批注内容写入Txt文档&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化StringBuilder类&lt;/span&gt;
StringBuilder SB = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历所有word批注，将批注内容写入Txt文档&lt;/span&gt;
&lt;span&gt;foreach&lt;/span&gt; (Comment comment &lt;span&gt;in&lt;/span&gt;&lt;span&gt; doc.Comments)
{
    &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (Paragraph p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; comment.Body.Paragraphs)
    {
        SB.AppendLine(p.Text);
    }
}
File.WriteAllText(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CommentExtraction.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SB.ToString());
System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CommentExtraction.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706090/201807/706090-20180710144246071-611907425.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;C# 全部代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_49d64aaa-4816-492c-8cb3-2fee48177e41&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_49d64aaa-4816-492c-8cb3-2fee48177e41&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_49d64aaa-4816-492c-8cb3-2fee48177e41&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc.Documents;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc.Fields;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ExtractComments
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建实例，加载文档&lt;/span&gt;
            Document doc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Document();
            doc.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化StringBuilder类&lt;/span&gt;
            StringBuilder SB = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历所有word批注，将批注内容写入Txt文档&lt;/span&gt;
            &lt;span&gt;foreach&lt;/span&gt; (Comment comment &lt;span&gt;in&lt;/span&gt;&lt;span&gt; doc.Comments)
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (Paragraph p &lt;span&gt;in&lt;/span&gt;&lt;span&gt; comment.Body.Paragraphs)
                {
                    SB.AppendLine(p.Text);
                }
            }
            File.WriteAllText(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CommentExtraction.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SB.ToString());
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CommentExtraction.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;VB.NET 代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_7c1ead52-7464-4c77-aa25-bc1388c3c466&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7c1ead52-7464-4c77-aa25-bc1388c3c466&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7c1ead52-7464-4c77-aa25-bc1388c3c466&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; System.Text
&lt;/span&gt;&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; System.IO
&lt;/span&gt;&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; Spire.Doc
&lt;/span&gt;&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; Spire.Doc.Documents
&lt;/span&gt;&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; Spire.Doc.Fields

&lt;/span&gt;&lt;span&gt;Namespace&lt;/span&gt;&lt;span&gt; ExtractComments
    &lt;/span&gt;&lt;span&gt;Class&lt;/span&gt;&lt;span&gt; Program
        &lt;/span&gt;&lt;span&gt;Private&lt;/span&gt; &lt;span&gt;Shared&lt;/span&gt; &lt;span&gt;Sub&lt;/span&gt; Main(&lt;span&gt;ByVal&lt;/span&gt; args &lt;span&gt;As&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;())
            &lt;/span&gt;&lt;span&gt;Dim&lt;/span&gt; doc &lt;span&gt;As&lt;/span&gt; Document = &lt;span&gt;New&lt;/span&gt;&lt;span&gt; Document()
            doc.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;Dim&lt;/span&gt; SB &lt;span&gt;As&lt;/span&gt; StringBuilder = &lt;span&gt;New&lt;/span&gt;&lt;span&gt; StringBuilder()

            &lt;/span&gt;&lt;span&gt;For&lt;/span&gt; &lt;span&gt;Each&lt;/span&gt; comment &lt;span&gt;As&lt;/span&gt; Comment &lt;span&gt;In&lt;/span&gt;&lt;span&gt; doc.Comments

                &lt;/span&gt;&lt;span&gt;For&lt;/span&gt; &lt;span&gt;Each&lt;/span&gt; p &lt;span&gt;As&lt;/span&gt; Paragraph &lt;span&gt;In&lt;/span&gt;&lt;span&gt; comment.Body.Paragraphs
                    SB.AppendLine(p.Text)
                &lt;/span&gt;&lt;span&gt;Next&lt;/span&gt;
            &lt;span&gt;Next&lt;/span&gt;&lt;span&gt;

            File.WriteAllText(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CommentExtraction.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, SB.ToString())
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CommentExtraction.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;End Sub&lt;/span&gt;
    &lt;span&gt;End Class&lt;/span&gt;
&lt;span&gt;End Namespace&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;3. 回复Word批注内容&lt;/h3&gt;
&lt;p&gt;步骤 1 ：添加using指令 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; Spire.Doc.Fields;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤 2 ：创建实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Document doc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Document();
doc.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤 3 ：获取批注&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Comment comment = doc.Comments[&lt;span&gt;0&lt;/span&gt;];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤 4 :回复批注&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Comment replyComment = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Comment(doc);
replyComment.Format.Author &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Adam&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
replyComment.Body.AddParagraph().AppendText(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这条批注内容请再丰富一下，内容有些单调&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
comment.ReplyToComment(replyComment);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤 5 ：保存文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
doc.SaveToFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReplyToComment.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileFormat.Docx2013);
System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReplyToComment.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/706090/201807/706090-20180710145213042-1002596730.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;C# 全部代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_4338846e-507f-4b19-9eb3-7020a3033db5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4338846e-507f-4b19-9eb3-7020a3033db5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4338846e-507f-4b19-9eb3-7020a3033db5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Spire.Doc.Fields;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ReplyComment_Doc
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化Document类，加载文件&lt;/span&gt;
            Document doc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Document();
            doc.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取第一个批注&lt;/span&gt;
            Comment comment = doc.Comments[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化Comment类，添加批注回复作者以及回复内容&lt;/span&gt;
            Comment replyComment = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Comment(doc);
            replyComment.Format.Author &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Adam&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            replyComment.Body.AddParagraph().AppendText(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这条批注内容请再丰富一下，内容有些单调&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            comment.ReplyToComment(replyComment);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存文件并打开&lt;/span&gt;
            doc.SaveToFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReplyToComment.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileFormat.Docx2013);
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReplyToComment.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;VB.NET 代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_e47b0f22-d3e6-414b-9fea-2daf20e5173b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e47b0f22-d3e6-414b-9fea-2daf20e5173b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e47b0f22-d3e6-414b-9fea-2daf20e5173b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; Spire.Doc
&lt;/span&gt;&lt;span&gt;Imports&lt;/span&gt;&lt;span&gt; Spire.Doc.Fields

&lt;/span&gt;&lt;span&gt;Namespace&lt;/span&gt;&lt;span&gt; ReplyComment_Doc
    &lt;/span&gt;&lt;span&gt;Class&lt;/span&gt;&lt;span&gt; Program
        &lt;/span&gt;&lt;span&gt;Private&lt;/span&gt; &lt;span&gt;Shared&lt;/span&gt; &lt;span&gt;Sub&lt;/span&gt; Main(&lt;span&gt;ByVal&lt;/span&gt; args &lt;span&gt;As&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;&lt;span&gt;())
            &lt;/span&gt;&lt;span&gt;Dim&lt;/span&gt; doc &lt;span&gt;As&lt;/span&gt; Document = &lt;span&gt;New&lt;/span&gt;&lt;span&gt; Document()
            doc.LoadFromFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;Dim&lt;/span&gt; comment &lt;span&gt;As&lt;/span&gt; Comment = doc.Comments(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;Dim&lt;/span&gt; replyComment &lt;span&gt;As&lt;/span&gt; Comment = &lt;span&gt;New&lt;/span&gt;&lt;span&gt; Comment(doc)
            replyComment.Format.Author &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Adam&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            replyComment.Body.AddParagraph().AppendText(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;这条批注内容请再丰富一下，内容有些单调&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            comment.ReplyToComment(replyComment)
            doc.SaveToFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReplyToComment.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileFormat.Docx2013)
            System.Diagnostics.Process.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ReplyToComment.docx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;End Sub&lt;/span&gt;
    &lt;span&gt;End Class&lt;/span&gt;
&lt;span&gt;End Namespace&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;以上为本次关于操作Word批注的全部内容。&lt;/p&gt;
&lt;p&gt;（本文完）&lt;/p&gt;
&lt;p&gt;如需转载，请注明出处。&lt;/p&gt;
</description>
<pubDate>Tue, 10 Jul 2018 07:02:00 +0000</pubDate>
<dc:creator>E-iceblue</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Yesi/p/9289108.html</dc:identifier>
</item>
<item>
<title>apache环境下配置多个ssl证书搭建多个站点 - 六娃的博客</title>
<link>http://www.cnblogs.com/huliuwa/p/9289110.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huliuwa/p/9289110.html</guid>
<description>&lt;p&gt;服务器上有两个项目，都要配置https，所以在阿里云申请了两个二级的免费证书。&lt;/p&gt;
&lt;p&gt;博主用的是phpstudy，如果用的其他集成环境，其实也差不多，参考下改改就好了。&lt;/p&gt;
&lt;p&gt;一.申请证书（这里我用的是阿里的域名）&lt;/p&gt;
&lt;p&gt;　　1.登录阿里云，点击域名，找到要配置ssl的域名，点击后面的ssl证书&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282134/201807/1282134-20180710142138163-788316704.png&quot; alt=&quot;&quot; width=&quot;989&quot; height=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2.这里我申请的是免费的单域名证书，点击确定提交阿里云审核，大概10-20分钟左右就审核好了&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282134/201807/1282134-20180710143019667-295120919.png&quot; alt=&quot;&quot; width=&quot;959&quot; height=&quot;280&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3.点击左边的菜单，选择要配置的域名相应的证书，点击后面的下载&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282134/201807/1282134-20180710143345223-878493731.png&quot; alt=&quot;&quot; width=&quot;1013&quot; height=&quot;406&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4.我的环境是apache，这里我下载的是apache。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282134/201807/1282134-20180710143837203-1939313000.png&quot; alt=&quot;&quot; width=&quot;1070&quot; height=&quot;508&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二、配置ssl&lt;/p&gt;
&lt;p&gt; 　　1.服务器上配置站点&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282134/201807/1282134-20180710144242223-1455061922.png&quot; alt=&quot;&quot; width=&quot;401&quot; height=&quot;351&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2.修改http.conf&lt;/p&gt;
&lt;p&gt;　　　　（1）去掉 LoadModule ssl_module modules/mod_ssl.so 前的#号&lt;/p&gt;
&lt;p&gt;　　　　（2）找到#Include conf/extra/httpd-ssl.conf这句话，这里我们就不用自带的文件了，我是新建了个文件&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282134/201807/1282134-20180710144721104-1696370642.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　（3）新建这个文件&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282134/201807/1282134-20180710144834878-1682490568.png&quot; alt=&quot;&quot; width=&quot;460&quot; height=&quot;325&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　（4）新建cert文件夹，将刚刚下载的证书文件（4个）放到这个文件里&lt;/p&gt;
&lt;p&gt;　　　　　　如果你要配置两个ssl，那再建一个文件夹放另一个证书的文件&lt;/p&gt;
&lt;p&gt;　　　　　　这里分别我建了api和certlzf两个文件夹&lt;/p&gt;
&lt;p&gt;　　　　（5）编辑vhosts-ssl.conf文件&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282134/201807/1282134-20180710145718957-2067482505.png&quot; alt=&quot;&quot; width=&quot;772&quot; height=&quot;668&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里，重启apache，输入刚刚配置过得域名就完成了~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282134/201807/1282134-20180710145831047-617527210.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面附上vhost-ssl.conf的代码&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:php;gutter:true;&quot;&gt;
Listen 443 
&amp;lt;VirtualHost *:443&amp;gt; 
 DocumentRoot &quot;这里改为你项目的绝对路径&quot; 
 ServerName 这里改为你要配置的域名
 ServerAlias 这里改为你要配置的域名 
 SSLEngine on 
 SSLProtocol TLSv1 TLSv1.1 TLSv1.2 
 SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5 
 SSLCertificateFile &quot;这里改为你公钥的绝对路径&quot;
 SSLCertificateKeyFile &quot;这里改为你私钥的绝对路径&quot;
 SSLCertificateChainFile &quot;这里改为你证书链的绝对路径&quot;
 
 &amp;lt;Directory &quot;这里改为你项目的绝对路径&quot;&amp;gt; 
 Options FollowSymLinks ExecCGI 
 AllowOverride All 
 Order allow,deny 
 Allow from all 
 Require all granted 
 &amp;lt;/Directory&amp;gt; 
&amp;lt;/VirtualHost&amp;gt; 

&amp;lt;VirtualHost *:443&amp;gt; 
 DocumentRoot &quot;这里改为你项目的绝对路径 
 ServerName 这里改为你要配置的域名
 ServerAlias 这里改为你要配置的域名
 SSLEngine on 
 SSLProtocol TLSv1 TLSv1.1 TLSv1.2 
 SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5 
 SSLCertificateFile &quot;这里改为你公钥的绝对路径&quot;
 SSLCertificateKeyFile &quot;这里改为你私钥的绝对路径&quot;
 SSLCertificateChainFile &quot;这里改为你证书链的绝对路径&quot;
 
 &amp;lt;Directory &quot;这里改为你项目的绝对路径&quot;&amp;gt; 
 Options FollowSymLinks ExecCGI 
 AllowOverride All 
 Order allow,deny 
 Allow from all 
 Require all granted 
 &amp;lt;/Directory&amp;gt; 
&amp;lt;/VirtualHost&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 10 Jul 2018 07:02:00 +0000</pubDate>
<dc:creator>六娃的博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huliuwa/p/9289110.html</dc:identifier>
</item>
<item>
<title>Java 基础之一对象导论 - Mr.Tan&amp;</title>
<link>http://www.cnblogs.com/Tan-sir/p/9289068.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Tan-sir/p/9289068.html</guid>
<description>&lt;h2 id=&quot;抽象过程&quot;&gt;1.1 抽象过程&lt;/h2&gt;
&lt;p&gt;所有编程语言都提供抽象机制。人们所能解决的问题的复杂性直接取决于抽象的类型和质量。&lt;br/&gt;汇编语言是对底层机器的轻微抽象。&lt;br/&gt;我们将问题空间中的元素及其再解空间中的表示称为&lt;strong&gt;对象&lt;/strong&gt;。这种思想实质是：&lt;strong&gt;程序可以通过添加新类型的对象使自身适用于某个特定的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;万物皆为对象&lt;br/&gt;可以抽取待求解问题的任何概念化构建表示程序中的对象。&lt;/li&gt;
&lt;li&gt;程序是对象的集合&lt;br/&gt;他们通过发送消息来告知彼此所要做的。&lt;/li&gt;
&lt;li&gt;每个对象都有自己的由其他对象所构成的存储&lt;/li&gt;
&lt;li&gt;每个对象都拥有其类型&lt;/li&gt;
&lt;li&gt;某一特定类型的所有对象都可以接收同样的消息&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;每个对象都有一个接口&quot;&gt;1.2 每个对象都有一个接口&lt;/h2&gt;
&lt;p&gt;创建抽象数据类型（类）是面向对象程序设计的基本概念之一。&lt;br/&gt;可以创建某一类型的变量，然后操作这些变量。&lt;br/&gt;类描述了具有相同特性（数据元素）和行为（功能）的对象集合，所以一个类实际上就是一个数据类型。&lt;/p&gt;
&lt;h2 id=&quot;每个对象都提供服务&quot;&gt;1.3 每个对象都提供服务&lt;/h2&gt;
&lt;p&gt;每个对象都提供服务，它有助于提高对象的内聚性。高内聚是软件设计的基本质量要求之一：这意味着一个软件构件的各个方面组合得很好。&lt;/p&gt;
&lt;h2 id=&quot;被隐藏的具体实现&quot;&gt;1.4 被隐藏的具体实现&lt;/h2&gt;
&lt;p&gt;将程序开发人员按照角色分为类创建者和客户端程序员。&lt;br/&gt;客户端程序员的目标是收集各种用来实现快速应用开发的类。类创建者的目标是构建类，这种类只向客户端程序员暴露必须的部分，而隐藏其他部分。&lt;br/&gt;访问控制：一个存在原因让客户端程序员无法触及不应该触及的部分。另一个存在原因就是允许库设计者可以改变类内部的工作方式而不用担心会影响客户端程序员。&lt;/p&gt;
&lt;h2 id=&quot;复用具体实现&quot;&gt;1.5 复用具体实现&lt;/h2&gt;
&lt;p&gt;使用现有类合成新的类，这种方式被称为&lt;strong&gt;组合&lt;/strong&gt;。&lt;br/&gt;如果组合是动态的，通常称他们为&lt;strong&gt;聚合&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;继承&quot;&gt;1.6 继承&lt;/h2&gt;
&lt;p&gt;当父类发生变化时，被修改的子类也会发生变动。&lt;br/&gt;当继承现有类型时，也就创建了新的类型。&lt;br/&gt;导出类和基类具有相同的类型。&lt;br/&gt;如果只是简单地继承一个类而并不做其他任何事情，那么基类接口中的方法将会直接继承到导出类。&lt;/p&gt;
&lt;h3 id=&quot;是一个与像一个关系&quot;&gt;1.6.1 是一个与像一个关系&lt;/h3&gt;
&lt;p&gt;导出类和基类时完全相同的类型，因为它们具有完全相同的接口。可以用一个导出类对象来完全替代一个基类对象。这可以被视为纯粹替代，通常称为&lt;strong&gt;替代原则&lt;/strong&gt;。is-a关系&lt;br/&gt;有时必须在导出类型中添加新的接口元素，这样也就扩展了接口。这个新的类型任然可以替代基类，但时这种替代不完美，因为基类无法访问新添加的方法。者中可以描述为is-like-a关系。&lt;/p&gt;
&lt;h2 id=&quot;伴随多态的可互换对象&quot;&gt;1.7 伴随多态的可互换对象&lt;/h2&gt;
&lt;p&gt;在处理类型的层次结构时，想把一个对象不当作它所表示的对象类型来对待，而把它当作基类来对待。&lt;br/&gt;通过导出新的子类型而轻松扩展设计的能力时对改动进行封装的基本方法之一。&lt;/p&gt;
&lt;h2 id=&quot;单根继承结构&quot;&gt;1.8 单根继承结构&lt;/h2&gt;
&lt;p&gt;在单根继承结构中的所有对象都具有一个公用接口，所有它们归根到底都时相同的基本类型。&lt;br/&gt;单根继承保证了所有对象都具备某些功能。&lt;br/&gt;单根继承结构使垃圾回收器都具备某些功能。由于所有对象都保证具有其类型信息，所以不会因无法确定对象的类型而陷入僵局。&lt;/p&gt;
&lt;h2 id=&quot;容器&quot;&gt;1.9 容器&lt;/h2&gt;
&lt;p&gt;在C++中，容器被称为标准模板类库。&lt;br/&gt;单一的容器是满足不了现有的需求，还需要对容易进行选择，主要原因有两个：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;不同容器提供了不同类型的接口和外部行为。&lt;/li&gt;
&lt;li&gt;不同容器对于某些操作具有不同的效率&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;参数化类型&quot;&gt;1.9.1 参数化类型&lt;/h3&gt;
&lt;p&gt;参数化类型就是编译器可以自动定制作用于特定类型上的类。在Java中称为泛型。&lt;/p&gt;
&lt;h2 id=&quot;对象的创建和生命期&quot;&gt;1.10 对象的创建和生命期&lt;/h2&gt;
&lt;p&gt;当使用对象时，最关键问题之一就是他们的生成与销毁。每个对象为了生存都需要资源，尤其时内存。当我们不在需要对象时，需要清理掉所占有的资源。&lt;br/&gt;对象的数据存在于何处，有两种方式：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;为了最求最大执行速度，对象的存储空间和生命周期可以在编程程序时确定，这可以通过将对象置于堆栈或限域变量或静态存储区来实现。这种方式将存储空间的分配和释放置于优先位置。&lt;/li&gt;
&lt;li&gt;在碓的内存池中动态的创建对象。在这种方式中，直到运行时才知道需要多少对象，它们生命周期如何，以及它们的具体类型是什么。因为存储空间是被动态管理的，所有需要大量时间在碓中分配空间，这可能要远远大于在堆中创建空间。Java采用的便是这种方法。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;异常处理处理错误&quot;&gt;1.11 异常处理：处理错误&lt;/h2&gt;
&lt;p&gt;异常是一种对象，它从出错地点被&quot;抛出&quot;，并被专门用来处理特定类型错误的相应异常处理器&quot;捕获&quot;。异常处理像是与正常程序执行路径并行的，在错误时执行的另一条路径。&lt;br/&gt;异常提供了一种从错误状况进行可靠恢复的途径。&lt;/p&gt;
&lt;h2 id=&quot;并发编程&quot;&gt;1.12 并发编程&lt;/h2&gt;
&lt;p&gt;有时中断对于处理时间性强的程序是必须的，但对于大量其他问题，我们只想把问题切分成多个独立的部分执行。在程序中，这些彼此独立运行的部分被称为&quot;线程&quot;，这个概念被称为&lt;strong&gt;并发&lt;/strong&gt;。&lt;br/&gt;并发看起来相当有用，但有一个隐患：共享资源。如果多个并行任务都要访问同一个资源，那么就会出现问题。&lt;br/&gt;解决办法：当一个任务访问资源的时候，将资源锁住，直到使用完毕后，在释放资源，给其他任务使用。&lt;/p&gt;
</description>
<pubDate>Tue, 10 Jul 2018 07:00:00 +0000</pubDate>
<dc:creator>Mr.Tan&amp;amp;</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Tan-sir/p/9289068.html</dc:identifier>
</item>
<item>
<title>css - 评分效果的星星外衣 - xing.org1^</title>
<link>http://www.cnblogs.com/padding1015/p/9288983.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/padding1015/p/9288983.html</guid>
<description>&lt;p&gt;纳尼？什么星星外衣？好，直接上图比较能说清楚：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710141753635-1196072215.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;仔细看会发现规律：可以根据百分比/分值动态改变高亮星星的个数。&lt;/p&gt;
&lt;p&gt;分步骤图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710141810230-1147970490.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710141838722-253486108.png&quot; alt=&quot;&quot; width=&quot;273&quot; height=&quot;42&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710141833620-1839592434.png&quot; alt=&quot;&quot; width=&quot;282&quot; height=&quot;43&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710141817799-406149693.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710141824582-2074629600.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种效果，如果遇到一分一个星，没有半星（或者有也可以，直接加一个半星的类名）的情况，还可以通过添加多个结构实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;但是再加上这星星都要渐变效果，我当时差点找设计谈谈去（当然是求人家改成不渐变啊）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;不过真的去的话，显得咱们太不专业了不是，好看的效果都实现不了，还叫什么前端。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;乖乖坐下来看设计稿。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这么直接看的话，可能没有思路，不过可以换一种方式来思考：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先想想下边这种效果怎实现的？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142334665-1556418254.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;怎么样，是不是看了这个，对于星星效果的实现也有了思路了已经？！好，解散。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;哈哈，不过没有也没关系，可以先来看一下，&lt;/span&gt;&lt;span&gt;这种进度条的实现。然后再从他身上找思路&lt;span&gt;（这就是我开发时的思路了，很笨很“务实”）：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结构如下:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142540441-278578509.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  很简单的结构，主要核心代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;div class=&quot;grade-progress-bg&quot;&amp;gt;
    &amp;lt;div class=&quot;grade-star-gradual&quot;&amp;gt;
        &amp;lt;span class=&quot;progress&quot; style=&quot;width: 50%;&quot;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对应效果，直接来看结构模型比较清晰：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142509473-942039446.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142628632-723928271.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142603483-1689894804.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如图，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中&lt;/span&gt;div.grade-star-gradual 负责灰色的背景条，&lt;/p&gt;
&lt;p&gt;span.progress负责彩色的进度条&lt;/p&gt;
&lt;p&gt;Div.grade-progress-bg负责包裹二者，并和右侧100%文案排列对齐用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;利用&lt;/span&gt;span.progress的百分比宽度占据灰色条的比例来模拟数据的百分比&lt;/strong&gt;。就显得格外简单了。&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;彩色星星的实现&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;利用这个思路，其实彩色进度条和彩色星星进度条就是差星星&lt;span&gt;（这也是一句废话）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但关键思路点在于，&lt;span&gt;&lt;strong&gt;不要&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;把星星看做是进度条&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;也就是说星星评分和一般的进度条效果实现起来一样。唯一的区别是有无星星。&lt;/p&gt;

&lt;p&gt;那怎么把普通进度条加上星星呢？我的设计专业还是给了我一丝灵感：&lt;/p&gt;
&lt;p&gt;只要在彩色进度条上边覆盖一个镂空的星星图案，看到的不就都是星星了吗？！&lt;/p&gt;
&lt;p&gt;比如这样的：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142846495-281705564.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后实际这个进度条长这样：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142855777-1680410641.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;披上华丽的外衣后长这样：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142859047-1754271385.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;是不是感觉又赚了个大便宜！&lt;/p&gt;


&lt;p&gt;代码设计上，还是和之前的进度条一样，背景色初始为灰色，星星盖在上边就是五个灰色的小星星&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142909080-623897588.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142916703-308679142.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;然后当有数据值得时候，&lt;span&gt;&lt;strong&gt;改变彩色条&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;span.progress的宽度为百分比即可实现视觉上星星个数的变化&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142931983-1623754779.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142935141-1035401884.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/956663/201807/956663-20180710142937516-1395935945.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;结构上，也和进度条一致，但是为了这个镂空星星的&lt;/span&gt;“外衣”，我加了一个空结构做span的弟弟，也可以用一个伪类随意发挥。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;div class=&quot;grade-progress-box&quot;&amp;gt;
    &amp;lt;div class=&quot;grade-star-bg&quot;&amp;gt;
      &amp;lt;div class=&quot;grade-star-gradual&quot;&amp;gt;
        &amp;lt;span class=&quot;progress&quot; style=&quot;width: 100%;&quot;&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;div class=&quot;grade-star-img bgsize&quot;&amp;gt;&amp;lt;/div&amp;gt;//镂空星星图
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;grade-number grade-number1&quot;&amp;gt;5分&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;但要保证这个&lt;/span&gt;“外衣要穿着得体”，即裁剪得当，不要露怯为妙。&lt;/p&gt;
&lt;p&gt;镂空星星周围的颜色要和进度条周围的融为一体，我这里都是白色，比较好混。&lt;/p&gt;


&lt;p&gt;&lt;span&gt;最后&lt;strong&gt;&lt;span&gt;展示用的百分比&lt;/span&gt;&lt;/strong&gt;和分输，配合上&lt;/span&gt;vue的语法，很简单的就可以绑定展示。&lt;/p&gt;
&lt;p&gt;至于&lt;span&gt;&lt;strong&gt;从左向右的填充动态效果&lt;/strong&gt;&lt;/span&gt;，只需要简单的使用css 的transition，监听width的改变即可。&lt;/p&gt;



&lt;p&gt;普通进度条&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
.grade-progress-box
  .grade-progress-bg
    .grade-star-gradual #[span.progress(:style=&quot;{width: (Number(DBData.Inv)*100&amp;gt;100?100:Number(DBData.Inv)*100).toFixed(0) + '%'}&quot;)]
  .grade-number {{(Number(DBData.Inv)*100&amp;gt;100?100:Number(DBData.Inv)*100).toFixed(2)}}%
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;样式&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
grade-progress-box:after {
    content: &quot;&quot;;
    display: block;
    clear: both;
    visibility: hidden;
    overflow: hidden;
  } 
  .grade-progress-bg {
    display: table-cell;
    vertical-align: middle;
    width: 4.3rem;
    height: .14rem;
    overflow: hidden;
  }
  .grade-star-gradual {
    height: 0.16rem;
    -webkit-border-radius: .15rem;
    border-radius: .15rem;
    overflow: hidden;
    background: #e5e5e5;
  }
  .grade-star-gradual span.progress {
    width: 0;
    height: 100%;
    display: block;
    -webkit-border-radius: .15rem;
    border-radius: .15rem;
    -webkit-transition: width 1s ease-out;
    -o-transition: width 1s ease-out;
    transition: width 1s ease-out;
    background: -webkit-gradient(linear, left top, right top, from(#f23f5c), to(#fea94e));
    background: -o-linear-gradient(left, #f23f5c, #fea94e 100%);
    background: linear-gradient(to right, #f23f5c, #fea94e 100%);
    background: -webkit-linear-gradient(left, #f23f5c, #fea94e 100%);
  }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;星星进度条&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
.grade-progress-box
  .grade-star-bg
    .grade-star-gradual #[span.progress(:style=&quot;{width: (DBData.Sat/5*100).toFixed(0) + '%'}&quot;)]
      .grade-star-img
  .grade-number.grade-number1 {{DBData.Sat}}分
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;样式&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.grade-star-bg {
    position: relative;
    display: table-cell;
    width: 4.46rem;
    height: .5rem;
    overflow: hidden;
    margin-right: .22rem;
    vertical-align: middle;
  }
  .grade-star-gradual {
    height: 0.16rem;
    -webkit-border-radius: .15rem;
    border-radius: .15rem;
    overflow: hidden;
    background: #e5e5e5;
  }
  .grade-star-bg .grade-star-gradual {
    height: 100%;
  }
  .grade-star-img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url(data:image/png;base64,) no-repeat;
    -webkit-background-size: 100% 100% !important;
    background-size: 100% 100% !important;
  }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，又搞定了一个。&lt;/p&gt;


&lt;p&gt;&lt;span&gt;个人学习理解和总结，很多不足还请指正~&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;声明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　请尊重博客园原创精神，转载或使用图片请注明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　博主：xing.org1^&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　出处：http://www.cnblogs.com/padding1015/&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 10 Jul 2018 06:46:00 +0000</pubDate>
<dc:creator>xing.org1^</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/padding1015/p/9288983.html</dc:identifier>
</item>
<item>
<title>基于.net core 微服务的另类实现 - 谢中涞</title>
<link>http://www.cnblogs.com/xie-zhonglai/p/netcore_micro_svc.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xie-zhonglai/p/netcore_micro_svc.html</guid>
<description>&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;基于.net core 的微服务,网上很多介绍都是千篇一律基于类似webapi,通过http请求形式进行访问,但这并不符合大家使用习惯.如何像形如[ &lt;span&gt;GetService&amp;lt;IOrderService&amp;gt;().SaveOrder(orderInfo)&lt;/span&gt;]的方式, 调用远程的服务,如果你正在为此苦恼, 本文或许是一种参考.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol readability=&quot;17&quot;&gt;&lt;li readability=&quot;21&quot;&gt;
&lt;h4&gt;背景&lt;/h4&gt;&lt;p&gt;        原项目基于传统三层模式组织代码逻辑,随着时间的推移,项目内各模块逻辑互相交织,互相依赖,维护起来较为困难.为此我们需要引入一种新的机制来尝试改变这个现状,在考察了 Java spring cloud/doubbo, c# wcf/webapi/asp.net core 等一些微服务框架后,我们最终选择了基于 .net core + Ocelot 微服务方式. 经过讨论大家最终期望的项目结果大致如下所示.&lt;/p&gt;
&lt;h4&gt;&lt;br/&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/348782/201807/348782-20180710144233729-822257590.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/348782/201807/348782-20180710144234061-680133642.png&quot; alt=&quot;image&quot; width=&quot;550&quot; height=&quot;311&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;      但原项目团队成员已经习惯了基于接口服务的这种编码形式, 让大家将需要定义的接口全部以http 接口形式重写定义一遍, 同时客户端调用的时候, 需要将原来熟悉的形如 XXService.YYMethod(args1, args2) 直接使用通过 &quot;.&quot;出内部成员,替换为让其直接写 HttpClient.Post(&quot;url/XX/YY&quot;,”args1=11&amp;amp;args2=22”)的形式访问远程接口,确实是一件十分痛苦的事情.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;问题提出&lt;/h4&gt;
&lt;br/&gt;     基于以上, 如何通过一种模式来简化这种调用形式, 继而使大家在调用的时候不需要关心该服务是在本地(本地类库依赖)还是远程, 只需要按照常规方式使用即可, 至于是直接使用本地服务还是通过http发送远程请求,这个都交给框架处理.为了方便叙述, 本文假定以销售订单和用户服务为例. 销售订单服务对外提供一个创建订单的接口.订单创建成功后, 调用用户服务更新用户积分.UML参考如下.&lt;br/&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/348782/201807/348782-20180710144237355-931954742.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/348782/201807/348782-20180710144237747-823073228.png&quot; alt=&quot;image&quot; width=&quot;716&quot; height=&quot;351&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;问题转化&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;在客户端,通过微服务对外公开的接口,生成接口代理, 即将接口需要的信息[接口名/方法名及该方法需要的参数]包装成http请求向远程服务发起请求.&lt;/li&gt;
&lt;li&gt;在微服务http接入段, 我们可以定义一个统一的入口,当服务端收到请求后,解析出接口名/方法名及参数信息,并创建对应的实现类,从而执行接口请求,并将返回值通过http返回给客户端.&lt;/li&gt;
&lt;li&gt;最后,客户端通过类似 AppRuntims.Instance.GetService&amp;lt;IOrderService&amp;gt;().SaveOrder(orderInfo) 形式访问远程服务创建订单.&lt;/li&gt;
&lt;li&gt;数据以json格式传输.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;解决方案及实现&lt;/h3&gt;
&lt;ol readability=&quot;9.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;为了便于处理,我们定义了一个空接口IApiService,用来标识服务接口.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;远程服务客户端代理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RemoteServiceProxy : IApiService
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Address { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }  //服务地址&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ApiActionResult PostHttpRequest(&lt;span&gt;string&lt;/span&gt; interfaceId, &lt;span&gt;string&lt;/span&gt; methodId, &lt;span&gt;params&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;[] p)
    {
        ApiActionResult apiRetult &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; httpClient = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpClient())
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; param = &lt;span&gt;new&lt;/span&gt; ArrayList(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;包装参数&lt;/span&gt;

            &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; t &lt;span&gt;in&lt;/span&gt;&lt;span&gt; p)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (t == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    param.Add(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ns =&lt;span&gt; t.GetType().Namespace;
                    param.Add(ns &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; ns.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) ?&lt;span&gt; t : JsonConvert.SerializeObject(t));
                }
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; postContentStr =&lt;span&gt; JsonConvert.SerializeObject(param);
            HttpContent httpContent &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringContent(postContentStr);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (CurrentUserId !=&lt;span&gt; Guid.Empty)
            {
                httpContent.Headers.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, CurrentUserId.ToString());
            }
            httpContent.Headers.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EnterpriseId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, EnterpriseId.ToString());
            httpContent.Headers.ContentType &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; MediaTypeHeaderValue(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; url = Address.TrimEnd(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) + $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/{interfaceId}/{methodId}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            AppRuntimes.Instance.Loger.Debug($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;httpRequest:{url},data:{postContentStr}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response =&lt;span&gt; httpClient.PostAsync(url, httpContent).Result; //提交请求

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;response.IsSuccessStatusCode)
            {
                AppRuntimes.Instance.Loger.Error($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;httpRequest error:{url},statuscode:{response.StatusCode}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ICVIPException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;网络异常或服务响应失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; responseStr =&lt;span&gt; response.Content.ReadAsStringAsync().Result;
            AppRuntimes.Instance.Loger.Debug($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;httpRequest response:{responseStr}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            apiRetult &lt;/span&gt;= JsonConvert.DeserializeObject&amp;lt;ApiActionResult&amp;gt;&lt;span&gt;(responseStr);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;apiRetult.IsSuccess)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BusinessException(apiRetult.Message ?? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;服务请求失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; apiRetult;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;有返回值的方法代理&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; T Invoke&amp;lt;T&amp;gt;(&lt;span&gt;string&lt;/span&gt; interfaceId, &lt;span&gt;string&lt;/span&gt; methodId, &lt;span&gt;params&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;[] param)
    {
        T rs &lt;/span&gt;= &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(T);

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; apiRetult =&lt;span&gt; PostHttpRequest(interfaceId, methodId, param);

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt;(T).Namespace == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                rs &lt;/span&gt;= (T)TypeConvertUtil.BasicTypeConvert(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(T), apiRetult.Data);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                rs &lt;/span&gt;= JsonConvert.DeserializeObject&amp;lt;T&amp;gt;&lt;span&gt;(Convert.ToString(apiRetult.Data));
            }
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
        {
            AppRuntimes.Instance.Loger.Error(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;数据转化失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex);
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rs;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有返回值的代理&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; InvokeWithoutReturn(&lt;span&gt;string&lt;/span&gt; interfaceId, &lt;span&gt;string&lt;/span&gt; methodId, &lt;span&gt;params&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;[] param)
    {
        PostHttpRequest(interfaceId, methodId, param);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;远程服务端http接入段统一入口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
[Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/svc/{interfaceId}/{methodId}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;), Produces(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;ApiActionResult&amp;gt; Process(&lt;span&gt;string&lt;/span&gt; interfaceId, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; methodId)
{
    Stopwatch stopwatch &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stopwatch();
    stopwatch.Start();
    ApiActionResult result &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; reqParam = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; reader = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StreamReader(Request.Body, Encoding.UTF8))
        {
            reqParam &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; reader.ReadToEndAsync();
        }
        AppRuntimes.Instance.Loger.Debug($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recive client request:api/svc/{interfaceId}/{methodId},data:{reqParam}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        ArrayList param &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(reqParam))
        {
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析参数&lt;/span&gt;
            param = JsonConvert.DeserializeObject&amp;lt;ArrayList&amp;gt;&lt;span&gt;(reqParam);
        } 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转交本地服务处理中心处理&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; data =&lt;span&gt; LocalServiceExector.Exec(interfaceId, methodId, param);
        result &lt;/span&gt;=&lt;span&gt; ApiActionResult.Success(data);
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;  BusinessException ex) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;业务异常&lt;/span&gt;
&lt;span&gt;    {
        result &lt;/span&gt;=&lt;span&gt; ApiActionResult.Error(ex.Message);
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;业务异常&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (ex.InnerException &lt;span&gt;is&lt;/span&gt;&lt;span&gt; BusinessException)
        {
            result &lt;/span&gt;=&lt;span&gt; ApiActionResult.Error(ex.InnerException.Message);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            AppRuntimes.Instance.Loger.Error($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;调用服务发生异常{interfaceId}-{methodId},data:{reqParam}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex);
            result &lt;/span&gt;= ApiActionResult.Fail(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;服务发生异常&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
    &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
    {
        stopwatch.Stop();
        AppRuntimes.Instance.Loger.Debug($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;process client request end:api/svc/{interfaceId}/{methodId},耗时[ {stopwatch.ElapsedMilliseconds} ]毫秒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;result.Message = AppRuntimes.Instance.GetCfgVal(&quot;ServerName&quot;) + &quot; &quot; + result.Message;&lt;/span&gt;
    result.Message =&lt;span&gt; result.Message;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;16&quot;&gt;
&lt;p&gt;本地服务中心通过接口名和方法名,找出具体的实现类的方法,并使用传递的参数执行,ps:因为涉及到反射获取具体的方法,暂不支持相同参数个数的方法重载.仅支持不同参数个数的方法重载.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; Exec(&lt;span&gt;string&lt;/span&gt; interfaceId, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; methodId, ArrayList param)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; svcMethodInfo =&lt;span&gt; GetInstanceAndMethod(interfaceId, methodId, param.Count);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; currentMethodParameters = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; svcMethodInfo.Paramters.Length; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tempParamter =&lt;span&gt; svcMethodInfo.Paramters[i];

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (param[i] == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            currentMethodParameters.Add(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!tempParamter.ParameterType.Namespace.Equals(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;System&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) || tempParamter.ParameterType.Name == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Byte[]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                currentMethodParameters.Add(JsonConvert.DeserializeObject(Convert.ToString(param[i]), tempParamter.ParameterType)
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                currentMethodParameters.Add(TypeConvertUtil.BasicTypeConvert(tempParamter.ParameterType, param[i]));
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; svcMethodInfo.Invoke(currentMethodParameters.ToArray());
}

&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; InstanceMethodInfo GetInstanceAndMethod(&lt;span&gt;string&lt;/span&gt; interfaceId, &lt;span&gt;string&lt;/span&gt; methodId, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; paramCount)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; methodKey = $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{interfaceId}_{methodId}_{paramCount}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (methodCache.ContainsKey(methodKey))
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; methodCache[methodKey];
    }
    InstanceMethodInfo temp &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; svcType = ServiceFactory.GetSvcType(interfaceId, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (svcType == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ICVIPException($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;找不到API接口的服务实现:{interfaceId}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; methods = svcType.GetMethods().Where(t =&amp;gt; t.Name ==&lt;span&gt; methodId).ToList();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (methods.IsNullEmpty())
    {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BusinessException($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;在API接口[{interfaceId}]的服务实现中[{svcType.FullName}]找不到指定的方法:{methodId}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; method = methods.FirstOrDefault(t =&amp;gt; t.GetParameters().Length ==&lt;span&gt; paramCount);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (method == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ICVIPException($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;在API接口中[{interfaceId}]的服务实现[{svcType.FullName}]中,方法[{methodId}]参数个数不匹配&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; paramtersTypes =&lt;span&gt; method.GetParameters();

    &lt;/span&gt;&lt;span&gt;object&lt;/span&gt; instance = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        instance &lt;/span&gt;=&lt;span&gt; Activator.CreateInstance(svcType);
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
    {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BusinessException($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;在实例化服务[{svcType}]发生异常,请确认其是否包含一个无参的构造函数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ex);
    }
    temp &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InstanceMethodInfo()
    {
        Instance &lt;/span&gt;=&lt;span&gt; instance,
        InstanceType &lt;/span&gt;=&lt;span&gt; svcType,
        Key &lt;/span&gt;=&lt;span&gt; methodKey,
        Method &lt;/span&gt;=&lt;span&gt; method,
        Paramters &lt;/span&gt;=&lt;span&gt; paramtersTypes
    };
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;methodCache.ContainsKey(methodKey))
    {
        &lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt; (_syncAddMethodCacheLocker)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;methodCache.ContainsKey(methodKey))
            {
                methodCache.Add(methodKey, temp);
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; temp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;服务配置,指示具体的服务的远程地址,当未配置的服务默认为本地服务.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[
  {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ServiceId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;XZL.Api.IOrderService&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:8801/api/svc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  },
  {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ServiceId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;XZL.Api.IUserService&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:8802/api/svc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  } 
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;5.5&quot;&gt;
&lt;p&gt;AppRuntime.Instance.GetService&amp;lt;TService&amp;gt;()的实现.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;(&lt;span&gt;string&lt;/span&gt; typeName, Type svcType)&amp;gt;&lt;span&gt; svcTypeDic;
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ConcurrentDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, Object&amp;gt; svcInstance = &lt;span&gt;new&lt;/span&gt; ConcurrentDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt;();
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TService GetService&amp;lt;TService&amp;gt;&lt;span&gt;()
 {
     &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; serviceId = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TService).FullName;

     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取服务配置&lt;/span&gt;
     &lt;span&gt;var&lt;/span&gt; serviceInfo =&lt;span&gt; ServiceConfonfig.Instance.GetServiceInfo(serviceId);
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (serviceInfo == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
     {
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (TService)Activator.CreateInstance(GetSvcType(serviceId));
     }
     &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
     { 
         &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rs = GetService&amp;lt;TService&amp;gt;(serviceId + (serviceInfo.IsRemote ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|Remote&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;), serviceInfo.IsSingle);
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rs != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; rs &lt;span&gt;is&lt;/span&gt;&lt;span&gt; RemoteServiceProxy)
         {
             &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; temp = rs &lt;span&gt;as&lt;/span&gt;&lt;span&gt; RemoteServiceProxy;
             temp.Address &lt;/span&gt;= serviceInfo.Address;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定服务地址&lt;/span&gt;
&lt;span&gt;         }
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rs;
     }
 }
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TService GetService&amp;lt;TService&amp;gt;(&lt;span&gt;string&lt;/span&gt; interfaceId, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; isSingle)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务非单例模式&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isSingle)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (TService)Activator.CreateInstance(GetSvcType(interfaceId));
    }

    &lt;/span&gt;&lt;span&gt;object&lt;/span&gt; obj = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (svcInstance.TryGetValue(interfaceId, &lt;span&gt;out&lt;/span&gt; obj) &amp;amp;&amp;amp; obj != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (TService)obj;
    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; svcType =&lt;span&gt; GetSvcType(interfaceId);

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (svcType == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ICVIPException($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;系统中未找到[{interfaceId}]的代理类&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
    obj &lt;/span&gt;=&lt;span&gt; Activator.CreateInstance(svcType);

    svcInstance.TryAdd(interfaceId, obj);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (TService)obj;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取服务的实现类&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Type GetSvcType(&lt;span&gt;string&lt;/span&gt; interfaceId, &lt;span&gt;bool&lt;/span&gt;? isLocal = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;_loaded)
    {
        LoadServiceType();
    }
    Type rs &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tempKey =&lt;span&gt; interfaceId;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; temp = svcTypeDic.Where(x =&amp;gt; x.typeName ==&lt;span&gt; tempKey).ToList();

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (temp == &lt;span&gt;null&lt;/span&gt; || temp.Count == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rs;
    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isLocal.HasValue)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isLocal.Value)
        {
            rs &lt;/span&gt;= temp.FirstOrDefault(t =&amp;gt; !&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(RemoteServiceProxy).IsAssignableFrom(t.svcType)).svcType;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            rs &lt;/span&gt;= temp.FirstOrDefault(t =&amp;gt; &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(RemoteServiceProxy).IsAssignableFrom(t.svcType)).svcType;
        }
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    {
        rs &lt;/span&gt;= temp[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].svcType;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; rs;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;5.5&quot;&gt;
&lt;p&gt;为了性能影响,我们在程序启动的时候可以将当前所有的ApiService类型缓存.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; LoadServiceType()
 {
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (_loaded)
     {
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
     }
     &lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt; (_sync)
     {
         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (_loaded)
         {
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
         } 
         &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
         {
             svcTypeDic &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;(&lt;span&gt;string&lt;/span&gt; typeName, Type svcType)&amp;gt;&lt;span&gt;();
             &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; path = AppDomain.CurrentDomain.RelativeSearchPath ??&lt;span&gt; AppDomain.CurrentDomain.BaseDirectory;
             &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dir = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DirectoryInfo(path);
             &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; files = dir.GetFiles(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;XZL*.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
             &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; file &lt;span&gt;in&lt;/span&gt;&lt;span&gt; files)
             { 
                 &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; types =&lt;span&gt; LoadAssemblyFromFile(file);
                 svcTypeDic.AddRange(types);
             } 
             _loaded &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
         }
         &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;
         {
             _loaded &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
         }
     }
 }

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载指定文件中的ApiService实现&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;(&lt;span&gt;string&lt;/span&gt; typeName, Type svcType)&amp;gt;&lt;span&gt; LoadAssemblyFromFile(FileInfo file)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; lst = &lt;span&gt;new&lt;/span&gt; List&amp;lt;(&lt;span&gt;string&lt;/span&gt; typeName, Type svcType)&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (file.Extension != &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp;&amp;amp; file.Extension != &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lst;
    }
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; types = Assembly.Load(file.Name.Substring(&lt;span&gt;0&lt;/span&gt;, file.Name.Length - &lt;span&gt;4&lt;/span&gt;&lt;span&gt;))
                        .GetTypes()
                        .Where(c &lt;/span&gt;=&amp;gt; c.IsClass &amp;amp;&amp;amp; !c.IsAbstract &amp;amp;&amp;amp;&lt;span&gt; c.IsPublic);
        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (Type type &lt;span&gt;in&lt;/span&gt;&lt;span&gt; types)
        {
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;客户端代理基类&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (type == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(RemoteServiceProxy))
            {
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(IApiService).IsAssignableFrom(type))
            {
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            }

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定现类&lt;/span&gt;
&lt;span&gt;            lst.Add((type.FullName, type));

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; interfaceType &lt;span&gt;in&lt;/span&gt;&lt;span&gt; type.GetInterfaces())
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(IApiService).IsAssignableFrom(interfaceType))
                {
                    &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
                } 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定接口与实际实现类&lt;/span&gt;
&lt;span&gt;                lst.Add((interfaceType.FullName, type));  
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;
    {
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; lst;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;具体api远程服务代理示例&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserServiceProxy : RemoteServiceProxy, IUserService
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; serviceId = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(IUserService).FullName;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; IncreaseScore(&lt;span&gt;int&lt;/span&gt; userId,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; score)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; InvokeWithoutReturn(serviceId, nameof(IncreaseScore), userId,score);
        }
       &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; UserInfo GetUserById(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; userId)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Invoke&amp;lt;UserInfo &amp;gt;&lt;span&gt;(serviceId, nameof(GetUserById),  userId);
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li readability=&quot;13&quot;&gt;
&lt;h3&gt;结语&lt;/h3&gt;&lt;p&gt;经过以上改造后, 我们便可很方便的通过形如 AppRuntime.Instance.GetService&amp;lt;TService&amp;gt;().MethodXX()无感的访问远程服务, 服务是部署在远程还是在本地以dll依赖形式存在,这个便对调用者透明了.无缝的对接上了大家固有习惯.&lt;br/&gt;PS: 但是此番改造后, 遗留下来了另外一个问题: 客户端调用远程服务,需要手动创建一个服务代理( 从 RemoteServiceProxy 继承),虽然每个代理很方便写,只是文中提到的简单两句话,但终究显得繁琐, 是否有一种方式能够根据远程api接口动态的生成这个客户端代理呢? 答案是肯定的,因本文较长了,留在下篇再续.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 10 Jul 2018 06:43:00 +0000</pubDate>
<dc:creator>谢中涞</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xie-zhonglai/p/netcore_micro_svc.html</dc:identifier>
</item>
<item>
<title>支付密码设置和登录密码设置 - 邹柯</title>
<link>http://www.cnblogs.com/zouke1220/p/9288929.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zouke1220/p/9288929.html</guid>
<description>&lt;p&gt;1、登录后若用户未设置支付密码，且该用户零钱余额大于0，则进入app首页时进行设置支付密码提醒；&lt;/p&gt;
&lt;p&gt;2、支付密码的设置与错误提醒同之前支付密码设置流程；&lt;/p&gt;
&lt;p&gt;3、点击下方不在提醒，则不在弹出此弹窗；&lt;/p&gt;
&lt;p&gt;4、点击取消，则在点击取消按钮第二天00:00开始计算，7天后的第一次登录则重新在用户进入app首页时出现此弹窗（无论此时用户零钱余额是否大于0都要提醒）；&lt;/p&gt;
&lt;p&gt;5、用户设置支付密码成功，吐司提示“设置成功”；&lt;/p&gt;

&lt;p&gt;设置支付密码规则：&lt;/p&gt;
&lt;p&gt;1、不要和登录密码一致（提示文案：不要和登录密码一致）；&lt;/p&gt;
&lt;p&gt;2、连续数字，重复数字不可设置（提示文案：支付密码过于简单）；&lt;/p&gt;
&lt;p&gt;3、用户设置支付密码，点击确定判断是否属于上面两种情况，若属于则进行拦截，并在“再次输入支付密码”文案后显示相应提示；&lt;/p&gt;
&lt;p&gt; 连续数字定义：&lt;/p&gt;
&lt;p&gt;密码中数字连续递增或递减，如：012345,987654；&lt;/p&gt;
&lt;p&gt; 重复数字定义：&lt;/p&gt;
&lt;p&gt;密码六位数字完全相同，如：111111；&lt;/p&gt;

&lt;p&gt;1、输入支付密码的弹窗，如果第一次输入错误则弹出“重试/忘记密码”弹窗，点击重试返回输入支付密码弹窗，点击忘记密码进入验证码输入弹窗； &lt;/p&gt;
&lt;p&gt;2、验证码5分钟有效，若验证码弹窗中验证码输入错误，则提示输入错误，并清空输入框； &lt;/p&gt;
&lt;p&gt;3、若重试超过五次，则将重试按钮换成返回，提示文案如原型，点击返回关闭输入支付密码弹窗，并在五分钟内用户再次有付款的动作，拦截用户并做出同样的弹窗提示，五分中后点击用户再次有支付动作时可输入支付密码； &lt;/p&gt;
&lt;p&gt;4、若五分钟后第六次输入错误，则弹窗中已错误次数变为“6”次，重试时间变为“10”分钟。以此类推，“7”次——“30”分钟，“8”次——“1小时”，“9”次——“24”小时，此后每次输入错误加“24小时”； &lt;/p&gt;
&lt;p&gt;5、该试错拦截流程同样适用于登录流程，若密码错误5次以上，吐司提示“密码已输错5次，请5分钟后重试”五分钟内用户再次点击登录，做出相同的提示，五分钟后可正常登录，若用户再次输入错误，则参考Note4中的规则对用户予以提示； &lt;/p&gt;
&lt;p&gt;6、用户如果成功登录一次，则再次登录时，试错流程刷新，重新开始记录输入错误次数；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;92&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * @title 判断是否可以设置支付密码--弹出设置支付密码弹窗
     * @return {&quot;status&quot;:&quot;0&quot;,&quot;errorCode&quot;:&quot;0&quot;,&quot;msg&quot;:&quot;成功&quot;,&quot;result&quot;:true}
     * @example PaySet.isSetPayPasswd? 调用参数:{&quot;method&quot;:&quot;PaySet.isSetPayPasswd&quot;,&quot;username&quot;:&quot;17721355485&quot;,&quot;check_code&quot;:&quot;123456&quot;}
     * @return_param_explain result:true弹出、false不弹出
     * @method POST
     * @author 邹柯
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; function isSetPayPasswd(){
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         * 1、登录后若用户未设置支付密码，且该用户零钱余额大于0，则进入app首页时进行设置支付密码提醒；
         * 2、点击取消，则在点击取消按钮第二天00:00开始计算，7天后的第一次登录则重新在用户进入app首页时出现此弹窗(无论此时用户零钱余额是否大于0都要提醒)
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        $user_id&lt;/span&gt;=session(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user.user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(empty($user_id)){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        $customer &lt;/span&gt;= M(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;customer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        $c_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$user_id;
        $c_info &lt;/span&gt;= $customer-&amp;gt;&lt;span&gt;where&lt;/span&gt;($c_where)-&amp;gt;field(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;balance,securitycode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)-&amp;gt;&lt;span&gt;find();
        $pps_info&lt;/span&gt;=$&lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;isLoginTime($user_id);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(empty($c_info[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;securitycode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]) &amp;amp;&amp;amp; $c_info[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;balance&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]&amp;gt; &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; $pps_info==&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断登录时间&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; function isLoginTime($user_id){
        $pay_passwd_set&lt;/span&gt;=M(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pay_passwd_set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        $pps_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$user_id;
        $pps_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        $pps_info&lt;/span&gt;=$pay_passwd_set-&amp;gt;field(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status,update_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)-&amp;gt;&lt;span&gt;where&lt;/span&gt;($pps_where)-&amp;gt;&lt;span&gt;find();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(empty($pps_info)){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        $dat&lt;/span&gt;=$pps_info[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
        $date&lt;/span&gt;=date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d 00:00:00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,strtotime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$dat +1day&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        $time&lt;/span&gt;=date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,strtotime( &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$date +8day&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        $now_time&lt;/span&gt;=date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time());
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($pps_info[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]==&lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; ($now_time &amp;gt;&lt;span&gt; $time)){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
     * @title 设置支付密码--不再提醒
     * @param status 是 int 是否再次提醒(1取消、2不在提醒)
     * @return {&quot;status&quot;:&quot;0&quot;,&quot;errorCode&quot;:&quot;0&quot;,&quot;msg&quot;:&quot;成功&quot;,&quot;result&quot;:true}
     * @example PaySet.setNotice? 调用参数:{&quot;method&quot;:&quot;PaySet.setNotice&quot;,&quot;username&quot;:&quot;17721355485&quot;,&quot;check_code&quot;:&quot;123456&quot;,&quot;status&quot;:&quot;1&quot;}
     * @method POST
     * @author 邹柯
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; function setNotice($res){
        $user_id&lt;/span&gt;=session(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user.user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(empty($user_id)){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        $status&lt;/span&gt;=$res[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
        $time&lt;/span&gt;=date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time());
        $pay_passwd_set&lt;/span&gt;=M(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pay_passwd_set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        $pps_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$user_id;
        $pps_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        $pps_info&lt;/span&gt;=$pay_passwd_set-&amp;gt;field(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status,update_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)-&amp;gt;&lt;span&gt;where&lt;/span&gt;($pps_where)-&amp;gt;&lt;span&gt;find();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(empty($pps_info)){
            $pps_data&lt;/span&gt;=&lt;span&gt;[
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;$user_id,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;$status,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;$time,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
            ];
            $res&lt;/span&gt;=$pay_passwd_set-&amp;gt;data($pps_data)-&amp;gt;&lt;span&gt;add();
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            $pps_data&lt;/span&gt;=&lt;span&gt;[
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;$status,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;$time
            ];
            $pps_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$user_id;
            $pps_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            $res&lt;/span&gt;=$pay_passwd_set-&amp;gt;data($pps_data)-&amp;gt;&lt;span&gt;where&lt;/span&gt;($pps_where)-&amp;gt;&lt;span&gt;save();
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;$res){
            E(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10001&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;设置失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;密码设置规则
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1、不要和登录密码一致；
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2、连续数字，重复数字不可设置；&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; function setPasswdRule($user_id,$securitycode){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;先判断是否和登录密码一致&lt;/span&gt;
        $user=M(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        $u_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$user_id;
        $user_info&lt;/span&gt;=$user-&amp;gt;field(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)-&amp;gt;&lt;span&gt;where&lt;/span&gt;($u_where)-&amp;gt;&lt;span&gt;find();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(md5($securitycode)==$user_info[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]){
             &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; array(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;不要和登录密码一致&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否是重复数字&lt;/span&gt;
        $securitycode_array=&lt;span&gt;str_split($securitycode);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;1&lt;/span&gt; ==&lt;span&gt; count(array_unique($securitycode_array))) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; array(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;支付密码过于简单&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否是连续数字&lt;/span&gt;
        $res=$&lt;span&gt;this&lt;/span&gt;-&amp;gt;getconsecutive($securitycode_array,&lt;span&gt;6&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($res==&lt;span&gt;false&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; array(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;支付密码过于简单&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否是连续数字&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; function getconsecutive($arr,$n){
        $temp &lt;/span&gt;=&lt;span&gt; array();
        &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;($arr &lt;span&gt;as&lt;/span&gt; $k =&amp;gt;&lt;span&gt;$v){
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;($k&amp;lt;&lt;span&gt;$n){
                $temp[$k] &lt;/span&gt;= $v+$k; $k++&lt;span&gt;;
            }
            $arr_str&lt;/span&gt;=implode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,$arr);
            $temp_str&lt;/span&gt;=implode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,$temp);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($arr_str===&lt;span&gt;$temp_str){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
    }   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;支付时输入支付密码错误的处理
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$type 1支付密码 2登录密码&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; function tipByPayPasswdError($user_id,$type){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新输入错误的次数&lt;/span&gt;
        $pay_passwd_set=M(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pay_passwd_set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($type==&lt;span&gt;2&lt;/span&gt;&lt;span&gt;){
            $user&lt;/span&gt;=M(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            $u_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$user_id;
            $user_info&lt;/span&gt;=$user-&amp;gt;field(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)-&amp;gt;&lt;span&gt;where&lt;/span&gt;($u_where)-&amp;gt;&lt;span&gt;find();
            $user_id&lt;/span&gt;=$user_info[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
        }
        $pps_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$user_id;
        $pps_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$type;
        $count&lt;/span&gt;=$pay_passwd_set-&amp;gt;&lt;span&gt;where&lt;/span&gt;($pps_where)-&amp;gt;&lt;span&gt;count();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($count &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
            $time&lt;/span&gt;=date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,time());
            $pps_data&lt;/span&gt;=&lt;span&gt;[
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;$user_id,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;$time,
                &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;$type
            ];
            $pay_passwd_set&lt;/span&gt;-&amp;gt;data($pps_data)-&amp;gt;&lt;span&gt;add();
        }
        $pay_passwd_set&lt;/span&gt;-&amp;gt;&lt;span&gt;where&lt;/span&gt;($pps_where)-&amp;gt;setInc(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pay_passwd_nums&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询总共输错的次数&lt;/span&gt;
        $pps_info=$pay_passwd_set-&amp;gt;&lt;span&gt;where&lt;/span&gt;($pps_where)-&amp;gt;getField(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pay_passwd_nums&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
         * 若五分钟后第六次输入错误，则弹窗中已错误次数变为“6”次，重试时间变为“10”分钟。
         * 以此类推，“7”次——“30”分钟，“8”次——“1小时”，“9”次——“24”小时，此后每次输入错误加“24小时”；
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;($pps_info&amp;gt;=&lt;span&gt;5&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt;($pps_info){
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;:
                    $time&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5分钟&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                    $repay_time&lt;/span&gt;=date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,strtotime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+5 minute&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;:
                    $time&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10分钟&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                    $repay_time&lt;/span&gt;=date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,strtotime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+10 minute&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;&lt;span&gt;:
                    $time&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;30分钟&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                    $repay_time&lt;/span&gt;=date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,strtotime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+30 minute&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;8&lt;/span&gt;&lt;span&gt;:
                    $time&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1小时&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                    $repay_time&lt;/span&gt;=date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,strtotime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+1 hour&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                    $time&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;24小时&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                    $repay_time&lt;/span&gt;=date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,strtotime(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+24 hour&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新可以再次输入支付密码的时间&lt;/span&gt;
            $pay_passwd_set-&amp;gt;&lt;span&gt;where&lt;/span&gt;($pps_where)-&amp;gt;data([&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;repay_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;$repay_time])-&amp;gt;&lt;span&gt;save();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($type==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                $msg&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;支付密码输入不正确,已错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.$pps_info.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;次,请点击忘记密码进行找回或&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.$time.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;后重试&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                $msg&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;密码已输错&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.$pps_info.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;次，请&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.$time.&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;后重试&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; array(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;errorCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;$msg,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;=&amp;gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;支付密码输入成功,更新支付密码输入错误次数为0
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$type 1支付密码 2登录密码&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; function setPayPasswdNums($user_id,$type){
        $pay_passwd_set&lt;/span&gt;=M(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pay_passwd_set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;($type==&lt;span&gt;2&lt;/span&gt;&lt;span&gt;){
            $user&lt;/span&gt;=M(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            $u_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$user_id;
            $user_info&lt;/span&gt;=$user-&amp;gt;field(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)-&amp;gt;&lt;span&gt;where&lt;/span&gt;($u_where)-&amp;gt;&lt;span&gt;find();
            $user_id&lt;/span&gt;=$user_info[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
        }
        $pps_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$user_id;
        $pps_where[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;$type;
        $pps_data&lt;/span&gt;=&lt;span&gt;[
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pay_passwd_nums&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;repay_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;=&amp;gt;date(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        ];
        $pay_passwd_set&lt;/span&gt;-&amp;gt;&lt;span&gt;where&lt;/span&gt;($pps_where)-&amp;gt;data($pps_data)-&amp;gt;&lt;span&gt;save();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE TABLE `lc_pay_passwd_set` (
  `id` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;11&lt;/span&gt;&lt;span&gt;) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;) DEFAULT NULL COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `status` tinyint(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;) DEFAULT NULL COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;提醒状态(1取消、2不在提醒)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `update_time` datetime DEFAULT NULL COMMENT &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;更新时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `pay_passwd_nums` &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;) NOT NULL DEFAULT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;支付密码输入次数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `repay_time` datetime DEFAULT NULL COMMENT &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;再次可以输入的时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  `type` tinyint(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;) DEFAULT NULL COMMENT &lt;span&gt;'&lt;/span&gt;&lt;span&gt;输入密码类型(1-支付密码、2登录密码)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  PRIMARY KEY (`id`)
) ENGINE&lt;/span&gt;=InnoDB AUTO_INCREMENT=&lt;span&gt;10&lt;/span&gt; DEFAULT CHARSET=utf8 COMMENT=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;支付密码设置--提醒&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 10 Jul 2018 06:37:00 +0000</pubDate>
<dc:creator>邹柯</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zouke1220/p/9288929.html</dc:identifier>
</item>
</channel>
</rss>