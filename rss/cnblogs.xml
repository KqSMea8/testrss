<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Node.js系列文章：利用console输出日志文件 - liuhe688</title>
<link>http://www.cnblogs.com/liuhe688/p/8807130.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuhe688/p/8807130.html</guid>
<description>&lt;p&gt;通常我们在写Node.js程序时，都习惯使用console.log打印日志信息，但这也仅限于控制台输出，有时候我们需要将信息输出到日志文件中，实际上利用console也可以达到这个目的的，今天就来简单介绍一下。&lt;/p&gt;
&lt;p&gt;我们首先创建如下文件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// index.js&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; fs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fs'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; options &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;co&quot;&gt;// append模式&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// utf8编码&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; stdout &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createWriteStream&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./stdout.log'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; options)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; stderr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createWriteStream&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./stderr.log'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; options)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 创建logger&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; logger &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Console&lt;/span&gt;(stdout&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; stderr)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;logger&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`log message &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;logger&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`err message &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;i&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面代码中，我们其实是创建了一个console.Console类的实例，该类需要指定两个参数，即标准输出流和标准错误输出流，正常情况下，实际上是对应了process.stdout和process.stderr，以上的代码中，我们将这两个输出流改为了文件输出流，并指定为文件追加模式，这样即可将日志信息输出到指定的文件中去。运行上面的代码，会生成stdout.log和stderr.log两个文件。&lt;/p&gt;
&lt;p&gt;stdout.log文件内容如下：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;log message 0
log message 1
log message 2
log message 3
log message 4
log message 5
log message 6
log message 7
log message 8
log message 9
log message 10
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;stderr.log文件内容如下：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;err message 0
err message 1
err message 2
err message 3
err message 4
err message 5
err message 6
err message 7
err message 8
err message 9
err message 10
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看上去信息还比较简单，不像是日志文件的样子，我们或许得为每条日志添加一个时间才行，下面先为Date对象添加一个format的原型方法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 添加format方法&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Date&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (format) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;format) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        format &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'yyyy-MM-dd HH:mm:ss'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;co&quot;&gt;// 用0补齐指定位数&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; padNum &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; digits) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Array&lt;/span&gt;(digits &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;value&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; value&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 指定格式字符&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; cfg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;yyyy&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getFullYear&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;                          &lt;span class=&quot;co&quot;&gt;// 年&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;MM&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;padNum&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getMonth&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;                &lt;span class=&quot;co&quot;&gt;// 月&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;padNum&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getDate&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;                     &lt;span class=&quot;co&quot;&gt;// 日&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;HH&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;padNum&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getHours&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;co&quot;&gt;// 时&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;padNum&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getMinutes&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;                  &lt;span class=&quot;co&quot;&gt;// 分&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;padNum&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getSeconds&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;                  &lt;span class=&quot;co&quot;&gt;// 秒&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;fff&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;padNum&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getMilliseconds&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;co&quot;&gt;// 毫秒&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;format&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;([a-z]|[A-Z])(\1)*&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/ig&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (m) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; cfg[m]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后再改写前面的主文件：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// index.js

let fs = require('fs');

let options = {
    flags: 'a',         // append模式
    encoding: 'utf8',   // utf8编码
};

let stdout = fs.createWriteStream('./stdout.log', options);
let stderr = fs.createWriteStream('./stderr.log', options);

// 创建logger
let logger = new console.Console(stdout, stderr);

// 添加format方法
Date.prototype.format = function (format) {

    if (!format) {
        format = 'yyyy-MM-dd HH:mm:ss';
    }
    
    // 用0补齐指定位数
    let padNum = function (value, digits) {
        return Array(digits - value.toString().length + 1).join('0') + value;
    };

    // 指定格式字符
    let cfg = {
        yyyy: this.getFullYear(),                          // 年
        MM: padNum(this.getMonth() + 1, 2),                // 月
        dd: padNum(this.getDate(), 2),                     // 日
        HH: padNum(this.getHours(), 2),                    // 时
        mm: padNum(this.getMinutes(), 2),                  // 分
        ss: padNum(this.getSeconds(), 2),                  // 秒
        fff: padNum(this.getMilliseconds(), 3),            // 毫秒
    };

    return format.replace(/([a-z]|[A-Z])(\1)*/ig, function (m) {
        return cfg[m];
    });
}

for (let i = 0; i &amp;lt; 100; i++) {

    let time = new Date().format('yyyy-MM-dd HH:mm:ss.fff');

    logger.log(`[${time}] - log message ${i}`);
    logger.error(`[${time}] - err message ${i}`);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新运行程序，然后查看两个日志文件的内容。&lt;/p&gt;
&lt;p&gt;stdout.log内容如下：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;[2018-04-27 07:30:54.309] - log message 0
[2018-04-27 07:30:54.312] - log message 1
[2018-04-27 07:30:54.312] - log message 2
[2018-04-27 07:30:54.312] - log message 3
[2018-04-27 07:30:54.312] - log message 4
[2018-04-27 07:30:54.312] - log message 5
[2018-04-27 07:30:54.312] - log message 6
[2018-04-27 07:30:54.312] - log message 7
[2018-04-27 07:30:54.312] - log message 8
[2018-04-27 07:30:54.312] - log message 9
[2018-04-27 07:30:54.312] - log message 10
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;stderr.log内容如下：&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;[2018-04-27 07:30:54.309] - err message 0
[2018-04-27 07:30:54.312] - err message 1
[2018-04-27 07:30:54.312] - err message 2
[2018-04-27 07:30:54.312] - err message 3
[2018-04-27 07:30:54.312] - err message 4
[2018-04-27 07:30:54.312] - err message 5
[2018-04-27 07:30:54.312] - err message 6
[2018-04-27 07:30:54.312] - err message 7
[2018-04-27 07:30:54.312] - err message 8
[2018-04-27 07:30:54.312] - err message 9
[2018-04-27 07:30:54.312] - err message 10
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样一个简单的日志输出就完成了。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/api/console.html&quot; class=&quot;uri&quot;&gt;https://nodejs.org/api/console.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 26 Apr 2018 23:37:00 +0000</pubDate>
<dc:creator>liuhe688</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuhe688/p/8807130.html</dc:identifier>
</item>
<item>
<title>Hadoop系列：（一）hdfs文件系统的基本操作 - 骑着龙的羊</title>
<link>http://www.cnblogs.com/qizhelongdeyang/p/8960668.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qizhelongdeyang/p/8960668.html</guid>
<description>&lt;p&gt;可以执行所有常用的Linux文件操作命令（读取文件，新建文件，移动文件，删除文件，列表文件等）&lt;/p&gt;
&lt;p&gt;1.help命令获取没个命令的帮助&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart ~]$ hadoop fs -&lt;span&gt;help
Usage: hadoop fs [generic options]
        [&lt;/span&gt;-appendToFile &amp;lt;localsrc&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-&lt;span&gt;cat&lt;/span&gt; [-ignoreCrc] &amp;lt;src&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-checksum &amp;lt;src&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;chgrp&lt;/span&gt; [-&lt;span&gt;R] GROUP PATH...]
        [&lt;/span&gt;-&lt;span&gt;chmod&lt;/span&gt; [-R] &amp;lt;MODE[,MODE]... | OCTALMODE&amp;gt;&lt;span&gt; PATH...]
        [&lt;/span&gt;-&lt;span&gt;chown&lt;/span&gt; [-&lt;span&gt;R] [OWNER][:[GROUP]] PATH...]
        [&lt;/span&gt;-copyFromLocal [-f] [-p] [-l] &amp;lt;localsrc&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-copyToLocal [-p] [-ignoreCrc] [-crc] &amp;lt;src&amp;gt; ... &amp;lt;localdst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-count [-q] [-h] [-v] [-x] &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;cp&lt;/span&gt; [-f] [-p | -p[topax]] &amp;lt;src&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-createSnapshot &amp;lt;snapshotDir&amp;gt; [&amp;lt;snapshotName&amp;gt;&lt;span&gt;]]
        [&lt;/span&gt;-deleteSnapshot &amp;lt;snapshotDir&amp;gt; &amp;lt;snapshotName&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-&lt;span&gt;df&lt;/span&gt; [-h] [&amp;lt;path&amp;gt;&lt;span&gt; ...]]
        [&lt;/span&gt;-&lt;span&gt;du&lt;/span&gt; [-s] [-h] [-x] &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;expunge]
        [&lt;/span&gt;-&lt;span&gt;find&lt;/span&gt; &amp;lt;path&amp;gt; ... &amp;lt;expression&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-get [-p] [-ignoreCrc] [-crc] &amp;lt;src&amp;gt; ... &amp;lt;localdst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-getfacl [-R] &amp;lt;path&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-getfattr [-R] {-n name | -d} [-e en] &amp;lt;path&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-getmerge [-&lt;span&gt;nl&lt;/span&gt;] &amp;lt;src&amp;gt; &amp;lt;localdst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-&lt;span&gt;help [cmd ...]]
        [&lt;/span&gt;-&lt;span&gt;ls&lt;/span&gt; [-C] [-d] [-h] [-q] [-R] [-t] [-S] [-r] [-u] [&amp;lt;path&amp;gt;&lt;span&gt; ...]]
        [&lt;/span&gt;-&lt;span&gt;mkdir&lt;/span&gt; [-p] &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-moveFromLocal &amp;lt;localsrc&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-moveToLocal &amp;lt;src&amp;gt; &amp;lt;localdst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-&lt;span&gt;mv&lt;/span&gt; &amp;lt;src&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-put [-f] [-p] [-l] &amp;lt;localsrc&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-renameSnapshot &amp;lt;snapshotDir&amp;gt; &amp;lt;oldName&amp;gt; &amp;lt;newName&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-&lt;span&gt;rm&lt;/span&gt; [-f] [-r|-R] [-skipTrash] &amp;lt;src&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;rmdir&lt;/span&gt; [--ignore-fail-on-non-empty] &amp;lt;&lt;span&gt;dir&lt;/span&gt;&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-setfacl [-R] [{-b|-k} {-m|-x &amp;lt;acl_spec&amp;gt;} &amp;lt;path&amp;gt;]|[--set &amp;lt;acl_spec&amp;gt; &amp;lt;path&amp;gt;&lt;span&gt;]]
        [&lt;/span&gt;-setfattr {-n name [-v value] | -x name} &amp;lt;path&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-setrep [-R] [-&lt;span&gt;w&lt;/span&gt;] &amp;lt;rep&amp;gt; &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;stat&lt;/span&gt; [format] &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;tail&lt;/span&gt; [-f] &amp;lt;&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-test -[defsz] &amp;lt;path&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-text [-ignoreCrc] &amp;lt;src&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-touchz &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-usage [cmd ...]]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.copyFromLocal复制本地文件到hdfs中，其中“hdfs://quickstart.cloudera:8020”可以省略&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -copyFromLocal file1.txt hdfs:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;quickstart.cloudera:8020/tmp&lt;/span&gt;
[cloudera@quickstart Downloads]$ hadoop fs -copyFromLocal file2.txt /tmp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.copyToLocal把hdfs中文件复制到本地文件系统&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -copyToLocal hdfs:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;quickstart.cloudera:8020/tmp/file1.txt file1.txt.copy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.ls列出当前目录下的文件（第一列：文件权限，第二列：文件的备份书，第三列：所属用户，第四列：所属组，第五列：文件大小，第六列：最后修改日期，第七列：文件或目录）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -&lt;span&gt;ls&lt;/span&gt; /&lt;span&gt;tmp
Found &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; items
drwxrwxrwx   &lt;/span&gt;- hdfs     supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;40&lt;/span&gt; /tmp/&lt;span&gt;.cloudera_health_monitoring_canary_files
&lt;/span&gt;-rw-r--r--   &lt;span&gt;1&lt;/span&gt; cloudera supergroup         &lt;span&gt;12&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt; /tmp/&lt;span&gt;file1.txt
&lt;/span&gt;-rw-r--r--   &lt;span&gt;1&lt;/span&gt; cloudera supergroup         &lt;span&gt;29&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt; /tmp/&lt;span&gt;file2.txt
drwxrwxrwt   &lt;/span&gt;- mapred   mapred              &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;21&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt; /tmp/hadoop-&lt;span&gt;yarn
drwx&lt;/span&gt;--x--x   - hbase    supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt; /tmp/hbase-&lt;span&gt;staging
drwx&lt;/span&gt;-wx-wx   - hive     supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;19&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt; /tmp/&lt;span&gt;hive
drwxrwxrwt   &lt;/span&gt;- mapred   hadoop              &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; /tmp/logs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.cat输出文件内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -&lt;span&gt;cat&lt;/span&gt; /tmp/&lt;span&gt;file1.txt
hello world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.mkdir创建目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -&lt;span&gt;mkdir&lt;/span&gt; /tmp/&lt;span&gt;test
[cloudera@quickstart Downloads]$ hadoop fs &lt;/span&gt;-&lt;span&gt;ls&lt;/span&gt; /&lt;span&gt;tmp
Found &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; items
drwxrwxrwx   &lt;/span&gt;- hdfs     supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt; /tmp/&lt;span&gt;.cloudera_health_monitoring_canary_files
&lt;/span&gt;-rw-r--r--   &lt;span&gt;1&lt;/span&gt; cloudera supergroup         &lt;span&gt;12&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;35&lt;/span&gt; /tmp/&lt;span&gt;file1.txt
&lt;/span&gt;-rw-r--r--   &lt;span&gt;1&lt;/span&gt; cloudera supergroup         &lt;span&gt;29&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt; /tmp/&lt;span&gt;file2.txt
drwxrwxrwt   &lt;/span&gt;- mapred   mapred              &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;21&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt; /tmp/hadoop-&lt;span&gt;yarn
drwx&lt;/span&gt;--x--x   - hbase    supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt; /tmp/hbase-&lt;span&gt;staging
drwx&lt;/span&gt;-wx-wx   - hive     supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;19&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt; /tmp/&lt;span&gt;hive
drwxrwxrwt   &lt;/span&gt;- mapred   hadoop              &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; /tmp/&lt;span&gt;logs
drwxr&lt;/span&gt;-xr-x   - cloudera supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt; /tmp/test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.rm删除文件或者目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -&lt;span&gt;rm&lt;/span&gt; /tmp/&lt;span&gt;file1.txt      删除文件
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;/&lt;span&gt;04&lt;/span&gt;/&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;55&lt;/span&gt;:&lt;span&gt;44&lt;/span&gt; INFO fs.TrashPolicyDefault: Moved: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hdfs://quickstart.cloudera:8020/tmp/file1.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; to trash at: hdfs:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;quickstart.cloudera:8020/user/cloudera/.Trash/Current/tmp/file1.txt&lt;/span&gt;
[cloudera@quickstart Downloads]$ hadoop fs -&lt;span&gt;rm&lt;/span&gt; -r /tmp/&lt;span&gt;test        删除目录
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;/&lt;span&gt;04&lt;/span&gt;/&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;56&lt;/span&gt;:&lt;span&gt;01&lt;/span&gt; INFO fs.TrashPolicyDefault: Moved: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hdfs://quickstart.cloudera:8020/tmp/test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; to trash at: hdfs:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;quickstart.cloudera:8020/user/cloudera/.Trash/Current/tmp/test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.put同copyFromLocal&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -put file1.txt /tmp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;9.get通copyToLocal&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -get hdfs:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;quickstart.cloudera:8020/tmp/file1.txt get1.txt&lt;/span&gt;
[cloudera@quickstart Downloads]$ &lt;span&gt;ls&lt;/span&gt;
&lt;span&gt;1901&lt;/span&gt;.gz  &lt;span&gt;1902&lt;/span&gt;.gz  all  compute_max_degree.&lt;span&gt;sh&lt;/span&gt;  file1.txt  file1.txt.copy  file2.txt  get1.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10.mv移动文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -&lt;span&gt;mv&lt;/span&gt; /tmp/file1.txt /tmp/&lt;span&gt;file1_new.txt
[cloudera@quickstart Downloads]$ hadoop fs &lt;/span&gt;-&lt;span&gt;ls&lt;/span&gt; /&lt;span&gt;tmp
Found &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; items
drwxrwxrwx   &lt;/span&gt;- hdfs     supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt; /tmp/&lt;span&gt;.cloudera_health_monitoring_canary_files
&lt;/span&gt;-rw-r--r--   &lt;span&gt;1&lt;/span&gt; cloudera supergroup         &lt;span&gt;12&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; /tmp/&lt;span&gt;file1_new.txt
&lt;/span&gt;-rw-r--r--   &lt;span&gt;1&lt;/span&gt; cloudera supergroup         &lt;span&gt;29&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt; /tmp/&lt;span&gt;file2.txt
drwxrwxrwt   &lt;/span&gt;- mapred   mapred              &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;21&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt; /tmp/hadoop-&lt;span&gt;yarn
drwx&lt;/span&gt;--x--x   - hbase    supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt; /tmp/hbase-&lt;span&gt;staging
drwx&lt;/span&gt;-wx-wx   - hive     supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;19&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt; /tmp/&lt;span&gt;hive
drwxrwxrwt   &lt;/span&gt;- mapred   hadoop              &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; /tmp/&lt;span&gt;logs
drwxr&lt;/span&gt;-xr-x   - cloudera supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt; /tmp/test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;11.du显示文件大小&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -&lt;span&gt;du&lt;/span&gt; /tmp/&lt;span&gt;file2.txt
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;  &lt;span&gt;29&lt;/span&gt;  /tmp/file2.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;12.touchz创建空文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -touchz /tmp/&lt;span&gt;file3.txt
[cloudera@quickstart Downloads]$ hadoop fs &lt;/span&gt;-&lt;span&gt;du&lt;/span&gt; /tmp/&lt;span&gt;file3.txt
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;  /tmp/file3.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;13.chmod改变文件权限&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -&lt;span&gt;ls&lt;/span&gt; /&lt;span&gt;tmp
Found 1&lt;/span&gt;&lt;span&gt; items&lt;br/&gt;&lt;/span&gt;-rw-r--r--   &lt;span&gt;1&lt;/span&gt; cloudera supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt; /tmp/&lt;span&gt;file3.txt&lt;/span&gt;&lt;span&gt;
[cloudera@quickstart Downloads]$ hadoop fs &lt;/span&gt;-&lt;span&gt;chmod&lt;/span&gt; +x /tmp/&lt;span&gt;file3.txt
[cloudera@quickstart Downloads]$ hadoop fs &lt;/span&gt;-&lt;span&gt;ls&lt;/span&gt; /&lt;span&gt;tmp
Found 1&lt;/span&gt;&lt;span&gt; items&lt;/span&gt;-rwxr-xr-x   &lt;span&gt;1&lt;/span&gt; cloudera supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt; /tmp/&lt;span&gt;file3.txt&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;14.chown改变文件所有者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[cloudera@quickstart Downloads]$ hadoop fs -&lt;span&gt;chown&lt;/span&gt; -R hbase:supergroup /tmp/&lt;span&gt;file3.txt
&lt;/span&gt;&lt;span&gt;chown&lt;/span&gt;: changing ownership of &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/tmp/file3.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: Non-&lt;span&gt;super user cannot change owner
[cloudera@quickstart Downloads]$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; -u hdfs hadoop fs -&lt;span&gt;chown&lt;/span&gt; -R hbase:supergroup /tmp/&lt;span&gt;file3.txt
[cloudera@quickstart Downloads]$ hadoop fs &lt;/span&gt;-&lt;span&gt;ls&lt;/span&gt; /&lt;span&gt;tmp
Found &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; items
drwxrwxrwx   &lt;/span&gt;- hdfs     supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt; /tmp/&lt;span&gt;.cloudera_health_monitoring_canary_files
&lt;/span&gt;-rw-r--r--   &lt;span&gt;1&lt;/span&gt; cloudera supergroup         &lt;span&gt;12&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; /tmp/&lt;span&gt;file1_new.txt
&lt;/span&gt;-rw-r--r--   &lt;span&gt;1&lt;/span&gt; cloudera supergroup         &lt;span&gt;29&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt; /tmp/&lt;span&gt;file2.txt
&lt;/span&gt;-rwxr-xr-x   &lt;span&gt;1&lt;/span&gt; hbase    supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;12&lt;/span&gt; /tmp/&lt;span&gt;file3.txt
drwxrwxrwt   &lt;/span&gt;- mapred   mapred              &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;21&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt; /tmp/hadoop-&lt;span&gt;yarn
drwx&lt;/span&gt;--x--x   - hbase    supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;36&lt;/span&gt; /tmp/hbase-&lt;span&gt;staging
drwx&lt;/span&gt;-wx-wx   - hive     supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;13&lt;/span&gt; &lt;span&gt;19&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt; /tmp/&lt;span&gt;hive
drwxrwxrwt   &lt;/span&gt;- mapred   hadoop              &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt; &lt;span&gt;17&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; /tmp/&lt;span&gt;logs
drwxr&lt;/span&gt;-xr-x   - cloudera supergroup          &lt;span&gt;0&lt;/span&gt; &lt;span&gt;2018&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;26&lt;/span&gt; &lt;span&gt;16&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt; /tmp/test
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 26 Apr 2018 23:25:00 +0000</pubDate>
<dc:creator>骑着龙的羊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qizhelongdeyang/p/8960668.html</dc:identifier>
</item>
<item>
<title>Why Helm? - 每天5分钟玩转 Docker 容器技术（160） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8949347.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8949347.html</guid>
<description>&lt;p&gt;&lt;span&gt;本章我们将学习 Helm，Kubernetes 的包管理器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个成功的软件平台都有一个优秀的打包系统，比如 Debian、Ubuntu 的 apt，Redhat、Centos 的 yum。而 Helm 则是 Kubernetes 上的包管理器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本章我们将讨论为什么需要 Helm，它的架构和组件，以及如何使用 Helm。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Why Helm&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Helm 到底解决了什么问题？为什么 Kubernetes 需要 Helm？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;答案是：Kubernetes 能够很好地组织和编排容器，但它缺少一个更高层次的应用打包工具，而 Helm 就是来干这件事的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先来看个例子。&lt;br/&gt;比如对于一个 MySQL 服务， Kubernetes 需要部署下面这些对象：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Service，让外界能够访问到 MySQL。&lt;br/&gt;&lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180426082625887-2120784754.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Secret，定义 MySQL 的密码。&lt;br/&gt;&lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180426082637715-707564359.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;PersistentVolumeClaim，为 MySQL 申请持久化存储空间。&lt;br/&gt;&lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180426082647956-1122070200.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Deployment，部署 MySQL Pod，并使用上面的这些支持对象。&lt;br/&gt;&lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180426082657813-2041947908.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;我们可以将上面这些配置保存到对象各自的文件中，或者集中写进一个配置文件，然后通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl apply -f&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 部署。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;到目前为止，Kubernetes 对服务的部署支持得都挺好，如果应用只由一个或几个这样的服务组成，上面的部署方式完全足够了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是，如果我们开发的是微服务架构的应用，组成应用的服务可能多达十个甚至几十上百个，这种组织和管理应用的方式就不好使了：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;6&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;很难管理、编辑和维护如此多的服务。每个服务都有若干配置，缺乏一个更高层次的工具将这些配置组织起来。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;不容易将这些服务作为一个整体统一发布。部署人员需要首先理解应用都包含哪些服务，然后按照逻辑顺序依次执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl apply&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。即缺少一种工具来定义应用与服务，以及服务与服务之间的依赖关系。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;不能高效地共享和重用服务。比如两个应用都要用到 MySQL 服务，但配置的参数不一样，这两个应用只能分别拷贝一套标准的 MySQL 配置文件，修改后通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl apply&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 部署。也就是说不支持参数化配置和多环境部署。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;不支持应用级别的版本管理。虽然可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl rollout undo&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 进行回滚，但这只能针对单个 Deployment，不支持整个应用的回滚。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;不支持对部署的应用状态进行验证。比如是否能通过预定义的账号访问 MySQL。虽然 Kubernetes 有健康检查，但那是针对单个容器，我们需要应用（服务）级别的健康检查。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;Helm 能够解决上面这些问题，Helm 帮助 Kubernetes 成为微服务架构应用理想的部署平台。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下一节我们讨论 Helm 的架构。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;书籍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Kubernetes》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/26225745440.html&quot;&gt;https://item.jd.com/26225745440.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;3.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 26 Apr 2018 22:29:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8949347.html</dc:identifier>
</item>
<item>
<title>CRM客户关系管理系统（二） - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/8955249.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/8955249.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; crm/model.py&lt;/span&gt;
&lt;span&gt;__author__&lt;/span&gt; = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; User


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Role(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;角色表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    name &lt;/span&gt;= models.CharField(max_length=64,unique=True)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;不能重&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;一个角色可以访问多个菜单，一个菜单可以被多个角色访问&lt;/span&gt;
    menus = models.ManyToManyField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Menus&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,blank=True,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;动态菜单&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserProfile(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;用户信息表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;关联django自带的User，可以自己扩展字段&lt;/span&gt;
    user = models.ForeignKey(User,on_delete=&lt;span&gt;models.CASCADE)
    name &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=64&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;一个用户可以有多个角色，一个角色可以对应多个用户&lt;/span&gt;
    role = models.ManyToManyField(Role,blank=True,null=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerInfo(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;客户信息表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    name &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=64,default=&lt;span&gt;None)
    contact_type_choices &lt;/span&gt;= ((0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;qq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;微信&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;手机&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
    contact_type &lt;/span&gt;= models.SmallIntegerField(choices=contact_type_choices,default=&lt;span&gt;0)
    contact &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;联系方式&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=64,unique=&lt;span&gt;True)
    source_choices &lt;/span&gt;= ((0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;qq群&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;51CTO&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;百度推广&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(3,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;知乎&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(4,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;转介绍&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(5,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;其它&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),)
    source &lt;/span&gt;= models.SmallIntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;客户来源&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,choices=&lt;span&gt;source_choices)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;关联自己，如果是转介绍（介绍人已经是学员，然后介绍别人过来学习），需要填写转介绍人的信息，不是转介绍，这里就可以为空&lt;/span&gt;
    referral_from = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,blank=True,null=True,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;转介绍&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;可以咨询多个课程&lt;/span&gt;
    consult_courses = models.ManyToManyField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Course&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;咨询课程&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    consult_content &lt;/span&gt;= models.TextField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;咨询内容&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
    status_choices &lt;/span&gt;= ((0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;未报名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;已报名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;已经退学&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
    status &lt;/span&gt;= models.SmallIntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;客户状态&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,choices=&lt;span&gt;status_choices)
    consultant &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UserProfile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;课程顾问&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    date &lt;/span&gt;= models.DateField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;创建的时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,auto_now_add=&lt;span&gt;True)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;学员表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    customer &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CustomerInfo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;客户&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    class_grades &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ClassList&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;班级&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.customer


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomerFollowUp(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;客户跟踪记录表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    customer &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CustomerInfo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    content &lt;/span&gt;= models.TextField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;跟踪内容&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
    user &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UserProfile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;跟进人&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    status_choices &lt;/span&gt;= ((0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;近期无报名计划&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;一个月内报名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;半个月报名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(3,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;已报名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),)
    status &lt;/span&gt;= models.SmallIntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;客户状态&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,choices=&lt;span&gt;status_choices)
    date &lt;/span&gt;= models.DateField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;创建的时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now_add=&lt;span&gt;True)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Course(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;课程表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    name &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;课程名称&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=64,unique=&lt;span&gt;True)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;价格必须为整数&lt;/span&gt;
    price = models.PositiveSmallIntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;价格&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
    period &lt;/span&gt;= models.PositiveSmallIntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;课程周期（月）&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=5&lt;span&gt;)
    outline &lt;/span&gt;= models.TextField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;大纲&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ClassList(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;班级列表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    branch &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Branch&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;校区&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;一个班级只能有一个课程，一个课程可以有多个班级&lt;/span&gt;
    course = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Course&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;课程&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    class_type_choices &lt;/span&gt;= ((0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;脱产&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;周末&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;网络班&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
    class_type &lt;/span&gt;= models.SmallIntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;班级类型&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,choices=class_type_choices,default=&lt;span&gt;0)
    semester &lt;/span&gt;= models.SmallIntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;学期&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
    teachers &lt;/span&gt;= models.ManyToManyField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UserProfile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;讲师&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    start_date &lt;/span&gt;= models.DateField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;开班日期&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;毕业日期因为不固定，所以可以为空&lt;/span&gt;
    graduate_date = models.DateField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;毕业日期&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,blank=True,null=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;班级名是课程名+第几期拼接起来的&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s(%s)期&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(self.course.name,self.semester)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;联合唯一，班级不能重复&lt;/span&gt;
        unique_together = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;branch&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class_type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;course&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;semester&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CourseRecord(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;上课记录&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    class_grade &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ClassList&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上课班级&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    day_num &lt;/span&gt;= models.PositiveSmallIntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;课程节次&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
    teacher &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UserProfile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;讲师&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    title &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;本节主题&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=64&lt;span&gt;)
    content &lt;/span&gt;= models.TextField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;本节内容&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
    has_homework &lt;/span&gt;= models.BooleanField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;本节有作业&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;True)
    homework &lt;/span&gt;= models.TextField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;作业需求&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,blank=True,null=&lt;span&gt;True)
    date &lt;/span&gt;= models.DateField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;创建的时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now_add=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;上课班级+课程节次&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s第(%s)节&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(self.class_grade,self.day_num)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        unique_together &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class_grade&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;day_num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; StudyRecord(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;学习记录表&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;一节课对应多个学生&lt;/span&gt;
    course_record = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;CourseRecord&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;课程&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;一个学生有多个上课记录&lt;/span&gt;
    student = models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Student&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;学生&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    score_choices &lt;/span&gt;= ((100,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                     (&lt;/span&gt;90,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                     (&lt;/span&gt;85,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                     (&lt;/span&gt;80,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                     (&lt;/span&gt;75,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                     (&lt;/span&gt;70,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                     (&lt;/span&gt;60,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                     (&lt;/span&gt;40,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C-&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                     (&lt;/span&gt;-50,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                     (0,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;N/A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;not avaliable&lt;/span&gt;
                     (-100,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;COPY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;抄作业&lt;/span&gt;
&lt;span&gt;                     )
    score &lt;/span&gt;= models.SmallIntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;得分&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,choices=score_choices,default=&lt;span&gt; 0)
    show_choices &lt;/span&gt;= ((0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;缺勤&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                    (&lt;/span&gt;1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;已签到&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                    (&lt;/span&gt;2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;迟到&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                    (&lt;/span&gt;3,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;早退&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
                    )
    show_status &lt;/span&gt;= models.SmallIntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;出勤&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,choices=show_choices,default=1&lt;span&gt;)
    note &lt;/span&gt;= models.TextField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;成绩备注&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,blank=True,null=&lt;span&gt;True)
    date &lt;/span&gt;= models.DateField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;创建的时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, auto_now_add=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s %s %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(self.course_record,self.student,self.score)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Branch(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;校区分支&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    name &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;校区名&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=64,unique=&lt;span&gt;True)
    addr &lt;/span&gt;= models.CharField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;地址&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,max_length=128,blank=True,null=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Menus(models.Model):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;动态菜单&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    name &lt;/span&gt;= models.CharField(max_length=64&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;绝对url和动态url&lt;/span&gt;
    url_type_choices = ((0,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;absolute&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),(1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dynamic&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
    url_type &lt;/span&gt;= models.SmallIntegerField(choices=url_type_choices,default=&lt;span&gt;0)
    url_name &lt;/span&gt;= models.CharField(max_length=128&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.name

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        unique_together &lt;/span&gt;= (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;url_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;</description>
<pubDate>Thu, 26 Apr 2018 18:43:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/8955249.html</dc:identifier>
</item>
<item>
<title>VueJs(3)---V-指令 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/8955423.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/8955423.html</guid>
<description>
&lt;h2 id=&quot;autoid-0-3-0&quot;&gt;&lt;span&gt;一、语法&lt;/span&gt;&lt;/h2&gt;
&lt;h4 id=&quot;v-v-&quot;&gt;v- 指令是带有v-的特殊属性&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;v-if 条件渲染&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;v-show&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;v-else (必须在v-if/v-else-if/v-show指令后)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;v-else-if (v-if/v-else-if后)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;v-for (遍历)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;v-html (绑定HTML属性中的值)   &lt;span&gt;(本篇先讲这6个)&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;v-bind (响应更新HTML特性，绑定自定义属性，如绑定某个class元素或style)&lt;/li&gt;
&lt;li&gt;v-on (监听指定元素的dom事件)&lt;/li&gt;
&lt;li&gt;v-model (内置的双向数据绑定，用在表单控件，绑定的value通常是静态字符串)&lt;/li&gt;
&lt;li&gt;v-cloak 关于vuejs页面闪烁{{message}}&lt;/li&gt;
&lt;li&gt;v-once 只渲染元素和组件一次，随后的重新渲染,元素/组件及其所有的子节点将被视为静态内容并跳过&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;span&gt;v-text和v-html&lt;/span&gt;&lt;/h2&gt;
&lt;h4&gt;&lt;span&gt;  &lt;span&gt;v-test&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;v-text&lt;/span&gt;&lt;span&gt;=&quot;msg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 和下面的一样 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{msg}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;v-html :如果你的数据是“&amp;lt;h1&amp;gt;标题文字&amp;lt;h1&amp;gt;&quot;那么它会解析成下面的，v-test永远是按文本输出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201804/1090617-20180426220932285-1096583215.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;v-show、v-if、v-else、v-else-if&lt;/span&gt;&lt;/h2&gt;
&lt;h4&gt;    &lt;span&gt;&lt;span&gt;v-show&lt;/span&gt; &lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;   根据表达式之真假值，切换元素的 &lt;strong&gt;&lt;span&gt;&lt;code&gt;display&lt;/code&gt; CSS&lt;/span&gt;&lt;/strong&gt; 属性。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1 &lt;/span&gt;&lt;span&gt;v-show&lt;/span&gt;&lt;span&gt;=&quot;ok&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hello!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    不同的是带有&lt;span&gt; &lt;code&gt;v-show&lt;/code&gt;&lt;/span&gt; 的元素始终会被渲染并保留在 DOM 中。&lt;span&gt;&lt;code&gt;v-show&lt;/code&gt;&lt;/span&gt; 只是简单地切换元素的 &lt;strong&gt;CSS&lt;/strong&gt; 属性&lt;span&gt; &lt;code&gt;display&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;   注意&lt;/span&gt;&lt;/strong&gt;，&lt;code&gt;v-show&lt;/code&gt; 不支持&lt;span&gt; &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;&lt;/span&gt; 元素，也不支持&lt;span&gt; &lt;code&gt;v-else&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;    &lt;span&gt; v-if  &lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;      根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是 &lt;span&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; &lt;/span&gt;，将提出它的内容作为条件块。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1 &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;ok&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Yes&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;也可以和v-else一起用&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1 &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;ok&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Yes&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1 &lt;/span&gt;&lt;span&gt;v-else&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;No&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p id=&quot;在-lt-template-gt-元素上使用-v-if-条件渲染分组&quot;&gt;     在 &lt;span&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;&lt;/span&gt; 元素上使用&lt;span&gt; &lt;code&gt;v-if&lt;/code&gt;&lt;/span&gt; 条件渲染分组&lt;/p&gt;
&lt;p&gt;    因为&lt;span&gt; &lt;code&gt;v-if&lt;/code&gt;&lt;/span&gt; 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个&lt;span&gt; &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; &lt;/span&gt;元素当做不可见的包裹元素，并在上面使用 &lt;span&gt;&lt;code&gt;v-if&lt;/code&gt;&lt;/span&gt;。最终的渲染结果将不包含 &lt;span&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;&lt;/span&gt; 元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;ok&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Title&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Paragraph 1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Paragraph 2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;  &lt;span&gt; &lt;span&gt;v-else&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;你可以使用&lt;span&gt; &lt;code&gt;v-else&lt;/code&gt;&lt;/span&gt; 指令来表示 &lt;span&gt;&lt;code&gt;v-if&lt;/code&gt;&lt;/span&gt; 的“else 块&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;Math.random() &amp;gt; 0.5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  Now you see me
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-else&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  Now you don't
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;注意&lt;/span&gt;&lt;/strong&gt;：&lt;span&gt;&lt;code&gt;v-else&lt;/code&gt;&lt;/span&gt; 元素必须紧跟在带 &lt;span&gt;&lt;code&gt;v-if&lt;/code&gt;&lt;/span&gt; 或者&lt;span&gt; &lt;code&gt;v-else-if&lt;/code&gt;&lt;/span&gt; 的元素的后面，否则它将不会被识别。&lt;/p&gt;
&lt;h4 id=&quot;v-else-if&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;code&gt;v-else-if&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;v-else-if&lt;/code&gt;&lt;/span&gt;，顾名思义，充当 &lt;span&gt;&lt;code&gt;v-if&lt;/code&gt;&lt;/span&gt; 的“&lt;span&gt;else-if&lt;/span&gt; 块”，可以连续使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;type === 'A'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  A
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-else-if&lt;/span&gt;&lt;span&gt;=&quot;type === 'B'&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  B
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-else&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  Not A/B/C
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;v-if-vs-v-show&quot;&gt;&lt;span&gt;&lt;code&gt;v-if&lt;/code&gt; vs &lt;code&gt;v-show&lt;/code&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;   &lt;span&gt;v-if&lt;/span&gt;&lt;/code&gt; 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;  &lt;span&gt; v-if&lt;/span&gt;&lt;/code&gt;&lt;span&gt; &lt;/span&gt;也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。&lt;/p&gt;
&lt;p&gt;    相比之下，&lt;span&gt;&lt;code&gt;v-show&lt;/code&gt;&lt;/span&gt; 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。&lt;/p&gt;
&lt;p&gt;   一般来说，&lt;span&gt;&lt;code&gt;v-if&lt;/code&gt;&lt;/span&gt; 有更高的&lt;span&gt;切换开销&lt;/span&gt;，而&lt;span&gt; &lt;code&gt;v-show&lt;/code&gt;&lt;/span&gt; 有更高的&lt;span&gt;初始渲染开销&lt;/span&gt;。因此，如果需要非常频繁地切换，则使用 &lt;code&gt;v-show&lt;/code&gt; 较好；如果在运行时条件很少改变，则使用 &lt;code&gt;v-if&lt;/code&gt; 较好。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;  &lt;span&gt; v-for需要用特定语法：&lt;span&gt;alias in expression &lt;span&gt;为当前遍历的元素提供别名&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;常见的四种用法&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;item in items&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  {{ item.text }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;(item, index) in items&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;(val, key) in object&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;(val, key, index) in object&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;   v-for&lt;/code&gt;&lt;/span&gt; 默认行为试着不改变整体，而是替换元素。迫使其重新排序的元素，你需要提供一个 &lt;code&gt;key&lt;/code&gt; 的特殊属性&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;item in items&quot;&lt;/span&gt;&lt;span&gt; :key&lt;/span&gt;&lt;span&gt;=&quot;item.id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  {{ item.text }}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;   案例官网：&lt;a href=&quot;https://cn.vuejs.org/v2/guide/list.html&quot; target=&quot;_blank&quot;&gt;v-for列表渲染&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;key&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;       当 Vue.js 用 &lt;code&gt;v-for&lt;/code&gt; 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。这个类似 Vue 1.x 的 &lt;span&gt;&lt;code&gt;track-by=&quot;$index&quot;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 &lt;code&gt;key&lt;/code&gt; 属性。理想的 &lt;code&gt;key&lt;/code&gt; 值是每项都有的且唯一的 id。这个特殊的属性相当于 Vue 1.x 的 &lt;code&gt;track-by&lt;/code&gt; ，但它的工作方式类似于一个属性，所以你需要用 &lt;code&gt;v-bind&lt;/code&gt; 来绑定动态值 (在这里使用简写)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;item in items&quot;&lt;/span&gt;&lt;span&gt; :key&lt;/span&gt;&lt;span&gt;=&quot;item.id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 内容 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt; &lt;span&gt;注意事项&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;由于 JavaScript 的限制，Vue 不能检测以下变动的数组：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;当你利用索引直接设置一个项时，例如：&lt;span&gt;&lt;code&gt;vm.items[indexOfItem] = newValue&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;当你修改数组的长度时，例如：&lt;span&gt;&lt;code&gt;vm.items.length = newLength&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;举个例子：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var vm = new Vue({
  data: {
    items: ['a', 'b', 'c']
  }
})
vm.items[1] = 'x'  &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;不是响应性的&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
vm.items.length = 2 &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 不是响应性的&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;       为了解决第一类问题，以下两种方式都可以实现和 &lt;span&gt;&lt;code&gt;vm.items[indexOfItem] = newValue&lt;/code&gt;&lt;/span&gt; 相同的效果，同时也将触发状态更新：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Vue.set&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
Vue.set(vm.items, indexOfItem, newValue)
&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Array.prototype.splice&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
vm.items.splice(indexOfItem, 1, newValue)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;span&gt;     你也可以使用&lt;span&gt; &lt;span&gt;&lt;code&gt;vm.$set&lt;/code&gt;&lt;/span&gt;&lt;/span&gt; 实例方法，该方法是全局方法&lt;span&gt; &lt;code&gt;Vue.set&lt;/code&gt;&lt;/span&gt; 的一个别名&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
vm.$set(vm.items, indexOfItem, newValue)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;      为了解决第二类问题，你可以使用 &lt;span&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/span&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
vm.items.splice(newLength)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;对象更改检测注意事项&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;      还是由于 JavaScript 的限制，Vue 不能检测&lt;strong&gt;对象属性的添加或删除&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var vm = new Vue({
  data: {
    a: 1
  }
})
&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; `vm.a` 现在是响应式的&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
vm.b = 2
&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;vm.b` 不是响应式的&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;     对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用 &lt;span&gt;&lt;code&gt;Vue.set(object, key, value)&lt;/code&gt;&lt;/span&gt; 方法向嵌套对象添加响应式属性。例如，对于：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var vm = new Vue({
  data: {
    userProfile: {
      name: 'Anika'
    }}})
&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;你可以添加一个新的 age 属性到嵌套的 userProfile 对象&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
Vue.set(vm.userProfile, 'age', 27)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;     你还可以使用&lt;span&gt; &lt;code&gt;vm.$set&lt;/code&gt;&lt;/span&gt; 实例方法，它只是全局&lt;span&gt; &lt;code&gt;Vue.set&lt;/code&gt;&lt;/span&gt; 的别名    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
vm.$set(vm.userProfile, 'age', 27)
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;显示过滤-排序结果&quot;&gt;&lt;span&gt;显示过滤/排序结果&lt;/span&gt;&lt;/h4&gt;
&lt;h4 id=&quot;v-for-with-v-if&quot;&gt;&lt;span&gt;&lt;code&gt;v-for&lt;/code&gt; with &lt;code&gt;v-if&lt;/code&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;      当它们处于同一节点，&lt;span&gt;&lt;code&gt;v-for&lt;/code&gt; 的优先级比 &lt;code&gt;v-if&lt;/code&gt; 更高&lt;/span&gt;，这意味着 &lt;code&gt;v-if&lt;/code&gt; 将分别重复运行于每个 &lt;code&gt;v-for&lt;/code&gt; 循环中。当你想为仅有的_一些_项渲染节点时，这种优先级的机制会十分有用，如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;todo in todos&quot;&lt;/span&gt;&lt;span&gt; v-if&lt;/span&gt;&lt;span&gt;=&quot;!todo.isComplete&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  {{ todo }}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;上面的代码只传递了未完成的 todos。&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;    而如果你的目的是有条件地跳过循环的执行，那么可以将 &lt;code&gt;v-if&lt;/code&gt; 置于&lt;span&gt;外层元素 (或 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;)&lt;/span&gt;上。如&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;v-if&lt;/span&gt;&lt;span&gt;=&quot;todos.length&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;todo in todos&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {{ todo }}
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;v-else&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;No todos left!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;一个组件的-v-for&quot;&gt;&lt;span&gt;一个组件的 &lt;code&gt;v-for&lt;/code&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;      在自定义组件里，你可以像任何普通元素一样用&lt;strong&gt; &lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;code&gt;v-for&lt;/code&gt;&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;item in items&quot;&lt;/span&gt;&lt;span&gt; :key&lt;/span&gt;&lt;span&gt;=&quot;item.id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;   2.2.0+ 的版本里，&lt;span&gt;&lt;strong&gt;当在组件中使用 &lt;code&gt;v-for&lt;/code&gt; 时，&lt;code&gt;key&lt;/code&gt; 现在是必须的&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;   然而，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要用 &lt;strong&gt;&lt;span&gt;&lt;code&gt;props&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;   &lt;span&gt;完整例子&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;todo-list-example&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input
    &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;newTodoText&quot;&lt;/span&gt;&lt;span&gt;
    v-on:keyup.enter&lt;/span&gt;&lt;span&gt;=&quot;addNewTodo&quot;&lt;/span&gt;&lt;span&gt;
    placeholder&lt;/span&gt;&lt;span&gt;=&quot;Add a todo&quot;&lt;/span&gt;
  &lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li
      &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt;=&quot;todo-item&quot;&lt;/span&gt;&lt;span&gt;
      v-for&lt;/span&gt;&lt;span&gt;=&quot;(todo, index) in todos&quot;&lt;/span&gt;&lt;span&gt;
      v-bind:key&lt;/span&gt;&lt;span&gt;=&quot;todo.id&quot;&lt;/span&gt;&lt;span&gt;
      v-bind:title&lt;/span&gt;&lt;span&gt;=&quot;todo.title&quot;&lt;/span&gt;&lt;span&gt;
      v-on:remove&lt;/span&gt;&lt;span&gt;=&quot;todos.splice(index, 1)&quot; &lt;span&gt; &amp;lt;!--删除一个元素--&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;   组件&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.component('todo-item', {
  template: '\
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;\
      {{ title }}\                    &lt;span&gt; &amp;lt;!--z这里有两个地方不太明白1：&quot;/&quot;是什么意思。 2：这里的remove是什么意思，是调用上面的remove吗？求解。--&amp;gt; &lt;/span&gt;                              
      &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;v-on:click&lt;/span&gt;&lt;span&gt;=&quot;$emit(\'remove\')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;X&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;\
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;\
  ',
  props: ['title']
})

new Vue({
  el: '#todo-list-example',
  data: {
    newTodoText: '',
    todos: [
      {
        id: 1,
        title: 'Do the dishes',
      },
      {
        id: 2,
        title: 'Take out the trash',
      },
      {
        id: 3,
        title: 'Mow the lawn'
      }
    ],
    nextTodoId: 4
  },
  methods: {
    addNewTodo: function () {
      this.todos.push({      &lt;span&gt;&amp;lt;!--push代表末尾添加--&amp;gt;&lt;/span&gt;
        id: this.nextTodoId++,
        title: this.newTodoText
      })
      this.newTodoText = ''
    }
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    注意这里的&lt;span&gt;&lt;strong&gt; &lt;code&gt;is=&quot;todo-item&quot;&lt;/code&gt;&lt;/strong&gt;&lt;/span&gt; 属性。这种做法在使用 DOM 模板时是十分必要的，因为在 &lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;&lt;/span&gt; &lt;/span&gt;&lt;/strong&gt;元素内只有&lt;span&gt; &lt;strong&gt;&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;&lt;/strong&gt; &lt;/span&gt;元素会被看作有效内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201804/1090617-20180426235815906-191876875.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   动态效果看官网：&lt;a href=&quot;https://cn.vuejs.org/v2/guide/list.html&quot; target=&quot;_blank&quot;&gt;一个组件的v-for&lt;/a&gt;&lt;/p&gt;


&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;想的太多，做的太少，中间的落差就是烦恼，要么去做，要么别想 &lt;strong&gt;中尉【13】&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 26 Apr 2018 16:11:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/8955423.html</dc:identifier>
</item>
<item>
<title>AsyncLocal 与 async await - 鱼东东</title>
<link>http://www.cnblogs.com/yudongdong/p/8955811.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yudongdong/p/8955811.html</guid>
<description>&lt;p&gt;大家来看一张图 先猜猜看为什么会这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/472365/201804/472365-20180426231147445-84671808.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;关于async await的原理 建议查看&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/brook_shi/article/details/50803957 &lt;/p&gt;
&lt;p&gt;这篇文章分析的很透彻&lt;/p&gt;

&lt;p&gt;和AsyncLocal有关的 最最关键的部分是&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/472365/201804/472365-20180426232141279-1500374864.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 对，就是上下文。在 执行异步的方法时。会每次构建异步上下文，&lt;span&gt;&lt;strong&gt;大家记住 AsyncLocal是跟着上下文的&lt;/strong&gt;&lt;/span&gt;，&lt;/p&gt;
&lt;p&gt;所以&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/472365/201804/472365-20180426233957178-1682736954.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果理解有误还望大佬指正教育&lt;/p&gt;
&lt;p&gt; 谢谢&lt;/p&gt;
</description>
<pubDate>Thu, 26 Apr 2018 15:42:00 +0000</pubDate>
<dc:creator>鱼东东</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yudongdong/p/8955811.html</dc:identifier>
</item>
<item>
<title>利用生产者消费者模型和MQ模型写一个自己的日志系统-并发设计里一定会用到的手段 - Silentdoer</title>
<link>http://www.cnblogs.com/silentdoer/p/8955713.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/silentdoer/p/8955713.html</guid>
<description>&lt;h2&gt;一：前言&lt;/h2&gt;
&lt;p&gt;　　写这个程序主要是用来理解生产者消费者模型，以及通过这个Demo来理解Redis的单线程取原子任务是怎么实现的和巩固一下并发相关的知识；这个虽然是个Demo，但是只要稍加改下Appender部分也是可以用于项目中的，假设项目里确实不需要log4j/logback之类的日志组件的时候；&lt;/p&gt;
&lt;h2&gt;二：实现方式&lt;/h2&gt;
&lt;p&gt;1.利用LinkedList作为MQ（还可以用jdk自带的LinkedBlockingQueue，不过这个Demo主要是为了更好的理解原理因此写的比较底层）；&lt;/p&gt;
&lt;p&gt;2.利用一个Daemon线程作为消费者从MQ里实时获取日志对象/日志记录，并将它提交给线程池，由线程池再遍历所有的appender并调用它们的通知方法，这个地方还可以根据场景进行效率优化，如将循环遍历appender改为将每个appender都再此提交到线程池实现异步通知观察者；&lt;/p&gt;
&lt;p&gt;3.为生产者提供log方法作为生产日志记录的接口，无论是生产日志对象还是消费日志对象在操作队列时都需要对队列加锁，因为个人用的是非并发包里的；&lt;/p&gt;
&lt;p&gt;4.消费者在获取之前会先判断MQ里是否有数据，有则获取并提交给线程池处理，否则wait；&lt;/p&gt;
&lt;p&gt;5.生产者生产了日志对象后通过notify通知消费者去取，因为只有一个消费者，而生产者是不会wait的因此只需要notify而不用notifyAll&lt;/p&gt;
&lt;p&gt;6.。。剩下的就看代码来说明吧；&lt;/p&gt;
&lt;h2&gt;三：代码&lt;/h2&gt;
&lt;h3&gt;1.MyLogger类的实现&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; me.silentdoer.mqlogger.log;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.PrintWriter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Writer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.SimpleDateFormat;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.concurrent.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.atomic.AtomicLong;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.locks.Lock;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.locks.ReentrantLock;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; me.silentdoer.mqlogger.log.MyLogger.LogLevel.DEBUG;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; me.silentdoer.mqlogger.log.MyLogger.LogLevel.ERROR;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; silentdoer
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 1.0
 * @description 这里只是做一个简单的logger实现，不提供Appender之类的功能，主要是用来学习生产者和消费者及MQ的实现原理
 * @date 4/26/18 6:07 PM
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyLogger{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; LogLevel loggerLevel =&lt;span&gt; DEBUG;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; String charset = &quot;UTF-8&quot;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 暂且没用，但是当需要序列化时是可能用到的；
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 也可以直接用LinkedQueue，然后手动通过ReentrantLock来实现并发时的数据安全（synchronized也可）
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;private BlockingQueue&amp;lt;LogRecord&amp;gt; queue = new LinkedBlockingQueue&amp;lt;LogRecord&amp;gt;();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可以理解为支持并发的LinkedList
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 想了一下既然是要学习原理干脆就实现的更底层一点&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Queue&amp;lt;LogRecord&amp;gt; records = &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;LogRecord&amp;gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 用于记录生产了多少条日志，可供外部获取&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AtomicLong produceCount = &lt;span&gt;new&lt;/span&gt; AtomicLong(0&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 用于记录消费了多少条日志&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; AtomicLong consumeCount = &lt;span&gt;new&lt;/span&gt; AtomicLong(0&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 日志记录的Consumer&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Thread consumer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogDaemon();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyLogger(){
        consumer.setDaemon(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        consumer.start();
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 对外提供的接口，即log方法就是生产者用于生产日志数据的接口
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; msg
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; level
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; log(String msg, LogLevel level){
        Date curr &lt;/span&gt;=&lt;span&gt; generateCurrDate();
        log(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LogRecord(level, msg, curr));
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 对外提供的接口，即log方法就是生产者用于生产日志数据的接口
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; msg
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; log(String msg){
        Date curr &lt;/span&gt;=&lt;span&gt; generateCurrDate();
        log(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; LogRecord(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.loggerLevel, msg, curr));
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 给生产者（即调用log的方法都可以理解为生产者在生产日志对象）提供用于生产日志记录的接口
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; record
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; log(LogRecord record){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ReentrantLock可以替代synchronized，不过当前场景下synchronized已经足够&lt;/span&gt;
        &lt;span&gt;synchronized&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.records){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 如果用的是LinkedBlockingQueue是不需要这个的&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.records.offer(record);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.produceCount.incrementAndGet();
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.records.notify();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 只有一个线程会records.wait()，因此notify()足够&lt;/span&gt;
&lt;span&gt;        }
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 类似Redis的那个单线程，用于读取命令对象，而这里则是用于读取LogRecord并通过appender将数据写到相应位置&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LogDaemon &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Thread{
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; valid = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 充当appenders的角色&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; List&amp;lt;Writer&amp;gt; appenders = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ExecutorService threadPool = &lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor(1, 3&lt;span&gt;
                , &lt;/span&gt;180000, TimeUnit.MILLISECONDS, &lt;span&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Runnable&amp;gt;(1024&lt;span&gt;));

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.valid){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 根据最少知道原则，在这里不要去想整体里是否存在打断此线程的地方，你就认为此线程是可能被外界打断的即可，因此需要做一定处理&lt;/span&gt;
                &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt; (MyLogger.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.records) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (MyLogger.&lt;span&gt;this&lt;/span&gt;.records.size() &amp;lt;= 0&lt;span&gt;) {
                            MyLogger.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.records.wait();
                        }
                        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; LogRecord firstRecord = MyLogger.&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.records.poll();
                        MyLogger.&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.consumeCount.incrementAndGet();
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;threadPool.submit()&lt;/span&gt;
                        threadPool.execute(() -&amp;gt; MyLogger.&lt;span&gt;this&lt;/span&gt;.notifyAppender(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.appenders, firstRecord));
                    }
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException ex){
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.valid = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                    ex.printStackTrace();
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable t){
                    t.printStackTrace();
                }
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; notifyAppender(&lt;span&gt;final&lt;/span&gt; List&amp;lt;Writer&amp;gt; appenders, &lt;span&gt;final&lt;/span&gt;&lt;span&gt; LogRecord record) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(appenders == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            PrintWriter writer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; PrintWriter(record.level == ERROR ?&lt;span&gt; System.err : System.out);
            writer.append(record.toString());
            writer.flush();
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 这种是同步的方式，如果是异步的方式可以将每个appender的执行都由一个Runnable对象包装，然后submit给线程池（或者中间加个中间件）&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Writer writer : appenders){
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    writer.append(record.toString());
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException ex){
                    ex.printStackTrace();
                }
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 用于产生当前时间的模块，防止因为并发而导致LogRecord的timestamp根实际情况不符
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Lock currDateLock = &lt;span&gt;new&lt;/span&gt; ReentrantLock();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接用synchronized亦可&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date generateCurrDate(){
        currDateLock.lock();
        Date result &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
        currDateLock.unlock();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生产者生产的数据对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LogRecord{
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; LogLevel level;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String msg;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Date timestamp;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; SimpleDateFormat DEFAULT_DATE_FORMAT = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; SimpleDateFormat dateFormat =&lt;span&gt; DEFAULT_DATE_FORMAT;

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;public LogRecord(){
            this(INFO, &quot;&quot;);
        }&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LogRecord(LogLevel level, String msg){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(level, msg, &lt;span&gt;new&lt;/span&gt; Date());  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 还是最好由外界设置timestamp，否则高并发下会比较不准&lt;/span&gt;
&lt;span&gt;        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 最好用这个，不然高并发下timestamp容易出现顺序不准确的情况。&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LogRecord(LogLevel level, String msg, Date timestamp){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.level =&lt;span&gt; level;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.msg =&lt;span&gt; msg;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.timestamp =&lt;span&gt; timestamp;
        }

        @Override
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; String.format(&quot;[Level:%s, Datetime:%s] : %s\n&quot;&lt;span&gt;, level, dateFormat.format(timestamp), msg);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LogLevel getLevel() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; level;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getMsg() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; msg;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setDateFormat(SimpleDateFormat dateFormat) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dateFormat =&lt;span&gt; dateFormat;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTimestamp(Date timestamp) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.timestamp =&lt;span&gt; timestamp;
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt; LogLevel{  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO 内部enum默认就是static&lt;/span&gt;
&lt;span&gt;        INFO,
        DEBUG,
        ERROR
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LogLevel getLoggerLevel() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; loggerLevel;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLoggerLevel(LogLevel loggerLevel) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.loggerLevel =&lt;span&gt; loggerLevel;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getCharset() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; charset;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCharset(String charset) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.charset =&lt;span&gt; charset;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AtomicLong getProduceCount() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; produceCount;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AtomicLong getConsumeCount() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; consumeCount;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.测试用例1&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; me.silentdoer.mqlogger;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; me.silentdoer.mqlogger.log.MyLogger;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Scanner;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; silentdoer
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 1.0
 * @description the description
 * @date 4/26/18 10:13 PM
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Entrance {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MyLogger logger = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyLogger();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;logger.setLoggerLevel(MyLogger.LogLevel.ERROR);&lt;/span&gt;
        Scanner scanner = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Scanner(System.in);
        String line;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(!(line = scanner.nextLine()).equals(&quot;exit&quot;&lt;span&gt;)){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(line.equals(&quot;&quot;&lt;span&gt;))
                &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
            logger.log(line);
            System.out.println(String.format(&lt;/span&gt;&quot;共生产了%s条日志。&quot;&lt;span&gt;, logger.getConsumeCount()));
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                Thread.sleep(&lt;/span&gt;500&lt;span&gt;);
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException ex){ }
            System.out.println(String.format(&lt;/span&gt;&quot;共消费了%s条日志。&quot;&lt;span&gt;, logger.getProduceCount()));
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3.测试用例2&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; me.silentdoer.mqlogger;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; me.silentdoer.mqlogger.log.MyLogger;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.ExecutorService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.Executors;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; silentdoer
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 1.0
 * @description the description
 * @date 4/26/18 10:32 PM
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Entrance2 {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MyLogger logger = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyLogger();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        logger.setLoggerLevel(MyLogger.LogLevel.ERROR);
        ExecutorService threadPool &lt;/span&gt;=&lt;span&gt; Executors.newCachedThreadPool();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;10;i++&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; index = i + 1&lt;span&gt;;
            threadPool.execute(() &lt;/span&gt;-&amp;gt;&lt;span&gt; {
                logger.log(String.format(&lt;/span&gt;&quot;生产的第%s条记录。&quot;&lt;span&gt;, index));
                System.out.println(String.format(&lt;/span&gt;&quot;共生产了%s条记录。&quot;&lt;span&gt;, index));
            });
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                Thread.sleep(&lt;/span&gt;100&lt;span&gt;);
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException ex){ }
        }
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Thread.sleep(&lt;/span&gt;3000&lt;span&gt;);
            System.out.println(String.format(&lt;/span&gt;&quot;共%s条记录被消费。&quot;&lt;span&gt;, logger.getConsumeCount()));
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException ex){ }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;threadPool.shutdown();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;threadPool.shutdownNow();&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;四：补充&lt;/h2&gt;
&lt;p&gt;　　如果想实现像BlockingQueue一样能够控制MQ的元素个数范围，则可以通过ReentrantLock的Confition来实现，即通过lock创建两个Condition对象，一个用来描述是否MQ中元素达到上限的情况，一个用于描述MQ中元素降到下限的情况；&lt;/p&gt;
&lt;p&gt;无论是达到上限或降到下限都会通过相应的condition对象来阻塞对应的生产者或消费者的生产/消费过程从而实现MQ元素个数的可控性；&lt;/p&gt;
</description>
<pubDate>Thu, 26 Apr 2018 15:28:00 +0000</pubDate>
<dc:creator>Silentdoer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/silentdoer/p/8955713.html</dc:identifier>
</item>
<item>
<title>[SDOI2010] 古代猪文 - YoungNeal</title>
<link>http://www.cnblogs.com/YoungNeal/p/8955639.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YoungNeal/p/8955639.html</guid>
<description>&lt;h2&gt;&lt;span&gt;Description&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;猪王国的文明源远流长，博大精深。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;iPig在大肥猪学校图书馆中查阅资料，得知远古时期猪文文字总个数为N。当然，一种语言如果字数很多，字典也相应会很大。当时的猪王国国王考虑到如果修一本字典，规模有可能远远超过康熙字典，花费的猪力、物力将难以估量。故考虑再三没有进行这一项劳猪伤财之举。当然，猪王国的文字后来随着历史变迁逐渐进行了简化，去掉了一些不常用的字。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;iPig打算研究古时某个朝代的猪文文字。根据相关文献记载，那个朝代流传的猪文文字恰好为远古时期的k分之一，其中k是N的一个正约数（可以是1和N）。不过具体是哪k分之一，以及k是多少，由于历史过于久远，已经无从考证了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;iPig觉得只要符合文献，每一种能整除N的k都是有可能的。他打算考虑到所有可能的k。显然当k等于某个定值时，该朝的猪文文字个数为N / k。然而从N个文字中保留下N / k个的情况也是相当多的。iPig预计，如果所有可能的k的所有情况数加起来为P的话，那么他研究古代文字的代价将会是G的P次方。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在他想知道猪王国研究古代文字的代价是多少。由于iPig觉得这个数字可能是天文数字，所以你只需要告诉他答案除以999911659的余数就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Input&lt;/span&gt;&lt;span&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;有且仅有一行：两个数N、G，用一个空格分开。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Output&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;有且仅有一行：一个数，表示答案除以999911659的余数。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Range&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;10%的数据中，$1 &amp;lt;= N &amp;lt;= 50$；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;20%的数据中，$1 &amp;lt;= N &amp;lt;= 1000$；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;40%的数据中，$1 &amp;lt;= N &amp;lt;= 100000$；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;100%的数据中，$1 &amp;lt;= G &amp;lt;= 1000000000，1 &amp;lt;= N &amp;lt;= 1000000000$。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Solution&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;先一句话题意：求 $G^{\Sigma _{d \mid n} C_n^d} \; \% 999911659$ 的值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;若 G =999911659，则上式结果为 0。否则，因为999911659是质数，所以 G，n 互质。由欧拉定理推论得：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;$$G^{\Sigma _{d \mid n} C_n^d} \equiv G^{\Sigma _{d \mid n} C_n^d \; \% \; 999911658} \quad (mod\;999911659)$$&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;尝试分解质因数，可以发现 $999911658 = 2 \times 3 \times 4679 \times 35617$。因为所以质因子的指数都为 1，所以我们枚举 $n$ 的约数 $d$，然后运用 $Lucas$ 求出组合数 $C_n^d$ ，分别计算出 $\Sigma _{d \mid n} C_n^d$ 对 2,3,4679,35617 四个质数取模的结果。然后中国剩余定理合并即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;快速幂非递归版本 1A，递归版本无限 wa。玄学错误=.=&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Code&lt;/span&gt;&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;cstdio&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; mod 999911659
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; int long long
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n,g;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; m[&lt;span&gt;6&lt;/span&gt;],r[&lt;span&gt;6&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; factorcnt;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; inv[&lt;span&gt;100005&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; fac[&lt;span&gt;100005&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; factor[&lt;span&gt;10005&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; init_factor(){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i*i&amp;lt;=n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(n%i) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         factor[++factorcnt]=&lt;span&gt;i;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(i*i!=n) factor[++factorcnt]=n/&lt;span&gt;i;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; lucas(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; p){
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(x&amp;lt;y) &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(x&amp;gt;=p) &lt;span&gt;return&lt;/span&gt; (lucas(x%p,y%p,p)*lucas(x/p,y/p,p))%&lt;span&gt;p;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (fac[x]*inv[fac[y]]*inv[fac[x-y]])%&lt;span&gt;p;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; calc(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x){
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     fac[&lt;span&gt;0&lt;/span&gt;]=fac[&lt;span&gt;1&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     inv[&lt;span&gt;0&lt;/span&gt;]=inv[&lt;span&gt;1&lt;/span&gt;]=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=m[x];i++) fac[i]=(fac[i-&lt;span&gt;1&lt;/span&gt;]*i)%&lt;span&gt;m[x];
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;2&lt;/span&gt;;i&amp;lt;=m[x];i++) inv[i]=((m[x]-m[x]/i)*inv[m[x]%i])%&lt;span&gt;m[x];
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=factorcnt;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         (r[x]+=lucas(n,factor[i],m[x]))%=&lt;span&gt;m[x];
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; exgcd(&lt;span&gt;int&lt;/span&gt; a,&lt;span&gt;int&lt;/span&gt; b,&lt;span&gt;int&lt;/span&gt; &amp;amp;x,&lt;span&gt;int&lt;/span&gt; &amp;amp;&lt;span&gt;y){
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;b){
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         x=&lt;span&gt;1&lt;/span&gt;; y=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; a;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; c=exgcd(b,a%&lt;span&gt;b,x,y);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; t=&lt;span&gt;x;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     x=&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     y=t-a/b*&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; c;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; innv(&lt;span&gt;int&lt;/span&gt; a,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; b){
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; x,y;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    exgcd(a,b,x,y);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (x%b+b)%&lt;span&gt;b;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; CRT(){
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; M=&lt;span&gt;1&lt;/span&gt;,ans=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=&lt;span&gt;4&lt;/span&gt;;i++) M*=&lt;span&gt;m[i];
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=&lt;span&gt;4&lt;/span&gt;;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         (ans+=(M/m[i])*innv(M/m[i],m[i])*r[i])%=&lt;span&gt;M;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (ans%M+M)%&lt;span&gt;M;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; ksm(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; y){
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;if(y==0) return 1;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;    if(y==1) return x%mod;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;    int c=ksm(x,y&amp;gt;&amp;gt;1);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;    if(y&amp;amp;1) return (x*c*c)%mod;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    return (c*c)%mod;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; r=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(;y;y&amp;gt;&amp;gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(y&amp;amp;&lt;span&gt;1&lt;/span&gt;) (r*=x)%=&lt;span&gt;mod;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;         (x*=x)%=&lt;span&gt;mod;
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; r;
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; 
&lt;span&gt;75&lt;/span&gt; &lt;span&gt;signed main(){
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%lld%lld&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;&lt;span&gt;g);
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(g==&lt;span&gt;mod){
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;         puts(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;     m[&lt;span&gt;1&lt;/span&gt;]=&lt;span&gt;2&lt;/span&gt;; m[&lt;span&gt;2&lt;/span&gt;]=&lt;span&gt;3&lt;/span&gt;; m[&lt;span&gt;3&lt;/span&gt;]=&lt;span&gt;4679&lt;/span&gt;; m[&lt;span&gt;4&lt;/span&gt;]=&lt;span&gt;35617&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;    init_factor();
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=&lt;span&gt;4&lt;/span&gt;;i++&lt;span&gt;) calc(i);
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%lld\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,ksm(g,CRT())%&lt;span&gt;mod);
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;




</description>
<pubDate>Thu, 26 Apr 2018 15:18:00 +0000</pubDate>
<dc:creator>YoungNeal</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/YoungNeal/p/8955639.html</dc:identifier>
</item>
<item>
<title>python读取文本文件数据 - gangandi</title>
<link>http://www.cnblogs.com/gangandimami/p/8955564.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gangandimami/p/8955564.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;strong&gt;本文要点刚要：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（一）读文本文件格式的数据函数：read_csv,read_table&lt;/p&gt;
&lt;p&gt;    1.读不同分隔符的文本文件，用参数sep&lt;/p&gt;
&lt;p&gt;    2.读无字段名（表头）的文本文件 ，用参数names&lt;/p&gt;
&lt;p&gt;    3.为文本文件制定索引，用index_col&lt;/p&gt;
&lt;p&gt;    4.跳行读取文本文件，用skiprows&lt;/p&gt;
&lt;p&gt;    5.数据太大时需要逐块读取文本数据用chunksize进行分块。&lt;/p&gt;
&lt;p&gt;（二）将数据写成文本文件格式函数：to_csv&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;范例如下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（一）读取文本文件格式的数据集&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.read_csv和read_table的区别:&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;span&gt;&lt;strong&gt;#read_csv默认读取用逗号分隔符的文件，不需要用sep来指定分隔符&lt;/strong&gt;&lt;/span&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;import pandas as pd&lt;/span&gt;&lt;br/&gt;&lt;span&gt;pd.read_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.csv')
&lt;/span&gt;&lt;/em&gt;&lt;/em&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426224121292-979964237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;#read_csv如果读的是用非逗号分隔符的文件，必须要用sep指定分割符，不然读出来的是原文件的样子，数据没被分割开&lt;/strong&gt;
import pandas as pd
pd.read_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.txt')
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426224144868-1760190149.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;#与上面的例子可以对比一下区别&lt;/strong&gt;
import pandas as pd
pd.read_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.txt',sep='|')
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426224410679-520935790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;#read_table读取文件时必须要用sep来指定分隔符，否则读出来的数据是原始文件，没有分割开。&lt;/strong&gt;
import pandas as pd
pd.read_table('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.csv')
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426224501340-507311282.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;#read_table读取数据必须指定分隔符&lt;/strong&gt;
import pandas as pd
pd.read_table('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.txt',sep='|')
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426224605645-1046616757.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.读取文本文件时不用header和names指定表头时，默认第一行为表头&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;#用header=None表示数据集没有表头，会默认用阿拉伯数字填充表头和索引&lt;/strong&gt;
pd.read_table('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.txt',sep='|',header=None)
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426224759907-1866915755.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;#用names可以自定义表头&lt;/strong&gt;
pd.read_table('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.txt',sep='|',&lt;br/&gt;names=['x1','x2','x3','x4','x5'])
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426224858254-1016291189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.默认用阿拉伯数字指定索引；用index_col指定某一列作为索引&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;names=['x1','x2','x3','x4','x0']
pd.read_table('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.txt',sep='|',
                   names=names,index_col='x0')
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426225022347-270755606.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.以下示例是用skiprows将hello对应的行跳过后读取其他行数据，不管首行是否作为表头，都是将表头作为第0行开始数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;可以对比一下三个例子的区别进行理解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;pd.read_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data1.txt')&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426225126273-1981446421.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;names=['x1','x2','x3','x4','x0']
pd.read_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data1.txt',names=names,
            skiprows=[0,3,6])
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426225208651-941727855.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;pd.read_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data1.txt',
            skiprows=[0,3,6])
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426225257812-1841733706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;pd.read_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data1.txt',header=None,
            skiprows=[0,3,6])
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426225330405-1103613451.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.分块读取，data1.txt中总共8行数据，按照每块3行来分，会读3次，第一次3行，第二次3行，第三次1行数据进行读取。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;注意这里在分块的时候跟跳行读取不同的是，表头没作为第一行进行分块读取，可通过一下两个例子对比进行理解。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;chunker = pd.read_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data1.txt',chunksize=3)
for m in chunker:   
    print(len(m)) 
    print m
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426225501813-266640696.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;chunker = pd.read_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data1.txt',header=None,
                      chunksize=3)
for m in chunker:    
    print(len(m)) 
    print m
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426225607037-1448990798.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（二）将数据写入文本格式用to_csv&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;以data.txt为例,注意写出文件时，将索引也写入了&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;data=pd.read_table('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.txt',sep='|')
print data
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426225716866-1303984639.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;#可以用index=False禁止索引的写入。&lt;/strong&gt;
data=pd.read_table('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.txt',sep='|')
data.to_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\outdata.txt',sep='!',index=False)
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426225814894-925833732.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;&lt;strong&gt;#可以用columns指定写入的列&lt;/strong&gt;
data=pd.read_table('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\data.txt',sep='|')
data.to_csv('C:\\Users\\xiaoxiaodexiao\\pythonlianxi\\test0424\\outdata2.txt',sep=',',index=False,
            columns=['a','c','d'])
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1368336/201804/1368336-20180426225838900-1320029810.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




















</description>
<pubDate>Thu, 26 Apr 2018 15:07:00 +0000</pubDate>
<dc:creator>gangandi</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gangandimami/p/8955564.html</dc:identifier>
</item>
<item>
<title>ArrayList源码和多线程安全问题分析 - 不忘初心1223</title>
<link>http://www.cnblogs.com/vitasyuan/p/8955557.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vitasyuan/p/8955557.html</guid>
<description>&lt;h2 id=&quot;arraylist源码和多线程安全问题分析&quot;&gt;1.ArrayList源码和多线程安全问题分析&lt;/h2&gt;
&lt;p&gt;在分析ArrayList线程安全问题之前，我们线对此类的源码进行分析，找出可能出现线程安全问题的地方，然后代码进行验证和分析。&lt;/p&gt;
&lt;h3 id=&quot;数据结构&quot;&gt;1.1 数据结构&lt;/h3&gt;
&lt;p&gt;ArrayList内部是使用数组保存元素的，数据定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;transient Object[] elementData; // non-private to simplify nested class access&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在ArrayList中此数组即是共享资源，当多线程对此数据进行操作的时候如果不进行同步控制，即有可能会出现线程安全问题。&lt;/p&gt;
&lt;h3 id=&quot;add方法可能出现的问题分析&quot;&gt;1.2 add方法可能出现的问题分析&lt;/h3&gt;
&lt;p&gt;首先我们看一下add的源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public boolean add(E e) {
    ensureCapacityInternal(size + 1);
    elementData[size++] = e;
    return true;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此方法中有两个操作，一个是数组容量检查，另外就是将元素放入数据中。我们先看第二个简单的开始分析，当多个线程执行顺序如下所示的时候，会出现最终数据元素个数小于期望值。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/929184/201804/929184-20180426230449319-1270411977.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照此顺序执行完之后，我们可以看到，elementData[n]的只被设置了两次，第二个线程设置的值将前一个覆盖，最后size=n+1。下面使用代码进行验证此问题。&lt;/p&gt;
&lt;h3 id=&quot;代码验证&quot;&gt;1.3 代码验证&lt;/h3&gt;
&lt;p&gt;首先先看下以下代码，开启1000个线程，同时调用ArrayList的add方法，每个线程向ArrayList中添加100个数字，如果程序正常执行的情况下应该是输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;list size is :10000  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private static List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;Integer&amp;gt;();

    private static ExecutorService executorService = Executors.newFixedThreadPool(1000);

    private static class IncreaseTask extends Thread{
        @Override
        public void run() {
            System.out.println(&quot;ThreadId:&quot; + Thread.currentThread().getId() + &quot; start!&quot;);
            for(int i =0; i &amp;lt; 100; i++){
                list.add(i);
            }
            System.out.println(&quot;ThreadId:&quot; + Thread.currentThread().getId() + &quot; finished!&quot;);
        }
    }

    public static void main(String[] args){
        for(int i=0; i &amp;lt; 1000; i++){
            executorService.submit(new IncreaseTask());
        }
        executorService.shutdown();
        while (!executorService.isTerminated()){
            try {
                Thread.sleep(1000*10);
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }
        System.out.println(&quot;All task finished!&quot;);
        System.out.println(&quot;list size is :&quot; + list.size());
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当执行此main方法后，输出如下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/929184/201804/929184-20180426230458658-416917695.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从以上执行结果来看，最后输出的结果会小于我们的期望值。即当多线程调用add方法的时候会出现元素覆盖的问题。&lt;/p&gt;
&lt;h3 id=&quot;数组容量检测的并发问题&quot;&gt;1.4 数组容量检测的并发问题&lt;/h3&gt;
&lt;p&gt;在add方法源码中，我们看到在每次添加元素之前都会有一次数组容量的检测，add中调用此方法的源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ensureCapacityInternal(size + 1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;容量检测的相关源码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void ensureCapacityInternal(int minCapacity) {
       if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);
       }

       ensureExplicitCapacity(minCapacity);
   }

private void ensureExplicitCapacity(int minCapacity) {
    modCount++;

    // overflow-conscious code
    if (minCapacity - elementData.length &amp;gt; 0)
        grow(minCapacity);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;容量检测的流程图如下所示：&lt;br/&gt;&lt;img src=&quot;http://www.cnblogs.com/img/bVV4Bo&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们以两个线程执行add操作来分析扩充容量可能会出现的并发问题：&lt;br/&gt;当我们新建一个ArrayList时候，此时内部数组容器的容量为默认容量10，当我们用两个线程同时添加第10个元素的时候，如果出现以下执行顺序，可能会抛出java.lang.ArrayIndexOutOfBoundsException异常。&lt;br/&gt;&lt;img src=&quot;http://www.cnblogs.com/img/bVV4Bp&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二个线程往数组中添加数据的时候由于数组容量为10，而此操作往index为10的位置设置元素值，因此会抛出数组越界异常。&lt;/p&gt;
&lt;h3 id=&quot;代码验证数组容量检测的并发问题&quot;&gt;1.5 代码验证数组容量检测的并发问题&lt;/h3&gt;
&lt;p&gt;使用如下代码：&lt;br/&gt;private static List list = new ArrayList(3);&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    private static ExecutorService executorService = Executors.newFixedThreadPool(10000);

    private static class IncreaseTask extends Thread{
        @Override
        public void run() {
            System.out.println(&quot;ThreadId:&quot; + Thread.currentThread().getId() + &quot; start!&quot;);
            for(int i =0; i &amp;lt; 1000000; i++){
                list.add(i);
            }
            System.out.println(&quot;ThreadId:&quot; + Thread.currentThread().getId() + &quot; finished!&quot;);
        }
    }

    public static void main(String[] args){

        new IncreaseTask().start();
        new IncreaseTask().start();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行main方法后，我们可以看到控制台输出如下：&lt;br/&gt;&lt;img src=&quot;http://www.cnblogs.com/img/bVV4Bq&quot; alt=&quot;图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;arraylist中其他方法说明&quot;&gt;1.6 ArrayList中其他方法说明&lt;/h3&gt;
&lt;p&gt;ArrayList中其他包含对共享变量操作的方法同样会有并发安全问题，只需要按照以上的分析方法分析即可。&lt;/p&gt;
</description>
<pubDate>Thu, 26 Apr 2018 15:05:00 +0000</pubDate>
<dc:creator>不忘初心1223</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vitasyuan/p/8955557.html</dc:identifier>
</item>
</channel>
</rss>