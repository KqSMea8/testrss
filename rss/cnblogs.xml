<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>AM解调的FPGA实现 - HOOKNET</title>
<link>http://www.cnblogs.com/HOOKNET/p/8407766.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/HOOKNET/p/8407766.html</guid>
<description>&lt;h2 id=&quot;一说明&quot;&gt;一、说明：&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;功能：AM解调&lt;/li&gt;
&lt;li&gt;平台：Vivado 2016.4 和 Matlab R2017a&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;二原理&quot;&gt;二、原理：&lt;/h2&gt;
&lt;h3 id=&quot;am解调原理&quot;&gt;1.AM解调原理&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;模拟电路中采用“包络检波”的方法：&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/29295862/35344975-615af3f6-0169-11e8-9d69-7cac3196baad.png&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数字电路中采用类似的方法：&lt;/strong&gt;&lt;br/&gt;先将已调信号取绝对值，再经过低通滤波器，滤除高频分量（经AM调制的信号包含两个高频分量：载波频率+/-调制信号频率，因此低通滤波器的截止频率小于两个高频分量就可以），得到的就是叠加了直流分量的调制信号，去直流后便可以得到调制信号。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;三am解调的fpga实现&quot;&gt;三、AM解调的FPGA实现&lt;/h2&gt;
&lt;h3 id=&quot;将已调制的am信号取绝对值&quot;&gt;1.将已调制的AM信号取绝对值&lt;/h3&gt;
&lt;p&gt;关于AM信号的产生，参见上一篇博客：&lt;a href=&quot;http://blog.csdn.net/hooknet/article/details/79129451&quot;&gt;AM调制的FPGA实现&lt;/a&gt;&lt;br/&gt;简单说明一下对数据取反的思路：如果是无符号数，则不存在符号位，也就是说数据都是正数，不需要取绝对值；如果是有符号数，通过检测最高位的符号位，如果符号位是1，则表示数据是负数，对数据取反，如果符号位是0，则表示数据是正数，不需要取反操作。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;取绝对值的Verilog实现：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;always @(posedge clk or negedge rst_n) begin
    if(!rst_n)  begin
        data_tdata &amp;lt;= 0;
    end
    else if(AM_mod[15] == 1)    begin
        data_tdata &amp;lt;= -{AM_mod};        //如果符号位是1，对数据取反
    end
    else if(AM_mod[15] == 0)    begin
        data_tdata &amp;lt;= AM_mod;           //如果符号位是0，数据不变
    end
    else    begin
        data_tdata &amp;lt;= data_tdata;
    end
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用fir滤波器滤除高频分量&quot;&gt;2.使用FIR滤波器滤除高频分量&lt;/h3&gt;
&lt;p&gt;关于Vivado的FIR IP核可以说是功能很强大的，但这里不需要其他复杂的功能，只需要简单的生成一个的低通滤波器就行了。&lt;br/&gt;类似于ROM核的生成，配置FIR同样需要Matlab配合。可见，Matlab的功能是多么强大。这里Matlab的主要作用是对滤波器的性能进行仿真并生成相应的抽头系数。&lt;/p&gt;
&lt;p&gt;IP核生成完毕后，就可以编写IP核的调用模块了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;FIR IP核调用模块：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;module FIR_Control(
    input   clk,
    input   rst_n,
    input   signed  [15:0]  s_axis_data_tdata,
    output  reg     [7:0]   data_out
);

wire    s_axis_data_tready;
wire    m_axis_data_tvalid;
wire    [39:0]  m_axis_data_tdata;      //滤波器输出信号

always @(posedge clk or negedge rst_n) begin
    if(!rst_n)  begin
        data_out &amp;lt;= 0;
    end
    else    begin
        data_out &amp;lt;= m_axis_data_tdata[33:26];   //根据仿真结果进行截位
    end
end

//--------------调用FIR核----------------//
FIR                     FIR_inst0(
  .aclk                 (clk),
  .s_axis_data_tvalid   (1),                    //拉高时IP核开始工作
  .s_axis_data_tready   (s_axis_data_tready),   
  .s_axis_data_tdata    (s_axis_data_tdata),    //输入信号
  .m_axis_data_tvalid   (m_axis_data_tvalid),   //拉高时表明数据输出有效
  .m_axis_data_tdata    (m_axis_data_tdata)     //输出信号
);
//---------------------------------------//


endmodule 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的是：&lt;br/&gt;&lt;strong&gt;m_axis_data_tdata&lt;/strong&gt; 信号是滤波器的数据输出信号，我们在使用时一般都要对此数据进行截位操作，如何进行截位需要根据仿真结果来确定。比如，在这个工程中，我需要的滤波器的输出数据是8位，但不能一下子截取高8位，而且&lt;strong&gt;m_axis_data_tdata&lt;/strong&gt;是个40位的数据，从仿真波形来看&lt;strong&gt;m_axis_data_tdata&lt;/strong&gt;[39:34]都是符号位，因此从33位开始往下截取8位数据（当然也可以从34位开始截，这样的话就多了一位符号位，相应的数据位就变少了一位）。&lt;/p&gt;
&lt;h3 id=&quot;去直流处理&quot;&gt;3.去直流处理&lt;/h3&gt;
&lt;p&gt;经过FIR滤波后的波形其实就是一个叠加了直流分量的调制信号。在本工程中，AM调制是100%调制，也就是说解调时经过FIR后的信号的最小值为0，可以把它看作是无符号的数，直接经DA输出就行了。&lt;br/&gt;如果不是100%调制呢？也就是说解调时经过FIR后的信号的最小值是大于0的，那么这个大于0的量就相当于直流，需要去掉后再经DA输出。&lt;br/&gt;因此，在这个工程中，不需要去直流处理。下面给出顶层文件的代码。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;顶层模块编写：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;module TOP(
    input   clk,
    input   rst_n,
    output  [7:0]   AM_demod
);

//--------------------------------//
reg     signed  [15:0]  data_tdata;
wire    signed  [15:0]  AM_mod;
//--------------------------------//

//-----------取绝对值-------------//
always @(posedge clk or negedge rst_n) begin
    if(!rst_n)  begin
        data_tdata &amp;lt;= 0;
    end
    else if(AM_mod[15] == 1)    begin
        data_tdata &amp;lt;= -{AM_mod};        //如果符号位是1，对数据取反
    end
    else if(AM_mod[15] == 0)    begin
        data_tdata &amp;lt;= AM_mod;           //如果符号位是0，数据不变
    end
    else    begin
        data_tdata &amp;lt;= data_tdata;
    end
end
//--------------------------------//

//-----------AM已调信号------------//
modulate        modulate_inst0(
    .clk        (clk),
    .rst_n      (rst_n),
    .AM_mod     (AM_mod)
);
//--------------------------------//

//----------滤波器控制模块---------//
FIR_Control             FIR_Control_inst2(
    .clk                (clk),
    .rst_n              (rst_n),
    .s_axis_data_tdata  (data_tdata),
    .data_out           (AM_demod)
);
//--------------------------------//

endmodule
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;解调仿真&quot;&gt;4.解调仿真&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;编写TestBeach：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;`timescale 1ns/1ps

module tb_AM();

//===================解调部分====================//
//----------接口设置----------//
reg     sclk;
reg     rst_n;
wire    [7:0]   AM_demod;
//--------------------------//
initial     sclk = 1;
always  #5  sclk = ~sclk;       //100M时钟

initial begin
    rst_n = 0;
    #500
    rst_n = 1;
end
//----------解调模块----------//
TOP             TOP_inst(
    .clk        (sclk),
    .rst_n      (rst_n),
    .AM_demod   (AM_demod)
);
//---------------------------//

endmodule
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;仿真结果&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/29295862/35448887-7a2c7452-02f6-11e8-91ce-0253953ac892.png&quot;/&gt;&lt;br/&gt;由仿真结果可知，最终输出信号正确还原了已调制信号的包络，表明解调正确。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 03 Feb 2018 17:58:00 +0000</pubDate>
<dc:creator>HOOKNET</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/HOOKNET/p/8407766.html</dc:identifier>
</item>
<item>
<title>Part 4：表单和类视图--Django从入门到精通系列教程 - 刘江liujiangblog.com</title>
<link>http://www.cnblogs.com/feixuelove1009/p/8404040.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feixuelove1009/p/8404040.html</guid>
<description>&lt;hr/&gt;&lt;h3 id=&quot;该系列教程系个人原创并完整发布在个人官网刘江的博客和教程&quot;&gt;该系列教程系个人原创，并完整发布在个人官网&lt;a href=&quot;http://www.liujiangblog.com&quot;&gt;刘江的博客和教程&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;所有转载本文者需在顶部显著位置注明原作者及www.liujiangblog.com官网地址&quot;&gt;所有转载本文者，需在顶部显著位置注明原作者及www.liujiangblog.com官网地址。&lt;/h3&gt;
&lt;h3 id=&quot;python及django学习qq群453131687&quot;&gt;Python及Django学习QQ群：453131687&lt;/h3&gt;
&lt;hr/&gt;&lt;h2 id=&quot;一表单form&quot;&gt;一、表单form&lt;/h2&gt;
&lt;p&gt;为了接收用户的投票选择，我们需要在前端页面显示一个投票界面。让我们重写先前的&lt;code&gt;polls/detail.html&lt;/code&gt;文件，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ question.question_text }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

{% if error_message %}&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;{{ error_message }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;{% endif %}

&lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{% url 'polls:vote' question.id %}&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
{% csrf_token %}
{% for choice in question.choice_set.all %}
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;radio&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;choice{{ forloop.counter }}&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{{ choice.id }}&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;choice{{ forloop.counter }}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;{{ choice.choice_text }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Vote&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简要说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;上面的模板显示一系列单选按钮，按钮的值是选项的ID，按钮的名字是字符串&quot;choice&quot;。这意味着，当你选择了其中某个按钮，并提交表单，一个包含数据&lt;code&gt;choice=#&lt;/code&gt;的POST请求将被发送到指定的url，&lt;code&gt;#&lt;/code&gt;是被选择的选项的ID。这就是HTML表单的基本概念。&lt;/li&gt;
&lt;li&gt;如果你有一定的前端开发基础，那么form标签的action属性和method属性你应该很清楚它们的含义，action表示你要发送的目的url，method表示提交数据的方式，一般分POST和GET。&lt;/li&gt;
&lt;li&gt;forloop.counter是DJango模板系统专门提供的一个变量，用来表示你当前循环的次数，一般用来给循环项目添加有序数标。&lt;/li&gt;
&lt;li&gt;由于我们发送了一个POST请求，就必须考虑一个跨站请求伪造的安全问题，简称CSRF（具体含义请百度）。Django为你提供了一个简单的方法来避免这个困扰，那就是在form表单内添加一条{% csrf_token %}标签，标签名不可更改，固定格式，位置任意，只要是在form表单内。这个方法对form表单的提交方式方便好使，但如果是用ajax的方式提交数据，那么就不能用这个方法了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;现在，让我们创建一个处理提交过来的数据的视图。前面我们已经写了一个“占坑”的vote视图的url（polls/urls.py）：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;url(r'^(?P&amp;lt;question_id&amp;gt;[0-9]+)/vote/$', views.vote, name='vote'),&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以及“占坑”的vote视图函数（polls/views.py），我们把坑填起来：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; get_object_or_404, render
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.http &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; HttpResponseRedirect, HttpResponse
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.urls &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; reverse
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; .models &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Choice, Question
&lt;span class=&quot;co&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; vote(request, question_id):
    question &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; get_object_or_404(Question, pk&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;question_id)
    &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;:
        selected_choice &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; question.choice_set.get(pk&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;request.POST[&lt;span class=&quot;st&quot;&gt;'choice'&lt;/span&gt;])
    &lt;span class=&quot;cf&quot;&gt;except&lt;/span&gt; (&lt;span class=&quot;pp&quot;&gt;KeyError&lt;/span&gt;, Choice.DoesNotExist):
        &lt;span class=&quot;co&quot;&gt;# 发生choice未找到异常时，重新返回表单页面，并给出提示信息&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;st&quot;&gt;'polls/detail.html'&lt;/span&gt;, {
        &lt;span class=&quot;st&quot;&gt;'question'&lt;/span&gt;: question,
        &lt;span class=&quot;co&quot;&gt;'error_message'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;You didn't select a choice.&quot;&lt;/span&gt;,
        })
    &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
        selected_choice.votes &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
        selected_choice.save()
        &lt;span class=&quot;co&quot;&gt;# 成功处理数据后，自动跳转到结果页面，防止用户连续多次提交。&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; HttpResponseRedirect(reverse(&lt;span class=&quot;st&quot;&gt;'polls:results'&lt;/span&gt;, args&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(question.&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;,)))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有些新的东西，我们要解释一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;request.POST是一个类似字典的对象，允许你通过键名访问提交的数据。本例中，&lt;code&gt;request.POST[’choice’]&lt;/code&gt;返回被选择选项的ID，并且值的类型永远是string字符串，那怕它看起来像数字！同样的，你也可以用类似的手段获取GET请求发送过来的数据，一个道理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request.POST[’choice’]&lt;/code&gt;有可能触发一个KeyError异常，如果你的POST数据里没有提供choice键值，在这种情况下，上面的代码会返回表单页面并给出错误提示。PS：通常我们会给个默认值，防止这种异常的产生，例如&lt;code&gt;request.POST[’choice’,None]&lt;/code&gt;，一个None解决所有问题。&lt;/li&gt;
&lt;li&gt;在选择计数器加一后，返回的是一个&lt;code&gt;HttpResponseRedirect&lt;/code&gt;而不是先前我们常用的&lt;code&gt;HttpResponse&lt;/code&gt;。HttpResponseRedirect需要一个参数：重定向的URL。这里有一个建议，当你成功处理POST数据后，应当保持一个良好的习惯，始终返回一个HttpResponseRedirect。这不仅仅是对Django而言，它是一个良好的WEB开发习惯。&lt;/li&gt;
&lt;li&gt;我们在上面HttpResponseRedirect的构造器中使用了一个&lt;code&gt;reverse()&lt;/code&gt;函数。它能帮助我们避免在视图函数中硬编码URL。它首先需要一个我们在URLconf中指定的name，然后是传递的数据。例如&lt;code&gt;'/polls/3/results/'&lt;/code&gt;，其中的3是某个&lt;code&gt;question.id&lt;/code&gt;的值。重定向后将进入&lt;code&gt;polls:results&lt;/code&gt;对应的视图，并将&lt;code&gt;question.id&lt;/code&gt;传递给它。白话来讲，就是把活扔给另外一个路由对应的视图去干。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当有人对某个问题投票后，vote()视图重定向到了问卷的结果显示页面。下面我们来写这个处理结果页面的视图(polls/views.py)：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; get_object_or_404, render

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; results(request, question_id):
    question &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; get_object_or_404(Question, pk&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;question_id)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;st&quot;&gt;'polls/results.html'&lt;/span&gt;, {&lt;span class=&quot;st&quot;&gt;'question'&lt;/span&gt;: question})&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样，还需要写个模板&lt;code&gt;polls/templates/polls/results.html&lt;/code&gt;。（路由、视图、模板、模型！都是这个套路....）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ question.question_text }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
{% for choice in question.choice_set.all %}
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{% url 'polls:detail' question.id %}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;Vote again?&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在你可以到浏览器中访问&lt;code&gt;/polls/1/&lt;/code&gt;了，投票吧。你会看到一个结果页面，每投一次，它的内容就更新一次。如果你提交的时候没有选择项目，则会得到一个错误提示。&lt;/p&gt;
&lt;p&gt;如果你在前面漏掉了一部分操作没做，比如没有创建choice选项对象，那么可以按下面的操作，补充一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;F:\Django_course\mysite&amp;gt;python manage.py shell
Python 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 18:41:36) [MSC v.1900 64 bit (AMD64)] on win32
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
(InteractiveConsole)
&amp;gt;&amp;gt;&amp;gt; from polls.models import Question
&amp;gt;&amp;gt;&amp;gt; q = Question.objects.get(pk=1)
&amp;gt;&amp;gt;&amp;gt; q.choice_set.create(choice_text='Not much', votes=0)
&amp;lt;Choice: Choice object&amp;gt;
&amp;gt;&amp;gt;&amp;gt; q.choice_set.create(choice_text='The sky', votes=0)
&amp;lt;Choice: Choice object&amp;gt;
&amp;gt;&amp;gt;&amp;gt; q.choice_set.create(choice_text='Just hacking again', votes=0)
&amp;lt;Choice: Choice object&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了方便大家，我将当前状态下的各主要文件内容一并贴出，供大家对照参考！&lt;/p&gt;
&lt;p&gt;1--完整的&lt;code&gt;mysite/urls.py&lt;/code&gt;文件如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.conf.urls &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; url,include
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.contrib &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; admin

urlpatterns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    url(&lt;span class=&quot;vs&quot;&gt;r'^admin/'&lt;/span&gt;, admin.site.urls),
    url(&lt;span class=&quot;vs&quot;&gt;r'^polls/'&lt;/span&gt;, include(&lt;span class=&quot;st&quot;&gt;'polls.urls'&lt;/span&gt;)),
]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2--完整的&lt;code&gt;mysite/settings.py&lt;/code&gt;文件如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;47&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; os

&lt;span class=&quot;co&quot;&gt;# Build paths inside the project like this: os.path.join(BASE_DIR, ...)&lt;/span&gt;
BASE_DIR &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; os.path.dirname(os.path.dirname(os.path.abspath(&lt;span class=&quot;va&quot;&gt;__file__&lt;/span&gt;)))


&lt;span class=&quot;co&quot;&gt;# Quick-start development settings - unsuitable for production&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# SECURITY WARNING: keep the secret key used in production secret!&lt;/span&gt;
SECRET_KEY &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'85vvuta(p05ow!4pz2b0qbduu0%pq6x5q66-ei*pg+-lbdr#m^'&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# SECURITY WARNING: don't run with debug turned on in production!&lt;/span&gt;
DEBUG &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;

ALLOWED_HOSTS &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []


&lt;span class=&quot;co&quot;&gt;# Application definition&lt;/span&gt;

INSTALLED_APPS &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    &lt;span class=&quot;st&quot;&gt;'polls'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.contrib.admin'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.contrib.auth'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.contrib.contenttypes'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.contrib.sessions'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.contrib.messages'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.contrib.staticfiles'&lt;/span&gt;,
]

MIDDLEWARE &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    &lt;span class=&quot;st&quot;&gt;'django.middleware.security.SecurityMiddleware'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.contrib.sessions.middleware.SessionMiddleware'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.middleware.common.CommonMiddleware'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.middleware.csrf.CsrfViewMiddleware'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.contrib.auth.middleware.AuthenticationMiddleware'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.contrib.messages.middleware.MessageMiddleware'&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;'django.middleware.clickjacking.XFrameOptionsMiddleware'&lt;/span&gt;,
]

ROOT_URLCONF &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mysite.urls'&lt;/span&gt;

TEMPLATES &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    {
        &lt;span class=&quot;st&quot;&gt;'BACKEND'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'django.template.backends.django.DjangoTemplates'&lt;/span&gt;,
        &lt;span class=&quot;co&quot;&gt;'DIRS'&lt;/span&gt;: [os.path.join(BASE_DIR, &lt;span class=&quot;st&quot;&gt;'templates'&lt;/span&gt;)]
        ,
        &lt;span class=&quot;co&quot;&gt;'APP_DIRS'&lt;/span&gt;: &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;,
        &lt;span class=&quot;co&quot;&gt;'OPTIONS'&lt;/span&gt;: {
            &lt;span class=&quot;st&quot;&gt;'context_processors'&lt;/span&gt;: [
                &lt;span class=&quot;st&quot;&gt;'django.template.context_processors.debug'&lt;/span&gt;,
                &lt;span class=&quot;co&quot;&gt;'django.template.context_processors.request'&lt;/span&gt;,
                &lt;span class=&quot;co&quot;&gt;'django.contrib.auth.context_processors.auth'&lt;/span&gt;,
                &lt;span class=&quot;co&quot;&gt;'django.contrib.messages.context_processors.messages'&lt;/span&gt;,
            ],
        },
    },
]

WSGI_APPLICATION &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mysite.wsgi.application'&lt;/span&gt;


&lt;span class=&quot;co&quot;&gt;# Database&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# https://docs.djangoproject.com/en/1.11/ref/settings/#databases&lt;/span&gt;

DATABASES &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;st&quot;&gt;'default'&lt;/span&gt;: {
        &lt;span class=&quot;st&quot;&gt;'ENGINE'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'django.db.backends.sqlite3'&lt;/span&gt;,
        &lt;span class=&quot;co&quot;&gt;'NAME'&lt;/span&gt;: os.path.join(BASE_DIR, &lt;span class=&quot;st&quot;&gt;'db.sqlite3'&lt;/span&gt;),
    }
}


&lt;span class=&quot;co&quot;&gt;# Password validation&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators&lt;/span&gt;

AUTH_PASSWORD_VALIDATORS &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    {
        &lt;span class=&quot;st&quot;&gt;'NAME'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'&lt;/span&gt;,
    },
    {
        &lt;span class=&quot;st&quot;&gt;'NAME'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'django.contrib.auth.password_validation.MinimumLengthValidator'&lt;/span&gt;,
    },
    {
        &lt;span class=&quot;st&quot;&gt;'NAME'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'django.contrib.auth.password_validation.CommonPasswordValidator'&lt;/span&gt;,
    },
    {
        &lt;span class=&quot;st&quot;&gt;'NAME'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'django.contrib.auth.password_validation.NumericPasswordValidator'&lt;/span&gt;,
    },
]


&lt;span class=&quot;co&quot;&gt;# Internationalization&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# https://docs.djangoproject.com/en/1.11/topics/i18n/&lt;/span&gt;

LANGUAGE_CODE &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'en-us'&lt;/span&gt;

TIME_ZONE &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Asia/Shanghai'&lt;/span&gt;

USE_I18N &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;

USE_L10N &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;

USE_TZ &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3--完整的&lt;code&gt;polls/views.py&lt;/code&gt;应该如下所示：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; reverse
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; HttpResponseRedirect
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; get_object_or_404
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; HttpResponse
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; render
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; .models &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Choice
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; .models &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Question
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.template &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; loader
&lt;span class=&quot;co&quot;&gt;# Create your views here.&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; index(request):
    latest_question_list &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Question.objects.order_by(&lt;span class=&quot;st&quot;&gt;'-pub_date'&lt;/span&gt;)[:&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]
    template &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; loader.get_template(&lt;span class=&quot;st&quot;&gt;'polls/index.html'&lt;/span&gt;)
    context &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {
        &lt;span class=&quot;st&quot;&gt;'latest_question_list'&lt;/span&gt;: latest_question_list,
    }
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; HttpResponse(template.render(context, request))


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; detail(request, question_id):
    question &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; get_object_or_404(Question, pk&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;question_id)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;st&quot;&gt;'polls/detail.html'&lt;/span&gt;, {&lt;span class=&quot;st&quot;&gt;'question'&lt;/span&gt;: question})


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; results(request, question_id):
    question &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; get_object_or_404(Question, pk&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;question_id)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;st&quot;&gt;'polls/results.html'&lt;/span&gt;, {&lt;span class=&quot;st&quot;&gt;'question'&lt;/span&gt;: question})


&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; vote(request, question_id):
    question &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; get_object_or_404(Question, pk&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;question_id)
    &lt;span class=&quot;cf&quot;&gt;try&lt;/span&gt;:
        selected_choice &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; question.choice_set.get(pk&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;request.POST[&lt;span class=&quot;st&quot;&gt;'choice'&lt;/span&gt;])
    &lt;span class=&quot;cf&quot;&gt;except&lt;/span&gt; (&lt;span class=&quot;pp&quot;&gt;KeyError&lt;/span&gt;, Choice.DoesNotExist):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;st&quot;&gt;'polls/detail.html'&lt;/span&gt;, {
            &lt;span class=&quot;st&quot;&gt;'question'&lt;/span&gt;: question,
            &lt;span class=&quot;co&quot;&gt;'error_message'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&quot;You didn't select a choice.&quot;&lt;/span&gt;,
        })
    &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;:
        selected_choice.votes &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
        selected_choice.save()
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; HttpResponseRedirect(reverse(&lt;span class=&quot;st&quot;&gt;'polls:results'&lt;/span&gt;, args&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(question.&lt;span class=&quot;bu&quot;&gt;id&lt;/span&gt;,)))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4--完整的&lt;code&gt;polls/urls.py&lt;/code&gt;应该如下所示：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.conf.urls &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; url
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; . &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; views

app_name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'polls'&lt;/span&gt;

urlpatterns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    &lt;span class=&quot;co&quot;&gt;# ex: /polls/&lt;/span&gt;
    url(&lt;span class=&quot;vs&quot;&gt;r'^$'&lt;/span&gt;, views.index, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;),
    &lt;span class=&quot;co&quot;&gt;# ex: /polls/5/&lt;/span&gt;
    url(&lt;span class=&quot;vs&quot;&gt;r'^(?P&amp;lt;question_id&amp;gt;[0-9]+)/$'&lt;/span&gt;, views.detail, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'detail'&lt;/span&gt;),
    &lt;span class=&quot;co&quot;&gt;# ex: /polls/5/results/&lt;/span&gt;
    url(&lt;span class=&quot;vs&quot;&gt;r'^(?P&amp;lt;question_id&amp;gt;[0-9]+)/results/$'&lt;/span&gt;, views.results, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'results'&lt;/span&gt;),
    &lt;span class=&quot;co&quot;&gt;# ex: /polls/5/vote/&lt;/span&gt;
    url(&lt;span class=&quot;vs&quot;&gt;r'^(?P&amp;lt;question_id&amp;gt;[0-9]+)/vote/$'&lt;/span&gt;, views.vote, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'vote'&lt;/span&gt;),
]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5--完整的&lt;code&gt;polls/model.py&lt;/code&gt;文件如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; models
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; datetime
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.utils &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; timezone
&lt;span class=&quot;co&quot;&gt;# Create your models here.&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Question(models.Model):
    question_text &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;)
    pub_date &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.DateTimeField(&lt;span class=&quot;st&quot;&gt;'date published'&lt;/span&gt;)

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; was_published_recently(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.pub_date &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; timezone.now() &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; datetime.timedelta(days&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.question_text



&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Choice(models.Model):
    question &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ForeignKey(Question, on_delete&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;models.CASCADE)
    choice_text &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;)
    votes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.IntegerField(default&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.choice_text&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6--完整的&lt;code&gt;polls/admin.py&lt;/code&gt;文件如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.contrib &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; admin

&lt;span class=&quot;co&quot;&gt;# Register your models here.&lt;/span&gt;

&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; .models &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Question

admin.site.register(Question)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7--完整的&lt;code&gt;templates/polls/index.html&lt;/code&gt;文件如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;{% if latest_question_list %}
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    {% for question in latest_question_list %}
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/polls/{{ question.id }}/&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;{{ question.question_text }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    {% endfor %}
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
{% else %}
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;No polls are available.&lt;span class=&quot;kw&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
{% endif %}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8--完整的&lt;code&gt;templates/polls/detail.html&lt;/code&gt;文件如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ question.question_text }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

{% if error_message %}&lt;span class=&quot;kw&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;{{ error_message }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;{% endif %}

&lt;span class=&quot;kw&quot;&gt;&amp;lt;form&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; action=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{% url 'polls:vote' question.id %}&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
{% csrf_token %}
{% for choice in question.choice_set.all %}
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;radio&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;choice&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;choice{{ forloop.counter }}&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{{ choice.id }}&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;label&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; for=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;choice{{ forloop.counter }}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;{{ choice.choice_text }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/label&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Vote&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;9--完整的&lt;code&gt;templates/polls/results.html&lt;/code&gt;文件如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ question.question_text }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
{% for choice in question.choice_set.all %}
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;a&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{% url 'polls:detail' question.id %}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;Vote again?&lt;span class=&quot;kw&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;vote()视图没有对应的html模板，它直接跳转到results视图去了。&lt;/p&gt;
&lt;p&gt;运行服务器，测试各功能：&lt;/p&gt;
&lt;p&gt;这是问卷列表页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/7pdy5vvn8to2ntg7w46ker09/image.png&quot; alt=&quot;image.png-13kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是“what's up”问卷选项页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/ph5kz2fspfjpn287tci35dg8/image.png&quot; alt=&quot;image.png-23.9kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是选择结果页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/y09ovdw2cibwair93z8hrwht/image.png&quot; alt=&quot;image.png-26.2kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是没有选择选项时，提示错误信息的页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/4zdzz8lndebmgegi30fj9nf3/image.png&quot; alt=&quot;image.png-28.4kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;请大家对比参考上面的内容，看看你自己的结果是否一样。&lt;/p&gt;
&lt;h2 id=&quot;二-使用类视图减少重复代码&quot;&gt;二、 使用类视图：减少重复代码&lt;/h2&gt;
&lt;p&gt;上面的detail、index和results视图的代码非常相似，有点冗余，这是一个程序猿不能忍受的。他们都具有类似的业务逻辑，实现类似的功能：通过从URL传递过来的参数去数据库查询数据，加载一个模板，利用刚才的数据渲染模板，返回这个模板。由于这个过程是如此的常见，Django很善解人意的帮你想办法偷懒，于是它提供了一种快捷方式，名为“类视图”。&lt;/p&gt;
&lt;p&gt;现在，让我们来试试看将原来的代码改为使用类视图的方式，整个过程分三步走：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;修改URLconf设置&lt;/li&gt;
&lt;li&gt;删除一些旧的无用的视图&lt;/li&gt;
&lt;li&gt;采用基于类视图的新视图&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;PS：为什么本教程的代码来回改动这么频繁？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：通常在写一个Django的app时，我们一开始就要决定使用类视图还是不用，而不是等到代码写到一半了才重构你的代码成类视图。但是本教程为了让你清晰的理解视图的内涵，“故意”走了一条比较曲折的路，因为我们的哲学是&lt;code&gt;在你使用计算器之前你得先知道基本的数学公式&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;改良urlconf&quot;&gt;1.&lt;strong&gt;改良URLconf&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;打开&lt;code&gt;polls/urls.py&lt;/code&gt;文件，将其修改成下面的样子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.conf.urls &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; url
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; . &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; views

app_name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'polls'&lt;/span&gt;
urlpatterns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    url(&lt;span class=&quot;vs&quot;&gt;r'^$'&lt;/span&gt;, views.IndexView.as_view(), name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;),
    url(&lt;span class=&quot;vs&quot;&gt;r'^(?P&amp;lt;pk&amp;gt;[0-9]+)/$'&lt;/span&gt;, views.DetailView.as_view(), name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'detail'&lt;/span&gt;),
    url(&lt;span class=&quot;vs&quot;&gt;r'^(?P&amp;lt;pk&amp;gt;[0-9]+)/results/$'&lt;/span&gt;, views.ResultsView.as_view(), name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'results'&lt;/span&gt;),
    url(&lt;span class=&quot;vs&quot;&gt;r'^(?P&amp;lt;question_id&amp;gt;[0-9]+)/vote/$'&lt;/span&gt;, views.vote, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'vote'&lt;/span&gt;),
]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请注意：在上面的的第2,3条目中将原来的&lt;code&gt;&amp;lt;question_id&amp;gt;&lt;/code&gt;修改成了&lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;修改视图&quot;&gt;2.&lt;strong&gt;修改视图&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;接下来，打开&lt;code&gt;polls/views.py&lt;/code&gt;文件，删掉index、detail和results视图，替换成Django的类视图，如下所示：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; get_object_or_404, render
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.http &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; HttpResponseRedirect
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.urls &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; reverse
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.views &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; generic
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; .models &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Choice, Question


&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; IndexView(generic.ListView):
    template_name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'polls/index.html'&lt;/span&gt;
    context_object_name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'latest_question_list'&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; get_queryset(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
    &lt;span class=&quot;co&quot;&gt;&quot;&quot;&quot;返回最近发布的5个问卷.&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; Question.objects.order_by(&lt;span class=&quot;st&quot;&gt;'-pub_date'&lt;/span&gt;)[:&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]
    
    
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; DetailView(generic.DetailView):
    model &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Question
    template_name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'polls/detail.html'&lt;/span&gt;
    
    
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ResultsView(generic.DetailView):
    model &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Question
    template_name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'polls/results.html'&lt;/span&gt;
    
    
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; vote(request, question_id):
... &lt;span class=&quot;co&quot;&gt;# 这个视图未改变！！！&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里，我们使用了两种类视图&lt;code&gt;ListView&lt;/code&gt;和&lt;code&gt;DetailView&lt;/code&gt;（它们是作为父类被继承的）。这两者分别代表“显示一个对象的列表”和“显示特定类型对象的详细页面”的抽象概念。&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;每一种类视图都需要知道它要作用在哪个模型上，这通过model属性提供。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;DetailView&lt;/code&gt;类视图需要从url捕获到的称为&quot;pk&quot;的主键值，因此我们在url文件中将2和3条目的&lt;code&gt;&amp;lt;question_id&amp;gt;&lt;/code&gt;修改成了&lt;code&gt;&amp;lt;pk&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;默认情况下，&lt;code&gt;DetailView&lt;/code&gt;类视图使用一个称作&lt;code&gt;&amp;lt;app name&amp;gt;/&amp;lt;model name&amp;gt;_detail.html&lt;/code&gt;的模板。在本例中，实际使用的是&lt;code&gt;polls/detail.html&lt;/code&gt;。&lt;code&gt;template_name&lt;/code&gt;属性就是用来指定这个模板名的，用于代替自动生成的默认模板名。（一定要仔细观察上面的代码，对号入座，注意细节。）同样的，在resutls列表视图中，指定&lt;code&gt;template_name&lt;/code&gt;为&lt;code&gt;'polls/results.html'&lt;/code&gt;，这样就确保了虽然resulst视图和detail视图同样继承了DetailView类，使用了同样的model：Qeustion，但它们依然会显示不同的页面。（模板不同嘛！so easy！）&lt;/p&gt;
&lt;p&gt;类似的，ListView类视图使用一个默认模板称为&lt;code&gt;&amp;lt;app name&amp;gt;/&amp;lt;model name&amp;gt;_list.html&lt;/code&gt;。我们也使用&lt;code&gt;template_name&lt;/code&gt;这个变量来告诉ListView使用我们已经存在的&lt;br/&gt;&lt;code&gt;&quot;polls/index.html&quot;&lt;/code&gt;模板，而不是使用它自己默认的那个。&lt;/p&gt;
&lt;p&gt;在教程的前面部分，我们给模板提供了一个包含&lt;code&gt;question&lt;/code&gt;和&lt;code&gt;latest_question_list&lt;/code&gt;的上下文变量。而对于DetailView，question变量会被自动提供，因为我们使用了Django的模型（Question），Django会智能的选择合适的上下文变量。然而，对于ListView，自动生成的上下文变量是&lt;code&gt;question_list&lt;/code&gt;。为了覆盖它，我们提供了&lt;code&gt;context_object_name&lt;/code&gt;属性，指定说我们希望使用&lt;code&gt;latest_question_list&lt;/code&gt;而不是&lt;code&gt;question_list&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;现在可以运行开发服务器，然后试试基于类视图的应用程序了。类视图是Django比较高级的一种用法，初学可能不太好理解，没关系，我们先有个印象。&lt;/p&gt;
</description>
<pubDate>Sat, 03 Feb 2018 17:17:00 +0000</pubDate>
<dc:creator>刘江liujiangblog.com</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feixuelove1009/p/8404040.html</dc:identifier>
</item>
<item>
<title>[python] 2、python使用pyaudio进行录音，及其在python虚拟环境virtualenv中安装遇到的问题 - beautifulzzzz</title>
<link>http://www.cnblogs.com/zjutlitao/p/8411414.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zjutlitao/p/8411414.html</guid>
<description>
&lt;h4&gt;1、pyaudio安装大背景 &lt;/h4&gt;
&lt;p&gt;最近在做智能音箱，需要编写声音拾取代码，我先是百度两篇比较常见的用python进行录音的操作的文章：&lt;/p&gt;

&lt;p&gt;发现需要用到pyaudio，然后在其官网找到如何安装：&lt;span&gt;&lt;a href=&quot;http://people.csail.mit.edu/hubert/pyaudio/&quot; target=&quot;_blank&quot;&gt;http://people.csail.mit.edu/hubert/pyaudio/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/506370/201802/506370-20180204001136781-1011985170.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;但是，在py虚拟环境中通过pip安装会报错，而采用sudo apt-get install python-pyaudio python3-pyaudio安装没有报错，但是在虚拟环境中不行。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/span&gt;全局安装不适用于python虚拟环境中，python虚拟环境和全局环境互不影响。&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;2、解决python虚拟环境中安装pyaudio走过的坑&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;坑一&lt;/strong&gt;：utbutu16.10 安装pyaudio模块过程出现错误 fatal error: portaudio.h: 没有那个文件或目录 error: command 'x86_64-linux-gn&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尝试&lt;/strong&gt;：&lt;span&gt;&lt;a href=&quot;http://blog.csdn.net/hellodrawing/article/details/60868939&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/hellodrawing/article/details/60868939&lt;/a&gt;&lt;/span&gt;，发现没用&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;坑二&lt;/strong&gt;：安装pyaudio找不到portaudio.h的问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尝试&lt;/strong&gt;：&lt;span&gt;&lt;a href=&quot;http://blog.csdn.net/qq_23729557/article/details/78956602&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/qq_23729557/article/details/78956602&lt;/a&gt;&lt;/span&gt;，发现无用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('079fc87d-be16-4ca9-b675-746b91a0c795')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_079fc87d-be16-4ca9-b675-746b91a0c795&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_079fc87d-be16-4ca9-b675-746b91a0c795&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('079fc87d-be16-4ca9-b675-746b91a0c795',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_079fc87d-be16-4ca9-b675-746b91a0c795&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; ➜  ~  &lt;span&gt;sudo&lt;/span&gt; apt-get &lt;span&gt;install&lt;/span&gt; portaudio19-dev python-all-dev python3-all-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;Reading package lists... Done
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;Building dependency tree       
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;Reading state information... Done
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; python-all-dev is already the newest version (&lt;span&gt;2.7&lt;/span&gt;.&lt;span&gt;14&lt;/span&gt;-&lt;span&gt;2ubuntu1).
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;The following additional packages will be installed:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   jackd1 jackd1-firewire libasound2-dev libjack-dev libjack0 libportaudiocpp0 libpython3-all-dev libzita-alsa-pcmi0 libzita-resampler1 python3-all uuid-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;Suggested packages:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;   jack-tools meterbridge libasound2-doc portaudio19-&lt;span&gt;doc
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;The following packages will be REMOVED:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   jackd2 jackd2-firewire libjack-jackd2-&lt;span&gt;0&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;The following NEW packages will be installed:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;   jackd1 jackd1-firewire libasound2-dev libjack-dev libjack0 libportaudiocpp0 libpython3-all-dev libzita-alsa-pcmi0 libzita-resampler1 portaudio19-dev python3-all python3-all-dev uuid-&lt;span&gt;dev
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; upgraded, &lt;span&gt;13&lt;/span&gt; newly installed, &lt;span&gt;3&lt;/span&gt; to remove and &lt;span&gt;5&lt;/span&gt;&lt;span&gt; not upgraded.
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; Need to get &lt;span&gt;0&lt;/span&gt; B/&lt;span&gt;798&lt;/span&gt;&lt;span&gt; kB of archives.
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; After this operation, &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;595&lt;/span&gt;&lt;span&gt; kB of additional disk space will be used.
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; Do you want to continue? [Y/&lt;span&gt;n] Y
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;Preconfiguring packages ...
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; dpkg: warning: files list &lt;span&gt;file&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; package &lt;span&gt;'&lt;/span&gt;&lt;span&gt;emacsen-common&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; missing; assuming package has no files currently installed
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; (Reading database ... &lt;span&gt;419524&lt;/span&gt;&lt;span&gt; files and directories currently installed.)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; Removing jackd2-firewire (&lt;span&gt;1.9&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;+20150825git1ed50c92~dfsg-&lt;span&gt;5ubuntu1) ...
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;dpkg: jackd2: dependency problems, but removing anyway as you requested:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;  jackd depends on jackd2 |&lt;span&gt; jackd1; however:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;  Package jackd2 is to be removed.
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;  Package jackd1 is not installed.
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; Removing jackd2 (&lt;span&gt;1.9&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;+20150825git1ed50c92~dfsg-&lt;span&gt;5ubuntu1) ...
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; dpkg: warning: files list &lt;span&gt;file&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; package &lt;span&gt;'&lt;/span&gt;&lt;span&gt;emacsen-common&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; missing; assuming package has no files currently installed
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; (Reading database ... &lt;span&gt;419435&lt;/span&gt;&lt;span&gt; files and directories currently installed.)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; Preparing to unpack .../jackd1_1%3a0.&lt;span&gt;125.0&lt;/span&gt;-&lt;span&gt;2_amd64.deb ...
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; Unpacking jackd1 (&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;0.125&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;2&lt;/span&gt;&lt;span&gt;) ...
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; dpkg: error processing archive /var/cache/apt/archives/jackd1_1%3a0.&lt;span&gt;125.0&lt;/span&gt;-2_amd64.deb (--&lt;span&gt;unpack):
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;  trying to overwrite &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/usr/lib/x86_64-linux-gnu/libjackserver.so.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;which&lt;/span&gt; is also &lt;span&gt;in&lt;/span&gt; package libjack-jackd2-&lt;span&gt;0&lt;/span&gt;:amd64 &lt;span&gt;1.9&lt;/span&gt;.&lt;span&gt;10&lt;/span&gt;+20150825git1ed50c92~dfsg-&lt;span&gt;5ubuntu1
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; Errors were encountered &lt;span&gt;while&lt;/span&gt;&lt;span&gt; processing:
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;  /var/cache/apt/archives/jackd1_1%3a0.&lt;span&gt;125.0&lt;/span&gt;-&lt;span&gt;2_amd64.deb
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; E: Sub-process /usr/bin/dpkg returned an error code (&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; ➜  ~  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;操作log&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;坑三&lt;/strong&gt;：Installing pyaudio with pip in a virtualenv&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尝试&lt;/strong&gt;：&lt;a href=&quot;https://stackoverflow.com/questions/35708238/installing-pyaudio-with-pip-in-a-virtualenv&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://stackoverflow.com/questions/35708238/installing-pyaudio-with-pip-in-a-virtualenv&lt;/span&gt;&lt;/a&gt;，在操作时，安装一个东西会报错！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/506370/201802/506370-20180204002713859-1366568858.png&quot; alt=&quot;&quot; width=&quot;1024&quot;/&gt;&lt;/p&gt;

&lt;h4&gt; 3、最终解决方案&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;首先在&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;virtualenv&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;中安装&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;pyaudio&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;安装失败，搜索下说要先安装&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;portaudio19-dev&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://stackoverflow.com/questions/35708238/installing-pyaudio-with-pip-in-a-virtualenv&quot;&gt;https://stackoverflow.com/questions/35708238/installing-pyaudio-with-pip-in-a-virtualenv&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;span&gt;安装&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;portaudio19-dev&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;span&gt;失败，搜索说缺少依赖（依赖版本不对），因此要安装&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;sudo apt-get install jackd2&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;left&quot;&gt;　　&lt;span&gt;&lt;a href=&quot;https://ubuntuforums.org/showthread.php?t=1680154&quot;&gt;&lt;span&gt;&lt;span&gt;https://ubuntuforums.org/showthread.php?t=1680154&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;span&gt;之后在虚拟环境中安装&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;(du_tts_stt) ➜ ~ pip install pyaudio&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;span&gt;，出现因&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;SOCK proxy&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;&lt;span&gt;导致有问题，关闭所有FQ的服务，重启电脑再次安装&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;       &lt;img src=&quot;https://images2017.cnblogs.com/blog/506370/201802/506370-20180204004039734-1879988054.png&quot; alt=&quot;&quot;/&gt;  &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;zh-CN&quot;&gt;　 （真是费劲呀，哈哈哈）&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;之后调用官方的一些&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://people.csail.mit.edu/hubert/pyaudio/&quot;&gt;&lt;span&gt;&lt;span&gt;http://people.csail.mit.edu/hubert/pyaudio/&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;zh-CN&quot;&gt;运行有效果，但是有警告（可以忽略）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;4、官方简单DEMO&lt;/h4&gt;
&lt;p&gt;官方一个简单的录音3S的DEMO：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;PyAudio example: Record a few seconds of audio and save to a WAVE file.&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pyaudio
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; wave
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; CHUNK = 1024
&lt;span&gt; 7&lt;/span&gt; FORMAT =&lt;span&gt; pyaudio.paInt16
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; CHANNELS = 1
&lt;span&gt; 9&lt;/span&gt; RATE = 8000
&lt;span&gt;10&lt;/span&gt; RECORD_SECONDS = 3
&lt;span&gt;11&lt;/span&gt; WAVE_OUTPUT_FILENAME = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;output.wav&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; p =&lt;span&gt; pyaudio.PyAudio()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; stream = p.open(format=&lt;span&gt;FORMAT,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 channels=&lt;span&gt;CHANNELS,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 rate=&lt;span&gt;RATE,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 input=&lt;span&gt;True,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 frames_per_buffer=&lt;span&gt;CHUNK)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;* recording&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; frames =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(0, int(RATE / CHUNK *&lt;span&gt; RECORD_SECONDS)):
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     data =&lt;span&gt; stream.read(CHUNK)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    frames.append(data)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;* done recording&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;stream.stop_stream()
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;stream.close()
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;p.terminate()
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; wf = wave.open(WAVE_OUTPUT_FILENAME, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;wf.setnchannels(CHANNELS)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;wf.setsampwidth(p.get_sample_size(FORMAT))
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;wf.setframerate(RATE)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; wf.writeframes(b&lt;span&gt;''&lt;/span&gt;&lt;span&gt;.join(frames))
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; wf.close()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;官方一个播放上述录制音频的DEMO：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;PyAudio Example: Play a WAVE file.&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pyaudio
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; wave
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; CHUNK = 1024
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; len(sys.argv) &amp;lt; 2&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Plays a wave file.\n\nUsage: %s filename.wav&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; sys.argv[0])
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     sys.exit(-1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; wf = wave.open(sys.argv[1], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; p =&lt;span&gt; pyaudio.PyAudio()
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; stream = p.open(format=&lt;span&gt;p.get_format_from_width(wf.getsampwidth()),
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 channels=&lt;span&gt;wf.getnchannels(),
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 rate=&lt;span&gt;wf.getframerate(),
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 output=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; data =&lt;span&gt; wf.readframes(CHUNK)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;while&lt;/span&gt; data != &lt;span&gt;''&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    stream.write(data)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     data =&lt;span&gt; wf.readframes(CHUNK)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;stream.stop_stream()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;stream.close()
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; p.terminate()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;参考链接&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;:: 如果您觉得不错，请推荐给更多人，帮助他们更快地解决实际问题中的坑~&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
@beautifulzzzz
智能硬件、物联网，热爱技术，关注产品
博客：http://blog.beautifulzzzz.com
园友交流群：414948975
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 03 Feb 2018 16:56:00 +0000</pubDate>
<dc:creator>beautifulzzzz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zjutlitao/p/8411414.html</dc:identifier>
</item>
<item>
<title>Activity组件安全（下） - ganchuanpu</title>
<link>http://www.cnblogs.com/ganchuanpu/p/8411257.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ganchuanpu/p/8411257.html</guid>
<description>&lt;p&gt;       简单的说就是APP正常的Activity界面被恶意攻击者替换上仿冒的恶意Activity界面进行攻击和非法用途。界面劫持攻击通常难被识别出来，其造成的后果不仅会给用户带来严重损失，更是移动应用开发者们的恶梦。举个例子来说，当用户打开安卓手机上的某一应用，进入到登陆页面，这时，恶意软件侦测到用户的这一动作，立即弹出一个与该应用界面相同的Activity，覆盖掉了合法的Activity，用户几乎无法察觉，该用户接下来输入用户名和密码的操作其实是在恶意软件的Activity上进行的，最终会发生什么就可想而知了。&lt;/p&gt;
&lt;h2 id=&quot;activity界面被劫持的原因&quot;&gt;Activity界面被劫持的原因&lt;/h2&gt;
&lt;p&gt;       很多网友发现，如果在启动一个Activity时，给它加入一个标志位FLAG_ACTIVITY_NEW_TASK，就能使它置于栈顶并立马呈现给用户。针对这一操作，假使这个Activity是用于盗号的伪装Activity呢？在Android系统当中，程序可以枚举当前运行的进程而不需要声明其他权限，这样子我们就可以写一个程序，启动一个后台的服务，这个服务不断地扫描当前运行的进程，当发现目标进程启动时，就启动一个伪装的Activity。如果这个Activity是登录界面，那么就可以从中获取用户的账号密码。&lt;/p&gt;

&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;监听系统Logocat日志，一旦监听到发生Activity界面切换行为，即进行攻击，覆盖上假冒Activity界面实施欺骗。开发者通常都知道，系统的Logcat日志会由ActivityManagerService打印出包含了界面信息的日志文件，恶意程序就是通过Logocat获取这些信息，从而监控客户端的启动、Activity界面的切换。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;监听系统API，一旦恶意程序监听到相关界面的API组件调用，即可发起攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;逆向APK，恶意攻击者通过反编译和逆向分析APK，了解应用的业务逻辑之后针对性的进行Activity界面劫持攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;&lt;li&gt;恶意盗取用户账号、卡号、密码等信息&lt;/li&gt;
&lt;li&gt;利用假冒界面进行钓鱼欺诈&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;http://www.wooyun.org/bugs/wooyun-2012-05478&quot; target=&quot;_blank&quot;&gt;android利用悬浮窗口实现界面劫持钓鱼盗号&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.wooyun.org/bugs/wooyun-2010-04930&quot; target=&quot;_blank&quot;&gt;建设银行android客户端设计逻辑缺陷导致用户被钓鱼&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;针对用户&quot;&gt;针对用户&lt;/h3&gt;
&lt;p&gt;      Android手机均有一个HOME键（即小房子的那个图标），长按可以查看到近期任务。用户在要输入密码进行登录时，可以通过长按HOME键查看近期任务，比如说登录微信时长按发现近期任务出现了微信，那么我现在的这个登录界面就极有可能是一个恶意伪装的Activity，切换到另一个程序，再查看近期任务，就可以知道这个登录界面是来源于哪个程序了。&lt;/p&gt;
&lt;h3 id=&quot;针对开发人员&quot;&gt;针对开发人员&lt;/h3&gt;
&lt;p&gt;      研发人员通常的做法是，在登录窗口或者用户隐私输入等关键Activity的onPause方法中检测最前端Activity应用是不是自身或者是系统应用，如果发现恶意风险，则给用户一些警示信息，提示用户其登陆界面以被覆盖，并给出覆盖正常Activity的类名。&lt;/p&gt;
&lt;p&gt;下面参考网友分享，给出一个研发人员常用的activity界面劫持防范措施代码：&lt;/p&gt;
&lt;h5&gt;首先，在前正常的登录Activity界面中重写onKeyDown方法和onPause方法，这样一来，当其被覆盖时，就能够弹出警示信息，代码如下：&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; boolean onKeyDown(&lt;span&gt;int&lt;/span&gt; keyCode, KeyEvent &lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断程序进入后台是否是用户自身造成的（触摸返回键或HOME键），是则无需弹出警示。&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;((keyCode==KeyEvent.KEYCODE_BACK || keyCode==KeyEvent.KEYCODE_HOME) &amp;amp;&amp;amp; &lt;span&gt;event&lt;/span&gt;.getRepeatCount()==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             needAlarm = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; super.onKeyDown(keyCode, &lt;span&gt;event&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onPause() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若程序进入后台不是用户自身造成的，则需要弹出警示&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(needAlarm) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;弹出警示信息&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             Toast.makeText(getApplicationContext(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;您的登陆界面被覆盖，请确认登陆环境是否安全&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Toast.LENGTH_SHORT).show();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动我们的AlarmService,用于给出覆盖了正常Activity的类名&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             Intent intent = &lt;span&gt;new&lt;/span&gt; Intent(&lt;span&gt;this&lt;/span&gt;, AlarmService.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            startService(intent);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        super.onPause();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后实现AlarmService.java，并在在AndroidManifest.xml中注册&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import android.app.ActivityManager;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import android.app.Service;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import android.content.Context;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import android.content.Intent;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import android.os.Handler;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import android.os.IBinder;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import android.widget.Toast;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AlarmService extends Service{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     boolean isStart = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     Handler handler = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Handler();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     Runnable alarmRunnable = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        @Override
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到ActivityManager&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;             ActivityManager activityManager =&lt;span&gt; (ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;getRunningTasks会返回一个List，List的大小等于传入的参数。
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;get(0)可获得List中的第一个元素，即栈顶的task&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             ActivityManager.RunningTaskInfo info = activityManager.getRunningTasks(&lt;span&gt;1&lt;/span&gt;).&lt;span&gt;get&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到当前栈顶的类名，按照需求，也可以得到完整的类名和包名&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             String shortClassName = info.topActivity.getShortClassName(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;类名
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;完整类名
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;String className = info.topActivity.getClassName();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;包名
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;String packageName = info.topActivity.getPackageName();&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             Toast.makeText(getApplicationContext(), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;当前运行的程序为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;shortClassName, Toast.LENGTH_LONG).show();
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; onStartCommand(Intent intent, &lt;span&gt;int&lt;/span&gt; flag, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; startId) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        super.onStartCommand(intent, flag, startId);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;isStart) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             isStart = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动alarmRunnable&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             handler.postDelayed(alarmRunnable, &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;            stopSelf();
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; START_STICKY;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IBinder onBind(Intent intent) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 03 Feb 2018 15:57:00 +0000</pubDate>
<dc:creator>ganchuanpu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ganchuanpu/p/8411257.html</dc:identifier>
</item>
<item>
<title>你可能不知道的.Net Core Configuration - 编程玩家</title>
<link>http://www.cnblogs.com/Erik_Xu/p/7624323.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Erik_Xu/p/7624323.html</guid>
<description>

&lt;p&gt;　　1. 配置读取顺序：与代码先后顺序一致。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    public&lt;/span&gt;&lt;span&gt; Startup(IHostingEnvironment env)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; builder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigurationBuilder()
            .SetBasePath(env.ContentRootPath)
            .AddJsonFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
            .AddJsonFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cussettings.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        Configuration &lt;/span&gt;=&lt;span&gt; builder.Build();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　以上代码会先读取appsettings.json，再读取cussettings.json，cussettings.json的内容会覆盖appsettings.json的内容。&lt;/p&gt;

&lt;p&gt;　　2. 覆盖逻辑：原有的配置继承，相同的配置覆写，新增的配置添加。&lt;/p&gt;
&lt;p&gt;　　appsettings.json：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    {
      &lt;/span&gt;&quot;settings&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;name&quot;: &quot;AppSetting&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;age&quot;: 20&lt;span&gt; 
      } 
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　cussettings.json&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    {
      &lt;/span&gt;&quot;settings&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;name&quot;: &quot;CusSetting&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;gender&quot;: &quot;Male&quot;&lt;span&gt;
      } 
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　结果：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171006102016161-1057624732.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3. 可以设置配置文件不存在或失效时，程序不会被中止，该配置会被忽略。&lt;/p&gt;
&lt;p&gt;　　如cussettings.json不存在或失效时：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171006103254505-1753625790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　1. appsettings.{env.EnvironmentName}.json&lt;/p&gt;
&lt;p&gt;　　可以根据当前的环境变量设置读取对应的配置，来覆盖之前的配置，有点像Asp.Net的Web Transform，其中环境变量的key为：ASPNETCORE_ENVIRONMENT。&lt;/p&gt;
&lt;p&gt;　　可以在四个地方设置该环境变量：&lt;/p&gt;
&lt;p&gt;　　a) Visual Studio 2017中的launchSettings.json&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171008101131340-2037288627.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　b) 操作系统的环境变量&lt;/p&gt;
&lt;p&gt;　　Windows：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171008101308871-1162069481.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　Linux：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171008101452762-1378785591.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　c) Dockerfile&lt;/p&gt;
&lt;p&gt;　　FROM microsoft/aspnetcore:1.1&lt;br/&gt;　　COPY . /app&lt;br/&gt;　　WORKDIR /app&lt;br/&gt;　　EXPOSE 5000/tcp&lt;br/&gt;　　ENV ASPNETCORE_URLS http://*:5000/&lt;br/&gt;　　ENV ASPNETCORE_ENVIRONMENT Production&lt;br/&gt;　　ENTRYPOINT [&quot;dotnet&quot;, &quot;EnvironmentVariable.dll&quot;]&lt;/p&gt;

&lt;p&gt;　　d) Docker启动指令&lt;/p&gt;
&lt;p&gt;　　docker run --name {name} -e ASPNETCORE_ENVIRONMENT=Production ...&lt;/p&gt;
&lt;p&gt;　　如：&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171008102248028-700401311.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171008102100184-1341676640.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2. AddEnvironmentVariables()的作用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;var&lt;/span&gt; builder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
                .AddJsonFile($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.{env.EnvironmentName}.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
                .AddEnvironmentVariables();//作用？
    Configuration &lt;/span&gt;= builder.Build();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　a) 读取系统的环境变量信息，这个应该大部分人都知道。&lt;/p&gt;
&lt;p&gt;　　b) 覆盖之前的配置信息。&lt;/p&gt;
&lt;p&gt;　　appsettings.json：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;settings&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;name&quot;: &quot;AppSetting&quot;&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过环境变量来覆盖settings:name：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171008103431465-618946351.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171008103651168-2005002459.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　说明：这里是用控制台运行，因为操作系统的环境变量要对IIS Express生效，要重启vs2017，我懒！&lt;/p&gt;
&lt;p&gt;　　另外环境变量使用两下划线（__）作为层次的分隔符，具体可参考&lt;a href=&quot;https://github.com/aspnet/Configuration/blob/dev/src/Config.EnvironmentVariables/EnvironmentVariablesConfigurationProvider.cs&quot; target=&quot;_blank&quot;&gt;EnvironmentVariablesConfigurationProvider&lt;/a&gt;的源码。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171008104034309-277182238.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　Config Server是Spring Cloud 配置管理的重要中间件，接下来，我们看一下.Net Core如何跟Config Server进行交互。&lt;/p&gt;
&lt;p&gt;　　1. 准备配置文件，这里使用Git作为配置文件的Source，地址：&lt;a href=&quot;https://github.com/ErikXu/.NetCore-Configuration&quot; target=&quot;_blank&quot;&gt;https://github.com/ErikXu/.NetCore-Configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　2. 获取安装包，这里使用Docker启动，因此，是拉取官方镜像：docker pull hyness/spring-cloud-config-server&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171020225003709-649527875.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3.  准备启动资源文件application.yml&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
info:
  component: config service
 
server:
  port: 8888
 
spring:
  application:
    name: git-config
  profiles:
    active: dev
  cloud:
    config:
      server:
        git:
          uri: https://github.com/ErikXu/.NetCore-Configuration
          searchPaths: Configs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4. 执行指令启动Config Server&lt;/p&gt;
&lt;p&gt;　　docker run --name configsvr -it -d -p 8888:8888 -v /root/config-server/application.yml:/config/application.yml hyness/spring-cloud-config-server&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171020225706631-1800685739.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171022100953177-329274055.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　5. 引入Nuget包&lt;/p&gt;
&lt;p&gt;　　Install-Package Steeltoe.Extensions.Configuration.ConfigServer -Version 1.1.1&lt;/p&gt;

&lt;p&gt;　　6. 准备appsetting.json&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;spring&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;application&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;name&quot;: &quot;foo&quot;&lt;span&gt;
    },
    &lt;/span&gt;&quot;cloud&quot;&lt;span&gt;: {
      &lt;/span&gt;&quot;config&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;uri&quot;: &quot;http://192.168.52.142:8888&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;validate_certificates&quot;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&quot;env&quot;: &quot;dev&quot;&lt;span&gt; 
      }
    }
  },
  &lt;/span&gt;&quot;settings&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;name&quot;: &quot;AppSetting&quot;//会被Config Server的内容覆盖&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　7. 引入Config Server&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171022101039521-1041732690.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结果：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171022101609240-73372010.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　挂卷是docker的一种机制，可以把特定的目录或者文件挂载到docker容器的指定位置。配合.Net Core Configuration的机制，可以在appsetting.json中记录开发环境的配置，然后再指定一个待挂载的文件用于记录不同环境的配置，从而覆盖开发环境的配置，达到多环境适配的能力。&lt;/p&gt;
&lt;p&gt;　　1. appsetting.json&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
{
  &quot;settings&quot;: {
    &quot;name&quot;: &quot;AppSetting&quot;
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2. 指定一个待挂载的目录，但是在开发环境不存在此文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Startup(IHostingEnvironment env)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; builder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigurationBuilder()
            .SetBasePath(env.ContentRootPath)
            .AddJsonFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
            .AddJsonFile($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appsettings.{env.EnvironmentName}.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
            .AddEnvironmentVariables()
            .AddJsonFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/configs/volume.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;); //待挂载

        Configuration &lt;/span&gt;=&lt;span&gt; builder.Build();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3. 开发环境&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171029222818742-115047819.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　4. docker启动指令&lt;/p&gt;
&lt;p&gt;　　docker run --name {name} -v {source}:{target} ...&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171029225535148-1189679663.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注：如果有权限问题，需要先执行setenforce 0&lt;/p&gt;

&lt;p&gt;　　5. 效果&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/182190/201710/182190-20171029225742820-452961578.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　挂卷感觉跟appsettings.{env.EnvironmentName}.json很像，既然如此，为什么还要有挂卷呢？那是因为appsettings.{env.EnvironmentName}.json是.net core的机制，其它语言不一定会有，或者是另外的机制，docker的挂卷是服务各种语言的。.Net Core是很优秀的语言，它接收了很多业界的需求，也响应了docker挂卷的机制，在这一点上，.net的能力就相对较弱了。&lt;/p&gt;


&lt;p&gt;　　Config Server是Spring Cloud体系的配置管理中心，而Kubernetes更多是使用Volume的方式（HostPath，Config Map，Secret）。&lt;/p&gt;
&lt;p&gt;　　Config Server是运行时的配置管理，它会定期检测（心跳，2s）remote config的内容，如果内容更新，就刷新容器的配置信息。Volume是发布（更新）时的配置管理，在发布（更新）期间，就把配置信息挂载到容器中。&lt;/p&gt;
&lt;p&gt;　　Config Server要自己保证其高可用，否则，Config Server挂了，会读取容器内的原始配置，Volume是把文件挂载到容器中，因此无中间件高可用要求，但要利用Kubernetes等保证发布更新时，配置挂载到了各个容器中。&lt;/p&gt;
&lt;p&gt;　　Config Server具有一定的语言侵入性（必须要有驱动jdk或者sdk），Volume无语言侵入性。&lt;/p&gt;
&lt;p&gt;　　Config Server只支持Yaml等少量配置文件类型，Volume支持各种配置文件类型。&lt;/p&gt;
</description>
<pubDate>Sat, 03 Feb 2018 15:49:00 +0000</pubDate>
<dc:creator>编程玩家</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Erik_Xu/p/7624323.html</dc:identifier>
</item>
<item>
<title>珍爱生命,远离JS=&gt;JS避坑记 - funnyZpC</title>
<link>http://www.cnblogs.com/funnyzpc/p/8407952.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/funnyzpc/p/8407952.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;JavaScript避坑记&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;转载请注明源地址: &lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 珍爱生命,远离JS=&amp;amp;gt;JS避坑记&quot; href=&quot;http://www.cnblogs.com/funnyzpc/p/8407952.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/funnyzpc/p/8407952.html&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;上图=&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1161789/201802/1161789-20180203223024750-1234348041.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　有意思的漫画，不知大家看懂了没，这里我想说的是以上这些坑我都碰过&lt;img src=&quot;https://images2017.cnblogs.com/blog/1161789/201802/1161789-20180203231650421-117323879.png&quot; alt=&quot;&quot; width=&quot;27&quot; height=&quot;28&quot;/&gt;，当然包含且不仅限于此， 遂这次借漫画将之前写前端时掉过的坑一一罗列哈&lt;img src=&quot;https://images2017.cnblogs.com/blog/1161789/201802/1161789-20180203231744234-1503806940.png&quot; alt=&quot;&quot; width=&quot;29&quot; height=&quot;27&quot;/&gt;(虽然不够完整。。。)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一回合：&lt;span&gt;js运算精度问题&lt;/span&gt;=&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; 输入&amp;gt;0.1+0.2==0.3
&lt;span&gt;2&lt;/span&gt; 返回&amp;gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; 输入&amp;gt;0.1+0.2
&lt;span&gt;5&lt;/span&gt; 返回&amp;gt;&lt;span&gt;0.30000000000000004&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　很怪，经常会在前端计算的时候碰到这个问题，所以如果是多个变量相运算切勿两两预算后再将其值和其余变量运算，这样很容易掉坑，如果实在不行的话，我支一招，请看-&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; 输入&amp;gt;&lt;span&gt;var&lt;/span&gt; num=0.1+0.2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 输入&amp;gt;&lt;span&gt;var&lt;/span&gt; num2=num.&lt;span&gt;toFixed(2&lt;/span&gt;&lt;span&gt;&lt;span&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 输入&amp;gt;&lt;span&gt;num2
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 返回&amp;gt;&quot;0.30&quot;
&lt;span&gt;5&lt;/span&gt; 输入&amp;gt;&lt;span&gt;Number(num2);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 返回&amp;gt;&lt;span&gt;0.3&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　思路很简单，先赋给个变量，用toFixed(保留小数位);函数四舍五入，但是这样还不够，如果处理的值还需要参与运算的话，需要&lt;span&gt;用Number(值/变量);函数转换为数字类型&lt;/span&gt;，因为js属于脚本语言，这个问题也时常会被忽略，各位一定要小心谨慎才是呀~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二回合：&lt;span&gt;js变量运算问题&lt;/span&gt;，请看=&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; 输入&amp;gt;&quot;2&quot;-3
&lt;span&gt;2&lt;/span&gt; 返回&amp;gt;-1
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; 输入&amp;gt;&quot;2&quot;+3
&lt;span&gt;5&lt;/span&gt; 返回&amp;gt;&lt;span&gt;&quot;23&quot;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; 输入&amp;gt;&quot;2&quot;+-3
&lt;span&gt;8&lt;/span&gt; 返回&amp;gt;&lt;span&gt;&quot;2-3&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　额，我想说的是。。。你得绕道走。。。，为什么，因为两种类型之间的运算，运算方式走的内部逻辑不一样，有时候java也会碰到这个问题，但是java有巨多处理函数来避坑，对于js处理以上类别问题，能通过其他方式避免更好，如不能还是给个解决思路吧，额，具体点儿就是：&lt;span&gt;将所有的运算参数先转成Number类型再运算，如果是变量类型，切需要注意你的变量是否包含数字，如果不包含就更麻烦了,需要用isNaN(变量);函数来处理后再行Number函数处理后运算之&lt;/span&gt;-&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; 输入&amp;gt;Number(&quot;2&quot;)-Number(&quot;3&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 返回&amp;gt;-1
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; 输入&amp;gt;Number(&quot;2&quot;)+Number(&quot;3&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 返回&amp;gt;5
&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; 输入&amp;gt;Number(&quot;2&quot;)+-Number(&quot;3&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; 返回&amp;gt;-1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三回合：&lt;span&gt;数字字符串比较大小问题&lt;/span&gt;=&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; 输入&amp;gt;&quot;1&quot;&amp;gt;&quot;2&quot;
&lt;span&gt;2&lt;/span&gt; 返回&amp;gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; 输入&amp;gt;&quot;11&quot;&amp;gt;&quot;9&quot;
&lt;span&gt;5&lt;/span&gt; 返回&amp;gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这个问题，怎么说呢，如果需要比较的是数字，请将比较两边的字符串数字转换成数字后再行比较的好(Number(变量);函数)，如果比较的是字符串的话，需要说的是如果比较两边都是字符的话，实际比较是按相同位置上的数字大小来比较的，所以看起来会有写怪怪的，如果比较的两边都是一位数的数字的话都是没有问题的，但是仅限于此；额~，需要再啰嗦的是&lt;span&gt;如果两边的值的类型不一致的话一定要转换成一致类型的变量比较才会准确(数字和数字字符串比较也是坑。。。)&lt;/span&gt;，这里就不给解药，大家看看以上两回合就知道具体解决办法啦。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第四回合：&lt;span&gt;js中true、false与undefined的问题&lt;/span&gt;=&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; 输入&amp;gt;undefined==&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; 返回&amp;gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; 输入&amp;gt;undefined==&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; 返回&amp;gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; 输入&amp;gt;&lt;span&gt;if&lt;/span&gt;(!undefined) console.log(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; 返回&amp;gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　看起来更加怪异，对不，额。。。，我想说的是：这个无解。。。(让我先哭会儿...&lt;img src=&quot;https://images2017.cnblogs.com/blog/1161789/201802/1161789-20180203232606671-1989303008.png&quot; alt=&quot;&quot; width=&quot;33&quot; height=&quot;32&quot;/&gt;)。。。&lt;/span&gt;&lt;span&gt;；对于此只能死记硬背了，简单总结就是：&lt;span&gt;undefined这个东东不等于false也不等于true&lt;/span&gt;，但是，但是，敲黑板=&amp;gt;&lt;span&gt;在判断语句中它是false&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在是:&lt;span&gt;&lt;strong&gt;2018-02-03 23:31:31&lt;/strong&gt;&lt;/span&gt;，夜深了，狼来了，躲被窝&lt;img src=&quot;https://images2017.cnblogs.com/blog/1161789/201802/1161789-20180203233240562-623533108.png&quot; alt=&quot;&quot; width=&quot;39&quot; height=&quot;34&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 03 Feb 2018 15:36:00 +0000</pubDate>
<dc:creator>funnyZpC</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/funnyzpc/p/8407952.html</dc:identifier>
</item>
<item>
<title>keepalived深度结合lvs_dr模式 - 陈浩然MC</title>
<link>http://www.cnblogs.com/irockcode/p/8411144.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/irockcode/p/8411144.html</guid>
<description>&lt;p&gt;keepalived与dr模式结合&lt;/p&gt;
&lt;h3 id=&quot;keepalived介绍&quot;&gt;keepalived介绍&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;keepalived可提供vrrp以及health-check功能，可以只用它提供双机浮动的vip（vrrp虚拟路由功能），
这样可以简单实现一个双机热备高可用功能；
keepalived是以VRRP虚拟路由冗余协议为基础实现高可用的，
可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，
这个组里面有一个master和多个backup，
master上面有一个对外提供服务的vip
（该路由器所在局域网内其他机器的默认路由为该vip），
master会发组播，当backup收不到VRRP包时就认为master宕掉了，
这时就需要根据VRRP的优先级来选举一个backup当master。
这样的话就可以保证路由器的高可用了。
keepalived可提供vrrp以及health-check功能，可以只用它提供双机浮动的vip（vrrp虚拟路由功能），
这样可以简单实现一个双机热备高可用功能；
keepalived是以VRRP虚拟路由冗余协议为基础实现高可用的，
可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，
这个组里面有一个master和多个backup，
master上面有一个对外提供服务的vip
（该路由器所在局域网内其他机器的默认路由为该vip），
master会发组播，当backup收不到VRRP包时就认为master宕掉了，
这时就需要根据VRRP的优先级来选举一个backup当master。
这样的话就可以保证路由器的高可用了。&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;keepalived实验&quot;&gt;keepalived实验&lt;/h3&gt;
&lt;h4 id=&quot;实验环境-4台虚拟机&quot;&gt;实验环境 4台虚拟机&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;dr1     192.168.1.135
dr2     192.168.1.106
rs1     192.168.1.190
rs2     192.168.1.187
VIP     192.168.1.180
为方便实验，建议关闭iptables，或者开通80端口

dr1和dr2安装ipvsadm和keepalived
yum install -y ipvsadm keepalived

real_server1和real_server2上安装nginx
开启80端口访问，区分两个real_server&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;实验操作&quot;&gt;实验操作&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;修改配置文件&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;修改dr1的keepalived配置文件&quot;&gt;1.修改dr1的keepalived配置文件&lt;/h5&gt;
&lt;p&gt;vim /etc/keepalived/keepalived.conf&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;! Configuration File for keepalived

global_defs {
   notification_email {    # 配置邮箱报警
     acassen@firewall.loc    # （如果要开启邮件报警，需要开启相应的sendmail服务）
     failover@firewall.loc
     sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 192.168.200.1    # 邮箱的服务器
   smtp_connect_timeout 30    # 邮箱连接设置
   router_id LVS_DEVEL    # 表示keepalived服务器的一个标识，是发邮件时显示在邮件主题中的信息
}

vrrp_instance VI_1 {    #定义一个vrrp组，组名唯一
    state MASTER        #定义改主机为keepalived的master主机
    interface eth0      #监控eth0号端口
    virtual_router_id 58   #虚拟路由id号为58，id号唯一，这个id决定了多播的MAC地址
    # （一组keepalived相同，多组不能相同）
    priority 150         #设置本节点的优先级，master的优先级 要比backup的优先级别高，数值要大
    # （一组中keepalived会检查此选项然后选举出一台服务器作为路由，配置vip）
    advert_int 1         #检查间隔，默认为1秒
    authentication {
        auth_type PASS    #认证方式，密码认证
        auth_pass 1111    #认证的密码，这个密码必须和backup上的一致
    }
    virtual_ipaddress {    #设置虚拟的ip， 这个ip是以后对外提供服务的ip。如果有多个VIP，继续换行填写.
        192.168.1.180
    }
}

virtual_server 192.168.1.180 80 {    #虚拟主机设置，ip同上。
    delay_loop 2                  #每隔2秒查询realserver状态
    lb_algo rr                    #lvs的调度算法
    lb_kind DR                    #lvs的集群模式
    nat_mask 255.255.255.0
    # persistence_timeout 50        #同一IP的连接50秒内被分配到同一台realserver
    # 测试的时候可以不用开
    protocol TCP                  #用TCP协议检查realserver状态

    real_server 192.168.1.187 80 {    #后端真实主机1
        weight 100                #每台机器的权重，0表示不给该机器转发请求，直到它恢复正常。
        TCP_CHECK {                #健康检查项目，以下
            connect_timeout 3
            nb_get_retry 3
            delay_before_retry 3
            connect_port  80
        }
    }

    real_server 192.168.1.190 80 {        #后端真实主机2
        weight 100                    #每台机器的权重，0表示不给该机器转发请求，直到它恢复正常。
        TCP_CHECK {                    #健康检查项目，以下
            connect_timeout 3
            nb_get_retry 3
            delay_before_retry 3
            connect_port  80
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;修改dr2上的keepalived配置文件&quot;&gt;2.修改dr2上的keepalived配置文件&lt;/h5&gt;
&lt;p&gt;vim /etc/keepalived/keepalived.conf&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;只要修改dr1上的配置内容
backup主机的配置和master的基本一样，只有以下地方需要修改。
state BACKUP        #定义改主机为keepalived的backup主机，监控主master
priority 100         #设置本节点的优先级，数值要比master主机上的小&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;配置real_server的dr脚本同dr模式脚本&quot;&gt;3.配置real_server的dr脚本（同dr模式脚本）&lt;/h5&gt;
&lt;p&gt;vim /usr/local/sbin/lvs_dr.sh&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#!/bin/bash
vip=192.168.1.180
ifconfig lo:0 $vip broadcast $vip netmask 255.255.255.255 up
/sbin/route add -host $vip lo:0
echo &quot;1&quot; &amp;gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
echo &quot;2&quot; &amp;gt;/proc/sys/net/ipv4/conf/lo/arp_announce
echo &quot;1&quot; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_ignore
echo &quot;2&quot; &amp;gt;/proc/sys/net/ipv4/conf/all/arp_announce
echo &quot;1&quot; &amp;gt; /proc/sys/net/ipv4/conf/eth0/arp_ignore
echo &quot;2&quot; &amp;gt; /proc/sys/net/ipv4/conf/eth0/arp_announce
echo &quot;1&quot; &amp;gt; /proc/sys/net/ipv4/conf/default/arp_ignore
echo &quot;2&quot; &amp;gt; /proc/sys/net/ipv4/conf/default/arp_announce&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;启动执行&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;将2台dr上的keepalived启动&quot;&gt;1.将2台dr上的keepalived启动&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;/etc/init.d/keepalived start&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;执行脚本&quot;&gt;2.执行脚本&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;sh /usr/local/sbin/lvs_dr.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;检查是否搭建成功&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;查看vip和ipvsadm&quot;&gt;查看VIP和ipvsadm&lt;/h5&gt;
&lt;pre&gt;
&lt;code&gt;通过检查网卡信息看vip绑定在哪台机器的网卡上
ip addr

[root@localhost ~]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:46:c8:ae brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.106/24 brd 192.168.1.255 scope global eth0
    inet 192.168.1.180/32 scope global eth0
    inet6 fe80::20c:29ff:fe46:c8ae/64 scope link 
       valid_lft forever preferred_lft forever&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;不要跟dr模式混乱，这里启动keepalived后不需要再执行dr模式下的lvs_dr.sh脚本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（注：如果发现rs没有轮询，注释掉keepalived.conf中persistence_timeout 50即可）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;A：dr1存活（正常轮询）
[root@151 ~]# curl 192.168.1.180
rs2 nginx
[root@151 ~]# curl 192.168.1.180
rs1 nginx
[root@151 ~]# curl 192.168.1.180
rs2 nginx

此时vip在135上

[root@localhost ~]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:46:c8:ae brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.106/24 brd 192.168.1.255 scope global eth0
    inet 192.168.1.180/32 scope global eth0
    inet6 fe80::20c:29ff:fe46:c8ae/64 scope link 
       valid_lft forever preferred_lft forever

B：dr1挂掉

停掉dr1的keepalived，vip自动绑定到dr2，keepalived搭建完成
[root@localhost ~]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:5a:c3:48 brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.135/24 brd 192.168.1.255 scope global eth1
    inet 192.168.1.180/32 scope global eth0
    inet6 fe80::20c:29ff:fe5a:c348/64 scope link 
       valid_lft forever preferred_lft forever


因为给192.168.1.106配置的priority优先级为150
而192.168.1.135的优先级是100
所以，当keepalived连接通信时（主从同时存在时），vip会在106上
而当106宕机时，vip会飘到135上
当重新启动106（启动106上的keepalived）等于重新做了keepalived主从
106因为优先级为150，所以又会重新获得vip&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;脑裂问题主从模式&quot;&gt;脑裂问题（主从模式）&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;上述主从配置方式存在脑裂的可能，
即两个节点实际都处于正常工作状态，但是无法接收到彼此的组播通知，
这时两个节点均强行绑定虚拟IP，导致不可预料的后果。 &lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;这就是我刚刚实验中说不需要执行dr模式下的lvs_dr.sh脚本，因为执行脚本后，主从同时获得vip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;这时就需要设置仲裁，即每个节点必须判断自身的状态（应用服务状态及自身网络状态），
要实现这两点可使用自定义shell脚本实现，通过周期性地检查自身应用服务状态，
并不断ping网关（或其它可靠的参考IP）均可。
当自身服务异常、或无法ping通网关，
则认为自身出现故障，就应该移除掉虚拟IP(停止keepalived服务即可）。
主要借助keepalived提供的vrrp_script及track_script实现：
（实验中没有添加这个）&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在keepalived的配置文件最前面加入以下代码，定义一个跟踪脚本：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vrrp_script check_local { #定义一个名称为check_local的检查脚本    
    script &quot;/usr/local/keepalived/bin/check_local.sh&quot; #shell脚本的路径    
    interval 5  #运行间隔    
}   &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再在vrrp_instance配置中加入以下代码使用上面定义的检测脚本：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;track_script {    
  check_local    
}   &lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;我们在/usr/local/keepalived/bin/check_local.sh定义的检测规则可以是： 
（以上的路径及文件是自己定义的。）

a.自身web服务故障（超时，http返回状态不是200）

b.无法ping通网关

c.产生以上任何一个问题，均应该移除本机的虚拟IP(停止keepalived实例即可)

但这里有个小问题，如果本机或是网关偶尔出现一次故障，那么我们不能认为是服务故障。
更好的做法是如果连续N次检测本机服务不正常或连接N次无法ping通网关，
才认为是故障产生，才需要进行故障转移。
另一方面，如果脚本检测到故障产生，并停止掉了keepalived服务，
那么当故障恢复后，keepalived是无法自动恢复的。
我觉得利用独立的脚本以秒级的间隔检查自身服务及网关连接性，
再根据故障情况控制keepalived的运行或是停止。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里提供一个思路，具体脚本内容请大家根据自己的需要编写即可。&lt;/p&gt;
&lt;h6 id=&quot;脚本-usrlocalnginxcheck_nginx.sh内容&quot;&gt;脚本 /usr/local/nginx/check_nginx.sh&quot;内容：&lt;/h6&gt;
&lt;pre&gt;
&lt;code&gt;#!/bin/bash    
if [ &quot;$(ps -ef | grep &quot;nginx: master process&quot;| grep -v grep )&quot; == &quot;&quot; ]    
    then    
    /usr/local/nginx/sbin/nginx    
    sleep 5    
    if [ &quot;$(ps -ef | grep &quot;nginx: master process&quot;| grep -v grep )&quot; == &quot;&quot; ]    
    then    
        killall keepalived    
    fi    
fi    &lt;/code&gt;
&lt;/pre&gt;
&lt;h6 id=&quot;vi-etckeepalivedkeepalived.conf&quot;&gt;vi /etc/keepalived/keepalived.conf&lt;/h6&gt;
&lt;pre&gt;
&lt;code&gt;global_defs {    
   router_id nginx_backup    
}
#监控服务.NGINX mysql等

vrrp_script chk_nginx {    
    script &quot;/usr/local/nginx/check_nginx.sh&quot;    
    interval 2    
    weight 2    
}    
    
vrrp_instance VI_1 {    
    state BACKUP    
    interface eth0    
    virtual_router_id 51    
    priority 99    
    advert_int 1    
    authentication {    
        auth_type PASS    
        auth_pass 1111    
    }    
    virtual_ipaddress {    
 192.168.xx.xx    #VIP（虚拟ip）  
 192.168.xx.xx    #主服务器IP  
 192.168.xx.xx    #从服务器IP  
 }   
track_script {   
chk_nginx #检测脚本 上面配置的   
}  
}  &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;keepalived健康检查方式&quot;&gt;keepalived健康检查方式&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;keepalived对后端realserver的健康检查方式主要有以下几种

TCP_CHECK：工作在第4层，keepalived向后端服务器发起一个tcp连接请求，
如果后端服务器没有响应或超时，那么这个后端将从服务器池中移除。

HTTP_GET：工作在第5层，向指定的URL执行http请求，
将得到的结果用md5加密并与指定的md5值比较看是否匹配，不匹配则从服务器池中移除；
此外还可以指定http返回码来判断检测是否成功。
HTTP_GET可以指定多个URL用于检测，这个一台服务器有多个虚拟主机的情况下比较好用。

SSL_GET：跟上面的HTTP_GET相似，不同的只是用SSL连接

MISC_CHECK：用脚本来检测，脚本如果带有参数，
需将脚本和参数放入双引号内。脚本的返回值需为：

0）  检测成功

1）  检测失败，将从服务器池中移除

2－255）检测成功；如果有设置misc_dynamic，权重自动调整为 退出码-2，
如退出码为200，权重自动调整为198=200-2。

SMTP_CHECK：用来检测邮件服务的smtp的&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;当把nginx与keepalived部署在同一台服务器上时&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;nginx做反向代理，keepalived做vip（重点还是nginx的反向代理）&lt;/p&gt;
&lt;h3 id=&quot;nginxkeepalived双主模式&quot;&gt;nginx+keepalived双主模式&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;注意：
配置中的虚拟路由标识virtual_router_id在MASTER和BACKUP处配置不能一样（但在主从模式下配置是一样的）

1）master负载机上的keepalived配置：
（注意，这里是双主配置，MASTER-BACKUP和BACKUP-MASTER;
如果是多主，比如三主，
就是MATER-BACKUP-BACKUP、BACKUP-MASTER-BACKUP和BACKUP-BACKUP-MASTER）&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;双主模式就是设置两个vrrp_instance VI_1和VI_2
vrrp_instance VI_1 {
state MASTER
virtual_router_id 51
priority 101
}

vrrp_instance VI_2 {
state BACKUP
virtual_router_id 52
priority 99
}

#在另一台机器上
vrrp_instance VI_1 {
state BACKUP
virtual_router_id 51
priority 99
}

vrrp_instance VI_2 {
state MASTER
virtual_router_id 52
priority 101
}

主要就是这三项的变化
同一个虚拟的vrrp_instance相同
然后互为主从，权限不同&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将nginx中配置的域名解析到这两个VIP地址上：(万网DNS解析配置)&lt;br/&gt;103.110.98.20 www.chenhaoran.com&lt;br/&gt;103.110.98.21 www.chenhaoran.com&lt;/p&gt;
&lt;p&gt;参考链接&lt;br/&gt;&lt;a href=&quot;http://blog.chinaunix.net/uid-10480699-id-5179873.html&quot; class=&quot;uri&quot;&gt;http://blog.chinaunix.net/uid-10480699-id-5179873.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://blog.csdn.net/qiandublog/article/details/52474450&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/qiandublog/article/details/52474450&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.keepalived.org/doc/introduction.html&quot; class=&quot;uri&quot;&gt;http://www.keepalived.org/doc/introduction.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐阅读&lt;br/&gt;&lt;a href=&quot;http://www.361way.com/keepalived-health-check/5218.html&quot; class=&quot;uri&quot;&gt;http://www.361way.com/keepalived-health-check/5218.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/kevingrace/p/6248941.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/kevingrace/p/6248941.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;双主模式参考&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/kevingrace/p/6146031.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/kevingrace/p/6146031.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 03 Feb 2018 15:02:00 +0000</pubDate>
<dc:creator>陈浩然MC</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/irockcode/p/8411144.html</dc:identifier>
</item>
<item>
<title>Spring依赖注入 - 不要乱摸</title>
<link>http://www.cnblogs.com/cjsblog/p/8411097.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cjsblog/p/8411097.html</guid>
<description>&lt;p&gt;&lt;span&gt;无论是基于注解的ApplicationContext（org.springframework.context.annotation.AnnotationConfigApplicationContext）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还是基于XML的ApplicationContext（org.springframework.context.support.ClassPathXmlApplicationContext）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它们在启动过程中都会调用org.springframework.context.support.AbstractApplicationContext#refresh方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;实例化Spring容器的核心方法是org.springframework.context.support.AbstractApplicationContext#refresh&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在这个refresh方法中会获取BeanFactory，默认的BeanFactory是org.springframework.beans.factory.support.DefaultListableBeanFactory&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/874963/201802/874963-20180203203626984-1286995754.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在AbstractApplicationContext#refresh()方法的最后会实例化容器中所有非懒加载的单例bean，它是通过调用getBean()方法来做的，下面从getBean()开始分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;getBean方法是在AbstractBeanFactory中定义的，而所有的getBean方法最终都是调的doGetBean方法&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;AbstractBeanFactory#getBean&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、调用doGetBean方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;AbstractBeanFactory#doGetBean&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、检查singleton缓存中是否有这个bean，如果有直接返回&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、检查父级BeanFactory中是否有这个bean，如果有直接返回&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、检查这个BeanDefinition是否有依赖，如果有，则递归的获取这些依赖的bean（PS：通过getBean方法）直到没有依赖为止&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、通过createBean方法创建bean&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;AbstractAutowireCapableBeanFactory#createBean&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、如果设置了BeanPostProcessor，则返回一个代理对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、调用doCreateBean方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;AbstractAutowireCapableBeanFactory#doCreateBean&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在这个方法中调用了两个特别重要的方法createBeanInstance和populateBean，前者用于实例化Bean，后者用于初始化Bean实例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/874963/201802/874963-20180203204334984-1026882873.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/874963/201802/874963-20180203204341859-1664992891.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/874963/201802/874963-20180203210518109-1593648520.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、如果指定了工厂方法的话，则用指定的工厂方法实例化Bean&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、如果构造函数使用了自动装配的话，则使用autowireConstructor实例化Bean&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、决定以使用带参数的构造方法实例化Bean&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、使用默认的构造方法实例化Bean&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、autowire constructor&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/874963/201802/874963-20180203213118234-1620507878.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、用默认的构造方法实例化的时候涉及到实例化策略，默认的策略是使用cglib，还有一种是使用反射&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/874963/201802/874963-20180203212931218-2046996278.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/874963/201802/874963-20180203213224625-1145154273.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#populateBean&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/874963/201802/874963-20180203214118734-441319458.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/874963/201802/874963-20180203220602296-1562690765.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这一步所做的事情就是找到那些需要注入的属性和它所对应的实例，然后将它设置到相应的属性上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还有一点是属性的类型可能有多种，每一种的取值方式都不一样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/874963/201802/874963-20180203224359015-1935824541.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 参考 &lt;/p&gt;
&lt;p&gt;http://blog.csdn.net/hotdust/article/details/52613221&lt;/p&gt;
&lt;p&gt;http://blog.csdn.net/lisongjia123/article/details/52134396&lt;/p&gt;
</description>
<pubDate>Sat, 03 Feb 2018 14:48:00 +0000</pubDate>
<dc:creator>不要乱摸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cjsblog/p/8411097.html</dc:identifier>
</item>
<item>
<title>python并发编程之多进程（理论） - 人生不如戏</title>
<link>http://www.cnblogs.com/fu-yong/p/8411083.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fu-yong/p/8411083.html</guid>
<description>&lt;h2&gt;一、什么是进程&lt;/h2&gt;
&lt;p&gt;进程：正在进行的一个过程或者说一个任务。而负责执行任务则是cpu。&lt;/p&gt;
&lt;h2&gt;二、进程与程序的区别&lt;/h2&gt;
&lt;p&gt;程序：仅仅是一堆代&lt;/p&gt;
&lt;p&gt;进程：是指打开程序运行的过程&lt;/p&gt;
&lt;h2&gt;三、并发与并行&lt;/h2&gt;
&lt;p&gt;并发与并行是指cpu运行多个程序的方式&lt;/p&gt;
&lt;p&gt;不管是并行与并发，在用户看起来都是‘同时’运行的，他们都只是一个任务而已，正在干活的是cpu，而一个cpu只能执行一个任务。&lt;/p&gt;
&lt;p&gt;并行就相当于有好多台设备，可以同时供好多人使用。&lt;/p&gt;
&lt;p&gt;而并发就相当于只有一台设备，供几个人轮流用，每个人用一会就换另一个人。&lt;/p&gt;
&lt;p&gt;所以只有多个cpu才能实现并行，而一个cpu只能实现实现并发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1299859/201802/1299859-20180203215453218-343170229.png&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;464&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示：&lt;/p&gt;
&lt;p&gt;串行：执行完A，再执行B，再执行C&lt;/p&gt;
&lt;p&gt;并行：同时执行ABC&lt;/p&gt;
&lt;p&gt;并发：交替执行ABC&lt;/p&gt;
&lt;h2&gt;四、同步\异步&lt;/h2&gt;
&lt;p&gt;并发与并行是指cpu运行多个程序的方式，而同步和异步是指一个程序的执行过程&lt;/p&gt;
&lt;p&gt; 同步：所谓同步，就是在发出一个功能调用时，在没有得到结果之前，该调用就不会返回。&lt;/p&gt;
&lt;p&gt;            按照这个定义，其实大部分函数都是同步调用，但是一般而言，我们说同步和异步的时候，&lt;/p&gt;
&lt;p&gt;            特指哪些需要其他部件协作或者需要一定时间完成的任务&lt;/p&gt;
&lt;p&gt;异步：异步的概念和同步相对，当一个异步功能调用发出后，调用者不能立即得到结果&lt;/p&gt;
&lt;p&gt;当该异步功能完成后，通过状态。通知或回调来通知调用者。如果异步功能用状态来通知，那么&lt;/p&gt;
&lt;p&gt;调用者就需要每隔一定时间检查一次，效率就回很低，如果使用通知的方式，效率就回很高，&lt;/p&gt;
&lt;p&gt;因为异步功能几乎不需要做额外的操作，至于回调函数，其实和通知没太大区别。&lt;/p&gt;
&lt;h2&gt;五、阻塞\非阻塞&lt;/h2&gt;
&lt;p&gt;阻塞：阻塞调用是指调用结果返回之前，当前线程会被挂起（如遇到IO操作）。&lt;/p&gt;
&lt;p&gt;　　　函数只有得到结果之后才会被阻塞的线程激活。&lt;/p&gt;
&lt;p&gt;非阻塞：非阻塞和阻塞的概念相对，指在不能立即得到结果之前也会立即返回，同时该函数不会阻塞当前线程&lt;/p&gt;

&lt;p&gt;小结：同步与异步针对的是函数\任务的调用方式：同步就是当一个进程发起一个函数调用的时候，一直等到函数\任务完成，&lt;/p&gt;
&lt;p&gt;而进程继续处于激活状态。而异步情况下是当一个进程发起一个函数|任务调用的时候，不会等函数返回，而继续往下执行，&lt;/p&gt;
&lt;p&gt;函数返回的时候通过状态、通知、时间等方式通知进程任务完成&lt;/p&gt;
&lt;p&gt;　　　而阻塞和非阻塞是针对进程或者线程，阻塞是当请求不能满足的时候就挂起，而非阻塞则不会阻塞当前的进程&lt;/p&gt;
&lt;h2&gt;六、进程的创建与终止（了解）&lt;/h2&gt;
&lt;p&gt;进程的创建：&lt;/p&gt;
&lt;p&gt;　　但凡是硬件，都需要有操作系统去管理，只要有操作系统，就有进程的概念，就需要有创建进程的方式，一些操作系统只为一个应用程序设计，比如微波炉中的控制器，一旦启动微波炉，所有的进程都已经存在。&lt;/p&gt;
&lt;p&gt;　　而对于通用系统（跑很多应用程序），需要有系统运行过程中创建或撤销进程的能力，主要分为4中形式创建新的进程&lt;/p&gt;
&lt;p&gt;　　1. 系统初始化（查看进程linux中用ps命令，windows中用任务管理器，前台进程负责与用户交互，后台运行的进程与用户无关，运行在后台并且只在需要时才唤醒的进程，称为守护进程，如电子邮件、web页面、新闻、打印）&lt;/p&gt;
&lt;p&gt;　　2. 一个进程在运行过程中开启了子进程（如nginx开启多进程，os.fork,subprocess.Popen等）&lt;/p&gt;
&lt;p&gt;　　3. 用户的交互式请求，而创建一个新进程（如用户双击暴风影音）&lt;/p&gt;
&lt;p&gt;　　4. 一个批处理作业的初始化（只在大型机的批处理系统中应用）&lt;/p&gt;

&lt;p&gt;　　无论哪一种，新进程的创建都是由一个已经存在的进程执行了一个用于创建进程的系统调用而创建的：&lt;/p&gt;
&lt;p&gt;　　1. 在UNIX中该系统调用是：fork，fork会创建一个与父进程一模一样的副本，二者有相同的存储映像、同样的环境字符串和同样的打开文件（在shell解释器进程中，执行一个命令就会创建一个子进程）&lt;/p&gt;
&lt;p&gt;　　2. 在windows中该系统调用是：CreateProcess，CreateProcess既处理进程的创建，也负责把正确的程序装入新进程。&lt;/p&gt;

&lt;p&gt;　　关于创建的子进程，UNIX和windows&lt;/p&gt;
&lt;p&gt;　　1.相同的是：进程创建后，父进程和子进程有各自不同的地址空间（&lt;strong&gt;多道技术要求物理层面实现进程之间内存的隔离&lt;/strong&gt;），任何一个进程的在其地址空间中的修改都不会影响到另外一个进程。&lt;/p&gt;
&lt;p&gt;　　2.不同的是：在UNIX中，子进程的初始地址空间是父进程的一个副本，提示：子进程和父进程是可以有只读的共享内存区的。但是对于windows系统来说，从一开始父进程与子进程的地址空间就是不同的。&lt;/p&gt;
&lt;p&gt;进程的终止：&lt;/p&gt;
&lt;p&gt;　　1. 正常退出（自愿，如用户点击交互式页面的叉号，或程序执行完毕调用发起系统调用正常退出，在linux中用exit，在windows中用ExitProcess）&lt;/p&gt;
&lt;p&gt;　　2. 出错退出（自愿，python a.py中a.py不存在）&lt;/p&gt;
&lt;p&gt;　　3. 严重错误（非自愿，执行非法指令，如引用不存在的内存，1/0等，可以捕捉异常，try...except...）&lt;/p&gt;
&lt;p&gt;　　4. 被其他进程杀死（非自愿，如kill -9）&lt;/p&gt;
&lt;h2&gt;七、进程的层次结构&lt;/h2&gt;
&lt;p&gt;无论UNIX还是windows，进程只有一个父进程，不同的是：&lt;/p&gt;
&lt;p&gt;　　1. 在UNIX中所有的进程，都是以init进程为根，组成树形结构。父子进程共同组成一个进程组，这样，当从键盘发出一个信号时，该信号被送给当前与键盘相关的进程组中的所有成员。&lt;/p&gt;
&lt;p&gt;　　2. 在windows中，没有进程层次的概念，所有的进程都是地位相同的，唯一类似于进程层次的暗示，是在创建进程时，父进程得到一个特别的令牌（&lt;strong&gt;称为句柄&lt;/strong&gt;）,该句柄可以用来控制子进程，但是父进程有权把该句柄传给其他子进程，这样就没有层次了。&lt;/p&gt;
&lt;h2&gt;八、进程的状态&lt;/h2&gt;
&lt;p&gt;　其实在两种情况下会导致一个进程在逻辑上不能运行，&lt;/p&gt;
&lt;p&gt;　　1. 进程挂起是自身原因，遇到I/O阻塞，便要让出CPU让其他进程去执行，这样保证CPU一直在工作&lt;/p&gt;
&lt;p&gt;　　2. 与进程无关，是操作系统层面，可能会因为一个进程占用时间过多，或者优先级等原因，而调用其他的进程去使用CPU。&lt;/p&gt;
&lt;p&gt;　　因而一个进程由三种状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1299859/201802/1299859-20180203224341359-364060087.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; &lt;/h2&gt;
</description>
<pubDate>Sat, 03 Feb 2018 14:45:00 +0000</pubDate>
<dc:creator>人生不如戏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fu-yong/p/8411083.html</dc:identifier>
</item>
<item>
<title>DNS服务器解析域名的过程 - tele</title>
<link>http://www.cnblogs.com/tele-share/p/8411041.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tele-share/p/8411041.html</guid>
<description>&lt;p&gt;最近在读许令波老师的《深入分析Java Web技术内幕》,算是对DNS服务器域名解析有个大体的理解,以下的内容来自个人对书中内容的整理&lt;/p&gt;
&lt;p&gt;1.什么是域名解析?&lt;/p&gt;
&lt;p&gt;当我们在浏览器的地址栏输入一个地址时,如www.xxxx.com,之后就可以跳转到对应的页面,但是为什么呢?要知道机器是只认识IP地址的,&lt;/p&gt;
&lt;p&gt;他并不理解我们输入的www这种格式是什么意思,这个时候时候就要用到域名解析了&lt;/p&gt;
&lt;p&gt;2.域名解析的步骤&lt;/p&gt;
&lt;p&gt;首先粗略的说,域名解析就是通过DNS把www.xxxx.com这种格式的域名解析成一个IP地址,之后通过IP地址找到对应的服务器,当然后面就是浏览器请求数据了,&lt;/p&gt;
&lt;p&gt;这不是咱们的关注点.接下来详细的讲解具体的解析过程&lt;/p&gt;
&lt;p&gt;①用户输入一个域名,浏览器去自己的缓存中寻找是否有对应的解析过的IP地址(这个缓存有大小和时间限制,),没有转入下一步&lt;/p&gt;
&lt;p&gt;②浏览器检查操作系统的缓存(有大小和时间限制)中是否有这个域名解析过的结果,在我们常说的host文件(c:/windows/system32/etc)中可以看到&lt;/p&gt;
&lt;p&gt;localhost被解析成127.0.0.1,这也是为什么你用tomcat部署web项目后,用浏览器访问总是要输入localhost,当然我更习惯直接输入&lt;/p&gt;
&lt;p&gt;127.0.0.1:端口/项目名/xxx这种,因为你的host文件有时会被恶意更改(拓展点说叫做域名劫持),这样你输入localhost就无法被解析了&lt;/p&gt;
&lt;p&gt;如果这一步还没有找到域名对应的IP,转入下一步&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1161886/201802/1161886-20180203220500593-366672417.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③浏览器向LDNS发送请求,L代表local,所以LDNS也就是本地的域名解析器,同样的在自己的缓存里找,没找到向根域名服务器(Root Server)发送请求&lt;/p&gt;
&lt;p&gt;④根域名服务器返回给LDNS一个主域名服务器地址(gTLD Server),比如我们输入的含有.com的域名,那么返回的这个就是com的主域名服务器地址&lt;/p&gt;
&lt;p&gt;⑤接下来LDNS向gTLD Server发送请求,后者返回给前者此域名对应的Name Server域名服务器的地址&lt;/p&gt;
&lt;p&gt;⑥然后LDNS向Name Server发送请求,Name Server对此域名进行解析(查询域名与IP地址的映射表.一个IP地址可能对应多个域名)&lt;/p&gt;
&lt;p&gt;⑦NameServer返回解析结果给LDNS,LDNS将结果反馈给浏览器&lt;/p&gt;
&lt;p&gt;⑧浏览器通过此IP地址与默认的80端口与服务器建立连接,进行数据交互&lt;/p&gt;
&lt;p&gt;总结:可以看到在域名解析的过程中,LDNS处于一个中心节点的位置,对根服务器发送请求后获得数据再向主域名服务器发送数据.......&lt;/p&gt;
&lt;p&gt;贴下书中的图吧&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1161886/201802/1161886-20180203223249875-797485294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 03 Feb 2018 14:34:00 +0000</pubDate>
<dc:creator>tele</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tele-share/p/8411041.html</dc:identifier>
</item>
</channel>
</rss>