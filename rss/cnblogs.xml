<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Solr+Tomcat+zookeeper部署实战 - Sunzz</title>
<link>http://www.cnblogs.com/Sunzz/p/8674450.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Sunzz/p/8674450.html</guid>
<description>&lt;h2&gt;一 、安装solr&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;环境说明：centos 7.3，solr 6.6，zookeeper3.4，Tomcat8.5，&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;jdk1.8&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;2.0547945205479&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;zookeeper的部署请参考：&lt;a href=&quot;http://www.cnblogs.com/Sunzz/p/8464284.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/Sunzz/p/8464284.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;1. 在/opt/下解压tomcat、solr&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# &lt;span&gt;tar&lt;/span&gt; -xf apache-tomcat-&lt;span&gt;8.5&lt;/span&gt;.&lt;span&gt;23&lt;/span&gt;.&lt;span&gt;tar&lt;/span&gt;.gz -C /opt/&lt;span&gt;
[root@solr_1 &lt;/span&gt;~]# &lt;span&gt;tar&lt;/span&gt; -xf solr-&lt;span&gt;6.6&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;.tgz    -C /opt/&lt;span&gt;
[root@solr_1 &lt;/span&gt;~]# cd  /&lt;span&gt;opt
[root@solr_1 opt]# &lt;/span&gt;&lt;span&gt;ln&lt;/span&gt; -sv apache-tomcat-&lt;span&gt;8.5&lt;/span&gt;.&lt;span&gt;23&lt;/span&gt;&lt;span&gt; tomcat
[root@solr_1 opt]# &lt;/span&gt;&lt;span&gt;ln&lt;/span&gt; -sv solr-&lt;span&gt;6.6&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt; solr
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 将solr-6.6.0/server/solr-webapp/webapp复制到tomcat/webapps下，并改名为solr&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@solr_1 ~]# cp -r /opt/solr/server/solr-webapp/webapp/ /opt/tomcat/webapps/
[root@solr_1 ~]# mv /opt/tomcat/webapps/webapp  /opt/tomcat/webapps/solr
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. 复制所需jar包到tomcat中solr项目的lib下&lt;/h3&gt;
&lt;p&gt;①　将solr-6.6.0/server/lib/ext下的jar、&lt;/p&gt;
&lt;p&gt;②　将solr-6.6.0/server/lib下以metrics开头的5个jar（metrics-core-3.2.2.jar、metrics-ganglia-3.2.2.jar、metrics-graphite-3.2.2.jar、metrics-jetty9-3.2.2.jar、metrics-jvm-3.2.2.jar）、&lt;/p&gt;
&lt;p&gt;③　将solr-6.6.0/dist/下的solr-dataimporthandler-6.6.0.jar和solr-dataimporthandler-extras-6.6.0.jar&lt;/p&gt;
&lt;p&gt;拷贝到apache-tomcat-8.5.20/webapps/solr/WEB-INF/lib下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# &lt;span&gt;cp&lt;/span&gt;  /opt/solr/server/lib/ext&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.jar /opt/solr/server/lib/metrics*.jar  /opt/solr/dist/solr-dataimporthandler-*.jar   /opt/tomcat/webapps/solr/WEB-INF/lib/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4. 将solr-6.6.0/server/solr下的文件拷贝至新建的solr-home下&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# &lt;span&gt;mkdir&lt;/span&gt; /opt/solr/solr-&lt;span&gt;home
[root@solr_1 &lt;/span&gt;~]#  &lt;span&gt;cp&lt;/span&gt; -r /opt/solr/server/solr&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; /opt/solr/solr-home/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;5. 修改apache-tomcat-8.5.20/webapps/solr/WEB-INF下的web.xml&lt;/h3&gt;
&lt;p&gt;①　找到&amp;lt;env-entry&amp;gt;，解开注释，并修改env-entry-value为solr-home的路径&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# vim /opt/tomcat/webapps/solr/WEB-INF/web.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;p&gt;修改后&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:false;&quot;&gt;
&amp;lt;env-entry&amp;gt;
       &amp;lt;env-entry-name&amp;gt;solr/home&amp;lt;/env-entry-name&amp;gt;
       &amp;lt;env-entry-value&amp;gt;/opt/solr/solr-home&amp;lt;/env-entry-value&amp;gt;
       &amp;lt;env-entry-type&amp;gt;Java.lang.String&amp;lt;/env-entry-type&amp;gt;
 &amp;lt;/env-entry&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;②　去掉权限，不然访问solr会出现没有授权的错误，将两个security-constraint标签注释。&lt;/p&gt;
&lt;p&gt;修改后：&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:false;&quot;&gt;
&amp;lt;!-- 
&amp;lt;security-constraint&amp;gt;
    &amp;lt;web-resource-collection&amp;gt;
      &amp;lt;web-resource-name&amp;gt;Disable TRACE&amp;lt;/web-resource-name&amp;gt;
      &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
      &amp;lt;http-method&amp;gt;TRACE&amp;lt;/http-method&amp;gt;
    &amp;lt;/web-resource-collection&amp;gt;
    &amp;lt;auth-constraint/&amp;gt;
  &amp;lt;/security-constraint&amp;gt;
  &amp;lt;security-constraint&amp;gt;
    &amp;lt;web-resource-collection&amp;gt;
      &amp;lt;web-resource-name&amp;gt;Enable everything but TRACE&amp;lt;/web-resource-name&amp;gt;
      &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
      &amp;lt;http-method-omission&amp;gt;TRACE&amp;lt;/http-method-omission&amp;gt;
    &amp;lt;/web-resource-collection&amp;gt;
  &amp;lt;/security-constraint&amp;gt;
--&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;6. 在/opt/tomcat/webapps/solr/WEB-INF/下创建classes文件夹&lt;/h3&gt;
&lt;p&gt;并将solr-6.6.0/server/resources/log4j.properties拷贝过去&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# cd /opt/tomcat/webapps/solr/WEB-INF/&lt;span&gt;
[root@ WEB&lt;/span&gt;-INF]# &lt;span&gt;mkdir&lt;/span&gt;&lt;span&gt; classes
[root@ WEB&lt;/span&gt;-INF]# &lt;span&gt;cp&lt;/span&gt; -rf /opt/solr/server/resources/log4j.properties ./classes/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;7. 在solr-home目录下,新建collection1文件夹&lt;/h3&gt;
&lt;p&gt;并将 /solr-6.6.0/server/solr/configsets/basic_configs中conf文件夹复制到新建的collection1文件夹中.在collection1目录下新建data文件夹.&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
[root@solr_1 ~]# mkdir /opt/solr/solr-home/collection1
[root@solr_1 ~]# cp -r /opt/solr/server/solr/configsets/basic_configs/conf/ /opt/solr/solr-home/collection1/
[root@solr_1 ~]# mkdir  /opt/solr/solr-home/collection1/data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;collection1中创建文件core.properties,写入内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:false;&quot;&gt;
[root@solr_1 ~]# vim  /opt/solr/solr-home/collection1/core.properties
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;name&lt;/span&gt;=&lt;span&gt;collection1
config&lt;/span&gt;=&lt;span&gt;solrconfig.xml
schema&lt;/span&gt;=managed-&lt;span&gt;schema
dataDir&lt;/span&gt;=data
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;8. 修改solr的端口与tomcat相同&lt;/h3&gt;
&lt;p&gt;修改/usr/local/solr/solr-home/solr.xml中的&lt;/p&gt;
&lt;p&gt;&amp;lt;int name=&quot;hostPort&quot;&amp;gt;${jetty.port:8080}&amp;lt;/int&amp;gt;&lt;/p&gt;
&lt;h3&gt;9. 启动tomcat&lt;/h3&gt;
&lt;p&gt;在浏览器输入地址：http://192.168.29.110:8080/solr/index.html&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330100633361-1306133873.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;二 、配置IKAnalyzer分词&lt;/h2&gt;
&lt;h3&gt;1. 解压ikanalyzer-solr6.5.zip&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# &lt;span&gt;unzip&lt;/span&gt; ikanalyzer-solr6.&lt;span&gt;5&lt;/span&gt;.&lt;span&gt;zip&lt;/span&gt;&lt;span&gt;
[root@solr_1 &lt;/span&gt;~]# &lt;span&gt;mv&lt;/span&gt; ikanalyzer-solr6.&lt;span&gt;5&lt;/span&gt; /opt/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把ext.dic、IKAnalyzer.cfg.xml和stopword.dic复制到apache-tomcat-8.5.20\webapps\solr\WEB-INF\classes中，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# &lt;span&gt;mkdir&lt;/span&gt; /opt/tomcat/webapps/solr/WEB-INF/&lt;span&gt;classes
[root@solr_1 &lt;/span&gt;~]# &lt;span&gt;cp&lt;/span&gt; /opt/ikanalyzer-solr6.&lt;span&gt;5&lt;/span&gt;/ikanalyzer-solr5/ext.dic /opt/ikanalyzer-solr6.&lt;span&gt;5&lt;/span&gt;/ikanalyzer-solr5/IKAnalyzer.cfg.xml /opt/ikanalyzer-solr6.&lt;span&gt;5&lt;/span&gt;/ikanalyzer-solr5/stopword.dic  /opt/tomcat/webapps/solr/WEB-INF/classes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把ik-analyzer-solr5-5.x.jar 和 solr-analyzer-ik-5.1.0.jar复制到apache-tomcat-8.5.20/webapps/solr/WEB-INF/lib中；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# &lt;span&gt;cp&lt;/span&gt; /opt/ikanalyzer-solr6.&lt;span&gt;5&lt;/span&gt;/ikanalyzer-solr5&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;.jar  /opt/tomcat/webapps/solr/WEB-INF/lib/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 打开solr-home/collection1/conf下的managed-schema文件&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# vim /opt/solr/solr-home/collection1/conf/managed-schema
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在&amp;lt;/schema&amp;gt;前加入配置：&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 &amp;lt;!-- IK分词 --&amp;gt;
&amp;lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&amp;gt;
&amp;lt;analyzer type=&quot;index&quot;&amp;gt;
&amp;lt;tokenizer class=&quot;org.apache.lucene.analysis.ik.IKTokenizerFactory&quot; useSmart=&quot;false&quot;/&amp;gt;
&amp;lt;/analyzer&amp;gt;
&amp;lt;analyzer type=&quot;query&quot;&amp;gt;
&amp;lt;tokenizer class=&quot;org.apache.lucene.analysis.ik.IKTokenizerFactory&quot; useSmart=&quot;true&quot;/&amp;gt;
&amp;lt;/analyzer&amp;gt;
&amp;lt;/fieldType&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;3. 重启tomcat&lt;/h3&gt;
&lt;p&gt;进入http://192.168.29.110:8080/solr/index.html进行确认。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330100742180-539219645.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;三 拼音配置&lt;/h2&gt;
&lt;h3&gt;1.复制相关jar文件&lt;/h3&gt;
&lt;p&gt;将pinyinTokenFilter-1.1.0-RELEASE.jar和pinyinAnalyzer4.3.1.jar和pinyin4j-2.5.0.jar复制到apache-tomcat-8.5.20/webapps/solr/WEB-INF/lib目录下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# &lt;span&gt;cp&lt;/span&gt;  /opt/ikanalyzer-solr6.&lt;span&gt;5&lt;/span&gt;/pinyin*  /opt/tomcat/webapps/solr/WEB-INF/lib/
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 修改solr-home/collection1/conf下的managed-schema文件&lt;/h3&gt;
&lt;p&gt;（修改后）&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;!-- IK分词 --&amp;gt;
&amp;lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&amp;gt;
&amp;lt;analyzer type=&quot;index&quot;&amp;gt;
&amp;lt;tokenizer class=&quot;org.apache.lucene.analysis.ik.IKTokenizerFactory&quot; useSmart=&quot;false&quot;/&amp;gt;
&amp;lt;filter class=&quot;top.pinyin.index.solr.PinyinTokenFilterFactory&quot; pinyin=&quot;true&quot; isFirstChar=&quot;true&quot; minTermLenght=&quot;2&quot; /&amp;gt;
&amp;lt;filter class=&quot;com.shentong.search.analyzers.PinyinNGramTokenFilterFactory&quot; minGram=&quot;2&quot; maxGram=&quot;20&quot; /&amp;gt;
&amp;lt;/analyzer&amp;gt;
&amp;lt;analyzer type=&quot;query&quot;&amp;gt;
&amp;lt;tokenizer class=&quot;org.apache.lucene.analysis.ik.IKTokenizerFactory&quot; useSmart=&quot;true&quot;/&amp;gt;
&amp;lt;/analyzer&amp;gt;
&amp;lt;/fieldType&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;（上方标红的为添加内容）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重启tomcat，测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330100919673-667458843.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;四、同义词&lt;/h2&gt;
&lt;h3&gt;1. 修改managed-schema文件中的ik分词配置&lt;/h3&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&amp;gt;
   &amp;lt;analyzer type=&quot;index&quot;&amp;gt;
      &amp;lt;tokenizer class=&quot;org.apache.lucene.analysis.ik.IKTokenizerFactory&quot; useSmart=&quot;false&quot;/&amp;gt;
      &amp;lt;filter class=&quot;top.pinyin.index.solr.PinyinTokenFilterFactory&quot; pinyin=&quot;true&quot; isFirstChar=&quot;true&quot; minTermLenght=&quot;2&quot;/&amp;gt;
      &amp;lt;filter class=&quot;com.shentong.search.analyzers.PinyinNGramTokenFilterFactory&quot; minGram=&quot;2&quot; maxGram=&quot;20&quot;/&amp;gt;
      &amp;lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&amp;gt;
   &amp;lt;/analyzer&amp;gt;
   &amp;lt;analyzer type=&quot;query&quot;&amp;gt;
      &amp;lt;tokenizer class=&quot;org.apache.lucene.analysis.ik.IKTokenizerFactory&quot; useSmart=&quot;true&quot;/
      &amp;lt;filter class=&quot;solr.SynonymFilterFactory&quot; synonyms=&quot;synonyms.txt&quot; ignoreCase=&quot;true&quot; expand=&quot;true&quot;/&amp;gt;
      &amp;lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&amp;gt;
   &amp;lt;/analyzer&amp;gt;
&amp;lt;/fieldType&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;2. 在solr-home\collection1\conf\synonyms.txt中添加同义词&lt;/h3&gt;
&lt;div readability=&quot;52.5&quot;&gt;
&lt;p&gt;hell,二是&lt;/p&gt;
&lt;p&gt;诛仙,诛仙2,梦幻诛仙&lt;/p&gt;
&lt;h2&gt;五、联想词&lt;/h2&gt;
&lt;h3&gt;1. 添加联想类型&lt;/h3&gt;
&lt;p&gt;首先需要加上用以联想的字段，这里假设我们对name字段进行联想，配置如下（managed-schema文件）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;field name=&quot;name&quot; type=&quot;text_ik&quot; multiValued=&quot;false&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&amp;gt;
&amp;lt;field name=&quot;suggestion&quot; type=&quot;text_suggest&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;true&quot; /&amp;gt; 
&amp;lt;copyField source=&quot;name&quot; dest=&quot;suggestion&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;suggestion字段即为suggest联想所取的字段。这里将suggestion字段设为text_suggest类型，text_suggest是一个自定义的类型，具体作用和配置后面再说。然后利用copyField将name字段拷贝到suggestion字段。那么为什么我们不直接对name字段进行联想，而是专门建立一个字段把name字段拷贝过去，乃至专门建立了一个字段类型呢？在配置中我们可以看到，name字段采用了IKAnalyzer进行了中文分词，如果我们直接对name字段进行分词，则联想出来的就会是分词之后的结果。例如期望联想的记录是“先吃水果然后吃雪糕”，最后联想出来的却是“先吃”。&lt;/p&gt;
&lt;h3&gt;2. 配置联想字段&lt;/h3&gt;
&lt;p&gt;接下来就需要建立一个专门的字段类型来配合suggest模块进行检察建议了。这里该字段名称为text_suggest，配置如下（managed-schema文件）：&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:false;&quot;&gt;
&amp;lt;fieldType name=&quot;text_suggest&quot; class=&quot;solr.TextField&quot;&amp;gt;
   &amp;lt;analyzer type=&quot;index&quot;&amp;gt;
     &amp;lt;tokenizer class=&quot;solr.KeywordTokenizerFactory&quot;/&amp;gt;
     &amp;lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&amp;gt;
   &amp;lt;/analyzer&amp;gt;
   &amp;lt;analyzer type=&quot;query&quot;&amp;gt;
     &amp;lt;tokenizer class=&quot;solr.KeywordTokenizerFactory&quot;/&amp;gt;
     &amp;lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&amp;gt;
   &amp;lt;/analyzer&amp;gt;
&amp;lt;/fieldType&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在这里我们要对整个字段进行联想，因此采用KeywordTokenizerFactory作为分词器，并且使用LowerCaseFilterFactory来保证其可以不区分大小写。可以根据需要替换成自己需要的analyzer。&lt;/p&gt;
&lt;h3&gt;3. suggest模块配置&lt;/h3&gt;
&lt;p&gt;现在我们的记录表结构已经建立好了，下面我们进行suggest模块的配置。&lt;/p&gt;
&lt;p&gt;首先我们来添加suggest模块。编辑solrconfig.xml文件，添加如下配置：&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;searchComponent name=&quot;suggest&quot; class=&quot;solr.SuggestComponent&quot;&amp;gt;
        &amp;lt;lst name=&quot;suggester&quot;&amp;gt;
            &amp;lt;str name=&quot;name&quot;&amp;gt;suggest&amp;lt;/str&amp;gt;
            &amp;lt;str name=&quot;lookupImpl&quot;&amp;gt;AnalyzingLookupFactory&amp;lt;/str&amp;gt;
            &amp;lt;str name=&quot;dictionaryImpl&quot;&amp;gt;DocumentDictionaryFactory&amp;lt;/str&amp;gt;
            &amp;lt;str name=&quot;field&quot;&amp;gt;suggestion&amp;lt;/str&amp;gt;
            &amp;lt;str name=&quot;suggestAnalyzerFieldType&quot;&amp;gt;text_suggest&amp;lt;/str&amp;gt;
            &amp;lt;str name=&quot;buildOnStartup&quot;&amp;gt;false&amp;lt;/str&amp;gt;
        &amp;lt;/lst&amp;gt;
&amp;lt;/searchComponent&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/span&gt;：在本配置中&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
　　name为该suggest模块的名字；
　　lookUpImpl为查找器，默认为JaspellLookupFactory；
　　dictionaryImpl为字典实现；
　　field为要联想的字段；
　　suggestAnalyzerFieldType规定了进行联想操作所使用类型所对应的Analyzer（该字段必填）；
　　buildOnStartup表示是否在启动时建立索引。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体配置信息详见https://cwiki.apache.org/confluence/display/solr/Suggester。&lt;/p&gt;
&lt;h3&gt;4. requestHandler配置&lt;/h3&gt;
&lt;p&gt;接下来我们需要配置suggest模块的requestHandler。编辑solrconfig.xml文件，添加如下配置：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;requestHandler name=&quot;/suggest&quot; class=&quot;org.apache.solr.handler.component.SearchHandler&quot;&amp;gt;
        &amp;lt;lst name=&quot;defaults&quot;&amp;gt;
            &amp;lt;str name=&quot;suggest&quot;&amp;gt;true&amp;lt;/str&amp;gt;
            &amp;lt;str name=&quot;suggest.dictionary&quot;&amp;gt;suggest&amp;lt;/str&amp;gt;
            &amp;lt;str name=&quot;suggest.count&quot;&amp;gt;10&amp;lt;/str&amp;gt;
        &amp;lt;/lst&amp;gt;
        &amp;lt;arr name=&quot;components&quot;&amp;gt;
            &amp;lt;str&amp;gt;suggest&amp;lt;/str&amp;gt;
        &amp;lt;/arr&amp;gt;
    &amp;lt;/requestHandler&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;下面解释配置中涉及到的参数。suggest参数不用说了，必须为true；&lt;/p&gt;
&lt;p&gt;suggest.dictionary为suggest操作所需要用到的字典，应当与上面suggest模块配置中的name属性保持一致；&lt;/p&gt;
&lt;p&gt;suggest.count为候选词数量，这里为10。&lt;/p&gt;
&lt;p&gt;具体配置可在solr官网中找到:https://lucene.apache.org/solr/guide/6_6/suggester.html&lt;/p&gt;
&lt;h3&gt;5. 建立索引&lt;/h3&gt;
&lt;p&gt;这里我们就已经把suggest模块配置完毕了。如果suggest模块配置中buildOnStartup设置为false，则需要手动建立一次索引。建立索引链接形如：&lt;/p&gt;
&lt;p&gt;http://192.168.29.110:8080/solr/collection1/suggest?suggest=true&amp;amp;suggest.dictionary=suggest&amp;amp;wt=json&amp;amp;suggest.q=Ath&amp;amp;suggest.build=true&lt;/p&gt;
&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330101039895-1858371392.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h3&gt;6. 测试&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330101112747-278835676.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;六、集成zookeeper&lt;/h2&gt;
&lt;p&gt;本实例采用zookeeper3.4.10&lt;/p&gt;
&lt;h3&gt;1. 把solrhome中的配置文件上传到zookeeper集群&lt;/h3&gt;
&lt;p&gt;使用:zookeeper的客户端上传。   &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# cd /opt/solr/server/scripts/cloud-scripts/&lt;span&gt;
[root@solr_1 cloud&lt;/span&gt;-scripts]# ./zkcli.&lt;span&gt;sh&lt;/span&gt; -zkhost &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;29.110&lt;/span&gt;:&lt;span&gt;2181&lt;/span&gt;,&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;29.120&lt;/span&gt;:&lt;span&gt;2181&lt;/span&gt;,&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;29.130&lt;/span&gt;:&lt;span&gt;2181&lt;/span&gt; -cmd upconfig -confdir /opt/solr/solr-home/core_shopdemo_product2/conf/ -confname myconf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看配置文件是否上传成功：&lt;/p&gt;
&lt;div readability=&quot;19.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:false;&quot;&gt;
[root@bogon bin]# bash /usr/local/zookeeper/zoo1/zookeeper-3.4.10/bin/zkCli.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
Connecting to localhost:&lt;span&gt;2181&lt;/span&gt;&lt;span&gt;
[zk: localhost:&lt;/span&gt;&lt;span&gt;2181&lt;/span&gt;(CONNECTED) &lt;span&gt;0&lt;/span&gt;] &lt;span&gt;ls&lt;/span&gt; /&lt;span&gt;
[configs, zookeeper]
[zk: localhost:&lt;/span&gt;&lt;span&gt;2181&lt;/span&gt;(CONNECTED) &lt;span&gt;1&lt;/span&gt;] &lt;span&gt;ls&lt;/span&gt; /&lt;span&gt;configs
[myconf]
[zk: localhost:&lt;/span&gt;&lt;span&gt;2181&lt;/span&gt;(CONNECTED) &lt;span&gt;2&lt;/span&gt;] &lt;span&gt;ls&lt;/span&gt; /configs/&lt;span&gt;myconf
[admin&lt;/span&gt;-extra.menu-top.html, currency.xml, protwords.txt, mapping-FoldToASCII.txt, _schema_analysis_synonyms_english.json, _rest_managed.json, solrconfig.xml, _schema_analysis_stopwords_english.json, stopwords.txt, lang, spellings.txt, mapping-ISOLatin1Accent.txt, admin-extra.html, xslt, synonyms.txt, scripts.conf, update-script.js, velocity, elevate.xml, admin-extra.menu-bottom.html, clustering, schema.xml]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;2. 修改每一台solr的tomcat 的 bin目录下catalina.sh文件&lt;/h3&gt;
&lt;p&gt;在其中加入DzkHost指定zookeeper服务器地址：&lt;/p&gt;
&lt;div readability=&quot;10.5&quot;&gt;
&lt;p&gt;JAVA_OPTS=&quot;$JAVA_OPTS $JSSE_OPTS&quot;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# Register custom URL handlers
# Do this here so custom URL handles (specifically &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;war:...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) can be used &lt;span&gt;in&lt;/span&gt;&lt;span&gt; the security policy
JAVA_OPTS&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$JAVA_OPTS -Djava.protocol.handler.pkgs=org.apache.catalina.webresources&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
JAVA_OPTS&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$JAVA_OPTS -DzkHost=192.168.29.110:2181,192.168.29.120:2181,192.168.29.130:2181&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;（上方标红的为添加内容）&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;3. 重新启动tomcat&lt;/h3&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330101247131-1862093682.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;4. 使用collections管理功能&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;添加collection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330101257116-1460856072.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
　　config set:配置文件存放位置
　　numShards:片区数量
　　replicationFactor:每一个片区提供服务的机器数量（小于机器总数）
　　Show advanced 显示高级设置
　　maxShardsPerNode:最大片区数量
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;(5&lt;/strong&gt;&lt;strong&gt;、6&lt;/strong&gt; &lt;strong&gt;非必须步骤)&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;5. 创建一个两片的collection，每片是一主一备。&lt;/h3&gt;
&lt;p&gt;在浏览器中访问：&lt;/p&gt;
&lt;p&gt;http://192.168.29.110:8080/solr/admin/collections?action=CREATE&amp;amp;name=collection2&amp;amp;numShards=2&amp;amp;replicationFactor=2&lt;/p&gt;
&lt;p&gt;连接中需要修改的内容：&lt;/p&gt;
&lt;p&gt;ip：服务器ip&lt;/p&gt;
&lt;p&gt;name：数据集名称&lt;/p&gt;
&lt;p&gt;numShards：数据集有几个片区&lt;/p&gt;
&lt;p&gt;replicationFactor：每一个片区提供服务的机器数量（小于机器总数）&lt;/p&gt;
&lt;h3&gt;6. 删除collection1.&lt;/h3&gt;
&lt;p&gt;http://192.168.29.110:8080/solr/admin/collections?action=DELETE&amp;amp;name=collection1&lt;/p&gt;
&lt;p&gt;连接中需要修改的内容：&lt;/p&gt;
&lt;p&gt;ip：服务器ip&lt;/p&gt;
&lt;p&gt;name：数据集名称&lt;/p&gt;
&lt;h2&gt;七、Solr集群的使用&lt;/h2&gt;
&lt;h3&gt;1. 使用solrj操作集群环境的索引库&lt;/h3&gt;
&lt;p&gt;在pom.xml增加solr的jar&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.apache.solr&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;solr-solrj&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;6.6.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div readability=&quot;28&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:false;&quot;&gt;
package com.demo.util.solr;
import java.io.IOException; 
import java.util.ArrayList; 
import java.util.Collection;
import org.apache.solr.client.solrj.SolrClient; 
import org.apache.solr.client.solrj.SolrQuery; 
import org.apache.solr.client.solrj.SolrServerException; 
import org.apache.solr.client.solrj.impl.CloudSolrClient; 
import org.apache.solr.client.solrj.response.QueryResponse; 
import org.apache.solr.common.SolrDocument; 
import org.apache.solr.common.SolrDocumentList; 
import org.apache.solr.common.SolrInputDocument; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;//SolrCloud 索引增删查 &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;50&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class SolrCloudTest {
    private static CloudSolrClient cloudSolrClient;
    private static synchronized CloudSolrClient getCloudSolrClient(final String zkHost) { 
        if (cloudSolrClient == null) { 
            try { 
                cloudSolrClient = new CloudSolrClient(zkHost); 
            } catch (Exception e) { 
                e.printStackTrace(); 
            } 
        } 
        return cloudSolrClient; 
    }
    private static void addIndex(SolrClient solrClient) { 
        try { 
            SolrInputDocument doc1 = new SolrInputDocument(); 
            doc1.addField(&quot;id&quot;, &quot;421245251215121452521251&quot;); 
            doc1.addField(&quot;name&quot;, &quot;张三&quot;); 
            doc1.addField(&quot;age&quot;, 30); 
            doc1.addField(&quot;desc&quot;, &quot;张三是个农民，勤劳致富，奔小康&quot;); 
 
            SolrInputDocument doc2 = new SolrInputDocument(); 
            doc2.addField(&quot;id&quot;, &quot;4224558524254245848524243&quot;); 
            doc2.addField(&quot;name&quot;, &quot;李四&quot;); 
            doc2.addField(&quot;age&quot;, 45); 
            doc2.addField(&quot;desc&quot;, &quot;李四是个企业家，白手起家，致富一方&quot;); 

            SolrInputDocument doc3 = new SolrInputDocument(); 
            doc3.addField(&quot;id&quot;, &quot;2224558524254245848524299&quot;); 
            doc3.addField(&quot;name&quot;, &quot;王五&quot;); 
            doc3.addField(&quot;age&quot;, 60); 
            doc3.addField(&quot;desc&quot;, &quot;王五好吃懒做，溜须拍马，跟着李四，也过着小康的日子&quot;); 

            Collection&amp;lt;SolrInputDocument&amp;gt; docs = new ArrayList&amp;lt;SolrInputDocument&amp;gt;(); 
            docs.add(doc1); 
            docs.add(doc2); 
            docs.add(doc3); 
            solrClient.add(docs); 
            solrClient.commit(); 
        } catch (SolrServerException e) { 
            System.out.println(&quot;Add docs Exception !!!&quot;); 
            e.printStackTrace(); 
        } catch (IOException e) { 
            e.printStackTrace(); 
        } catch (Exception e) { 
            System.out.println(&quot;Unknowned Exception!!!!!&quot;); 
            e.printStackTrace(); 
        } 
    }

  public static void search(SolrClient solrClient, String String) { 
        SolrQuery query = new SolrQuery(); 
        query.setQuery(String); 
        try { 
            QueryResponse response = solrClient.query(query); 
            SolrDocumentList docs = response.getResults();
            System.out.println(&quot;文档个数：&quot; + docs.getNumFound()); 
            System.out.println(&quot;查询时间：&quot; + response.getQTime()); 
 
            for (SolrDocument doc : docs) { 
                String id = (String) doc.getFieldValue(&quot;id&quot;); 
                String name = (String) doc.getFieldValue(&quot;name&quot;); 
                Integer age = (Integer) doc.getFieldValue(&quot;age&quot;); 
                String desc = (String) doc.getFieldValue(&quot;desc&quot;); 
                System.out.println(&quot;id: &quot; + id); 
                System.out.println(&quot;name: &quot; + name); 
                System.out.println(&quot;age: &quot; + age); 
                System.out.println(&quot;desc: &quot; + desc); 
                System.out.println(); 
            } 
        } catch (SolrServerException e) { 
            e.printStackTrace(); 
        } catch (Exception e) { 
            System.out.println(&quot;Unknowned Exception!!!!&quot;); 
            e.printStackTrace(); 
        } 
    }

    public static void deleteAllIndex(SolrClient solrClient) { 
        try { 
            solrClient.deleteByQuery(&quot;*:*&quot;);// delete everything! 
            solrClient.commit(); 
        } catch (SolrServerException e) { 
            e.printStackTrace(); 
        } catch (IOException e) { 
            e.printStackTrace(); 
        } catch (Exception e) { 
            System.out.println(&quot;Unknowned Exception !!!!&quot;); 
            e.printStackTrace(); 
        } 
    }

    public static void main(String[] args) throws IOException { 
         final String zkHost = &quot;192.168.29.110:2181,192.168.29.120:2181,192.168.29.130:2181&quot;;
         final String defaultCollection = &quot;collection1&quot;;   
         final int zkClientTimeout = 20000;   
         final int zkConnectTimeout = 1000;

         CloudSolrClient cloudSolrClient = getCloudSolrClient(zkHost);          
        System.out.println(&quot;The Cloud cloudSolrClient Instance has benn created!&quot;);             
        cloudSolrClient.setDefaultCollection(defaultCollection);   
        cloudSolrClient.setZkClientTimeout(zkClientTimeout);   
        cloudSolrClient.setZkConnectTimeout(zkConnectTimeout);                    
        cloudSolrClient.connect();   

        System.out.println(&quot;The cloud Server has been connected !!!!&quot;);  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        //创建索引&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:false;&quot;&gt;
   SolrCloudTest.addIndex(cloudSolrClient); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        //查询 &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:false;&quot;&gt;
  SolrCloudTest.search(cloudSolrClient, &quot;name:李四&quot;);   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    //删除&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    SolrCloudTest.deleteAllIndex(cloudSolrClient);
    SolrCloudTest.search(cloudSolrClient, &quot;name:李四&quot;);
        cloudSolrClient.close(); 
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;2 在solr的管理页面增加collection1的索引字段“name”,“age”,“desc”。&lt;/h3&gt;
&lt;p&gt;name和desc的字段类型使用添加的IK分词“text_ik”,&lt;/p&gt;
&lt;p&gt;age的字段类型使用int&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330101441023-565139179.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;八 对数据库数据进行索引&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;数据库主机以及账号密码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　mysql: &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;29.100&lt;/span&gt;:&lt;span&gt;3306&lt;/span&gt;&lt;span&gt;
　　　　user:root
　　　　password:&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.复制相关jar文件&lt;/h3&gt;
&lt;p&gt;将solr自带的solr-dataimporthandler-6.6.0.jar, solr-dataimporthandler-extras-6.6.0.jar和mysql-connector-java-5.1.44.jar拷贝到tomcat中solr的lib下&lt;/p&gt;
&lt;h3&gt;2.修改solrconfig.xml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:false;&quot;&gt;
找到“&amp;lt;requestHandler name=&quot;/select&quot; class=&quot;solr.SearchHandler&quot;&amp;gt;”，在其上方增加配置
&amp;lt;requestHandler name=&quot;/dataimport&quot; class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&amp;gt;
      &amp;lt;lst name=&quot;defaults&quot;&amp;gt;
        &amp;lt;str name=&quot;config&quot;&amp;gt;data-config.xml&amp;lt;/str&amp;gt;
      &amp;lt;/lst&amp;gt;
    &amp;lt;/requestHandler&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;37&quot;&gt;
&lt;h3&gt;3.在solrconfig.xml的同级目录下新建data-config.xml&lt;/h3&gt;
&lt;p&gt;详细配置：&lt;/p&gt;
&lt;div readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:false;&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;
&amp;lt;dataConfig&amp;gt;
  &amp;lt;dataSource name=&quot;source1&quot; driver=&quot;com.mysql.jdbc.Driver&quot; url=&quot;jdbc:mysql://192.168.29.100:3306/test1&quot; user=&quot;root&quot; password=&quot;123456&quot;/&amp;gt;
  &amp;lt;document name=&quot;salesDoc&quot;&amp;gt;
    &amp;lt;entity pk=&quot;id&quot; dataSource=&quot;source1&quot; name=&quot;user&quot;
      query=&quot;select id,name,sex,age,insertTime from user&quot;
      deltaQuery=&quot;select id,name,sex,age,insertTime from user where insertTime &amp;gt;'${dih.last_index_time}'&quot;&amp;gt;
      &amp;lt;field name=&quot;id&quot; column=&quot;id&quot;/&amp;gt;
      &amp;lt;field name=&quot;name&quot; column=&quot;name&quot;/&amp;gt;
      &amp;lt;field name=&quot;sex&quot; column=&quot;sex&quot;/&amp;gt;
      &amp;lt;field name=&quot;age&quot; column=&quot;age&quot;/&amp;gt;
      &amp;lt;field name=&quot;insertTime&quot; column=&quot;insertTime&quot;/&amp;gt;
    &amp;lt;/entity&amp;gt;
  &amp;lt;/document&amp;gt;
&amp;lt;/dataConfig&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;配置说明：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
　　dataSource：设置数据源
　　document：Solr的信息的基本单位，它是一组描述某些事物的数据集合
　　entity：对应数据表
　　pk：表主键
　　dataSource：指定使用哪个数据源
　　name：表名
　　query：查询sql
　　 deltaQuery：增量更新时使用的查询sql
　　 ${dih.last_index_time}：最后更新时间
　　field：表字段
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4.在solrconfig.xml的同级目录下新建dataimport.properties&lt;/h3&gt;
&lt;p&gt;dataimport.properties内容：&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;#Mon Nov 06 13:03:53 CST 2017&lt;/p&gt;
&lt;p&gt;last_index_time=2017-11-06 13\:03\:50&lt;/p&gt;
&lt;p&gt;user.last_index_time=2017-11-06 13\:03\:50&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;user.last_index_time指定user表的最后更新时间（建议使用此种方式，因为如果有多张表的话可以分别更新）&lt;/p&gt;
&lt;h3&gt;5.修改managed-schema&lt;/h3&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:false;&quot;&gt;
    &amp;lt;field name=&quot;id&quot; type=&quot;int&quot; indexed=&quot;true&quot; stored=&quot;true&quot; required=&quot;true&quot; multiValued=&quot;false&quot; /&amp;gt;
    &amp;lt;field name=&quot;name&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&amp;gt;
    &amp;lt;field name=&quot;sex&quot; type=&quot;int&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&amp;gt;
    &amp;lt;field name=&quot;age&quot; type=&quot;int&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&amp;gt;
    &amp;lt;field name=&quot;insertTime&quot; type=&quot;int&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;6.上传文件&lt;/h3&gt;
&lt;p&gt;如solr的配置已上传至zookeeper，需重复“集成zookeeper”中的第一步将配置文件上传至zookeeper。（也可以执行“常用命令”中的“更新solr配置到zookeeper”进行单个文件上传）&lt;/p&gt;
&lt;p&gt;7.重启tomcat，执行数据导入操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330101854873-1754350775.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　full-&lt;span&gt;import：全量索引
　　delta&lt;/span&gt;-&lt;span&gt;import：增量索引
　　clean：清除原有索引
　　commit：执行后提交
　　entity：数据源表&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;8.验证是否成功&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330101920135-41256545.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;九 、定时增量更新索引&lt;/h2&gt;
&lt;h3&gt;1.将solr-dataimportscheduler-1.1.jar拷贝到tomcat中solr的lib目录下面&lt;/h3&gt;
&lt;h3&gt;2.修改tomcat中solr下WEB-INF/web.xml&lt;/h3&gt;
&lt;p&gt;在servlet节点前面增加:&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:false;&quot;&gt;
&amp;lt;listener&amp;gt;
&amp;lt;listener-class&amp;gt;org.apache.solr.handler.dataimport.scheduler.ApplicationListener&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;3.在solr-home下创建conf文件夹&lt;/h3&gt;
&lt;p&gt;进入conf，在其中新建dataimport.properties&lt;/p&gt;
&lt;p&gt;dataimport.properties配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:false;&quot;&gt;
[root@solr_1 ~]# vim /opt/solr/solr-home/conf/dataimport.properties
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#################################################
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#                                               #
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#       dataimport scheduler properties         #
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#                                               #
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;################################################
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; #  to &lt;span&gt;sync&lt;/span&gt; or not to &lt;span&gt;sync&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; #  &lt;span&gt;1&lt;/span&gt; - active; anything &lt;span&gt;else&lt;/span&gt; -&lt;span&gt; inactive
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; syncEnabled=&lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; #  &lt;span&gt;which&lt;/span&gt;&lt;span&gt; cores to schedule
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; #  &lt;span&gt;in&lt;/span&gt; a multi-core environment you can decide &lt;span&gt;which&lt;/span&gt;&lt;span&gt; cores you want syncronized
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; #  leave empty or comment it out &lt;span&gt;if&lt;/span&gt; using single-&lt;span&gt;core deployment
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; syncCores=&lt;span&gt;collection1
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#  solr server name or IP address
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; #  [defaults to localhost &lt;span&gt;if&lt;/span&gt;&lt;span&gt; empty]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; server=&lt;span&gt;localhost
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#  solr server port
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; #  [defaults to &lt;span&gt;80&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; empty]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; port=&lt;span&gt;8080&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; #  application name/&lt;span&gt;context
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; #  [defaults to current ServletContextListener&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s context (app) name]&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; webapp=&lt;span&gt;solr
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#  URL params [mandatory]
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#  remainder of URL
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#增量
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; params=/dataimport?command=delta-import&amp;amp;clean=&lt;span&gt;false&lt;/span&gt;&amp;amp;commit=&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;#  schedule interval
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#  number of minutes between two runs
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; #  [defaults to &lt;span&gt;30&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; empty]
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; interval=&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#  重做索引的时间间隔，单位分钟，默认7200，即1天;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;#  为空,为0,或者注释掉:表示永不重做索引
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; reBuildIndexInterval=&lt;span&gt;7200&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#  重做索引的参数
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; reBuildIndexParams=/dataimport?command=full-import&amp;amp;clean=&lt;span&gt;true&lt;/span&gt;&amp;amp;commit=&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; #  重做索引时间间隔的计时开始时间，第一次真正执行的时间=reBuildIndexBeginTime+reBuildIndexInterval*&lt;span&gt;60&lt;/span&gt;*&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;；
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; #  两种格式：&lt;span&gt;2012&lt;/span&gt;-&lt;span&gt;04&lt;/span&gt;-&lt;span&gt;11&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;10&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; 或者  &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;10&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;&lt;span&gt;，后一种会自动补全日期部分为服务启动时的日期
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; reBuildIndexBeginTime=&lt;span&gt;03&lt;/span&gt;:&lt;span&gt;10&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;4.重启tomcat，并验证是否成功&lt;/h3&gt;
&lt;p&gt;在mysql中增加一条数据，等待1分钟，在solr的管理页面查看是否有增加数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1157397/201803/1157397-20180330102130001-1466298314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;更新solr配置到zookeeper&lt;/h2&gt;
&lt;p&gt;修改schema.xml配置文件之后，根本不用登录zookeeper删除原有文件，文件会自动覆盖，这里直接上传即可，命令如下：&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
[root@solr_1 ~]# cd /opt/solr/server/scripts/cloud-scripts/&lt;span&gt;
[root@ cloud&lt;/span&gt;-scripts]# ./zkcli.sh -zkhost 192.168.29.110:2181,192.168.29.120:2181,192.168.29.130:2181 -cmd upconfig -confdir /opt/solr/solr-home/core_shopdemo_product2/conf/ -confname myconf
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;此命令是在配置上传至zookeeper后，修改配置时使用的&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 30 Mar 2018 23:53:00 +0000</pubDate>
<dc:creator>Sunzz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Sunzz/p/8674450.html</dc:identifier>
</item>
<item>
<title>[学习笔记] 模拟退火 (Simulated Annealing) - rvalue</title>
<link>http://www.cnblogs.com/rvalue/p/8678318.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rvalue/p/8678318.html</guid>
<description>&lt;p&gt;真没想到这东西真的在考场上用到了...顺便水篇blog以示诈尸好了(逃&lt;/p&gt;
&lt;h2&gt;模拟退火算法&lt;/h2&gt;
&lt;p&gt;模拟退火是一种随机化算法, 用于求函数的极值qwq&lt;/p&gt;
&lt;p&gt;比如给出一个问题, 我们要求最优解的值, 但是可能的方案数量极大, 直接搜索会T飞(或者方案是连续的总数无穷根本没法搜), 这种时候我们一般会有两种选择:&lt;/p&gt;
&lt;h3&gt;爬山算法&lt;/h3&gt;
&lt;p&gt;爬山算法每次在当前找到的方案附近寻找一个新的方案(常见方式是随机一个差值), 然后如果这个解更优那么直接转移.&lt;/p&gt;
&lt;p&gt;对于单峰函数来说这显然可以直接找到最优解(不过你都知道它是单峰函数了为啥不三分呢?)&lt;/p&gt;
&lt;p&gt;但是对于多数我们求解的函数来说, 它并不一定会长成这个样子...于是就极其有可能钻进一个局部的最优解出不来了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200714/201803/1200714-20180330195452966-819911765.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;算法得出的最优解与初始解的位置以及搜寻的附近解的区域大小有关.&lt;/p&gt;
&lt;p&gt;当然如果你寻找新方案的区间很大的话有概率跳出去, 但是太大的话又可能跳来跳去跳乱了从而找不到最优解...&lt;/p&gt;
&lt;p&gt;欧皇专用最优化求解方式(&lt;span&gt;@liu_runda&lt;/span&gt;)&lt;/p&gt;

&lt;p&gt;然而并不是所有人都是欧皇, 像博主这样的非酋要怎么办捏?&lt;/p&gt;
&lt;p&gt;当然是求助于自然规律(&lt;span&gt;大雾&lt;/span&gt;)&lt;/p&gt;
&lt;h3&gt;退火的理论部分&lt;/h3&gt;
&lt;p&gt;退火其实本来是冶金工业里的术语...大概过程是先把晶体加热到极高的温度再缓慢降温, 在这个过程中减少晶体中的缺陷(达到能量最低的最稳定状态)&lt;/p&gt;
&lt;p&gt;然后机智的我们发现这个过程最终和我们的最优化过程类似!&lt;/p&gt;
&lt;p&gt;于是我们去模拟这个过程, 按照退火的规律引入更多随机因素, 这样我们得到最优解的概率就会增加辣233&lt;/p&gt;
&lt;p&gt;emmmm...&lt;/p&gt;
&lt;p&gt;等等模拟这个过程? 这是计算机又不是实验室你怎么模拟啊(╯°□°)╯︵┻━┻&lt;/p&gt;
&lt;p&gt;拿出物理化学(&lt;span&gt;假装自己还是个ChO党&lt;/span&gt;)...&lt;/p&gt;
&lt;p&gt;根据热力学规律并结合计算机对离散数据的处理, 我们定义: 如果当前温度为 $T$ , 当前状态与新状态之间的能量差为 $\Delta E$ , 则发生状态转移的概率为:&lt;/p&gt;
&lt;p&gt;$$ P(\Delta E) = e^{\frac { \Delta E } { kT } } $$&lt;/p&gt;
&lt;p&gt;显然如果 $ \Delta E$ 为正的话转移是一定会成功的, 但是对于 $\Delta E &amp;lt; 0$ 我们则以上式中计算得到的概率接受这个新解.&lt;/p&gt;
&lt;p&gt;然后我们维护温度 $T$ 即可. 这里我们有三个参数: 初温 $T_0$ , 降温系数 $d$ , 终温 $T_k$&lt;/p&gt;
&lt;p&gt;一般 $T_0$ 是个比较大的数, $d$ 是个接近 $1$ 但是小于 $1$ 的值, $T_k$ 是个接近 $0$ 的正值.&lt;/p&gt;
&lt;p&gt;首先让温度 $T=T_0$ , 然后进行一次转移尝试, 然后让 $T=dT$.&lt;/p&gt;
&lt;p&gt;当 $T&amp;lt;T_k$ 时模拟退火过程结束, 当前解作为最优解.&lt;/p&gt;
&lt;p&gt;看起来好像并不是很难理解?&lt;/p&gt;
&lt;p&gt;Wikipedia上的动图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200714/201803/1200714-20180331070457230-679205132.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一般来讲模拟退火在参数合适的情况下效果拔群, TSP随便跑(x&lt;/p&gt;
&lt;h2&gt;模拟退火的实际使用&lt;/h2&gt;
&lt;p&gt;实际使用里这函数可不一定是个单元函数...而且寻找新解好像是个很模糊的东西, 毕竟很多时候我们会发现我们要求解的问题的所有可能解并不是离散的...&lt;/p&gt;
&lt;p&gt;先拿道题说说...&lt;/p&gt;
&lt;blockquote readability=&quot;10.255&quot;&gt;
&lt;center&gt;
&lt;h2&gt;3680: 吊打XXX&lt;/h2&gt;
&lt;span class=&quot;green&quot;&gt;Time Limit: 10 Sec  &lt;span class=&quot;green&quot;&gt;Memory Limit: 128 MBSec  &lt;span class=&quot;red&quot;&gt;Special Judge&lt;br/&gt;&lt;span class=&quot;green&quot;&gt;Submit: 4247  &lt;span class=&quot;green&quot;&gt;Solved: 1566&lt;br/&gt;[&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/submitpage.php?id=3680&quot;&gt;Submit&lt;/a&gt;][&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problemstatus.php?id=3680&quot;&gt;Status&lt;/a&gt;][&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/bbs.php?id=3680&quot;&gt;Discuss&lt;/a&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/center&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;div class=&quot;content&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;gty又虐了一场比赛，被虐的蒟蒻们决定吊打gty。gty见大势不好机智的分出了n个分身，但还是被人多势众的蒟蒻抓住了。蒟蒻们将&lt;br/&gt;n个gty吊在n根绳子上，每根绳子穿过天台的一个洞。这n根绳子有一个公共的绳结x。吊好gty后蒟蒻们发现由于每个gty重力不同，绳&lt;br/&gt;结x在移动。蒟蒻wangxz脑洞大开的决定计算出x最后停留处的坐标，由于他太弱了决定向你求助。&lt;br/&gt;不计摩擦，不计能量损失，由于gty足够矮所以不会掉到地上。&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Input&lt;/h2&gt;
&lt;div class=&quot;content&quot; readability=&quot;38&quot;&gt;
&lt;p&gt;&lt;span&gt;输入第一行为一个正整数n(1&amp;lt;=n&amp;lt;=10000)，表示gty的数目。&lt;br/&gt;接下来n行,每行三个整数xi，yi，wi，表示第i个gty的横坐标，纵坐标和重力。&lt;br/&gt;对于20%的数据，gty排列成一条直线。&lt;br/&gt;对于50%的数据，1&amp;lt;=n&amp;lt;=1000。&lt;br/&gt;对于100%的数据，1&amp;lt;=n&amp;lt;=10000,-100000&amp;lt;=xi,yi&amp;lt;=100000&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;div class=&quot;content&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;&lt;span&gt;输出1行两个浮点数（保留到小数点后3位），表示最终x的横、纵坐标。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Sample Input&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;sampledata&quot;&gt;3&lt;br/&gt;0 0 1&lt;br/&gt;0 2 1&lt;br/&gt;1 1 1&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Sample Output&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;sampledata&quot;&gt;0.577 1.000&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;HINT&lt;/h2&gt;

&lt;h2&gt;Source&lt;/h2&gt;

&lt;/blockquote&gt;
&lt;p&gt;在这个题中我们为了到达稳定状态要让整个体系的总重力势能最低.&lt;/p&gt;
&lt;p&gt;重力势能怎么求呢? 别忘了这绳子的总长度是不会变的...于是某个质点的重力势能和到绳结的水平距离成一次函数关系.&lt;/p&gt;
&lt;p&gt;我们为了简化问题, 可以将某个质点对最终答案产生的贡献计算为 $ dis(o,x)*m_x $ . 然后我们要让这个值最小化.&lt;/p&gt;
&lt;p&gt;这个时候我们可以考虑模拟退火. 首先随机一个点作为初始解(为了加速收敛, 我们可以直接取各个点坐标的平均值所在的店). 然后随机两个值作为差值加到这个点的坐标上作为下一个解.&lt;/p&gt;
&lt;p&gt;然后模拟退火直接往上套就可以了233&lt;/p&gt;
&lt;p&gt;具体实现就是一个  &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;while&lt;/span&gt;&lt;/span&gt;  循环, 循环内有4步:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;根据当前解找到下一个解&lt;/li&gt;
&lt;li&gt;计算下一个解的 &quot;能量&quot; (也就是价值)&lt;/li&gt;
&lt;li&gt;决定是否要接受这个新解&lt;/li&gt;
&lt;li&gt;降温&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;找下一个解的时候有一个提高精度的小技巧: 根据当前温度决定差值的范围. 这样在降温即将结束接近最优解的时候可以有更大的概率更精确地命中最优解.&lt;/p&gt;
&lt;p&gt;具体做法就是使用一个产生 $[0,1]$ 随机实数的函数, 将随机区间转为 $[-1,1]$ 后乘上 $T$ 作为差值.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;不过实际操作的时候我们较少直接输出最终解, 而是选择在模拟退火的过程中单独维护一个解, 只在遇到更优解的时候将其更新, 增加正确率.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本题的参考实现:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a0b6ef24-8eff-4cc9-b136-5425053a516a')&quot; readability=&quot;44.5&quot;&gt;&lt;img id=&quot;code_img_closed_a0b6ef24-8eff-4cc9-b136-5425053a516a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a0b6ef24-8eff-4cc9-b136-5425053a516a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a0b6ef24-8eff-4cc9-b136-5425053a516a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a0b6ef24-8eff-4cc9-b136-5425053a516a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;bits/stdc++.h&amp;gt;
&lt;span&gt; 2&lt;/span&gt;  
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAXN=1e4+&lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Point{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt;&lt;span&gt; x;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt;&lt;span&gt; y;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     Point(&lt;span&gt;double&lt;/span&gt; x=&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;double&lt;/span&gt; y=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;x=&lt;span&gt;x;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;-&amp;gt;y=&lt;span&gt;y;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;Point P[MAXN];
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;  
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;Point ans;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; g[MAXN];
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; minAns=&lt;span&gt;DBL_MAX;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;  
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Rand();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; Sqr(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; Calc(&lt;span&gt;const&lt;/span&gt; Point&amp;amp;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Accept(&lt;span&gt;double&lt;/span&gt;,&lt;span&gt;double&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; EucDis(&lt;span&gt;const&lt;/span&gt; Point&amp;amp;,&lt;span&gt;const&lt;/span&gt; Point&amp;amp;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; Point SimulatedAnnealing(Point,&lt;span&gt;double&lt;/span&gt;,&lt;span&gt;double&lt;/span&gt;,&lt;span&gt;double&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;  
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;n);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    Point init;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%lf%lf%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;P[i].x,&amp;amp;P[i].y,g+&lt;span&gt;i);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         init.x+=&lt;span&gt;P[i].x;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         init.y+=&lt;span&gt;P[i].y;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     init.x/=&lt;span&gt;n;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     init.y/=&lt;span&gt;n;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     SimulatedAnnealing(init,1e5,&lt;span&gt;1&lt;/span&gt;-7e-&lt;span&gt;3&lt;/span&gt;,1e-&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.3f %.3f\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ans.x,ans.y);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;  
&lt;span&gt;42&lt;/span&gt; inline &lt;span&gt;double&lt;/span&gt; Calc(&lt;span&gt;const&lt;/span&gt; Point&amp;amp;&lt;span&gt; origin){
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt; ans=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         ans+=EucDis(origin,P[i])*&lt;span&gt;g[i];
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ans&amp;lt;&lt;span&gt;minAns){
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         ::ans=&lt;span&gt;origin;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         minAns=&lt;span&gt;ans;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ans;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;  
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Accept(&lt;span&gt;double&lt;/span&gt; delta,&lt;span&gt;double&lt;/span&gt;&lt;span&gt; tmp){
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; delta&amp;lt;&lt;span&gt;0&lt;/span&gt;||Rand()&amp;lt;exp(-delta/&lt;span&gt;tmp);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;  
&lt;span&gt;58&lt;/span&gt; Point SimulatedAnnealing(Point initAns,&lt;span&gt;double&lt;/span&gt; initT,&lt;span&gt;double&lt;/span&gt; dec,&lt;span&gt;double&lt;/span&gt;&lt;span&gt; end){
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt; tmp=&lt;span&gt;initT;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     Point now=&lt;span&gt;initAns;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt; nowAns=&lt;span&gt;Calc(now);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(tmp&amp;gt;&lt;span&gt;end){
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         Point next=Point(now.x+tmp*(Rand()*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;),now.y+tmp*(Rand()*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;double&lt;/span&gt; ans=&lt;span&gt;Calc(next);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(Accept(ans-&lt;span&gt;nowAns,tmp)){
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;             now=&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;             nowAns=&lt;span&gt;ans;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;         tmp*=&lt;span&gt;dec;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;1000&lt;/span&gt;;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;         Point rnd=Point(ans.x+tmp*(Rand()*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;),ans.y+tmp*(Rand()*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;        Calc(rnd);
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; now;
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;  
&lt;span&gt;78&lt;/span&gt; inline &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Rand(){
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;(rand())/&lt;span&gt;double&lt;/span&gt;&lt;span&gt;(RAND_MAX);
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;  
&lt;span&gt;82&lt;/span&gt; inline &lt;span&gt;double&lt;/span&gt; Sqr(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; x){
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; x*&lt;span&gt;x;
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;  
&lt;span&gt;86&lt;/span&gt; inline &lt;span&gt;double&lt;/span&gt; EucDis(&lt;span&gt;const&lt;/span&gt; Point&amp;amp; a,&lt;span&gt;const&lt;/span&gt; Point&amp;amp;&lt;span&gt; b){
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; sqrt(Sqr(a.x-b.x)+Sqr(a.y-&lt;span&gt;b.y));
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;但是调参的过程还是比较看脸的...究极非洲大酋长慎用(x&lt;/p&gt;
&lt;p&gt;一般情况下我们会在时间允许的情况下尽量多地尝试新的解. 一般降温系数 $d$ 与 $1$ 的差减少一个数量级, 时间消耗大约多 $10$ 倍, $T_0$ 和 $T_k$ 变化一个数量级, 时间消耗不会变化很大.&lt;/p&gt;
&lt;p&gt;这种时候我们可以试着先本机跑跑自造数据看看精度怎么样. 如果发现经常陷入局部最优解的话考虑增大 $T_0$ 和 $d$ , 如果发现最终精度不够的话考虑减小 $T_k$.&lt;/p&gt;
&lt;p&gt;至于模拟退火的正确率计算么...好像只有实验是最方便的了吧(x&lt;/p&gt;
&lt;p&gt;今天上午考试的时候手调一波参数然后极限数据下测试 $100$ 次发现精度达标率有 $60\%$ 就交了...然后A了...&lt;/p&gt;
&lt;p&gt;于是借此在高二那边水了个 $\texttt{rk4}$ (逃&lt;/p&gt;

&lt;h3&gt;模拟退火解旅行商问题&lt;/h3&gt;
&lt;p&gt;刚刚说模拟退火TSP随便跑...那么我们就说说TSP怎么跑...&lt;/p&gt;
&lt;p&gt;有人可能会问了这个东西怎么求下一个解?&lt;/p&gt;
&lt;p&gt;其实还是随机...&lt;/p&gt;
&lt;p&gt;对于TSP, 我们的一个方案其实就是一个遍历顺序(也就是一个排列)&lt;/p&gt;
&lt;p&gt;这时我们在生产新解的时候可以选择随机选取两个结点, 然后将它们在排列中的位置交换一下(&lt;span&gt;好暴力啊&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;然而事实证明效果拔群...&lt;/p&gt;

&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;模拟退火在OI中是一种在最优化问题中骗分的好方法&lt;/p&gt;
&lt;p&gt;对于一些奇奇怪怪的多元函数也可以用这个方法来求解&lt;/p&gt;
&lt;p&gt;其实在上面的例子中也可以体现出来, 这个算法的要点在于新解的选取以及参数的调整...&lt;/p&gt;
&lt;p&gt;实际上利用退火过程的性质大胆随机再配合调参经验一般效果拔群OwO&lt;/p&gt;
&lt;p&gt;但是作为一个随机化算法并不一定能找到最优解qwq...IOI赛制/ACM赛制的话可能骗分更容易些?(&lt;span&gt;毕竟可以多次提交233&lt;/span&gt;)&lt;/p&gt;

</description>
<pubDate>Fri, 30 Mar 2018 22:59:00 +0000</pubDate>
<dc:creator>rvalue</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rvalue/p/8678318.html</dc:identifier>
</item>
<item>
<title>分享两个提高效率的AndroidStudio小技巧 - 请叫我大苏</title>
<link>http://www.cnblogs.com/dasusu/p/8679872.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dasusu/p/8679872.html</guid>
<description>&lt;p&gt;这次分享两个 Android Studio 的小技巧，能够有效提高效率和减少犯错，尤其是在团队协作开发中。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Getter 模板修改--自动处理 null 判断&lt;/strong&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;格式化代码自动整理方法位置--广度 or 深度&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;好了，下面优先介绍下这两个小技巧有什么作用，然后再给出使用教程，想直接看教程的可以直接跳到最后。&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Getter 模板修改&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;开发过程中，经常会遇到空指针异常，尤其是在线上 bug 中，由于未进行 null 判断处理导致的 bug 比例肯定不低。&lt;/p&gt;
&lt;p&gt;另外，model 层经常需要根据服务端接口返回的数据结构进行建模，实体类中常见的有 &lt;strong&gt;String&lt;/strong&gt; 类型和 &lt;strong&gt;List&lt;/strong&gt; 类型的字段。而服务端的接口文档里通常都会说明哪些字段不会为空，所以移动端建模后使用相应的实体类数据时，很少或者说会经常性忘记去做 null 判断处理。&lt;/p&gt;
&lt;p&gt;正常场景下，也许测不出 null 异常的问题，但如果服务器出了问题，返回了错误的数据，或者在某些特殊的场景下，某些字段的值偏偏就是 null，那么此时如果在使用的地方没有进行 null 判断处理，经常就会有问题出现，如果 app 刚好又有缓存策略，那么可能会导致特别严重的问题。&lt;/p&gt;
&lt;p&gt;鉴于此，我是建议，在建模创建实体类时，如果有 &lt;strong&gt;String&lt;/strong&gt; 类型和 &lt;strong&gt;List&lt;/strong&gt; 类型的变量时，这些类型的 &lt;strong&gt;getXXX()&lt;/strong&gt; 方法中直接进行 null 判断处理，确保不会返回 null 值，这样外部使用时就不用再去进行 null 判断处理。如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String mString;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; mList;

&lt;span class=&quot;co&quot;&gt;//如果String类型的字段为空，那么返回&quot;&quot;，外部在使用getString().equal()等之类方法时如果忘记进行null判断，也不会造成空指针异常&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getString&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; mString == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt; : mString;
}
&lt;span class=&quot;co&quot;&gt;//如果List类型字段为空，那么返回空列表。外部在使用getList().get(i)或者getList().size()等时如果忘记进行null判断，也不会造成空指针异常&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span class=&quot;fu&quot;&gt;getList&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (mList == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; mList;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样处理的好处是统一在实体类内部进行 null 判断处理，外部使用的地方无需再一个个的去进行 null 判断处理，如果外部使用时忘记进行 null 判断处理，也不会导致空指针异常。&lt;/p&gt;
&lt;p&gt;但，如果每次创建完实体类后都靠开发人员的主观意识来为对应的 getXXX() 方法增加相应的 null 判断处理代码，很不靠谱。&lt;strong&gt;一切靠主观意识来遵守的规范都不靠谱，总会由于各种原因，如任务赶，太久未接触等等而忘记。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;推荐 getXXX() 方法都通过 Android Studio 来自动生成相应代码，那么，就可以通过修改 AS 的 Getter 方法的模板文件，来达到自动生成相应的 null 判断处理代码&lt;/strong&gt;，以工具代替手工，一提供效率，二强制遵守规范，三解决靠主观意识不靠谱问题。&lt;/p&gt;
&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;格式化代码自动整理方法位置&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;当 app 经过越来越多的迭代，增加越来越多的功能时，项目难免会逐渐庞大起来，有些类里的代码会渐渐多了起来。&lt;/p&gt;
&lt;p&gt;为了易于阅读，通常对类里的代码会根据各自的职能划分到一个个方法中，尽量遵守方法的单一职责，这样一来，各个方法之间难免会有关联关系，a 方法调用了 b,c 方法，b 方法调用了 d 方法，等等。&lt;/p&gt;
&lt;p&gt;这么多的方法，如果不按照一定的规范来整理、摆放的话，当类里的方法越来越多时，这些方法位置杂乱无章的摆放会给 review 人员的阅读，或者过了很长一段时间后本人回来自己阅读时造成一定的障碍。&lt;/p&gt;
&lt;p&gt;常见的是规范有一种是按照权限来归纳整理，private 方法集中在一起，public 方法集中在一起。&lt;/p&gt;
&lt;p&gt;还有一种规范是按照就近原则摆放，a 方法调用了 b 方法，那么 b 方法位置就尽量靠近 a，我个人倾向于这一种规范，这样在熟悉一个类里的代码时，从上往下慢慢过下来即可，不同跳过来跳过去的。&lt;/p&gt;
&lt;p&gt;那么，同样的问题，靠开发人员的主观意识来遵守这种规范是很不靠谱的。写代码过程中，新建了一个方法时，并不会特别特意的去考虑要将它放在哪，基本就是就近放，这样也还好，还算稍微有些关联，有些顺序。&lt;/p&gt;
&lt;p&gt;但，如果是在后期新增功能，在旧代码中又去新建方法时，如果对这个类不熟悉，这时候通常都不会去仔细的考虑新写的方法应该要放在哪，要么就是放最后，要么随手就近，久而久之，类里的方法就会越来越杂乱无章。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以，一切靠主观意识来遵守规范的行为都不靠谱。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;鉴于此，&lt;strong&gt;推荐打开 Android Studio 自动整理方法位置的功能，借助工具来遵守规范，提高效率的同时也能写出优美的代码。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;getter模板修改教程&quot;&gt;Getter模板修改教程&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;随便建个类，写几个属性，然后按快捷键 &lt;strong&gt;Alt + Insert&lt;/strong&gt; 或在代码区域 &lt;strong&gt;右键 -&amp;gt; Generate -&amp;gt; Getter，&lt;/strong&gt;然后会有一个弹框：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-d568cdffa6253e4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;第一步&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;此时先不要点击 OK 键，先点击右上角的 &lt;strong&gt;…&lt;/strong&gt; &lt;strong&gt;的图标&lt;/strong&gt;，来修改模板文件：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-b5eeb525851d6209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;第二步.png&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;此时只有一份 AS 默认的生成 Getter 方法的模板，要对这份模板进行修改，所以接下去可以选择新建一份新的模板文件或者在原文件上修改都可以，比如我新建了一份 NotNull_getter 模板文件：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-cc0daa4bc6609c15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;第三步&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;模板文件需要修改的地方就仅仅是在&lt;strong&gt;$(name){…}&lt;/strong&gt; 代码块里的 return 生成规则，原本规则是统一返回字段值本身，根据规范新增两条规则：增加 String 类型和 List 类型的生成规则。以下是修改后的整个模板文件代码，可以拷贝过去直接使用：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;#if($field.modifierStatic)
static ##
#end
$field.type ##
#set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field, $project))))
#if ($field.boolean &amp;amp;&amp;amp; $field.primitive)
  #if ($StringUtil.startsWithIgnoreCase($name, 'is'))
    #set($name = $StringUtil.decapitalize($name))
  #else
    is##
#end
#else
  get##
#end
${name}() {
  #if ($field.string)
     return $field.name == null ? &quot;&quot; : $field.name;
  #else 
    #if ($field.list)
    if ($field.name == null) {
        return new ArrayList&amp;lt;&amp;gt;();
    }
    return $field.name;
    #else 
    return $field.name;
    #end
  #end
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;建完新模板文件后点击 OK 键，以后通过&lt;strong&gt;右键&lt;/strong&gt; &lt;strong&gt;-&amp;gt; Generate -&amp;gt; Getter&lt;/strong&gt; 来生成 getXXX() 方法时，注意一下模板文件选择是否正确，一般首次选择后以后都是默认上一次的:&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-489d9186e775a615.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;第五步&quot;/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;效果，getXXX() 方法都是 AS 自动生成，而且根据修改后的模板，也能保证 String 类型和 List 类型都不会返回null值。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-5017663bdb7a4d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;效果&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;格式化代码自动整理方法位置教程&quot;&gt;格式化代码自动整理方法位置教程&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;先开启自动整理方法位置的功能，位置：&lt;br/&gt;&lt;strong&gt;File -&amp;gt; Settings -&amp;gt; Editor -&amp;gt; Code Style -&amp;gt; Java -&amp;gt; Arrangement&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-7664b2eefe5cee7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;功能开启&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图的 2,3 点功能，默认都是关闭的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第 2 点功能：Keep overridden methods together – keep order&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;意思是将由 override 标志的方法都集中放置，建议将此功能开启，override 的方法通常要么是系统的一些回调方法，要么是我们自己定义的一些接口，这部分方法本身就有一定的关联性，集中在一起很合理。&lt;/p&gt;
&lt;p&gt;注意，AS支持两种规则，一种是 keep order（按原有顺序），一种是 order by name（按照方法字母表顺序）。至于哪一种较合适，个人喜好，我是选择的 keep order。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第3点功能：Keep dependent methods together&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;意思是将相关的方法按照某则规则放在一起，AS支持两种规则：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;breadth-first order &amp;amp; depth-first order&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的理解，说得通俗点也就是广度优先和深度优先，这个功能建议开启。&lt;/p&gt;
&lt;p&gt;举个例子，假设一个类里有这么几个方法，a 调用了 b, c, d, 而 b 调用了 e, f，如果是按照广度优先来整理这些方法的位置时，breadth-first order:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-a61611ca05b2a58c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;广度优先&quot;/&gt;&lt;/p&gt;
&lt;p&gt;广度优先整理后的方法顺序：a, b, c, d, e, f。也就是说，方法 a 里面调用了三个方法，那么优先将这三个方法摆放在方法 a 下方，此时并不去考虑这三个方法里是否还调用了其他方法。等过完方法 a，那么以同样的道理再去整理方法 b 中调用的方法的位置。&lt;/p&gt;
&lt;p&gt;但如果是深度优先，那么整理后的方法顺序就不同了，如下，depth-first order：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-5d4f627286ad06d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;深度优先&quot;/&gt;&lt;/p&gt;
&lt;p&gt;深度优先整理后的方法顺序：a, b, e, f, c, d。也就是说，方法 a 内调用了三个方法，第一个方法是 b, 然后方法 b 又调用了 e, f。所以方法 b 紧接着 a 方法下面摆放，方法 e, f 紧接着方法 b 下面摆放，直到 e, f 里都没有其他方法了。然后再重新回到方法 a 内继续往下过方法 c 的位置，以此类推。&lt;/p&gt;
&lt;p&gt;两种规则有各自的好处，广度优先侧重于优先梳理每个方法的大体工作；而深度优先则侧重于梳理每个方法的实现细节，流程步骤；&lt;/p&gt;
&lt;p&gt;目前我是选择广度优先，因为我更侧重于关注每个方法大体的工作，对于一个不熟悉的方法，大概过一下它里面的每个方法大体上做了什么，就能大概理解这个方法的大体工作。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;以上仅仅只是开启功能而已，而要借助 Android Studio 来自动整理方法位置，就是通过 AS 的格式化代码功能，快捷键也就是 &lt;strong&gt;Ctrl + Alt + L&lt;/strong&gt; 。但这个格式化操作默认是没有启动对方法进行整理的操作的，每次按完快捷键后会有如下提示：&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-0e61742bb89c1e22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;功能开启2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重点在底部那行灰色的字体，通过快捷键 &lt;strong&gt;Ctrl + Alt + Shift + L&lt;/strong&gt; 可以打开配置 dialog：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-3b91c79f6eec4c09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;配置&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rearrange code&lt;/strong&gt; 默认是没有勾选的，所以想要启用整理方法的功能，需要将这个勾选上，以后在通过 &lt;strong&gt;Ctrl + Alt + L&lt;/strong&gt; 来格式化代码时，AS 就会根据我们在第一个步骤中设定的规则来自动整理方法的位置。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1924341-35fed4659c556352.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;QQ图片20180316094923.jpg&quot;/&gt;&lt;br/&gt;最近（2018-03）刚开通了公众号，想激励自己坚持写作下去，初期主要分享原创的Android或Android-Tv方面的小知识，准备可能还有点不足，感兴趣的可以先点一波关注，谢谢支持~~&lt;/p&gt;
</description>
<pubDate>Fri, 30 Mar 2018 16:54:00 +0000</pubDate>
<dc:creator>请叫我大苏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dasusu/p/8679872.html</dc:identifier>
</item>
<item>
<title>Struts2框架入门 - 佳先森</title>
<link>http://www.cnblogs.com/cailijia52o/p/8679629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cailijia52o/p/8679629.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;Struts2框架&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、什么是Struts2&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。Struts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的&lt;a href=&quot;https://baike.baidu.com/item/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84&quot; target=&quot;_blank&quot;&gt;体系结构&lt;/a&gt;与Struts 1的体系结构差别巨大。Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与&lt;a href=&quot;https://baike.baidu.com/item/Servlet&quot; target=&quot;_blank&quot;&gt;Servlet&lt;/a&gt;API完全脱离开，所以Struts 2可以理解为WebWork的更新产品。虽然从Struts 1到Struts 2有着太大的变化，但是相对于WebWork，Struts 2的变化很小。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　-------------百度百科&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、快速搭建环境&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;1、下载官方的jar包&lt;/span&gt;&lt;br/&gt;　　　　官网：&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a title=&quot;Struts2框架核心jar包&quot; href=&quot;https://struts.apache.org/&quot;&gt;https://struts.apache.org/&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;2、将其中核心j包中app文件中的struts-blank后缀名改为zip，并进行解压其中的lib文件夹中的jar包为运行struts2的基本jar包&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;3、创建新工程，将基本jar包拷入新建工程中的lib文件夹&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201803/1226944-20180330210557651-1092442580.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;4、在web.xml文件中配置核心过滤器&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;filter&amp;gt;
      &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;
      &amp;lt;filter-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&amp;lt;/filter-&lt;span&gt;class&lt;/span&gt;&amp;gt;
  &amp;lt;/filter&amp;gt;
  &amp;lt;filter-mapping&amp;gt;
      &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;
      &amp;lt;url-pattern&amp;gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其中&amp;lt;filter-class&amp;gt;中过滤器名是根据StrutsPrepareAndExecuteFilter类所在路径来配置的&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201803/1226944-20180330211017107-2098177203.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　5、配置用于跳转的页面，此页面是用于跳转到Action中&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;
       &amp;lt;h3&amp;gt;快速入门&amp;lt;/h3&amp;gt;
       &amp;lt;a href=&quot;${pageContext.request.contextPath}/hello.action&quot;&amp;gt;跳转&amp;lt;/a&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;6、编写Action&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.action;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Struts框架都使用Action类处理用户的请求
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloAction {    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Action类中的方法签名有要求，必须这么做
     * public 公共的
     * 必须有返回值，必须String类型
     * 方法名称可以是任意的，但是不能有参数列表
     * 页面的跳转：1.return 字符串 2.需要在struts.xml配置文件中，配置跳转的页面
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String sayHello(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;编写代码接收请求的参数&lt;/span&gt;
        System.out.println(&quot;Hello Struts2!&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;success&quot;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 演示的method方法的默认值
     * 当配置文件中没有配置指定的method方法，他会默认执行Action中的execute方法
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String execute(){
        System.out.println(&lt;/span&gt;&quot;method方法的默认值是execute&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　&lt;span&gt;　7、设置Action配置文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　    配置文件是一个xml文件，命名强制为struts2.xml,否则当服务器开启时无法识别不是该文件名的配置文件，该文件建立在src下&lt;/p&gt;
&lt;p&gt;　　    其中，其约束条件可以在struts2-blank\WEB-INF\src\java的struts2.xml文件中可以找到&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;
&amp;lt;!&lt;span&gt;DOCTYPE struts PUBLIC
    &lt;/span&gt;&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;
    &quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&amp;gt;

&amp;lt;struts&amp;gt;
    &amp;lt;!-- 包结构 ，包名不能重复 --&amp;gt;
    &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;default&quot; namespace=&quot;/&quot; &lt;span&gt;extends&lt;/span&gt;=&quot;struts-default&quot;&amp;gt;
        &amp;lt;!-- 配置Action --&amp;gt;
        &amp;lt;action name=&quot;hello&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.clj.action.HelloAction&quot; method=&quot;sayHello&quot;&amp;gt;
            &amp;lt;!--&lt;span&gt; 配置跳转的页面,路经的写法：在Struts2框架中，不管是转发还是重定向，都不需要加项目名 
                name表示结果页面逻辑视图名称
                 type 结果类型（转发类型，默认值是转发，也可以设置其他的值）
            &lt;/span&gt;--&amp;gt;    
            &amp;lt;result name=&quot;success&quot;&amp;gt;/jsp/success.jsp&amp;lt;/result&amp;gt;
        &amp;lt;/action&amp;gt;
     &amp;lt;/&lt;span&gt;package&lt;/span&gt;&amp;gt;
&amp;lt;/struts&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;8、此时访问跳转页面，即可执行execute方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　总结：这里当执行跳转页面时，会根据配置文件中的action 中的 name属性进行匹配，找到有name为hello 匹配到HelloAction类中的sayHello方法，通过方法反射等进行解析，根据方法的返回值“success”进行页面的跳转，过渡到success.jsp中。值得注意的是，其package包名不能重复！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、struts2执行流程为：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;从客户端发送请求过来&lt;/span&gt; &lt;span&gt;先经过前端控制器（核心过滤器&lt;/span&gt;StrutsPrepareAndExecuteFilter&lt;span&gt;）过滤器中执行一组拦截器（一组拦截器 就会完成部分功能代码）执行目标&lt;/span&gt;&lt;span&gt;Action&lt;/span&gt;&lt;span&gt;，在&lt;/span&gt;&lt;span&gt;Action&lt;/span&gt;&lt;span&gt;中返回一个结果视图&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;根据&lt;/span&gt;&lt;span&gt;Result&lt;/span&gt;&lt;span&gt;的配置进行页面的跳转&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201803/1226944-20180330231359726-659706039.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;16&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201803/1226944-20180330220526267-1978976897.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、Action书写方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　方式一：POJO类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 三种action书写方式之POJO类
 * 没有任何继承和实现
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Demo1Action {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * execute是默认方法
     * return null：他不会跳转
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String execute(){
        System.out.println(&lt;/span&gt;&quot;Demo1Action就是一个POJO类&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　方式二：实现Action的接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.Action;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 三种action书写方式之实现Action的接口，Action是框架提供的接口
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Demo2Action &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Action{

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;Demo2Actions实现了Action的接口&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Action接口中定义了 public static final String SUCCESS = &quot;success&quot;;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其中Action有自定义的字符串常量，实现Action的接口返回值就可调用它的常量&lt;/p&gt;
&lt;p&gt;　　方式三：继承ActionSupport类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 *  三种action书写方式之编写ActionSupport类
 *  ActionSupport类已经实现了Action和一些其他接口
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Demo3Action &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{

    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        System.out.println(&lt;/span&gt;&quot;Demo3Action继承了ActionSupport类。。&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不跳转&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
     
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、struts2中常量的配置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;1.这里先看看当框架执行时配置文件加载的顺序&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;　　查看&lt;/span&gt;StrutsPrepareAndExecuteFilter:(&lt;span&gt;核心过滤器&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;两个功能 ：&lt;/span&gt;&lt;span&gt;预处理&lt;/span&gt; &lt;span&gt;和&lt;/span&gt; &lt;span&gt;执行&lt;/span&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;　　在预处理功能中&lt;/span&gt; init &lt;span&gt;方法中会有加载配置文件的代码&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　　 dispatcher.init();&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            init_DefaultProperties(); // [1] ---- &lt;span&gt;加载&lt;/span&gt;&lt;span&gt;org.apache.struts.default.properties.&lt;/span&gt;&lt;span&gt;配置的是&lt;/span&gt;&lt;span&gt;struts2&lt;/span&gt;&lt;span&gt;的所有常量&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            init_TraditionalXmlConfigurations(); // [2] ---- &lt;span&gt;加载&lt;/span&gt;&lt;span&gt;struts-default.xml&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;struts-plugin.xml&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;struts.xml&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            init_LegacyStrutsProperties(); // [3] ---- &lt;span&gt;加载用户自定义&lt;/span&gt;struts.properties&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            init_CustomConfigurationProviders(); // [5] ---- &lt;span&gt;加载&lt;/span&gt;&lt;span&gt;Struts2&lt;/span&gt;&lt;span&gt;定义&lt;/span&gt;&lt;span&gt;Bean.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            init_FilterInitParameters() ; // [6] ---- &lt;span&gt;加载&lt;/span&gt;web.xml&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            init_AliasStandardObjects() ; // [7] ---- &lt;span&gt;用户自定义&lt;/span&gt;&lt;span&gt;Bean&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;　　   结论&lt;/span&gt;:&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　     &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; 　　 * 先加载default.properties文件，在org/apache/struts2/default.properties文件，都是常量。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;   　   * 又加载struts-default.xml配置文件，在核心的jar包最下方，struts2框架的核心功能都是在该配置文件中配置的。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;  　    * 再加载struts.xml的配置文件，在src的目录下，代表用户自己配置的配置文件&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;          * 最后加载web.xml的配置文件&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;    * 后加载的配置文件会覆盖掉之前加载的配置文件（在这些配置文件中可以配置常量）&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            因此： &lt;span&gt;后配置的常量&lt;/span&gt; &lt;span&gt;会&lt;/span&gt; &lt;span&gt;覆盖先配置的常量&lt;/span&gt;.&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　     &lt;span&gt;2、查看常量&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201803/1226944-20180330214711129-1979493906.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　&lt;span&gt;3、修改常量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　注意：修改常量不能在default.properties文件中修改，可以在struts.xml或者web.xml文件中&lt;/p&gt;
&lt;p&gt;　　 1）在struts.xml中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
　　&amp;lt;!-- 编写常量 --&amp;gt;
    &amp;lt;constant name=&quot;struts.action.extension&quot; value=&quot;action,,&quot;&amp;gt;&amp;lt;/constant&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　struts2中访问action默认后缀为action或者不写，这个配置可以进行更改&lt;/p&gt;
&lt;p&gt;　　 2）在web.xml中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &amp;lt;filter&amp;gt;
      &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;
      &amp;lt;filter-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&amp;lt;/filter-&lt;span&gt;class&lt;/span&gt;&amp;gt;
      &amp;lt;!-- 编写常量 --&amp;gt;
      &amp;lt;init-param&amp;gt;
          &amp;lt;param-name&amp;gt;struts.action.extension&amp;lt;/param-name&amp;gt;
          &amp;lt;param-value&amp;gt;action,,&amp;lt;/param-value&amp;gt;
      &amp;lt;/init-param&amp;gt;
  &amp;lt;/filter&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;六、Action的访问方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;1、传统方式：配置method属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　  1）Action类代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 编写的客户的Action的类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomerAction &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存客户&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String save(){
        System.out.println(&lt;/span&gt;&quot;保存客户&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除客户&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String delete(){
        System.out.println(&lt;/span&gt;&quot;删除客户&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
}    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 2）配置文件配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &amp;lt;!-- 演示Action的访问，传统方式 --&amp;gt;
     &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;demo2&quot; namespace=&quot;/&quot; &lt;span&gt;extends&lt;/span&gt;=&quot;struts-default&quot;&amp;gt;
         &amp;lt;action name=&quot;saveCust&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.clj.action2.CustomerAction&quot; method=&quot;save&quot;/&amp;gt;
         &amp;lt;action name=&quot;delCust&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.clj.action2.CustomerAction&quot; method=&quot;delete&quot;/&amp;gt;    
     &amp;lt;/&lt;span&gt;package&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;2、通配符的配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　 1）Action类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 通配符的方式
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LinkmanAction &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存客户&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String save(){
        System.out.println(&lt;/span&gt;&quot;保存联系人。。&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;saveOk&quot;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除客户&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String delete(){
        System.out.println(&lt;/span&gt;&quot;删除联系人。。&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;delOk&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 2）配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
 &amp;lt;!-- 演示Action的访问，通配符方式 --&amp;gt;
     &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;demo3&quot; namespace=&quot;/&quot; &lt;span&gt;extends&lt;/span&gt;=&quot;struts-default&quot;&amp;gt;
&lt;/pre&gt;
&lt;p class=&quot;16&quot;&gt;   &amp;lt;!--&lt;span&gt;这里的&lt;/span&gt;&lt;span&gt;{1}&lt;/span&gt;&lt;span&gt;代表统配第一个&lt;/span&gt;&lt;span&gt;*;&lt;/span&gt;&lt;span&gt;若&lt;/span&gt;&lt;span&gt;name=&lt;/span&gt;”&lt;em&gt;linkman_*&lt;/em&gt;&lt;em&gt;_*&lt;/em&gt;...methd=”{1}”&lt;span&gt;，&lt;/span&gt;{1}&lt;span&gt;表示匹配第一个&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;{2}&lt;/span&gt;&lt;span&gt;表示通配第二个&lt;/span&gt;&lt;span&gt;*,&lt;/span&gt;&lt;span&gt;即数字表示&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;的位置，通过通配符调用指定方法&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
         &amp;lt;action name=&quot;linkman_*&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.clj.action2.LinkmanAction&quot; method=&quot;{1}&quot;&amp;gt;
             &amp;lt;result name=&quot;saveOk&quot;&amp;gt;/jsp/success.jsp&amp;lt;/result&amp;gt;
             &amp;lt;result name=&quot;delOk&quot;&amp;gt;/jsp/success.jsp&amp;lt;/result&amp;gt;
         &amp;lt;/action&amp;gt;
     &amp;lt;/&lt;span&gt;package&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;　 3、动态方法访问&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　 1）开启动态访问常量（注意：常量的配置都是定义在包外）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 开启动态方法访问 --&amp;gt;
    &amp;lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;true&quot;&amp;gt;&amp;lt;/constant&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 2）Action类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 动态方法访问
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserAction &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存客户&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String save(){
            System.out.println(&lt;/span&gt;&quot;保存用户。。&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除客户&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String delete(){
            System.out.println(&lt;/span&gt;&quot;删除用户。。&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 3）配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &amp;lt;!-- 演示Action的访问，动态方法访问方式 --&amp;gt;
     &amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;demo4&quot; namespace=&quot;/&quot; &lt;span&gt;extends&lt;/span&gt;=&quot;struts-default&quot;&amp;gt;
         &amp;lt;action name=&quot;user&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.clj.action2.UserAction&quot;/&amp;gt;
     &amp;lt;/&lt;span&gt;package&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 4）域名书写方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;h3&amp;gt;动态方法访问&amp;lt;/h3&amp;gt;
     &amp;lt;a href=&quot;${pageContext.request.contextPath}/user!save.action&quot;&amp;gt;保存联系人&amp;lt;/a&amp;gt;&amp;lt;/br&amp;gt;
     &amp;lt;a href=&quot;${pageContext.request.contextPath}/user!delete.action&quot;&amp;gt;删除联系人&amp;lt;/a&amp;gt;&amp;lt;/br&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 七、struts2中数据的之接收数据&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　struts2怎么传值呢，这里由两种种方式&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;1.定义一个jsp，利用表单进行数据传输&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
          &amp;lt;form action=&quot;${pageContext.request.contextPath}/demo1Action.action&quot; method=&quot;post&quot;&amp;gt;&lt;span&gt;
              姓名：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;username&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              密码：&lt;/span&gt;&amp;lt;input type=&quot;password&quot; name=&quot;psssword&quot;/&amp;gt;&amp;lt;/br&amp;gt;
              &amp;lt;input type=&quot;submit&quot; value=&quot;注册&quot;/&amp;gt;
          &amp;lt;/form&amp;gt;&amp;lt;/br&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;　2.编写Action&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　 1）方式一：完全解耦合的方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo1;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Set;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 完全解耦合的方式，使用Servlet的API
 * 通过操作ActionContexte类的方法来获取Servlet API
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; demo1Action &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;完全解耦合的方式&lt;/span&gt;
        ActionContext context=&lt;span&gt;ActionContext.getContext();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取到请求的参数,获取到所有请求的参数&lt;/span&gt;
        Map&amp;lt;String,Object&amp;gt; map=&lt;span&gt;context.getParameters();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历获取数据&lt;/span&gt;
        Set&amp;lt;String&amp;gt; keys=&lt;span&gt;map.keySet();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String key:keys){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过key获取到值&lt;/span&gt;
            String[] values=&lt;span&gt;(String[]) map.get(key);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认情况下，struts已经将字符编码转成了UTF-8,无需考虑中文乱码&lt;/span&gt;
            System.out.println(key+&quot;:&quot;+&lt;span&gt;Arrays.toString(values));
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果向request对象中存入值&lt;/span&gt;
        context.put(&quot;msg&quot;,&quot;小东东&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取其他map集合&lt;/span&gt;
        context.getSession().put(&quot;msg&quot;,&quot;小苍&quot;&lt;span&gt;);
        context.getApplication().put(&lt;/span&gt;&quot;msg&quot;,&quot;小泽&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;
        
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2）方式二：原生的Servlet API&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo1;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.struts2.ServletActionContext;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 原生的Servlet API
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; demo2Action &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取到request对象&lt;/span&gt;
        HttpServletRequest request=&lt;span&gt;ServletActionContext.getRequest();
        request.setAttribute(&lt;/span&gt;&quot;msg&quot;,&quot;小东东&quot;&lt;span&gt;);
        request.getSession().setAttribute(&lt;/span&gt;&quot;msg&quot;,&quot;美美&quot;&lt;span&gt;);
        ServletActionContext.getServletContext().setAttribute(&lt;/span&gt;&quot;msg&quot;, &quot;小风&quot;&lt;span&gt;);&lt;/span&gt;     
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;八、结果视图处理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;1、关于全局页面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　     为什么要设置全局页面？因为在同一个包下，有时候多个action中所获得的结果视图是同一个，这要每个action配置会觉得冗余，此时可以配置个全局页面来共用&lt;/p&gt;
&lt;p&gt;　　　 列子：假如当action中方法返回值是success，此时就可无需配置&amp;lt;result&amp;gt;标签，它会自动跳转到success.jsp中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 配置全局的结果页面，必须定义在当前包下 --&amp;gt;
    &amp;lt;global-results&amp;gt;
        &amp;lt;!--&lt;span&gt; type:转发类型 
                 dispatcher:转发，默认值，Action&lt;/span&gt;-&amp;gt;&lt;span&gt;jsp
                 redirect:  重定向，Action&lt;/span&gt;-&amp;gt;&lt;span&gt;jsp
                 chain:     多个action之间跳转，Action&lt;/span&gt;-&amp;gt;&lt;span&gt;Action(转发)
                 redirectAction:多个action之间跳转，Action&lt;/span&gt;-&amp;gt;&lt;span&gt;Action(重定向)
                 stream：文件下载
        &lt;/span&gt;--&amp;gt;
        &amp;lt;result name=&quot;success&quot; type=&quot;dispatcher&quot;&amp;gt;/jsp/success.jsp&amp;lt;/result&amp;gt;
    &amp;lt;/global-results&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;16&quot;&gt;　　&lt;span&gt;2.、结果页面的类型&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        * 结果页面使用&amp;lt;result&amp;gt;标签进行配置，包含两个属性&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; name  -- 逻辑视图的名称&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; type  -- 跳转的类型，值一些，需要掌握一些常用的类型。常见的结果类型去struts-default.xml中查找。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            * dispatcher        -- 转发.type的默认值.Action---&amp;gt;JSP&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            * redirect          -- 重定向. Action---&amp;gt;JSP&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            * chain             -- 多个action之间跳转.从一个Action转发到另一个Action.  Action---Action&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            * redirectAction    -- 多个action之间跳转.从一个Action重定向到另一个Action. Action---Action&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            * stream            -- 文件下载时候使用的&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　　  演示重定向&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　　　action&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo1;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 演示重定向
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; demo3Action &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String save(){
        System.out.println(&lt;/span&gt;&quot;保存&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String update(){
        System.out.println(&lt;/span&gt;&quot;更新成功&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 演示重定向到Action --&amp;gt;
        &amp;lt;action name=&quot;demo3Action_*&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.clj.demo1.demo3Action&quot; method=&quot;{1}&quot;&amp;gt;
            &amp;lt;result name=&quot;success&quot; type=&quot;redirectAction&quot;&amp;gt;demo3Action_update&amp;lt;/result&amp;gt;
        &amp;lt;/action&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;16&quot;&gt;&lt;strong&gt;&lt;span&gt;九、关于struts2框架数据的封装&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　封装数据是为了便于开发，降低维护成本，这里有两种方式进行数据的封装。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　&amp;gt; 提供对应属性的set方法进行数据的封装。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            * 表单的哪些属性需要封装数据，那么在对应的Action类中提供该属性的set方法即可。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            * 表单中的数据提交，最终找到Action类中的setXxx的方法，最后赋值给全局变量。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　&lt;span&gt;1、方式一：属性驱动&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　     1）属性驱动写法方式一：在action类中直接写从页面中提交的属性数据&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　       jsp：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 &amp;lt;h3&amp;gt;属性驱动的方式(直接在Action中编写属性)&amp;lt;/h3&amp;gt;
         &amp;lt;!-- aciton接收表单值时属性要提供set方法 --&amp;gt;
         &amp;lt;form action=&quot;${pageContext.request.contextPath}/regist1.action&quot; method=&quot;post&quot;&amp;gt;&lt;span&gt;
              姓名：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;username&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              密码：&lt;/span&gt;&amp;lt;input type=&quot;password&quot; name=&quot;password&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              年龄：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;age&quot;/&amp;gt;&amp;lt;/br&amp;gt;
              &amp;lt;input type=&quot;submit&quot; value=&quot;注册&quot;/&amp;gt;
          &amp;lt;/form&amp;gt;&amp;lt;/br&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　action:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo2;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 属性驱动
 * 方式一：将Action当做JavaBean类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; regist1 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传值，用set，不需要要用get&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        System.out.println(username&lt;/span&gt;+&quot; &quot;+password+&quot; &quot;+&lt;span&gt;age);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　  2)属性驱动写法方式二：将提交的数据封装到一个类中&lt;/p&gt;
&lt;p&gt;　　　 jsp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;h3&amp;gt;属性驱动的方式(把数据封装到javaBean中)&amp;lt;/h3&amp;gt;
          &amp;lt;!-- 注意：页面的编写风格为OGNL表达写法 --&amp;gt;
             &amp;lt;form action=&quot;${pageContext.request.contextPath}/regist2.action&quot; method=&quot;post&quot;&amp;gt;
                 &amp;lt;!-- 这里的&quot;user&quot;是根据Aciton中封装属性的类的名称属性而定（&lt;span&gt;private&lt;/span&gt; User user;） --&amp;gt;&lt;span&gt;
              姓名：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;user.username&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              密码：&lt;/span&gt;&amp;lt;input type=&quot;password&quot; name=&quot;user.password&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              年龄：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;user.age&quot;/&amp;gt;&amp;lt;/br&amp;gt;
              &amp;lt;input type=&quot;submit&quot; value=&quot;注册&quot;/&amp;gt;
          &amp;lt;/form&amp;gt;&amp;lt;/br&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　    javabean&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo2;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;User [username=&quot; + username + &quot;, password=&quot; +&lt;span&gt; password
                &lt;/span&gt;+ &quot;, age=&quot; + age + &quot;]&quot;&lt;span&gt;;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 action&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo2;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 属性驱动的方式，将数据封装到javaBean中
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; regist2 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：属性驱动的方式,需要提供get和set方法&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; User user;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User getUser() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUser(User user) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.user =&lt;span&gt; user;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String execute(){
        System.out.println(user);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
}&lt;/span&gt;　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;16&quot;&gt;　　* 注意：只提供一个set方法还不够，必须还需要提供user属性的get和set方法！！！&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; &lt;span&gt;先调用&lt;/span&gt;get方法，判断一下是否有user对象的实例对象，如果没有，调用set方法把拦截器创建的对象注入进来，&lt;span&gt;接下直接调用&lt;/span&gt;get&lt;span&gt;方法获取传过来的参数&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;　　拓展:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;　　&lt;span&gt;1.将数据封装到list中&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;　　  jsp&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;h3&amp;gt;向List集合封装数据(默认情况下，采用属性驱动的方式)&amp;lt;/h3&amp;gt;
          &amp;lt;!-- 采用OGNL表达式 --&amp;gt;
          &amp;lt;form action=&quot;${pageContext.request.contextPath}/regist4.action&quot; method=&quot;post&quot;&amp;gt;
                 &amp;lt;!-- 这里的&quot;user&quot;是根据Aciton中封装属性的类的名称属性而定（&lt;span&gt;private&lt;/span&gt; User user;） --&amp;gt;&lt;span&gt;
              姓名：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;list[0].username&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              密码：&lt;/span&gt;&amp;lt;input type=&quot;password&quot; name=&quot;list[0].password&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              年龄：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;list[0].age&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              
              姓名：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;list[1].username&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              密码：&lt;/span&gt;&amp;lt;input type=&quot;password&quot; name=&quot;list[1].password&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              年龄：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;list[1].age&quot;/&amp;gt;&amp;lt;/br&amp;gt;
              &amp;lt;input type=&quot;submit&quot; value=&quot;注册&quot;/&amp;gt;
          &amp;lt;/form&amp;gt;&amp;lt;/br&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p&gt;　　　 action&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo2;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 属性驱动的方式，把数据封装List集合中
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; regist4 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; list;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt;&lt;span&gt; getList() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setList(List&amp;lt;User&amp;gt;&lt;span&gt; list) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.list =&lt;span&gt; list;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(User user:list){
            System.out.println(user);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;2.将数据封装到Map集合中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　 jsp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;h3&amp;gt;向Map集合封装数据(默认情况下，采用属性驱动的方式)&amp;lt;/h3&amp;gt;
          &amp;lt;!-- 采用OGNL表达式 --&amp;gt;
          &amp;lt;form action=&quot;${pageContext.request.contextPath}/regist5.action&quot; method=&quot;post&quot;&amp;gt;
                 &amp;lt;!-- 这里的&quot;user&quot;是根据Aciton中封装属性的类的名称属性而定（&lt;span&gt;private&lt;/span&gt; User user;） --&amp;gt;&lt;span&gt;
              姓名：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;map['one'].username&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              密码：&lt;/span&gt;&amp;lt;input type=&quot;password&quot; name=&quot;map['one'].password&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              年龄：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;map['one'].age&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              
              姓名：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;map['two'].username&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              密码：&lt;/span&gt;&amp;lt;input type=&quot;password&quot; name=&quot;map['two'].password&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              年龄：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;map['two'].age&quot;/&amp;gt;&amp;lt;/br&amp;gt;
              &amp;lt;input type=&quot;submit&quot; value=&quot;注册&quot;/&amp;gt;
          &amp;lt;/form&amp;gt;&amp;lt;/br&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 action&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo2;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.HashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 属性驱动的方式，把数据封装Map集合中
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; regist5 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Map&amp;lt;String,User&amp;gt; map=&lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String,User&amp;gt;&lt;span&gt;(); 
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, User&amp;gt;&lt;span&gt; getMap() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; map;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setMap(Map&amp;lt;String, User&amp;gt;&lt;span&gt; map) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.map =&lt;span&gt; map;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        System.out.println(map);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;　　&lt;span&gt;2、方式二：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;模型驱动&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;　　　　&lt;/span&gt;&lt;span&gt;1)手动实例化javabean&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; User user=&lt;span&gt;new&lt;/span&gt; User();
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p&gt;　　　　2）&lt;span&gt;实现&lt;/span&gt;ModelDriven&amp;lt;T&amp;gt;接口，实现getModel()的方法，在getModel()方法中返回javaBean&lt;/p&gt;
&lt;p&gt;　　　　jsp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;h3&amp;gt;模型驱动&amp;lt;/h3&amp;gt;
             &amp;lt;form action=&quot;${pageContext.request.contextPath}/regist3.action&quot; method=&quot;post&quot;&amp;gt;
                 &amp;lt;!-- 这里的&quot;user&quot;是根据Aciton中封装属性的类的名称属性而定（&lt;span&gt;private&lt;/span&gt; User user;） --&amp;gt;&lt;span&gt;
              姓名：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;username&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              密码：&lt;/span&gt;&amp;lt;input type=&quot;password&quot; name=&quot;password&quot;/&amp;gt;&amp;lt;/br&amp;gt;&lt;span&gt;
              年龄：&lt;/span&gt;&amp;lt;input type=&quot;text&quot; name=&quot;age&quot;/&amp;gt;&amp;lt;/br&amp;gt;
              &amp;lt;input type=&quot;submit&quot; value=&quot;注册&quot;/&amp;gt;
          &amp;lt;/form&amp;gt;&amp;lt;/br&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　action代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo2;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ModelDriven;
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 模型驱动的方式
 * 1.实现ModelDrivern接口
 * 2.必须手动实列化对象（需要自己new好）
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; regist3 &lt;span&gt;extends&lt;/span&gt; ActionSupport &lt;span&gt;implements&lt;/span&gt; ModelDriven&amp;lt;User&amp;gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;必须手动实例化&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; User user=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取模型对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; User getModel() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; user;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        System.out.println(user);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;十、struts2之拦截器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;1、什么是拦截器？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　java里的拦截器是动态拦截Action调用的对象。它提供了一种机制可以使开发者可以定义在一个action执行的前后执行的代码，也可以在一个action执行前阻止其执行，同时也提供了一种可以提取action中可重用部分的方式。在&lt;strong&gt;AOP&lt;/strong&gt;(Aspect-Oriented Programming)中拦截器用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　---------360百科&lt;/p&gt;
&lt;p&gt;     拦截器的利用是struts2框架的一个特点，即面向切面编程&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;2、编写一个拦截器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　1）定义一个拦截器类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.itheima.interceptior;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.collect.AbstractIterator;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionInvocation;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.interceptor.AbstractInterceptor;



&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 编写简单的拦截器
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DemoInterceptor &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractInterceptor{
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * intercept用来进行拦截的
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; String intercept(ActionInvocation invocation) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        System.out.println(&lt;/span&gt;&quot;Action方法执行之前&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行下一个拦截器&lt;/span&gt;
        String result=&lt;span&gt;invocation.invoke();
        System.out.println(&lt;/span&gt;&quot;Action方法执行之后&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2) 定义一个action&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo3;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserAction &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        System.out.println(&lt;/span&gt;&quot;我是Action,我正常执行了&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3) 配置文件配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;&lt;span&gt;package&lt;/span&gt; name=&quot;demo3&quot; &lt;span&gt;extends&lt;/span&gt;=&quot;struts-default&quot; namespace=&quot;/&quot;&amp;gt;
         &amp;lt;interceptors&amp;gt;
             &amp;lt;!-- 定义了拦截器 --&amp;gt;
             &amp;lt;interceptor name=&quot;DemoInterceptor&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.itheima.interceptior.DemoInterceptor&quot;/&amp;gt;
         &amp;lt;/interceptors&amp;gt;
        &amp;lt;action name=&quot;userAction&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.clj.demo3.UserAction&quot;&amp;gt;
            &amp;lt;!-- 只要是引用自己的拦截器，默认栈的拦截器就不执行了 ，必须手动引入默认栈--&amp;gt;
            &amp;lt;interceptor-ref name=&quot;DemoInterceptor&quot;/&amp;gt;
            &amp;lt;interceptor-ref name=&quot;defaultStack&quot;/&amp;gt;
        &amp;lt;/action&amp;gt;
    &amp;lt;/&lt;span&gt;package&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;3、使用拦截器验证用户登录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　   1) 定义一个拦截器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.interceptor;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.struts2.ServletActionContext;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.heima.domain.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionInvocation;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.interceptor.MethodFilterInterceptor;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 自动以拦截器，判断当前系统是否已经登录，如果登录，继续执行
 * 如果没有登录，跳转到登录页面
 * AbstractInterceptor会拦截所有方法
 * MethodFilterInterceptor可以对指定的方法进行拦截
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserInterceptor &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; MethodFilterInterceptor{

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 进行拦截的方法
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; String doIntercept(ActionInvocation invocation) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得session对象&lt;/span&gt;
        User user=(User) ServletActionContext.getRequest().getSession().getAttribute(&quot;existUser&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(user==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有登录,返回字符串，后面就不会执行了&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &quot;login&quot;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; invocation.invoke();
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 2）action&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.itheima.action;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.InvocationTargetException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.commons.beanutils.BeanUtils;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.struts2.ServletActionContext;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.heima.domain.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.itheima.service.UserService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.opensymphony.xwork2.ActionSupport;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 用户登录模块控制器
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserAction &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ActionSupport{
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 处理登录功能
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String login(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这边没有学习功能，封装数据，现在还需要request对象
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;怎么获取reqeust方式&lt;/span&gt;
        HttpServletRequest request=&lt;span&gt;ServletActionContext.getRequest();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取请求参数&lt;/span&gt;
        Map&amp;lt;String,String[]&amp;gt; map=&lt;span&gt;request.getParameterMap();
        User user&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            BeanUtils.populate(user,map);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用业务层&lt;/span&gt;
            User existUser=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserService().login(user);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(existUser==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明，用户名或者密码错误了&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; LOGIN;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存入session中&lt;/span&gt;
                request.getSession().setAttribute(&quot;existUser&quot;&lt;span&gt;, existUser);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; SUCCESS;
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;            e.printStackTrace();
        } 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
    } 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 配置文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 配置用户的模块 --&amp;gt;
        &amp;lt;action name=&quot;user_*&quot; &lt;span&gt;class&lt;/span&gt;=&quot;com.itheima.action.UserAction&quot; method=&quot;{1}&quot;&amp;gt;
            &amp;lt;!--&amp;lt;result name=&quot;login&quot;&amp;gt;/login.jsp&amp;lt;/result&amp;gt;--&amp;gt;
            &amp;lt;result name=&quot;success&quot;&amp;gt;/index.jsp&amp;lt;/result&amp;gt;
            &amp;lt;interceptor-ref name=&quot;UserInterceptor&quot;&amp;gt;
                &amp;lt;param name=&quot;excludeMethods&quot;&amp;gt;login&amp;lt;/param&amp;gt;
            &amp;lt;/interceptor-ref&amp;gt;
            &amp;lt;interceptor-ref name=&quot;defaultStack&quot;/&amp;gt;
        &amp;lt;/action&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;十一、OGNL&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　1、什么是OGNL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　 OGNL是Object-Graph Navigation Language的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的&lt;a href=&quot;https://baike.so.com/doc/5777526-5990305.html&quot; target=&quot;_blank&quot;&gt;表达式&lt;/a&gt;去存取对象的属性。&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　  ------------360百科&lt;/p&gt;
&lt;p&gt;Struts2框架使用OGNL作为默认的表达式语言&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;2、演示OGNL表达式&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.clj.demo1;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; ognl.Ognl;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; ognl.OgnlContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; ognl.OgnlException;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 演示OGNL表达式
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OgnlDemo {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * OGNL访问对象的方法
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; OgnlException 
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; run1() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; OgnlException{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上下文对象&lt;/span&gt;
        OgnlContext context=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OgnlContext();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取到根对象(ognl都是从根对象进行取值)&lt;/span&gt;
        Object root=&lt;span&gt;context.getRoot();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储数据&lt;/span&gt;
        context.put(&quot;name&quot;,&quot;美美&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取值,表达式写法&lt;/span&gt;
        Object obj=Ognl.getValue(&quot;#name&quot;&lt;span&gt;,context,root);
        System.out.println(obj);
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * OGNL表达式调用方法
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; OgnlException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; run2() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; OgnlException{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上下文对象&lt;/span&gt;
        OgnlContext context=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OgnlContext();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取到根对象(ognl都是从根对象进行取值)&lt;/span&gt;
        Object root=&lt;span&gt;context.getRoot();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取值,表达式写法(这里是让字符串调用他的方法)&lt;/span&gt;
        Object obj=Ognl.getValue(&quot;'haha'.length()&quot;&lt;span&gt;,context,root);
        System.out.println(obj);
    }
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;3、jsp中演示OGNL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　  1) 先引入Strust2标签库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 2) 调用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;
       &amp;lt;h3&amp;gt;条件：假如值栈中已经存入值了，在JSP页面上从值栈中获取值&amp;lt;/h3&amp;gt;
       &amp;lt;!-- 
           1&lt;span&gt;.先引入Struts框架中提供的标签库，s标签
           &lt;/span&gt;2&lt;span&gt;.可以使用提供的标签(很多，掌握重点的标签)
        &lt;/span&gt;--&amp;gt;
        &amp;lt;!-- 从值栈中获取值的value,中间编写就是OGNL表达式 --&amp;gt;
        &amp;lt;s:property value=&quot;username&quot;/&amp;gt;
        &amp;lt;!-- 显示常量：加''号 --&amp;gt;
         &amp;lt;s:property value=&quot;'username'&quot;/&amp;gt;
         &amp;lt;!-- 调用方法：加.加方法 --&amp;gt;
         &amp;lt;s:property value=&quot;'username'.length()&quot;/&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;十二、Struts2之值栈&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;1、什么是值栈&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　 * 值栈就相当于Struts2框架的数据的中转站，向值栈存入一些数据。从值栈中获取到数据。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;    * ValueStack 是 struts2 提供一个接口，实现类 OgnlValueStack ---- 值栈对象 （OGNL是从值栈中获取数据的 ）&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;    * Action是多例的，有一起请求，创建Action实例，创建一个ActionContext对象，代表的是Action的上下文对象，还会创建一个ValueStack对象。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;    * &lt;span&gt;每个&lt;/span&gt;Action实例都有一个ValueStack对象 （一个请求 对应 一个ValueStack对象 &lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;    * 在其中保存当前Action 对象和其他相关对象&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;    * Struts 框架把 ValueStack 对象保存在名为 “struts.valueStack” 的请求属性中,request中 （值栈对象 是 request一个属性）&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        * ValueStack vs = (ValueStack)request.getAttribute(&quot;struts.valueStack&quot;);&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　&lt;span&gt;　2、关于值栈的内部结构&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　* 值栈由两部分组成&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; root      -- Struts把动作和相关对象压入 ObjectStack 中--List&lt;span&gt;（底层&lt;/span&gt;ArrayList&lt;span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; context   -- Struts把各种各样的映射关系(一些 Map 类型的对象) 压入 ContextMap 中&lt;span&gt;（底层&lt;/span&gt;Map,&lt;span&gt;当讲&lt;/span&gt;Servlet&lt;span&gt;的&lt;/span&gt;API&lt;span&gt;时，完成接耦合方式&lt;/span&gt;ActionContext.getRequest()&lt;span&gt;所返回的      &lt;/span&gt;Map&lt;span&gt;集合就是此集合）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        * Struts会默认把下面这些映射压入ContextMap（context）中&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        * 注意：request代表的是Map集合的key值(&lt;span&gt;字符串名&lt;/span&gt;)，value的值其实也是一个Map集合。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; parameters: 该 Map 中包含当前请求的请求参数  ?name=xxx&amp;amp;password=123&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; request: 该 Map 中包含当前 request 对象中的所有属性&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; session: 该 Map 中包含当前 session 对象中的所有属性&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; application:该 Map 中包含当前 application  对象中的所有属性&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; attr: 该 Map 按如下顺序来检索某个属性: request, session, application&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        * ValueStack中 存在root属性 (CompoundRoot) 、 context 属性 （OgnlContext ）&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; CompoundRoot 就是ArrayList&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; OgnlContext 就是 Map&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        * context 对应Map 引入 root对象&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; context中还存在 request、 session、application、 attr、 parameters 对象引用&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; OGNL表达式访问值栈中的数据&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            * 访问root中数据时 不需要 #&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;            * 访问 request、 session、application、 attr、 parameters 对象数据 必须写 #&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;        &amp;gt; &lt;span&gt;操作值栈&lt;/span&gt; &lt;span&gt;默认指&lt;/span&gt; &lt;span&gt;操作&lt;/span&gt; root 元素&lt;span&gt;（至于&lt;/span&gt;context&lt;span&gt;是框架自动将请求参数或者其他数据封装到&lt;/span&gt;conttext&lt;span&gt;中）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201803/1226944-20180330234335254-785042136.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226944/201803/1226944-20180330234359085-272095321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　 &lt;span&gt;3、在jsp中查看值栈&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &amp;lt;!-- 在JSP页面上，查看值栈的内部结构 --&amp;gt;
     &amp;lt;s:debug/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　&lt;span&gt;　4、关于值栈中压值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　    1）压字符串之push方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 演示值栈对象的目录结构
     * 想栈中压元素，先进先出
     * push：压入的对象
     * set：压入集合(先判断压入的对象是否是集合，不是则强转为集合，再创建键值对；是则在原有集合中压入元素)
     * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; String execute() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception{
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;//使用获取值栈对象
        HttpServletRequest request=ServletActionContext.getRequest();
        ValueStack vs=(ValueStack) request.getAttribute(&quot;struts.valueStack&quot;);
        System.out.println(vs);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取值栈对象，先获取到ActionContext对象&lt;/span&gt;
        ValueStack vs=&lt;span&gt;ActionContext.getContext().getValueStack();
        System.out.println(vs);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;栈顶压的是字符串&lt;/span&gt;
        vs.push(&quot;
&lt;/pre&gt;
&lt;pre&gt;
美美
&lt;/pre&gt;
&lt;pre&gt;
&quot;&lt;span&gt;);&lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;h3&amp;gt;从值栈中获取值&amp;lt;/h3&amp;gt;
     &amp;lt;!--&lt;span&gt;值栈中获取的对象，当存入字符串时，栈顶第一个位置为对象，第二位置为Action,第三位置为封转栈的信息
         栈的默认索引是从0开始：[&lt;/span&gt;0]表示获取栈顶的封装对象的一些列信息，[0&lt;span&gt;].top获取对象值
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;vs.push(&quot;美美&quot;);--&amp;gt;&lt;/span&gt;
     &amp;lt;s:property value=&quot;[0]&quot;/&amp;gt;
     &amp;lt;s:property value=&quot;[0].top&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 2）压字符串之set方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ValueStack vs=&lt;span&gt;ActionContext.getContext().getValueStack();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;栈顶压的是集合&lt;/span&gt;
vs.set(&quot;msg&quot;,&quot;金在中&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &amp;lt;!-- 从栈顶获取字符串 ，方法为set，值栈中存的是Map集合&amp;gt;
     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;vs.set(&quot;msg&quot;,&quot;金在中&quot;);--&amp;gt;&lt;/span&gt;
     &amp;lt;s:property value=&quot;[0].top.msg&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 3）栈顶放的是User对象,用push方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ValueStack vs=&lt;span&gt;ActionContext.getContext().getValueStack();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建User对象&lt;/span&gt;
User user=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
user.setUsername(&lt;/span&gt;&quot;美美&quot;&lt;span&gt;);
user.setPassword(&lt;/span&gt;&quot;123&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;压栈&lt;/span&gt;
vs.push(user);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
 &amp;lt;!--&lt;span&gt;栈顶放的是User对象,用push方法
         &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[0].top关键字可以省略，值栈中提供getValue方法，从结果中找指定属性&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; User user=new User();
        user.setUsername(&quot;美美&quot;);
        user.setPassword(&quot;123&quot;);
        //压栈
        vs.push(user);&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;--&amp;gt;
     &amp;lt;s:property value=&quot;[0].top.username&quot;/&amp;gt;
     &amp;lt;s:property value=&quot;[0].top.password&quot;/&amp;gt;
     &amp;lt;s:property value=&quot;password&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 4）栈顶放的是User对象,用set方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ValueStack vs=&lt;span&gt;ActionContext.getContext().getValueStack();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建User对象&lt;/span&gt;
User user=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
user.setUsername(&lt;/span&gt;&quot;美美&quot;&lt;span&gt;);
user.setPassword(&lt;/span&gt;&quot;123&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;压栈&lt;/span&gt;
vs.set(&quot;user&quot;,user);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 　　&amp;lt;!--&lt;span&gt;栈顶放的是User对象,用set方法
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; vs.set(&quot;user&quot;,user);--&amp;gt;&lt;/span&gt;
     &amp;lt;s:property value=&quot;[0].top.user.username&quot;/&amp;gt;
     &amp;lt;s:property value=&quot;[0].top.user.password&quot;/&amp;gt;
     &amp;lt;s:property value=&quot;user.password&quot;/&amp;gt;
      
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 5）在action中配置成员属性，并提供set/get方法，jsp同样可以来接收&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; User user=&lt;span&gt;new&lt;/span&gt; User(&quot;小泽&quot;,&quot;456&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提供set/get方法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
　　　　&amp;lt;!--&lt;span&gt; 在ValueStack1Action提供了成员属性
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;private User user=new User(&quot;小泽&quot;,&quot;456&quot;);
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;提供set/get方法
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;vs.push(user);&lt;/span&gt;
&lt;span&gt;               从栈顶开始查找，找user的属性，显示名称，返回的小泽
      [&lt;/span&gt;1&lt;span&gt;].top获取到ValueStack1Action,而该Action封装了user属性
      [&lt;/span&gt;0].top.user返回的是user对象--&amp;gt;
      &amp;lt;s:property value=&quot;user.username&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 6）获取值栈中（root）集合中的值push&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
List&amp;lt;User&amp;gt; list=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;User&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(&quot;熊大&quot;,&quot;123&quot;&lt;span&gt;));
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(&quot;熊二&quot;,&quot;456&quot;&lt;span&gt;));
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(&quot;熊三&quot;,&quot;789&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把集合压栈&lt;/span&gt;
        vs.push(list);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　　　 &amp;lt;!--&lt;span&gt; 获取list集合
             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;vs.push(list);--&amp;gt;&lt;/span&gt;
      &amp;lt;s:property value=&quot;[0].top[0].username&quot;/&amp;gt;
      &amp;lt;s:property value=&quot;[0].top[1].username&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 7）获取值栈中（root）集合中的值set&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
List&amp;lt;User&amp;gt; list=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;User&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(&quot;熊大&quot;,&quot;123&quot;&lt;span&gt;));
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(&quot;熊二&quot;,&quot;456&quot;&lt;span&gt;));
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(&quot;熊三&quot;,&quot;789&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把集合压栈&lt;/span&gt;
         vs.set(&quot;list&quot;,list);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　　　&amp;lt;!--&lt;span&gt; 获取list集合
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;vs.set(&quot;list&quot;,list); --&amp;gt;&lt;/span&gt;
       &amp;lt;s:property value=&quot;list[0].username&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 8）利用迭代标签取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    ValueStack vs=&lt;span&gt;ActionContext.getContext().getValueStack();
        List&lt;/span&gt;&amp;lt;User&amp;gt; list=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;User&amp;gt;&lt;span&gt;();
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(&quot;熊大&quot;,&quot;123&quot;&lt;span&gt;));
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(&quot;熊二&quot;,&quot;456&quot;&lt;span&gt;));
        list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; User(&quot;熊三&quot;,&quot;789&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把集合压栈&lt;/span&gt;
         vs.set(&quot;list&quot;,list);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　 取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!--&lt;span&gt; 迭代标签 
             属性： &lt;/span&gt;*&lt;span&gt; value 要迭代的集合，需要从值栈中获取
                &lt;/span&gt;*&lt;span&gt;  var   迭代过程中，遍历的对象
                      &lt;/span&gt;*&lt;span&gt; var编写上，会把迭代产生的对象默认压入到context栈中
                      &lt;/span&gt;*&lt;span&gt; var不编写上，默认吧迭代长生的对象压入到root栈中
               
      &lt;/span&gt;--&amp;gt;
      &amp;lt;!-- 编写var:value=&quot;[0].top&quot;等同于value=&quot;list&quot; --&amp;gt;
      &amp;lt;s:iterator value=&quot;list&quot; var=&quot;u&quot;&amp;gt;
             &lt;span&gt;&amp;lt;!--此时是压入context，取值要加#号--&amp;gt;&lt;/span&gt;
             &amp;lt;s:property value=&quot;#u.username&quot;/&amp;gt;
             &amp;lt;s:property value=&quot;#u.password&quot;/&amp;gt;
      &amp;lt;/s:iterator&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &amp;lt;!-- 没有编写var关键字--&amp;gt;
      &amp;lt;s:iterator value=&quot;list&quot;&amp;gt;
           &amp;lt;s:property value=&quot;[0].top.username&quot;/&amp;gt;
           &amp;lt;s:property value=&quot;password&quot;/&amp;gt;
      &amp;lt;/s:iterator&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 9) 从context栈中获取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
ValueStack vs=&lt;span&gt;ActionContext.getContext().getValueStack();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从context栈中获取值(注意：以上push与set默认都是操纵的root栈)
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;context底层已经封装request session对象，操作的都是map集合&lt;/span&gt;
    HttpServletRequest request=&lt;span&gt;ServletActionContext.getRequest();
        request.setAttribute(&lt;/span&gt;&quot;msg&quot;,&quot;美美&quot;&lt;span&gt;);
        
        request.getSession().setAttribute(&lt;/span&gt;&quot;msg&quot;, &quot;小风&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;!--  从context栈中获取值，加#号--&amp;gt;
      &amp;lt;s:property value=&quot;#request.msg&quot;/&amp;gt;
      &amp;lt;s:property value=&quot;#session.msg&quot;/&amp;gt;
            
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 10）针对域名传过来的值，怎么接收&lt;/p&gt;
&lt;p&gt;　　  加入域名为http://localhost:8080/xx/xx.action?id=5&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &amp;lt;!--  针对于域名传过来的参数（参数名为id),框架会自动封装 --&amp;gt;
      &amp;lt;s:property value=&quot;#parameters.id&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 11) 利用EL表达式接收数据&lt;/p&gt;
&lt;p&gt;　　   引入jstl标签库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jstl/core_rt&quot; %&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　  取值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &amp;lt;!--&lt;span&gt; 在JSP页面上可以使用EL和JSTL标签库来取值
          使用装饰者模式，连接池全栈编码
          getAttribute()增强了 
      &lt;/span&gt;--&amp;gt;
      &amp;lt;c:forEach items=&quot;${list }&quot; var=&quot;user&quot;&amp;gt;&lt;span&gt;
            ${user.username}&lt;/span&gt;--&lt;span&gt;${user.passwords}
      &lt;/span&gt;&amp;lt;/c:forEach&amp;gt;
&lt;/pre&gt;&lt;/div&gt;












&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;　　　　&lt;/p&gt;

&lt;p class=&quot;16&quot;&gt;　　　　&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;　　&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 30 Mar 2018 16:30:00 +0000</pubDate>
<dc:creator>佳先森</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cailijia52o/p/8679629.html</dc:identifier>
</item>
<item>
<title>java之内存分布图 - nianzhilian</title>
<link>http://www.cnblogs.com/nianzhilian/p/8679406.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nianzhilian/p/8679406.html</guid>
<description>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;不关我们是创建基本数据类型的变量还是引用数据类型的变量，jvm都会通过内存分布去编译和运行程序。&lt;/p&gt;
&lt;p&gt;内存一般分为栈区、堆区、方法区（方法区里面包含常量池）&lt;/p&gt;
&lt;p&gt;栈区一般存放变量（局部变量）、方法的参数引以及用对象&lt;/p&gt;
&lt;p&gt;堆区一般存放的是对象以及成员变量&lt;/p&gt;
&lt;p&gt;方法区一般存放方法 里面常量池存放常量&lt;/p&gt;
&lt;p&gt;不管你是要创建变量还是对象在内存里面都会开辟内存空间&lt;/p&gt;
&lt;p&gt;注：在内存中他们之间的关联是通过内存地址进行关联的 而在程序中为了方便我们不用内存地址 改用变量来表达&lt;/p&gt;
&lt;p&gt;下面来看一个简单的声明一个变量的内存分布图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/795484/201803/795484-20180330234845678-1308770769.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图解释：&lt;/p&gt;
&lt;p&gt;1.首先在栈区开辟一个空的内存空间 &lt;/p&gt;
&lt;p&gt;2.常量放在常量池中并创建内存地址&lt;/p&gt;
&lt;p&gt;3.将常量的内存地址赋值给a变量的内存空间&lt;/p&gt;
&lt;p&gt;4.最后a变量指向常量10  整个声明变量并赋值的流程结束&lt;/p&gt;
&lt;p&gt;在来看一下创建对象时的内存分布图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/795484/201803/795484-20180330235203143-597612692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 30 Mar 2018 16:03:00 +0000</pubDate>
<dc:creator>nianzhilian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nianzhilian/p/8679406.html</dc:identifier>
</item>
<item>
<title>四则运算题目生成(python版) - LLLaoJI</title>
<link>http://www.cnblogs.com/lcglaoji/p/8679270.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lcglaoji/p/8679270.html</guid>
<description>&lt;h4 id=&quot;四则运算题目生成基于控制台&quot;&gt;四则运算题目生成—基于控制台&lt;/h4&gt;
&lt;p&gt;项目托管在码云：&lt;a href=&quot;https://gitee.com/HeyGary/calc&quot;&gt;飞机票&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;需求分析&quot;&gt;需求分析&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;根据控制台提示信息，输入题目生成相关配置参数
&lt;ul&gt;&lt;li&gt;&lt;em&gt;题目生成数量&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;数字范围&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;式子中是否有分数&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;....&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;程序支持
&lt;ul&gt;&lt;li&gt;10000 题目生成&lt;/li&gt;
&lt;li&gt;题目与答案的本地化存储&lt;/li&gt;
&lt;li&gt;对生成的题目进行查重处理&lt;/li&gt;
&lt;li&gt;api接口生成&lt;/li&gt;
&lt;li&gt;统计对错情况&lt;/li&gt;
&lt;li&gt;....&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;功能实现&quot;&gt;功能实现&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;由于此项目是针对面向对象课程所开发，所以代码结构力求做到清晰明了。&lt;/strong&gt;&lt;br/&gt;结构图如下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340910/201803/1340910-20180330232510585-1755552818.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此项目主要完成3个主要部分&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;表达式生成
&lt;ul&gt;&lt;li&gt;generator.py&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;题目查重
&lt;ul&gt;&lt;li&gt;binary_tree.py&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;计算答案
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;设计到的基本数据结构及表达式有&lt;strong&gt;&lt;em&gt;栈&lt;/em&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;em&gt;二叉树&lt;/em&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;em&gt;逆波兰表达式(后缀表达式)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;未完待续&quot;&gt;未完待续。。。。&lt;/h5&gt;
</description>
<pubDate>Fri, 30 Mar 2018 15:25:00 +0000</pubDate>
<dc:creator>LLLaoJI</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lcglaoji/p/8679270.html</dc:identifier>
</item>
<item>
<title>团体程序设计天梯赛 到底是不是太胖了 - 极限之旅</title>
<link>http://www.cnblogs.com/baobao2201128470/p/8679261.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baobao2201128470/p/8679261.html</guid>
<description>&lt;h2&gt;&lt;span&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;据说一个人的标准体重应该是其身高（单位：厘米）减去100、再乘以0.9所得到的公斤数。真实体重与标准体重误差在10%以内都是完美身材（即 | 真实体重&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;strut bottom&quot;&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;span class=&quot;Apple-converted-space&quot;&gt; 标准体重 |&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;strut bottom&quot;&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 标准体重&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;strut bottom&quot;&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;×&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;span class=&quot;mord mathrm&quot;&gt;0&lt;span class=&quot;mord mathrm&quot;&gt;%）。已知市斤是公斤的两倍。现给定一群人的身高和实际体重，请你告诉他们是否太胖或太瘦了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;&lt;span&gt;输入格式：&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;输入第一行给出一个正整数&lt;code&gt;N&lt;/code&gt;（&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;strut bottom&quot;&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;span class=&quot;Apple-converted-space&quot;&gt; 20）。随后&lt;code&gt;N&lt;/code&gt;行，每行给出两个整数，分别是一个人的身高&lt;code&gt;H&lt;/code&gt;（120&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;strut bottom&quot;&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;span class=&quot;Apple-converted-space&quot;&gt; H&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;strut bottom&quot;&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 200；单位：厘米）和真实体重&lt;code&gt;W&lt;/code&gt;（50&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;strut bottom&quot;&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;span class=&quot;Apple-converted-space&quot;&gt; W&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-html&quot;&gt;&lt;span class=&quot;strut&quot;&gt;&lt;span class=&quot;strut bottom&quot;&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;span class=&quot;Apple-converted-space&quot;&gt; 300；单位：市斤），其间以空格分隔。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;输出格式：&lt;/h3&gt;
&lt;p&gt;为每个人输出一行结论：如果是完美身材，输出&lt;code&gt;You are wan mei!&lt;/code&gt;；如果太胖了，输出&lt;code&gt;You are tai pang le!&lt;/code&gt;；否则输出&lt;code&gt;You are tai shou le!&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;-&quot;&gt;输入样例：&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-in&quot;&gt;3
169 136
150 81
178 155
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;-&quot;&gt;输出样例：&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-out&quot;&gt;You are wan mei!
You are tai shou le!
You are tai pang le!&lt;br/&gt;&lt;span&gt;行了，很有意思的一道题，顺带再求出标准体重，有了目标，要减多少心里就有点逼数了，测试了一下自己，竟然是完美，哈哈哈哈&lt;br/&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#include &amp;lt;iostream&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;cmath&amp;gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;  main()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n,m,j;
    cin&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;n;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(n--&lt;span&gt;)
    {
        cin&lt;/span&gt;&amp;gt;&amp;gt;j&amp;gt;&amp;gt;&lt;span&gt;m;
        &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; k=(j-&lt;span&gt;100&lt;/span&gt;)*&lt;span&gt;0.9&lt;/span&gt;*&lt;span&gt;2&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标准体重
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;cout&amp;lt;&amp;lt;&quot;你的标准体重是：&quot;&amp;lt;&amp;lt;k&amp;lt;&amp;lt;&quot;斤&quot;&amp;lt;&amp;lt;endl;&lt;/span&gt;
        &lt;span&gt;double&lt;/span&gt; h=fabs(m-&lt;span&gt;k);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(h&amp;lt;k*&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;)
            cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;You are wan mei!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(h&amp;gt;=k*&lt;span&gt;0.1&lt;/span&gt;&amp;amp;&amp;amp;k&amp;lt;&lt;span&gt;m)
            cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;You are tai pang le!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; cout&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;You are tai shou le!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
    }    
 } &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 30 Mar 2018 15:23:00 +0000</pubDate>
<dc:creator>极限之旅</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/baobao2201128470/p/8679261.html</dc:identifier>
</item>
<item>
<title>windows+CMake+mingw 搭建c c++开发环境 - herelsp</title>
<link>http://www.cnblogs.com/herelsp/p/8679200.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/herelsp/p/8679200.html</guid>
<description>&lt;hr/&gt;&lt;p&gt;layout: post&lt;br/&gt;title: &quot;windows+CMake+mingw 搭建c c++开发环境&quot;&lt;br/&gt;date: 2018-03-30 22:23:06&lt;br/&gt;tags: windows CMake mingw c/c++&lt;br/&gt;key: 201803302223&lt;br/&gt;description: 本文教你如何在windows环境下使用CMake和mingw搭建同linux开发一样体验的c/c++开发环境&lt;br/&gt;---&lt;/p&gt;
&lt;h2 id=&quot;cmake-安装&quot;&gt;CMake 安装&lt;/h2&gt;
&lt;h3 id=&quot;cmake-下载&quot;&gt;CMake 下载&lt;/h3&gt;
&lt;p&gt;官方下载地址: &lt;a href=&quot;https://cmake.org/download/&quot; class=&quot;uri&quot;&gt;https://cmake.org/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-1f66b219b69a68c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;cmake下载页面&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择自己系统(&lt;strong&gt;Platform&lt;/strong&gt;)对应的版本并下载&lt;br/&gt;这里我们选择&lt;strong&gt;Windows win64-x64 Installer: Installer tool has changed. Uninstall CMake 3.4 or lower first!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-6c0b1b8cc84e2665.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;CMake 下载完成&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;cmake-安装-1&quot;&gt;CMake 安装&lt;/h3&gt;
&lt;p&gt;安装时根据自己系统的安全设置，可能会出现如下对话框，不用担心，直接点击 &lt;strong&gt;&quot;运行(R)&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-4e1403fa98b8f0dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装时安全警告&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-7fe8c54b142d87b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;CMake Steup&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-6f36f8cdf38badc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;License&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;必须选择同意，否则不能进入下一步&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-242076ca9dd5c541.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装选项&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;是否添加环境变量，这里我们选择 &lt;strong&gt;&quot;Add CMake to the system PATH for all users&quot;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;是否创建桌面快捷图标，根据自身情况而定，这个只是创建桌面图标使用方便，并不会对以后的使用造成实质上的影响&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;安装路径&quot;&gt;安装路径&lt;/h3&gt;
&lt;p&gt;这里选择自己习惯存放程序的路径，我们这里采取默认值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-55fcc11c9e84a4aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装路径&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装最后确认&quot;&gt;安装最后确认&lt;/h3&gt;
&lt;p&gt;经过前面的操作终于把需要配置的都配置了，下面该程序自己干活了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-ea54db960ee87f5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装最后确认&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;进入安装&quot;&gt;进入安装&lt;/h3&gt;
&lt;p&gt;真正开始安装的阶段，这一阶段比较耗时，完全取决于电脑自身的配置高低，系统主要是解压文件和写磁盘&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-4b14d25d350f6d99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装中&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装完成&quot;&gt;安装完成&lt;/h3&gt;
&lt;p&gt;恭喜你，终于将CMake安装完成了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-c9485943428202dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装完成页面&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;确认cmake安装&quot;&gt;确认CMake安装&lt;/h3&gt;
&lt;p&gt;验证CMake是否成功安装，可以调出CMD窗口，输入&lt;code&gt;cmake&lt;/code&gt;，瞧瞧系统会给你说什么，如果出现如下窗口，那么恭喜你没有任何问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-63fc0b883d5d7970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;CMake安装好&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么万一出现的是如下内容呢&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-61e292f409a36952.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;CMake没安装好&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们一般有如下处理步骤和处理方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ol&gt;&lt;li&gt;确认是新调出CMD窗口再进行的操作&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;&lt;li&gt;我们可以手动修改系统的环境变量指定CMake的bin目录位置&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-cd4618df2662ed20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;系统环境变量 Path&quot;/&gt;&lt;br/&gt;确认如图所示内容在Path中配置，如果没有可以手动输入并确定&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ol&gt;&lt;li&gt;待2操作完成后可以再验证，如果解决那么恭喜，如果问题仍存在，那么需要重启系统（一般都能解决了，除非比较低的系统版本可能需要重启）&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;mingw&quot;&gt;mingw&lt;/h2&gt;
&lt;h3 id=&quot;mingw-下载&quot;&gt;mingw 下载&lt;/h3&gt;
&lt;p&gt;这里给出64系统使用的mingw, &lt;a href=&quot;https://sourceforge.net/projects/mingw-w64/&quot; class=&quot;uri&quot;&gt;https://sourceforge.net/projects/mingw-w64/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-e1b2e4fb22c7b05b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;mingw下载完成&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里其实是下载的一个安装器，具体的安装是通过运行这个安装器来引导安装的&lt;/p&gt;
&lt;h3 id=&quot;mingw-安装&quot;&gt;mingw 安装&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-c74924e17d0399fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;开始运行安装器&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;mingw-安装选项&quot;&gt;mingw 安装选项&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-7eabb5f28f9f3b06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装选项&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里需要做出对应的选择，当然完全默认没有任何问题，我们这里采用默认，继续安装&lt;/p&gt;
&lt;h3 id=&quot;mingw-安装位置&quot;&gt;mingw 安装位置&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-81c3b5084fc69ae9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装位置选择&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里有坑，我们先入坑&lt;/strong&gt;, 继续安装&lt;/p&gt;
&lt;h3 id=&quot;mingw-安装中&quot;&gt;mingw 安装中&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-cd59d5495342b2e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装中&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装器需要从网上下载所需要的文件，这一步耗时较长&lt;/p&gt;
&lt;h3 id=&quot;mingw-安装完成&quot;&gt;mingw 安装完成&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-0f09070d12a4069f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;安装完成&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;环境变量设置&quot;&gt;环境变量设置&lt;/h3&gt;
&lt;p&gt;同CMake的一样，mingw安装完后自动了设置环境变量，你也可以通过运行其安装目录下的&lt;code&gt;mingw-w64.bat&lt;/code&gt;来进入运行环境&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-278142c689b098f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;mingw-w64.bat&quot;/&gt;&lt;/p&gt;
&lt;p&gt;验证mingw环境是否设置好，同样新调出CMD窗口，输入&lt;code&gt;gcc&lt;/code&gt;命令，出入如下信息则表示安装没有问题，否则请参照CMake配置环境变量的方式来解决。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-a3fa27ce782fa639.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;gcc 命令&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;cmakemingw-实例&quot;&gt;CMake+mingw 实例&lt;/h2&gt;
&lt;p&gt;我们安装完环境后来个实例运行下吧&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;编写源码文件&lt;br/&gt;来个宇宙最著名的程序吧&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    printf(&quot;hello\n&quot;);
    
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;编写CMake文件&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;cmake_minimum_required(VERSION 3.0)
project(Hello)
set(SOURCE main.cpp)
add_executable(${PROJECT_NAME} ${SOURCE})
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;生成Make file&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;mkdir build
cd build
cmake -G&quot;Unix Makefiles&quot; ../&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很不幸，这一步会出问题&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CMake Error: CMake was unable to find a build program corresponding to &quot;Unix Makefiles&quot;.  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.
CMake Error: CMAKE_C_COMPILER not set, after EnableLanguage
CMake Error: CMAKE_CXX_COMPILER not set, after EnableLanguage
-- Configuring incomplete, errors occurred!
See also &quot;D:/tmp/build/CMakeFiles/CMakeOutput.log&quot;.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;意思就是不能生成Unix Makefiles，这是缺少make程序造成的，&lt;br/&gt;解决方法就是找到mingw安装目录下mingw32-make.exe拷贝一份并重命名为make.exe&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-65e8b10f721b725f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;make&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再运行&lt;code&gt;cmake -G&quot;Unix Makefiles&quot; ../&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ cmake -G&quot;Unix Makefiles&quot; ../
-- The C compiler identification is GNU 7.2.0
-- The CXX compiler identification is GNU 7.2.0
-- Check for working C compiler: C:/Program Files (x86)/mingw-w64/i686-7.2.0-posix-dwarf-rt_v5-rev1/mingw32/bin/gcc.exe
-- Check for working C compiler: C:/Program Files (x86)/mingw-w64/i686-7.2.0-posix-dwarf-rt_v5-rev1/mingw32/bin/gcc.exe -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: C:/Program Files (x86)/mingw-w64/i686-7.2.0-posix-dwarf-rt_v5-rev1/mingw32/bin/c++.exe
-- Check for working CXX compiler: C:/Program Files (x86)/mingw-w64/i686-7.2.0-posix-dwarf-rt_v5-rev1/mingw32/bin/c++.exe -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: D:/tmp/build
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样就对了&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;make&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;什么，又有问题&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ make
/usr/bin/sh: -c: line 0: syntax error near unexpected token `('
/usr/bin/sh: -c: line 0: `C:/Program Files (x86)/mingw-w64/i686-7.2.0-posix-dwarf-rt_v5-rev1/mingw32/bin/make -f CMakeFiles/Makefile2 all'
make: *** [Makefile:84: all] Error 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还记得前面我们安装mingw时说的坑吗，现在我们需要填坑了，文件就是万恶的&lt;code&gt;C:/Program Files (x86)&lt;/code&gt;，这也好办，将&lt;code&gt;mingw-w64&lt;/code&gt;文件夹复制到一个正常的目录吧，比如直接&lt;code&gt;C:/mingw-w64&lt;/code&gt;，然后需要修改环境变量&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/4938916-f694a58c71443330.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;修改mingw环境变量&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ make
Scanning dependencies of target Hello
[ 50%] Building CXX object CMakeFiles/Hello.dir/main.cpp.obj
[100%] Linking CXX executable Hello.exe
[100%] Built target Hello
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;$ ./Hello.exe
hello&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好了，终于成功了&lt;/p&gt;
</description>
<pubDate>Fri, 30 Mar 2018 15:03:00 +0000</pubDate>
<dc:creator>herelsp</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/herelsp/p/8679200.html</dc:identifier>
</item>
<item>
<title>从高级测试到测试开发 - 虫师</title>
<link>http://www.cnblogs.com/fnng/p/8679185.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fnng/p/8679185.html</guid>
<description>&lt;p&gt;最近加入了新的团队，角色发生较大的转变，在这里分享一下自己的感受。&lt;/p&gt;
&lt;h3 id=&quot;测试的划分&quot;&gt;测试的划分&lt;/h3&gt;
&lt;p&gt;如果我们把产品的生产看成一个流水线的话，那么测试就是流水线上的一个重要岗位，把控着产品的质量。&lt;/p&gt;
&lt;p&gt;当然，产品类型的不同，测试人员的能力不同，可做的事情也会有很大不同，比如是Web产品，那么我们会去做性能测试和Web UI自动化测试；比如是App产品，那么我们会去做专项测试和APP UI自动化测试，再比如是后端接口平台，那么我们会去做接口自动化测试。再比如游戏产品，测试方法和手段又不一样了。&lt;/p&gt;
&lt;p&gt;在此过程中，如果你是一名新手，只能测试UI功能，那么定位为测试工程师；如果你可负责一些复杂业务的测试，并且可以做一些自动化工作，那么定位为中级测试工程师；如果你有丰富的测试经验，综合的测试技术，以及深入到产品内部去做类白盒的测试能力，那么定位为高级测试工程师。（注：这里只是一般的划分，不代表任何公司）&lt;/p&gt;
&lt;h3 id=&quot;高级测试&quot;&gt;高级测试&lt;/h3&gt;
&lt;p&gt;接下来聊一聊我做高级测试时的工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/311516/201803/311516-20180330225853536-2126165732.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以我负责的接口平台为例，当开发完成接口开发后，我通过阅读接口代码逻辑的方式进行接口自动化用例的编写，过程中发的代码问题，反馈由开发修改；当我的用例编写完成，那么接口测试也基本搞定。当有新的接口更新时，我就可以重跑接口自动化用例来确保接口的质量，每次只需要对更新的接口编写测试用例。&lt;/p&gt;
&lt;p&gt;由于接口先测试，当产品提供可测界面时，问题就少很多了，只是界面样式和兼容性问题。整体上会在缩短整个测试时间。&lt;/p&gt;
&lt;p&gt;当然，产品测试过程中还会有一些零散的测试需求，可以快速的选取测试工具或编写测试脚本的方式来完成工作。&lt;/p&gt;
&lt;p&gt;这是一般高级测试工程师应该具备的能力。&lt;/p&gt;
&lt;h3 id=&quot;测试开发&quot;&gt;测试开发&lt;/h3&gt;
&lt;p&gt;接下来谈一谈测试开发，以及它在项目中的定位。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/311516/201803/311516-20180330225956988-1553760239.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以我目前所属的团队为例，初创阶段可能是没有测试人员的，随着产品的发展，为了提升产品的质量，另一方面也为了节约人力成本，所以会招一些功能测试人员承担产品的测试工作。开发人员完成功能开发后，由测试人员进行测试。&lt;/p&gt;
&lt;p&gt;当公司进一步发展之后，为了优化团队，提升效率，单纯的功能测试人员就会成为短板，但为了保持团队的运行，不可能把功能测试人员全部替换为高级测试。另一方面功能测试也需要伴随公司成长。另一种办法就是引入测试开发团队。&lt;strong&gt;当然，大公司的测试开发与高级测试是并存的，测试开发只负责工具与平台的开发。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（&lt;strong&gt;注：&lt;/strong&gt; 这里不讨论个体的情况，比如有一位能力很强的测试/Leader推动测试团队转型）&lt;/p&gt;
&lt;p&gt;测试开发不直接参于产品的测试工作。这其实也是与高级测试最大的不同之处。简单将测试开发工作总结为以下几个方面。&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;协助开发编写单元测试（并不是所有开发都一定会写单元测试），规范开发输出（比如输出一定标准接口文档）。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;帮助功能测试人员提升技术能力，能够独立完成自动化测试工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;开发测试平台：比如，性能测试平台，帮助开发测试进行性能测试。开发接口测试平台，管理与维护接口平台，开发自动化测试平台，方便管理与维护自动化测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;挖掘测试需求，通过技术手段帮助测试团队提升测试效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;总结下来，就是测试的经验，开发的能力，干着服务于开发与测试的工作。&lt;/p&gt;
&lt;p&gt;最后，测试开发并不是高级测试的下一阶段，只职责不同而已。以上仅个人看法！&lt;/p&gt;
&lt;p&gt;欢迎关注：测试圈TC 公众号&lt;/p&gt;
</description>
<pubDate>Fri, 30 Mar 2018 15:02:00 +0000</pubDate>
<dc:creator>虫师</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fnng/p/8679185.html</dc:identifier>
</item>
<item>
<title>drbd(二)：配置和使用 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/8678883.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/8678883.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a&gt;&lt;span&gt;本文目录：&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8678883.html#blog1&quot;&gt;&lt;span&gt;1.drbd配置文件&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8678883.html#blog2&quot;&gt;&lt;span&gt;2.创建metadata区并计算metadata区的大小&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8678883.html#blog3&quot;&gt;&lt;span&gt;3.启动drbd&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8678883.html#blog4&quot;&gt;&lt;span&gt;4.实现drbd主从同步&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8678883.html#blog5&quot;&gt;&lt;span&gt;5.数据同步和主从角色切换&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8678883.html#blog6&quot;&gt;&lt;span&gt;6.drbd脑裂后的解决办法&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8678883.html#blog7&quot;&gt;&lt;span&gt;7.drbd多卷组配置&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;drbd的简介、同步机制和安装见另一篇文章：&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;drbd(一)：简介、同步机制和安装&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;本文所述为drbd8.4的配置，和8.4版本之前的版本，以及drbd9版本的差别都非常大。&lt;/p&gt;


&lt;p&gt;drbd的主配置文件/etc/drbd.conf，为了管理的便捷性，在此文件中使用了include指令指定了包含的配置文件段，默认的是在/etc/drbd.d/目录下。在此目录有全局配置文件&lt;code&gt;global_common.conf&lt;/code&gt;和其他配置文件&lt;code&gt;*.res&lt;/code&gt;文件。其中在主配置文件中include全局配置文件的指令只能出现一个，且必须出现在最前面。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;两个节点的配置文件应尽量完全一致。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;/usr/share/doc/drbd-版本/&lt;/code&gt;下有drbd.conf的样例配置文件。&lt;/p&gt;
&lt;p&gt;以下是global_common.conf的结构。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;global&lt;/span&gt; {
usage-count &lt;span class=&quot;hljs-literal&quot;&gt;yes&lt;/span&gt;;  
}

common {      
        handlers {
}
        startup {
        }
        options {
        }
        disk {
}
        net {
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;全局配置修改如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;global&lt;/span&gt; {
        usage-count &lt;span class=&quot;hljs-literal&quot;&gt;no&lt;/span&gt;;
}

common {
handlers{       
          pri-&lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt;-incon-degr &lt;span class=&quot;hljs-string&quot;&gt;&quot;/usr/lib/drbd/notify-pri-on-incon-degr.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f&quot;&lt;/span&gt;;
          pri-lost-after-sb &lt;span class=&quot;hljs-string&quot;&gt;&quot;/usr/lib/drbd/notify-pri-lost-after-sb.sh; /usr/lib/drbd/notify-emergency-reboot.sh; echo b &amp;gt; /proc/sysrq-trigger ; reboot -f&quot;&lt;/span&gt;;
          local-io-error &lt;span class=&quot;hljs-string&quot;&gt;&quot;/usr/lib/drbd/notify-io-error.sh; /usr/lib/drbd/notify-emergency-shutdown.sh; echo o &amp;gt; /proc/sysrq-trigger ; halt -f&quot;&lt;/span&gt;;
          split-brain &lt;span class=&quot;hljs-string&quot;&gt;&quot;/usr/lib/drbd/notify-split-brain.sh root&quot;&lt;/span&gt;;
          out-&lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt;-sync &lt;span class=&quot;hljs-string&quot;&gt;&quot;/usr/lib/drbd/notify-out-of-sync.sh root&quot;&lt;/span&gt;;
}
        disk {
              &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt;-io-error detach; 
              resync-rate &lt;span class=&quot;hljs-number&quot;&gt;600&lt;/span&gt;M;
        }
       
       
       
        }
        protocol C; 
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再新建一个配置文件data1.res，里面定义资源。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resource data1 {   
  &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd1.longshuai.com {   
    device    /dev/drbd0;    
    disk      /dev/sdb5;     
    address   &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.51:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;; 
    meta-disk /dev/sdb1;  
}
  &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd2.longshuai.com {
    device    /dev/drbd0;
    disk      /dev/sdb5;
    address   &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.52:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
    meta-disk /dev/sdb1;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者简化为如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resource data1 {
    device    /dev/drbd0;
    disk      /dev/sdb5;
    meta-disk /dev/sdb1[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];
    &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd1.longshuai.com {
        address   &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.51:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
    }
    &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd2.longshuai.com {
        address   &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.52:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;resource段用于定义drbd资源，每个资源通常定义在一个单独的位于/etc/drbd.d目录中的以.res结尾的文件中。资源在定义时必须为其命名，名字可以由非空白的ASCII字符组成。每一个资源段的定义中至少要包含两个节点，其它参数均可以从common段或drbd的默认中进行继承。&lt;/p&gt;
&lt;p&gt;其中上述配置文件的meta-disk有三种记录方式：internal/device/device[index_num]。其中不管是哪种方式，metadata存放的分区不能格式化，哪怕使用internal时metadata和一般data在同一个分区也不能格式化该分区。&lt;/p&gt;
&lt;p&gt;internal是将元数据也写入到数据分区的尾部，即数据和元数据同分区。如果指定的device没有给定index时，则表示元数据存储到该设备中。如果某节点指定device[index_num]，那么指定几次元数据分区索引就必须大于128M的几倍，例如上述文件中drbd1.longshuai.com节点指定了/dev/sdb1[0]，那么sdb1就必须大于128M，如果此时其他资源的节点也指定了同一台服务器的/dev/sdb1[1]，则指定了两次就必须大于256M。指定为internal和device时，元数据区的大小是drbd自行计算的。&lt;/p&gt;


&lt;pre&gt;
&lt;code&gt;drbdadm &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt;-md [&lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;|resource_names]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;两节点都初始化。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@drbd1 drbd.d]# drbdadm &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;create&lt;/span&gt;-md data1
initializing activity &lt;span class=&quot;hljs-keyword&quot;&gt;log&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;NOT&lt;/span&gt; initializing bitmap
Writing meta &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt;...
New drbd meta &lt;span class=&quot;hljs-keyword&quot;&gt;data&lt;/span&gt; block successfully created.&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;初始化成功后，可以使用下面几个命令来获取drbd的metadata区信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@drbd1 ~]# drbdadm &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;show&lt;/span&gt;-gi data1

       +
       |               +
       |               |                 +
       |               |                 |         +-&amp;lt;  older history  &amp;gt;-
       V               V                 V         V
&lt;span class=&quot;hljs-number&quot;&gt;0000000000000004&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0000000000000000&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0000000000000000&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0000000000000000&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
                                                                    ^ ^ ^ ^ ^ ^ ^
                                      -&amp;lt;  &lt;span class=&quot;hljs-keyword&quot;&gt;Data&lt;/span&gt; consistency flag  &amp;gt;
                             -&amp;lt;  &lt;span class=&quot;hljs-keyword&quot;&gt;Data&lt;/span&gt; was/&lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; currently up-&lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt;-&lt;span class=&quot;hljs-built_in&quot;&gt;date&lt;/span&gt;  &amp;gt;
                                  -&amp;lt;  Node was/&lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; currently &lt;span class=&quot;hljs-keyword&quot;&gt;primary&lt;/span&gt;  &amp;gt;
                                  -&amp;lt;  Node was/&lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; currently connected  &amp;gt;
         -&amp;lt;  Node was &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the progress &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; setting &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt; bits &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the bitmap  &amp;gt;
                        -&amp;lt;  The peer&lt;span class=&quot;hljs-string&quot;&gt;'s disk was out-dated or inconsistent  &amp;gt;--+ |
      -&amp;lt;  This node was a crashed primary, and has not seen its peer since   &amp;gt;--+

flags: Secondary, StandAlone, Inconsistent
meta-data: clean
zero size device -- never seen peer yet?&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上面命令的结果中，可以看出数据的代数，还能获取一些节点状态信息。&lt;/p&gt;
&lt;p&gt;关于drbd的代数，它在drbd的内部机制中，用于实现：&lt;br/&gt;(1).判断两节点是否是同一个集群的节点。也就是说，对方节点是不是自己的对端节点。因为有可能出现意外连接，却不是自己对端的情况。&lt;br/&gt;(2).判断节点设备是否需要全部重新同步(re-sync)或者部分重新同步。&lt;br/&gt;(3).判断重新同步的方向。即是从节点1重新同步到节点2还是从节点2重新同步到节点1。&lt;br/&gt;(3).标识节点是否处于脑裂(brain split)。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd1&lt;/span&gt; ~]





version &lt;span class=&quot;hljs-string&quot;&gt;&quot;v08&quot;&lt;/span&gt;;






uuid {
    &lt;span class=&quot;hljs-number&quot;&gt;0x0000000000000004&lt;/span&gt;; &lt;span class=&quot;hljs-number&quot;&gt;0x0000000000000000&lt;/span&gt;; &lt;span class=&quot;hljs-number&quot;&gt;0x0000000000000000&lt;/span&gt;; &lt;span class=&quot;hljs-number&quot;&gt;0x0000000000000000&lt;/span&gt;;
    flags &lt;span class=&quot;hljs-number&quot;&gt;0x00000000&lt;/span&gt;;
}

la-size-sect &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
bm-byte-per-bit &lt;span class=&quot;hljs-number&quot;&gt;4096&lt;/span&gt;;
device-uuid &lt;span class=&quot;hljs-number&quot;&gt;0x0A293D126547895D&lt;/span&gt;;
la-peer-max-bio-size &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
al-stripes &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
al-stripe-size-&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;k &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;;

bm {
}

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从此命令中可以获知不同标记代数的uuid值，以及metadata的元数据信息，例如&lt;code&gt;md_size_sect=1951744&lt;/code&gt;表示元数据所在分区占用了1951744个扇区。注意，该命令不要在drbd设备已启动的情况下执行。&lt;/p&gt;
&lt;p&gt;知道这两个命令可以获取一些信息后，现在我们要做的是计算metadata部分的数据大小。这个大小在&quot;修改drbd设备空间大小&quot;时有用。&lt;/p&gt;
&lt;p&gt;首先获取元数据所在分区的扇区数。即上面结果中的&quot;md_size_sect&quot;。不过也可以使用块设备工具&lt;code&gt;blockdev&lt;/code&gt;来获取。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd1&lt;/span&gt; ~]
&lt;span class=&quot;hljs-number&quot;&gt;1951744&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有了该值，根据计算公式：&lt;code&gt;Size = (md_size_sect/2^18)*8*N+72&lt;/code&gt;进行计算。其中md_size_sect如上计算，N是对端的数量，一般情况下drbd实现的是双节点，因此N=1，可以不用考虑。计算的结果是扇区数。&lt;/p&gt;
&lt;p&gt;因此，此处计算的结果为：&lt;code&gt;1951744/1024/256*8+72=131.5625&lt;/code&gt;共132扇区。如果要转换为KB大小，则再除以2即可(假设扇区大小为512bytes)。&lt;/p&gt;


&lt;p&gt;可使用如下命令来管理资源的启动、停止。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;drbdadm&lt;/span&gt; {up|down} {&lt;span class=&quot;hljs-literal&quot;&gt;all&lt;/span&gt;|resource_names}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;drbdadm&lt;/span&gt; up data1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果启动报以下错误，则可能是因为对metadata进行了格式化。解决方法是将其删除再重新创建但不要格式化。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;Failure: (119) No valid meta-data signature found.&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时可以查看/proc/drbd文件来查看drbd中配置的资源的状态，也可以使用命令&lt;code&gt;drbd-overview RESOURCE&lt;/code&gt;或&lt;code&gt;drbdadm status RESOURCE&lt;/code&gt;来查看。如果角色ro是从/从，则表明配置成功，若有一端是unknown，则表明和对方不能通信，可能是主机路由的问题，这样会导致脑裂的问题。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;cat&lt;/span&gt; /proc/drbd
version: &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (api:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/proto:&lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;)
GIT-hash: 9976da086367a2476503ef7f6b13d4567327a280 build by mockbuild&lt;span class=&quot;hljs-variable&quot;&gt;@Build64R6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2016&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;18&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;38&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;
 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: cs:Connected ro:Secondary/Secondary ds:Inconsistent/Inconsistent C r-----
    ns:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; nr:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; dw:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; dr:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; al:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; bm:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; lo:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; pe:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ua:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ap:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ep:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; wo:f oos:&lt;span class=&quot;hljs-number&quot;&gt;6297452&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;状态信息极其重要，其中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;cs：connection state，必须是connected状态才表示连接成功。&lt;/li&gt;
&lt;li&gt;ro：roles，各节点是是primary还是secondary。&lt;/li&gt;
&lt;li&gt;ds：disk state，数据的状态，由此判断是否要同步、重新同步、正在同步、同步完成、是否一致等等信息。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;关于drbd的状态信息，见另一篇文章。&lt;/p&gt;
&lt;p&gt;实际上，&lt;code&gt;drbdadm up&lt;/code&gt;启动drbd设备时做了很多工作，如果细致划分的话，可以将&quot;drbdadm up&quot;拆分为以下几个动作：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;将drbd的资源关联到底层设备(metadata和data区)上，使之能通过底层设备存、取数据。该过程调用的是drbdsetup程序。
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;drbdadm&lt;/span&gt; attach data1
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;加载drbd资源的同步参数。
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;drbdadm&lt;/span&gt; syncer data1
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;连接对端。
&lt;pre&gt;
&lt;code&gt;drbdadm &lt;span class=&quot;hljs-keyword&quot;&gt;connect&lt;/span&gt; data1
&lt;/code&gt;
&lt;/pre&gt;
这些命令在drbdadm中部分已失效，放在这里只是为了说明&quot;up&quot;时所执行的几个步骤。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;到目前为止，drbd的资源已经关联完成，也已经准备好进行同步，所不知道的仅仅只是谁作为同步的源端，谁做为同步的目标端，也就是primary和secondary的角色。&lt;/p&gt;


&lt;p&gt;在需要设置为主机点的机器上执行：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;drbdadm&lt;/span&gt; primary --force data1  

drbdsetup /dev/drbd0 primary
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中&quot;--force&quot;表示强制升级为primary，这会导致本节点的数据强制同步到对端上。&lt;/p&gt;
&lt;p&gt;由于是第一次执行同步，因此该过程会同步整个分区进行初始化。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-property&quot;&gt;@drbd1&lt;/span&gt; ~]
&lt;span class=&quot;hljs-attribute&quot;&gt;version&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8.4&lt;/span&gt;.10-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-attribute&quot;&gt;api&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;proto&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;)
GIT-&lt;span class=&quot;hljs-attribute&quot;&gt;hash&lt;/span&gt;: a4d5de01fffd7e4cde48a080e2c686f9e8cebf4c build &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; mockbuild@, &lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;
 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-attribute&quot;&gt;cs&lt;/span&gt;:SyncSource &lt;span class=&quot;hljs-attribute&quot;&gt;ro&lt;/span&gt;:Primary/Secondary &lt;span class=&quot;hljs-attribute&quot;&gt;ds&lt;/span&gt;:UpToDate/Inconsistent C r-----
    &lt;span class=&quot;hljs-attribute&quot;&gt;ns&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;812136&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;nr&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;dw&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;dr&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;813048&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;al&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;bm&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;lo&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;pe&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ua&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ap&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ep&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;wo&lt;/span&gt;:f &lt;span class=&quot;hljs-attribute&quot;&gt;oos&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4069272&lt;/span&gt;
        [=&lt;span class=&quot;hljs-function&quot;&gt;=&amp;gt;&lt;/span&gt;.................] sync&lt;span class=&quot;hljs-string&quot;&gt;'ed: 16.7% (3972/4764)M
        finish: 0:02:24 speed: 28,216 (17,652) K/sec&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到本端已经设置为主节点，且ds的一端是uptodate状态，最后还看到了镜像到对方的进度信息。&lt;/p&gt;
&lt;p&gt;当镜像完成后，再查看资源的信息。可以发现两端的ds都变成uptodate状态了。说明镜像完成了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-property&quot;&gt;@drbd1&lt;/span&gt; ~]
&lt;span class=&quot;hljs-attribute&quot;&gt;version&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8.4&lt;/span&gt;.10-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-attribute&quot;&gt;api&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;proto&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;)
GIT-&lt;span class=&quot;hljs-attribute&quot;&gt;hash&lt;/span&gt;: a4d5de01fffd7e4cde48a080e2c686f9e8cebf4c build &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; mockbuild@, &lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;
 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-attribute&quot;&gt;cs&lt;/span&gt;:Connected &lt;span class=&quot;hljs-attribute&quot;&gt;ro&lt;/span&gt;:Primary/Secondary &lt;span class=&quot;hljs-attribute&quot;&gt;ds&lt;/span&gt;:UpToDate/UpToDate C r-----
    &lt;span class=&quot;hljs-attribute&quot;&gt;ns&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4881408&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;nr&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;dw&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;dr&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4882320&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;al&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;bm&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;lo&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;pe&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ua&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ap&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ep&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;wo&lt;/span&gt;:f &lt;span class=&quot;hljs-attribute&quot;&gt;oos&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;现在已经有一端是主节点了。drbd的主从节点中，只有主节点是可以挂载并进行读写的。所以在主节点上挂载drbd设备（可能需要重新格式化data分区，而且如果metadata使用的是internal模式，则需要格式化分区才OK）。&lt;/p&gt;
&lt;p&gt;挂载drbd到mnt，然后向其中拷贝一个文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd1&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd1&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd1&lt;/span&gt; ~]
inittab  lost+found
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果对端也有这个文件则说明同步成功了，但是对端是从节点，无法读取数据，所以只能切换主从角色再查看。不过在，实验环境下直接把从节点的drbd给down掉，再直接挂载/dev/sdb5也是可以的。&lt;/p&gt;
&lt;p&gt;首先将主节点切换为从节点，必须先卸载挂载点才行。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd1&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd1&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd1&lt;/span&gt; ~]
 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:data1/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-constant&quot;&gt;Connected&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;Secondary&lt;/span&gt;/&lt;span class=&quot;hljs-constant&quot;&gt;Secondary&lt;/span&gt; &lt;span class=&quot;hljs-constant&quot;&gt;UpToDate&lt;/span&gt;/&lt;span class=&quot;hljs-constant&quot;&gt;UpToDate&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再在从节点上将自己设置为主节点，然后挂载drbd设备，再查看是否有文件同步过来了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd2&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd2&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@drbd2&lt;/span&gt; ~]
inittab  lost+found
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这说明实现了数据同步。但是这样手动切换来切换去的很麻烦，一般会将其交给heartbeat或者corosync来管理，实现drbd的自动切换。&lt;/p&gt;


&lt;p&gt;当DRBD的两节点都发现对方后，并都交换了初始化握手协议后，发现双方都是primary角色，就会出现脑裂。出现脑裂后，由于两端节点都可以挂载、写数据，会导致数据的混乱。&lt;/p&gt;
&lt;p&gt;当检测到出现脑裂时，drbd会立即中断双方的连接，并在日志中记录&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Split-Brain detected, dropping connection!
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在出现脑裂的时候，一定有一端的连接状态处于&lt;code&gt;StandAlone&lt;/code&gt;，另一端的状态可能是&lt;code&gt;StandAlone&lt;/code&gt;(当双方同时检测到脑裂)，也可能是&lt;code&gt;Connecting&lt;/code&gt;(当一端先检测到脑裂立即中断连接后使得另一端无法再检测出脑裂)。&lt;/p&gt;
&lt;p&gt;出现脑裂的时候，如果没有配置drbd自动从脑裂状态恢复，那么必须进行人为的手动干涉。干涉的方法是放弃一端的数据，这一端称为&quot;脑裂的受害者&quot;，另一端保存数据的节点则称为&quot;脑裂的幸存者&quot;。&lt;/p&gt;
&lt;p&gt;处理方法如下：&lt;/p&gt;
&lt;p&gt;(1).在脑裂的受害者节点上执行：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;drbdadm&lt;/span&gt; disconnect {&lt;span class=&quot;hljs-title&quot;&gt;resource&lt;/span&gt; | all}   
drbdadm secondary {&lt;span class=&quot;hljs-title&quot;&gt;resource&lt;/span&gt; | all}    
drbdadm connect --discard-my-data {&lt;span class=&quot;hljs-title&quot;&gt;resource&lt;/span&gt; | all}   
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(2).如果脑裂的幸存者节点也是&lt;code&gt;StandAlone&lt;/code&gt;状态，则执行下面的命令重新连接，如果仍然保持&lt;code&gt;Connecting&lt;/code&gt;状态，则不需任何操作：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;drbdadm&lt;/span&gt; disconnect {&lt;span class=&quot;hljs-title&quot;&gt;resource&lt;/span&gt; | all}
drbdadm connect    {&lt;span class=&quot;hljs-title&quot;&gt;resource&lt;/span&gt; | all}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当干涉完两边后，两边重新建立连接，重新握手交换初始化协议信息。此时，脑裂的受害者端的状态将变为&lt;code&gt;SyncTarget&lt;/code&gt;，表示同步的目标端，它将从另一节点上获取数据。&lt;/p&gt;
&lt;p&gt;但注意，&lt;strong&gt;&lt;span&gt;受害者在&lt;code&gt;SyncTarget&lt;/code&gt;状态下同步数据时，并不会从幸存者节点获取所有数据，而是按照自己节点上的事务信息进行回滚，再从幸存者节点上获取回滚后还缺少的数据&lt;/span&gt;。&lt;/strong&gt;因此，drbd脑裂后完成数据同步也是很快的。&lt;/p&gt;


&lt;p&gt;前文实验中使用的配置文件如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-property&quot;&gt;@drbd2&lt;/span&gt; ~]


resource data1 {
    &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd1.longshuai.com {
        device           /dev/drbd0 minor &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
        disk             /dev/sdb5;
        meta-disk        /dev/sdb1;
        address          ipv4 &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.51:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
    }
    &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd2.longshuai.com {
        device           /dev/drbd0 minor &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
        disk             /dev/sdb5;
        meta-disk        /dev/sdb1;
        address          ipv4 &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.52:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它等价于：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resource data1 {
        device /dev/drbd0;
        disk /dev/sdb5;
        meta-disk /dev/sdb1;
        &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd1.longshuai.com {
                address &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.51:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
        }
        &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd2.longshuai.com {
                address &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.52:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实它还等价于：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resource data1 {
        volume &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {
                device /dev/drbd0;
                disk /dev/sdb5;
                meta-disk /dev/sdb1;
        }
        &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd1.longshuai.com {
                address &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.51:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
        }
        &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd2.longshuai.com {
                address &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.52:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;drbd会为没有分卷组的资源使用默认卷组&quot;volume 0&quot;。&lt;/p&gt;
&lt;p&gt;如果需要多个底层设备(磁盘、分区、LVM、RAID等)提供drbd的同步功能，可以设置多个卷组。&lt;/p&gt;
&lt;p&gt;例如，除了上面使用的/dev/sdb{5,1}外，添加/dev/sdc1(data区)、/dev/sdc2(metadata区)到另一个卷组。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resource data1 {
        volume &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; {
                device /dev/drbd0;
                disk /dev/sdb5;
                meta-disk /dev/sdb1;
        }
        volume &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; {
                device /dev/drbd1;
                disk /dev/sdc1;
                meta-disk /dev/sdc2;
        }
        &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd1.longshuai.com {
                address &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.51:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
        }
        &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; drbd2.longshuai.com {
                address &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.100.52:&lt;span class=&quot;hljs-number&quot;&gt;7788&lt;/span&gt;;
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果第二个卷组是在drbd已经运行后再添加的完全的新分区，则需要先创建元数据区、调整配置文件、启动资源等过程。&lt;/p&gt;
&lt;p&gt;两边节点都执行:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;drbdadm&lt;/span&gt; create-md data1/&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;  
drbdadm adjust data1       
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;主节点执行：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;drbdadm 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看两卷组的状态信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-property&quot;&gt;@drbd1&lt;/span&gt; ~]
&lt;span class=&quot;hljs-attribute&quot;&gt;version&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;8.4&lt;/span&gt;.10-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-attribute&quot;&gt;api&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;proto&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;101&lt;/span&gt;)
GIT-&lt;span class=&quot;hljs-attribute&quot;&gt;hash&lt;/span&gt;: a4d5de01fffd7e4cde48a080e2c686f9e8cebf4c build &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; mockbuild@, &lt;span class=&quot;hljs-number&quot;&gt;2017&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;09&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;23&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;
 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;hljs-attribute&quot;&gt;cs&lt;/span&gt;:Connected &lt;span class=&quot;hljs-attribute&quot;&gt;ro&lt;/span&gt;:Primary/Secondary &lt;span class=&quot;hljs-attribute&quot;&gt;ds&lt;/span&gt;:UpToDate/UpToDate C r-----
    &lt;span class=&quot;hljs-attribute&quot;&gt;ns&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;76408&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;nr&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;dw&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;76408&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;dr&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;3441&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;al&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;bm&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;lo&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;pe&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ua&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ap&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ep&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;wo&lt;/span&gt;:f &lt;span class=&quot;hljs-attribute&quot;&gt;oos&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
 &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;hljs-attribute&quot;&gt;cs&lt;/span&gt;:SyncSource &lt;span class=&quot;hljs-attribute&quot;&gt;ro&lt;/span&gt;:Primary/Secondary &lt;span class=&quot;hljs-attribute&quot;&gt;ds&lt;/span&gt;:UpToDate/Inconsistent C r-----
    &lt;span class=&quot;hljs-attribute&quot;&gt;ns&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;5352&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;nr&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;dw&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;dr&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;6264&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;al&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;bm&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;lo&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;pe&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ua&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ap&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;ep&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;wo&lt;/span&gt;:f &lt;span class=&quot;hljs-attribute&quot;&gt;oos&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;4876056&lt;/span&gt;
        [&amp;gt;....................] sync&lt;span class=&quot;hljs-string&quot;&gt;'ed:  0.2% (4760/4764)M
        finish: 0:43:32 speed: 1,784 (1,784) K/sec&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再次提醒，两端的配置文件应当尽量保持一致，因此最好不要随意分区。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7048359.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到Linux系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7048359.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7576137.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到网站架构系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7576137.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7586194.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到数据库系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7586194.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8678883.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;转载请注明出处：http://www.cnblogs.com/f-ck-need-u/p/8678883.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注：若您觉得这篇文章还不错请点击右下角推荐，您的支持能激发作者更大的写作热情，非常感谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 30 Mar 2018 14:09:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/8678883.html</dc:identifier>
</item>
</channel>
</rss>