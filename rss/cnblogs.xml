<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>DAY10-万物皆对象-2018-2-2 - Archer-LCY</title>
<link>http://www.cnblogs.com/archer-lcy/p/8407432.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/archer-lcy/p/8407432.html</guid>
<description>&lt;p&gt;　　　　许久没有写了，虽然每天都有在学，但是学的东西也少了，后面难度慢慢加大，学习速度也是变慢了。这是许多天积累下来的笔记，从第一次接触对象，到慢慢去了解，现在处于还待深入了解的状态。万物皆对象，那是不是说没有对象的小伙伴不必担心了呢？&lt;/p&gt;



&lt;p&gt;&lt;span&gt;终于到了对象这里。面向对象程序设计（简称&lt;/span&gt;OOP&lt;span&gt;），&lt;/span&gt;&lt;span&gt;Java&lt;/span&gt;&lt;span&gt;是完全面向对象的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一、使用面向对象思想描述现实世界。&lt;/p&gt;
&lt;p&gt;基本步骤：&lt;/p&gt;
&lt;p&gt;1、发现类&lt;/p&gt;
&lt;p&gt;如下图：可以将下图的人分为几类&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231748031-1370113800.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;人类&lt;/span&gt;/&lt;span&gt;科学家类&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;演员类&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;逗比类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、找出属性（名词）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;姓名、性别、职业、年龄、爱好&lt;/span&gt;……&lt;/p&gt;
&lt;p&gt;3、找出行为（动词）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;吃饭、说话、表演&lt;/span&gt;……&lt;/p&gt;
&lt;p&gt;数据抽象：是数据和处理方法的结合&lt;/p&gt;
&lt;p&gt;二、使用类图描述类&lt;/p&gt;
&lt;p&gt;作用：直观容易理解&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参考工具：&lt;/span&gt;StarUML&lt;span&gt;、&lt;/span&gt;&lt;span&gt;Astah UML&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231804406-647741611.png&quot; alt=&quot;&quot;/&gt;　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231811390-607410913.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;三、类与对象的关系&lt;/p&gt;
&lt;p&gt;&lt;span&gt;类：是抽象概念，仅仅是模板，比如说&lt;/span&gt;“演员”、“总统”。类是构造对象的模板和蓝图，用于描述一种数据类型。&lt;/p&gt;
&lt;p&gt;对象：是你能够看到摸到的具体实物。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;拿小甜饼举例，将类想象成制作小甜饼的机器，而对象就是一个小甜饼。由类构造（&lt;/span&gt;construct&lt;span&gt;）对象的过程称作为创建类的实例（&lt;/span&gt;&lt;span&gt;instance&lt;/span&gt;&lt;span&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如图：左边是类，右边是对象&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231819859-1118433081.png&quot; alt=&quot;&quot;/&gt;        &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231838578-981595965.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;补充：怎么另一个类中怎么访问其他的类&lt;/span&gt;private&lt;span&gt;的变量的方法&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在另一个类中，是无法访问其他类的私有属性或方法的。&lt;/li&gt;
&lt;li&gt;在内部类可以直接访问。&lt;/li&gt;
&lt;li&gt;可以通过定义方法的形式，让内部类调用，以获得方法的返回值。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;四、类之间的的关系&lt;/p&gt;
&lt;p&gt;常见关系有：依赖、聚合、继承&lt;/p&gt;
&lt;p&gt;&lt;span&gt;依赖（&lt;/span&gt;uses-a&lt;span&gt;）：如果说一个类的方法操纵另一个类的对象，就说一个类依赖于另一个类&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;我们应该尽可能让相互依赖的类减少，用软件工程的术语来说，就是让类之间的耦合度最小。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;聚合（&lt;/span&gt;has-a&lt;span&gt;）：类&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;的对象包含类&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;继承（&lt;/span&gt;is-a&lt;span&gt;）：特殊与一般的关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231916515-964265237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;五、预定义类&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;java&lt;span&gt;中，没有类就无法做任何事情，然而，并不是所有类都具有面向对象特征，例如：&lt;/span&gt;&lt;span&gt;Math&lt;/span&gt;&lt;span&gt;类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1、对象与对象变量：想要使用对象就必须先构造对象，并指定其初始状态。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;区别：&lt;/span&gt;Date deadline;//deadline does not refer to any object&lt;span&gt;，&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;实际上等同于&lt;/span&gt;c++&lt;span&gt;中：&lt;/span&gt;&lt;span&gt;Date* deadline;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;定义了一个对象变量&lt;/span&gt;deadline&lt;span&gt;，它可以引用&lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;类型的对象。但是，一定要认识到：变量&lt;/span&gt;&lt;span&gt;deadline&lt;/span&gt;&lt;span&gt;不是一个对象，也没有引用对象。首先要初始化这个变量：&lt;/span&gt;&lt;span&gt;deadline=new Date();&lt;/span&gt;&lt;span&gt;如果是&lt;/span&gt;&lt;span&gt;deadline=null;&lt;/span&gt;&lt;span&gt;表明这个对象目前没有引用任何对象。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;两个变量引用一个对象：（一个对象变量没有包含实际包含一个对象，而仅仅引用一个对象。在&lt;/span&gt;Java&lt;span&gt;中任何对象变量的值都是对存储在另外一个地方的一个对象的引用。&lt;/span&gt;&lt;span&gt;New&lt;/span&gt;&lt;span&gt;操作符的返回值也是一个引用。）&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1313760/201802/1313760-20180202231925328-1876527040.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;在&lt;/span&gt;c++&lt;span&gt;中，稍不小心就可能创建一个错误的指针，或者造成内存溢出。而在&lt;/span&gt;&lt;span&gt;Java&lt;/span&gt;&lt;span&gt;语言中，这些问题都不存在，如果使用一个没有初始化的指针，会报错，而不是随机运行的结果；同时，不必担心内存的管理问题，垃圾收集器将会处理相关的事宜。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;2、Java &lt;span&gt;类库中的&lt;/span&gt; &lt;span&gt;LocalDate&lt;/span&gt; &lt;span&gt;类&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;时间是用距离一个固定时间点的毫秒数（可正&lt;/span&gt; &lt;span&gt;可负）&lt;/span&gt; &lt;span&gt;表示的，&lt;/span&gt; &lt;span&gt;这个点就是所谓的纪元（&lt;/span&gt; epoch), &lt;span&gt;它 是&lt;/span&gt; &lt;span&gt;UTC&lt;/span&gt; &lt;span&gt;时间&lt;/span&gt; &lt;span&gt;1970&lt;/span&gt; &lt;span&gt;年&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;月&lt;/span&gt; &lt;span&gt;1&lt;/span&gt; &lt;span&gt;日&lt;/span&gt; &lt;span&gt;00:00:00&lt;/span&gt;&lt;span&gt;。&lt;/span&gt; &lt;span&gt;UTC&lt;/span&gt; &lt;span&gt;是&lt;/span&gt; &lt;span&gt;Coordinated Universal Time&lt;/span&gt; &lt;span&gt;的缩写，与大家熟悉的&lt;/span&gt; &lt;span&gt;GMT (&lt;/span&gt; &lt;span&gt;即&lt;/span&gt; &lt;span&gt;Greenwich Mean Time,&lt;/span&gt; &lt;span&gt;格林威治时间）一样，是一种具有实践意义的科学标准时间。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;不要使用构造器来构造&lt;/span&gt; LocalDate &lt;span&gt;类的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Local Date.now() &lt;span&gt;会构造一个新对象，表示构造这个对象时的日期。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;可以提供年、&lt;/span&gt; &lt;span&gt;月和日来构造对应一个特定日期的对象：&lt;/span&gt; LocalDate.of(1999, 12, 31)&lt;span&gt;；&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;当然，&lt;/span&gt; &lt;span&gt;通常都希望将构造的对象保存在一个对象变量中：&lt;/span&gt; LocalDate newYearsEve = Local Date.of(1999, 12, 31);&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;一旦有&lt;/span&gt; &lt;span&gt;了一个&lt;/span&gt; LocalDate &lt;span&gt;对象， 可以用方法&lt;/span&gt; &lt;span&gt;getYear&lt;/span&gt;&lt;span&gt;、&lt;/span&gt; &lt;span&gt;getMonthValue&lt;/span&gt; &lt;span&gt;和&lt;/span&gt; &lt;span&gt;getDayOfMonth&lt;/span&gt; &lt;span&gt;得到年、月和日：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; int year = newYearsEve.getYearO; // 1999&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; int month = newYearsEve.getMonthValueO; // 12&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;int day = newYearsEve.getDayOfMonth(); // 31&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;看起来这似乎没有多大的意义，&lt;/span&gt; &lt;span&gt;因为这正是构造对象时使用的那些值。不过，有时可能&lt;/span&gt; &lt;span&gt;某个日期是计算得到的，你希望调用这些方法来得到更多信息。例如，&lt;/span&gt; plusDays &lt;span&gt;方法会得到 一个新的&lt;/span&gt; &lt;span&gt;LocalDate,&lt;/span&gt; &lt;span&gt;如果把应用这个方法的对象称为当前对象，这个新日期对象则是距当 前对象指定天数的一个新日期：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;LocalDate aThousandDaysLater = newYearsEve.piusDays(1000);&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; year = aThousandDaysLater.getYearO&lt;span&gt;；&lt;/span&gt;&lt;span&gt;// 2002&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;month = aThousandDaysLater.getMonthValueO; // 09&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;day = aThousandDaysLater.getDayOfMonth(); // 26&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;LocalDate &lt;span&gt;类封装了实例域来维护所设置的日期。如果不查看源代码， 就不可能知道类内 部的日期表示。当然， 封装的意义在于，这一点并不重要， 重要的是类对外提供的方法。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;3、更改器方法与使用器方法&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;1&lt;span&gt;、访问器方法（&lt;/span&gt;&lt;span&gt;accessor method&lt;/span&gt;&lt;span&gt;）：只访问对象而不修改对象的方法。例如：&lt;/span&gt;&lt;span&gt;LocalDate.getYear&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;GregorianCalendar.get&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;LocalDate aThousandDaysLater = newYearsEve.plusDays(1000);&lt;span&gt;调用&lt;/span&gt;&lt;span&gt;newYearEve.plusDays&lt;/span&gt;&lt;span&gt;之后不会改为&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;之后的日期，实际上&lt;/span&gt;&lt;span&gt;plusDays&lt;/span&gt;&lt;span&gt;方法没有更改调用这个方法的对象，而是，&lt;/span&gt;&lt;span&gt;plusDays&lt;/span&gt;&lt;span&gt;方法会产生一个新的&lt;/span&gt;&lt;span&gt;LocalDate&lt;/span&gt;&lt;span&gt;对象，然后把这个新对象赋给&lt;/span&gt;&lt;span&gt;aThousandDaysLater&lt;/span&gt;&lt;span&gt;变量，原来对象不做任何改动。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;2&lt;span&gt;、更改器方法（&lt;/span&gt;&lt;span&gt;mutator method&lt;/span&gt;&lt;span&gt;）：对象的方法会改变&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;有一个&lt;/span&gt;GregorianCalendar&lt;span&gt;方法是更改器方法，可以用于增加&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;天：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;CregorianCalendar someDay = new CregorianCalendar(1999, 11, 31); //&lt;span&gt;注意&lt;/span&gt;&lt;span&gt;月份是从&lt;/span&gt;0-11&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;someDay.add(Calendar.DAY_0F _M0NTH, 1000);&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：在&lt;/span&gt;c++&lt;span&gt;中，带有&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt;后缀的方法是访问器方法；默认为更改器方法。但是，在&lt;/span&gt;&lt;span&gt;Java&lt;/span&gt;&lt;span&gt;语言中访问器和更改器没有明显的语法区别。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 02 Feb 2018 15:20:00 +0000</pubDate>
<dc:creator>Archer-LCY</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/archer-lcy/p/8407432.html</dc:identifier>
</item>
<item>
<title>promise使用方法 - 吴贤强</title>
<link>http://www.cnblogs.com/wuxianqiang/p/8407419.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuxianqiang/p/8407419.html</guid>
<description>&lt;p&gt;代码报错会走向失败时的回调&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error(&quot;我错了&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;会失败&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;})
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; p.then((data) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;  console.log(data)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }, (err) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;   console.log(err) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行这个方法&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行reject会走向失败时的回调&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  reject(&lt;/span&gt;&quot;我错了&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;会失败&lt;/span&gt;
&lt;span&gt;})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data)
}, (err) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(err) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行这个方法&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;执行resolve会执行成功时的回调&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  resolve(&lt;/span&gt;&quot;我对了&quot;&lt;span&gt;) // 会成功
})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行此方法&lt;/span&gt;
}, (err) =&amp;gt;&lt;span&gt; {
  console.log(err) 
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不执行的情况&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  console.log(&lt;/span&gt;&quot;不知道&quot;&lt;span&gt;);
})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不执行&lt;/span&gt;
}, (err) =&amp;gt;&lt;span&gt; {
  console.log(err)  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不执行&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;链式调用可以返回普通值&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  resolve(&lt;/span&gt;&quot;执行1&quot;&lt;span&gt;)
})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;执行2&quot;&lt;span&gt;
}).then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;执行3&quot;&lt;span&gt;
}).then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行3&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;链式调用可以返回promise&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  resolve(&lt;/span&gt;&quot;执行1&quot;&lt;span&gt;)
})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise((resolve, rejext) =&amp;gt; {resolve(&quot;执行2&quot;&lt;span&gt;)})
}).then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise((resolve, rejext) =&amp;gt; {resolve(&quot;执行3&quot;&lt;span&gt;)})
}).then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行3&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;链式调用也可以不返回任何值直接到达下一步&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
let p = &lt;span&gt;new&lt;/span&gt; Promise((resolve, reject) =&amp;gt;&lt;span&gt; {
  resolve(&lt;/span&gt;&quot;执行1&quot;&lt;span&gt;)
})

p.then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 跳过我吧！&lt;/span&gt;
}).then((data) =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Promise((resolve, rejext) =&amp;gt; {resolve(&quot;执行3&quot;&lt;span&gt;)})
}).then((data) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
  console.log(data) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行3&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;手写一个promise：https://github.com/wuxianqiang/promise&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 15:17:00 +0000</pubDate>
<dc:creator>吴贤强</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuxianqiang/p/8407419.html</dc:identifier>
</item>
<item>
<title>Part 1：请求与响应--Django从入门到精通系列教程 - 刘江liujiangblog.com</title>
<link>http://www.cnblogs.com/feixuelove1009/p/8403990.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feixuelove1009/p/8403990.html</guid>
<description>&lt;hr/&gt;&lt;h3 id=&quot;该系列教程系个人原创并完整发布在个人官网刘江的博客和教程&quot;&gt;该系列教程系个人原创，并完整发布在个人官网&lt;a href=&quot;http://www.liujiangblog.com&quot;&gt;刘江的博客和教程&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;所有转载本文者需在顶部显著位置注明原作者及www.liujiangblog.com官网地址&quot;&gt;所有转载本文者，需在顶部显著位置注明原作者及www.liujiangblog.com官网地址。&lt;/h3&gt;
&lt;h3 id=&quot;python及django学习qq群453131687&quot;&gt;Python及Django学习QQ群：453131687&lt;/h3&gt;
&lt;hr/&gt;&lt;h3 id=&quot;本章以创建一个web投票应用为例子手把手的教你如何使用django开发web应用力图从全局范围带给大家一个整体的django概念让你对django的设计理念功能模块体系架构基本用法有个初步的印象&quot;&gt;本章以创建一个Web投票应用为例子，手把手的教你如何使用Django开发Web应用，力图从全局范围带给大家一个整体的Django概念，让你对Django的设计理念、功能模块、体系架构、基本用法有个初步的印象。&lt;/h3&gt;
&lt;p&gt;该应用包括以下两个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个可以让公众用户进行投票和查看投票结果的站点&lt;/li&gt;
&lt;li&gt;一个让可以进行增删改查的后台admin管理界面&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在开始之前，再次重申，请确保已经安装最新版本的Django。可以在命令行或者$提示符下输入：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ python -m django --version&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果没有显示版本号，而是提示“No module named django”，请返回前面的章节，参考安装Django。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;一-新建项目&quot;&gt;一、 新建项目&lt;/h2&gt;
&lt;p&gt;进入你指定的项目保存目录，然后运行下面的命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ django-admin startproject mysite&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这将在目录下生成一个mysite目录，也就是你的这个Django项目的根目录。它包含了一系列自动生成的目录和文件，具备各自专有的用途。&lt;/p&gt;
&lt;p&gt;注意：在给项目命名的时候必须避开Django和Python的保留关键字，比如“django”，“test”等，否则会引起冲突和莫名的错误。对于mysite的放置位置，不建议放在传统的/var/wwww目录下，它会具有一定的数据暴露危险，因此Django建议你将项目文件放在例如/home/mycode类似的位置。&lt;/p&gt;
&lt;p&gt;一个新建立的项目结构大概如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;各文件和目录解释：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;外层的&lt;code&gt;mysite/&lt;/code&gt;目录与Django无关，只是你项目的容器，可以任意命名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;manage.py&lt;/code&gt;：一个命令行工具，用于与Django进行不同方式的交互脚本，非常重要！&lt;/li&gt;
&lt;li&gt;内层的&lt;code&gt;mysite/&lt;/code&gt;目录是真正的项目文件包裹目录，它的名字是你引用内部文件的包名，例如：&lt;code&gt;mysite.urls&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysite/__init__.py&lt;/code&gt;:一个定义包的空文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysite/settings.py&lt;/code&gt;:项目的主配置文件，非常重要！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysite/urls.py&lt;/code&gt;:路由文件，所有的任务都是从这里开始分配，相当于Django驱动站点的内容表格，非常重要！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysite/wsgi.py&lt;/code&gt;:一个基于WSGI的web服务器进入点，提供底层的网络通信功能，通常不用关心。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;PS：&lt;/strong&gt;这一部分，我们可以在Pycharm环境下进行，参考上节内容。&lt;/p&gt;
&lt;h2 id=&quot;二-启动开发服务器&quot;&gt;二、 启动开发服务器&lt;/h2&gt;
&lt;p&gt;进入mystie项目的根目录，输入下面的命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ python manage.py runserver&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你会看到下面的提示，这表明Django的开发服务器已经启动，开始提供Web服务了：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Performing system checks...
System check identified no issues (0 silenced).
You have unapplied migrations; your app may not work properly until they are applied.
Run `python manage.py migrate' to apply them.
September 10, 2017 - 15:50:53
Django version 1.10, using settings `mysite.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Django提供了一个用于开发的web服务器，使你无需配置一个类似Ngnix的线上服务器，就能让站点运行起来。&lt;/strong&gt;这是一个由Python编写的轻量级服务器，简易并且不安全，因此不要将它用于生产环境。&lt;/p&gt;
&lt;p&gt;打开浏览器，访问http://127.0.0.1:8000/，你将看到Django的欢迎界面，一切OK！&lt;/p&gt;
&lt;p&gt;Django的开发服务器（以后简称服务器）默认运行在内部的8000端口，如果你想指定端口，请在命令中显示给出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ python manage.py runserver 8080&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果想修改服务器的ip地址，请按下面的方式运行命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ python manage.py runserver 0.0.0.0:8000&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这时，Django将运行在8000端口，整个局域网内都将可以访问站点，而不只是是本机。&lt;/p&gt;
&lt;p&gt;注意： &lt;strong&gt;Django的开发服务器具有自动重载功能，当你的代码有修改，每隔一段时间服务器将自动更新。&lt;/strong&gt;但是，有一些例如增加文件的动作，不会触发服务器重载，这时就需要你自己手动重启。&lt;/p&gt;
&lt;p&gt;PS:这一步操作也可以在Pycharm里完成。&lt;/p&gt;
&lt;h2 id=&quot;三-创建投票应用app&quot;&gt;三、 创建投票应用(app)&lt;/h2&gt;
&lt;p&gt;app应用与project项目的区别：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个app实现某个功能，比如博客、公共档案数据库或者简单的投票系统；&lt;/li&gt;
&lt;li&gt;一个project是配置文件和多个app的集合，这些app组合成整个站点；&lt;/li&gt;
&lt;li&gt;一个project可以包含多个app；&lt;/li&gt;
&lt;li&gt;一个app可以属于多个project！&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;app的存放位置可以是任何地点，但是通常都将它们放在与&lt;code&gt;manage.py&lt;/code&gt;脚本同级的目录下，这样方便导入文件。&lt;/p&gt;
&lt;p&gt;进入mysite项目根目录，确保与&lt;code&gt;manage.py&lt;/code&gt;文件处于同一级，输入下述命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ python manage.py startapp polls&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;系统会自动生成 polls应用的目录，其结构如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在Pycharm中，没有可以创建app的图形化按钮，需要在下方的&lt;code&gt;terminal&lt;/code&gt;终端中输入命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python manage.py startapp polls&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样也能创建polls应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/zh7delzlzxr58gaeqjl13wyt/image.png&quot; alt=&quot;image.png-29.9kB&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;四编写第一个视图&quot;&gt;四、编写第一个视图&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;polls/views.py&lt;/code&gt;文件中，编写代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.http &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; HttpResponse

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; index(request):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span class=&quot;st&quot;&gt;&quot;Hello, world. You're at the polls index.&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了调用该视图，我们还需要编写urlconf，也就是路由路径。现在，在polls目录中新建一个文件，名字为&lt;code&gt;urls.py&lt;/code&gt;，在其中输入代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.conf.urls &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; url
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; . &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; views

urlpatterns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    url(&lt;span class=&quot;vs&quot;&gt;r'^$'&lt;/span&gt;, views.index, name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'index'&lt;/span&gt;),
]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时，目录的文件结构是这样的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们先不用深究url中代码的具体含义。&lt;/p&gt;
&lt;p&gt;接下来，在项目的&lt;strong&gt;主urls文件&lt;/strong&gt;中添加&lt;code&gt;urlpattern&lt;/code&gt;条目，指向我们刚才建立的polls这个app独有的urls文件，这里需要导入include模块。打开&lt;code&gt;mysite/urls.py&lt;/code&gt;文件，代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.conf.urls &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; include, url
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.contrib &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; admin

urlpatterns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
    url(&lt;span class=&quot;vs&quot;&gt;r'^polls/'&lt;/span&gt;, include(&lt;span class=&quot;st&quot;&gt;'polls.urls'&lt;/span&gt;)),
    url(&lt;span class=&quot;vs&quot;&gt;r'^admin/'&lt;/span&gt;, admin.site.urls),
]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;include语法相当于多级路由，它把接收到的url地址去除前面的正则表达式，将剩下的字符串传递给下一级路由进行判断。在路由的章节，有更加详细的用法指导。&lt;/p&gt;
&lt;p&gt;include的背后是一种即插即用的思想。项目根路由不关心具体app的路由策略，只管往指定的二级路由转发，实现了应用解耦。app所属的二级路由可以根据自己的需要随意编写，不会和其它的app路由发生冲突。app目录可以放置在任何位置，而不用修改路由。这是软件设计里很常见的一种模式。&lt;/p&gt;
&lt;p&gt;建议：除了admin路由外，尽量给每个app设计自己独立的二级路由。&lt;/p&gt;
&lt;p&gt;好了，路由设置成功后，启动服务器，然后在浏览器中访问地址&lt;code&gt;http://localhost:8000/polls/&lt;/code&gt;。一切正常的话，你将看到&lt;code&gt;“Hello, world. You’re at the polls index.”&lt;/code&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;url方法&quot;&gt;&lt;strong&gt;url()方法：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;url()方法可以接收4个参数，其中2个是必须的：&lt;code&gt;regex&lt;/code&gt;和&lt;code&gt;view&lt;/code&gt;，以及2个可选的参数：&lt;code&gt;kwargs&lt;/code&gt;和&lt;code&gt;name&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;regex：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;regex是正则表达式的通用缩写，它是一种匹配字符串或url地址的语法。Django拿着用户请求的url地址，在&lt;code&gt;urls.py&lt;/code&gt;文件中对&lt;code&gt;urlpatterns&lt;/code&gt;列表中的每一项条目从头开始进行逐一对比，一旦遇到匹配项，立即执行该条目映射的视图函数或下级路由，其后的条目将不再继续匹配。因此，url路由的编写顺序非常重要！&lt;/p&gt;
&lt;p&gt;需要注意的是，regex不会去匹配GET或POST参数或域名，例如对于&lt;code&gt;https://www.example.com/myapp/&lt;/code&gt;，regex只尝试匹配&lt;code&gt;myapp/&lt;/code&gt;。对于&lt;code&gt;https://www.example.com/myapp/?page=3&lt;/code&gt;,regex也只尝试匹配&lt;code&gt;myapp/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你想深入研究正则表达式，可以读一些相关的书籍或专论，但是在Django的实际应用中，你不需要多高深的正则表达式知识，在Python教程部分有正则表达式相关专题，可供学习参考。&lt;/p&gt;
&lt;p&gt;当URLconf模块加载的时候会预先编译正则表达式，因此它的匹配搜索速度非常快，你通常感觉不到。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;view：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;view指的是处理当前url请求的视图函数。当正则表达式匹配到某个条目时，自动将封装的&lt;code&gt;HttpRequest&lt;/code&gt;对象作为第一个参数，正则表达式“捕获”到的值作为第二个参数，传递给该条目指定的视图view。如果是简单捕获，那么捕获值将作为一个位置参数进行传递，如果是命名捕获，那么将作为关键字参数进行传递。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kwargs：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;任意数量的关键字参数可以作为一个字典传递给目标视图。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;name：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对你的URL进行命名，让你能够在Django的任意处，尤其是模板内显式地引用它。这是一个非常强大的功能，相当于给URL取了个全局变量名，不会将url匹配地址写死。&lt;/p&gt;
&lt;p&gt;url()方法的四个参数，每个都非常有讲究，这里先做基本的介绍，在后面有详细的论述。&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 14:52:00 +0000</pubDate>
<dc:creator>刘江liujiangblog.com</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feixuelove1009/p/8403990.html</dc:identifier>
</item>
<item>
<title>扫描线讲解，动态开点版线段树 - 杨松燚</title>
<link>http://www.cnblogs.com/yangsongyi/p/8378629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangsongyi/p/8378629.html</guid>
<description>&lt;p&gt;&lt;strong&gt;　　首先，扫描线是干什么的？&lt;/strong&gt;扫描线一般运用在图形上面，它和它的字面意思十分相似，就是一条线在整个图上扫来扫去，它一般被用来解决图形面积，周长等问题，以一道例题为例。给出n个正方形，这些正方形在平面直角坐标系中互相重叠摆放，但四条边都与坐标轴平行，例如下图所示。那么知道题目了，怎么运用呢？首先我们需要知道怎么用暴力解决这个问题，根据图片可知图中的面积是S&lt;sub&gt;ABCD&lt;/sub&gt;+S&lt;sub&gt;HEFG&lt;/sub&gt;-S&lt;sub&gt;IDJE&lt;/sub&gt;暴力搜索是个好东西，但是当数据范围大了怎么办？这里就要讲到扫描线。&lt;/p&gt;
&lt;p&gt;&lt;img dir=&quot;ltr&quot; src=&quot;https://images2017.cnblogs.com/blog/1257114/201801/1257114-20180129164934453-115980736.png&quot; alt=&quot;&quot; width=&quot;303&quot; height=&quot;208&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1257114/201801/1257114-20180129175005921-1199128947.png&quot; alt=&quot;&quot; width=&quot;305&quot; height=&quot;208&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　扫描线对于这道例题可以抽象为这四条紫色的直线（如上图l1，l2，l3，l4），仔细观察，可以看出这四条线把这个图形分割成三个矩形，那么我们就可以直接求这三个矩形再加和是不是就可以了？那么现在难点来了，怎样求这些矩形的面积。我们可以把题目中给的矩形的边转换成直线（如下图），即只留下这四条边，这四条线就是整个做法的核心。既然四条线已经看出来了，那么我们就可以一眼看出，面积就是从头到现在的扫描线的重影减去已经结束的长方形的边的投影承上两条扫描线的间距。再把这些乘积加在一起。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1257114/201801/1257114-20180129181802484-743576157.png&quot; alt=&quot;&quot; width=&quot;298&quot; height=&quot;204&quot;/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1257114/201801/1257114-20180130124846984-896697391.png&quot; alt=&quot;&quot; width=&quot;297&quot; height=&quot;205&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;下面就将如何实现了&lt;/strong&gt;，首先我们可以想到用线段树求区间和来求这些投影的长度，那么区间如此之大（-1e8~1e8），怎么能建树呢？不会空间爆炸吗？所以就应该运用动态开点线段树，算一下每一个扫描线开一个节点，那么就是n个，一共有log&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;1e8&lt;/sup&gt;层所以是可以开的下的。根据这个说法，每一条边应该进行排序，由于扫描是从左到右，所以排序应该是把横坐标从小到大排序，所以每条边有三个属性：位置即横坐标，从那个点开始，从那个点结束，这两给点分别是纵坐标的两个端点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_48a797d8-365c-4ec1-9d1b-a934466c14a1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_48a797d8-365c-4ec1-9d1b-a934466c14a1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_48a797d8-365c-4ec1-9d1b-a934466c14a1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Line
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt;,to,x,val;  
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; }line[&lt;span&gt;2001&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; cmp1(&lt;span&gt;const&lt;/span&gt; Line &amp;amp;a,&lt;span&gt;const&lt;/span&gt; Line &amp;amp;&lt;span&gt;b)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; a.x&amp;lt;=&lt;span&gt;b.x;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{ 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;n);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;a,&amp;amp;b,&amp;amp;c,&amp;amp;&lt;span&gt;d);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;].x=&lt;span&gt;a;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;].&lt;span&gt;from&lt;/span&gt;=d+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;].to=&lt;span&gt;b;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;].val=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;].x=&lt;span&gt;c;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;].&lt;span&gt;from&lt;/span&gt;=d+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;].to=&lt;span&gt;b;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 line[i*&lt;span&gt;2&lt;/span&gt;].val=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         sort(line+&lt;span&gt;1&lt;/span&gt;,line+&lt;span&gt;1&lt;/span&gt;+&lt;span&gt;2&lt;/span&gt;*&lt;span&gt;n,cmp1);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;扫描线排序&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　下面讲解一下如何把线段树运用进去，我们把每一条边给定一个属性，这个矩形的左面边定义为入边，给一个+1的值，右边的边定义为出边，给一个-1的值，这就是边里的val的意义，那么这个和线段树又有什么关系呢？有了这个值我们可以快速地直接给线段树赋值，让其显示是否有边覆盖在上面，也就是下面代码中的cover数组的含义，如果cover数组有值不是零，那么这个区间就有边，即有r-l+1的贡献，否则则没有。这便是查询。在查询中一定要查到叶子节点，因为在扫描线中是没有上传值或是下传值的说法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_e8707af7-6ad7-4131-84a4-9ce72342e840&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e8707af7-6ad7-4131-84a4-9ce72342e840&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e8707af7-6ad7-4131-84a4-9ce72342e840&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; find(&lt;span&gt;int&lt;/span&gt; l,&lt;span&gt;int&lt;/span&gt; r,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; p)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(cover[p])
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sum[p];
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(lp==rp&amp;amp;&amp;amp;rp==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; sum=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(lp!=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 sum+=find(l,(l+r)&amp;gt;&amp;gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,lp);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(rp!=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 sum+=find(((l+r)&amp;gt;&amp;gt;&lt;span&gt;1&lt;/span&gt;)+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,r,rp);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sum;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;扫描线查询&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　最难的要数修改，如果现在的节点被现在要加的边完全覆盖，那么直接修改就好啦，否则要递归的寻找他的儿子，如果没有儿子则动态开点出来，这边是修改的想法，当然在修改时不要忘记修改cover的值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39.5&quot;&gt;&lt;img id=&quot;code_img_closed_e9600efe-3c21-49b2-a636-83d9c44cb302&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e9600efe-3c21-49b2-a636-83d9c44cb302&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e9600efe-3c21-49b2-a636-83d9c44cb302&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; change(&lt;span&gt;int&lt;/span&gt; l,&lt;span&gt;int&lt;/span&gt; r,&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt; y,&lt;span&gt;int&lt;/span&gt; &amp;amp;p,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; delta)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;p)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 p=++&lt;span&gt;cnt;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(x&amp;lt;=l&amp;amp;&amp;amp;r&amp;lt;=&lt;span&gt;y)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 cover[p]+=&lt;span&gt;delta;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 sum[p]=r-l+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; mid=(l+r)&amp;gt;&amp;gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(x&amp;lt;=&lt;span&gt;mid)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                change(l,mid,x,y,lp,delta);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(y&amp;gt;&lt;span&gt;mid)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 change(mid+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,r,x,y,rp,delta);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;扫描线修改&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　大致就是这样，不会的可以评论发问题，我会解答。&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 14:31:00 +0000</pubDate>
<dc:creator>杨松燚</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangsongyi/p/8378629.html</dc:identifier>
</item>
<item>
<title>TSQL 数据类型转换 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/5461799.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/5461799.html</guid>
<description>&lt;p&gt;常用的转换函数是 cast 和 convert，用于把表达式得出的值的类型转换成另一个数据类型，如果转换失败，该函数抛出错误，导致整个事务回滚。在SQL Server 2012版本中，新增两个容错的转换函数：try_cast 和 try_convert，如果转换操作失败，该函数返回null，不会导致整个事务失败，事务继续执行下去。&lt;/p&gt;
&lt;p&gt;注意：对于SQL Server显式定义的不合法转换，try_cast 和 try_convert 会失败，抛出错误信息：&lt;span&gt;Explicit conversion from data type int to date is not allowed.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; try_cast(&lt;span&gt;1&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; date)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转换函数是parse 和 try_parse，只用于把字符类型转换为 date/time 和 数字类型，在解析字符时会产生一定的性能消耗。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一，时间类型转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在把日期/时间类型转换成字符串时，常用的转换函数&lt;strong&gt;是Convert和Cast，&lt;/strong&gt;convert函数能够在一定程度上显式控制日期/时间的显示格式，而cast对日期/时间类型的显示格式，无法显式控制，我推荐使用另一个功能更强大的函数：FORMAT，该函数用于把日期时间类型，按照指定的格式转换成字符串，也可以把数值按照特定的格式输出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，常用的转换函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;convert 常用于转换date，datetime 等日期/时间类型，通过指定style参数，能够控制数据显示的格式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CAST&lt;/span&gt; ( expression &lt;span&gt;AS&lt;/span&gt; data_type &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ( length ) &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )
&lt;/span&gt;&lt;span&gt;CONVERT&lt;/span&gt; ( data_type &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ( length ) &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; , expression &lt;span&gt;[&lt;/span&gt;&lt;span&gt; , style &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用的style及其显示格式如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;101 mm/dd/yyyy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;110 mm-dd-yyyy&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;111 yyyy/mm/dd&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;112 yyyymmdd&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;120 yyyy-mm-dd hh:mm:ss&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;121 yyyy-mm-dd hh:mm:sssssss&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;CONVERT函数的style是数字，记忆起来比较困难，只能按照系统定义的格式来显示，不够灵活。SQL Server提供更为灵活的转换函数FORMAT。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，FORMAT函数，控制日期和时间类型的显示格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FORMAT函数主要用于格式化显示date/time类型和数值类型，参数format用于指定显示的格式，给予用户对格式更自由地控制，culture参数是可选的，用于指定显示的语言，该函数返回值的数据类型是NVARCHAR，如果格式转换失败，该函数返回NULL：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
FORMAT ( value, format &lt;span&gt;[&lt;/span&gt;&lt;span&gt;, culture &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; ) 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当转换date/time时，在format参数中指定日期/时间显示的格式，通常情况下，日期/时间的格式使用以下关键字符作为占位符：yyyy、MM、dd用来表示：年、月、日，而hh、mm、ss用来表示：时、分、秒，并使用“/”，“-”等作为连接符，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;DECLARE&lt;/span&gt; &lt;span&gt;@d&lt;/span&gt; &lt;span&gt;DATETIME&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;GETDATE&lt;/span&gt;&lt;span&gt;();  
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; FORMAT( &lt;span&gt;@d&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dd/MM/yyyy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;en-US&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ) &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DateTime Result&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当转换数值类型时，在参数format中使用#代表一个数字，使用相应的连接符，拼接成数字的格式字符，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
FORMAT(&lt;span&gt;123456789&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;###-##-####&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Custom Number Result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/628084/201802/628084-20180202221957406-1176938359.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二，TRY_CAST and TRY_CONVERT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果表达式转换成功，返回强转之后表达式的值；如果转换失败，返回NULL；如果转换两个显式禁止的数据类型，转换失败，抛出错误。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;TRY_CAST&lt;/strong&gt; takes the value passed to it and tries to convert it to the specified &lt;em&gt;data_type&lt;/em&gt;. If the cast succeeds, &lt;strong&gt;TRY_CAST&lt;/strong&gt; returns the value as the specified &lt;em&gt;data_type&lt;/em&gt;; if an error occurs, null is returned. However if you request a conversion that is explicitly not permitted, then &lt;strong&gt;TRY_CAST&lt;/strong&gt; fails with an error.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
TRY_CAST ( expression &lt;span&gt;AS&lt;/span&gt; data_type &lt;span&gt;[&lt;/span&gt;&lt;span&gt; ( length ) &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt; )
TRY_CONVERT ( data_type &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt; ( length ) &lt;/span&gt;&lt;span&gt;]&lt;/span&gt;, expression &lt;span&gt;[&lt;/span&gt;&lt;span&gt;, style &lt;/span&gt;&lt;span&gt;]&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1，try_cast 返回null&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;CASE&lt;/span&gt; &lt;span&gt;WHEN&lt;/span&gt; TRY_CAST(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; &lt;span&gt;float&lt;/span&gt;) &lt;span&gt;IS&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; 
                &lt;span&gt;THEN&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cast failed&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
            &lt;span&gt;ELSE&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Cast succeeded&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &lt;span&gt;END&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; Result;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2，try_cast 转换失败，返回error&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; TRY_CAST(&lt;span&gt;4&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; xml) &lt;span&gt;AS&lt;/span&gt; Result;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Explicit conversion from data type int to xml is not allowed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，try_cast转换成功&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SET&lt;/span&gt;&lt;span&gt; DATEFORMAT mdy;
&lt;/span&gt;&lt;span&gt;SELECT&lt;/span&gt; TRY_CAST(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;12/31/2010&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;AS&lt;/span&gt; datetime2) &lt;span&gt;AS&lt;/span&gt;&lt;span&gt; Result;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/628084/201605/628084-20160505142359216-213177766.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三，转换的性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;转换函数的性能是不同的，经过测试，cast 和 convert 的转换性能最好，要比try_cast和try_convert要好一些；而Cast的转换性能比convert要好一点。&lt;/p&gt;

&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mssqltips.com/sqlservertip/3018/performance-comparison-of-the-sql-server-parse-cast-convert-and-tryparse-trycast-tryconvert-functions/&quot;&gt;Performance Comparison of the SQL Server PARSE, CAST, CONVERT and TRY_PARSE, TRY_CAST, TRY_CONVERT Functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms187928.aspx&quot; target=&quot;_blank&quot;&gt;CAST and CONVERT (Transact-SQL)&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 14:31:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/5461799.html</dc:identifier>
</item>
<item>
<title>SSE图像算法优化系列十五：YUV/XYZ和RGB空间相互转化的极速实现(此后老板不用再担心算法转到其他空间通道的耗时了)。 - Imageshop</title>
<link>http://www.cnblogs.com/Imageshop/p/8405517.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Imageshop/p/8405517.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　在&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/Imageshop/archive/2013/01/31/2888097.html&quot;&gt;颜色空间系列1: RGB和CIEXYZ颜色空间的转换及相关优化&lt;/a&gt;和&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/Imageshop/archive/2013/02/14/2911309.html&quot;&gt;颜色空间系列3: RGB和YUV颜色空间的转换及优化算法&lt;/a&gt;两篇文章中我们给出了两种不同的颜色空间的相互转换之间的快速算法的实现代码，但是那个是C#版本的，为了比较方便，我们这里提供C版本的代码，以RGB转到YUV空间的代码为例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; RGBToYUV(unsigned &lt;span&gt;char&lt;/span&gt; *RGB, unsigned &lt;span&gt;char&lt;/span&gt; *Y, unsigned &lt;span&gt;char&lt;/span&gt; *U, unsigned &lt;span&gt;char&lt;/span&gt; *V, &lt;span&gt;int&lt;/span&gt; Width, &lt;span&gt;int&lt;/span&gt; Height, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Stride)
{
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Shift = &lt;span&gt;15&lt;/span&gt;&lt;span&gt;;                            
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; HalfV = &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (Shift - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Y_B_WT = &lt;span&gt;0.114f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), Y_G_WT = &lt;span&gt;0.587f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), Y_R_WT = (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift) - Y_B_WT -&lt;span&gt; Y_G_WT;
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; U_B_WT = &lt;span&gt;0.436f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), U_G_WT = -&lt;span&gt;0.28886f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), U_R_WT = -(U_B_WT +&lt;span&gt; U_G_WT);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; V_B_WT = -&lt;span&gt;0.10001&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), V_G_WT = -&lt;span&gt;0.51499f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), V_R_WT = -(V_B_WT +&lt;span&gt; V_G_WT);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; YY = &lt;span&gt;0&lt;/span&gt;; YY &amp;lt; Height; YY++&lt;span&gt;)
    {
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePS = RGB + YY *&lt;span&gt; Stride;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePY = Y + YY *&lt;span&gt; Width;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePU = U + YY *&lt;span&gt; Width;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePV = V + YY *&lt;span&gt; Width;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; XX = &lt;span&gt;0&lt;/span&gt;; XX &amp;lt; Width; XX++, LinePS += &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)    
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Blue = LinePS[&lt;span&gt;0&lt;/span&gt;], Green = LinePS[&lt;span&gt;1&lt;/span&gt;], Red = LinePS[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
            LinePY[XX] &lt;/span&gt;= (Y_B_WT * Blue + Y_G_WT * Green + Y_R_WT * Red + HalfV) &amp;gt;&amp;gt;&lt;span&gt; Shift;
            LinePU[XX] &lt;/span&gt;= ((U_B_WT * Blue + U_G_WT * Green + U_R_WT * Red + HalfV) &amp;gt;&amp;gt; Shift) + &lt;span&gt;128&lt;/span&gt;&lt;span&gt;;
            LinePV[XX] &lt;/span&gt;= ((V_B_WT * Blue + V_G_WT * Green + V_R_WT * Red + HalfV) &amp;gt;&amp;gt; Shift) + &lt;span&gt;128&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;　上述代码和&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/Imageshop/archive/2013/02/14/2911309.html&quot;&gt;颜色空间系列3: RGB和YUV颜色空间的转换及优化算法&lt;/a&gt;中的有所不同，但是应该说更加合理，注意Y_R_WT/U_R_WT/V_R_WT 的书写方式有所不同，这主要是为了保证定点化后的系数不会放大误差，同时注意计算时每一项还增加了HalfV值，这主要是为了保证对计算结果的四舍五入。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　现代的CPU都很强劲，找了一台普通的I5电脑测试，1080P的图平均转换时间为10ms，大概能得到100fps的转换速率，但是从实际应用来讲，在很多场合这个耗时还是多了点，如果需要处理1080P这样的高清视频，考虑到综合因素，单帧的总处理时间不宜超过30ms,所以还有必要进一步提高这个算法的速度。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　凭直觉，上述代码用GPU实现应该有很高的并行性，不知道最后速度会如何。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　俺不会GPU，只会用SSE进行优化，先试一试把，一种最直接最朴实的写法如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;335&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; RGBToYUVSSE(unsigned &lt;span&gt;char&lt;/span&gt; *RGB, unsigned &lt;span&gt;char&lt;/span&gt; *Y, unsigned &lt;span&gt;char&lt;/span&gt; *U, unsigned &lt;span&gt;char&lt;/span&gt; *V, &lt;span&gt;int&lt;/span&gt; Width, &lt;span&gt;int&lt;/span&gt; Height, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Stride)
{
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Shift = &lt;span&gt;15&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; HalfV = &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (Shift - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Y_B_WT = &lt;span&gt;0.114f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), Y_G_WT = &lt;span&gt;0.587f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), Y_R_WT = (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift) - Y_B_WT -&lt;span&gt; Y_G_WT;
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; U_B_WT = &lt;span&gt;0.436f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), U_G_WT = -&lt;span&gt;0.28886f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), U_R_WT = -(U_B_WT +&lt;span&gt; U_G_WT);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; V_B_WT = -&lt;span&gt;0.10001&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), V_G_WT = -&lt;span&gt;0.51499f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), V_R_WT = -(V_B_WT +&lt;span&gt; V_G_WT);

    __m128i Weight_YB &lt;/span&gt;= _mm_set1_epi32(Y_B_WT), Weight_YG = _mm_set1_epi32(Y_G_WT), Weight_YR =&lt;span&gt; _mm_set1_epi32(Y_R_WT);
    __m128i Weight_UB &lt;/span&gt;= _mm_set1_epi32(U_B_WT), Weight_UG = _mm_set1_epi32(U_G_WT), Weight_UR =&lt;span&gt; _mm_set1_epi32(U_R_WT);
    __m128i Weight_VB &lt;/span&gt;= _mm_set1_epi32(V_B_WT), Weight_VG = _mm_set1_epi32(V_G_WT), Weight_VR =&lt;span&gt; _mm_set1_epi32(V_R_WT);
    __m128i C128 &lt;/span&gt;= _mm_set1_epi32(&lt;span&gt;128&lt;/span&gt;&lt;span&gt;);
    __m128i Half &lt;/span&gt;=&lt;span&gt; _mm_set1_epi32(HalfV);
    __m128i Zero &lt;/span&gt;=&lt;span&gt; _mm_setzero_si128();

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; BlockSize = &lt;span&gt;16&lt;/span&gt;, Block = Width /&lt;span&gt; BlockSize;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; YY = &lt;span&gt;0&lt;/span&gt;; YY &amp;lt; Height; YY++&lt;span&gt;)
    {
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePS = RGB + YY *&lt;span&gt; Stride;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePY = Y + YY *&lt;span&gt; Width;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePU = U + YY *&lt;span&gt; Width;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePV = V + YY *&lt;span&gt; Width;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; XX = &lt;span&gt;0&lt;/span&gt;; XX &amp;lt; Block * BlockSize; XX += BlockSize, LinePS += BlockSize * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
        {
            __m128i Src1, Src2, Src3, Blue, Green, Red;
            
            Src1 &lt;/span&gt;= _mm_loadu_si128((__m128i *)(LinePS + &lt;span&gt;0&lt;/span&gt;&lt;span&gt;));
            Src2 &lt;/span&gt;= _mm_loadu_si128((__m128i *)(LinePS + &lt;span&gt;16&lt;/span&gt;&lt;span&gt;));
            Src3 &lt;/span&gt;= _mm_loadu_si128((__m128i *)(LinePS + &lt;span&gt;32&lt;/span&gt;&lt;span&gt;));

            Blue &lt;/span&gt;= _mm_shuffle_epi8(Src1, _mm_setr_epi8(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;, &lt;span&gt;12&lt;/span&gt;, &lt;span&gt;15&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
            Blue &lt;/span&gt;= _mm_or_si128(Blue, _mm_shuffle_epi8(Src2, _mm_setr_epi8(-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;, &lt;span&gt;14&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)));
            Blue &lt;/span&gt;= _mm_or_si128(Blue, _mm_shuffle_epi8(Src3, _mm_setr_epi8(-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;13&lt;/span&gt;&lt;span&gt;)));

            Green &lt;/span&gt;= _mm_shuffle_epi8(Src1, _mm_setr_epi8(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;13&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
            Green &lt;/span&gt;= _mm_or_si128(Green, _mm_shuffle_epi8(Src2, _mm_setr_epi8(-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;, &lt;span&gt;12&lt;/span&gt;, &lt;span&gt;15&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)));
            Green &lt;/span&gt;= _mm_or_si128(Green, _mm_shuffle_epi8(Src3, _mm_setr_epi8(-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;, &lt;span&gt;14&lt;/span&gt;&lt;span&gt;)));

            Red &lt;/span&gt;= _mm_shuffle_epi8(Src1, _mm_setr_epi8(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;, &lt;span&gt;14&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
            Red &lt;/span&gt;= _mm_or_si128(Red, _mm_shuffle_epi8(Src2, _mm_setr_epi8(-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;13&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)));
            Red &lt;/span&gt;= _mm_or_si128(Red, _mm_shuffle_epi8(Src3, _mm_setr_epi8(-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;, &lt;span&gt;12&lt;/span&gt;, &lt;span&gt;15&lt;/span&gt;&lt;span&gt;)));

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    以上操作把16个连续像素的像素顺序由 B G R B G R B G R B G R B G R B G R B G R B G R B G R B G R B G R B G R B G R B G R B G R B G R 
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    更改为适合于SIMD指令处理的连续序列 B B B B B B B B B B B B B B B B G G G G G G G G G G G G G G G G R R R R R R R R R R R R R R R R     
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    并分别保存于三个SSE变量中，并且没任何的冗余数据。&lt;/span&gt;
&lt;span&gt;
            __m128i Blue16L &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi8(Blue, Zero);            
            __m128i Blue16H &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi8(Blue, Zero);            
            __m128i Blue32LL &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi16(Blue16L, Zero);        
            __m128i Blue32LH &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi16(Blue16L, Zero);
            __m128i Blue32HL &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi16(Blue16H, Zero);
            __m128i Blue32HH &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi16(Blue16H, Zero);

            __m128i Green16L &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi8(Green, Zero);
            __m128i Green16H &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi8(Green, Zero);
            __m128i Green32LL &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi16(Green16L, Zero);
            __m128i Green32LH &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi16(Green16L, Zero);
            __m128i Green32HL &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi16(Green16H, Zero);
            __m128i Green32HH &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi16(Green16H, Zero);

            __m128i Red16L &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi8(Red, Zero);
            __m128i Red16H &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi8(Red, Zero);
            __m128i Red32LL &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi16(Red16L, Zero);
            __m128i Red32LH &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi16(Red16L, Zero);
            __m128i Red32HL &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi16(Red16H, Zero);
            __m128i Red32HH &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi16(Red16H, Zero);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    以上操作把三个SSE变量里的字节数据分别提取到12个包含4个int类型的数据的SSE变量里，以便后续的乘积操作不溢出&lt;/span&gt;
&lt;span&gt;
            __m128i LL_Y &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32LL, Weight_YB), _mm_add_epi32(_mm_mullo_epi32(Green32LL, Weight_YG), _mm_mullo_epi32(Red32LL, Weight_YR))),Half), Shift);
            __m128i LH_Y &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32LH, Weight_YB), _mm_add_epi32(_mm_mullo_epi32(Green32LH, Weight_YG), _mm_mullo_epi32(Red32LH, Weight_YR))), Half), Shift);
            __m128i HL_Y &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32HL, Weight_YB), _mm_add_epi32(_mm_mullo_epi32(Green32HL, Weight_YG), _mm_mullo_epi32(Red32HL, Weight_YR))), Half), Shift);
            __m128i HH_Y &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32HH, Weight_YB), _mm_add_epi32(_mm_mullo_epi32(Green32HH, Weight_YG), _mm_mullo_epi32(Red32HH, Weight_YR))), Half), Shift);
            _mm_storeu_si128((__m128i&lt;/span&gt;*)(LinePY + XX), _mm_packus_epi16(_mm_packus_epi32(LL_Y, LH_Y), _mm_packus_epi32(HL_Y, HH_Y)));    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    4个包含4个int类型的SSE变量重新打包为1个包含16个字节数据的SSE变量
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    以上操作完成：Y[0 - 15] = (Y_B_WT * Blue[0 - 15]+ Y_G_WT * Green[0 - 15] + Y_R_WT * Red[0 - 15] + HalfV) &amp;gt;&amp;gt; Shift;    &lt;/span&gt;
&lt;span&gt;
            __m128i LL_U &lt;/span&gt;=&lt;span&gt; _mm_add_epi32(_mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32LL, Weight_UB), _mm_add_epi32(_mm_mullo_epi32(Green32LL, Weight_UG), _mm_mullo_epi32(Red32LL, Weight_UR))), Half), Shift), C128);
            __m128i LH_U &lt;/span&gt;=&lt;span&gt; _mm_add_epi32(_mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32LH, Weight_UB), _mm_add_epi32(_mm_mullo_epi32(Green32LH, Weight_UG), _mm_mullo_epi32(Red32LH, Weight_UR))), Half), Shift), C128);
            __m128i HL_U &lt;/span&gt;=&lt;span&gt; _mm_add_epi32(_mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32HL, Weight_UB), _mm_add_epi32(_mm_mullo_epi32(Green32HL, Weight_UG), _mm_mullo_epi32(Red32HL, Weight_UR))), Half), Shift), C128);
            __m128i HH_U &lt;/span&gt;=&lt;span&gt; _mm_add_epi32(_mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32HH, Weight_UB), _mm_add_epi32(_mm_mullo_epi32(Green32HH, Weight_UG), _mm_mullo_epi32(Red32HH, Weight_UR))), Half), Shift), C128);
            _mm_storeu_si128((__m128i&lt;/span&gt;*)(LinePU +&lt;span&gt; XX), _mm_packus_epi16(_mm_packus_epi32(LL_U, LH_U), _mm_packus_epi32(HL_U, HH_U)));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    以上操作完成：U[0 - 15] = ((U_B_WT * Blue[0 - 15]+ U_G_WT * Green[0 - 15] + U_R_WT * Red[0 - 15] + HalfV) &amp;gt;&amp;gt; Shift) + 128;    &lt;/span&gt;
&lt;span&gt;
            __m128i LL_V &lt;/span&gt;=&lt;span&gt; _mm_add_epi32(_mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32LL, Weight_VB), _mm_add_epi32(_mm_mullo_epi32(Green32LL, Weight_VG), _mm_mullo_epi32(Red32LL, Weight_VR))), Half), Shift), C128);
            __m128i LH_V &lt;/span&gt;=&lt;span&gt; _mm_add_epi32(_mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32LH, Weight_VB), _mm_add_epi32(_mm_mullo_epi32(Green32LH, Weight_VG), _mm_mullo_epi32(Red32LH, Weight_VR))), Half), Shift), C128);
            __m128i HL_V &lt;/span&gt;=&lt;span&gt; _mm_add_epi32(_mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32HL, Weight_VB), _mm_add_epi32(_mm_mullo_epi32(Green32HL, Weight_VG), _mm_mullo_epi32(Red32HL, Weight_VR))), Half), Shift), C128);
            __m128i HH_V &lt;/span&gt;=&lt;span&gt; _mm_add_epi32(_mm_srai_epi32(_mm_add_epi32(_mm_add_epi32(_mm_mullo_epi32(Blue32HH, Weight_VB), _mm_add_epi32(_mm_mullo_epi32(Green32HH, Weight_VG), _mm_mullo_epi32(Red32HH, Weight_VR))), Half), Shift), C128);
            _mm_storeu_si128((__m128i&lt;/span&gt;*)(LinePV +&lt;span&gt; XX), _mm_packus_epi16(_mm_packus_epi32(LL_V, LH_V), _mm_packus_epi32(HL_V, HH_V)));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    以上操作完成：V[0 - 15] = ((V_B_WT * Blue[0 - 15]+ V_G_WT * Green[0 - 15] + V_R_WT * Red[0 - 15] + HalfV) &amp;gt;&amp;gt; Shift) + 128;    &lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; XX = Block * BlockSize; XX &amp;lt; Width; XX++, LinePS += &lt;span&gt;3&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    每行剩余的像素按照正常的方式处理&lt;/span&gt;
&lt;span&gt;        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Blue = LinePS[&lt;span&gt;0&lt;/span&gt;], Green = LinePS[&lt;span&gt;1&lt;/span&gt;], Red = LinePS[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
            LinePY[XX] &lt;/span&gt;= (Y_B_WT * Blue + Y_G_WT * Green + Y_R_WT * Red + HalfV) &amp;gt;&amp;gt;&lt;span&gt; Shift;
            LinePU[XX] &lt;/span&gt;= ((U_B_WT * Blue + U_G_WT * Green + U_R_WT * Red + HalfV) &amp;gt;&amp;gt; Shift) + &lt;span&gt;128&lt;/span&gt;&lt;span&gt;;
            LinePV[XX] &lt;/span&gt;= ((V_B_WT * Blue + V_G_WT * Green + V_R_WT * Red + HalfV) &amp;gt;&amp;gt; Shift) + &lt;span&gt;128&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;span&gt;　（显示器不是宽屏的朋友请下载代码在VS里浏览，不然会看晕的）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　基本上就是按照普通的C的代码翻译到SSE版本，按F5编译执行，测试速度1080P的平均每帧约4.5ms，大概是普通C语言的2.2倍，为什么没到四倍，可能是我写的不到位，但是我认为主要的原因还是这里面有蛮多的数据拆解和数据类型的转换占用了一定的CPU周期。但总的来说还是有相当大的进步的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　稍微分析下程序以帮助不太懂SSE的朋友。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前面的几句加载和shffule语句主要是把BGR格式的图像数据拆解为单独的通道数据，其详细的原理见（真心描述的清楚)：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/Imageshop/p/7234463.html&quot;&gt;SSE图像算法优化系列八：自然饱和度(Vibrance)算法的模拟实现及其SSE优化（附源码，可作为SSE图像入门，Vibrance算法也可用于简单的肤色调整）。&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　中间一部分unpack代码主要的主要作用是把字节数据扩展到32位的int类型数，因为后面的乘法结果是只能用32位才能表达完整的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　那么后面的_mm_srai_epi32、_mm_add_epi32、_mm_mullo_epi32等就是直接的C代码的翻译了，只是把普通的晕算法用函数名代替了而已。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从理论上说，上述代码中的 const int Shift = 15;这个常量最大可以取到23，这个与最后的计算精度有一定的关系，但是也是影响不大。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　&lt;span&gt;2.2倍的提速，就这样放弃了吗，不，这不科学，也不是我Imageshop的风格，继续加油。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       每当这个时候，我总是习惯性的再翻一遍Intel的SSE帮助文档，也许那个里面还藏着其他的葵花宝典。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当我们定位到_mm_madd_epi16这个函数时，虽然他只比普通的add函数多了一个m，但是当看到他下面对该函数功能的解释时，那真的眼前一亮，看下MSDN的说明：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Multiplies the 8 signed 16-bit integers from &lt;span class=&quot;code&quot;&gt;a by the 8 signed 16-bit integers from &lt;span class=&quot;code&quot;&gt;b.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　__m128i _mm_madd_epi16 (__m128i a, __m128i b);&lt;/span&gt;
&lt;/pre&gt;

&lt;div readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span id=&quot;mt2&quot; class=&quot;sentence&quot; data-guid=&quot;815765fc-ac25-562c-5b13-254e3eb6198b&quot; data-approved=&quot;pairwise 添加有符号的 32 位整数结果并打包 4 签名之后 32 位整数结果。&quot;&gt;　　　　Adds the signed 32-bit integer results pairwise and packs the 4 signed 32-bit integer results.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　　　r0 := (a0 * b0) + (a1 * b1)
　　　　　　　　r1 := (a2 * b2) + (a3 * b3)
　　　　　　　　r2 := (a4 * b4) + (a5 * b5)
　　　　　　　　r3 := (a6 * b6) + (a7 * b7)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;　　注意到这个函数内部实际执行了8次乘法和4次加法，唯一区别的就是参数要求是signed short类型，那能应用到我们的例子中吗？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们来看Y变量的计算式：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;            LinePY[XX] = (Y_B_WT * Blue + Y_G_WT * Green + Y_R_WT * Red + HalfV) &amp;gt;&amp;gt; Shift;
            LinePU[XX] = ((U_B_WT * Blue + U_G_WT * Green + U_R_WT * Red + HalfV) &amp;gt;&amp;gt; Shift) + 128;
            LinePV[XX] = ((V_B_WT * Blue + V_G_WT * Green + V_R_WT * Red + HalfV) &amp;gt;&amp;gt; Shift) + 128;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;　　注意到其中的HalfV = 1 &amp;lt;&amp;lt; (Shift - 1)，稍微改写一下，我们得到：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　　LinePY[XX] = (Y_B_WT * Blue + Y_G_WT * Green + Y_R_WT * Red + 1 * HalfV) &amp;gt;&amp;gt; Shift;
            LinePU[XX] = (U_B_WT * Blue + U_G_WT * Green + U_R_WT * Red + 257 * HalfV) &amp;gt;&amp;gt; Shift;
            LinePV[XX] = (V_B_WT * Blue + V_G_WT * Green + V_R_WT * Red + 257 * HalfV) &amp;gt;&amp;gt; Shift;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;　　至于算式中的257是怎么得到的，如果你不明白，回家问下你正在上小学的儿子吧。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　这样改写目的很明显，我们正好把括号内的计算配对成了2组可利用_mm_madd_epi16函数进行计算的形式，那么他在数据类型方面能符合_mm_madd_epi16的需求吗，或者说我们能改造他使得我们的数据满足要求不。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　_mm_madd_epi16的文档中有提到其作用是：Multiplies the 8 signed 16-bit integers from &lt;span class=&quot;code&quot;&gt;a by the 8 signed 16-bit integers from &lt;span class=&quot;code&quot;&gt;b，即参与计算的必须是带符号的16位数据，首先图像数范围[0,255]，肯定满足要求，同时注意到上述系数绝对值都小于1，因此只要&lt;/span&gt;&lt;/span&gt;(1 &amp;lt;&amp;lt; Shift)不大于32768，即Shift最大取值15时，时能够满足需求的，而Shift=15时的精度也足以满足实际的运用需求。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　注意我们改写的最后一项，比如257 * HalfV，这里我们可以认为HalfV是该项的权重，257是系数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　还有一点，也是最重要的一点，主要到没有r0 := (a0 * b0) + (a1 * b1)这里的系数是交叉的，比如我们认为变量b里面保存的是交叉的B和G分分量的权重，那么a变量里就应该交叉保存了Blue和Green的值，这时有两个途径：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1、我们上述代码里已经获得了Blue和Green分量的连续排列变量，这个时候只需要使用unpacklo和unpackhi就能分别获取低8位和高8位的交叉结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2、注意到获取Blue和Green分量的连续排列变量时是用的shuffle指令，我们也可以采用不同的shuffle系数直接获取交叉后的结果啊。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　毫无疑问，第二种方式要快多了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　好，我们贴出这样改进后的结果（似乎不用宽屏也能显示全了）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;308&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; RGBToYUVSSE(unsigned &lt;span&gt;char&lt;/span&gt; *RGB, unsigned &lt;span&gt;char&lt;/span&gt; *Y, unsigned &lt;span&gt;char&lt;/span&gt; *U, unsigned &lt;span&gt;char&lt;/span&gt; *V, &lt;span&gt;int&lt;/span&gt; Width, &lt;span&gt;int&lt;/span&gt; Height, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Stride)
{&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Shift = &lt;span&gt;15&lt;/span&gt;;                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    这里没有绝对值大于1的系数，最大可取2^15次方的放大倍数。&lt;/span&gt;
    &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; HalfV = &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (Shift - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Y_B_WT = &lt;span&gt;0.114f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), Y_G_WT = &lt;span&gt;0.587f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), Y_R_WT = (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift) - Y_B_WT - Y_G_WT, Y_C_WT = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; U_B_WT = &lt;span&gt;0.436f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), U_G_WT = -&lt;span&gt;0.28886f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), U_R_WT = -(U_B_WT + U_G_WT), U_C_WT = &lt;span&gt;257&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; V_B_WT = -&lt;span&gt;0.10001&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), V_G_WT = -&lt;span&gt;0.51499f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), V_R_WT = -(V_B_WT + V_G_WT), V_C_WT = &lt;span&gt;257&lt;/span&gt;&lt;span&gt;;

    __m128i Weight_YBG &lt;/span&gt;=&lt;span&gt; _mm_setr_epi16(Y_B_WT, Y_G_WT, Y_B_WT, Y_G_WT, Y_B_WT, Y_G_WT, Y_B_WT, Y_G_WT);            
    __m128i Weight_YRC &lt;/span&gt;=&lt;span&gt; _mm_setr_epi16(Y_R_WT, Y_C_WT, Y_R_WT, Y_C_WT, Y_R_WT, Y_C_WT, Y_R_WT, Y_C_WT);
    __m128i Weight_UBG &lt;/span&gt;=&lt;span&gt; _mm_setr_epi16(U_B_WT, U_G_WT, U_B_WT, U_G_WT, U_B_WT, U_G_WT, U_B_WT, U_G_WT);
    __m128i Weight_URC &lt;/span&gt;=&lt;span&gt; _mm_setr_epi16(U_R_WT, U_C_WT, U_R_WT, U_C_WT, U_R_WT, U_C_WT, U_R_WT, U_C_WT);
    __m128i Weight_VBG &lt;/span&gt;=&lt;span&gt; _mm_setr_epi16(V_B_WT, V_G_WT, V_B_WT, V_G_WT, V_B_WT, V_G_WT, V_B_WT, V_G_WT);
    __m128i Weight_VRC &lt;/span&gt;=&lt;span&gt; _mm_setr_epi16(V_R_WT, V_C_WT, V_R_WT, V_C_WT, V_R_WT, V_C_WT, V_R_WT, V_C_WT);
    __m128i Half &lt;/span&gt;= _mm_setr_epi16(&lt;span&gt;0&lt;/span&gt;, HalfV, &lt;span&gt;0&lt;/span&gt;, HalfV, &lt;span&gt;0&lt;/span&gt;, HalfV, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, HalfV);
    __m128i Zero &lt;/span&gt;=&lt;span&gt; _mm_setzero_si128();

    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; BlockSize = &lt;span&gt;16&lt;/span&gt;, Block = Width /&lt;span&gt; BlockSize;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; YY = &lt;span&gt;0&lt;/span&gt;; YY &amp;lt; Height; YY++&lt;span&gt;)
    {
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePS = RGB + YY *&lt;span&gt; Stride;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePY = Y + YY *&lt;span&gt; Width;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePU = U + YY *&lt;span&gt; Width;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePV = V + YY *&lt;span&gt; Width;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; XX = &lt;span&gt;0&lt;/span&gt;; XX &amp;lt; Block * BlockSize; XX += BlockSize, LinePS += BlockSize * &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
        {
            __m128i Src1 &lt;/span&gt;= _mm_loadu_si128((__m128i *)(LinePS + &lt;span&gt;0&lt;/span&gt;&lt;span&gt;));
            __m128i Src2 &lt;/span&gt;= _mm_loadu_si128((__m128i *)(LinePS + &lt;span&gt;16&lt;/span&gt;&lt;span&gt;));
            __m128i Src3 &lt;/span&gt;= _mm_loadu_si128((__m128i *)(LinePS + &lt;span&gt;32&lt;/span&gt;&lt;span&gt;));

            __m128i BGL &lt;/span&gt;= _mm_shuffle_epi8(Src1, _mm_setr_epi8(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;12&lt;/span&gt;, &lt;span&gt;13&lt;/span&gt;, &lt;span&gt;15&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
            BGL &lt;/span&gt;= _mm_or_si128(BGL, _mm_shuffle_epi8(Src2, _mm_setr_epi8(-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;&lt;span&gt;)));

            __m128i BGH &lt;/span&gt;= _mm_shuffle_epi8(Src2, _mm_setr_epi8(&lt;span&gt;8&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;, &lt;span&gt;12&lt;/span&gt;, &lt;span&gt;14&lt;/span&gt;, &lt;span&gt;15&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
            BGH &lt;/span&gt;= _mm_or_si128(BGH, _mm_shuffle_epi8(Src3, _mm_setr_epi8(-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;, &lt;span&gt;13&lt;/span&gt;, &lt;span&gt;14&lt;/span&gt;&lt;span&gt;)));

            __m128i RCL &lt;/span&gt;= _mm_shuffle_epi8(Src1, _mm_setr_epi8(&lt;span&gt;2&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;8&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;11&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;14&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
            RCL &lt;/span&gt;= _mm_or_si128(RCL, _mm_shuffle_epi8(Src2, _mm_setr_epi8(-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;7&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)));

            __m128i RCH &lt;/span&gt;= _mm_shuffle_epi8(Src2, _mm_setr_epi8(&lt;span&gt;10&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;13&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;));
            RCH &lt;/span&gt;= _mm_or_si128(RCH, _mm_shuffle_epi8(Src3, _mm_setr_epi8(-&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;6&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;9&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;12&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;15&lt;/span&gt;, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)));

            __m128i BGLL &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi8(BGL, Zero);
            __m128i    BGLH &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi8(BGL, Zero);
            __m128i    RCLL &lt;/span&gt;= _mm_or_si128(_mm_unpacklo_epi8(RCL, Zero), Half);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    HalfV是大于255的，只能在此处进行合并&lt;/span&gt;
            __m128i    RCLH =&lt;span&gt; _mm_or_si128(_mm_unpackhi_epi8(RCL, Zero), Half);
            __m128i BGHL &lt;/span&gt;=&lt;span&gt; _mm_unpacklo_epi8(BGH, Zero);
            __m128i    BGHH &lt;/span&gt;=&lt;span&gt; _mm_unpackhi_epi8(BGH, Zero);
            __m128i    RCHL &lt;/span&gt;=&lt;span&gt; _mm_or_si128(_mm_unpacklo_epi8(RCH, Zero), Half);
            __m128i    RCHH &lt;/span&gt;=&lt;span&gt; _mm_or_si128(_mm_unpackhi_epi8(RCH, Zero), Half);
            
            __m128i Y_LL &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGLL, Weight_YBG), _mm_madd_epi16(RCLL, Weight_YRC)), Shift);
            __m128i Y_LH &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGLH, Weight_YBG), _mm_madd_epi16(RCLH, Weight_YRC)), Shift);
            __m128i Y_HL &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGHL, Weight_YBG), _mm_madd_epi16(RCHL, Weight_YRC)), Shift);
            __m128i Y_HH &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGHH, Weight_YBG), _mm_madd_epi16(RCHH, Weight_YRC)), Shift);
            _mm_storeu_si128((__m128i&lt;/span&gt;*)(LinePY +&lt;span&gt; XX), _mm_packus_epi16(_mm_packus_epi32(Y_LL, Y_LH), _mm_packus_epi32(Y_HL, Y_HH)));&lt;/span&gt;
&lt;span&gt;
            __m128i U_LL &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGLL, Weight_UBG), _mm_madd_epi16(RCLL, Weight_URC)), Shift);
            __m128i U_LH &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGLH, Weight_UBG), _mm_madd_epi16(RCLH, Weight_URC)), Shift);
            __m128i U_HL &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGHL, Weight_UBG), _mm_madd_epi16(RCHL, Weight_URC)), Shift);
            __m128i U_HH &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGHH, Weight_UBG), _mm_madd_epi16(RCHH, Weight_URC)), Shift);
            _mm_storeu_si128((__m128i&lt;/span&gt;*)(LinePU +&lt;span&gt; XX), _mm_packus_epi16(_mm_packus_epi32(U_LL, U_LH), _mm_packus_epi32(U_HL, U_HH)));&lt;/span&gt;
&lt;span&gt;
            __m128i V_LL &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGLL, Weight_VBG), _mm_madd_epi16(RCLL, Weight_VRC)), Shift);
            __m128i V_LH &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGLH, Weight_VBG), _mm_madd_epi16(RCLH, Weight_VRC)), Shift);
            __m128i V_HL &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGHL, Weight_VBG), _mm_madd_epi16(RCHL, Weight_VRC)), Shift);
            __m128i V_HH &lt;/span&gt;=&lt;span&gt; _mm_srai_epi32(_mm_add_epi32(_mm_madd_epi16(BGHH, Weight_VBG), _mm_madd_epi16(RCHH, Weight_VRC)), Shift);
            _mm_storeu_si128((__m128i&lt;/span&gt;*)(LinePV +&lt;span&gt; XX), _mm_packus_epi16(_mm_packus_epi32(V_LL, V_LH), _mm_packus_epi32(V_HL, V_HH)));

        }
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; XX = Block * BlockSize; XX &amp;lt; Width; XX++, LinePS += &lt;span&gt;3&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    每行剩余的像素按照正常的方式处理&lt;/span&gt;
&lt;span&gt;        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Blue = LinePS[&lt;span&gt;0&lt;/span&gt;], Green = LinePS[&lt;span&gt;1&lt;/span&gt;], Red = LinePS[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
            LinePY[XX] &lt;/span&gt;= (Y_B_WT * Blue + Y_G_WT * Green + Y_R_WT * Red + Y_C_WT * HalfV) &amp;gt;&amp;gt;&lt;span&gt; Shift;
            LinePU[XX] &lt;/span&gt;= (U_B_WT * Blue + U_G_WT * Green + U_R_WT * Red + U_C_WT * HalfV) &amp;gt;&amp;gt;&lt;span&gt; Shift;
            LinePV[XX] &lt;/span&gt;= (V_B_WT * Blue + V_G_WT * Green + V_R_WT * Red + V_C_WT * HalfV) &amp;gt;&amp;gt;&lt;span&gt; Shift;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;速度如何呢，结果是2.2ms，相比纯C语言约有4.5倍的提升&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　接下来我们简单的谈下YUV到RGB空间的优化，普通的C语言如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; YUVToRGB(unsigned &lt;span&gt;char&lt;/span&gt; *Y, unsigned &lt;span&gt;char&lt;/span&gt; *U, unsigned &lt;span&gt;char&lt;/span&gt; *V, unsigned &lt;span&gt;char&lt;/span&gt; *RGB, &lt;span&gt;int&lt;/span&gt; Width, &lt;span&gt;int&lt;/span&gt; Height, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Stride)
{
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Shift = &lt;span&gt;15&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; HalfV = &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (Shift - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; B_Y_WT = &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift, B_U_WT = &lt;span&gt;2.03211f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), B_V_WT = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; G_Y_WT = &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift, G_U_WT = -&lt;span&gt;0.39465f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift), G_V_WT = -&lt;span&gt;0.58060f&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; Shift);
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; R_Y_WT = &lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt; Shift, R_U_WT = &lt;span&gt;0&lt;/span&gt;, R_V_WT = &lt;span&gt;1.13983&lt;/span&gt; * (&lt;span&gt;1&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; Shift);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; YY = &lt;span&gt;0&lt;/span&gt;; YY &amp;lt; Height; YY++&lt;span&gt;)
    {
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePD = RGB + YY *&lt;span&gt; Stride;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePY = Y + YY *&lt;span&gt; Width;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePU = U + YY *&lt;span&gt; Width;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; *LinePV = V + YY *&lt;span&gt; Width;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; XX = &lt;span&gt;0&lt;/span&gt;; XX &amp;lt; Width; XX++, LinePD += &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)    
        {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; YV = LinePY[XX], UV = LinePU[XX] - &lt;span&gt;128&lt;/span&gt;, VV = LinePV[XX] - &lt;span&gt;128&lt;/span&gt;&lt;span&gt;;
            LinePD[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = ClampToByte(YV + ((B_U_WT * UV + HalfV) &amp;gt;&amp;gt;&lt;span&gt; Shift));
            LinePD[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = ClampToByte(YV + ((G_U_WT * UV + G_V_WT * VV + HalfV) &amp;gt;&amp;gt;&lt;span&gt; Shift));
            LinePD[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] = ClampToByte(YV + ((R_V_WT * VV + HalfV) &amp;gt;&amp;gt;&lt;span&gt; Shift));
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　&lt;/span&gt;&lt;span&gt;　虽然内部的加减乘除运算减少了，但是由于需要进行范围的Clamp，因此纯C版本的实际耗时要比RGB转到YUV多，大约在11.5ms左右。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　同样的道理，我们还准备使用_mm_madd_epi16来优化，但是这里的情况就稍微复杂了一点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第一，上面的C代码为了速度考虑，对YV分量没有乘以系数，因为他乘以系数和后面的移位抵消了，但是我们还是考虑把他们展开，以LinePD[0]为例：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　LinePD[0] = ClampToByte(YV + ((B_U_WT * UV + HalfV) &amp;gt;&amp;gt; Shift));&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;　　展开：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　 LinePD[0] = ClampToByte(YV * (1 &amp;lt;&amp;lt; Shift) + B_U_WT * UV + (1 &amp;lt;&amp;lt; (Shift - 1))) &amp;gt;&amp;gt; Shift))&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　　　　 = ClampToByte((YV + 0.5) * (1 &amp;lt;&amp;lt; Shift) + B_U_WT * UV) &amp;gt;&amp;gt; Shift))&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　　　　　　　　 = ClampToByte((YV * 2 + 1) * ((1 &amp;lt;&amp;lt; Shift) &amp;gt;&amp;gt; 1) + B_U_WT * UV) &amp;gt;&amp;gt; Shift))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;　　为什么这样做呢，其目的就是想只用一次_mm_madd_epi16就可以达到结果，此时相当于我们把B_Y_WT = 1 &amp;lt;&amp;lt; Shift改为了B_Y_WT = (1 &amp;lt;&amp;lt; Shift) &amp;gt;&amp;gt; 1，同时像素值进行了乘2和加1，同样的道理LinePD[1]也可以进行同样的处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　LinePD[1]展开后你们觉得还要不要说，是RGB到YUV里是相同的道理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　至于ClampToByte，SSE自带了抗饱和处理，packs或者packus直接实现了这个功能，这也是个额外提速的地方。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　但是注意，由于YUV到RGB的转换系数里有个数据2.03211f ，大于2了，因此考虑_mm_madd_epi16的应用范围这里的Shift最大也只能取为13了，但是似乎也足够了。编码实测SSE优化后的代码速度也在2.2ms左右，&lt;span&gt;提速比达到了5.2倍&lt;/span&gt;，没有比RGB到SSE快，是因为中间增加了一些加法计算。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这样计算下来，两个颜色空间相互转换的时间针对1080P的图，大约需要4.4ms，通常情况下这种转换是为了让算法只在Y通道做处理了，处理完后新的Y通道值和原有图的UV通道组合起来，在转换回RGB图像，这样就把本来需要在RGB三通道都处理的算法简化到一个通道处理了，在对Y通道做的变化不太大的时候，这种处理方式的处理结果和直接在RGB空间做处理时效果差不多，但是如果不考虑空间转换的耗时，那么速度确能提高三倍，这里的空间转化前后耗时4.4ms，对整体帧率的影响就非常小了，比图我是用的基于均方差的磨皮就可以采用这种方式优化从而达到实时的效果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在如上的实际应用中，考虑到内存占用，我们也没有必要把UV通道的数据计算出来，而只计算Y通道的数据，这样把上述计算Y通道的代码单独提取出来，然后再写个void ModifyYComponent(unsigned char *Src, unsigned char *NewY, unsigned char *Dest, int Width, int Height, int Stride)这样的函数把Y通道替换掉，这样一个连续的写法其中的-128和+128这项又可以免去处理，当然具体怎么写内部还是有很多学问值得研究的，只是感觉上没有太多人去使用SSE了，这里就不浪费自己的宝贵时间了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　至于XYZ和RGB空间的互换，由于他们的3个系数都没有为0的，只要注意相关shift值得取值合理，优化方式都例同RGB到XYZ的过程，这里不予以赘述。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　  其实还有很多细节的东西再最初写的时候也经过了各种尝试，只有通过自己编写才能体会中这中间的快乐和痛苦，看别人的代码你看到的只是最后的成品。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　回顾下今年一年的文章，基本上就是在学习SIMD优化，确实SIMD的优化确实在某些场合有着很大的提速价值，在手机端也有NEON指令集，基本上和SSE2都有对应的关系，不过我一心只关注PC的优化，这个市场现在是越来越小了，虽然在航空、医疗等工业场景还是有一定的应用场景。手机编程太痛苦了，都一个老人家了，懒得再去折腾了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　快过年了，考虑下2018年，作为一个编程自由人，我初步考虑下2018可能研究下16位图像的增强、HDR技术等等，至于深度学习，还是算了吧，知道有那么个东西就OK了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　提前祝大家2018年新年快乐。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　本文相关代码下载：&lt;a href=&quot;https://files.cnblogs.com/files/Imageshop/YUV_RGB.rar&quot; target=&quot;_blank&quot;&gt;https://files.cnblogs.com/files/Imageshop/YUV_RGB.rar&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　基于本文的优化应用于磨皮的效果见：彩色图工程：&lt;a href=&quot;https://files.cnblogs.com/files/Imageshop/SSE_Optimization_Demo.rar&quot; target=&quot;_blank&quot;&gt;https://files.cnblogs.com/files/Imageshop/SSE_Optimization_Demo.rar&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/349293/201802/349293-20180202220225953-63381631.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　到年底了，没钱回家过年，望各位路过的大神施舍点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;img src=&quot;https://images2017.cnblogs.com/blog/349293/201802/349293-20180202220542203-2060276184.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 14:08:00 +0000</pubDate>
<dc:creator>Imageshop</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Imageshop/p/8405517.html</dc:identifier>
</item>
<item>
<title>【概率论与数理统计】小结9 - 参数估计概述 - 昕-2008</title>
<link>http://www.cnblogs.com/Belter/p/8337992.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Belter/p/8337992.html</guid>
<description>&lt;p&gt;&lt;span&gt;注&lt;/span&gt;：在统计学的应用中，参数估计和假设检验是最重要的两个方面。参数估计是利用样本的信息，对总体的未知参数做估计。是典型的“以偏概全”。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;0. 参数及参数的估计&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;是总体分布中的参数，反映的是总体某方面特征的量。例如：合格率，均值，方差，中位数等。&lt;strong&gt;参数估计&lt;/strong&gt;问题是利用从总体抽样得到的信息来估计总体的某些参数或者参数的某些函数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题的一般提法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设有一个统计总体，总体的分布函数为$F(x, \theta)$，其中$\theta$为未知参数。现从该总体取样本$X_1, X_2, ..., X_n$，要依据样本对参数$\theta$作出估计，或估计$\theta$的某个已知函数$g(\theta)$。这类问题称为参数估计。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参数估计分类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;点估计，其中点估计又可以分为矩估计和最大似然估计；&lt;/li&gt;
&lt;li&gt;区间估计&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如，估计降雨量：预计今年的降雨量为550mm，这是点估计；预计今年的降雨量为500 - 600mm，这是区间估计。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;1. 点估计的评价&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;由于存在不同的方法对总体中的未知参数进行估计，利用这些不同的方法得到的估计值也不同。因此就涉及到如何评价不同估计量的好坏的问题。&lt;/p&gt;
&lt;p&gt;常用的评价准则有以下四条：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;无偏性准则&lt;/li&gt;
&lt;li&gt;有效性准则&lt;/li&gt;
&lt;li&gt;均方误差准则&lt;/li&gt;
&lt;li&gt;相合性准则&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1.1 无偏性准则&lt;/h4&gt;
&lt;p&gt;无偏性是通过比较参数和参数估计量的期望来判断的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;若参数$\theta$的估计值$\hat{ \theta } = \hat{ \theta} (X_1, X_2, ..., X_n)$，满足&lt;/p&gt;
&lt;p&gt;$$E(\hat{ \theta }) = \theta, $$&lt;/p&gt;
&lt;p&gt;则称$\hat{ \theta }$是$\theta$的一个无偏估计量。&lt;/p&gt;
&lt;p&gt;若$E(\hat{ \theta }) \neq \theta$，那么$|E(\hat{ \theta }) - \theta|$称为估计量$\hat{ \theta }$的偏差，若$\displaystyle \lim_{ n \to \infty } E(\hat{ \theta }) = \theta$，则称$\hat{ \theta }$是$\theta$的渐进无偏估计量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无偏性的统计意义：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无偏性的统计意义是指在大量重复试验下，由$\hat{ \theta }(X_1, X_2, ..., X_n)$给出的估计的平均值恰好是$\theta$，从而无偏性保证了$\hat{ \theta }$没有系统误差。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1035701/201801/1035701-20180123210831162-323068325.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图1，无偏性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例如，工厂长期为商家提供某种商品，假设生产过程相对稳定，产品合格率为$\theta$，虽然一批货的合格率可能会高于0,，或低于0，但无偏性能够保证在较长一段时间内合格率趋近于$\theta$，所以双方互不吃亏。但作为顾客购买商品，只有两种可能，即买到的是合格产品或不合格产品，此时无偏性没有意义。&lt;/p&gt;

&lt;h4&gt;1.2 有效性&lt;/h4&gt;
&lt;p&gt;如果两种方法得到的结果都是无偏估计，那么这两种方法怎么区分好坏呢？这时候就可以用到有效性了。有效性是根据方差来判断估计值的好坏，方差较小的无偏估计量是一种更有效的估计量。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1035701/201801/1035701-20180125205922787-810594120.jpg&quot; alt=&quot;&quot; width=&quot;578&quot; height=&quot;341&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图2，有效性&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;1.3 均方误差&lt;/h4&gt;
&lt;p&gt;在实际应用中，均方误差准则比无偏性准则更重要！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;设$X_1, X_2, ..., X_n$是从带参数$\theta$的总体中抽出的样本，要估计$\theta$. 若采用$\hat{\theta}$作为参数$\theta$的点估计，则其误差为$\hat{\theta} - \theta$. 这个误差随样本$X_1, X_2, ..., X_n$的具体取值而定，也是随机的，因而其本身无法取为优良性指标. 我们取它的平方以消除符号，然后取均值，可得估计量$\hat{\theta}$的均方误差（误差平方的平均），$$E(\hat{\theta} - \theta)^2, $$记为$Mse(\hat{\theta})$. 若$\hat{\theta}$是$\theta$的无偏估计，则有$Mse(\hat{\theta}) = D(\hat{\theta})$. &lt;/p&gt;
&lt;p&gt;均方误差作为$\hat{\theta}$误差大小从整体角度的一个衡量，这个量越小，就表示$\hat{\theta}$的误差平均来说比较小，因而也就越优. 由定义可以看出来，均方误差小并不能保证$\hat{\theta}$在每次使用时一定给出小的误差，它有时也可以有较大的误差，但这种情况出现的机会比较少.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个例子:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用100个学生的平均成绩作为全校学生平均成绩的估计，比起用抽出的第一个学生的成绩去估计，哪种方法更好？设总体服从正态分布，这两个估计分别是$\bar{X} = (X_1 + ... + X_100)/100$和$X_1$，如果我们分别计算这两个估计量的均方误差，可得&lt;/p&gt;
&lt;p&gt;$$E(\bar{X} - \mu)^2 = \sigma^2/100, E(X_1 - \mu)^2 = \sigma^2$$&lt;/p&gt;
&lt;p&gt;故$X_1$的均方误差是$\bar{X}$的100倍（如果多次随机取样每次取100个学生，那么$X_1$可能是任意一位学生相当于随机变量$X$；$\bar{X}$也可能是任意100位同学，相当于$\bar{X}$。比较可以发现，此时求$Mse(\bar{X})$以及$Mse(X_1)$的公式其实就是求$X$和$\bar{X}$的方差的定义）。&lt;/p&gt;

&lt;h4&gt;1.4 相合性&lt;/h4&gt;
&lt;p&gt;相合性准则是根据“依概率收敛”的形式来定义的。这个形式与大数定律的形式相同，因此也可以用“相合性”从估计的观点来对大数定律作出解释。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;设$\hat{\theta}(X_1, ..., X_n)$为参数$\theta$的估计量，若对于任意$\theta$，当$n \to +\infty$时，&lt;/p&gt;
&lt;p&gt;$\hat{\theta}_n \to \theta \ with \ probability \ p$，即$\forall \varepsilon \gt 0$, 有$\displaystyle \lim_{ n \to \infty } P\{|\hat{\theta}_n - \theta| \geq \varepsilon\} = 0 \quad \ldots 1.4-1$&lt;/p&gt;
&lt;p&gt;成立. 则称$\hat{\theta}_n$为$\theta$的相合估计量或一致估计量。&lt;/p&gt;
&lt;p&gt;对于样本均值来说，大数定律指出当样本量足够大时，样本均值依概率趋近于总体均值，就相当于这里的估计量$\hat{\theta}$依概率趋近于带估计参数$\theta$。也就是说，概率$........$当样本大小为n时，样本均值$\bar{X}_n$这个估计量与真值$\theta$的偏离达到$e$这么大或更大的可能性。式子1.4-1表明：随着n的增加，这种可能性越来越小，以致趋于0.&lt;/p&gt;

&lt;h4&gt;1.5 相合性与渐进无偏性有什么区别？&lt;/h4&gt;
&lt;p&gt;这两个定义看起来差不多，很容易混淆。从形式上来看，渐进无偏性要求的是随着样本量的增加，&lt;strong&gt;估计量的期望&lt;/strong&gt;趋近于被估计量；而相合性要求的是&lt;strong&gt;估计量本身&lt;/strong&gt;趋近于被估计量。&lt;/p&gt;
&lt;p&gt;如果估计量是收敛的，那么这两个定义几乎是等同的。但是如果估计量是不收敛的，例如始终是$-1, 1$无限循环的数列，被估计量的值恰好为0，那么这时候满足了渐进无偏性的条件，但是并不满足相合性的条件。因此可以说相合性比渐进无偏性的条件更加严格。满足了相合性就有极大的可能（因为相合性是依概率收敛，因此也不能说绝对满足）是满足渐进无偏性的，但是反过来却不一定。&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2. 再谈统计量与枢轴量&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;概括的说，统计量本身完全是样本的函数，自身不包含任何未知参数（样本一旦确定，统计量的值也就定下来了），但是其分布却往往包含未知参数；枢轴量恰恰相反，枢轴量本身就包含总体中的未知参数，但是其分布的形式一般是确定的，不包含未知参数。&lt;/p&gt;

&lt;h4&gt;2.1 统计量&lt;/h4&gt;
&lt;p&gt;前面的小结中已经多次提到了统计量：&lt;a href=&quot;http://www.cnblogs.com/Belter/p/8029712.html&quot; target=&quot;_blank&quot;&gt;小结7&lt;/a&gt;中对统计量做了基本说明，并且列出了常用的统计量，这些统计量可以用来对总体中的未知参数进行点估计（例如用样本均值估计总体均值）；&lt;a href=&quot;http://www.cnblogs.com/Belter/p/8280492.html&quot; target=&quot;_blank&quot;&gt;小结8&lt;/a&gt;中提到的三大抽样分布都是统计量的分布，这些统计量都是相互独立且服从标准正态分布的随机变量的函数（例如n个上述随机变量的平方和服从自由度为n的卡方分布）。&lt;/p&gt;
&lt;p&gt;由上面的内容，可以得到统计量的一些特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;统计量可以用于对总体中的未知参数进行点估计；&lt;/li&gt;
&lt;li&gt;有些统计量的分布是明确的，例如“三大统计分布”所代表的统计量；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; “三大抽样分布”都是统计量的分布，这些统计量的分布形式是明确的（有具体的数学公式，不包含未知参数），这也是为什么这三类分布在统计学中如此重要的原因之一。因为事实上大部分的统计量要么很难确定其分布，要么含有未知参数。&lt;/p&gt;
&lt;p&gt;除此之外，统计量还有以下特点（参考wiki）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可观察性：事实上也就是说统计量不含有未知参数，一旦观察的样本确定了，统计量的值也就确定了（例如样本均值、样本方差、样本矩等）；&lt;/li&gt;
&lt;li&gt;便捷性：也就是具有某种概括性，只用一个量就描述了大量样本的某些重要特性（例如样本均值）；&lt;/li&gt;
&lt;li&gt;统计特性：完整性、一致性等；&lt;/li&gt;
&lt;li&gt;分布已知且用于假设检验的统计量（例如三大分布所表示的统计量）也被称为&lt;strong&gt;检验统计量&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2.2 统计量 vs 总体参数&lt;/h4&gt;
&lt;p&gt;如果一个总体中的参数未知，例如全国人口的平均身高$\mu$，一般受限于时间或是人力物力我们不可能测量整个总体来确定这个参数的准确值。通常的做法是随机抽取一定量的样本（例如每个省抽取总人口的1%），然后求这些样本的平均升高（一个统计量），最后利用该统计量来估计总体中的未知参数。下面是wiki中的一个例子：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;一个统计参数用于计算北美所有 25 岁的男性人口的平均身高。作为采样，我们随机地选择了 100 名符合条件的人测量了身高；这 100 人的平均身高是比较容易被统计出来的，而全部符合条件的人的平均身高是很难统计的，除非把每个人都拿来测量一遍身高。当然，如果普查了所有人，那么计算得到的数据则是统计参数（总体参数），而非统计量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;2.3 枢轴量&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;设总体$X$有概率密度（或分布律）$f(x; \theta)$，其中$\theta$是待估的未知参数。设$X_1, ..., X_n$是一个样本，记：&lt;/p&gt;
&lt;p&gt;$$G = G(X_1, ..., X_n; \theta)$$&lt;/p&gt;
&lt;p&gt;为样本和待估参数$\theta$的函数，如果$G$的分布已知，不依赖与任何参数，就称$G$为枢轴量。&lt;/p&gt;
&lt;p&gt;由上述定义可以看出枢轴量的几个特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;与某个待估参数有关（事实上枢轴量法主要被用于未知参数的区间估计）；&lt;/li&gt;
&lt;li&gt;本身含有未知参数（待估参数），因此不具有“可观察性”，也就是说即使选定了样本也无法计算出确定的值；&lt;/li&gt;
&lt;li&gt;其分布是明确的（有具体的数学公式，不包含未知参数）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一个比较常见的例子：正态分布转换成标准正态分布时，随机变量中还是包含未知参数，但是其分布中却不包含任何未知参数。因此标准化之后的随机变量是一个枢轴量。&lt;/p&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;h4&gt;2.4 统计量 vs 枢轴量&lt;/h4&gt;
&lt;p&gt;再次比较一下这两个量的异同：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;枢轴量和统计量都是样本的函数，但是枢轴量中还包含未知参数（待估计参数）；&lt;/li&gt;
&lt;li&gt;枢轴量和统计量的分布都是某种抽样分布，与样本本身所属的总体分布不同；&lt;/li&gt;
&lt;li&gt;枢轴量的分布不依赖于任何未知参数，统计量的分布常依赖于未知参数；&lt;/li&gt;
&lt;li&gt;如果将枢轴量中的未知参数用某个已知的估计量替代，那么枢轴量就变成统计量了；&lt;/li&gt;
&lt;li&gt;统计量常用于点估计和假设检验；&lt;/li&gt;
&lt;li&gt;枢轴量常用于区间估计。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总体$X \sim N(\mu, \sigma^2)$，$\mu, \sigma$是未知参数. 要估计参数$\mu$. 设$X_1, ..., X_n$是一样本，请问下面三个量，&lt;/p&gt;
&lt;p&gt;$$\bar{X}, \frac{\bar{X} - \mu}{\sigma/\sqrt{ n } }, \frac{\bar{X} - \mu}{S/\sqrt{ n } }$$&lt;/p&gt;
&lt;p&gt;哪些是统计量？哪些是枢轴量？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1) 只有$\bar{X}$是统计量，另两个含有未知参数，所以不是统计量；&lt;/p&gt;
&lt;p&gt;(2) $\bar{X} \sim N(\mu, \sigma^2/n)$，分布含有未知参数；&lt;/p&gt;
&lt;p&gt;(3) 第二项中除了$\mu$之外，还含有其他未知参数$\sigma$（不是枢轴量）；&lt;/p&gt;
&lt;p&gt;(4) 第三项只是$\mu$和样本的函数，服从$t(n - 1)$分布（是枢轴量）。&lt;/p&gt;
&lt;p&gt;从这个例子可以看出来，我们之前熟知的样本均值$\bar{X}$是一个统计量，但是它的分布是不明确的（含有未知参数）；第三项是一个枢轴量，本身含有未知参数，但是分布是明确的。&lt;/p&gt;


&lt;p&gt;欢迎阅读“&lt;a href=&quot;http://www.cnblogs.com/Belter/p/8330773.html&quot; target=&quot;_blank&quot;&gt;概率论与数理统计及Python实现&lt;/a&gt;”系列文章&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;Reference&lt;/span&gt;&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;https://zh.wikipedia.org/wiki/%E7%BB%9F%E8%AE%A1%E9%87%8F&lt;/p&gt;
&lt;p&gt;http://blog.sciencenet.cn/blog-659252-924520.html&lt;/p&gt;
&lt;p&gt;中国大学MOOC：浙江大学&amp;amp;哈工大，概率论与数理统计&lt;/p&gt;

</description>
<pubDate>Fri, 02 Feb 2018 14:05:00 +0000</pubDate>
<dc:creator>昕-2008</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Belter/p/8337992.html</dc:identifier>
</item>
<item>
<title>Asp.net core 2.0.1 Razor 的使用学习笔记（四） - 沉默种子</title>
<link>http://www.cnblogs.com/chonghanyu/p/8401741.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chonghanyu/p/8401741.html</guid>
<description>&lt;p&gt;ASP.net core 2.0.1 中 asp.net identity 2.0.1 的基本使用（三）—用户注册&lt;/p&gt;
&lt;p&gt;一、修改用户注册&lt;/p&gt;
&lt;p&gt;1、打开Pages文件夹》Account》Register.cshtml，然后双击Register.cshtml.cs&lt;/p&gt;
&lt;p&gt;找到public class InputModel，在这里个类里添加UserName属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[Required]
[StringLength(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;, ErrorMessage = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0} 必须至少包含 {2} 个字符,最多20个字符。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, MinimumLength = &lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
[Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户账号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
[DataType(DataType.Text)]
[RegularExpression(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^[a-zA-Z0-9_]{6,20}$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ErrorMessage = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名由字母或数字组成。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里说明下， Razor页面模式跟mvc在此出现了严重的不同。 但就代码说没有什么不同几乎完全一样，但是存放的位置却有了根本的区别。个人研究分析的结果是：Razor页面模式其实是把mvc中的控制器化整为零了，即原来控制器中的操作代码被分布放到了各个页面的.cshtml.cs文件中了。这样一来由原来mvc中文件按类型分类变成了按功能分类，这样的好处就是每个页面形成了模块化，这个页面涉及的数据都在这里，便于维护，不用控制器、模型、视图来回切换了。&lt;/p&gt;
&lt;p&gt;2、修改public async Task&amp;lt;IActionResult&amp;gt; OnPostAsync(string returnUrl = null)中的var user = new ApplicationUser { UserName = Input.Email, Email = Input.Email };&lt;/p&gt;
&lt;p&gt;改为var user = new ApplicationUser { UserName = Input.UserName, Email = Input.Email };&lt;/p&gt;
&lt;p&gt;因为每个页面只有一个操作了，所以也就只有这一个OnPostAsync方法了。&lt;/p&gt;
&lt;p&gt;3、打开Pages文件夹》Account》Register.cshtml，在register_Page文件中(其实就是下面的那个文件)约第15行的位置，添加“用户账号”代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;label asp-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Input.UserName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/label&amp;gt;
                &amp;lt;input asp-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Input.UserName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
                &amp;lt;span asp-validation-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Input.UserName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text-danger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二、修改login。因为改为了用户名注册，如果还用email登陆的话，一定出现错误。&lt;/p&gt;
&lt;p&gt;1、打开Pages文件夹》Account》login.cshtml，然后双击Login.cshtml.cs&lt;/p&gt;
&lt;p&gt;找到public class InputModel，在这里个类里添加UserName属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;            [Required]
            [StringLength(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;, ErrorMessage = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{0} 必须至少包含 {2} 个字符,最多20个字符。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, MinimumLength = &lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
            [Display(Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户账号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
            [DataType(DataType.Text)]
            [RegularExpression(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;^[a-zA-Z0-9_]{6,20}$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ErrorMessage = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名由字母或数字组成。&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时要把email属性项去掉或者注释掉，否则你登陆不上去且还不给提示。&lt;/p&gt;
&lt;p&gt;2、修改public async Task&amp;lt;IActionResult&amp;gt; OnPostAsync(string returnUrl = null)中的var result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: true);&lt;/p&gt;
&lt;p&gt;改为var result = await _signInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: true);&lt;/p&gt;
&lt;p&gt;3、打开Pages文件夹》Account》Login.cshtml，在Login_Page文件中(其实就是下面的那个文件)约第16行的位置，修改原来为“Input.Email”的地方改为“Input.UserName”。&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 14:01:00 +0000</pubDate>
<dc:creator>沉默种子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chonghanyu/p/8401741.html</dc:identifier>
</item>
<item>
<title>JavaScript动画：offset和匀速动画详解(含轮播图的实现) - 生命壹号</title>
<link>http://www.cnblogs.com/smyhvae/p/8407109.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smyhvae/p/8407109.html</guid>
<description>&lt;blockquote readability=&quot;5.375&quot;&gt;
&lt;p&gt;本文最初发表于&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/8407109.html&quot;&gt;博客园&lt;/a&gt;，并在&lt;a href=&quot;https://github.com/smyhvae/Web&quot;&gt;GitHub&lt;/a&gt;上持续更新&lt;strong&gt;前端的系列文章&lt;/strong&gt;。欢迎在GitHub上关注我，一起入门和进阶前端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;offset简介&quot;&gt;offset简介&lt;/h2&gt;
&lt;p&gt;我们知道，三大家族包括：offset/scroll/client。今天来讲一下offset，以及与其相关的匀速动画。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;offset的中文是：偏移，补偿，位移。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;js中有一套方便的&lt;strong&gt;获取元素尺寸&lt;/strong&gt;的办法就是offset家族。offset家族包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;offsetWidth&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;offsetHight&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;offsetLeft&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;offsetTop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;offsetParent&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面分别介绍。&lt;/p&gt;
&lt;h3 id=&quot;offsetwidth-和-offsethight&quot;&gt;1、offsetWidth 和 offsetHight&lt;/h3&gt;
&lt;p&gt;用于检测盒子自身的&lt;strong&gt;宽高+padding+border&lt;/strong&gt;，不包括margin。如下：&lt;/p&gt;
&lt;p&gt;这两个属性，他们绑定在了所有的节点元素上。获取之后，只要调用这两个属性，我们就能够获取元素节点的宽和高。&lt;/p&gt;
&lt;p&gt;举例如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; div1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;div1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetHeight&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;co&quot;&gt;//打印结果：140（100+20+20）&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;div1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetHeight&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//打印结果：number&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;offsetleft-和-offsettop&quot;&gt;2、offsetLeft 和 offsetTop&lt;/h3&gt;
&lt;p&gt;返回距离上级盒子（带有定位）左边的位置；如果父级都没有定位，则以body为准。&lt;/p&gt;
&lt;p&gt;offsetLeft： 从父亲的 padding 开始算，父亲的 border 不算。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*position: absolute;*/&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*left: 10px;*/&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*top: 10px;*/&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box2&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;left: 10px&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; box2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;box2&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//offsetTop和offsetLeft&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;box2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//100&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;box2&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//10px&lt;/span&gt;


&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在父盒子有定位的情况下，offsetLeft == style.left(去掉px之后)。注意，后者只识别行内样式。但区别不仅仅于此，后面会讲。&lt;/p&gt;
&lt;h3 id=&quot;offsetparent&quot;&gt;3、offsetParent&lt;/h3&gt;
&lt;p&gt;检测父系盒子中带有定位的&lt;strong&gt;父盒子节点&lt;/strong&gt;。返回结果是该对象的父级（带有定位）。&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果当前元素的父级元素，&lt;strong&gt;没有CSS定位&lt;/strong&gt;（position为absolute、relative、fixed），那么offsetParent的返回结果为&lt;strong&gt;body&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果当前元素的父级元素，&lt;strong&gt;有CSS定位&lt;/strong&gt;（position为absolute、relative、fixed），那么offsetParent的返回结果为&lt;strong&gt;最近的&lt;/strong&gt;那个父级元素。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;position: absolute;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box2&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;position: fixed;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box3&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//offsetParent：复习盒子中带有定位的盒子&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//复习盒子中都没有定位，返回body&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//如果有，谁有返回最近哪个&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; box3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;box3&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;box3&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetParent&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180202_1725.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;offsetleft和style.left区别&quot;&gt;offsetLeft和style.left区别&lt;/h3&gt;
&lt;p&gt;（1）最大区别在于：&lt;/p&gt;
&lt;p&gt;offsetLeft 可以返回没有定位盒子的距离左侧的位置。如果父系盒子中都没有定位，以body为准。&lt;/p&gt;
&lt;p&gt;style.left 只能获取行内式，如果没有，则返回&quot;&quot;（意思是，返回空）;&lt;/p&gt;
&lt;p&gt;（2）offsetTop 返回的是数字，而 style.top 返回的是字符串，而且还带有单位：px。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;
&lt;span class=&quot;va&quot;&gt;div&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;div&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;100px&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）offsetLeft 和 offsetTop &lt;strong&gt;只读&lt;/strong&gt;，而 style.left 和 style.top 可读写（只读是获取值，可写是赋值）&lt;/p&gt;
&lt;p&gt;（4）如果没有给 HTML 元素指定过 top 样式，则style.top 返回的是空字符串。&lt;/p&gt;
&lt;p&gt;总结：我们一般的做法是：&lt;strong&gt;用offsetLeft 和 offsetTop 获取值，用style.left 和 style.top 赋值&lt;/strong&gt;（比较方便）。理由如下：&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;style.left：只能获取行内式，获取的值可能为空，容易出现NaN。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;offsetLeft：获取值特别方便，而且是现成的number，方便计算。它是只读的，不能赋值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;动画的种类&quot;&gt;动画的种类&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;闪现（基本不用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;匀速（本文重点）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓动（后续重点）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;简单举例如下：（每间隔500ms，向右移动盒子100px）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;button&amp;gt;&lt;/span&gt;动画&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;left: 0px&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; btn &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;button&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; div &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//1、闪动&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//    btn.onclick = function () {&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//        div.style.left = &quot;500px&quot;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//    }&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//2、匀速运动&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;btn&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//定时器，每隔一定的时间向右走一些&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;div&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//动画原理： 盒子未来的位置 = 盒子现在的位置 + 步长；&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//用style.left赋值，用offsetLeft获取值。&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;div&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;div&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;px&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//div.style.left = parseInt(div.style.left)+10+&quot;px&quot;;  //NaN不能用&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180202_1840.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;匀速动画的封装每间隔30ms移动盒子10px重要&quot;&gt;匀速动画的封装：每间隔30ms，移动盒子10px【重要】&lt;/h2&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;fl&quot;&gt;.box1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ddd&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        button &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box2&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;195px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.box3&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&amp;gt;&lt;/span&gt;运动到 left = 200px&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;button&amp;gt;&lt;/span&gt;运动到 left = 400px&lt;span class=&quot;kw&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box2&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;box3&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; btnArr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;button&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; box2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;box2&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; box3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementsByClassName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;box3&quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//绑定事件&lt;/span&gt;
    btnArr[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//如果有一天我们要传递另外一个盒子，那么我们的方法就不好用了&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//所以我们要增加第二个参数，被移动的盒子本身。&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(box2&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(box3&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    btnArr[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(box2&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;400&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(box3&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;400&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;//【重要】方法的封装：每间隔30ms，将盒子向右移动10px&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(ele&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; target) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//要用定时器，先清除定时器&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//一个盒子只能有一个定时器，这样的话，不会和其他盒子出现定时器冲突&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//我们可以把定时器本身，当成为盒子的一个属性&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;clearInterval&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//我们要求盒子既能向前又能向后，那么我们的步长就得有正有负&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//目标值如果大于当前值取正，目标值如果小于当前值取负&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; target &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; : &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//speed指的是步长&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//在执行之前就获取当前值和目标值之差&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; target &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; speed &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;px&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//移动的过程中，如果目标值和当前值之差如果小于步长，那么就不能在前进了&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//因为步长有正有负，所有转换成绝对值来比较&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;abs&lt;/span&gt;(val) &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;abs&lt;/span&gt;(speed)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; target &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;px&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;clearInterval&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180202_1910.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上方代码中的方法封装，可以作为一个模板步骤，要记住。其实，这个封装的方法，写成下面这样，会更严谨，更容易理解：（将if语句进行了改进）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;co&quot;&gt;//【重要】方法的封装：每间隔30ms，将盒子向右移动10px&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(ele&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; target) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//要用定时器，先清除定时器&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//一个盒子只能有一个定时器，这样的话，不会和其他盒子出现定时器冲突&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//我们可以把定时器本身，当成为盒子的一个属性&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;clearInterval&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//我们要求盒子既能向前又能向后，那么我们的步长就得有正有负&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//目标值如果大于当前值取正，目标值如果小于当前值取负&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; target &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; : &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//speed指的是步长&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//在执行之前就获取当前值和目标值之差&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; target &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//移动的过程中，如果目标值和当前值之差如果小于步长，那么就不能在前进了&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//因为步长有正有负，所有转换成绝对值来比较&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;abs&lt;/span&gt;(val) &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;abs&lt;/span&gt;(speed)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;//如果val小于步长，则直接到达目的地；否则，每次移动一个步长&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; target &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;px&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;clearInterval&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; speed &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;px&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;代码举例轮播图的实现&quot;&gt;代码举例：轮播图的实现&lt;/h2&gt;
&lt;p&gt;完整版代码如下：（注释已经比较详细）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;!doctype html&amp;gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;无标题文档&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        * &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;list-style:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.all&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;7px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.screen&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;overflow:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.screen&lt;/span&gt; li &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;overflow:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;float:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.screen&lt;/span&gt; ul &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;3000px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.all&lt;/span&gt; ol &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;bottom:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.all&lt;/span&gt; ol li &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;float:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;cursor:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.all&lt;/span&gt; ol li&lt;span class=&quot;fl&quot;&gt;.current&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;#arr&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;#arr&lt;/span&gt; span &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;-20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;cursor:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-weight:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-family:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'黑体'&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;font-size:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;opacity:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;border:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;#arr&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;#right&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//需求：无缝滚动。&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//思路：赋值第一张图片放到ul的最后，然后当图片切换到第五张的时候&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//     直接切换第六章，再次从第一张切换到第二张的时候先瞬间切换到&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//     第一张图片，然后滑动到第二张&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//步骤：&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//1.获取事件源及相关元素。（老三步）&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//2.复制第一张图片所在的li,添加到ul的最后面。&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//3.给ol中添加li，ul中的个数-1个，并点亮第一个按钮。&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//4.鼠标放到ol的li上切换图片&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//5.添加定时器&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//6.左右切换图片（鼠标放上去隐藏，移开显示）&lt;/span&gt;


            &lt;span class=&quot;co&quot;&gt;//1.获取事件源及相关元素。（老三步）&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; all &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;all&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; screen &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;all&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;firstElementChild&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;all&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;firstChild&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; imgWidth &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;screen&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ul &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;screen&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;firstElementChild&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;screen&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;firstChild&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ol &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;screen&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; div &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;screen&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lastElementChild&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;screen&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lastChild&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; spanArr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;div&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//2.复制第一张图片所在的li,添加到ul的最后面。&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ulNewLi &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ul&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;cloneNode&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ul&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(ulNewLi)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//3.给ol中添加li，ul中的个数-1个，并点亮第一个按钮。&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ul&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;children&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; olNewLi &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;li&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;olNewLi&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ol&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(olNewLi)
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; olLiArr &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ol&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            olLiArr[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//4.鼠标放到ol的li上切换图片&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;olLiArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//自定义属性，把索引值绑定到元素的index属性上&lt;/span&gt;
                olLiArr[i].&lt;span class=&quot;at&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                olLiArr[i].&lt;span class=&quot;at&quot;&gt;onmouseover&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//排他思想&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; j &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;olLiArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        olLiArr[j].&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//鼠标放到小的方块上的时候索引值和key以及square同步&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                    key = this.index;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                    square = this.index;&lt;/span&gt;
                    key &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; square &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//移动盒子&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(ul&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; imgWidth)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//5.添加定时器&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; timer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(autoPlay&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//固定向右切换图片&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//两个定时器（一个记录图片，一个记录小方块）&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; key &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; square &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;autoPlay&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//通过控制key的自增来模拟图片的索引值，然后移动ul&lt;/span&gt;
                key&lt;span class=&quot;op&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (key &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;olLiArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//图片已经滑动到最后一张，接下来，跳转到第一张，然后在滑动到第二张&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;ul&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    key &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(ul&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;key &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; imgWidth)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//通过控制square的自增来模拟小方块的索引值，然后点亮盒子&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//排他思想做小方块&lt;/span&gt;
                square&lt;span class=&quot;op&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (square &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;olLiArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//索引值不能大于等于5，如果等于5，立刻变为0；&lt;/span&gt;
                    square &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;olLiArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    olLiArr[i].&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                olLiArr[square].&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//鼠标放上去清除定时器，移开后在开启定时器&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;all&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onmouseover&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;div&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;block&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;clearInterval&lt;/span&gt;(timer)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;all&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onmouseout&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;div&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                timer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(autoPlay&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//6.左右切换图片（鼠标放上去显示，移开隐藏）&lt;/span&gt;
            spanArr[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//通过控制key的自增来模拟图片的索引值，然后移动ul&lt;/span&gt;
                key&lt;span class=&quot;op&quot;&gt;--;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (key &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//先移动到最后一张，然后key的值取之前一张的索引值，然后在向前移动&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;ul&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;imgWidth &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;olLiArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;px&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    key &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;olLiArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(ul&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;key &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; imgWidth)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//通过控制square的自增来模拟小方块的索引值，然后点亮盒子&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//排他思想做小方块&lt;/span&gt;
                square&lt;span class=&quot;op&quot;&gt;--;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (square &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//索引值不能大于等于5，如果等于5，立刻变为0；&lt;/span&gt;
                    square &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;olLiArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;olLiArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    olLiArr[i].&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                olLiArr[square].&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;current&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            spanArr[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//右侧的和定时器一模一样&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;autoPlay&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;


            &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(ele&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; target) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;clearInterval&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; speed &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; target &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; : &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; val &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; target &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; speed &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;px&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;abs&lt;/span&gt;(val) &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;abs&lt;/span&gt;(speed)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; target &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;px&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;at&quot;&gt;clearInterval&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ele&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;timer&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/head&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;all&quot;&lt;/span&gt; id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'all'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;screen&quot;&lt;/span&gt; id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;screen&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;ul id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ul&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/1.jpg&quot;&lt;/span&gt; width&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt; height&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;&amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/2.jpg&quot;&lt;/span&gt; width&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt; height&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;&amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/3.jpg&quot;&lt;/span&gt; width&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt; height&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;&amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/4.jpg&quot;&lt;/span&gt; width&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt; height&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;&amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;images/5.jpg&quot;&lt;/span&gt; width&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;500&quot;&lt;/span&gt; height&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/&amp;gt;&amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;ol&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;        &amp;lt;/ol&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;arr&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;span id&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;span id=&quot;right&quot;&amp;gt;&amp;gt;&amp;lt;/span&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180202_2020.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;温馨提示：动图太大，可以把&lt;a href=&quot;http://img.smyhvae.com/20180202_2020.gif&quot; class=&quot;uri&quot;&gt;http://img.smyhvae.com/20180202_2020.gif&lt;/a&gt;单独在浏览器中打开。&lt;/p&gt;
&lt;p&gt;工程文件：&lt;/p&gt;
&lt;h2 id=&quot;我的公众号&quot;&gt;我的公众号&lt;/h2&gt;
&lt;p&gt;想学习&lt;span&gt;&lt;strong&gt;代码之外的软技能&lt;/strong&gt;&lt;/span&gt;？不妨关注我的微信公众号：&lt;strong&gt;生命团队&lt;/strong&gt;（id：&lt;code&gt;vitateam&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;扫一扫，你将发现另一个全新的世界，而这将是一场美丽的意外：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/2016040102.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 13:10:00 +0000</pubDate>
<dc:creator>生命壹号</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smyhvae/p/8407109.html</dc:identifier>
</item>
<item>
<title>[译] Linux吃掉了我的内存 - thinkam</title>
<link>http://www.cnblogs.com/thinkam/p/8407043.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/thinkam/p/8407043.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1156638/201802/1156638-20180202203623437-1991568203.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;2&quot;&gt;
&lt;p&gt;英文原文: &lt;a href=&quot;https://www.linuxatemyram.com/&quot; class=&quot;uri&quot;&gt;https://www.linuxatemyram.com/&lt;/a&gt;&lt;br/&gt;作者: &lt;a href=&quot;https://github.com/koalaman&quot;&gt;Vidar Holen&lt;/a&gt;&lt;br/&gt;译者: &lt;a href=&quot;https://github.com/codethereforam&quot;&gt;thinkam&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;发生了什么&quot;&gt;发生了什么？&lt;/h2&gt;
&lt;p&gt;Linux正借用你未使用的内存来做磁盘缓存。这使你的计算机看起来可用内存很少，但事实不是这样！一切都很正常！&lt;/p&gt;
&lt;h2 id=&quot;为什么这么做&quot;&gt;为什么这么做？&lt;/h2&gt;
&lt;p&gt;磁盘缓存使你的系统运行更快更流畅！除了使新手感到困惑，这没什么缺点。它从来没有以任何方式从你的应用拿走内存。&lt;/p&gt;
&lt;h2 id=&quot;如果我想运行更多的应用该怎么办&quot;&gt;如果我想运行更多的应用该怎么办？&lt;/h2&gt;
&lt;p&gt;如果你的应用想要获取更多的内存，系统会从磁盘缓存中拿走一块被借用的内存。磁盘缓存会立即还给应用！你的计算机可用内存的并不少！&lt;/p&gt;
&lt;h2 id=&quot;我需要更多的交换分区swap吗&quot;&gt;我需要更多的交换分区(swap)吗？&lt;/h2&gt;
&lt;p&gt;不需要，磁盘缓存仅会借用应用目前不需要的内存。它不会使用交换分区。如果应用需要更多的内存，系统会从磁盘缓存中拿回来。系统不会使用交换分区。&lt;/p&gt;
&lt;h2 id=&quot;我如何让linux停止这样做&quot;&gt;我如何让Linux停止这样做？&lt;/h2&gt;
&lt;p&gt;你不能禁用磁盘缓存。任何人想要禁用磁盘缓存的唯一理由是他认为这从他的应用中拿走了内存，但事实不是这样！磁盘缓存可以让应用加载更快并且运行更加流畅，但它却从来没有拿走内存！因此，没有任何理由去禁用它！&lt;/p&gt;
&lt;h2 id=&quot;如果不是这样为什么top和free命令说我所有的内存已被使用&quot;&gt;如果不是这样，为什么&lt;code&gt;top&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;命令说我所有的内存已被使用？&lt;/h2&gt;
&lt;p&gt;这仅仅是用辞的差异。你和Linux系统一致认为被应用占用的内存称为&lt;code&gt;used&lt;/code&gt;，而没有被任何程序使用的部分称为&lt;code&gt;free&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但是，你认为目前被占用但仍然可以被应用使用的内存称作什么呢？&lt;/p&gt;
&lt;p&gt;你可能认为这部分内存是&lt;code&gt;free&lt;/code&gt;或&lt;code&gt;available&lt;/code&gt;。而Linux系统称它&lt;code&gt;used&lt;/code&gt;或&lt;code&gt;available&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;被应用使用&lt;/td&gt;
&lt;td&gt;&lt;code&gt;used&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;used&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;被占用，但可以使用&lt;/td&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;(或&lt;code&gt;available&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;used&lt;/code&gt;(或&lt;code&gt;available&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;没有用来做任何事&lt;/td&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;free&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;译注：老版&lt;code&gt;free&lt;/code&gt;命令中被占用但可以使用的内存称为&lt;code&gt;used&lt;/code&gt;(&lt;code&gt;used&lt;/code&gt;中的一部分，即&lt;code&gt;buffers&lt;/code&gt;+&lt;code&gt;cached&lt;/code&gt;), 而新版的&lt;code&gt;free&lt;/code&gt;命令中称之为&lt;code&gt;available&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不严格来讲，&lt;code&gt;top&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;命令称这部分内存为&lt;code&gt;buffers&lt;/code&gt;和&lt;code&gt;cached&lt;/code&gt;。因为你和Linux用辞的差异，你可能认为你的计算机可用内存很少，不过事实并非如此。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;译注：这部分内存准确来说是新版本&lt;code&gt;free&lt;/code&gt;命令中的&lt;code&gt;available&lt;/code&gt;或者是新版本&lt;code&gt;top&lt;/code&gt;命令中的&lt;code&gt;avail Mem&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;我怎么看我真正还有多少可用内存&quot;&gt;我怎么看我真正还有多少可用内存？&lt;/h2&gt;
&lt;p&gt;为了弄明白除了交换分区外你的应用可以使用多少内存，执行&lt;code&gt;free -m&lt;/code&gt;命令，然后查看&lt;code&gt;available&lt;/code&gt;那一列:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;free&lt;/span&gt; -m
              &lt;span class=&quot;kw&quot;&gt;total&lt;/span&gt;        used        free      shared  buff/cache   available
&lt;span class=&quot;kw&quot;&gt;Mem&lt;/span&gt;:           1504        1491          13           0         855      792
&lt;span class=&quot;kw&quot;&gt;Swap&lt;/span&gt;:          2047           6        2041&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(2016年之前的Linux安装版本，在&lt;code&gt;-/+ buffers/cache&lt;/code&gt;那排查看&lt;code&gt;free&lt;/code&gt;列)&lt;/p&gt;
&lt;p&gt;这是你以&lt;code&gt;MB&lt;/code&gt;为单位的答案。如果你天真地查看&lt;code&gt;used&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;，你会认为你的内存几乎快占满达到99%，然而实际仅仅只有47%！&lt;/p&gt;
&lt;p&gt;如果想查看更详细、更专业的关于Linux统计&lt;code&gt;available&lt;/code&gt;内存大小的描述，请看&lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773&quot;&gt;the commit that added the field&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;什么时候我该开始担心&quot;&gt;什么时候我该开始担心？&lt;/h2&gt;
&lt;p&gt;一个拥有足够内存的、&lt;strong&gt;运行良好&lt;/strong&gt;的Linux系统在运行一段时间后会表现出以下预期的无害特征：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;free&lt;/code&gt;内存接近于&lt;strong&gt;0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;used&lt;/code&gt;内存接近&lt;strong&gt;总共内存&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;available&lt;/code&gt;内存（或者是&lt;code&gt;free + buffers/cache&lt;/code&gt;）有足够空间（比如说：总内存的20%以上）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap used&lt;/code&gt;没有发生变化&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;真正的内存不够、你也许想调查原因的情形，&lt;strong&gt;警告标志&lt;/strong&gt;如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;available&lt;/code&gt;内存（或者是&lt;code&gt;free + buffers/cache&lt;/code&gt;）接近于&lt;strong&gt;0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap used&lt;/code&gt;在增加或者波动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dmesg | grep oom-killer&lt;/code&gt;命令显示&lt;code&gt;OutOfMemory-killer&lt;/code&gt;程序正在运行&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;我如何验证这些&quot;&gt;我如何验证这些？&lt;/h2&gt;
&lt;p&gt;如果想了解更多细节和做实验测试磁盘缓存的影响，请看&lt;a href=&quot;https://www.linuxatemyram.com/play.html&quot;&gt;这个页面&lt;/a&gt;。我做了少量的工作只是想让你感激磁盘缓存，而不是让你测试你的硬件速度提升了几个数量级。&lt;/p&gt;
</description>
<pubDate>Fri, 02 Feb 2018 12:42:00 +0000</pubDate>
<dc:creator>thinkam</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/thinkam/p/8407043.html</dc:identifier>
</item>
</channel>
</rss>