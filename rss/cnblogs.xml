<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Kotlin实现《第一行代码》案例“酷欧天气” - 路上的脚印</title>
<link>http://www.cnblogs.com/tgyf/p/7611239.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tgyf/p/7611239.html</guid>
<description>
&lt;p&gt;&lt;span&gt;看过《第一行代码》的朋友应该知道“酷欧天气”，作者&lt;a title=&quot;https://github.com/guolindev&quot; href=&quot;https://github.com/guolindev&quot; target=&quot;_blank&quot;&gt;郭神&lt;/a&gt;用整整一章的内容来讲述其从无到有的过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最近正好看完该书的第二版（也有人称“第二行代码”），尝试着将项目中的Java代码用Kotlin实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原项目获取点&lt;a title=&quot;https://github.com/guolindev/coolweather.git&quot; href=&quot;https://github.com/guolindev/coolweather.git&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a title=&quot;http://kotlinlang.org/&quot; href=&quot;http://kotlinlang.org/&quot; target=&quot;_blank&quot;&gt;Kotlin&lt;/a&gt;实现点&lt;a title=&quot;https://github.com/VincentWYJ/coolweather.git&quot; href=&quot;https://github.com/VincentWYJ/coolweather.git&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了将Java转为Kotlin外，界面与资源的定义也略微做了调整，但是功能上没有变化（这部分后续进行完善，书中有提到可以改进的地方）。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 界面调整&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.1&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;将“预告”和“空气质量”两个模块的位置互换，“空气质量”和“温度/天气状态”放在一起感觉会比较直观。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.2&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;将模块布局的背景色调整为主题色，与标题栏背景色保持一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;效果图如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/450484/201709/450484-20170929154306762-1947770645.jpg&quot; alt=&quot;&quot; width=&quot;254&quot; height=&quot;452&quot;/&gt;    &lt;img src=&quot;http://images2017.cnblogs.com/blog/450484/201709/450484-20170929154531075-243998705.jpg&quot; alt=&quot;&quot; width=&quot;254&quot; height=&quot;452&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/450484/201709/450484-20170929154236012-1759997383.jpg&quot; alt=&quot;&quot; width=&quot;258&quot; height=&quot;459&quot;/&gt;    &lt;img src=&quot;http://images2017.cnblogs.com/blog/450484/201709/450484-20170929154313247-1885610065.jpg&quot; alt=&quot;&quot; width=&quot;260&quot; height=&quot;462&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 资源定义&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.1&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;将dimen、color及string由直接使用字面值改为先将资源值定义在相应的文件中，然后在布局文件中用@type/value的形式引用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;将表示左/右方向的xxxLeft、xxxRight改为xxxStart、xxxEnd，适配Android高版本设备左/右方向问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;具体细节可以下载代码进行查看，这样做的目的是加强应用的适配性与可维护性。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. Java-&amp;gt;Kotlin&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Kotlin的基础知识可以阅读官方文档或者我之前的文章进行了解，下面只描述和原项目代码结构上的调整，或者Java转为Kotlin值得注意的地方。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;Android Studio 3.0开始已经集成Kotlin（2.0需要手动安装插件），不过有两种情况：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;a&lt;/strong&gt; 在非Kotlin项目的基础上进行Kotlin编码，得先在Project和Module的build.gradle文件中引入依赖；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;b&lt;/strong&gt; 新建支持Kotlin的项目，那么依赖是默认引入的，直接编码即可；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;将“散落”在多个文件中的常量提取到HttpUtil类中：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;object HttpUtil {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     val Url = &quot;http://guolin.tech/api/weather&quot;
&lt;span&gt;3&lt;/span&gt;     val Key = &quot;key=bc0418b57b2d4918819d3974ac1285d9&quot;
&lt;span&gt;4&lt;/span&gt;     val Bing = &quot;http://guolin.tech/api/bing_pic&quot;
&lt;span&gt;5&lt;/span&gt;     val China = &quot;http://guolin.tech/api/china&quot;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;    ...
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Kotlin中推荐用object修饰工具类，里面的成员默认是static的。常量用val，变量用var。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是在使用HttpUtil.Url时并不像Java那样是引用类所属的静态变量，而是通过单例对象（lazy-init机制，第一次使用时进行创建）来引用成员变量，了解更多点&lt;a title=&quot;http://www.jianshu.com/p/157126615f77&quot; href=&quot;http://www.jianshu.com/p/157126615f77&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.3&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;for (int i = start; i &amp;lt; end; ++i) {}改为for (i in start..end - 1) {}：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; (i in start..end - 1&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;...
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;in和..的组合遍历的区间是[start, end-1]，即最后一个元素是包含在内的，不注意容易引起下标越界问题。变量i是自动推断类型，不需要显式声明。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.4&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;将只有数据的类由class改为data class，如城市类的定义：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; data &lt;span&gt;class&lt;/span&gt; City(var id: Int = 0&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;                 var cityName: String? = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                 var cityCode: Int = 0&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                 var provinceId: Int = 0) : DataSupport() {}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这种类一般称为Bean类（只拥有数据而没有操作），编译器会根据声明的属性自动生成对应的equal()、hashCode()方法及pair，了解更多点&lt;a title=&quot;http://blog.csdn.net/zouchengxufei/article/details/49966079&quot; href=&quot;http://blog.csdn.net/zouchengxufei/article/details/49966079&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.5&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;Kotlin中==和equals效果是相同的（比较的是对象的值），比较引用的是===。那么我们在比较字串的值时可以简化代码了：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&quot;ok&quot; ==&lt;span&gt; it.status) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    ...
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;将常量字面值写在前面也是一种好习惯，因为str.equals(&quot;ok&quot;)的形式，当str为空时会报空指针异常。还有，基本类型比较时需要显式转换，否则也会报错，如1 == 1L需要写成1.toLong() == 1L。了解更多点&lt;a title=&quot;https://zhuanlan.zhihu.com/p/27214002&quot; href=&quot;https://zhuanlan.zhihu.com/p/27214002&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.6&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;打开应用时会进行天气缓存信息的读取，如果之前使用过应用，那么就直接显示上次的天气信息；如果没有则进行城市的选择，并进行对应天气的获取。这里通过？.let语法来代替下一步操作前的null判断：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; val prefs = PreferenceManager.getDefaultSharedPreferences(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;@MainActivity)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; val weather = prefs.getString(&quot;weather&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; weather?&lt;span&gt;.let {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 　　val intent = Intent(&lt;span&gt;this&lt;/span&gt;, WeatherActivity::&lt;span&gt;class&lt;/span&gt;&lt;span&gt;.java)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 　　&lt;span&gt;startActivity(intent)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 　　&lt;span&gt;finish()
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果weather变量值为null，那么就不会往下执行，类似的用法还有获取字串长度str?.length，当str为null时不往后取length值就能避免空指针异常。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.7&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;by lazy延迟加载&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;val drawerLayout by lazy {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     findViewById(R.id.drawer_layout) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; DrawerLayout
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;val swipeRefresh by lazy {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     findViewById(R.id.swipe_refresh) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; SwipeRefreshLayout
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;之前的做法一般是先定义变量，然后在onCreate等重载方法中利用findViewById将变量和id进行绑定。现在Kotlin中提供了延迟加载机制，只有在布局环境初始化完成后，才会建立变量和id的联系。不管是绑定的时机，还是这个过程的代码实现，都变得一目了然。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.8&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;when、_和is&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; list_view.onItemClickListener = AdapterView.OnItemClickListener { _, _, position, _ -&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    when (currentLevel) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         LEVEL_PROVINCE -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             selectedProvince = provinceList!!&lt;span&gt;[position]
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            queryCities()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         LEVEL_CITY -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             selectedCity = cityList!!&lt;span&gt;[position]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            queryCounties()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         LEVEL_COUNTY -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             val weatherId = countyList!!&lt;span&gt;[position].weatherId
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             weatherId?&lt;span&gt;.let {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                when (activity) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     &lt;span&gt;is&lt;/span&gt; MainActivity -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         val intent = Intent(activity, WeatherActivity::&lt;span&gt;class&lt;/span&gt;&lt;span&gt;.java)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         intent.putExtra(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;weather_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, weatherId)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                        startActivity(intent)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                        activity.finish()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;is&lt;/span&gt; WeatherActivity -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                         val activity = activity &lt;span&gt;as&lt;/span&gt;&lt;span&gt; WeatherActivity
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                        activity.drawerLayout.closeDrawers()
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                         activity.swipeRefresh.isRefreshing = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                        activity.requestWeather(weatherId)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt; -&amp;gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; -&amp;gt;&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这段代码的功能是给列表项添加点击响应，也比以往的写法简化很多，提一下代码中用到的三个点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;a&lt;/strong&gt; when用来替换switch case，省去了case:、break及default，毕竟每一个分支结尾处都要记得写上break还是不爽的；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;b&lt;/strong&gt; 方法参数_，当后面不会使用的情况下可以写成下划线，优点是过多不用的参数可以简写，缺点是可读性不好，后续如果参数被使用还是需要加上名称；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;c&lt;/strong&gt; is和as，前者是判断类型是否匹配，后者是类型转换。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.9&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;map映射和it&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; provinceList?&lt;span&gt;.let {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (it.isNotEmpty()) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        dataList.clear()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        it.map {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             dataList.add(it.provinceName!!&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        adapter.notifyDataSetChanged()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         list_view.setSelection(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         currentLevel =&lt;span&gt; LEVEL_PROVINCE
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;之前提到过let的用法，其实和之搭配的还有it，代表let前面的变量，比如it.isNotEmpty()就是判断列表变量provinceList是否为空。而it.map的作用是遍历列表/数组，元素又可以用it表示，有点像it的嵌套，Kotlin会自动区分it代表的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.10&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;@SerializedName注解（Java中概念），用于将json内容中的属性名和对应类的成员变量名进行一一对应，毕竟json中字段名的可读性是不能保证的。用法如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Now {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     @SerializedName(&quot;tmp&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     var temperature: String? = &lt;span&gt;null&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    ...    
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.11&lt;/strong&gt;&lt;/span&gt; $&lt;span&gt;name和${name}获取变量值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
val address = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${HttpUtil.China}/$provinceCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这种用法在字串拼接时特别适用，不用再通过“+”号写一长串的代码来进行各字串的拼接，直接将变量值得获取放到字串中。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. 总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面仅仅介绍了关于Kotlin语言的部分用法，项目中还用到了Glide、Litepal、OkHttp及Gson等流行库，以及在Service中用AlarmManager来后台定期更新天气数据。感兴趣的话建议查看相关源码，会有收获的。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 08 Oct 2017 23:29:00 +0000</pubDate>
<dc:creator>路上的脚印</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tgyf/p/7611239.html</dc:identifier>
</item>
<item>
<title>读Zepto源码之Fx模块 - 对角另一面</title>
<link>http://www.cnblogs.com/hefty/p/7639501.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hefty/p/7639501.html</guid>
<description>&lt;p&gt;&lt;code&gt;fx&lt;/code&gt; 模块为利用 &lt;code&gt;CSS3&lt;/code&gt; 的过渡和动画的属性为 &lt;code&gt;Zepto&lt;/code&gt; 提供了动画的功能，在 &lt;code&gt;fx&lt;/code&gt; 模块中，只做了事件和样式浏览器前缀的补全，没有做太多的兼容。对于不支持 &lt;code&gt;CSS3&lt;/code&gt; 过渡和动画的， &lt;code&gt;Zepto&lt;/code&gt; 的处理也相对简单，动画立即完成，马上执行回调。&lt;/p&gt;
&lt;p&gt;读 Zepto 源码系列文章已经放到了github上，欢迎star: &lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto&quot;&gt;reading-zepto&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码版本&quot;&gt;源码版本&lt;/h2&gt;
&lt;p&gt;本文阅读的源码为 &lt;a href=&quot;https://github.com/madrobby/zepto/tree/v1.2.0&quot;&gt;zepto1.2.0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;gitbook&quot;&gt;GitBook&lt;/h2&gt;
&lt;p&gt;《&lt;a href=&quot;https://yeyuqiudeng.gitbooks.io/reading-zepto/content/&quot;&gt;reading-zepto&lt;/a&gt;》&lt;/p&gt;
&lt;h2 id=&quot;内部方法&quot;&gt;内部方法&lt;/h2&gt;
&lt;h3 id=&quot;dasherize&quot;&gt;dasherize&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;dasherize&lt;/span&gt;(str) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;([A-Z])&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'-$1'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toLowerCase&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个方法是将驼峰式（ &lt;code&gt;camleCase&lt;/code&gt; ）的写法转换成用 &lt;code&gt;-&lt;/code&gt; 连接的连词符的写法（ &lt;code&gt;camle-case&lt;/code&gt; ）。转换的目的是让写法符合 &lt;code&gt;css&lt;/code&gt; 的样式规范。&lt;/p&gt;
&lt;h3 id=&quot;normalizeevent&quot;&gt;normalizeEvent&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;normalizeEvent&lt;/span&gt;(name) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; eventPrefix &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; eventPrefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; name : &lt;span class=&quot;va&quot;&gt;name&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toLowerCase&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为事件名增加浏览器前缀。&lt;/p&gt;
&lt;h2 id=&quot;为事件和样式增加浏览器前缀&quot;&gt;为事件和样式增加浏览器前缀&lt;/h2&gt;
&lt;h3 id=&quot;变量&quot;&gt;变量&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; eventPrefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    vendors &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Webkit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'webkit'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Moz&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'o'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    testEl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'div'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    supportedTransforms &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;^((&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;3d&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)?|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;3d&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)?|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;perspective&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;skew&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)?)$&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/i&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    transform&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    transitionProperty&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; transitionDuration&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; transitionTiming&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; transitionDelay&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    animationName&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; animationDuration&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; animationTiming&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; animationDelay&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    cssReset &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;vendors&lt;/code&gt; 定义了浏览器的样式前缀（ &lt;code&gt;key&lt;/code&gt; ） 和事件前缀 ( &lt;code&gt;value&lt;/code&gt; ) 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;testEl&lt;/code&gt; 是为检测浏览器前缀所创建的临时节点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssReset&lt;/code&gt; 用来保存加完前缀后的样式规则，用来过渡或动画完成后重置样式。&lt;/p&gt;
&lt;h3 id=&quot;浏览器前缀检测&quot;&gt;浏览器前缀检测&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;testEl&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;each&lt;/span&gt;(vendors&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(vendor&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; event)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;testEl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;style&lt;/span&gt;[vendor &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'TransitionProperty'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    prefix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'-'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;vendor&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;toLowerCase&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'-'&lt;/span&gt;
    eventPrefix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; event
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检测到浏览器不支持标准的 &lt;code&gt;transform&lt;/code&gt; 属性，则依次检测加了不同浏览器前缀的 &lt;code&gt;transitionProperty&lt;/code&gt; 属性，直至找到合适的浏览器前缀，样式前缀保存在 &lt;code&gt;prefix&lt;/code&gt; 中， 事件前缀保存在 &lt;code&gt;eventPrefix&lt;/code&gt; 中。&lt;/p&gt;
&lt;h3 id=&quot;初始化样式&quot;&gt;初始化样式&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;transform &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'transform'&lt;/span&gt;
cssReset[transitionProperty &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'transition-property'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;
cssReset[transitionDuration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'transition-duration'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;
cssReset[transitionDelay    &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'transition-delay'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;
cssReset[transitionTiming   &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'transition-timing-function'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;
cssReset[animationName      &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'animation-name'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;
cssReset[animationDuration  &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'animation-duration'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;
cssReset[animationDelay     &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'animation-delay'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;
cssReset[animationTiming    &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prefix &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'animation-timing-function'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取浏览器前缀后，为所有的 &lt;code&gt;transition&lt;/code&gt; 和 &lt;code&gt;animation&lt;/code&gt; 属性加上对应的前缀，都初始化为 &lt;code&gt;''&lt;/code&gt;，方便后面使用。&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;方法&lt;/h2&gt;
&lt;h3 id=&quot;fx&quot;&gt;$.fx&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fx&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (eventPrefix &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;testEl&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;transitionProperty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;speeds&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;_default&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;cssPrefix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; prefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;transitionEnd&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;normalizeEvent&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'TransitionEnd'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;animationEnd&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;normalizeEvent&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'AnimationEnd'&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;off: 表示浏览器是否支持过渡或动画，如果既没有浏览器前缀，也不支持标准的属性，则判定该浏览器不支持动画&lt;/li&gt;
&lt;li&gt;speeds: 定义了三种动画持续的时间， 默认为 &lt;code&gt;400ms&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cssPrefix: 样式浏览器兼容前缀，即 &lt;code&gt;prefix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;transitionEnd： 过渡完成时触发的事件，调用 &lt;code&gt;normalizeEvent&lt;/code&gt; 事件加了浏览器前缀补全&lt;/li&gt;
&lt;li&gt;animationEnd： 动画完成时触发的事件，同样加了浏览器前缀补全&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;animate&quot;&gt;animate&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fn&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(properties&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; duration&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ease&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; callback&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; delay)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isFunction&lt;/span&gt;(duration))
    callback &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; duration&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ease &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; duration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isFunction&lt;/span&gt;(ease))
    callback &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ease&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ease &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isPlainObject&lt;/span&gt;(duration))
    ease &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;duration&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;easing&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; callback &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;duration&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; delay &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;duration&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; duration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;duration&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;duration&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (duration) duration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; duration &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'number'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; duration :
                            (&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;speeds&lt;/span&gt;[duration] &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;speeds&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_default&lt;/span&gt;)) / &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (delay) delay &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;parseFloat&lt;/span&gt;(delay) / &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;anim&lt;/span&gt;(properties&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; duration&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ease&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; callback&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; delay)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们平时用得最多的是 &lt;code&gt;animate&lt;/code&gt; 这个方法，但是这个方法最终调用的是 &lt;code&gt;anim&lt;/code&gt; 这个方法，&lt;code&gt;animate&lt;/code&gt; 这个方法相当灵活，因为它主要做的是参数修正的工作，做得参数适应 &lt;code&gt;anim&lt;/code&gt; 的接口。&lt;/p&gt;
&lt;h4 id=&quot;参数&quot;&gt;参数：&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;properties：需要过渡的样式对象，或者 &lt;code&gt;animation&lt;/code&gt; 的名称，只有这个参数是必传的&lt;/li&gt;
&lt;li&gt;duration: 过渡时间&lt;/li&gt;
&lt;li&gt;ease: 缓动函数&lt;/li&gt;
&lt;li&gt;callback: 过渡或者动画完成后的回调函数&lt;/li&gt;
&lt;li&gt;delay: 过渡或动画延迟执行的时间&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;修正参数&quot;&gt;修正参数&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isFunction&lt;/span&gt;(duration))
  callback &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; duration&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ease &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; duration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是处理传参为 &lt;code&gt;animate(properties, callback)&lt;/code&gt; 的情况。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isFunction&lt;/span&gt;(ease))
    callback &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; ease&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ease &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是处理 &lt;code&gt;animate(properties, duration, callback)&lt;/code&gt; 的情况，此时 &lt;code&gt;callback&lt;/code&gt; 在参数 &lt;code&gt;ease&lt;/code&gt; 的位置&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isPlainObject&lt;/span&gt;(duration))
  ease &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;duration&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;easing&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; callback &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;duration&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; delay &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;duration&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; duration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;duration&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;duration&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是处理 &lt;code&gt;animate(properties, { duration: msec, easing: type, complete: fn })&lt;/code&gt; 的情况。除了 &lt;code&gt;properties&lt;/code&gt; ，后面的参数还可以写在一个对象中传入。&lt;/p&gt;
&lt;p&gt;如果检测到为对象的传参方式，则将对应的值从对象中取出。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (duration) duration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; duration &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'number'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; duration :
                          (&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;speeds&lt;/span&gt;[duration] &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;speeds&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_default&lt;/span&gt;)) / &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果过渡时间为数字，则直接采用，如果是 &lt;code&gt;speeds&lt;/code&gt; 中指定的 &lt;code&gt;key&lt;/code&gt; ，即 &lt;code&gt;slow&lt;/code&gt; 、&lt;code&gt;fast&lt;/code&gt; 甚至 &lt;code&gt;_default&lt;/code&gt; ，则从 &lt;code&gt;speeds&lt;/code&gt; 中取值，否则用 &lt;code&gt;speends&lt;/code&gt; 的 &lt;code&gt;_default&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;因为在样式中是用 &lt;code&gt;s&lt;/code&gt; 取值，所以要将毫秒数除 &lt;code&gt;1000&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (delay) delay &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;parseFloat&lt;/span&gt;(delay) / &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也将延迟时间转换为秒。&lt;/p&gt;
&lt;h3 id=&quot;anim&quot;&gt;anim&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fn&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;anim&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(properties&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; duration&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ease&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; callback&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; delay)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; cssValues &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt; cssProperties&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; transforms &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      that &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; wrappedCallback&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; endEvent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;transitionEnd&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      fired &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (duration &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;) duration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;speeds&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_default&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (delay &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;) delay &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;off&lt;/span&gt;) duration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; properties &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'string'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// keyframe animation&lt;/span&gt;
    cssValues[animationName] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; properties
    cssValues[animationDuration] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; duration &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'s'&lt;/span&gt;
    cssValues[animationDelay] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; delay &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'s'&lt;/span&gt;
    cssValues[animationTiming] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (ease &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'linear'&lt;/span&gt;)
    endEvent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animationEnd&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    cssProperties &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;co&quot;&gt;// CSS transitions&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (key &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; properties)
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;supportedTransforms&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(key)) transforms &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; key &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'('&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; properties[key] &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;') '&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; cssValues[key] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; properties[key]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cssProperties&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;dasherize&lt;/span&gt;(key))

    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (transforms) cssValues[transform] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; transforms&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cssProperties&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(transform)
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (duration &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; properties &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      cssValues[transitionProperty] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cssProperties&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;', '&lt;/span&gt;)
      cssValues[transitionDuration] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; duration &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'s'&lt;/span&gt;
      cssValues[transitionDelay] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; delay &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'s'&lt;/span&gt;
      cssValues[transitionTiming] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (ease &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'linear'&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  wrappedCallback &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(event)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; event &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'undefined'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;currentTarget&lt;/span&gt;) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// makes sure the event didn't bubble from &quot;below&quot;&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;target&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;unbind&lt;/span&gt;(endEvent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; wrappedCallback)
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;unbind&lt;/span&gt;(endEvent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; wrappedCallback) &lt;span class=&quot;co&quot;&gt;// triggered by setTimeout&lt;/span&gt;

    fired &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;css&lt;/span&gt;(cssReset)
    callback &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;callback&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (duration &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(endEvent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; wrappedCallback)
    &lt;span class=&quot;co&quot;&gt;// transitionEnd is not always firing on older Android phones&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// so make sure it gets fired&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (fired) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;wrappedCallback&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(that)
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; ((duration &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; delay) &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;co&quot;&gt;// trigger page reflow so new elements can animate&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;size&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;clientLeft&lt;/span&gt;

  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;css&lt;/span&gt;(cssValues)

  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (duration &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;wrappedCallback&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)

  &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;animation&lt;/code&gt; 最终调用的是 &lt;code&gt;anim&lt;/code&gt; 方法，&lt;code&gt;Zepto&lt;/code&gt; 也将这个方法暴露了出去，其实我觉得只提供 &lt;code&gt;animation&lt;/code&gt; 方法就可以了，这个方法完全可以作为私有的方法调用。&lt;/p&gt;
&lt;h4 id=&quot;参数默认值&quot;&gt;参数默认值&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (duration &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;) duration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;speeds&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;_default&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (delay &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;) delay &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;off&lt;/span&gt;) duration &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有传递持续时间 &lt;code&gt;duration&lt;/code&gt; ，则默认为 &lt;code&gt;$.fx.speends._default&lt;/code&gt; 的定义值 &lt;code&gt;400ms&lt;/code&gt; ，这里需要转换成 &lt;code&gt;s&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果没有传递 &lt;code&gt;delay&lt;/code&gt; ，则默认不延迟，即 &lt;code&gt;0&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果浏览器不支持过渡和动画，则 &lt;code&gt;duration&lt;/code&gt; 设置为 &lt;code&gt;0&lt;/code&gt; ，即没有动画，立即执行回调。&lt;/p&gt;
&lt;h4 id=&quot;处理animation动画参数&quot;&gt;处理animation动画参数&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; properties &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'string'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// keyframe animation&lt;/span&gt;
  cssValues[animationName] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; properties
  cssValues[animationDuration] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; duration &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'s'&lt;/span&gt;
  cssValues[animationDelay] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; delay &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'s'&lt;/span&gt;
  cssValues[animationTiming] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (ease &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'linear'&lt;/span&gt;)
  endEvent &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animationEnd&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果 &lt;code&gt;properties&lt;/code&gt; 为 &lt;code&gt;string&lt;/code&gt;， 即 &lt;code&gt;properties&lt;/code&gt; 为动画名，则设置动画对应的 &lt;code&gt;css&lt;/code&gt; ，&lt;code&gt;duration&lt;/code&gt; 和 &lt;code&gt;delay&lt;/code&gt; 都加上了 &lt;code&gt;s&lt;/code&gt; 的单位，默认的缓动函数为 &lt;code&gt;linear&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&quot;处理transition参数&quot;&gt;处理transition参数&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  cssProperties &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []
  &lt;span class=&quot;co&quot;&gt;// CSS transitions&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (key &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; properties)
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;supportedTransforms&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;test&lt;/span&gt;(key)) transforms &lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt; key &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'('&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; properties[key] &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;') '&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; cssValues[key] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; properties[key]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cssProperties&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;dasherize&lt;/span&gt;(key))

  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (transforms) cssValues[transform] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; transforms&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cssProperties&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(transform)
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (duration &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; properties &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'object'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    cssValues[transitionProperty] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cssProperties&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;', '&lt;/span&gt;)
    cssValues[transitionDuration] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; duration &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'s'&lt;/span&gt;
    cssValues[transitionDelay] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; delay &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'s'&lt;/span&gt;
    cssValues[transitionTiming] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (ease &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'linear'&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;supportedTransforms&lt;/code&gt; 是用来检测是否为 &lt;code&gt;transform&lt;/code&gt; 的正则，如果是 &lt;code&gt;transform&lt;/code&gt; ，则拼接成符合 &lt;code&gt;transform&lt;/code&gt; 规则的字符串。&lt;/p&gt;
&lt;p&gt;否则，直接将值存入 &lt;code&gt;cssValues&lt;/code&gt; 中，将 &lt;code&gt;css&lt;/code&gt; 的样式名存入 &lt;code&gt;cssProperties&lt;/code&gt; 中，并且调用了 &lt;code&gt;dasherize&lt;/code&gt; 方法，使得 &lt;code&gt;properties&lt;/code&gt; 的 &lt;code&gt;css&lt;/code&gt; 样式名（ &lt;code&gt;key&lt;/code&gt; ）支持驼峰式的写法。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (transforms) cssValues[transform] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; transforms&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;cssProperties&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(transform)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段是检测是否有 &lt;code&gt;transform&lt;/code&gt; ，如果有，也将 &lt;code&gt;transform&lt;/code&gt; 存入 &lt;code&gt;cssValues&lt;/code&gt; 和 &lt;code&gt;cssProperties&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;接下来判断动画是否开启，并且是否有过渡属性，如果有，则设置对应的值。&lt;/p&gt;
&lt;h4 id=&quot;回调函数的处理&quot;&gt;回调函数的处理&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;wrappedCallback &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(event)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;typeof&lt;/span&gt; event &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'undefined'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;currentTarget&lt;/span&gt;) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// makes sure the event didn't bubble from &quot;below&quot;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;event&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;target&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;unbind&lt;/span&gt;(endEvent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; wrappedCallback)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;unbind&lt;/span&gt;(endEvent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; wrappedCallback) &lt;span class=&quot;co&quot;&gt;// triggered by setTimeout&lt;/span&gt;

  fired &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;css&lt;/span&gt;(cssReset)
  callback &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;callback&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果浏览器支持过渡或者动画事件，则在动画结束的时候，取消事件监听，注意在 &lt;code&gt;unbind&lt;/code&gt; 时，有个 &lt;code&gt;event.target !== event.currentTarget&lt;/code&gt; 的判定，这是排除冒泡事件。&lt;/p&gt;
&lt;p&gt;如果事件不存在时，直接取消对应元素上的事件监听。&lt;/p&gt;
&lt;p&gt;并且将状态控制 &lt;code&gt;fired&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt; ，表示回调已经执行。&lt;/p&gt;
&lt;p&gt;动画完成后，再将涉及过渡或动画的样式设置为空。&lt;/p&gt;
&lt;p&gt;最后，调用传递进来的回调函数，整个动画完成。&lt;/p&gt;
&lt;h4 id=&quot;绑定过渡或动画的结束事件&quot;&gt;绑定过渡或动画的结束事件&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (duration &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bind&lt;/span&gt;(endEvent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; wrappedCallback)
  &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (fired) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;wrappedCallback&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(that)
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; ((duration &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; delay) &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;绑定过渡或动画的结束事件，在动画结束时，执行处理过的回调函数。&lt;/p&gt;
&lt;p&gt;注意这里有个 &lt;code&gt;setTimeout&lt;/code&gt; ，是避免浏览器不支持过渡或动画事件时，可以通过 &lt;code&gt;setTimeout&lt;/code&gt; 执行回调。&lt;code&gt;setTimeout&lt;/code&gt; 的回调执行比动画时间长 &lt;code&gt;25ms&lt;/code&gt; ，目的是让事件响应在 &lt;code&gt;setTimeout&lt;/code&gt; 之前，如果浏览器支持过渡或动画事件， &lt;code&gt;fired&lt;/code&gt; 会在回调执行时设置成 &lt;code&gt;true&lt;/code&gt;， &lt;code&gt;setTimeout&lt;/code&gt; 的回调函数不会再重复执行。&lt;/p&gt;
&lt;h4 id=&quot;触发页面回流&quot;&gt;触发页面回流&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt; &lt;span class=&quot;co&quot;&gt;// trigger page reflow so new elements can animate&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;size&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;clientLeft&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;css&lt;/span&gt;(cssValues)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里用了点黑科技，读取 &lt;code&gt;clientLeft&lt;/code&gt; 属性，触发页面的回流，使得动画的样式设置上去时可以立即执行。&lt;/p&gt;
&lt;p&gt;具体可以这篇文章中的解释：&lt;a href=&quot;https://github.com/mislav/blog/blob/master/_posts/2014-02-07-hidden-documentation.md&quot;&gt;2014-02-07-hidden-documentation.md&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;过渡时间不大于零的回调处理&quot;&gt;过渡时间不大于零的回调处理&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (duration &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;each&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;wrappedCallback&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;duration&lt;/code&gt; 不大于零时，可以是参数设置错误，也可能是浏览器不支持过渡或动画，就立即执行回调函数。&lt;/p&gt;
&lt;h2 id=&quot;系列文章&quot;&gt;系列文章&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.md&quot;&gt;读Zepto源码之代码结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8B%E5%86%85%E9%83%A8%E6%96%B9%E6%B3%95.md&quot;&gt;读Zepto源码之内部方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8B%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0.md&quot;&gt;读Zepto源码之工具函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8B%E7%A5%9E%E5%A5%87%E7%9A%84%24.md&quot;&gt;读Zepto源码之神奇的$&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8B%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C.md&quot;&gt;读Zepto源码之集合操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8B%E9%9B%86%E5%90%88%E5%85%83%E7%B4%A0%E6%9F%A5%E6%89%BE.md&quot;&gt;读Zepto源码之集合元素查找&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8B%E6%93%8D%E4%BD%9CDOM.md&quot;&gt;读Zepto源码之操作DOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8B%E6%A0%B7%E5%BC%8F%E6%93%8D%E4%BD%9C.md&quot;&gt;读Zepto源码之样式操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8B%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C.md&quot;&gt;读Zepto源码之属性操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8BEvent%E6%A8%A1%E5%9D%97.md&quot;&gt;读Zepto源码之Event模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8BIE%E6%A8%A1%E5%9D%97.md&quot;&gt;读Zepto源码之IE模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8BCallbacks%E6%A8%A1%E5%9D%97.md&quot;&gt;读Zepto源码之Callbacks模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8BDeferred%E6%A8%A1%E5%9D%97.md&quot;&gt;读Zepto源码之Deferred模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8BAjax%E6%A8%A1%E5%9D%97.md&quot;&gt;读Zepto源码之Ajax模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8Bassets%E6%A8%A1%E5%9D%97.md&quot;&gt;读Zepto源码之Assets模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8BSelector%E6%A8%A1%E5%9D%97.md&quot;&gt;读Zepto源码之Selector模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8BTouch%E6%A8%A1%E5%9D%97.md&quot;&gt;读Zepto源码之Touch模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8BGesture%E6%A8%A1%E5%9D%97.md&quot;&gt;读Zepto源码之Gesture模块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeyuqiudeng/reading-zepto/blob/master/src/%E8%AF%BBZepto%E6%BA%90%E7%A0%81%E4%B9%8BIOS3%E6%A8%A1%E5%9D%97.md&quot;&gt;读Zepto源码之IOS3模块&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;附文&quot;&gt;附文&lt;/h3&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际 (CC BY-NC-ND 4.0)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：对角另一面&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 23:20:00 +0000</pubDate>
<dc:creator>对角另一面</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hefty/p/7639501.html</dc:identifier>
</item>
<item>
<title>Docker 最常用的监控方案 - 每天5分钟玩转 Docker 容器技术（78） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/7637361.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/7637361.html</guid>
<description>&lt;p&gt;当 Docker 部署规模逐步变大后，可视化监控容器环境的性能和健康状态将会变得越来越重要。&lt;/p&gt;
&lt;p&gt;在本章中，我们将讨论几个目前比较常用的容器监控工具和方案，为大家构建自己的监控系统提供参考。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884054042409.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884054042409.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先我们会讨论 Docker 自带的几个监控子命令：ps, top 和 stats。然后是几个功能更强的开源监控工具 sysdig, Weave Scope, cAdvisor 和 Prometheus。最后我们会对这些不同的工具和方案做一个比较。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;docker-&quot;&gt;&lt;strong&gt;Docker 自带的监控子命令&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;ps&quot;&gt;&lt;strong&gt;ps&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker container ps&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;是我们早已熟悉的命令了，方便我们查看当前运行的容器。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884088061143.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884088061143.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.cnblogs.com/Users/wanglei/百度云同步盘/容器/images/352.png&quot; alt=&quot;&quot;/&gt;&lt;span&gt;前面已经有大量示例，这里就不赘述了。值得注意的是，新版的 Docker 提供了一个新命令 &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker container ls&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，其作用和用法与 &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker container ps&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 完全一样。不过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ls&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 含义可能比 &lt;/span&gt;&lt;code&gt;&lt;span&gt;ps&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; 更准确，所以更推荐使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884128096254.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884128096254.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;top&quot;&gt;&lt;strong&gt;top&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;如果想知道某个容器中运行了哪些进程，可以执行&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker container top [container]&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;命令。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884238054800.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884238054800.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面显示了 sysdig 这个容器中的进程。命令后面还可以跟上 Linux 操作系统&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;ps&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;命令的参数显示特定的信息，比如&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;-au&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884329032399.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884329032399.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;stats&quot;&gt;&lt;strong&gt;stats&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker container stats&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;用于显示每个容器各种资源的使用情况。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884417072957.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884417072957.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认会显示一个实时变化的列表，展示每个容器的 CPU 使用率，内存使用量和可用量。&lt;/p&gt;
&lt;p&gt;注意：容器启动时如果没有特别指定内存 limit，stats 命令会显示 host 的内存总量，但这并不意味着每个 container 都能使用到这么多的内存。&lt;/p&gt;
&lt;p&gt;除此之外&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker container stats&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;命令还会显示容器网络和磁盘的 IO 数据。&lt;/p&gt;
&lt;p&gt;默认的输出有个缺点，显示的是容器 ID 而非名字。我们可以在&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;stats&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;命令后面指定容器的名称只显示某些容器的数据。比如&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker container stats sysdig weave&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884482097033.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443884482097033.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ps，top, stats 这几个命令是 docker 自带的，优点是运行方便，很适合想快速了解容器运行状态的场景。其缺点是输出的数据有限，而且都是实时数据，无法反应历史变化和趋势。接下来要介绍的几个监控工具会提供更丰富的功能。&lt;/p&gt;
&lt;p&gt;下一节我们学习 sysdig。 &lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170926-1506393629819061392.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171008-1507443748189082213.jpg&quot; alt=&quot;二维码+指纹.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 23:07:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/7637361.html</dc:identifier>
</item>
<item>
<title>golang 标准库间依赖的可视化展示 - iOS122</title>
<link>http://www.cnblogs.com/ios122/p/7639478.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ios122/p/7639478.html</guid>
<description>&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/801860/201710/801860-20171009035407105-1488482403.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;国庆看完 &amp;lt;&amp;lt; Go 语言圣经 &amp;gt;&amp;gt;,总想做点什么,来加深下印象.以可视化的方式展示 golang 标准库之间的依赖,可能是一个比较好的切入点.做之前,简单搜了下相关的内容,网上也要讨论,但是没有发现直接能拿过来用的.标准库之间,是必然存在依赖关系的,不同库被依赖的程度必然是不一样的.但究竟有多大差别呢?&lt;/p&gt;
&lt;p&gt;以下内容,数据源自真实环境的 golang 1.9 版本的标准库.所以,本文不仅是一篇可视化相关的讨论文章,更是提供了一个可以直接探究 golang 标准库间依赖关系的快速梳理工具.&lt;/p&gt;
&lt;h2 id=&quot;数据准备&quot;&gt;数据准备&lt;/h2&gt;
&lt;p&gt;标准库各个包之间的相互关系,可以直接通过命令获取,然后简单变换为一个标准的 JSON 对象:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;go list -json  std&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例输出:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;92&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Dir&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/usr/local/go/src/archive/tar&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;ImportPath&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;archive/tar&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;tar&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Doc&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Package tar implements access to tar archives.&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Target&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/usr/local/go/pkg/darwin_amd64/archive/tar.a&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Goroot&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Standard&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;StaleReason&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;standard package in Go release distribution&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Root&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;/usr/local/go&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;GoFiles&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;common.go&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;format.go&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;reader.go&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;stat_atimespec.go&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;stat_unix.go&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;strconv.go&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;writer.go&quot;&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;IgnoredGoFiles&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;stat_atim.go&quot;&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Imports&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;io&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;math&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;sort&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;strconv&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;strings&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;syscall&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Deps&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;internal/cpu&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;internal/poll&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;internal/race&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;io&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;math&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;path/filepath&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;reflect&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;runtime&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;runtime/internal/atomic&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;runtime/internal/sys&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;sort&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;strconv&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;strings&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;sync/atomic&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;syscall&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;unicode&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;unicode/utf8&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;unsafe&quot;&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;TestGoFiles&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;reader_test.go&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;strconv_test.go&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;tar_test.go&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;writer_test.go&quot;&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;TestImports&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;crypto/md5&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;internal/testenv&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;io&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;math&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;path/filepath&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;reflect&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;sort&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;strings&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;testing/iotest&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;time&quot;&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;XTestGoFiles&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;example_test.go&quot;&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;XTestImports&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;archive/tar&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;bytes&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;io&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;st&quot;&gt;&quot;os&quot;&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;梳理过的数据源,参见: &lt;a href=&quot;https://raw.githubusercontent.com/ios122/graph-go/master/data.js&quot; class=&quot;uri&quot;&gt;https://raw.githubusercontent.com/ios122/graph-go/master/data.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;可视化原理&quot;&gt;可视化原理&lt;/h2&gt;
&lt;p&gt;主要涉及一下内容:&lt;/p&gt;
&lt;ul readability=&quot;7.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;可视化显示,使用的是 echarts&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;使用原始数据的 ImportPath 而不是 Name,来作为每个数据节点的唯一id.这样是因为 golang 本身的包命名规范决定的.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;使用原始数据的 Imports 字段,来确定标准库包与包之间的相互依赖关系.golang是不允许循环依赖的,所以一些循环依赖相关的问题,不需要考虑.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;节点的大小,和包被其他包引入的次数成正相关.这样做,被依赖越多的包,图上最终显示时,就会越大.常用包和不常用包,一目了然.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;数据整理&quot;&gt;数据整理&lt;/h2&gt;
&lt;p&gt;就是把原始数据,处理成 echarts 需要的数据,这里简要说下最核心的思路:&lt;/p&gt;
&lt;ul readability=&quot;7.8686131386861&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;echarts 显示相关的代码,很大程度上参考了 &lt;a href=&quot;http://echarts.baidu.com/demo.html#graph-npm&quot;&gt;graph-npm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;节点坐标和颜色,采用随机坐标和颜色,以去除节点和包之间的联系.我认为这样处理,能更纯粹地观察标准库包与包之间的联系.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;需要一个 edges 来记录包与包之间的依赖关系.在每次遍历 &lt;em&gt;Imports&lt;/em&gt; 时,动态写入.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;需要一个 nodes 来记录包自身的一些信息,但是其 size 参数,需要计算过所有依赖关系后再填入.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;使用 nodedSize 来记录每个包被依赖的次数,为了提升效率,它是一个字典Map.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt; &lt;span class=&quot;co&quot;&gt;/* 将原始数据,转换为图标友好的数据. &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    ImportPath 作为唯一 id 和 标签;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    Imports 用于计算依赖关系;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    节点的大小,取决于被依赖的次数;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;transData&lt;/span&gt;(datas)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/* 存储依赖路径信息. */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; edges &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []

    &lt;span class=&quot;co&quot;&gt;/* 存储基础节点信息. */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; nodes &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; []

    &lt;span class=&quot;co&quot;&gt;/* 节点尺寸.初始是1, 每被引入一次再加1. */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; nodedSize &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/* 尺寸单位1. */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; unitSize &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.5&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;datas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((data)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; itemId &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ImportPath&lt;/span&gt;

        &lt;span class=&quot;va&quot;&gt;nodes&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; itemId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&quot;attributes&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; itemId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;st&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Imports&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Imports&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((importItem)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;edges&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;st&quot;&gt;&quot;sourceID&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; importItem&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;st&quot;&gt;&quot;attributes&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{},&lt;/span&gt;
                    &lt;span class=&quot;st&quot;&gt;&quot;targetID&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; itemId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;st&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; unitSize
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(nodedSize[importItem])&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    nodedSize[importItem] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nodedSize[importItem] &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; unitSize
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    nodedSize[importItem] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; unitSize
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

    &lt;span class=&quot;co&quot;&gt;/* 尺寸数据合并到节点上. */&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;nodes&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;((item)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; itemId &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(nodedSize[itemId])&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nodedSize[itemId]
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        nodes&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;edges
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;效果与源码&quot;&gt;效果与源码&lt;/h2&gt;
&lt;h2 id=&quot;相关链接&quot;&gt;相关链接&lt;/h2&gt;
</description>
<pubDate>Sun, 08 Oct 2017 19:55:00 +0000</pubDate>
<dc:creator>iOS122</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ios122/p/7639478.html</dc:identifier>
</item>
<item>
<title>FastDFS的安装步骤 - 西北野狼</title>
<link>http://www.cnblogs.com/androidsuperman/p/7639324.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/androidsuperman/p/7639324.html</guid>
<description>&lt;p&gt;1.安装相关环境&lt;br/&gt;　　yum install -y gcc-c++&lt;br/&gt;　　yum -y install libevent&lt;br/&gt;　　yum install -y pcre pcre-devel&lt;br/&gt;　　yum install -y zlib zlib-devel&lt;br/&gt;　　yum install -y openssl openssl-devel&lt;br/&gt;2.上传文件&lt;br/&gt;　　fastdfs-nginx-module_v1.16.tar.gz&lt;br/&gt;　　FastDFS_v5.05.tar.gz&lt;br/&gt;　　libfastcommonV1.0.7.tar.gz&lt;br/&gt;　　nginx-1.8.0.tar.gz&lt;br/&gt;3.安装libfastcommonV1.0.7.tar.gz&lt;br/&gt;　　进入libfastcommonV1.0.7.tar.gz所在的目录&lt;br/&gt;　　mv libfastcommonV1.0.7.tar.gz /usr/local/&lt;br/&gt;　　cd /usr/local/&lt;br/&gt;　　tar -zxvf libfastcommonV1.0.7.tar.gz&lt;br/&gt;　　cd libfastcommon-1.0.7/&lt;br/&gt;　　./make.sh&lt;br/&gt;　　./make.sh install&lt;br/&gt;　　cd /usr&lt;br/&gt;　　cp lib64/libfastcommon.so lib/&lt;br/&gt;4.安装FastDFS主体程序&lt;br/&gt;　　tar -zxvf FastDFS_v5.05.tar.gz&lt;br/&gt;　　cd FastDFS&lt;br/&gt;　　./make.sh&lt;br/&gt;　　./make.sh install&lt;br/&gt;5.配置FastDFS之tracker&lt;br/&gt;　　cd /root/FastDFS/conf/&lt;br/&gt;　　cp ./* /etc/fdfs/&lt;br/&gt;　　mkdir -p /home/FastDFS&lt;br/&gt;　　vim tracker.conf&lt;br/&gt;　　22 #base_path=/home/yuqing/fastdfs&lt;br/&gt;　　23 base_path=/home/FastDFS&lt;br/&gt;退出vim&lt;br/&gt;　　/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart&lt;br/&gt;---------------验证tracker是否正常启动----------------------&lt;br/&gt;　　[root@right fdfs]# ps -ef|grep trackerd|grep -v grep&lt;br/&gt;　　root 34054 1 0 11:12 ? 00:00:00 /usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart&lt;br/&gt;　　[root@right fdfs]# netstat -anp|grep 34054&lt;br/&gt;　　tcp 0 0 0.0.0.0:22122 0.0.0.0:* LISTEN 34054/fdfs_trackerd&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;6.配置FastDFS之storage&lt;br/&gt;　　mkdir -p /home/FastDFS/fdfs_storage&lt;br/&gt;　　vim /etc/fdfs/storage.conf&lt;br/&gt;　　41 #base_path=/home/yuqing/fastdfs&lt;br/&gt;　　42 base_path=/home/FastDFS&lt;br/&gt;　　110 # store_path0=/home/yuqing/fastdfs&lt;br/&gt;　　111 store_path0=/home/FastDFS/fdfs_storage&lt;br/&gt;　　120 tracker_server=192.168.159.249:22122&lt;br/&gt;退出vim&lt;br/&gt;　　/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart&lt;br/&gt;---------------验证storage是否正常启动----------------------&lt;br/&gt;　　[root@right fdfs]# ps -ef|grep storaged|grep -v grep&lt;br/&gt;　　root 34141 1 1 11:23 ? 00:00:00 /usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart&lt;br/&gt;　　[root@right fdfs]# netstat -anp|grep 34141&lt;br/&gt;　　tcp 0 0 0.0.0.0:23000 0.0.0.0:* LISTEN 34141/fdfs_storaged&lt;br/&gt;　　tcp 0 0 192.168.159.249:56519 192.168.159.249:22122 ESTABLISHED 34141/fdfs_storaged&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;7.配置FastDFS之client&lt;br/&gt;　　vim /etc/fdfs/client.conf&lt;br/&gt;　　base_path=/home/FastDFS&lt;br/&gt;　　tracker_server=192.168.159.134:22122&lt;br/&gt;　　/usr/bin/fdfs_test /etc/fdfs/client.conf upload /root/aaa.jpg&lt;br/&gt;8.安装Nginx并和FastDFS整合&lt;br/&gt;　　mv fastdfs-nginx-module_v1.16.tar.gz /usr/local/&lt;br/&gt;　　cd /usr/local/&lt;br/&gt;　　tar -zxvf fastdfs-nginx-module_v1.16.tar.gz&lt;br/&gt;　　cd fastdfs-nginx-module/src&lt;br/&gt;　　vim config&lt;br/&gt;-----------------修改后的内容---------------------&lt;br/&gt;　　1 ngx_addon_name=ngx_http_fastdfs_module&lt;br/&gt;　　2 HTTP_MODULES=&quot;$HTTP_MODULES ngx_http_fastdfs_module&quot;&lt;br/&gt;　　3 NGX_ADDON_SRCS=&quot;$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_fastdfs_module.c&quot;&lt;br/&gt;　　4 CORE_INCS=&quot;$CORE_INCS /usr/include/fastdfs /usr/include/fastcommon/&quot;&lt;br/&gt;　　5 CORE_LIBS=&quot;$CORE_LIBS -L/usr/lib -lfastcommon -lfdfsclient&quot;&lt;br/&gt;　　6 CFLAGS=&quot;$CFLAGS -D_FILE_OFFSET_BITS=64 -DFDFS_OUTPUT_CHUNK_SIZE='256*1024' -DFDFS_MOD_CONF_FILENAME='\&quot;/etc/fdfs/mod_fa stdfs.conf\&quot;'&quot;&lt;br/&gt;--------------------------------------------------&lt;br/&gt;退出vim&lt;br/&gt;　　cp mod_fastdfs.conf /etc/fdfs/&lt;br/&gt;　　vim /etc/fdfs/mod_fastdfs.conf&lt;br/&gt;---------------需要修改的内容------------------&lt;br/&gt;　　base_path=/home/FastDFS&lt;br/&gt;　　tracker_server=192.168.159.134:22122&lt;br/&gt;　　# tracker_server=192.168.159.132:22122（多个tracker配置多行）&lt;br/&gt;　　url_have_group_name=true #URL中包含group名称&lt;br/&gt;　　store_path0=/home/FastDFS/fdfs_storage #指定文件存储路径&lt;br/&gt;-----------------------------------------------&lt;br/&gt;退出vim&lt;br/&gt;　　mkdir -p /var/temp/nginx/client&lt;br/&gt;进入Nginx文件所在目录&lt;br/&gt;　　tar -zxvf nginx-1.8.0.tar.gz&lt;br/&gt;　　cd nginx-1.8.0&lt;br/&gt;　　./configure \&lt;br/&gt;　　--prefix=/usr/local/nginx \&lt;br/&gt;　　--pid-path=/var/run/nginx/nginx.pid \&lt;br/&gt;　　--lock-path=/var/lock/nginx.lock \&lt;br/&gt;　　--error-log-path=/var/log/nginx/error.log \&lt;br/&gt;　　--http-log-path=/var/log/nginx/access.log \&lt;br/&gt;　　--with-http_gzip_static_module \&lt;br/&gt;　　--http-client-body-temp-path=/var/temp/nginx/client \&lt;br/&gt;　　--http-proxy-temp-path=/var/temp/nginx/proxy \&lt;br/&gt;　　--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \&lt;br/&gt;　　--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \&lt;br/&gt;　　--http-scgi-temp-path=/var/temp/nginx/scgi \&lt;br/&gt;　　--add-module=/usr/local/fastdfs-nginx-module/src/&lt;br/&gt;　　make&lt;br/&gt;　　make install&lt;br/&gt;　　vim /usr/local/nginx/conf/nginx.conf&lt;br/&gt;-------------加入如下内容-----------------&lt;br/&gt;　　server {&lt;br/&gt;　　　　listen 80;&lt;br/&gt;　　　　server_name 192.168.159.249;&lt;/p&gt;&lt;p&gt;　　　　location /group1/M00/{&lt;br/&gt;　　　　ngx_fastdfs_module;&lt;br/&gt;　　　　　　}&lt;br/&gt;　　　　}&lt;br/&gt;-------------------------------------------&lt;br/&gt;退出vim&lt;br/&gt;　　/usr/local/nginx/sbin/nginx&lt;br/&gt;　　service iptables stop&lt;/p&gt;&lt;p&gt;配置Nginx开机自动启动&lt;br/&gt;　　vim /etc/rc.d/rc.local&lt;br/&gt;　　/usr/local/nginx/sbin/nginx&lt;/p&gt;
&lt;p&gt;-----------------&lt;br/&gt;设置防火墙开机不启动&lt;br/&gt;　　chkconfig iptables off&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 16:14:00 +0000</pubDate>
<dc:creator>西北野狼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/androidsuperman/p/7639324.html</dc:identifier>
</item>
<item>
<title>asp.net core封装layui组件示例分享 - 易墨</title>
<link>http://www.cnblogs.com/morang/p/7639033.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/morang/p/7639033.html</guid>
<description>&lt;p&gt;用什么封装？这里只是用了TagHelper，是啥？自己瞅&lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/mvc/views/tag-helpers/authoring&quot;&gt;文档&lt;/a&gt;去&lt;/p&gt;
&lt;p&gt;在学习使用TagHelper的时候，最希望的就是能有个Demo能够让自己作为参考&lt;br/&gt;怎么去封装一个组件？&lt;br/&gt;不同的情况怎么去实现？&lt;br/&gt;有没有更好更高效的方法？&lt;/p&gt;
&lt;p&gt;找啊找啊找，最后跑去看了看mvc中的&lt;a href=&quot;https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.TagHelpers/&quot;&gt;TagHelpers&lt;/a&gt;，再好好瞅了瞅&lt;a href=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/mvc/views/tag-helpers/authoring&quot;&gt;TagHelper的文档&lt;/a&gt;&lt;br/&gt;勉强折腾了几个组件出来，本来想一个组件一个组件写文章的，但是发现国庆已经结束了~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://coding.net/u/yimocoding/p/WeDemo/git/archive/LayuiTagHelper&quot;&gt;Demo下载&lt;/a&gt; &lt;a href=&quot;https://dn-coding-net-production-pp.qbox.me/c77da03e-5911-4952-9b2a-06285df05f56.gif&quot;&gt;效果预览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码仅供参考,有不同的意见也忘不吝赐教&lt;/p&gt;
&lt;h2 id=&quot;checkbox复选框组件封装&quot;&gt;Checkbox复选框组件封装&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;标签名称：&lt;code&gt;cl-checkbox&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;标签属性：
&lt;ul&gt;&lt;li&gt;&lt;code&gt;asp-for&lt;/code&gt;:绑定的字段，必须指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asp-items&lt;/code&gt;:绑定单选项 类型为：&lt;code&gt;IEnumerable&amp;lt;SelectListItem&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asp-skin&lt;/code&gt;:layui的皮肤样式，默认or原始 &lt;img src=&quot;https://dn-coding-net-production-pp.qbox.me/69db93df-b59b-4c4e-bf7c-961b18435c56.png&quot; alt=&quot;图片&quot;/&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asp-title&lt;/code&gt;:若只是一个复选框时显示的文字，且未指定items，默认Checkbox的值为true&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;其中在封装的时候看源代码发现两段非常有用的代码&quot;&gt;其中在封装的时候看源代码发现两段非常有用的代码&lt;/h3&gt;
&lt;ol readability=&quot;3.3483146067416&quot;&gt;&lt;li&gt;判断是否可以多选：&lt;br/&gt;&lt;code&gt;var realModelType = For.ModelExplorer.ModelType; //通过类型判断是否为多选 var _allowMultiple = typeof(string) != realModelType &amp;amp;&amp;amp; typeof(IEnumerable).IsAssignableFrom(realModelType);&lt;/code&gt;&lt;/li&gt;
&lt;li readability=&quot;9.3283582089552&quot;&gt;
&lt;p&gt;获取模型绑定的列表值(多选的情况)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var currentValues = Generator.GetCurrentValues(ViewContext,For.ModelExplorer,expression: For.Name,allowMultiple: true);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这3句代码是在&lt;a href=&quot;https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.TagHelpers/SelectTagHelper.cs&quot;&gt;mvc自带的SelectTagHelper&lt;/a&gt;中发现的.&lt;br/&gt;因为core其实已经提供了非常多的TagHelper,比如常用的select就是很好的参考对象，封装遇到问题的时候去找找看指不定就又意外的收获.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;checkboxtaghelper代码&quot;&gt;CheckboxTagHelper代码&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Razor.TagHelpers;

namespace LayuiTagHelper.TagHelpers
{
    /// &amp;lt;summary&amp;gt;
    /// 复选框
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;remarks&amp;gt;
    /// 当Items为空时显示单个，且选择后值为true
    /// &amp;lt;/remarks&amp;gt;
    [HtmlTargetElement(CheckboxTagName)]
    public class CheckboxTagHelper : TagHelper
    {
        private const string CheckboxTagName = &quot;cl-checkbox&quot;;
        private const string ForAttributeName = &quot;asp-for&quot;;
        private const string ItemsAttributeName = &quot;asp-items&quot;;
        private const string SkinAttributeName = &quot;asp-skin&quot;;
        private const string SignleTitleAttributeName = &quot;asp-title&quot;;
        protected IHtmlGenerator Generator { get; }
        public CheckboxTagHelper(IHtmlGenerator generator)
        {
            Generator = generator;
        }

        [ViewContext]
        public ViewContext ViewContext { get; set; }

        [HtmlAttributeName(ForAttributeName)]
        public ModelExpression For { get; set; }

        [HtmlAttributeName(ItemsAttributeName)]
        public IEnumerable&amp;lt;SelectListItem&amp;gt; Items { get; set; }

        [HtmlAttributeName(SkinAttributeName)]
        public CheckboxSkin Skin { get; set; } = CheckboxSkin.默认;

        [HtmlAttributeName(SignleTitleAttributeName)]
        public string SignleTitle { get; set; }

        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            //获取绑定的生成的Name属性
            string inputName = ViewContext.ViewData.TemplateInfo.GetFullHtmlFieldName(For?.Name);
            string skin = string.Empty;
            #region 风格
            switch (Skin)
            {
                case CheckboxSkin.默认:
                    skin = &quot;&quot;;
                    break;
                case CheckboxSkin.原始:
                    skin = &quot;primary&quot;;
                    break;
            }
            #endregion
            #region 单个复选框
            if (Items == null)
            {
                output.TagName = &quot;input&quot;;
                output.TagMode = TagMode.SelfClosing;
                output.Attributes.Add(&quot;type&quot;, &quot;checkbox&quot;);
                output.Attributes.Add(&quot;id&quot;, inputName);
                output.Attributes.Add(&quot;name&quot;, inputName);
                output.Attributes.Add(&quot;lay-skin&quot;, skin);
                output.Attributes.Add(&quot;title&quot;, SignleTitle);
                output.Attributes.Add(&quot;value&quot;, &quot;true&quot;);
                if (For?.Model?.ToString().ToLower() == &quot;true&quot;)
                {
                    output.Attributes.Add(&quot;checked&quot;, &quot;checked&quot;);
                }
                return;
            }
            #endregion
            #region 复选框组
            var currentValues = Generator.GetCurrentValues(ViewContext,For.ModelExplorer,expression: For.Name,allowMultiple: true);
            foreach (var item in Items)
            {
                var checkbox = new TagBuilder(&quot;input&quot;);
                checkbox.TagRenderMode = TagRenderMode.SelfClosing;
                checkbox.Attributes[&quot;type&quot;] = &quot;checkbox&quot;;
                checkbox.Attributes[&quot;id&quot;] = inputName;
                checkbox.Attributes[&quot;name&quot;] = inputName;
                checkbox.Attributes[&quot;lay-skin&quot;] = skin;
                checkbox.Attributes[&quot;title&quot;] = item.Text;
                checkbox.Attributes[&quot;value&quot;] = item.Value;
                if (item.Disabled)
                {
                    checkbox.Attributes.Add(&quot;disabled&quot;, &quot;disabled&quot;);
                }
                if (item.Selected || (currentValues != null &amp;amp;&amp;amp; currentValues.Contains(item.Value)))
                {
                    checkbox.Attributes.Add(&quot;checked&quot;, &quot;checked&quot;);
                }

                output.Content.AppendHtml(checkbox);
            }
            output.TagName = &quot;&quot;;
            #endregion
        }
    }
    public enum CheckboxSkin
    {
        默认,
        原始
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用示例&quot;&gt;使用示例&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@{
string sex=&quot;男&quot;;
var Items=new List&amp;lt;SelectListItem&amp;gt;()
           {
                new SelectListItem() { Text = &quot;男&quot;, Value = &quot;男&quot; },
                new SelectListItem() { Text = &quot;女&quot;, Value = &quot;女&quot;},
                new SelectListItem() { Text = &quot;不详&quot;, Value = &quot;不详&quot;,Disabled=true }
           };
}
&amp;lt;cl-checkbox asp-items=&quot;Model.Items&quot; asp-for=&quot;Hobby1&quot; asp-skin=&quot;默认&quot;&amp;gt;&amp;lt;/cl-checkbox&amp;gt;
&amp;lt;cl-checkbox asp-for=&quot;Hobby3&quot; asp-title=&quot;单个复选框&quot;&amp;gt;&amp;lt;/cl-checkbox&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;radio单选框组件封装&quot;&gt;Radio单选框组件封装&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;标签名称：&lt;code&gt;cl-radio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;标签属性：
&lt;ul&gt;&lt;li&gt;&lt;code&gt;asp-for&lt;/code&gt;:绑定的字段，必须指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asp-items&lt;/code&gt;:绑定单选项 类型为：&lt;code&gt;IEnumerable&amp;lt;SelectListItem&amp;gt;&lt;/code&gt;&lt;br/&gt;太简单了，直接上代码了&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;radiotaghelper代码&quot;&gt;RadioTagHelper代码&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Razor.TagHelpers;

namespace LayuiTagHelper.TagHelpers
{
    /// &amp;lt;summary&amp;gt;
    /// 单选框
    /// &amp;lt;/summary&amp;gt;
    [HtmlTargetElement(RadioTagName)]
    public class RadioTagHelper : TagHelper
    {
        private const string RadioTagName = &quot;cl-radio&quot;;
        private const string ForAttributeName = &quot;asp-for&quot;;
        private const string ItemsAttributeName = &quot;asp-items&quot;;

        [ViewContext]
        public ViewContext ViewContext { get; set; }

        [HtmlAttributeName(ForAttributeName)]
        public ModelExpression For { get; set; }

        [HtmlAttributeName(ItemsAttributeName)]
        public IEnumerable&amp;lt;SelectListItem&amp;gt; Items { get; set; }

        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            if (For == null)
            {
                throw new ArgumentException(&quot;必须绑定模型&quot;);
            }
            foreach (var item in Items)
            {
                var radio = new TagBuilder(&quot;input&quot;);
                radio.TagRenderMode = TagRenderMode.SelfClosing;
                radio.Attributes.Add(&quot;id&quot;, ViewContext.ViewData.TemplateInfo.GetFullHtmlFieldName(For.Name));
                radio.Attributes.Add(&quot;name&quot;, ViewContext.ViewData.TemplateInfo.GetFullHtmlFieldName(For.Name));
                radio.Attributes.Add(&quot;value&quot;, item.Value);
                radio.Attributes.Add(&quot;title&quot;, item.Text);
                radio.Attributes.Add(&quot;type&quot;, &quot;radio&quot;);
                if (item.Disabled)
                {
                    radio.Attributes.Add(&quot;disabled&quot;, &quot;disabled&quot;);
                }
                if (item.Selected || item.Value == For.Model?.ToString())
                {
                    radio.Attributes.Add(&quot;checked&quot;, &quot;checked&quot;);
                }
                output.Content.AppendHtml(radio);
            }
            output.TagName = &quot;&quot;;
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用示例-1&quot;&gt;使用示例&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;@{
string sex=&quot;男&quot;;
var Items=new List&amp;lt;SelectListItem&amp;gt;()
           {
                new SelectListItem() { Text = &quot;男&quot;, Value = &quot;男&quot; },
                new SelectListItem() { Text = &quot;女&quot;, Value = &quot;女&quot;},
                new SelectListItem() { Text = &quot;不详&quot;, Value = &quot;不详&quot;,Disabled=true }
           };
}
&amp;lt;cl-radio asp-items=&quot;@Items&quot; asp-for=&quot;sex&quot;&amp;gt;&amp;lt;/cl-radio&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;最后再来一个开关组件&quot;&gt;最后再来一个开关组件&lt;/h2&gt;
&lt;p&gt;单个复选框其实可以直接用开关代替，恰巧layui中也有，于是也将开关单独的封装了一下，代码大同小异&lt;br/&gt;就这个 &lt;img src=&quot;https://dn-coding-net-production-pp.qbox.me/641f3e46-7b20-41b5-8b17-56e3cb3d9ad3.png&quot; alt=&quot;图片&quot;/&gt;&lt;br/&gt;使用也简单：&lt;code&gt;&amp;lt;cl-switch asp-for=&quot;Hobby4&quot; asp-switch-text=&quot;开启|关闭&quot;&amp;gt;&amp;lt;/cl-switch&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;namespace LayuiTagHelper.TagHelpers
{
    /// &amp;lt;summary&amp;gt;
    /// 开关
    /// &amp;lt;/summary&amp;gt;
    [HtmlTargetElement(SwitchTagName)]
    public class SwitchTagHelper : TagHelper
    {
        private const string SwitchTagName = &quot;cl-switch&quot;;
        private const string ForAttributeName = &quot;asp-for&quot;;
        private const string SwitchTextAttributeName = &quot;asp-switch-text&quot;;

        protected IHtmlGenerator Generator { get; }
        public SwitchTagHelper(IHtmlGenerator generator)
        {
            Generator = generator;
        }

        [ViewContext]
        public ViewContext ViewContext { get; set; }

        [HtmlAttributeName(ForAttributeName)]
        public ModelExpression For { get; set; }

        [HtmlAttributeName(SwitchTextAttributeName)]
        public string SwitchText { get; set; } = &quot;ON|OFF&quot;;

        public override void Process(TagHelperContext context, TagHelperOutput output)
        {
            string inputName = ViewContext.ViewData.TemplateInfo.GetFullHtmlFieldName(For?.Name);
            output.TagName = &quot;input&quot;;
            output.TagMode = TagMode.SelfClosing;
            if (For?.Model?.ToString().ToLower() == &quot;true&quot;)
            {
                output.Attributes.Add(&quot;checked&quot;, &quot;checked&quot;);
            }
            output.Attributes.Add(&quot;type&quot;, &quot;checkbox&quot;);
            output.Attributes.Add(&quot;id&quot;, inputName);
            output.Attributes.Add(&quot;name&quot;, inputName);
            output.Attributes.Add(&quot;value&quot;, &quot;true&quot;);
            output.Attributes.Add(&quot;lay-skin&quot;, &quot;switch&quot;);
            output.Attributes.Add(&quot;lay-text&quot;, SwitchText);

        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;封装的还很粗糙，正常的使用是没问题的，若发现问题，还望园友指出。&lt;br/&gt;因为layui是直接在页面加载后渲染的表单标签，故没有多少和layui相关的样式。&lt;br/&gt;除了一些表单组件之外，其实还对选项卡，时间轴，分页，代码显示组件做了一些封装，这些后面再介绍了。&lt;br/&gt;当然，有兴趣的朋友可以先去&lt;a href=&quot;https://coding.net/u/yimocoding/p/WeDemo/git/tree/LayuiTagHelper/LayuiTagHelper/TagHelpers&quot;&gt;一睹为快&lt;/a&gt;看看都实现了哪些组件&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 16:14:00 +0000</pubDate>
<dc:creator>易墨</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/morang/p/7639033.html</dc:identifier>
</item>
<item>
<title>JavaWeb（三）JSP之3个指令、6个动作、9个内置对象和4大作用域 - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/7637399.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/7637399.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　前面大概介绍了什么是JSP，今天我给大家介绍一下JSP的三个指令、6个动作以及它的9大内置对象。接下来我们就直接进入正题&lt;/p&gt;

&lt;p&gt;JSP指令（directive）是为&lt;span&gt;JSP引擎而设计的，它们并不直接产生任何可见输出，而只是告诉引擎如何处理JSP页面中的其余部分&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;指令用来&lt;span&gt;申明JSP页面的一些属性&lt;/span&gt;，比如编码方式，文档类型。我们在servlet中也会申明我们使用的编码方式和响应的文档类型的，而JSP就是用指令来申明。上面我们也说到了一条指令，也就是page指令。&lt;/p&gt;
&lt;p&gt;JSP指令格式：&lt;span&gt;&amp;lt;%@ directive {attribute=value}* %&amp;gt;&lt;/span&gt;（&amp;lt;%@ 指令名称 属性1=“属性值1” 属性2=“属性值2”。。。%&amp;gt;）&lt;/p&gt;
&lt;p&gt;　　分析：　　&lt;/p&gt;
&lt;p&gt;　　　　directive：指令名称，例如page指令&lt;/p&gt;
&lt;p&gt;　　　　attribute=value：紧跟指令名称后面的就是各种属性，以键值对的形式书写&lt;/p&gt;
&lt;p&gt;　　　　*：代表后面能跟0个或多个属性。&lt;/p&gt;
&lt;h2&gt;1.1、page指令（用来声明JSP页面的属性等）&lt;/h2&gt;
&lt;p&gt;　　&amp;lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&amp;gt;　　page指令，后面跟着三个属性，分别是language、contentType、pageEncoding。&lt;/p&gt;
&lt;p&gt;　　这只是其中的几个属性，并没有写全，page指令允许的属性如下表所示：　&lt;/p&gt;
&lt;p&gt;　　　　　　　　属性名称　　　　　　　　取值范围　　　　　　　　　　描述&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　language&lt;/span&gt;　　　　　　　　java　　　　　　解释&lt;span&gt;该JSP文件时采用的语言，一般为java语言，默认为java&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　extends　　　　　　　　任何类的全名　　　编译该JSP文件时继承哪个类，JSP为Servlet，因此当指明继承普通类时需要实现Servlet的init、destroy等方法&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　import　　&lt;/span&gt;　　　　　　　任何包名、类名　　引入&lt;span&gt;该JSP中用到的类、包等，import是唯一可以声明多次的page指令属性&lt;/span&gt;，一个import可以引用uogelei，中间用英文逗号隔开，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　如&amp;lt;%@ page import=&quot;java.util.List,java.util.ArrayList&quot;%&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　session　&lt;/span&gt;　　　　　　　true、false　　　　该&lt;span&gt;JSP内是否内置Session对象，如果为true，则内置Session对象，可直接使用，否则反之，默认为true&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　autoFlush　　　　　　　true，false　　　　是否运行缓存，如果为true，则使用out.println()等方法输出的字符串并不是立刻到达客户端服务器的，而是暂时存到缓存里，缓存满&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　了或者程序执行完毕或者执行out.flush()操作时才到客户端，默认为true。&lt;/p&gt;
&lt;p&gt;　　　　　　　　buffer　　　　　　　　none或者数字KB　　　指定缓存大小，当autoFlush设为true时有效，例如&amp;lt;%@ page buffer=10kb%&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　isThreadSafe　　　　　　true，false　　　　是否线程安全，如果为true，则运行多个线程同时运行该jsp程序，否则只运行一个线程，其余线程等待，默认为false&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　isErrorPage　&lt;/span&gt;　　　　　true，false　　　　　指定&lt;span&gt;该页面是否为错误显示页面，如果为true，则该JSP内置有一个Exception对象exception，可直接使用，否则没有，默认为false&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　errorPage&lt;/span&gt;　　　　　某个JSP页面的相对路径　　指明&lt;span&gt;一个错误页面，如果该JSP程序抛出一个未捕捉的异常，则转到errorPage指定的页面，errorPage指定的页面通常&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　isErrorPage属性为true&lt;/span&gt;，且内置的exception对象为未捕捉的异常&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　contentType&lt;/span&gt;　　　　　有效的文档类型　　　&lt;span&gt;　客户端浏览器根据该属性判断文档类型&lt;/span&gt;，例如 HTML格式为text/html、纯文本格式为text/plain、JPG图像为image/jpeg、GIF图像为image/gif、&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　WORD文档为application/msword，该属性常跟着charset设置编码一起，作用是通知服务器和浏览器都使用同一个码表&lt;/p&gt;
&lt;p&gt;　　　　　　　　info　　　　　　　　　　任意字符串　　　　　　指明JSP的信息，该信息可以通过Servlet.getServletInfo()方法获取到&lt;/p&gt;
&lt;p&gt;　　　　trimDirective Whitespaces　　　　true、false　　　　　是否去掉指令前后的空白字符，默认为false&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;span&gt;　pageEncoding&lt;/span&gt;　　　　UTF-8,ISO-8859-1等　　　　&lt;span&gt;指定一张码表来对该JSP页面进行编码&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1.2、include指令&lt;/h2&gt;
&lt;p&gt;　　比较简单，只有一种形式&lt;span&gt; &amp;lt;%@ include file=&quot;relativeURL&quot;%&amp;gt;&lt;/span&gt;　　relativeURL：&lt;span&gt;本应用程序内另一个JSP文件或者HTML文件的路径&lt;/span&gt;，例如，网址内所有页面均有一个统一风格的导航栏和页脚版权，那么就可以使用该指令将其包含进来。&lt;/p&gt;
&lt;p&gt;　　特点：include指令会&lt;span&gt;将包含页面的源代码添加到使用include指令的页面中来，然后编译成class文件&lt;/span&gt;，而等下会讲到的一个JSP行为，&amp;lt;jsp:include page=&quot;relativeURL&quot;&amp;gt;作用跟include指令一样，&lt;/p&gt;
&lt;p&gt;　　　　　　但是不同的是，include行为是运行时单独执行包含页面，然后把执行的结果包含到本页面来，属于先运行后包含。　　&lt;/p&gt;
&lt;p&gt;　　注意：　　&lt;/p&gt;
&lt;p&gt;　　　　静态包含：把其它资源包含到当前页面中。&lt;br/&gt;　　　　　　&amp;lt;%@ include file=&quot;/include/header.jsp&quot; %&amp;gt;&lt;br/&gt;　　　　动态包含：&lt;br/&gt;　　　　　　&amp;lt;jsp:include page=&quot;/include/header.jsp&quot;&amp;gt;&amp;lt;/jsp:include&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　两者的区别：翻译的时间段不同&lt;br/&gt;　　　　　　前者：在翻译时就把两个文件合并&lt;br/&gt;　　　　　　后者：不会合并文件，当代码执行到include时，才包含另一个文件的内容。&lt;/p&gt;
&lt;p&gt;　　　　原则：能用静的就不用动的。&lt;/p&gt;
&lt;h2&gt;1.3、taglib指令&lt;/h2&gt;
&lt;p&gt;　　JSP支持标签技术，后面会讲到标签的用法，jstl标签库的使用等，&lt;/p&gt;
&lt;p&gt;　　作用：用来&lt;span&gt;指明JSP页面内使用的JSP标签库，taglib指令有两个属性，uri为类库的地址，prefix为标签的前缀&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&amp;gt;&lt;/p&gt;

&lt;p&gt;前面讲了JSP语法，介绍了JSP页面中的内容有哪些，分别有什么作用，就两个东西，模块数据和元素。其中元素有包括脚本，指令，标签，脚本就是JSP中嵌入java代码，指令作用就是申明页面的属性，&lt;/p&gt;
&lt;p&gt;那标签是干嘛的，&lt;span&gt;标签分为JSP自带内置的标签，和通过taglib指令来使用JSP标签库&lt;/span&gt;，或者自定义标签。现在我们先来讲一些JSP内置的标签。　&lt;/p&gt;
&lt;p&gt;&lt;span&gt;JSP内置的标签就被称为JSP行为&lt;/span&gt;(JSP Actions)。只要书写很少的标记代码就能使用JSP提供的丰富功能，JSP行为其实是&lt;span&gt;对常用的JSP功能的抽象与封装，可以取代jsp脚本，让JSP中就少一些嵌入java代码的地方&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;简单的说就是使用标签的形式来表示一段java代码　&lt;/p&gt;
&lt;p&gt;格式：&amp;lt;jsp:elements ｛attribute=&quot;value&quot;｝* /&amp;gt;　　&lt;/p&gt;
&lt;p&gt;　　分析：&lt;/p&gt;
&lt;p&gt;　　　　　jsp：标签的前缀，说明是jsp内置的标签，&lt;/p&gt;
&lt;p&gt;　　　　　elements：行为的名称，&lt;/p&gt;
&lt;p&gt;　　　　　attribute=value：使用键值对来编写属性&lt;/p&gt;
&lt;p&gt;　　　　　*：能指定0个或多个属性对&lt;/p&gt;
&lt;h2&gt;2.1、&amp;lt;jsp:include /&amp;gt;行为（动态包含）&lt;/h2&gt;
&lt;p&gt;　　&amp;lt;jsp:include page=&quot;/include/header.jsp&quot;&amp;gt;&amp;lt;/jsp:include&amp;gt;&lt;/p&gt;
&lt;p&gt;　　include行为用于&lt;span&gt;运行时包含某个文件，如果被包含的文件为JSP程序，则先会执行JSP程序，然后在把执行的结果包含进来&lt;/span&gt;。　&lt;/p&gt;
&lt;p&gt;　　作用是跟include指令一样的，唯一的区别就在于，&lt;span&gt;include指令是将被包含的文件的源码加入到了本JSP程序中，然后在进行编译，属于静态包含，而include行为只是将被包含的文件的运行结果包含进自己。属于动态包含。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008214205871-540005881.png&quot; alt=&quot;&quot; width=&quot;573&quot; height=&quot;339&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span&gt;2.2、Java bean行为&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　是一组与Java Bean 相关的行为，包括&lt;span&gt;useBean行为、setProperty行为、getProperty行为&lt;/span&gt;等&lt;/span&gt;　　　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　Java Bean就是普通的Java类，也被称为POJO，只有私有的属性与对应的getter方法和setter方法，注意其中当私有的属性为boolean类型时，习惯上一般把getter方法写成isXxx();而不是getXxx();　　&lt;/p&gt;
&lt;p&gt;　　1）userBean行为&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&amp;lt;jsp:useBean id=&quot;beanObject&quot; class=&quot;className&quot; scope=&quot;Value&quot;&amp;gt;&lt;/span&gt;　　作用：&lt;span&gt;在jsp中定义一个java bean对象&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　分析： 　　&lt;/p&gt;
&lt;p&gt;　　　　　　id：指明Java Bean对象的名称，JSP中可以使用该名称引用该Java Bean对象，相当于给new出来的对象取一个变量名，&lt;/p&gt;
&lt;p&gt;　　　　　　class：Java Bean类的全名&lt;/p&gt;
&lt;p&gt;　　　　　　scope：该java bean对象的作用范围，可以写的就四个，也就是JSP的四大作用域，page、request、session、application&lt;/p&gt;
&lt;p&gt;　　　　　　　　page：只能在当前JSP页面使用，如果不在JSP页面，那么就会失效&lt;/p&gt;
&lt;p&gt;　　　　　　　　request：这个前面学过，A页面请求转发到B页面，那么使用的是同一个request，那么A,B页面都算是request的作用域，也就是通过请求转发的页面都是其作用域&lt;/p&gt;
&lt;p&gt;　　　　　　　　session：该作用域在一个web项目下任何位置应该读访问的到，只要cookie不关闭，并且cookie设置　　的访问路径为&quot;/&quot;，&lt;/p&gt;
&lt;p&gt;　　　　　　　   application：其实就是Servlet中的servletContext，服务器下的所有项目都能访问到。&lt;/p&gt;
&lt;p&gt;　　2）setProperty行为&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&amp;lt;jsp:setProperty name=&quot;beanName&quot; property=&quot;propertyName&quot; value=&quot;&quot;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　分析：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;span&gt;对Java Bean对象进行属性的设置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　name：java bean对象的名称，也就是在useBean行为中的id&lt;/p&gt;
&lt;p&gt;　　　　　　property：对象中的属性名，&lt;/p&gt;
&lt;p&gt;　　　　　　value：要对其属性进行赋值的值&lt;/p&gt;
&lt;p&gt;　　3）getProperty行为&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&amp;lt;jsp:getProperty name=&quot;beanName&quot; property=&quot;propertyName&quot; /&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　分析：　　　　　　　　　　　　&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;span&gt;获取JavaBean对象的某个属性值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　name:java bean 对象的名称，也就是在useBean行为中的id&lt;/p&gt;
&lt;p&gt;　　　　　　property：对象的属性名&lt;/p&gt;
&lt;p&gt;　　举例：javabean：User.java、NewFile.jsp&lt;/p&gt;
&lt;p&gt;　　User.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0dcb7084-c7d9-4284-9536-4a1b1a9755ba')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_0dcb7084-c7d9-4284-9536-4a1b1a9755ba&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0dcb7084-c7d9-4284-9536-4a1b1a9755ba&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0dcb7084-c7d9-4284-9536-4a1b1a9755ba',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0dcb7084-c7d9-4284-9536-4a1b1a9755ba&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package a;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
    }
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;User&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　NewFile.jsp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a688f06c-782f-4e04-b68e-01d7d5b995b8')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_a688f06c-782f-4e04-b68e-01d7d5b995b8&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a688f06c-782f-4e04-b68e-01d7d5b995b8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a688f06c-782f-4e04-b68e-01d7d5b995b8',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a688f06c-782f-4e04-b68e-01d7d5b995b8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;
    &amp;lt;!-- 创建一个新的javabean对象user,会先判断在page作用域内是否有叫user对象的javabean，如果有则取它，如果没有则创建新的javabean对象  --&amp;gt;
    &amp;lt;jsp:useBean id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a.User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; scope=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/jsp:useBean&amp;gt;
    &amp;lt;!-- 对javabean对象的username进行赋值 --&amp;gt;
    &amp;lt;jsp:setProperty property=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;faker&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;!-- 获取javabean对象的username属性 --&amp;gt;
    &amp;lt;jsp:getProperty property=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;NewFile.jsp&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　可以查看NewFile.jsp变为servlet后的源代码，看看我们写的javabean行为会被转换为何种语句:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008212031981-1088946525.png&quot; alt=&quot;&quot; width=&quot;853&quot; height=&quot;409&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里出现了一个JSP九大内置对象中的一个，pageContext。现在简单提一句，pageContext就是JSP页面的管理者(上下文)，其中的getAttribute(name，scope)方法是获取指定作用域中的数据的，&lt;/p&gt;
&lt;p&gt;　　如果getAttribute(name)方法的话，默认是对page作用域进行操作，findAttribute(name)依次从page、request、session、application获得内容。&lt;/p&gt;
&lt;p&gt;　　在第一个红框中，就代表中我们的useBean行为，其中进行了一次判断，就是如果在page作用域中找不到user这个对象，那么就创建一个新的，否则就使用找到的这个user对象，&lt;/p&gt;
&lt;p&gt;　　第二个红框中，代表着我们的setProperty行为，先找到user对象，然后在对其属性进行赋值&lt;/p&gt;
&lt;p&gt;　　第三个红框中，代表着我们的getProperty行为，也是先找到user对象，然后在获取其属性的值。&lt;/p&gt;
&lt;p&gt;　　注意：对于javabean行为来说，有一个特点的地方，就是当请求过来的参数对应javabean的属性时，可以为其一次性设置所有的值&lt;/p&gt;
&lt;p&gt;　　　　　　&amp;lt;jsp:setProperty name=&quot;user&quot; property=&quot;*&quot; /&amp;gt; //设置user的所有属性，属性值从request中自动取得，*代表所有属性。&lt;/p&gt;
&lt;h2&gt;2.3、&amp;lt;jsp:forward /&amp;gt;行为&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;实现请求转发功能&lt;/span&gt;，Servlet中通过request.getRequestDispatcher(&quot;someServlet&quot;).forward(request,response);而在JSP中也能够实现相同的功能，只不过用的是&amp;lt;jsp:forward /&amp;gt;行为，实际上forward行为就是对其进行了封装。　　&lt;/p&gt;
&lt;p&gt;　　格式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
　　　　　　　　&amp;lt;jsp:forward page=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;someServlet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
　　　　　　　　　　　&amp;lt;jsp:param name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;param1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
　　　　　　　　　　　&amp;lt;jsp:param name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;param2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
　　　　　　　　&amp;lt;/jsp:forward&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　分析：&lt;span&gt;page:需要跳转到的页面或者servlet、&amp;lt;jsp:param/&amp;gt;参数行为，带一些参数过去，name、value是以键值对的形式带过去的　&lt;/span&gt;　　　　&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　在NewFile.jsp中&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008215618746-324216886.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　在ForwardTestServlet中&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008215649996-80126185.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　访问：http://localhost:8080/Web_Jsp/NewFile.jsp&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008215728278-557893767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　浏览器地址栏没有改变，说明是请求转发&lt;/p&gt;
&lt;h2&gt;2.4、&amp;lt;jsp:directive/&amp;gt;行为&lt;/h2&gt;
&lt;p&gt;　　directive行为，就相当于JSP指令，比如&amp;lt;jsp:directive.page/&amp;gt;相当于&amp;lt;%@ page %&amp;gt;指令，等等其它指令是一样的书写格式。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;在我们开发中，经常要用到的6个行为是&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;jsp:include &amp;gt; 动态包含&lt;br/&gt;　　　　&amp;lt;jsp:forward&amp;gt; 请求转发&lt;br/&gt;　　　　&amp;lt;jsp:param&amp;gt; 设置请求参数&lt;/p&gt;
&lt;p&gt;　　　　&amp;lt;jsp:useBean&amp;gt; 创建一个对象&lt;br/&gt;　　　　&amp;lt;jsp:setProperty&amp;gt; 给指定的对象属性赋值&lt;br/&gt;　　　　&amp;lt;jsp:getProperty&amp;gt; 取出指定对象的属性值&lt;/p&gt;

&lt;p&gt;我们知道&lt;span&gt;JSP中的内容就只有两种，模版数据和元素&lt;/span&gt;，元素就包括了&lt;span&gt;指令，脚本，标签(行为)&lt;/span&gt;，&lt;span&gt;脚本会慢慢被标签全部代替&lt;/span&gt;，也就是说&lt;span&gt;JSP中基本上不会嵌入Java代码&lt;/span&gt;，但是我们也知道JSP会转换为servlet，&lt;/p&gt;
&lt;p&gt;在Servlet中，输出数据时，都需要通过response.getWrite()；但是&lt;span&gt;在JSP中，直接使用out对象进行输出&lt;/span&gt;，为什么呢？这就是因为out为JSP的一个隐藏对象，JSP中内置了9个隐藏对象，使得JSP比Servlet使用起来更简单，更方便。&lt;/p&gt;
&lt;h2&gt;3.1、九大内置对象概述&lt;/h2&gt;
&lt;p&gt; 　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008221554356-961080744.png&quot; alt=&quot;&quot; width=&quot;741&quot; height=&quot;316&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　分析：&lt;/p&gt;
&lt;p&gt;　　　　request:请求对象，　　类型：httpServletRequest&lt;/p&gt;
&lt;p&gt;　　　　response:响应对象　　类型：httpServletResponse&lt;/p&gt;
&lt;p&gt;　　　　session：表示一次会话，在服务器端记录用户状信息的技术&lt;/p&gt;
&lt;p&gt;　　　　application：标识web应用上下文，类型：ServletContext，详情就看Servlet中的ServletContext的使用&lt;/p&gt;
&lt;p&gt;　　　　exception 表示发生异常对象，类型 Throwable，在上面我们介绍page指令中的一个errorPage属性时就有说到他&lt;/p&gt;
&lt;p&gt;　　　　page：page对象代表当前JSP页面，是当前JSP编译后的Servlet类的对象。相当于this。&lt;/p&gt;
&lt;p&gt;　　　　config：标识Servlet配置，类型：ServletConfig，api跟Servlet中的ServletConfig对象是一样的，能获取该servlet的一些配置信息，能够获取ServletContext&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;out&lt;/span&gt;：输出响应体 类型：JspWriter&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;pageContext&lt;/span&gt;：表示 jsp页面上下文（jsp管理者） 类型：PageContext&lt;/p&gt;
&lt;p&gt;　　　　注意：标记了红色的对象就是JSP独有的，其他的都是Servlet中的老东西。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008222153637-272377643.png&quot; alt=&quot;&quot; width=&quot;889&quot; height=&quot;276&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在这个由jsp转换为servlet的文件中，只能看到8个内置对象，少了exception对象，因为我们在将page指令时，说过一个isErrorPage属性，默认是false，被关闭了，所以其中并没有exception对象。&lt;/p&gt;
&lt;h2&gt;3.2、pageContext（重要）&lt;/h2&gt;
&lt;p&gt;　　这个功能就比较强大了，基本上什么他都有，因为是它是&lt;span&gt;JSP页面的管理者(上下文)&lt;/span&gt;，所以JSP中的内置对象呀，它统统能够获得，下面介绍它的api：&lt;/p&gt;
&lt;p&gt;　　1）获得其它八大内置对象 getXxx()&lt;/p&gt;
&lt;p&gt;　　　　在&lt;span&gt;普通类中可以通过PageContext获取其他JSP隐式对象&lt;/span&gt;。自定义标签时就使用。&lt;/p&gt;
&lt;p&gt;　　　　pageContext.getOut();　　//获得out对象&lt;/p&gt;
&lt;p&gt;　　　　pageContext.getApplication();　　//获得application对象&lt;/p&gt;
&lt;p&gt;　　　　等等....&lt;/p&gt;
&lt;p&gt;　　2）对作用域的属性进行操作(四大作用域)&lt;/p&gt;
&lt;p&gt;　　　　对默认作用域的属性进行操作。page&lt;/p&gt;
&lt;p&gt;　　　　Object getAttribute(String name);　　//获得page作用域数据&lt;/p&gt;
&lt;p&gt;　　　　void setAttribute(String name,Object o);　　//给page作用域设置内容&lt;/p&gt;
&lt;p&gt;　　　　void removeAttribute(String name);　　//给page作用域移除内容&lt;/p&gt;
&lt;p&gt;　　3）对指定作用域的属性进行操作&lt;/p&gt;
&lt;p&gt;　　　　Object getAttribute(String name,int Scope);　　//获得 指定作用域中的数据&lt;/p&gt;
&lt;p&gt;　　　　void setAttribute(String name,Object o，int Scope);　　//给指定作用域设置内容&lt;/p&gt;
&lt;p&gt;　　　　void removeAttribute(String name,int Scope);     // 移除指定作用域的内容（page/request/session/application）&lt;/p&gt;
&lt;p&gt;　　4）提供作用域常量&lt;/p&gt;
&lt;p&gt;　　　　PageContext.PAGE_SCOPE　　page&lt;/p&gt;
&lt;p&gt;　　　　PageContext.REQUEST_SCOPE　　request　　　　　　&lt;/p&gt;
&lt;p&gt;　　　　PageContext.SESSION_SCOPE　　response&lt;/p&gt;
&lt;p&gt;　　　　PageContext.APPLICATION_SCOPE　　application&lt;/p&gt;
&lt;p&gt;　　5）一次获得指定名称内容&lt;/p&gt;
&lt;p&gt;　　　　page中最厉害的方法是：&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　　　　　findAttribute(String name);  //自动从page request session application依次查找，找到了就取值，结束查找。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　实例：&lt;/p&gt;
&lt;p&gt;　　　　在1.jsp中：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008223447840-1244057295.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　在2.jsp中&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008223533512-1419077294.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　6）提供了的简易方法　　&lt;/p&gt;
&lt;p&gt;　　　　pageContext.forward(&quot;2.jsp&quot;);&lt;br/&gt;　　　　pageContext.include(&quot;2.jsp&quot;);&lt;/p&gt;
&lt;h2&gt;3.3、out对象&lt;/h2&gt;
&lt;p&gt;　　类型：JspWriter&lt;/p&gt;
&lt;p&gt;　　jsp 输出底层使用 response.getWriter()；什么意思呢？这里就要讲解一下JSP缓存和Servlet缓存了，输出的过程是这样的&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008224847309-1455936154.png&quot; alt=&quot;&quot; width=&quot;710&quot; height=&quot;210&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　JSP页面转换为Servlet后，使用的out对象是JspWriter类型的，所以是会先将要发送的数据存入JSP输出缓存中，然后，等JSP输出缓存满了在自动刷新到servlet输出缓存，&lt;/p&gt;
&lt;p&gt;　　　　等serlvet输出缓存满了，或者程序结束了，就会将其输出到浏览器上。除非手动out.flush()。&lt;/p&gt;
&lt;p&gt;　　验证servlet输出缓存和JSP输出缓存和我们上面所说的是正确：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225010809-201390858.png&quot; alt=&quot;&quot; width=&quot;510&quot; height=&quot;139&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　结果：&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225115793-252361641.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　分析：&lt;/p&gt;
&lt;p&gt;　　　　　　如果按没有jsp缓存和servlet缓存的话，输出的结果应该是aaaabbbbcccc，但是输出的却是bbbbaaaacccc，为什么呢？按照我们上面所说的原理进行分析，out对象是先将其输出到JSP缓存中，所以aaaa加入了jsp缓存，&lt;/p&gt;
&lt;p&gt;　　　　　　而response.getWriter().print(&quot;bbbb&quot;)是直接将bbbb输出到servlet缓存中，然后又使用out对象将cccc输出到jsp缓存，到程序结束，servlet缓存中有bbbb，然后jsp会将缓存中的内容就刷新到servlet缓存中，&lt;/p&gt;
&lt;p&gt;　　　　　　serlvet就是bbbbaaaacccc了，然后到浏览器也就得到我们的输出结果了。如果在12行将注释去掉，那么输出的结果又会是什么呢？答案就是aaaabbbbcccc，过程自行分析。&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225212043-40705588.png&quot; alt=&quot;&quot; width=&quot;405&quot; height=&quot;185&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.4、config对象&lt;/h2&gt;
&lt;p&gt;　　类型：ServletConfig&lt;/p&gt;
&lt;p&gt;　　能够获取servlet的初始化参数，获取servletContext对象，获取servletName。&lt;/p&gt;
&lt;p&gt;　　这个我在servlet中详细的讲解了，可以去查看！&lt;/p&gt;
&lt;h2&gt;3.5、exception异常对象&lt;/h2&gt;
&lt;p&gt;　　包含了异常的信息&lt;/p&gt;
&lt;p&gt;　　使用它，必须&lt;span&gt;结合page指令中的isErrorPage属性和errorPage属性&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　exception.jsp　　抛异常的一个NullPointException，并且跳转到error.jsp错误显示页面　　errorPage属性的意思是如果发生未捕捉到的异常，将会跳转到error.jsp页面&lt;/p&gt;
&lt;p&gt;　　举例：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225444043-1716392215.png&quot; alt=&quot;&quot; width=&quot;512&quot; height=&quot;245&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　error.jsp　　isErrorPage属性说明该页面是一个错误显示页面，则可以使用exception对象&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225538871-1396341769.png&quot; alt=&quot;&quot; width=&quot;526&quot; height=&quot;222&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　访问：访问http://localhost:8080/Web_Jsp/exception.jsp&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171008225652590-2009111945.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结：九大内置对象和servlet中对象的关系　　&lt;/p&gt;
&lt;p&gt;　　page就是jsp转换为servletservlet对象本身，也就是this&lt;/p&gt;
&lt;p&gt;　　config -- Servlet中的servletConfig&lt;/p&gt;
&lt;p&gt;　　application -- Servlet中的ServletContext&lt;/p&gt;
&lt;p&gt;　　request　　-- Servlet中的request&lt;/p&gt;
&lt;p&gt;　　response　　-- Servlet中的response&lt;/p&gt;
&lt;p&gt;　　session　　-- Servlet中的session　　　　&lt;/p&gt;
&lt;p&gt;　　out　　--　JspWriter&lt;/p&gt;
&lt;p&gt;　　exception　　-- 异常对象&lt;/p&gt;
&lt;p&gt;　　pageContext　　-- 表示 jsp页面上下文（jsp管理者） 类型：PageContext&lt;/p&gt;
&lt;p&gt;　　其中pageContext是最厉害的，因为它可以得到其他8个内置对象　　&lt;/p&gt;

&lt;p&gt;这四大作用域，其实就是其九大内置对象中的四个，为什么说他们也是JSP的四大作用域呢？&lt;/p&gt;
&lt;p&gt;　　因为这&lt;span&gt;四个对象都能存储数据&lt;/span&gt;，比如request.setAttribute()注意和request.setParameter()区分开来，一个是存储在域中的、一个是请求参数，session.setAttribute()、application其实就是SerlvetContext，自然也有setAttribute()方法。&lt;/p&gt;
&lt;p&gt;　　而page作用域的操作就需要依靠pageContext对象来进行了。在上面我们也有提到JSP的四大作用域。&lt;/p&gt;
&lt;p&gt;1）page作用域&lt;/p&gt;
&lt;p&gt;　　代表变量&lt;span&gt;只能在当前页面上生效&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2）request作用域&lt;/p&gt;
&lt;p&gt;　　代表变量能&lt;span&gt;在一次请求中生效，一次请求可能包含一个页面，也可能包含多个页面&lt;/span&gt;，比如页面A请求转发到页面B。&lt;/p&gt;
&lt;p&gt;3）session作用域&lt;/p&gt;
&lt;p&gt;　　代表变量能在&lt;span&gt;一次会话中生效，基本上就是能在web项目下都有效&lt;/span&gt;，session的使用也跟cookie有很大的关系。一般来说，&lt;span&gt;只要浏览器不关闭，cookie就会一直生效，cookie生效，session的使用就不会受到影响&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;4）application作用域&lt;/p&gt;
&lt;p&gt;　　代表变量能&lt;span&gt;一个应用下(多个会话)，在服务器下的多个项目之间都能够使用&lt;/span&gt;。比如baidu、wenku等共享帐号。&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;喜欢就点个“推荐”哦！　　&lt;/strong&gt;&lt;/span&gt;　&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 15:07:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/7637399.html</dc:identifier>
</item>
<item>
<title>SpringBoot初体验 - 呼呼呼呼呼65</title>
<link>http://www.cnblogs.com/huhu1203/p/7638054.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huhu1203/p/7638054.html</guid>
<description>&lt;p&gt;&lt;span&gt;1.elipse中创建Springboot项目并启动&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;具体创建步骤请参考：&lt;a href=&quot;http://blog.csdn.net/clementad/article/details/51334064&quot;&gt;Eclipse中创建新的Spring Boot项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.项目的属性配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;a.首先我们在项目的resources目录下application.yml中添加以下内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: 8080
  #set a prefix on our URLRequestMapping
  #context-path: /boot

str1: hello
str2: world
content: &quot;str1: $&lt;/span&gt;{&lt;span&gt;str1&lt;/span&gt;}&lt;span&gt;, str2:$&lt;/span&gt;{&lt;span&gt;str2&lt;/span&gt;}&lt;span&gt;&quot;
gril: 
  name: Hanmeimei
  age: 21
boy: 
  name: Lilei
  age: 22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;谈谈数据绑定&lt;/p&gt;
&lt;p&gt;b.@Value，我们在我们创建的Controller中加入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
@ComponentScan(basePackages=&quot;com.huhu&quot;&lt;span&gt;)
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloController {
    
    @Value(&lt;/span&gt;&quot;${str1}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String str1;
    @Value(&lt;/span&gt;&quot;${str2}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String str2;
    @Value(&lt;/span&gt;&quot;${content}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String content; 
    
    
    @RequestMapping(value &lt;/span&gt;=&quot;/hello&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String say() {
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; str1+&quot; &quot;+str2+&quot; &quot;+&lt;span&gt;content;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008153550215-1943274266.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;c.@Component和@ConfigurationProperties的结合使用创建bean&lt;/p&gt;
&lt;p&gt;boy.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把普通pojo实例化到spring容器中，相当于配置文件中的&amp;lt;bean id=&quot;&quot; class=&quot;&quot;/&amp;gt;&lt;/span&gt;
&lt;span&gt;@Component
@ConfigurationProperties(prefix&lt;/span&gt;=&quot;boy&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Boy {
 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gril.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把普通pojo实例化到spring容器中，相当于配置文件中的&amp;lt;bean id=&quot;&quot; class=&quot;&quot;/&amp;gt;&lt;/span&gt;
&lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实现该类的属性与application.yml中的以gril为前缀的数据匹配&lt;/span&gt;
@ConfigurationProperties(prefix=&quot;gril&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Gril {
 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
    
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HelloController.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
@ComponentScan(basePackages=&quot;com.huhu&quot;&lt;span&gt;)
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloController {
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Gril gril;
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Boy boy;
    
    @RequestMapping(value &lt;/span&gt;=&quot;/hello&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String say() {
        
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; gril.getName()+&quot; &quot;+&lt;span&gt;boy.getName();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008155244168-645445242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里有一个问题，为什么它们都能把我们application.yml我们设置属性怎么就显示到网页上了？&lt;/p&gt;
&lt;p&gt;原因：当你没有声明ViewResolver时，spring会给你注册一个默认的ViewResolver，其是JstlView的实例。&lt;/p&gt;
&lt;p&gt;d.改变ViewResolver&lt;/p&gt;
&lt;p&gt;首先我们在pom.xml中添加依赖：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-thymeleaf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在resources/templates/中添加huhu.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Insert title here&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hello SpringBoot!&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改变HelloController.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
@ComponentScan(basePackages=&quot;com.huhu&quot;&lt;span&gt;)
@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HelloController {

    
    @RequestMapping(value &lt;/span&gt;=&quot;/hello&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String say() {
        
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;huhu&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008162326731-865530566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;细心的你是否发现了我上面用的是@Controller，上面都用的是@RestController，我们来看一下区别吧，官方文档里这样说：@RestController is a stereotype annotation that combines @ResponseBody and @Controller.很显然它包括了@ResponseBody and @Controller，上面我们改变了ViewResolver，当然要用@Controller了，json，xml也是类似的做法。&lt;/p&gt;
&lt;p&gt;你也可以把上面的HelloController.java改成：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
@ComponentScan(basePackages=&quot;com.huhu&quot;&lt;span&gt;)
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloController {&lt;br/&gt;@RequestMapping(value =&quot;/hello&quot;,method=RequestMethod.GET) &lt;br/&gt;public String say() { &lt;br/&gt;return &quot;huhu&quot;; &lt;br/&gt;} &lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008163240449-1601714335.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.SpringBoot杂谈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;a.SpringBoot的三种启动&lt;/p&gt;
&lt;p&gt;1.elipse或者idea一键启动&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008164011028-2053028892.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;2.mvn spring-boot:run&lt;/p&gt;
&lt;p&gt;3.mvn install    cd /target   java -jar ***.jar&lt;/p&gt;
&lt;p&gt;既然可以有多种启动方法，我们可不可以启动两个，满足我们线上和线下的开发需求呢？答案是可以：&lt;/p&gt;
&lt;p&gt;b.分环境启动SpringBoot&lt;/p&gt;
&lt;p&gt;先设置我们resources中application.yml，我们复制两个，分别起名为&lt;/p&gt;
&lt;p&gt;application-dev.yml&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: 8081
  #set a prefix on our URLRequestMapping
  #context-path: /boot

str1: hello
str2: world
content: &quot;str1: ${str1}, str2:${str2}&quot;
gril: 
  name: Hanmeimei
  age: 21
boy: 
  name: Lilei
  age: 22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;application-pro.yml&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;55.766305937409&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: 8080
  #set a prefix on our URLRequestMapping
  #context-path: /boot

str1: hello
str2: world
content: &quot;str1: ${str1}, str2:${str2}&quot;
gril: 
  name: Hanmeimei
  age: 21
boy: 
  name: Lilei
  age: 22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改application.yml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring:
  profiles:
    active: dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们分别启动，一个用elipse，一个用第三种方法cmd&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008165129293-981478489.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008165401356-1675296540.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008165546199-1117661442.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008165615574-483220446.png&quot; alt=&quot;&quot; width=&quot;413&quot; height=&quot;334&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有人会说，这无非就是开启了两个不同端口的tomcat么？这能做什么啊？&lt;/p&gt;
&lt;p&gt;对的，我想到了可以用它配合nginx做负载均衡啊，大家可以看看这个：&lt;a href=&quot;http://blog.csdn.net/wlwlwlwl015/article/details/48240867&quot;&gt;Nginx+Tomcat 实现负载均衡（Windows单机测试）&lt;/a&gt;，是不是SpringBoot让一些东西变简单了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 4.Spring操作mysql数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; a.pom.xml引入两个依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b.在application.yml中写入配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  datasource:
    driver-class-name: com.mysql.jdbc.Driver 
    url: jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf8&lt;/span&gt;&lt;span&gt;&amp;amp;useSSL&lt;/span&gt;&lt;span&gt;=false
    username: root
    password: taizi1203
    
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;c.创建你要在数据库中写的表的Bean&lt;/p&gt;
&lt;p&gt;Dril.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据持久化&lt;/span&gt;
&lt;span&gt;@Entity
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dril {
    
    @Id
    @GeneratedValue
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer id;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer age;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Dril() {

    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getAge() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAge(Integer age) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
    
    
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;d.启动结果：&lt;/p&gt;
&lt;p&gt;当看到这个，代表你成功了，数据库中已经生成这个表。看到其他，请核对前面的配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008203332012-474151585.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;箭头所指的体现了我们在application.yml中的&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008203753184-720666369.png&quot; alt=&quot;&quot;/&gt;，如果是create，每次都会删掉原来的表，update只会更新，其他自己看。&lt;/p&gt;
&lt;p&gt; e.编写Controller和DrilService&lt;/p&gt;
&lt;p&gt;DrilController.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DrilController {
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DrilService drilService;
    
    @RequestMapping(value&lt;/span&gt;=&quot;/dril&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Dril&amp;gt;&lt;span&gt; getDrils(){
        
        List&lt;/span&gt;&amp;lt;Dril&amp;gt; drils =&lt;span&gt;drilService.findAll();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; drils;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DrilService.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数是我们要返回的对象，第二个是ID extends Serializable，即我们在生成数据库的时候指定的Id的类型&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; DrilService &lt;span&gt;extends&lt;/span&gt; JpaRepository&amp;lt;Dril,Integer&amp;gt;&lt;span&gt;{

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;f.启动结果&lt;/p&gt;
&lt;p&gt;有FE助手的出现json&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008211035746-834003437.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;IE结果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008212250074-339099324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;纳闷了，页面返回的数据怎么json了，看了一下IE中的结果，还好没有说错（spring默认注册ViewResolver是JstlView）。其他操作，我就不具体做了。&lt;/p&gt;
&lt;p&gt; JPA好像为我们做了好多事，但是他的方法才有几个，总有点他不能干的的，如我们不通过ID来的操作数据库，这时候我们扩展一下他：&lt;/p&gt;
&lt;p&gt;DrilJPA.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; DrilJPA &lt;span&gt;extends&lt;/span&gt; JpaRepository&amp;lt;Dril,Integer&amp;gt;&lt;span&gt;{
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过name来查询数据库,findByXxxx不能乱写&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;Dril&amp;gt;&lt;span&gt; findByName(String name);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加Controller：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
@RequestMapping(value=&quot;/drils/{name}&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Dril&amp;gt; getDrilName(@PathVariable(&quot;name&quot;&lt;span&gt;)String name){
        
        List&lt;/span&gt;&amp;lt;Dril&amp;gt; drils =&lt;span&gt;drilService.findByName(name);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; drils;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008214738153-1001630848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.事务管理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;事务：一系列操作，要么全部成功，要么全部不成功。Spring事务管理，大家参考：&lt;a href=&quot;http://www.mamicode.com/info-detail-1248286.html&quot;&gt;Spring事务管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; DrilService.java&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;15.5&quot;&gt; 
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DrilService {
    
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DrilJPA drilJPA;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addTwo(){
        Dril dril1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dril();
        dril1.setId(&lt;/span&gt;3&lt;span&gt;);
        dril1.setAge(&lt;/span&gt;20&lt;span&gt;);
        dril1.setName(&lt;/span&gt;&quot;xiaosan&quot;&lt;span&gt;);
        drilJPA.save(dril1);
        
        Dril dril2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dril();
        dril1.setId(&lt;/span&gt;4&lt;span&gt;);
        dril1.setAge(&lt;/span&gt;24&lt;span&gt;);
        dril1.setName(&lt;/span&gt;&quot;xiaosi&quot;&lt;span&gt;);
        drilJPA.save(dril2);
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加Controller&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; DrilService drilService2;

    @RequestMapping(value&lt;/span&gt;=&quot;/drils/addTwo&quot;,method=&lt;span&gt;RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getDrilName(){
        
        drilService2.addTwo();;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  如果运行结果成这样，这是事务管理不想看到的，xiaosi跑路了？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201710/959267-20171008221947340-1175667444.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;SpringBoot有个解决办法：&lt;/p&gt;
&lt;p&gt;给Service层方法上添加@Transactional就可以解决。&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Transactional
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; addTwo(){
        Dril dril1&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dril();
        dril1.setId(&lt;/span&gt;3&lt;span&gt;);
        dril1.setAge(&lt;/span&gt;20&lt;span&gt;);
        dril1.setName(&lt;/span&gt;&quot;xiaosan&quot;&lt;span&gt;);
        drilJPA.save(dril1);
        
        Dril dril2&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Dril();
        dril1.setId(&lt;/span&gt;4&lt;span&gt;);
        dril1.setAge(&lt;/span&gt;24&lt;span&gt;);
        dril1.setName(&lt;/span&gt;&quot;xiaosi&quot;&lt;span&gt;);
        drilJPA.save(dril2);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，就分享到这里吧，后面还会更新。&lt;/p&gt;
&lt;p&gt;谢谢大家的阅读，博客不易，请转载注明地址：&lt;a href=&quot;http://www.cnblogs.com/huhu1203/p/7638054.html&quot;&gt;http://www.cnblogs.com/huhu1203/p/7638054.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 14:28:00 +0000</pubDate>
<dc:creator>呼呼呼呼呼65</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huhu1203/p/7638054.html</dc:identifier>
</item>
<item>
<title>一个微服务框架的情节 - wc的一些事一些情</title>
<link>http://www.cnblogs.com/wcd144140/p/7617402.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wcd144140/p/7617402.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001161707559-1498839344.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;记得14年初下定决心重构系统的那一刻 ，“一切从简”的欲望尤为强烈，只因事情已经被“复杂”堵得水泄不通，其实归根到底还是过往自身的工具化思维局限了问题“最优解”的选择。对于一个“入世未深”的小伙来说，“简单”仅仅是简单。但无论如何，能把“简法”付诸行动，就已经不很简单了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001161821122-691805656.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每当代码打包发布的时候，一个上百兆的部署文件让我深感忧虑。我的担忧并非空穴来风，一次又一次的瓶颈让我验证了这该死的担忧。面对这样一个庞然怪物，就算无数个“通宵”也削减不了我对它的力不从心，“分解”成为了我当时的唯一想法。因为“分解”是我们人类处理复杂的一种常识化手段，它能让我把一条复杂的数学题逐一破解，也能让我把一项艰巨的任务分而治之，更让我看到了人类从“自给自足”到“专业化分工”的魅力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001161933028-788881786.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162105731-207004601.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;无可否认，MVC是互联网时代的“王者荣耀”，但随着移动互联网的发展，我试图寻找另一种更适合多端消费的服务化抽象模式。如果我只是单纯地把沉重的SSH切换到当时较为流行且轻量的SSM，其实并没有太多本质上的区别。我们当时的这种“服务化”分解其实更多地想给“消费者”提供一种轻量化、标准化、抽象化的服务支撑，如果要用专业术语来形容，可能SOA（面向服务架构）更为贴切。但ESB和WS作为当时SOA的主流实现和工具，它们的“沉重”让我望而却之。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162144465-665184274.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162252356-412204610.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;有想法对于一个年轻人来说再正常不过，但把能把这想法付诸实现还是需要一定的付出、勇气和机遇。才疏学浅的我在当时并未看到“服务化”的普及，选择一款成熟且契合自己思路的工具也不是一件容易的事，又或许是我内心当时那份热血澎湃的重构欲望在日益膨胀。幸运的是，开放的平台给了我足够开放的心态、空间和信心去打造属于我们的“轮子”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162324044-750169752.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162419512-1829151950.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“简单”是我们设计的首要原则，因为简单赋予了灵活，提高了效率、增强了可控，而且自主研发的约束范围也会远远大于工具的选择，为“简化”创造了无限可能。开源工具的思考边界可能更多地会集中在技术引擎和技术规范二者之间，因为它必须抽象在应用场景之下才能达到一定的通用性，所以开源的考虑会非常周到且功能齐全，但会存在一定的“臃肿”和“个性化”局限，这也是我们“自造轮子”的重要考虑之一，但更重要的还是从本质出发。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162453262-538370492.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162548903-534158394.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“服务化”的设计理念会把应用根据“领域边界”分解成一个个独立的“服务进程”。其实，划分后的应用系统跟操作系统还是有几分相似之处，服务好比进程，线程好比服务的业务执行单元。事实上，它们在运行过程中就是这样一种上下层的对应关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162621794-261866955.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;线程的执行是基于栈帧的“跳进跳出”，而业务的执行是基于“流程”的线性执行。“流程”是业务执行的线性抽象，对“流程”的分解、定义、组织和管控恰恰就是我们对“技术引擎”设计的关键所在。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162646731-1540168297.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162735184-197690543.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对流程的抽象并非想说明我们“轮子”的独特之处，而是尝试对流程本质进行重新理解。因为本质，所以无论SSH还是SSM都能作为该抽象流程的一种实现。但是，我们要做的是尝试重新透过现象看本质，然后基于本质之上一砖一瓦重新打造出我们“服务化”理念的另一种实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162809215-1282834197.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一张白纸的背后可能隐藏着数十道工序的运作，我们“轮子”每砖瓦的堆砌同样少不了对系统从始至终、由里到外的无数次观察和思考。每一次的重构都千差万别，每一次的放弃都异常挣扎，但每一次都更接近于自己的内心。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162829325-1771723757.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了服务交互协议层外（Service Interaction protocal），我们把框架总体划分为框架服务（Framework Service）、基础服务（Base Service）和业务服务（Business Service）三个层次，各层次服务都是由定时器模块组件（Timer）、初始化模块组件（Initor）、销毁模块组件（Destoryer）、业务前置模块组件（ SB_Module）、业务后置模块组件（SA_Module）以及业务实现模块组件（Services）组成。从结构上看，每一层的服务都内嵌于它上一层的服务之中，让各种模块组件形成了一种高约定、标准化、插拔式的切面规则。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001162904153-1102537906.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从开发框架的切面结构上看，框架的规范化约束已经弱化了传统的三层结构模式，把一切非核心逻辑“边缘模块组件化”，重点关注业务的核心逻辑实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163000700-451582504.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因“欲望”的驱动，“自由”成为人性放飞自我的向往，但无拘无束的“自由”往往会对人性的自我控制形成严峻的考验，否则不会“无规不成圆”。“自由”和“约束”看似一种鱼和熊掌的关系，实际上，“约束”是迈向“自由”必不可少的前提。所以，“约束”可以让我们尽量地减少了配置、封装和依赖，尽量以一种简洁、高效且通俗易懂的工具形态让执行者“自由地”聚焦在问题的本质之上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163030825-783049256.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上的服务定义主要源于我们对技术引擎的流程抽象分析。但业务服务（BUSINESS）本身除了具备核心业务的能力支撑以外，背后还隐藏着一个对核心业务的管理职责（俗称服务信息管理平台）。因此，我们继续把服务按功能性类别分解为“面向服务支撑（SOP）”和“面向服务管理（SMP）”两大类服务类型，无论业务支撑还是信息管理都实现了前后端的分离，把轻量化SOA演绎得淋漓尽致。因为基础服务与业务服务的强关联性，基础服务同样被细分为BASESOP和BASESMP两大类基础服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163050528-1181172002.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务目录命名规范中的xxx为业务服务自定义标识，模块组件命名规范中的XXX为三位纯数字组合，除了唯一性的约束以外，还具备了内部模块组件（除业务实现模块）执行顺序的规范化约束，这一点跟Linux的运行级别中的运行脚本命名规范还是有几分相似之处（KXX.../SXX...）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163113950-32073560.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163150200-1150587721.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从某个角度来看，人性的“懒惰”是社会进步的动力，它激发了人类创造的欲望来释放自己并减少一系列人为的不稳定性。但在那些尚未被工具自动化或智能化所覆盖的领域，适当的提前约束和规范同样是对人为管理的一种自动化体现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163209747-1191906021.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;框架的会话上下文（SessionContext）是线程流程代理及其模块组件解耦的关键所在，它承载着整个线程生命周期的状态信息，如业务会话（抽象）对象、请求报文对象（JSON）、响应报文对象（JSON）、模块组件内部执行上下文以及关系数据库事务控制等数据和信息。而框架服务内更多地集成了流程的一些应用规范化实现，如服务并发控制拦截，数据统一解析、安全拦截验证 、数据统一响应输出以及统一规范化日志记录等基础应用实现。此外，框架还集成了如关系数据库、内存数据库、远程过程调用等规范化的“数据适配器组件”，让业务的核心逻辑更加轻量和清晰地聚焦在业务层面（Service）。最终，应用服务基于标准化的应用规范之上实现了全方位的流程代理及管控。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163233965-444316941.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163323247-446792925.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;经济学认为“交换驱动发展”，这是人类从自给自足发展至全球化分工的一个演变“真理”。而互联网的出现更让交换出现了前所未有的低成本、大范围，甚至把数量庞大的“物”也“卷入”了交换的浪潮，把未来的一切想象无限放大。“服务化”应用同样是信息交换驱动发展的一种演变和趋势，一个个具有“独立领域行为”的个体服务在信息交互过程中增加了各种应用行为“涌现”的可能性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163408950-1462759980.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务发现中心（KingWorks-RDC）在服务网络中扮演了信息登记服务的角色，有点类似于DNS服务在互联网中的定位，“模糊”了主机的位置，解耦了服务之间的关联。归根到底，RDC是一个基于服务开发框架（KingWorks-SDF）建设的“动态解析”支撑类信息服务。而微网关（KingWorks-MSG）则是一个内置于服务开发框架的服务请求代理组件，除了具备基于RDC动态代理的实现，还兼顾了“静态解析”的预留，为一些“稳定”的服务应用场景省去了动态的消耗。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163440794-1962580734.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务信息的动态解析是基于“服务信息中心”组件的周期更新，此外，RDC还预留了“服务变更”主动推送通知功能，需要此功能的服务只需要通过“推送开关”配置即可实现RDC的服务变更实时推送通知（非强一致性），提高本地服务对敏感信息更新的实时性。另外，对于一些存在多服务区域（多局域网）的应用场景，我们通过对本地服务信息（IP1&amp;amp;PORT1）和外部服务信息（IP2&amp;amp;PORT2）的区分让“混合云”的服务化应用成为可能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163537044-1880712053.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;凡事都有两面性，好坏优缺得失并存，但是善于“扬长补短”的人类注定不会让社会成为一个“零和游戏”。当我面对服务化多节点所导致的高额人工维护成本时，自动化工具将是这场“正值游戏”的重要手段。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163611090-1430535738.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自动化管控服务（KingWorks-OPS）是整个服务化应用的管控平台。底层主要是由一个C/S模式的脚本任务调度引擎支撑，C是一个内嵌于应用服务的任务执行代理（OPS-Agent By Python），提供了定时和实时的执行入口，而S则是一个任务调用管控服务，集中式对所有服务任务进行管理、配置以及调用。基于引擎之上的，就是面向场景的集成，如服务统一配置与管控、数据集中可视化监控、自动化告警处理以及自动化实施等场景的扩展。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163637950-1044434892.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;人的一生其实可以归纳为只是自己与大脑的一场游戏，行动受控于思想，且行为上变化更多是自身的潜在思维与受控思维的一场较量，就像我们应用从传统到服务化的转变无非就是一场“自我驱动”对“随波续流”发起的挑战。改变了思维，改变了技术，当然，也改变了我们团队的协作方式......&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163713372-259148474.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; “DEV-TEAM”主要是由1个组长+2~3个组员组成的服务开发小组，基于开发框架的模式我们把小组主要划分为前端小组（Android、iOS、H5）以及服务端小组（设计、开发、测试、实施、维护），各个服务开发小组灵活地游离于各个项目之间，每个项目必须配备一个项目经理，一个项目经理可以同时管控多个项目，就像一个服务开发小组同时服务于多个项目。各个服务小组都有自己擅长的业务领域，随着团队经验的积累以及自我驱动，服务组件的沉淀就是一件水到渠成的事情。当然，这一切的前提都是基于我们统一的服务化思想，集中力量于同一焦点，把效能最大化。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163802247-1107938228.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 服务化思想其实并不是什么新鲜事，它早已游离在我们的生活之中，因此会让我们产生一种似曾相识的感觉，这也许就是事物的相通性，而这种相通性的本质可能就是源于我们人性深处的某一种共性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/758472/201710/758472-20171001163825044-1604829976.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;转眼间，十二一轮回，将近四年的服务化实践经历堪比十二载，但初衷还在，只是简单已不再是单纯的简单，更多地会是一份发自内心从容的简单。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Oct 2017 13:52:00 +0000</pubDate>
<dc:creator>wc的一些事一些情</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wcd144140/p/7617402.html</dc:identifier>
</item>
<item>
<title>mui框架移动开发初体验 - 兔圆子</title>
<link>http://www.cnblogs.com/sin0/p/7638482.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sin0/p/7638482.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  前  言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　博主最近在接触移动APP，学习了几个小技巧，和大家分享一下。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1. 状态栏设置&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;现在打开绝大多数APP，状态栏都是与APP一体，不仅美观，而且与整体协调。&lt;br/&gt;博主是个中度强迫症患者，顶部那个小黑条实在让我不舒服。&lt;/p&gt;
&lt;p&gt;首先，我们在HBuilder上新建一个移动APP项目&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;沉浸式状态栏（状态栏透明）&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;一般整个页面是图片时，会使状态栏透明。&lt;/p&gt;
&lt;p&gt;首先，检测当前环境是否支持沉浸式状态栏。检测语句：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
    document.addEventListener(&lt;/span&gt;'plusready', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否支持沉浸式状态栏&lt;/span&gt;
&lt;span&gt;        alert(plus.navigator.isImmersedStatusbar());
        
    });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认是不支持的，会弹出false。想让环境支持，需要修改项目下的配置文件&lt;span&gt;manifest.json&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在项目下有个&lt;span&gt;manifest.json&lt;/span&gt;文件，打开后，打开代码视图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008140551934-515072617.png&quot; alt=&quot;&quot; width=&quot;546&quot; height=&quot;312&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在代码视图&lt;span&gt;&quot;plus&quot;&lt;/span&gt;下添加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &quot;statusbar&quot;:&lt;span&gt; {
            &lt;/span&gt;&quot;immersed&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
        },    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008140930137-2136762176.png&quot; alt=&quot;&quot; width=&quot;308&quot; height=&quot;87&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改完成后，会弹出true，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008141536184-1212548596.png&quot; alt=&quot;&quot; width=&quot;317&quot; height=&quot;563&quot;/&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;终端支持：&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;状态栏全屏&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;状态栏全屏是没有状态栏，不显示电量、信号那一条。&lt;/p&gt;
&lt;p&gt;这个效果是在JS文件中加入语句：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
    document.addEventListener(&lt;/span&gt;'plusready', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数：true - 全屏;false - 不全屏&lt;/span&gt;
        plus.navigator.setFullscreen(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        
    });
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008142908168-1845518630.png&quot; alt=&quot;&quot; width=&quot;322&quot; height=&quot;572&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.3&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;状态栏背景色&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;修改背景色一般用于页面顶部背景色为纯色的场景，修改成和页面一致的背景色，使页面更和谐。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置系统状态栏背景色&lt;/span&gt;
plus.navigator.setStatusBarBackground('#6495ED');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Android平台不支持此功能，如有大神，请多多指点。&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2. 毛玻璃效果&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;图片模糊化可以给人朦胧美的效果。点一下以前没提到的图片模糊效果:&lt;/p&gt;
&lt;p&gt;css属性filter：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;filter: blur(16px);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
blur()中的像素是模糊程度。
&lt;/pre&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3. 简单使用mui快速搭建页面&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;前面最困扰我的状态栏问题解决了，页面布局就好办了。用mui模板可以快速搭建出来。&lt;/p&gt;
&lt;p&gt;以XX音乐为例：&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;导入文件&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;js/mui.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;css/mui.min.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;css/bofang.css&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;HTML代码&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;下面HTML代码为使用的mui框架部分和上述状态栏相关部分，这块mui是关于区域轮播部分&lt;/p&gt;
&lt;p&gt;顶部img是背景图，外层包裹的div非常有必要，overflow属性要活用，才能有完美的效果。&lt;/p&gt;
&lt;p&gt;因为APP的header部分用的定位，所以页面主体部分要加高度为74px左右的padding-top&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    第一个轮播区域
                 &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;singer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ce&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-text-center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;G-DRAGON&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;ce&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;yinxiao&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;img/player_btn_sq_hlight.png&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;img/player_btn_mv_normal.png&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;img/player_btn_dts_on.png&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;datu&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;img/GD.jpg&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;geci&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;A Boy - G-DRAGON&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    
                    
                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    第二个轮播区域
                 &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-indicator&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-indicator&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-indicator mui-active&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-indicator&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
              &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要css代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;*&lt;/span&gt;{&lt;span&gt;
    padding&lt;/span&gt;:&lt;span&gt; 0px&lt;/span&gt;;&lt;span&gt;
    margin&lt;/span&gt;:&lt;span&gt; 0px&lt;/span&gt;;
}&lt;span&gt;
body&lt;/span&gt;{&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 100vh&lt;/span&gt;;
}&lt;span&gt;
#background&lt;/span&gt;{&lt;span&gt;
    overflow&lt;/span&gt;:&lt;span&gt; hidden&lt;/span&gt;;&lt;span&gt;
    text-align&lt;/span&gt;:&lt;span&gt; right&lt;/span&gt;;
}&lt;span&gt;
#background #backImg&lt;/span&gt;{&lt;span&gt;
    margin-left&lt;/span&gt;:&lt;span&gt; -120px&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 99vh&lt;/span&gt;;&lt;span&gt;
    filter&lt;/span&gt;:&lt;span&gt; blur(16px)&lt;/span&gt;;
}&lt;span&gt;
.mui-bar-nav&lt;/span&gt;{&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt; 30px&lt;/span&gt;;&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; rgba(0,0,0,0)&lt;/span&gt;;&lt;span&gt;
    box-shadow&lt;/span&gt;:&lt;span&gt; 0 0px 0px #ccc&lt;/span&gt;;
}&lt;span&gt;
.mui-bar-nav .mui-title&lt;/span&gt;{&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt; white&lt;/span&gt;;&lt;span&gt;
    font-size&lt;/span&gt;:&lt;span&gt; 20px&lt;/span&gt;;&lt;span&gt;
    font-weight&lt;/span&gt;:&lt;span&gt; normal&lt;/span&gt;;&lt;span&gt;
    line-height&lt;/span&gt;:&lt;span&gt; 50px&lt;/span&gt;;
}&lt;span&gt;
#continer&lt;/span&gt;{&lt;span&gt;
    width&lt;/span&gt;:&lt;span&gt; 100%&lt;/span&gt;;&lt;span&gt;
    height&lt;/span&gt;:&lt;span&gt; 100vh&lt;/span&gt;;&lt;span&gt;
    position&lt;/span&gt;:&lt;span&gt; relative&lt;/span&gt;;&lt;span&gt;
    top&lt;/span&gt;:&lt;span&gt; -100vh&lt;/span&gt;;&lt;span&gt;
    z-index&lt;/span&gt;:&lt;span&gt; 5&lt;/span&gt;;&lt;span&gt;
    padding-top&lt;/span&gt;:&lt;span&gt; 80px&lt;/span&gt;;&lt;span&gt;
    background-color&lt;/span&gt;:&lt;span&gt; rgba(0,0,0,0.7)&lt;/span&gt;;&lt;span&gt;
    text-align&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
    color&lt;/span&gt;:&lt;span&gt; white&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后面不一样大小的图片居中对齐这一点还一时没想起来。这里就要用到弹性布局的交叉轴对齐方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#continer .footer1&lt;/span&gt;{&lt;span&gt;
    margin-bottom&lt;/span&gt;:&lt;span&gt; 0px&lt;/span&gt;;&lt;span&gt;
    display&lt;/span&gt;:&lt;span&gt; flex&lt;/span&gt;;&lt;span&gt;
    align-items&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;&lt;span&gt;
    justify-content&lt;/span&gt;:&lt;span&gt; center&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示下效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008154140199-1446246067.png&quot; alt=&quot;&quot; width=&quot;342&quot; height=&quot;609&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1176550/201710/1176550-20171008154134246-2078451251.png&quot; alt=&quot;&quot; width=&quot;344&quot; height=&quot;611&quot;/&gt;&lt;/p&gt;

&lt;div readability=&quot;9&quot;&gt;
&lt;h4 class=&quot;135brush&quot;&gt;小q有话说&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　博主写博客也是想提高自己，还请大神指教。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      另外，框架确实好用，但是博主觉得，还是得把原生代码先掌握好。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 08 Oct 2017 12:45:00 +0000</pubDate>
<dc:creator>兔圆子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sin0/p/7638482.html</dc:identifier>
</item>
</channel>
</rss>