<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>给资源文件添加指纹（Gulp版） - IoveC</title>
<link>http://www.cnblogs.com/iovec/p/7772567.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iovec/p/7772567.html</guid>
<description>&lt;p&gt;至于为什么要费尽心思地给文件添加指纹，请参看&lt;a href=&quot;https://www.cnblogs.com/iovec/p/7676210.html&quot;&gt;前端静态资源缓存控制策略&lt;/a&gt;。这次要达到的小目标就是&lt;span&gt;生成的资源文件能够被客户端缓存，而在文件内容变化后，能够请求到最新的文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;需要用到的 gulp 插件是 &lt;a href=&quot;https://www.npmjs.com/package/gulp-rev2&quot;&gt;gulp-rev2&lt;/a&gt; ，看清楚了，不是 gulp-rev + gulp-rev-collector 的蹩脚组合，而是 &lt;a href=&quot;https://www.npmjs.com/package/gulp-rev2&quot;&gt;gulp-rev2&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gulp-rev2 的设计思路：&lt;/strong&gt;&lt;/p&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;根据文件的内容 &lt;code&gt;file.contents&lt;/code&gt; 生成文件指纹（&lt;code&gt;hash&lt;/code&gt;值）；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;根据前面生成的文件指纹集合成一张&lt;code&gt;（源文件，构建文件）&lt;/code&gt;映射对照表（并保存在清单文件 rev-manifest.json 中）；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;根据前面生成的映射对照表级联更新存在引用的父文件；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面以一个&lt;a href=&quot;https://github.com/makemoretime/gulp-rev2-demo&quot;&gt;具体的栗子&lt;/a&gt;为例进行实践。&lt;/p&gt;
&lt;p&gt;栗子的目录结构是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/882926/201711/882926-20171102153842623-1447615564.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中包含一个 css 样式源文件 &lt;strong&gt;.demo/demo.css&lt;/strong&gt;，内容如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a { background: url(../images/road.jpg); }
div { background: url(../images/a+b.jpg); }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来使用 gulp 进行构建，新建两个任务，一个构建 image，一个构建 css，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const gulp = require('gulp');
const rev2 = require('gulp-rev2');

gulp.task('build:image', ()=&amp;gt;{
    return gulp.src('./demo/**/*.{png,jpg,gif,ico}')
        .pipe(rev2())               // 生成文件指纹并修改文件名
        .pipe(gulp.dest('dist'))    // 输出到 dist 目录
        .pipe(rev2.manifest())      // 生成映射对照表 rev-manifest.js
        .pipe(gulp.dest('.'));      // 输出到 gulpfile.js 同级目录
});

gulp.task('build:css', ['build:image'], ()=&amp;gt;{
    return gulp.src('./demo/**/*.css')
        .pipe(rev2.update())        // 根据映射对照表更新存在引用的父文件
        .pipe(gulp.dest('dist'))
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后执行 &lt;code&gt;gulp build:css&lt;/code&gt;，会发现根目录下生成了 dist 目录，并在里面存放了构建后的文件，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/882926/201711/882926-20171102153920966-346416550.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;细心的同学可能已经发现在构建之后 &lt;strong&gt;./demo/image/&lt;/strong&gt; 目录下的图片资源已经添加了文件指纹，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/882926/201711/882926-20171102153931623-794185918.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时候打开生成的 &lt;strong&gt;./dist/demo.css&lt;/strong&gt;，内容如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a { background: url(../images/road-f7ee61d96b.jpg); }
div { background: url(../images/a+b-d41d8cd98f.jpg); }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到引用了图片资源的 css 文件内容也得到了相应更新。只要图片资源发生更新（文件指纹就会发生变化），引用者（css文件）也应该级联更新。这两个应该是始终同步的，否则就会出现&lt;del&gt;驴唇不对马嘴&lt;/del&gt;引用错乱。&lt;/p&gt;
&lt;p&gt;文件指纹总算加上了，但是这种修改文件名的方式并不总是所希望的。有时我们可能需要更简单传统的方式，也就是通过url参数（query string）的形式进行关联。也就是我们期望的 css 可能是这样的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a { background: url(../images/road.jpg?_v_=f7ee61d96b); }
div { background: url(../images/a+b.jpg?_v_=d41d8cd98f); }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev2&quot;&gt;gulp-rev2&lt;/a&gt; 已经提供了这个选项，可以说是服务非常周到。只需要在原来的 gulp 代码上简单加一行配置项：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;. . .
    .pipe(rev2({                // 生成文件指纹并修改文件名
        query: true,            // 以query string的方式进行指纹关联
    }))
. . .&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新执行 &lt;code&gt;gulp build:css&lt;/code&gt;，打开 &lt;strong&gt;./dist/demo.css&lt;/strong&gt;，会发现样式表已经变成了我们预期的样子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;a { background: url(../images/road.jpg?_v_=f7ee61d96b); }
div { background: url(../images/a+b.jpg?_v_=d41d8cd98f); }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你可以尝试对单个图片资源进行更新（比如 override 操作），&lt;a href=&quot;https://www.npmjs.com/package/gulp-rev2&quot;&gt;gulp-rev2&lt;/a&gt; 只会更新发生变动的资源的指纹，这也是所期望的。&lt;/p&gt;
&lt;h2 id=&quot;注意点&quot;&gt;注意点&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;...
.pipe(rev2.manifest())      // 生成映射对照表 rev-manifest.js
.pipe(gulp.dest('.'));      // 输出到 gulpfile.js 同级目录&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;请确保 &lt;a href=&quot;https://www.npmjs.com/package/gulp-rev2&quot;&gt;gulp-rev2&lt;/a&gt; 生成的清单文件 &lt;strong&gt;rev-manifest.js&lt;/strong&gt; 输出在 &lt;strong&gt;gulpfile.js&lt;/strong&gt; 同级目录下。&lt;/span&gt;这是因为 &lt;a href=&quot;https://www.npmjs.com/package/gulp-rev2&quot;&gt;gulp-rev2&lt;/a&gt; 会在这个目录进行读取，否则将会导致错误。建议你在 &lt;strong&gt;.gitignore&lt;/strong&gt; 文件中忽略掉该文件，因为它是构建生成的，没有任何加入版本控制的需要。&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 07:54:00 +0000</pubDate>
<dc:creator>IoveC</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iovec/p/7772567.html</dc:identifier>
</item>
<item>
<title>Quart.Net分布式任务管理平台（续） - 不明白的某某某</title>
<link>http://www.cnblogs.com/clly/p/7772642.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/clly/p/7772642.html</guid>
<description>&lt;p&gt;&lt;strong&gt;       感谢&lt;/strong&gt;@Taking园友得建议，我这边确实多做了一步上传，导致后面还需处理同步上传到其他服务器来支持分布式得操作。所有才有了上篇文章得完善。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;首先看一下新的项目结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/674112/201711/674112-20171102151349216-139896116.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个图和上篇文章中的图大家可以看到有不一样的地方，那就是我们取消了任务子类。&lt;/p&gt;
&lt;p&gt;首先我们添加任务子类的目的是想别人开发任务的时候程序集尽量的干净，而对于我们Quartz来说真正运行的还是我们基类中的Excute方法，我们Web中需要通过反射子任务类来添加到Quartz中而现在我们通过直接反射任务基类添加到Quartz当中，这样我们依然保持了干净的程序集，同时我们也回归了本质，子任务类在Quartz中并没有起作用这一点要弄明白。&lt;/p&gt;
&lt;p&gt;其次按原来的模式我们添加一个任务我们需要添加一个类库然后去继承基类然后设置url编译，添加任务的时候上传这将导致两个问题，&lt;/p&gt;
&lt;p&gt;一：当任务过多时我们项目会变的类库特别大，每次建类库也很麻烦&lt;/p&gt;
&lt;p&gt;二：我们为了做分布式意味着 我们要将上传的dll同时保存到三台服务器中的Web，和Quartz的服务节点，这个我们将需要额外的逻辑去处理麻烦。&lt;/p&gt;
&lt;p&gt;那么现在这样的结构无论是对编写任务的人，还是做分布式就相对于说变得简单的多了。&lt;/p&gt;
&lt;p&gt;现在看一下项目得改变：首先子任务的类库取消，任务基类改变如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &lt;span&gt;public&lt;/span&gt;  &lt;span&gt;class&lt;/span&gt;&lt;span&gt; JobBase : IJob
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;  &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Execute(IJobExecutionContext context)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 HttpClient hc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpClient();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 hc.GetAsync(context.JobDetail.JobDataMap[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;requestUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString());
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Exception(ex.ToString());
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这边取得任务被添加到Quartz时附带得信息也就是requestUrl,这一步我们在下面任务运行得时候会看到；同时我们得添加任务得界面输入得信息会变少：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/674112/201711/674112-20171102153930170-2020725731.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这边添加任务的时候跟上一篇中对比我们不需要上传程序集，不需要程序集的名字和任务的类名，因为这些东西我们都已经知道就是我们现在的JobBase，而我们现在需要的是上篇文章中的子类设置请求地址现在放到添加任务得时候，保存到数据库中，添加任务得代码也会变得更简单：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;   [HttpPost]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 添加任务
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;jobName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;任务名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;jobGroupName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;任务所在组名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;triggerName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;触发器名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;triggerGroupName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;触发器所在的组名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;cron&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;执行周期表达式&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;jobDescription&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;任务描述&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;requestUrl&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;请求地址&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; JsonResult AddJob(&lt;span&gt;string&lt;/span&gt; jobName, &lt;span&gt;string&lt;/span&gt; jobGroupName, &lt;span&gt;string&lt;/span&gt; triggerName, &lt;span&gt;string&lt;/span&gt; triggerGroupName, &lt;span&gt;string&lt;/span&gt; cron,  &lt;span&gt;string&lt;/span&gt; jobDescription,&lt;span&gt;string&lt;/span&gt;&lt;span&gt; requestUrl)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; jobId =&lt;span&gt; _customerJobInfoRepository.AddCustomerJobInfo(jobName, jobGroupName, triggerName, triggerGroupName, cron, jobDescription, requestUrl);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Json(ResponseDataFactory.CreateAjaxResponseData(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;添加成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, jobId));
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当任务运行得时候去除设置到Quartz中，现在运行任务得方法更改如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 运行任务
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;jobInfo&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;任务信息&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; RunJob(Customer_JobInfo jobInfo)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             Assembly assembly = Assembly.LoadFile(AppDomain.CurrentDomain.BaseDirectory + $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bin/{jobInfo.DLLName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; type =&lt;span&gt; assembly.GetType(jobInfo.FullJobName);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             JobKey jobKey =&lt;span&gt; _createJobKey(jobInfo.JobName, jobInfo.JobGroupName);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;_scheduler.CheckExists(jobKey))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 IJobDetail job =&lt;span&gt; JobBuilder.Create(type)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                    .WithIdentity(jobKey)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     .UsingJobData(_createJobDataMap(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jobId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, jobInfo.Id))
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     .UsingJobData(_createJobDataMap(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;requestUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,jobInfo.RequestUrl))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加此任务请求地址附带到Context上下文中&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    .Build();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;                 CronScheduleBuilder scheduleBuilder =&lt;span&gt; CronScheduleBuilder.CronSchedule(jobInfo.Cron);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 ITrigger trigger = TriggerBuilder.Create().StartNow()&lt;span&gt;//&lt;/span&gt;&lt;span&gt;StartAt(DateTime.SpecifyKind(jobInfo.JobStartTime, DateTimeKind.Local))&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                    .WithIdentity(jobInfo.TriggerName, jobInfo.TriggerGroupName)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    .ForJob(jobKey)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    .WithSchedule(scheduleBuilder.WithMisfireHandlingInstructionDoNothing())
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                    .Build();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;#region&lt;/span&gt; Quartz 任务miss之后三种操作
&lt;span&gt;26&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;             withMisfireHandlingInstructionDoNothing
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;——不触发立即执行
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;——等待下次Cron触发频率到达时刻开始按照Cron频率依次执行
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;withMisfireHandlingInstructionIgnoreMisfires
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;——以错过的第一个频率时间立刻开始执行
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;——重做错过的所有频率周期后
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;——当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;withMisfireHandlingInstructionFireAndProceed
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;——以当前时间为触发频率立刻触发一次执行
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;——然后按照Cron频率依次执行&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                 &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                _scheduler.ScheduleJob(job, trigger);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实上篇我们添加监听器时往这个里面增加的jobId，当时没有想到把requestUrl运用上，再次感谢园友提醒。那么现在我们这次发现得问题得已解决：&lt;/p&gt;
&lt;p&gt;一：现在对于编写任务得人就只需要在界面操作添加requestUrl了，不需要编写任务代码&lt;/p&gt;
&lt;p&gt;二：不会见到一大推子任务程序集在项目中，&lt;/p&gt;
&lt;p&gt;三：使得分布式更加简单只要我们的Web负载就可以了&lt;/p&gt;

</description>
<pubDate>Thu, 02 Nov 2017 07:50:00 +0000</pubDate>
<dc:creator>不明白的某某某</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/clly/p/7772642.html</dc:identifier>
</item>
<item>
<title>iOS动画学习 -隐式动画 - 雨月星缘</title>
<link>http://www.cnblogs.com/Devhwl/p/animation.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Devhwl/p/animation.html</guid>
<description>&lt;h3&gt;事务&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Core Animation基于一个假设，说屏幕上的任何东西都可以（或者可能）做动画。你并不需要在Core Animation中手动打开动画，但是你需要明确地关闭它，否则它会一直存在。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当你改变&lt;code&gt;CALayer&lt;/code&gt;一个可做动画的属性时，这个改变并不会立刻在屏幕上体现出来。相反，该属性会从先前的值平滑过渡到新的值。这一切都是默认的行为，你不需要做额外的操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来看一个例子，老样子，先上代码 &lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@interface&lt;/span&gt;&lt;span&gt; ViewController ()
@property (nonatomic, strong) CALayer &lt;/span&gt;*&lt;span&gt;colorLayer;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;


&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; ViewController

&lt;/span&gt;- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)viewDidLoad {
    [super viewDidLoad];&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;　　　// 创建colorLayer，注意一定要另外创建一个CALayer对象，不要用与视图关联的layer，原因我们后续会讲到&lt;/p&gt;
&lt;pre&gt;
    self.colorLayer =&lt;span&gt; [CALayer layer];
    self.colorLayer.frame &lt;/span&gt;= CGRectMake(&lt;span&gt;50.0f&lt;/span&gt;, &lt;span&gt;50.0f&lt;/span&gt;, &lt;span&gt;100.0f&lt;/span&gt;, &lt;span&gt;100.0f&lt;/span&gt;&lt;span&gt;);
    self.colorLayer.backgroundColor &lt;/span&gt;=&lt;span&gt; [UIColor blueColor].CGColor;
    
    
    [self.view.layer addSublayer:self.colorLayer];
    
&lt;/span&gt;&lt;span&gt;}
&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;- (void)touchesBegan:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event {&lt;/p&gt;
&lt;p&gt;    CGFloat red = arc4random() / (CGFloat)INT_MAX;&lt;/p&gt;
&lt;p&gt;    CGFloat green = arc4random() / (CGFloat)INT_MAX;&lt;/p&gt;
&lt;p&gt;    CGFloat blue = arc4random() / (CGFloat)INT_MAX;&lt;/p&gt;
&lt;p&gt;    self.colorLayer.backgroundColor = [UIColor colorWithRed:red green:green blue:blue alpha:1.0].CGColor;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行之后的初始状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/975660/201711/975660-20171102150804482-422420503.png&quot; alt=&quot;&quot; width=&quot;311&quot; height=&quot;553&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里为了方便，我们将改变layer背景色的代码放在了touchesBegan中，点击视图，我们可以看到layer的背景色缓慢的变化为一个新的颜色（系统默认的动画周期是0.25秒，可能不太明显），像这种不显示创建动画对象的方式，称之为&lt;strong&gt;隐式动画。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;但当你改变一个属性，Core Animation是如何判断动画类型和持续时间的呢？实际上动画执行的时间取决于当前&lt;em&gt;事务&lt;/em&gt;的设置，动画类型取决于&lt;em&gt;图层行为&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;事务实际上是Core Animation用来包含一系列属性动画集合的机制，任何用指定事务去改变可以做动画的图层属性都不会立刻发生变化，而是当事务一旦&lt;em&gt;提交&lt;/em&gt;的时候开始用一个动画过渡到新值。&lt;/p&gt;
&lt;p&gt;事务是通过&lt;code&gt;CATransaction&lt;/code&gt;类来做管理，这个类的设计有些奇怪，不像你从它的命名预期的那样去管理一个简单的事务，而是管理了一叠你不能访问的事务。&lt;code&gt;CATransaction&lt;/code&gt;没有属性或者实例方法，并且也不能用&lt;code&gt;+alloc&lt;/code&gt;和&lt;code&gt;-init&lt;/code&gt;方法创建它。而是用类方法&lt;code&gt;+begin&lt;/code&gt;和&lt;code&gt;+commit&lt;/code&gt;分别来入栈或者出栈。任何可以做动画的图层属性都可以添加到栈顶的事务。&lt;/p&gt;

&lt;p&gt;接下来我们对之前的代码进行更改，用CATransaction进行一些控制&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
- (&lt;span&gt;void&lt;/span&gt;)touchesBegan:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)&lt;span&gt;event&lt;/span&gt;&lt;span&gt; {
    [CATransaction begin];
    [CATransaction setAnimationDuration:&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;];
    
    CGFloat red &lt;/span&gt;= arc4random() /&lt;span&gt; (CGFloat)INT_MAX;
    CGFloat green &lt;/span&gt;= arc4random() /&lt;span&gt; (CGFloat)INT_MAX;
    CGFloat blue &lt;/span&gt;= arc4random() /&lt;span&gt; (CGFloat)INT_MAX;
    self.colorLayer.backgroundColor &lt;/span&gt;= [UIColor colorWithRed:red green:green blue:blue alpha:&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;].CGColor;
    
    [CATransaction commit];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们通过CATransaction对动画周期做了设置，可以明显看出动画过程&lt;/p&gt;
&lt;h3&gt;完成块&lt;/h3&gt;
&lt;p&gt;CATransaction中有一个完成动画后的回调，我们添加上可以看看&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
- (&lt;span&gt;void&lt;/span&gt;)touchesBegan:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)&lt;span&gt;event&lt;/span&gt;&lt;span&gt; {
    [CATransaction begin];
    [CATransaction setAnimationDuration:&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;];
    [CATransaction setCompletionBlock:&lt;/span&gt;^&lt;span&gt;{
        CGAffineTransform transform &lt;/span&gt;=&lt;span&gt; self.colorLayer.affineTransform;
        transform &lt;/span&gt;=&lt;span&gt; CGAffineTransformRotate(transform, M_PI_4);
        self.colorLayer.affineTransform &lt;/span&gt;=&lt;span&gt; transform;
    }];
    CGFloat red &lt;/span&gt;= arc4random() /&lt;span&gt; (CGFloat)INT_MAX;
    CGFloat green &lt;/span&gt;= arc4random() /&lt;span&gt; (CGFloat)INT_MAX;
    CGFloat blue &lt;/span&gt;= arc4random() /&lt;span&gt; (CGFloat)INT_MAX;
    self.colorLayer.backgroundColor &lt;/span&gt;= [UIColor colorWithRed:red green:green blue:blue alpha:&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;].CGColor;
    
    [CATransaction commit];
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行后点击视图，可以看到如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/975660/201711/975660-20171102151037951-1115331817.png&quot; alt=&quot;&quot; width=&quot;286&quot; height=&quot;508&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意旋转动画要比颜色渐变快得多，这是因为完成块是在颜色渐变的事务提交并出栈之后才被执行，于是，用默认的事务做变换，默认的时间也就变成了0.25秒。&lt;/p&gt;

&lt;h3&gt;图层行为&lt;/h3&gt;
&lt;p&gt;接下来就到了解释为什么不要直接操作与视图关联的图层，这里我们先添加一个按钮和一个视图，添加完之后这个样子&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/975660/201711/975660-20171102151733951-1811963719.png&quot; alt=&quot;&quot; width=&quot;308&quot; height=&quot;548&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击按钮时，要响应如下方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@interface&lt;/span&gt;&lt;span&gt; ViewController ()
@property (weak, nonatomic) IBOutlet UIView &lt;/span&gt;*&lt;span&gt;animationView;
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;

- (IBAction)changeColor:(UIButton *&lt;span&gt;)sender {
    [CATransaction begin];
    [CATransaction setAnimationDuration:&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;];
    
    CGFloat red &lt;/span&gt;= arc4random() /&lt;span&gt; (CGFloat)INT_MAX;
    CGFloat green &lt;/span&gt;= arc4random() /&lt;span&gt; (CGFloat)INT_MAX;
    CGFloat blue &lt;/span&gt;= arc4random() /&lt;span&gt; (CGFloat)INT_MAX;
    self.animationView.layer.backgroundColor &lt;/span&gt;= [UIColor colorWithRed:red green:green blue:blue alpha:&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;].CGColor;
    
    [CATransaction commit];
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当点击按钮时，我们并没有看到视图的背景慢慢过渡到新颜色，而是立刻变化的，这是为什么呢？&lt;/p&gt;
&lt;p&gt;试想一下，如果&lt;code&gt;UIView&lt;/code&gt;的属性都有动画特性的话，那么无论在什么时候修改它，我们都应该能注意到的。所以，如果说UIKit建立在Core Animation（默认对所有东西都做动画）之上，那么隐式动画是如何被UIKit禁用掉呢？&lt;/p&gt;

&lt;p&gt;我们把改变属性时&lt;code&gt;CALayer&lt;/code&gt;自动应用的动画称作&lt;em&gt;行为&lt;/em&gt;，当&lt;code&gt;CALayer&lt;/code&gt;的属性被修改时候，它会调用&lt;code&gt;-actionForKey:&lt;/code&gt;方法，传递属性的名称。剩下的操作都在&lt;code&gt;CALayer&lt;/code&gt;的头文件中有详细的说明，实质上是如下几步：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;图层首先检测它是否有委托，并且是否实现&lt;code&gt;CALayerDelegate&lt;/code&gt;协议指定的&lt;code&gt;-actionForLayer:forKey&lt;/code&gt;方法。如果有，直接调用并返回结果。&lt;/li&gt;
&lt;li&gt;如果没有委托，或者委托没有实现&lt;code&gt;-actionForLayer:forKey&lt;/code&gt;方法，图层接着检查包含属性名称对应行为映射的&lt;code&gt;actions&lt;/code&gt;字典。&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;actions字典&lt;/code&gt;没有包含对应的属性，那么图层接着在它的&lt;code&gt;style&lt;/code&gt;字典接着搜索属性名。&lt;/li&gt;
&lt;li&gt;最后，如果在&lt;code&gt;style&lt;/code&gt;里面也找不到对应的行为，那么图层将会直接调用定义了每个属性的标准行为的&lt;code&gt;-defaultActionForKey:&lt;/code&gt;方法。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;所以一轮完整的搜索结束之后，&lt;code&gt;-actionForKey:&lt;/code&gt;要么返回空（这种情况下将不会有动画发生），要么是&lt;code&gt;CAAction&lt;/code&gt;协议对应的对象，最后&lt;code&gt;CALayer&lt;/code&gt;拿这个结果去对先前和当前的值做动画。&lt;/p&gt;
&lt;p&gt;于是这就解释了UIKit是如何禁用隐式动画的：每个&lt;code&gt;UIView&lt;/code&gt;对它关联的图层都扮演了一个委托，并且提供了&lt;code&gt;-actionForLayer:forKey&lt;/code&gt;的实现方法。当不在一个动画块的实现中，&lt;code&gt;UIView&lt;/code&gt;对所有图层行为返回&lt;code&gt;nil&lt;/code&gt;，但是在动画block范围之内，它就返回了一个非空值。我们可以用一个demo做个简单的实验&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)viewDidLoad {
    [super viewDidLoad];
    
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;Outside: %@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, [self.animationView actionForLayer:self.animationView.layer forKey:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;backgroundColor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
  
    [UIView beginAnimations:nil context:nil];
    
    NSLog(&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;Inside: %@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, [self.animationView actionForLayer:self.animationView.layer forKey:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;backgroundColor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
   
    [UIView commitAnimations];
    
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;控制台打印结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;11&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt;:&lt;span&gt;05.397157&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; Animation[&lt;span&gt;3801&lt;/span&gt;:&lt;span&gt;286395&lt;/span&gt;] Outside: &amp;lt;&lt;span&gt;null&lt;/span&gt;&amp;gt;
&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;11&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt;:&lt;span&gt;05.398090&lt;/span&gt;+&lt;span&gt;0800&lt;/span&gt; Animation[&lt;span&gt;3801&lt;/span&gt;:&lt;span&gt;286395&lt;/span&gt;] Inside: &amp;lt;CABasicAnimation: &lt;span&gt;0x6040004362a0&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以跟猜测的一样，当属性在动画块之外发生改变，&lt;code&gt;UIView&lt;/code&gt;直接通过返回&lt;code&gt;nil&lt;/code&gt;来禁用隐式动画。但如果在动画块范围之内，根据动画具体类型返回相应的属性，在这个例子就是&lt;code&gt;CABasicAnimation&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然返回&lt;code&gt;nil&lt;/code&gt;并不是禁用隐式动画唯一的办法，&lt;code&gt;CATransaction&lt;/code&gt;有个方法叫做&lt;code&gt;+setDisableActions:&lt;/code&gt;，可以用来对所有属性打开或者关闭隐式动画。&lt;/p&gt;
&lt;h3&gt; 总结&lt;/h3&gt;
&lt;p&gt;这一章讨论了隐式动画，还有Core Animation对指定属性选择合适的动画行为的机制。同时你知道了UIKit是如何充分利用Core Animation的隐式动画机制来强化它的显式系统，以及动画是如何被默认禁用并且当需要的时候启用的。&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;下载&quot; href=&quot;https://gitee.com/yyxy/LayerAnimation&quot; target=&quot;_blank&quot;&gt;代码下载&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 07:47:00 +0000</pubDate>
<dc:creator>雨月星缘</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Devhwl/p/animation.html</dc:identifier>
</item>
<item>
<title>如何线上部署node.js项目 - xiuber</title>
<link>http://www.cnblogs.com/xiuber/p/7772550.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiuber/p/7772550.html</guid>
<description>&lt;h3 id=&quot;参考&quot;&gt;来源：&lt;a href=&quot;http://blog.csdn.net/chenlinIT/article/details/73343793&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/chenlinIT/article/details/73343793&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;最近工作不是很忙，在空闲时间学习用node+express搭建自己的个人博客。目前进度大概进行到一半了，等不及想部署上线看下效果（学习阶段的人总是很兴奋，有一点点小成果就想马上看看 =_=！）。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;于是买了个阿里云服务器，自己尝试来部署一下，捣鼓了两天终于捣鼓好了，这里来记录一下，以免后面又忘了。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;参考：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://help.aliyun.com/document_detail/50775.html?spm=5176.product25365.6.715.fD2PQ6%20%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%EF%BC%9A%E9%83%A8%E7%BD%B2Node.js%E9%A1%B9%E7%9B%AE%EF%BC%88CentOS%EF%BC%89&quot; target=&quot;_blank&quot;&gt;阿里云帮助文档： 部署Node.js项目（CentOS）&lt;/a&gt; &lt;br/&gt;&lt;a href=&quot;http://www.tuicool.com/articles/AfqyYze&quot; target=&quot;_blank&quot;&gt;推酷文章&lt;/a&gt; &lt;br/&gt;&lt;a href=&quot;http://www.jianshu.com/p/0496ef49b2a5&quot; target=&quot;_blank&quot;&gt;简书文章&lt;/a&gt; &lt;br/&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004051670&quot; target=&quot;_blank&quot;&gt;segmentfault文章&lt;/a&gt; &lt;br/&gt;&lt;a href=&quot;https://cnodejs.org/topic/58a9aa707872ea0864fedebb&quot; target=&quot;_blank&quot;&gt;pm2使用方法&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;一买服务器&quot;&gt;一、买服务器&lt;/h3&gt;
&lt;p&gt;比较穷，选了最低配的。30/月，1核，1G内存，1M带宽，操作系统：CentOS 7.2 64位。作为一个从来没有解除过阿里云的菜鸟，这两天真是踩了无数坑，不过也学到了很多东西。&lt;/p&gt;
&lt;h3 id=&quot;二开始捣鼓来看看怎么部署&quot;&gt;二、开始捣鼓，来看看怎么部署。&lt;/h3&gt;
&lt;p&gt;网上的教程很多，但还是想自己来写一下，这样自己好理解，也能加深记忆。首先远程链接，阿里云的远程连接功能不会用，输入用户名后然后输入登录密码，总是输入不完就跳了，不知道咋回事。因为服务器系统是Linux的，我电脑是windows 7的系统。如果服务器是windows server的系统可以使用电脑的远程桌面连接，这里就不细说了，不会的上网搜一下就行了。windows远程连接Linux网上说有两种常用的远程连接工具：Putty和Xshell，我选择的是Xshell。&lt;/p&gt;
&lt;h4 id=&quot;1远程连接服务器&quot;&gt;1、远程连接服务器&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://dlsw.baidu.com/sw-search-sp/soft/7b/15201/Xshell_5.0.0.37_setup.1459931786.exe%20%E4%B8%8B%E8%BD%BDXshell&quot; target=&quot;_blank&quot;&gt;下载Xshell&lt;/a&gt; 并安装，打开软件你会看到会话框：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170616170532987?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;打开Xshell连接软件&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击新建并设置和填写如下信息:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170616170823137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;设置Xshell连接&quot;/&gt;&lt;/p&gt;
&lt;p&gt;填好后先不要点确定，点击左侧树状图中“用户身份验证”，填写信息：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170616171045545?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;设置Xshell连接&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后点击确定后，就会像上面第一张图显示的，然后点击连接，连接成功如图显示：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170616171319294?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;链接成功&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;2安装nodejs&quot;&gt;2、安装Node.js&lt;/h4&gt;
&lt;p&gt;按照&lt;a href=&quot;https://help.aliyun.com/document_detail/50775.html?spm=5176.product25365.6.715.fD2PQ6%20%20%E9%98%BF%E9%87%8C%E4%BA%91%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%EF%BC%9A%E9%83%A8%E7%BD%B2Node.js%E9%A1%B9%E7%9B%AE%EF%BC%88CentOS%EF%BC%89&quot; target=&quot;_blank&quot;&gt;阿里云帮助文档： 部署Node.js项目（CentOS）&lt;/a&gt; 教程中步骤2操作（&lt;a href=&quot;http://www.cnblogs.com/laov/p/3541414.html&quot; target=&quot;_blank&quot;&gt;linux系统指令大全&lt;/a&gt;）；&lt;/p&gt;
&lt;h5 id=&quot;1wget命令下载nodejs安装包&quot;&gt;(1)、wget命令下载Node.js安装包。&lt;/h5&gt;
&lt;p&gt;该安装包是编译好的文件，解压之后，在bin文件夹中就已存在node和npm，无需重复编译。&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs avrasm has-numbering&quot;&gt;wget https://nodejs&lt;span class=&quot;hljs-preprocessor&quot;&gt;.org/dist/v6&lt;span class=&quot;hljs-number&quot;&gt;.9&lt;span class=&quot;hljs-number&quot;&gt;.5/node-v6&lt;span class=&quot;hljs-number&quot;&gt;.9&lt;span class=&quot;hljs-number&quot;&gt;.5-linux-x64&lt;span class=&quot;hljs-preprocessor&quot;&gt;.tar&lt;span class=&quot;hljs-preprocessor&quot;&gt;.xz&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;2解压文件&quot;&gt;(2)、解压文件。&lt;/h5&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs lasso has-numbering&quot;&gt;tar xvf node&lt;span class=&quot;hljs-attribute&quot;&gt;-v6&lt;span class=&quot;hljs-number&quot;&gt;.9&lt;span class=&quot;hljs-number&quot;&gt;.5&lt;span class=&quot;hljs-attribute&quot;&gt;-linux&lt;span class=&quot;hljs-attribute&quot;&gt;-x64&lt;span class=&quot;hljs-built_in&quot;&gt;.tar&lt;span class=&quot;hljs-built_in&quot;&gt;.xz&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;3软件默认安装在rootnode-v695-linux-x64目录下如果需要将该软件安装到其他目录如optnode下请进行如下操作&quot;&gt;(3)、软件默认安装在/root/node-v6.9.5-linux-x64/目录下。如果需要将该软件安装到其他目录（如：/opt/node/）下，请进行如下操作：&lt;/h5&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs coffeescript has-numbering&quot;&gt;mkdir -p &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/node/
mv &lt;span class=&quot;hljs-regexp&quot;&gt;/root/node-v6.9.5-linux-x64/* &lt;span class=&quot;hljs-regexp&quot;&gt;/opt/node/
rm -f /usr/local/bin/node
rm -f /usr/local/bin/&lt;span class=&quot;hljs-built_in&quot;&gt;npm
ln -s /opt/node/bin/node /usr/local/bin/node
ln -s /opt/node/bin/&lt;span class=&quot;hljs-built_in&quot;&gt;npm /usr/local/bin/&lt;span class=&quot;hljs-built_in&quot;&gt;npm&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul class=&quot;pre-numbering&quot;&gt;&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;li&gt;3&lt;/li&gt;
&lt;li&gt;4&lt;/li&gt;
&lt;li&gt;5&lt;/li&gt;
&lt;li&gt;6&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;4查看nodejs和npm版本&quot;&gt;(4)、查看node.js和npm版本：&lt;/h5&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs lasso has-numbering&quot;&gt;node &lt;span class=&quot;hljs-attribute&quot;&gt;-v
npm &lt;span class=&quot;hljs-attribute&quot;&gt;-v&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;完成以上步骤node.js就算安装成功了&lt;/p&gt;
&lt;h4 id=&quot;3安装mongodb&quot;&gt;3、安装mongodb&lt;/h4&gt;
&lt;p&gt;参考 &lt;a href=&quot;http://www.jianshu.com/p/0496ef49b2a5&quot; target=&quot;_blank&quot;&gt;简书文章&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;软件安装位置：/usr/local/mongodb &lt;br/&gt;数据存放位置：/var/mongodb/data &lt;br/&gt;日志存放位置：/var/mongodb/logs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;1进入-usrlocal&quot;&gt;(1)、进入 /usr/local/：&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;cd /usr/local&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;2安装mongodb&quot;&gt;(2)、安装mongodb：&lt;/h5&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs avrasm has-numbering&quot;&gt;wget https://fastdl&lt;span class=&quot;hljs-preprocessor&quot;&gt;.mongodb&lt;span class=&quot;hljs-preprocessor&quot;&gt;.org/linux/mongodb-linux-x86_64-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;span class=&quot;hljs-number&quot;&gt;.5&lt;span class=&quot;hljs-preprocessor&quot;&gt;.tgz&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其他版本链接可以去官网查看 &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170619123409446?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;mongodb版本选择&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;3解压安装包并重命名文件夹为mongodb&quot;&gt;(3)、解压安装包，并重命名文件夹为mongodb&lt;/h5&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs lasso has-numbering&quot;&gt;tar zxvf mongodb&lt;span class=&quot;hljs-attribute&quot;&gt;-linux&lt;span class=&quot;hljs-attribute&quot;&gt;-x86_64&lt;span class=&quot;hljs-subst&quot;&gt;-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;span class=&quot;hljs-number&quot;&gt;.5&lt;span class=&quot;hljs-built_in&quot;&gt;.tgz
mv mongodb&lt;span class=&quot;hljs-attribute&quot;&gt;-linux&lt;span class=&quot;hljs-attribute&quot;&gt;-x86_64&lt;span class=&quot;hljs-subst&quot;&gt;-&lt;span class=&quot;hljs-number&quot;&gt;3.4&lt;span class=&quot;hljs-number&quot;&gt;.5 mongodb&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;4创建数据和日志存放目录&quot;&gt;(4)、创建数据和日志存放目录&lt;/h5&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs lasso has-numbering&quot;&gt;mkdir /&lt;span class=&quot;hljs-built_in&quot;&gt;var/mongodb
mkdir /&lt;span class=&quot;hljs-built_in&quot;&gt;var/mongodb/&lt;span class=&quot;hljs-built_in&quot;&gt;data
mkdir /&lt;span class=&quot;hljs-built_in&quot;&gt;var/mongodb/logs&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;5设置开机启动项&quot;&gt;(5)、设置开机启动项&lt;/h5&gt;
&lt;p&gt;打开rc.local文件，添加CentOS开机启动项： &lt;br/&gt;不熟悉linux命令的可以参考：&lt;a href=&quot;http://www.cnblogs.com/laov/p/3541414.html&quot; target=&quot;_blank&quot;&gt;linux系统指令大全&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs avrasm has-numbering&quot;&gt;vim /etc/rc&lt;span class=&quot;hljs-preprocessor&quot;&gt;.d/rc&lt;span class=&quot;hljs-preprocessor&quot;&gt;.local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;打开文件后输入‘i’启用编辑。将mongodb启动命令追加到本文件中，让mongodb开机自启动：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs lasso has-numbering&quot;&gt;/opt/mongodb/bin/mongod &lt;span class=&quot;hljs-subst&quot;&gt;--dbpath&lt;span class=&quot;hljs-subst&quot;&gt;=/&lt;span class=&quot;hljs-built_in&quot;&gt;var/mongodb/&lt;span class=&quot;hljs-built_in&quot;&gt;data &lt;span class=&quot;hljs-subst&quot;&gt;--logpath /&lt;span class=&quot;hljs-built_in&quot;&gt;var/mongodb/logs/&lt;span class=&quot;hljs-keyword&quot;&gt;log&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;log &lt;span class=&quot;hljs-attribute&quot;&gt;-fork&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170619124632854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;设置开机启动项&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按 &lt;code&gt;Esc&lt;/code&gt; 退出编辑，输入 &lt;code&gt;:wq&lt;/code&gt; (冒号wq)，回车保存并关闭文件。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170619124748909?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;保存并关闭文件&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;6手动启动mongodb&quot;&gt;(6)、手动启动mongodb&lt;/h5&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs lasso has-numbering&quot;&gt;/opt/mongodb/bin/mongod &lt;span class=&quot;hljs-subst&quot;&gt;--dbpath&lt;span class=&quot;hljs-subst&quot;&gt;=/&lt;span class=&quot;hljs-built_in&quot;&gt;var/mongodb/&lt;span class=&quot;hljs-built_in&quot;&gt;data &lt;span class=&quot;hljs-subst&quot;&gt;--logpath /&lt;span class=&quot;hljs-built_in&quot;&gt;var/mongodb/logs/&lt;span class=&quot;hljs-keyword&quot;&gt;log&lt;span class=&quot;hljs-built_in&quot;&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;log &lt;span class=&quot;hljs-attribute&quot;&gt;-fork&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;数据库安装和启动已完成，下面安装pm2&lt;/p&gt;
&lt;h4 id=&quot;4安装pm2&quot;&gt;4、安装pm2&lt;/h4&gt;
&lt;h5 id=&quot;1通过npm全局安装&quot;&gt;(1)、通过npm全局安装：&lt;/h5&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs cmake has-numbering&quot;&gt;npm &lt;span class=&quot;hljs-keyword&quot;&gt;install pm2 -g&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个时候使用 &lt;code&gt;pm2 -v&lt;/code&gt; 查看版本可能会报错，需要设置一下环境变量&lt;/p&gt;
&lt;h5 id=&quot;2设置环境变量&quot;&gt;(2)、设置环境变量&lt;/h5&gt;
&lt;p&gt;使用 &lt;code&gt;vim&lt;/code&gt; 命令打开文件 /etc/profile&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs has-numbering&quot;&gt;vim /etc/profile&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;同样，按‘i’启动编辑，将pm2的路径添加到环境变量中；&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170619130337573?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;pm2路径&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;hljs ruby has-numbering&quot;&gt;&lt;span class=&quot;hljs-constant&quot;&gt;PATH=&lt;span class=&quot;hljs-variable&quot;&gt;$PATH&lt;span class=&quot;hljs-symbol&quot;&gt;:/opt/node/lib/node_modules/pm2/bin&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170619130407276?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;添加环境变量&quot;/&gt;&lt;/p&gt;
&lt;p&gt;保存退出之后输入：&lt;code&gt;source /etc/profile&lt;/code&gt; 可以让变量生效。&lt;/p&gt;
&lt;h4 id=&quot;5上传项目&quot;&gt;5、上传项目&lt;/h4&gt;
&lt;p&gt;上传项目使用的是Xftp&lt;/p&gt;
&lt;h5 id=&quot;1下载&quot;&gt;(1)、下载&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;http://sw.bos.baidu.com/sw-search-sp/software/28f092744fe45/Xftp_5.0.1028.exe&quot; target=&quot;_blank&quot;&gt;下载Xftp&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;2连接服务器&quot;&gt;(2)、连接服务器&lt;/h5&gt;
&lt;p&gt;如果已经安装，可以点击Xshell中‘新建文件传输’，直接链接到服务器（前提是Xshell已连接）； &lt;br/&gt;手动配置连接和Xshell差不多：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170619131604847?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;配置Xftp链接&quot;/&gt;&lt;/p&gt;
&lt;h5 id=&quot;3上传项目目录&quot;&gt;(3)、上传项目目录&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004051670&quot; target=&quot;_blank&quot;&gt;参考&lt;/a&gt; &lt;br/&gt;我把代码上传到了/home目录文件夹下。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20170619132423341?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbmxpbklU/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;6启动项目&quot;&gt;6、启动项目&lt;/h4&gt;
&lt;h5 id=&quot;1使用pm2启动项目&quot;&gt;(1)、使用pm2启动项目&lt;/h5&gt;
&lt;p&gt;控制台进入存放代码的目录，和本地操作类似，本地使用&lt;code&gt;node /bin/www&lt;/code&gt; 启动项目，这里换成&lt;code&gt;pm2 start /bin/www&lt;/code&gt; ; &lt;br/&gt;项目启动成功后就可以使用 IP:端口 号访问了。IP是你服务器的公网IP，端口号是你代码中设置的监听端口。&lt;/p&gt;
&lt;h3 id=&quot;三结束&quot;&gt;三、结束&lt;/h3&gt;
&lt;p&gt;至此，部署过程全部结束，我也是小白，从来没碰过linux，实际操作中也遇到了各种问题。但是多尝试，多搜索，细心一点一般都能部署成功。写个博客记录一下部署过程，好记性不如烂笔头，以后忘记了查一下博客很快就能弄明白。也希望能够帮助其他刚接触linux部署的小伙伴。这个博客也不算是原创，算是整理其他博友的教程，各位可以随意转载。&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 07:38:00 +0000</pubDate>
<dc:creator>xiuber</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiuber/p/7772550.html</dc:identifier>
</item>
<item>
<title>struts2（一）之初识struts2 - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/7772430.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/7772430.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　我们都知道struts2是一个框架，那什么是框架呢？很多人其实不太明白，其实框架就是一个半成品，别人将一些功能已经写好了，我们只需要拿来用即可，像我们之前&lt;/p&gt;
&lt;p&gt;　　使用的dbutils框架，操作数据，只需要两行代码，不用像一开始一样，老老实实的写一大堆代码，这就是开发框架的意义所在。&lt;span&gt;简化开发&lt;/span&gt;(个人对框架认识的理解，其他&lt;/p&gt;
&lt;p&gt;　　还有在框架上加自己的代码这些就不说了，肯定还有别的很多功能，这只是我最好理解的一种方式)。&lt;/p&gt;
&lt;p&gt;　　框架的定义和作用：&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;把一些繁琐的重复性代码封装起来，使程序员在编码中把更多的经历放到业务需求的分析和理解上面。&lt;/span&gt;&lt;br/&gt;　　　　特点：&lt;span&gt;封装了很多细节&lt;/span&gt;，程序员在使用的时候会非常简单。&lt;/p&gt;
&lt;p&gt;　　Struts2就是一个web层框架，并且是使用MVC设计模式实现的的一个框架，之前使用的是Serlvet+JSP来开发web项目，现在用Struts2框架来替代他，那Struts2到底有&lt;/p&gt;
&lt;p&gt;　　哪些优点呢？&lt;/p&gt;
&lt;p&gt;　　　　请求    -----------　　Servlet      --------------  JSP　　　　serlvet+JSP&lt;/p&gt;
&lt;p&gt;　　　　请求    -----------      Action 　　--------------  JSP　　　　Struts&lt;/p&gt;

&lt;h2&gt;1.1、简介&lt;/h2&gt;
&lt;p&gt;　　百度上说的是：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102131905904-1237473670.png&quot; alt=&quot;&quot; width=&quot;637&quot; height=&quot;158&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　Struts2&lt;span&gt;是Apache发行的MVC开源框架。注意：它只是表现层（MVC）框架&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102142953201-282610932.png&quot; alt=&quot;&quot; width=&quot;885&quot; height=&quot;478&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.2、来历&lt;/h2&gt;
&lt;p&gt;　　Struts1：也是apache开发的一套mvc的开源框架。在2005年之前非常流行。&lt;br/&gt;　　　　　　弊端：&lt;span&gt;Struts1的核心控制器就是一个Servlet&lt;/span&gt;。随着使用者的增多，弊端开始出现。&lt;br/&gt;　　Struts2：在long long ago，有一个设计超前的框架XWork，后来推出了XWork1和WebWork2。Struts2就是apache和OpenSymphony组织合并开发出来。&lt;br/&gt;　　　　　　里面包含了WebWork2的核心及Struts的一些特性和功能。除此之外，和Struts1没有任何关系了。&lt;/p&gt;

&lt;p&gt;　　首先了解前，必须先要知道Struts2的架构图，知道是如何工作的，做了哪些事情，可以不必那么详细的知道每一块具体的细节，先让我们自己有个大概的了解，&lt;/p&gt;
&lt;p&gt;　　这样我们就更容易去接受它，使用它。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102132123920-1474002064.png&quot; alt=&quot;&quot; width=&quot;748&quot; height=&quot;392&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　第一步：请求action，那么就会经过&lt;span&gt;StrutsPrepareAndExecuteFilter&lt;/span&gt;，这里会做两件事情，就是下面的两步&lt;/p&gt;
&lt;p&gt;　　第二步：通过&lt;span&gt;ActionMapping将请求中的各种数据封装起来，拿到请求中的各种参数数据&lt;/span&gt;，比如我们的action的名称DemoAction&lt;/p&gt;
&lt;p&gt;　　第三步：给自己&lt;span&gt;找一个代理对象ActionProxy，来帮助我们处理事情。注意，这个ActionProxy实际上不做任何实事的，而是指挥别人做&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　第四步：ActionProxy叫&lt;span&gt;ConfigManager获取struts.xml中的各种配置信息，其中struts.xml就有action的类全限定类名等信息，这样就可以通过action的名字找到其位置了&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　第五步：有了&lt;span&gt;actionMapping获取的请求数据和ConfigManager获取的struts.xml中的数据，就叫ActionInvacation来查找对应的action了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　第六步：在&lt;span&gt;找到action之前会经过一系列的拦截器，struts内部默认实现的&lt;/span&gt;。找到action后，就相当于我们的servlet，在其中执行一些业务代码，然后跳转到目标页面，&lt;/p&gt;
&lt;p&gt;　　　　　　响应回去。struts的整个过程即结束了。&lt;/p&gt;
&lt;p&gt;　　就是这么简单，struts2的整个执行过程就这样，而现在我们要写一个struts2的hello world的话，根据struts2的架构图，我们需要配置2个东西，&lt;/p&gt;
&lt;p&gt;　　第一个最关键的，&lt;span&gt;在web.xml中配置strutsPrepareAndExecuteFilter即过滤器，配置了该过滤器，请求才会走struts2框架&lt;/span&gt;，&lt;/p&gt;
&lt;p&gt;　　第二个，&lt;span&gt;struts.xml文件，其中应该有的内容是通过action的名字就能够找到其位置在哪里&lt;/span&gt;，稍微会详细讲解。 &lt;/p&gt;

&lt;p&gt;　　我们只需要三步就可以完成：导入jar包、在web.xml中配置过滤器、配置struts.xml。&lt;/p&gt;
&lt;h2&gt;3.1、导入jar包&lt;/h2&gt;
&lt;p&gt;　　1）下载struts2jar包&lt;/p&gt;
&lt;p&gt;　　　　http://struts.apache.org（struts-2.3.15.3）&lt;/p&gt;
&lt;p&gt;　　2）开发包目录结构&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102133515295-1490885275.png&quot; alt=&quot;&quot; width=&quot;506&quot; height=&quot;243&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3）需要的jar包&lt;/p&gt;
&lt;p&gt;　　　　这里注意一点，lib下面有100多个jar包，并不需要导入这么多，我们在apps(案例)中找jar包即可，apps-blank.war是最简单的案例，&lt;/p&gt;
&lt;p&gt;　　　　我们把其后缀名改为zip，然后解压，找到其中的lib目录下的jar包复制就行了。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102133648326-1830786003.png&quot; alt=&quot;&quot; width=&quot;649&quot; height=&quot;217&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　拷贝jar包到classpath中（也就是WEN-INF下面的lib包）&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102142010435-806119078.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.2、在web.xml中配置过滤器&lt;/h2&gt;
&lt;p&gt;　　配置的位置：web.xml中&lt;/p&gt;
&lt;p&gt;　　配置的是什么：Struts已经写好的过滤器&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102134123935-906529260.png&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;135&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2088026b-d59f-4e16-aa9c-85e6d0553eb3')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2088026b-d59f-4e16-aa9c-85e6d0553eb3&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2088026b-d59f-4e16-aa9c-85e6d0553eb3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2088026b-d59f-4e16-aa9c-85e6d0553eb3',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2088026b-d59f-4e16-aa9c-85e6d0553eb3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;web-app xmlns:xsi=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; xmlns=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://java.sun.com/xml/ns/javaee&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; xsi:schemaLocation=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;3.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;filter&amp;gt;
    &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;
    &amp;lt;filter-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&amp;lt;/filter-&lt;span&gt;class&lt;/span&gt;&amp;gt;
  &amp;lt;/filter&amp;gt;
  &amp;lt;filter-mapping&amp;gt;
    &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/filter-mapping&amp;gt;
&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;web.xml&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;3.3、配置struts.xml&lt;/h2&gt;
&lt;p&gt;　　在src目录下创建一个默认名称为struts.xml的配置文件　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;!&lt;span&gt;DOCTYPE struts PUBLIC
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://struts.apache.org/dtds/struts-2.3.dtd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;struts&amp;gt;
&amp;lt;/struts&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意：文件名的大小写、创建的位置、该文件名允许被修改但是我们一般不修改它。&lt;/p&gt;
&lt;p&gt;　　这是我们可以验证是否搭建成功：&lt;/p&gt;
&lt;p&gt;　　　　部署应用，启动tomcat，不报错表示配置成功&lt;/p&gt;

&lt;p&gt;　　1）创建一个jsp文件（index.jsp）&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102135905982-53831212.png&quot; alt=&quot;&quot; width=&quot;892&quot; height=&quot;248&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）在struts.xml中配置&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102140034451-7803139.png&quot; alt=&quot;&quot; width=&quot;635&quot; height=&quot;276&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　配置信息详解：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102143613685-1676104369.png&quot; alt=&quot;&quot; width=&quot;971&quot; height=&quot;282&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3）创建动作类和动作方法&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102140630185-1342920448.png&quot; alt=&quot;&quot; width=&quot;443&quot; height=&quot;324&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4）结果视图&lt;/p&gt;
&lt;p&gt;　　success.jsp&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102140817966-1058241665.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　5）测试&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102142106685-1095915745.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　点击以.action结尾：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102142246357-183752651.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　点击不以.action结尾：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102142330451-353216255.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;问题：关于struts.xml没有提示的问题&lt;/p&gt;
&lt;p&gt;　　原因：没有找到相应的dtd约束文件&lt;/p&gt;
&lt;p&gt;　　解决办法：&lt;/p&gt;
&lt;p&gt;　　　　1.上网&lt;/p&gt;
&lt;p&gt;　　　　2.不能上网&lt;/p&gt;
&lt;p&gt;　　　　找到struts jar包中的struts-2.3.dtd文件&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102142508591-1755189358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　在项目中与lib包同级目录下创建一个dtd文件夹把jar包放进去&lt;/p&gt;
&lt;p&gt;　　　　在myeclipse中配置&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102142534873-1368211542.png&quot; alt=&quot;&quot; width=&quot;579&quot; height=&quot;402&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102143230029-1152009919.png&quot; alt=&quot;&quot; width=&quot;1177&quot; height=&quot;544&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　详细的过程：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102143333451-953544814.png&quot; alt=&quot;&quot; width=&quot;672&quot; height=&quot;637&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　加载时机：当应用被tomcat加载的时候，struts2的配置文件就已经被加载过了。&lt;/p&gt;
&lt;h2&gt;6.1、配置文件加载顺序&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102144121545-78392186.png&quot; alt=&quot;&quot; width=&quot;688&quot; height=&quot;466&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意：　　&lt;/p&gt;
&lt;p&gt;　　　　1）Struts2提供了两种配置的方式。&lt;span&gt;一种是key=value的方式，即使用.properties文件。另一种是xml文件配置。我们推荐使用xml文件&lt;/span&gt;（它能描述层级关系）。&lt;/p&gt;
&lt;p&gt;　　　　2）当多个配置文件中，有相同的参数，后面的会把前面的值给覆盖了。&lt;/p&gt;
&lt;h2&gt;6.2、struts-default.xml文件&lt;/h2&gt;
&lt;p&gt;　　这里解释一下struts.xml中的package继承问题。上面继承了一个struts-default的包，想要查看它中的内容很简单，在我们加入的struts2-core-2.3.15.1.jar包&lt;/p&gt;
&lt;p&gt;　　找到struts-default.xml，在该配置文件中就有package为struts-default的内容。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102144740076-996989022.png&quot; alt=&quot;&quot; width=&quot;199&quot; height=&quot;433&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从名字上看，就应该知道该是struts的一个默认的配置文件，而我们前面编写的一个struts.xml中应该会使用该默认配置文件中的内容，其中的格式跟我们写的struts.xml是一样的。&lt;/p&gt;
&lt;p&gt;　　分两大部分：&lt;/p&gt;
&lt;p&gt;　　　　第一部分 全是bean开头的配置，暂时不管他是干嘛用的，后面会学习，而我们的重点是第二部分&lt;/p&gt;
&lt;p&gt;　　　　第二部分 看到了熟悉的内容，package，并且该package的名字为struts-default。这就是我们需要查找的包，其中的内容包括了三个部分：&lt;/p&gt;
&lt;p&gt;　　　　　　1）&amp;lt;result-types&amp;gt;&amp;lt;/result-types&amp;gt;看到这里我们就&lt;span&gt;明白为什么我们的结果中跳转页面的方式默认是dispatcher(转发)&lt;/span&gt;，因为&lt;span&gt;在继承的struts-default包中将其设置成了默认的，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　还有很多其他的type可选择，比如其中的redirect，就是重定向，比如redirectAction，从一个action跳到另一个action中执行。&lt;/span&gt;比如stream，文件上传时用的，等等这些等&lt;/p&gt;
&lt;p&gt;　　　　　　   后面会详细讲到。有个大概映像即可。&lt;/p&gt;
&lt;p&gt;　　　　　　2）&amp;lt;interceptors&amp;gt;&amp;lt;/interceptors&amp;gt;,这里是一系列的过滤器，就是我们讲的架构图中的那一系列拦截器，就是在这里给配置的。&lt;/p&gt;
&lt;p&gt;　　　　　　3）最后一个是两个零碎的配置&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102145134060-1967389887.png&quot; alt=&quot;&quot; width=&quot;617&quot; height=&quot;63&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　321行：配置说默认的一个拦截器为defaultStack，这是一个拦截器栈，其内容在第二部分中。&lt;/p&gt;
&lt;p&gt;　　　　　　　　323行：这里说的class为在我们action中的class，如果不写则为com.opensymphony.xwork2.ActionSupport。ActionSupport这个类就我们下面要讲解的action继承它来当&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　action，那时候再与普通类当action有什么区别。&lt;/p&gt;
&lt;p&gt;　　　　总结：struts-default.xml的功能就是&lt;span&gt;将一些已经有的功能加入到配置文件中，然后让我们编写的struts.xml继承其中的包&lt;/span&gt;，那么我们就具备了这些功能，不用自己手动编写了，如果想&lt;/p&gt;
&lt;p&gt;　　　　　　在上面添加功能，&lt;span&gt;在编写即可。到这里为止应该就解决了为什么要继承struts-default这个包了把&lt;/span&gt;。&lt;/p&gt;
&lt;h2&gt;6.3、default.properties配置文件&lt;/h2&gt;
&lt;p&gt;　　default.properties，这是一个常量的配置文件。其中放的都是常量。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102145441763-888935000.png&quot; alt=&quot;&quot; width=&quot;201&quot; height=&quot;418&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　常量定义在了default.properties配置文件中，体现形式都是key=value。所有的struts2应用都会用到这些常量。&lt;/p&gt;
&lt;p&gt;　　常用的常量有 :&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102145555310-1944838168.png&quot; alt=&quot;&quot; width=&quot;708&quot; height=&quot;384&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;6.3、覆盖常量的三种方式&lt;/h2&gt;
&lt;p&gt;　　1）在struts.xml中覆盖常量&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102145722623-851955491.png&quot; alt=&quot;&quot; width=&quot;713&quot; height=&quot;192&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意：与package是同级目录。&lt;/p&gt;
&lt;p&gt;　　2）创建struts.properties文件覆盖　　&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102145910091-611357377.png&quot; alt=&quot;&quot; width=&quot;511&quot; height=&quot;150&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3）在web.xml文件中配置过滤器参数&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102150042451-557831931.png&quot; alt=&quot;&quot; width=&quot;519&quot; height=&quot;200&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;喜欢就推荐哦！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 07:16:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/7772430.html</dc:identifier>
</item>
<item>
<title>记小曼巴初次的设计心得 - 禁心尽力</title>
<link>http://www.cnblogs.com/1315925303zxz/p/7772154.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/1315925303zxz/p/7772154.html</guid>
<description>&lt;p&gt;　　公元2017-10-24，星期一，手机上还不断刷着知乎，嘴里搞着东西坐在那小工位上走着心呢，突然，&quot;小忠，你过来，给你讲讲任务调度这块的一些业务重构的需求吧&quot;，还没缓过神儿，就被源哥叫到小黑板前开始上课了；&lt;/p&gt;
&lt;p&gt;　　&quot;我们做个任务调度的功能吧，现在这个制单速度没有达到最大化，很多客户端不能同时进行制单，只能有一台机器能够自动制单，其它的只能人工手动制单，不行，这个得重新设计一下，重构吧。&quot;老大简明下达了这次作战任务，接着就是他老人家的一些方案，大概进行了1个多小时，我们下课了，最后这次的设计老大交给了我，让我来设计这次的任务调度模块，其实我心里是非常接受的，因为这是我第一次设计，兴奋感一直在心头涌动着；老大也知道我是第一次，所以私下就不断给我灌输了很多他老人家的设计经验，说真的，这几天学到最好的也是嘱咐最多一句话：&quot;小忠，设计不要局限在自己的那块，要跳出来，一定要跳出来，要掌控全局&quot;。&lt;/p&gt;
&lt;p&gt;　　经过2天多的设计，我如愿以偿的交上了V1.0版的设计文档，周三下午；&lt;/p&gt;
&lt;p&gt;　　&quot;源哥，设计文档发过去了，你有时间的话看一眼吧，哪些地方还需要改进&quot;，当时我还是有点自信的，因为很多逻辑我都想了一遍，突发情况也想好了相应的解决方案。&lt;/p&gt;
&lt;p&gt;　　10分钟，就10分钟，源哥叫我了，&quot;小忠，你过来一下&quot;，我以为要给我说明天就开发吧；然而我错了，错的一塌糊涂，连毛都不剩；&lt;/p&gt;
&lt;p&gt;　　&quot;小忠啊，我现在把你这个设计文档给其他人，其他人能快速定位到自己需要开发和重构的地方吗，好，不说这个，就你，你现在拿着这个文档去开发，你能列出个满意的计划给我吗？&quot;因为我了解，老大质疑你的东西，那十有八九就是你做的不到位；&lt;/p&gt;
&lt;p&gt;　　接着，&quot;好，先不说你这个设计方案是否可行，但是你这个入门的基本功首先就没学到位，你没用心，知道吗，你这个文档上处处标记着你&lt;strong&gt;没有用心&lt;/strong&gt;&quot;，最后那几个字儿源哥还是拉着很长，然后说了好多这V1.0版本的毛病，这次是我第一次感觉从一次对话中学到了很多道理的时候。&lt;/p&gt;
&lt;p&gt;　　又经过3天多的调整，我终于将V1.1版的设计文档搞出来了啦，在周一早上就发出去了，但是这次我不是态度的问题，而真的是经验和格局的问题了。起初我是站在自己负责的那块来改造，针对自己的品牌进行了设计，是的不错确实对于我来说真的是一个完美的设计，但是我抛下了很多重要的业务分支，根本没有考虑过其他品牌是否符合你的设计，也没有和任何其他模块的开发者去沟通过，最终导致设计方案覆盖范围极小。&quot;设计者，不要佩带着任何角色去设计，接着，源哥又给我从整个公司的用户下单开始，清晰的描述了整个业务链的运作，以及各个模块之间是如何配合工作的&quot;，听完这次的描述，我心里又有了一百种方案，真的，这就是所谓的人生格局越大，看到的景色越美的道理。&lt;/p&gt;

&lt;p&gt;　　以下是我这次总结的失败经验，给大家分享一下，如果有不对的地方，请各位也不要谩骂我误导大家，因为是第一次，如果有好的地方，也希望能够对各位有用。&lt;/p&gt;
&lt;p&gt;　　　　1、设计千万不要把自己局限在自己负责的那块和邻近了解的那块，一定要跳出来，掌控全局，了解整个业务链的运作，有胆量将自己设计的东西放在任何点来重构整个业务链。&lt;/p&gt;
&lt;p&gt;　　　　2、设计过程中在文档上做任何决定时，一定要遵循，先寻求现有的，后决定是否自己开发，然后将问题逐一抛给现有的和要开发的方案，进行对比，当然，这是需要全方面的对比，比如：成本、效率和扩展性等。&lt;/p&gt;
&lt;p&gt;　　　　3、设计过程中遇到或者别人抛出的问题，一定要记录(必要时刻直接写在设计文档中)，这个也是我这次最轻视的地方，每次想到一个问题，经过一番讨论，就完事，也没有将问题记录下来，最后当有人第二次提出同样的问题时，我又开始当场思考，想解决方案，而且还远远不如第一次的。&lt;/p&gt;
&lt;p&gt;　　　　4、多沟通，一定要多沟通，厚着脸皮就算是扯淡也要跑着去了解一下有可能涉及到的模块业务，因为就算是扯淡也不至于到最后让你后悔没有去了解一下这块的情况，也不会出现：&quot;卧槽，要是把这次的设计放到这块多好啊&quot;。&lt;/p&gt;

&lt;p&gt;　　直到今天，我跟这个设计文档整整周旋了快9天，今天早上交付了V1.2版本的文档和一些模块框图过去，其中还加了一些功能分布图和一些对应的描述信息，得到很不错的反馈，因为源哥说看着舒服多了，我心里也舒服多了。估计下周就可以开始实施了，好开心，终于可以看到自己设计的功能了。（初次设计，望各位照顾）&lt;/p&gt;
&lt;p&gt;　　最后，分享一句老大给我说的话。一个设计文档的好坏，最重要的就是要看，当你把你的设计文档丢给别人，别人和沟通的次数多不多，如果说别人每做一点你都在给人解释，那么你的这个设计文档就烂，而且很烂，甚至可以说不是设计文档，而是你在设计过程的做的笔记，我们设计的目的就是，把模块功能设计好之后组织成文档，交给执行者去实现，最后你再过来看是否和你设计的预期效果一致，话不多说，效果达到就好。&lt;/p&gt;
&lt;p&gt;　　感谢默默教我道理的人，感谢所有共勉的朋友。&lt;/p&gt;

</description>
<pubDate>Thu, 02 Nov 2017 06:48:00 +0000</pubDate>
<dc:creator>禁心尽力</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/1315925303zxz/p/7772154.html</dc:identifier>
</item>
<item>
<title>C#设计模式之十一外观模式（Facade）【结构型】 - PatrickLiu</title>
<link>http://www.cnblogs.com/PatrickLiu/p/7772184.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/7772184.html</guid>
<description>&lt;p&gt;&lt;strong&gt;一、引言&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   快12点半了，要开始今天的写作了。很快，转眼设计模式已经写了十个了，今天我们要讲【结构型】设计模式的第五个模式，该模式是【外观模式】，英文名称是：Facade Pattern。我们先从名字上来理解一下“外观模式”。我看到了“外观”这个词语，就想到了“外表”这个词语，两者有着很相近的意思。就拿谈恋爱来说，“外表”很重要，如果第一眼看着很舒服、有眼缘，那就有交往下去的可能。如果长的“三寸钉、枯树皮”，估计就够呛了。在这方面，“外观”和“外表”有着相同的作用。在软件系统中，要完成一个功能，需要很多接口调用，不仅增加了开发难度，也增加了调试成本和维护的复杂度。不如我们把这些接口再封装一次，给一个很好的“外观”，让使用者使用更方便，只需调用一个接口，就可以完成以前调用多个接口的来完成任务，这就方便了。这个模式很简单，大家很容易理解，可能大家在编码的过程中已经不止一次使用过该模式了，只是不知道名字罢了。现实生活中这样的例子很多，举不胜举，来一幅图，大家看看就明白了。&lt;br/&gt; 图一：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1048776/201711/1048776-20171102143221826-2069292490.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;二、外观模式的详细介绍&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.1、动机（Motivate）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   在软件系统开发的过程中，当组件的客户（即外部接口，或客户程序）和组件中各种复杂的子系统有了过多的耦合，随着外部客户程序和各子系统的演化，这种过多的耦合面临很多变化的挑战。如何简化外部客户程序和系统间的交互接口？如何将外部客户程序的演化和内部子系统的变化之间的依赖相互解耦？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.2、意图（Intent）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;   为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。　　　　　　——《设计模式》GoF&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.3、结构图&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;       &lt;img src=&quot;http://images2017.cnblogs.com/blog/1048776/201711/1048776-20171102143312091-1683302818.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.4、模式的组成&lt;/strong&gt;&lt;br/&gt;    &lt;br/&gt;    外观模式包含如下两个角色：&lt;/p&gt;&lt;p&gt;      . Facade（外观角色）：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。&lt;/p&gt;&lt;p&gt;      . SubSystem（子系统角色）：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.5、外观模式的具体实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    马上就到“双十一”了，人们又开始疯狂的购买了。其实购买的过程很复杂，但是我们在购买的过程只需要选择自己喜欢的商品，也可以加入购物车，最后点击付款就完成了。其实这个过程没有那么简单。我们下面就模仿一下购买的过程吧。&lt;/p&gt;&lt;p&gt;    购买过程有几点必须要做的事情：&lt;/p&gt;&lt;p&gt;     1、身份验证安全，没有认证是无效用户。&lt;/p&gt;&lt;p&gt;     2、系统安全，检查系统环境，防止注入、跨站和伪造等攻击&lt;/p&gt;&lt;p&gt;     3、网银安全，检查付款地址的有效性，检查网关是否正常&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; 外观模式的实现
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 不使用外观模式的情况
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 此时客户端与三个子系统都发送了耦合，使得客户端程序依赖与子系统
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 为了解决这样的问题，我们可以使用外观模式来为所有子系统设计一个统一的接口
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 客户端只需要调用外观类中的方法就可以了，简化了客户端的操作
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 从而让客户和子系统之间避免了紧耦合
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             SystemFacade facade=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SystemFacade();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            facade.Buy();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            Console.Read();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;  
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 身份认证子系统A&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AuthoriationSystemA
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MethodA()
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行身份认证&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;  
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 系统安全子系统B&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SecuritySystemB
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MethodB()
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行系统安全检查&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;  
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 网银安全子系统C&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NetBankSystemC
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; MethodC()
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行网银安全检测&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;更高层的Facade&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SystemFacade
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;   {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;       &lt;span&gt;private&lt;/span&gt;&lt;span&gt; AuthoriationSystemA auth;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;       &lt;span&gt;private&lt;/span&gt;&lt;span&gt; SecuritySystemB security;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;       &lt;span&gt;private&lt;/span&gt;&lt;span&gt; NetBankSystemC netbank;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;       &lt;span&gt;public&lt;/span&gt;&lt;span&gt; SystemFacade()
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;          auth=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthoriationSystemA();
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;          security=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SecuritySystemB();
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;          netbank=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; NetBankSystemC();
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt;       &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Buy()
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;      {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;           auth.MethodA();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;身份认证子系统&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;           security.MethodB();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;系统安全子系统&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;           netbank.MethodC();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;网银安全子系统&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt; 
&lt;span&gt;67&lt;/span&gt;           Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我已经成功购买了！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;      }
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;     这个模式很简单，就话不多说了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;三、外观模式的实现要点：&lt;/strong&gt;&lt;br/&gt;    &lt;br/&gt;    1、一个系统可以有几个门面类&lt;/p&gt;&lt;p&gt;　　   在门面模式中，通常只需要一个门面类，并且此门面类只有一个实例，换言之它是一个单例类。当然这并不意味着在整个系统里只有一个门面类，而仅仅是说对每一个子系统只有一个门面类。或者说，如果一个系统有好几个子系统的话，每一个子系统都有一个门面类，整个系统可以有数个门面类。&lt;/p&gt;&lt;p&gt;    2、为子系统增加新行为&lt;/p&gt;&lt;p&gt;　　   初学者往往以为通过继承一个门面类便可在子系统中加入新的行为，这是错误的。门面模式的用意是为子系统提供一个集中化和简化的沟通管道，而不能向子系统加入新的行为。比如医院中的接待员并不是医护人员，接待员并不能为病人提供医疗服务。&lt;/p&gt;&lt;p&gt;    3、Facade有助于建立层次结构的系统，实现了子系统与客户之间的松耦合关系，子系统内部的功能组件往往是紧耦合的。松耦合关系使得子系统的组件变化不会影响到它的客户。Facade消除了复杂的循环依赖关系。这一点在客户程序与子系统分别实现的时候格外重要。&lt;/p&gt;&lt;p&gt;    4、从客户程序的角度来看，Facade模式不仅简化了整个组件系统的接口，同时对于组件内部与外部客户程序来说，从某种程度上也达到了一种“解耦”的效果——内部子系统的任何变化不会影响到Facade接口的变化。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;四、.NET 中外观模式的实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;    外观模式在FCL里面运用还是很多的，多数情况是单个类的情况，在Asp.Net里面，有很多复合控件，比如：Login控件，可以登录，可以认证，可以保存登录用户信息。其实，外观模式更多的是应用在业务系统当中，效果更好。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;五、总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;  这个模式很简单，就不说了，就稍微做一下小结。Facade设计模式更注重从架构的层次去看整个系统，而不是单个类的层次。Facade很多时候更是一种架构设计模式。注意区分Facade模式、Adapter模式、Bridge模式与Decorator模式：&lt;/p&gt;&lt;p&gt;　　Facade模式注重简化接口&lt;/p&gt;&lt;p&gt;　　Adapter模式注重转换接口&lt;/p&gt;&lt;p&gt;　　Bridge模式注重分离接口（抽象）与其实现&lt;/p&gt;&lt;p&gt;　　Decorator模式注重稳定接口的前提下为对象扩展功能&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 06:35:00 +0000</pubDate>
<dc:creator>PatrickLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/7772184.html</dc:identifier>
</item>
<item>
<title>DOM详解 - 风之之</title>
<link>http://www.cnblogs.com/fzz9/p/7772149.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fzz9/p/7772149.html</guid>
<description>&lt;h2&gt;一、简介&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;DOM即（Document Object Model）：文档对象模型，&lt;span&gt;用来将标记型文档封装成对象&lt;/span&gt;，并将标记型文档中的所有内容（标签、文本、属性等）都封装成对象。即标记型文档的一种解析方式。&lt;/span&gt;&lt;span&gt;因为封装为对象就可以对其中的属性和行为进行调用，以便于对这些文档及文档中的内容进行更方便的操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;DOM解析方式：将标记型文档解析为一颗dom树，而树中的内容都封装为节点对象。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;按照标签的层次关系体现出标签的所属，形成一个树状结构。所以我们将DOM解析文档形成的document对象称为dom树，而树中的标签以及文本甚至属性称为节点。这个节点也称为对象。标签通常也称为页面中的元素。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;注意：这个DOM解析的好处是可以对树中的节点进行任意操作，如增删查改。但也有弊端：这种解析需要将标记型文档加载进内存。意味着如果文档体积很大时较为浪费空间。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;二、另一种解析方式：SAX&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;是由一些组织定义的一种民间常用的解析方式，并不是w3c标准，而DOM是w3c的标准。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;SAX的解析方式：基于事件驱动的解析。好处：获取数据的速度快。弊端：不遵从增删查改操作。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;三、DOM三种模型&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;DOM level 1：将html文档封装成对象。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;DOM level 2：在level1的基础上加入了新功能，比如解析名称空间。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;DOM level 3：将xml文档封装成了对象。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;四、DHTML:动态html&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;不是一门语言，而是多项技术综合体的简称，这些技术包括HTML、CSS、DOM、JavaScript。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;四种技术(语言)在动态html中扮演的角色：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;HTML:用标签封装数据。即负责提供标签，对数据进行封装，目的是便于对该标签中的数据进行操作。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;CSS：对数据样式进行定义。即负责提供样式属性，对标签中的数据进行样式的定义。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;DOM：将文档和标签等所有内容进行解析。即负责将标记型文档及文档中的内容进行解析。并封装成对象，在对象中定义了更多的属性和行为，便于对对象进行操作。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;JS:对页面行为进行定义（页面动态效果）。即负责提供程序设计语言，对页面中的对象进行逻辑操作。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;所以JavaScript是DHTML的主力编程语言。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;五、BOM：Browser Object Model（浏览器对象模型）&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;这个模型方便于操作浏览器。浏览器对应的对象就是Window对象。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;六、获取节点对象&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;DOM将标记型文档封装为了document对象，而文档中的内容封装成了节点对象。常见的节点对象有：标签、属性、文本。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;获取节点对象的方法：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;span&gt;方式一：&lt;/span&gt;通过id获取：getElementByID();&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_444b8ef0-b570-4cdc-95ba-134c5c1d87bb&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_444b8ef0-b570-4cdc-95ba-134c5c1d87bb&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_444b8ef0-b570-4cdc-95ba-134c5c1d87bb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; changeDiv(){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过id获取div标签&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; divNode = document.getElementById(&quot;divId&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;操作该节点,如获取该节点的nodeName、nodeType、nodeValue&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取并修改文本数据&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; divNode.innerHTML = &quot;???????&quot;.fontcolor(&quot;red&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;span&gt;11&lt;/span&gt; &amp;lt;input type=&quot;button&quot; value=&quot;点击查看效果&quot; onclick=&quot;changeDiv()&quot;/&amp;gt;
&lt;span&gt;12&lt;/span&gt; &amp;lt;div id=&quot;divId&quot;&amp;gt;这是一个div节点&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;方式二&lt;/span&gt;：通过name属性获取节点(因为name可以相同，所以返回的是一个数组)getElementsByName();&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_93ed8b82-04ce-43af-82a3-5e38e66a3645&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_93ed8b82-04ce-43af-82a3-5e38e66a3645&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_93ed8b82-04ce-43af-82a3-5e38e66a3645&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; show(){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过name获取节点数组&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; nodes = document.getElementsByName(&quot;haha&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; divNode = nodes[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; textNode = nodes[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; document.write(divNode.innerHTML+&quot;&amp;lt;br/&amp;gt;&quot;+&lt;span&gt;textNode.value);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;span&gt;12&lt;/span&gt; &amp;lt;input type=&quot;button&quot; value=&quot;点击查看效果&quot; onclick=&quot;show()&quot;/&amp;gt;
&lt;span&gt;13&lt;/span&gt; &amp;lt;div name=&quot;haha&quot;&amp;gt;这是一个div节点&amp;lt;/div&amp;gt;
&lt;span&gt;14&lt;/span&gt; &amp;lt;input type=&quot;text&quot; value=&quot;请输入任意内容...&quot; name =&quot;haha&quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;方式三：&lt;/span&gt;对所以标签都适用的方法：像&amp;lt;a&amp;gt;这样的标签既没有id，也没有name，就可以直接通过标签名来获取：getElementsByTagName();&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_893f022c-f0b6-462e-920d-cd463b790597&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_893f022c-f0b6-462e-920d-cd463b790597&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_893f022c-f0b6-462e-920d-cd463b790597&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; show(){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过标签名获取节点数组&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; nodes = document.getElementsByTagName(&quot;a&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; node1 = nodes[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; node2 = nodes[1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; document.write(node1.href+&quot;&amp;lt;br/&amp;gt;&quot;+&lt;span&gt;node2.href);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;span&gt;12&lt;/span&gt; &amp;lt;input type=&quot;button&quot; value=&quot;获取以下链接地址&quot; onclick=&quot;show()&quot;/&amp;gt;
&lt;span&gt;13&lt;/span&gt; &amp;lt;a href=&quot;http://www.w3school.com.cn&quot;&amp;gt;W3C官网&amp;lt;/a&amp;gt;
&lt;span&gt;14&lt;/span&gt; &amp;lt;a href=&quot;http://www.cnblogs.com/fzz9/&quot;&amp;gt;博客园主页&amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;七、通过节点层次关系获取节点&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;节点的层次关系：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1、父节点：parentNode(一个父节点)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2、子节点：childNodes(若干个子节点)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3、兄弟节点：上一个兄弟节点：previousSibling；下一个兄弟节点：nextSibling&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;八、节点的一般操作&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、创建并添加&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2、删除节点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3、替换&amp;amp;克隆节点&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_8e1d565d-7a3a-4fd7-a937-fbe951a09b54&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8e1d565d-7a3a-4fd7-a937-fbe951a09b54&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8e1d565d-7a3a-4fd7-a937-fbe951a09b54&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&amp;gt;
&lt;span&gt; 5&lt;/span&gt; &amp;lt;title&amp;gt;节点的一般操作&amp;lt;/title&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &amp;lt;style type=&quot;text/css&quot;&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    div{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        border:#FFFFFF 1px solid;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        width:200px;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        padding:20px;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        margin:10px;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         font-family:&quot;华文中宋&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         font-&lt;span&gt;size:20px;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    #divTitle{
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         border-left-&lt;span&gt;width:80px;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        width:50px;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        padding:10px;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        margin:10px;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        background:#00dd66;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    #div1{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        background:#0066FF;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    #div2{
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        background:#6600FF;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    #div3{
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        background:#66FF00;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    #div4{
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        background:#FF0066;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    hr{
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        border:#CCFF00 1px solid;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &amp;lt;/style&amp;gt;
&lt;span&gt;38&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;41&lt;/span&gt;     &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在div3中添加一个文本节点&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; creNode(){
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建文本节点&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; newText = document.createTextNode(&quot;蜡炬成灰泪始干&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取div3节点&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; div3 = document.getElementById(&quot;div3&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            div3.appendChild(newText);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除节点&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; delNode(){
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; divNode3 = document.getElementById(&quot;div3&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;方法一：删除节点,参数为true时，连同子节点也一起上删除，此方法在IE中有效 &lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;divNode3.removeNode(true);&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;方法二：使用父节点删除(推荐)&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;           divNode3.parentNode.removeChild(divNode3);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         
&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;克隆节点&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; updateNode(){
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; div1 = document.getElementById(&quot;div1&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; div3 = document.getElementById(&quot;div3&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; copyDiv = div3.cloneNode(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;            div1.parentNode.replaceChild(copyDiv,div1);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;         
&lt;span&gt;68&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加标题连接&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; setTitle(){
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建链接元素&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; title = document.createElement(&quot;a&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             title.href = &quot;http://hanyu.baidu.com/shici/detail?pid=1d4e20feb969440989a03d6e0700f077&amp;amp;from=kg0&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             title.innerHTML = &quot;无题&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;             title.target = &quot;_blank&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取divTitle节点&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; divTitle = document.getElementById(&quot;divTitle&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt; &lt;span&gt;            divTitle.appendChild(title);
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;     &amp;lt;/script&amp;gt;
&lt;span&gt;81&lt;/span&gt;     
&lt;span&gt;82&lt;/span&gt;     &amp;lt;input type=&quot;button&quot; value=&quot;创建并添加节点&quot; onclick=&quot;creNode()&quot; /&amp;gt;
&lt;span&gt;83&lt;/span&gt;     &amp;lt;input type=&quot;button&quot; value=&quot;删除节点&quot; onclick=&quot;delNode()&quot; /&amp;gt;
&lt;span&gt;84&lt;/span&gt;     &amp;lt;input type=&quot;button&quot; value=&quot;克隆节点&quot; onclick=&quot;updateNode()&quot; /&amp;gt;
&lt;span&gt;85&lt;/span&gt;     &amp;lt;input type=&quot;button&quot; value=&quot;查看&quot; onclick=&quot;setTitle()&quot; /&amp;gt;
&lt;span&gt;86&lt;/span&gt;     &amp;lt;hr/&amp;gt;
&lt;span&gt;87&lt;/span&gt;     &amp;lt;div id=&quot;divTitle&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;88&lt;/span&gt;     &amp;lt;div id=&quot;div1&quot;&amp;gt;相见时难别亦难&amp;lt;/div&amp;gt;
&lt;span&gt;89&lt;/span&gt;     &amp;lt;div id=&quot;div2&quot;&amp;gt;东风无力百花残&amp;lt;/div&amp;gt;
&lt;span&gt;90&lt;/span&gt;     &amp;lt;div id=&quot;div3&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;91&lt;/span&gt;     &amp;lt;div id=&quot;div4&quot;&amp;gt;蜡炬成灰泪始干&amp;lt;/div&amp;gt;
&lt;span&gt;92&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;93&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 02 Nov 2017 06:29:00 +0000</pubDate>
<dc:creator>风之之</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fzz9/p/7772149.html</dc:identifier>
</item>
<item>
<title>基于Vue.js的大型报告页项目实现过程及问题总结（一） - SmiledL</title>
<link>http://www.cnblogs.com/Smiled/p/7755628.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Smiled/p/7755628.html</guid>
<description>&lt;p&gt;今年5月份的时候做了一个测评报告项目，需要在网页正常显示的同时且可打印为pdf，当时的技术方案采用jquery+template的方式，因为是固定模板所以并没有考虑报告的模块化区分，九月底产品提出新的需求，由于报告页数动辄上千页，所以希望用户自行选择内容生成报告，这个时候原项目就不够灵活了，与小伙伴商量决定将这个项目使用vue进行重构，对报告模块进行细分封装组件复用，大概一个月的工期，中途遇到n多坑，趁着今天有时间将实现思路整理出来并将出现的问题总结一下&lt;/p&gt;
&lt;p&gt;整体的实现思维导图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1055667/201710/1055667-20171030174242965-1313817532.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要考虑的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.可生成PDF版且可打印&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.根据后台获取的json生成包含相应模块的报告&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.组件内基于echarts封装图表的引用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.目录模块的页码定位&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.如何进行模块内的细分（如1.2.1.3）；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6.webpack对多页面编译的配置&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Ps&lt;/span&gt;：转PDF插件使用的是&lt;strong&gt;&lt;span&gt;OpenHtmlToPdf&lt;/span&gt;&lt;/strong&gt;具体配置方法可自行百度，在这里不过多赘述。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于pdf的一点小坑（&lt;span&gt;知识点朋友们！&lt;/span&gt;）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;网页打印A4纸的尺寸是（&lt;span&gt;&lt;strong&gt;1123*793&lt;/strong&gt;&lt;/span&gt;），在使用&lt;span&gt;OpenHtmlToPdf&lt;span&gt;时无法使用css3百分之八十的属性，像translate等，还有就是margin-top不会生效，使用padding-top代替吧，打印生无法请求ajax，如需打印请将数据先存储到本地再行打印，可根据不同浏览方式判断两种方案。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以下实现全部是基于Vue-cli快速构建的项目中实现的，vue-cli的安装网上有很多详细的教程不过多说了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.新建项目，命令行执行代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
vue init webpack vuetest
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;50.506155950752&quot;&gt;
&lt;p&gt;命令输入后，会进入安装阶段，需要用户输入一些信息&lt;/p&gt;
&lt;p&gt;Project name (vuetest)                    项目名称，可以自己指定，也可直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错Sorry, name can no longer contain capital letters），阮一峰老师博客&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html&quot; target=&quot;_blank&quot;&gt;为什么文件名要小写&lt;/a&gt; ，可以参考一下。&lt;/p&gt;
&lt;p&gt;Project description (A Vue.js project)  项目描述，也可直接点击回车，使用默认名字&lt;/p&gt;
&lt;p&gt;Author (........)       作者，不用说了，你想输什么就输什么吧&lt;/p&gt;
&lt;p&gt;接下来会让用户选择&lt;/p&gt;
&lt;p&gt;Runtime + Compiler: recommended for most users    运行加编译，既然已经说了推荐，就选它了&lt;/p&gt;
&lt;p&gt;Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere   仅运行时，已经有推荐了就选择第一个了&lt;/p&gt;
&lt;p&gt;Install vue-router? (Y/n)    是否安装vue-router，这是官方的路由，大多数情况下都使用，&lt;a href=&quot;http://router.vuejs.org/zh-cn/&quot; target=&quot;_blank&quot;&gt;vue-router官网&lt;/a&gt; 。这里就输入“y”后回车即可。&lt;/p&gt;
&lt;p&gt;Use ESLint to lint your code? (Y/n)      是否使用ESLint管理代码，ESLint是个代码风格管理工具，是用来统一代码风格的，并不会影响整体的运行，这也是为了多人协作，新手就不用了，一般项目中都会使用。&lt;a href=&quot;http://eslint.org/&quot; target=&quot;_blank&quot;&gt;ESLint官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来也是选择题Pick an ESLint preset (Use arrow keys)            选择一个ESLint预设，编写vue项目时的代码风格，因为我选择了使用ESLint&lt;/p&gt;
&lt;p&gt;Standard (https://github.com/feross/standard)    标准，有些看不明白，什么标准呢，去给提示的&lt;a href=&quot;https://github.com/feross/standard&quot; target=&quot;_blank&quot;&gt;standard&lt;/a&gt;github地址看一下， 原来时js的标准风格&lt;/p&gt;
&lt;p&gt;AirBNB (https://github.com/airbnb/javascript)    JavaScript最合理的方法，这个github地址说的是JavaScript最合理的方法&lt;/p&gt;
&lt;p&gt;none (configure it yourself)    这个不用说，自己定义风格&lt;/p&gt;
&lt;p&gt;具体选择哪个因人而异吧  ，我选择标准风格&lt;/p&gt;
&lt;p&gt;Setup unit tests with Karma + Mocha? (Y/n)  是否安装单元测试，我选择安装&lt;/p&gt;
&lt;p&gt;Setup e2e tests with Nightwatch(Y/n)?     是否安装e2e测试 ，我选择安装&lt;/p&gt;
&lt;p&gt;完成&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; 初始的目录结构大概是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1055667/201711/1055667-20171102134155841-497989146.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于是多页面应用所以需要在src下建一个modle文件夹里面是两个不同的项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1055667/201711/1055667-20171102140743201-73947929.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 这里的index.html是入口文件，一定不能少，这这里做中转默认进入demo1的页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        location.href &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;module/demo1.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面对多页面进行配置，主要操作config和build这两个文件夹&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;hljs stylus&quot;&gt;
&lt;code&gt;/build
    build&lt;span class=&quot;hljs-selector-class&quot;&gt;.js               #构建生产代码
    dev-client&lt;span class=&quot;hljs-selector-class&quot;&gt;.js 
    dev-server&lt;span class=&quot;hljs-selector-class&quot;&gt;.js          #执行本地服务器
    utils&lt;span class=&quot;hljs-selector-class&quot;&gt;.js               #额外的通用方法
    webpack&lt;span class=&quot;hljs-selector-class&quot;&gt;.base&lt;span class=&quot;hljs-selector-class&quot;&gt;.conf&lt;span class=&quot;hljs-selector-class&quot;&gt;.js   #默认的webpack配置
    webpack&lt;span class=&quot;hljs-selector-class&quot;&gt;.dev&lt;span class=&quot;hljs-selector-class&quot;&gt;.conf&lt;span class=&quot;hljs-selector-class&quot;&gt;.js    #本地开发的webpack配置
    webpack&lt;span class=&quot;hljs-selector-class&quot;&gt;.prod&lt;span class=&quot;hljs-selector-class&quot;&gt;.conf&lt;span class=&quot;hljs-selector-class&quot;&gt;.js   #构建生产的webpack配置
/config   配置文件
    dev&lt;span class=&quot;hljs-selector-class&quot;&gt;.env&lt;span class=&quot;hljs-selector-class&quot;&gt;.js
    index&lt;span class=&quot;hljs-selector-class&quot;&gt;.js
    pord&lt;span class=&quot;hljs-selector-class&quot;&gt;.env&lt;span class=&quot;hljs-selector-class&quot;&gt;.js
    test&lt;span class=&quot;hljs-selector-class&quot;&gt;.env&lt;span class=&quot;hljs-selector-class&quot;&gt;.js
/src
    assets                  #放资源
    components              #组件
    /module                 #页面模块
        /home               #子页面
            index&lt;span class=&quot;hljs-selector-class&quot;&gt;.html      #模版页面
            index&lt;span class=&quot;hljs-selector-class&quot;&gt;.js        #js入口
        &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;articleHeader1&quot;&gt;修改默认的webpack配置webpack.base.conf.js&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
生成需要的入口文件
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;96&quot;&gt;
&lt;p&gt;var path = require('path')&lt;br/&gt;var config = require('../config')&lt;br/&gt;var utils = require('./utils')&lt;br/&gt;var projectRoot = path.resolve(__dirname, '../')&lt;br/&gt;var glob = require('glob');&lt;br/&gt;var entries = getEntry(['./src/demo1/index/*.js', './src/module/demo2/*.js']); // 获得入口js文件&lt;/p&gt;
&lt;p&gt;var env = process.env.NODE_ENV&lt;br/&gt;// check env &amp;amp; config/index.js to decide weither to enable CSS Sourcemaps for the&lt;br/&gt;// various preprocessor loaders added to vue-loader at the end of this file&lt;br/&gt;var cssSourceMapDev = (env === 'development' &amp;amp;&amp;amp; config.dev.cssSourceMap)&lt;br/&gt;var cssSourceMapProd = (env === 'production' &amp;amp;&amp;amp; config.build.productionSourceMap)&lt;br/&gt;var useCssSourceMap = cssSourceMapDev || cssSourceMapProd&lt;/p&gt;
&lt;p&gt;module.exports = {&lt;br/&gt;entry: entries,&lt;br/&gt;output: {&lt;br/&gt;path: config.build.assetsRoot,&lt;br/&gt;publicPath: process.env.NODE_ENV === 'production' ? config.build.assetsPublicPath : config.dev.assetsPublicPath,&lt;br/&gt;filename: '[name].js'&lt;br/&gt;},&lt;br/&gt;resolve: {&lt;br/&gt;extensions: ['', '.js', '.vue','.json'],&lt;/p&gt;&lt;p&gt;fallback: [path.join(__dirname, '../node_modules')],&lt;br/&gt;alias: {&lt;br/&gt;'vue$': 'vue/dist/vue',&lt;br/&gt;'src': path.resolve(__dirname, '../src'),&lt;br/&gt;'common': path.resolve(__dirname, '../src/common'),&lt;br/&gt;'components': path.resolve(__dirname, '../src/components')&lt;br/&gt;}&lt;br/&gt;},&lt;br/&gt;resolveLoader: {&lt;br/&gt;fallback: [path.join(__dirname, '../node_modules')]&lt;br/&gt;},&lt;br/&gt;module: {&lt;br/&gt;loaders: [{&lt;br/&gt;test: /\.vue$/,&lt;br/&gt;loader: 'vue'&lt;br/&gt;},&lt;br/&gt;{&lt;br/&gt;test: /\.js$/,&lt;br/&gt;loader: 'babel',&lt;br/&gt;include: projectRoot,&lt;br/&gt;exclude: /node_modules/&lt;br/&gt;},&lt;br/&gt;{&lt;br/&gt;test: /\.json$/,&lt;br/&gt;loader: 'json'&lt;br/&gt;},&lt;br/&gt;{&lt;br/&gt;test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,&lt;br/&gt;loader: 'url',&lt;br/&gt;query: {&lt;br/&gt;limit: 10000,&lt;br/&gt;name: utils.assetsPath('img/[name].[hash:7].[ext]')&lt;br/&gt;}&lt;br/&gt;},&lt;br/&gt;{&lt;br/&gt;test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,&lt;br/&gt;loader: 'url',&lt;br/&gt;query: {&lt;br/&gt;limit: 10000,&lt;br/&gt;name: utils.assetsPath('fonts/[name].[hash:7].[ext]')&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;]&lt;br/&gt;},&lt;br/&gt;vue: {&lt;br/&gt;loaders: utils.cssLoaders({&lt;br/&gt;sourceMap: useCssSourceMap&lt;br/&gt;}),&lt;br/&gt;postcss: [&lt;br/&gt;require('autoprefixer')({&lt;br/&gt;browsers: ['last 2 versions']&lt;br/&gt;})&lt;br/&gt;]&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;function getEntry(globPath) {&lt;br/&gt;var entries = {},&lt;br/&gt;basename, tmp, pathname;&lt;br/&gt;if (typeof (globPath) != &quot;object&quot;) {&lt;br/&gt;globPath = [globPath]&lt;br/&gt;}&lt;br/&gt;globPath.forEach((itemPath) =&amp;gt; {&lt;br/&gt;glob.sync(itemPath).forEach(function (entry) {&lt;br/&gt;basename = path.basename(entry, path.extname(entry));&lt;br/&gt;if (entry.split('/').length &amp;gt; 4) {&lt;br/&gt;tmp = entry.split('/').splice(-3);&lt;br/&gt;pathname = tmp.splice(0, 1) + '/' + basename; // 正确输出js和html的路径&lt;br/&gt;entries[pathname] = entry;&lt;br/&gt;} else {&lt;br/&gt;entries[basename] = entry;&lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;});&lt;br/&gt;return entries;&lt;br/&gt;}&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;修改本地开发的webpack配置webpack.dev.conf.js&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
这里是和本地服务器有关的配置
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里是根据目录生成对应的页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;p&gt;var path = require('path');&lt;br/&gt;var config = require('../config')&lt;br/&gt;var webpack = require('webpack')&lt;br/&gt;var merge = require('webpack-merge')&lt;br/&gt;var utils = require('./utils')&lt;br/&gt;var baseWebpackConfig = require('./webpack.base.conf')&lt;br/&gt;var HtmlWebpackPlugin = require('html-webpack-plugin')&lt;br/&gt;var glob = require('glob')&lt;br/&gt;// add hot-reload related code to entry chunks&lt;br/&gt;Object.keys(baseWebpackConfig.entry).forEach(function (name) {&lt;br/&gt;baseWebpackConfig.entry[name] = ['./build/dev-client'].concat(baseWebpackConfig.entry[name])&lt;br/&gt;})&lt;br/&gt;module.exports = merge(baseWebpackConfig, {&lt;br/&gt;module: {&lt;br/&gt;loaders: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap })&lt;br/&gt;},&lt;br/&gt;// eval-source-map is faster for development&lt;br/&gt;devtool: '#eval-source-map',&lt;br/&gt;plugins: [&lt;br/&gt;new webpack.DefinePlugin({&lt;br/&gt;'process.env': config.dev.env&lt;br/&gt;}),&lt;br/&gt;// https://github.com/glenjamin/webpack-hot-middleware#installation--usage&lt;br/&gt;new webpack.optimize.OccurenceOrderPlugin(),&lt;br/&gt;new webpack.HotModuleReplacementPlugin(),&lt;br/&gt;new webpack.NoErrorsPlugin()&lt;br/&gt;]&lt;br/&gt;})&lt;/p&gt;
&lt;p&gt;function getEntry(globPath) {&lt;br/&gt;var entries = {},&lt;br/&gt;basename, tmp, pathname;&lt;br/&gt;if (typeof (globPath) != &quot;object&quot;) {&lt;br/&gt;globPath = [globPath]&lt;br/&gt;}&lt;br/&gt;globPath.forEach((itemPath) =&amp;gt; {&lt;br/&gt;glob.sync(itemPath).forEach(function (entry) {&lt;br/&gt;basename = path.basename(entry, path.extname(entry));&lt;br/&gt;if (entry.split('/').length &amp;gt; 4) {&lt;br/&gt;tmp = entry.split('/').splice(-3);&lt;br/&gt;pathname = tmp.splice(0, 1) + '/' + basename; // 正确输出js和html的路径&lt;br/&gt;entries[pathname] = entry;&lt;br/&gt;} else {&lt;br/&gt;entries[basename] = entry;&lt;br/&gt;}&lt;br/&gt;});&lt;br/&gt;});&lt;br/&gt;return entries;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;var pages = getEntry(['./src/module/*.html','./src/module/**/*.html']);&lt;/p&gt;
&lt;p&gt;for (var pathname in pages) {&lt;br/&gt;// 配置生成的html文件，定义路径等&lt;br/&gt;var conf = {&lt;br/&gt;filename: pathname + '.html',&lt;br/&gt;template: pages[pathname], // 模板路径&lt;br/&gt;inject: true, // js插入位置&lt;br/&gt;// necessary to consistently work with multiple chunks via CommonsChunkPlugin&lt;br/&gt;chunksSortMode: 'dependency'&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;if (pathname in module.exports.entry) {&lt;br/&gt;conf.chunks = ['manifest', 'vendor', pathname];&lt;br/&gt;conf.hash = true;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;module.exports.plugins.push(new HtmlWebpackPlugin(conf));&lt;br/&gt;}&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;articleHeader3&quot;&gt;修改构建生产的webpack配置webpack.prod.conf.js&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; path = require('path'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; config = require('../config'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; utils = require('./utils'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; webpack = require('webpack'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; merge = require('webpack-merge'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; baseWebpackConfig = require('./webpack.base.conf'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ExtractTextPlugin = require('extract-text-webpack-plugin'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; HtmlWebpackPlugin = require('html-webpack-plugin'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; CleanPlugin = require('clean-webpack-plugin')&lt;span&gt;//&lt;/span&gt;&lt;span&gt;webpack插件，用于清除目录文件&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; glob = require('glob'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; env =&lt;span&gt; config.build.env

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; webpackConfig =&lt;span&gt; merge(baseWebpackConfig, {
  module: {
    loaders: utils.styleLoaders({ sourceMap: config.build.productionSourceMap, extract: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt; })
  },
  devtool: config.build.productionSourceMap &lt;/span&gt;? '#source-map' : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
  output: {
    path: config.build.assetsRoot,
    filename: utils.assetsPath(&lt;/span&gt;'js/[name].[chunkhash].js'&lt;span&gt;),
    chunkFilename: utils.assetsPath(&lt;/span&gt;'js/[id].[chunkhash].js'&lt;span&gt;)
  },
  vue: {
    loaders: utils.cssLoaders({
      sourceMap: config.build.productionSourceMap,
      extract: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    })
  },
  plugins: [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; http://vuejs.github.io/vue-loader/workflow/production.html&lt;/span&gt;
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.DefinePlugin({
      &lt;/span&gt;'process.env'&lt;span&gt;: env
    }),
    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.UglifyJsPlugin({
      compress: {
        warnings: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
      }
    }),
    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; CleanPlugin(['../dist']), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空生成目录&lt;/span&gt;
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.OccurenceOrderPlugin(),
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; extract css into its own file&lt;/span&gt;
    &lt;span&gt;new&lt;/span&gt; ExtractTextPlugin(utils.assetsPath('css/[name].[contenthash].css'&lt;span&gt;)),
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; generate dist index.html with correct asset hash for caching.&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; you can customize output by editing /index.html&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; see https://github.com/ampedandwired/html-webpack-plugin&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; split vendor js into its own file&lt;/span&gt;
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.CommonsChunkPlugin({
      name: &lt;/span&gt;'vendor'&lt;span&gt;,
      minChunks: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, count) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; any required modules inside node_modules are extracted to vendor&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
          module.resource &lt;/span&gt;&amp;amp;&amp;amp;
          /\.js$/.test(module.resource) &amp;amp;&amp;amp;&lt;span&gt;
          module.resource.indexOf(
            path.join(__dirname, &lt;/span&gt;'../node_modules'&lt;span&gt;)
          ) &lt;/span&gt;=== 0&lt;span&gt;
        )
      }
    }),
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; extract webpack runtime and module manifest to its own file in order to&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; prevent vendor hash from being updated whenever app bundle is updated&lt;/span&gt;
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.CommonsChunkPlugin({
      name: &lt;/span&gt;'manifest'&lt;span&gt;,
      chunks: [&lt;/span&gt;'vendor'&lt;span&gt;]
    })
  ]
})

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (config.build.productionGzip) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; CompressionWebpackPlugin = require('compression-webpack-plugin'&lt;span&gt;)

  webpackConfig.plugins.push(
    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CompressionWebpackPlugin({
      asset: &lt;/span&gt;'[path].gz[query]'&lt;span&gt;,
      algorithm: &lt;/span&gt;'gzip'&lt;span&gt;,
      test: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RegExp(
        &lt;/span&gt;'\\.(' +&lt;span&gt;
        config.build.productionGzipExtensions.join(&lt;/span&gt;'|') +
        ')$'&lt;span&gt;
      ),
      threshold: &lt;/span&gt;10240&lt;span&gt;,
      minRatio: &lt;/span&gt;0.8&lt;span&gt;
    })
  )
}

module.exports &lt;/span&gt;=&lt;span&gt; webpackConfig

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getEntry(globPath) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; entries =&lt;span&gt; {},
    basename, tmp, pathname;
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; (globPath) != &quot;object&quot;&lt;span&gt;) {
    globPath &lt;/span&gt;=&lt;span&gt; [globPath]
  }
  globPath.forEach((itemPath) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    glob.sync(itemPath).forEach(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (entry) {
      basename &lt;/span&gt;=&lt;span&gt; path.basename(entry, path.extname(entry));
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (entry.split('/').length &amp;gt; 4&lt;span&gt;) {
        tmp &lt;/span&gt;= entry.split('/').splice(-3&lt;span&gt;);
        pathname &lt;/span&gt;= tmp.splice(0, 1) + '/' + basename; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 正确输出js和html的路径&lt;/span&gt;
        entries[pathname] =&lt;span&gt; entry;
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        entries[basename] &lt;/span&gt;=&lt;span&gt; entry;
      }
    });
  });
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; entries;
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pages = getEntry(['./src/module/*.html','./src/module/**/*.html'&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; pathname &lt;span&gt;in&lt;/span&gt;&lt;span&gt; pages) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置生成的html文件，定义路径等&lt;/span&gt;
  &lt;span&gt;var&lt;/span&gt; conf =&lt;span&gt; {
    filename: pathname &lt;/span&gt;+ '.html'&lt;span&gt;,
    template: pages[pathname],   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模板路径&lt;/span&gt;
    inject: &lt;span&gt;true&lt;/span&gt;,              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; js插入位置&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; necessary to consistently work with multiple chunks via CommonsChunkPlugin&lt;/span&gt;
    chunksSortMode: 'dependency'&lt;span&gt;
  };

  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pathname &lt;span&gt;in&lt;/span&gt;&lt;span&gt; module.exports.entry) {
    conf.chunks &lt;/span&gt;= ['manifest', 'vendor'&lt;span&gt;, pathname];
    conf.hash &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
  }

  module.exports.plugins.push(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin(conf));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; path = require('path'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; config = require('../config'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; utils = require('./utils'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; webpack = require('webpack'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; merge = require('webpack-merge'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; baseWebpackConfig = require('./webpack.base.conf'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ExtractTextPlugin = require('extract-text-webpack-plugin'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; HtmlWebpackPlugin = require('html-webpack-plugin'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; CleanPlugin = require('clean-webpack-plugin')&lt;span&gt;//&lt;/span&gt;&lt;span&gt;webpack插件，用于清除目录文件&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; glob = require('glob'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; env =&lt;span&gt; config.build.env

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; webpackConfig =&lt;span&gt; merge(baseWebpackConfig, {
  module: {
    loaders: utils.styleLoaders({ sourceMap: config.build.productionSourceMap, extract: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt; })
  },
  devtool: config.build.productionSourceMap &lt;/span&gt;? '#source-map' : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
  output: {
    path: config.build.assetsRoot,
    filename: utils.assetsPath(&lt;/span&gt;'js/[name].[chunkhash].js'&lt;span&gt;),
    chunkFilename: utils.assetsPath(&lt;/span&gt;'js/[id].[chunkhash].js'&lt;span&gt;)
  },
  vue: {
    loaders: utils.cssLoaders({
      sourceMap: config.build.productionSourceMap,
      extract: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    })
  },
  plugins: [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; http://vuejs.github.io/vue-loader/workflow/production.html&lt;/span&gt;
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.DefinePlugin({
      &lt;/span&gt;'process.env'&lt;span&gt;: env
    }),
    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.UglifyJsPlugin({
      compress: {
        warnings: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
      }
    }),
    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; CleanPlugin(['../dist']), &lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空生成目录&lt;/span&gt;
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.OccurenceOrderPlugin(),
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; extract css into its own file&lt;/span&gt;
    &lt;span&gt;new&lt;/span&gt; ExtractTextPlugin(utils.assetsPath('css/[name].[contenthash].css'&lt;span&gt;)),
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; generate dist index.html with correct asset hash for caching.&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; you can customize output by editing /index.html&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; see https://github.com/ampedandwired/html-webpack-plugin&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; split vendor js into its own file&lt;/span&gt;
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.CommonsChunkPlugin({
      name: &lt;/span&gt;'vendor'&lt;span&gt;,
      minChunks: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (module, count) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; any required modules inside node_modules are extracted to vendor&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
          module.resource &lt;/span&gt;&amp;amp;&amp;amp;
          /\.js$/.test(module.resource) &amp;amp;&amp;amp;&lt;span&gt;
          module.resource.indexOf(
            path.join(__dirname, &lt;/span&gt;'../node_modules'&lt;span&gt;)
          ) &lt;/span&gt;=== 0&lt;span&gt;
        )
      }
    }),
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; extract webpack runtime and module manifest to its own file in order to&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; prevent vendor hash from being updated whenever app bundle is updated&lt;/span&gt;
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.CommonsChunkPlugin({
      name: &lt;/span&gt;'manifest'&lt;span&gt;,
      chunks: [&lt;/span&gt;'vendor'&lt;span&gt;]
    })
  ]
})

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (config.build.productionGzip) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; CompressionWebpackPlugin = require('compression-webpack-plugin'&lt;span&gt;)

  webpackConfig.plugins.push(
    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CompressionWebpackPlugin({
      asset: &lt;/span&gt;'[path].gz[query]'&lt;span&gt;,
      algorithm: &lt;/span&gt;'gzip'&lt;span&gt;,
      test: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RegExp(
        &lt;/span&gt;'\\.(' +&lt;span&gt;
        config.build.productionGzipExtensions.join(&lt;/span&gt;'|') +
        ')$'&lt;span&gt;
      ),
      threshold: &lt;/span&gt;10240&lt;span&gt;,
      minRatio: &lt;/span&gt;0.8&lt;span&gt;
    })
  )
}

module.exports &lt;/span&gt;=&lt;span&gt; webpackConfig

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getEntry(globPath) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; entries =&lt;span&gt; {},
    basename, tmp, pathname;
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; (globPath) != &quot;object&quot;&lt;span&gt;) {
    globPath &lt;/span&gt;=&lt;span&gt; [globPath]
  }
  globPath.forEach((itemPath) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    glob.sync(itemPath).forEach(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (entry) {
      basename &lt;/span&gt;=&lt;span&gt; path.basename(entry, path.extname(entry));
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (entry.split('/').length &amp;gt; 4&lt;span&gt;) {
        tmp &lt;/span&gt;= entry.split('/').splice(-3&lt;span&gt;);
        pathname &lt;/span&gt;= tmp.splice(0, 1) + '/' + basename; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 正确输出js和html的路径&lt;/span&gt;
        entries[pathname] =&lt;span&gt; entry;
      } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        entries[basename] &lt;/span&gt;=&lt;span&gt; entry;
      }
    });
  });
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; entries;
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; pages = getEntry(['./src/module/*.html','./src/module/**/*.html'&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; pathname &lt;span&gt;in&lt;/span&gt;&lt;span&gt; pages) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 配置生成的html文件，定义路径等&lt;/span&gt;
  &lt;span&gt;var&lt;/span&gt; conf =&lt;span&gt; {
    filename: pathname &lt;/span&gt;+ '.html'&lt;span&gt;,
    template: pages[pathname],   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模板路径&lt;/span&gt;
    inject: &lt;span&gt;true&lt;/span&gt;,              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; js插入位置&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; necessary to consistently work with multiple chunks via CommonsChunkPlugin&lt;/span&gt;
    chunksSortMode: 'dependency'&lt;span&gt;
  };

  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pathname &lt;span&gt;in&lt;/span&gt;&lt;span&gt; module.exports.entry) {
    conf.chunks &lt;/span&gt;= ['manifest', 'vendor'&lt;span&gt;, pathname];
    conf.hash &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
  }

  module.exports.plugins.push(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin(conf));
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;articleHeader4&quot;&gt;修改配置文件config&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
修改index.js
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;在build.js中会引用assetsRoot，这里就是对应的根目录，改成你想要输出的地址就好了。ps：这里是相对地址
assetsPublicPath会被引用插入到页面的模版中，这个是你资源的根目录&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; see http://vuejs-templates.github.io/webpack for documentation.&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; path = require('path'&lt;span&gt;)

module.exports &lt;/span&gt;=&lt;span&gt; {
  build: {
    env: require(&lt;/span&gt;'./prod.env'&lt;span&gt;),
    index: path.resolve(__dirname, &lt;/span&gt;'../dist/index.html'&lt;span&gt;),
    assetsRoot: path.resolve(__dirname, &lt;/span&gt;'../dist'&lt;span&gt;),
    assetsSubDirectory: &lt;/span&gt;'static'&lt;span&gt;,
    assetsPublicPath: &lt;/span&gt;'../'&lt;span&gt;,
    productionSourceMap: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Gzip off by default as many popular static hosts such as&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Surge or Netlify already gzip all static assets for you.&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Before setting to `true`, make sure to:&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; npm install --save-dev compression-webpack-plugin&lt;/span&gt;
    productionGzip: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    productionGzipExtensions: [&lt;/span&gt;'js', 'css'&lt;span&gt;]
  },
  dev: {
    env: require(&lt;/span&gt;'./dev.env'&lt;span&gt;),
    port: &lt;/span&gt;8080&lt;span&gt;,
    assetsSubDirectory: &lt;/span&gt;'static'&lt;span&gt;,
    assetsPublicPath: &lt;/span&gt;'/'&lt;span&gt;,
    proxyTable: {},
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; CSS Sourcemaps off by default because relative paths are &quot;buggy&quot;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; with this option, according to the CSS-Loader README&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; (https://github.com/webpack/css-loader#sourcemaps)&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; In our experience, they generally work as expected,&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; just be aware of this issue when enabling this option.&lt;/span&gt;
    cssSourceMap: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ok，配置结束，一个基本的多页面应用已经成功建成&lt;/p&gt;
&lt;p&gt;接下来就进入正题了，放在下一篇来写。。。。。。。&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 06:19:00 +0000</pubDate>
<dc:creator>SmiledL</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Smiled/p/7755628.html</dc:identifier>
</item>
<item>
<title>Angular5.0.0新特性 - 迷惘却坚定</title>
<link>http://www.cnblogs.com/besuccess/p/Angular.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/besuccess/p/Angular.html</guid>
<description>&lt;p&gt;文章来自官网部分翻译&lt;br/&gt;&lt;code&gt;https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Angular5.0.0版本已经正式发布&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/11/2/98416703141cce18cf73e3f1c8314e85?imageView2/0/w/1280/h/960/ignore-error/1&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;总结一下v5.0.0带来的新变化都有哪些。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.构建优化&lt;/strong&gt;&lt;br/&gt;　　5.0版本默认采用CLI构建和打包。构建优化器是包含在CLI里面的一个工具，通过对你的应用程序更加语义化的理解可以使得你的打包程序(bundle)更小。&lt;br/&gt;构建优化器有两个主要工作。&lt;br/&gt;第一，我们可以将应用程序的一部分标记为纯应用(pure)，改进了现有工具提供的摇树优化，删除了应用中其它不需要的部分。&lt;br/&gt;第二，从你的应用程序在运行时删除装饰符代码(decorators),装饰(decorators)是由编译器使用的，而在运行时并不需要可以被删除。这些工作减少了生成的JavaScript bundles的大小，并增加了你的用户应用程序的启动速度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.服务端状态转换和DOM支持&lt;/strong&gt;&lt;br/&gt;　　有了这个支持，可以让应用程序在服务器端和客户端版之间共享状态更容易。&lt;br/&gt;Angular Universal是一个帮助开发者实现SSR的开源项目，通过在服务端渲染&lt;br/&gt;Angular应用程序，然后在客户端引导启动程序并生成HTML，由此更好的支持那些对javascript不太友好的化境来提高应用程序性能。&lt;br/&gt;5.0版本中，Angular开发团队添加了ServerTransferStateModule(与之对应的BrowserTransferStateModule),这个模块允许你在服务端生成模块信息并传输到客户端，不需要在客户端重复创建。这一点在通过HTTP获取数据并展示时非常有用。通过服务端状态转移，客户端不需要在发送第二个HTTP数据请求，状态转移的API文档将在未来几周内发布。&lt;br/&gt;此处另一个改变是AngularUniversal团队添加了Domino渲染工具，Domino的加入意味着我们在服务器端上下文中将可以支持更多的DOM操作，改进了对第三方JS和组件库的支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.编译器改进&lt;/strong&gt;&lt;br/&gt;　　改进了Angular编译器来支持增量编译,重新构建变得更快，特别是对生产环境的构建和AOT编译，增强的装饰器可以通过更精细化的去除空格来减小产生的包.&lt;br/&gt;改进后的AOT编译的性能大幅度,提升可以节省约95%的构建时间，40s可以提升至2s完成一次构建。&lt;br/&gt;Preserve Whitespace&lt;br/&gt;通过编译器，模板开发中的制表符、换行符、空格等可以原样的保留下来，并提供选项可以自选是否使用Preserve Whitespace来保留这些东西。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/11/2/cbe0a4a3d0bbb8f3710bd27789fb613a?imageView2/0/w/1280/h/960/ignore-error/1&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;也可以在tsconfig.json设置作用到全局&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/11/2/1868ed3ad039e1f11f16595c24ec5d0d?imageView2/0/w/1280/h/960/ignore-error/1&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;注：组件级别的选项会覆盖应用程序级别的设置。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;增强的装饰符支持&lt;br/&gt;装饰符降低了在使用useValue、useFactory、data对lambda表达式的要求，开发者也可以使用一个lamdba表示来代替一个已定义的命名函数,也就意味着你可以不事先在*.d.ts中声明而直接执行代码。&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/11/2/45fc983921fc79d0be77e69fce2923d4?imageView2/0/w/1280/h/960/ignore-error/1&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;去掉表达式方式&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/11/2/aca0a0adc59eee8f0834fbafaf948a0c?imageView2/0/w/1280/h/960/ignore-error/1&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.国际化号码、日期和货币管道&lt;/strong&gt;&lt;br/&gt;　　Angular5中已经建立了新的号码，日期和货币管道，增加了跨浏览器的标准化实现，消除国际化在不同环境中的差异。&lt;br/&gt;在5.0中管道可以使用我们自己的实现，可以在任何地方实现本地化的支持和配置。&lt;br/&gt;V4 V5之间管道差异对比&lt;br/&gt;&lt;code&gt;https://docs.google.com/spreadsheets/d/12iygt-_cakNP1VO7MV9g4lq9NsxVWG4tSfc98HpHb0k/edit#gid=0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.StaticInjector取代ReflectiveInjector依赖注入器&lt;/strong&gt;&lt;br/&gt;　　为了更多的减少polyfills，5.0中使用了StaticInjector注入器来替换原有的ReflectiveInjector注入器，这种注入器不再里来与ReflectPolyfill，可以大幅减少应用程序体积&lt;br/&gt;在4.x中，依赖注入器一共有两种，即Injector的抽象类子类：&lt;br/&gt;1._NullInjector (该类的实例用于表示空的注入器)&lt;br/&gt;2.ReflectiveInjector (表示一个依赖注入容器，用于实例化对象和解析依赖)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot; lang=&quot;bash&quot;&gt;之前提供依赖注入方式：
ReflectiveInjector.resolveAndCreate(providers);

5.0中方式：
Injector.create(providers);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;6.Zone执行速度的提升&lt;/strong&gt;&lt;br/&gt;　　5.0中默认提供的zones已经优化过，速度大幅提升，并且在应用程序中绕过zonee区域更加关于应用程序的性能。&lt;br/&gt;绕过zone引导启动应用程序的方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot; lang=&quot;bash&quot;&gt;platformBrowserDynamic().bootstrapModule(AppModule,{ngZone:&lt;span class=&quot;hljs-string&quot;&gt;'noop'}).then( ref =&amp;gt; {} );&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;7.exportAs多命名支持&lt;/strong&gt;&lt;br/&gt;　　5.0中提供了组件/指令的多命名支持，在对用户不修改代码情况下进行组件的迁移操作等非常有用，将一个组件导出多个名字，可以让组件已一个新名字来使用而达到不破坏现有代码的目的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/11/2/951b9ce299c1090f6a596cedea85d2da?imageView2/0/w/1280/h/960/ignore-error/1&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8.HttpClient&lt;/strong&gt;&lt;br/&gt;　　在4.3中HttpClient模块被封装在@angular/common中，新的HttpClient被封装在@angular/common/http中，更新Http模块后，需要使用HttpClientModule替换原有HttpModule，并在使用http服务时，可以去掉map(res=&amp;gt;res.json())的调用，新模块中已经不再需要这么写了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9.CLI v1.5&lt;/strong&gt;&lt;br/&gt;　　Angular CLI v1.5版本中已经添加了对5.0版本的支持，后期将会把v5.0.0作为CLI的默认版本。这个版本中已经默认开启了构建优化，所以开发者可以直接感受到更小的js打包优化带来的收益。同时也更新了.tsconfig将更严格的遵循TypeScript标准，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10.Angular Forms adds updateOn Blur / Submit&lt;/strong&gt;&lt;br/&gt;　　可以使用blur/submit来进行事件更新，而不用每个input都写一个事件了。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs bash&quot; lang=&quot;bash&quot;&gt;Template Driven Forms
Before
&amp;lt;input name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;firstName&quot; ngModel&amp;gt;
After
&amp;lt;input name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;firstName&quot; ngModel [ngModelOptions]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{updateOn: 'blur'}&quot;&amp;gt;
or
&amp;lt;form [ngFormOptions]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;{updateOn: 'submit'}&quot;&amp;gt;


Reactive Forms
Before
new FormGroup(value);
new FormControl(value, [], [myValidator])
After
new FormGroup(value, {updateOn: &lt;span class=&quot;hljs-string&quot;&gt;'blur'}));
new FormControl(value, {updateOn: &lt;span class=&quot;hljs-string&quot;&gt;'blur', asyncValidators: [myValidator]})
asyncValidators可以不再是作为一个参数传递 而是直接作用到表单上了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;11.RxJS 5.5&lt;/strong&gt;&lt;br/&gt;　　支持V5.2+ 5.5在bundle上更加优化了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12.New Router Lifecycle Events&lt;/strong&gt;&lt;br/&gt;　　GuardsCheckStart&lt;br/&gt;　　ChildActivationStart&lt;br/&gt;　　ActivationStart&lt;br/&gt;　　GuardsCheckEnd&lt;br/&gt;　　ResolveStart&lt;br/&gt;　　ResolveEnd&lt;br/&gt;　　ActivationEnd&lt;br/&gt;　　ChildActivationEnd&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 06:03:00 +0000</pubDate>
<dc:creator>迷惘却坚定</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/besuccess/p/Angular.html</dc:identifier>
</item>
</channel>
</rss>