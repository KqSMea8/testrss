<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>第四节：框架前期准备篇之进程外Session的两种配置方式 - Yaopengfei</title>
<link>http://www.cnblogs.com/yaopengfei/p/9583168.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yaopengfei/p/9583168.html</guid>
<description>&lt;p&gt;&lt;span&gt;一. 基本介绍&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;49.860335195531&quot;&gt;
&lt;p&gt;&lt;span&gt;1. 背景：Asp.Net默认的Session机制是进程内，存储在服务器端内存中，有这么几个缺点：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　①：既然存在内存中，空间有限，不能存储大数据量信息，数据量多的话Session会被挤爆。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　②：IIS只要一重启，Session就会丢失，哪怕就是改一下配置文件，IIS也会重启，此时如果客户端有用户通过浏览器正在访问&lt;/span&gt;&lt;span&gt;该网站，如果用到Session，原Session是丢失的了，就会报“未将对象引用设置到对象的实例”类似的错误。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　③：Session是依赖Cookie来保存SessionID的，所以如果浏览器禁用Cookie，那么Session也是不能用的。【PS：即使使用进程外Session解决不了这个问题】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　 默认进程内的Session的优点：&lt;span&gt;读写速度快。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. Session和Cookie的关系&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这里简单说一下：Session是一个Key-Value集合，而这个Key即SessionID是存储在浏览器的Cookie中的，Cookie默认的生命周期是浏览器的生明周期,浏览器关闭，cookie消失，所以&lt;/span&gt;&lt;span&gt;当浏览器关闭后再重新打开，Cookie消失,原SessionID消失，即使服务器端Session还存在，客户端也无从获取了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　 详细的Session介绍详见：&lt;a href=&quot;http://www.cnblogs.com/yaopengfei/p/8057176.html&quot;&gt;&lt;span&gt;http://www.cnblogs.com/yaopengfei/p/8057176.html&lt;/span&gt;&lt;/a&gt; 中的第 5 点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3. 进程外Session的种类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　① 状态服务器Session：比默认的进程内Session稍慢一点，比数据库Session慢很多，存储空间比进程内的稍大一些，&lt;/span&gt;&lt;span&gt; 但毕竟还是存储在内存中的，空间是有限，也会容易被挤爆。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　② 数据库Session：这里以SQLServer为例，因为微软有些工作已经给做好了，简单配置一下就行了. 数据库Session的读写速度&lt;/span&gt;&lt;span&gt; 要慢，但好处是可以认为空间“无限大”，并且相对稳定。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; PS：上述仅是为了介绍两种通用的方式，很多情况下，可以使用NoSQL来存储信息，要比关系型数据库读写快的多。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4. 进程外Session解决的问题&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　解决了IIS重启Session丢失的问题，解决了Session空间有限容易被挤爆的问题，但不能解决浏览器重启找不到Session的问题！&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;&lt;span&gt;二. 状态服务器Session&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;步骤一：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　以win10为例，运行services.msc，打开服务列表，找到【ASP.NET State Service】，右键启动即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201809/1031302-20180906160037915-184257690.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;步骤二：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在&amp;lt;system.Web&amp;gt;节点下加上下面一句话 &lt;/span&gt;&lt;span&gt;&amp;lt;sessionState stateConnectionString=&quot;tcpip=127.0.0.1:42424&quot; mode=&quot;StateServer&quot;&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; PS：状态服务器端口默认为：42424，该模式无法支持负载均衡，如有需要，采用数据库Session的形式。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何修改默认端口？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　打开注册表 [HKEY_LOCAL_MACHINE/SYSTEM/ControlSet001/Services/aspnet_state/Parameters]，其中：Port为端口号，十进制,默认即为42424;&lt;/span&gt;&lt;span&gt; AllowRemoteConnection的值 0代表仅能本机使用,1代表供其他机器使用.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201809/1031302-20180906160155508-1995733864.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;三. 数据库Session&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;步骤一：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　 cmd 进入这个路径 C:\Windows\Microsoft.NET\Framework\v4.0.30319&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;步骤二：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　运行指令 aspnet_regsql.exe -U sa -P 123456 -ssadd -sstype c -d MagicDB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ps：sa为数据库登录名 123456为数据库密码 MagicDB为存储Session的数据库&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行完毕后，会发现该数据库下多了两张表，分别是：ASPStateTempApplications 和 ASPStateTempSessions，如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201809/1031302-20180906160456498-1513136359.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;步骤三：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在&amp;lt;system.Web&amp;gt;节点下加上下面一句话：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　&amp;lt;sessionState sqlConnectionString=&quot;server=.;database=MagicDB;uid=sa;pwd=123456&quot; allowCustomSqlDatabase=&quot;true&quot; mode=&quot;SQLServer&quot; timeout=&quot;1000&quot;&amp;gt;&amp;lt;/sessionState&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;PS：默认过期时间为20分钟，上述代码将过期时间设置为1000分钟。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201809/1031302-20180906160605899-1933151537.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四. 测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 分享测试代码：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 测试页面
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;  {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;      &lt;span&gt;if&lt;/span&gt; (Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]==&lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;     {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         ViewBag.msg = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;没有数据了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ypf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;      &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;     {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         ViewBag.msg = Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;将该项目项目发布到IIS，默认第一次进入显示“没有数据了”，刷新一下，显示“ypf”,此时重启IIS，再次刷新页面，仍然显示“ypf”，证明进程外Session有效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 第一次访问：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201809/1031302-20180906162414002-1338062275.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;刷新浏览器：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201809/1031302-20180906162445559-103040129.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;重启IIS，刷新浏览器：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1031302/201809/1031302-20180906163056373-616284177.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;作       者 : &lt;span&gt;Yaopengfei(姚鹏飞)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;博客地址 : &lt;a href=&quot;http://www.cnblogs.com/yaopengfei/&quot;&gt;&lt;span&gt;http://www.cnblogs.com/yaopengfei/&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;声     明1 : 本人才疏学浅，用郭德纲的话说“我是一个小学生”，如有错误，欢迎讨论，请勿谩骂^_^。&lt;/li&gt;
&lt;li&gt;声     明2 : 原创博客请在转载时保留原文链接或在文章开头加上本人博客地址，否则保留追究法律责任的权利。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Thu, 06 Sep 2018 23:37:00 +0000</pubDate>
<dc:creator>Yaopengfei</dc:creator>
<og:description>一. 基本介绍 1. 背景：Asp.Net默认的Session机制是进程内，存储在服务器端内存中，有这么几个缺点： ①：既然存在内存中，空间有限，不能存储大数据量信息，数据量多的话Session会被挤</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yaopengfei/p/9583168.html</dc:identifier>
</item>
<item>
<title>消息队列1：RabbitMQ解析并基于Springboot实战 - 养码青年</title>
<link>http://www.cnblogs.com/zhenghengbin/p/9602091.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenghengbin/p/9602091.html</guid>
<description>&lt;h3 id=&quot;rabbitmq简介&quot;&gt;RabbitMQ简介&lt;/h3&gt;
&lt;p&gt;AMQP:Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。&lt;/p&gt;
&lt;p&gt;RabbitMQ 是一个由Erlang语言开发的AMQP的开源实现。（PS:前几天有篇文章介绍了阿里P10的淘宝褚霸，就是erlang大神）。支持多种客户端。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点如下：&lt;/p&gt;
&lt;p&gt;1、可靠性&lt;/p&gt;
&lt;p&gt;RabbitMQ 使用一些机制来保证可靠性，如持久化，传输确认、发布确认。&lt;/p&gt;
&lt;p&gt;2、灵活的路由&lt;/p&gt;
&lt;p&gt;在消息进入队列之前，通过Exchange来路由消息。对于典型的路由功能，RabbitMQ 提供了内置的Exchange来实现。针对更复杂的路由功能。可以将多个Exchange 绑定在一起，也通过插件机制实现自己的 Exchange。&lt;/p&gt;
&lt;p&gt;3、消息集群&lt;/p&gt;
&lt;p&gt;多个RabbitMQ 服务器可以组成一个集群，形成一个逻辑Broker.&lt;/p&gt;
&lt;p&gt;4、高可用&lt;/p&gt;
&lt;p&gt;队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列任然可用。&lt;/p&gt;
&lt;p&gt;5、多种协议&lt;/p&gt;
&lt;p&gt;RabbitMQ支持多种消息队列协议。比如STOMP、MQTT等等&lt;/p&gt;
&lt;p&gt;6、多语言客户端&lt;/p&gt;
&lt;p&gt;RabbitMQ支持多种语言，比如java/Ruby等&lt;/p&gt;
&lt;p&gt;7、管理界面&lt;/p&gt;
&lt;p&gt;RabbitMQ提供了一个易用的用户界面。使得用户可有监控和管理Broker的许多方面&lt;/p&gt;
&lt;p&gt;8、跟踪机制&lt;/p&gt;
&lt;p&gt;如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出&lt;/p&gt;
&lt;p&gt;9、插件机制&lt;/p&gt;
&lt;p&gt;RabbitMQ提供了许多插件，从多方面进行扩展，也可以编写自己的插件&lt;/p&gt;
&lt;h3 id=&quot;rabitmq-概念模型&quot;&gt;RabitMQ 概念模型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/111.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1、Message&lt;/p&gt;
&lt;p&gt;消息，消息是不具名的，它由消息头和消息体组成，消息体是不透明的。而消息头则由一系列的可选属性组成。包括routing-key(路由键)、priority(相对于其他消息的优先权)、delivery-mode(指出该消息可能需要持久性存储)等&lt;/p&gt;
&lt;p&gt;2、Publisher&lt;/p&gt;
&lt;p&gt;消息的生产者，也是一个向交换器发布消息的客户端应用程序&lt;/p&gt;
&lt;p&gt;3、Exchange&lt;/p&gt;
&lt;p&gt;交换器，&lt;em&gt;用来接收生产者发送的消息并将这些消息路由给服务器中的队列。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;4、Binding&lt;/p&gt;
&lt;p&gt;绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则。所以可以将交换器理解成一个由绑定构成的路由表。&lt;/p&gt;
&lt;p&gt;5、Queue&lt;/p&gt;
&lt;p&gt;消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面。等待消息消费者连接到这个队列将其取走。&lt;/p&gt;
&lt;p&gt;6、Connection&lt;/p&gt;
&lt;p&gt;网络连接&lt;/p&gt;
&lt;p&gt;7、Channel&lt;/p&gt;
&lt;p&gt;信道，多路复用连接中的一条独立的双向数据流通道。&lt;/p&gt;
&lt;p&gt;8、Consumer&lt;/p&gt;
&lt;p&gt;消息的消费者，表示一个从消息队列中取得消息的客户端应用程序&lt;/p&gt;
&lt;p&gt;9、Virtual Host&lt;/p&gt;
&lt;p&gt;虚拟主机、表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost 本质上就是一个mini版的RabbitMQ服务器。拥有自己的队列、交换器、绑定、和权限机制。vhost是AMQP概念的基础。必须在连接时指定，RabbitMQ默认的Vhost是/.&lt;/p&gt;
&lt;p&gt;10、Broker&lt;/p&gt;
&lt;p&gt;表示消息队列服务器实体。&lt;/p&gt;
&lt;h3 id=&quot;exchange-类型&quot;&gt;Exchange 类型&lt;/h3&gt;
&lt;p&gt;Exchange 有四种类型：Direct、Topic、Headers 和 Fanout 。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Direct：该类型的行为是“先匹配，再投送”，即在绑定时设定一个 &lt;strong&gt;routing_key&lt;/strong&gt;，消息的&lt;strong&gt;routing_key&lt;/strong&gt; 匹配时，才会被交换器投送到绑定的队列中去。&lt;/li&gt;
&lt;li&gt;Topic：按规则转发消息（最灵活）。&lt;/li&gt;
&lt;li&gt;Headers：设置 header attribute 参数类型的交换机。&lt;/li&gt;
&lt;li&gt;Fanout：转发消息到所有绑定队列。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了,这里不再详细介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;driect&quot;&gt;Driect&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/direct.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Direct Exchange 是 RabbitMQ 默认的交换机模式，也是最简单的模式，根据 key 全文匹配去寻找队列。&lt;/p&gt;
&lt;p&gt;消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中。路由键与队列名完全匹配.它是完全匹配、单播的模式。&lt;/p&gt;
&lt;h4 id=&quot;topic&quot;&gt;Topic&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/topic.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Topic Exchange 转发消息主要是根据通配符。在这种交换机下，队列和交换机的绑定会定义一种路由模式，那么，通配符就要在这种路由模式和路由键之间匹配后交换机才能转发消息。&lt;/p&gt;
&lt;p&gt;在这种交换机模式下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;路由键必须是一串字符，用句号（.）隔开，如 agreements.us，或者 agreements.eu.stockholm 等。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;topic 和 direct 类似，只是匹配上支持了“模式”，在“点分”的 &lt;code&gt;routing_key&lt;/code&gt; 形式中，可以使用两个通配符：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;*&lt;/code&gt;表示一个词。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;表示零个或多个词。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;fanout&quot;&gt;Fanout&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://p7zk4x9pv.bkt.clouddn.com/fanout.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Fanout Exchange 消息广播的模式，不管路由键或者是路由模式，&lt;strong&gt;会把消息发给绑定给它的全部队列&lt;/strong&gt;，如果配置了&lt;code&gt;routing_key&lt;/code&gt;会被忽略。&lt;/p&gt;
&lt;h3 id=&quot;代码实战&quot;&gt;代码实战&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;此部分代码基于springboot进行，全部代码放到github上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spring Boot 集成 RabbitMQ 非常简单，仅需非常少的配置就可使用，Spring Boot 提供了 spring-boot-starter-amqp 组件对MQ消息支持。&lt;/p&gt;
&lt;h4 id=&quot;简单使用&quot;&gt;简单使用&lt;/h4&gt;
&lt;p&gt;（1）配置 pom 包，主要是添加 spring-boot-starter-amqp 的支持。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-amqp&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）配置文件，配置 rabbitmq 的安装地址、端口及账户信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;spring.application.name=spirng-boot-rabbitmq

spring.rabbitmq.host= localhost
spring.rabbitmq.port= 5672
spring.rabbitmq.username=allen
spring.rabbitmq.password=123456

server.port=8080&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）定义队列&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Configuration
public class RabbitConfig {

    @Bean
    public Queue Queue() {
        return new Queue(&quot;hello&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）发送者&lt;/p&gt;
&lt;p&gt;AmqpTemplate 是 Spring Boot 提供的默认实现。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@RestController
public class HelloSender {

    @Autowired
    private AmqpTemplate amqpTemplate;

    @GetMapping(value = &quot;/sendString&quot;)
    public String sendString() {
        //发送消息 String routingKey, Object object
        amqpTemplate.convertAndSend(&quot;hello&quot;, &quot;hello rabbitMQ&quot;);
        return &quot;消息已发送&quot;;
    }

    @GetMapping(value = &quot;/sendObject&quot;)
    public String sendObject() {
        //发送消息 String routingKey, Object object
        UserEntity userEntity = new UserEntity();
        userEntity.setName(&quot;allen&quot;);
        userEntity.setAddress(&quot;山东济南&quot;);
        amqpTemplate.convertAndSend(&quot;hello&quot;, userEntity);
        return &quot;消息已发送&quot;;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）接收者&lt;/p&gt;
&lt;p&gt;注意使用注解&lt;code&gt;@RabbitListener&lt;/code&gt;，使用 queues 指明队列名称，&lt;code&gt;@RabbitHandler&lt;/code&gt;为具体接收的方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Component
@RabbitListener(queues = &quot;hello&quot;)
@Slf4j
public class HelloReceiver {

    @RabbitHandler
    public void process(String hello) {
        log.info(&quot;消息接受为：{}&quot;,hello);
    }

    @RabbitHandler
    public void process(UserEntity userEntity) {
        log.info(&quot;消息接受为：{}&quot;,userEntity);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）访问结果&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;com.zhb.direct.HelloReceiver             : 消息接受为：hello rabbitMQ
com.zhb.direct.HelloReceiver             : 消息接受为：UserEntity(name=allen, address=山东济南)
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;topic-exchange&quot;&gt;Topic Exchange&lt;/h4&gt;
&lt;p&gt;（1）定义队列、交换机并绑定&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * @author: curry
 * @Date: 2018/9/5
 */
@Configuration
public class TopicRabbitConfig {

    final static String message = &quot;topic.message&quot;;
    final static String messages = &quot;topic.messages&quot;;

    //定义队列
    @Bean
    public Queue queueMessage() {
        return new Queue(TopicRabbitConfig.message);
    }

    @Bean
    public Queue queueMessages() {
        return new Queue(TopicRabbitConfig.messages);
    }

    //exchange
    @Bean
    TopicExchange exchange() {
        return new TopicExchange(&quot;exchange&quot;);
    }

    //将队列和交换机进行绑定
    @Bean
    Binding bindingExchangeMessage(Queue queueMessage, TopicExchange exchange) {
        return BindingBuilder.bind(queueMessage).to(exchange).with(&quot;topic.message&quot;);
    }

    @Bean
    Binding bindingExchangeMessages(Queue queueMessages, TopicExchange exchange) {
        return BindingBuilder.bind(queueMessages).to(exchange).with(&quot;topic.#&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）发送者&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * @author: curry
 * @Date: 2018/9/5
 */
@RestController
public class Sender {
    @Resource
   private AmqpTemplate rabbitTemplate;

    @GetMapping(value = &quot;send1&quot;)
    public void send1(){
        String context = &quot;hi, i am message1&quot;;
        rabbitTemplate.convertAndSend(&quot;exchange&quot;,&quot;topic.message&quot;,context);
    }

    @GetMapping(value = &quot;send2&quot;)
    public void send2(){
        String context = &quot;hi, i am message2&quot;;
        rabbitTemplate.convertAndSend(&quot;exchange&quot;,&quot;topic.messages&quot;,context);
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(3) 接受者&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/**
 * @author: curry
 * @Date: 2018/9/5
 */
@Slf4j
@Component
@RabbitListener(queues = &quot;topic.message&quot;)
public class Receiver1 {

    @RabbitHandler
    public void process(String message) {
        log.info(&quot;topic Receive1:{}&quot;, message);
    }
}

/**
 * @author: curry
 * @Date: 2018/9/5
 */
@Slf4j
@Component
@RabbitListener(queues = &quot;topic.messages&quot;)
public class Receiver2 {

    @RabbitHandler
    public void process(String message) {
        log.info(&quot;topic Receive2:{}&quot;, message);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;其余代码不再演示，完整代码见github&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完整代码：&lt;a href=&quot;https://github.com/runzhenghengbin/SpringBoot&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好了，玩的开心！&lt;/p&gt;
&lt;p&gt;参考资料&lt;/p&gt;
&lt;p&gt;[1]-https://www.jianshu.com/p/79ca08116d57&lt;/p&gt;
</description>
<pubDate>Thu, 06 Sep 2018 16:21:00 +0000</pubDate>
<dc:creator>养码青年</dc:creator>
<og:description>RabbitMQ简介 AMQP:Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenghengbin/p/9602091.html</dc:identifier>
</item>
<item>
<title>Zookeeper系列三：Zookeeper客户端的使用（Zookeeper原生API如何进行调用、ZKClient、Curator） - 小不点啊</title>
<link>http://www.cnblogs.com/leeSmall/p/9576437.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leeSmall/p/9576437.html</guid>
<description>&lt;p&gt;准备工作：&lt;/p&gt;
&lt;p&gt;首先在新建一个maven项目ZK-Demo,然后在pom.xml里面引入zk的依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.zookeeper&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;zookeeper&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.4.10&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1. 连接zk并监听事件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.zk;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.CountDownLatch;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.WatchedEvent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher.Event.KeeperState;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooKeeper;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接zk并监听事件&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ZKDemo &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Watcher {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; CountDownLatch cdl = &lt;span&gt;new&lt;/span&gt; CountDownLatch(1&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        ZooKeeper zk &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ZooKeeper(&quot;192.168.152.130:2181&quot;, 5000, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZKDemo());
        System.out.println(zk.getState());

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            cdl.await();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            System.out.println(&lt;/span&gt;&quot;ZK Session established.&quot;&lt;span&gt;);
        }
    }


    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听到事件时进行处理&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; process(WatchedEvent event) {
        System.out.println(&lt;/span&gt;&quot;Receive watched event:&quot; +&lt;span&gt; event);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (KeeperState.SyncConnected ==&lt;span&gt; event.getState()) {
            cdl.countDown();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;CONNECTING&lt;br/&gt;Receive watched event:WatchedEvent state:SyncConnected type:None path:null&lt;/p&gt;
&lt;h2&gt;2. 创建znode并监听事件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.zk;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.CountDownLatch;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.KeeperException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.WatchedEvent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher.Event.KeeperState;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooDefs.Ids;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooKeeper;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建znode并监听事件&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ZKOperateDemo &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Watcher {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; CountDownLatch cdl = &lt;span&gt;new&lt;/span&gt; CountDownLatch(1&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, InterruptedException, KeeperException {
        ZooKeeper zk &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ZooKeeper(&quot;192.168.152.130:2181&quot;, 5000, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZKOperateDemo());
        cdl.await();

        String path1 &lt;/span&gt;= zk.create(&quot;/zk-test-&quot;, &quot;123&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
        System.out.println(&lt;/span&gt;&quot;Success create path: &quot; +&lt;span&gt; path1);
        String path2 &lt;/span&gt;= zk.create(&quot;/zk-test-&quot;, &quot;456&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);
        System.out.println(&lt;/span&gt;&quot;Success create path: &quot; +&lt;span&gt; path2);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听到事件时进行处理&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; process(WatchedEvent event) {
        System.out.println(&lt;/span&gt;&quot;Receive watched event:&quot; +&lt;span&gt; event);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (KeeperState.SyncConnected ==&lt;span&gt; event.getState()) {
            cdl.countDown();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;Receive watched event:WatchedEvent state:SyncConnected type:None path:null&lt;br/&gt;Success create path: /zk-test-&lt;br/&gt;Success create path: /zk-test-0000000011&lt;/p&gt;
&lt;h2&gt;3. 改变znode数据并监听事件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.zk;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.CountDownLatch;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.KeeperException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.WatchedEvent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher.Event.EventType;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher.Event.KeeperState;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooDefs.Ids;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooKeeper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.data.Stat;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变znode数据并监听事件&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ZKDataDemo &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Watcher {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; CountDownLatch cdl = &lt;span&gt;new&lt;/span&gt; CountDownLatch(1&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ZooKeeper zk = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Stat stat = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stat();

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, InterruptedException, KeeperException {
        zk &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ZooKeeper(&quot;192.168.152.130:2181&quot;, 5000, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZKDataDemo());
        cdl.await();

        zk.create(&lt;/span&gt;&quot;/zk-test&quot;, &quot;123&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
        System.out.println(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; String(zk.getData(&quot;/zk-test&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, stat)));

        zk.getData(&lt;/span&gt;&quot;/zk-test&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, stat);
        System.out.println(stat.getCzxid() &lt;/span&gt;+ &quot;, &quot; + stat.getMzxid() + &quot;, &quot; +&lt;span&gt; stat.getVersion());
        zk.setData(&lt;/span&gt;&quot;/zk-test&quot;, &quot;123&quot;.getBytes(), -1&lt;span&gt;);

        Thread.sleep(Integer.MAX_VALUE);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听到事件时进行处理&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; process(WatchedEvent event) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (KeeperState.SyncConnected ==&lt;span&gt; event.getState()) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (EventType.None == event.getType() &amp;amp;&amp;amp; &lt;span&gt;null&lt;/span&gt; ==&lt;span&gt; event.getPath()) {
                cdl.countDown();
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (event.getType() ==&lt;span&gt; EventType.NodeDataChanged) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    System.out.println(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; String(zk.getData(event.getPath(), &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, stat)));
                    System.out.println(stat.getCzxid() &lt;/span&gt;+ &quot;, &quot; + stat.getMzxid() + &quot;, &quot; +&lt;span&gt; stat.getVersion());
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                }
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;123&lt;br/&gt;4294967354, 4294967354, 0&lt;br/&gt;123&lt;br/&gt;4294967354, 4294967355, 1&lt;/p&gt;
&lt;h2&gt;4. 改变子节点并监听事件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.zk;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.CountDownLatch;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.KeeperException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.WatchedEvent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher.Event.EventType;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher.Event.KeeperState;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooDefs.Ids;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooKeeper;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变子节点并监听事件&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ZKChildrenDemo &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Watcher {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; CountDownLatch cdl = &lt;span&gt;new&lt;/span&gt; CountDownLatch(1&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ZooKeeper zk = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, InterruptedException, KeeperException {
        zk &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ZooKeeper(&quot;192.168.152.130:2181&quot;, 5000, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZKChildrenDemo());
        cdl.await();

        zk.create(&lt;/span&gt;&quot;/zk-test&quot;, &quot;123&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(&lt;/span&gt;&quot;/zk-test/c1&quot;, &quot;456&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);

        List&lt;/span&gt;&amp;lt;String&amp;gt; list = zk.getChildren(&quot;/zk-test&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String str : list)
            System.out.println(str);

        zk.create(&lt;/span&gt;&quot;/zk-test/c2&quot;, &quot;789&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);

        Thread.sleep(Integer.MAX_VALUE);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听到事件时进行处理&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; process(WatchedEvent event) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (KeeperState.SyncConnected ==&lt;span&gt; event.getState())
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (EventType.None == event.getType() &amp;amp;&amp;amp; &lt;span&gt;null&lt;/span&gt; ==&lt;span&gt; event.getPath()) {
                cdl.countDown();
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (event.getType() ==&lt;span&gt; EventType.NodeChildrenChanged) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    System.out.println(&lt;/span&gt;&quot;Child: &quot; + zk.getChildren(event.getPath(), &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                }
            }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;c1&lt;br/&gt;Child: [c1, c2]&lt;/p&gt;
&lt;h2&gt;5. 异步调用并完成回调&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.zk;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.CountDownLatch;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.AsyncCallback;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.KeeperException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.WatchedEvent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher.Event.EventType;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher.Event.KeeperState;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooDefs.Ids;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooKeeper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.data.Stat;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;异步调用并完成回调&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; ChildrenCallback &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; AsyncCallback.Children2Callback {
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; processResult(&lt;span&gt;int&lt;/span&gt; rc, String path, Object ctx, List&amp;lt;String&amp;gt;&lt;span&gt; children, Stat stat) {
        System.out.println(
                &lt;/span&gt;&quot;Child: &quot; + rc + &quot;, path: &quot; + path + &quot;, ctx: &quot; + ctx + &quot;, children: &quot; + children + &quot;, stat: &quot; +&lt;span&gt; stat);
    }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ZKChildrenAsyncDemo &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Watcher {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; CountDownLatch cdl = &lt;span&gt;new&lt;/span&gt; CountDownLatch(1&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ZooKeeper zk = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, InterruptedException, KeeperException {
        zk &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ZooKeeper(&quot;192.168.152.130:2181&quot;, 5000, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZKChildrenAsyncDemo());
        cdl.await();

        zk.create(&lt;/span&gt;&quot;/zk-test&quot;, &quot;123&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

        zk.create(&lt;/span&gt;&quot;/zk-test/c1&quot;, &quot;456&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);

        zk.getChildren(&lt;/span&gt;&quot;/zk-test&quot;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; ChildrenCallback(), &quot;ok&quot;&lt;span&gt;);

        Thread.sleep(Integer.MAX_VALUE);
    }

    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听到事件时进行处理&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; process(WatchedEvent event) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (KeeperState.SyncConnected ==&lt;span&gt; event.getState())
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (EventType.None == event.getType() &amp;amp;&amp;amp; &lt;span&gt;null&lt;/span&gt; ==&lt;span&gt; event.getPath()) {
                cdl.countDown();
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (event.getType() ==&lt;span&gt; EventType.NodeChildrenChanged) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    System.out.println(&lt;/span&gt;&quot;Child: &quot; + zk.getChildren(event.getPath(), &lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                }
            }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;Child: 0, path: /zk-test, ctx: ok, children: [c1], stat: 4294967369,4294967369,1535536716381,1535536716381,0,1,0,0,3,1,4294967370&lt;/p&gt;
&lt;h2&gt;6. 连接后创建回调&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.zk;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.CountDownLatch;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.AsyncCallback;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.KeeperException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.WatchedEvent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.Watcher.Event.KeeperState;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooDefs.Ids;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.ZooKeeper;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接后创建回调&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; IStringCallback &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; AsyncCallback.StringCallback {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; processResult(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; rc, String path, Object ctx, String name) {
        System.out.println(&lt;/span&gt;&quot;create path result: [&quot; + rc + &quot;, &quot; + path + &quot;,&quot; + ctx + &quot;, real path name: &quot; +&lt;span&gt; name);
    }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ZKAsyncDemo &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Watcher {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; CountDownLatch cdl = &lt;span&gt;new&lt;/span&gt; CountDownLatch(1&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException, InterruptedException, KeeperException {
        ZooKeeper zk &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ZooKeeper(&quot;192.168.152.130:2181&quot;, 5000, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZKAsyncDemo());
        cdl.await();

        zk.create(&lt;/span&gt;&quot;/zk-test-&quot;, &quot;123&quot;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IStringCallback(),
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; String(&quot;I am context&quot;&lt;span&gt;));

        zk.create(&lt;/span&gt;&quot;/zk-test-&quot;, &quot;456&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL,
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IStringCallback(), &lt;span&gt;new&lt;/span&gt; String(&quot;I am context&quot;&lt;span&gt;));

        zk.create(&lt;/span&gt;&quot;/zk-test-&quot;, &quot;789&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL,
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; IStringCallback(), &lt;span&gt;new&lt;/span&gt; String(&quot;I am context&quot;&lt;span&gt;));

        Thread.sleep(Integer.MAX_VALUE);
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听到事件时进行处理&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; process(WatchedEvent event) {
        System.out.println(&lt;/span&gt;&quot;Receive watched event:&quot; +&lt;span&gt; event);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (KeeperState.SyncConnected ==&lt;span&gt; event.getState()) {
            cdl.countDown();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;Receive watched event:WatchedEvent state:SyncConnected type:None path:null&lt;br/&gt;create path result: [0, /zk-test-,I am context, real path name: /zk-test-&lt;br/&gt;create path result: [-110, /zk-test-,I am context, real path name: null&lt;br/&gt;create path result: [0, /zk-test-,I am context, real path name: /zk-test-0000000016&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;ZKClient的优点：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1）可以递归创建。在zookeeper命令行和zookeeper的原生API里面得先创建父节点才能创建子节点&lt;br/&gt;2）可以递归删除。在zookeeper命令行和zookeeper的原生API里面得先删除子节点才能删除父节点&lt;br/&gt;3）避免不存在的异常&lt;/p&gt;
&lt;p&gt;准备工作：&lt;/p&gt;
&lt;p&gt;首先在新建一个maven项目ZK-Demo,然后在pom.xml里面引入ZKClient的依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.101tec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkclient&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.10&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1. ZkClient递归创建顺序节点&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.client;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.I0Itec.zkclient.ZkClient;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 
* @Description: ZkClient递归创建顺序节点
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月2日
*
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreateNodeDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        ZkClient client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ZkClient(&quot;192.168.152.130:2181&quot;, 5000&lt;span&gt;);
        String path &lt;/span&gt;= &quot;/zk-client/c1&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 递归创建顺序节点 true：先创建父节点/zk-client&lt;/span&gt;
        client.createPersistent(path, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 创建成功：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180902225132439-1645112322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2. ZkClient获取数据并监听事件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.client;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.I0Itec.zkclient.IZkDataListener;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.I0Itec.zkclient.ZkClient;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: ZkClient获取数据
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月2日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GetDataDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        String path &lt;/span&gt;= &quot;/zk-client&quot;&lt;span&gt;;
        ZkClient client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ZkClient(&quot;192.168.152.130:2181&quot;, 5000&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建临时节点&lt;/span&gt;
        client.createEphemeral(path, &quot;123&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册父节点数据改变的事件&lt;/span&gt;
        client.subscribeDataChanges(path, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IZkDataListener() {
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;父节点数据改变事件&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDataChange(String dataPath, Object data) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                System.out.println(dataPath &lt;/span&gt;+ &quot; changed: &quot; +&lt;span&gt; data);
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;父节点数据删除事件&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDataDeleted(String dataPath) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                System.out.println(dataPath &lt;/span&gt;+ &quot; deleted&quot;&lt;span&gt;);
            }
        });

        System.out.println(client.readData(path).toString());
        client.writeData(path, &lt;/span&gt;&quot;456&quot;&lt;span&gt;);
        Thread.sleep(&lt;/span&gt;1000&lt;span&gt;);
        client.delete(path);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;sleep的目的是为了更好的观察事件变化&lt;/span&gt;
&lt;span&gt;        Thread.sleep(Integer.MAX_VALUE);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 输出结果：&lt;/p&gt;
&lt;p&gt;123&lt;br/&gt;/zk-client changed: 456&lt;br/&gt;/zk-client deleted&lt;/p&gt;
&lt;h2&gt;3. ZkClient获取子节点数据并监听事件&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.client;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.I0Itec.zkclient.IZkChildListener;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.I0Itec.zkclient.ZkClient;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: ZkClient获取子节点数据
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月2日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GetChildrenDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        String path &lt;/span&gt;= &quot;/zk-client&quot;&lt;span&gt;;
        ZkClient client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ZkClient(&quot;192.168.152.130:2181&quot;, 5000&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册子节点数据改变的事件&lt;/span&gt;
        client.subscribeChildChanges(path, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IZkChildListener() {
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;子节点数据改变事件&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleChildChange(String parentPath, List&amp;lt;String&amp;gt; currentChilds) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                System.out.println(parentPath &lt;/span&gt;+ &quot;的子发生变化: &quot; +&lt;span&gt; currentChilds);
            }
        });

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建顺序节点&lt;/span&gt;
&lt;span&gt;        client.createPersistent(path);
        Thread.sleep(&lt;/span&gt;1000&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取子节点数据 此时还没有创建获取不到&lt;/span&gt;
&lt;span&gt;        System.out.println(client.getChildren(path));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在前面的父节点 /zk-client下创建子节点c1&lt;/span&gt;
        client.createPersistent(path + &quot;/c1&quot;&lt;span&gt;);
        Thread.sleep(&lt;/span&gt;1000&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除子节点&lt;/span&gt;
        client.delete(path + &quot;/c1&quot;&lt;span&gt;);
        Thread.sleep(&lt;/span&gt;1000&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除父节点&lt;/span&gt;
&lt;span&gt;        client.delete(path);
        Thread.sleep(Integer.MAX_VALUE);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 输出结果：&lt;/p&gt;
&lt;p&gt;/zk-client的子发生变化: []&lt;br/&gt;[]&lt;br/&gt;/zk-client的子发生变化: [c1]&lt;br/&gt;/zk-client的子发生变化: []&lt;br/&gt;/zk-client的子发生变化: null&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;curator是连接ZK应用最广泛的工具&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原因如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）zk应用场景（分布式锁，Master选举等等），curator包含了这些场景。&lt;br/&gt;2）应用场景出现极端的情况下，curator考虑到处理了。&lt;/p&gt;
&lt;p&gt;准备工作：&lt;/p&gt;
&lt;p&gt;首先在新建一个maven项目ZK-Demo,然后在pom.xml里面引入curator的依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.curator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;curator-framework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.curator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;curator-recipes&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1. curator创建连接session&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.curator;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.RetryPolicy;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFramework;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFrameworkFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.retry.ExponentialBackoffRetry;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: curator创建连接session
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月2日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreateSessionDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
        RetryPolicy policy &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ExponentialBackoffRetry(1000, 3&lt;span&gt;);
        CuratorFramework client &lt;/span&gt;= CuratorFrameworkFactory.builder().connectString(&quot;192.168.152.130:2181&quot;&lt;span&gt;)
                .sessionTimeoutMs(&lt;/span&gt;5000&lt;span&gt;).retryPolicy(policy).build();
        client.start();
        Thread.sleep(Integer.MAX_VALUE);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里介绍一种算法：&lt;span&gt;&lt;strong&gt;Backoff退避算法&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;有这样一种场景，有多个请求，如果网络出现阻塞,每1分钟重试一次。&lt;br/&gt;20：25 request1（block）&lt;br/&gt;20：26 request2（block）&lt;br/&gt;20：27 request3（block）&lt;br/&gt;当网络通顺的时候，请求都累在一起来发送&lt;br/&gt;20：28 request4（通顺）request2、3、4&lt;br/&gt;那么前面的请求就没有意义了，所以就有了退避算法，按照指数间隔重试，比如第一次1分钟，第二次2分钟......随着时间的推移，重试间隔越长。&lt;/p&gt;
&lt;h2&gt;2. curator递归创建顺序节点&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.curator;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFramework;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFrameworkFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.retry.ExponentialBackoffRetry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: curator递归创建顺序节点
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月2日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreateNodeDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        String path &lt;/span&gt;= &quot;/zk-curator/c1&quot;&lt;span&gt;;
        CuratorFramework client &lt;/span&gt;= CuratorFrameworkFactory.builder().connectString(&quot;192.168.152.130:2181&quot;&lt;span&gt;)
                .sessionTimeoutMs(&lt;/span&gt;5000).retryPolicy(&lt;span&gt;new&lt;/span&gt; ExponentialBackoffRetry(1000, 3&lt;span&gt;)).build();
        client.start();
        client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path, &lt;/span&gt;&quot;test&quot;&lt;span&gt;.getBytes());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建成功：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1227483/201809/1227483-20180902231744676-276385836.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3. curator异步创建临时节点&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.curator;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.CountDownLatch;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.ExecutorService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.Executors;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFramework;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFrameworkFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.api.BackgroundCallback;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.api.CuratorEvent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.retry.ExponentialBackoffRetry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: curator异步创建临时节点
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月2日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CreateNodeAsyncDemo {
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; CountDownLatch cdl = &lt;span&gt;new&lt;/span&gt; CountDownLatch(2&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; ExecutorService es = Executors.newFixedThreadPool(2&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        String path &lt;/span&gt;= &quot;/zk-curator&quot;&lt;span&gt;;
        CuratorFramework client &lt;/span&gt;= CuratorFrameworkFactory.builder().connectString(&quot;192.168.152.130:2181&quot;&lt;span&gt;)
                .sessionTimeoutMs(&lt;/span&gt;5000).retryPolicy(&lt;span&gt;new&lt;/span&gt; ExponentialBackoffRetry(1000, 3&lt;span&gt;)).build();
        client.start();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建临时节点&lt;/span&gt;
        client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).inBackground(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; BackgroundCallback() {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;回调事件处理&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; processResult(CuratorFramework client, CuratorEvent event) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                System.out.println(&lt;/span&gt;&quot;event code: &quot; + event.getResultCode() + &quot;, type: &quot; +&lt;span&gt; event.getType());
                cdl.countDown();
            }
        }, es).forPath(path, &lt;/span&gt;&quot;test&quot;&lt;span&gt;.getBytes());

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建临时节点&lt;/span&gt;
        client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).inBackground(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; BackgroundCallback() {
            
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; processResult(CuratorFramework client, CuratorEvent event) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                System.out.println(&lt;/span&gt;&quot;event code: &quot; + event.getResultCode() + &quot;, type: &quot; +&lt;span&gt; event.getType());
                cdl.countDown();
            }
        }).forPath(path, &lt;/span&gt;&quot;test&quot;&lt;span&gt;.getBytes());

        cdl.await();
        es.shutdown();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 输出结果：&lt;/p&gt;
&lt;p&gt;event code: 0, type: CREATE&lt;br/&gt;event code: -110, type: CREATE&lt;/p&gt;
&lt;h2&gt;4. curator更新节点数据&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.curator;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFramework;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFrameworkFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.retry.ExponentialBackoffRetry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.data.Stat;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: curator更新节点数据
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月2日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UpdateDataDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        String path &lt;/span&gt;= &quot;/zk-curator/c1&quot;&lt;span&gt;;
        CuratorFramework client &lt;/span&gt;= CuratorFrameworkFactory.builder().connectString(&quot;192.168.152.130:2181&quot;&lt;span&gt;)
                .sessionTimeoutMs(&lt;/span&gt;5000).retryPolicy(&lt;span&gt;new&lt;/span&gt; ExponentialBackoffRetry(1000, 3&lt;span&gt;)).build();
        client.start();
        client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(path, &lt;/span&gt;&quot;test&quot;&lt;span&gt;.getBytes());
        Stat stat &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stat();
        client.getData().storingStatIn(stat).forPath(path);
        System.out.println(&lt;/span&gt;&quot;Current data: &quot; +&lt;span&gt; stat.getVersion());
        System.out.println(&lt;/span&gt;&quot;Update data: &quot;
                + client.setData().withVersion(stat.getVersion()).forPath(path, &quot;some&quot;&lt;span&gt;.getBytes()).getVersion());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 输出结果：&lt;/p&gt;
&lt;p&gt;Current data: 0&lt;br/&gt;Update data: 1&lt;/p&gt;
&lt;h2&gt;5. curator删除节点数据&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.curator;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFramework;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFrameworkFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.retry.ExponentialBackoffRetry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.data.Stat;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: curator删除节点数据
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月2日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DeleteNodeDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        String path &lt;/span&gt;= &quot;/zk-curator/c1&quot;&lt;span&gt;;
        CuratorFramework client &lt;/span&gt;= CuratorFrameworkFactory.builder().connectString(&quot;192.168.152.130:2181&quot;&lt;span&gt;)
                .sessionTimeoutMs(&lt;/span&gt;5000).retryPolicy(&lt;span&gt;new&lt;/span&gt; ExponentialBackoffRetry(1000, 3&lt;span&gt;)).build();
        client.start();
        client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(path, &lt;/span&gt;&quot;test&quot;&lt;span&gt;.getBytes());
        Stat stat &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stat();
        client.getData().storingStatIn(stat).forPath(path);
        client.delete().deletingChildrenIfNeeded().withVersion(stat.getVersion()).forPath(path);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6. curator事件监听&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.study.demo.curator;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFramework;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.CuratorFrameworkFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.recipes.cache.NodeCache;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.framework.recipes.cache.NodeCacheListener;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.curator.retry.ExponentialBackoffRetry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.zookeeper.CreateMode;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* 
* @Description: curator事件监听
* &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; leeSmall
* @date 2018年9月2日
*
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NodeCacheDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        String path &lt;/span&gt;= &quot;/zk-curator/nodecache&quot;&lt;span&gt;;
        CuratorFramework client &lt;/span&gt;= CuratorFrameworkFactory.builder().connectString(&quot;192.168.152.130:2181&quot;&lt;span&gt;)
                .sessionTimeoutMs(&lt;/span&gt;5000).retryPolicy(&lt;span&gt;new&lt;/span&gt; ExponentialBackoffRetry(1000, 3&lt;span&gt;)).build();
        client.start();
        client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(path, &lt;/span&gt;&quot;test&quot;&lt;span&gt;.getBytes());

        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; NodeCache nc = &lt;span&gt;new&lt;/span&gt; NodeCache(client, path, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        nc.start();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过回调函数监听事件&lt;/span&gt;
        nc.getListenable().addListener(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; NodeCacheListener() {
            
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; nodeChanged() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                System.out.println(&lt;/span&gt;&quot;update--current data: &quot; + &lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(nc.getCurrentData().getData()));
            }
        });
        
        client.setData().forPath(path, &lt;/span&gt;&quot;test123&quot;&lt;span&gt;.getBytes());
        Thread.sleep(&lt;/span&gt;1000&lt;span&gt;);
        client.delete().deletingChildrenIfNeeded().forPath(path);
        Thread.sleep(&lt;/span&gt;5000&lt;span&gt;);
        nc.close();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 输出结果：&lt;/p&gt;
&lt;p&gt;update--current data: test123&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;&lt;strong&gt;Curator事件监听：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;NodeCache：节点处理监听（会使用缓存）。回调接口NodeCacheListener&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;PathChildrenCache：子节点缓存，处理子节点变化。回调接口PathChildrenCacheListener&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;TreeCache：NodeCache和PathChildrenCache的结合体。回调接口TreeCacheListener&lt;/p&gt;
</description>
<pubDate>Thu, 06 Sep 2018 16:02:00 +0000</pubDate>
<dc:creator>小不点啊</dc:creator>
<og:description>一、Zookeeper原生API如何进行调用 准备工作： 首先在新建一个maven项目ZK-Demo,然后在pom.xml里面引入zk的依赖 1. 连接zk并监听事件 输出结果： CONNECTING</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leeSmall/p/9576437.html</dc:identifier>
</item>
<item>
<title>D10——C语言基础学PYTHON - m1racle</title>
<link>http://www.cnblogs.com/zhangkanghui/p/9602004.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangkanghui/p/9602004.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt;  2&lt;/span&gt; &amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zh-cn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;  3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt;  4&lt;/span&gt; &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;  5&lt;/span&gt; &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width, initial-scale=1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;  6&lt;/span&gt; &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;referrer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;origin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;  7&lt;/span&gt; &amp;lt;title&amp;gt;D09——C语言基础学PYTHON - m1racle - 博客园&amp;lt;/title&amp;gt;
&lt;span&gt;  8&lt;/span&gt; &amp;lt;meta property=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;og:description&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C语言基础学习PYTHON——基础学习D09 20180903内容纲要： 线程、进程 1、paramiko 2、线程、进程初识 3、线程 （1）线程的调用方式 （2）join （3）线程锁、递归锁、信&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;  9&lt;/span&gt; &amp;lt;link type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bundles/blog-common.css?v=D7Le-lOZiZVAXQkZQuNwdTWqjabXaVBE_2YAWzY_YZs1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt; 10&lt;/span&gt; &amp;lt;link id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MainCss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/skins/red_autumnal_leaves/bundle-red_autumnal_leaves.css?v=EDEp2d1uMe8iyN6qDoW8MQgYb-JCFIeiYP0oX3XiiRM1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt; 11&lt;/span&gt; &amp;lt;link id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mobile-style&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; media=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;only screen and (max-width: 767px)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/skins/red_autumnal_leaves/bundle-red_autumnal_leaves-mobile.css?v=d9LctKHRIQp9rreugMcQ1-UJuq_j1fo0GZXTXj8Bqrk1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt; 12&lt;/span&gt; &amp;lt;link title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RSS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/rss+xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alternate&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/zhangkanghui/rss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt; 13&lt;/span&gt; &amp;lt;link title=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RSD&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/rsd+xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EditURI&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/zhangkanghui/rsd.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt; 14&lt;/span&gt; &amp;lt;link type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/wlwmanifest+xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wlwmanifest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/zhangkanghui/wlwmanifest.xml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt; 15&lt;/span&gt; &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//common.cnblogs.com/scripts/jquery-2.2.0.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 16&lt;/span&gt; &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;var currentBlogApp = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;zhangkanghui&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, cb_enable_mathjax=false;var isLogined=false;&amp;lt;/script&amp;gt;
&lt;span&gt; 17&lt;/span&gt; &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bundles/blog-common.js?v=yRkjgN2sBQkB4hX-wirHxPomeBT9sB5dawr6ob7KIvg1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;span&gt; 18&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt; 19&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt; 20&lt;/span&gt; &amp;lt;a name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;top&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/a&amp;gt;
&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt; &amp;lt;!--done--&amp;gt;
&lt;span&gt; 23&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 24&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;header&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 25&lt;/span&gt;     &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blogTitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 26&lt;/span&gt;     &amp;lt;a id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lnkBlogLogo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/zhangkanghui/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blogLogo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/Skins/custom/images/logo.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;返回主页&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;&amp;lt;/a&amp;gt;            
&lt;span&gt; 27&lt;/span&gt;         
&lt;span&gt; 28&lt;/span&gt; &amp;lt;!--done--&amp;gt;
&lt;span&gt; 29&lt;/span&gt; &amp;lt;h1&amp;gt;&amp;lt;a id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Header1_HeaderTitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;headermaintitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/zhangkanghui/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;m1racle&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&lt;span&gt; 30&lt;/span&gt; &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;
&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;         
&lt;span&gt; 35&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!--end: blogTitle 博客的标题和副标题 --&amp;gt;
&lt;span&gt; 36&lt;/span&gt;     &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navigator&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 37&lt;/span&gt;         
&lt;span&gt; 38&lt;/span&gt; &amp;lt;ul id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;navList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 39&lt;/span&gt; &amp;lt;li&amp;gt;&amp;lt;a id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog_nav_sitehome&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;博客园&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt; 40&lt;/span&gt; &amp;lt;li&amp;gt;&amp;lt;a id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog_nav_myhome&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/zhangkanghui/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;首页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt; 41&lt;/span&gt; &amp;lt;li&amp;gt;&amp;lt;a id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog_nav_newpost&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nofollow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://i.cnblogs.com/EditPosts.aspx?opt=1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;新随笔&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt; 42&lt;/span&gt; &amp;lt;li&amp;gt;&amp;lt;a id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog_nav_contact&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nofollow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://msg.cnblogs.com/send/m1racle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;联系&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt; 43&lt;/span&gt; &amp;lt;li&amp;gt;&amp;lt;a id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog_nav_rss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/zhangkanghui/rss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;订阅&amp;lt;/a&amp;gt;
&lt;span&gt; 44&lt;/span&gt; &amp;lt;!--&amp;lt;a id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog_nav_rss_image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aHeaderXML&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/zhangkanghui/rss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//www.cnblogs.com/images/xml.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;订阅&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;&amp;lt;/a&amp;gt;--&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt; 45&lt;/span&gt; &amp;lt;li&amp;gt;&amp;lt;a id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog_nav_admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;menu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nofollow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://i.cnblogs.com/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;管理&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span&gt; 46&lt;/span&gt; &amp;lt;/ul&amp;gt;
&lt;span&gt; 47&lt;/span&gt;         &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blogStats&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 48&lt;/span&gt;             
&lt;span&gt; 49&lt;/span&gt;             &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog_stats&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 50&lt;/span&gt; &amp;lt;span id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stats_post_count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;随笔 - 8&amp;amp;nbsp; &amp;lt;/span&amp;gt;
&lt;span&gt; 51&lt;/span&gt; &amp;lt;span id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stats_article_count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;文章 - 0&amp;amp;nbsp; &amp;lt;/span&amp;gt;
&lt;span&gt; 52&lt;/span&gt; &amp;lt;span id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stats-comment_count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;评论 - 1&amp;lt;/span&amp;gt;
&lt;span&gt; 53&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt; 54&lt;/span&gt;             
&lt;span&gt; 55&lt;/span&gt;         &amp;lt;/div&amp;gt;&amp;lt;!--end: blogStats --&amp;gt;
&lt;span&gt; 56&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!--end: navigator 博客导航栏 --&amp;gt;
&lt;span&gt; 57&lt;/span&gt; &amp;lt;/div&amp;gt;&amp;lt;!--end: header 头部 --&amp;gt;
&lt;span&gt; 58&lt;/span&gt; 
&lt;span&gt; 59&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;main&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 60&lt;/span&gt;     &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mainContent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 61&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;forFlow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 62&lt;/span&gt;         
&lt;span&gt; 63&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post_detail&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 64&lt;/span&gt; &amp;lt;!--done--&amp;gt;
&lt;span&gt; 65&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;topics&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 66&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 67&lt;/span&gt;         &amp;lt;h1 &lt;span&gt;class&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postTitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 68&lt;/span&gt;             &amp;lt;a id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cb_post_title_url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postTitle2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/zhangkanghui/p/9577714.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;D09——C语言基础学PYTHON&amp;lt;/a&amp;gt;
&lt;span&gt; 69&lt;/span&gt;         &amp;lt;/h1&amp;gt;
&lt;span&gt; 70&lt;/span&gt;         &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt; 71&lt;/span&gt;         &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postBody&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 72&lt;/span&gt;             &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_post_body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blogpost-body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 18pt; background-color: #ffff00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;strong&amp;gt;C语言基础学习PYTHON——基础学习D09&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 73&lt;/span&gt; &amp;lt;blockquote&amp;gt;
&lt;span&gt; 74&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 18px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20180903内容纲要：&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 75&lt;/span&gt; &amp;lt;/blockquote&amp;gt;
&lt;span&gt; 76&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt; 77&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;strong&amp;gt;　　　线程、进程&amp;lt;/strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 78&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt; 79&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;strong&amp;gt;　　1、paramiko&amp;lt;/strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 80&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;strong&amp;gt;　　2、线程、进程初识&amp;lt;/strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 81&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;strong&amp;gt;　　3、线程&amp;lt;/strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 82&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;strong&amp;gt;　　　　　（1）线程的调用方式&amp;lt;/strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 83&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;strong&amp;gt;　　　　　（2）join&amp;lt;/strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 84&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;strong&amp;gt;　　　　　（3）线程锁、递归锁、信号量&amp;lt;/strong&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 85&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;　　　　　（4）Timer&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 86&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;　　　　　（5）Event&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 87&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;　　　　　（6）Queue队列&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 88&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;　　4、小结&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 89&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;　　5、练习：简单主机批量管理工具&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 90&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;amp;nbsp;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 91&lt;/span&gt; &amp;lt;blockquote&amp;gt;
&lt;span&gt; 92&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 14pt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;strong&amp;gt;1、paramiko&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 93&lt;/span&gt; &amp;lt;/blockquote&amp;gt;
&lt;span&gt; 94&lt;/span&gt; &amp;lt;p&amp;gt;paramiko模块提供了ssh及sft进行远程登录服务器执行命令和上传下载文件的功能。这是一个第三方的软件包，使用之前需要安装。&amp;lt;/p&amp;gt;
&lt;span&gt; 95&lt;/span&gt; &amp;lt;p&amp;gt;我个人觉得，这个在Windows上不太好用。在windows上python3需要安装vs2010，但我装了之后还是不行，可能是我自己的原因，在python2.7上好像可以，没试过。&amp;lt;/p&amp;gt;
&lt;span&gt; 96&lt;/span&gt; &amp;lt;p&amp;gt;这有链接：&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://blog.csdn.net/songfreeman/article/details/50920767&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; target=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_blank&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;https://blog.csdn.net/songfreeman/article/details/50920767&amp;lt;br&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt; 97&lt;/span&gt; &amp;lt;p&amp;gt;很详细！&amp;lt;/p&amp;gt;
&lt;span&gt; 98&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt; 99&lt;/span&gt; &amp;lt;blockquote&amp;gt;
&lt;span&gt;100&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 14pt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;strong&amp;gt;2 线程、进程初识&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;101&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt; 
&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt; &amp;lt;/blockquote&amp;gt;
&lt;span&gt;108&lt;/span&gt; &amp;lt;h3&amp;gt;什么是线程(thread)？&amp;lt;/h3&amp;gt;
&lt;span&gt;109&lt;/span&gt; &amp;lt;p&amp;gt;线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。&amp;lt;/p&amp;gt;
&lt;span&gt;110&lt;/span&gt; &amp;lt;p&amp;gt;一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务&amp;lt;/p&amp;gt;
&lt;span&gt;111&lt;/span&gt; &amp;lt;p&amp;gt;A thread &lt;span&gt;is&lt;/span&gt; an execution context, which &lt;span&gt;is&lt;/span&gt; all the information a CPU needs to execute a stream of instructions.&amp;lt;/p&amp;gt;
&lt;span&gt;112&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_f52f3cbd-a865-4c8a-bd82-2732e6fb8022&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_f52f3cbd-a865-4c8a-bd82-2732e6fb8022&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;113&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_f52f3cbd-a865-4c8a-bd82-2732e6fb8022&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;114&lt;/span&gt; &amp;lt;pre&amp;gt;Suppose you&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;re reading a book, and you want to take a break right now, but you want to be able to come back and resume reading from the exact point where you stopped. One way to achieve that is by jotting down the page number, line number, and word number. So your execution context for reading a book is these 3 numbers.&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;116&lt;/span&gt; If you have a roommate, &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;and&lt;/span&gt;&amp;lt;/span&amp;gt; she&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;s using the same technique, she can take the book while you&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;re &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;not&lt;/span&gt;&amp;lt;/span&amp;gt; using it, &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;and&lt;/span&gt;&amp;lt;/span&amp;gt; resume reading &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;from&lt;/span&gt;&amp;lt;/span&amp;gt; where she stopped. Then you can take it back, &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;and&lt;/span&gt;&amp;lt;/span&amp;gt; resume it &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;from&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; where you were.
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; 
&lt;span&gt;118&lt;/span&gt; Threads work &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; the same way. A CPU &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;is&lt;/span&gt;&amp;lt;/span&amp;gt; giving you the illusion that it&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;s doing multiple computations at the same time. It does that by spending a bit of time on each computation. It can do that because it has an execution context for each computation. Just like you can share a book with your friend, many tasks can share a CPU.&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;120&lt;/span&gt; On a more technical level, an execution context (therefore a thread) consists of the values of the CPU&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;s registers.&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;122&lt;/span&gt; Last: threads are different &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;from&lt;/span&gt;&amp;lt;/span&amp;gt; processes. A thread &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;is&lt;/span&gt;&amp;lt;/span&amp;gt; a context of execution, &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;while&lt;/span&gt;&amp;lt;/span&amp;gt; a process &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;is&lt;/span&gt;&amp;lt;/span&amp;gt; a bunch of resources associated with a computation. A process can have one &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;or&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; many threads.
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; 
&lt;span&gt;124&lt;/span&gt; Clarification: the resources associated with a process include memory pages (all the threads &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; a process have the same view of the memory), file descriptors (e.g., open sockets), &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;and&lt;/span&gt;&amp;lt;/span&amp;gt; security credentials (e.g., the ID of the user who started the process).&amp;lt;/pre&amp;gt;
&lt;span&gt;125&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;126&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;英文解释&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;127&lt;/span&gt; &amp;lt;h3&amp;gt;什么是进程(process)？&amp;lt;/h3&amp;gt;
&lt;span&gt;128&lt;/span&gt; &amp;lt;p&amp;gt;程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为进程。&amp;lt;/p&amp;gt;
&lt;span&gt;129&lt;/span&gt; &amp;lt;p&amp;gt;程序和进程的区别就在于：程序是指令的集合，它是进程运行的静态描述文本；进程是程序的一次执行活动，属于动态概念。&amp;lt;/p&amp;gt;
&lt;span&gt;130&lt;/span&gt; &amp;lt;p&amp;gt;An executing instance of a program &lt;span&gt;is&lt;/span&gt; called a process.&amp;lt;/p&amp;gt;
&lt;span&gt;131&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_a81bb69d-34be-4e5b-86b5-d9787eee621a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_a81bb69d-34be-4e5b-86b5-d9787eee621a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;132&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_a81bb69d-34be-4e5b-86b5-d9787eee621a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;133&lt;/span&gt; &amp;lt;pre&amp;gt;Each process provides the resources needed to execute a program. A process has a virtual address space, executable code, open handles to system objects, a security context, a unique process identifier, environment variables, a priority &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;class&lt;/span&gt;&amp;lt;/span&amp;gt;, minimum &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;and&lt;/span&gt;&amp;lt;/span&amp;gt; maximum working set sizes, &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;and&lt;/span&gt;&amp;lt;/span&amp;gt; at least one thread of execution. Each process &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;is&lt;/span&gt;&amp;lt;/span&amp;gt; started with a single thread, often called the primary thread, but can create additional threads &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;from&lt;/span&gt;&amp;lt;/span&amp;gt; any of its threads.&amp;lt;/pre&amp;gt;
&lt;span&gt;134&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;135&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;英文解释&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;136&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;137&lt;/span&gt; &amp;lt;p&amp;gt;那么他们的区别呢？&amp;lt;/p&amp;gt;
&lt;span&gt;138&lt;/span&gt; &amp;lt;h3&amp;gt;进程与线程的区别？&amp;lt;/h3&amp;gt;
&lt;span&gt;139&lt;/span&gt; &amp;lt;p&amp;gt;线程：是操作系统最小的调度单位。 是一串指令的集合。&amp;lt;/p&amp;gt;
&lt;span&gt;140&lt;/span&gt; &amp;lt;p&amp;gt;进程：要操作cpu必须先创建一个线程&amp;lt;/p&amp;gt;
&lt;span&gt;141&lt;/span&gt; &amp;lt;p&amp;gt;所有在同一个进程里的线程是共享一块内存空间&amp;lt;/p&amp;gt;
&lt;span&gt;142&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;143&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_70388922-c789-45c9-a798-77fd21c98ac2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_70388922-c789-45c9-a798-77fd21c98ac2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;144&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_70388922-c789-45c9-a798-77fd21c98ac2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;145&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; 1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;、Threads share the address space of the process that created it; processes have their own address space.
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; 1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;、线程共享内存空间，进程的内存是独立的
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; 
&lt;span&gt;148&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; 2&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;、Threads have direct access to the data segment of its process; processes have their own copy of the data segment of the parent process.
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; 
&lt;span&gt;150&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; 3&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;、Threads can directly communicate with other threads of its process; processes must use interprocess communication to communicate with sibling processes.
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt; 3&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;、两个进程之间可以直接交流，两个进程进行通讯，必须通过一个中间代理来实现。
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt; 
&lt;span&gt;153&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt; 4&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;、New threads are easily created; new processes require duplication of the parent process.
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt; 4&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;、创建新线程很简单。创建新进程需要对其父进程进行一次克隆
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt; 
&lt;span&gt;156&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt; 5&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;、Threads can exercise considerable control over threads of the same process; processes can only exercise control over child processes.
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt; 5&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;、一个线程可以控制和操作同意进程里的其他线程，但是进程只能操作子进程
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt; 
&lt;span&gt;159&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt; 6、Changes to the main thread (cancellation, priority change, etc.) may affect the behavior of the other threads of the process; changes to the parent process does &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;not&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; affect child processes.
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt;  &amp;lt;/pre&amp;gt;
&lt;span&gt;161&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;162&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;进程与线程的区别&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;163&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;164&lt;/span&gt; &amp;lt;blockquote&amp;gt;
&lt;span&gt;165&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 14pt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;strong&amp;gt;3 线程&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;166&lt;/span&gt; &amp;lt;/blockquote&amp;gt;
&lt;span&gt;167&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 14px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;strong&amp;gt;（1）线程的调用方式&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;168&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 14px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;直接调用：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;169&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_8cc59f33-5a03-49bd-b99c-591a20547e10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_8cc59f33-5a03-49bd-b99c-591a20547e10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;170&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_8cc59f33-5a03-49bd-b99c-591a20547e10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;171&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;Author：ZhangKanghui&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; 
&lt;span&gt;173&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; 
&lt;span&gt;176&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run(n):
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;task&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,n,threading.current_thread())&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt;     time.sleep(2&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;#这里是只有两个线程，那么更多线程呢？
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;10&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;t1 = threading.Thread(target=run,args=(&quot;t1&quot;,))
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;11&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;t2 = threading.Thread(target=run,args=(&quot;t2&quot;,))
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;12&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;t1.start()
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;13&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;t2.start()
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;14&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&amp;lt;/span&amp;gt;
&lt;span&gt;185&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;这是一个多线程，那么我们来看一下他整个程序的执行时间为什么不是2s&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;186&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt; start_time =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; range(50&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt;     t = threading.Thread(target=run,args=(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;t-%s&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt; %i,))   &amp;lt;span style=&quot;color: #008000&quot;&amp;gt;#&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;这个地方args必须有，。。因为这是默认一个元组&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    t.start()
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;t.join()       #这样可以把并行变成串行&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;191&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt; 
&lt;span&gt;192&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;mian threading has finished....&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,threading.current_thread(),threading.active_count())&lt;/span&gt;
&lt;span&gt;193&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;cost:&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;,time.time()-&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;start_time)&lt;/span&gt;
&lt;span&gt;194&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;24&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;这是因为主线程和子线程没关系。主线程不会等子线程执行完毕才计算时间&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;25&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;那接下来如果想要等所有的线程结束然后打印程序执行时间可以这么干&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;196&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;26&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt; &lt;span&gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;27&amp;lt;/span&amp;gt; 
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;28&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;import threading
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;29&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;import time
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;30&amp;lt;/span&amp;gt; 
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; &lt;span&gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;31&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;def run(n):
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;32&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;    print(&quot;task&quot;,n)
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;33&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;    time.sleep(2)
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;34&amp;lt;/span&amp;gt;     
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; &lt;span&gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;35&amp;lt;/span&amp;gt; 
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt; &lt;span&gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;36&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;start_time = time.time()
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;37&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;t_obj =[]       #存线程实例
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;38&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;for i in range(50):
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;39&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;    t = threading.Thread(target=run,args=(&quot;t-%s&quot; %i,))   #这个地方args必须有，。。因为这是默认一个元组
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;40&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;    #t.setDaemon(True)              #把当前线程设置成守护线程，必须在启动strat之前
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;41&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;    t.start()
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;42&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;    t_obj.append(t) #为了不阻塞后面线程的启动，不在这里加join，先放到一个列表里
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;43&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;for i in t_obj:        #循环线程实例列表，等待所有线程执行完毕
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;44&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;    t.join()
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;45&amp;lt;/span&amp;gt;     
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; &lt;span&gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;46&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;print(&quot;cost:&quot;,time.time()-start_time)
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; &lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;47&amp;lt;/span&amp;gt; 
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; &lt;span&gt;&amp;lt;span style=&quot;color: #008080&quot;&amp;gt;48&amp;lt;/span&amp;gt; &amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;
&lt;span&gt;219&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;220&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;直接调用&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;221&lt;/span&gt; &amp;lt;p&amp;gt;继承式调用&amp;lt;/p&amp;gt;
&lt;span&gt;222&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_9cc95b50-0dd2-4780-98f6-e19ce4f49bd9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_9cc95b50-0dd2-4780-98f6-e19ce4f49bd9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;223&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_9cc95b50-0dd2-4780-98f6-e19ce4f49bd9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;224&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;Author：ZhangKanghui&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;225&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; 
&lt;span&gt;226&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; 
&lt;span&gt;229&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;class&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; MyThread(threading.Thread):
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;__init__&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(self,n,sleep_time):
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt;         super(MyThread,self).&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;__init__&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt;         self.n =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; n
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt;         self.sleep_time =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; sleep_time
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt; 
&lt;span&gt;235&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run(self):
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;running task&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,self.n)&lt;/span&gt;
&lt;span&gt;237&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;        time.sleep(self.sleep_time)
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;task done&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,self.n)&lt;/span&gt;
&lt;span&gt;239&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt; 
&lt;span&gt;240&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt; t1 =MyThread(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;t1&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;,2&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;241&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt; t2 =MyThread(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;t2&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;,4&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;242&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt; 
&lt;span&gt;243&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;t1.start()
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;t2.start()
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt; 
&lt;span&gt;246&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;t1.join()&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;247&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;24&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;t2.join()&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;248&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;25&amp;lt;/span&amp;gt; 
&lt;span&gt;249&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;26&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;mian threading....&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;)&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span&gt;250&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;251&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;继承式调用&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;252&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;（2）join&amp;amp;amp;Daemon&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;253&lt;/span&gt; &amp;lt;p&amp;gt;其实join就是wait。Daemon就是守护线程。&amp;lt;/p&amp;gt;
&lt;span&gt;254&lt;/span&gt; &amp;lt;p&amp;gt;Some threads do background tasks, like sending keepalive packets, &lt;span&gt;or&lt;/span&gt; performing periodic garbage collection, &lt;span&gt;or&lt;/span&gt; whatever. These are only useful when the main program &lt;span&gt;is&lt;/span&gt; running, &lt;span&gt;and&lt;/span&gt; it&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s okay to kill them off once the other, non-daemon, threads have exited.&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span&gt;255&lt;/span&gt; &amp;lt;p&amp;gt;Without daemon threads, you&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d have to keep track of them, and tell them to exit, before your program can completely quit. By setting them as daemon threads, you can let them run and forget about them, and when your program quits, any daemon threads are killed automatically.&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span&gt;256&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_2deaebbd-3a16-45bf-ae48-b77a3abc102d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_2deaebbd-3a16-45bf-ae48-b77a3abc102d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;257&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_2deaebbd-3a16-45bf-ae48-b77a3abc102d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;258&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;Author：ZhangKanghui&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;259&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; 
&lt;span&gt;262&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; 
&lt;span&gt;263&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run(n):
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;[%s]------running----\n&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt; %&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; n)
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt;     time.sleep(2&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;--done--&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt; 
&lt;span&gt;268&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt; 
&lt;span&gt;269&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; main():
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; range(5&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt;         t = threading.Thread(target=run, args=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;[i, ])
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;        t.start()
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt;         t.join(1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;274&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;starting thread&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;, t.getName())
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt; 
&lt;span&gt;276&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt; 
&lt;span&gt;277&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt; m = threading.Thread(target=main, args=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;[])
&lt;/span&gt;&lt;span&gt;278&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt; m.setDaemon(True)  &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt; 将main线程设置为Daemon线程,它做为程序主线程的守护线程,当主线程退出时,m线程也会退出,由m启动的其它子线程会同时退出,不管是否执行完任务&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;279&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;m.start()
&lt;/span&gt;&lt;span&gt;280&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;m.join()
&lt;/span&gt;&lt;span&gt;281&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;24&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt; m.join(timeout=2)&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;282&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;25&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;---main thread done----&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;)&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span&gt;283&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;284&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;join&amp;amp;amp;Daemon&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;285&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_d1c17aec-1b1a-487c-ab9c-638d96b8f0a9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_d1c17aec-1b1a-487c-ab9c-638d96b8f0a9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;286&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_d1c17aec-1b1a-487c-ab9c-638d96b8f0a9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;287&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;Author：ZhangKanghui&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;288&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; 
&lt;span&gt;289&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;290&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;291&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; 
&lt;span&gt;292&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;class&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; MyThread(threading.Thread):
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;__init__&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(self,n,sleep_time):
&lt;/span&gt;&lt;span&gt;294&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt;         super(MyThread,self).&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;__init__&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;295&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt;         self.n =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; n
&lt;/span&gt;&lt;span&gt;296&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt;         self.sleep_time =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; sleep_time
&lt;/span&gt;&lt;span&gt;297&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt; 
&lt;span&gt;298&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run(self):
&lt;/span&gt;&lt;span&gt;299&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;running task&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,self.n)&lt;/span&gt;
&lt;span&gt;300&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;        time.sleep(self.sleep_time)
&lt;/span&gt;&lt;span&gt;301&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;task done&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,self.n)&lt;/span&gt;
&lt;span&gt;302&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt; 
&lt;span&gt;303&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt; t1 =MyThread(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;t1&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;,2&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;304&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt; t2 =MyThread(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;t2&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;,4&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;305&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt; 
&lt;span&gt;306&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;t1.start()
&lt;/span&gt;&lt;span&gt;307&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;t2.start()
&lt;/span&gt;&lt;span&gt;308&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt; 
&lt;span&gt;309&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;t1.join()
&lt;/span&gt;&lt;span&gt;310&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;24&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;t2.join()
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;25&amp;lt;/span&amp;gt; 
&lt;span&gt;312&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;26&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;mian threading....&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;)&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span&gt;313&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;314&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;join1&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;315&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_14a3cdfa-7082-4d31-a48d-3fdae50438a9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_14a3cdfa-7082-4d31-a48d-3fdae50438a9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;316&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_14a3cdfa-7082-4d31-a48d-3fdae50438a9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;317&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;318&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;319&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; 
&lt;span&gt;320&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run(n):
&lt;/span&gt;&lt;span&gt;321&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;task&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,n)&lt;/span&gt;
&lt;span&gt;322&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt;     time.sleep(2&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;323&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt;     
&lt;span&gt;324&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt; start_time =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;325&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt; t_obj =[]       &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;存线程实例&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;326&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; range(50&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;327&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt;     t = threading.Thread(target=run,args=(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;t-%s&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt; %i,))   &amp;lt;span style=&quot;color: #008000&quot;&amp;gt;#&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;这个地方args必须有，。。因为这是默认一个元组&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;328&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;t.setDaemon(True)              #把当前线程设置成守护线程，必须在启动strat之前&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;329&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    t.start()
&lt;/span&gt;&lt;span&gt;330&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt;     t_obj.append(t) &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;为了不阻塞后面线程的启动，不在这里加join，先放到一个列表里&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;331&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; t_obj:        &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;循环线程实例列表，等待所有线程执行完毕&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;332&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    t.join()
&lt;/span&gt;&lt;span&gt;333&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt;     
&lt;span&gt;334&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;cost:&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;,time.time()-start_time)&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span&gt;335&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;336&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;join2&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;337&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;（3）线程锁/递归锁/信号量&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;338&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;线程锁&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;339&lt;/span&gt; &amp;lt;p&amp;gt;一个进程下可以启动多个线程，多个线程共享父进程的内存空间，也就意味着每个线程可以访问同一份数据，此时，如果2个线程同时要修改同一份数据，会出现什么状况？&amp;lt;/p&amp;gt;
&lt;span&gt;340&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_37379dfa-a22b-422a-b0d0-ea12dc9490c0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_37379dfa-a22b-422a-b0d0-ea12dc9490c0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;341&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_37379dfa-a22b-422a-b0d0-ea12dc9490c0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;342&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;343&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;344&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt;  
&lt;span&gt;345&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; addNum():
&lt;/span&gt;&lt;span&gt;346&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;global&lt;/span&gt;&amp;lt;/span&amp;gt; num &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;在每个线程中都获取这个全局变量&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;347&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;--get num:&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;,num )
&lt;/span&gt;&lt;span&gt;348&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt;     time.sleep(1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;349&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt;     lock.acquire() &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;修改数据前加锁&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;350&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt;     num  -=1 &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;对此公共变量进行-1操作&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;351&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt;     lock.release() &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;修改后释放&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;352&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt;  
&lt;span&gt;353&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt; num = 100  &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;设定一个共享变量&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;354&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt; thread_list =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;355&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt; lock = threading.Lock() &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;生成全局锁&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;356&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; range(100&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;357&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt;     t = threading.Thread(target=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;addNum)
&lt;/span&gt;&lt;span&gt;358&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    t.start()
&lt;/span&gt;&lt;span&gt;359&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    thread_list.append(t)
&lt;/span&gt;&lt;span&gt;360&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt;  
&lt;span&gt;361&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; t &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; thread_list: &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;等待所有线程执行完毕&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;362&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    t.join()
&lt;/span&gt;&lt;span&gt;363&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt;  
&lt;span&gt;364&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;final num:&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;, num )&amp;lt;/pre&amp;gt;
&lt;span&gt;365&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;366&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;线程锁&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;367&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;递归锁&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;368&lt;/span&gt; &amp;lt;p&amp;gt;就是在一个大锁中还要再包含子锁&amp;lt;/p&amp;gt;
&lt;span&gt;369&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_8dbacbd9-7372-40b1-9ea6-8418bdd0e6da&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_8dbacbd9-7372-40b1-9ea6-8418bdd0e6da&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;370&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_8dbacbd9-7372-40b1-9ea6-8418bdd0e6da&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;371&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading,time
&lt;/span&gt;&lt;span&gt;372&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt;  
&lt;span&gt;373&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run1():
&lt;/span&gt;&lt;span&gt;374&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;grab the first part data&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;375&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    lock.acquire()
&lt;/span&gt;&lt;span&gt;376&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;global&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; num
&lt;/span&gt;&lt;span&gt;377&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt;     num +=1
&lt;span&gt;378&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    lock.release()
&lt;/span&gt;&lt;span&gt;379&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;return&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; num
&lt;/span&gt;&lt;span&gt;380&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run2():
&lt;/span&gt;&lt;span&gt;381&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;grab the second part data&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;382&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    lock.acquire()
&lt;/span&gt;&lt;span&gt;383&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;global&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;  num2
&lt;/span&gt;&lt;span&gt;384&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt;     num2+=1
&lt;span&gt;385&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    lock.release()
&lt;/span&gt;&lt;span&gt;386&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;return&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; num2
&lt;/span&gt;&lt;span&gt;387&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run3():
&lt;/span&gt;&lt;span&gt;388&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    lock.acquire()
&lt;/span&gt;&lt;span&gt;389&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt;     res =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run1()
&lt;/span&gt;&lt;span&gt;390&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;--------between run1 and run2-----&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;391&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt;     res2 =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run2()
&lt;/span&gt;&lt;span&gt;392&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    lock.release()
&lt;/span&gt;&lt;span&gt;393&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(res,res2)
&lt;/span&gt;&lt;span&gt;394&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;24&amp;lt;/span&amp;gt;  
&lt;span&gt;395&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;25&amp;lt;/span&amp;gt;  
&lt;span&gt;396&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;26&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;__name__&lt;/span&gt;&amp;lt;/span&amp;gt; == &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;__main__&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;397&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;27&amp;lt;/span&amp;gt;  
&lt;span&gt;398&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;28&amp;lt;/span&amp;gt;     num,num2 =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; 0,0
&lt;/span&gt;&lt;span&gt;399&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;29&amp;lt;/span&amp;gt;     lock =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading.RLock()
&lt;/span&gt;&lt;span&gt;400&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;30&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; range(10&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;401&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;31&amp;lt;/span&amp;gt;         t = threading.Thread(target=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;run3)
&lt;/span&gt;&lt;span&gt;402&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;32&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;        t.start()
&lt;/span&gt;&lt;span&gt;403&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;33&amp;lt;/span&amp;gt;  
&lt;span&gt;404&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;34&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;while&lt;/span&gt;&amp;lt;/span&amp;gt; threading.active_count() != 1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;405&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;35&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(threading.active_count())
&lt;/span&gt;&lt;span&gt;406&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;36&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;else&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;407&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;37&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;----all threads done---&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;408&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;38&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(num,num2)&amp;lt;/pre&amp;gt;
&lt;span&gt;409&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;410&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;递归锁&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;411&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;信号量（Semaphore）&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;412&lt;/span&gt; &amp;lt;p&amp;gt;互斥锁 同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据 。&amp;lt;/p&amp;gt;
&lt;span&gt;413&lt;/span&gt; &amp;lt;p&amp;gt;比如厕所有3个坑，那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去。&amp;lt;/p&amp;gt;
&lt;span&gt;414&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_77906072-186c-4497-8adf-816d6a972222&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_77906072-186c-4497-8adf-816d6a972222&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;415&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_77906072-186c-4497-8adf-816d6a972222&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;416&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading,time
&lt;/span&gt;&lt;span&gt;417&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt;  
&lt;span&gt;418&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run(n):
&lt;/span&gt;&lt;span&gt;419&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    semaphore.acquire()
&lt;/span&gt;&lt;span&gt;420&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt;     time.sleep(1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;421&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;run the thread: %s\n&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt; %&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;n)&lt;/span&gt;
&lt;span&gt;422&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    semaphore.release()
&lt;/span&gt;&lt;span&gt;423&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt;  
&lt;span&gt;424&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;__name__&lt;/span&gt;&amp;lt;/span&amp;gt; == &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;__main__&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;425&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt;  
&lt;span&gt;426&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt;     num=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;427&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt;     semaphore  = threading.BoundedSemaphore(5) &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;最多允许5个线程同时运行&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;428&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; range(20&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;429&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt;         t = threading.Thread(target=run,args=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(i,))
&lt;/span&gt;&lt;span&gt;430&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;        t.start()
&lt;/span&gt;&lt;span&gt;431&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt;  
&lt;span&gt;432&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;while&lt;/span&gt;&amp;lt;/span&amp;gt; threading.active_count() != 1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;433&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;pass&lt;/span&gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;print threading.active_count()&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;434&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;else&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;435&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;----all threads done---&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;436&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(num)&amp;lt;/pre&amp;gt;
&lt;span&gt;437&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;438&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;信号量&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;439&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;（4）Timer&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;440&lt;/span&gt; &amp;lt;p&amp;gt;This &lt;span&gt;class&lt;/span&gt; represents an action that should be run only after a certain amount of time has passed。&amp;lt;/p&amp;gt;
&lt;span&gt;441&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_5decea23-4aca-4e15-82a1-14d039aeb20e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_5decea23-4aca-4e15-82a1-14d039aeb20e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;442&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_5decea23-4aca-4e15-82a1-14d039aeb20e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;443&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;Author：ZhangKanghui&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;444&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;2&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;445&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; hello():
&lt;/span&gt;&lt;span&gt;446&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;4&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;hello, world&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;447&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;5&amp;lt;/span&amp;gt; 
&lt;span&gt;448&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;6&amp;lt;/span&amp;gt; t = threading.Thread(target=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;hello)
&lt;/span&gt;&lt;span&gt;449&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;7&amp;lt;/span&amp;gt; t = threading.Timer(30.0&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;, hello)
&lt;/span&gt;&lt;span&gt;450&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;8&amp;lt;/span&amp;gt; t.start()  &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt; after 30 seconds, &quot;hello, world&quot; will be printed&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span&gt;451&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;452&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Timer&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;453&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;（5）Event&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;454&lt;/span&gt; &amp;lt;p&amp;gt;An event &lt;span&gt;is&lt;/span&gt; a simple synchronization object;通过Event来实现两个或多个线程间的交互。&amp;lt;/p&amp;gt;
&lt;span&gt;455&lt;/span&gt; &amp;lt;p&amp;gt;the event represents an internal flag, &lt;span&gt;and&lt;/span&gt; threads&amp;amp;nbsp;can wait &lt;span&gt;for&lt;/span&gt; the flag to be set, &lt;span&gt;or&lt;/span&gt; set &lt;span&gt;or&lt;/span&gt; clear the flag themselves.&amp;lt;/p&amp;gt;
&lt;span&gt;456&lt;/span&gt; &amp;lt;p&amp;gt;event.wait()&amp;lt;/p&amp;gt;
&lt;span&gt;457&lt;/span&gt; &amp;lt;p&amp;gt;event.set()&amp;lt;/p&amp;gt;
&lt;span&gt;458&lt;/span&gt; &amp;lt;p&amp;gt;event.clear()&amp;lt;/p&amp;gt;
&lt;span&gt;459&lt;/span&gt; &amp;lt;p&amp;gt;下面是一个红绿灯的例子，即起动一个线程做交通指挥灯，生成几个线程做车辆，车辆行驶按红灯停，绿灯行的规则。&amp;lt;/p&amp;gt;
&lt;span&gt;460&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_bc894591-a7dd-4526-b4d1-1e92981f2a96&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_bc894591-a7dd-4526-b4d1-1e92981f2a96&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;461&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_bc894591-a7dd-4526-b4d1-1e92981f2a96&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;462&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading,time
&lt;/span&gt;&lt;span&gt;463&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; random
&lt;/span&gt;&lt;span&gt;464&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; light():
&lt;/span&gt;&lt;span&gt;465&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;not&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; event.isSet():
&lt;/span&gt;&lt;span&gt;466&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt;         event.set() &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;wait就不阻塞 #绿灯状态&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;467&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt;     count =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;468&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;while&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;469&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt; count &amp;amp;lt; 10&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;470&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;\033[42;1m--green light on---\033[0m&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;471&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;elif&lt;/span&gt;&amp;lt;/span&amp;gt; count &amp;amp;lt;13&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;472&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;\033[43;1m--yellow light on---\033[0m&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;473&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;elif&lt;/span&gt;&amp;lt;/span&amp;gt; count &amp;amp;lt;20&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;474&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; event.isSet():
&lt;/span&gt;&lt;span&gt;475&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;                event.clear()
&lt;/span&gt;&lt;span&gt;476&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;\033[41;1m--red light on---\033[0m&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;477&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;else&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;478&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt;             count =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;479&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt;             event.set() &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;打开绿灯&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;480&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt;         time.sleep(1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;481&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt;         count +=1
&lt;span&gt;482&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; car(n):
&lt;/span&gt;&lt;span&gt;483&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;while&lt;/span&gt;&amp;lt;/span&amp;gt; 1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;484&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt;         time.sleep(random.randrange(10&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;485&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;24&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt;  event.isSet(): &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;绿灯&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;486&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;25&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;car [%s] is running..&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt; %&amp;lt;span style=&quot;color: #000000&quot;&amp;gt; n)&lt;/span&gt;
&lt;span&gt;487&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;26&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;else&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;488&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;27&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;car [%s] is waiting for the red light..&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt; %&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;n)&lt;/span&gt;
&lt;span&gt;489&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;28&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;__name__&lt;/span&gt;&amp;lt;/span&amp;gt; == &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;__main__&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;490&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;29&amp;lt;/span&amp;gt;     event =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading.Event()
&lt;/span&gt;&lt;span&gt;491&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;30&amp;lt;/span&amp;gt;     Light = threading.Thread(target=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;light)
&lt;/span&gt;&lt;span&gt;492&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;31&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    Light.start()
&lt;/span&gt;&lt;span&gt;493&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;32&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; range(3&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;494&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;33&amp;lt;/span&amp;gt;         t = threading.Thread(target=car,args=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(i,))
&lt;/span&gt;&lt;span&gt;495&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;34&amp;lt;/span&amp;gt;         t.start()&amp;lt;/pre&amp;gt;
&lt;span&gt;496&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;497&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Event实例之红绿灯&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;498&lt;/span&gt; &amp;lt;p&amp;gt;这里还有一个event使用的例子，员工进公司门要刷卡， 我们这里设置一个线程是“门”， 再设置几个线程为“员工”，员工看到门没打开，就刷卡，刷完卡，门开了，员工就可以通过。&amp;lt;/p&amp;gt;
&lt;span&gt;499&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_8096f152-6a5c-4c8c-8b74-3a926e5b33c5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_8096f152-6a5c-4c8c-8b74-3a926e5b33c5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;500&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_8096f152-6a5c-4c8c-8b74-3a926e5b33c5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;501&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;_*_coding:utf-8_*_&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;502&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;__author__&lt;/span&gt;&amp;lt;/span&amp;gt; = &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;Alex Li&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;lt;/span&amp;gt;
&lt;span&gt;503&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;504&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;505&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; random
&lt;/span&gt;&lt;span&gt;506&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; 
&lt;span&gt;507&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; door():
&lt;/span&gt;&lt;span&gt;508&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt;     door_open_time_counter =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;509&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;while&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;510&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; door_swiping_event.is_set():
&lt;/span&gt;&lt;span&gt;511&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;\033[32;1mdoor opening....\033[0m&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;512&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt;             door_open_time_counter +=1
&lt;span&gt;513&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt; 
&lt;span&gt;514&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;else&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;515&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;\033[31;1mdoor closed...., swipe to open.\033[0m&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;516&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt;             door_open_time_counter = 0 &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;清空计时器&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;517&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;            door_swiping_event.wait()
&lt;/span&gt;&lt;span&gt;518&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt; 
&lt;span&gt;519&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt; 
&lt;span&gt;520&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt; door_open_time_counter &amp;amp;gt; 3:&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;门开了已经3s了,该关了&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;521&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;            door_swiping_event.clear()
&lt;/span&gt;&lt;span&gt;522&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt; 
&lt;span&gt;523&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt;         time.sleep(0.5&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;524&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;24&amp;lt;/span&amp;gt; 
&lt;span&gt;525&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;25&amp;lt;/span&amp;gt; 
&lt;span&gt;526&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;26&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; staff(n):
&lt;/span&gt;&lt;span&gt;527&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;27&amp;lt;/span&amp;gt; 
&lt;span&gt;528&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;28&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;staff [%s] is comming...&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt; %&amp;lt;span style=&quot;color: #000000&quot;&amp;gt; n )&lt;/span&gt;
&lt;span&gt;529&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;29&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;while&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;530&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;30&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; door_swiping_event.is_set():
&lt;/span&gt;&lt;span&gt;531&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;31&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;\033[34;1mdoor is opened, passing.....\033[0m&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;532&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;32&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;break&lt;/span&gt;&amp;lt;/span&amp;gt;
&lt;span&gt;533&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;33&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;else&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;534&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;34&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;staff [%s] sees door got closed, swipping the card.....&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt; %&amp;lt;span style=&quot;color: #000000&quot;&amp;gt; n)&lt;/span&gt;
&lt;span&gt;535&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;35&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(door_swiping_event.set())
&lt;/span&gt;&lt;span&gt;536&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;36&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;            door_swiping_event.set()
&lt;/span&gt;&lt;span&gt;537&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;37&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;after set &amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,door_swiping_event.set())&lt;/span&gt;
&lt;span&gt;538&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;38&amp;lt;/span&amp;gt;         time.sleep(0.5&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;539&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;39&amp;lt;/span&amp;gt; door_swiping_event  = threading.Event() &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;设置事件&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;540&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;40&amp;lt;/span&amp;gt; 
&lt;span&gt;541&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;41&amp;lt;/span&amp;gt; 
&lt;span&gt;542&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;42&amp;lt;/span&amp;gt; door_thread = threading.Thread(target=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;door)
&lt;/span&gt;&lt;span&gt;543&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;43&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;door_thread.start()
&lt;/span&gt;&lt;span&gt;544&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;44&amp;lt;/span&amp;gt; 
&lt;span&gt;545&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;45&amp;lt;/span&amp;gt; 
&lt;span&gt;546&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;46&amp;lt;/span&amp;gt; 
&lt;span&gt;547&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;47&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; range(5&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;548&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;48&amp;lt;/span&amp;gt;     p = threading.Thread(target=staff,args=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(i,))
&lt;/span&gt;&lt;span&gt;549&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;49&amp;lt;/span&amp;gt;     time.sleep(random.randrange(3&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;550&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;50&amp;lt;/span&amp;gt;     p.start()&amp;lt;/pre&amp;gt;
&lt;span&gt;551&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;552&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;event实例之刷卡&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;553&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;554&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 14px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;strong&amp;gt;&amp;amp;nbsp;（6）queue队列&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;555&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 14px&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;queue &lt;span&gt;is&lt;/span&gt; especially useful &lt;span&gt;in&lt;/span&gt; threaded programming when information must be exchanged safely between multiple threads.&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;556&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;557&lt;/span&gt; &amp;lt;dl &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;dt id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;queue.Queue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;strong&amp;gt;&lt;span&gt;class&lt;/span&gt;&amp;amp;nbsp;&amp;lt;code &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;descclassname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;queue.&amp;lt;/code&amp;gt;&amp;lt;code &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;descname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Queue&amp;lt;/code&amp;gt;&amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sig-paren&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;(maxsize=0&amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sig-paren&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;先入先出&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;strong&amp;gt;class&amp;amp;nbsp;&amp;lt;code class=&quot;descclassname&quot;&amp;gt;queue.&amp;lt;/code&amp;gt;&amp;lt;code class=&quot;descname&quot;&amp;gt;LifoQueue&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;(maxsize=0&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;) #last in fisrt out&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;strong&amp;gt;class&amp;amp;nbsp;&amp;lt;code class=&quot;descclassname&quot;&amp;gt;queue.&amp;lt;/code&amp;gt;&amp;lt;code class=&quot;descname&quot;&amp;gt;PriorityQueue&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;(maxsize=0&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;) #存储数据时可设置优先级的队列&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;/dl&amp;gt;&amp;lt;dl class=&quot;method&quot;&amp;gt;&amp;lt;dt id=&quot;queue.Queue.qsize&quot;&amp;gt;&amp;lt;code class=&quot;descclassname&quot;&amp;gt;Queue.&amp;lt;/code&amp;gt;&amp;lt;code class=&quot;descname&quot;&amp;gt;qsize&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;(&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;code class=&quot;descclassname&quot;&amp;gt;Queue.&amp;lt;/code&amp;gt;&amp;lt;code class=&quot;descname&quot;&amp;gt;empty&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;(&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;) #return True if empty &amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;code class=&quot;descclassname&quot;&amp;gt;Queue.&amp;lt;/code&amp;gt;&amp;lt;code class=&quot;descname&quot;&amp;gt;full&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;(&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;) # return True if full&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;&amp;lt;code class=&quot;descclassname&quot;&amp;gt;Queue.&amp;lt;/code&amp;gt;&amp;lt;code class=&quot;descname&quot;&amp;gt;get&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;(&amp;lt;em&amp;gt;block=True&amp;lt;/em&amp;gt;,&amp;amp;nbsp;&amp;lt;em&amp;gt;timeout=None&amp;lt;/em&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;code class=&quot;descclassname&quot;&amp;gt;Queue.&amp;lt;/code&amp;gt;&amp;lt;code class=&quot;descname&quot;&amp;gt;put&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;(&amp;lt;em&amp;gt;item&amp;lt;/em&amp;gt;,&amp;amp;nbsp;&amp;lt;em&amp;gt;block=True&amp;lt;/em&amp;gt;,&amp;amp;nbsp;&amp;lt;em&amp;gt;timeout=None&amp;lt;/em&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;&amp;lt;code class=&quot;descclassname&quot;&amp;gt;Queue.&amp;lt;/code&amp;gt;&amp;lt;code class=&quot;descname&quot;&amp;gt;put_nowait&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;(&amp;lt;em&amp;gt;item&amp;lt;/em&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;code class=&quot;descclassname&quot;&amp;gt;Queue.&amp;lt;/code&amp;gt;&amp;lt;code class=&quot;descname&quot;&amp;gt;get_nowait&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;(&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;&amp;lt;code class=&quot;descclassname&quot;&amp;gt;Queue.&amp;lt;/code&amp;gt;&amp;lt;code class=&quot;descname&quot;&amp;gt;join&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;(&amp;lt;span class=&quot;sig-paren&quot;&amp;gt;) block直到queue被消费完毕&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;dt&amp;gt;&amp;lt;/dt&amp;gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;span&gt;558&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;a、先入先出&amp;lt;/p&amp;gt;
&lt;span&gt;559&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_9c0b729a-9405-4711-8ecd-5c8043b4dc52&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_9c0b729a-9405-4711-8ecd-5c8043b4dc52&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;560&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_9c0b729a-9405-4711-8ecd-5c8043b4dc52&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;561&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;Author：ZhangKanghui&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;562&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; 
&lt;span&gt;563&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; queue
&lt;/span&gt;&lt;span&gt;564&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; q =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;queue.Queue()
&lt;/span&gt;&lt;span&gt;565&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; 
&lt;span&gt;566&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; q.put(1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;567&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt; q.put(2&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;568&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt; q.put(3&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;569&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt; 
&lt;span&gt;570&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(q.qsize())
&lt;/span&gt;&lt;span&gt;571&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;572&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;573&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;574&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;先入先出，这个时候如果在获取呢？就会挂起卡死&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;575&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;576&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;在这里看不出来什么效果。去命令行试试&amp;lt;/span&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span&gt;577&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;578&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;先入先出&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;579&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180903141516230-1658960823.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;580&lt;/span&gt; &amp;lt;p&amp;gt;存在一个问题就是，当把所有的数据都get到之后，程序就会挂起卡死。那这个时候怎么办呢？&amp;lt;/p&amp;gt;
&lt;span&gt;581&lt;/span&gt; &amp;lt;p&amp;gt;q.get_nowait（） &amp;amp;nbsp;或者通过get（block=True，Timeout）参数进行设置&amp;lt;/p&amp;gt;
&lt;span&gt;582&lt;/span&gt; &amp;lt;p&amp;gt;会出现先一个queue Empty的异常，这个时候可以通过捕获异常使程序正常进行。&amp;lt;/p&amp;gt;
&lt;span&gt;583&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180903141732769-380682019.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;584&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180903142118901-1628911451.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;585&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180903142153407-430380383.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;586&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;587&lt;/span&gt; &amp;lt;p&amp;gt;b、后进先出&amp;lt;/p&amp;gt;
&lt;span&gt;588&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_57672cd1-85fa-4509-a13d-781b91ae2351&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_57672cd1-85fa-4509-a13d-781b91ae2351&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;589&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_57672cd1-85fa-4509-a13d-781b91ae2351&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;590&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;Author：ZhangKanghui&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;591&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; 
&lt;span&gt;592&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; queue
&lt;/span&gt;&lt;span&gt;593&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; q =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;queue.LifoQueue()
&lt;/span&gt;&lt;span&gt;594&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; q.put(1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;595&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; q.put(2&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;596&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt; q.put(3&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;597&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt; 
&lt;span&gt;598&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(q.qsize())
&lt;/span&gt;&lt;span&gt;599&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;600&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;601&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(q.get())&amp;lt;/pre&amp;gt;
&lt;span&gt;602&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;603&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;后进先出LifoQueue&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;604&lt;/span&gt; &amp;lt;p&amp;gt;c、设置优先级&amp;lt;/p&amp;gt;
&lt;span&gt;605&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_d61f3381-175d-4842-82ab-e947705523a2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_d61f3381-175d-4842-82ab-e947705523a2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;606&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_d61f3381-175d-4842-82ab-e947705523a2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;607&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;Author：ZhangKanghui&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;608&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; 
&lt;span&gt;609&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; queue
&lt;/span&gt;&lt;span&gt;610&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; 
&lt;span&gt;611&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; q =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;queue.PriorityQueue()
&lt;/span&gt;&lt;span&gt;612&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; q.put((1,&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;erha&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;))&lt;/span&gt;
&lt;span&gt;613&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt; q.put((5,&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;hashiqi&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;))&lt;/span&gt;
&lt;span&gt;614&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt; q.put((3,&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;taidi&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;))&lt;/span&gt;
&lt;span&gt;615&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;616&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(q.get())
&lt;/span&gt;&lt;span&gt;617&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(q.get())&amp;lt;/pre&amp;gt;
&lt;span&gt;618&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;619&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;优先级队列&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;620&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;621&lt;/span&gt; &amp;lt;p&amp;gt;下面以一个生产者消费者的模型实例来深刻体会一下队列。&amp;lt;/p&amp;gt;
&lt;span&gt;622&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_b57c3665-dcb9-4f96-aa10-61b107d20eb2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_b57c3665-dcb9-4f96-aa10-61b107d20eb2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;623&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_b57c3665-dcb9-4f96-aa10-61b107d20eb2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;624&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;625&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; queue
&lt;/span&gt;&lt;span&gt;626&lt;/span&gt;  
&lt;span&gt;627&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; producer():
&lt;/span&gt;&lt;span&gt;628&lt;/span&gt;     &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; range(10&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;629&lt;/span&gt;         q.put(&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;baozi %s&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt; %&amp;lt;span style=&quot;color: #000000&quot;&amp;gt; i )&lt;/span&gt;
&lt;span&gt;630&lt;/span&gt;  
&lt;span&gt;631&lt;/span&gt;     &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;开始等待所有的包子被取走...&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;632&lt;/span&gt; &lt;span&gt;    q.join()
&lt;/span&gt;&lt;span&gt;633&lt;/span&gt;     &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;所有的包子被取完了...&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;)&lt;/span&gt;
&lt;span&gt;634&lt;/span&gt;  
&lt;span&gt;635&lt;/span&gt;  
&lt;span&gt;636&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; consumer(n):
&lt;/span&gt;&lt;span&gt;637&lt;/span&gt;  
&lt;span&gt;638&lt;/span&gt;     &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;while&lt;/span&gt;&amp;lt;/span&amp;gt; q.qsize() &amp;amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;0:
&lt;/span&gt;&lt;span&gt;639&lt;/span&gt;  
&lt;span&gt;640&lt;/span&gt;         &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;%s 取到&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt; %&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;n  , q.get())&lt;/span&gt;
&lt;span&gt;641&lt;/span&gt;         q.task_done() &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;告知这个任务执行完了&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;642&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 
&lt;span&gt;643&lt;/span&gt;  
&lt;span&gt;644&lt;/span&gt; q &amp;lt;/span&amp;gt;=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; queue.Queue()
&lt;/span&gt;&lt;span&gt;645&lt;/span&gt;  
&lt;span&gt;646&lt;/span&gt;  
&lt;span&gt;647&lt;/span&gt;  
&lt;span&gt;648&lt;/span&gt; p &amp;lt;/span&amp;gt;= threading.Thread(target=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;producer,)
&lt;/span&gt;&lt;span&gt;649&lt;/span&gt; &lt;span&gt;p.start()
&lt;/span&gt;&lt;span&gt;650&lt;/span&gt;  
&lt;span&gt;651&lt;/span&gt; c1 &amp;lt;/span&amp;gt;= consumer(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;二哈&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;)&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span&gt;652&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;653&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;生产者消费者模型1&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;654&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_dd068d45-d0fe-4147-9ad3-fe9cd3ec2eb4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_dd068d45-d0fe-4147-9ad3-fe9cd3ec2eb4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;655&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_dd068d45-d0fe-4147-9ad3-fe9cd3ec2eb4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;656&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;Author：ZhangKanghui&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;657&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; 
&lt;span&gt;658&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading,time
&lt;/span&gt;&lt;span&gt;659&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; queue
&lt;/span&gt;&lt;span&gt;660&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; 
&lt;span&gt;661&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; q =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; queue.Queue()
&lt;/span&gt;&lt;span&gt;662&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; Producer(namne):
&lt;/span&gt;&lt;span&gt;663&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt;     count =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;664&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; i &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; range(10&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;665&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt;         q.put(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;骨头%s&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;%&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;count)&lt;/span&gt;
&lt;span&gt;666&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;生产了骨头&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,count)&lt;/span&gt;
&lt;span&gt;667&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt;         count +=1
&lt;span&gt;668&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;time.sleep(2)&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;669&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt;         time.sleep(1&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;670&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;time.sleep(0.5)&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;671&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt; 
&lt;span&gt;672&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; Consumer(name):
&lt;/span&gt;&lt;span&gt;673&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;while&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;674&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;[%s] 取到 [%s] 并吃了它...&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;%&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;(name,q.get()))&lt;/span&gt;
&lt;span&gt;675&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt; 
&lt;span&gt;676&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt; p =threading.Thread(target=Producer,args=(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;Kanghui&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,))&lt;/span&gt;
&lt;span&gt;677&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt; c =threading.Thread(target=Consumer,args=(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;erha&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,))&lt;/span&gt;
&lt;span&gt;678&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt; c1 =threading.Thread(target=Consumer,args=(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;taidi&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;,))&lt;/span&gt;
&lt;span&gt;679&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;24&amp;lt;/span&amp;gt; 
&lt;span&gt;680&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;25&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;p.start()
&lt;/span&gt;&lt;span&gt;681&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;26&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;c.start()
&lt;/span&gt;&lt;span&gt;682&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;27&amp;lt;/span&amp;gt; c1.start()&amp;lt;/pre&amp;gt;
&lt;span&gt;683&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;684&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;生产者消费者模型2&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;685&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;686&lt;/span&gt; &amp;lt;blockquote&amp;gt;
&lt;span&gt;687&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 14pt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;strong&amp;gt;4 小结&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;688&lt;/span&gt; &amp;lt;/blockquote&amp;gt;
&lt;span&gt;689&lt;/span&gt; &amp;lt;p&amp;gt;志不坚者智不达。&amp;lt;/p&amp;gt;
&lt;span&gt;690&lt;/span&gt; &amp;lt;p&amp;gt;撑不住的时候可以对自己说声“我好累”，但永远不要再心里承认“我不行”。&amp;lt;/p&amp;gt;
&lt;span&gt;691&lt;/span&gt; &amp;lt;p&amp;gt;没有鸡汤就没有生活。&amp;lt;/p&amp;gt;
&lt;span&gt;692&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;693&lt;/span&gt; &amp;lt;blockquote&amp;gt;
&lt;span&gt;694&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;font-size: 14pt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;strong&amp;gt;5 练习&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;695&lt;/span&gt; &amp;lt;/blockquote&amp;gt;
&lt;span&gt;696&lt;/span&gt; &amp;lt;p&amp;gt;需求:&amp;lt;/p&amp;gt;
&lt;span&gt;697&lt;/span&gt; &amp;lt;ol&amp;gt;
&lt;span&gt;698&lt;/span&gt; &amp;lt;li&amp;gt;主机分组&amp;lt;/li&amp;gt;
&lt;span&gt;699&lt;/span&gt; &amp;lt;li&amp;gt;登录后显示主机分组，选择分组后查看主机列表&amp;lt;/li&amp;gt;
&lt;span&gt;700&lt;/span&gt; &amp;lt;li&amp;gt;可批量执行命令、发送文件，结果实时返回&amp;lt;/li&amp;gt;
&lt;span&gt;701&lt;/span&gt; &amp;lt;li&amp;gt;主机用户名密码可以不同&amp;lt;/li&amp;gt;
&lt;span&gt;702&lt;/span&gt; &amp;lt;/ol&amp;gt;
&lt;span&gt;703&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;704&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;流程图：&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;705&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images2018.cnblogs.com/blog/1435523/201809/1435523-20180903145959431-1674715659.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;706&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;707&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_cd6358f5-8a69-4ab5-9c67-cdf1ca5f7216&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_cd6358f5-8a69-4ab5-9c67-cdf1ca5f7216&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;708&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_cd6358f5-8a69-4ab5-9c67-cdf1ca5f7216&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;709&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;## 作者介绍：&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;710&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; *&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; author：lzl
&lt;/span&gt;&lt;span&gt;711&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;## 博客地址：&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;712&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt; * http://www.cnblogs.com/lianzhilei/p/5881434&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;.html
&lt;/span&gt;&lt;span&gt;713&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; 
&lt;span&gt;714&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;## 功能实现&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;715&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;题目:简单主机批量管理工具
&lt;/span&gt;&lt;span&gt;716&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt; 
&lt;span&gt;717&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    需求:
&lt;/span&gt;&lt;span&gt;718&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    主机分组
&lt;/span&gt;&lt;span&gt;719&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    登录后显示主机分组，选择分组后查看主机列表
&lt;/span&gt;&lt;span&gt;720&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    可批量执行命令、发送文件，结果实时返回
&lt;/span&gt;&lt;span&gt;721&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    主机用户名密码可以不同
&lt;/span&gt;&lt;span&gt;722&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt; 
&lt;span&gt;723&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;## 目录结构：&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;724&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt;     Host-&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;Manage
&lt;/span&gt;&lt;span&gt;725&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    │
&lt;/span&gt;&lt;span&gt;726&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt;     ├── ftpclient &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;客户端程序&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;727&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;            ├── README.txt
&lt;/span&gt;&lt;span&gt;728&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt;             ├── management.py &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;服务端入口程序&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;729&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt;             ├── database &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;数据库&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;730&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt;             ├── test.py &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;修改数据库&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;731&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt; 
&lt;span&gt;732&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;24&amp;lt;/span&amp;gt; 
&lt;span&gt;733&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;25&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;## 注释&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;734&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;26&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    可批量执行命令、发送文件
&lt;/span&gt;&lt;span&gt;735&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;27&amp;lt;/span&amp;gt;     上传命令格式： put database /tmp/&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;db
&lt;/span&gt;&lt;span&gt;736&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;28&amp;lt;/span&amp;gt; 
&lt;span&gt;737&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;29&amp;lt;/span&amp;gt; 
&lt;span&gt;738&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;30&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;## 运行环境&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;739&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;31&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;    windows系统
&lt;/span&gt;&lt;span&gt;740&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;32&amp;lt;/span&amp;gt;     python3.0+
&lt;span&gt;741&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;33&amp;lt;/span&amp;gt; 
&lt;span&gt;742&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;34&amp;lt;/span&amp;gt; README&amp;lt;/pre&amp;gt;
&lt;span&gt;743&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;744&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;Readme&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;745&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed_95a7ee23-0f9a-46de-abb4-283ec9bcbda9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_closed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&amp;lt;img id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened_95a7ee23-0f9a-46de-abb4-283ec9bcbda9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code_img_opened&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display: none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;746&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_open_95a7ee23-0f9a-46de-abb4-283ec9bcbda9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_hide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;747&lt;/span&gt; &amp;lt;pre&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 1&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; json
&lt;/span&gt;&lt;span&gt;748&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 2&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; paramiko
&lt;/span&gt;&lt;span&gt;749&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 3&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt;750&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 4&amp;lt;/span&amp;gt;  
&lt;span&gt;751&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 5&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;class&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; Remotehost(object):
&lt;/span&gt;&lt;span&gt;752&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 6&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;远程操作主机&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;753&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 7&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;__init__&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(self,host,port,username,password,cmd):
&lt;/span&gt;&lt;span&gt;754&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 8&amp;lt;/span&amp;gt;         self.host =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; host
&lt;/span&gt;&lt;span&gt;755&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt; 9&amp;lt;/span&amp;gt;         self.port =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; port
&lt;/span&gt;&lt;span&gt;756&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;10&amp;lt;/span&amp;gt;         self.username =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; username
&lt;/span&gt;&lt;span&gt;757&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;11&amp;lt;/span&amp;gt;         self.password =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; password
&lt;/span&gt;&lt;span&gt;758&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;12&amp;lt;/span&amp;gt;         self.cmd =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; cmd
&lt;/span&gt;&lt;span&gt;759&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;13&amp;lt;/span&amp;gt;  
&lt;span&gt;760&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;14&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; command(self):
&lt;/span&gt;&lt;span&gt;761&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;15&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;获取命令&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;762&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;16&amp;lt;/span&amp;gt;         ssh =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; paramiko.SSHClient()
&lt;/span&gt;&lt;span&gt;763&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;17&amp;lt;/span&amp;gt;         ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())   &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt; 允许连接不在know_hosts文件中的主机&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;764&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;18&amp;lt;/span&amp;gt;         ssh.connect(hostname=self.host, port=self.port, username=self.username, password=self.password)   &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt; 连接服务器&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;765&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;19&amp;lt;/span&amp;gt;         stdin, stdout, stderr = ssh.exec_command(self.cmd)              &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt; 获取命令结果&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;766&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;20&amp;lt;/span&amp;gt;         res ,err = stdout.read(),stderr.read()              &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt; 三元运算&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;767&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;21&amp;lt;/span&amp;gt;         result = res &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt; res &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;else&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; err
&lt;/span&gt;&lt;span&gt;768&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;22&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;[%s]&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;.center(50,&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;-&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;)%&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;self.host)&lt;/span&gt;
&lt;span&gt;769&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;23&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(result.decode())                                      &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt; 打印输出&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;770&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;24&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;        ssh.close()
&lt;/span&gt;&lt;span&gt;771&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;25&amp;lt;/span&amp;gt;  
&lt;span&gt;772&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;26&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; put(self):
&lt;/span&gt;&lt;span&gt;773&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;27&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;上传&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;774&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;28&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;try&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;775&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;29&amp;lt;/span&amp;gt;             transport =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; paramiko.Transport((self.host, self.port))
&lt;/span&gt;&lt;span&gt;776&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;30&amp;lt;/span&amp;gt;             transport.connect(username=self.username, password=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;self.password)
&lt;/span&gt;&lt;span&gt;777&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;31&amp;lt;/span&amp;gt;             sftp =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; paramiko.SFTPClient.from_transport(transport)
&lt;/span&gt;&lt;span&gt;778&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;32&amp;lt;/span&amp;gt;             sftp.put(self.cmd.split()[1], self.cmd.split()[2])              &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt; 上传文件&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;779&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;33&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;            transport.close()
&lt;/span&gt;&lt;span&gt;780&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;34&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;\033[32;0m【%s】 上传 文件【%s】 成功....\033[0m&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;%(self.host,self.cmd.split()[2&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;]))&lt;/span&gt;
&lt;span&gt;781&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;35&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;except&lt;/span&gt;&amp;lt;/span&amp;gt; Exception as error:                                &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt; 抓住异常&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;782&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;36&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;\033[31;0m错误:【%s】【%s】\033[0m&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;%&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;(self.host,error))&lt;/span&gt;
&lt;span&gt;783&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;37&amp;lt;/span&amp;gt;  
&lt;span&gt;784&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;38&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;def&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; run(self):
&lt;/span&gt;&lt;span&gt;785&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;39&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;反射&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;786&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;40&amp;lt;/span&amp;gt;         cmd_str =&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; self.cmd.split()[0]
&lt;/span&gt;&lt;span&gt;787&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;41&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; hasattr(self,cmd_str):
&lt;/span&gt;&lt;span&gt;788&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;42&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;            getattr(self,cmd_str)()
&lt;/span&gt;&lt;span&gt;789&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;43&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;else&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;790&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;44&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;            setattr(self,cmd_str,self.command)
&lt;/span&gt;&lt;span&gt;791&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;45&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;            getattr(self,cmd_str)()
&lt;/span&gt;&lt;span&gt;792&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;46&amp;lt;/span&amp;gt;  
&lt;span&gt;793&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;47&amp;lt;/span&amp;gt;  
&lt;span&gt;794&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;48&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;__name__&lt;/span&gt;&amp;lt;/span&amp;gt; == &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;__main__&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;:&lt;/span&gt;
&lt;span&gt;795&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;49&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;主程序&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;796&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;50&amp;lt;/span&amp;gt;     with open(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;database&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;,&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;r&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;) as file:&lt;/span&gt;
&lt;span&gt;797&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;51&amp;lt;/span&amp;gt;         data_dict = json.loads(file.read())     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;获取数据库信息&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;798&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;52&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; k &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; data_dict:                        &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;打印地址组&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;799&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;53&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(k)
&lt;/span&gt;&lt;span&gt;800&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;54&amp;lt;/span&amp;gt;  
&lt;span&gt;801&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;55&amp;lt;/span&amp;gt;     group_choice = input(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;输入要操作的组名：&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;).strip()&lt;/span&gt;
&lt;span&gt;802&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;56&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; data_dict.get(group_choice):
&lt;/span&gt;&lt;span&gt;803&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;57&amp;lt;/span&amp;gt;         host_dict = data_dict[group_choice]     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;定义主机字典&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;804&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;58&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; k &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt; host_dict:                    &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;打印所选地址组所有的主机名&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;805&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;59&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;(k)
&lt;/span&gt;&lt;span&gt;806&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;60&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;while&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;807&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;61&amp;lt;/span&amp;gt;             cmd = input(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;选择进行的操作的命令：&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;).strip()&lt;/span&gt;
&lt;span&gt;808&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;62&amp;lt;/span&amp;gt;             thread_list=&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt;809&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;63&amp;lt;/span&amp;gt;             &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;if&lt;/span&gt;&amp;lt;/span&amp;gt; cmd:                                 &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;命令不为空&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;810&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;64&amp;lt;/span&amp;gt;                 &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; k &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; host_dict:
&lt;/span&gt;&lt;span&gt;811&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;65&amp;lt;/span&amp;gt;                     host, port, username, password=k,host_dict[k][&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;port&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;],host_dict[k][&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;username&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;],host_dict[k][&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;password&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #000000&quot;&amp;gt;]&lt;/span&gt;
&lt;span&gt;812&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;66&amp;lt;/span&amp;gt;                     func = Remotehost(host,port,username,password,cmd)      &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;实例化类&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;813&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;67&amp;lt;/span&amp;gt;                     t = threading.Thread(target=func.run)                   &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;创建线程&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;814&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;68&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;                    t.start()
&lt;/span&gt;&lt;span&gt;815&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;69&amp;lt;/span&amp;gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;                    thread_list.append(t)
&lt;/span&gt;&lt;span&gt;816&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;70&amp;lt;/span&amp;gt;                 &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;for&lt;/span&gt;&amp;lt;/span&amp;gt; t &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;in&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt; thread_list:
&lt;/span&gt;&lt;span&gt;817&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;71&amp;lt;/span&amp;gt;                     t.join()                                                &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #008000&quot;&amp;gt;等待线程执行结果&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span&gt;818&lt;/span&gt; &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;72&amp;lt;/span&amp;gt;     &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;else&lt;/span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;819&lt;/span&gt; &amp;lt;/span&amp;gt;&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #008080&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;73&amp;lt;/span&amp;gt;         &amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #0000ff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;print&lt;/span&gt;&amp;lt;/span&amp;gt;(&amp;lt;span style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;color: #800000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&amp;lt;span style=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;color: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;800000&quot;&amp;gt;\033[31;0m操作组不存在\033[0m&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color: #800000&quot;&amp;gt;&quot;&amp;lt;/span&amp;gt;)&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span&gt;820&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;821&lt;/span&gt; &amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cnblogs_code_collapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;简单主机批量管理工具主程序&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;822&lt;/span&gt; &amp;lt;p&amp;gt;相关参考：&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/0zcl/p/6352278.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; target=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_blank&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;https://www.cnblogs.com/0zcl/p/6352278.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;823&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;824&lt;/span&gt; &amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&lt;span&gt;825&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;我是尾巴~&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;826&lt;/span&gt; &amp;lt;p&amp;gt;这次推荐：摄影app合集　　&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://mp.weixin.qq.com/s/3N3m7otgKIZXGyUpGKbTpw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; target=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_blank&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;https://mp.weixin.qq.com/s/3N3m7otgKIZXGyUpGKbTpw&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;span&gt;827&lt;/span&gt; &amp;lt;p&amp;gt;虽不才，才要坚持。&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MySignature&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;828&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;829&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog_post_info_block&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;830&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;BlogPostCategory&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;831&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EntryTag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;832&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog_post_info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;833&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;834&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;835&lt;/span&gt; &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post_next_prev&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;836&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;837&lt;/span&gt; 
&lt;span&gt;838&lt;/span&gt; 
&lt;span&gt;839&lt;/span&gt;         &amp;lt;/div&amp;gt;
&lt;span&gt;840&lt;/span&gt;         &amp;lt;div &lt;span&gt;class&lt;/span&gt; = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;postDesc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;posted @ &amp;lt;span id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post-date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;2018-09-03 15:09&amp;lt;/span&amp;gt; &amp;lt;a href=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.cnblogs.com/zhangkanghui/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;m1racle&amp;lt;/a&amp;gt; 阅读(&amp;lt;span id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post_view_count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;...&amp;lt;/span&amp;gt;) 评论(&amp;lt;span id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post_comment_count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;...&amp;lt;/span&amp;gt;)  &amp;lt;a href =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://i.cnblogs.com/EditPosts.aspx?postid=9577714&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nofollow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;编辑&amp;lt;/a&amp;gt; &amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AddToWz(9577714);return false;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;收藏&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;841&lt;/span&gt;     &amp;lt;/div&amp;gt;
&lt;span&gt;842&lt;/span&gt;     &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;var allowComments=true,cb_blogId=442473,cb_entryId=9577714,cb_blogApp=currentBlogApp,cb_blogUserGuid=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a821bb9d-4d70-4e51-5253-08d5ddce222f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,cb_entryCreatedDate=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018/9/3 15:09:00&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;loadViewCount(cb_entryId);var cb_postType=1;&amp;lt;/script&amp;gt;
&lt;span&gt;843&lt;/span&gt;     
&lt;span&gt;844&lt;/span&gt; &amp;lt;/div&amp;gt;&amp;lt;!--end: topics 文章、评论容器--&amp;gt;
&lt;span&gt;845&lt;/span&gt; &amp;lt;/div&amp;gt;&amp;lt;a name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;!comments&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog-comments-placeholder&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;var commentManager = new blogCommentManager();commentManager.renderComments(0);&amp;lt;/script&amp;gt;
&lt;span&gt;846&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;comment_form&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;commentform&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;847&lt;/span&gt; &amp;lt;a name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;commentform&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/a&amp;gt;
&lt;span&gt;848&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;divCommentShow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;849&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;comment_nav&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;span id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;span_refresh_tips&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;a href=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;javascript:void(0);&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; onclick=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;return RefreshCommentList();&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lnk_RefreshComments&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; runat=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;server&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; clientidmode=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Static&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;刷新评论&amp;lt;/a&amp;gt;&amp;lt;a href=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; onclick=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;return RefreshPage();&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;刷新页面&amp;lt;/a&amp;gt;&amp;lt;a href=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#top&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;返回顶部&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;850&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;comment_form_container&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;851&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ad_text_commentbox&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ad_text_under_commentbox&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;852&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ad_t2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;853&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;opt_under_post&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;854&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cnblogs_c1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c_ad_block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;855&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;under_post_news&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;856&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cnblogs_c2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c_ad_block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;857&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;under_post_kb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;858&lt;/span&gt; &amp;lt;div id=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;HistoryToday&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c_ad_block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;859&lt;/span&gt; &amp;lt;script type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;span&gt;860&lt;/span&gt; &lt;span&gt;    fixPostBody();
&lt;/span&gt;&lt;span&gt;861&lt;/span&gt;     setTimeout(function () { incrementViewCount(cb_entryId); }, 50&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;862&lt;/span&gt; &lt;span&gt;    deliverAdT2();
&lt;/span&gt;&lt;span&gt;863&lt;/span&gt; &lt;span&gt;    deliverAdC1();
&lt;/span&gt;&lt;span&gt;864&lt;/span&gt; &lt;span&gt;    deliverAdC2();    
&lt;/span&gt;&lt;span&gt;865&lt;/span&gt; &lt;span&gt;    loadNewsAndKb();
&lt;/span&gt;&lt;span&gt;866&lt;/span&gt; &lt;span&gt;    loadBlogSignature();
&lt;/span&gt;&lt;span&gt;867&lt;/span&gt; &lt;span&gt;    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
&lt;/span&gt;&lt;span&gt;868&lt;/span&gt; &lt;span&gt;    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
&lt;/span&gt;&lt;span&gt;869&lt;/span&gt; &lt;span&gt;    loadOptUnderPost();
&lt;/span&gt;&lt;span&gt;870&lt;/span&gt; &lt;span&gt;    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);   
&lt;/span&gt;&lt;span&gt;871&lt;/span&gt; &amp;lt;/script&amp;gt;
&lt;span&gt;872&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;873&lt;/span&gt; 
&lt;span&gt;874&lt;/span&gt; 
&lt;span&gt;875&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!--end: forFlow --&amp;gt;
&lt;span&gt;876&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!--end: mainContent 主体内容容器--&amp;gt;
&lt;span&gt;877&lt;/span&gt; 
&lt;span&gt;878&lt;/span&gt;     &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sideBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;879&lt;/span&gt;         &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sideBarMain&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;880&lt;/span&gt;             
&lt;span&gt;881&lt;/span&gt; &amp;lt;!--done--&amp;gt;
&lt;span&gt;882&lt;/span&gt; &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;newsItem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;883&lt;/span&gt; &amp;lt;h3 &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;catListTitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;公告&amp;lt;/h3&amp;gt;
&lt;span&gt;884&lt;/span&gt;     &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog-news&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;loadBlogNews();&amp;lt;/script&amp;gt;
&lt;span&gt;885&lt;/span&gt; &amp;lt;/div&amp;gt;
&lt;span&gt;886&lt;/span&gt; 
&lt;span&gt;887&lt;/span&gt;             &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog-calendar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; style=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;display:none&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;loadBlogDefaultCalendar();&amp;lt;/script&amp;gt;
&lt;span&gt;888&lt;/span&gt;             
&lt;span&gt;889&lt;/span&gt;             &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;leftcontentcontainer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;890&lt;/span&gt;                 &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blog-sidecolumn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;loadBlogSideColumn();&amp;lt;/script&amp;gt;
&lt;span&gt;891&lt;/span&gt;             &amp;lt;/div&amp;gt;
&lt;span&gt;892&lt;/span&gt;             
&lt;span&gt;893&lt;/span&gt;         &amp;lt;/div&amp;gt;&amp;lt;!--end: sideBarMain --&amp;gt;
&lt;span&gt;894&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!--end: sideBar 侧边栏容器 --&amp;gt;
&lt;span&gt;895&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;896&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!--end: main --&amp;gt;
&lt;span&gt;897&lt;/span&gt;     &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clear&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;span&gt;898&lt;/span&gt;     &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;footer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;899&lt;/span&gt;         
&lt;span&gt;900&lt;/span&gt; &amp;lt;!--done--&amp;gt;
&lt;span&gt;901&lt;/span&gt; Copyright &amp;amp;copy;2018&lt;span&gt; m1racle
&lt;/span&gt;&lt;span&gt;902&lt;/span&gt;     &amp;lt;/div&amp;gt;&amp;lt;!--end: footer --&amp;gt;
&lt;span&gt;903&lt;/span&gt; &amp;lt;/div&amp;gt;&amp;lt;!--end: home 自定义的最大容器 --&amp;gt;
&lt;span&gt;904&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;905&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 06 Sep 2018 15:42:00 +0000</pubDate>
<dc:creator>m1racle</dc:creator>
<og:description>C语言基础学习PYTHON——基础学习D10 20180906内容纲要： 1、协程 （1）yield （2）greenlet （3）gevent （4）gevent实现单线程下socket多并发 2、</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangkanghui/p/9602004.html</dc:identifier>
</item>
<item>
<title>ElasticSearch入门 附.Net Core例子 - 码农阿宇</title>
<link>http://www.cnblogs.com/CoderAyu/p/9601991.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CoderAyu/p/9601991.html</guid>
<description>&lt;p&gt;Elasticsearch是基于Lucene的搜索引擎。它提供了一个分布式，支持多租户的全文搜索引擎，它具有HTTP Web界面和无模式JSON文档。 Elasticsearch是用Java开发的，根据Apache许可条款作为开源发布。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;----来自维基百科的解释&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我个人的理解是Elasticsearch（以下简称ES）是一个支持分布式的全文搜索引擎，因为在海量数据搜索时，普通关系型、非关系型数据库因为IO读取、处理器运算能力的限制，导致查询效率难以提升，但是ES是分布式的（能把处理压力分摊给每个节点），而且它是给每个词创建索引，所以查询效率极高，堪称即时搜索。&lt;/p&gt;
&lt;p&gt;而且ES能搭配Kibana,实现数据的可视化管理与数据分析。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233650315-1527615390.png&quot;&gt;&lt;img title=&quot;QQ截图20180906215325&quot; src=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233651539-757021976.png&quot; alt=&quot;QQ截图20180906215325&quot; width=&quot;669&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;&lt;em&gt;                                                                           Kibana仪表盘&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 align=&quot;left&quot;&gt;2.1 Node和Cluster&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;前面所过ES是一个分布式搜索引擎，其本质是一个分布式数据库，可以多台计算机上的ES实例协同工作，这里面的某一台计算机上的某个ES实例，就可以称为一个Node(节点)，所有的这些协同工作的实例，可以称为一个Cluster(集群)。&lt;/p&gt;
&lt;h2&gt;2.2 Index&lt;/h2&gt;
&lt;p&gt;Elastic 会索引所有字段，经过处理后写入一个反向索引（Inverted Index）。查找数据的时候，直接查找该索引。&lt;/p&gt;
&lt;p&gt;所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。&lt;/p&gt;
&lt;h2&gt;2.3 Document&lt;/h2&gt;
&lt;p&gt;Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。&lt;/p&gt;
&lt;p&gt;Document 使用 JSON 格式表示，下面是一个例子。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code&gt;
{
  &quot;user&quot;: &quot;张三&quot;,
  &quot;title&quot;: &quot;工程师&quot;,
  &quot;desc&quot;: &quot;数据库管理&quot;
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率。&lt;/p&gt;
&lt;h2&gt;2.4 Type&lt;/h2&gt;
&lt;p&gt;Document 可以分组，比如&lt;code&gt;weather&lt;/code&gt;这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。&lt;/p&gt;
&lt;p&gt;不同的 Type 应该有相似的结构（schema），举例来说，&lt;code&gt;id&lt;/code&gt;字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/mapping.html&quot;&gt;一个区别&lt;/a&gt;。性质完全不同的数据（比如&lt;code&gt;products&lt;/code&gt;和&lt;code&gt;logs&lt;/code&gt;）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;https://www.elastic.co/blog/index-type-parent-child-join-now-future-in-elasticsearch&quot;&gt;规划&lt;/a&gt;，Elastic 6.x 版只允许每个 Index 包含一个 Type，7.x 版将会彻底移除 Type。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;----参考&lt;/em&gt;&lt;/span&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html&quot;&gt;&lt;span&gt;&lt;em&gt;阮一峰 全文搜索引擎 Elasticsearch 入门教程&lt;/em&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Elasticsearch用于构建高可用和可扩展的系统。扩展的方式可以是购买更好的服务器(纵向扩展)或者购买更多的服务器（横向扩展）。&lt;/p&gt;
&lt;p&gt;Elasticsearch虽然能从更强大的硬件中获得更好的性能，但是纵向扩展有它的局限性。真正的扩展应该是横向的，它通过增加节点来均摊负载和增加可靠性。如果我们启动一个单独的节点，它还没有数据和索引，这个集群看起来就像下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bbs.itsource.cn/data/attachment/forum/201709/01/105227id62i0h0myk04ok2.png&quot; alt=&quot;&quot; width=&quot;252&quot; height=&quot;151&quot;/&gt;&lt;/p&gt;
&lt;p&gt;集群中一个节点会被选举为主节点(master),它将临时管理集群级别的一些变更，例如新建或删除索引、增加或移除节点等。&lt;/p&gt;
&lt;p&gt;主节点不参与文档级别的变更或搜索，这意味着在流量增长的时候，该主节点不会成为集群的瓶颈。任何节点都可以成为主节点。我们例子中的集群只有一个节点，所以它会充当主节点的角色。&lt;/p&gt;
&lt;p&gt;当索引创建完成的时候，主分片的数量就固定了，但是复制分片的数量可以随时调整。&lt;/p&gt;
&lt;p&gt;让我们在集群中唯一一个空节点上创建一个叫做 blogs 的索引。默认情况下，一个索引被分配5个主分片，但是为了演示的目的，我们只分配3个主分片和一个复制分片（每个主分片都有一个复制分片）：&lt;/p&gt;
&lt;p&gt;PUT /blogs&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;&quot;settings&quot; : {&lt;/p&gt;
&lt;p&gt;&quot;number_of_shards&quot; : 3,&lt;/p&gt;
&lt;p&gt;&quot;number_of_replicas&quot; : 1&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bbs.itsource.cn/data/attachment/forum/201709/01/105338es7rqs92eulekq9e.png&quot; alt=&quot;&quot; width=&quot;313&quot; height=&quot;194&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们的集群现在看起来就像上图，三个主分片都被分配到 Node 1 。&lt;/p&gt;
&lt;p&gt;在单一节点上运行意味着有单点故障的风险：没有数据备份。幸运的是，要防止单点故障，我们唯一需要做的就是启动另一个节点。&lt;/p&gt;
&lt;p&gt;如果我们启动了第二个节点，这个集群看起来就像下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bbs.itsource.cn/data/attachment/forum/201709/01/105412r6pee62koey42zk9.png&quot; alt=&quot;&quot; width=&quot;521&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二个节点已经加入集群，三个复制分片(replica shards)也已经被分配了，分别对应三个主分片，这意味着在丢失任意一个节点的情况下依旧可以保证数据的完整性。&lt;/p&gt;
&lt;p&gt;文档的索引将首先被存储在主分片中，然后并发复制到对应的复制节点上。这可以确保我们的数据在主节点和复制节点上都可以被检索。&lt;/p&gt;
&lt;p&gt;随着应用需求的增长，我们该如何扩展？如果我们启动第三个节点，我们的集群会自我感知，这时便成为了三节点集群。&lt;/p&gt;
&lt;p&gt;分片已经被重新分配以平衡负载：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bbs.itsource.cn/data/attachment/forum/201709/01/105447o3tok3xpj85y3rxy.png&quot; alt=&quot;&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从 Node 1 和 Node 2 来的分片已经被移动到新的 Node 3 上，这样每个节点就有两个分片，以代替之前的三个。这意味着每个节点的硬件资源（CPU、RAM、I/O）被较少的分片共享，这样每个分片就会有更好的表现。&lt;/p&gt;
&lt;p&gt;分片本身就是一个完整成熟的搜索引擎，它可以使用单一节点的所有资源。使用这6个分片（3个主分片和三个复制分片）我们可以扩展最多到6个节点，每个节点上有一个分片，这样就可以100%使用这个节点的资源了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;----参考文献&lt;/em&gt;&lt;/span&gt;&lt;a href=&quot;https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html&quot;&gt;&lt;span&gt;&lt;em&gt;Elasticsearch: 权威指南&lt;/em&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;4.1安装&lt;/h2&gt;
&lt;p&gt;因为每个平台上ES安装方法有所区别，而且网络上有较为详细的安装教程，本文在此不再赘述。原本是想着在我的两台腾讯云Centos服务器上，搭建一个ES集群的，但是因为云服务器内存1G，运行ES时总是报错，大体意思是内存不足，所以我就在自己的PC上,只搭建了一个ES节点，还不算ES集群，不过不影响功能的测试。&lt;/p&gt;
&lt;p&gt;Windows环境下ES 6.4 MSI下载地址：&lt;a title=&quot;https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.0.msi&quot; href=&quot;https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.0.msi&quot;&gt;https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.0.msi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一路默认下一步，安装完成后，在浏览器地址输入&lt;a title=&quot;http://localhost:9200/&quot; href=&quot;http://localhost:9200/&quot;&gt;http://localhost:9200/&lt;/a&gt;，如果您能看到下列结果，说明安装完成。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DESKTOP-1FC1B1D&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cluster_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;elasticsearch&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cluster_uuid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lZx4n2xzToeaj9k3HEHAqw&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;number&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6.4.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;build_flavor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unknown&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;build_type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;unknown&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;build_hash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;595516e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;build_date&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2018-08-17T23:18:47.308994Z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;build_snapshot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lucene_version&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;7.4.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;minimum_wire_compatibility_version&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5.6.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;minimum_index_compatibility_version&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5.0.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tagline&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;You Know, for Search&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&quot;You Know, for Search&quot;&lt;/p&gt;
&lt;p&gt;ES有一套Restful 风格的API系统，通过该API我们与ES进行交互。&lt;/p&gt;
&lt;h2&gt;4.2数据的提交&lt;/h2&gt;
&lt;p&gt;利用PostMan向ES POST一条数据如下。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233652553-551078538.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233653558-1601854419.png&quot; alt=&quot;image&quot; width=&quot;900&quot; height=&quot;489&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:9200/index/test1/1&quot;&gt;http://localhost:9200/index/test1/1&lt;/a&gt; 中Index是该数据的Index(上文有介绍Index),test1是该数据的Type,1是该条数据的Id,该ID在通过ID获取数据时需要用到。&lt;/p&gt;
&lt;h2&gt;4.3数据通过ID获取&lt;/h2&gt;
&lt;p&gt;在知道数据的Index,Type和ID的情况下，可以通过和上文Post数据的Url一样的格式获取数据，不同之处时，此时的HTTP方法时Get,如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233654865-1867627163.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233655862-505465312.png&quot; alt=&quot;image&quot; width=&quot;900&quot; height=&quot;433&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;4.4数据的查询&lt;/h2&gt;
&lt;p&gt;ES的数据查询语法较为丰富，此处以一个最简单的查询为例，Http方法为POST,请求的Url中同样指定了Index和Type&lt;/p&gt;
&lt;p&gt;{&lt;br/&gt;   &quot;query&quot; : { &quot;match&quot; : { &quot;tagline&quot; : &quot;for&quot; }}&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;指的时查询tagline中包含的for的数据，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233657148-990739448.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233658137-186550666.png&quot; alt=&quot;image&quot; width=&quot;900&quot; height=&quot;418&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他更详细的查询语法，建议大家查看&lt;a href=&quot;https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html&quot;&gt;&lt;span&gt;&lt;em&gt;Elasticsearch: 权威指南&lt;/em&gt;&lt;/span&gt;&lt;/a&gt;，此处主要抛砖引玉。&lt;/p&gt;

&lt;p&gt;在上文中，我们了解到，可以通过restful api与ES进行交互，那么，如果需要在我们的程序中使用ES，是不是要创建一个这样的Helper方法，通过HTTP调用RESTFul API与ES进行交互呢？&lt;/p&gt;
&lt;p&gt;不是不可以，但是Elastic为大部分语言都创建了&quot;Clients”，其实就是把上文提及的那些方法进行了一个封装，是我们在代码中，能够方便地调用ES。&lt;/p&gt;
&lt;p&gt;以.Net Core为例，该”Clients”开源在Github:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/elastic/elasticsearch-net&quot;&gt;https://github.com/elastic/elasticsearch-net&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;5.1 SDK（客户端,Clients）&lt;/h2&gt;
&lt;p&gt;在该仓库中，其实有&lt;code&gt;Elasticsearch.Net&lt;/code&gt; 和 &lt;code&gt;NEST&lt;/code&gt;两个.Net官方SDK,两个各有特色。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Elasticsearch.Net&lt;/code&gt; 是一个非常low leave而且灵活的SDK，它不在意你如何的构建自己的请求和响应。它非常抽象，因此所有的Elasticsearch RESTFul API被表示为方法，而且不会影响你构建json / request / response对象的方式。 它还内置可配置/可覆盖的群集故障转移重试机制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NEST&lt;/code&gt; 是一个 high level SDK, 有非常大的弹性，如果你想更好的提升你的搜索服务，你完全可以使用它来做为你的客户端。可以映射所有请求和响应对象，拥有一个强类型DSL（领域特定语言），并且可以使用.net的特性，如协变、Auto Mapping Of POCOs，NEST内部使用的依然是Elasticsearch.Net客户端。&lt;/p&gt;
&lt;h2&gt;5.2创建一个Demo&lt;/h2&gt;
&lt;p&gt;本Demo我使用的NEST，所以第一步是创建一个Asp.Net Core Api应用程序并引入NEST的Nuget包。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
PM&amp;gt; Install-Package NEST
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后我创建一个EsClientProvider,代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; EsClientProvider : IEsClientProvider
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IConfiguration _configuration;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ElasticClient _client;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; EsClientProvider(IConfiguration configuration)
        {
            _configuration &lt;/span&gt;=&lt;span&gt; configuration;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ElasticClient GetClient()
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_client != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _client;

            InitClient();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _client;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; InitClient()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; node = &lt;span&gt;new&lt;/span&gt; Uri(_configuration[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EsUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
            _client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ElasticClient(&lt;span&gt;new&lt;/span&gt; ConnectionSettings(node).DefaultIndex(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;IEsClientProvider代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IEsClientProvider
    {
        ElasticClient GetClient();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后再Startup的ConfigureServices进行服务的注册&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {

            services.AddSingleton&lt;/span&gt;&amp;lt;IEsClientProvider, EsClientProvider&amp;gt;&lt;span&gt;();

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后，修改ValueContoller,代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ValueController : ControllerBase
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; ElasticClient _client;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ValueController(IEsClientProvider clientProvider)
        {
            _client &lt;/span&gt;=&lt;span&gt; clientProvider.GetClient();
        }

        [HttpPost]
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value/index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IIndexResponse Index(Post post)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _client.IndexDocument(post);
        }

        [HttpPost]
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value/search&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IReadOnlyCollection&amp;lt;Post&amp;gt; Search(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; type)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; _client.Search&amp;lt;Post&amp;gt;(s =&amp;gt;&lt;span&gt; s
                .From(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                .Size(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;)
                .Query(q &lt;/span&gt;=&amp;gt; q.Match(m =&amp;gt; m.Field(f =&amp;gt;&lt;span&gt; f.Type).Query(type)))).Documents;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中Index方法能进行数据的提交，Search是通过Post实体的type来进行数据查询。&lt;/p&gt;

&lt;p&gt;代码不复杂，我就不详细介绍了，在PostMan中进行Search方法的测试，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233659407-1602692372.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233700429-1884926690.png&quot; alt=&quot;image&quot; width=&quot;775&quot; height=&quot;328&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查询要求是type是567,响应的实体中，type确实为567,Success!&lt;/p&gt;

&lt;p&gt;项目完整代码：&lt;a title=&quot;https://github.com/liuzhenyulive/Elasticsearch.Net-Demo&quot; href=&quot;https://github.com/liuzhenyulive/Elasticsearch.Net-Demo&quot;&gt;https://github.com/liuzhenyulive/Elasticsearch.Net-Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;不定期分享.Net实用干货，欢迎关注&lt;img class=&quot;wlEmoticon wlEmoticon-openmouthedsmile&quot; src=&quot;https://img2018.cnblogs.com/blog/1293736/201809/1293736-20180906233700788-302189562.png&quot; alt=&quot;Open-mouthed smile&quot;/&gt;！&lt;/p&gt;

</description>
<pubDate>Thu, 06 Sep 2018 15:37:00 +0000</pubDate>
<dc:creator>码农阿宇</dc:creator>
<og:description>1.什么是ElasticSearch? Elasticsearch是基于Lucene的搜索引擎。它提供了一个分布式，支持多租户的全文搜索引擎，它具有HTTP Web界面和无模式JSON文档。 Elas</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CoderAyu/p/9601991.html</dc:identifier>
</item>
<item>
<title>scala成长之路（7）函数进阶——可能是史上最浅显易懂的闭包教程 - 王亚楼</title>
<link>http://www.cnblogs.com/wangyalou/p/9601939.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangyalou/p/9601939.html</guid>
<description>&lt;p&gt;由于scala中函数内部能定义函数，且函数能作为函数的返回值，那么问题来了，当返回的函数使用了外层函数的局部变量时，会发生什么呢？没错，就产生是闭包。&lt;/p&gt;
&lt;p&gt;关于闭包的解释网上一大堆，但基本上都是照葫芦画瓢，一个模子刻出来的，说来说去都只讲了“内部函数引用外层函数的局部变量”这个刻板的定义，根本没降到精髓。精髓是什么？且看我一句话给你讲清楚：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;闭包就是外层函数函数的对象，外层函数就是闭包的构造函数！&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;怎么样，是不是摸不着头脑？其实是这样，我们使用闭包的目的并不是为了引用外层函数的局部变量，这只是手段，不是目的；我们的最终目的其实是函数的定制化，即按照一定的模板根据输出生成具有不同功能的函数，其实就是“&lt;strong&gt;函数的函数&lt;/strong&gt;”。这里我们马上可以想到，就相当于“类”的思想，能根据不同的构造函数产生不同的“类的对象”。其实这里就是利用了这种思路，把外层函数当做构造函数，利用传入的参数进行定制，生成具有不同功能的函数并返回。&lt;/p&gt;
&lt;p&gt;道理我都懂，但这跟“引用局部变量”有什么关系？很简单呀，比方说外层函数就是一个毛坯房，返回的函数时精装修房，那么外层函数的参数是装修图纸，最终得到的房子肯定是要用到这个图纸或者图纸的衍生物的，因此为了实现定制化，很定要依靠于外层函数的局部变量。&lt;/p&gt;
&lt;p&gt;但是这里有个问题：我们都知道，正常来说函数的局部变量是存储在栈内存的，而对象是存储在堆内存的，因此同一个类可能存在多个对象，而函数在执行完成之后栈内存就会释放，因此不会存在多份函数的局部变量。但是根据我们上边的分析，定制化的函数肯定是要用到局部变量的，而且不同的定制化肯定是要保存多份局部变量，且相互之间空间独立的，就如同不同的对象一样。那么scala是怎么解决这个问题的呢？根据这篇文章 https://www.jianshu.com/p/8f24150fad2a 的介绍，scala在生成闭包时使用了一个临时对象来保存外层函数中的局部变量，因此可以算是将当前堆内存中的变量拷贝了一份到栈内存中，因此实现了多份局部空间的并存，以及函数闭包。&lt;/p&gt;

</description>
<pubDate>Thu, 06 Sep 2018 15:26:00 +0000</pubDate>
<dc:creator>王亚楼</dc:creator>
<og:description>scala的闭包讲解，可能是史上最浅显易懂的闭包教程</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangyalou/p/9601939.html</dc:identifier>
</item>
<item>
<title>我的第一个python web开发框架（37）——职位管理功能 - AllEmpty</title>
<link>http://www.cnblogs.com/EmptyFS/p/9601845.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/EmptyFS/p/9601845.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　对于职位管理，我们可以理解它为角色权限的管理，就像前面所说的一样，有了职位管理，后台管理系统绑定好对应的权限以后，新进员工、离职或岗位调整，管理员操作起来就非常的便捷了，只需要重新绑定对应职位就可以做好权限的切换工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　为了方便职位管理，我们可以将页面设计成下面这个样子&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/129385/201809/129385-20180906215151345-302946307.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　左边显示部分列表，点击其中一个项后，右边显示对应部门的职位，然后再对职位进行增、改、删等操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　左边我们可以直接使用上一章的部门列表接口，然后将jqGrid前端组件修改一下，只显示名称一列就可以了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然后在前端代码中的jqGrid组件中，增加onSelectRow方法，点击列表项时执行右边列表查询和刷新操作就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　右边需要增加职位列表查询接口，查询时需要提交部门id作为查询条件，具体接口代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/system/positions/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback():
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    获取列表数据
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 部门id&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     department_id = convert_helper.to_int0(web_helper.get_query(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;department_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;部门id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 页面索引&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     page_number = convert_helper.to_int1(web_helper.get_query(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, is_check_null=&lt;span&gt;False))
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 页面页码与显示记录数量&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     page_size = convert_helper.to_int0(web_helper.get_query(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, is_check_null=&lt;span&gt;False))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     sidx = web_helper.get_query(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sidx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, is_check_null=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     sord = web_helper.get_query(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sord&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, is_check_null=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化排序字段&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     order_by = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;id asc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; sidx:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         order_by = sidx + &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; +&lt;span&gt; sord
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     _positions_logic =&lt;span&gt; positions_logic.PositionsLogic()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取记录&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     wheres = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; department_id:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         wheres = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;department_id=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(department_id)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     result = _positions_logic.get_list(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, wheres, page_number, page_size, order_by)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直接输出json&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; json.dumps(result)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查询失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　代码看起来是否感觉很熟悉，和前端列表查询的代码差不多，只是接收参数、查询条件和调用的类不一样而已。所以我们只需要熟悉工具函数、底层ORM方法和调用方法，写起代码来就非常便捷，代码的可读性也大大增强了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　接着我们来处理新增职位操作，新增职位时，需要管理填写的内容只有职位名称，因为所属部门与部门编码在页面中可以直接带过来，另一个操作就是设置访问权限了，这也是我们整个权限管理中最重要的一个环节&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/129385/201809/129385-20180906222717287-1554256049.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　由上图可以看到，设置访问权限它是一个树列表，它使用的是ztree控件，按它要求的格式，将列表值传给ztree控件就可以自动生成这样的树列表了，然后前端代码通过ztree控件的onCheck方法，获取所有勾选项对应的菜单项id，组合成权限字串提交到接口，更新到数据表中，该职位就拥有了我们所勾选的所有权限了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对于访问权限树列表的展示，首先，它需要读取菜单列表，输出ztree控件要求的格式；其次，我们在编辑职位权限时，需要对已拥有权限的项自动打上勾，这个我们也可以直接在接口中输出对应的参数来进行设置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所以我们可以在上一章的menu_info.py文件中，增加下面接口来处理，通过提交过来的职位id，来获取该职位拥有的权限，然后通过逐项判断菜单项与权限的关系，来判断是否打勾。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/api/system/menu_info/positions/&amp;lt;id:int&amp;gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(id):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    根据用户职位权限获取列表数据（树列表），为已有权限的数据赋值
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     _menu_info_logic =&lt;span&gt; menu_info_logic.MenuInfoLogic()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取记录（ztree控件需要输出记录id、父id、树节点名称、节点是否扩开这几项参数）&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     result = _menu_info_logic.get_list(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id, parent_id, name, not is_leaf as open, false as checked&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; result &lt;span&gt;and&lt;/span&gt; result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取指定的职位记录&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         _positions_logic =&lt;span&gt; positions_logic.PositionsLogic()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         positions_logic_model =&lt;span&gt; _positions_logic.get_model_for_cache(id)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; positions_logic_model:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取该职位权限字串&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             page_power = positions_logic_model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page_power&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断当前菜单项id是否存在于该职位的权限字串中&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; model &lt;span&gt;in&lt;/span&gt;&lt;span&gt; result.get('rows'):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果存在，则表示当前职位拥有该菜单项的权限，即在菜单权限列表中需要打勾&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + str(model.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, 0)) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; page_power:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     model[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(0, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;tree_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rows&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)})
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查询失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　我们再来看看点击保存后，执行新增职位记录接口代码是怎么实现的&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @post(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/system/positions/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback():
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    新增记录
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     name = web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;角色名称&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     department_id = convert_helper.to_int0(web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;department_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;部门id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     page_power = web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page_power&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;权限列表&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, is_check_null=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     _department_logic =&lt;span&gt; department_logic.DepartmentLogic()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取对应的部门记录&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     department_result =&lt;span&gt; _department_logic.get_model_for_cache(department_id)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; department_result:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;部门不存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     _positions_logic =&lt;span&gt; positions_logic.PositionsLogic()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 组合更新字段&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     fields =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: string(name),
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;department_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: department_id,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;department_code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: string(department_result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;department_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: string(department_result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page_power&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: string(page_power),
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取记录&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     result =&lt;span&gt; _positions_logic.add_model(fields)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直接输出json&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(0, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;提交成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提交失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这段代码跟之前的新增也差不多，先是接收提交的参数，然后组合更新字典，再调用提交到数据表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　修改职位权限功能跟上面的类似，不过接口中需要增加一个获取职位记录实体的接口&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/system/positions/&amp;lt;id:int&amp;gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(id):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    获取指定记录
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     _positions_logic =&lt;span&gt; positions_logic.PositionsLogic()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取记录&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     result =&lt;span&gt; _positions_logic.get_model_for_cache(id)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直接输出json&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(0, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, result)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查询失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; @put(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/system/positions/&amp;lt;id:int&amp;gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(id):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    修改记录
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     name = web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;角色名称&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     department_id = convert_helper.to_int0(web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;department_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;部门id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     page_power = web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;page_power&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;权限列表&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, is_check_null=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; page_power == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         page_power = &lt;span&gt;''&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     _positions_logic =&lt;span&gt; positions_logic.PositionsLogic()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     positions_result =&lt;span&gt; _positions_logic.get_model_for_cache(id)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; department_id != positions_result.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;department_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;该角色所属部门错误，请与管理员联系&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 组合更新字段&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     fields =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: string(name),
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page_power&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: string(page_power),
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取记录&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     result =&lt;span&gt; _positions_logic.edit_model(id, fields)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直接输出json&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(0, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;提交成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, result)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提交失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　最后是删除接口，我们在执行删除操作时，一定要判断它是否已绑定了管理员账号，不然直接删除后，管理员登录后台系统以后将没有任何权限，无法做任何操作。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @delete(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/system/positions/&amp;lt;id:int&amp;gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback(id):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    删除指定记录
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 判断要删除的记录是否被引用，是的话不能删除&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     _manager_logic =&lt;span&gt; manager_logic.ManagerLogic()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; _manager_logic.exists(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;positions_id=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(id)):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;当前职位已绑定相关管理员，不能直接删除&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除记录&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     _positions_logic =&lt;span&gt; positions_logic.PositionsLogic()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     result =&lt;span&gt; _positions_logic.delete_model(id)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直接输出json&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(0, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;删除成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;删除失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;a href=&quot;https://pan.baidu.com/s/10cwvW2MHxEVdsdGNFngKVA&quot; target=&quot;_blank&quot;&gt;本文对应的源码下载&lt;/a&gt; &lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;版权声明：本文原创发表于 &lt;a href=&quot;http://www.cnblogs.com/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;博客园&lt;/span&gt;&lt;/a&gt;，作者为 &lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/EmptyFS/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;AllEmpty&lt;/span&gt;&lt;/a&gt; &lt;/strong&gt;本文欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则视为侵权。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;python开发QQ群：669058475    作者博客：http://www.cnblogs.com/EmptyFS/&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 06 Sep 2018 15:16:00 +0000</pubDate>
<dc:creator>AllEmpty</dc:creator>
<og:description>对于职位管理，我们可以理解它为角色权限的管理，就像前面所说的一样，有了职位管理，后台管理系统绑定好对应的权限以后，新进员工、离职或岗位调整，管理员操作起来就非常的便捷了，只需要重新绑定对应职位就可以做</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/EmptyFS/p/9601845.html</dc:identifier>
</item>
<item>
<title>Win32之隐藏DLL隐藏模块技术 - iBinary</title>
<link>http://www.cnblogs.com/iBinary/p/9601860.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iBinary/p/9601860.html</guid>
<description>&lt;p&gt;这一讲涉及到windows底层技术.跟汇编内容. 我们才可以实现模块隐藏(也称为DLL隐藏)&lt;/p&gt;

&lt;h2&gt;一丶API反汇编勾引兴趣&lt;/h2&gt;
&lt;p&gt;　　我们都用过Windows的进程跟线程API  也就是 GetCurrentThreadId() 跟 GetCurrentProcessId():&lt;/p&gt;
&lt;p&gt;一个是获取进程ID,一个是线程ID&lt;/p&gt;
&lt;p&gt;那么我们利用反汇编技术.看看其实现代码是什么.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906185156649-1044752317.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到使用了FS寄存器.并且获取18内容. 然后+20内容获取出我们的进程Pid&lt;/p&gt;
&lt;p&gt;那么FS寄存器是什么.&lt;/p&gt;
&lt;h2&gt;二丶FS寄存器简介&lt;/h2&gt;
&lt;p&gt;　　FS寄存器如果学习过内核的同学们应该知道.段选择子. 在这里就不说了.&lt;/p&gt;
&lt;p&gt;FS是执向一个TEB结构的一个寄存器. TEB结构是什么. TEB结构是线程环境快. 保存了当前的线程的信息.&lt;/p&gt;
&lt;p&gt;MSDN中.TEB是一个假的TEB.只告诉你有这个东西. 具体我们需要时Windbg查看结构体成员.&lt;/p&gt;
&lt;p&gt;MSDN链接: &lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/desktop/api/winternl/ns-winternl-_teb&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/zh-cn/windows/desktop/api/winternl/ns-winternl-_teb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用WinDbg的dt命令即可查看.&lt;/p&gt;
&lt;p&gt;如下图:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906185530039-1969744077.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们通过反汇编.知道了TEB结构的地址 .也就是 mov eax,dword ptr fs:[0x18]&lt;/p&gt;
&lt;p&gt;那么其实Windows底层也提供了一个获取TEB结构的API . NtCurrentTeb()  返回TEB的地址.因为TEB结构我们并没有.所以直接用DWORD接受即可.&lt;/p&gt;
&lt;p&gt;当然可以通过dt TEB知道结构体的成员. 那么我们可以伪造. 不过这个不是我们的重点.&lt;/p&gt;
&lt;p&gt;首先Win32下TEB 的结构跟64位下的TEB结构不一样.&lt;/p&gt;
&lt;p&gt;32位下 TEB获取是 mov eax,fs:[0x18]  64位下是 mov rax,qword ptr gs:[0x30] 具体的可以自己逆向一个访问TEB的API查看即可.&lt;/p&gt;
&lt;h2&gt;三丶以32位讲解. 熟悉TEB结构体.&lt;/h2&gt;
&lt;p&gt;　　这里直接列出dt出来的32位下的TEB结构体&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
+&lt;span&gt;0x000&lt;/span&gt; NtTib            : _NT_TIB                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;TIB结构.存储栈信息&lt;/span&gt;
   +&lt;span&gt;0x01c&lt;/span&gt;&lt;span&gt; EnvironmentPointer : Ptr32 Void              
   &lt;/span&gt;+&lt;span&gt;0x020&lt;/span&gt; ClientId         : _CLIENT_ID                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存进程ID跟线程ID&lt;/span&gt;
   +&lt;span&gt;0x028&lt;/span&gt;&lt;span&gt; ActiveRpcHandle  : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x02c&lt;/span&gt;&lt;span&gt; ThreadLocalStoragePointer : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x030&lt;/span&gt; ProcessEnvironmentBlock : Ptr32 _PEB   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;PEB进程环境快结构.&lt;/span&gt;
   +&lt;span&gt;0x034&lt;/span&gt;&lt;span&gt; LastErrorValue   : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x038&lt;/span&gt;&lt;span&gt; CountOfOwnedCriticalSections : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x03c&lt;/span&gt;&lt;span&gt; CsrClientThread  : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x040&lt;/span&gt;&lt;span&gt; Win32ThreadInfo  : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x044&lt;/span&gt; User32Reserved   : [&lt;span&gt;26&lt;/span&gt;&lt;span&gt;] Uint4B
   &lt;/span&gt;+&lt;span&gt;0x0ac&lt;/span&gt; UserReserved     : [&lt;span&gt;5&lt;/span&gt;&lt;span&gt;] Uint4B
   &lt;/span&gt;+&lt;span&gt;0x0c0&lt;/span&gt;&lt;span&gt; WOW32Reserved    : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x0c4&lt;/span&gt;&lt;span&gt; CurrentLocale    : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x0c8&lt;/span&gt;&lt;span&gt; FpSoftwareStatusRegister : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x0cc&lt;/span&gt; SystemReserved1  : [&lt;span&gt;54&lt;/span&gt;&lt;span&gt;] Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x1a4&lt;/span&gt;&lt;span&gt; ExceptionCode    : Int4B
   &lt;/span&gt;+&lt;span&gt;0x1a8&lt;/span&gt;&lt;span&gt; ActivationContextStackPointer : Ptr32 _ACTIVATION_CONTEXT_STACK
   &lt;/span&gt;+&lt;span&gt;0x1ac&lt;/span&gt; SpareBytes       : [&lt;span&gt;36&lt;/span&gt;&lt;span&gt;] UChar
   &lt;/span&gt;+&lt;span&gt;0x1d0&lt;/span&gt;&lt;span&gt; TxFsContext      : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x1d4&lt;/span&gt;&lt;span&gt; GdiTebBatch      : _GDI_TEB_BATCH
   &lt;/span&gt;+&lt;span&gt;0x6b4&lt;/span&gt;&lt;span&gt; RealClientId     : _CLIENT_ID
   &lt;/span&gt;+&lt;span&gt;0x6bc&lt;/span&gt;&lt;span&gt; GdiCachedProcessHandle : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x6c0&lt;/span&gt;&lt;span&gt; GdiClientPID     : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x6c4&lt;/span&gt;&lt;span&gt; GdiClientTID     : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x6c8&lt;/span&gt;&lt;span&gt; GdiThreadLocalInfo : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x6cc&lt;/span&gt; Win32ClientInfo  : [&lt;span&gt;62&lt;/span&gt;&lt;span&gt;] Uint4B
   &lt;/span&gt;+&lt;span&gt;0x7c4&lt;/span&gt; glDispatchTable  : [&lt;span&gt;233&lt;/span&gt;&lt;span&gt;] Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xb68&lt;/span&gt; glReserved1      : [&lt;span&gt;29&lt;/span&gt;&lt;span&gt;] Uint4B
   &lt;/span&gt;+&lt;span&gt;0xbdc&lt;/span&gt;&lt;span&gt; glReserved2      : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xbe0&lt;/span&gt;&lt;span&gt; glSectionInfo    : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xbe4&lt;/span&gt;&lt;span&gt; glSection        : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xbe8&lt;/span&gt;&lt;span&gt; glTable          : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xbec&lt;/span&gt;&lt;span&gt; glCurrentRC      : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xbf0&lt;/span&gt;&lt;span&gt; glContext        : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xbf4&lt;/span&gt;&lt;span&gt; LastStatusValue  : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xbf8&lt;/span&gt;&lt;span&gt; StaticUnicodeString : _UNICODE_STRING
   &lt;/span&gt;+&lt;span&gt;0xc00&lt;/span&gt; StaticUnicodeBuffer : [&lt;span&gt;261&lt;/span&gt;&lt;span&gt;] Wchar
   &lt;/span&gt;+&lt;span&gt;0xe0c&lt;/span&gt;&lt;span&gt; DeallocationStack : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xe10&lt;/span&gt; TlsSlots         : [&lt;span&gt;64&lt;/span&gt;&lt;span&gt;] Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf10&lt;/span&gt;&lt;span&gt; TlsLinks         : _LIST_ENTRY
   &lt;/span&gt;+&lt;span&gt;0xf18&lt;/span&gt;&lt;span&gt; Vdm              : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf1c&lt;/span&gt;&lt;span&gt; ReservedForNtRpc : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf20&lt;/span&gt; DbgSsReserved    : [&lt;span&gt;2&lt;/span&gt;&lt;span&gt;] Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf28&lt;/span&gt;&lt;span&gt; HardErrorMode    : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xf2c&lt;/span&gt; Instrumentation  : [&lt;span&gt;9&lt;/span&gt;&lt;span&gt;] Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf50&lt;/span&gt;&lt;span&gt; ActivityId       : _GUID
   &lt;/span&gt;+&lt;span&gt;0xf60&lt;/span&gt;&lt;span&gt; SubProcessTag    : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf64&lt;/span&gt;&lt;span&gt; EtwLocalData     : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf68&lt;/span&gt;&lt;span&gt; EtwTraceData     : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf6c&lt;/span&gt;&lt;span&gt; WinSockData      : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf70&lt;/span&gt;&lt;span&gt; GdiBatchCount    : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xf74&lt;/span&gt;&lt;span&gt; CurrentIdealProcessor : _PROCESSOR_NUMBER
   &lt;/span&gt;+&lt;span&gt;0xf74&lt;/span&gt;&lt;span&gt; IdealProcessorValue : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xf74&lt;/span&gt;&lt;span&gt; ReservedPad0     : UChar
   &lt;/span&gt;+&lt;span&gt;0xf75&lt;/span&gt;&lt;span&gt; ReservedPad1     : UChar
   &lt;/span&gt;+&lt;span&gt;0xf76&lt;/span&gt;&lt;span&gt; ReservedPad2     : UChar
   &lt;/span&gt;+&lt;span&gt;0xf77&lt;/span&gt;&lt;span&gt; IdealProcessor   : UChar
   &lt;/span&gt;+&lt;span&gt;0xf78&lt;/span&gt;&lt;span&gt; GuaranteedStackBytes : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xf7c&lt;/span&gt;&lt;span&gt; ReservedForPerf  : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf80&lt;/span&gt;&lt;span&gt; ReservedForOle   : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf84&lt;/span&gt;&lt;span&gt; WaitingOnLoaderLock : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xf88&lt;/span&gt;&lt;span&gt; SavedPriorityState : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf8c&lt;/span&gt;&lt;span&gt; SoftPatchPtr1    : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xf90&lt;/span&gt;&lt;span&gt; ThreadPoolData   : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf94&lt;/span&gt;&lt;span&gt; TlsExpansionSlots : Ptr32 Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xf98&lt;/span&gt;&lt;span&gt; MuiGeneration    : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xf9c&lt;/span&gt;&lt;span&gt; IsImpersonating  : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xfa0&lt;/span&gt;&lt;span&gt; NlsCache         : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xfa4&lt;/span&gt;&lt;span&gt; pShimData        : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xfa8&lt;/span&gt;&lt;span&gt; HeapVirtualAffinity : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xfac&lt;/span&gt;&lt;span&gt; CurrentTransactionHandle : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xfb0&lt;/span&gt;&lt;span&gt; ActiveFrame      : Ptr32 _TEB_ACTIVE_FRAME
   &lt;/span&gt;+&lt;span&gt;0xfb4&lt;/span&gt;&lt;span&gt; FlsData          : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xfb8&lt;/span&gt;&lt;span&gt; PreferredLanguages : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xfbc&lt;/span&gt;&lt;span&gt; UserPrefLanguages : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xfc0&lt;/span&gt;&lt;span&gt; MergedPrefLanguages : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xfc4&lt;/span&gt;&lt;span&gt; MuiImpersonation : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xfc8&lt;/span&gt;&lt;span&gt; CrossTebFlags    : Uint2B
   &lt;/span&gt;+&lt;span&gt;0xfc8&lt;/span&gt; SpareCrossTebBits : Pos &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;16&lt;/span&gt;&lt;span&gt; Bits
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt;&lt;span&gt; SameTebFlags     : Uint2B
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; SafeThunkCall    : Pos &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; InDebugPrint     : Pos &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; HasFiberData     : Pos &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; SkipThreadAttach : Pos &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; WerInShipAssertCode : Pos &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; RanProcessInit   : Pos &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; ClonedThread     : Pos &lt;span&gt;6&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; SuppressDebugMsg : Pos &lt;span&gt;7&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; DisableUserStackWalk : Pos &lt;span&gt;8&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; RtlExceptionAttached : Pos &lt;span&gt;9&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; InitialThread    : Pos &lt;span&gt;10&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt; Bit
   &lt;/span&gt;+&lt;span&gt;0xfca&lt;/span&gt; SpareSameTebBits : Pos &lt;span&gt;11&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt; Bits
   &lt;/span&gt;+&lt;span&gt;0xfcc&lt;/span&gt;&lt;span&gt; TxnScopeEnterCallback : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xfd0&lt;/span&gt;&lt;span&gt; TxnScopeExitCallback : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xfd4&lt;/span&gt;&lt;span&gt; TxnScopeContext  : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0xfd8&lt;/span&gt;&lt;span&gt; LockCount        : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xfdc&lt;/span&gt;&lt;span&gt; SpareUlong0      : Uint4B
   &lt;/span&gt;+&lt;span&gt;0xfe0&lt;/span&gt; ResourceRetValue : Ptr32 Void
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据上图我们首先看注释的成员.因为成员很多.只讲解重要的.其余成员可以通过Google获取.&lt;/p&gt;
&lt;p&gt;_NT_TIB结构.这个结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906190207930-376459810.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;保存了栈从哪里开始到哪里结束.版本信息.等等.&lt;/p&gt;
&lt;p&gt;下面的是 保存进程ID跟线程ID的结构体. 我们看一下.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906190312162-269020599.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;进程ID是 1db8 线程ID是 0x394&lt;/p&gt;
&lt;p&gt;上面的命令windbg可以通过点击. 我是点击的所以命令很乏在. dx....... xxxx&lt;/p&gt;
&lt;p&gt;我们直接可以使用 dt _CLIENT_ID 地址 来看.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906190456285-1491575070.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;TEB首地址我们知道是 fs:[0x18] 所以我们db一下看看地址是什么.下面会使用这个地址.&lt;/p&gt;
&lt;p&gt;上面我们知道了  _CLIENT_ID结构体了.那么我们就可以自己不适用API 然后获取进程PID了跟线程PID了.&lt;/p&gt;
&lt;h2&gt;四丶使用代码实现自己的获取进程PID跟线程PID函数.&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;DWORD GetMyCurrentProcessPid32()
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取自己进程的PID&lt;/span&gt;

    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    1.使用API 获取TEB首地址  NtCurrentTeb(); 
    2.使用汇编获取
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;API 获取TEB的地址
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;DWORD dwTebAddress = (DWORD)NtCurrentTeb();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 64是 GS:[30]  模块首地址

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dwTebAddress = dwTebAddress + 0x20; 

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;DWORD dwPid = *(DWORD *)dwTebAddress;&lt;/span&gt;
&lt;span&gt;
    DWORD dwPid &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;    __asm
    {
        mov eax, fs:[&lt;/span&gt;&lt;span&gt;0x18&lt;/span&gt;&lt;span&gt;]
        add eax, &lt;/span&gt;&lt;span&gt;0x20          //加0x20是获取进程pid + 0x24则是获取线程PID&lt;/span&gt;&lt;span&gt;
        mov eax,[eax]
        mov dwPid,eax
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dwPid;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果懂了上面的结构.那么上面的代码就很好理解了. 上面有两种方法实现.一个是指针实现.也就是通过NtCurrentTeb()获取TEB结构.自己加偏移取内容得出进程PID&lt;/p&gt;
&lt;p&gt;另一种就是汇编了.&lt;/p&gt;
&lt;p&gt;汇编很简单.&lt;/p&gt;
&lt;p&gt;　　1.首先获取TEB结构首地址&lt;/p&gt;
&lt;p&gt;　　2.TEB结构首地址 + 0x20偏移 获取到的是 _CLIENT_ID结构.&lt;/p&gt;
&lt;p&gt;　　3.因为是结构本身.所以对 [eax] 也就是对eax取内容.得出进程PID&lt;/p&gt;
&lt;p&gt;　　4.将进程PID赋值给变量.然后下方返回.&lt;/p&gt;
&lt;p&gt;实验代码截图:&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906191259168-419546893.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完全可以获取出来.&lt;/p&gt;
&lt;p&gt;上面实现自己的API只是对TEB结构有一个认识.知道可以做什么.&lt;/p&gt;
&lt;p&gt;下面贴一份64位程序获取自己的进程PID&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;LONGLONG GetMyCurrentProcessPid64()
{
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    1.使用API 获取TEB首地址  NtCurrentTeb();
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;API 获取TEB的地址&lt;/span&gt;
    __int64 dwTebAddress = (__int64)NtCurrentTeb();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; GS:[30]  模块首地址&lt;/span&gt;
&lt;span&gt;
    dwTebAddress &lt;/span&gt;= dwTebAddress + &lt;span&gt;0x40&lt;/span&gt;&lt;span&gt;;              //64位改成40偏移了.具体偏移自己使用Windbg查看64的环境下的TEB结构.不多解释.

    __int64 dwPid &lt;/span&gt;= *(__int64 *&lt;span&gt;)dwTebAddress;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dwPid;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;五丶PEB结构&lt;/h2&gt;
&lt;p&gt;　　其实最主要的是我们要将的PEB结构.&lt;/p&gt;
&lt;p&gt;　　PEB就是进程环境块.保存了进程的一些列细心.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906191419283-1471817392.png&quot; alt=&quot;&quot;/&gt;  如果是32位情况下则是+0x30&lt;/p&gt;
&lt;p&gt;我们看下PEB结构中的信息&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[+&lt;span&gt;0x000&lt;/span&gt;] InheritedAddressSpace : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x001&lt;/span&gt;] ReadImageFileExecOptions : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x002&lt;/span&gt;] BeingDebugged    : &lt;span&gt;0x1&lt;/span&gt; [Type: unsigned &lt;span&gt;char&lt;/span&gt;]           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一个char类型.为1表示调试状态.为0表示没有调试.可以用于反调试. API也是从这里获取的标志&lt;/span&gt;
    [+&lt;span&gt;0x003&lt;/span&gt;] BitField         : &lt;span&gt;0x8&lt;/span&gt; [Type: unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x003&lt;/span&gt; ( &lt;span&gt;0&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;)] ImageUsesLargePages : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x003&lt;/span&gt; ( &lt;span&gt;1&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;)] IsProtectedProcess : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x003&lt;/span&gt; ( &lt;span&gt;2&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;)] IsLegacyProcess  : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x003&lt;/span&gt; ( &lt;span&gt;3&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;)] IsImageDynamicallyRelocated : &lt;span&gt;0x1&lt;/span&gt; [Type: unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x003&lt;/span&gt; ( &lt;span&gt;4&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;)] SkipPatchingUser32Forwarders : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x003&lt;/span&gt; ( &lt;span&gt;7&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;)] SpareBits        : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x004&lt;/span&gt;] Mutant           : &lt;span&gt;0xffffffff&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x008&lt;/span&gt;] ImageBaseAddress : &lt;span&gt;0x11d0000&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x00c&lt;/span&gt;] Ldr              : &lt;span&gt;0x77190200&lt;/span&gt; [Type: _PEB_LDR_DATA *]   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于模块隐藏的结构体&lt;/span&gt;
    [+&lt;span&gt;0x010&lt;/span&gt;] ProcessParameters : &lt;span&gt;0x7216d0&lt;/span&gt; [Type: _RTL_USER_PROCESS_PARAMETERS *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x014&lt;/span&gt;] SubSystemData    : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x018&lt;/span&gt;] ProcessHeap      : &lt;span&gt;0x720000&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x01c&lt;/span&gt;] FastPebLock      : &lt;span&gt;0x77192100&lt;/span&gt; [Type: _RTL_CRITICAL_SECTION *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x020&lt;/span&gt;] AtlThunkSListPtr : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x024&lt;/span&gt;] IFEOKey          : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x028&lt;/span&gt;] CrossProcessFlags : &lt;span&gt;0x2&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x028&lt;/span&gt; ( &lt;span&gt;0&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;)] ProcessInJob     : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x028&lt;/span&gt; ( &lt;span&gt;1&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;)] ProcessInitializing : &lt;span&gt;0x1&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x028&lt;/span&gt; ( &lt;span&gt;2&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;)] ProcessUsingVEH  : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x028&lt;/span&gt; ( &lt;span&gt;3&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;)] ProcessUsingVCH  : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x028&lt;/span&gt; ( &lt;span&gt;4&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;)] ProcessUsingFTH  : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x028&lt;/span&gt; (&lt;span&gt;31&lt;/span&gt;: &lt;span&gt;5&lt;/span&gt;)] ReservedBits0    : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x02c&lt;/span&gt;] KernelCallbackTable : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x02c&lt;/span&gt;] UserSharedInfoPtr : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x030&lt;/span&gt;] SystemReserved   [Type: unsigned &lt;span&gt;long&lt;/span&gt; [&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]]
    [&lt;/span&gt;+&lt;span&gt;0x034&lt;/span&gt;] AtlThunkSListPtr32 : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x038&lt;/span&gt;] ApiSetMap        : &lt;span&gt;0x40000&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x03c&lt;/span&gt;] TlsExpansionCounter : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x040&lt;/span&gt;] TlsBitmap        : &lt;span&gt;0x77194250&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x044&lt;/span&gt;] TlsBitmapBits    [Type: unsigned &lt;span&gt;long&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]]
    [&lt;/span&gt;+&lt;span&gt;0x04c&lt;/span&gt;] ReadOnlySharedMemoryBase : &lt;span&gt;0x7efe0000&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x050&lt;/span&gt;] HotpatchInformation : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x054&lt;/span&gt;] ReadOnlyStaticServerData : &lt;span&gt;0x7efe0a90&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; * *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x058&lt;/span&gt;] AnsiCodePageData : &lt;span&gt;0x7efa0000&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x05c&lt;/span&gt;] OemCodePageData  : &lt;span&gt;0x7efa0000&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x060&lt;/span&gt;] UnicodeCaseTableData : &lt;span&gt;0x7efd0028&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x064&lt;/span&gt;] NumberOfProcessors : &lt;span&gt;0x8&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x068&lt;/span&gt;] NtGlobalFlag     : &lt;span&gt;0x70&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x070&lt;/span&gt;] CriticalSectionTimeout : {-&lt;span&gt;25920000000000&lt;/span&gt;&lt;span&gt;} [Type: _LARGE_INTEGER]
    [&lt;/span&gt;+&lt;span&gt;0x078&lt;/span&gt;] HeapSegmentReserve : &lt;span&gt;0x100000&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x07c&lt;/span&gt;] HeapSegmentCommit : &lt;span&gt;0x2000&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x080&lt;/span&gt;] HeapDeCommitTotalFreeThreshold : &lt;span&gt;0x10000&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x084&lt;/span&gt;] HeapDeCommitFreeBlockThreshold : &lt;span&gt;0x1000&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x088&lt;/span&gt;] NumberOfHeaps    : &lt;span&gt;0x1&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x08c&lt;/span&gt;] MaximumNumberOfHeaps : &lt;span&gt;0x10&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x090&lt;/span&gt;] ProcessHeaps     : &lt;span&gt;0x77194760&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; * *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x094&lt;/span&gt;] GdiSharedHandleTable : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x098&lt;/span&gt;] ProcessStarterHelper : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x09c&lt;/span&gt;] GdiDCAttributeList : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0a0&lt;/span&gt;] LoaderLock       : &lt;span&gt;0x771920c0&lt;/span&gt; [Type: _RTL_CRITICAL_SECTION *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0a4&lt;/span&gt;] OSMajorVersion   : &lt;span&gt;0x6&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0a8&lt;/span&gt;] OSMinorVersion   : &lt;span&gt;0x1&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0ac&lt;/span&gt;] OSBuildNumber    : &lt;span&gt;0x1db1&lt;/span&gt; [Type: unsigned &lt;span&gt;short&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0ae&lt;/span&gt;] OSCSDVersion     : &lt;span&gt;0x100&lt;/span&gt; [Type: unsigned &lt;span&gt;short&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0b0&lt;/span&gt;] OSPlatformId     : &lt;span&gt;0x2&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0b4&lt;/span&gt;] ImageSubsystem   : &lt;span&gt;0x3&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0b8&lt;/span&gt;] ImageSubsystemMajorVersion : &lt;span&gt;0x6&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0bc&lt;/span&gt;] ImageSubsystemMinorVersion : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0c0&lt;/span&gt;] ActiveProcessAffinityMask : &lt;span&gt;0xff&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x0c4&lt;/span&gt;] GdiHandleBuffer  [Type: unsigned &lt;span&gt;long&lt;/span&gt; [&lt;span&gt;34&lt;/span&gt;&lt;span&gt;]]
    [&lt;/span&gt;+&lt;span&gt;0x14c&lt;/span&gt;] PostProcessInitRoutine : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; (*&lt;span&gt;)()]
    [&lt;/span&gt;+&lt;span&gt;0x150&lt;/span&gt;] TlsExpansionBitmap : &lt;span&gt;0x77194248&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x154&lt;/span&gt;] TlsExpansionBitmapBits [Type: unsigned &lt;span&gt;long&lt;/span&gt; [&lt;span&gt;32&lt;/span&gt;&lt;span&gt;]]
    [&lt;/span&gt;+&lt;span&gt;0x1d4&lt;/span&gt;] SessionId        : &lt;span&gt;0x1&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x1d8&lt;/span&gt;] AppCompatFlags   : {&lt;span&gt;0x0&lt;/span&gt;&lt;span&gt;} [Type: _ULARGE_INTEGER]
    [&lt;/span&gt;+&lt;span&gt;0x1e0&lt;/span&gt;] AppCompatFlagsUser : {&lt;span&gt;0x0&lt;/span&gt;&lt;span&gt;} [Type: _ULARGE_INTEGER]
    [&lt;/span&gt;+&lt;span&gt;0x1e8&lt;/span&gt;] pShimData        : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x1ec&lt;/span&gt;] AppCompatInfo    : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x1f0&lt;/span&gt;] CSDVersion       : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Service Pack 1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; [Type: _UNICODE_STRING]
    [&lt;/span&gt;+&lt;span&gt;0x1f8&lt;/span&gt;] ActivationContextData : &lt;span&gt;0x60000&lt;/span&gt; [Type: _ACTIVATION_CONTEXT_DATA *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x1fc&lt;/span&gt;] ProcessAssemblyStorageMap : &lt;span&gt;0x0&lt;/span&gt; [Type: _ASSEMBLY_STORAGE_MAP *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x200&lt;/span&gt;] SystemDefaultActivationContextData : &lt;span&gt;0x50000&lt;/span&gt; [Type: _ACTIVATION_CONTEXT_DATA *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x204&lt;/span&gt;] SystemAssemblyStorageMap : &lt;span&gt;0x0&lt;/span&gt; [Type: _ASSEMBLY_STORAGE_MAP *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x208&lt;/span&gt;] MinimumStackCommit : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x20c&lt;/span&gt;] FlsCallback      : &lt;span&gt;0x0&lt;/span&gt; [Type: _FLS_CALLBACK_INFO *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x210&lt;/span&gt;&lt;span&gt;] FlsListHead      [Type: _LIST_ENTRY]
    [&lt;/span&gt;+&lt;span&gt;0x218&lt;/span&gt;] FlsBitmap        : &lt;span&gt;0x77194240&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x21c&lt;/span&gt;] FlsBitmapBits    [Type: unsigned &lt;span&gt;long&lt;/span&gt; [&lt;span&gt;4&lt;/span&gt;&lt;span&gt;]]
    [&lt;/span&gt;+&lt;span&gt;0x22c&lt;/span&gt;] FlsHighIndex     : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x230&lt;/span&gt;] WerRegistrationData : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x234&lt;/span&gt;] WerShipAssertPtr : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x238&lt;/span&gt;] pContextData     : &lt;span&gt;0x70000&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x23c&lt;/span&gt;] pImageHeaderHash : &lt;span&gt;0x0&lt;/span&gt; [Type: &lt;span&gt;void&lt;/span&gt; *&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x240&lt;/span&gt;] TracingFlags     : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x240&lt;/span&gt; ( &lt;span&gt;0&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;)] HeapTracingEnabled : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x240&lt;/span&gt; ( &lt;span&gt;1&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;)] CritSecTracingEnabled : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt;]
    [&lt;/span&gt;+&lt;span&gt;0x240&lt;/span&gt; (&lt;span&gt;31&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;)] SpareTracingBits : &lt;span&gt;0x0&lt;/span&gt; [Type: unsigned &lt;span&gt;long&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个结构中我们简单了解一下. &lt;/p&gt;
&lt;p&gt;第一个注释的地方.那个地方可以用于反调试. 如果我们程序是调试状态.那么这个位置则为1.否则正常状态启动则为0&lt;/p&gt;
&lt;p&gt;第二个是我们用于模块隐藏的一个结构.  执向一个 _PEB_LDR_DATA的结构&lt;/p&gt;
&lt;p&gt;我们看下这个结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906192105270-1078101303.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个结构. +0c偏移 看名字.是一个保存模块列表信息的一个结构. 其中执向的是一个_LIST_ENTRY这是一个双向链表. 其实真正执向的结构不是这个.&lt;/p&gt;
&lt;p&gt;而是: _LDR_DATA_TABLE_ENTRY 结构.而这个结构MSDN也说了.但是结构成员是不缺定的.所以我们继续使用Windbg查看就可以得出这个结构真实的面目.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906192453284-1706613727.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们看到这个结构就会发现一个新天地.这个结构中保存了模块信息. 其中 + 0偏移 + 8 偏移就是上面的双向链表.只不过windows把下面的成员给我们隐藏了.&lt;/p&gt;

&lt;h2&gt;六丶_LDR_DATA_TABLE_ENTRY 结构成员解析&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;DR_DATA_TABLE_ENTRY
ntdll&lt;/span&gt;!&lt;span&gt;_LDR_DATA_TABLE_ENTRY
   &lt;/span&gt;+&lt;span&gt;0x000&lt;/span&gt;&lt;span&gt; InLoadOrderLinks : _LIST_ENTRY                         双向链表头
   &lt;/span&gt;+&lt;span&gt;0x008&lt;/span&gt;&lt;span&gt; InMemoryOrderLinks : _LIST_ENTRY                       双向链表尾
   &lt;/span&gt;+&lt;span&gt;0x010&lt;/span&gt;&lt;span&gt; InInitializationOrderLinks : _LIST_ENTRY
   &lt;/span&gt;+&lt;span&gt;0x018&lt;/span&gt;&lt;span&gt; DllBase          : Ptr32 Void                          dll模块基址.
   &lt;/span&gt;+&lt;span&gt;0x01c&lt;/span&gt;&lt;span&gt; EntryPoint       : Ptr32 Void                          dll模块入口点
   &lt;/span&gt;+&lt;span&gt;0x020&lt;/span&gt;&lt;span&gt; SizeOfImage      : Uint4B                              镜像大小
   &lt;/span&gt;+&lt;span&gt;0x024&lt;/span&gt;&lt;span&gt; FullDllName      : _UNICODE_STRING    UNICODE_STRING结构的模块路径
   &lt;/span&gt;+&lt;span&gt;0x02c&lt;/span&gt;&lt;span&gt; BaseDllName      : _UNICODE_STRING
   &lt;/span&gt;+&lt;span&gt;0x034&lt;/span&gt;&lt;span&gt; Flags            : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x038&lt;/span&gt;&lt;span&gt; LoadCount        : Uint2B
   &lt;/span&gt;+&lt;span&gt;0x03a&lt;/span&gt;&lt;span&gt; TlsIndex         : Uint2B
   &lt;/span&gt;+&lt;span&gt;0x03c&lt;/span&gt;&lt;span&gt; HashLinks        : _LIST_ENTRY
   &lt;/span&gt;+&lt;span&gt;0x03c&lt;/span&gt;&lt;span&gt; SectionPointer   : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x040&lt;/span&gt;&lt;span&gt; CheckSum         : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x044&lt;/span&gt;&lt;span&gt; TimeDateStamp    : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x044&lt;/span&gt;&lt;span&gt; LoadedImports    : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x048&lt;/span&gt;&lt;span&gt; EntryPointActivationContext : Ptr32 _ACTIVATION_CONTEXT
   &lt;/span&gt;+&lt;span&gt;0x04c&lt;/span&gt;&lt;span&gt; PatchInformation : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x050&lt;/span&gt;&lt;span&gt; ForwarderLinks   : _LIST_ENTRY
   &lt;/span&gt;+&lt;span&gt;0x058&lt;/span&gt;&lt;span&gt; ServiceTagLinks  : _LIST_ENTRY
   &lt;/span&gt;+&lt;span&gt;0x060&lt;/span&gt;&lt;span&gt; StaticLinks      : _LIST_ENTRY
   &lt;/span&gt;+&lt;span&gt;0x068&lt;/span&gt;&lt;span&gt; ContextInformation : Ptr32 Void
   &lt;/span&gt;+&lt;span&gt;0x06c&lt;/span&gt;&lt;span&gt; OriginalBase     : Uint4B
   &lt;/span&gt;+&lt;span&gt;0x070&lt;/span&gt; LoadTime         : _LARGE_INTEGER
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;知道上面的结构.那么我们要实现模块隐藏就很简单了.&lt;/p&gt;
&lt;p&gt;思路:&lt;/p&gt;
&lt;p&gt;　　我们获取到了这个结构.因为是链表.可以遍历链表. 根据DllBase判断 你的模块基址跟这个模块基址是否一样.如果一样那么我们就断开链表&lt;/p&gt;
&lt;p&gt;也就是把当前模块的链表头跟尾巴.执向下一个. 保证没有链表执向即可.&lt;/p&gt;
&lt;p&gt;实现一个模块隐藏很简单.难的就是上面的结构.我们必须要熟悉.偏移要知道.我们才可以做到模块隐藏.&lt;/p&gt;
&lt;p&gt;具体代码我会放到下面. 然后讲解代码.&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;Windows.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdlib.h&amp;gt;&lt;span&gt;

DWORD g_isHide &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; _UNICODE_STRING
{
    USHORT Length;
    USHORT MaximumLength;
    PWSTR  Buffer;
} UNICODE_STRING, &lt;/span&gt;*&lt;span&gt;PUNICODE_STRING;

typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; _PEB_LDR_DATA {
    ULONG                   Length;
    BOOLEAN                 Initialized;
    PVOID                   SsHandle;
    LIST_ENTRY              InLoadOrderModuleList;
    LIST_ENTRY              InMemoryOrderModuleList;
    LIST_ENTRY              InInitializationOrderModuleList;
} PEB_LDR_DATA, &lt;/span&gt;*&lt;span&gt;PPEB_LDR_DATA;

typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; _LDR_MODULE
{
    LIST_ENTRY          InLoadOrderModuleList;   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;+0x00&lt;/span&gt;
    LIST_ENTRY          InMemoryOrderModuleList; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;+0x08  &lt;/span&gt;
    LIST_ENTRY          InInitializationOrderModuleList; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;+0x10&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt;*               BaseAddress;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;+0x18&lt;/span&gt;
    &lt;span&gt;void&lt;/span&gt;*               EntryPoint;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;+0x1c&lt;/span&gt;
&lt;span&gt;    ULONG               SizeOfImage;
    UNICODE_STRING      FullDllName;
    UNICODE_STRING      BaseDllName;
    ULONG               Flags;
    SHORT               LoadCount;
    SHORT               TlsIndex;
    HANDLE              SectionHandle;
    ULONG               CheckSum;
    ULONG               TimeDateStamp;
} LDR_MODULE, &lt;/span&gt;*&lt;span&gt;PLDR_MODULE;
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; HideDll()　　　　　　　　　　　　　　　　　　　　　　　　　　//这个函数是主要的
{
    HMODULE hMod &lt;/span&gt;= ::GetModuleHandle(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ntdll.dll&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    PLIST_ENTRY Head, Cur;
    PPEB_LDR_DATA ldr;
    PLDR_MODULE ldm;
    __asm
    {
        mov eax, fs:[&lt;/span&gt;&lt;span&gt;0x30&lt;/span&gt;&lt;span&gt;]　　　　　　　　　　　　　　　　　　//获取PEB结构
        mov ecx, [eax &lt;/span&gt;+ &lt;span&gt;0x0c&lt;/span&gt;] &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Ldr                     //获取_PEB_LDR_DATA结构&lt;/span&gt;
&lt;span&gt;        mov ldr, ecx
    }
    Head &lt;/span&gt;= &amp;amp;(ldr-&amp;gt;&lt;span&gt;InLoadOrderModuleList);               //获取模块链表地址
    Cur &lt;/span&gt;= Head-&amp;gt;&lt;span&gt;Flink;                                  //获取指向的结点.
    &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;span&gt;
    {
        ldm &lt;/span&gt;=&lt;span&gt; CONTAINING_RECORD(Cur, LDR_MODULE, InLoadOrderModuleList); //获取 _LDR_DATA_TABLE_ENTRY结构体地址
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf(&quot;EntryPoint [0x%X]\n&quot;,ldm-&amp;gt;BaseAddress);&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (hMod == ldm-&amp;gt;&lt;span&gt;BaseAddress)                                    //判断要隐藏的DLL基址跟结构中的基址是否一样
        {
            g_isHide &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;                                                //如果进入.则标志置为1,表示已经开始进行隐藏了.
            ldm&lt;/span&gt;-&amp;gt;InLoadOrderModuleList.Blink-&amp;gt;Flink =                    //双向链表. 断开链表&lt;span&gt;
                ldm&lt;/span&gt;-&amp;gt;&lt;span&gt;InLoadOrderModuleList.Flink;
            ldm&lt;/span&gt;-&amp;gt;InLoadOrderModuleList.Flink-&amp;gt;Blink =&lt;span&gt;
                ldm&lt;/span&gt;-&amp;gt;&lt;span&gt;InLoadOrderModuleList.Blink;
            ldm&lt;/span&gt;-&amp;gt;InInitializationOrderModuleList.Blink-&amp;gt;Flink =&lt;span&gt;
                ldm&lt;/span&gt;-&amp;gt;&lt;span&gt;InInitializationOrderModuleList.Flink;
            ldm&lt;/span&gt;-&amp;gt;InInitializationOrderModuleList.Flink-&amp;gt;Blink =&lt;span&gt;
                ldm&lt;/span&gt;-&amp;gt;&lt;span&gt;InInitializationOrderModuleList.Blink;
            ldm&lt;/span&gt;-&amp;gt;InMemoryOrderModuleList.Blink-&amp;gt;Flink =&lt;span&gt;
                ldm&lt;/span&gt;-&amp;gt;&lt;span&gt;InMemoryOrderModuleList.Flink;
            ldm&lt;/span&gt;-&amp;gt;InMemoryOrderModuleList.Flink-&amp;gt;Blink =&lt;span&gt;
                ldm&lt;/span&gt;-&amp;gt;&lt;span&gt;InMemoryOrderModuleList.Blink;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
        Cur &lt;/span&gt;= Cur-&amp;gt;&lt;span&gt;Flink;
    } &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (Head !=&lt;span&gt; Cur);
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{

    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;按键开始隐藏\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    getchar();
    HideDll();

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (g_isHide == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;没有成功隐藏\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        system(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }

    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成功隐藏\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    system(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pause&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面是我们隐藏ntdll.看一下没有隐藏的时候&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906230905997-632309741.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;隐藏一下ntdll看下.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201809/1197364-20180906230830301-1762992277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 06 Sep 2018 15:09:00 +0000</pubDate>
<dc:creator>iBinary</dc:creator>
<og:description>Win32之隐藏DLL隐藏模块技术 这一讲涉及到windows底层技术.跟汇编内容. 我们才可以实现模块隐藏(也称为DLL隐藏) 一丶API反汇编勾引兴趣 我们都用过Windows的进程跟线程API</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iBinary/p/9601860.html</dc:identifier>
</item>
<item>
<title>机器学习之支持向量机—SVM原理代码实现 - w_x_w1985</title>
<link>http://www.cnblogs.com/further-further-further/p/9596898.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/further-further-further/p/9596898.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;Created on Tue Sep  4 16:58:16 2018
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;支持向量机代码实现
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;SMO(Sequential Minimal Optimization)最小序列优化
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;@author: weixw
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;核转换函数（一个特征空间映射到另一个特征空间，低维空间映射到高维空间）&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;高维空间解决线性问题，低维空间解决非线性问题&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;线性内核 = 原始数据矩阵（100*2）与原始数据第一行矩阵转秩乘积（2*1） =&amp;gt;（100*1）&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;非线性内核公式：k(x,y) = exp(-||x - y||**2/2*(e**2))&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;1.原始数据每一行与原始数据第一行作差， &lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2.平方   &lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; kernelTrans(dataMat, rowDataMat, kTup):
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;     m,n=&lt;span&gt;np.shape(dataMat)
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;初始化核矩阵 m*1&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;     K = np.mat(np.zeros((m,1&lt;span&gt;)))
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; kTup[0] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;线性核&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;         K = dataMat*&lt;span&gt;rowDataMat.T
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;     &lt;span&gt;elif&lt;/span&gt; kTup[0] == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rbf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;#&lt;/span&gt;&lt;span&gt;非线性核&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(m):
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;xi - xj&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;             deltaRow = dataMat[j,:] -&lt;span&gt; rowDataMat
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;             K[j] = deltaRow*&lt;span&gt;deltaRow.T
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;1*m m*1 =&amp;gt; 1*1&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;         K = np.exp(K/(-2*kTup[1]**2&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;: &lt;span&gt;raise&lt;/span&gt; NameError(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Houston We Have a Problem -- That Kernel is not recognized&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; K
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义数据结构体，用于缓存，提高运行速度&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; optStruct:
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, dataSet, labelSet, C, toler, kTup):
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         self.dataMat = np.mat(dataSet) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;原始数据，转换成m*n矩阵&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;         self.labelMat = np.mat(labelSet).T &lt;span&gt;#&lt;/span&gt;&lt;span&gt;标签数据 m*1矩阵&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;         self.C = C &lt;span&gt;#&lt;/span&gt;&lt;span&gt;惩罚参数，C越大，容忍噪声度小，需要优化；反之，容忍噪声度高，不需要优化；&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;                    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;所有的拉格朗日乘子都被限制在了以C为边长的矩形里&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;         self.toler = toler &lt;span&gt;#&lt;/span&gt;&lt;span&gt;容忍度&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;         self.m = np.shape(self.dataMat)[0] &lt;span&gt;#&lt;/span&gt;&lt;span&gt;原始数据行长度&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         self.alphas = np.mat(np.zeros((self.m,1))) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; alpha系数，m*1矩阵&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         self.b = 0 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;偏置&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;         self.eCache = np.mat(np.zeros((self.m,2))) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存原始数据每行的预测值&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;         self.K = np.mat(np.zeros((self.m,self.m))) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 核转换矩阵 m*m&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(self.m):
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;             self.K[:,i] =&lt;span&gt; kernelTrans(self.dataMat, self.dataMat[i,:], kTup)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             
&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算原始数据第k项对应的预测误差  1*m m*1 =&amp;gt;1*1  &lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;oS：结构数据&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;k： 原始数据行索引           &lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; calEk(oS, k):
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;f(x) = w*x + b &lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;     fXk = float(np.multiply(oS.alphas,oS.labelMat).T*oS.K[:,k] +&lt;span&gt; oS.b)
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;     Ek = fXk -&lt;span&gt; float(oS.labelMat[k])
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Ek
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在alpha有改变都要更新缓存&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; updateEk(oS, k):
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     Ek =&lt;span&gt; calEk(oS, k)
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;     oS.eCache[k] = [1&lt;span&gt;, Ek]
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;     
&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;第一次通过selectJrand()随机选取j,之后选取与i对应预测误差最大的j（步长最大）&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; selectJ(i, oS, Ei):
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;初始化&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;     maxK = -1  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;误差最大时对应索引&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;     maxDeltaE = 0 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;最大误差&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;     Ej = 0 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; j索引对应预测误差&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;保存每一行的预测误差值 1相对于初始化为0的更改&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;     oS.eCache[i] = [1&lt;span&gt;,Ei]
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取数据缓存结构中非0的索引列表(先将矩阵第0列转化为数组)&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;     validEcacheList =&lt;span&gt; np.nonzero(oS.eCache[:,0].A)[0]
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;遍历索引列表，寻找最大误差对应索引&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; len(validEcacheList) &amp;gt; 1&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; validEcacheList:
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; k ==&lt;span&gt; i:
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;             Ek =&lt;span&gt; calEk(oS, k)
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             deltaE = abs(Ei -&lt;span&gt; Ek)
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(deltaE &amp;gt;&lt;span&gt; maxDeltaE):
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;                 maxK =&lt;span&gt; k
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 maxDeltaE =&lt;span&gt; deltaE
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                 Ej =&lt;span&gt; Ek
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; maxK, Ej
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;随机选取一个不等于i的j&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;         j =&lt;span&gt; selectJrand(i, oS.m)
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         Ej =&lt;span&gt; calEk(oS, j)
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; j,Ej
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; 
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;随机选取一个不等于i的索引          &lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; selectJrand(i, m):
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;     j =&lt;span&gt; i
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (j ==&lt;span&gt; i):
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;        j =&lt;span&gt; int(np.random.uniform(0, m))
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; j
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; 
&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;alpha范围剪辑&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; clipAlpha(aj, L, H):
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; aj &amp;gt;&lt;span&gt; H:
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;         aj =&lt;span&gt; H
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; aj &amp;lt;&lt;span&gt; L:
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         aj =&lt;span&gt; L
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; aj
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;从文件获取特征数据，标签数据&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; loadDataSet(fileName):
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     dataSet = []; labelSet =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     fr =&lt;span&gt; open(fileName)
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; fr.readlines():
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;分割&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;         lineArr = line.strip().split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;         dataSet.append([float(lineArr[0]), float(lineArr[1&lt;span&gt;])])
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;         labelSet.append(float(lineArr[2&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dataSet, labelSet
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; 
&lt;span&gt;116&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算 w 权重系数&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; calWs(alphas, dataSet, labelSet):
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;     dataMat =&lt;span&gt; np.mat(dataSet)
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;1*100 =&amp;gt; 100*1&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;     labelMat =&lt;span&gt; np.mat(labelSet).T
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;     m, n =&lt;span&gt; np.shape(dataMat)    
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     w = np.zeros((n, 1&lt;span&gt;))    
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(m):
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;         w += np.multiply(alphas[i]*&lt;span&gt;labelMat[i], dataMat[i,:].T)        
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; w
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算原始数据每一行alpha,b，保存到数据结构中，有变化及时更新       &lt;/span&gt;
&lt;span&gt;127&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; innerL(i, oS):
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算预测误差&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;     Ei =&lt;span&gt; calEk(oS, i)
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;选择第一个alpha，违背KKT条件2&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;正间隔，负间隔&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((oS.labelMat[i] * Ei &amp;lt; -oS.toler) &lt;span&gt;and&lt;/span&gt; (oS.alphas[i] &amp;lt; oS.C)) &lt;span&gt;or&lt;/span&gt; ((oS.labelMat[i] * Ei &amp;gt; oS.toler) &lt;span&gt;and&lt;/span&gt; (oS.alphas[i] &amp;gt;&lt;span&gt; 0)):
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;第一次随机选取不等于i的数据项，其后根据误差最大选取数据项&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;         j, Ej =&lt;span&gt; selectJ(i, oS, Ei)
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;初始化，开辟新的内存&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;         alphaIold =&lt;span&gt; oS.alphas[i].copy()
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;         alphaJold =&lt;span&gt; oS.alphas[j].copy()
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;通过 a1y1 + a2y2 = 常量&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;    0 &amp;lt;= a1,a2 &amp;lt;= C 求出L,H&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; oS.labelMat[i] !=&lt;span&gt; oS.labelMat[j]:
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;             L = max(0, oS.alphas[j] -&lt;span&gt; oS.alphas[i])
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;             H = min(oS.C, oS.C + oS.alphas[j] -&lt;span&gt; oS.alphas[i])
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;             L = max(0, oS.alphas[j] + oS.alphas[i] -&lt;span&gt; oS.C)
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;             H = min(oS.C, oS.alphas[j] +&lt;span&gt; oS.alphas[i])
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; L ==&lt;span&gt; H : 
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;L == H&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;内核分母 K11 + K22 - 2K12&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt;         eta = oS.K[i, i] + oS.K[j, j] - 2.0*&lt;span&gt;oS.K[i, j]
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; eta &amp;lt;=&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;eta &amp;lt;= 0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算第一个alpha j&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt;         oS.alphas[j] += oS.labelMat[j]*(Ei - Ej)/&lt;span&gt;eta
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;修正alpha j的范围&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;         oS.alphas[j] =&lt;span&gt; clipAlpha(oS.alphas[j], L, H)
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;alpha有改变，就需要更新缓存数据&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt; &lt;span&gt;        updateEk(oS, j)
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果优化后的alpha 与之前的alpha变化很小，则舍弃，并重新选择数据项的alpha&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (abs(oS.alphas[j] - alphaJold) &amp;lt; 0.00001&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j not moving enough, abandon it.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算alpha对的另一个alpha i&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ai_new*yi + aj_new*yj = 常量&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ai_old*yi + ai_old*yj = 常量 &lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 作差=&amp;gt; ai = ai_old + yi*yj*(aj_old - aj_new)&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;         oS.alphas[i] += oS.labelMat[j]*oS.labelMat[i]*(alphaJold -&lt;span&gt; oS.alphas[j])
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;alpha有改变，就需要更新缓存数据&lt;/span&gt;
&lt;span&gt;170&lt;/span&gt; &lt;span&gt;        updateEk(oS, i)
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;计算b1,b2&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; y(x) = w*x + b =&amp;gt; b = y(x) - w*x&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; w = aiyixi(i= 1-&amp;gt;N求和)&lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;b1_new = y1_new - (a1_new*y1*k11 + a2_new*y2*k21 + ai*yi*ki1(i = 3 -&amp;gt;N求和 常量))&lt;/span&gt;
&lt;span&gt;175&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;b1_old = y1_old - (a1_old*y1*k11 + a2_old*y2*k21 + ai*yi*ki1(i = 3 -&amp;gt;N求和 常量))&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;作差=&amp;gt; b1_new = b1_old + (y1_new - y1_old) - y1*k11*(a1_new - a1_old) - y2*k21*(a2_new - a2_old)&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; =&amp;gt; b1_new = b1_old + Ei - yi*(ai_new - ai_old)*kii - yj*(aj_new - aj_old)*kij      &lt;/span&gt;
&lt;span&gt;178&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;同样可推得 b2_new = b2_old + Ej - yi*(ai_new - ai_old)*kij - yj*(aj_new - aj_old)*kjj&lt;/span&gt;
&lt;span&gt;179&lt;/span&gt;         bi = oS.b - Ei - oS.labelMat[i]*(oS.alphas[i] - alphaIold)*oS.K[i,i] - oS.labelMat[j]*(oS.alphas[j] - alphaJold)*&lt;span&gt;oS.K[i,j]
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;         bj = oS.b - Ej - oS.labelMat[i]*(oS.alphas[i] - alphaIold)*oS.K[i,j] - oS.labelMat[j]*(oS.alphas[j] - alphaJold)*&lt;span&gt;oS.K[j,j]
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;首选alpha i，相对alpha j 更准确&lt;/span&gt;
&lt;span&gt;182&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (0 &amp;lt; oS.alphas[i]) &lt;span&gt;and&lt;/span&gt; (oS.alphas[i] &amp;lt;&lt;span&gt; oS.C):
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;             oS.b =&lt;span&gt; bi
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt; (0 &amp;lt; oS.alphas[j]) &lt;span&gt;and&lt;/span&gt; (oS.alphas[j] &amp;lt;&lt;span&gt; oS.C):
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;             oS.b =&lt;span&gt; bj
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;             oS.b = (bi + bj)/2.0
&lt;span&gt;188&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; 1
&lt;span&gt;189&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;     
&lt;span&gt;192&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;完整SMO核心算法，包含线性核核非线性核，返回alpha,b&lt;/span&gt;
&lt;span&gt;193&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;dataSet 原始特征数据&lt;/span&gt;
&lt;span&gt;194&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;labelSet 标签数据&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;C 凸二次规划参数&lt;/span&gt;
&lt;span&gt;196&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;toler 容忍度&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;maxInter 循环次数&lt;/span&gt;
&lt;span&gt;198&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;kTup 指定核方式&lt;/span&gt;
&lt;span&gt;199&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;程序逻辑：&lt;/span&gt;
&lt;span&gt;200&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;第一次全部遍历，遍历后根据alpha对是否有修改判断，&lt;/span&gt;
&lt;span&gt;201&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果alpha对没有修改，外循环终止；如果alpha对有修改，则继续遍历属于支持向量的数据。&lt;/span&gt;
&lt;span&gt;202&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;直至外循环次数达到maxIter&lt;/span&gt;
&lt;span&gt;203&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;相比简单SMO算法，运行速度更快，原因是：&lt;/span&gt;
&lt;span&gt;204&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;1.不是每一次都全量遍历原始数据，第一次遍历原始数据，&lt;/span&gt;
&lt;span&gt;205&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果alpha有优化，就遍历支持向量数据，直至alpha没有优化，然后再转全量遍历，这是如果alpha没有优化，循环结束；&lt;/span&gt;
&lt;span&gt;206&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2.外循环不需要达到maxInter次数就终止；&lt;/span&gt;
&lt;span&gt;207&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; smoP(dataSet, labelSet, C, toler, maxInter, kTup = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 0)):
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;初始化结构体类，获取实例&lt;/span&gt;
&lt;span&gt;209&lt;/span&gt;     oS =&lt;span&gt; optStruct(dataSet, labelSet, C, toler, kTup)
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt;     iter =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;全量遍历标志&lt;/span&gt;
&lt;span&gt;212&lt;/span&gt;     entireSet =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;alpha对是否优化标志&lt;/span&gt;
&lt;span&gt;214&lt;/span&gt;     alphaPairsChanged =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;外循环 终止条件：1.达到最大次数 或者 2.alpha对没有优化&lt;/span&gt;
&lt;span&gt;216&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (iter &amp;lt; maxInter) &lt;span&gt;and&lt;/span&gt; ((alphaPairsChanged &amp;gt; 0) &lt;span&gt;or&lt;/span&gt;&lt;span&gt; (entireSet)):
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt;         alphaPairsChanged =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;全量遍历 ，遍历每一行数据 alpha对有修改，alphaPairsChanged累加&lt;/span&gt;
&lt;span&gt;219&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; entireSet:
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(oS.m):
&lt;/span&gt;&lt;span&gt;221&lt;/span&gt;                 alphaPairsChanged +=&lt;span&gt; innerL(i, oS)
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fullSet, iter: %d i:%d, pairs changed %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;(iter, i, alphaPairsChanged))
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt;             iter += 1
&lt;span&gt;224&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取(0，C)范围内数据索引列表，也就是只遍历属于支持向量的数据&lt;/span&gt;
&lt;span&gt;226&lt;/span&gt;             nonBounds = np.nonzero((oS.alphas.A &amp;gt; 0) * (oS.alphas.A &amp;lt;&lt;span&gt; C))[0]
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; nonBounds:
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt;                 alphaPairsChanged +=&lt;span&gt; innerL(i, oS)
&lt;/span&gt;&lt;span&gt;229&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;non-bound, iter: %d i:%d, pairs changed %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;(iter, i, alphaPairsChanged))
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt;             iter += 1
&lt;span&gt;231&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;全量遍历-&amp;gt;支持向量遍历&lt;/span&gt;
&lt;span&gt;232&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; entireSet:
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt;             entireSet =&lt;span&gt; False
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;支持向量遍历-&amp;gt;全量遍历&lt;/span&gt;
&lt;span&gt;235&lt;/span&gt;         &lt;span&gt;elif&lt;/span&gt; alphaPairsChanged ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;             entireSet =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iteation number: %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; iter)
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;entireSet :%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; entireSet)
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alphaPairsChanged :%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; alphaPairsChanged)
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; oS.b,oS.alphas
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt; 
&lt;span&gt;242&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;绘制支持向量&lt;/span&gt;
&lt;span&gt;243&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; drawDataMap(dataArr,labelArr,b,alphas):
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;     &lt;span&gt;import&lt;/span&gt;&lt;span&gt; matplotlib.pyplot as plt
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;alphas.A&amp;gt;0 获取大于0的索引列表，只有&amp;gt;0的alpha才对分类起作用&lt;/span&gt;
&lt;span&gt;246&lt;/span&gt;     svInd=np.nonzero(alphas.A&amp;gt;&lt;span&gt;0)[0]           
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;分类数据点&lt;/span&gt;
&lt;span&gt;248&lt;/span&gt;     classified_pts = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[],&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[]}
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; point,label &lt;span&gt;in&lt;/span&gt;&lt;span&gt; zip(dataArr,labelArr):
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; label == 1.0&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt;             classified_pts[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].append(point)
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt;             classified_pts[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;].append(point)
&lt;/span&gt;&lt;span&gt;254&lt;/span&gt;     fig =&lt;span&gt; plt.figure()
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt;     ax = fig.add_subplot(111&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;绘制数据点&lt;/span&gt;
&lt;span&gt;257&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; label,pts &lt;span&gt;in&lt;/span&gt;&lt;span&gt; classified_pts.items():
&lt;/span&gt;&lt;span&gt;258&lt;/span&gt;         pts =&lt;span&gt; np.array(pts)
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt;         ax.scatter(pts[:, 0], pts[:, 1], label =&lt;span&gt; label)
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;绘制分割线&lt;/span&gt;
&lt;span&gt;261&lt;/span&gt;     w =&lt;span&gt; calWs(alphas, dataArr, labelArr)
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;函数形式：max( x ,key=lambda a : b )        #    x可以是任何数值，可以有多个x值&lt;/span&gt;
&lt;span&gt;263&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;先把x值带入lambda函数转换成b值，然后再将b值进行比较&lt;/span&gt;
&lt;span&gt;264&lt;/span&gt;     x1, _=max(dataArr, key=&lt;span&gt;lambda&lt;/span&gt;&lt;span&gt; x:x[0])
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt;     x2, _=min(dataArr, key=&lt;span&gt;lambda&lt;/span&gt;&lt;span&gt; x:x[0])    
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt;     a1, a2 =&lt;span&gt; w
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt;     y1, y2 = (-b - a1*x1)/a2, (-b - a1*x2)/&lt;span&gt;a2
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;矩阵转化为数组.A&lt;/span&gt;
&lt;span&gt;269&lt;/span&gt; &lt;span&gt;    ax.plot([x1, x2],[y1.A[0][0], y2.A[0][0]])
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt;     
&lt;span&gt;271&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;绘制支持向量&lt;/span&gt;
&lt;span&gt;272&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; svInd:
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt;         x, y=&lt;span&gt; dataArr[i]        
&lt;/span&gt;&lt;span&gt;274&lt;/span&gt;         ax.scatter([x], [y], s=150, c =&lt;span&gt;'&lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, alpha=0.7, linewidth=1.5, edgecolor = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#AB3319&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt; &lt;span&gt;    plt.show()
&lt;/span&gt;&lt;span&gt;276&lt;/span&gt;     
&lt;span&gt;277&lt;/span&gt;      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;alpha&amp;gt;0对应的数据才是支持向量，过滤不是支持向量的数据&lt;/span&gt;
&lt;span&gt;278&lt;/span&gt;     sVs= np.mat(dataArr)[svInd] &lt;span&gt;#&lt;/span&gt;&lt;span&gt;get matrix of only support vectors&lt;/span&gt;
&lt;span&gt;279&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;there are %d Support Vectors.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; np.shape(sVs)[0])
&lt;/span&gt;&lt;span&gt;280&lt;/span&gt;     
&lt;span&gt;281&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;训练结果    &lt;/span&gt;
&lt;span&gt;282&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; getTrainingDataResult(dataSet, labelSet, b, alphas, k1=1.3&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;283&lt;/span&gt;     datMat =&lt;span&gt; np.mat(dataSet)
&lt;/span&gt;&lt;span&gt;284&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;100*1&lt;/span&gt;
&lt;span&gt;285&lt;/span&gt;     labelMat =&lt;span&gt; np.mat(labelSet).T
&lt;/span&gt;&lt;span&gt;286&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;alphas.A&amp;gt;0 获取大于0的索引列表，只有&amp;gt;0的alpha才对分类起作用&lt;/span&gt;
&lt;span&gt;287&lt;/span&gt;     svInd=np.nonzero(alphas.A&amp;gt;&lt;span&gt;0)[0]
&lt;/span&gt;&lt;span&gt;288&lt;/span&gt;     sVs=&lt;span&gt;datMat[svInd]
&lt;/span&gt;&lt;span&gt;289&lt;/span&gt;     labelSV =&lt;span&gt; labelMat[svInd];
&lt;/span&gt;&lt;span&gt;290&lt;/span&gt;     m,n =&lt;span&gt; np.shape(datMat)
&lt;/span&gt;&lt;span&gt;291&lt;/span&gt;     errorCount =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;292&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(m):
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt;         kernelEval = kernelTrans(sVs,datMat[i,:],(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rbf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, k1))
&lt;/span&gt;&lt;span&gt;294&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; y(x) = w*x + b =&amp;gt; b = y(x) - w*x&lt;/span&gt;
&lt;span&gt;295&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; w = aiyixi(i= 1-&amp;gt;N求和)&lt;/span&gt;
&lt;span&gt;296&lt;/span&gt;         predict = kernelEval.T * np.multiply(labelSV, alphas[svInd]) +&lt;span&gt; b
&lt;/span&gt;&lt;span&gt;297&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; np.sign(predict)!=np.sign(labelSet[i]): errorCount += 1
&lt;span&gt;298&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;the training error rate is: %f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (float(errorCount)/&lt;span&gt;m))
&lt;/span&gt;&lt;span&gt;299&lt;/span&gt;     
&lt;span&gt;300&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; getTestDataResult(dataSet, labelSet, b, alphas, k1=1.3&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;301&lt;/span&gt;     datMat =&lt;span&gt; np.mat(dataSet)
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;100*1&lt;/span&gt;
&lt;span&gt;303&lt;/span&gt;     labelMat =&lt;span&gt; np.mat(labelSet).T
&lt;/span&gt;&lt;span&gt;304&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;alphas.A&amp;gt;0 获取大于0的索引列表，只有&amp;gt;0的alpha才对分类起作用&lt;/span&gt;
&lt;span&gt;305&lt;/span&gt;     svInd=np.nonzero(alphas.A&amp;gt;&lt;span&gt;0)[0]
&lt;/span&gt;&lt;span&gt;306&lt;/span&gt;     sVs=&lt;span&gt;datMat[svInd]
&lt;/span&gt;&lt;span&gt;307&lt;/span&gt;     labelSV =&lt;span&gt; labelMat[svInd];
&lt;/span&gt;&lt;span&gt;308&lt;/span&gt;     m,n =&lt;span&gt; np.shape(datMat)
&lt;/span&gt;&lt;span&gt;309&lt;/span&gt;     errorCount =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;310&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(m):
&lt;/span&gt;&lt;span&gt;311&lt;/span&gt;         kernelEval = kernelTrans(sVs,datMat[i,:],(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rbf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, k1))
&lt;/span&gt;&lt;span&gt;312&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; y(x) = w*x + b =&amp;gt; b = y(x) - w*x&lt;/span&gt;
&lt;span&gt;313&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; w = aiyixi(i= 1-&amp;gt;N求和)&lt;/span&gt;
&lt;span&gt;314&lt;/span&gt;         predict=kernelEval.T * np.multiply(labelSV,alphas[svInd]) +&lt;span&gt; b
&lt;/span&gt;&lt;span&gt;315&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; np.sign(predict)!=np.sign(labelSet[i]): errorCount += 1    
&lt;span&gt;316&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;the test error rate is: %f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (float(errorCount)/&lt;span&gt;m))  
&lt;/span&gt;&lt;span&gt;317&lt;/span&gt;     
&lt;span&gt;318&lt;/span&gt;     
&lt;/pre&gt;</description>
<pubDate>Thu, 06 Sep 2018 15:03:00 +0000</pubDate>
<dc:creator>w_x_w1985</dc:creator>
<og:description>支持向量机—SVM原理代码实现 本文系作者原创，转载请注明出处:https://www.cnblogs.com/further-further-further/p/9596898.html 1. 解决</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/further-further-further/p/9596898.html</dc:identifier>
</item>
<item>
<title>【学习笔记】多线程编程-线程池/任务/线程 - Mandy鹿</title>
<link>http://www.cnblogs.com/mandylu2018/p/9594442.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mandylu2018/p/9594442.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;写在前面的话&lt;/strong&gt;：之前一直没了解过多线程编程相关的东西，对于线程之类相关的概念也是一知半解。这次借着准备面试的时机，计划将一些关键性的盲区（除多线程以外，还有垃圾回收、图片缓存、性能优化等等）都彻底扫一遍。接下来我会陆续整理成学习笔记，主要作为自己学习后的温习巩固之用。如果能帮助到同样迷茫的小白的话，深感荣幸；如果因为缺少实战导致理解有误或解释不清的地方，还请路过的大牛不吝赐教，共同进步^_^&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;知识点相关&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;作为这次学习的切入点，&lt;span&gt;&lt;strong&gt;线程池&lt;/strong&gt;&lt;/span&gt;关联到的概念有很多，比如线程到底是什么，常搭配使用的Runnable又是啥，为什么又要搭配起来使用，等等。&lt;/p&gt;
&lt;p&gt;关于这些，我找到了一篇博文：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/jmsjh/p/7762034.html&quot;&gt;多线程（Thread、线程创建、线程池）&lt;/a&gt;，里面的解释说明非常全面了，感兴趣的可以整篇通读，一定受益匪浅。我在这里仅把几个重要且基础的点列出来，按自己的理解简要说明一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;线程Thread类&lt;/strong&gt;：用于创建线程（start方法）和定义线程所执行的任务（run方法），这里的run方法与主线程中的main方法等效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务Runnable接口&lt;/strong&gt;：一般有两种方法定义任务，一种是继承Thread类重写run方法，另一种则是实现Runnable接口重写run方法。后者用的比较多，是常用搭配，目的就在于将线程创建和线程任务这两块&lt;strong&gt;解耦&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务Callable接口&lt;/strong&gt;：作用与Runnable类似，call方法也与run方法地位相同，区别在于Callable返回结果而Runnable不返回&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务结果Future接口&lt;/strong&gt;：对应的通过Future接口的get方法来获取Callable返回的结果，&lt;em&gt;&lt;span&gt;注意：使用get方法时如还未得到结果则会阻塞当前线程直至拿到结果&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务FutureTask类&lt;/strong&gt;：可以理解为是Runnable/Callable和Future的结合体，通过在Callable（Runnable也会先转为Callable）外面加包一层，使用get方法直接获取任务结果&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;除了以上这些涉及到的类，还有一些多线程相关的概念列举如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;：简单来说，一个应用对应一个进程，占用一定内存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程&lt;/strong&gt;：一个进程包含多个线程，线程相当于是任务执行单元，互不干扰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抢占式调度&lt;/strong&gt;：按优先级高低分配向线程分配内存资源；多线程并不提高程序运行速度，而是在于提高运行效率，提高CPU的使用率&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主线程&lt;/strong&gt;：运行main方法所在的线程即为主线程；通常将耗时操作放到主线程以外的线程，以防阻塞主线程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;准备工作完毕，下面重点讲线程池↓&lt;/p&gt;
&lt;h2&gt;为什么要使用线程池&lt;/h2&gt;
&lt;p&gt;简单来说，线程池就像一个管家，通过调度和合理分配工作，让每个佣人（即线程）在繁忙时都能各司其职高效完成任务，同时又能在空闲时得到充分休息。更具体来说，主要有两点：&lt;span&gt;一是合理利用现存的线程，减少线程创建和销毁所消耗的资源开销，加快响应；二是便于监督和管理每个线程的生命周期。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;线程池ThreadPoolExecutor类&lt;/h2&gt;
&lt;p&gt;要搞清楚这个类，先上一张图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1334793/201809/1334793-20180906003809740-581694390.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是一张继承关系图。最初的&lt;strong&gt;Executor&lt;/strong&gt;接口定义的是execute方法，比较简单。它的子类&lt;strong&gt;ExecutorService&lt;/strong&gt;接口，你可以理解为是&lt;strong&gt;通用线程池类&lt;/strong&gt;，里面增加了线程池常用的一些用于控制线程的方法，如submit和shutdown等，用于管理生命周期。继承的&lt;strong&gt;AbstractExecutorService&lt;/strong&gt;抽象类，是在ExecutorService基础上的默认实现。最后，&lt;strong&gt;ThreadPoolExecutor&lt;/strong&gt;继承自该抽象类，通过构造方法来配置线程池。&lt;/p&gt;
&lt;p&gt;这里还要提一下&lt;strong&gt;Executors&lt;/strong&gt;类，不在图中，是线程池工厂类，可以通过一系列静态方法创建线程池。查看源码可以发现，方法内部都是使用ThreadPoolExecutor的构造方法加上不同的配置参数来实现。&lt;/p&gt;
&lt;p&gt;下面是ThreadPoolExecutor类的几个构造方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1334793/201809/1334793-20180906123006202-707671568.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重点讲第三个，其他的构造方法基本类似。其中的参数有（按顺序依次）：核心线程数&lt;strong&gt;&lt;span&gt;N&lt;/span&gt;&lt;/strong&gt;，最大线程数&lt;strong&gt;&lt;span&gt;M&lt;/span&gt;&lt;/strong&gt;，超时时间&lt;strong&gt;&lt;span&gt;T&lt;/span&gt;&lt;/strong&gt;，时间单位&lt;strong&gt;&lt;span&gt;U&lt;/span&gt;&lt;/strong&gt;，缓冲队列&lt;strong&gt;&lt;span&gt;B&lt;/span&gt;&lt;/strong&gt;和拒绝处理&lt;strong&gt;&lt;span&gt;Handler&lt;/span&gt;&lt;/strong&gt;。这些参数各自代表的含义，将结合不同的缓冲队列类型分情况讲解：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;SynchronousQueue&lt;/strong&gt;类型：所有任务不进入缓冲队列（可以理解为缓冲队列的容量为0），直接进入可用线程执行，当无可用线程时则直接创建新线程执行任务。当线程数超过&lt;strong&gt;&lt;span&gt;M&lt;/span&gt;&lt;/strong&gt;时，调用&lt;strong&gt;&lt;span&gt;Handler&lt;/span&gt;&lt;/strong&gt;处理被拒绝的新任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LinkedBlockingQueue&lt;/strong&gt;类型：有新任务时，若当前线程数少于&lt;span&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;/span&gt;，则创建新线程；若大于等于&lt;strong&gt;&lt;span&gt;N&lt;/span&gt;&lt;/strong&gt;，则进入缓冲队列；当缓冲队列充满时，且线程数少于&lt;strong&gt;&lt;span&gt;M&lt;/span&gt;&lt;/strong&gt;，则继续创建新线程，直至达到&lt;strong&gt;&lt;span&gt;M&lt;/span&gt;&lt;/strong&gt;时调用&lt;strong&gt;&lt;span&gt;Handler&lt;/span&gt;&lt;/strong&gt;处理拒绝任务。一般情况下，LinkedBlockingQueue作为无界队列不指定缓冲容量，可以无限扩展，此时相当于&lt;strong&gt;&lt;span&gt;M&lt;/span&gt;&lt;/strong&gt;失效；但也可以通过构造函数来指定容量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ArrayBlockingQueue&lt;/strong&gt;类型：规则与LinkedBlockingQueue类似，但一般情况下指定队列长度。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;具体这三种队列类型的区别可以参考这篇文章：&lt;span&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/feiyun126/p/7686302.html&quot; target=&quot;_blank&quot;&gt;ThreadPoolExecutor的三种队列&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;还有超时时间&lt;strong&gt;&lt;span&gt;T&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;和时间单位&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;U&lt;/span&gt;&lt;/strong&gt;，主要作用在于令非核心线程闲置超过一定时长后自动销毁，从而释放资源。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;拒绝任务Handler&lt;/h2&gt;
&lt;p&gt;当线程数和缓冲队列都达到饱和时，会调用相应的Handler处理拒绝的任务。以下是四种预定义的处理策略： &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在默认的AbortPolicy 中，拒绝后直接抛出异常RejectedExecutionException。&lt;/li&gt;
&lt;li&gt;在CallerRunsPolicy 中，直接在 execute 方法的调用线程中运行被拒绝的任务。该策略提供简单的反馈控制机制，能够减缓新任务的提交速度。&lt;/li&gt;
&lt;li&gt;在DiscardPolicy 中，拒绝后直接放弃任务。&lt;/li&gt;
&lt;li&gt;在DiscardOldestPolicy 中，位于工作队列头部（即最旧）的任务将被放弃，然后重试执行程序（如果再次失败，则重复此过程）。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;线程池的简单示例&lt;/h2&gt;
&lt;p&gt;以斐波那契数列为例，主要展示了不同任务类型的用法区别，注意此处使用submit而不是execute来提交任务，两者区别类似Callable和Runnable。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.effective.java.concurrent.task;  
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;   
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.Callable;  
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.ExecutionException;  
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.ExecutorService;  
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.Executors;  
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.Future;  
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.FutureTask;  
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;    
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RunnableFutureTask {  
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; ExecutorService mExecutor =  &lt;span&gt;new&lt;/span&gt; ThreadPoolExecutor(2, 3, 5, TimeUnit.SECONDS, &lt;span&gt;new&lt;/span&gt; SynchronousQueue&amp;lt;Runnable&amp;gt;&lt;span&gt;());  
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;   
&lt;span&gt;14&lt;/span&gt;   
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {  
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        futureDemo();  
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }  
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;   
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; futureDemo() {  
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {  
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;/**&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;             * 提交runnable则没有返回值, future没有数据 
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;              &lt;span&gt;*/&lt;/span&gt;  
&lt;span&gt;25&lt;/span&gt;             Future&amp;lt;?&amp;gt; result = mExecutor.submit(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {  
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;   
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                @Override  
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {  
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                     fibc(20&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                }  
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            });  
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;   
&lt;span&gt;33&lt;/span&gt;             System.out.println(&quot;future result from runnable : &quot; +&lt;span&gt; result.get());  
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;   
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;/**&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;             * 提交Callable, 有返回值, future中能够获取返回值 
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;              &lt;span&gt;*/&lt;/span&gt;  
&lt;span&gt;38&lt;/span&gt;             Future&amp;lt;Integer&amp;gt; result2 = mExecutor.submit(&lt;span&gt;new&lt;/span&gt; Callable&amp;lt;Integer&amp;gt;&lt;span&gt;() {  
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                @Override  
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;public&lt;/span&gt; Integer call() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {  
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; fibc(20&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                }  
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            });  
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;   
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;            System.out  
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                     .println(&quot;future result from callable : &quot; +&lt;span&gt; result2.get());  
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;   
&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;/**&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;             * FutureTask可以通过Thread包装来直接执行，也可以提交给ExecuteService来执行 
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;             * ，并且还可以通过v get()返回执行结果，在线程体没有执行完成的时候，主线程一直阻塞等待，执行完则直接返回结果。 
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;              &lt;span&gt;*/&lt;/span&gt;  
&lt;span&gt;52&lt;/span&gt;             FutureTask&amp;lt;Integer&amp;gt; futureTask = &lt;span&gt;new&lt;/span&gt; FutureTask&amp;lt;Integer&amp;gt;&lt;span&gt;(  
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                     &lt;span&gt;new&lt;/span&gt; Callable&amp;lt;Integer&amp;gt;&lt;span&gt;() {  
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                        @Override  
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                         &lt;span&gt;public&lt;/span&gt; Integer call() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {  
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt; fibc(20&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;                        }  
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;                    });  
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交futureTask  &lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;            mExecutor.submit(futureTask) ;  
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             System.out.println(&quot;future result from futureTask : &quot;  
&lt;span&gt;63&lt;/span&gt;                     +&lt;span&gt; futureTask.get());  
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;   
&lt;span&gt;65&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {  
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;            e.printStackTrace();  
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ExecutionException e) {  
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; &lt;span&gt;            e.printStackTrace();  
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        }  
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    }  
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;   
&lt;span&gt;72&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt; &lt;span&gt;     * 效率底下的斐波那契数列, 耗时的操作 
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;     *  
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; num 
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt; 
&lt;span&gt;77&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;  
&lt;span&gt;78&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; fibc(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; num) {  
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (num == 0&lt;span&gt;) {  
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; 0&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;        }  
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (num == 1&lt;span&gt;) {  
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; 1&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; &lt;span&gt;        }  
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; fibc(num - 1) + fibc(num - 2&lt;span&gt;);  
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;    }   
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; }  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;除文中提到的博文外，其余参考博文列举如下，感谢各位博主的无私分享^_^：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a id=&quot;cb_post_title_url&quot; href=&quot;https://www.cnblogs.com/MOBIN/p/5436482.html&quot;&gt;java并发编程--Executor框架&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/hayre/article/details/53291712&quot; target=&quot;_blank&quot;&gt;一心多用多线程-线程池ThreadPoolExecutor-看这篇就够了&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/hayre/article/details/53314599&quot; target=&quot;_blank&quot;&gt;一心多用多线程-细谈java线程池submit与execute的区别&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/qq_25806863/article/details/71126867&quot; target=&quot;_blank&quot;&gt;Java多线程-线程池ThreadPoolExecutor构造方法和规则&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/qq_19431333/article/details/77483763&quot; target=&quot;_blank&quot;&gt;深入理解Callable&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/bboyfeiyu/article/details/24851847&quot; target=&quot;_blank&quot;&gt;Java中的Runnable、Callable、Future、FutureTask的区别与示例&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 06 Sep 2018 14:28:00 +0000</pubDate>
<dc:creator>Mandy鹿</dc:creator>
<og:description>简单来说，线程池就像一个管家，通过调度和合理分配工作，让每个佣人（即线程）在繁忙时都能各司其职高效完成任务，同时又能在空闲时得到充分休息。更具体来说，主要有两点：一是合理利用现存的线程，减少线程创建和</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mandylu2018/p/9594442.html</dc:identifier>
</item>
</channel>
</rss>