<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>ES6系列_10之Symbol在对象中的作用 - 吴封斌技术博客</title>
<link>http://www.cnblogs.com/bfwbfw/p/10068369.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bfwbfw/p/10068369.html</guid>
<description>&lt;p&gt;在ES5中 对象属性名都是字符串，这容易造成属性名的冲突，比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突，于是 ES6 引入了&lt;code&gt;Symbol。Symbol是一种新的原始数据类型，表示独一无二的值。它是继&lt;/code&gt;undefined、&lt;code&gt;null&lt;/code&gt;、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）六种数据类型之后的第七种数据类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.声明Symbol&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Symbol&lt;/code&gt;函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; f= Symbol();//&lt;code class=&quot; language-javascript&quot;/&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; f= Symbol('foo');//&lt;code class=&quot; language-javascript&quot;/&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 没有参数的情况&lt;/span&gt;
let s1 =&lt;span&gt; Symbol();
let s2 &lt;/span&gt;=&lt;span&gt; Symbol();

s1 &lt;/span&gt;=== s2 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 有参数的情况&lt;/span&gt;
let s1 = Symbol('foo'&lt;span&gt;);
let s2 &lt;/span&gt;= Symbol('foo'&lt;span&gt;);

s1 &lt;/span&gt;=== s2 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，&lt;code&gt;Symbol&lt;/code&gt;函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的&lt;code&gt;Symbol&lt;/code&gt;函数的返回值是不相等的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s1&lt;/code&gt;和&lt;code&gt;s2&lt;/code&gt;都是&lt;code&gt;Symbol&lt;/code&gt;函数的返回值，而且参数相同，但是它们是不相等的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.Symbol在对象中的应用&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;作为属性名的-Symbol&quot; class=&quot;作为属性名的-Symbol&quot;&gt;&lt;strong&gt;Symbol&lt;/strong&gt;作为属性名：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
let mySymbol =&lt;span&gt; Symbol();

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第一种写法&lt;/span&gt;
let a =&lt;span&gt; {};
a[mySymbol] &lt;/span&gt;= 'Hello!'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第二种写法&lt;/span&gt;
let a =&lt;span&gt; {
  [mySymbol]: &lt;/span&gt;'Hello!'&lt;span&gt;
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第三种写法&lt;/span&gt;
let a =&lt;span&gt; {};
Object.defineProperty(a, mySymbol, { value: &lt;/span&gt;'Hello!'&lt;span&gt; });

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 以上写法都得到同样结果&lt;/span&gt;
a[mySymbol] &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;Hello!&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;赋值-括号形式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
a[mySymbol]='web';
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.Symbol对象元素的保护作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在对象中有很多值，但是循环输出时，并不希望全部输出，那我们就可以使用Symbol进行保护。&lt;/p&gt;
&lt;p&gt;没有进行保护的写法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; obj={name:'小明',skill:'web',age:18&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (let item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; obj){
    console.log(obj[item]);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我不想别人知道我的年龄，这时候我就可以使用Symbol来进行循环保护。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
let obj={name:'小明',skill:'web'&lt;span&gt;};
let age&lt;/span&gt;=&lt;span&gt;Symbol();
obj[age]&lt;/span&gt;=18&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (let item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; obj){
    console.log(obj[item]);//小明、web
} 
console.log(obj[age]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 待续.....&lt;/p&gt;
</description>
<pubDate>Tue, 04 Dec 2018 15:36:00 +0000</pubDate>
<dc:creator>吴封斌技术博客</dc:creator>
<og:description>在ES5中 对象属性名都是字符串，这容易造成属性名的冲突，比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突，于是 E</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bfwbfw/p/10068369.html</dc:identifier>
</item>
<item>
<title>HTML5和CSS3的新特性 - linwene</title>
<link>http://www.cnblogs.com/linwene/p/10068290.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linwene/p/10068290.html</guid>
<description>&lt;h2 id=&quot;html5的新特性&quot;&gt;html5的新特性&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;添加了用于媒介回放的 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; 元素&lt;/li&gt;
&lt;li&gt;添加了语义标签譬如 &lt;code&gt;header&lt;/code&gt;、&lt;code&gt;footer&lt;/code&gt;、&lt;code&gt;nav&lt;/code&gt; 等等元素&lt;/li&gt;
&lt;li&gt;添加了用于绘画的 canvas 元素和svg绘图&lt;/li&gt;
&lt;li&gt;扩充了input的输入类型，如下&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;color&lt;/td&gt;
&lt;td&gt;主要用于选取颜色&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;date&lt;/td&gt;
&lt;td&gt;从一个日期选择器选择一个日期&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;datetime&lt;/td&gt;
&lt;td&gt;选择一个日期（UTC 时间）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;datetime-local&lt;/td&gt;
&lt;td&gt;选择一个日期和时间 (无时区)&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;email&lt;/td&gt;
&lt;td&gt;包含 e-mail 地址的输入域&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;month&lt;/td&gt;
&lt;td&gt;选择一个月份&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;数值的输入域&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;range&lt;/td&gt;
&lt;td&gt;一定范围内数字值的输入域&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;search&lt;/td&gt;
&lt;td&gt;用于搜索域&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;tel&lt;/td&gt;
&lt;td&gt;定义输入电话号码字段&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;time&lt;/td&gt;
&lt;td&gt;选择一个时间&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;url&lt;/td&gt;
&lt;td&gt;URL 地址的输入域&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;week&lt;/td&gt;
&lt;td&gt;选择周和年&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;添加了地理位置定位功能Geolocation（地理定位）&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;window.navigator.geolocation {
    getCurrentPosition:  fn  用于获取当前的位置数据
    watchPosition: fn  监视用户位置的改变
    clearWatch: fn  清除定位监视
}　&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是获取用户定位信息示例&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;navigator.geolocation.getCurrentPosition(
    function(pos){
　　　　console.log('用户定位数据获取成功')
      　　　　//console.log(arguments);
      　　　　console.log('定位时间：',pos.timestamp)
      　　　　console.log('经度：',pos.coords.longitude)
      　　　　console.log('纬度：',pos.coords.latitude)
      　　　　console.log('海拔：',pos.coords.altitude)
      　　　　console.log('速度：',pos.coords.speed)
},    //定位成功的回调
function(err){ 
 　　　　console.log('用户定位数据获取失败')
      　　　　//console.log(arguments);
}        //定位失败的回调
)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;-0.49497767857143&quot;&gt;&lt;li&gt;添加了web存储功能，&lt;code&gt;localStorage&lt;/code&gt;和&lt;code&gt;sessionStorage&lt;/code&gt;&lt;/li&gt;
&lt;li readability=&quot;1.4673913043478&quot;&gt;
&lt;p&gt;使用 HTML5，通过创建&lt;code&gt;cache manifest&lt;/code&gt;文件，可以轻松地创建 web 应用的离线版本&lt;/p&gt;
&lt;blockquote readability=&quot;7.7721518987342&quot;&gt;
&lt;p&gt;manifest 文件可分为三个部分：&lt;br/&gt;&lt;em&gt;CACHE MANIFEST&lt;/em&gt; - 在此标题下列出的文件将在首次下载后进行缓存&lt;br/&gt;&lt;em&gt;NETWORK&lt;/em&gt; - 在此标题下列出的文件需要与&lt;a href=&quot;https://www.baidu.com/s?wd=%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;amp;tn=24004469_oem_dg&amp;amp;rsv_dl=gh_pc_csdn&quot;&gt;服务器&lt;/a&gt;的连接，且不会被缓存&lt;br/&gt;&lt;em&gt;FALLBACK&lt;/em&gt; - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;web worker&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;web worker是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行（相当于实现多线程并发）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;服务端事件推送，所有主流浏览器均支持服务器发送事件，除了 Internet Explorer&lt;br/&gt;EventSource 对象用于接收服务器发送事件通知：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;var source=newEventSource(&quot;demo_sse.php&quot;);
source.onmessage=function(event)
{
document.getElementById(&quot;result&quot;).innerHTML+=event.data +&quot;&amp;lt;br&amp;gt;&quot;;
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为了让上面的例子可以运行，您还需要能够发送数据更新的服务器（比如 PHP 和 ASP）。&lt;/p&gt;
&lt;pre class=&quot;&amp;lt;?php&quot;&gt;
&lt;code&gt;header('Content-Type: text/event-stream');
header('Cache-Control: no-cache');
$time = date('r');
echo &quot;data: The server time is: {$time}nn&quot;;
flush();
?&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;css3的新特性&quot;&gt;CSS3的新特性&lt;/h2&gt;
&lt;ul&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;媒体查询&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;从 CSS 版本 2 开始，就可以通过媒体类型在 CSS 中获得媒体支持。如果您曾经使用过打印样式表，那么您可能已经使用过媒体类型。清单 1 展示了一个示例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;清单 1. 使用媒体类型&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;linkrel=&quot;stylesheet&quot;type=&quot;text/css&quot;href=&quot;site.css&quot;media=&quot;screen&quot;/&amp;gt;
&amp;lt;linkrel=&quot;stylesheet&quot;type=&quot;text/css&quot;href=&quot;print.css&quot;media=&quot;print&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;清单 2. 媒体查询规则&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@media all and(min-width:800px){...}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;@media all 是媒体类型，也就是说，将此 CSS 应用于所有媒体类型。&lt;br/&gt;(min-width:800px) 是包含媒体查询的表达式，如果浏览器的最小宽度为 800 像素，则会告诉浏览器只运用下列 CSS。&lt;/p&gt;
&lt;p&gt;清单 3. and 条件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@media(min-width:800px)and(max-width:1200px)and(orientation:portrait){...}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;清单 4. or 关键词&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@media(min-width:800px)or(orientation:portrait){...}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;清单 5. 使用 not&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@media(not min-width:800px){...}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;选择器&lt;/li&gt;
&lt;li&gt;transform，transition，translate,scale,skelw，rotate等相关动画效果&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;div
{
transition-property: width;
transition-duration:1s;
transition-timing-function: linear;
transition-delay:2s;
/* Safari */
-webkit-transition-property:width;
-webkit-transition-duration:1s;
-webkit-transition-timing-function:linear;
-webkit-transition-delay:2s;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;box-shadow,text-shadow等特效&lt;/li&gt;
&lt;li&gt;添加了border-radius，border-image等属性&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;2.4587628865979&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.5789473684211&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.runoob.com/cssref/css3-pr-border-image.html&quot;&gt;border-image&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;设置所有边框图像的速记属性。&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;1.6867469879518&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.runoob.com/cssref/css3-pr-border-radius.html&quot;&gt;border-radius&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;一个用于设置所有四个边框- *-半径属性的速记属性&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;1.6153846153846&quot;&gt;&lt;td&gt;&lt;a href=&quot;http://www.runoob.com/cssref/css3-pr-box-shadow.html&quot;&gt;box-shadow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;附加一个或多个下拉框的阴影&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Tue, 04 Dec 2018 15:15:00 +0000</pubDate>
<dc:creator>linwene</dc:creator>
<og:description>html5的新特性 添加了用于媒介回放的 元素 添加了语义标签譬如 、`footer nav` 等等元素 添加了用于绘画的 canvas 元素和svg绘图 扩充了input的输入类型，如下 输入类型|</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linwene/p/10068290.html</dc:identifier>
</item>
<item>
<title>基于sentry的前端错误监控日志系统(部署sentry服务器/前端项目部署)-让前端最快的定位到生产问题 - 小结巴巴吧</title>
<link>http://www.cnblogs.com/jiebba/p/10049938.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jiebba/p/10049938.html</guid>
<description>&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt;背景&lt;/h2&gt;

&lt;p&gt;　　在这越来越发达的网络时代，web应用也是越来越复杂，尤其是前端的开发，也是越来越受重视。&lt;/p&gt;
&lt;p&gt;　　所以在我们前端开发完成后，会有一些列的web应用的上线验证，如自测、QA测试、code review 等，以确保&lt;/p&gt;
&lt;p&gt;应用能在生产上没有事故。&lt;/p&gt;
&lt;p&gt;　　但是事以愿违，很多时候我们都会接受的客户的一些线上问题，这些问题有时候可能你是自己开发的原因本身存&lt;/p&gt;
&lt;p&gt;在的问题，这样的问题一般能够在测试环境重现，我们很快的能定位到问题关键位置。但是，很多时候有一些问题，&lt;/p&gt;
&lt;p&gt;我们在测试中并未发现，可是在线上却有部分人出现了，问题确确实实存在的，这个时候我们测试环境又不能重现，&lt;/p&gt;
&lt;p&gt;还有一些偶现的生产的偶现问题，这些都是难以定位到问题的原因，让我们前端工程师头疼不已。&lt;/p&gt;
&lt;p&gt;　　这时候，我们不得不借助一些功能来解决这一些列的头疼问题。&lt;/p&gt;

&lt;h4&gt;　　前端错误监控日志系统　　&lt;/h4&gt;
&lt;p&gt;　　当前端代码在生产运行中出现错误的时候，第一时间传递给监控系统，从而第一时间定位并且解决问题。&lt;/p&gt;
&lt;p&gt;　　保证前端代码的稳定和安全，是项目可以健康的运行。&lt;/p&gt;

&lt;h2&gt;监控系统搭建方案&lt;/h2&gt;

&lt;p&gt;　　1、自行可以规划定义一套完善的监控系统。需要人力重新开发&lt;/p&gt;
&lt;p&gt;　　2、借助第三方插件( 阿里ARMS、fundebug、BadJS，sentry 等 )&lt;/p&gt;
&lt;p&gt;　　阿里ARMS ：是阿里的一个前端数据监控的服务，似乎是收费的&lt;/p&gt;
&lt;p&gt;　　fundebug ：挺完善的前端错误日志服务，也是收费的&lt;/p&gt;
&lt;p&gt;　　BadJS ：腾讯团队的一个开源项目，没看过，应该很不错的&lt;/p&gt;
&lt;p&gt;　　sentry ：github 上面的一个开源项目，支持各端的错误监控 ( 本文就是基于 sentry 搭建的错误监控系统 )&lt;/p&gt;

&lt;h2&gt;系统的搭建与使用&lt;/h2&gt;

&lt;h3&gt;　　sentry 简介&lt;/h3&gt;
&lt;p&gt;　　sentry 是一个开源的实时错误监控的项目，它支持很多端的配置，包括 web 前端、服务器端、移动端及其游戏端。&lt;/p&gt;
&lt;p&gt;支持各种语言，例如 python、oc、java、node、javascript 等。也可以应用到各种不同的框架上面，如前端框架中的&lt;/p&gt;
&lt;p&gt;vue 、angular 、react 等最流行的前端框架。&lt;/p&gt;
&lt;p&gt;　　提供了github、slack、trello 的常见的开发工具的集成。可以自己安装并且搭建 sentry 应用。&lt;/p&gt;

&lt;p&gt;支持的语言：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181201214518931-2073144099.png&quot; alt=&quot;&quot; width=&quot;794&quot; height=&quot;476&quot;/&gt;&lt;/p&gt;

&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;　　sentry 的部署&lt;/h3&gt;
&lt;p&gt;　　官网提供了两种部署方案：&lt;/p&gt;
&lt;p&gt;　　docker&lt;/p&gt;
&lt;p&gt;　　python&lt;/p&gt;
&lt;p&gt;　　docker 是我第一次使用，看了下文档，感觉挺容易明白。&lt;/p&gt;
&lt;p&gt;　　在这里为了操作方便考虑，我们选择使用docker来部署搭建 sentry。&lt;/p&gt;
&lt;p&gt;　　这种方法的话需要安装 docker 和 docker - compose 。&lt;/p&gt;

&lt;h3&gt;1、docker 的部署 (mac版)&lt;/h3&gt;
&lt;p&gt;　　安装的话，可以直接去看看 docker 安装文档&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;http://www.runoob.com/docker/macos-docker-install.html&quot; target=&quot;_blank&quot;&gt;docker 安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　mac 版的安装，docker-compose 已经一起安装好了。&lt;/p&gt;

&lt;h3&gt;2、部署 sentry&lt;/h3&gt;
&lt;h4&gt;　　获取 sentry 代码&lt;/h4&gt;
&lt;p&gt;　　从 github 上面可以获取到最新的 sentry 代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
git clone https://github.com/getsentry/onpremise.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　获取到本地之后，进入项目的目录。&lt;/p&gt;
&lt;p&gt;　　按照项目的 readme.md 开始依照步骤搭建。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
docker-compose run --rm web config generate-secret-key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里是生产密钥，SENTRY_SECRET_KEY 这个需要添加到 docker-compose.yml 中。&lt;/p&gt;

&lt;p&gt;　　最后一步：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
docker-compose up -d
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　至此，我们监控系统的后端服务器已经跑起来了，访问本地的9000端口。&lt;/p&gt;
&lt;p&gt;　　使用中途创建的 邮箱和密码登陆 我们的服务后端。&lt;/p&gt;


&lt;h3&gt;3、创建项目&lt;/h3&gt;
&lt;p&gt;　　登陆后我们会进入我们的监控项目的界面，如：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181201221820666-777264825.png&quot; alt=&quot;&quot; width=&quot;896&quot; height=&quot;231&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　点击右上角的  add new project ，我们可以创建一个新的项目&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181201221957556-1359107585.png&quot; alt=&quot;&quot; width=&quot;903&quot; height=&quot;361&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里可以选择项目的配置，语言以及框架，选择自己的项目类型&lt;/p&gt;
&lt;p&gt;　　输入项目名称，点击 create project 。确定创建新项目。&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181201222256321-1065704305.png&quot; alt=&quot;&quot; width=&quot;885&quot; height=&quot;243&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　点击红框框的，创建一个简单的日志。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181201222441227-1202025170.png&quot; alt=&quot;&quot; width=&quot;1083&quot; height=&quot;526&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　错误信息页面，可以自行到官网上面去了解更多信息。&lt;/p&gt;


&lt;h3&gt;4、前端部署，注入监控代码 &lt;/h3&gt;

&lt;h4&gt;　　获取项目的链接：&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181201222948994-569865814.png&quot; alt=&quot;&quot; width=&quot;883&quot; height=&quot;415&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在项目的首页点击 install 会进入当前图示页面&lt;/p&gt;
&lt;p&gt;　　我们复制 sentry DSN 到我们前端配置中&lt;/p&gt;

&lt;h4&gt;　　引用 sentry ，注入配置到我们的应用中：&lt;/h4&gt;
&lt;p&gt;　　 &lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181201222812448-834895737.png&quot; alt=&quot;&quot; width=&quot;922&quot; height=&quot;953&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　这里是以 react 为例，我们在 react 的根组建的 componentDidCatch 上面捕获错误，并且上传到我们监控系统中。&lt;/p&gt;
&lt;p&gt;　　这里的我们用 sentry DSN 配置我们的 sentry 并且初始化 sentry 项目。&lt;/p&gt;

&lt;h4&gt;　　到这里我们基本，已经完成了我们的前端错误监控日志系统了。&lt;/h4&gt;


&lt;h2&gt;sentry 操作界面介绍&lt;/h2&gt;

&lt;p&gt;　　项目操作页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181203153324477-1905999066.png&quot; alt=&quot;&quot; width=&quot;1220&quot; height=&quot;376&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　1、项目的查看选项&lt;/p&gt;
&lt;p&gt;　　Issue ： 问题列表&lt;/p&gt;
&lt;p&gt;　　overview ： 概况纵览&lt;/p&gt;
&lt;p&gt;　　userfeedback ： 用户反馈&lt;/p&gt;
&lt;p&gt;　　Resleases ： 版本列表信息&lt;/p&gt;
&lt;p&gt;　　setting ： 项目设置&lt;/p&gt;

&lt;p&gt;　　2、问题筛选&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181203153636266-1419518618.png&quot; alt=&quot;&quot; width=&quot;523&quot; height=&quot;427&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　包括 ： 指派自己的 、 标记列表 、需要分类的 、 今天的 、 未处理的&lt;/p&gt;

&lt;p&gt;　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181203153859973-611073663.png&quot; alt=&quot;&quot; width=&quot;562&quot; height=&quot;78&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　设置为 解决 、 忽略 、 合并 、标记 、实时监控&lt;/p&gt;







&lt;h2&gt;sentry 的api介绍和使用&lt;/h2&gt;

&lt;h3&gt;　　1、javascript SDK 引用与配置&lt;/h3&gt;

&lt;p&gt;　　现在有两种方法引用 sentry SDK :&lt;/p&gt;

&lt;h4&gt;　　直接引用：&lt;/h4&gt;
&lt;p&gt;　　最快的方法就是通过 script 标签引用我们的 sdk &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;script src=&quot;https://browser.sentry-cdn.com/4.4.1/bundle.min.js&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　然后就是配置了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
Sentry.init({ dsn: 'https://&amp;lt;key&amp;gt;@sentry.io/&amp;lt;project&amp;gt;' });
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　npm 包引用：&lt;/h4&gt;
&lt;p&gt;　　首先是用添加包 @sentry/browser@4.4.1&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
yarn add @sentry/browser@4.4.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　引用到项目中，并且配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
import * as Sentry from '@sentry/browser';

Sentry.init({ dsn: 'https://&amp;lt;key&amp;gt;@sentry.io/&amp;lt;project&amp;gt;' });
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;　　2、捕获事件&lt;/h3&gt;

&lt;h4&gt;　　主动捕获错误或者异常&lt;/h4&gt;
&lt;p&gt;　　sentry 常见的是错误捕获，可以根据平台的不同来捕获错误，并且可以传递不同的错误信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
try {
    aFunctionThatMightFail();
} catch (err) {
    Sentry.captureException(err);
}&lt;br/&gt;Sentry.captureException(new Error('test'))
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;　　捕获消息&lt;/h4&gt;
&lt;p&gt;　　另一种常见操作是捕获裸信息。消息只是应该发送给Sentry的一些文本信息。　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
Sentry.captureMessage('Something went wrong');
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;　　3、初始化配置&lt;/h3&gt;

&lt;p&gt;　　sentry SDK 可以通过很多方式进行配置。&lt;/p&gt;
&lt;p&gt;　　主要配置初始化配置的函数为 init() 方法，通过向 init() 方法传递参数对象;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
Sentry.init({
  dsn: 'https://&amp;lt;key&amp;gt;@sentry.io/&amp;lt;project&amp;gt;',
  maxBreadcrumbs: 50,
  debug: true,
})
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　常用参数：&lt;/h4&gt;
&lt;p&gt;　　DSN ：项目的地址，用于收集错误信息的 sentry 分配的地址&lt;/p&gt;
&lt;p&gt;　　debug ：是否开启 debug 模式，开启debug，就会把信息打印到控制台上面&lt;/p&gt;
&lt;h4&gt;　　release ： 代码的版本号&lt;/h4&gt;
&lt;p&gt;　　　　release 版本号，可以确定当前的错误/异常属于哪一个发布的版本&lt;/p&gt;
&lt;p&gt;　　　　可以应用到  sourcemaps 来映射源码&lt;/p&gt;
&lt;p&gt;　　environment : 环境名称&lt;/p&gt;
&lt;p&gt;　　sampleRate : 是否开启随机发送事件给 sentry ，1为100%，0.1 为 10%几率发送事件&lt;/p&gt;
&lt;p&gt;　　attachStacktrace ： 是否开启堆栈跟踪，开启后跟着消息一起收集&lt;/p&gt;
&lt;p&gt;　　beforeSend : 发送前操作&lt;/p&gt;

&lt;h3&gt;　　4、sentry 的api&lt;/h3&gt;

&lt;p&gt;　　captureException(exception) : 捕获一个 js 异常，传入一个 exception 对象或者类对象。&lt;/p&gt;
&lt;p&gt;　　captureMessage(message,level) : 捕获一条信息，传入信息内容和信息级别&lt;/p&gt;
&lt;p&gt;　　captureEvent(sentryEvent) : 捕获一个事件，sentryEvent 是手动创建的，自定义的&lt;/p&gt;
&lt;p&gt;　　addBreadcrumb(Breadcrumb) ： 添加一个面包屑，以供接下里的捕获&lt;/p&gt;
&lt;p&gt;　　configureScope((scope)=&amp;gt;{}) : 设置 context 信息到 scope 上面&lt;/p&gt;
&lt;p&gt;　　withScope((scope)=&amp;gt;{}) : 设置一个零时的 scope 信息到 context 上面&lt;/p&gt;

&lt;h3&gt;　　5、context 上下文信息&lt;/h3&gt;

&lt;p&gt;　　上下文信息包括 ：user 、 tags 、 level 、fingerprint 、 extra data&lt;/p&gt;
&lt;p&gt;　　这些信息我们可以通过在 scope 上面设置来定义。&lt;/p&gt;
&lt;p&gt;　　其中可以通过两种方法得到 scope 。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// 将 scope 配置到 context 上面
Sentry.configureScope((scope) =&amp;gt; { }); &lt;br/&gt;// 创建一个零时到 scope ，配置到 context 上面
Sentry.withScope((scope) =&amp;gt; { });
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;　　User&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
 scope.setUser({
        id:'1',
        username:'xiao',
        ip_address:'127.0.0.1',
        email: 'test.doe@example.com' ,
      });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过 setUser 来设置 User 信息。&lt;/p&gt;
&lt;p&gt;　　其中 user 可以设置的信息包括 id 、 username 、 ip_address 、email&lt;/p&gt;

&lt;h3&gt;　　Tags&lt;/h3&gt;
&lt;p&gt; 　　tags 是给事件定义不同的键/值对，可以在查找的时候更容易。&lt;/p&gt;
&lt;p&gt;　　 后台查找的时候，查找选项会多出来一个选项，就是通过 tags 来设置的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
scope.setTag(&quot;page_local&quot;, &quot;de-at&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过 setTag 来设置了一个page_local 的标签。&lt;/p&gt;
&lt;p&gt;　　后台会多一个 page_local 选项。包括 de-at&lt;/p&gt;

&lt;h3&gt;　　level&lt;/h3&gt;
&lt;p&gt;　　通过这个来设置事件的严重性。&lt;/p&gt;
&lt;p&gt;　　包括：fatal 、error 、 warning 、 info 、 debug 。( fatal : 严重，error 错误，error 为默认 )&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
scope.setLevel('warning');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过 setLevel 来设置。&lt;/p&gt;

&lt;h3&gt;　　Fingerprint &lt;/h3&gt;
&lt;p&gt;　　指纹，通过指纹把信息分到不同的组中 　　&lt;/p&gt;

&lt;h3&gt; 　　Extra Data&lt;/h3&gt;
&lt;p&gt;　　传入额外的信息。并不会创建索引(也就是不可以提供来检索)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
scope.setExtra(&quot;character_name&quot;, &quot;Mighty Fighter&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过 setExtra 来设置。&lt;/p&gt;


&lt;h3&gt;　　6、Breadcurumbs 面包屑　　&lt;/h3&gt;
&lt;p&gt; 　　面包屑用于记录一系列当行为，当下一次发生错误事件上传当时候会随着一起上报。&lt;/p&gt;
&lt;p&gt;　　 浏览器 javascript sdk 将自动记录所有当位置更改。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
Sentry.addBreadcrumb({
  category: 'auth',
  message: 'Authenticated user ' + user.email,
  level: 'info'
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们可以通过 addBreadcrumb 来添加一次行为记录。&lt;/p&gt;

&lt;h3&gt;　　7、user Feedback&lt;/h3&gt;
&lt;p&gt;　　用户反馈，sentry 提供了一个客户反馈当窗口。&lt;/p&gt;
&lt;p&gt;　　当错误发生当时候，可以弹出窗口收集一些信息，例如：&lt;/p&gt;
&lt;p&gt;　　用户名&lt;/p&gt;
&lt;p&gt;　　用户当邮件地址&lt;/p&gt;
&lt;p&gt;　　发生的问题的描述等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
Sentry.showReportDialog();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过 showReportDialog 来实现框架的弹出。&lt;/p&gt;







&lt;h2&gt;sentry实现预警并且邮件提醒&lt;/h2&gt;

&lt;p&gt;　　邮件预警和邮件提醒是在生产环境中不可缺少的一部分，只有有效的提醒来能让我们最快的解决问题。&lt;/p&gt;
&lt;p&gt;　　在项目中选择 setting --&amp;gt;  alerts  进入邮件预警设置页面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181203161458830-1282045237.png&quot; alt=&quot;&quot; width=&quot;1143&quot; height=&quot;787&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　这里都是基本的邮件规则。&lt;/p&gt;
&lt;p&gt;　　在 tabs 中的 rule 可以自定规则。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181203161619374-1584941646.png&quot; alt=&quot;&quot; width=&quot;827&quot; height=&quot;226&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　规则设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181203161729502-2029293521.png&quot; alt=&quot;&quot; width=&quot;887&quot; height=&quot;278&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　An event is seen ： 一个事件发生的时候&lt;/p&gt;
&lt;p&gt;　　An issue is first seen ： 第一个发生错误的时候&lt;/p&gt;
&lt;p&gt;　　An issue changes state from resolved to unresolved ：问题从解决到未解决的时候&lt;/p&gt;
&lt;p&gt;　　An event's tags match {key} {match} {value}  ： 匹配到 tags 的键值对的时候发送&lt;/p&gt;
&lt;p&gt;　　An issue is seen more than {value} times in {interval} ：在固定时间内出现次数匹配的时候&lt;/p&gt;
&lt;p&gt;　　An issue is seen by more than {value} users in {interval} ：在固定时间内出现用户的次数匹配的时候&lt;/p&gt;
&lt;p&gt;　　An event's {attribute} value {match} {value} ： 匹配到某一个事件的时候&lt;/p&gt;
&lt;p&gt;　　An event's level is {match} {level} ： 事件级别匹配的时候&lt;/p&gt;




&lt;h2&gt;sentry 生产的 sourcemap 配置 &lt;/h2&gt;

&lt;h3&gt;　　介绍&lt;/h3&gt;

&lt;p&gt;　　现在开发很多时候，我们的代码都会利用构建工具对代码合并、压缩、混淆等。&lt;/p&gt;
&lt;p&gt;　　在产生这些生产代码的时候，为了利于我们开发调试、bug修复会产生一个 sourcemap 。&lt;/p&gt;
&lt;p&gt;　　sourecmap 的主要作用就是将我们的打包的代码前后最了一个关联。&lt;/p&gt;
&lt;p&gt;　　这里，sentry 对生产的 sourcemap 有很好的处理，它可以很快的让我们确定代码的错误位置。&lt;/p&gt;

&lt;h3&gt;　　准备工作&lt;/h3&gt;

&lt;p&gt;　　首先我们需要添加 sentry 的命令行的管理工具 sentry-cli&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
npm i -g @sentry/cli&lt;br/&gt;// 上面的不行就用下面的
npm install -g @sentry/cli --unsafe-perm
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;　　获取认证的 token &lt;/h3&gt;

&lt;p&gt;　　选择API后就可以生成token，记得勾选 project:write 权限。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1117885/201812/1117885-20181204152642663-1464453006.png&quot; alt=&quot;&quot; width=&quot;962&quot; height=&quot;418&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这里的 token 是用于登陆的。&lt;/p&gt;

&lt;h3&gt;　　登陆&lt;/h3&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
sentry-cli --url myserver  login
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　回车后输入上一步获得的 token 即可&lt;/p&gt;

&lt;h3&gt;　　创建版本 &lt;/h3&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
sentry-cli releases -o 组织 -p 项目 new release@1.1.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　-o : 组织，可以在我们的 Organization Settings 中找到&lt;/p&gt;
&lt;p&gt;　　-p : 项目名称 ， 可以在 projuct 中找到&lt;/p&gt;
&lt;p&gt;　　release@1.1.0 : 发布的版本号，可以自定义，这个后需要在应用配置的时候传入&lt;/p&gt;

&lt;p&gt;　配置 release 到应用　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
Sentry.init({
  dsn: 'http://18ac34902da74aa29a4328879a58fb0d@localhost:9000/2',
  release: 'release@1.1.0',
});
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;　　上传 sourcemap 文件&lt;/h3&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
sentry-cli releases -o 组织 -p 项目 files release@1.1.0 upload-sourcemaps jspath文件所在目录 --url-prefix 线上资源URI
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　-o , -p : 和上文一样&lt;/p&gt;
&lt;p&gt;　　jspath : js 文件的位置&lt;/p&gt;
&lt;p&gt;　　uri : js 文件相对于域名的位置&lt;/p&gt;
&lt;h4&gt;　　特殊说明 url-prefix&lt;/h4&gt;
&lt;p&gt;　　这里是必须传的，不传找不到 map 文件，例如：&lt;/p&gt;
&lt;p&gt;　　你的 js 线上的地址为 ：https://test.com/static/js/test.js&lt;/p&gt;
&lt;p&gt;　　这个时候 url-prefix 应该为 ： '~/static/js/'&lt;/p&gt;
&lt;h2&gt;   &lt;/h2&gt;
&lt;h2&gt;    完成！！！！&lt;/h2&gt;

&lt;p&gt;　　配置文件，在命令行操作的时候，sentry 支持配置文件。&lt;/p&gt;
&lt;p&gt;　　配置文件默认文命令的目录。&lt;/p&gt;
&lt;p&gt;　　配置文件 .sentryclirc&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
[auth]
token=1a59c94sdfsdfs33b5588b27bd3628c98ff2837c054b4503be089ad623620527

[defaults]
url=http://localhost:9000
project=react-test
org=test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　配置之后就不需要在输入项目名称和地址了。&lt;/p&gt;


&lt;h2&gt;总结步骤：&lt;/h2&gt;
&lt;h4&gt;　　1、注册账号 、创建项目 &lt;/h4&gt;
&lt;p&gt;　　 直接登陆 sentry 官网，注册账号，并且创建一个项目&lt;/p&gt;

&lt;h4&gt;　　2、在项目中配置 sentry &lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
Sentry.init({
  dsn: 'http://18ac34902da74aa29a4328879a58fb0d@localhost:9000/2',
  release: RELEASE_VERSION,
});
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　3、打包时候上传 sourcemap 文件&lt;/h4&gt;

&lt;h4&gt;　　4、配置邮件预警&lt;/h4&gt;


&lt;p&gt;&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 基于sentry的前端错误监控日志系统(部署sentry服务器/前端项目部署)-让前端最快的定位到生产问题&quot; href=&quot;https://www.cnblogs.com/jiebba/p/10049938.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/jiebba/p/10049938.html&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;   我的博客 ： &lt;a href=&quot;https://gilea.cn/index&quot; target=&quot;_blank&quot;&gt; XiaoLong's Blog&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;   &lt;a href=&quot;https://www.cnblogs.com/jiebba&quot; target=&quot;_blank&quot;&gt;博客园小结巴巴： https://www.cnblogs.com/jiebba&lt;/a&gt;&lt;/h3&gt;


</description>
<pubDate>Tue, 04 Dec 2018 14:59:00 +0000</pubDate>
<dc:creator>小结巴巴吧</dc:creator>
<og:description>背景 在这越来越发达的网络时代，web应用也是越来越复杂，尤其是前端的开发，也是越来越受重视。 所以在我们前端开发完成后，会有一些列的web应用的上线验证，如自测、QA测试、code review 等</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jiebba/p/10049938.html</dc:identifier>
</item>
<item>
<title>DirectX11--HLSL编译着色器的三种方法 - X_Jun</title>
<link>http://www.cnblogs.com/X-Jun/p/10066282.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/X-Jun/p/10066282.html</guid>
<description>&lt;p&gt;&lt;strong&gt;本文不考虑Effects11(FX11)，而是原始的HLSL语言。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该文章从教程02单独抽离出来作为单独的教程。&lt;/p&gt;
&lt;p&gt;目前编译与加载着色器的方法如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;使用Visual Studio中的HLSL编译器，随项目编译期间一同编译，并生成&lt;code&gt;.cso&lt;/code&gt;(Compiled Shader Object)对象文件，在运行期间加载该文件以读取字节码。&lt;/li&gt;
&lt;li&gt;使用Visual Studio中的HLSL编译器，随项目编译期间一同编译，并生成&lt;code&gt;.inc&lt;/code&gt;或&lt;code&gt;.h&lt;/code&gt;的头文件，着色器字节码在编译期间就可以确定。&lt;/li&gt;
&lt;li&gt;在程序运行期间编译着色器代码，并读取生成的字节码。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在个人的DX11项目中，使用的是方法1(优先)和方法3的混合形式。尽管方法2是最近了解到的，但个人目前并不考虑更换为该方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/X-Jun/p/9028764.html&quot;&gt;DirectX11 With Windows SDK完整目录&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎加入QQ群: 727623616 可以一起探讨DX11，以及有什么问题也可以在这里汇报。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了符合微软的约定，需要为你的着色器代码使用下面的扩展名(有所修改)：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;扩展名为&lt;code&gt;.hlsl&lt;/code&gt;的文件用于编写HLSL的源代码，参与编译&lt;/li&gt;
&lt;li&gt;扩展名为&lt;code&gt;.hlsli&lt;/code&gt;的文件作为HLSL的标头文件，不参与编译&lt;/li&gt;
&lt;li&gt;扩展名为&lt;code&gt;.cso&lt;/code&gt;的文件作为已编译的着色器对象(Compiled Shader Object)&lt;/li&gt;
&lt;li&gt;扩展名为&lt;code&gt;.inc&lt;/code&gt;或&lt;code&gt;.h&lt;/code&gt;的文件是C++的头文件，但它的内部包含了着色器的字节码，使用&lt;code&gt;BYTE&lt;/code&gt;数组来记录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在以Rendering a Triangle项目为例，现在我们已经编写好的着色器文件有&lt;code&gt;Triangle.hlsli&lt;/code&gt;, &lt;code&gt;Triangle_VS.hlsl&lt;/code&gt;, &lt;code&gt;Triangle_PS.hlsl&lt;/code&gt;这三个，可以将它拉进项目当中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1172605/201812/1172605-20181204185753974-381761738.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;Triangle.hlsli&lt;/code&gt;作为HLSL的头文件默认不参与项目的编译过程。&lt;/p&gt;
&lt;p&gt;而对于&lt;code&gt;Triangle_VS.hlsl&lt;/code&gt;和&lt;code&gt;Triangle_PS.hlsl&lt;/code&gt;，则在项目属性要这样设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1172605/201812/1172605-20181204190422570-1879878932.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1172605/201812/1172605-20181204190253001-1235721971.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;生成项目后，需要留意在输出窗口(生成)中是否出现了下面的内容：&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1172605/201812/1172605-20181204222348751-969630600.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只有出现了上述内容，才说明成功编译出对象文件，否则说明没有被编译出来。&lt;/strong&gt;如果你之前已经编译出对象文件，再编译时没有出现该输出结果，可能需要先删除之前编译出来的对象文件再试一次。&lt;/p&gt;
&lt;h2 id=&quot;d3dreadfiletoblob函数--读取编译好的着色器二进制信息&quot;&gt;D3DReadFileToBlob函数--读取编译好的着色器二进制信息&lt;/h2&gt;
&lt;p&gt;对着色器代码或文件的相关操作位于头文件&lt;code&gt;d3dcompiler.h&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们使用下面的函数来读取编译好的着色器二进制信息：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;HRESULT D3DReadFileToBlob(LPCWSTR pFileName,    // [In].cso文件名
                  ID3DBlob** ppContents);       // [Out]获取二进制大数据块&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：如果你的项目中不存在该函数，说明你可能预先包含了DX SDK，然而该教程使用的是Windows SDK，该函数位于D3DCompiler &amp;gt;= 46的版本，因此你需要剔除DX SDK的包含路径和库路径。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方式也十分简单(以创建顶点着色器和顶点布局为例)：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;ComPtr&amp;lt;ID3DBlob&amp;gt; blob;
HR(D3DReadFileToBlob(L&quot;HLSL\\Triangle_VS.cso&quot;, blob.GetAddressOf()));
HR(md3dDevice-&amp;gt;CreateVertexShader(blob-&amp;gt;GetBufferPointer(), blob-&amp;gt;GetBufferSize(), nullptr, mVertexShader.GetAddressOf()));
// 创建顶点布局
HR(md3dDevice-&amp;gt;CreateInputLayout(VertexPosColor::inputLayout, ARRAYSIZE(VertexPosColor::inputLayout),
    blob-&amp;gt;GetBufferPointer(), blob-&amp;gt;GetBufferSize(), mVertexLayout.GetAddressOf()));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后就可以拿获取到的&lt;code&gt;ID3DBlob&lt;/code&gt;来创建着色器了。创建着色器和顶点布局的部分在本文不进行讨论，请回到教程02继续查看。&lt;/p&gt;
&lt;p&gt;该方法的特点是会在你的项目文件夹中产生编译好的着色器二进制文件，并且需要你在程序运行的时候直接读进来。&lt;/p&gt;

&lt;p&gt;对于&lt;code&gt;Triangle_VS.hlsl&lt;/code&gt;和&lt;code&gt;Triangle_PS.hlsl&lt;/code&gt;，在项目属性要这样设置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1172605/201812/1172605-20181204211303433-1295523096.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1172605/201812/1172605-20181204211206978-1417874000.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里关于头文件的名称以及内部的全局变量名可以自行决定。&lt;/p&gt;
&lt;p&gt;头文件 经过编译后会在HLSL文件夹产生&lt;code&gt;Triangle_VS.inc&lt;/code&gt;和&lt;code&gt;Triangle_PS.inc&lt;/code&gt;两个文件，观察里面的代码你可以发现里面有汇编部分(不会包含进代码中)和一个全局变量，在&lt;code&gt;Triangle_VS.inc&lt;/code&gt;中产生的是全局变量&lt;code&gt;gTriangle_VS&lt;/code&gt;，而在&lt;code&gt;Triangle_PS.inc&lt;/code&gt;中产生的是全局变量&lt;code&gt;gTriangle_PS&lt;/code&gt;。这两个变量都是&lt;code&gt;BYTE&lt;/code&gt;数组，里面的内容正是编译好的字节码。&lt;/p&gt;
&lt;p&gt;现在需要在你需要编写创建着色器相关代码的源文件上面包含这两个头文件：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include &quot;HLSL/Triangle_VS.inc&quot;
#include &quot;HLSL/Triangle_PS.inc&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后创建顶点着色器和顶点布局的代码变成了这样：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;// 创建顶点着色器
HR(md3dDevice-&amp;gt;CreateVertexShader(gTriangle_VS, sizeof(gTriangle_VS), nullptr, mVertexShader.GetAddressOf()));
// 创建并绑定顶点布局
HR(md3dDevice-&amp;gt;CreateInputLayout(VertexPosColor::inputLayout, ARRAYSIZE(VertexPosColor::inputLayout),
    gTriangle_VS, sizeof(gTriangle_VS), mVertexLayout.GetAddressOf()));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来就可以生成整个项目了，需要留意是否有红色部分的输出，否则可能没有成功编译出&lt;code&gt;.inc&lt;/code&gt;文件(这可能会在已有&lt;code&gt;.inc&lt;/code&gt;文件再次编译的时候导致出现问题，需要删除原来的&lt;code&gt;.inc&lt;/code&gt;文件)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1172605/201812/1172605-20181204212958311-1494507690.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由于上述两个头文件的产生(即着色器的编译)先于项目的编译，在没有产生这两个头文件的时候，你也可以忍着编译错误先把上述代码添加进去，然后编译的时候就一切正常了。&lt;/p&gt;
&lt;p&gt;该方法的特点是所有的过程均在编译期完成，着色器字节码镶嵌在了你的应用程序内部，可能会导致应用程序变大。&lt;/p&gt;

&lt;p&gt;现在你需要了解这些函数&lt;/p&gt;
&lt;h2 id=&quot;d3dcompilefromfile函数--运行期编译.hlsl文件&quot;&gt;D3DCompileFromFile函数--运行期编译.hlsl文件&lt;/h2&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;HRESULT D3DCompileFromFile(
    LPCWSTR pFileName,                  // [In]要编译的.hlsl文件
    CONST D3D_SHADER_MACRO* pDefines,   // [In_Opt]忽略
    ID3DInclude* pInclude,              // [In_Opt]如何应对#include宏
    LPCSTR pEntrypoint,                 // [In]入口函数名
    LPCSTR pTarget,                     // [In]使用的着色器模型
    UINT Flags1,                        // [In]D3DCOMPILE系列宏
    UINT Flags2,                        // [In]D3DCOMPILE_FLAGS2系列宏
    ID3DBlob** ppCode,                  // [Out]获得着色器的二进制块
    ID3DBlob** ppErrorMsgs);            // [Out]可能会获得错误信息的二进制块&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;再次注意：如果你的项目中不存在该函数，说明你可能预先包含了DX SDK，然而该教程使用的是Windows SDK，该函数位于D3DCompiler &amp;gt;= 46的版本，因此你需要剔除DX SDK的包含路径和库路径。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;pInclude&lt;/code&gt;用于决定如何处理包含文件。如果设为&lt;code&gt;nullptr&lt;/code&gt;，则编译的着色器代码包含&lt;code&gt;#include&lt;/code&gt;时会引发编译器报错。如果你需要使用&lt;code&gt;#include&lt;/code&gt;，可以传递&lt;code&gt;D3D_COMPILE_STANDARD_FILE_INCLUDE&lt;/code&gt;宏，这是一个默认的包含句柄，可以按该着色器代码所处的相对路径去搜索对应的头文件并包含进来。&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#define D3D_COMPILE_STANDARD_FILE_INCLUDE ((ID3DInclude*)(UINT_PTR)1)&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;d3dwriteblobtofile函数--将编译好的着色器二进制信息写入文件&quot;&gt;D3DWriteBlobToFile函数--将编译好的着色器二进制信息写入文件&lt;/h2&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;HRESULT D3DWriteBlobToFile(
    ID3DBlob* pBlob,    // [In]编译好的着色器二进制块
    LPCWSTR pFileName,  // [In]输出文件名
    BOOL bOverwrite);   // [In]是否允许覆盖&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于&lt;code&gt;bOverwrite&lt;/code&gt;来说，无论是&lt;code&gt;TRUE&lt;/code&gt;还是&lt;code&gt;FALSE&lt;/code&gt;都无关紧要，因为我们只有在检测到没有编译好的着色器文件时才会启动运行期编译，然后再保存到文件。&lt;/p&gt;
&lt;p&gt;具体用法已经集成在下面的&lt;code&gt;CreateShaderFromFile&lt;/code&gt;函数中了&lt;/p&gt;

&lt;p&gt;下面是&lt;code&gt;CreateShaderFromFile&lt;/code&gt;函数的实现，&lt;strong&gt;现在该函数已经放到了d3dUtil.h中&lt;/strong&gt;，需要依赖&lt;code&gt;dxerr&lt;/code&gt;和标准库的&lt;code&gt;filesystem&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;// 该函数需要包含filesystem头文件，并using namespace std::experimental;(C++11/14)

// ------------------------------
// CreateShaderFromFile函数
// ------------------------------
// [In]objFileNameInOut 编译好的着色器二进制文件(.cso)，若有指定则优先寻找该文件并读取
// [In]hlslFileName     着色器代码，若未找到着色器二进制文件则编译着色器代码
// [In]entryPoint       入口点(指定开始的函数)
// [In]shaderModel      着色器模型，格式为&quot;*s_5_0&quot;，*可以为c,d,g,h,p,v之一
// [Out]ppBlobOut       输出着色器二进制信息
HRESULT CreateShaderFromFile(const WCHAR * objFileNameInOut, const WCHAR * hlslFileName, LPCSTR entryPoint, LPCSTR shaderModel, ID3DBlob ** ppBlobOut)
{
    HRESULT hr = S_OK;

    // 寻找是否有已经编译好的顶点着色器
    if (objFileNameInOut &amp;amp;&amp;amp; filesystem::exists(objFileNameInOut))
    {
        HR(D3DReadFileToBlob(objFileNameInOut, ppBlobOut));
    }
    else
    {
        DWORD dwShaderFlags = D3DCOMPILE_ENABLE_STRICTNESS;
#ifdef _DEBUG
        // 设置 D3DCOMPILE_DEBUG 标志用于获取着色器调试信息。该标志可以提升调试体验，
        // 但仍然允许着色器进行优化操作
        dwShaderFlags |= D3DCOMPILE_DEBUG;

        // 在Debug环境下禁用优化以避免出现一些不合理的情况
        dwShaderFlags |= D3DCOMPILE_SKIP_OPTIMIZATION;
#endif
        ComPtr&amp;lt;ID3DBlob&amp;gt; errorBlob = nullptr;
        hr = D3DCompileFromFile(hlslFileName, nullptr, D3D_COMPILE_STANDARD_FILE_INCLUDE, entryPoint, shaderModel,
            dwShaderFlags, 0, ppBlobOut, errorBlob.GetAddressOf());
        if (FAILED(hr))
        {
            if (errorBlob != nullptr)
            {
                OutputDebugStringA(reinterpret_cast&amp;lt;const char*&amp;gt;(errorBlob-&amp;gt;GetBufferPointer()));
            }
            return hr;
        }

        // 若指定了输出文件名，则将着色器二进制信息输出
        if (objFileNameInOut)
        {
            HR(D3DWriteBlobToFile(*ppBlobOut, objFileNameInOut, FALSE));
        }
    }

    return hr;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用方式如下：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;// 创建顶点着色器
HR(CreateShaderFromFile(L&quot;HLSL\\Triangle_VS.cso&quot;, L&quot;HLSL\\Triangle_VS.hlsl&quot;, &quot;VS&quot;, &quot;vs_5_0&quot;, blob.ReleaseAndGetAddressOf()));
HR(md3dDevice-&amp;gt;CreateVertexShader(blob-&amp;gt;GetBufferPointer(), blob-&amp;gt;GetBufferSize(), nullptr, mVertexShader.GetAddressOf()));
// 创建并绑定顶点布局
HR(md3dDevice-&amp;gt;CreateInputLayout(VertexPosColor::inputLayout, ARRAYSIZE(VertexPosColor::inputLayout),
    blob-&amp;gt;GetBufferPointer(), blob-&amp;gt;GetBufferSize(), mVertexLayout.GetAddressOf()));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/desktop/direct3dhlsl/dx-graphics-hlsl-part1#compiling-with-d3dcompilefromfile&quot;&gt;Compiling Shaders&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/desktop/direct3d11/how-to--compile-a-shader&quot;&gt;How To: Compile a Shader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/X-Jun/p/9028764.html&quot;&gt;DirectX11 With Windows SDK完整目录&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎加入QQ群: 727623616 可以一起探讨DX11，以及有什么问题也可以在这里汇报。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 04 Dec 2018 14:47:00 +0000</pubDate>
<dc:creator>X_Jun</dc:creator>
<og:description>前言 本文不考虑Effects11(FX11)，而是原始的HLSL语言。 该文章从教程02单独抽离出来作为单独的教程。 目前编译与加载着色器的方法如下： 1. 使用Visual Studio中的HLS</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/X-Jun/p/10066282.html</dc:identifier>
</item>
<item>
<title>HBase之Table.put客户端流程(续) - letsfly</title>
<link>http://www.cnblogs.com/letsfly/p/10067904.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/letsfly/p/10067904.html</guid>
<description>&lt;p&gt;　　上篇博文中已经谈到，有两个流程没有讲到。一个是MetaTableAccessor.getRegionLocations，另外一个是ConnectionImplementation.cacheLocation。这一节，就让我们单独来介绍这两个流程。&lt;/p&gt;
&lt;p&gt;　　首先让我们来到MetaTableAccessor.getRegionLocations。&lt;/p&gt;
&lt;p&gt;　　1.调用MetaTableAccessor.getRegionInfo，获取返回结果集中指定的列信息(info:regioninfo)的值。在这个方法的调用过程中，有一个知识点需要大家关注——Result.binarySearch。我将放在后面讲解。&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;　　2.然后调用了Result.getNoVersionMap。在这里，完成了对返回结果集的含version版本信息的封装与不含version版本信息的封装，同样，我将放在后面讲解。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204223820961-150749780.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;10&quot;&gt;　　首先让我们来到Result.binarySearch。大家可以看到这里使用的kvs[0]的rowKey，然后使用了传入的family(info)与qualifier(regioninfo)。大家可能比较迷惑，为什么这里的逻辑是这样的。原因很简单，因为这里传入的Cell数组的rowKey都是一样的，要利用Arrays.binarySearch搜索指定family:qualifier。因此首先使用这些信息构造了一个封装了以上信息的FirstOnRowColCell。这里需要注意的是，新建的cell.getTimestamp返回值为HConstants.LATEST_TIMESTAMP = Long.MAX_VALUE。这里，大家可能会对Arrays.binarySearch的返回值比较新奇，为什么结果是负值包括后面为什么有表达式(pos = (pos+1) * -1)。大家感兴趣的可以追一下源码，我只简单说一下结论。在调用Arrays.binarySearch方法时，如果所要搜索的数组中包含键，则返回键在该数组的位置，然而，如果数组中不包含键，那么就返回-(insertion point) - 1。这里的insertion point就是该数组中第一个元素大于键的索引位置(the index of the first element greater than the key)。如果大家还是不懂，在网上搜一下就明白了，我在这里就不详述了。后面通过表达式(pos = (pos+1) * -1)也就获取的Arrays.binarySearch后的insertion point。看到这里大家可能还有点迷惑，不过，相信我在介绍完CellComparatorImpl后，大家可能就恍然大悟了。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204223853384-1361404919.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;9&quot;&gt;　　接下来让我们来到CellComparatorImpl.compare方法。这里主要调用了compareRows与compareWithoutRow。compareRows比较简单，就是比较传入Cell的rowKey。真正重要的是compareWithoutRow。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204223907721-2086323227.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;　　接下来让我们来到CellComparatorImpl.compareWithoutRow方法。这里比较容易误会的是compareTimestamps。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204223939115-1571425592.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　接下来让我们来到CellComparatorImpl.compareTimestamps。正如截图中注释所说，交换顺序以实现将相同的family:qualifier按照时间戳的降序来排列(family与qualifier都是按照升序来排列的)。看到这里，相信大家就能够明白为什么构建的Cell时间戳为Long.MAX_VALUE。&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;　　不过，我还是在这里再简单介绍一下。上面我已经提到Arrays.binarySearch中insertion point是该数组中第一个元素大于键的索引位置(the index of the first element greater than the key)。假如，如果说这里的CellComparatorImpl.compareTimestamps为升序排列，那么，上面构造的key的insertion point为数组中相同family:qualifier的index + 1。而这里改为降序之后，构造的key的insertion point为数组中相同family:qualifier的index。而这个结果正是我们需要的。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204223957432-1752560056.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　到这里，大家可能就明白了Result.getColumnLatestCell方法的含义——获取指定family:qualifier中时间戳最接近Long.MAX_VALUE的cell。&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;　　接下来我插入一个知识点——Result.getMap与Result.getNoVersionMap。这里获取的是含version信息的列。通过其中的versionMap.put方法我们就可以知道，这里将不同version的value值保存在map中了。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204224026204-1253860976.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;9&quot;&gt;　　然后来到Result.getNoVersionMap。在这里获取的是不含version的列。由于上面在构造versionMap时传入的Comparator为倒序排序，因此，这里通过qualifierEntry.getValue().firstKey()获得的是最新版本的value。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204224041150-1448746812.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;10&quot;&gt;　　接下来，让我们来到本节中另外一个也是最后一个重要的方法ConnectionImplementation.cacheLocation。由于其主要调用了MetaCache.getCachedLocation，因此，我在这里贴出MetaCache.getCachedLocation源码，如下图所示。其中比较重要的方法是MetaCache.getTableLocations。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204224059593-879995886.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;10&quot;&gt;　　接下来让我们来到MetaCache.getTableLocations，如下图所示。如果看过我的上篇博文《HBase之Table.put客户端流程》，大家可能知道，我埋了一个伏笔，也就是这里的最后一个入参。上一篇中的与这里的入参类型不同，但是方法的调用流程是一样的，我就在这里详细讲解。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204224119571-103100170.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;　　上图中最后一个入参是java.util.function.Supplier。如下图所示。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204224134350-934548216.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;11&quot;&gt;　　上图中的最后一个入参类型是Runnable。看到这里，大家可能就明白了。如果在MetaCache.cachedRegionLocations中并没有相应的key,value对，那么就会调用supplier.get方法，也就是getTableLocations的最后一个入参，重新构建一个CopyOnWriteArrayMap，并且将内部的比较器设置为Bytes.BYTES_COMPARATOR。然后将其放到MetaCache.cachedRegionLocations。&lt;img src=&quot;https://img2018.cnblogs.com/blog/1365945/201812/1365945-20181204224157739-1993533866.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　到此为止，完整的《HBase之Table.put客户端流程》就结束了。大家如果有什么疑问或者大数据相关的问题可以发送至我的邮箱15935152719@163. com。&lt;/p&gt;
&lt;p&gt;　　从下一节起，也就是本周末，我将为大家带来HBase的第二章内容——Hbase之Client协议。届时，Client协议中的服务端与客户端的完整流程将为大家一一奉上。如果比较关注其中的内容可以关注我，或者成为我的粉丝，都是就可以及时收到更新啦。&lt;/p&gt;
</description>
<pubDate>Tue, 04 Dec 2018 14:46:00 +0000</pubDate>
<dc:creator>letsfly</dc:creator>
<og:description>上篇博文中已经谈到，有两个流程没有讲到。一个是MetaTableAccessor.getRegionLocations，另外一个是ConnectionImplementation.cacheLocat</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/letsfly/p/10067904.html</dc:identifier>
</item>
<item>
<title>ffmpeg滤波 - TaigaComplex</title>
<link>http://www.cnblogs.com/TaigaCon/p/10067871.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/TaigaCon/p/10067871.html</guid>
<description>&lt;p&gt;ffmpeg中有很多已经实现好的滤波器，这些滤波器的实现位于libavfilter目录之下，用户需要进行滤波时，就是是调用这些滤波器来实现的。ffmpeg对于调用滤波器有一整套的调用机制。&lt;/p&gt;


&lt;p&gt;我们把一整个滤波的流程称为滤波过程。下面是一个滤波过程的结构&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/421096/201812/421096-20181204223756314-1729090881.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/421096/201812/421096-20181204223756753-1114531886.png&quot; alt=&quot;image&quot; width=&quot;600&quot; height=&quot;288&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图中简要指示出了滤波所用到的各个结构体，各个结构体有如下作用：&lt;/p&gt;
&lt;table class=&quot;List&quot;&gt;&lt;tbody readability=&quot;13&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;AVFilterGraph&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;用于统合这整个滤波过程的结构体。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;AVFilter&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;滤波器，滤波器的实现是通过AVFilter以及位于其下的结构体/函数来维护的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;strong&gt;AVFilterContext&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;一个滤波器实例，即使是同一个滤波器，但是在进行实际的滤波时，也会由于输入的参数不同而有不同的滤波效果，AVFilterContext就是在实际进行滤波时用于维护滤波相关信息的实体。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;strong&gt;AVFilterLink&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;滤波器链，作用主要是用于连接相邻的两个AVFilterContext。为了实现一个滤波过程，可能会需要多个滤波器协同完成，即一个滤波器的输出可能会是另一个滤波器的输入，AVFilterLink的作用是串联两个相邻的滤波器实例，形成两个滤波器之间的通道。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;strong&gt;AVFilterPad&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;滤波器的输入输出端口，一个滤波器可以有多个输入以及多个输出端口，相邻滤波器之间是通过AVFilterLink来串联的，而位于AVFilterLink两端的分别就是前一个滤波器的输出端口以及后一个滤波器的输入端口。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;&lt;strong&gt;buffersrc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;一个特殊的滤波器，这个滤波器的作用就是充当整个滤波过程的入口，通过调用该滤波器提供的函数（如av_buffersrc_add_frame）可以把需要滤波的帧传输进入滤波过程。在创建该滤波器实例的时候需要提供一些关于所输入的帧的格式的必要参数（如：time_base、图像的宽高、图像像素格式等）。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;strong&gt;buffersink&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;一个特殊的滤波器，这个滤波器的作用就是充当整个滤波过程的出口，通过调用该滤波器提供的函数（如av_buffersink_get_frame）可以提取出被滤波过程滤波完成后的帧。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;创建整个滤波过程包含以下步骤：&lt;/p&gt;
&lt;p&gt;首先需要得到整个滤波过程所需的滤波器（AVFilter），其中buffersrc以及buffersink是作为输入以及输出所必须的两个滤波器。&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    const AVFilter *buffersrc  = avfilter_get_by_name(&quot;buffer&quot;);
    const AVFilter *buffersink = avfilter_get_by_name(&quot;buffersink&quot;);
    const AVFilter *myfilter   = avfilter_get_by_name(&quot;myfilter&quot;);
&lt;/pre&gt;
&lt;p&gt;创建统合整个滤波过程的滤波图结构体（AVFilterGraph）&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    filter_graph = avfilter_graph_alloc();
&lt;/pre&gt;
&lt;p&gt;创建用于维护滤波相关信息的滤波器实例（AVFilterContext）&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    AVFilterContext *in_video_filter = NULL;
    AVFilterContext *out_video_filter = NULL;
    AVFilterContext *my_video_filter = NULL;
    avfilter_graph_create_filter(&amp;amp;in_video_filter, buffersrc, &quot;in&quot;, args, NULL, filter_graph);
    avfilter_graph_create_filter(&amp;amp;out_video_filter, buffersink, &quot;out&quot;, NULL, NULL, filter_graph);
    avfilter_graph_create_filter(&amp;amp;my_video_filter, myfilter, &quot;myfilter&quot;, NULL, NULL, filter_graph);
&lt;/pre&gt;
&lt;p&gt;用AVFilterLink把相邻的两个滤波实例连接起来&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    avfilter_link(in_video_filter, 0, my_video_filter, 0);
    avfilter_link(my_video_filter, 0, out_video_filter, 0);
&lt;/pre&gt;
&lt;p&gt;提交整个滤波图&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    avfilter_graph_config(filter_graph, NULL);
&lt;/pre&gt;



&lt;p&gt;当滤波过程复杂到一定程度时，即需要多个滤波器进行复杂的连接来实现整个滤波过程，这时候对于调用者来说，继续采用上述方法来构建滤波图就显得不够效率。对于复杂的滤波过程，ffmpeg提供了一个更为方便的滤波过程创建方式。&lt;/p&gt;
&lt;p&gt;这种复杂的滤波器过程创建方式要求用户以字符串的方式描述各个滤波器之间的关系。如下是一个描述复杂滤波过程的字符串的例子：&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    [0]trim=start_frame=10:end_frame=20[v0];\
    [0]trim=start_frame=30:end_frame=40[v1];\
    [v0][v1]concat=n=2[v2];\
    [1]hflip[v3];\
    [v2][v3]overlay=eof_action=repeat[v4];\
    [v4]drawbox=50:50:120:120:red:t=5[v5]
&lt;/pre&gt;
&lt;p&gt;以上是一个连续的字符串，为了方便分析我们把该字符串进行了划分，每一行都是一个滤波器实例，对于一行：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;开头是一对中括号，中括号内的是输入的标识名0。&lt;/li&gt;
&lt;li&gt;中括号后面接着的是滤波器名称trim。&lt;/li&gt;
&lt;li&gt;名称后的第一个等号后面是滤波器参数start_frame=10:end_frame=20，这里有两组参数，两组参数用冒号分开。&lt;/li&gt;
&lt;li&gt;第一组参数名称为start_frame，参数值为10，中间用等号分开。&lt;/li&gt;
&lt;li&gt;第二组参数名称为end_frame，参数值为20，中间用等号分开。&lt;/li&gt;
&lt;li&gt;最后也有一对中括号，中括号内的是输出的标识名v0。&lt;/li&gt;
&lt;li&gt;如果一个滤波实例的输入标识名与另一个滤波实例的输出标识名相同，则表示这两个滤波实例构成滤波链。&lt;/li&gt;
&lt;li&gt;如果一个滤波实例的输入标识名或者输出标识名一直没有与其它滤波实例的输出标识名或者输入标识名相同，则表明这些为外部的输入输出，通常我们会为其接上buffersrc以及buffersink。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;按照这种规则，上面的滤波过程可以被描绘成以下滤波图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2018.cnblogs.com/blog/421096/201812/421096-20181204223757339-827168815.png&quot;&gt;&lt;img title=&quot;image&quot; src=&quot;https://img2018.cnblogs.com/blog/421096/201812/421096-20181204223757791-1107112009.png&quot; alt=&quot;image&quot; width=&quot;600&quot; height=&quot;407&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ffmpeg提供一个函数用于解析这种字符串：&lt;a href=&quot;https://ffmpeg.org/doxygen/3.3/group__lavfi.html#ga6c3c39e0861653c71a23f90d1397239d&quot;&gt;avfilter_graph_parse2&lt;/a&gt;。这个函数会把输入的字符串生成如上面的滤波图，不过我们需要自行生成buffersrc以及buffersink的实例，并通过该函数提供的输入以及输出接口把buffersrc、buffersink与该滤波图连接起来。整个流程包含以下步骤：&lt;/p&gt;
&lt;p&gt;创建统合整个滤波过程的滤波图结构体（AVFilterGraph）&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    filter_graph = avfilter_graph_alloc();
&lt;/pre&gt;
&lt;p&gt;解析字符串，并构建该字符串所描述的滤波图&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    avfilter_graph_parse2(filter_graph, graph_desc, &amp;amp;inputs, &amp;amp;outputs);
&lt;/pre&gt;
&lt;p&gt;其中inputs与outputs分别为输入与输出的接口集合，我们需要为这些接口接上输入以及输出。&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    for (cur = inputs, i = 0; cur; cur = cur-&amp;gt;next, i++) {
        const AVFilter *buffersrc = avfilter_get_by_name(&quot;buffer&quot;);
        avfilter_graph_create_filter(&amp;amp;filter, buffersrc, name, args, NULL, filter_graph);
        avfilter_link(filter, 0, cur-&amp;gt;filter_ctx, cur-&amp;gt;pad_idx);
    }
    avfilter_inout_free(&amp;amp;inputs);

    for (cur = outputs, i = 0; cur; cur = cur-&amp;gt;next, i++) {
        const AVFilter *buffersink = avfilter_get_by_name(&quot;buffersink&quot;);
        avfilter_graph_create_filter(&amp;amp;filter, buffersink, name, NULL, NULL, filter_graph);
        avfilter_link(cur-&amp;gt;filter_ctx, cur-&amp;gt;pad_idx, filter, 0);
    }
    avfilter_inout_free(&amp;amp;outputs);
&lt;/pre&gt;
&lt;p&gt;提交整个滤波图&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    avfilter_graph_config(filter_graph, NULL);
&lt;/pre&gt;



&lt;p&gt;上面主要讨论了如何创建滤波过程，不过要进行滤波还需要把帧传输进入该过程，并在滤波完成后从该过程中提取出滤波完成的帧。&lt;/p&gt;
&lt;p&gt;buffersrc提供了向滤波过程输入帧的API：&lt;a href=&quot;https://ffmpeg.org/doxygen/3.3/group__lavfi__buffersrc.html#ga8fc71cb48c1ad1aa78b48f87daa4cf19&quot;&gt;av_buffersrc_add_frame&lt;/a&gt;。向指定的buffersrc实例输入想要进行滤波的帧就可以把帧传入滤波过程。&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    av_buffersrc_add_frame(c-&amp;gt;in_filter, pFrame);
&lt;/pre&gt;
&lt;p&gt;buffersink提供了从滤波过程提取帧的API：&lt;a href=&quot;https://ffmpeg.org/doxygen/3.3/group__lavfi__buffersink.html#ga653228f4cbca427c654d844a5fc59cfa&quot;&gt;av_buffersink_get_frame&lt;/a&gt;。可以从指定的buffersink实例提取滤波完成的帧。&lt;/p&gt;
&lt;pre class=&quot;brush: js; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
    av_buffersink_get_frame(c-&amp;gt;out_filter, pFrame);
&lt;/pre&gt;
&lt;p&gt;当av_buffersink_get_frame返回值大于0则表示提取成功。&lt;/p&gt;
</description>
<pubDate>Tue, 04 Dec 2018 14:38:00 +0000</pubDate>
<dc:creator>TaigaComplex</dc:creator>
<og:description>ffmpeg中有很多已经实现好的滤波器，这些滤波器的实现位于libavfilter目录之下，用户需要进行滤波时，就是是调用这些滤波器来实现的。ffmpeg对于调用滤波器有一整套的调用机制。 基本结构</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/TaigaCon/p/10067871.html</dc:identifier>
</item>
<item>
<title>SpringMVC学习笔记_01 - pony1223</title>
<link>http://www.cnblogs.com/pony1223/p/10067721.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pony1223/p/10067721.html</guid>
<description>&lt;p&gt;&lt;strong&gt;（1）使用eclipse，创建一个动态的web工程&lt;/strong&gt;&lt;br/&gt;  其中Dynamic web module version版本选择 &lt;code&gt;2.5&lt;/code&gt;，这样兼容性好一些；&lt;br/&gt;  Default output folder设置为 &lt;code&gt;WebRoot\WEB-INF\classes&lt;/code&gt;；&lt;br/&gt;  Content directory设置为 &lt;code&gt;WebRoot&lt;/code&gt;；&lt;br/&gt;  更改JRE System Library[J2SE-1.5]为 &lt;code&gt;JRE System Library[jre1.7.0_80]&lt;/code&gt;；&lt;br/&gt;  删掉没用的库：&lt;code&gt;EAR Libraries&lt;/code&gt;；&lt;br/&gt;  增加服务器运行环境库 &lt;code&gt;Server Runtime&lt;/code&gt;，不然jsp文件会报错。&lt;/p&gt;&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XOg0H.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;  创建完项目后，将整个项目的编码改为UTF-8。&lt;br/&gt;  操作步骤：选中项目右键 --&amp;gt; Properties --&amp;gt; Resource --&amp;gt; Text file encoding --&amp;gt; Other中选择UTF-8。&lt;/p&gt;&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;　　对于&lt;strong&gt;动态的java web项目&lt;/strong&gt;，为了工程目录结构的清爽，我们将引入的jar包放到“&lt;strong&gt;Web App Libraries&lt;/strong&gt;”中，可以通过“&lt;strong&gt;小三角&lt;/strong&gt;”选择是否“&lt;strong&gt;Show 'Referenced Libraries' Node&lt;/strong&gt; ”进行调节。&lt;br/&gt;　　对于&lt;strong&gt;普通的java项目&lt;/strong&gt;，为了工程目录结构的清爽，我们将引入的jar包放到“&lt;strong&gt;Referenced Libraries&lt;/strong&gt;”中，可以通过“&lt;strong&gt;小三角&lt;/strong&gt;”选择是否“&lt;strong&gt;Show 'Referenced Libraries' Node&lt;/strong&gt; ”进行调节。&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;287.92706090921&quot;&gt;
&lt;p&gt;&lt;strong&gt;（2）导入springmvc的jar包&lt;/strong&gt;&lt;br/&gt;  本案例共16个jar，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XOnPN.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;（3）在web.xml配置前端控制器：DispatcherServlet（入口）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  我们还需要配置springmvc.xml文件的初始化参数，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5Xb34A.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;（4）配置springmvc.xml&lt;/strong&gt;&lt;br/&gt;  参考文件位置：spring-framework-3.2.0.RELEASE\docs\spring-framework-reference\html\xsd-config.html&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans &lt;span class=&quot;hljs-attr&quot;&gt;xmlns=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:mvc=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/mvc&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:tx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/mvc &lt;br/&gt;http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/tx &lt;br/&gt;http://www.springframework.org/schema/tx/spring-tx-3.2.xsd &quot;&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（5）自定义Controller（相当于Struts2里面的Action）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;UserController &lt;span class=&quot;hljs-keyword&quot; readability=&quot;2&quot;&gt;implements &lt;span class=&quot;hljs-title&quot; readability=&quot;4&quot;&gt;Controller {&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public ModelAndView &lt;span class=&quot;hljs-title&quot;&gt;handleRequest&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response) &lt;span class=&quot;hljs-keyword&quot;&gt;throws Exception {&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return mv;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（6）定义视图页面&lt;/strong&gt;&lt;br/&gt;  根据视图解析路径：WEB-INF/jsps/index.jsp&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&amp;gt;${hello}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（7）浏览器访问&lt;/strong&gt;&lt;br/&gt;  访问地址：http://localhost:8080/day63_SpringMVC_01/hello.do&lt;/p&gt;
&lt;h2 id=&quot;h4springmvc&quot;&gt;4、根据程序分析springmvc执行流程(画图)&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;该图同SpringMVC执行流程图（运行原理）&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h5&quot;&gt;5、处理器映射器&lt;/h2&gt;

&lt;h3 id=&quot;h51beannameurlhandlermapping&quot;&gt;5.1、配置默认处理器映射器(BeanNameUrlHandlerMapping)&lt;/h3&gt;
&lt;p&gt;功能：寻找Controller&lt;br/&gt;   根据url请求去匹配bean的name属性url，从而获取Controller&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XOwT9.png&quot; alt=&quot;&quot;/&gt;
&lt;h3 id=&quot;h52simplehandlermapping&quot;&gt;5.2、配置集中处理器映射器(SimpleHandlerMapping)&lt;/h3&gt;
&lt;p&gt;功能：寻找Controller&lt;br/&gt;   根据浏览器url匹配简单url的key，key通过Controller的id找到Controller&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5Xb56O.png&quot; alt=&quot;&quot;/&gt;
&lt;h3 id=&quot;h53classnamehandlermapping&quot;&gt;5.3、配置类名处理器映射器(ClassNameHandlerMapping)&lt;/h3&gt;
&lt;p&gt;功能：寻找Controller&lt;br/&gt;   直接根据类名（UserController），类名.do来访问，类名首字母小写&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbD3q.png&quot; alt=&quot;&quot;/&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;3个处理器映射器可以共存。均可以访问成功。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h6&quot;&gt;6、处理器适配器&lt;/h2&gt;

&lt;h3 id=&quot;h61simplecontrollerhandleradapt&quot;&gt;6.1、配置默认处理器适配器(SimpleControllerHandlerAdapt)&lt;/h3&gt;
&lt;p&gt;功能：执行Controller&lt;br/&gt;   负责执行实现了Controller接口的后端控制器，例如：UserController，调用Controller里面的方法，返回ModelAndView。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbFed.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;默认处理器适配器源码分析，如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbX0r.png&quot; alt=&quot;&quot;/&gt;
&lt;h3 id=&quot;h62httprequesthandleradapter&quot;&gt;6.2、配置请求处理器适配器(HttpRequestHandlerAdapter)&lt;/h3&gt;
&lt;p&gt;功能：执行Controller&lt;br/&gt;   负责执行实现了HttpRequestHandler接口的后端控制器。&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbBMe.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;演示过程：&lt;br/&gt;  自定义实现了接口HttpRequestHandler的实现类HttpController，如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbHRR.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;  在springmvc.xml中配置自定义的bean，即自定义的HttpController，如下图所示：&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbmaY.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;  &lt;strong&gt;&lt;code&gt;上面的这种方式无限接近servlet的开发。&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;2个处理器适配器可以共存。&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h7&quot;&gt;7、命令控制器&lt;/h2&gt;

&lt;h3 id=&quot;h71controller&quot;&gt;7.1、Controller简介&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;1、收集、验证请求参数并绑定到命令对象；&lt;br/&gt;2、将命令对象交给业务对象，由业务对象处理并返回模型数据；&lt;br/&gt;3、返回ModelAndView（Model部分是业务对象返回的模型数据，视图部分是逻辑视图名）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;普通控制器(继承接口Controller，继承接口HttpRequestHandler)&lt;/li&gt;
&lt;li&gt;命令控制器(继承抽象类AbstractCommandController)
&lt;ul&gt;&lt;li&gt;例子：跳转到添加页面，进行页面跳转，参数提交get请求或者post请求&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;参数控制器(类ParameterizableViewController)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Springmvc通过&lt;code&gt;命令设计模式&lt;/code&gt;接受页面参数。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;h72&quot;&gt;7.2、演示：自定义命令控制器&lt;/h3&gt;
&lt;p&gt;示例如下：&lt;br/&gt;（1）自定义命令控制器&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;6.5&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;13&quot;&gt;package com.itheima.controller;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import javax.servlet.http.HttpServletRequest;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import javax.servlet.http.HttpServletResponse;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.validation.BindException;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.web.servlet.ModelAndView;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.web.servlet.mvc.AbstractCommandController;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import com.itheima.domain.User;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;protected ModelAndView &lt;span class=&quot;hljs-title&quot;&gt;handle&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response, Object command,&lt;br/&gt;BindException errors) &lt;span class=&quot;hljs-keyword&quot;&gt;throws Exception {&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return mv;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（2）定义javaBean&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;8&quot;&gt;package com.itheima.domain;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import java.util.Date;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;User {&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private Integer id;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private String username;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private String age;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private Date birthday;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private String address;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Integer &lt;span class=&quot;hljs-title&quot;&gt;getId&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return id;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setId&lt;span class=&quot;hljs-params&quot;&gt;(Integer id) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.id = id;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;getUsername&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return username;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setUsername&lt;span class=&quot;hljs-params&quot;&gt;(String username) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.username = username;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;getAge&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return age;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setAge&lt;span class=&quot;hljs-params&quot;&gt;(String age) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.age = age;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Date &lt;span class=&quot;hljs-title&quot;&gt;getBirthday&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return birthday;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setBirthday&lt;span class=&quot;hljs-params&quot;&gt;(Date birthday) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.birthday = birthday;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;getAddress&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return address;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setAddress&lt;span class=&quot;hljs-params&quot;&gt;(String address) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.address = address;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（3）封装参数页面&lt;br/&gt;  文件位置：/day63_SpringMVC_01/WebRoot/WEB-INF/jsps/add.jsp&lt;br/&gt;add.jsp&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%@ &lt;span class=&quot;hljs-attr&quot;&gt;page &lt;span class=&quot;hljs-attr&quot;&gt;language=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot; &lt;span class=&quot;hljs-attr&quot;&gt;contentType=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;pageEncoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;%&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot; &lt;span class=&quot;hljs-attr&quot;&gt;content=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;Insert title here&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form &lt;span class=&quot;hljs-attr&quot;&gt;action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/command.do&quot; &lt;span class=&quot;hljs-attr&quot;&gt;method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&amp;gt;&lt;br/&gt;姓名：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;年龄：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;生日：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;birthday&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;birthday&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;地址：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;提交&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（4）获取参数页面&lt;br/&gt;  文件位置：/day63_SpringMVC_01/WebRoot/WEB-INF/jsps/index.jsp&lt;br/&gt;index.jsp&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%@ &lt;span class=&quot;hljs-attr&quot;&gt;page &lt;span class=&quot;hljs-attr&quot;&gt;language=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot; &lt;span class=&quot;hljs-attr&quot;&gt;contentType=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;pageEncoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;%&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot; &lt;span class=&quot;hljs-attr&quot;&gt;content=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;Insert title here&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&amp;gt;${user.username}---${user.age}---${user.birthday}---${user.address}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（5）跳转到add页面&lt;br/&gt;  由于add页面在WEB-INF下面不能直接访问，需要通过Controller来访问。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;5.5&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;11&quot;&gt;package com.itheima.controller;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import javax.servlet.http.HttpServletRequest;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import javax.servlet.http.HttpServletResponse;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.web.servlet.ModelAndView;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import org.springframework.web.servlet.mvc.Controller;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;ToAddController &lt;span class=&quot;hljs-keyword&quot;&gt;implements &lt;span class=&quot;hljs-title&quot;&gt;Controller {&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public ModelAndView &lt;span class=&quot;hljs-title&quot;&gt;handleRequest&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response) &lt;span class=&quot;hljs-keyword&quot;&gt;throws Exception {&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return mv;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;（6）在springmvc.xml中配置bean&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;h73&quot;&gt;7.3、中文乱码解决&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;（1）解决get请求乱码&lt;/strong&gt;&lt;br/&gt;  配置tomcat的编码，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5Xb0JX.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;（2）解决post请求乱码&lt;/strong&gt;&lt;br/&gt;  在web.xml中，配置spring编码过滤器，如下所示：
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;h74&quot;&gt;7.4、时间类型转换&lt;/h3&gt;
&lt;p&gt;  在CommandController类中重写initBinder()方法，示例代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;/&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;h75parameterizableviewcontroller&quot;&gt;7.5、参数控制器ParameterizableViewController&lt;/h3&gt;
&lt;p&gt;  在springmvc.xml中配置参数控制器&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbzSi.png&quot; alt=&quot;&quot;/&gt;&lt;ul&gt;&lt;li&gt;注意：使用参数控制器：不用自己定义Controller了，可以直接使用toIndex.do进行访问。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h8&quot;&gt;8、注解开发&lt;/h2&gt;

&lt;h3 id=&quot;h81&quot;&gt;8.1、注解开发第一个入门程序&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;步骤如下：
&lt;ul&gt;&lt;li&gt;创建一个动态的web工程，导入jar文件&lt;/li&gt;
&lt;li&gt;配置web.xml&lt;/li&gt;
&lt;li&gt;配置springmvc.xml文件：配置处理器映射器、配置处理器适配器、配置jsp视图解析器&lt;/li&gt;
&lt;li&gt;自定义Controller类，使用注解开发：添加，返回到成功页面进行回显，点击修改回到添加页面，初步理解参数传递。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;（1）创建一个动态的web工程，导入jar文件&lt;/strong&gt;&lt;br/&gt;  详细过程同&lt;code&gt;3、springmvc第一个程序案例&lt;/code&gt;&lt;br/&gt;&lt;strong&gt;（2）配置web.xml&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;web-app &lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;WebApp_ID&quot; &lt;span class=&quot;hljs-attr&quot;&gt;version=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2.5&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;display-name&amp;gt;day63_SpringMVC_01&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;display-name&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（3）配置springmvc.xml文件&lt;/strong&gt;&lt;br/&gt;  配置扫描，把Controller交给spring管理、配置处理器映射器、配置处理器适配器、配置jsp视图解析器&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans &lt;span class=&quot;hljs-attr&quot;&gt;xmlns=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:mvc=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/mvc&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot; &lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:tx=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/mvc &lt;br/&gt;http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop-3.2.xsd &lt;br/&gt;http://www.springframework.org/schema/tx &lt;br/&gt;http://www.springframework.org/schema/tx/spring-tx-3.2.xsd &quot;&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（4）自定义Controller类&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（5）定义hello页面&lt;/strong&gt;&lt;br/&gt;  根据视图解析，需要在WEB-INF下面定义jsps文件夹，在里面定义一个hello.jsp&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%@ &lt;span class=&quot;hljs-attr&quot;&gt;page &lt;span class=&quot;hljs-attr&quot;&gt;language=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot; &lt;span class=&quot;hljs-attr&quot;&gt;contentType=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;pageEncoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;%&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot; &lt;span class=&quot;hljs-attr&quot;&gt;content=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;Insert title here&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h1&amp;gt;欢迎访问SpringMVC&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h1&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（6）访问地址：http://localhost:8080/day63_SpringMVC_02/user/hello.do&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;h82&quot;&gt;8.2、注解开发流程图&lt;/h3&gt;
&lt;p&gt;注解开发流程图如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbYTy.png&quot; alt=&quot;&quot;/&gt;
&lt;h3 id=&quot;h83requestmapping&quot;&gt;8.3、RequestMapping&lt;/h3&gt;
&lt;p&gt;功能：请求映射&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;几种写法：&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;hello&quot;) -- 这种方式可以匹配任何的扩展名&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;/hello.do&quot;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(value=&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;/hello.do&quot;)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(value=&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;/hello.do&quot;,method=RequestMethod.GET)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(value=&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;/hello.do&quot;,method=RequestMethod.POST)&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(value=&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;/hello.do&quot;, method={RequestMethod.GET,RequestMethod.POST})&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  浏览器直接访问、a标签都是get请求。&lt;br/&gt;  表单提交(指定post)、ajax指定post提交。&lt;br/&gt;  如果是get请求，写成了post浏览器会报405错误，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbbQ3.png&quot; alt=&quot;&quot;/&gt;
&lt;h3 id=&quot;h84requestmapping&quot;&gt;8.4、RequestMapping的根路径&lt;/h3&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;/user&quot;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class &lt;span class=&quot;hljs-title&quot;&gt;UserController {&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;save&quot;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String save() {&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;update&quot;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String update() {&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;find&quot;)&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String find() {&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;访问地址：http:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;演示：自定义根路径&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;访问地址：http://localhost:8080/day63_SpringMVC_02/user/hello.do&lt;/p&gt;

&lt;h3 id=&quot;h85requestparam&quot;&gt;8.5、RequestParam&lt;/h3&gt;
&lt;p&gt;  value：参数名字，即入参的请求参数名字，如&lt;code&gt;value=&quot;studentid&quot;&lt;/code&gt;表示请求的参数区中的名字为studentid的参数的值将传入。&lt;br/&gt;  required：是否必须，默认是true，表示&lt;code&gt;请求中一定要有相应的参数&lt;/code&gt;，否则将报400错误码。&lt;br/&gt;  defaultValue：默认值，表示如果&lt;code&gt;请求中没有同名参数时的默认值&lt;/code&gt;。&lt;br/&gt;示例如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;userList(&lt;span class=&quot;hljs-params&quot;&gt;@RequestParam(defaultValue=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;,&lt;span class=&quot;hljs-keyword&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;group&quot;,required=&lt;span class=&quot;hljs-literal&quot;&gt;true) String groupid) {&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;1、形参名称为groupid，但是这里使用&lt;span class=&quot;hljs-keyword&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;group&quot;限定参数名为&lt;span class=&quot;hljs-keyword&quot;&gt;group，所以页面传递参数的名必须为&lt;span class=&quot;hljs-keyword&quot;&gt;group。&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;2、这里通过required=&lt;span class=&quot;hljs-literal&quot;&gt;true限定groupid参数为必需传递，如果不传递则报&lt;span class=&quot;hljs-number&quot;&gt;400错误，由于使用了defaultvalue=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;默认值，即使不传&lt;span class=&quot;hljs-keyword&quot;&gt;group参数它的值仍为&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;。&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3、所以页面不传递&lt;span class=&quot;hljs-keyword&quot;&gt;group也不会报错，如果去掉defaultvalue=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot;且定义required=&lt;span class=&quot;hljs-literal&quot;&gt;true，则如果页面不传递&lt;span class=&quot;hljs-keyword&quot;&gt;group就会报错。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;示例如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbQ6l.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;  &lt;code&gt;@RequestParam的作用：给传递的参数起别名。&lt;/code&gt;
&lt;h2 id=&quot;h9&quot;&gt;9、封装参数&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;springmvc没有成员变量，那页面提交过来的参数该如何接收和进行传递呢？&lt;/li&gt;
&lt;li&gt;答：把需要传递的参数对象放入方法里面，当你请求这个方法，向这个方法传递参数的时候，这个方法里面的对象会自动被创建，需要的参数会自动被封装到方法的对象里面。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;分析接受参数类型：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs dart&quot;&gt;基本类型&lt;br/&gt;&lt;span class=&quot;hljs-built_in&quot; readability=&quot;2.5&quot;&gt;int、&lt;span class=&quot;hljs-built_in&quot; readability=&quot;5&quot;&gt;String等基本类型。&lt;br/&gt;Pojo类型&lt;br/&gt;包装类型&lt;br/&gt;集合类型&lt;p&gt;Springmvc默认支持类型：&lt;br/&gt;HttpSession、HttpRequstServlet、Model等等。&lt;/p&gt;&lt;p&gt;Struts2参数封装：基于属性驱动封装。&lt;br/&gt;Springmvc参数封装：基于方法进行封装。&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;h91int&quot;&gt;9.1、封装int类型参数&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;页面传递的参数都是字符串。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;hr &lt;span class=&quot;hljs-attr&quot;&gt;size=&lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot; &lt;span class=&quot;hljs-attr&quot;&gt;color=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form &lt;span class=&quot;hljs-attr&quot;&gt;action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/user/recieveInt.do&quot; &lt;span class=&quot;hljs-attr&quot;&gt;method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&amp;gt;&lt;br/&gt;ID：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;提交&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;特别注意：&lt;/strong&gt;&lt;strong&gt;&lt;code&gt;标签input的name的属性值id要与方法的形式参数名称id相同。&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;h92string&quot;&gt;9.2、封装String类型参数&lt;/h3&gt;
&lt;p&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;hr &lt;span class=&quot;hljs-attr&quot;&gt;size=&lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot; &lt;span class=&quot;hljs-attr&quot;&gt;color=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form &lt;span class=&quot;hljs-attr&quot;&gt;action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/user/recieveString.do&quot; &lt;span class=&quot;hljs-attr&quot;&gt;method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&amp;gt;&lt;br/&gt;姓名：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;提交&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;h93&quot;&gt;9.3、封装数组类型参数&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;code&gt;封装数组是批量删除时使用，使用checkbox复选框，其value属性必须有值。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;hr &lt;span class=&quot;hljs-attr&quot;&gt;size=&lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot; &lt;span class=&quot;hljs-attr&quot;&gt;color=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form &lt;span class=&quot;hljs-attr&quot;&gt;action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/user/recieveArray.do&quot; &lt;span class=&quot;hljs-attr&quot;&gt;method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&amp;gt;&lt;br/&gt;ID：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ids&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ids&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;ID：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ids&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;2&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ids&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;ID：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;checkbox&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ids&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;3&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ids&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;提交&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;h94pojo&quot;&gt;9.4、封装pojo类型参数&lt;/h3&gt;
&lt;p&gt;创建一个pojo类：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;6&quot;&gt;class &lt;span class=&quot;hljs-title&quot; readability=&quot;12&quot;&gt;User {&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private Integer id;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private String username;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private String age;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private Date birthday;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private String address;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Integer &lt;span class=&quot;hljs-title&quot;&gt;getId&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return id;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setId&lt;span class=&quot;hljs-params&quot;&gt;(Integer id) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.id = id;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;getUsername&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return username;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setUsername&lt;span class=&quot;hljs-params&quot;&gt;(String username) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.username = username;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;getAge&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return age;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setAge&lt;span class=&quot;hljs-params&quot;&gt;(String age) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.age = age;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public Date &lt;span class=&quot;hljs-title&quot;&gt;getBirthday&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return birthday;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setBirthday&lt;span class=&quot;hljs-params&quot;&gt;(Date birthday) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.birthday = birthday;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;getAddress&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return address;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setAddress&lt;span class=&quot;hljs-params&quot;&gt;(String address) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.address = address;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public String &lt;span class=&quot;hljs-title&quot;&gt;toString&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return &lt;span class=&quot;hljs-string&quot;&gt;&quot;User [id=&quot; + id + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, username=&quot; + username + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, age=&quot; + age + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, birthday=&quot; + birthday + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, address=&quot;&lt;br/&gt;+ address + &lt;span class=&quot;hljs-string&quot;&gt;&quot;]&quot;;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;hr &lt;span class=&quot;hljs-attr&quot;&gt;size=&lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot; &lt;span class=&quot;hljs-attr&quot;&gt;color=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form &lt;span class=&quot;hljs-attr&quot;&gt;action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/user/recieveUser.do&quot; &lt;span class=&quot;hljs-attr&quot;&gt;method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&amp;gt;&lt;br/&gt;姓名：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;年龄：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;生日：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;birthday&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;birthday&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;地址：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;提交&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;h94&quot;&gt;9.4、封装包装类型参数&lt;/h3&gt;
&lt;p&gt;创建一个包装类：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; readability=&quot;2&quot;&gt;class &lt;span class=&quot;hljs-title&quot; readability=&quot;4&quot;&gt;UserCustom {&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private User user;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public User &lt;span class=&quot;hljs-title&quot;&gt;getUser&lt;span class=&quot;hljs-params&quot;&gt;() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return user;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setUser&lt;span class=&quot;hljs-params&quot;&gt;(User user) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.user = user;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;hr &lt;span class=&quot;hljs-attr&quot;&gt;size=&lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot; &lt;span class=&quot;hljs-attr&quot;&gt;color=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form &lt;span class=&quot;hljs-attr&quot;&gt;action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/user/recieveUserCustom.do&quot; &lt;span class=&quot;hljs-attr&quot;&gt;method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&amp;gt;&lt;br/&gt;姓名：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;user.username&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;年龄：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;user.age&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;生日：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;user.birthday&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;birthday&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;地址：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;user.address&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;address&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;提交&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;h95&quot;&gt;9.5、封装集合类型参数&lt;/h3&gt;
&lt;h4 id=&quot;h951list&quot;&gt;9.5.1、封装List集合类型参数&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;code&gt;不能直接传递集合类型，需要把集合类型封装到包装类中。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们先把List集合封装到包装类中。即：在包装类中定义List集合。提供getter和setter方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot; readability=&quot;2&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot; readability=&quot;4&quot;&gt;private List&amp;lt;User&amp;gt; userList;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public List&amp;lt;User&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;getUserList() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return userList;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void &lt;span class=&quot;hljs-title&quot;&gt;setUserList(&lt;span class=&quot;hljs-params&quot;&gt;List&amp;lt;User&amp;gt; userList) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.userList = userList;&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;hr &lt;span class=&quot;hljs-attr&quot;&gt;size=&lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot; &lt;span class=&quot;hljs-attr&quot;&gt;color=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form &lt;span class=&quot;hljs-attr&quot;&gt;action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/user/recieveList.do&quot; &lt;span class=&quot;hljs-attr&quot;&gt;method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&amp;gt;&lt;br/&gt;姓名：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userList[0].username&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;年龄：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userList[0].age&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot; readability=&quot;1.5&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot; readability=&quot;3&quot;&gt;br&amp;gt;&lt;p&gt;姓名：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userList[1].username&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;年龄：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userList[1].age&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;提交&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h952map&quot;&gt;9.5.2、封装Map集合类型参数&lt;/h4&gt;
&lt;p&gt;我们先把Map集合封装到包装类中。即：在包装类中定义Map集合。提供getter和setter方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;    private &lt;span class=&quot;hljs-built_in&quot;&gt;Map&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String, &lt;span class=&quot;hljs-built_in&quot;&gt;Object&amp;gt; maps = &lt;span class=&quot;hljs-keyword&quot;&gt;new HashMap&amp;lt;&lt;span class=&quot;hljs-built_in&quot; readability=&quot;3&quot;&gt;String, &lt;span class=&quot;hljs-built_in&quot; readability=&quot;6&quot;&gt;Object&amp;gt;();&lt;p&gt;public &lt;span class=&quot;hljs-built_in&quot;&gt;Map&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String, &lt;span class=&quot;hljs-built_in&quot;&gt;Object&amp;gt; getMaps() {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return maps;&lt;br/&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;public &lt;span class=&quot;hljs-keyword&quot;&gt;void setMaps(&lt;span class=&quot;hljs-built_in&quot;&gt;Map&amp;lt;&lt;span class=&quot;hljs-built_in&quot;&gt;String, &lt;span class=&quot;hljs-built_in&quot;&gt;Object&amp;gt; maps) {&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this.maps = maps;&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;hr &lt;span class=&quot;hljs-attr&quot;&gt;size=&lt;span class=&quot;hljs-string&quot;&gt;&quot;12&quot; &lt;span class=&quot;hljs-attr&quot;&gt;color=&lt;span class=&quot;hljs-string&quot;&gt;&quot;blue&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form &lt;span class=&quot;hljs-attr&quot;&gt;action=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/user/recieveMap.do&quot; &lt;span class=&quot;hljs-attr&quot;&gt;method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;post&quot;&amp;gt;&lt;br/&gt;姓名：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mps['username']&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;年龄：&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text&quot; &lt;span class=&quot;hljs-attr&quot;&gt;name=&lt;span class=&quot;hljs-string&quot;&gt;&quot;mps['age']&quot; &lt;span class=&quot;hljs-attr&quot;&gt;id=&lt;span class=&quot;hljs-string&quot;&gt;&quot;age&quot;&amp;gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;br&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input &lt;span class=&quot;hljs-attr&quot;&gt;type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;submit&quot; &lt;span class=&quot;hljs-attr&quot;&gt;value=&lt;span class=&quot;hljs-string&quot;&gt;&quot;提交&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;h96struts2sprigmvc&quot;&gt;9.6、思考：有了struts2，为什么还需要sprigmvc呢？&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;实现机制：
&lt;ul&gt;&lt;li&gt;struts2 底层是基于&lt;strong&gt;`过滤器`&lt;/strong&gt;实现的。过滤器的底层是servlet。&lt;/li&gt;
&lt;li&gt;springmvc 底层基于&lt;strong&gt;`servlet`&lt;/strong&gt;实现。servlet比过滤器快。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;运行速度：
&lt;ul&gt;&lt;li&gt;struts2 是&lt;strong&gt;`多例`&lt;/strong&gt;。
&lt;ul&gt;&lt;li&gt;一个请求来了以后，struts2创建多少个对象？如下：&lt;/li&gt;
&lt;li&gt;ActionContext、ValueStack、UserAction、ActionSuport、ModelDriven等等。&lt;/li&gt;
&lt;li&gt;UserAction里面属性：User对象，userList集合对象等。属于成员变量，存活时间长。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;springmvc 是&lt;strong&gt;`单例`&lt;/strong&gt;，因为是基于servlet的，servlet是单例的。
&lt;ul&gt;&lt;li&gt;一个请求来了以后，springmvc 创建多少个对象？如下：&lt;/li&gt;
&lt;li&gt;Controller等等。&lt;/li&gt;
&lt;li&gt;方法的参数属于局部变量，存活时间短。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;参数封装来分析：
&lt;ul&gt;&lt;li&gt;struts 基于&lt;strong&gt;`属性驱动`&lt;/strong&gt;进行封装。&lt;/li&gt;
&lt;li&gt;springmvc 基于&lt;strong&gt;`方法`&lt;/strong&gt;进行封装，粒度更细。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;h10&quot;&gt;10、页面回显&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;springmvc使用&lt;code&gt;Model对象&lt;/code&gt;进行页面数据回显，Model对象相当于javaweb时所学的&lt;code&gt;application对象(应用域对象)&lt;/code&gt;，所以Model对象中的数据可以通过&lt;code&gt;EL表达式&lt;/code&gt;进行获取。&lt;/li&gt;
&lt;li&gt;有了Model对象，才可以向对象中放值，那么Model对象该如何创建呢？
&lt;ul&gt;&lt;li&gt;答：&lt;strong&gt;`springmvc中放到方法里面的对象会自动被创建`&lt;/strong&gt;，那么我们就把Model对象放到方法里面。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;h101&quot;&gt;10.1、查询所有&lt;/h3&gt;
&lt;p&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%@ &lt;span class=&quot;hljs-attr&quot;&gt;page &lt;span class=&quot;hljs-attr&quot;&gt;language=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot; &lt;span class=&quot;hljs-attr&quot;&gt;contentType=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot; readability=&quot;2.5&quot;&gt;pageEncoding=&lt;span class=&quot;hljs-string&quot; readability=&quot;5&quot;&gt;&quot;UTF-8&quot;%&amp;gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%--引入jstl标签 &lt;span class=&quot;hljs-attr&quot;&gt;--%&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%@ &lt;span class=&quot;hljs-attr&quot;&gt;taglib &lt;span class=&quot;hljs-attr&quot;&gt;uri=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://java.sun.com/jsp/jstl/core&quot;  &lt;span class=&quot;hljs-attr&quot;&gt;prefix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;c&quot;%&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot; &lt;span class=&quot;hljs-attr&quot;&gt;content=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;Insert title here&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table &lt;span class=&quot;hljs-attr&quot;&gt;border=&lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot; &lt;span class=&quot;hljs-attr&quot;&gt;style=&lt;span class=&quot;hljs-string&quot;&gt;&quot;color: blue&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;姓名&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;年龄&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;生日&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;地址&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;操作&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr/&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;c:forEach &lt;span class=&quot;hljs-attr&quot;&gt;items=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${userList}&quot; &lt;span class=&quot;hljs-attr&quot;&gt;var=&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;${user.username}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;${user.age}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;${user.birthday}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;${user.address}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a &lt;span class=&quot;hljs-attr&quot;&gt;href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/user/updateById.do?id${user.id}&quot;&amp;gt;修改&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr/&amp;gt;        &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;c:forEach&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;body&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;浏览器显示效果：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5Xbd5J.png&quot; alt=&quot;&quot;/&gt;&lt;h2 id=&quot;h11url&quot;&gt;11、URL模版映射&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;URL模版映射主要是为了实现请求&lt;code&gt;Restfull软件架构设计模式&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Restfull软件架构设计模式使得请求更简洁、更安全，方便于搜索引擎收录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;h111&quot;&gt;11.1、普通模式修改&lt;/h3&gt;
&lt;p&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a &lt;span class=&quot;hljs-attr&quot;&gt;href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/user/updateByIdNormal.do?id=${user.id}&quot;&amp;gt;修改&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;访问的地址为：http://localhost:8080/day63_SpringMVC_02/user/updateByIdNormal.do?id=1&lt;/p&gt;

&lt;h3 id=&quot;h112restfull&quot;&gt;11.2、Restfull风格设计模式修改&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;（1）初始Restfull风格设计模式修改&lt;/strong&gt;&lt;br/&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a &lt;span class=&quot;hljs-attr&quot;&gt;href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/user/updateByIdRestfull/${user.id}.do&quot;&amp;gt;修改&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&amp;gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;访问的地址为：http://localhost:8080/day63_SpringMVC_02/user/updateByIdRestfull/1.do&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）最终Restfull风格设计模式修改&lt;/strong&gt;&lt;br/&gt;  &lt;strong&gt;约定：&lt;/strong&gt;&lt;code&gt;在web.xml配置拦截方式：在rest目录下所有请求都被拦截，servlet可以拦截目录。&lt;/code&gt;&lt;br/&gt;web.xml中配置代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&amp;gt;springmvc&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-name&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&amp;gt;/rest/*&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;url-pattern&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;servlet-mapping&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;页面的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a &lt;span class=&quot;hljs-attr&quot;&gt;href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${pageContext.request.contextPath}/rest/user/updateByIdRestfull/${user.id}&quot;&amp;gt;修改&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&amp;gt; &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接受参数的方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;访问的地址为：http://localhost:8080/day63_SpringMVC_02/rest/user/updateByIdRestfull/1&lt;br/&gt;其中：&lt;br/&gt;  {id}：表示匹配接受页面url路径中的参数&lt;br/&gt;  @PathVariable：表示{id}里面参数注入后面参数id里面&lt;br/&gt;  &lt;code&gt;url模版映射需要@RequestMapping和@PathVariable结合使用。&lt;/code&gt;&lt;br/&gt;画图理解URL模版映射，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbjOB.png&quot; alt=&quot;&quot;/&gt;
&lt;h3 id=&quot;h113eclipsespringtoolssuite&quot;&gt;11.3、在线安装eclipse提示插件--Spring tools suite&lt;/h3&gt;
&lt;p&gt;步骤：Help --&amp;gt; Eclipse Marketplace… --&amp;gt; 在Find中输入Spring tools suite，点击安装即可。&lt;br/&gt;安装成功后的截图如下：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbGe6.png&quot; alt=&quot;&quot;/&gt;
&lt;h2 id=&quot;h12&quot;&gt;12、转发和重定向&lt;/h2&gt;

&lt;h3 id=&quot;h121&quot;&gt;12.1、转发&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;本类中进行转发：本类中方法与方法之间进行forward
&lt;ul&gt;&lt;li&gt;关键字：forward&lt;/li&gt;
&lt;li&gt;转发方式一：return &quot;forward:listAll.do&quot;;&lt;/li&gt;
&lt;li&gt;转发方式二：return &quot;/user/forward:listAll.do&quot;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt;`user根路径前面必须有/。`&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;跨类进行转发：
&lt;ul&gt;&lt;li&gt;转发方式：return &quot;forward:/items/listAll.do&quot;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;测试代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;h122&quot;&gt;12.2、重定向&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;本类中进行重定向：本类中方法与方法之间进行redirect
&lt;ul&gt;&lt;li&gt;关键字：redirect&lt;/li&gt;
&lt;li&gt;重定向方式一：return &quot;redirect:listAll.do&quot;;&lt;/li&gt;
&lt;li&gt;重定向方式二：return &quot;redirect:/user/listAll.do&quot;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;跨类进行重定向：
&lt;ul&gt;&lt;li&gt;重定向方式：return &quot;redirect:/items/listAll.do&quot;;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;测试代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;h13mvcannotationdriven&quot;&gt;13、标签&amp;lt; mvc:annotation-driven /&amp;gt;的使用&lt;/h2&gt;
&lt;p&gt;详解如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs makefile&quot; readability=&quot;1.5&quot;&gt;&lt;span class=&quot;hljs-section&quot; readability=&quot;3&quot;&gt;标签&amp;lt;mvc:annotation-driven /&amp;gt; 表示默认创建处理器映射器RequestMappingHandlerMapping、处理器映射器RequestMappingHandlerAdapter，还表示默认启动json格式数据的支持。&lt;p&gt;所以在springmvc.xml中就不要再配置处理器映射器和处理器映射器了。&lt;br/&gt;只需要配置这一句就可以了。&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;h14requestbodyresponsebody&quot;&gt;14、RequestBody 和 ResponseBody&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;@RequestBody 和 @ResponseBody，这两个注解主要是为了&lt;code&gt;提供对json格式数据的支持。&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;@RequestBody的作用：把前台页面请求的json格式数据直接封装成JavaBean，使用ajax进行数据传递。&lt;/li&gt;
&lt;li&gt;@ResponseBody的作用：在后台，把JavaBean强制转换成json格式数据返回给前台页面。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这两个注解不能直接使用，需要依赖两个Jackson的jar包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）先导入Jackson的jar包&lt;/strong&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;https://s1.ax2x.com/2018/10/26/5XbMgp.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;strong&gt;（2）在springmvc.xml中配置json格式转换&lt;/strong&gt;&lt;br/&gt;注意：我们也可以直接使用&lt;code&gt;&amp;lt;mvc:annotation-driven /&amp;gt;&lt;/code&gt;，因为该标签默认启动json格式数据的支持。
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（3）请求json格式数据，返回json格式数据&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;（4）请求pojo格式数据，返回json格式数据&lt;/strong&gt;&lt;br/&gt;/day63_SpringMVC_02/WebRoot/WEB-INF/jsps/requestjson.jsp&lt;br/&gt;前台代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;%@ &lt;span class=&quot;hljs-attr&quot;&gt;page &lt;span class=&quot;hljs-attr&quot;&gt;language=&lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot; &lt;span class=&quot;hljs-attr&quot;&gt;contentType=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;pageEncoding=&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;%&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;html&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;head&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;meta &lt;span class=&quot;hljs-attr&quot;&gt;http-equiv=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Content-Type&quot; &lt;span class=&quot;hljs-attr&quot;&gt;content=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/html; charset=UTF-8&quot;&amp;gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;Insert title here&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;title&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后台代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs kotlin&quot;&gt;    &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Tue, 04 Dec 2018 14:21:00 +0000</pubDate>
<dc:creator>pony1223</dc:creator>
<og:description>1、JAVAEE体系结构 JAVAEE体系结构图如下所示： 2、什么是springmvc？ 什么是mvc？ Model1 Model2 SpringMVC是什么？ SpringMVC是一个web层mv</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pony1223/p/10067721.html</dc:identifier>
</item>
<item>
<title>Python小白学习之路（二十二）—【生成器】 - 小伙郭</title>
<link>http://www.cnblogs.com/guoruxin/p/10067741.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guoruxin/p/10067741.html</guid>
<description>

&lt;p&gt;生成器可以理解成是一种数据类型，特殊地是生成器可以自动实现迭代器协议&lt;br/&gt;其他的数据类型需要调用自己内置的__iter__方法&lt;br/&gt;所以换种说法，生成器就是可迭代对象&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;！回忆：很重要的迭代器协议&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对象必须提供一个 next 方法，执行该方法要么返回迭代中的下一项，&lt;br/&gt;要么就引起一个Stoplteration异常，以终止迭代（只能往后走不能往前退）&lt;/p&gt;

&lt;p&gt;python中生成器的表现形式&lt;br/&gt;python中提供生成器的方式&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;一类是生成器函数；另一类是生成器表达式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;第一类：关于生成器函数&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;与常规函数定义相同。但是返回值时使用&lt;strong&gt;&lt;span&gt;yield&lt;/span&gt;&lt;/strong&gt;而不是return。&lt;/li&gt;
&lt;li&gt;yield语句一次返回一个结果，可以进行多次返回（而return只能返回一次）&lt;/li&gt;
&lt;li&gt;yield每次返回一个结果，在每个结果中间，挂起函数的状态（其实就是记住我函数执行到哪一行了）&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;举例：&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test ():
    &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; 1&lt;span&gt;
g &lt;/span&gt;= test()      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;并不会执行test（）函数，需要通过 g.__next__()方法来触发生成器函数执行&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(g) 
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(g.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行结果&lt;/span&gt;
&amp;lt;generator object test at 0x0051AA70&amp;gt;
1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在说生成器表达式之前，补充&lt;strong&gt;三元表达式和列表解析&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;三元表达式：(顾名思义，就是有三个元素呗)&lt;/h3&gt;
&lt;p&gt;以前我们是这么写程序的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ok&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Not ok&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;利用三元表达式我们是这么写程序的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
name = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
res &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ok&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Not ok&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;三元表达式&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行结果&lt;/span&gt;
Ok
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1517322/201812/1517322-20181204220606470-1753064026.png&quot; alt=&quot;&quot;/&gt;（每一圈为一个元）&lt;/p&gt;

&lt;h3&gt;列表解析：&lt;/h3&gt;
&lt;p&gt;列表解析式的语法格式为：&lt;em id=&quot;__mceDel&quot;&gt;&lt;br/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;[i操作 for i in 列表 if 表达式1 and 表达式2]&lt;/li&gt;
&lt;li&gt;（其实就是用中括号[]将三元表达式框起来）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;举例理解：&lt;br/&gt;#我要通过程序下10个鸡蛋&lt;br/&gt;#以前我是这么写的&lt;br/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
egg_list =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;):
    egg_list.append(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;i)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(egg_list)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行结果&lt;/span&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;#通过列表解析式我是这么写程序的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
l0 = [ &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %i &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;) ]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(l0)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行结果&lt;/span&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋7&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

l1 &lt;/span&gt;= [ &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %i &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10) &lt;span&gt;if&lt;/span&gt; i &amp;lt; 5&lt;span&gt; ]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(l1)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行结果&lt;/span&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

l2 &lt;/span&gt;= [ &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %i &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10) &lt;span&gt;if&lt;/span&gt; i &amp;lt; 3 &lt;span&gt;or&lt;/span&gt; i &amp;gt; 7&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(l2)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行结果&lt;/span&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;总结：列表解析式优缺点&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;优点：&lt;/strong&gt;取值方便（如果列表的长度较小时使用列表解析会很方便，）&lt;br/&gt;&lt;strong&gt;缺点：&lt;/strong&gt;如果列表的长度很大的时候，使用列表解析会占用很多的内存资源，此时可以使用生成器表达式来节省内存资源&lt;/p&gt;

&lt;h2&gt;第二类：关于生成器表达式&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;生成器表达式：（就是将列表解析式的中括号变成圆括号）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;举例：&lt;/span&gt;
l0 = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %i &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(l0)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(l0.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(l0.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(l0.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行结果&lt;/span&gt;
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0045AA70&amp;gt;&lt;span&gt;
鸡蛋0
鸡蛋1
鸡蛋2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt;&lt;br/&gt;1.将列表解析式的 [] 换成 () 得到的就是生成器表达式&lt;br/&gt;2.列表解析式与生成器表达式都是一种便利的编程方式，只不过生成器表达式更节省内存&lt;br/&gt;3.python使用迭代器协议让 for 循环变得更加通用。大部分内置函数也是使用迭代器协议来访问对象的&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;sum 函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sum(x ** 2 &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; range(4))  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;sum 直接按照迭代器协议访问对象（类比for循环）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
sum([x ** 2 &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; range(4)])  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;所以并不需要将对象 x ** 2 for x in rang(4) 加上一个中括号变成列表解析式，将所有的值取出来构成一个列表再进行求和运算&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;#今天所举得列子不是下蛋就是吃包子（视频课上老师就是这么讲的）&lt;br/&gt;#我也深深的怀疑&lt;br/&gt;#为什么老师这么钟爱吃包子和下鸡蛋&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;下蛋程序一：&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; xiadan():
    res &lt;/span&gt;=&lt;span&gt; []
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10000&lt;span&gt;):
        res.append(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;i)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(xiadan())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;缺点一：占用空间较大&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;缺点二：效率低    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;下蛋程序二：&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; xiadan():
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10000&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;i
lmj &lt;/span&gt;=&lt;span&gt; xiadan()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(lmj.&lt;span&gt;__next__&lt;/span&gt;())
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;第一段程序是一旦执行 xiadan()这个函数，先下了10000个鸡蛋来占用内存空间，在去执行其他操作&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;第二段程序是通过生成器函数yield来返回我所需要的鸡蛋，我边用（通过__next__() 触发生成器函数）鸡蛋，边下鸡蛋&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;以生成器函数为例，对生成器进行总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;语法上和函数类似：&lt;/span&gt;&lt;/strong&gt;生成器函数和常规函数几乎是一样的。它们都是使用def语句进行定义&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;差别在于生成器使用yield语句进行返回一个值，而常规函数使用return语句返回一个值&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;自动实现迭代器协议：&lt;/strong&gt;&lt;/span&gt;对于生成器，python会自动实现迭代器协议，以便应用到迭代器背景中&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;由于生成器自动实现了迭代器协议，所以我们可以直接调用它的next方法，并且在没有值可以返回的时候生成器自动生成Stoplteration异常&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;状态挂起：&lt;/strong&gt;&lt;/span&gt;生成器使用yield语句返回一个值。yield 语句挂起该生成器函数的状态，保留足够的信息，以便之后从它离开的地方继续执行&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;优点一：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;生成器的好处就是延迟计算，一次返回一个结果。也就是说它不会一次生成所有的结果，这对于大数据量&lt;br/&gt;处理非常有用（前面下鸡蛋的例子）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;优点二：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;生成器还能提高代码可读性&lt;/p&gt;
&lt;p&gt;1.使用生成器以后，代码行数更少（在保证代码可读性的前提下，代码行数越少越好）&lt;br/&gt;2.不适用生成器，对于每次结果，我们首先看到的是result.append(index),其次才是index&lt;br/&gt;也就是说，我们每次看到的，是一个列表的append操作，只是append的是我们想要的结果。&lt;br/&gt;使用生成器的时候，直接yield index，少了列表的append操作的干扰，我们一眼能够看出，代码是要进行什么操作。&lt;/p&gt;


&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;方式一：__next__()&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;方式二：next()&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;方式三：send()&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;举例：&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; xiadan():
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10000&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;鸡蛋%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;i

g &lt;/span&gt;=&lt;span&gt; xiadan()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(g.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(g))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(g.send(None))

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;执行结果&lt;/span&gt;
&lt;span&gt;鸡蛋0
鸡蛋1
鸡蛋2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;关于 send() 总结来源于一下文章并且结合自己的理解&lt;br/&gt;看到一篇关于 yield 总结特别好的文章&lt;br/&gt;&lt;strong&gt;链接：&lt;span&gt;https://www.cnblogs.com/renpingsheng/p/8635777.html&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;send()必须传一个参数，可为 None 或者 其他值&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;1. yield相当于return ，控制的是函数的返回值&lt;br/&gt;2. x = yield的另外一个特性，接受send传过来的值，赋值给 x&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;举例理解：

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;开始执行函数&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    first &lt;/span&gt;= &lt;span&gt;yield&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;第一次&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, first)
    second &lt;/span&gt;= &lt;span&gt;yield&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;第二次&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, second)
    &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt;&lt;span&gt;
g &lt;/span&gt;=&lt;span&gt; test()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(g))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(g.send(1&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(g.send(2))
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;程序执行过程分析&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 1.程序开始执行以后，因为test函数中有yield关键字，所以test函数并不会真的执行，而是先得到一个生成器g.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 2.直到调用next方法，test函数正式开始执行，先执行test函数中的print方法，打印开始执行函数。然后执行first = yield&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 3.程序遇到yield关键字，程序暂停，此时next(g)语句执行完成，打印next(g)执行结果，即yield传回的结果，为None&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 4.程序执行g.send(1)，程序会从yield关键字那一行继续向下运行，send会把1这个值传递给yield&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 5.yield接收到send方法传递过来的值，然后由yield赋值给first变量&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 6.由于send方法中包含next()方法，所以程序会继续向下运行执行print方法，然后再次遇到yield关键字，程序暂停，此时g.send(1)语句执行完成，打印g.send(1)执行结果，即yield传回的结果，为None&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 7.程序执行g.send(2)，程序会从yield关键字那一行继续向下运行，send会把2这个值传递给yield&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 8.yield接收到send方法传递过来的值，然后由yield赋值给second变量&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 9.由于send方法中包含next()方法，所以程序会继续向下运行执行print方法，然后再次遇到yield关键字，程序暂停，此时g.send(2)语句执行完成，打印g.send(2)执行结果，即yield传回的结果，为None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;写在后面：&lt;/p&gt;
&lt;p&gt;珍爱眼睛  远离电子产品&lt;/p&gt;
&lt;p&gt;从上了研究生阶段  眼睛就开始有虹膜炎&lt;/p&gt;
&lt;p&gt;隔段时间就来打扰我&lt;/p&gt;
&lt;p&gt;不能看电脑不能看手机不能看强光&lt;/p&gt;
&lt;p&gt;还拼命流眼泪&lt;/p&gt;
&lt;p&gt;我也真是佩服自己&lt;/p&gt;
&lt;p&gt;正好这个阶段我就在看书学python  也抽时间看了 许三观卖血记&lt;/p&gt;
&lt;p&gt;文学素养还是要培养的&lt;/p&gt;
&lt;p&gt;我要做祖国新时代的四有新人  有文化 有道德 有。。。还有什么来着&lt;/p&gt;
&lt;p&gt;哈哈&lt;/p&gt;
&lt;p&gt;爱吃火锅的人运气不会太差&lt;/p&gt;
&lt;p&gt;爱吃火锅的人怎么可能轻易放弃&lt;/p&gt;


</description>
<pubDate>Tue, 04 Dec 2018 14:17:00 +0000</pubDate>
<dc:creator>小伙郭</dc:creator>
<og:description>一.什么是生成器？ 生成器可以理解成是一种数据类型，特殊地是生成器可以自动实现迭代器协议其他的数据类型需要调用自己内置的__iter__方法所以换种说法，生成器就是可迭代对象 ！回忆：很重要的迭代器协</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guoruxin/p/10067741.html</dc:identifier>
</item>
<item>
<title>深入浅出经典面试题：从浏览器中输入URL到页面加载发生了什么 - Part 3 - 张太国</title>
<link>http://www.cnblogs.com/confach/p/10050437.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/confach/p/10050437.html</guid>
<description>&lt;p&gt;接下来就是其他报文头，常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。&lt;/p&gt;&lt;div readability=&quot;138.36956521739&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1249/201812/1249-20181201175817064-889928660.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;最常见的就是Status Code（ 200， 302， 307， 404， 500），server等。&lt;/p&gt;
&lt;h2&gt;HTTP 10问&lt;/h2&gt;
&lt;p&gt;HTTP问题简单，那就直接列举几个问题，有些问题我给出详细答案。&lt;/p&gt;
&lt;p&gt;1. &lt;strong&gt;HTTP METHOD有哪几种，分别是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常见问题，不多解释。&lt;/p&gt;

&lt;p&gt;2. &lt;strong&gt;HTTP的PUT/DELETE/等使用时需要注意什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一点需要特别注意，有的浏览器是不支持的，所以在使用和实现时需要仔细评估好自己客户端的能力。&lt;/p&gt;

&lt;p&gt;3. &lt;strong&gt;HTTP的OPTIONS用来做什么？&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;curl -X OPTIONS http://example.org -i&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;响应&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;HTTP/1.1 200 OK&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;Allow: OPTIONS, GET, HEAD, POST&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cache-Control: max-age=604800&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Date: Thu, 13 Oct 2016 11:45:00 GMT&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Expires: Thu, 20 Oct 2016 11:45:00 GMT&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Server: EOS (lax004/2813)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;x-ec-custom-error: 1&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Content-Length: 0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;看红色的返回部分，意思是说该URL允许的HTTP Method 为OPTIONS、GET、HEAD以及POST。&lt;/p&gt;

&lt;div readability=&quot;8.9337641357027&quot;&gt;那么OPTIONS一般用在哪里呢？是的，CORS。如果您开发过SPA，或者您的前端的逻辑和交互完全用JavaScript来实现的，肯定会碰到此问题。所谓JavaScript实现，目前比交流行的有VueJS，AngularJS，React等流行框架。如何解决这个问题？最常用的方法是是前端和后端在同一个域名下。如果不在同一个域名下，需要在后端实现支持CORS的功能，目前Spring/Spring Boot已经有类似功能支持CORS，实现起来蛮简单的，具体可以参看&lt;a href=&quot;https://spring.io/blog/2015/06/08/cors-support-in-spring-framework&quot;&gt;https://spring.io/blog/2015/06/08/cors-support-in-spring-framework&lt;/a&gt;，不在赘述。&lt;/div&gt;

&lt;p&gt;关于CORS，最难的不是这里，在我遇到的Case里，比这个更复杂，如果前端是SPA，而且在某种情况下，访问任何前端页面都会进行跳转，这是需求。但是因为是SPA的架构，会出现OPTIONS（这是浏览器关于CORS支持的流程），这会使整个HTTP 流程变得紊乱，也是一个很棘手的问题。&lt;/p&gt;

&lt;p&gt;不管怎么说，CORS属于安全性这一块，后面在软件安全（包括Web）方面专门写吧。在过去几年里，因为公司和客户在产品安全和数据安全放在了一个很高的位置，而我又是去负责这一块，所以自己在安全方面积累了大量的实战经验，非常宝贵。&lt;/p&gt;

&lt;p&gt;4. &lt;strong&gt;上述访问qq的HTTP response里的server哪里不合适，需要注意什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;server的值是squid/3.5.24，不合适之处在哪里？也许部分人是不清楚的。其实很简单，不应该把squid的版本信息放在这里。为什么？&lt;/p&gt;

&lt;p&gt;如果web server软件是自己公司开发的，私有的，不开源的，这也罢了，没人知道你的web server是怎么实现的，但这并不代表web  server没有漏洞，不代表别人发现不了漏洞。&lt;/p&gt;

&lt;p&gt;但如果用的是开源的，例如Apache HTTPd，Apache Tomcat，Ngnix等，就需要注意了，每个版本都有安全漏洞，而且这些安全漏洞都有专门的记录，看看隔三差五报告的CVE，就知道漏洞多少了。所以，如果使用开源软件，很容易将自己的web server处于一个具有潜在风险的位置，所以不要加上版本号。&lt;/p&gt;

&lt;p&gt;腾讯作为全球顶级的大公司，这方面不注意，实在是有点说不过去。如果有腾讯的朋友看到这里，还是改过来吧。&lt;/p&gt;

&lt;p&gt;和上面一样，这也是属于安全性问题，有时间我再写吧。&lt;/p&gt;

&lt;p&gt;5. &lt;strong&gt;Status Code 302与307的区别是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;都属于跳转，但是区别在哪里呢？&lt;/p&gt;
&lt;p&gt;我们看看307在协议里是怎么定义的？参看rfc2616第10章节&lt;/p&gt;
&lt;p&gt;10.3.8 307 Temporary Redirect&lt;/p&gt;
&lt;p&gt;The requested resource resides temporarily under a different URI. Since the redirection MAY be altered on occasion, the client SHOULD continue to use the Request-URI for future requests. This response is only cacheable if indicated by a Cache-Control or Expires header field.&lt;/p&gt;
&lt;p&gt;The temporary URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s) , since many pre-HTTP/1.1 user agents do not understand the 307 status. Therefore, the note SHOULD contain the information necessary for a user to repeat the original request on the new URI.&lt;/p&gt;
&lt;p&gt;If the 307 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.&lt;/p&gt;
&lt;p&gt;在 GET、HEAD 这些幂等的请求方式上，302、307 没区别，但对于 POST 就不同了，大部分浏览器 都会 302 会将 POST 请求转为 GET，而 307则不一样，规范要求浏览器继续向 Location 的地址 POST 内容。&lt;/p&gt;
&lt;p&gt;举个例子解释一下，假设正在POST一个消息，里面的Body有1M内容，在307的情况下，这1M的内容会继续发过去，但在302的情况下，则不会。&lt;/p&gt;

&lt;p&gt;6. &lt;strong&gt;在HTTP Response里Connection的用法需要注意什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不解释过多，keep-alive，closed用法不一样，根据实际情况而定，在优化网络时经常用到。&lt;/p&gt;
&lt;p&gt;需要注意的是，Connection在通信领域会一些场景下会造成一些麻烦，尤其是在监控某个HTTP Session的flow时。&lt;/p&gt;

&lt;p&gt;7.  &lt;strong&gt;在HTTP Response里Strict-Transport-Security（HSTS）怎么用？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HSTS一般大公司都会用，在我实际的项目涉及到HTTPS，为了实现某个功能，HSTS成了一个跨不过去的坎，遇到过很大问题。大家自己多看看吧。&lt;/p&gt;

&lt;p&gt;8. &lt;strong&gt;可以抓HTTPS的包了解HTTP请求和响应吗？有什么方法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不多解释，但提供2个软件名字，Fiddler，HTTP Analyzer。&lt;/p&gt;

&lt;p&gt;9. &lt;strong&gt;为什么对性能要求高的场景下不使用HTTP作为协议？例如在商用里，RPC开源项目一般不使用HTTP作为传输协议？而在5G下使用HTTP协议呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一点是需要注意的，HTTP的消息头太多了，会造成消息体特别大，影响性能，而且有些场景下这些消息头大部分都是无用的。&lt;/p&gt;
&lt;p&gt;但是在5G里，为什么3GPP组织会采用HTTP协议作为各个reference point的interface的实现呢？大家体会一下。&lt;/p&gt;

&lt;p&gt;10.  &lt;strong&gt;HTTP协议（包括HTTP/2.0）有了解吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不多解释，但是HTTP/2.0还是需要了解一下，优势和缺点。&lt;/p&gt;

&lt;div readability=&quot;23.108303249097&quot;&gt;

&lt;p&gt;现在浏览器接收到了server的返回内容，接下来浏览器该把内容呈现给用户了。&lt;/p&gt;

&lt;p&gt;Server返回的内容有哪些呢？这里只以HTML页面为例（API返回的JSON数据或XML数据不在讨论范围内）。&lt;/p&gt;

&lt;p&gt;一个页面一般包含HTML、CSS、 JS、 图片等文件，那么浏览器收到这些文件后该如何渲染（render）他们呢？&lt;/p&gt;

&lt;p&gt;以下部分很多参考下面2篇文章：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;浏览器的组成&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;21.728666666667&quot;&gt;

&lt;p&gt;首先我们先了解一下浏览器的组件构成，以及每个组件的功能，下图是浏览器包括的几个部分：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt;: UI组件包括地址栏，前进/后退按钮，书签菜单等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Browser Engine&lt;/strong&gt;: 在UI组件和渲染引擎间采取一些action.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rendering engine&lt;/strong&gt; : 负责显示请求的内容。例如，如果是HTML页面，它将解析HTML，CSS，并将解析的内容显示在屏幕上。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;不同的浏览器使用不同的渲染引擎：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;IE使用Trident&lt;/li&gt;
&lt;li&gt;Firefox使用Gecko&lt;/li&gt;
&lt;li&gt;Safari使用WebKit&lt;/li&gt;
&lt;li&gt;Chrome和Opera（版本15开始）使用Blink。它是基于Webkit开发的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;4.    Networking: 负责网络调用，例如HTTP请求。在不同的平台有不同的实&lt;/p&gt;
&lt;p&gt;5.    &lt;strong&gt;UI backend&lt;/strong&gt;: 主要用来绘画基本的UI元素，例如下拉框，Windows等。这个UI后台暴露一些通用的接口，并不依赖平台的。&lt;/p&gt;
&lt;p&gt;6.    &lt;strong&gt;JavaScript interpreter&lt;/strong&gt;. 用来解析和运行JavaScript code。&lt;/p&gt;
&lt;p&gt;7.    &lt;strong&gt;Data storage&lt;/strong&gt;. 数据持久化的那一层。浏览器可能需要存储各种各样的数据，例如Cookie。浏览器也得支持我们常用的LocalStorage， IndexedDB，WebSQL以及FileSystem。&lt;/p&gt;
&lt;div readability=&quot;16.740885684861&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1249/201812/1249-20181201180039667-2145762574.png&quot; alt=&quot;&quot;/&gt;
&lt;h2&gt;渲染页面的主要流程&lt;/h2&gt;

&lt;p&gt;下面是浏览器的渲染引擎的主要步骤。&lt;/p&gt;
&lt;div readability=&quot;67.437093730342&quot;&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1249/201812/1249-20181201180114232-1644236371.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;渲染引擎解析HTML文档，并将HTML包含的元素转化为一个个DOM，并构建为一个&lt;strong&gt;DOM树&lt;/strong&gt;。然后引擎开始解析来自CSS文件或直接嵌在HTML页面的CSS样式数据，这些样式信息又会构建另外一个树：&lt;strong&gt;渲染树&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;渲染树包含了多个矩形，这些矩形包含了颜色，大小，位置等属性，而且会按照对应的顺序显示在屏幕上。&lt;/p&gt;

&lt;p&gt;当渲染树构造完毕后，接下来进入布局的程序，在这个程序里，渲染引擎会给每个DOM元素安排精确的坐标，并根据坐标在屏幕上显示。&lt;/p&gt;

&lt;p&gt;接下来是遍历渲染树，UI Backend层会将一个个DOM元素绘画在屏幕上绘画出来。&lt;/p&gt;

&lt;p&gt;需要注意的是，上面是一个渐进的过程，理解这一点非常重要。但是为了得到更好的用户体验，浏览器会边解析边渲染，它并不会等到所有HTML解析完了才开始构造和布局渲染树。当部分内容正在解析渲染时，另外一部分正从网络那边下载下来呢。&lt;/p&gt;

&lt;p&gt;下面2个图是WebKit和Gecko的渲染引擎的流程，我们发现他们大致相同的。&lt;/p&gt;
&lt;div readability=&quot;91.118644067797&quot;&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1249/201812/1249-20181201180209075-1546641586.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1249/201812/1249-20181201180218840-1213844.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是DOM树，渲染树的树形结构。&lt;/p&gt;

&lt;p&gt;渲染引擎是单线程工作的，除了网络操作，其他所有的都是单线程的。在Firefox和Safari，它们自己就是主线程，而Chrome就是每个tab处理主线程。&lt;/p&gt;

&lt;p&gt;网络操作则由多个并列线程去执行，但数量也是受限的，一般在2-6个。&lt;/p&gt;

&lt;p&gt;浏览器的主线程是一个无限的事件循环，而且一直保持进程alive，一直等着各种事件（例如绘画事件，布局事件），并处理他们。&lt;/p&gt;

&lt;p&gt;浏览器渲染10问&lt;/p&gt;
&lt;p&gt;1.   浏览器的组成部分是什么？&lt;/p&gt;
&lt;p&gt;2.  各个主流浏览器的渲染引起是什么？&lt;/p&gt;
&lt;p&gt;3.  浏览器显示页面的主要流程是什么？&lt;/p&gt;
&lt;p&gt;4.  您在做开发和测试时，有哪些浏览器（包括手机）存在兼容性问题较多？&lt;/p&gt;
&lt;p&gt;       遇见最多的是Samsung手机和Huawei手机，有时一个兼容性需要花费大量时间去调研和修复，可能是Samsung和Huawei定制的太厉害了，不兼容一些特性吧。&lt;/p&gt;
&lt;p&gt;5.  渲染引擎是单线程还是多线程？&lt;/p&gt;
&lt;p&gt;6.  浏览器的网络操作一般由几个线程去执行？&lt;/p&gt;
&lt;p&gt;7.  DOM树，渲染树是什么？&lt;/p&gt;
&lt;p&gt;8.  为了获得更好的用户体验，我们应该在页面做些什么改进？&lt;/p&gt;
&lt;p&gt;9.  浏览器是如何打开PDF，Word等文档的？&lt;/p&gt;
&lt;p&gt;10. 如果让你开发一个浏览器，设计思路有哪些？&lt;/p&gt;

&lt;p&gt;我们知道，人的耐心是有限的，一个页面如果超过8s，人基本上不会等了，这会对业务产生巨大影响。我们该如何去优化页面呢？&lt;/p&gt;

&lt;p&gt;思路很简单，就是按照我们前面介绍的几大步骤去优化。我们先回顾一下几大步骤：&lt;/p&gt;
&lt;p&gt;1.     DNS查询&lt;/p&gt;
&lt;p&gt;2.    TCP连接&lt;/p&gt;
&lt;p&gt;3.    发送HTTP请求&lt;/p&gt;
&lt;p&gt;4.    Server处理HTTP请求并返回HTTP报文&lt;/p&gt;
&lt;p&gt;5.    浏览器解析并render页面&lt;/p&gt;
&lt;p&gt;6.    HTTP连接断开&lt;/p&gt;


&lt;p&gt;这是10多年前的经验，随着科技的发展，一些新的经验又出现了，可以容易想到的是：&lt;/p&gt;
&lt;p&gt;1.  尽量将server离用户近一些，例如人处在中国访问Apple，应该是Apple中国站提供服务，GSLB很重要。&lt;/p&gt;
&lt;p&gt;2. 不要把layout嵌入一层又一层，简单说就是嵌套别太深，不然影响解析和渲染性能。&lt;/p&gt;
&lt;p&gt;3. 有些数据可以在后台处理的，就不要在前端通过JavaScript处理了。&lt;/p&gt;
&lt;p&gt;4. 如果请求过大，Load Balance这些手段还是要上的。&lt;/p&gt;
&lt;p&gt;5. 保持HTTP连接，合理设置Connection。&lt;/p&gt;
&lt;p&gt;6. 后台事件性能要高，能够及时将结果返回给用户。&lt;/p&gt;
&lt;p&gt;当然涉及到高可用，高性能等那是另外一个话题。&lt;/p&gt;

&lt;p&gt;这道面试题非常经典，考察的知识非常丰富，跨度较大，如果没有几年的经验，是很难完全掌握的，所以想答好其实不容易的。对这个问题，基本上可以根据我的经验回答，也算是对这些年来在这方面的知识的一个总结。但同时，我也参考了一些资料，感谢他们。在参考的地方，我都把URL列出来了。&lt;/p&gt;

&lt;p&gt;写这篇文章耗费了大量时间，我觉得挺有意义，但是也不能保证里面的内容全都是正确或准确的，如果您有任何问题可以通过以下方式联系我，以便我进一步改正并更新。&lt;/p&gt;

&lt;p&gt;个人微信：terryisme                                    公众号：terrymemo&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1249/201812/1249-20181201180331787-1375481578.png&quot; alt=&quot;&quot;/&gt;                      &lt;img src=&quot;https://img2018.cnblogs.com/blog/1249/201812/1249-20181201180339884-1020766023.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;写到这里，三部分已经写完，在这里放上全文的PDF文档供大家参考，可能后面会更改，如果有新的文档，我将保持更新。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.cnblogs.com/files/confach/the_procedure_after_a_url_is_input_in_browser_20181204.pdf&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;下载 &lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;a href=&quot;https://files.cnblogs.com/files/confach/the_procedure_after_a_url_is_input_in_browser_20181204.pdf&quot; target=&quot;_blank&quot;&gt;2018/12/04版本&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Tue, 04 Dec 2018 14:05:00 +0000</pubDate>
<dc:creator>张太国</dc:creator>
<og:description>备注： 因为文章太长，所以将它分为三部分，本文是第三部分。 第一部分：深入浅出经典面试题：从浏览器中输入URL到页面加载发生了什么 - Part 1 第二部分：深入浅出经典面试题：从浏览器中输入URL</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/confach/p/10050437.html</dc:identifier>
</item>
<item>
<title>01 - Django模板系统 - PengShiQiang</title>
<link>http://www.cnblogs.com/pengsq/p/10067610.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pengsq/p/10067610.html</guid>
<description>&lt;p&gt;　　官方文档：https://docs.djangoproject.com/en/1.11/ref/templates/language/&lt;/p&gt;
&lt;h2&gt;常用语法：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {{ }}表示变量，在模板渲染的时候替换成值，{% %}表示逻辑相关的操作，{&lt;span&gt;#&lt;/span&gt;&lt;span&gt;....#}代表注释&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; {&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 取l中的第一个参数 #}&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;{{ l.0 }}
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; {&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 取字典中key的值 #}&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;{{ d.name }}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; {&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 取对象的name属性 #}&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;{{ person_list.0.name }}
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; {&lt;span&gt;#&lt;/span&gt;&lt;span&gt; .操作只能调用不带参数的方法 #}&lt;/span&gt;
&lt;span&gt;9&lt;/span&gt; {{ person_list.0.dream }}
&lt;/pre&gt;
&lt;p&gt;注：当模板系统遇到一个（.）时，会按照如下的顺序去查询：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在字典中查询&lt;/li&gt;
&lt;li&gt;属性或者方法&lt;/li&gt;
&lt;li&gt;数字索引&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;h4&gt;Filters&lt;/h4&gt;
&lt;p&gt;用来修改变量的显示结果。&lt;/p&gt;
&lt;p&gt;语法： {{ value|filter_name:参数 }}&lt;/p&gt;
&lt;p&gt;'|'左右没有空格没有空格没有空格&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;flter支持链式操作&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;例如：&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; {{ value|first|upper}}     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;首字母大写&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;1、默认值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;default
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; {{ value|default:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nothing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}}    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果value值没传的话就显示nothing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、格式化值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 1&lt;span&gt; default
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 2 {{ value|default:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nothing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}}    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果value值没传的话就显示nothing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、相加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;add
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;给变量加参数&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; {{ value|add:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; }}    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;value是数字4，则输出结果为6。&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; {{ first|add:second }} &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果first是 [1,.2,3] ，second是 [4,5,6] ，那输出结果是 [1,2,3,4,5,6] 。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、大小写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;lower
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;小写&lt;/span&gt;
{{ value|&lt;span&gt;lower }}

upper
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;大写&lt;/span&gt;
{{ value|upper}}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5、对齐方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;ljust
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;左对齐&lt;/span&gt;
 {{ value|ljust:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }}
 rjust
 
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;右对齐&lt;/span&gt;
 {{ value|rjust:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }}
 
 center
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;居中&lt;/span&gt;
 {{ value|center:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; }}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5、标题&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;标题&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; {{ value|title }}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6、返回value的长度&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {{ value|&lt;span&gt;length }}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;返回value的长度，如 value=['a', 'b', 'c', 'd']的话，就显示4.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7、切片&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;slice　　
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;切片&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; {{value|slice:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2:-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;first
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;取第一个元素&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; {{ value|&lt;span&gt;first }}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;last
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;取最后一个元素&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; {{ value|last }}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8、字符串拼接&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用字符串拼接列表。同python的str.join(list)。&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; {{ value|join:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; // &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; }}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;9、字符截取&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;truncatechars
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果字符串字符多于指定的字符数量，那么会被截断。截断的字符串将以可翻译的省略号序列（“...”）结尾。&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;参数：截断的字符数&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; {{ value|truncatechars:9}}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;10、日期格式化：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;date
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;日期格式化&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; {{ value|date:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Y-m-d H:i:s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;11、不必转义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;safe
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;Django的模板中会对HTML标签和JS等语法标签进行自动转义，原因显而易见，这样是为了安全。但是有的时候我们可能不希望这些HTML元素被转义，比如我们做一个内容管理系统，后台添加的文章中是经过修饰的，这些修饰可能是通过一个类似于FCKeditor编辑加注了HTML修饰符的文本，如果自动转义的话显示的就是保护HTML标签的源文件。为了在Django中关闭HTML的自动转义有两种方式，如果是一个单独的变量我们可以通过过滤器“|safe”的方式告诉Django这段代码是安全的不必转义。&lt;/span&gt;
&lt;span&gt;
比如：

value &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;a href='#'&amp;gt;点我&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

{{ value&lt;/span&gt;|safe}}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;自定义filter&lt;/h4&gt;
&lt;p&gt;自定义过滤器只是带有一个或两个参数的Python函数:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;变量（输入）的值 - -不一定是一个字符串&lt;/li&gt;
&lt;li&gt;参数的值 - 这可以有一个默认值，或完全省略&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如，在过滤器{{var | foo：“bar”}}中，过滤器&lt;strong&gt;foo&lt;/strong&gt;将传递变量&lt;strong&gt;var&lt;/strong&gt;和参数&lt;strong&gt;“bar”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;自定义filter代码文件摆放位置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; app01/
&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;.py
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    models.py
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     templatetags/  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在app01下面新建一个package package&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;.py
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         app01_filters.py  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 建一个存放自定义filter的py文件&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;     views.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编写自定义的filter&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django &lt;span&gt;import&lt;/span&gt;&lt;span&gt; template
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; register =&lt;span&gt; template.Library()
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;@register.filter
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; fill(value, arg):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; value.replace(&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, arg)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; @register.filter(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;addSB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; add_sb(value):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{} SB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(value)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用自定义的filter&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 先导入我们自定义filter那个文件 #}&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; {% load app01_filters %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; {&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用我们自定义的filter #}&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; {{ somevariable|fill:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; {{ d.name|addSB }}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt; Tags&lt;/h4&gt;
&lt;p&gt;1、for循环&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;ul&amp;gt;
&lt;span&gt;2&lt;/span&gt; {% &lt;span&gt;for&lt;/span&gt; user &lt;span&gt;in&lt;/span&gt; user_list %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &amp;lt;li&amp;gt;{{ user.name }}&amp;lt;/li&amp;gt;
&lt;span&gt;4&lt;/span&gt; {% empty %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &amp;lt;li&amp;gt;空空如也&amp;lt;/li&amp;gt;
&lt;span&gt;6&lt;/span&gt; {% endfor %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;for循环使用的一些参数:&lt;/p&gt;
&lt;table&gt;&lt;thead valign=&quot;bottom&quot;&gt;&lt;tr class=&quot;row-odd&quot;&gt;&lt;th class=&quot;head&quot;&gt;Variable&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody valign=&quot;top&quot; readability=&quot;7&quot;&gt;&lt;tr class=&quot;row-even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;forloop.counter&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前循环的索引值（从1开始）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;row-odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;forloop.counter0&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前循环的索引值（从0开始）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;row-even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;forloop.revcounter&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前循环的倒序索引值（从1开始）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;row-odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;forloop.revcounter0&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前循环的倒序索引值（从0开始）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;row-even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;forloop.first&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前循环是不是第一次循环（布尔值）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;row-odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;forloop.last&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前循环是不是最后一次循环（布尔值）&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;row-even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;forloop.parentloop&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;本层循环的外层循环&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; 2、if,elif和else&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1 #if语句支持 and 、or、==、&amp;gt;、&amp;lt;、!=、&amp;lt;=、&amp;gt;=、in、not in、is、is not判断。&lt;br/&gt;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; {% &lt;span&gt;if&lt;/span&gt; user_list %&lt;span&gt;}
&lt;/span&gt;3   用户人数：{{ user_list|&lt;span&gt;length }}
&lt;/span&gt;4 {% &lt;span&gt;elif&lt;/span&gt; black_list %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;   黑名单数：{{ black_list|&lt;span&gt;length }}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; {% &lt;span&gt;else&lt;/span&gt; %&lt;span&gt;}
&lt;/span&gt;7 &lt;span&gt;  没有用户
&lt;/span&gt;8 {% endif %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、with：&lt;/p&gt;
&lt;pre&gt;
定义一个中间变量，如果觉得自己的变量名太长，可以用with赋一个别名
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {% with total=business.employees.count %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     {{ total }} employee{{ total|&lt;span&gt;pluralize }}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; {% endwith %}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 4、csrf_token&lt;/p&gt;
&lt;p&gt;这个标签用于跨站请求伪造保护。&lt;/p&gt;
&lt;p&gt;在页面的form表单里面写上{% csrf_token %}&lt;/p&gt;
&lt;p&gt;5、注意事项&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; 1&lt;span&gt;. Django的模板语言不支持连续判断，即不支持以下写法：
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; {% &lt;span&gt;if&lt;/span&gt; a &amp;gt; b &amp;gt; c %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;...
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; {% endif %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 2&lt;span&gt;. Django的模板语言中属性的优先级大于方法
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; xx(request):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     d = {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 2, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 3, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;items&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xx.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: d})
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;如上，我们在使用render方法渲染一个页面的时候，传的字典d有一个key是items并且还有默认的 d.items() 方法，此时在模板语言中:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{{ data.items }}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 默认会取d的items key的值。
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; 1&lt;span&gt;. Django的模板语言不支持连续判断，即不支持以下写法：
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; {% &lt;span&gt;if&lt;/span&gt; a &amp;gt; b &amp;gt; c %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;...
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; {% endif %&lt;span&gt;}&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 2&lt;span&gt;. Django的模板语言中属性的优先级大于方法
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; xx(request):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     d = {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 2, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 3, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;items&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; render(request, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xx.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: d})
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;如上，我们在使用render方法渲染一个页面的时候，传的字典d有一个key是items并且还有默认的 d.items() 方法，此时在模板语言中:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{{ data.items }}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 默认会取d的items key的值。
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;自定义simpletag&lt;/h4&gt;
&lt;pre&gt;
&lt;span&gt;和自定义filter类似，只不过接收更灵活的参数。
&lt;br/&gt;1、定义注册simple tag&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; @register.simple_tag(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;plus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; plus(a, b, c):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{} + {} + {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(a, b, c)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、使用自定义simple tag&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
{% load app01_demo %&lt;span&gt;}

{&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; simple tag #}&lt;/span&gt;
{% plus &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;inclusion_tag：&lt;/h4&gt;
&lt;p&gt;类似于自定义的sim;pletag,不过inclusion_tag多用户返回html代码片段&lt;/p&gt;
&lt;p&gt;templatetags/my_inclusion.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django &lt;span&gt;import&lt;/span&gt;&lt;span&gt; template
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; register =&lt;span&gt; template.Library()
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; @register.inclusion_tag(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;result.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; show_results(n):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     n = 1 &lt;span&gt;if&lt;/span&gt; n &amp;lt; 1 &lt;span&gt;else&lt;/span&gt;&lt;span&gt; int(n)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     data = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;第{}项&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(i) &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(1, n+1&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: data}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;templates/result.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;ul&amp;gt;
&lt;span&gt;2&lt;/span&gt;   {% &lt;span&gt;for&lt;/span&gt; choice &lt;span&gt;in&lt;/span&gt; data %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &amp;lt;li&amp;gt;{{ choice }}&amp;lt;/li&amp;gt;
&lt;span&gt;4&lt;/span&gt;   {% endfor %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;templates/index.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;meta http-equiv=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x-ua-compatible&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IE=edge&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width, initial-scale=1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;title&amp;gt;inclusion_tag test&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&lt;span&gt;

{&lt;/span&gt;% load my_inclusion %&lt;span&gt;}

{&lt;/span&gt;% show_results 10 %&lt;span&gt;}
&lt;/span&gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;母版&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;!DOCTYPE html&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 3&lt;/span&gt; &amp;lt;head&amp;gt;
&lt;span&gt; 4&lt;/span&gt;   &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 5&lt;/span&gt;   &amp;lt;meta http-equiv=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x-ua-compatible&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IE=edge&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 6&lt;/span&gt;   &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width, initial-scale=1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 7&lt;/span&gt;   &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&lt;span&gt; 8&lt;/span&gt;   {% block page-css %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;   
&lt;span&gt;10&lt;/span&gt;   {% endblock %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &amp;lt;/head&amp;gt;
&lt;span&gt;12&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &amp;lt;h1&amp;gt;这是母板的标题&amp;lt;/h1&amp;gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; {% block page-main %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; {% endblock %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &amp;lt;h1&amp;gt;母板底部内容&amp;lt;/h1&amp;gt;
&lt;span&gt;20&lt;/span&gt; {% block page-js %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; {% endblock %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &amp;lt;/body&amp;gt;
&lt;span&gt;24&lt;/span&gt; &amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;继承母版&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 在子页面中在页面最上方使用下面的语法来继承母板。&lt;br/&gt;2 {% extends 'layouts.html' %}
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;块&lt;/h3&gt;
&lt;p&gt;通过在母板中使用&lt;code&gt;{% block  xxx %}&lt;/code&gt;来定义&quot;块&quot;。&lt;/p&gt;
&lt;p&gt;在子页面中通过定义母板中的block名来对应替换母板中相应的内容。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {% block page-main %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   &amp;lt;p&amp;gt;世情薄&amp;lt;/p&amp;gt;
&lt;span&gt;3&lt;/span&gt;   &amp;lt;p&amp;gt;人情恶&amp;lt;/p&amp;gt;
&lt;span&gt;4&lt;/span&gt;   &amp;lt;p&amp;gt;雨送黄昏花易落&amp;lt;/p&amp;gt;
&lt;span&gt;5&lt;/span&gt; {% endblock %}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;组件&lt;/h3&gt;
&lt;p&gt;可以将常用的页面内容如导航条，页尾信息等组件保存在单独的文件中，然后在需要使用的地方按如下语法导入即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {% include &lt;span&gt;'&lt;/span&gt;&lt;span&gt;navbar.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %}
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;静态文件相关&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {% load static %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% static &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;images/hi.jpg&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; %}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hi!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引用JS文件时使用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {% load static %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% static &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;mytest.js&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; %}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;某个文件多处被用到可以存为一个变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {% load static %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; {% static &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;images/hi.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; as myphoto %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{{ myphoto }}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/img&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;使用get_static_prefix&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {% load static %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{% get_static_prefix %}images/hi.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hi!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; {% load static %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; {% get_static_prefix as STATIC_PREFIX %&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{{ STATIC_PREFIX }}images/hi.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hi!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;5&lt;/span&gt; &amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{{ STATIC_PREFIX }}images/hi2.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; alt=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 04 Dec 2018 13:56:00 +0000</pubDate>
<dc:creator>PengShiQiang</dc:creator>
<og:description>Django模板： 官方文档：https://docs.djangoproject.com/en/1.11/ref/templates/language/ 常用语法： 注：当模板系统遇到一个（.）时，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pengsq/p/10067610.html</dc:identifier>
</item>
</channel>
</rss>