<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>初学Java Web(9)——学生管理系统（简易版）总结 - 我没有三颗心脏丶</title>
<link>http://www.cnblogs.com/wmyskxz/p/8817697.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wmyskxz/p/8817697.html</guid>
<description>&lt;p&gt;项目开始时间：2018年4月8日14:37:47&lt;br/&gt;项目完成时间：2018年4月9日10:03:30&lt;/p&gt;
&lt;h2 id=&quot;技术准备&quot;&gt;技术准备&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;这个项目是自己用于巩固 J2EE 相关知识的练手项目，非常简单，但是相关的功能却非常实用，所以在这里分享一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了完成这个项目，需要掌握如下技术：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Java&lt;br/&gt;基础知识&lt;/li&gt;
&lt;li&gt;前端：&lt;br/&gt;HTML, CSS, JAVASCRIPT, JQUERY&lt;/li&gt;
&lt;li&gt;J2EE：&lt;br/&gt;Tomcat, Servlet, JSP, Filter&lt;/li&gt;
&lt;li&gt;数据库：&lt;br/&gt;MySQL&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;开发流程&quot;&gt;开发流程&lt;/h2&gt;
&lt;p&gt;项目虽然很简单，很小，但是为了开发的有条不紊，还是按照商业项目的开发来完成。&lt;/p&gt;
&lt;h4 id=&quot;需求分析&quot;&gt;① 需求分析&lt;/h4&gt;
&lt;p&gt;首先要确定要做哪些功能&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用&lt;strong&gt;数据库&lt;/strong&gt;来&lt;strong&gt;保存数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;能&lt;strong&gt;增删改查&lt;/strong&gt;学生的信息&lt;em&gt;（学号，名称，年龄，性别，出生日期）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;表结构设计&quot;&gt;② 表结构设计&lt;/h4&gt;
&lt;p&gt;根据需求，那么只需要一个 student 表就能够完成功能了。&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;创建数据库：student&lt;/strong&gt;&lt;br/&gt;将数据库编码格式设置为 UTF-8 ，便于存取中文数据&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;EXISTS&lt;/span&gt; student;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DATABASE&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;创建学生表：student&lt;/strong&gt;&lt;br/&gt;不用&lt;strong&gt;学生学号(studentID)&lt;/strong&gt;作为主键的原因是：不方便操作，例如在更新数据的时候，同时也要更改学号，那这样的操作怎么办呢？&lt;br/&gt;所以我们加了一个 &lt;strong&gt;id&lt;/strong&gt; 用来唯一表示当前数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; student(
  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
  studentID &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt;,
  name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  age &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  sex &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  birthday &lt;span class=&quot;dt&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;)
) ENGINE=InnoDB &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; CHARSET=utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;原型设计&quot;&gt;③ 原型设计&lt;/h4&gt;
&lt;p&gt;就是设计界面，在商业项目中，这是很重要的一步，我们可以&lt;strong&gt;解除界面原型，低成本、高效率&lt;/strong&gt;的与客户达成&lt;strong&gt;需求的一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个项目一共就分为两个页面：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;主页面：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-0169962ea353fcbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;首页&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学生编辑页面：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-2eac73f04dcf3ea4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;编辑页面&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;实体类的设计&quot;&gt;④ 实体类的设计&lt;/h4&gt;
&lt;p&gt;实体类仅仅是对数据库中表的一一映射，同时可能还需要兼顾对业务能力的支持。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在 Packge[bean]下创建 Student 类：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package bean;

import java.util.Date;

public class Student {

    private int id;             // 在数据库中的ID
    private int studentID;      // 学号，跟ID区分开为了方便数据库操作
    private String name;        // 姓名
    private int age;            // 年龄
    private String sex;         // 性别
    private Date birthday;      // 出生日期

    // setter 和 getter (为节约篇幅没列出来)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;dao-类的设计&quot;&gt;⑤ DAO 类的设计&lt;/h4&gt;
&lt;p&gt;DAO，即 Date Access Object，数据库访问对象，就是对数据库相关操作的封装，让其他地方看不到 JDBC 的代码。&lt;/p&gt;
&lt;p&gt;首先我们先创建一个数据库操作的工具类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在 Packge[util]下创建 DBUtil 类：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;/**
 * 数据库工具类，这个类的作用是初始化驱动，并且提供一个getConnection用于获取连接。
 */
package util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBUtil {

    static String ip = &quot;127.0.0.1&quot;;
    static int port = 3306;
    static String database = &quot;student&quot;;
    static String encoding = &quot;UTF-8&quot;;
    static String loginName = &quot;root&quot;;
    static String password = &quot;root&quot;;

    static {

        try {
            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public static Connection getConnection() throws SQLException {
        String url = String.format(&quot;jdbc:mysql://%s:%d/%s?characterEncoding=%s&quot;, ip, port, database, encoding);
        return DriverManager.getConnection(url, loginName, password);
    }

    public static void main(String[] args) throws SQLException {
        System.out.println(getConnection());

    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;写工具类的好处：&lt;br/&gt;&lt;strong&gt;便于统一维护，降低维护成本&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后是 DAO 类，除了进行典型的 ORM 支持功能之外，也需要提供各种业务方法。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在 Packge[dao]下创建 StudentDAO 类：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package dao;

import bean.Student;
import util.DBUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentDAO {

    public int getTotal() {

        int total = 0;

        String sql = &quot;SELECT COUNT(*) FROM student&quot;;
        try (Connection c = DBUtil.getConnection(); Statement st = c.createStatement()) {

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                total = rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return total;
    }

    public void add(Student student) {

        String sql = &quot;INSERT INTO student VALUES(NULL,?,?,?,?,?)&quot;;
        try (Connection c = DBUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, student.getStudentID());
            ps.setString(2, student.getName());
            ps.setInt(3, student.getAge());
            ps.setString(4, student.getSex());
            ps.setDate(5, new java.sql.Date(student.getBirthday().getTime()));

            ps.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void delete(int id) {

        String sql = &quot;DELETE FROM student WHERE ID = ?&quot;;
        try (Connection c = DBUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, id);

            ps.execute();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void update(Student student) {

        String sql = &quot;update student set student_id = ?, name = ?, age = ?, sex = ?, birthday = ? where id = ? &quot;;
        try (Connection c = DBUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, student.getStudentID());
            ps.setString(2, student.getName());
            ps.setInt(3, student.getAge());
            ps.setString(4, student.getSex());
            ps.setDate(5, new java.sql.Date(student.getBirthday().getTime()));
            ps.setInt(6, student.getId());

            ps.execute();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public Student get(int id) {

        Student student = new Student();

        String sql = &quot;SELECT * FROM student WHERE ID = &quot; + id;
        try (Connection c = DBUtil.getConnection(); Statement st = c.createStatement()) {

            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {

                int student_id = rs.getInt(&quot;student_id&quot;);
                String name = rs.getString(&quot;name&quot;);
                int age = rs.getInt(&quot;age&quot;);
                String sex = rs.getString(&quot;sex&quot;);
                Date birthday = rs.getDate(&quot;birthday&quot;);
                student.setStudentID(student_id);
                student.setName(name);
                student.setAge(age);
                student.setSex(sex);
                student.setBirthday(birthday);
                student.setId(id);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return student;
    }

    public List&amp;lt;Student&amp;gt; list() {
        return list(0, Short.MAX_VALUE);
    }

    public List&amp;lt;Student&amp;gt; list(int start, int count) {

        List&amp;lt;Student&amp;gt; students = new ArrayList&amp;lt;&amp;gt;();

        String sql = &quot;SELECT * FROM student ORDER BY student_id desc limit ?,?&quot;;

        try (Connection c = DBUtil.getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {

            ps.setInt(1, start);
            ps.setInt(2, count);

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Student student = new Student();
                int id = rs.getInt(&quot;id&quot;);
                int studentID = rs.getInt(&quot;student_id&quot;);
                String name = rs.getString(&quot;name&quot;);
                int age = rs.getInt(&quot;age&quot;);
                String sex = rs.getString(&quot;sex&quot;);
                Date birthday = rs.getDate(&quot;birthday&quot;);
                student.setId(id);
                student.setStudentID(studentID);
                student.setName(name);
                student.setAge(age);
                student.setSex(sex);
                student.setBirthday(birthday);

                students.add(student);
            }

            rs.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return students;
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;该类中，既提供了&lt;strong&gt;增删改查&lt;/strong&gt;这些基本的 &lt;strong&gt;CRUD&lt;/strong&gt; 操作&lt;br/&gt;1.增加：&lt;code&gt;public void add(Student student)&lt;/code&gt;&lt;br/&gt;2.删除：&lt;code&gt;public void delete(int id)&lt;/code&gt;&lt;br/&gt;3.修改：&lt;code&gt;public void update(Student student)&lt;/code&gt;&lt;br/&gt;4.查询所有：&lt;code&gt;public List&amp;lt;Student&amp;gt; list()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;又提供了一些非 &lt;strong&gt;CRUD&lt;/strong&gt; 方法&lt;br/&gt;1.获取总数：&lt;code&gt;public int getTotal()&lt;/code&gt;&lt;br/&gt;2.根据 id 获取：&lt;code&gt;public Student get(int id)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;业务类介绍&quot;&gt;⑥ 业务类介绍&lt;/h4&gt;
&lt;p&gt;作为 J2EE Web 应用，一般都会按照如图所示的设计流程进行：&lt;br/&gt;Servlet -&amp;gt; Service（业务类） -&amp;gt; DAO -&amp;gt; database&lt;/p&gt;
&lt;p&gt;当浏览器提交请求到 Tomcat Web 服务器的时候，对应的 Servlet 的doGet/doPost 方法会被调用，接着在 Servlet 中调用 Service类，然后在 Service 类中调用DAO类，最后在 DAO 中访问数据库获取相应的数据。&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-7e224d06d164441a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;单本项目没有使用 Service 这一层，原因是在对 DAO 类进行开发中，已经提供了很好的支持业务的方法，没有必要再包括上一层 Service 业务类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考链接：&lt;a href=&quot;http://how2j.cn/k/tmall-j2ee/tmall-j2ee-995/995.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;功能开发&quot;&gt;⑦ 功能开发&lt;/h4&gt;
&lt;p&gt;需要按照模块之间的依赖关系，顺序开发。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先为项目添加&lt;a href=&quot;https://pan.baidu.com/s/19EXWcsi1DUMdUrCXgPeqVg&quot;&gt;必要的 jar 包&lt;/a&gt;：&lt;br/&gt;jstl.jar&lt;br/&gt;mysql-connector-java-5.0.8-bin.jar&lt;br/&gt;servlet-api.jar&lt;br/&gt;standard.jar&lt;br/&gt;这也是 Web 开发中最基本的 4 个包&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;编写-filter&quot;&gt;——【1.编写 Filter】——&lt;/h4&gt;
&lt;p&gt;由于项目中设计表单 POST 方式的提交，所以我们先来编写好相关编码的过滤器，好支持中文的存取&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在 Packge[filter] 下编写 EncodingFilter 类：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package filter;

import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebFilter(&quot;/*&quot;)
public class EncodingFilter implements Filter {

    public void destroy() {
    }

    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException {

        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) resp;

        // 设置编码格式为 UTF-8
        request.setCharacterEncoding(&quot;UTF-8&quot;);

        chain.doFilter(request, response);
    }

    public void init(FilterConfig config) throws ServletException {
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;编写-servlet&quot;&gt;——【2. 编写 Servlet 】——&lt;/h4&gt;
&lt;p&gt;按照传统的方式，我们项目的业务为&lt;strong&gt;增删改查&lt;/strong&gt;，所以对应四个路径，也就是需要编写四个 Servlet 才可以&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;AddServlet：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package servlet;

import bean.Student;
import dao.StudentDAO;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

@WebServlet(&quot;/addStudent&quot;)
public class AddServlet extends HttpServlet {

    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        Student student = new Student();

        // 直接从表单中获取数据
        int studentID = Integer.parseInt(req.getParameter(&quot;studentID&quot;));
        String name = req.getParameter(&quot;name&quot;);
        int age = Integer.parseInt(req.getParameter(&quot;age&quot;));
        String sex = req.getParameter(&quot;radio&quot;);
        Date birthday = null;

        // String 类型按照 yyyy-MM-dd 的格式转换为 java.util.Date 类
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
        try {
            birthday = simpleDateFormat.parse(req.getParameter(&quot;birthday&quot;));
        } catch (ParseException e) {
            e.printStackTrace();
        }

        student.setStudentID(studentID);
        student.setName(name);
        student.setAge(age);
        student.setSex(sex);
        student.setBirthday(birthday);

        new StudentDAO().add(student);

        resp.sendRedirect(&quot;/listStudent&quot;);  // 这里可以理解为刷新，重新请求
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;DeleteServlet：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package servlet;

import dao.StudentDAO;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet(&quot;/deleteStudent&quot;)
public class DeleteServlet extends HttpServlet {

    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        int id = Integer.parseInt(req.getParameter(&quot;id&quot;));
        new StudentDAO().delete(id);

        resp.sendRedirect(&quot;/listStudent&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;EditServlet：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package servlet;

import bean.Student;
import dao.StudentDAO;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet(&quot;/editStudent&quot;)
public class EditServlet extends HttpServlet {

    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        int id = Integer.parseInt(req.getParameter(&quot;id&quot;));
        Student student = new StudentDAO().get(id);

        req.setAttribute(&quot;student&quot;, student);

        req.getRequestDispatcher(&quot;/editStudent.jsp&quot;).forward(req, resp);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ListServlet：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package servlet;

import bean.Student;
import dao.StudentDAO;
import util.Page;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

@WebServlet(&quot;/listStudent&quot;)
public class ListServlet extends HttpServlet {

    private StudentDAO studentDAO = new StudentDAO();

    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        // 获取分页参数
        int start = 0;
        int count = 10;

        try {
            start = Integer.parseInt(req.getParameter(&quot;page.start&quot;));
            count = Integer.parseInt(req.getParameter(&quot;page.count&quot;));
        } catch (Exception e) {
        }

        Page page = new Page(start, count);

        List&amp;lt;Student&amp;gt; students = studentDAO.list(page.getStart(), page.getCount());
        int total = studentDAO.getTotal();
        page.setTotal(total);

        req.setAttribute(&quot;students&quot;, students);
        req.setAttribute(&quot;page&quot;, page);

        req.getRequestDispatcher(&quot;/listStudent.jsp&quot;).forward(req, resp);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;UpdateServlet：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package servlet;

import bean.Student;
import dao.StudentDAO;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

@WebServlet(&quot;/updateStudent&quot;)
public class UpdateServlet extends HttpServlet {

    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        Student student = new Student();

        int id = Integer.parseInt(req.getParameter(&quot;id&quot;));
        int studentID = Integer.parseInt(req.getParameter(&quot;studentID&quot;));
        String name = req.getParameter(&quot;name&quot;);
        int age = Integer.parseInt(req.getParameter(&quot;age&quot;));
        String sex = req.getParameter(&quot;radio&quot;);

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
        Date birthday = null;
        try {
            birthday = simpleDateFormat.parse(req.getParameter(&quot;birthday&quot;));
        } catch (ParseException e) {
            e.printStackTrace();
        }

        student.setId(id);
        student.setStudentID(studentID);
        student.setName(name);
        student.setAge(age);
        student.setSex(sex);
        student.setBirthday(birthday);

        new StudentDAO().update(student);

        resp.sendRedirect(&quot;/listStudent&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;jsp-的编写&quot;&gt;——【3. JSP 的编写】——&lt;/h4&gt;
&lt;p&gt;我们把默认的 index.jsp 修改成如下代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;%
    request.getRequestDispatcher(&quot;/listStudent&quot;).forward(request, response);
%&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;引入 JQ 和 Bootstrap&lt;br/&gt;为了简化操作，引入了 JQuery 和 Bootstrap&lt;/li&gt;
&lt;li&gt;编写 listStudent.jsp&lt;br/&gt;其实主要还是利用 Bootstrap 编写好整个页面，我写的时候也是对照&lt;a href=&quot;http://www.runoob.com/bootstrap/bootstrap-panels.html&quot;&gt;这里&lt;/a&gt;写的&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot;
         pageEncoding=&quot;UTF-8&quot; %&amp;gt;
&amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;

    &amp;lt;%-- 引入JQ和Bootstrap --%&amp;gt;
    &amp;lt;script src=&quot;js/jquery/2.0.0/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link href=&quot;css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;script src=&quot;js/bootstrap/3.3.6/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot;&amp;gt;

    &amp;lt;title&amp;gt;学生管理页面 - 首页&amp;lt;/title&amp;gt;

    &amp;lt;script&amp;gt;
        $(function () {
            $(&quot;ul.pagination li.disabled a&quot;).click(function () {
                return false;
            });
        });
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;div class=&quot;listDIV&quot;&amp;gt;
    &amp;lt;table class=&quot;table table-striped table-bordered table-hover table-condensed&quot;&amp;gt;

        &amp;lt;caption&amp;gt;学生列表 - 共${page.total}人&amp;lt;/caption&amp;gt;
        &amp;lt;thead&amp;gt;
        &amp;lt;tr class=&quot;success&quot;&amp;gt;
            &amp;lt;th&amp;gt;学号&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;性别&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;出生日期&amp;lt;/th&amp;gt;

            &amp;lt;th&amp;gt;编辑&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;删除&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;

        &amp;lt;tbody&amp;gt;
        &amp;lt;c:forEach items=&quot;${students}&quot; var=&quot;s&quot; varStatus=&quot;status&quot;&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;${s.studentID}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${s.name}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${s.age}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${s.sex}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${s.birthday}&amp;lt;/td&amp;gt;

                &amp;lt;td&amp;gt;&amp;lt;a href=&quot;/editStudent?id=${s.id}&quot;&amp;gt;&amp;lt;span class=&quot;glyphicon glyphicon-edit&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;a href=&quot;/deleteStudent?id=${s.id}&quot;&amp;gt;&amp;lt;span class=&quot;glyphicon glyphicon-trash&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/c:forEach&amp;gt;

        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;nav class=&quot;pageDIV&quot;&amp;gt;
    &amp;lt;ul class=&quot;pagination&quot;&amp;gt;
        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasPreviouse}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=0&quot;&amp;gt;
                &amp;lt;span&amp;gt;«&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasPreviouse}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=${page.start-page.count}&quot;&amp;gt;
                &amp;lt;span&amp;gt;‹&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        &amp;lt;c:forEach begin=&quot;0&quot; end=&quot;${page.totalPage-1}&quot; varStatus=&quot;status&quot;&amp;gt;

            &amp;lt;c:if test=&quot;${status.count*page.count-page.start&amp;lt;=30 &amp;amp;&amp;amp; status.count*page.count-page.start&amp;gt;=-10}&quot;&amp;gt;
                &amp;lt;li &amp;lt;c:if test=&quot;${status.index*page.count==page.start}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
                    &amp;lt;a
                            href=&quot;?page.start=${status.index*page.count}&quot;
                            &amp;lt;c:if test=&quot;${status.index*page.count==page.start}&quot;&amp;gt;class=&quot;current&quot;&amp;lt;/c:if&amp;gt;
                    &amp;gt;${status.count}&amp;lt;/a&amp;gt;
                &amp;lt;/li&amp;gt;
            &amp;lt;/c:if&amp;gt;
        &amp;lt;/c:forEach&amp;gt;

        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasNext}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=${page.start+page.count}&quot;&amp;gt;
                &amp;lt;span&amp;gt;›&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasNext}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=${page.last}&quot;&amp;gt;
                &amp;lt;span&amp;gt;»&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;

&amp;lt;div class=&quot;addDIV&quot;&amp;gt;

    &amp;lt;div class=&quot;panel panel-success&quot;&amp;gt;
        &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
            &amp;lt;h3 class=&quot;panel-title&quot;&amp;gt;增加学生&amp;lt;/h3&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;panel-body&quot;&amp;gt;

            &amp;lt;form method=&quot;post&quot; action=&quot;/addStudent&quot; role=&quot;form&quot;&amp;gt;
                &amp;lt;table class=&quot;addTable&quot;&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;学号：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;studentID&quot; id=&quot;studentID&quot; placeholder=&quot;请在这里输入学号&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;姓名：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; placeholder=&quot;请在这里输入名字&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;年龄：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;age&quot; id=&quot;age&quot; placeholder=&quot;请在这里输入年龄&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;性别：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;radio&quot; class=&quot;radio radio-inline&quot; name=&quot;radio&quot; value=&quot;男&quot;&amp;gt; 男
                            &amp;lt;input type=&quot;radio&quot; class=&quot;radio radio-inline&quot; name=&quot;radio&quot; value=&quot;女&quot;&amp;gt; 女
                        &amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;出生日期：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;date&quot; name=&quot;birthday&quot; id=&quot;birthday&quot; placeholder=&quot;请在这里输入出生日期&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr class=&quot;submitTR&quot;&amp;gt;
                        &amp;lt;td colspan=&quot;2&quot; align=&quot;center&quot;&amp;gt;
                            &amp;lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&amp;gt;提 交&amp;lt;/button&amp;gt;
                        &amp;lt;/td&amp;gt;

                    &amp;lt;/tr&amp;gt;

                &amp;lt;/table&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;eidtStudent.jsp&lt;br/&gt;编辑表单对照着首页的增加表单稍微改一改参数就好了&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot;
         pageEncoding=&quot;UTF-8&quot; %&amp;gt;
&amp;lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;

    &amp;lt;%-- 引入JQ和Bootstrap --%&amp;gt;
    &amp;lt;script src=&quot;js/jquery/2.0.0/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link href=&quot;css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;script src=&quot;js/bootstrap/3.3.6/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot;&amp;gt;

    &amp;lt;title&amp;gt;学生管理页面 - 编辑页面&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;div class=&quot;editDIV&quot;&amp;gt;

    &amp;lt;div class=&quot;panel panel-success&quot;&amp;gt;
        &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
            &amp;lt;h3 class=&quot;panel-title&quot;&amp;gt;编辑学生&amp;lt;/h3&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;panel-body&quot;&amp;gt;

            &amp;lt;form method=&quot;post&quot; action=&quot;/updateStudent&quot; role=&quot;form&quot;&amp;gt;
                &amp;lt;table class=&quot;editTable&quot;&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;学号：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;studentID&quot; id=&quot;studentID&quot; value=&quot;${student.studentID}&quot;
                                   placeholder=&quot;请在这里输入学号&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;姓名：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; value=&quot;${student.name}&quot; placeholder=&quot;请在这里输入名字&quot;&amp;gt;
                        &amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;年龄：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;age&quot; id=&quot;age&quot; value=&quot;${student.age}&quot; placeholder=&quot;请在这里输入年龄&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;性别：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;radio&quot; class=&quot;radio radio-inline&quot; name=&quot;radio&quot; value=&quot;男&quot;&amp;gt; 男
                            &amp;lt;input type=&quot;radio&quot; class=&quot;radio radio-inline&quot; name=&quot;radio&quot; value=&quot;女&quot;&amp;gt; 女
                        &amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;出生日期：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;date&quot; name=&quot;birthday&quot; id=&quot;birthday&quot; value=&quot;${student.birthday}&quot;
                                   placeholder=&quot;请在这里输入出生日期&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr class=&quot;submitTR&quot;&amp;gt;
                        &amp;lt;td colspan=&quot;2&quot; align=&quot;center&quot;&amp;gt;
                            &amp;lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;${student.id}&quot;&amp;gt;
                            &amp;lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&amp;gt;提 交&amp;lt;/button&amp;gt;
                        &amp;lt;/td&amp;gt;

                    &amp;lt;/tr&amp;gt;

                &amp;lt;/table&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;style.css 文件：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;body {
    padding-top: 60px;
}

div.listDIV {
    width: 600px;
    margin: 0 auto;
}

div.editDIV {
    width: 400px;
    margin: 0 auto;
}

nav.pageDIV {
    text-align: center;
}

div.addDIV {
    width: 300px;
    margin: 0 auto;
}

table.addTable {
    width: 100%;
    padding: 5px;
}

table.addTable td {
    padding: 5px;
}

table.editTable {
    width: 100%;
    padding: 5px;
}

table.editTable td {
    padding: 5px;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;项目细节&quot;&gt;——【4. 项目细节】——&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;项目的整理结构：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-e95ffeefc9bfbeca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;分页功能&quot;&gt;分页功能&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;首页在 Packge[util] 下创建一个 Page 工具类：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package util;

public class Page {

    int start;      // 开始数据
    int count;      // 每一页的数量
    int total;      // 总共的数据量

    public Page(int start, int count) {
        super();
        this.start = start;
        this.count = count;
    }

    public boolean isHasPreviouse(){
        if(start==0)
            return false;
        return true;

    }
    public boolean isHasNext(){
        if(start==getLast())
            return false;
        return true;
    }

    public int getTotalPage(){
        int totalPage;
        // 假设总数是50，是能够被5整除的，那么就有10页
        if (0 == total % count)
            totalPage = total /count;
            // 假设总数是51，不能够被5整除的，那么就有11页
        else
            totalPage = total / count + 1;

        if(0==totalPage)
            totalPage = 1;
        return totalPage;

    }

    public int getLast(){
        int last;
        // 假设总数是50，是能够被5整除的，那么最后一页的开始就是40
        if (0 == total % count)
            last = total - count;
            // 假设总数是51，不能够被5整除的，那么最后一页的开始就是50
        else
            last = total - total % count;

        last = last&amp;lt;0?0:last;
        return last;
    }

    // 各种 setter 和 getter
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;totalPage 是计算得来的数，用来表示页码一共的数量&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在首页显示的 StudentList 用 page 的参数来获取：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;List&amp;lt;Student&amp;gt; students = studentDAO.list(page.getStart(), page.getCount());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;并且在 DAO 类中用 &lt;strong&gt;LIMIT&lt;/strong&gt; 关键字：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;String sql = &quot;SELECT * FROM student ORDER BY student_id desc limit ?,?&quot;;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1.写好头和尾&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;nav class=&quot;pageDIV&quot;&amp;gt;
    &amp;lt;ul class=&quot;pagination&quot;&amp;gt;
    .....
    &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.写好&lt;code&gt;«&lt;/code&gt; &lt;code&gt;‹&lt;/code&gt;这两个功能按钮&lt;br/&gt;使用 &lt;code&gt;&amp;lt;c:if&amp;gt;&lt;/code&gt;标签来增加边界判断，如果没有前面的页码了则设置为disable状态&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasPreviouse}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=0&quot;&amp;gt;
                &amp;lt;span&amp;gt;«&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasPreviouse}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=${page.start-page.count}&quot;&amp;gt;
                &amp;lt;span&amp;gt;‹&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再通过 JavaScrip 代码来完成禁用功能：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script&amp;gt;
    $(function () {
        $(&quot;ul.pagination li.disabled a&quot;).click(function () {
            return false;
        });
    });
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.完成中间页码的编写&lt;br/&gt;从 &lt;code&gt;0&lt;/code&gt; 循环到 &lt;code&gt;page.totalPage - 1&lt;/code&gt; ，&lt;code&gt;varStatus&lt;/code&gt; 相当于是循环变量&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;status.count 是从1开始遍历&lt;/li&gt;
&lt;li&gt;status.index 是从0开始遍历&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要求：&lt;/strong&gt;显示当前页码的前两个和后两个就可，例如当前页码为3的时候，就显示 1 2 3(当前页) 4 5 的页码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解测试条件：&lt;/strong&gt;&lt;br/&gt;-10 &amp;lt;= 当前页*每一页显示的数目 - 当前页开始的数据编号 &amp;lt;= 30&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-1f82d91e47a31c7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/li&gt;
&lt;li&gt;只要理解了这个判断条件，其他的就都好理解了&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;c:forEach begin=&quot;0&quot; end=&quot;${page.totalPage-1}&quot; varStatus=&quot;status&quot;&amp;gt;

    &amp;lt;c:if test=&quot;${status.count*page.count-page.start&amp;lt;=30 &amp;amp;&amp;amp; status.count*page.count-page.start&amp;gt;=-10}&quot;&amp;gt;
        &amp;lt;li &amp;lt;c:if test=&quot;${status.index*page.count==page.start}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a
                    href=&quot;?page.start=${status.index*page.count}&quot;
                    &amp;lt;c:if test=&quot;${status.index*page.count==page.start}&quot;&amp;gt;class=&quot;current&quot;&amp;lt;/c:if&amp;gt;
            &amp;gt;${status.count}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/c:if&amp;gt;
&amp;lt;/c:forEach&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4.在 Servlet 中获取参数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 获取分页参数
int start = 0;
int count = 10;

try {
    start = Integer.parseInt(req.getParameter(&quot;page.start&quot;));
    count = Integer.parseInt(req.getParameter(&quot;page.count&quot;));
} catch (Exception e) {
}

....

// 共享 page 数据
req.setAttribute(&quot;page&quot;, page);&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;date-转换的问题&quot;&gt;Date 转换的问题&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;    /**
     * Date类型转为指定格式的String类型
     * 
     * @param source
     * @param pattern
     * @return
     */
    public static String DateToString(Date source, String pattern) {
        simpleDateFormat = new SimpleDateFormat(pattern);
        return simpleDateFormat.format(source);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;/**
     * 
     * 字符串转换为对应日期
     * 
     * @param source
     * @param pattern
     * @return
     */
    public static Date stringToDate(String source, String pattern) {
        simpleDateFormat = new SimpleDateFormat(pattern);
        Date date = null;
        try {
            date = simpleDateFormat.parse(source);
        } catch (Exception e) {
        }
        return date;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;项目总结&quot;&gt;项目总结&lt;/h2&gt;
&lt;p&gt;这一个项目实在有些太简单了，可能最需要理解的一个功能就属于&lt;strong&gt;【分页功能】&lt;/strong&gt;了吧&lt;/p&gt;
&lt;p&gt;不过还是借助这个项目，进一步巩固了 J2EE 开发的相关知识，也对开发的流程愈发熟悉，整个项目编写时间不超过 8 个小时，对于我自己来说，不算快，但还算比较顺畅的&lt;/p&gt;
&lt;h4 id=&quot;需要改进的地方&quot;&gt;需要改进的地方：&lt;/h4&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;登录验证&lt;br/&gt;本项目没有增加登录验证，可以增加一个登录页面并结合 session 来完成验证&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;代码重构&lt;br/&gt;本项目仅仅完成的是一个学生表的增删改查，却有以下的五个 Servlet ：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-83b087dbf84970dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果项目大起来，那可想而知，Servlet 有多臃肿，维护成本有多高&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;request.setAttribute(&quot;method&quot;, method);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;② 在 Servlet 中获取 method 方法，并调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;// 获取到对应的方法
String method = (String) request.getAttribute(&quot;method&quot;);
// 对 method 作判断，调用对应的方法&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;没有对输入的数据的正确性进行验证&lt;br/&gt;这显然会导致许多问题，可以通过 js 代码来完成验证&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;3.3290322580645&quot;&gt;
&lt;p&gt;欢迎转载，转载请注明出处！&lt;br/&gt;@我没有三颗心脏&lt;br/&gt;CSDN博客：&lt;a href=&quot;http://blog.csdn.net/qq939419061&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/qq939419061&lt;/a&gt;&lt;br/&gt;简书：&lt;a href=&quot;http://www.jianshu.com/u/a40d61a49221&quot; class=&quot;uri&quot;&gt;http://www.jianshu.com/u/a40d61a49221&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 12 Apr 2018 23:10:00 +0000</pubDate>
<dc:creator>我没有三颗心脏丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wmyskxz/p/8817697.html</dc:identifier>
</item>
<item>
<title>MySQL 如何使用 PV 和 PVC？- 每天5分钟玩转 Docker 容器技术（154） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8806237.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8806237.html</guid>
<description>&lt;p&gt;&lt;span&gt;本节演示如何为 MySQL 数据库提供持久化存储，步骤为：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;创建 PV 和 PVC。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;部署 MySQL。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;向 MySQL 添加数据。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;模拟节点宕机故障，Kubernetes 将 MySQL 自动迁移到其他节点。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;验证数据一致性。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;首先创建 PV 和 PVC，配置如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mysql-pv.yml&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180412105209347-1896987117.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mysql-pvc.yml&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180412105223100-361340471.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;创建 &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysql-pv&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysql-pvc&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180412105234935-1888599782.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来部署 MySQL，配置文件如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180412105250724-1557616017.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;PVC &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysql-pvc&lt;/span&gt;&lt;/code&gt;&lt;span&gt; Bound 的 PV &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysql-pv&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 将被 mount 到 MySQL 的数据目录 &lt;/span&gt;&lt;code&gt;&lt;span&gt;var/lib/mysql&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180412105318895-265105746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;MySQL 被部署到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;k8s-node2&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，下面通过客户端访问 Service &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -ppassword&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180412105346521-643952962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;更新数据库：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180412105522319-1149216624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;① 切换到数据库 mysql。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;② 创建数据库表 my_id。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;③ 插入一条数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;④ 确认数据已经写入。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;关闭 &lt;/span&gt;&lt;code&gt;&lt;span&gt;k8s-node2&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，模拟节点宕机故障。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180412105538680-1907122137.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;一段时间后，Kubernetes 将 MySQL 迁移到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;k8s-node1&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180412105549016-1263071731.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;验证数据的一致性：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180412105559801-510966328.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MySQL 服务恢复，数据也完好无损。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本章我们讨论了 Kubernetes 如何管理存储资源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;emptyDir 和 hostPath 类型的 Volume 很方便，但可持久性不强，Kubernetes 支持多种外部存储系统的 Volume。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PV 和 PVC 分离了管理员和普通用户的职责，更适合生产环境。我们还学习了如何通过 StorageClass 实现更高效的动态供给。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后，我们演示了如何在 MySQL 中使用 PersistentVolume 实现数据持久性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;书籍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Kubernetes》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/26225745440.html&quot;&gt;https://item.jd.com/26225745440.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;3.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 12 Apr 2018 23:03:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8806237.html</dc:identifier>
</item>
<item>
<title>广度优先(bfs)和深度优先搜索(dfs)的应用实例 - IDreamo</title>
<link>http://www.cnblogs.com/idreamo/p/8742617.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/idreamo/p/8742617.html</guid>
<description>&lt;h3&gt;广度优先搜索应用举例：计算网络跳数&lt;/h3&gt;
&lt;p&gt;图结构在解决许多网络相关的问题时直到了重要的作用。&lt;/p&gt;
&lt;p&gt;比如，用来确定在互联网中从一个结点到另一个结点（一个网络到其他网络的网关）的最佳路径。&lt;strong&gt;一种建模方法是采用无向图，其中顶点表示网络结点，边代表结点之间的联接&lt;/strong&gt;。使用这种模型，可以采用广度优先搜索来帮助确定结点间的最小跳数。&lt;/p&gt;
&lt;p&gt;如图1所示，该图代表Internet中的6个网络结点。以node1作为起点，有不止1条可以通往node4的路径。&amp;lt;node1,node2,node4&amp;gt;，&amp;lt;node1,node3,node2,node4&amp;gt;，&amp;lt;node1,node3,node5,node4&amp;gt;都是可行的路径。广度优先搜索可以确定最短路径选择，即&amp;lt;node1,node2,node4&amp;gt;，一共只需要两跳。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1281268/201804/1281268-20180413061255282-1093343944.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们&lt;strong&gt;以bfs作为广度优先搜索的函数名&lt;/strong&gt;（见示例1及示例2）。该函数用来确定互联网中两个结点之间的最小跳数。&lt;strong&gt;这个函数有3个参数：graph是一个图，在这个问题中就代表整个网络；start代表起始的顶点；hops是返回的跳数链表&lt;/strong&gt;。函数bfs会修改图graph，因此，如果有必要的话在调用该函数前先对图创建拷贝。另外，hops中返回的是指向graph中实际顶点的指针，因此调用者必须保证只要访问hops，graph中的存储空间就必须保持有效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;graph中的每一个顶点都是一个BfsVertex类型的结构体&lt;/strong&gt;（见示例1），&lt;strong&gt;该结构体有3个成员：data是指向图中顶点的数据域指针，color在搜索过程中维护顶点的颜色，hops维护从起始顶点开始到目标顶点的跳数统计。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;match函数是由调用者在初始化graph时作为参数传递给graph_init的。match函数应该只对BfsVertex结构体中的data成员进行比较。&lt;/p&gt;
&lt;p&gt;bfs函数将按照前面介绍过的&lt;a href=&quot;http://www.cnblogs.com/idreamo/p/8621259.html&quot; target=&quot;_blank&quot;&gt;广度优先搜索&lt;/a&gt;的方式来计算。为了记录到达每个顶点的最小跳数，将每个顶点的hop计数设置为与该顶点邻接的顶点的hop计数加1。对于每个发现的顶点都这样处理，并将其涂成灰色。每个顶点的颜色和跳数信息都由邻接表结构链表中的BfsVertex来维护。最后，加载hops中所有跳数未被标记为-1的顶点。这些就是从起始顶点可达的顶点。&lt;/p&gt;
&lt;p&gt;bfs的时间复杂度为O（V+E），这里V代表图中的顶点个数，E是边的个数。这是因为初始化顶点的颜色属性以及确保起始顶点存在都需要O（V）的运行时间，广度优先搜索中的循环的复杂度是O（V+E），加载跳数统计链表的时间为O（V）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1：广度优先搜索的头文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;bfs.h&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
#ifndef BFS_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; BFS_H&lt;span&gt;

#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;graph.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;定义广度优先搜索中的顶点数据结构&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; BfsVertex_
{
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;data;
    VertexColor color;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; hops;
}BfsVertex;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;函数接口定义&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; bfs(Graph *graph, BfsVertex *start, List *&lt;span&gt;hops);

&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; BFS_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;strong&gt;示例2：广度优先搜索的实现&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;bfs.c&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdlib.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bfs.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;graph.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;queue.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;bfs &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; bfs(Graph *graph, BfsVertex *start, List *&lt;span&gt;hops)
{
    Queue     queue;
    AdjList   &lt;/span&gt;*adjlist, *&lt;span&gt;clr_adjlist;
    BfsVertex &lt;/span&gt;*clr_vertex, *&lt;span&gt;adj_vertex;
    ListElmt  &lt;/span&gt;*element, *&lt;span&gt;member;
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;初始化图中的所有结点为广度优先结点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(element = list_head(&amp;amp;graph_adjlists(graph)); element != NULL; element =&lt;span&gt; list_next(element))
    {
        clr_vertex &lt;/span&gt;= ((AdjList *)list_data(element))-&amp;gt;&lt;span&gt;vertex;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(graph-&amp;gt;&lt;span&gt;match(clr_vertex,start))
        {
            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;初始化起始顶点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            clr_vertex&lt;/span&gt;-&amp;gt;color =&lt;span&gt; gray;
            clr_vertex&lt;/span&gt;-&amp;gt;hops  = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;初始化非起始顶点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            clr_vertex&lt;/span&gt;-&amp;gt;color =&lt;span&gt; white;
            clr_vertex&lt;/span&gt;-&amp;gt;hops = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;初始化队列，并将起始顶点的邻接表入队&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    queue_init(&lt;/span&gt;&amp;amp;&lt;span&gt;queue,NULL);
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;返回起始顶点的邻接表，存储到clr_adjlist&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(graph_adjlist(graph,start,&amp;amp;clr_adjlist) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        queue_destroy(&lt;/span&gt;&amp;amp;&lt;span&gt;queue);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将顶点的邻接表入队到队列&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(queue_enqueue(&amp;amp;queue,clr_adjlist) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt; )
    {
        queue_destroy(&lt;/span&gt;&amp;amp;&lt;span&gt;queue);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;执行广度优先探索&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt;(queue_size(&amp;amp;queue) &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        adjlist &lt;/span&gt;= queue_peek(&amp;amp;&lt;span&gt;queue);
        
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;遍历邻接表中的每一个顶点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;(member = list_head(&amp;amp;adjlist-&amp;gt;adjacent); member != NULL; member =&lt;span&gt; list_next(member))
        {
            adj_vertex &lt;/span&gt;=&lt;span&gt; list_data(member);
            
            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;决定下一个邻接点的颜色&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(graph_adjlist(graph,adj_vertex,&amp;amp;clr_adjlist) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                queue_destroy(&lt;/span&gt;&amp;amp;&lt;span&gt;queue);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
            clr_vertex &lt;/span&gt;= clr_adjlist-&amp;gt;&lt;span&gt;vertex;
            
            &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;把白色的顶点标成灰色，并把它的邻接顶点入队&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(clr_vertex-&amp;gt;color ==&lt;span&gt; white)
            {
                clr_vertex&lt;/span&gt;-&amp;gt;color =&lt;span&gt; gray;
                clr_vertex&lt;/span&gt;-&amp;gt;hops = ((BfsVertex *)adjlist-&amp;gt;vertex)-&amp;gt;hops + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(queue_enqueue(&amp;amp;queue,clr_adjlist) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    queue_destroy(&lt;/span&gt;&amp;amp;&lt;span&gt;queue);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
        
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将当前顶点邻接表从队列中移除并涂成黑色&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(queue_dequeue(&amp;amp;queue,(&lt;span&gt;void&lt;/span&gt; **)&amp;amp;adjlist) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            ((BfsVertex &lt;/span&gt;*)adjlist-&amp;gt;vertex)-&amp;gt;color =&lt;span&gt; black;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            queue_destroy(&lt;/span&gt;&amp;amp;&lt;span&gt;queue);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
    }
    
    queue_destroy(&lt;/span&gt;&amp;amp;&lt;span&gt;queue);
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;返回每一个顶点的hop计数到一个链表中&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    list_init(hops,NULL);
    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(element = list_head(&amp;amp;graph_adjlists(graph)); element != NULL; element =&lt;span&gt; list_next(element))
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;跳过那些没有被访问到的节点（hops = -1）&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        clr_vertex &lt;/span&gt;= ((AdjList *)list_data(element))-&amp;gt;&lt;span&gt;vertex;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(clr_vertex-&amp;gt;color != -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(list_ins_next(hops,list_tail(hops),clr_vertex) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                list_destroy(hops);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 深度优先搜索的应用举例：拓扑排序&lt;/h3&gt;
&lt;p&gt;有时候，我们必须根据各种事物间的依赖关系来确定一种可接受的执行顺序。比如，在大学里必须满足一些先决条件才能选的课程，或者一个复杂的项目，其中某个特定的阶段必须在其他阶段开始之前完成。&lt;strong&gt;要为这一类问题建模，可以采用优先级图，其采用的是有向图的思路&lt;/strong&gt;。&lt;strong&gt;在优先级图中，顶点代表任务，而边代表任务之间的依赖关系&lt;/strong&gt;。&lt;strong&gt;以必须先完成的任务为起点，以依赖于此任务的其他任务为终点，画一条边即可。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下图所示，它表示7门课程及其先决条件组成的一份课程表：S100没有先决条件，S200需要S100，S300需要S200和M100，M100没有先决条件，M200需要M100，M300需要S300和M200，并且S150没有先决条件同时也不是先决条件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1281268/201804/1281268-20180413063215089-315394773.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过对这些课程执行拓扑排序，深度优先搜索有助于确定出一中可接受的顺序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拓扑排序将顶点排列为有向无环图，因此所有的边都是从左到右的方向。正规来说，有向无环图G=(V,E)的拓扑排序是其顶点的一个线性排序，以便如果G中存在一条边（u，v），那么线性顺序中u出现在v的前面，在许多情况下，满足此条件的顺序有多个。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面的代码示例实现了函数dfs，即深度优先搜索。&lt;/strong&gt;该函数在这里用来对任务做拓扑排序。&lt;strong&gt;dfs有两个参数：graph代表图，在这个问题中则代表需要排序的任务；而参数ordered是完成拓扑排序后返回的顶点链表。&lt;/strong&gt;调用该函数会修改图graph，因此如果有必要需要在调用前先对graph创建一个副本。另外，函数返回后链表ordered中保存了指向图graph中顶点的指针，因此调用者必须保证，一旦访问ordered中的元素就必须保证graph中的存储空间保持有效。&lt;strong&gt;graph中的每一个顶点都是一个DfsVertex结构体，该结构体拥有两个成员：data是指向顶点数据域部分的指针；而color在搜索过程中负责维护顶点的颜色信息。&lt;/strong&gt;match函数是由调用者在初始化graph时通过参数传递给graph_init的，该函数应该只对DfsVertex结构体中的data成员进行比较。&lt;/p&gt;
&lt;p&gt;dfs按照深度优先的方式进行搜索。dfs_main是实际执行搜索的函数。dfs中的最后一个循环保证对图中所有未相连的元素完成了检索。在dfs_main中逐个完成顶点的搜索并将其涂黑，然后插入链表ordered的头部。最后，ordered就包含完整拓扑排序后的顶点。&lt;/p&gt;
&lt;p&gt;dfs的时间复杂度是O（V+E），V代表图中的顶点个数，而E代表边的个数。这是因为初始化顶点的颜色信息需要O（V）的时间，而dfs_main的时间复杂度为O（V+E）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例3：深度优先搜索的头文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;dfs.h&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
#ifndef DFS_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; DFS_H&lt;span&gt;

#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;graph.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;为深度优先搜索中的所有节点定义一个结构体&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; DfsVertex_
{
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; *&lt;span&gt;data;
    VertexColor color;
}DfsVertex;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;公共接口&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; dfs(Graph *graph,List *&lt;span&gt;ordered);

&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; DFS_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt; 示例4：深度优先搜索的函数实现&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;dfs.c&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdlib.h&amp;gt;&lt;span&gt;

#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dfs.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;graph.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;dfs_main&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; dfs_main(Graph *graph, AdjList *adjlist, List *&lt;span&gt;ordered)
{
    AdjList   &lt;/span&gt;*&lt;span&gt;clr_adjlist;
    DfsVertex &lt;/span&gt;*clr_vertex, *&lt;span&gt;adj_vertex;
    ListElmt  &lt;/span&gt;*&lt;span&gt;member;
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;首先，将起始顶点涂成灰色，并遍历它的邻接顶点集合&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    ((DfsVertex &lt;/span&gt;*)adjlist-&amp;gt;vertex)-&amp;gt;color =&lt;span&gt; gray;
    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(member = list_head(&amp;amp;adjlist-&amp;gt;adjacent); member != NULL; member =&lt;span&gt; list_next(member))
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;决定下一个集合顶点的颜色&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        adj_vertex &lt;/span&gt;=&lt;span&gt; list_data(member);
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(graph_adjlist(graph,adj_vertex,&amp;amp;clr_adjlist) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
        
        clr_vertex &lt;/span&gt;= clr_adjlist-&amp;gt;&lt;span&gt;vertex;
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;如果当前顶点是白色，则递归搜索它的邻接点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(clr_vertex-&amp;gt;color ==&lt;span&gt; white)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(dfs_main(graph,clr_adjlist,ordered) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;把当前顶点涂成“黑”色，并加入到链表头部&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    ((DfsVertex &lt;/span&gt;*)adjlist-&amp;gt;vertex)-&amp;gt;color =&lt;span&gt; black;
    
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(list_ins_next(ordered, NULL, (DfsVertex *)adjlist-&amp;gt;vertex) !=&lt;span&gt;0&lt;/span&gt;&lt;span&gt; )
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;dfs&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; dfs(Graph *graph, List *&lt;span&gt;ordered)
{
    DfsVertex &lt;/span&gt;*&lt;span&gt;vertex;
    ListElmt  &lt;/span&gt;*&lt;span&gt;element;
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;初始化图中的所有顶点&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(element = list_head(&amp;amp;graph_adjlists(graph)); element != NULL; element =&lt;span&gt; list_next(element))
    {
        vertex &lt;/span&gt;= ((AdjList *)list_data(element))-&amp;gt;&lt;span&gt;vertex;
        vertex&lt;/span&gt;-&amp;gt;color =&lt;span&gt; white;
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;执行广度优先搜索&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    list_init(ordered,NULL);
    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(element = list_head(&amp;amp;graph_adjlists(graph)); element != NULL; element =&lt;span&gt; list_next(element))
    {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;确保图中的每个顶点都能被检索到&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        vertex &lt;/span&gt;= ((AdjList *)list_data(element))-&amp;gt;&lt;span&gt;vertex;
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(vertex-&amp;gt;color ==&lt;span&gt; white)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(dfs_main(graph, (AdjList *)list_data(element), ordered) != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                list_destroy(ordered);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            }
        }
    }
    
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 12 Apr 2018 22:39:00 +0000</pubDate>
<dc:creator>IDreamo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/idreamo/p/8742617.html</dc:identifier>
</item>
<item>
<title>Java 微服务框架选型（Dubbo 和 Spring Cloud？） - 田园里的蟋蟀</title>
<link>http://www.cnblogs.com/xishuai/p/dubbo-and-spring-cloud.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xishuai/p/dubbo-and-spring-cloud.html</guid>
<description>&lt;p&gt;微服务（Microservices）是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力。&lt;/p&gt;
&lt;p&gt;以往我们开发应用程序都是单体型（可以看作是一个怪兽👿），虽然开发和部署比较方便，但后期随着业务的不断增加，开发迭代和性能瓶颈等问题，将会困扰开发团队，微服务就是解决此问题的有效手段，市面上有很多的微服务框架，比如最著名的两个 Dubbo 和 Spring Cloud，我们该如何选择呢？&lt;/p&gt;
&lt;p&gt;公司近期打算向 Java 微服务技术转型（一步一步实现，会考虑兼容 .NET/.NET Core），以下是我整理的相关内容，&lt;strong&gt;如果你有更好的建议和意见，欢迎探讨～～～&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于-rpcgrpchttprest&quot;&gt;关于 RPC/gRPC/HTTP/REST&lt;/h2&gt;
&lt;p&gt;因为服务调用方式是 Dubbo 和 Spring Cloud 重要不同点，了解 RPC/gRPC/HTTP/REST 相关概念，有助于对比 Dubbo 和 Spring Cloud。&lt;/p&gt;
&lt;p&gt;RPC 是远端过程调用，其调用协议通常&lt;strong&gt;包含传输协议和编码协议&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;HTTP 严格来说跟 RPC 不是一个层级的概念，&lt;strong&gt;HTTP 本身也可以作为 RPC 的传输层协议&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;传输协议包含: 如著名的 &lt;a href=&quot;https://grpc.io/&quot;&gt;&lt;strong&gt;gRPC&lt;/strong&gt;&lt;/a&gt; 使用的 &lt;strong&gt;HTTP 2.0 协议&lt;/strong&gt;，也有如 &lt;strong&gt;Dubbo&lt;/strong&gt; 一类的&lt;strong&gt;自定义报文的 TCP 协议&lt;/strong&gt;。编码协议包含: 如基于文本编码的 XML Json，也有二进制编码的 ProtoBuf Binpack 等。&lt;/p&gt;
&lt;p&gt;所谓的效率优势是针对 HTTP 1.1 协议来讲的，HTTP 2.0 协议已经优化编码效率问题，像 gRPC 这种 RPC 库使用的就是 HTTP 2.0 协议。&lt;/p&gt;
&lt;p&gt;在跨语言调用的时候，&lt;strong&gt;REST 风格直接把 HTTP 作为应用协议&lt;/strong&gt;（直接和服务打交道），不同语言之间调用比较方便。&lt;/p&gt;
&lt;p&gt;而 &lt;strong&gt;RPC 可以把 HTTP 作为一种传输协议&lt;/strong&gt;（比如 gRPC 使用 HTTP 2.0 协议传输），本身还会&lt;strong&gt;封装一层 RPC 框架的应用层协议&lt;/strong&gt;，不同语言之间调用需要&lt;strong&gt;依赖 RPC 协议&lt;/strong&gt;（需要跨语言 RPC 库实现，比如 Thrift）。&lt;/p&gt;
&lt;p&gt;问题：&lt;strong&gt;为什么 Dubbo 比 Spring Cloud 性能要高一些？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回答：&lt;strong&gt;因为 Dubbo 采用单一长连接和 NIO 异步通讯（保持连接/轮询处理），使用自定义报文的 TCP 协议，并且序列化使用定制 Hessian2 框架，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况，但不适用于传输大数据的服务调用。而 Spring Cloud 直接使用 HTTP 协议（但也不是强绑定，也可以使用 RPC 库，或者采用 HTTP 2.0 + 长链接方式（Fegin 可以灵活设置））。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，Martin Fowler 的 MicroServices 一文，&lt;strong&gt;其定义的服务间通信是 HTTP 协议的 REST API&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;dubbo-是什么&quot;&gt;Dubbo 是什么？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/incubator-dubbo&quot; class=&quot;uri&quot;&gt;https://github.com/apache/incubator-dubbo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dubbo 是一个分布式服务框架，致力于提供高性能和透明化的 &lt;strong&gt;RPC 远程服务调用方案&lt;/strong&gt;，以及 &lt;strong&gt;SOA 服务治理方案&lt;/strong&gt;。简单的说，Dubbo 就是个服务框架，说白了就是个&lt;strong&gt;远程服务调用的分布式框架&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;dubbo-框架&quot;&gt;Dubbo 框架&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435188/201804/435188-20180412214011124-1859129542.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;模块注解：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Provider: 暴露服务的&lt;strong&gt;服务提供方&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Consumer: 调用远程服务的&lt;strong&gt;服务消费方&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Registry: 服务注册与发现的&lt;strong&gt;注册中心&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Monitor: 统计服务的调用次调和调用时间的&lt;strong&gt;监控中心&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Container: 服务&lt;strong&gt;运行容器&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;流程详解：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;0 服务容器负责启动，加载，运行服务提供者（Standalone 容器）。&lt;/li&gt;
&lt;li&gt;1 服务提供者在启动时，向注册中心注册自己提供的服务（Zookeeper/Redis）。&lt;/li&gt;
&lt;li&gt;2 服务消费者在启动时，向注册中心订阅自己所需的服务。&lt;/li&gt;
&lt;li&gt;3 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。&lt;/li&gt;
&lt;li&gt;4 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。&lt;/li&gt;
&lt;li&gt;5 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心（根据数据可以动态调整权重）。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;dubbo-集群容错&quot;&gt;Dubbo 集群容错&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435188/201804/435188-20180412214429759-1005871251.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;面对服务消费方，当业务逻辑中需要调用一个服务时，真正调用的其实是 Dubbo 创建的一个 Proxy，该 Proxy 会把调用转化成调用指定的 Invoker（Cluster 将 Directory 中的多个 Invoker 伪装成一个 Invoker，对上层透明，伪装过程包含了容错逻辑，调用失败后，重试另一个（通过 LoadBalance），Invoker 封装了 Provider 地址及 Service 接口信息）。而在这一系列的委托调用的过程里就完成了服务治理的逻辑，最终完成调用。&lt;/p&gt;
&lt;h2 id=&quot;dubbo-特点&quot;&gt;Dubbo 特点&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;远程通讯&lt;/strong&gt;: 提供对多种基于长连接的 NIO 框架抽象封装（非阻塞 I/O 的通信方式，Mina/Netty/Grizzly），包括多种线程模型，序列化（Hessian2/ProtoBuf），以及“请求-响应”模式的信息交换方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集群容错&lt;/strong&gt;: 提供基于接口方法的透明远程过程调用（RPC），包括多协议支持（自定义 RPC 协议），以及软负载均衡（Random/RoundRobin），失败容错（Failover/Failback），地址路由，动态配置等集群支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动发现&lt;/strong&gt;: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;dubbo-发展历程&quot;&gt;Dubbo 发展历程&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;2008 年，阿里巴巴开始内部使用 Dubbo。&lt;/li&gt;
&lt;li&gt;2009 年初，发布 1.0 版本。&lt;/li&gt;
&lt;li&gt;2010 年初，发布 2.0 版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2011 年 10 月&lt;/strong&gt;，阿里巴巴宣布开源，版本为 2.0.7。&lt;/li&gt;
&lt;li&gt;2012 年 3 月，发布 2.1.0 版本。&lt;/li&gt;
&lt;li&gt;2013 年 3 月，发布 2.4.10 版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2014 年 10 月&lt;/strong&gt;，发布 2.3.11 版本，之后版本停滞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2017 年 9 月&lt;/strong&gt;，阿里巴巴重启维护，重点升级所依赖 JDK 及组件版本，发布 2.5.4/5 版本。&lt;/li&gt;
&lt;li&gt;2017 年 10 月，发布 2.5.6 版本。&lt;/li&gt;
&lt;li&gt;2017 年 11 月，发布 2.5.7 版本，后期集成 Spring Boot。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2014 年 10 月&lt;/strong&gt;，当当网 Fork 了 Dubbo 版本，命名为 Dubbox-2.8.0，并支持 HTTP REST 协议。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Dubbo 负责人说明（重启维护是接受的采访）：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;阿里内部使用 HSF，原因&lt;strong&gt;业务属性&lt;/strong&gt;和&lt;strong&gt;规模&lt;/strong&gt;有关。&lt;br/&gt;这里就不得不提到目前的一些文章在谈到微服务的时候总是拿 Spring Cloud 和 Dubbo 来对比，需要强调的是 &lt;strong&gt;Dubbo 未来的定位并不是要成为一个微服务的全面解决方案&lt;/strong&gt;，而是&lt;strong&gt;专注在 RPC 领域&lt;/strong&gt;，成为微服务生态体系中的一个重要组件。至于大家关注的微服务化衍生出的服务治理需求，我们会在 Dubbo 积极适配开源解决方案，甚至启动独立的开源项目予以支持。&lt;br/&gt;受众主要来自国内各友商以及个人开发者，希望将来能够将用户拓展到全球，代表国人在 RPC 领域与 &lt;strong&gt;gRPC&lt;/strong&gt;（基于 HTTP 2.0）、Finagle 等竞争。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;spring-cloud-是什么&quot;&gt;Spring Cloud 是什么？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-cloud&quot; class=&quot;uri&quot;&gt;https://github.com/spring-cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud 基于 Spring Boot，为微服务体系开发中的架构问题，提供了&lt;strong&gt;一整套的解决方案&lt;/strong&gt;——服务注册与发现，服务消费，服务保护与熔断，网关，分布式调用追踪，分布式配置管理等。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Spring Boot 是 Spring 的一套快速配置脚手架，使用默认大于配置的理念，用于快速开发单个微服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;基于 Spring Boot&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云服务、分布式框架集合（众多）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;核心功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;分布式/版本化配置&lt;/li&gt;
&lt;li&gt;服务注册和发现&lt;/li&gt;
&lt;li&gt;路由&lt;/li&gt;
&lt;li&gt;服务和服务之间的调用&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;断路器&lt;/li&gt;
&lt;li&gt;分布式消息传递&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;spring-cloud-完整技术&quot;&gt;Spring Cloud 完整技术&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435188/201804/435188-20180412214045427-176081083.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;spring-cloud-组件架构&quot;&gt;Spring Cloud 组件架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435188/201804/435188-20180412214057237-895217720.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;流程：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;请求统一通过 API 网关（Zuul）来访问内部服务。&lt;/li&gt;
&lt;li&gt;网关接收到请求后，从注册中心（Eureka）获取可用服务。&lt;/li&gt;
&lt;li&gt;由 Ribbon 进行均衡负载后，分发到后端具体实例。&lt;/li&gt;
&lt;li&gt;微服务之间通过 Feign 进行通信处理业务。&lt;/li&gt;
&lt;li&gt;Hystrix 负责处理服务超时熔断。&lt;/li&gt;
&lt;li&gt;Turbine 监控服务间的调用和熔断相关指标。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;spring-cloud工具框架&quot;&gt;Spring Cloud工具框架&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Spring Cloud Config 配置中心&lt;/strong&gt;，利用 Git 集中管理程序的配置。&lt;/li&gt;
&lt;li&gt;Spring Cloud Netflix 集成众多Netflix的开源软件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Netflix Eureka 服务中心&lt;/strong&gt;（类似于管家的概念，需要什么直接从这里取，就可以了），一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Netflix Hystrix 熔断器&lt;/strong&gt;，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Netflix Zuul 网关&lt;/strong&gt;，是在云平台上提供动态路由，监控，弹性，安全等边缘服务的框架。Web 网站后端所有请求的前门。&lt;/li&gt;
&lt;li&gt;Spring Cloud Netflix Archaius 配置管理 API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Netflix Ribbon 负载均衡&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Netflix Fegin REST客户端&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Bus 消息总线&lt;/strong&gt;，利用分布式消息将服务和服务实例连接在一起，用于在一个集群中传播状态的变化。&lt;/li&gt;
&lt;li&gt;Spring Cloud for Cloud Foundry 利用 Pivotal Cloudfoundry 集成你的应用程序。&lt;/li&gt;
&lt;li&gt;Spring Cloud Cloud Foundry Service Broker 为建立管理云托管服务的服务代理提供了一个起点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Cluster 集群工具&lt;/strong&gt;，基于 Zookeeper, Redis, Hazelcast, Consul 实现的领导选举和平民状态模式的抽象和实现。&lt;/li&gt;
&lt;li&gt;Spring Cloud Consul 基于 Hashicorp Consul 实现的服务发现和配置管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Security 安全控制&lt;/strong&gt;，在 Zuul 代理中为 OAuth2 REST 客户端和认证头转发提供负载均衡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Sleuth 分布式链路监控&lt;/strong&gt;，SpringCloud 应用的分布式追踪系统，和 Zipkin，HTrace，ELK 兼容。&lt;/li&gt;
&lt;li&gt;Spring Cloud Data Flow 一个云本地程序和操作模型，组成数据微服务在一个结构化的平台上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud Stream 消息组件&lt;/strong&gt;，基于 Redis，Rabbit，Kafka 实现的消息微服务，简单声明模型用以在 Spring Cloud 应用中收发消息。&lt;/li&gt;
&lt;li&gt;Spring Cloud Stream App Starters 基于 Spring Boot 为外部系统提供 Spring 的集成。&lt;/li&gt;
&lt;li&gt;Spring Cloud Task 短生命周期的微服务，为 Spring Booot 应用简单声明添加功能和非功能特性。&lt;/li&gt;
&lt;li&gt;Spring Cloud Task App Starters。&lt;/li&gt;
&lt;li&gt;Spring Cloud Zookeeper 服务发现和配置管理基于 Apache Zookeeper。&lt;/li&gt;
&lt;li&gt;Spring Cloud for Amazon Web Services 快速和亚马逊网络服务集成。&lt;/li&gt;
&lt;li&gt;Spring Cloud Connectors 便于PaaS应用在各种平台上连接到后端像数据库和消息经纪服务。&lt;/li&gt;
&lt;li&gt;Spring Cloud Starters （项目已经终止并且在 Angel.SR2 后的版本和其他项目合并）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Cloud CLI 命令行工具&lt;/strong&gt;，插件用 Groovy 快速的创建 Spring Cloud 组件应用。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;dubbo-一些优点&quot;&gt;Dubbo 一些优点&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Dubbo 支持 &lt;strong&gt;RPC 调用&lt;/strong&gt;，服务之间的调用性能会很好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持多种序列化协议&lt;/strong&gt;，如 Hessian、HTTP、WebService。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dobbo Admin后台管理功能强大&lt;/strong&gt;，提供了路由规则、动态配置、访问控制、权重调节、均衡负载等功能。&lt;/li&gt;
&lt;li&gt;在国内影响力比较大，&lt;strong&gt;中文社区文档较为全面&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;阿里最近&lt;strong&gt;重启维护&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;dubbo-一些问题&quot;&gt;Dubbo 一些问题&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Registry 严重依赖第三方组件&lt;/strong&gt;（zookeeper 或者 redis），当这些组件出现问题时，服务调用很快就会中断。&lt;/li&gt;
&lt;li&gt;Dubbo 只支持 RPC 调用。使得服务提供方（抽象接口）与调用方在代码上产生了&lt;strong&gt;强依赖&lt;/strong&gt;，服务提供者需要不断将包含抽象接口的 jar 包打包出来供消费者使用。一旦打包出现问题，就会导致服务调用出错，并且以后发布部署会成很大问题（太强的依赖关系）。&lt;/li&gt;
&lt;li&gt;另外，以后要兼容 .NET Core 服务，&lt;strong&gt;Dubbo RPC 本身不支持跨语言&lt;/strong&gt;（可以用跨语言 RPC 框架解决，比如 Thrift、gRPC（重复封装了），或者自己再包一层 REST 服务，提供跨平台的服务调用实现，但相对麻烦很多）&lt;/li&gt;
&lt;li&gt;Dubbo &lt;strong&gt;只是实现了服务治理&lt;/strong&gt;，其他微服务框架并未包含，如果需要使用，需要结合第三方框架实现（比如分布式配置用淘宝的 Diamond、服务跟踪用京东的 Hydra，但使用相对麻烦些），开发成本较高，且风险较大。&lt;/li&gt;
&lt;li&gt;社区更新不及时（虽然最近在疯狂更新），但也难免阿里以后又不更新了，就尴尬了。&lt;/li&gt;
&lt;li&gt;主要是国内公司使用，但阿里内部使用 HSF，相对于 Spring Cloud，企业应用会差一些。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;spring-cloud-的一些优点&quot;&gt;Spring Cloud 的一些优点&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;有强大的 Spring 社区、Netflix 等公司支持，并且&lt;strong&gt;开源社区贡献非常活跃&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标准化&lt;/strong&gt;的将微服务的成熟产品和框架结合一起，Spring Cloud 提供&lt;strong&gt;整套的微服务解决方案，开发成本较低，且风险较小&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于 Spring Boot&lt;/strong&gt;，具有简单配置、快速开发、轻松部署、方便测试的特点。&lt;/li&gt;
&lt;li&gt;支持 REST 服务调用，相比于 RPC，更加&lt;strong&gt;轻量化和灵活&lt;/strong&gt;（服务之间只依赖一纸契约，不存在代码级别的强依赖），有利于&lt;strong&gt;跨语言服务的实现&lt;/strong&gt;，以及&lt;strong&gt;服务的发布部署&lt;/strong&gt;。另外，结合 Swagger，也使得&lt;strong&gt;服务的文档一体化&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;提供了 Docker 及 Kubernetes 微服务编排支持。&lt;/li&gt;
&lt;li&gt;国内外企业应用非常多，经受了大公司的应用考验（比如 Netfilx 公司），以及强大的开源社区支持。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;spring-cloud-的一些问题&quot;&gt;Spring Cloud 的一些问题&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;支持 REST 服务调用，可能因为&lt;strong&gt;接口定义过轻&lt;/strong&gt;，导致定义文档与实际实现不一致导致服务集成时的问题（可以使用统一文档和版本管理解决，比如 Swagger）。&lt;/li&gt;
&lt;li&gt;另外，&lt;strong&gt;REST 服务调用性能会比 RPC 低一些&lt;/strong&gt;（但也不是强绑定）&lt;/li&gt;
&lt;li&gt;Spring Cloud 整合了大量组件，&lt;strong&gt;相关文档比较复杂&lt;/strong&gt;，需要针对性的进行阅读。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;服务调用方式的不同&quot;&gt;服务调用方式的不同&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435188/201804/435188-20180412214553349-1928110836.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Spring Cloud 抛弃了 Dubbo 的 RPC 通信，采用的是基于 HTTP 的 REST 方式。严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生 RPC 带来的问题。而且 REST 相比 RPC 更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更加合适。&lt;/p&gt;
&lt;h2 id=&quot;dubbo-和-spring-cloud-对比&quot;&gt;Dubbo 和 Spring Cloud 对比&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/435188/201804/435188-20180412214125747-2064544666.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dubbo 专注 RPC 和服务治理，Spring Cloud 则是一个微服务架构生态。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;zookeeper-和-eureka-的区别&quot;&gt;ZooKeeper 和 Eureka 的区别&lt;/h2&gt;
&lt;p&gt;鉴于服务发现对服务化架构的重要性，Dubbo 实践通常以 ZooKeeper 为注册中心（Dubbo 原生支持的 Redis 方案需要服务器时间同步，且性能消耗过大）。针对分布式领域著名的 CAP 理论（C——数据一致性，A——服务可用性，P——服务对网络分区故障的容错性），Zookeeper 保证的是 CP ，但&lt;strong&gt;对于服务发现而言，可用性比数据一致性更加重要，AP 胜过 CP，而 Eureka 设计则遵循 AP 原则&lt;/strong&gt;。&lt;br/&gt;Spring Cloud 支持 Consul（CA）和 Zookeeper，但不推荐使用。&lt;/p&gt;
&lt;h2 id=&quot;网易考拉选型参考&quot;&gt;网易考拉选型参考&lt;/h2&gt;
&lt;p&gt;当前开源上可选用的微服务框架主要有 Dubbo、Spring Cloud 等，鉴于 Dubbo 完备的功能和文档且在国内被众多大型互联网公司选用，考拉自然也选择了 Dubbo 作为服务化的基础框架。&lt;strong&gt;其实相比于 Dubbo，Spring Cloud 可以说是一个更完备的微服务解决方案，它从功能性上是 Dubbo 的一个超集，个人认为从选型上对于一些中小型企业 Spring Cloud 可能是一个更好的选择&lt;/strong&gt;。提起 Spring Cloud，一些开发的第一印象是 HTTP + JSON 的 REST 通信，性能上难堪重用，其实这也是一种误读。微服务选型要评估以下几点：内部是否存在异构系统集成的问题；备选框架功能特性是否满足需求；HTTP 协议的通信对于应用的负载量会否真正成为瓶颈点（&lt;strong&gt;Spring Cloud 也并不是和 HTTP + JSON 强制绑定的，如有必要 Thrift、ProtoBuf 等高效的 RPC、序列化协议同样可以作为替代方案&lt;/strong&gt;）；社区活跃度、团队技术储备等。作为已经没有团队持续维护的开源项目，&lt;strong&gt;选择 Dubbo 框架内部就必须要组建一个维护团队&lt;/strong&gt;，先不论你要准备要集成多少功能做多少改造，作为一个支撑所有工程正常运转的基础组件，问题的及时响应与解答、重大缺陷的及时修复能力就已足够重要。&lt;/p&gt;
&lt;h2 id=&quot;dubbo-和-spring-cloud-比喻&quot;&gt;Dubbo 和 Spring Cloud 比喻&lt;/h2&gt;
&lt;p&gt;使用 Dubbo 构建的微服务架构就像&lt;strong&gt;组装电脑&lt;/strong&gt;，各环节我们的选择自由度很高，但是最终结果很有可能因为一条内存质量不行就点不亮了，总是&lt;strong&gt;让人不怎么放心&lt;/strong&gt;，但是如果你是一名高手，那这些都不是问题；而 Spring Cloud 就像&lt;strong&gt;品牌机&lt;/strong&gt;，在 Spring Source 的整合下，做了大量的兼容性测试，保证了机器拥有更高的&lt;strong&gt;稳定性&lt;/strong&gt;，但是如果要在使用非原装组件外的东西，就需要对其基础有足够的了解。&lt;/p&gt;
&lt;h2 id=&quot;net-core的兼容方案&quot;&gt;.NET Core的兼容方案&lt;/h2&gt;
&lt;p&gt;若使用 Spring Cloud，.NET Core 兼容 Spring Cloud 比较好实现，因为基于 REST 服务调用，可以自行实现其服务（Eureka 提供 REST API 进行服务注册），也已有成熟的开源框架如 &lt;a href=&quot;http://steeltoe.io/&quot;&gt;Steeltoe&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;官方介绍：&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;Steeltoe is an open source project that enables .NET developers to implement industry standard best practices when building resilient microservices for the cloud. The Steeltoe client libraries enable .NET Core and .NET Framework apps to &lt;strong&gt;easily leverage Netflix Eureka, Hystrix, Spring Cloud Config Server, and Cloud Foundry services&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关于-service-mesh&quot;&gt;关于 Service Mesh&lt;/h2&gt;
&lt;p&gt;2017 年底，&lt;strong&gt;非侵入式&lt;/strong&gt;的 Service Mesh 技术从萌芽到走向了成熟。&lt;/p&gt;
&lt;p&gt;Service Mesh 又译作“服务网格”，作为&lt;strong&gt;服务间通信的基础设施层&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果用一句话来解释什么是 Service Mesh，可以将它比作是应用程序或者说微服务间的 TCP/IP，&lt;strong&gt;负责服务之间的网络调用、限流、熔断和监控&lt;/strong&gt;。对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用 Service Mesh 也就无须关系服务之间的那些原来是通过应用程序或者其他框架实现的事情，比如 Spring Cloud、OSS，现在只要交给 Service Mesh 就可以了。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Linkerd&lt;/strong&gt;（&lt;a href=&quot;https://github.com/linkerd/linkerd&quot; class=&quot;uri&quot;&gt;https://github.com/linkerd/linkerd&lt;/a&gt;）：第一代 Service Mesh，2016 年 1 月 15 日首发布，业界第一个 Service Mesh 项目，由 Buoyant 创业小公司开发（前 Twitter 工程师），2017 年 7 月 11 日，宣布和 Istio 集成，成为 Istio 的数据面板。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Envoy&lt;/strong&gt;（&lt;a href=&quot;https://github.com/envoyproxy/envoy&quot; class=&quot;uri&quot;&gt;https://github.com/envoyproxy/envoy&lt;/a&gt;）：第一代 Service Mesh，2016 年 9 月 13 日首发布，由 Matt Klein 个人开发（Lyft 工程师），之后默默发展，版本较稳定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio&lt;/strong&gt;（&lt;a href=&quot;https://github.com/istio/istio&quot; class=&quot;uri&quot;&gt;https://github.com/istio/istio&lt;/a&gt;）：第二代 Service Mesh，2017 年 5 月 24 日首发布，由 Google、IBM 和 Lyft 联合开发，只支持 Kubernetes 平台，2017 年 11 月 30 日发布 0.3 版本，开始支持非 Kubernetes 平台，之后稳定的开发和发布。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conduit&lt;/strong&gt;（&lt;a href=&quot;https://github.com/runconduit/conduit&quot; class=&quot;uri&quot;&gt;https://github.com/runconduit/conduit&lt;/a&gt;）：第二代 Service Mesh，2017 年 12 月 5 日首发布，由 Buoyant 公司开发（借鉴 Istio 整体架构，部分进行了优化），对抗 Istio 压力山大，也期待 Buoyant 公司的毅力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nginMesh&lt;/strong&gt;（&lt;a href=&quot;https://github.com/nginmesh/nginmesh&quot; class=&quot;uri&quot;&gt;https://github.com/nginmesh/nginmesh&lt;/a&gt;）：2017 年 9 月首发布，由 Nginx 开发，定位是作为 Istio 的服务代理，也就是替代 Envoy，思路跟 Linkerd 之前和 Istio 集成很相似，极度低调，GitHub 上的 star 也只有不到 100。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kong&lt;/strong&gt;（&lt;a href=&quot;https://github.com/Kong/kong&quot; class=&quot;uri&quot;&gt;https://github.com/Kong/kong&lt;/a&gt;）：比 nginMesh 更加低调，默默发展中。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;关于 Dubbo 和 Spring Cloud 的相关概念和对比，上面已经叙述的很清楚了，我个人比较&lt;strong&gt;倾向于 Spring Cloud&lt;/strong&gt;，原因就是&lt;strong&gt;真正的微服务框架、提供整套的组件支持、使用简单方便、强大的社区支持&lt;/strong&gt;等等，另外，因为考虑到 .NET/.NET Core 的兼容处理，RPC 并不能很好的实现跨语言（需要借助跨语言库，比如 gRPC、Thrift，但因为 Dubbo 本身就是“gRPC”，在 Dubbo 之上再包一层 gRPC，有点重复封装了），而 HTTP REST 本身就是&lt;strong&gt;支持跨语言实现&lt;/strong&gt;，所以，Spring Cloud 这一点还是非常好的（Dubbox 也支持，但性能相比要差一些）。&lt;/p&gt;
&lt;p&gt;但凡事无绝对，每件事物有好的地方也有不好的地方，总的来说，Dubbo 和 Spring Cloud 的主要不同体现在两个方面：&lt;strong&gt;服务调用方式不同&lt;/strong&gt;和&lt;strong&gt;专注点不同（生态不同）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;最后，关于 Service Mesh，因为是很新的概念（去年年底才火起来），相关的框架并未真正用于生产环境，所以这边就不考虑了，但以后可能会发展的非常好。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
</description>
<pubDate>Thu, 12 Apr 2018 22:35:00 +0000</pubDate>
<dc:creator>田园里的蟋蟀</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xishuai/p/dubbo-and-spring-cloud.html</dc:identifier>
</item>
<item>
<title>Django REST framework+Vue 打造生鲜超市（五） - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/8810591.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/8810591.html</guid>
<description>&lt;h2&gt;六、商品类别数据展示&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;6.1. 商品类别数据接口&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）商品分类有两个接口：&lt;/p&gt;
&lt;p&gt;一种是全部分类：一级二级三级&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180412211017353-1269586885.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;  一种是某一类的分类以及商品详细信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180412211640602-238487259.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 开始写商品分类的接口&lt;/p&gt;
&lt;p&gt;（2）序列化&lt;/p&gt;
&lt;p&gt;给分类添加三级分类的serializer&lt;/p&gt;
&lt;p&gt; goods/serializers.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; serializers
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Goods,GoodsCategory


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CategorySerializer3(serializers.ModelSerializer):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;三级分类&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;=&lt;span&gt; GoodsCategory
        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CategorySerializer2(serializers.ModelSerializer):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    二级分类
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在parent_category字段中定义的related_name=&quot;sub_cat&quot; &lt;/span&gt;
    sub_cat = CategorySerializer3(many=&lt;span&gt;True)
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;=&lt;span&gt; GoodsCategory
        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CategorySerializer(serializers.ModelSerializer):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    商品一级类别序列化
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    sub_cat &lt;/span&gt;= CategorySerializer2(many=&lt;span&gt;True)
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;=&lt;span&gt; GoodsCategory
        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）views.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CategoryViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    list:
        商品分类列表数据
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;

    queryset &lt;/span&gt;=&lt;span&gt; GoodsCategory.objects.&lt;/span&gt;filter(category_type=1)
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;serializer_class &lt;/span&gt;= CategorySerializer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;注释的内容，在后面生成drf文档的时候会显示出来，所有要写清楚&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;要想获取某一个商品的详情的时候，继承 mixins.RetrieveModelMixin  就可以了&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; （4）url配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 配置Category的url&lt;/span&gt;
router.register(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;categorys&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, CategoryViewSet, base_name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;categorys&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180412214814597-1463411367.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;6.2.vue展示商品分类数据&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 接口相关代码都放在src/api/api.js里面，调试接口的时候我们首先需要新建一个自己的host，然后替换要调试的host&lt;/p&gt;
&lt;p&gt;（1）新建local_host&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
let local_host = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://127.0.0.1:8000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）替换商品类别默认的host&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
//&lt;span&gt;获取商品类别信息
export const getCategory &lt;/span&gt;= params =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; params){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; axios.get(`${local_host}/categorys/`+params.id+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
  }
  &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; axios.get(`${local_host}/categorys/&lt;span&gt;`, params);
  }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候访问 http://127.0.0.1:8080/#/app/home/index&lt;/p&gt;
&lt;p&gt;发现不显示商品分类了，是因为这涉及到了跨域问题，接下来就解决跨域的问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180412220333072-1837284251.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;drf跨域问题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;后端服务器解决跨域问题的方法&lt;/p&gt;
&lt;p&gt;（1）安装模块&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip install django-cors-headers
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;django-cors-headers 使用说明：https://github.com/ottoyiu/django-cors-headers&lt;/p&gt;
&lt;p&gt; （2）添加到INSTALL_APPS中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
INSTALLED_APPS =&lt;span&gt; (
    ...&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
    'coreschema',
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; ... )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）添加中间件&lt;/p&gt;
&lt;p&gt;下面添加中间件的说明：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CorsMiddleware&lt;/code&gt; should be placed as high as possible, especially before any middleware that can generate responses such as Django's &lt;code&gt;CommonMiddleware&lt;/code&gt; or Whitenoise's &lt;code&gt;WhiteNoiseMiddleware&lt;/code&gt;. If it is not before, it will not be able to add the CORS headers to these responses.&lt;/p&gt;
&lt;p&gt;Also if you are using &lt;code&gt;CORS_REPLACE_HTTPS_REFERER&lt;/code&gt; it should be placed before Django's &lt;code&gt;CsrfViewMiddleware&lt;/code&gt; (see more below).&lt;/p&gt;
&lt;p&gt;意思就是 &lt;strong&gt;&lt;span&gt;要放的尽可能靠前，必须在CsrfViewMiddleware之前。我们直接放在第一个位置就好了&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
MIDDLEWARE =&lt;span&gt; [
    &lt;/span&gt;&lt;strong&gt;&lt;span&gt;'corsheaders.middleware.CorsMiddleware',
    &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.middleware.security.SecurityMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.sessions.middleware.SessionMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.middleware.common.CommonMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.middleware.csrf.CsrfViewMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.auth.middleware.AuthenticationMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.messages.middleware.MessageMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.middleware.clickjacking.XFrameOptionsMiddleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）设置为True&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
CORS_ORIGIN_ALLOW_ALL = True
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在再访问 http://127.0.0.1:8080/#/app/home/index   数据就可以填充进来了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180412224720599-409785156.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 在一级分类中设置为True&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180412224941078-955319944.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180412225748533-2119107215.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;&lt;span&gt;6.3.vue展示商品列表页数据&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 商品列表页会判断我们是serach还是getGoods&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;getListData() {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.pageType=='search'&lt;span&gt;){
                  getGoods({
                    search: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.searchWord, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;搜索关键词&lt;/span&gt;
                  }).then((response)=&amp;gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.listData =&lt;span&gt; response.data.results;
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.proNum =&lt;span&gt; response.data.count;
                  }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (error) {
                    console.log(error);
                  });
                }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                  getGoods({
                    page: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.curPage, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前页码&lt;/span&gt;
                    top_category: &lt;span&gt;this&lt;/span&gt;.top_category, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;商品类型&lt;/span&gt;
                    ordering: &lt;span&gt;this&lt;/span&gt;.ordering, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;排序类型&lt;/span&gt;
                    pricemin: &lt;span&gt;this&lt;/span&gt;.pricemin, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;价格最低 默认为‘’ 即为不选价格区间&lt;/span&gt;
                    pricemax: &lt;span&gt;this&lt;/span&gt;.pricemax &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 价格最高 默认为‘’&lt;/span&gt;
                  }).then((response)=&amp;gt;&lt;span&gt; {

                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.listData =&lt;span&gt; response.data.results;
                    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.proNum =&lt;span&gt; response.data.count;
                  }).&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (error) {
                    console.log(error);
                  });
                }

            },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;（1）page分页&lt;/p&gt;
&lt;p&gt;page_size数量与前端一致&lt;/p&gt;
&lt;p&gt;页码参数与起前端一致&quot;page&quot;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsPagination(PageNumberPagination):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    商品列表自定义分页
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;默认每页显示的个数&lt;/span&gt;
    page_size = 12
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;可以动态改变每页显示的个数&lt;/span&gt;
    page_size_query_param = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page_size&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;页码参数&lt;/span&gt;
    page_query_param = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;最多能显示多少页&lt;/span&gt;
    max_page_size = 100
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）过滤&lt;/p&gt;
&lt;p&gt;top_category是商品的一级分类，需要传入参数：一级分类的id&lt;/p&gt;
&lt;p&gt;pricemin和pricemax与前端保持一致&lt;/p&gt;
&lt;p&gt;获取一级分类下的所有商品&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; goods/filters.py&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; django_filters

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Goods
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.db.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Q

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsFilter(django_filters.rest_framework.FilterSet):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    商品过滤的类
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;两个参数，name是要过滤的字段，lookup是执行的行为，‘小与等于本店价格’&lt;/span&gt;
    pricemin = django_filters.NumberFilter(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shop_price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, lookup_expr=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gte&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    pricemax &lt;/span&gt;= django_filters.NumberFilter(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shop_price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, lookup_expr=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lte&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    top_category &lt;/span&gt;= django_filters.NumberFilter(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;category&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, method=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;top_category_filter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; top_category_filter(self, queryset, name, value):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 不管当前点击的是一级分类二级分类还是三级分类，都能找到。&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; queryset.filter(Q(category_id=value) | Q(category__parent_category_id=value) |&lt;span&gt; Q(
            category__parent_category__parent_category_id&lt;/span&gt;=&lt;span&gt;value))

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;=&lt;span&gt; Goods
        fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pricemin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pricemax&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）排序&lt;/p&gt;
&lt;pre&gt;
GoodsListViewSet中ording与前端要一致
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180412235630075-1446133902.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　 #&lt;/span&gt;&lt;span&gt;排序&lt;/span&gt;
    ordering_fields = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sold_num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;shop_price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; （4）替换为local_host&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
//&lt;span&gt;获取商品列表
export const getGoods &lt;/span&gt;= params =&amp;gt; { &lt;span&gt;return&lt;/span&gt; axios.get(`${local_host}/goods/`, { params: params }) }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（5）搜索&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 　　&lt;span&gt;#&lt;/span&gt;&lt;span&gt;搜索&lt;/span&gt;
    search_fields = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods_brief&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods_desc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在就可以从后台获取商品的数据了，主要功能&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;分类过滤&lt;/li&gt;
&lt;li&gt;价格区间过滤&lt;/li&gt;
&lt;li&gt;显示商品数量&lt;/li&gt;
&lt;li&gt;分页&lt;/li&gt;
&lt;li&gt;搜索&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201804/1299879-20180413000432541-878321647.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;所有代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c81f48d9-7b88-4602-a574-1f7a545da7d5')&quot; readability=&quot;42.5&quot;&gt;&lt;img id=&quot;code_img_closed_c81f48d9-7b88-4602-a574-1f7a545da7d5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c81f48d9-7b88-4602-a574-1f7a545da7d5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c81f48d9-7b88-4602-a574-1f7a545da7d5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c81f48d9-7b88-4602-a574-1f7a545da7d5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; MxShop/urls.py&lt;/span&gt;
&lt;span&gt;__author__&lt;/span&gt; = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;


&lt;span&gt;from&lt;/span&gt; django.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; path,include,re_path
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.views.static &lt;span&gt;import&lt;/span&gt;&lt;span&gt; serve
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; MxShop.settings &lt;span&gt;import&lt;/span&gt;&lt;span&gt; MEDIA_ROOT
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; from goods.view_base import GoodsListView&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; rest_framework.documentation &lt;span&gt;import&lt;/span&gt;&lt;span&gt; include_docs_urls
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; goods.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GoodsListViewSet,CategoryViewSet
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.routers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; DefaultRouter

router &lt;/span&gt;=&lt;span&gt; DefaultRouter()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;配置goods的url&lt;/span&gt;
router.register(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, GoodsListViewSet,base_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 配置Category的url&lt;/span&gt;
router.register(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;categorys&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, CategoryViewSet, base_name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;categorys&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)


urlpatterns &lt;/span&gt;=&lt;span&gt; [
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xadmin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, xadmin.site.urls),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;api-auth/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rest_framework.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ueditor/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,include(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;DjangoUeditor.urls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; )),
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;文件&lt;/span&gt;
    path(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;media/&amp;lt;path:path&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,serve,{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;document_root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:MEDIA_ROOT}),
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;drf文档，title自定义&lt;/span&gt;
    path(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;docs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,include_docs_urls(title=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;仙剑奇侠传&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)),
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;商品列表页&lt;/span&gt;
    re_path(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;^&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, include(router.urls)),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;MxShop/urls.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('28f82553-687d-4dfc-baf7-59ffe0d9116b')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_28f82553-687d-4dfc-baf7-59ffe0d9116b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_28f82553-687d-4dfc-baf7-59ffe0d9116b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('28f82553-687d-4dfc-baf7-59ffe0d9116b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_28f82553-687d-4dfc-baf7-59ffe0d9116b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; goods/filters.py&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; django_filters

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Goods
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.db.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Q

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsFilter(django_filters.rest_framework.FilterSet):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    商品过滤的类
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;两个参数，name是要过滤的字段，lookup是执行的行为，‘小与等于本店价格’&lt;/span&gt;
    pricemin = django_filters.NumberFilter(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shop_price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, lookup_expr=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gte&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    pricemax &lt;/span&gt;= django_filters.NumberFilter(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shop_price&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, lookup_expr=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lte&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    top_category &lt;/span&gt;= django_filters.NumberFilter(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;category&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, method=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;top_category_filter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; top_category_filter(self, queryset, name, value):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 不管当前点击的是一级分类二级分类还是三级分类，都能找到。&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; queryset.filter(Q(category_id=value) | Q(category__parent_category_id=value) |&lt;span&gt; Q(
            category__parent_category__parent_category_id&lt;/span&gt;=&lt;span&gt;value))

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;=&lt;span&gt; Goods
        fields &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pricemin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pricemax&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;goods/filters.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7dcd3552-2c8e-403b-91a0-e47b37c7351d')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_7dcd3552-2c8e-403b-91a0-e47b37c7351d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7dcd3552-2c8e-403b-91a0-e47b37c7351d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7dcd3552-2c8e-403b-91a0-e47b37c7351d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7dcd3552-2c8e-403b-91a0-e47b37c7351d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; goods/serializers.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; serializers
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Goods,GoodsCategory


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CategorySerializer3(serializers.ModelSerializer):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;三级分类&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;=&lt;span&gt; GoodsCategory
        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CategorySerializer2(serializers.ModelSerializer):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    二级分类
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在parent_category字段中定义的related_name=&quot;sub_cat&quot;&lt;/span&gt;
    sub_cat = CategorySerializer3(many=&lt;span&gt;True)
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;=&lt;span&gt; GoodsCategory
        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CategorySerializer(serializers.ModelSerializer):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    商品一级类别序列化
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    sub_cat &lt;/span&gt;= CategorySerializer2(many=&lt;span&gt;True)
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;=&lt;span&gt; GoodsCategory
        fields &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;#&lt;/span&gt;&lt;span&gt;ModelSerializer实现商品列表页&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsSerializer(serializers.ModelSerializer):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;覆盖外键字段&lt;/span&gt;
    category =&lt;span&gt; CategorySerializer()
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        model &lt;/span&gt;=&lt;span&gt; Goods
        fields &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__all__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;goods/serializers.py&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('66374724-bd06-474b-a20d-7dafece87af6')&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_66374724-bd06-474b-a20d-7dafece87af6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_66374724-bd06-474b-a20d-7dafece87af6&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('66374724-bd06-474b-a20d-7dafece87af6',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_66374724-bd06-474b-a20d-7dafece87af6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; googd/views.py&lt;/span&gt;

&lt;span&gt;from&lt;/span&gt; rest_framework.views &lt;span&gt;import&lt;/span&gt;&lt;span&gt; APIView
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; goods.serializers &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GoodsSerializer,CategorySerializer
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Goods,GoodsCategory
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.response &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Response
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; mixins
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; generics
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework.pagination &lt;span&gt;import&lt;/span&gt;&lt;span&gt; PageNumberPagination
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; viewsets
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; .filters &lt;span&gt;import&lt;/span&gt;&lt;span&gt; GoodsFilter
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django_filters.rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; DjangoFilterBackend
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; rest_framework &lt;span&gt;import&lt;/span&gt;&lt;span&gt; filters


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsPagination(PageNumberPagination):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    商品列表自定义分页
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;默认每页显示的个数&lt;/span&gt;
    page_size = 12
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;可以动态改变每页显示的个数&lt;/span&gt;
    page_size_query_param = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page_size&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;页码参数&lt;/span&gt;
    page_query_param = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;最多能显示多少页&lt;/span&gt;
    max_page_size = 100


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; GoodsListViewSet(mixins.ListModelMixin,viewsets.GenericViewSet):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    商品列表，分页，搜索，过滤，排序
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;

    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这里必须要定义一个默认的排序,否则会报错&lt;/span&gt;
    queryset =&lt;span&gt; Goods.objects.all()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 分页&lt;/span&gt;
    pagination_class =&lt;span&gt; GoodsPagination
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;序列化&lt;/span&gt;
    serializer_class =&lt;span&gt; GoodsSerializer
    filter_backends &lt;/span&gt;=&lt;span&gt; (DjangoFilterBackend,filters.SearchFilter,filters.OrderingFilter)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置filter的类为我们自定义的类&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;过滤&lt;/span&gt;
    filter_class =&lt;span&gt; GoodsFilter
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;搜索&lt;/span&gt;
    search_fields = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods_brief&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;goods_desc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;排序&lt;/span&gt;
    ordering_fields = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sold_num&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;shop_price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; CategoryViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;
    list:
        商品分类列表数据
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;

    queryset &lt;/span&gt;= GoodsCategory.objects.filter(category_type=1&lt;span&gt;)
    serializer_class &lt;/span&gt;= CategorySerializer
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;goods/views.py&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/derek1184405959/p/8768059.html&quot;&gt;Django REST framework+Vue 打造生鲜超市（四）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/derek1184405959/p/8747961.html&quot;&gt;Django REST framework+Vue 打造生鲜超市（三）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/derek1184405959/p/8733578.html&quot;&gt;Django REST framework+Vue 打造生鲜超市（二）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/derek1184405959/p/8733194.html&quot;&gt;Django REST framework+Vue 打造生鲜超市（一）&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 12 Apr 2018 16:30:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/8810591.html</dc:identifier>
</item>
<item>
<title>WPF利用附加属性修改ShowGridLines效果 - 冷火虫</title>
<link>http://www.cnblogs.com/chlm/p/8812160.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chlm/p/8812160.html</guid>
<description>&lt;p&gt;1.思路主要代码&lt;/p&gt;
&lt;p&gt;wpf的gridline原本效果是虚线类型的。有时候需要设计成表格形式的，因此有了用附加属性来自动绘制边框线的想法。&lt;/p&gt;
&lt;p&gt;思路：绘制Line并添加到grid的children里，但效果并不理想，会出现锯齿，像素对齐，模糊等问题。&lt;/p&gt;
&lt;p&gt;UseLayoutRounding=&quot;False&quot;&lt;br/&gt;SnapsToDevicePixels=&quot;True&quot;&lt;/p&gt;
&lt;p&gt;RenderOptions.EdgeModeProperty 貌似都没起作用。&lt;/p&gt;
&lt;p&gt;于是想到了用border来实现，简单又实用吧 哈哈。&lt;/p&gt;
&lt;p&gt;大致思路如下：绘制border的左边框和上边框，在边界的时候考虑边界封闭。然后将border平移一半的距离。这样边框就居中并且包围了所有的线。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874602/201804/874602-20180413001043953-723619161.png&quot; alt=&quot;&quot; width=&quot;225&quot; height=&quot;300&quot;/&gt;&lt;/p&gt;

&lt;p&gt;主要代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;84&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace 用附加属性修改Grid的边框
{
    public class GridHelper
    {
        private static void RefreshGrid(Grid grid, int lineWidth, Brush color)
        {
            for (var i = grid.Children.Count - 1; i &amp;gt; 0; i--)
            {
                var child = grid.Children[i];

                var bd = child as Border;
                if (bd != null &amp;amp;&amp;amp; bd.Tag != null &amp;amp;&amp;amp; bd.Tag.ToString() == &quot;gridline&quot;)
                {
                    grid.Children.Remove(bd);
                }
            }
            var rows = grid.RowDefinitions.Count;
            var cols = grid.ColumnDefinitions.Count;
            //边界考虑
            if (rows == 0)
            {
                rows = 1;
            }
            if (cols == 0)
            {
                cols = 1;
            }
            //生成行列
            for (var i = 0; i &amp;lt; rows; i++)
            {
                for (var j = 0; j &amp;lt; cols; j++)
                {
                    var thick = new Thickness(lineWidth, lineWidth, 0, 0);
                    var margin = new Thickness(-lineWidth/2d, -lineWidth/2d, 0, 0);
                    //边界考虑 
                    if (i == 0)
                    {
                        margin.Top = 0;
                    }
                    if (i == rows - 1)
                    {
                        thick.Bottom = lineWidth;
                    }
                    if (j == 0)
                    {
                        margin.Left = 0;
                    }
                    if (j == cols - 1)
                    {
                        thick.Right = lineWidth;
                    }
                    var bd = new Border
                    {
                        BorderThickness = thick,
                        Margin = margin,
                        BorderBrush = color,
                        Tag = &quot;gridline&quot;
                    };
                    Grid.SetRow(bd, i);
                    Grid.SetColumn(bd, j);
                    grid.Children.Add(bd);
                }
            }
            grid.InvalidateArrange();
            grid.InvalidateVisual();
        }

        #region 线颜色

        // Using a DependencyProperty as the backing store for LineColor.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty LineColorProperty =
            DependencyProperty.RegisterAttached(&quot;LineColor&quot;, typeof (Brush), typeof (GridHelper),
                new PropertyMetadata(Brushes.Black, LineColorPropertyChanged));

        public static Brush GetLineColor(DependencyObject obj)
        {
            return (Brush) obj.GetValue(LineColorProperty);
        }

        public static void SetLineColor(DependencyObject obj, Brush value)
        {
            obj.SetValue(LineColorProperty, value);
        }


        private static void LineColorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var grid = d as Grid;
            if (grid == null)
            {
                return;
            }
            var showLines = GetShowGridLines(grid);
            var color = GetLineColor(grid);
            var lineWidth = GetLineWidth(grid);
            if (showLines)
            {
                //  grid.SnapsToDevicePixels = true;
                grid.Loaded += delegate { RefreshGrid(grid, lineWidth, color); };
            }
        }

        #endregion

        #region 线宽度

        // Using a DependencyProperty as the backing store for LineWidth.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty LineWidthProperty =
            DependencyProperty.RegisterAttached(&quot;LineWidth&quot;, typeof (int), typeof (GridHelper),
                new PropertyMetadata(1, LineWidthPropertyChanged));

        public static int GetLineWidth(DependencyObject obj)
        {
            return (int) obj.GetValue(LineWidthProperty)
                ;
        }


        public static void SetLineWidth(DependencyObject obj, int value)
        {
            obj.SetValue(LineWidthProperty, value);
        }


        private static void LineWidthPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var grid = d as Grid;
            if (grid == null)
            {
                return;
            }
            var showLines = GetShowGridLines(grid);
            var color = GetLineColor(grid);
            var lineWidth = GetLineWidth(grid);
            if (showLines)
            {
                // grid.SnapsToDevicePixels = true;
                grid.Loaded += delegate { RefreshGrid(grid, lineWidth, color); };
            }
        }

        #endregion

        #region 是否显示线

        // Using a DependencyProperty as the backing store for ShowGridLines.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ShowGridLinesProperty =
            DependencyProperty.RegisterAttached(&quot;ShowGridLines&quot;, typeof (bool), typeof (GridHelper),
                new PropertyMetadata(false, ShowGridLinesPropertyChanged));


        public static bool GetShowGridLines(DependencyObject obj)
        {
            return (bool) obj.GetValue(ShowGridLinesProperty);
        }

        public static void SetShowGridLines(DependencyObject obj, bool value)
        {
            obj.SetValue(ShowGridLinesProperty, value);
        }


        private static void ShowGridLinesPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var grid = d as Grid;
            if (grid == null)
            {
                return;
            }
            var showLines = GetShowGridLines(grid);
            var color = GetLineColor(grid);
            var lineWidth = GetLineWidth(grid);
            if (showLines)
            {
                //  grid.SnapsToDevicePixels = true;
                grid.Loaded += delegate { RefreshGrid(grid, lineWidth, color); };
            }
        }

        #endregion
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.效果图&lt;/p&gt;
&lt;p&gt;效果还可以，任何分辨率下，任何边框大小，都没有出现像素对齐或者模糊问题。 图中的虚线是grid的默认gridLine，红色和绿色是自定义的gridline，跟虚线完美重合。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/874602/201804/874602-20180413001350493-1476027978.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.源码下载&lt;/p&gt;
&lt;p&gt;https://files.cnblogs.com/files/chlm/%E7%94%A8%E9%99%84%E5%8A%A0%E5%B1%9E%E6%80%A7%E4%BF%AE%E6%94%B9Grid%E7%9A%84%E8%BE%B9%E6%A1%86.rar&lt;/p&gt;
</description>
<pubDate>Thu, 12 Apr 2018 16:19:00 +0000</pubDate>
<dc:creator>冷火虫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chlm/p/8812160.html</dc:identifier>
</item>
<item>
<title>如何用webgl(three.js)搭建一个3D库房-第二课 - 魂断蓝桥666</title>
<link>http://www.cnblogs.com/yeyunfei/p/8811228.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yeyunfei/p/8811228.html</guid>
<description>&lt;p&gt;闲话少叙，我们接着第一课继续讲（http://www.cnblogs.com/yeyunfei/p/7899613.html），很久没有做技术分享了。很多人问第二课有没有，我也是抽空写一下第二课。&lt;/p&gt;&lt;p&gt;第一课程提到了在库房的基础上添加上下架 消防 温湿度等等控制&lt;/p&gt;&lt;p&gt;刚好 最近有接到一个客户的需求 是和库房差不多的项目 只是不是库房了 是档案室 但是基本操控还是差不多的 也有文件上下架什么的&lt;/p&gt;&lt;p&gt;那么第二课  我们就按照客户的需求 先做一个概述性的展现 &lt;/p&gt;&lt;p&gt;特此说明：为了减少网络传输带宽 我特意用ScreenToGif工具 截了一些gif图 压缩成低帧率&lt;/p&gt;&lt;div readability=&quot;66&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
//应用切换库 
&amp;lt;script src=&quot;js/pagetransitions.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
var PageTransitions = (function() {

        var $main = $( '#pt-main' ),
                $pages = $main.children( 'div.pt-page' ),
        $iterate = $( '.pt-touch-button' ),
                animcursor = 1,
                pagesCount = $pages.length,
        current = 1,
        precurrent=1,
                isAnimating = false,
                endCurrPage = false,
                endNextPage = false,
                animEndEventNames = {
                        'WebkitAnimation' : 'webkitAnimationEnd',
                        'OAnimation' : 'oAnimationEnd',
                        'msAnimation' : 'MSAnimationEnd',
                        'animation' : 'animationend'
                },
                // animation end event name
                animEndEventName = animEndEventNames[ Modernizr.prefixed( 'animation' ) ],
                // support css animations
                support = Modernizr.cssanimations;
        
        function init() {

                $pages.each( function() {
                        var $page = $( this );
                        $page.data( 'originalClassList', $page.attr( 'class' ) );
                } );

        $($(&quot;.pt-page.pt-page-1&quot;)[0]).addClass( 'pt-page-current' );
        precurrent = 1;
         
        $iterate.on('click', function () {
            var frameindex = $(this).attr(&quot;data-frameindex&quot;);
            current = frameindex;
            console.log(frameindex);
            var _this = this;
            if (isAnimating || current == precurrent ) {
                                return false;
                        }
                        if( animcursor &amp;gt; 5 ) {
                                animcursor = 1;
                        }
                        nextPage( animcursor );
            ++animcursor;
            //setTimeout(function () {
            //    $(&quot;#frame&quot; + $(_this).attr(&quot;data-frameindex&quot;)).attr(&quot;src&quot;, $(_this).attr(&quot;data-src&quot;));
            //}, 500);
                } );

        }

        function nextPage( animation ) {

        if (isAnimating) {
                        return false;
                }

                isAnimating = true;
                
        var $currPage = $($(&quot;.pt-page.pt-page-&quot; + precurrent)[0]);
     

        var $nextPage = $($(&quot;.pt-page.pt-page-&quot; +  current)[0]).addClass( 'pt-page-current' ),
                        outClass = '', inClass = '';
        precurrent = current;
                switch( animation ) {

                         
                        case 1:
                                outClass = 'pt-page-rotateCubeLeftOut pt-page-ontop';
                                inClass = 'pt-page-rotateCubeLeftIn';
                                break;
                        case 2:
                                outClass = 'pt-page-rotateCubeRightOut pt-page-ontop';
                                inClass = 'pt-page-rotateCubeRightIn';
                                break;
                        case 3:
                                outClass = 'pt-page-rotateCubeTopOut pt-page-ontop';
                                inClass = 'pt-page-rotateCubeTopIn';
                                break;
                        case 4:
                                outClass = 'pt-page-rotateCubeBottomOut pt-page-ontop';
                                inClass = 'pt-page-rotateCubeBottomIn';
                                break; 
                        case 5:
                                outClass = 'pt-page-rotateSlideOut';
                                inClass = 'pt-page-rotateSlideIn';
                                break;

                }

                $currPage.addClass( outClass ).on( animEndEventName, function() {
                        $currPage.off( animEndEventName );
                        endCurrPage = true;
                        if( endNextPage ) {
                                onEndAnimation( $currPage, $nextPage );
                        }
                } );

                $nextPage.addClass( inClass ).on( animEndEventName, function() {
                        $nextPage.off( animEndEventName );
                        endNextPage = true;
                        if( endCurrPage ) {
                                onEndAnimation( $currPage, $nextPage );
                        }
                } );

                if( !support ) {
                        onEndAnimation( $currPage, $nextPage );
                }

        }

        function onEndAnimation( $outpage, $inpage ) {
                endCurrPage = false;
                endNextPage = false;
                resetPage( $outpage, $inpage );
                isAnimating = false;
        }

        function resetPage( $outpage, $inpage ) {
                $outpage.attr( 'class', $outpage.data( 'originalClassList' ) );
                $inpage.attr( 'class', $inpage.data( 'originalClassList' ) + ' pt-page-current' );
        }

        init();

        return { init : init };

})();
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;87&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
  this.loadMjjFace = function (mjjObj) {
        $.each(mjjObj.material.materials, function (_index, _obj) {
            if (_obj.opacity &amp;gt; 0.1) {
                _obj.opacity = 0.1;
            }
        });
        var cube = {
            &quot;show&quot;: true,
            &quot;uuid&quot;: &quot;&quot;,
            &quot;name&quot;: mjjObj.name + &quot;_animationCube&quot;,
            &quot;objType&quot;: &quot;cube2&quot;,
            &quot;length&quot;: 78,
            &quot;width&quot;: 319,
            &quot;height&quot;: 1,
            &quot;x&quot;: mjjObj.position.x,
            &quot;y&quot;: mjjObj.position.y - 99,
            &quot;z&quot;: mjjObj.position.z,
            &quot;style&quot;: {
                &quot;skinColor&quot;: 16777215, &quot;skin&quot;:
                    {
                        &quot;skin_up&quot;: { &quot;skinColor&quot;: 7219463, &quot;opacity&quot;: 0.9, },
                        &quot;skin_down&quot;: { &quot;skinColor&quot;: 7219463, &quot;opacity&quot;: 0.9, },
                        &quot;skin_fore&quot;: { &quot;skinColor&quot;: 7219463, &quot;opacity&quot;: 0.9, },
                        &quot;skin_behind&quot;: { &quot;skinColor&quot;: 7219463, &quot;opacity&quot;: 0.9, },
                        &quot;skin_left&quot;: { &quot;skinColor&quot;: 7219463, &quot;opacity&quot;: 0.9, },
                        &quot;skin_right&quot;: { &quot;skinColor&quot;: 7219463, &quot;opacity&quot;: 0.9, }
                    }
            }, &quot;showSortNub&quot;: 11, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null
        }
        var temObj = tl3DCoreObj.createObjByJson(cube);
        tl3DCoreObj.addObject(temObj);
        new TWEEN.Tween(temObj.position).to({
            y: mjjObj.position.y
        }, 2000).start();
        new TWEEN.Tween(temObj.scale).to({
            y: 199
        }, 2000).onComplete(function () {
            $.each(mjjObj.material.materials, function (_index, _obj) {
                if (_obj.opacity == 0.1) {
                    _obj.opacity = 1;
                }
            });
            tl3DCoreObj.destoryObj(mjjObj.name + &quot;_animationCube&quot;);
        }).start();
        this.createMjjDetail(mjjObj);
    }
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;200&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
//创建密集架详情
    this.createMjjDetail = function (mjjObj) {
        var _this = this;
        var detailGroup = null;
        //获取密集架序号
        var _groupNub = parseInt(mjjObj.name.split('_')[1]);//组序号
        var _colomnNub = parseInt(mjjObj.name.split('_')[2])//列序号
        //此处表示密集架行数 列数
        var mjjparam = null;
        var rowHeigtht = null;//每隔高度 此处200表示密集架高度
        var columlength = null;//此处320表示宽度

        if (_this.mjjDetails[_groupNub - 1] &amp;amp;&amp;amp; _this.mjjDetails[_groupNub - 1][_colomnNub - 1]) {
            detailGroup = _this.mjjDetails[_groupNub - 1][_colomnNub - 1];
        } else {
             mjjparam = {
                rows: 12,
                colums: 4,
            }
             rowHeigtht = 200 / mjjparam.rows;//每隔高度 此处200表示密集架高度
             columlength = 320 / mjjparam.colums;//此处320表示宽度
            var mjjdetailGroup = {
                show: true,
                uuid: &quot;&quot;,
                name: &quot;mjjdetailGroup1&quot;,
                objType: &quot;GroupObj&quot;,
                scale: { x: 1, y: 1, z: 1 },
                position: {
                    x: mjjObj.position.x,
                    y: mjjObj.position.y,
                    z: mjjObj.position.z
                },
                rotation: [{ direction: 'x', degree: 0 }],//旋转 表示x方向0度  arb表示
                childrens: [
                ]
            }
            //创建横向隔板
            for (var i = 0; i &amp;lt; mjjparam.rows - 1; i++) {
                var gb1 = {
                    &quot;show&quot;: true,
                    &quot;uuid&quot;: &quot;&quot;,
                    &quot;name&quot;: &quot;mjjdetail_r&quot; + (i + 1),
                    &quot;objType&quot;: &quot;cube2&quot;,
                    &quot;length&quot;: 79,
                    &quot;width&quot;: 319,
                    &quot;height&quot;: 1,
                    &quot;x&quot;: 0,
                    &quot;y&quot;: 100 - (i + 1) * rowHeigtht,
                    &quot;z&quot;: 0,
                    &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;imgurl&quot;: &quot;../../img/3dImg/outside_lightmap.jpg&quot; }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14540253, &quot;imgurl&quot;: &quot;../../img/3dImg/card_panel.png&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14540253, &quot;imgurl&quot;: &quot;../../img/3dImg/card_panel.png&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14540253 } } }, &quot;showSortNub&quot;: 4, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null
                };
                mjjdetailGroup.childrens.push(gb1);

            }
            //创建竖向隔板
            for (var i = 0; i &amp;lt; mjjparam.colums - 1; i++) {
                var gb2 = { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;mjjdetail_c&quot; + (i + 1), &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 10, &quot;width&quot;: 2, &quot;height&quot;: 199, &quot;x&quot;: 35, &quot;y&quot;: 0, &quot;z&quot;: 160 - ((i + 1) * columlength), &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 0xaaaaaa }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 0xaaaaaa }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14540253, &quot;imgurl&quot;: &quot;../../img/3dImg/card_panel.png&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14540253, &quot;imgurl&quot;: &quot;../../img/3dImg/card_panel.png&quot; } } }, &quot;showSortNub&quot;: 4, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null };

                mjjdetailGroup.childrens.push(gb2);


                var gb3 = ({ &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;mjjdetail_c3&quot; + (i + 1), &quot;objType&quot;: &quot;cube&quot;, &quot;length&quot;: 10, &quot;width&quot;: 2, &quot;height&quot;: 199, &quot;x&quot;: 0 - 35, &quot;y&quot;: 0, &quot;z&quot;: 160 - ((i + 1) * columlength), &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 0xaaaaaa }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 0xaaaaaa }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14540253, &quot;imgurl&quot;: &quot;../../img/3dImg/card_panel.png&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14540253, &quot;imgurl&quot;: &quot;../../img/3dImg/card_panel.png&quot; } } }, &quot;showSortNub&quot;: 4, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null });
                mjjdetailGroup.childrens.push(gb3);

            }
            detailGroup = tl3DCoreObj.createObjByJson(mjjdetailGroup);
            if (_this.mjjDetails[_groupNub - 1] == undefined) {
                _this.mjjDetails[_groupNub - 1] = [];
            }
            _this.mjjDetails[_groupNub - 1][_colomnNub - 1] = detailGroup;
            tl3DCoreObj.addObject(detailGroup);
        }
        //获取内部实时数据
        /*
        数据格式 将有文件的格子信息 以如下形式输出
            [
                {
                rowNo_:1,//行数
                colNo_:1,//列数
                filesNub:5//文件个数
                },

            ]
        */

        var _files = [];


        {//演示数据 获取真实数据后可替换
            for (var i = 1; i &amp;lt;= mjjparam.rows;i++){
                for (var j= 1; j &amp;lt;= mjjparam.colums;j++) {
                    _files.push({
                        rowNo_: i,//行数
                        colNo_: j,//列数
                        filesNub:Math.floor(Math.random()*10)%5 //随机生成演示文件个数
                    });
                }
            }
        }

        //刷新文件排布
        detailGroup.children.length = mjjparam.rows + mjjparam.colums*2-3;
        $.each(_files, function (_index,_obj) {
            if (_obj.filesNub &amp;gt; 0) {
                for (var w = 0; w &amp;lt; parseInt(Math.random() * parseInt((columlength - 2) / 22)) + 1 ; w++) {
                    var _tmfile = {
                        &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;filebox_&quot; + _obj.rowNo_ + &quot;_&quot; + _obj.colNo_ + &quot;_w&quot; + w, &quot;objType&quot;: &quot;cube&quot;, &quot;length&quot;:70, &quot;width&quot;: 20, &quot;height&quot;: (rowHeigtht - 5),
                        &quot;x&quot;: mjjObj.position.x,
                        &quot;y&quot;: ( (_obj.rowNo_-1) * rowHeigtht + (rowHeigtht - 5) / 2 + 5),
                        &quot;z&quot;: mjjObj.position.z + (-160 + ((_obj.colNo_ - 1) * columlength) + 22* (1 + w)),

                        &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 10382134 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 10382134 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 9525548 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 9525548 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 13076036 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 13203019 } } }, &quot;showSortNub&quot;: 11, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null
                    };
                    var _tmfileObj = tl3DCoreObj.createObjByJson(_tmfile);
                    detailGroup.children.push(_tmfileObj);
                }
               
            }
        });

        detailGroup.visible = false;
        detailGroup.position.x = mjjObj.position.x;
        detailGroup.position.y = mjjObj.position.y;
        detailGroup.position.z = mjjObj.position.z;
        setTimeout(function () {
            detailGroup.visible = true;
        }, 2000);

    }
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;66&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
   //查找文件 此处查找条件可以自定义
    this.searchFile = function () {
        var _this = this;
        $(&quot;#toolbar&quot;).hide();
        //获取到文件位置信息
        //返回类型 searchFileObj={fileName:'',mjjName:'',mjjGroup:'3',mjjnub:'2',face:'',row:'',color:'',nub:''}\
        //边缘弹出
        layer.open({
            title: &quot;文件查找&quot;,
            type: 1,
            offset: 'lt' //具体配置参考：offset参数项
            , content: '&amp;lt;div style=&quot;padding: 10px;width:250px;min-height:150px;background-color:rgba(255,255,255,0.4);&quot;&amp;gt;\
        &amp;lt;table class=&quot;table&quot;&amp;gt;\
        &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:right;width:80px;&quot;&amp;gt;类型：&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input id=&quot;fsfileType&quot; value=&quot;&quot; /&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
        &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:right;width:80px;&quot;&amp;gt;关键字：&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input id=&quot;fskeyWord&quot; value=&quot;&quot; /&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
        &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:right;width:80px;&quot;&amp;gt;结果：&amp;lt;/td&amp;gt;&amp;lt;td colspan=2 id=&quot;searchResuleTd&quot;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
        &amp;lt;/table&amp;gt;&amp;lt;/div&amp;gt;'
            , btn: '确认查找'
            , btnAlign: 'c' //按钮居中
            , shade: 0 //不显示遮罩
            , yes: function () {
                var searchFileObj = {
                    mjjGroup: Math.floor(Math.random() * 12) % 6 + 1,
                    mjjnub: Math.floor(Math.random() * 14) % 7 + 1,
                    face: Math.random()&amp;gt;0.5? &quot;A&quot;:&quot;B&quot;,
                    row: Math.floor(Math.random() * 20) % 10+1,
                    column: Math.floor(Math.random() * 20) % 8+1,
                    nub: Math.floor(Math.random() * 40) % 20 + 1
                };
                $(&quot;#searchResuleTd&quot;).html(&quot;密集架组：&quot; + searchFileObj.mjjGroup + &quot;组&amp;lt;/br&amp;gt;&quot;
                                        + &quot;密集架号：&quot; + searchFileObj.mjjnub + &quot;号&amp;lt;/br&amp;gt;&quot;
                                        + &quot;密集架面：&quot; + searchFileObj.face + &quot;面&amp;lt;/br&amp;gt;&quot;
                                        + &quot;所在行数：&quot; + searchFileObj.row + &quot;行&amp;lt;/br&amp;gt;&quot;
                                        + &quot;所在列数：&quot; + searchFileObj.column + &quot;列&amp;lt;/br&amp;gt;&quot;
                                        + &quot;文档序号：&quot; + searchFileObj.nub + &quot;&amp;lt;/br&amp;gt;&quot;
                                            );
                var _mjjObj = tl3DCoreObj.commonFunc.findObject(&quot;mjj_&quot; + searchFileObj.mjjGroup + &quot;_&quot; + searchFileObj.mjjnub);
                _this.selectObj(_mjjObj);
                
                var newposition = {
                    x: (tl3DCoreObj.camera.position.x + _mjjObj.position.x)/2,
                    y: 600,
                    z: (tl3DCoreObj.camera.position.z+ _mjjObj.position.z) / 2
                }
                if ((tl3DCoreObj.camera.position.x - _mjjObj.position.x) * (tl3DCoreObj.camera.position.x - _mjjObj.position.x)
                    + (600 - _mjjObj.position.y) * (600 - _mjjObj.position.y)
                    + (tl3DCoreObj.camera.position.z - _mjjObj.position.z) * (tl3DCoreObj.camera.position.z - _mjjObj.position.z)
                    &amp;lt; 150 * 150 * 150) {
                    newposition = {
                        x: (tl3DCoreObj.camera.position.x),
                        y: 600,
                        z: (tl3DCoreObj.camera.position.z )
                    }
                }
                _this.changeCameraPosition(newposition, _mjjObj.position, 500)
            },
            end: function () {
                $(&quot;#toolbar&quot;).show();
                _this.unselectObj();
            }
        });
        $(&quot;#fsfileType&quot;).click(function () {
            $(&quot;#fsfileType&quot;).focus();
        })
        $(&quot;#fskeyWord&quot;).click(function () {
            $(&quot;#fskeyWord&quot;).focus();
        })
    }
    this.selectedObjs = null;
    this.selectObj=function (_obj) {
        var _this = this;
        if (_this.selectedObjs) {
            _this.unselectObj();
        }
        var outlineMaterial2 = new THREE.MeshBasicMaterial({ color: 0x00ff00, side: THREE.BackSide });
        var outlineMesh2 = new THREE.Mesh(_obj.geometry.clone(), outlineMaterial2);
        outlineMesh2.scale.multiplyScalar(1.05);
        outlineMesh2.position.x = _obj.position.x;
        outlineMesh2.position.y = _obj.position.y;
        outlineMesh2.position.z = _obj.position.z;
        tl3DCoreObj.scene.add(outlineMesh2);
        _this.selectedObjs = outlineMesh2;
        _this.flashObj(_obj);
    }
    this.unselectObj=function () {
        var _this = this;
        if (_this.selectedObjs) {
            tl3DCoreObj.scene.remove(_this.selectedObjs);
            _this.selectedObjs = null;
        }
    }
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;127&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
 /*摄像头部分*********************************************************************/
    this.cameraRange = [];
    //摄像头按钮
    this.showCamera = function () {
        var _this = this;
        if (_this.cameraRange.length &amp;lt;= 0) {
            var jsonobj1 = { &quot;segmentsY&quot;: 0, &quot;segmentsX&quot;: 6, &quot;rotation&quot;: [{ &quot;degree&quot;: 1.836627410320584, &quot;direction&quot;: &quot;x&quot; }, { &quot;degree&quot;: -0.01857030395023093, &quot;direction&quot;: &quot;y&quot; }, { &quot;degree&quot;: -0.10075785157596659, &quot;direction&quot;: &quot;z&quot; }], &quot;show&quot;: true, &quot;scale&quot;: { &quot;x&quot;: 1.1, &quot;y&quot;: 1, &quot;z&quot;: 0.3 }, &quot;openEnded&quot;: false, &quot;radiusTop&quot;: 500, &quot;radiusBottom&quot;: 5, &quot;showSortNub&quot;: 211, &quot;name&quot;: &quot;camera_range&quot;, &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;side&quot;: 0, &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 0 }, &quot;skin_side&quot;: { &quot;imgurl&quot;: &quot;../../img/3dImg/camarerange.png&quot;, &quot;side&quot;: 2, &quot;skinColor&quot;: 2746367, &quot;opacity&quot;: 0.3 }, &quot;skin_down&quot;: { &quot;side&quot;: 1, &quot;skinColor&quot;: 6881093, &quot;opacity&quot;: 0 } } }, &quot;position&quot;: { &quot;x&quot;: -129.087, &quot;y&quot;: 170.956, &quot;z&quot;: -314.488 }, &quot;objType&quot;: &quot;cylinder&quot;, &quot;height&quot;: 500 };
            var temObj1 = tl3DCoreObj.createObjByJson(jsonobj1);
            tl3DCoreObj.addObject(temObj1);
            _this.cameraRange.push(temObj1);

            var jsonobj2 = {&quot;segmentsY&quot;: 0, &quot;segmentsX&quot;: 6, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;:1.5415097019464317 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: -0.08611454529340022 },{ &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: -3.0382866151642487 }], &quot;show&quot;: true, &quot;scale&quot;: { &quot;x&quot;: 1.1, &quot;y&quot;: 1, &quot;z&quot;: 0.3 }, &quot;openEnded&quot;: false, &quot;radiusTop&quot;: 500, &quot;radiusBottom&quot;: 5, &quot;showSortNub&quot;: 211,&quot;name&quot;: &quot;camera_range2&quot;, &quot;style&quot;: {&quot;skinColor&quot;: 16776960, &quot;skin&quot;: {
                        &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0 }, &quot;skin_down&quot;:{ &quot;skinColor&quot;: 6881093, &quot;side&quot;: 1, &quot;opacity&quot;: 0 },
                        &quot;skin_side&quot;: { &quot;skinColor&quot;: 2746367, &quot;side&quot;: 2, &quot;opacity&quot;: 0.3, &quot;imgurl&quot;: &quot;../../img/3dImg/camarerange.png&quot; }
                    }
                }, &quot;position&quot;: { &quot;x&quot;: 45.312, &quot;y&quot;: 247.096, &quot;z&quot;: 534.465 }, &quot;objType&quot;: &quot;cylinder&quot;,
                &quot;height&quot;: 500, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null
            };
            var temObj2 = tl3DCoreObj.createObjByJson(jsonobj2);
            tl3DCoreObj.addObject(temObj2);
            _this.cameraRange.push(temObj2);

        }
        if (_this.cameraRange.length &amp;gt; 0) {
            $.each(_this.cameraRange, function (_index, _obj) {
                _obj.visible = true;
                _this.flashObj(_obj, 0xb2fb07);
            });
        }
        _this.changeCameraPosition({ x: -1284, y: 1787, z: -378 }, { x: -237, y: 308, z: 145 }, 1000)
    }
    //隐藏摄像头范围
    this.hideCamera = function () {
        var _this = this;
        if (_this.cameraRange.length &amp;gt; 0) {
            $.each(_this.cameraRange, function (_index, _obj) {
                _obj.visible = false;
            });
        }
    }
    //打开视屏
    this.showVideo = function (_obj) {
        var _this = this;
        layer.closeAll();
        var videoUrl = &quot;&quot;;
        layer.open({
            title: &quot;视频&quot;,
            area:[&quot;555px&quot;,&quot;280px&quot;],
            type: 1,
            content: '&amp;lt;video id=&quot;video&quot; autoplay loop webkit-playsinline style=&quot;width:100%;&quot; &amp;gt;\
                        &amp;lt;source src=&quot;../../img/3dImg/video.mp4&quot;&amp;gt;\
                    &amp;lt;/video&amp;gt;'
        , btn: false
        , shade: 0 //不显示遮罩
        , yes: function () {

            },
        end: function () {
            _this.hideCamera();
         }
        });
    }
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;119&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
/*消防按钮部分*********************************************************************/
    //消防按钮--灭火器定位
    this.FireControl = function () {
        var _this = this;
        _this.VirtualWalls();
        _this.hideAllMjj();
        _this.hideCamera();
        _this.removeMark();
        _this.addMark({ &quot;x&quot;: 940, &quot;y&quot;:200, &quot;z&quot;: -660 });
        _this.addMark({ &quot;x&quot;: 660, &quot;y&quot;: 200, &quot;z&quot;: -70 });
        _this.addMark({ &quot;x&quot;: 660, &quot;y&quot;: 200, &quot;z&quot;: 400 });
        _this.addMark({ &quot;x&quot;: -960, &quot;y&quot;: 200, &quot;z&quot;: -70 });
        _this.addMark({ &quot;x&quot;: -960, &quot;y&quot;: 200, &quot;z&quot;: 400 });
        function markmoveUP(){
            new TWEEN.Tween(_this.marks[0].position).to({
                y:230
            }, 700).onUpdate(function () {
                var _marktPosition=this;
                $.each(_this.marks, function (_index, _obj) {
                    if (_index != 0) {
                        _obj.position.y = _marktPosition.y
                    }
                });
            }).onComplete(function () {
                if (_this.marks.length &amp;gt; 0) {
                    markmoveDown();
                }
            }).start();
        }
        function markmoveDown() {
            new TWEEN.Tween(_this.marks[0].position).to({
                y: 200
            }, 700).onUpdate(function () {
                var _marktPosition = this;
                $.each(_this.marks, function (_index, _obj) {
                    if (_index != 0) {
                        _obj.position.y = _marktPosition.y
                    }
                });
            }).onComplete(function () {
                if (_this.marks.length &amp;gt; 0) {
                    markmoveUP();
                }
            }).start();
        }
        function moveCameras() {
            _this.changeCameraPosition(
                    { &quot;x&quot;: -270, &quot;y&quot;: 1274, &quot;z&quot;: -714 },
                    { &quot;x&quot;: 209, &quot;y&quot;: 705, &quot;z&quot;: -750 },
                    1000,
                   function () {
                     _this.changeCameraPosition(
                           { &quot;x&quot;: -574, &quot;y&quot;: 1430, &quot;z&quot;:-161 },
                           { &quot;x&quot;: 486, &quot;y&quot;: 134, &quot;z&quot;: -90 },
                           2000,
                           function () {
                               _this.changeCameraPosition(
                              { &quot;x&quot;: 196, &quot;y&quot;: 1262, &quot;z&quot;:340},
                              { &quot;x&quot;: -639, &quot;y&quot;: 277, &quot;z&quot;:216},
                              4000,
                              function () {
                                  _this.changeCameraPosition(
                                  { &quot;x&quot;:12, &quot;y&quot;: 1749, &quot;z&quot;: -2468 },
                                  { &quot;x&quot;:61, &quot;y&quot;: 156, &quot;z&quot;:194 }, 1000, function () { });
                              }
                          );
                       }
                   );
                 }
                );
        }
        markmoveUP();
        moveCameras();
        $(&quot;#toolbar&quot;).hide();
        layer.open({
            title: &quot;消防-灭火器定位&quot;,
            type: 1,
            offset: 'lt' //具体配置参考：offset参数项
       , content: '&amp;lt;div style=&quot;padding: 10px;width:300px;min-height:200px;background-color:rgba(255,255,255,0.4);&quot;&amp;gt;\
                &amp;lt;table class=&quot;table&quot;&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:right;width:80px;&quot;&amp;gt;序号&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;位置&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;定位&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:center;width:80px;&quot;&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;大门口&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&quot;tl3dCoreBusiness.changeCameraPosition({ x: -270, y: 1274, z: -714 },{ x: 209, y: 705, z: -750 },1000)&quot;&amp;gt;定位&amp;lt;/button&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:center;width:80px;&quot;&amp;gt;2&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;密集架5和密集架6中间&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&quot;tl3dCoreBusiness.changeCameraPosition({ x: -574, y: 1430, z: -161 },{ x: 486, y: 134, z: -90 },1000)&quot;&amp;gt;定位&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:center;width:80px;&quot;&amp;gt;3&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;密集架4和密集架5中间&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&quot;tl3dCoreBusiness.changeCameraPosition({ x: -574, y: 1430, z: -161 },{ x: 486, y: 134, z: -90 },1000)&quot;&amp;gt;定位&amp;lt;/button&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:center;width:80px;&quot;&amp;gt;4&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;密集架1和密集架2中间&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&quot;tl3dCoreBusiness.changeCameraPosition({ x: 196, y: 1262, z: 340},{ x: -639, y: 277, z: 216 },1000)&quot;&amp;gt;定位&amp;lt;/button&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:center;width:80px;&quot;&amp;gt;5&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;密集架2和密集架3中间&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&quot;tl3dCoreBusiness.changeCameraPosition({ x: 196, y: 1262, z: 340},{ x: -639, y: 277, z: 216 },1000)&quot;&amp;gt;定位&amp;lt;/button&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;/table&amp;gt;&amp;lt;/div&amp;gt;'
       , btn:false
       , btnAlign: 'c' //按钮居中
       , shade: 0 //不显示遮罩
       , end: function () {
                _this.hideFireControls();
            }
        });
    }
    this.hideFireControls = function () {
        var _this = this;
        $(&quot;#toolbar&quot;).show();
        _this.EntityWalls();
        _this.showAllMjj();
        _this.removeMark();
    }
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
    /*烟感模拟部分*********************************************************************/
    //烟感模拟
    this.smokeSensors = [];//烟感
    this.getSmokeSensors = function () {
        var _this = this;
        if (_this.smokeSensors&amp;amp;&amp;amp;_this.smokeSensors.length == 0) {
            $.each(tl3DCoreObj.objects, function (_index, _obj) {
                if (_obj.name.indexOf(&quot;smokeSensor_&quot;) &amp;gt;= 0) {
                    _this.smokeSensors.push(_obj);
                }
            });
        }
    }
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;72&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
    /*温度部分*********************************************************************/
    //温度调节模拟+云图
    this.changeTemplate = function () {
        var _this = this;
        $(&quot;#toolbar&quot;).hide();
        _this.hideCamera();
        _this.changeCameraPosition({ x: 540, y: 388, z: -524 }, { x: 0, y: 260, z: 130 }, 1000);
        //获取当前湿度值
        var hvalue = 28.5;
        //隐藏所有密集架
        this.hideAllMjj();
        if (this.templates.length == 0) {
            var tps = [300, -100, 300, 500, -500, -100, -500, 500]
            for (var i = 0; i &amp;lt; 4; i++) {
                var _obj1 = {
                    show: true,
                    name: &quot;thermometer&quot;,
                    objType: &quot;Thermometer3D&quot;,
                    position: { x: tps[2 * i], y: 400, z: tps[2 * i + 1] },
                    rotation: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }],
                    scale: { &quot;x&quot;: 2, &quot;y&quot;: 1.5, &quot;z&quot;: 2},
                    value: hvalue,
                }
                var temObj1 = tl3DCoreObj.createObjByJson(_obj1);
                tl3DCoreObj.addObject(temObj1);
                _this.templates.push(temObj1)
            }
        }
        for (var i = 0; i &amp;lt; _this.templates.length; i++) {
            _this.templates[i].position.y = 400;
            _this.templates[i].visible = true;
        }
        new TWEEN.Tween(_this.templates[0].position).to({
            y: 200
        }, 2000).onUpdate(function () {
            for (var i = 1; i &amp;lt; _this.templates.length; i++) {
                _this.templates[i].position.y = this.y;
            }
        }).easing(TWEEN.Easing.Elastic.Out).start();
        layer.closeAll();
        var videoUrl = &quot;&quot;;
        layer.open({
            title: &quot;调节温度&quot;,
            type: 1,
            anim: 2,
            content: '&amp;lt;div style=&quot;padding: 10px;width:240px;height:80px;background-color:rgba(255,255,255,0.71);text-align:center;&quot;&amp;gt;\
                温度:&amp;lt;input type=&quot;text&quot; style=&quot;width:100px&quot; id=&quot;template_input&quot; value=&quot;' + hvalue + '&quot; /&amp;gt;%\
                &amp;lt;/div&amp;gt;'
        , btn: [&quot;调节&quot;, &quot;关闭&quot;]
        , shade: 0 //不显示遮罩
        , yes: function () {
            var t = parseFloat($(&quot;#template_input&quot;).val());
            for (var i = 0; i &amp;lt; _this.templates.length; i++) {
                _this.templates[i].changeThermoneter(t);
            }
        },
            end: function () {
                _this.hideTemplate();
            }
        });
        var t = $(&quot;#template_input&quot;).val();
        $(&quot;#template_input&quot;).val(&quot;&quot;).focus().val(t)
    }
    this.hideTemplate = function () {
        var _this = this;
        $(&quot;#toolbar&quot;).show();
        _this.hideCamera();
        var _this = this;
        if (this.templates.length &amp;gt; 0) {
            for (var i = 0; i &amp;lt; _this.templates.length; i++) {
                _this.templates[i].position.y = 400;
                _this.templates[i].visible = false;
            }
        }
        _this.showAllMjj();
    }
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;72&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
    //湿度调节模拟+云图
    this.humiditys = [];
    this.changehumidity = function () {
        var _this = this;
        $(&quot;#toolbar&quot;).hide();
        _this.hideCamera();
        _this.changeCameraPosition({ x: -35, y: 647, z: -1190 }, { x: -37, y: 190, z: 95 }, 1000);
        //获取当前湿度值
        var hvalue = 28.5;
        //隐藏所有密集架
        this.hideAllMjj();
        if (this.humiditys.length == 0) {
            var humiditys = [300, -100, 300, 500, -500, -100, -500, 500]
            for (var i = 0; i &amp;lt; 4;i++){
                var humidity1 = {
                    show: true,
                    name: &quot;humidity&quot;,
                    objType: &quot;Humidity&quot;,
                    position: { x: humiditys[2 * i], y: 400, z: humiditys[2 * i+1] },
                    rotation: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }],
                    scale: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 },
                    value: hvalue,
                }
                var temObj1 = tl3DCoreObj.createObjByJson(humidity1);
                tl3DCoreObj.addObject(temObj1);
                _this.humiditys.push(temObj1)
            }
        }
        for (var i = 0; i &amp;lt; _this.humiditys.length;i++){
            _this.humiditys[i].position.y = 400;
            _this.humiditys[i].visible = true;
        }
        new TWEEN.Tween(_this.humiditys[0].position).to({
            y: 200
        }, 2000).onUpdate(function () {
            for (var i = 1; i &amp;lt; _this.humiditys.length; i++) {
                _this.humiditys[i].position.y = this.y;
            }
        }).easing(TWEEN.Easing.Elastic.Out).start();
        layer.closeAll();
        var videoUrl = &quot;&quot;;
        layer.open({
            title: &quot;调节湿度&quot;,
            type: 1,
            anim: 2,
            content: '&amp;lt;div style=&quot;padding: 10px;width:240px;height:80px;background-color:rgba(255,255,255,0.71);text-align:center;&quot;&amp;gt;\
                湿度:&amp;lt;input type=&quot;text&quot; style=&quot;width:100px&quot; id=&quot;humidity_input&quot; value=&quot;' + hvalue + '&quot; /&amp;gt;%\
                &amp;lt;/div&amp;gt;'
        , btn: [&quot;调节&quot;,&quot;关闭&quot;]
        , shade: 0 //不显示遮罩
        , yes: function () {
            var t = parseFloat($(&quot;#humidity_input&quot;).val());
            for (var i = 0; i &amp;lt; _this.humiditys.length; i++) {
                _this.humiditys[i].changeThermoneter(t);
            }
        },
            end: function () {
                _this.hideHumidity();
            }
        });
        var t = $(&quot;#humidity_input&quot;).val();
        $(&quot;#humidity_input&quot;).val(&quot;&quot;).focus().val(t)
    }
    this.hideHumidity = function () {
        var _this = this;
        $(&quot;#toolbar&quot;).show();
        _this.hideCamera();
        var _this = this;
        if (this.humiditys.length &amp;gt; 0) {
            for (var i = 0; i &amp;lt; _this.humiditys.length;i++){
                _this.humiditys[i].position.y = 400;
                _this.humiditys[i].visible = false;
            }
        }
        _this.showAllMjj();
    }
    this.templates = [];
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;76&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
    /*大屏部分*********************************************************************/
    //获取大屏
    this.bigScreens = [];
    this.getScreens = function () {
        var _this = this;
        if (_this.bigScreens.length == 0) {
            $.each(tl3DCoreObj.objects, function (_index, _obj) {
                if (_obj.name.indexOf(&quot;wall_bigScreen_&quot;) &amp;gt;= 0) {
                    _this.bigScreens.push(_obj);
                }
            });
        }
        return _this.bigScreens;
    }
    this.showBigScreenCtrls = function () {
        this.getScreens();
        $(&quot;#toolbar&quot;).hide();
        layer.open({
            title: &quot;大屏定位-设置&quot;,
            type: 1,
            offset: 'lt' //具体配置参考：offset参数项
      , content: '&amp;lt;div style=&quot;padding: 10px;width:300px;min-height:200px;background-color:rgba(255,255,255,0.4);&quot;&amp;gt;\
                &amp;lt;table class=&quot;table&quot;&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:right;width:60px;&quot;&amp;gt;序号&amp;lt;/td&amp;gt;&amp;lt;td style=&quot;text-align:center;width:120px;&quot;&amp;gt;位置&amp;lt;/td&amp;gt;&amp;lt;td style=&quot;width:60px;&quot;&amp;gt;定位&amp;lt;/td&amp;gt;&amp;lt;td style=&quot;width:60px;&quot;&amp;gt;设置&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:center;width:80px;&quot;&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td style=&quot;text-align:center;&quot;&amp;gt;一号外墙大屏&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&quot;tl3dCoreBusiness.changeCameraPosition({ x:1013, y:335, z: -456 },{ x: 328, y: -37, z: -532 },1000)&quot;&amp;gt;定位&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&quot;tl3dCoreBusiness.setSreenParams(\'wall_bigScreen_1\')&quot;&amp;gt;设置&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:center;width:80px;&quot;&amp;gt;2&amp;lt;/td&amp;gt;&amp;lt;td style=&quot;text-align:center;&quot;&amp;gt;二号室内大屏&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&quot;tl3dCoreBusiness.changeCameraPosition({ x: -310, y: 187, z: 452},{ x: -325, y: 147, z: 870 },1000)&quot;&amp;gt;定位&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&quot;tl3dCoreBusiness.setSreenParams(\'wall_bigScreen_2\')&quot;&amp;gt;设置&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;/table&amp;gt;&amp;lt;/div&amp;gt;'
      , btn: false
      , btnAlign: 'c' //按钮居中
      , shade: 0 //不显示遮罩
      , end: function () {
          $(&quot;#toolbar&quot;).show();
         }
        });
    }
    this.setSreenParams = function (sreenName) {
        var _screenobj = null;
        var _this = this;
       // layer.closeAll();
        for (var i = 0; i &amp;lt; _this.bigScreens.length; i++) {
            if (_this.bigScreens[i].name == sreenName) {
                _screenobj = _this.bigScreens[i];
            }
        }
        var screenType = &quot;1&quot;;//1图片 2视频
        var screenUrl = &quot;../../img/3dImg/tv.jpg&quot;;
        if (_screenobj &amp;amp;&amp;amp; _screenobj.screenType) {
            screenType = _screenobj.screenType
        } 
        if (_screenobj &amp;amp;&amp;amp; _screenobj.screenUrl) {
            screenUrl = _screenobj.screenUrl
        }
        var layerindex=layer.open({
            title: &quot;大屏定位-设置&quot;,
            type: 1,
            offset: 'lt' //具体配置参考：offset参数项
      , content: '&amp;lt;div style=&quot;padding: 10px;width:300px;min-height:100px;background-color:rgba(255,255,255,1);&quot;&amp;gt;\
                &amp;lt;table class=&quot;table&quot;&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:right;width:60px;&quot;&amp;gt;类型:&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;' + '&amp;lt;label&amp;gt;&amp;lt;input name=&quot;screenTypeAndUrl&quot; type=&quot;radio&quot; ' + (screenType == &quot;1&quot; ? &quot; checked='checked' &quot; : &quot;&quot;) + ' value=&quot;1&quot; /&amp;gt;图片 &amp;lt;/label&amp;gt;\
&amp;lt;label&amp;gt;&amp;lt;input name=&quot;screenTypeAndUrl&quot; type=&quot;radio&quot; ' + (screenType == &quot;2&quot; ? &quot;  checked='checked' &quot; : &quot;&quot;) + ' value=&quot;2&quot; /&amp;gt;视频 &amp;lt;/label&amp;gt; &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:right;width:60px;&quot;&amp;gt;url:&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input onclick=&quot;var t = $(\'#screenUrl\').val();$(\'#screenUrl\').val(\'\').focus().val(t)&quot; id=&quot;screenUrl&quot; value=&quot;' + screenUrl + '&quot; /&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
                &amp;lt;/table&amp;gt;&amp;lt;/div&amp;gt;'
      , btn: [&quot;确定&quot;,&quot;取消&quot;]
      , btnAlign: 'c' //按钮居中
      , shade: 0 //不显示遮罩
      , yes: function () {
          var setScreenType = $(&quot;input:radio[name='screenTypeAndUrl']:checked&quot;).val();
          var setScreenUrl = $(&quot;#screenUrl&quot;).val();
          if (setScreenType == &quot;1&quot;) {
              tl3DCoreObj.commonFunc.setObjSkinImg(_screenobj, 0, setScreenUrl);
          } else {
              tl3DCoreObj.commonFunc.setObjSkinVideo(_screenobj, 0, setScreenUrl, sreenName);
          }
          _screenobj.screenType = setScreenType;
          _screenobj.screenUrl = setScreenUrl;
          layer.close(layerindex);
      }
      , end: function () {
        
      }
        });
        $(&quot;#canvas-frame canvas&quot;).dblclick();
        var t = $('#screenUrl').val();$('#screenUrl').val(&quot;&quot;).focus().val(t);
    }
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;108&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
    /*风控部分***********************************************************************/
    //风控按钮
    this.showWindsCtrl = function () {
        var _this = this;
        $(&quot;#toolbar&quot;).hide();
        _this.changeCameraPosition({ x: 430, y: 1449, z: -2557 }, { x: 8, y: 234, z: 814 }, 1000);
        if (_this.windsISOPEN) {
            _this.openWinds();
            layer.confirm('当前风控开启状态，是否关闭风控按钮？', {
                offset: 'lt' ,
                btn: ['关闭', '取消'] //按钮
            }, function () {
                _this.closeWinds();
                layer.msg(&quot;已关闭&quot;);
                _this.windsISOPEN = false;
                $(&quot;#toolbar&quot;).show();
                layer.closeAll();
            }, function () {
                $(&quot;#toolbar&quot;).show();
                _this.hiddenIngWinds();
                layer.closeAll();
            });
        } else {
            layer.confirm('当前风控关闭状态，是否开启风控按钮？', {
                offset: 'lt',
                btn: ['开启', '取消'] //按钮
            }, function () {
                _this.openWinds();
                layer.msg(&quot;已开启&quot;)
                layer.closeAll();
                _this.windsISOPEN = true;
                setTimeout(function () {
                    _this.hiddenIngWinds();
                    $(&quot;#toolbar&quot;).show();
                }, 2000);
            }, function () {
                $(&quot;#toolbar&quot;).show();
                layer.closeAll();
            });
        }
    }
    this.openWinds = function () {
        var _this=this;
        var _winds = [
            { &quot;name&quot;: &quot;win_1_1&quot;,&quot;position&quot;: {&quot;x&quot;: 0,&quot;y&quot;: -100,&quot;z&quot;: 640},&quot;rotation&quot;: {x:0,y:0,z:0},},
            { &quot;name&quot;: &quot;win_1_2&quot;, &quot;position&quot;: { &quot;x&quot;: 0, &quot;y&quot;: -100, &quot;z&quot;:110 }, &quot;rotation&quot;: { x: 0, y: 0, z: 0 }, },
            { &quot;name&quot;: &quot;win_1_3&quot;, &quot;position&quot;: { &quot;x&quot;: 0, &quot;y&quot;: -100, &quot;z&quot;: -400 }, &quot;rotation&quot;: { x: 0, y: 0, z: 0 }, },
            { &quot;name&quot;: &quot;win_1_4&quot;, &quot;position&quot;: { &quot;x&quot;: -240, &quot;y&quot;: -100, &quot;z&quot;: -400 }, &quot;rotation&quot;: { x: -3.141592653589793, y: 0, z: -3.141592653589793 }, },
            { &quot;name&quot;: &quot;win_1_5&quot;, &quot;position&quot;: { &quot;x&quot;: -240, &quot;y&quot;: -100, &quot;z&quot;: 110 }, &quot;rotation&quot;: { x: -3.141592653589793, y: 0, z: -3.141592653589793 }, },
            { &quot;name&quot;: &quot;win_1_6&quot;, &quot;position&quot;: { &quot;x&quot;: -240, &quot;y&quot;: -100, &quot;z&quot;: 640 }, &quot;rotation&quot;: { x: -3.141592653589793, y: 0, z: -3.141592653589793 }, },
        ];
        if (_this.winds.length &amp;lt;= 0) {
        $.each(_winds, function (_index,_obj) {
            _this.createWind(_obj.position,_obj.name,_obj.rotation);
        })
        }
        $.each(_this.winds, function (_index, _obj) {
            _obj.visible = true;
        });
    }
    this.closeWinds = function () {
        var _this = this;
        if (_this.winds.length &amp;gt; 0) {
            $.each(_this.winds, function (_index, _obj) {
                _obj.visible = false;
            });
        }
    }
&lt;/pre&gt;&lt;/div&gt;&lt;div readability=&quot;1409&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
 //空调
    this.airConditionerCtls = function () {
        var _this = this;
        $(&quot;#toolbar&quot;).hide();
        //获取到文件位置信息
        //边缘弹出
        layer.open({
            title: &quot;空调控制&quot;,
            type: 1,
            offset: 'lt' //具体配置参考：offset参数项
            , content: '&amp;lt;div style=&quot;padding: 10px;width:300px;min-height:120px;background-color:rgba(255,255,255,0.4);&quot;&amp;gt;\
        &amp;lt;table class=&quot;table&quot;&amp;gt;\
        &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:center;width:80px;&quot;&amp;gt;空调&amp;lt;/td&amp;gt;&amp;lt;td style=&quot;text-align:center;width:200px;&quot;&amp;gt;操作&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
        &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:left;width:80px;&quot;&amp;gt;立柜空调&amp;lt;/td&amp;gt;&amp;lt;td style=&quot;text-align:center;&quot;&amp;gt;\
        &amp;lt;button id=&quot;LGAC_btn1&quot; onclick=&quot;tl3dCoreBusiness.changeCameraPosition({x: -98, y: 356, z: 407},{x: -75, y: 121, z: 762},1000)&quot;&amp;gt;定位&amp;lt;/button&amp;gt;\
        &amp;lt;button id=&quot;LGAC_btn2&quot; onclick=&quot;tl3dCoreBusiness.openLSAirconditioner(\'aircondition_57\')&quot;&amp;gt;开启&amp;lt;/button&amp;gt;\
        &amp;lt;button id=&quot;LGAC_btn3&quot; onclick=&quot;tl3dCoreBusiness.closeLSAirconditioner(\'aircondition_57\')&quot;&amp;gt;关闭&amp;lt;/button&amp;gt;\
    &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
        &amp;lt;tr&amp;gt;&amp;lt;td style=&quot;text-align:left;width:80px;&quot;&amp;gt;中央空调&amp;lt;/td&amp;gt;&amp;lt;td style=&quot;text-align:center;&quot;&amp;gt;\
        &amp;lt;button onclick=&quot;tl3dCoreBusiness.showCenterAirConditioner()&quot; id=&quot;centerAC_btn1&quot;&amp;gt;定位&amp;lt;/button&amp;gt;\
        &amp;lt;button onclick=&quot;tl3dCoreBusiness.openCenterAirConditioner()&quot; id=&quot;centerAC_btn2&quot;&amp;gt;开启&amp;lt;/button&amp;gt;\
        &amp;lt;button onclick=&quot;tl3dCoreBusiness.closeCenterAirConditioner()&quot; id=&quot;centerAC_btn3&quot;&amp;gt;关闭&amp;lt;/button&amp;gt;\
    &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;\
        &amp;lt;/table&amp;gt;&amp;lt;/div&amp;gt;'
            , btn: false
            , btnAlign: 'c' //按钮居中
            , shade: 0 //不显示遮罩
            , end: function () {
                $(&quot;#toolbar&quot;).show();
                _this.hideCenterAirConditioner();
                _this.hideLSAirconditioner();
            }
        });

    }
    this.LGAirConditions = [];
    //开启立式空调
    this.openLSAirconditioner = function (airConName) {
        var tempAirWind=null;
        var _this = this;
        var aircondition = tl3DCoreObj.commonFunc.findObject(airConName);
        if (this.LGAirConditions &amp;amp;&amp;amp; this.LGAirConditions.length &amp;gt; 0) {
            $.each(this.LGAirConditions, function (_index, _obj) {
                if (_obj.name == airConName + &quot;_wind_1&quot;) {
                    tempAirWind = _obj;
                }
            });
        }
        //{x: -82.581, y: 92.342, z: 743.966}
        if (tempAirWind == null) {
        var lgairwin = {
            &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;,
            &quot;name&quot;:airConName+&quot;_wind_1&quot;,// &quot;lgAirC_wind_1&quot;,
            &quot;objType&quot;: &quot;flowTube&quot;,
            &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 200, &quot;z&quot;: 0 }, { &quot;x&quot;: 0, &quot;y&quot;: 150, &quot;z&quot;: -60 }, { &quot;x&quot;: 0, &quot;y&quot;: 150, &quot;z&quot;: -200 }],
            &quot;position&quot;: { &quot;x&quot;: aircondition.position.x, &quot;y&quot;: aircondition.position.y - 122, &quot;z&quot;: aircondition.position.z - 13 },
            &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 },
            &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }],
            &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 16, &quot;chNub&quot;: 8, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 8, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 1, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(255, 227, 248, 0.02)&quot; } }, &quot;segments&quot;: 64, &quot;radialSegments&quot;: 2, &quot;closed&quot;: false, &quot;radius&quot;: 20, &quot;showSortNub&quot;: 196, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null
        }
        var temObj1 = tl3DCoreObj.createObjByJson(lgairwin);
        tl3DCoreObj.addObject(temObj1);
        _this.LGAirConditions.push(temObj1);
        tempAirWind = temObj1;
        }
        if (tempAirWind) {
            tempAirWind.visible = true;
        }
    }
    //关闭立式空调
    this.closeLSAirconditioner = function (airConName,isCloseAll) {
        var _this = this;
        if (this.LGAirConditions &amp;amp;&amp;amp; this.LGAirConditions.length &amp;gt; 0) {
            $.each(this.LGAirConditions, function (_index, _obj) {
                if (_obj.name == airConName + &quot;_wind_1&quot;) {
                    _obj.visible = false;
                }
                if (isCloseAll) {
                    _obj.visible = false;
                }
            });
        }
    }
    //隐藏立式空调风口动画
    this.hideLSAirconditioner = function () {
        var _this = this;
        if (this.LGAirConditions &amp;amp;&amp;amp; this.LGAirConditions.length &amp;gt; 0) {
            $.each(this.LGAirConditions, function (_index, _obj) {
                    _obj.visible = false;
            });
        }
    }
    //开启中央空调
    this.centerAirConditionerDevs = [];
    //显示中央空调设备
    this.showCenterAirConditioner = function () {
        var _this = this;
        if (_this.centerAirConditionerDevs.length &amp;lt;= 0) {
        var centerAirCondition = [
            { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_2_2&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 78, &quot;width&quot;: 78, &quot;height&quot;: 40, &quot;x&quot;: -80.785, &quot;y&quot;: 370.664, &quot;z&quot;: -456.654, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 } } }, &quot;showSortNub&quot;: 7, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_2_3&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 78, &quot;width&quot;: 78, &quot;height&quot;: 40, &quot;x&quot;: -80.785, &quot;y&quot;: 370.664, &quot;z&quot;: 518.684, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 } } }, &quot;showSortNub&quot;: 7, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_2_1&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 78, &quot;width&quot;: 78, &quot;height&quot;: 40, &quot;x&quot;: -80.785, &quot;y&quot;: 370.664, &quot;z&quot;: 48.478, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 } } }, &quot;showSortNub&quot;: 7, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_1_1&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 78, &quot;width&quot;: 78, &quot;height&quot;: 40, &quot;x&quot;: -605.659, &quot;y&quot;: 370.664, &quot;z&quot;: 48.478, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 } } }, &quot;showSortNub&quot;: 7, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_1_2&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 78, &quot;width&quot;: 78, &quot;height&quot;: 40, &quot;x&quot;: -605.659, &quot;y&quot;: 370.664, &quot;z&quot;: -467.654, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 } } }, &quot;showSortNub&quot;: 7, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_1_3&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 78, &quot;width&quot;: 78, &quot;height&quot;: 40, &quot;x&quot;: -605.659, &quot;y&quot;: 370.664, &quot;z&quot;: 553.501, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 } } }, &quot;showSortNub&quot;: 7, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_3_1&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 78, &quot;width&quot;: 78, &quot;height&quot;: 40, &quot;x&quot;: 442.379, &quot;y&quot;: 370.664, &quot;z&quot;: 48.478, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 } } }, &quot;showSortNub&quot;: 7, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_3_2&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 78, &quot;width&quot;: 78, &quot;height&quot;: 40, &quot;x&quot;: 442.379, &quot;y&quot;: 370.664, &quot;z&quot;: -461.396, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 } } }, &quot;showSortNub&quot;: 7, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_3_3&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 78, &quot;width&quot;: 78, &quot;height&quot;: 40, &quot;x&quot;: 442.379, &quot;y&quot;: 370.664, &quot;z&quot;: 526.744, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 0.3 } } }, &quot;showSortNub&quot;: 7, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_1&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 0, &quot;z&quot;: 1500 }, { &quot;x&quot;: 0, &quot;y&quot;: 0, &quot;z&quot;: 0 }], &quot;position&quot;: { &quot;x&quot;: -70.779, &quot;y&quot;: 419.052, &quot;z&quot;: -751.968 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 32, &quot;chNub&quot;: 8, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 3, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 2, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 4, &quot;radialSegments&quot;: 4, &quot;closed&quot;: false, &quot;radius&quot;: 40, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_3&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 0, &quot;z&quot;: 1500 }, { &quot;x&quot;: 0, &quot;y&quot;: 0, &quot;z&quot;: 0 }], &quot;position&quot;: { &quot;x&quot;: 443.302, &quot;y&quot;: 419.052, &quot;z&quot;: -751.968 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 32, &quot;chNub&quot;: 8, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 3, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 2, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 4, &quot;radialSegments&quot;: 4, &quot;closed&quot;: false, &quot;radius&quot;: 40, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_2&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 0, &quot;z&quot;: 1500 }, { &quot;x&quot;: 0, &quot;y&quot;: 0, &quot;z&quot;: 0 }], &quot;position&quot;: { &quot;x&quot;: -604.569, &quot;y&quot;: 419.052, &quot;z&quot;: -751.968 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 32, &quot;chNub&quot;: 8, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 3, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 2, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 4, &quot;radialSegments&quot;: 4, &quot;closed&quot;: false, &quot;radius&quot;: 40, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_1&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 80, &quot;width&quot;: 1500, &quot;height&quot;: 80, &quot;x&quot;: 444.17, &quot;y&quot;: 426.022, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 7895160, &quot;side&quot;: 0, &quot;opacity&quot;: 0.4 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 7895160, &quot;side&quot;: 0, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0 } } }, &quot;showSortNub&quot;: 196, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_2&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 80, &quot;width&quot;: 1500, &quot;height&quot;: 80, &quot;x&quot;: -76.111, &quot;y&quot;: 419.507, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 7895160, &quot;side&quot;: 0, &quot;opacity&quot;: 0.4 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 7895160, &quot;side&quot;: 0, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0 } } }, &quot;showSortNub&quot;: 196, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;center_air_conditioning_3&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 80, &quot;width&quot;: 1500, &quot;height&quot;: 80, &quot;x&quot;: -604.307, &quot;y&quot;: 426.022, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 7895160, &quot;side&quot;: 0, &quot;opacity&quot;: 0.4 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 7895160, &quot;side&quot;: 0, &quot;opacity&quot;: 0.3 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0.3 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0.3 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 0, &quot;opacity&quot;: 0 } } }, &quot;showSortNub&quot;: 196, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: null, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_1_1&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 200, &quot;z&quot;: 0 }, { &quot;x&quot;: 50, &quot;y&quot;: 50, &quot;z&quot;: 0 }, { &quot;x&quot;: 150, &quot;y&quot;: -50, &quot;z&quot;: null }], &quot;position&quot;: { &quot;x&quot;: -51.031, &quot;y&quot;: 182.086, &quot;z&quot;: -450.709 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 8, &quot;chNub&quot;: 2, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 8, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 1, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 6, &quot;radialSegments&quot;: 2, &quot;closed&quot;: false, &quot;radius&quot;: 20, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_1_3&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 200, &quot;z&quot;: 0 }, { &quot;x&quot;: 50, &quot;y&quot;: 50, &quot;z&quot;: 0 }, { &quot;x&quot;: 150, &quot;y&quot;: -50, &quot;z&quot;: null }], &quot;position&quot;: { &quot;x&quot;: -51.031, &quot;y&quot;: 182.086, &quot;z&quot;: 518.391 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 8, &quot;chNub&quot;: 2, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 8, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 1, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 6, &quot;radialSegments&quot;: 2, &quot;closed&quot;: false, &quot;radius&quot;: 20, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_1_2&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 200, &quot;z&quot;: 0 }, { &quot;x&quot;: 50, &quot;y&quot;: 50, &quot;z&quot;: 0 }, { &quot;x&quot;: 150, &quot;y&quot;: -50, &quot;z&quot;: null }], &quot;position&quot;: { &quot;x&quot;: -51.031, &quot;y&quot;: 182.086, &quot;z&quot;: 56.652 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 8, &quot;chNub&quot;: 2, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 8, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 1, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 6, &quot;radialSegments&quot;: 2, &quot;closed&quot;: false, &quot;radius&quot;: 20, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_3_1&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 200, &quot;z&quot;: 0 }, { &quot;x&quot;: 50, &quot;y&quot;: 50, &quot;z&quot;: 0 }, { &quot;x&quot;: 150, &quot;y&quot;: -50, &quot;z&quot;: null }], &quot;position&quot;: { &quot;x&quot;: -596.596, &quot;y&quot;: 182.086, &quot;z&quot;: -450.709 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 8, &quot;chNub&quot;: 2, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 8, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 1, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 6, &quot;radialSegments&quot;: 2, &quot;closed&quot;: false, &quot;radius&quot;: 20, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_3_2&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 200, &quot;z&quot;: 0 }, { &quot;x&quot;: 50, &quot;y&quot;: 50, &quot;z&quot;: 0 }, { &quot;x&quot;: 150, &quot;y&quot;: -50, &quot;z&quot;: null }], &quot;position&quot;: { &quot;x&quot;: -596.596, &quot;y&quot;: 182.086, &quot;z&quot;: 69.057 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 8, &quot;chNub&quot;: 2, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 8, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 1, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 6, &quot;radialSegments&quot;: 2, &quot;closed&quot;: false, &quot;radius&quot;: 20, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_3_3&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 200, &quot;z&quot;: 0 }, { &quot;x&quot;: 50, &quot;y&quot;: 50, &quot;z&quot;: 0 }, { &quot;x&quot;: 150, &quot;y&quot;: -50, &quot;z&quot;: null }], &quot;position&quot;: { &quot;x&quot;: -596.596, &quot;y&quot;: 182.086, &quot;z&quot;: 571.083 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 8, &quot;chNub&quot;: 2, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 8, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 1, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 6, &quot;radialSegments&quot;: 2, &quot;closed&quot;: false, &quot;radius&quot;: 20, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_2_1&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 200, &quot;z&quot;: 0 }, { &quot;x&quot;: 50, &quot;y&quot;: 50, &quot;z&quot;: 0 }, { &quot;x&quot;: 150, &quot;y&quot;: -50, &quot;z&quot;: null }], &quot;position&quot;: { &quot;x&quot;: 449.11, &quot;y&quot;: 182.086, &quot;z&quot;: -450.709 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 8, &quot;chNub&quot;: 2, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 8, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 1, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 6, &quot;radialSegments&quot;: 2, &quot;closed&quot;: false, &quot;radius&quot;: 20, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_2_2&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 200, &quot;z&quot;: 0 }, { &quot;x&quot;: 50, &quot;y&quot;: 50, &quot;z&quot;: 0 }, { &quot;x&quot;: 150, &quot;y&quot;: -50, &quot;z&quot;: null }], &quot;position&quot;: { &quot;x&quot;: 449.11, &quot;y&quot;: 182.086, &quot;z&quot;: 58.707 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 8, &quot;chNub&quot;: 2, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 8, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 1, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 6, &quot;radialSegments&quot;: 2, &quot;closed&quot;: false, &quot;radius&quot;: 20, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }, { &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;cacWind_2_3&quot;, &quot;objType&quot;: &quot;flowTube&quot;, &quot;points&quot;: [{ &quot;x&quot;: 0, &quot;y&quot;: 200, &quot;z&quot;: 0 }, { &quot;x&quot;: 50, &quot;y&quot;: 50, &quot;z&quot;: 0 }, { &quot;x&quot;: 150, &quot;y&quot;: -50, &quot;z&quot;: null }], &quot;position&quot;: { &quot;x&quot;: 449.11, &quot;y&quot;: 182.086, &quot;z&quot;: 550.649 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16772846, &quot;imgurl&quot;: &quot;../../img/3dImg/right2wind.png&quot;, &quot;opacity&quot;: 1, &quot;canvasSkin&quot;: { &quot;cwidth&quot;: 1024, &quot;cheight&quot;: 128, &quot;cwNub&quot;: 8, &quot;chNub&quot;: 2, &quot;cMarginW&quot;: 0.2, &quot;cMarginH&quot;: 0.2, &quot;speed&quot;: 8, &quot;fps&quot;: 40, &quot;direction&quot;: &quot;w&quot;, &quot;forward&quot;: &quot;f&quot;, &quot;side&quot;: 1, &quot;run&quot;: true, &quot;bgcolor&quot;: &quot;rgba(4, 4, 4, 0.098)&quot; } }, &quot;segments&quot;: 6, &quot;radialSegments&quot;: 2, &quot;closed&quot;: false, &quot;radius&quot;: 20, &quot;showSortNub&quot;: 16, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: null, &quot;dbclickEvents&quot;: null, &quot;BindDevId&quot;: null, &quot;BindDevName&quot;: null, &quot;devInfo&quot;: null, &quot;BindMeteId&quot;: null, &quot;BindMeteName&quot;: null }]
        $.each(centerAirCondition,function(_index,_obj){
            var temObj1 = tl3DCoreObj.createObjByJson(_obj);
            tl3DCoreObj.addObject(temObj1);
            _this.centerAirConditionerDevs.push(temObj1)
        })
        }
        if (_this.centerAirConditionerDevs.length &amp;gt; 0) {
            $.each(_this.centerAirConditionerDevs, function (_index, _obj) {
                    _obj.visible = true;
            })
        }
        //获取中央空调开关状态
        var isopen = true;//此处调用函数 获取中央空调状态
        if (isopen) {
            _this.openCenterAirConditioner();
        } else {
            _this.closeCenterAirConditioner();
        }
    }
    //隐藏中央空调设备
    this.hideCenterAirConditioner = function () {
        var _this = this;
        if (_this.centerAirConditionerDevs.length &amp;gt; 0) {
            $.each(_this.centerAirConditionerDevs, function (_index, _obj) {
                _obj.visible = false;
            })
        }
    }
    //打开中央空调
    this.openCenterAirConditioner = function () {
        var _this = this;
        _this.showCenterAirConditioner();
        if (_this.centerAirConditionerDevs.length &amp;gt; 0) {
            $.each(_this.centerAirConditionerDevs, function (_index, _obj) {
                if (_obj.name.indexOf(&quot;cacWind_&quot;) &amp;gt;= 0) {
                    _obj.visible = true;
                }
            })
        }
    }
    //关闭中央空调
    this.closeCenterAirConditioner = function () {
        var _this = this;
        $(&quot;#centerAC_btn1&quot;).attr(&quot;disabled&quot;, true);
        $(&quot;#centerAC_btn2&quot;).attr(&quot;disabled&quot;, true);
        $(&quot;#centerAC_btn3&quot;).attr(&quot;disabled&quot;, true);
        if (_this.centerAirConditionerDevs.length &amp;gt; 0) {
            $.each(_this.centerAirConditionerDevs, function (_index, _obj) {
                if (_obj.name.indexOf(&quot;cacWind_&quot;) &amp;gt;= 0) {
                    _obj.visible = false;
                }
            })
        }
        setTimeout(function () {
            _this.hideCenterAirConditioner();
            $(&quot;#centerAC_btn1&quot;).attr(&quot;disabled&quot;, false);
            $(&quot;#centerAC_btn2&quot;).attr(&quot;disabled&quot;, false);
            $(&quot;#centerAC_btn3&quot;).attr(&quot;disabled&quot;, false);
        }, 2000);
    }
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;span&gt;十四、对场景内其它设备进行3D操控 如窗帘 采光控制 灯光控制等等&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下一课我们继续讲解这一课的代码详情 以及讨论给这个场景加上一些新的功能 或者建立其他3D场景&lt;/span&gt;&lt;/p&gt;</description>
<pubDate>Thu, 12 Apr 2018 16:09:00 +0000</pubDate>
<dc:creator>魂断蓝桥666</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yeyunfei/p/8811228.html</dc:identifier>
</item>
<item>
<title>PageRank之基于C和C#的基本实现 - FlashOliver</title>
<link>http://www.cnblogs.com/Oliva/p/8811314.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Oliva/p/8811314.html</guid>
<description>&lt;p data-mce-=&quot;&quot;&gt;&lt;strong&gt;重点不是说&lt;span lang=&quot;EN-US&quot;&gt;PageRank是什么，而是怎么用代码实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;span data-mce-=&quot;&quot;&gt;什么是&lt;span lang=&quot;EN-US&quot;&gt;PageRank？&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;PageRank，网页排名，又称网页级别、&lt;span lang=&quot;EN-US&quot;&gt;Google左侧排名或佩奇排名，是一种由&lt;sup&gt;&lt;span lang=&quot;EN-US&quot;&gt;[1]&lt;/span&gt;&lt;/sup&gt;&lt;span lang=&quot;EN-US&quot;&gt;  &lt;span lang=&quot;EN-US&quot;&gt;根据&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;网页&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;之间相互的&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E8%B6%85%E9%93%BE%E6%8E%A5&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;超链接&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;计算的技术，而作为网页排名的要素之一，以&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/Google&quot; target=&quot;_blank&quot;&gt;Google&lt;/a&gt;公司创办人&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E6%8B%89%E9%87%8C%C2%B7%E4%BD%A9%E5%A5%87&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;拉里·&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;佩奇&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;（&lt;span lang=&quot;EN-US&quot;&gt;Larry Page）之姓来命名。&lt;span lang=&quot;EN-US&quot;&gt;Google用它来体现网页的相关性和重要性，在&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;搜索引擎优化&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;操作中是经常被用来评估网页优化的成效因素之一。&lt;span lang=&quot;EN-US&quot;&gt;Google的创始人拉里&lt;span lang=&quot;EN-US&quot;&gt;·佩奇和&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E8%B0%A2%E5%B0%94%E7%9B%96%C2%B7%E5%B8%83%E6%9E%97&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;谢尔盖·&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;布林&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;于&lt;span lang=&quot;EN-US&quot;&gt;1998年在&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6&quot; target=&quot;_blank&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;斯坦福大学&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;发明了这项技术。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;PageRank的诞生背景&lt;span lang=&quot;EN-US&quot;&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;早期的搜索引擎经历了&lt;span lang=&quot;EN-US&quot;&gt;“不评价&lt;span lang=&quot;EN-US&quot;&gt;” 和&lt;span lang=&quot;EN-US&quot;&gt;“基于检索词&lt;span lang=&quot;EN-US&quot;&gt;”的评价两个阶段。 &lt;span lang=&quot;EN-US&quot;&gt;“基于检索词&lt;span lang=&quot;EN-US&quot;&gt;”的评价算法很直观，但是容易受到&lt;span lang=&quot;EN-US&quot;&gt;“Term Spam”的攻击。其实从搜索引擎出现的那天起，&lt;span lang=&quot;EN-US&quot;&gt;spammer和搜索引擎反作弊的斗法就没有停止过。&lt;span lang=&quot;EN-US&quot;&gt;Spammer是这样一群人&lt;span lang=&quot;EN-US&quot;&gt;——试图通过搜索引擎算法的漏洞来提高目标页面（通常是一些广告页面或垃圾页面）的重要性，使目标页面在搜索结果中排名靠前。用户很容易被带入垃圾网页，用户体验极差。&lt;span lang=&quot;EN-US&quot;&gt;PageRank也应运而生。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;怎么实现&lt;span lang=&quot;EN-US&quot;&gt;PageRank?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;   简单的说&lt;span lang=&quot;EN-US&quot;&gt;PageRank让链接来&lt;span lang=&quot;EN-US&quot;&gt;&quot;投票&lt;span lang=&quot;EN-US&quot;&gt;&quot;，一个页面的&lt;span lang=&quot;EN-US&quot;&gt;“得票数&lt;span lang=&quot;EN-US&quot;&gt;”由所有链向它的页面的重要性来决定，到一个页面的超链接相当于对该页投一票。一个页面的&lt;span lang=&quot;EN-US&quot;&gt;PageRank是由所有链向它的页面（&lt;span lang=&quot;EN-US&quot;&gt;“链入页面&lt;span lang=&quot;EN-US&quot;&gt;”）的重要性经过递归算法得到的。一个有较多链入的页面会有较高的等级，相反如果一个页面没有任何链入页面，那么它没有等级。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;最简单&lt;span lang=&quot;EN-US&quot;&gt;pagerank模型&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;网页，可以抽象成的图当中的结点，网页与网页当中的链接关系可以模型化为数据结构中逻辑结构图再具体点是有向图（表示哪个网页链接哪个网页），我们可以把链接关系用作离散数学图论当中的可达矩阵形象具体的表示，下面我来给大家具体的说明，如下面这个例子&lt;span lang=&quot;EN-US&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412232117741-1764134283.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个例子中有四个网页，如果当前在&lt;span lang=&quot;EN-US&quot;&gt;A网页，那么上网者将会各有&lt;span lang=&quot;EN-US&quot;&gt;1/3的概率浏览到&lt;span lang=&quot;EN-US&quot;&gt;B、&lt;span lang=&quot;EN-US&quot;&gt;C、&lt;span lang=&quot;EN-US&quot;&gt;D网页，这里的&lt;span lang=&quot;EN-US&quot;&gt;3表示&lt;span lang=&quot;EN-US&quot;&gt;A有&lt;span lang=&quot;EN-US&quot;&gt;3条出链，如果一个网页有&lt;span lang=&quot;EN-US&quot;&gt;k条出链，那么跳转任意一个出链上的概率是&lt;span lang=&quot;EN-US&quot;&gt;1/k，同理&lt;span lang=&quot;EN-US&quot;&gt;D到&lt;span lang=&quot;EN-US&quot;&gt;B的概率&lt;span lang=&quot;EN-US&quot;&gt;1，而&lt;span lang=&quot;EN-US&quot;&gt;B到&lt;span lang=&quot;EN-US&quot;&gt;C的概率为&lt;span lang=&quot;EN-US&quot;&gt;1。一般用转移矩阵表示上网者的跳转概率，如果用&lt;span lang=&quot;EN-US&quot;&gt;n表示网页的数目，则转移矩阵&lt;span lang=&quot;EN-US&quot;&gt;M是一个&lt;span lang=&quot;EN-US&quot;&gt;n*n的方阵（可由可达矩阵转换成转移矩阵）；如果网页&lt;span lang=&quot;EN-US&quot;&gt;j有&lt;span lang=&quot;EN-US&quot;&gt;k个出链，那么对每一个出链指向的网页&lt;span lang=&quot;EN-US&quot;&gt;i，有&lt;span lang=&quot;EN-US&quot;&gt;M[i][j]=1/k，而其他网页的&lt;span lang=&quot;EN-US&quot;&gt;M[i][j]=0；上面示例图对应的可达矩阵如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt; &lt;br/&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;     A   B     C    D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;A      0   1     0   0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;B      1   0     0   1 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;C      1   1     0   0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;D      1   0     1   0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对应的转移矩阵为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;  &lt;span&gt;     A      B     C     D&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;A      0      0.5   0    0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;B      0.33   0     0    1 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;C      0.33   0.5   0    0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D      0,33   0     1    0  &lt;span lang=&quot;EN-US&quot;&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;刚开始的时候，假设上网者在每一个网页的概率都是相等的（&lt;span&gt;这个假设确实存在，假设世界上只有&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;n个网页，那么我只能开始的时候进入&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;n个网页当中的一个，就是&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1/n&lt;/span&gt;），即&lt;span lang=&quot;EN-US&quot;&gt;1/n，于是开始的时候的概率分布就是一个所有值都为&lt;span lang=&quot;EN-US&quot;&gt;1/n的&lt;span lang=&quot;EN-US&quot;&gt;n维列向量&lt;span lang=&quot;EN-US&quot;&gt;V0（&lt;span&gt;我们以概率分布向量的结果作为网页的质量结果，因为质量越高，被上网者浏览的概率越大，也称&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;pr值的大小&lt;/span&gt;），在转移矩阵&lt;span lang=&quot;EN-US&quot;&gt;M去右乘概率分布向量&lt;span lang=&quot;EN-US&quot;&gt;V0，就得到了第一步之后上网者的概率分布向量&lt;span lang=&quot;EN-US&quot;&gt;MV0,（&lt;span lang=&quot;EN-US&quot;&gt;nXn）&lt;span lang=&quot;EN-US&quot;&gt;*(nX1)依然得到一个&lt;span lang=&quot;EN-US&quot;&gt;nX1的矩阵。下面是&lt;span lang=&quot;EN-US&quot;&gt;V1的计算过程：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412232319484-1127583998.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意矩阵&lt;span lang=&quot;EN-US&quot;&gt;M中&lt;span lang=&quot;EN-US&quot;&gt;M[i][j]不为&lt;span lang=&quot;EN-US&quot;&gt;0表示用一个链接从&lt;span lang=&quot;EN-US&quot;&gt;j指向&lt;span lang=&quot;EN-US&quot;&gt;i，&lt;span lang=&quot;EN-US&quot;&gt;M的第一行乘以&lt;span lang=&quot;EN-US&quot;&gt;V0，表示累加所有网页到网页&lt;span lang=&quot;EN-US&quot;&gt;A的概率即得到&lt;span lang=&quot;EN-US&quot;&gt;0.125。得到了&lt;span lang=&quot;EN-US&quot;&gt;V1后，再用&lt;span lang=&quot;EN-US&quot;&gt;V1去右乘&lt;span lang=&quot;EN-US&quot;&gt;M得到&lt;span lang=&quot;EN-US&quot;&gt;V2，一直下去，最终&lt;span lang=&quot;EN-US&quot;&gt;V会收敛，即&lt;span lang=&quot;EN-US&quot;&gt;Vn=MV(n-1)，上面的图示例，不断的迭代，最终&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;V=[0.177,0.319,0.225，&lt;span lang=&quot;EN-US&quot;&gt;0.277]’&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;(算法的证明这里我们就不证明了，有兴趣的朋友可以百度一下&lt;span lang=&quot;EN-US&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;终止点问题&lt;/span&gt;&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;上述上网者的行为是一个马尔科夫过程的实例，要满足收敛性，需要具备一个条件：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图是强连通的，即从任意网页可以到达其他任意网页&lt;span lang=&quot;EN-US&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但是在浩瀚的互联网中，网页肯定是不满足强连通特性的，我们设计模型的时候想要达到强连通特性是很简单的，但是在互联网上有一些网页不指向任何网页，如果按照上面的计算，当浏览到这个没有指向的网页的时候那是不是就无法出去了呢？，导致前面累计得到的转移概率被清零，这样下去，最终的得到的概率分布向量所有元素几乎都为&lt;span lang=&quot;EN-US&quot;&gt;0。假设我们把上面图中&lt;span lang=&quot;EN-US&quot;&gt;B到&lt;span lang=&quot;EN-US&quot;&gt;A的链接丢掉，&lt;span lang=&quot;EN-US&quot;&gt;A变成了一个终止点，得到下面这个图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412232508816-1639483099.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;对应的转移矩阵为：&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;       A      B     C   D&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;A      0      0     0   0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span&gt;B      0.33   0     0   1 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;C      0.33   1     0   0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;D            &lt;span lang=&quot;EN-US&quot;&gt;0.33 &lt;span lang=&quot;EN-US&quot;&gt;     0           1       0    &lt;span lang=&quot;EN-US&quot;&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;连续迭代下去，最终所有元素都为&lt;span lang=&quot;EN-US&quot;&gt;0。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;陷阱问题&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;要是有投机取巧这想到用网页自己链接自己，让我们浏览这中了这个无线循环的陷阱怎么办呢？：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412232521039-274532656.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上网者跑到&lt;span lang=&quot;EN-US&quot;&gt;D网页后，再也不能从&lt;span lang=&quot;EN-US&quot;&gt;D中出来，将最终导致概率分布值全部转移到&lt;span lang=&quot;EN-US&quot;&gt;D上来，这使得其他网页的概率分布值为&lt;span lang=&quot;EN-US&quot;&gt;0，从而整个网页排名就失去了意义。如果按照上面图对应的转移矩阵为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;        A     B     C    D&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;A       0     0.5   0    0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;B      0.33   0     0    0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;C      0.33   0.5   0    0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D      0,33    0    1    1  &lt;span lang=&quot;EN-US&quot;&gt;      &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不断的迭代下去，的结果一定会是&lt;span lang=&quot;EN-US&quot;&gt;[0,0,0,1]的&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;&lt;span&gt;解决终止点问题和陷阱问题&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;其实会出现这两个问题，是因为最开始构建模型的时候我们忽略了一个东西：上网者可以随时跳出他浏览的网页（浏览器上输入网址就行了），而不需要担心，要是浏览的网页没有链接那不就是不能出去了吗？（结果只需要输入网址就可以跳出去），那浏览的网页连接了自己浏览这不就一直在浏览这个了吗？（结果是浏览者发现这是陷阱都在重复浏览一个网页的时候，他可以轻松跳过去，只需要输入网址即可），当然正常情况他也是可以输入网址跳转任何他想去的网页，这个时候我们需要引入一个概念：阻尼系数（简单来说就是点击网页的概率-&lt;/span&gt;&lt;/span&gt;&lt;span&gt;实际上就是用户感到无聊，停止点击，随机跳到新URL的概率&lt;/span&gt;&lt;span&gt;），这里我们取α = 0.8，当然也有很多的觉得0.85是好的，这个概念已经给出，数值看我们自己~（觉得能让你的结果符合预期就ok啦..）。 从而我们得到了更加完善的公式：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412234451602-818542422.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;由于这些是数学上的计算，有了公式是比较容易推出结果来的，所以就不在举例啦~~&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span&gt;如何通过代码具体的实现?&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;   可以把每个网页所构成的复杂的关系模型化成数据结构的逻辑结构图(有向图)，每个网页就是一个结点，当一个网页(网页A)链接着另一个网页(网页B)的时候可以抽象的看出A-&amp;gt;B,即通过出度和入度来描述链接和被链接数，当你通过创建有向图的时候其实就相当于模拟了网页之间的关系(&lt;span&gt;当然浩瀚的互联网中网页数不胜数,我这里只是通过一个小的环境模拟这个算法的实现&lt;/span&gt;),通过PageRank算法加之迭代，使其每个网页的pr(衡量网页质量的参数)值都趋于稳定的时候,由pr值大小排序出来的网页的先后顺序可以相对准确的衡量网页质量。&lt;/p&gt;

&lt;p&gt;  &lt;span&gt;     &lt;strong&gt;我先是通过c语言模型化PageRank的算法 算出每个结点(网页)的pr值。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;需要构建有向图来模型化网页（c语言的结点是手动输入的，因为为了测试方便嘛~）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;92&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdlib.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;math.h&amp;gt;

&lt;span&gt;#define&lt;/span&gt; OK 1
&lt;span&gt;#define&lt;/span&gt; ERROR -1
&lt;span&gt;#define&lt;/span&gt; FALSE 0
&lt;span&gt;#define&lt;/span&gt; TRUE 1
&lt;span&gt;#define&lt;/span&gt; MAXVER 20  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义最大顶点数&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; MAXQSIZE 100
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;#define OVERFLOW -2&lt;/span&gt;
&lt;span&gt;
typedef &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; verType;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;顶点类型&lt;/span&gt;
typedef &lt;span&gt;int&lt;/span&gt;&lt;span&gt; Status;
typedef &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; Boolean;

typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt;
{
    verType verx[MAXVER];
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; arcs[MAXVER][MAXVER];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;邻接矩阵&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; vernum, arcnum;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义最大顶点数 和 弧&lt;/span&gt;
&lt;span&gt;}MGraph;

Boolean visited[MAXVER];    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;顶点开始都没有被访问过&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; locate(MGraph G, verType ch);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找顶点在数组中的下标&lt;/span&gt;
Status CreateDG(MGraph *G,&lt;span&gt;int&lt;/span&gt; v);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建有向图&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; Create_Transfer_matrix(MGraph G, &lt;span&gt;double&lt;/span&gt; ***F);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建转移矩阵&lt;/span&gt;
&lt;span&gt;double&lt;/span&gt;** Mat_mul(&lt;span&gt;double&lt;/span&gt; **M1, &lt;span&gt;int&lt;/span&gt; num);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;矩阵相乘&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; GetNum(MGraph G, &lt;span&gt;int&lt;/span&gt; h, &lt;span&gt;int&lt;/span&gt; l);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到每一行非0项的个数&lt;/span&gt;
&lt;span&gt;double&lt;/span&gt; *Iteration(&lt;span&gt;double&lt;/span&gt; *M1, &lt;span&gt;double&lt;/span&gt; **M2, &lt;span&gt;double&lt;/span&gt; *M, &lt;span&gt;int&lt;/span&gt; num);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;迭代法&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)
{
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; **F =&lt;span&gt; NULL;
    MGraph G;
    CreateDG(&lt;/span&gt;&amp;amp;G, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
    Create_Transfer_matrix(G, &lt;/span&gt;&amp;amp;&lt;span&gt;F);
    Mat_mul(F, G.vernum);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}


&lt;/span&gt;&lt;span&gt;double&lt;/span&gt; *Iteration(&lt;span&gt;double&lt;/span&gt; *M1, &lt;span&gt;double&lt;/span&gt; **M2, &lt;span&gt;double&lt;/span&gt; *M, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num)
{&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;迭代法&lt;/span&gt;
    &lt;span&gt;double&lt;/span&gt; *M3, temp = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, j;
    M3 &lt;/span&gt;= &lt;span&gt;malloc&lt;/span&gt;(num * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;));
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@ = %0.10lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, M[i]);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; num; j++&lt;span&gt;)
        {
            temp &lt;/span&gt;= M1[j] * M2[i][j] +&lt;span&gt; temp;
        }
        M3[i] &lt;/span&gt;= temp +&lt;span&gt; M[i];
        temp &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    putchar(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.10lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, M3[i]);
    }
    putchar(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; M3;
}

&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;** Mat_mul(&lt;span&gt;double&lt;/span&gt; **M1, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i,j;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; *M2, *M3, temp = &lt;span&gt;0&lt;/span&gt;, *&lt;span&gt;M;
    M3 &lt;/span&gt;= &lt;span&gt;malloc&lt;/span&gt;(num *&lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;));
    M2 &lt;/span&gt;= &lt;span&gt;malloc&lt;/span&gt;(num * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;));
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化概率分布矩阵&lt;/span&gt;
&lt;span&gt;    {
        M2[i] &lt;/span&gt;= (&lt;span&gt;1.0&lt;/span&gt; / num * &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; num; j++&lt;span&gt;) 
        {
            temp &lt;/span&gt;= M1[i][j] * M2[j] +&lt;span&gt; temp;
        }
        M3[i] &lt;/span&gt;= temp + M2[i] * &lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;;
        temp &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.10lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, M3[i]);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; num; j++&lt;span&gt;) 
    {
        M2[j] &lt;/span&gt;= M2[j] * &lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;;
    }
    M &lt;/span&gt;= Iteration(M3, M1, M2, num);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用函数实现转移矩阵和概率向量的相乘&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; (fabs(M[&lt;span&gt;0&lt;/span&gt;] - M3[&lt;span&gt;0&lt;/span&gt;]) &amp;gt; &lt;span&gt;0.0000000001&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置迭代结束条件&lt;/span&gt;
&lt;span&gt;    {
        M3 &lt;/span&gt;=&lt;span&gt; M;
        M &lt;/span&gt;=&lt;span&gt; Iteration(M3, M1, M2, num);
        
    }    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
    {
        M[i] &lt;/span&gt;= M[i] * &lt;span&gt;0.8&lt;/span&gt; + &lt;span&gt;0.2&lt;/span&gt; /&lt;span&gt; num;
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; num; i++&lt;span&gt;)
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; - %.10lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, M3[i] - &lt;span&gt;0.0000000001&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; M1;
    
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; Create_Transfer_matrix(MGraph G, &lt;span&gt;double&lt;/span&gt; ***&lt;span&gt;F)
{&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建转移矩阵&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, j;
    (&lt;/span&gt;*F) = &lt;span&gt;malloc&lt;/span&gt;(G.vernum * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt; *&lt;span&gt;));
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G.vernum; i++&lt;span&gt;)
    {
        (&lt;/span&gt;*F)[i] = &lt;span&gt;malloc&lt;/span&gt;(G.vernum * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;double&lt;/span&gt;&lt;span&gt;));
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G.vernum; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; G.vernum; j++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (GetNum(G, G.vernum, i) == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                (&lt;/span&gt;*F)[j][i] = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                (&lt;/span&gt;*F)[j][i] = &lt;span&gt;0.8&lt;/span&gt; * (G.arcs[j][i] / (GetNum(G, G.vernum, i) * &lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;));
        }
    }
    putchar(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n转移矩阵为:\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G.vernum; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; G.vernum; j++&lt;span&gt;)
        {
            printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.10lf &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, (*&lt;span&gt;F)[i][j]);
        }
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; locate(MGraph G, verType ch)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G.vernum &amp;amp;&amp;amp; ch != G.verx[i]; i++&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; i;

}

Status CreateDG(MGraph &lt;/span&gt;*G,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; v)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, j, k;
    verType ch1, ch2;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入有向图的顶点数和弧数,格式如(0 0): &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;G-&amp;gt;vernum, &amp;amp;G-&amp;gt;&lt;span&gt;arcnum);
    fflush(stdin);    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;除缓存&lt;/span&gt;
    printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入顶点符号:\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G-&amp;gt;vernum; i++&lt;span&gt;)
    {
        scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;G-&amp;gt;&lt;span&gt;verx[i]);
        fflush(stdin);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G-&amp;gt;vernum; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; G-&amp;gt;vernum; j++&lt;span&gt;)
        {
            G&lt;/span&gt;-&amp;gt;arcs[i][j] = &lt;span&gt;0&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;赋初值&lt;/span&gt;
&lt;span&gt;        }
    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入有连接的点: 格式(A B)\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; G-&amp;gt;arcnum; i++&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入第%d对值\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%c %c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;ch1, &amp;amp;ch2);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输入顶点符号&lt;/span&gt;
&lt;span&gt;        fflush(stdin);
        k &lt;/span&gt;= locate(*G, ch1);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得顶点下标&lt;/span&gt;
        j = locate(*&lt;span&gt;G, ch2);
        G&lt;/span&gt;-&amp;gt;arcs[j][k] = &lt;span&gt;1&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为邻接矩阵赋值&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; OK;
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; GetNum(MGraph G, &lt;span&gt;int&lt;/span&gt; h, &lt;span&gt;int&lt;/span&gt; l)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到每一列非0的个数&lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i, Num = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; h; i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (G.arcs[i][l] &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            Num&lt;/span&gt;++&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Num;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;虽然实现了&lt;span lang=&quot;EN-US&quot;&gt;PageRank的算法但是仅仅是实现了而且，想要有趣一点的话可以简单模拟一下&lt;span lang=&quot;EN-US&quot;&gt;PageRank的应用背景&lt;span lang=&quot;EN-US&quot;&gt;:我在一个文件夹下面建立的多个&lt;span lang=&quot;EN-US&quot;&gt;HTML的网页&lt;span lang=&quot;EN-US&quot;&gt;(相互之间有链接&lt;span lang=&quot;EN-US&quot;&gt;),通过&lt;span lang=&quot;EN-US&quot;&gt;PageRank算法把每个网页的质量进行了排名，由程序给出排名顺序反馈给用户（通过&lt;span lang=&quot;EN-US&quot;&gt;C#实现的）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;这个是提前创好的简单的&lt;span lang=&quot;EN-US&quot;&gt;HTML网页&lt;span lang=&quot;EN-US&quot;&gt;(我的目的是模拟，所有网页只有一个标签，有的连标签都没有&lt;span lang=&quot;EN-US&quot;&gt;……)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233511465-35794659.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233536759-368198027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233548206-699365079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233609721-788776585.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233619655-992355793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233629306-1214193111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233705604-244491702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大家可以看出&lt;span lang=&quot;EN-US&quot;&gt;a是被链接最多的网页，其他的被链接的先后顺序相信大家也可以看出来，下面开始演示程序&lt;span lang=&quot;EN-US&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;1.首先输入网页所在的文件夹：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233946109-1759799781.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.通过配置计算环境及其其他的相关事宜&lt;span lang=&quot;EN-US&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412233956058-1953208752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.获得网页质量&lt;span lang=&quot;EN-US&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412234018414-1973145470.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过程序的排序已经将质量相当大小反馈给用户&lt;span lang=&quot;EN-US&quot;&gt;,用户可以选择性的浏览网页&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们用&lt;span lang=&quot;EN-US&quot;&gt;C语言的来验证每个网页的&lt;span lang=&quot;EN-US&quot;&gt;pr值是否真如此程序所言&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278470/201804/1278470-20180412234029775-969120786.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;(注意 &lt;span lang=&quot;EN-US&quot;&gt;– 是一个标志，表示最终迭代的结果&lt;span lang=&quot;EN-US&quot;&gt;…) 由上到下依次为&lt;span lang=&quot;EN-US&quot;&gt;A~F的&lt;span lang=&quot;EN-US&quot;&gt;pr值，正如&lt;span lang=&quot;EN-US&quot;&gt;C#的程序排序所言，证明这个是合理的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;------由于&lt;span lang=&quot;EN-US&quot;&gt;c#的代码不是一两张图片就可以解释的清楚的，所有有兴趣的朋友可以一起探讨和分享。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（这个程序是我才学习了&lt;span lang=&quot;EN-US&quot;&gt;C#写的，如果有什么不足或者错误之处请多多包涵）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;span&gt;需要源码的朋友可以评论区或者私信我留下你们的邮件，我看到后会尽快发给你们源码滴，大家一起进步一起学习&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 12 Apr 2018 15:48:00 +0000</pubDate>
<dc:creator>FlashOliver</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Oliva/p/8811314.html</dc:identifier>
</item>
<item>
<title>史上最全TensorFlow学习资源汇总 - aibbt_com</title>
<link>http://www.cnblogs.com/aibbtcom/p/8811203.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aibbtcom/p/8811203.html</guid>
<description>&lt;p data-mpa-powered-by=&quot;yiban.io&quot;&gt;&lt;img src=&quot;http://img.aibbt.com/2018/04/8f801-20180412230651-41d41.jpeg&quot; alt=&quot;史上最全TensorFlow学习资源汇总&quot; width=&quot;100%&quot; data-backh=&quot;327&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5857558139534884&quot; data-s=&quot;300,640&quot; data-data-original=&quot;https://mmbiz.qpic.cn/mmbiz_png/7PuqRWWU6zN7pQS0JDPl2ChCibESOqYQFOLQSfDPWptawEwXfia7z8icgGmL4uoWYyrjdPy3sEfyicjbm2qs6WyvtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;688&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;来源 | 悦动智能（公众号ID：aibbtcom）&lt;/p&gt;
&lt;p&gt;本篇文章将为大家总结TensorFlow纯干货学习资源，非常适合新手学习，&lt;a title=&quot;查看与 建议 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E5%BB%BA%E8%AE%AE/&quot; target=&quot;_blank&quot;&gt;建议&lt;/a&gt;大家收藏。&lt;/p&gt;
&lt;h2 data-sgtrans-text=&quot;1-5&quot;&gt;&lt;strong&gt;▌&lt;/strong&gt;&lt;strong&gt;一 、TensorFlow教程资源&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1)适合初学者的TensorFlow教程和代码示例：&lt;/p&gt;
&lt;p&gt;https://github.com/aymericdamien/TensorFlow-Examples&lt;/p&gt;
&lt;p&gt;该教程不光提供了一些经典的&lt;a title=&quot;查看与 数据集 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E6%95%B0%E6%8D%AE%E9%9B%86/&quot; target=&quot;_blank&quot;&gt;数据集&lt;/a&gt;，更是从实现最简单的“Hello World”开始，到&lt;a title=&quot;查看与 机器学习 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/&quot; target=&quot;_blank&quot;&gt;机器学习&lt;/a&gt;的经典&lt;a title=&quot;查看与 算法 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E7%AE%97%E6%B3%95/&quot; target=&quot;_blank&quot;&gt;算法&lt;/a&gt;，再到神经网络的常用模型，一步步带你从入门到精通，是初学者学习TensorFlow的最佳教程。&lt;/p&gt;
&lt;p&gt;2)从TensorFlow基础知识到有趣的项目应用:&lt;/p&gt;
&lt;p&gt;https://github.com/pkmital/&lt;a title=&quot;查看与 tensorflow 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/tensorflow/&quot; target=&quot;_blank&quot;&gt;tensorflow&lt;/a&gt;_tutorials&lt;/p&gt;
&lt;p&gt;同样是适合新手的教程，从安装到项目实战，教你搭建一个属于自己的神经网络。&lt;/p&gt;
&lt;p&gt;3)使用Jupyter Notebook运行的TensorFlow教程：&lt;/p&gt;
&lt;p&gt;https://github.com/sjchoi86/Tensorflow-101&lt;/p&gt;
&lt;p&gt;4)TensorFlow中文&lt;a title=&quot;查看与 社区 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E7%A4%BE%E5%8C%BA/&quot; target=&quot;_blank&quot;&gt;社区&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;http://www.aibbt.com/a/&lt;a title=&quot;查看与 tensorflow 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/tensorflow/&quot; target=&quot;_blank&quot;&gt;tensorflow&lt;/a&gt;/&lt;/p&gt;
&lt;p&gt;本教程是基于Jupyter Notebook开发环境的TensorFlow教程，Jupyter Notebook是一款非常好用的交互式开发工具，不仅支持40多种编程语言，还可以实时运行代码、&lt;a title=&quot;查看与 共享 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E5%85%B1%E4%BA%AB/&quot; target=&quot;_blank&quot;&gt;共享&lt;/a&gt;文档、数据可视化、支持markdown等，适用于机器学习、统计建模数据处理、特征提取等多个领域。&lt;/p&gt;
&lt;p&gt;4)构建您的第一款TensorFlow &lt;a title=&quot;查看与 Android 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/android/&quot; target=&quot;_blank&quot;&gt;Android&lt;/a&gt;应用程序：&lt;/p&gt;
&lt;p&gt;https://omid.al/posts/2017-02-20-Tutorial-Build-Your-First-Tensorflow-Android-App.html&lt;/p&gt;
&lt;p&gt;本教程可帮助您从零开始将张量流模型引入到Android应用程序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.aibbt.com/2018/04/6f20e-20180412230652-c5aca.png&quot; alt=&quot;史上最全TensorFlow学习资源汇总&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.1954545454545455&quot; data-s=&quot;300,640&quot; data-data-original=&quot;https://mmbiz.qpic.cn/mmbiz_png/7PuqRWWU6zN7pQS0JDPl2ChCibESOqYQFO4sbGXPo13VviciboMjCwGDHeYn7pthNgwxRzAxOcfa7xKyh8ubAWmAw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;220&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5)TensorFlow代码练习：&lt;/p&gt;
&lt;p&gt;https://github.com/terryum/TensorFlow_Exercises&lt;/p&gt;
&lt;p&gt;一个从易到难的TensorFlow代码练习手册。非常适合学习TensorFlow的小伙伴。&lt;/p&gt;
&lt;p&gt;接下来，再给大家推荐一些TensorFlow不错的视频教程：&lt;/p&gt;
&lt;h2 data-sgtrans-text=&quot;1-5&quot;&gt;&lt;strong&gt;▌&lt;/strong&gt;&lt;strong&gt;二、TensorFlow视频资源&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1)TF Girls 修炼指南：&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watchv=TrWqRMJZU8A&amp;amp;list=PLwY2GJhAPWRcZxxVFpNhhfivuW0kX15yG&amp;amp;index=2&lt;/p&gt;
&lt;p&gt;一个TensorFlow从零开始的公开视频课程，课程偏基础、入门，但知识点讲的非常详细。&lt;/p&gt;
&lt;p&gt;2)炼数成金TensorFlow公开课：&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watchv=eAtGqz8ytOI&amp;amp;list=PLjSwXXbVlK6IHzhLOMpwHHLjYmINRstrk&lt;/p&gt;
&lt;p&gt;非常不错的课程，推荐给大家。&lt;/p&gt;
&lt;p&gt;3)当然还有台湾国立大学李宏毅教程&lt;a title=&quot;查看与 深度学习 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/&quot; target=&quot;_blank&quot;&gt;深度学习&lt;/a&gt;的课程也值得推荐给大家：&lt;/p&gt;
&lt;p&gt;https://www.bilibili.com/video/av9770302/&lt;/p&gt;
&lt;p&gt;4)英文不错的小伙伴，也为大家推荐一些国外大牛的英文课程：&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=vq2nnJ4g6N0；&lt;/p&gt;
&lt;p&gt;http://bit.ly/1OX8s8Y；&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=GZB&lt;a title=&quot;查看与 IP 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/ip/&quot; target=&quot;_blank&quot;&gt;IP&lt;/a&gt;wdGtkk&amp;amp;t=125s&lt;/p&gt;
&lt;p&gt;5)介绍了这么多课程，怎么能少了&lt;a title=&quot;查看与 斯坦福大学 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6/&quot; target=&quot;_blank&quot;&gt;斯坦福大学&lt;/a&gt;TensorFlow系列的课程！！！&lt;/p&gt;
&lt;p&gt;话不多说，直接上链接：&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=g-EvyKpZjmQ&amp;amp;index=1&amp;amp;list=PLIDllPt3EQZoS8gCP3cw273Cq9puuPLTg&lt;/p&gt;
&lt;p&gt;课程主页：&lt;/p&gt;
&lt;p&gt;http://web.stanford.edu/class/cs20si/index.html&lt;/p&gt;
&lt;p&gt;课程所有的ppt和笔记notes下载地址：&lt;/p&gt;
&lt;p&gt;https://pan.baidu.com/s/1o8uOQpW&lt;/p&gt;
&lt;p&gt;课程相关实战的github地址：&lt;/p&gt;
&lt;p&gt;chiphuyen/tf-stanford-tutorials&lt;/p&gt;
&lt;p&gt;6)最后，怎么能忘了&lt;a title=&quot;查看与 谷歌 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E8%B0%B7%E6%AD%8C/&quot; target=&quot;_blank&quot;&gt;谷歌&lt;/a&gt;爸爸发布在TensorFlow官网上的视频教程，针对TensorFlow初级学习的小伙伴还是非常不错的一套课程，有助于大家快速入门：&lt;/p&gt;
&lt;p&gt;https://developers.google.cn/machine-learning/crash-course/&lt;/p&gt;
&lt;p&gt;好了，通过上边的资源文档和视频教程详细大家对TensorFlow已经有了扎实的基础，接下来是不是应该做一些逼格比较高的实战项目提升一下自己呢？所以接下来为大家推荐一些项目实战资源。&lt;/p&gt;
&lt;h2 data-sgtrans-text=&quot;1-5&quot;&gt;&lt;strong&gt;▌&lt;/strong&gt;&lt;strong&gt;三、TensorFlow项目资源&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;1)一个实现实现Alex Graves论文的随机手写生成的案例：&lt;/p&gt;
&lt;p&gt;https://github.com/hardmaru/write-rnn-tensorflow&lt;/p&gt;
&lt;p&gt;2)基于TensorFlow的生成对抗文本到图像合成：&lt;/p&gt;
&lt;p&gt;https://github.com/zsdonghao/text-to-image&lt;/p&gt;
&lt;p&gt;如下图所示，该项目是基于TensorFlow的DC&lt;a title=&quot;查看与 GAN 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/gan/&quot; target=&quot;_blank&quot;&gt;GAN&lt;/a&gt;模型，教大家一步步从对抗生成文本到图像合成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.aibbt.com/2018/04/d9c75-20180412230652-3d028.jpeg&quot; alt=&quot;史上最全TensorFlow学习资源汇总&quot; width=&quot;100%&quot; data-backh=&quot;145&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.2592997811816193&quot; data-s=&quot;300,640&quot; data-data-original=&quot;https://mmbiz.qpic.cn/mmbiz_png/7PuqRWWU6zN7pQS0JDPl2ChCibESOqYQFFPZdBMrRBdRFkneC8gSAe4d4jLJeX09niaycRSXjBaQS1M7pnyYqOnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;914&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3)基于注意力的图像字幕生成器：&lt;/p&gt;
&lt;p&gt;https://github.com/yunjey/show-attend-and-tell&lt;/p&gt;
&lt;p&gt;该模型引入了基于注意力的图像标题生成器。可以将其注意力转移到图像的相关部分，同时生成每个单词。&lt;/p&gt;
&lt;p&gt;4)神经网络着色灰度图像：&lt;/p&gt;
&lt;p&gt;https://github.com/pavelgonchar/colornet&lt;/p&gt;
&lt;p&gt;一个非常有趣且应用场景非常广的一个项目，使用神经网络着色灰度图像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.aibbt.com/2018/04/61a12-20180412230652-81c44.jpeg&quot; alt=&quot;史上最全TensorFlow学习资源汇总&quot; width=&quot;100%&quot; data-backh=&quot;379&quot; data-backw=&quot;558&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6790633608815427&quot; data-s=&quot;300,640&quot; data-data-original=&quot;https://mmbiz.qpic.cn/mmbiz_png/7PuqRWWU6zN7pQS0JDPl2ChCibESOqYQFm0zxbV6nw8wFY84wRUUYPJhy3j3ibAxFsAjDen8ErMYUH6iawsHibj5fw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;726&quot; data-fail=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;5)基于&lt;a title=&quot;查看与 Facebook 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/facebook/&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;中FastText的简单嵌入式文本分类器：&lt;/p&gt;
&lt;p&gt;https://github.com/apcode/tensorflow_fasttext&lt;/p&gt;
&lt;p&gt;该项目是源于Facebook中的FastText的想法，并在TensorFlow中实施。FastText是一款快速的文本分类器，提供简单而高效的文本分类和表征学习的方法。&lt;/p&gt;
&lt;p&gt;6)用TensorFlow实现“基于句子分类的&lt;a title=&quot;查看与 卷积神经网络 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/&quot; target=&quot;_blank&quot;&gt;卷积神经网络&lt;/a&gt;”：&lt;/p&gt;
&lt;p&gt;https://github.com/dennybritz/cnn-text-classification-tf&lt;/p&gt;
&lt;p&gt;7)使用OpenStreetMap功能和&lt;a title=&quot;查看与 卫星 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E5%8D%AB%E6%98%9F/&quot; target=&quot;_blank&quot;&gt;卫星&lt;/a&gt;图像训练TensorFlow神经网络：&lt;/p&gt;
&lt;p&gt;https://github.com/jtoy/awesome-tensorflow&lt;/p&gt;
&lt;p&gt;该项目是通过使用OpenStreetMap（OSM）数据训练神经网络，进而对卫星图像中的特征进行分类。&lt;/p&gt;
&lt;p&gt;8)用Tenflow实现YOLO：“实时对象检测”，并支持实时在&lt;a title=&quot;查看与 移动设备 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87/&quot; target=&quot;_blank&quot;&gt;移动设备&lt;/a&gt;上运行的一个小项目https://github.com/thtrieu/darkflow，&lt;a title=&quot;查看与 计算机视觉 相关的文章&quot; href=&quot;http://www.aibbt.com/a/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/&quot; target=&quot;_blank&quot;&gt;计算机视觉&lt;/a&gt;领域研究者的最佳福利。&lt;/p&gt;
</description>
<pubDate>Thu, 12 Apr 2018 15:24:00 +0000</pubDate>
<dc:creator>aibbt_com</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aibbtcom/p/8811203.html</dc:identifier>
</item>
<item>
<title>ConcurrentHashMap源码解析 - 浪人~</title>
<link>http://www.cnblogs.com/liqiangchn/p/8811095.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liqiangchn/p/8811095.html</guid>
<description>&lt;h3 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;一、ConcurrentHashMap源码注解&lt;/span&gt;&lt;/h3&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;span&gt;个人站点：&lt;a href=&quot;http://www.mycookies.cn/&quot; target=&quot;_blank&quot;&gt;www.mycookies.cn​&lt;/a&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**
 * A hash table supporting full concurrency of retrievals and
 * adjustable expected concurrency for updates. This class obeys the
 * same functional specification as {@link java.util.Hashtable}, and
 * includes versions of methods corresponding to each method of
 * &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hashtable&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;. However, even though all operations are
 * thread-safe, retrieval operations do &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;not&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; entail locking,
 * and there is &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;not&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; any support for locking the entire table
 * in a way that prevents all access.  This class is fully
 * interoperable with &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Hashtable&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; in programs that rely on its
 * thread safety but not on its synchronization details.
 *
 * &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; Retrieval operations (including &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;get&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;) generally do not
 * block, so may overlap with update operations (including
 * &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;put&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; and &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;remove&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;). Retrievals reflect the results
 * of the most recently &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;completed&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; update operations holding
 * upon their onset.  For aggregate operations such as &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;putAll&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
 * and &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;clear&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;, concurrent retrievals may reflect insertion or
 * removal of only some entries.  Similarly, Iterators and
 * Enumerations return elements reflecting the state of the hash table
 * at some point at or since the creation of the iterator/enumeration.
 * They do &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;not&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; throw {@link ConcurrentModificationException}.
 * However, iterators are designed to be used by only one thread at a time.
 *
 * &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; The allowed concurrency among update operations is guided by
 * the optional &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;concurrencyLevel&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; constructor argument
 * (default &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;16&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;), which is used as a hint for internal sizing.  The
 * table is internally partitioned to try to permit the indicated
 * number of concurrent updates without contention. Because placement
 * in hash tables is essentially random, the actual concurrency will
 * vary.  Ideally, you should choose a value to accommodate as many
 * threads as will ever concurrently modify the table. Using a
 * significantly higher value than you need can waste space and time,
 * and a significantly lower value can lead to thread contention. But
 * overestimates and underestimates within an order of magnitude do
 * not usually have much noticeable impact. A value of one is
 * appropriate when it is known that only one thread will modify and
 * all others will only read. Also, resizing this or any other kind of
 * hash table is a relatively slow operation, so, when possible, it is
 * a good idea to provide estimates of expected table sizes in
 * constructors.
 */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;一个哈希表支持完全并发的检索和可更新的预期并发性。这个类服从与{@link java.util.Hashtable}相同的功能规范  包括对应于每种方法的版本  的HashTable的。但是，即使所有的操作都是 线程安全的检索操作不需要加锁，  并且没有任何对锁定整个表的支持， 阻止所有访问的方式。这这个类在依赖线程安全性但不同步细节，在程序中完全与Hashtable 互操作。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;  检索操作（包括get ）通常不会阻塞，因此可能会与更新操作并发  (添加 和删除）。检索反映结果&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;  是最近完成更新操作持有在他们并发访问时时。对于像&lt;span class=&quot;md-tag&quot;&gt;&amp;lt;tt&amp;gt; &lt;span&gt;putAll &lt;span class=&quot;md-tag&quot;&gt;&amp;lt;/ tt&amp;gt;&lt;span&gt;这样的集合操作  和&lt;span class=&quot;md-tag&quot;&gt;&amp;lt;tt&amp;gt;&lt;span&gt;清除&lt;span class=&quot;md-tag&quot;&gt;&amp;lt;/ tt&amp;gt;&lt;span&gt;，并发检索可能反映插入或  只删除一些条目。同样，迭代器和  枚举返回反映散列表状态的元素&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;  在创建迭代器/枚举时或之后的某个时间点。  它们不会&lt;span class=&quot;md-tag&quot;&gt;&amp;lt;em&amp;gt;&lt;span&gt;抛出ConcurrentModificationException。  但是，迭代器被设计为一次只能由一个线程使用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;更新操作中允许的并发性由指导 可选的concurrencyLevel构造函数参数（默认16 ），用作内部大小调整的提示。该  表内部分区以尝试允许指示 没有争用的并发更新数量。因为安置 在散列表中基本上是随机的，实际的并发会 变化。理想情况下，您应该选择一个值来容纳尽可能多的值线程将永远同时修改表。用一个  明显高于你需要的价值会浪费空间和时间  而显着较低的值可能会导致线程争用。但  在一个数量级内过高估计和低估  通常不会有太明显的影响。值为1  当知道只有一个线程会修改时适用  所有其他人只会阅读。此外，调整这个或任何其他类型的  散列表是一个相对较慢的操作，所以，如果可能的话，在构造函数中提供预期表格大小的估计值的一个好主意。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span class=&quot;md-image md-img-loaded&quot; data-src=&quot;http://p34qzbztu.bkt.clouddn.com/201804010914_649.jpg?imageView1/JannLee/md/01&quot;&gt;&lt;img src=&quot;http://p34qzbztu.bkt.clouddn.com/201804010914_649.jpg?imageView1/JannLee/md/01&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;二、源码剖析&lt;/span&gt;&lt;/h3&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;重要的类&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;ConcurrentHashMap的内部类HashEntry&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用来存储键值对，与hashtable中不同的是 value设置为volatile&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash;
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt;&lt;span&gt; K key;
    &lt;/span&gt;&lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; V value;
    &lt;/span&gt;&lt;span&gt;volatile&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt;&lt;span&gt; next;
​
    HashEntry(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hash, K key, V value, HashEntry&amp;lt;K,V&amp;gt;&lt;span&gt; next) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.hash =&lt;span&gt; hash;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; key;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.next =&lt;span&gt; next;
    }
​
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Sets next field with volatile write semantics.  (See above
     * about use of putOrderedObject.)
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setNext(HashEntry&amp;lt;K,V&amp;gt;&lt;span&gt; n) {
        UNSAFE.putOrderedObject(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, nextOffset, n);
    }
​
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Unsafe mechanics&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; sun.misc.Unsafe UNSAFE;
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; nextOffset;
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            UNSAFE &lt;/span&gt;=&lt;span&gt; sun.misc.Unsafe.getUnsafe();
            Class k &lt;/span&gt;= HashEntry.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;;
            nextOffset &lt;/span&gt;=&lt;span&gt; UNSAFE.objectFieldOffset
                (k.getDeclaredField(&lt;/span&gt;&quot;next&quot;&lt;span&gt;));
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Error(e);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;ConcurrentHashMap重要的方法---put&lt;/span&gt;&lt;/h3&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;77&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; V put(K key, V value) {
    Segment&lt;/span&gt;&amp;lt;K,V&amp;gt;&lt;span&gt; s;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value == &lt;span&gt;null&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;value不能为null&lt;/span&gt;
        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; hash = hash(key);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一次对key进行hash运算 &lt;/span&gt;
  &lt;span&gt;int&lt;/span&gt; j = (hash &amp;gt;&amp;gt;&amp;gt; segmentShift) &amp;amp; segmentMask;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;映射到hash表中的某个segment&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; ((s = (Segment&amp;lt;K,V&amp;gt;)UNSAFE.getObject          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; nonvolatile; recheck&lt;/span&gt;
         (segments, (j &amp;lt;&amp;lt; SSHIFT) + SBASE)) == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  in ensureSegment&lt;/span&gt;
        s = ensureSegment(j); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回给定索引的Segment，创建它并在Segment表中（通过CAS）记录（如果尚不存在）。&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; s.put(key, hash, value, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
}

 &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Segment&amp;lt;K,V&amp;gt; ensureSegment(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; k) {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Segment&amp;lt;K,V&amp;gt;[] ss = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.segments;
        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; u = (k &amp;lt;&amp;lt; SSHIFT) + SBASE; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; raw offset&lt;/span&gt;
        Segment&amp;lt;K,V&amp;gt;&lt;span&gt; seg;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果当前索引对应segment不存在&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; ((seg = (Segment&amp;lt;K,V&amp;gt;)UNSAFE.getObjectVolatile(ss, u)) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            Segment&lt;/span&gt;&amp;lt;K,V&amp;gt; proto = ss[0]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; use segment 0 as prototype&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; cap =&lt;span&gt; proto.table.length;
            &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; lf =&lt;span&gt; proto.loadFactor;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; threshold = (&lt;span&gt;int&lt;/span&gt;)(cap *&lt;span&gt; lf);
            HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt;[] tab = (HashEntry&amp;lt;K,V&amp;gt;[])&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HashEntry[cap];
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((seg = (Segment&amp;lt;K,V&amp;gt;&lt;span&gt;)UNSAFE.getObjectVolatile(ss, u))
                &lt;/span&gt;== &lt;span&gt;null&lt;/span&gt;) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; recheck
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Segment&lt;/span&gt;
                Segment&amp;lt;K,V&amp;gt; s = &lt;span&gt;new&lt;/span&gt; Segment&amp;lt;K,V&amp;gt;&lt;span&gt;(lf, threshold, tab);
                &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; ((seg = (Segment&amp;lt;K,V&amp;gt;&lt;span&gt;)UNSAFE.getObjectVolatile(ss, u))
                       &lt;/span&gt;== &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (UNSAFE.compareAndSwapObject(ss, u, &lt;span&gt;null&lt;/span&gt;, seg =&lt;span&gt; s))
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; seg;
    }

    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; V put(K key, &lt;span&gt;int&lt;/span&gt; hash, V value, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; onlyIfAbsent) {
        HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; node = tryLock() ? &lt;span&gt;null&lt;/span&gt;&lt;span&gt; :
            scanAndLockForPut(key, hash, value);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;尝试获取锁，当前线程独家占有，node赋值为null，否则一直获取锁，直到获取到锁然后创建一个键值对并返回&lt;/span&gt;
&lt;span&gt;        V oldValue;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt;[] tab =&lt;span&gt; table;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index = (tab.length - 1) &amp;amp;&lt;span&gt; hash;
            HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; first =&lt;span&gt; entryAt(tab, index);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (HashEntry&amp;lt;K,V&amp;gt; e =&lt;span&gt; first;;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    K k;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ((k = e.key) == key ||&lt;span&gt;
                        (e.hash &lt;/span&gt;== hash &amp;amp;&amp;amp;&lt;span&gt; key.equals(k))) {
                        oldValue &lt;/span&gt;=&lt;span&gt; e.value;
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;onlyIfAbsent) {
                            e.value &lt;/span&gt;=&lt;span&gt; value;
                            &lt;/span&gt;++&lt;span&gt;modCount;
                        }
                        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    }
                    e &lt;/span&gt;=&lt;span&gt; e.next;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                        node.setNext(first);
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        node &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt;&lt;span&gt;(hash, key, value, first);
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c = count + 1&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (c &amp;gt; threshold &amp;amp;&amp;amp; tab.length &amp;lt;&lt;span&gt; MAXIMUM_CAPACITY)
                        rehash(node);
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                        setEntryAt(tab, index, node);
                    &lt;/span&gt;++&lt;span&gt;modCount;
                    count &lt;/span&gt;=&lt;span&gt; c;
                    oldValue &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            unlock();&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放锁&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; oldValue;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;如果当前线程是该锁的持有者，则保持计数递减。 如果保持计数现在为零，则锁定被释放。 如果当前线程不是该锁的持有者，则抛出{@link IllegalMonitorStateException}&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Attempts to release this lock.
 *
 * &amp;lt;p&amp;gt;If the current thread is the holder of this lock then the hold
 * count is decremented.  If the hold count is now zero then the lock
 * is released.  If the current thread is not the holder of this
 * lock then {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; IllegalMonitorStateException} is thrown.
 *
 * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; IllegalMonitorStateException if the current thread does not
 *         hold this lock
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; unlock() {
    sync.release(&lt;/span&gt;1&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;扫描包含给定key的节点 ，同时尝试获取锁，如果找不到则创建并返回一个。返回后，保证持有当前锁。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;br/&gt;&lt;span&gt;&lt;span&gt;​&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
* Scans for a node containing given key while trying to
* acquire lock, creating and returning one if not found. Upon
* return, guarantees that lock is held. UNlike in most
* methods, calls to method equals are not screened: Since
* traversal speed doesn't matter, we might as well help warm
* up the associated code and accesses as well.
*
* &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; a new node if key not found, else null
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;private&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt; scanAndLockForPut(K key, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hash, V value) {      
       HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; first = entryForHash(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, hash);
        HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; e =&lt;span&gt; first;
        HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; node = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; retries = -1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; negative while locating node&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;tryLock()) {
            HashEntry&lt;/span&gt;&amp;lt;K,V&amp;gt; f; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; to recheck first below&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (retries &amp;lt; 0&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (e == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (node == &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; speculatively create node&lt;/span&gt;
                        node = &lt;span&gt;new&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt;(hash, key, value, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
                    retries &lt;/span&gt;= 0&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (key.equals(e.key))
                    retries &lt;/span&gt;= 0&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    e &lt;/span&gt;=&lt;span&gt; e.next;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (++retries &amp;gt;&lt;span&gt; MAX_SCAN_RETRIES) {
                lock();
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ((retries &amp;amp; 1) == 0 &amp;amp;&amp;amp;&lt;span&gt;
                     (f &lt;/span&gt;= entryForHash(&lt;span&gt;this&lt;/span&gt;, hash)) !=&lt;span&gt; first) {
                e &lt;/span&gt;= first = f; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; re-traverse if entry changed&lt;/span&gt;
                retries = -1&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;只有在当时没有被另一个线程占用的情况下才会获取该锁&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;如果该锁没有被另一个线程和另一个线程占用，则获取该锁   立即返回值为true，将锁定保持计数设置为1。 即使此锁已设置为使用公平的顺序策略，对 tryLock()调用将立即获得该锁（如果该锁可用），无论其他线程当前是否正在等待锁。 这种强制 行为在某些情况下是有用的，即使它违背了公平。 如果您想遵守此锁的公平性设置，请使用 {@link #tryLock（long，TimeUnit）tryLock（0，TimeUnit.SECONDS）} 他们几乎相同（它也检测到中断）。 如果当前线程已经拥有这个锁，那么保持计数增加1，方法返回{true}。 如果该锁由另一个线程保存，则此方法将立即以* {false}的值返回*。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; tryLock() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; sync.nonfairTryAcquire(1&lt;span&gt;);
}

    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; nonfairTryAcquire(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; acquires) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前线程&lt;/span&gt;
        &lt;span&gt;final&lt;/span&gt; Thread current =&lt;span&gt; Thread.currentThread();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c = getState();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回statue (state是voltile修饰的)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (c == 0) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果state==0，即当前锁空闲&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (compareAndSetState(0&lt;span&gt;, acquires)) {
                setExclusiveOwnerThread(current);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置当前线程拥有锁&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (current ==&lt;span&gt; getExclusiveOwnerThread()) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; nextc = c +&lt;span&gt; acquires;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (nextc &amp;lt; 0) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; overflow&lt;/span&gt;
                &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error(&quot;Maximum lock count exceeded&quot;&lt;span&gt;);
            setState(nextc);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

&lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setExclusiveOwnerThread(Thread t) {
    exclusiveOwnerThread &lt;/span&gt;=&lt;span&gt; t;
}

​
 &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Thread getExclusiveOwnerThread() {
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; exclusiveOwnerThread;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;Size方法&lt;/span&gt;&lt;/h5&gt;
&lt;pre class=&quot;md-fences md-end-block&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Try a few times to get accurate count. On failure due to
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; continuous async changes in table, resort to locking.&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; Segment&amp;lt;K,V&amp;gt;[] segments = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.segments;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; size;
    &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; overflow; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; true if size overflows 32 bits&lt;/span&gt;
    &lt;span&gt;long&lt;/span&gt; sum;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; sum of modCounts&lt;/span&gt;
    &lt;span&gt;long&lt;/span&gt; last = 0L;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; previous sum&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; retries = -1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; first iteration isn't retry&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (;;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (retries++ ==&lt;span&gt; RETRIES_BEFORE_LOCK) {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; segments.length; ++&lt;span&gt;j)
                    ensureSegment(j).lock(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取所有segment的锁&lt;/span&gt;
&lt;span&gt;            }
            sum &lt;/span&gt;= 0L&lt;span&gt;;
            size &lt;/span&gt;= 0&lt;span&gt;;
            overflow &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; segments.length; ++&lt;span&gt;j) {
                Segment&lt;/span&gt;&amp;lt;K,V&amp;gt; seg =&lt;span&gt; segmentAt(segments, j);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (seg != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    sum &lt;/span&gt;+=&lt;span&gt; seg.modCount;
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; c =&lt;span&gt; seg.count;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (c &amp;lt; 0 || (size += c) &amp;lt; 0&lt;span&gt;)
                        overflow &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (sum ==&lt;span&gt; last)
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            last &lt;/span&gt;=&lt;span&gt; sum;
        }
    } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (retries &amp;gt;&lt;span&gt; RETRIES_BEFORE_LOCK) {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; segments.length; ++j)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放所有segment的锁&lt;/span&gt;
&lt;span&gt;                segmentAt(segments, j).unlock();
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; overflow ?&lt;span&gt; Integer.MAX_VALUE : size;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;span&gt;：ConcurrentHashMap是线程安全的哈希表，它是通过“分段”来实现的。ConcurrentHashMap中包括了“Segment(分段)数组”，每个Segment就是一个哈希表，而且也是可重入的互斥锁。第一，Segment是哈希表表现在，Segment包含了“HashEntry数组”，而“HashEntry数组”中的每一个HashEntry元素是一个单向链表。即Segment是通过链式哈希表。第二，Segment是可重入的互斥锁表现在，Segment继承于ReentrantLock，而ReentrantLock就是可重入的互斥锁。&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;对于ConcurrentHashMap的添加，删除操作，在操作开始前，线程都会获取Segment的互斥锁；操作完毕之后，才会释放。而对于读取操作，它是通过volatile去实现的，HashEntry数组是volatile类型的，而volatile能保证“即对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写入”，即我们总能读到其它线程写入HashEntry之后的值。 以上这些方式，就是ConcurrentHashMap线程安全的实现原理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;通过分段方式减小的锁的粒度，如果整个map使用一个锁，则就不能并行地操作键值对。而ConcurrentHashMap将HashMap分解成段，每个段有一把锁，锁的粒度就少了。但是与此同时，锁的数量增多了。当需要访问ConcurrentHashMap的全局属性时（比如ConcurrentHashMap的size()方法），需要 获得 所有的Segment的锁。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 个人站点：www.mycookies.cn&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;github:&lt;a href=&quot;https://github.com/liqianggh&quot; target=&quot;_blank&quot;&gt;https://github.com/liqianggh&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 12 Apr 2018 14:59:00 +0000</pubDate>
<dc:creator>浪人~</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liqiangchn/p/8811095.html</dc:identifier>
</item>
</channel>
</rss>