<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>HTML的语法 - pylzp</title>
<link>http://www.cnblogs.com/lzp1103/p/7775270.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lzp1103/p/7775270.html</guid>
<description>&lt;p&gt;1，什么是HTML标记语言，他是表示网页信息的符号标记语言，特点包括：&lt;/p&gt;
&lt;p&gt;　　a，可以设置文本的格式，比如标题，文号，文本颜色，段落等待&lt;/p&gt;
&lt;p&gt;　　b，可以简历列表&lt;/p&gt;
&lt;p&gt;　　c，可以插入图像和媒体&lt;/p&gt;
&lt;p&gt;　　d，可以建立表格&lt;/p&gt;
&lt;p&gt;　　e，超连接，可以使用鼠标点击超连接来实现页面之间的跳转&lt;/p&gt;

&lt;p&gt;2，HTML的标记和他的属性&lt;/p&gt;
&lt;p&gt;　　a，HTML文档的保存格式：.html  .htm  .xhtml&lt;/p&gt;
&lt;p&gt;　　b，标记和被标记的内容构建出HTML文档，格式：&amp;lt;标记&amp;gt;内容&amp;lt;/标记&amp;gt;&lt;/p&gt;
&lt;p&gt;　　c，标记的属性：就是用来控制我们的内容（图像，文本等的）如何的显示，&lt;/p&gt;
&lt;p&gt;　　　　格式：&amp;lt;标记 属性1=属性值 属性2=属性值 ... ...&amp;gt;内容&amp;lt;/标记&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　例如：&amp;lt;body bgcolor = &quot;red&quot;&amp;gt;内容&amp;lt;/body&amp;gt;&lt;/p&gt;
&lt;p&gt;　　　　　　以上的属性是用来控制我们的网页的背景颜色，bgcolor就是body的属性，他的值是red（红色）&lt;/p&gt;

&lt;p&gt;3，语法不区分字母大小写&lt;/p&gt;
&lt;p&gt;　　&amp;lt;HTML&amp;gt;,&amp;lt;Html&amp;gt;,&amp;lt;html&amp;gt;都是自定义相同的标记，但是在编写的时候尽量使用小写&lt;/p&gt;

&lt;p&gt;4，文档注解&lt;/p&gt;
&lt;p&gt;　　注释一段内容时使用“&amp;lt;!--”开始，以&quot;--&amp;gt;&quot;结束，例如：&amp;lt;!--这是一个测试用例--&amp;gt;&lt;/p&gt;

&lt;p&gt;5，代码格式&lt;/p&gt;
&lt;p&gt;　　空格键和回车键在网页中都不起作用，我们为了让代码清晰易读，可以使用空格和回车进行编排&lt;/p&gt;
&lt;p&gt;　　注意：缩进时严格的规则，以“Tab”键进行缩进&lt;/p&gt;
&lt;p&gt;6，字符实体&lt;/p&gt;
&lt;p&gt;　　a，什么是字符实体？&lt;/p&gt;
&lt;p&gt;　　比如我们想在网页上面显示一个&quot;&amp;lt;&quot;小于符号，但是&quot;&amp;lt;&quot;在HTML中文档标记的开始语言，如果我们直接使用“&amp;lt;”会出错，所以我们就会用一些实体名称来代替&lt;/p&gt;
&lt;p&gt;　　b，常见的符号实体&lt;/p&gt;
&lt;p&gt;　　&lt;img alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;eg：&lt;/p&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;&lt;br/&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;br/&gt;&amp;lt;head&amp;gt;&lt;br/&gt;&amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&lt;br/&gt;&amp;lt;title&amp;gt;第一天&amp;lt;/title&amp;gt;&lt;br/&gt;&amp;lt;/head&amp;gt;&lt;br/&gt;&amp;lt;body bgcolor=&quot;red&quot;&amp;gt;&lt;br/&gt;测试&lt;br/&gt;&amp;lt;!--这是一个测试用例--&amp;gt;&lt;p&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&amp;lt;/html&amp;gt;
&lt;/p&gt;&lt;/pre&gt;

</description>
<pubDate>Thu, 02 Nov 2017 15:49:00 +0000</pubDate>
<dc:creator>pylzp</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lzp1103/p/7775270.html</dc:identifier>
</item>
<item>
<title>【译】Java中的字符串字面量 - 没课割绿地</title>
<link>http://www.cnblogs.com/justcooooode/p/7670256.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/justcooooode/p/7670256.html</guid>
<description>&lt;p&gt;原文地址：&lt;a href=&quot;https://javaranch.com/journal/200409/ScjpTipLine-StringsLiterally.html&quot; target=&quot;_blank&quot;&gt;https://javaranch.com/journal/200409/ScjpTipLine-StringsLiterally.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：&lt;em&gt;Corey McGlone&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;让我们由一个简单的问题开始，&lt;em&gt;什么是字符串字面量？&lt;/em&gt;一个字符串字面量就是两个双引号之间的字符序列，形如&lt;strong&gt;“string”&lt;/strong&gt;、&lt;strong&gt;“literal”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你可能已经在你的程序中使用字符串字面量几百次了，但是你可能还没意识到它在Java中是多么特殊。&lt;/p&gt;
&lt;h3&gt;字符串是不可变的&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;究竟什么使字符串字面量这么特殊？&lt;/em&gt;首先，记住重要的一点是字符串对象是不可变的。&lt;/p&gt;
&lt;p&gt;这就意味着一旦创建，一个字符串对象就不能被改变（还是可以通过反射来改变）。&lt;/p&gt;
&lt;p&gt;不可变？不能被更改？那怎么解释这段代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ImmutableStrings
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args)
    {
        String start &lt;/span&gt;= &quot;Hello&quot;&lt;span&gt;;
        String end &lt;/span&gt;= start.concat(&quot; World!&quot;&lt;span&gt;);
        System.out.println(end);
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Output&lt;/span&gt;
&lt;span&gt;
Hello World&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看这段代码，字符串被改变了吗，还是没有？事实上，这段代码中并没有字符串对象被改变。&lt;/p&gt;
&lt;p&gt;我们首先将&lt;strong&gt;“Hello”&lt;/strong&gt;赋值给&lt;strong&gt;start&lt;/strong&gt;变量，为了实现这步，需要在堆中创建一个对象，并把它的引用存储在&lt;strong&gt;start&lt;/strong&gt;中。接下来，我们在这个对象上调用&lt;em&gt;&lt;strong&gt;concat(String)&lt;/strong&gt;&lt;/em&gt;方法。进行到这里Java耍了一个小把戏，如果我们查看&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/String.html&quot; target=&quot;_blank&quot;&gt;String的API说明&lt;/a&gt;，会发现其中对于&lt;em&gt;concat(String)&lt;/em&gt;方法有如下的描述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1177828/201711/1177828-20171102111114888-612476653.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;em&gt;方法描述：将指定字符串连接在这个字符串的结尾。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如果长度为0，则返回这个字符串对象。&lt;span&gt;&lt;strong&gt;否则就创建一个新的字符串对象&lt;/strong&gt;&lt;/span&gt;，表示这个字符串序列由原字符串对象和参数字符串二者所表示的字符串序列拼接而成。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 你肯定看到了，当你将两个字符串做拼接操作时，实际上并没有改变原对象，而是直接创建了一个包含原始对象的新的对象，并且将另一个字符串拼在了后面。&lt;/p&gt;
&lt;p&gt;我们上面那段代码就是这么执行的，&lt;em&gt;start&lt;/em&gt;变量所引用的字符串对象并没有改变，如果在调用concat方法之后&lt;span&gt;System.out.println(start);&lt;/span&gt; ，会发现&lt;em&gt;start&lt;/em&gt;仍然指向的是“Hello”。&lt;/p&gt;
&lt;p&gt;这时候你可能想到了字符串中的“&lt;strong&gt;+&lt;/strong&gt;”操作符，事实上字符串的“+”操作也是和&lt;em&gt;conca&lt;/em&gt;t做了同样的事情（“+”操作实际上是new了一个StringBuilder对象，然后调用append方法）。&lt;/p&gt;
&lt;h3&gt;字符串的存储——字符串常量池&lt;/h3&gt;
&lt;p&gt;你或许听说过“&lt;strong&gt;字符串常量池&lt;/strong&gt;”这个概念，究竟什么是字符串常量池？有人说是一个字符串对象容器。答案很接近了，但是不完全正确。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;事实上他是一用来保存字符串对象引用的容器。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;即使字符串是不可变的，它仍然和Java中的其他对象一样。&lt;strong&gt;对象都是创建在堆中，字符串也不例外&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以字符串常量池仍然依靠堆，他们存储的只是堆中字符串的引用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;目前还没有解释这个池到底是什么，或者它为何存在。&lt;/p&gt;
&lt;p&gt;好吧，因为字符串对象是不可变的，所以复制多个引用来“分享”这个字符串是安全的。下面来看一个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ImmutableStrings
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args)
    {
        String one &lt;/span&gt;= &quot;someString&quot;&lt;span&gt;;
        String two &lt;/span&gt;= &quot;someString&quot;&lt;span&gt;;
        
        System.out.println(one.equals(two));
        System.out.println(one &lt;/span&gt;==&lt;span&gt; two);
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Output&lt;/span&gt;

&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个例子中，实在没有必要为一个相同的字符串对象创建两个实例。如果字符串像StringBuffer一样是可变的，那么我们会被迫创建两个对象（如果不这样做的话，通过一个引用改变它的值，将会导致其他引用的值也同样改变，从而可能发生错误）。&lt;/p&gt;
&lt;p&gt;但是，我们知道字符串对象是不能被改变的，我们可以安全地通过两个引用&lt;em&gt;one&lt;/em&gt;和&lt;em&gt;two&lt;/em&gt;来使用一个字符串对象。&lt;/p&gt;
&lt;p&gt;这个工作是通过字符串常量池完成的，下面来看一下它是如何完成的：&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;当一个.java文件被编译成.class文件时，和所有其他常量一样，每个字符串字面量都通过一种特殊的方式被记录下来。&lt;/p&gt;
&lt;p&gt;当一个.class文件被加载时（&lt;strong&gt;注意加载发生在初始化之前&lt;/strong&gt;），JVM在.class文件中寻找字符串字面量。&lt;/p&gt;
&lt;p&gt;当找到一个时，JVM会检查是否有相等的字符串在常量池中存放了堆中引用。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;如果找不到，就会在堆中创建一个对象，然后将它的引用存放在池中的一个常量表中。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一旦一个字符串对象的引用在常量池中被创建，这个字符串在程序中的所有字面量引用都会被常量池中已经存在的那个引用代替。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，在上面的例子中字符串常量池中只有一个引用，就是“someString”这个字符串对象的引用。&lt;/p&gt;
&lt;p&gt;局部变量&lt;em&gt;one&lt;/em&gt;和&lt;em&gt;two&lt;/em&gt;都被赋予了同一个字符串对象的引用。可以通过程序的输出来验证。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;equals&lt;/em&gt;方法检查的是两个字符串对象是否包含相同的数据(“someString”)，而“==”操作符作用在对象上比较的是引用是否相同，这意味着只有两个引用指向的是同一个对象才会返回true。&lt;/p&gt;
&lt;p&gt;所以例子中的两个引用是相等的。从输出可以看到，局部变量&lt;em&gt;one&lt;/em&gt;和&lt;em&gt;two&lt;/em&gt;不仅包含相同的数据，而且还指向相同的对象。&lt;/p&gt;
&lt;p&gt;无图无真相，来看一下他们之间的关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1177828/201711/1177828-20171102164759841-1762484593.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意，对于字符串字面量有一点比较特殊。通过“new”关键字构建时一种不同的方式。&lt;/p&gt;
&lt;p&gt;下面举一个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ImmutableStrings
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args)
    {
        String one &lt;/span&gt;= &quot;someString&quot;&lt;span&gt;;
        String two &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(&quot;someString&quot;&lt;span&gt;);
        
        System.out.println(one.equals(two));
        System.out.println(one &lt;/span&gt;==&lt;span&gt; two);
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Output&lt;/span&gt;

&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个例子中，可以看到由于关键字“new”，最后的结果有一点不同。&lt;/p&gt;
&lt;p&gt;此例中，两个字符串字面量仍然被放进了常量池的常量表中，但是当使用“new”时，JVM就会在&lt;span&gt;&lt;strong&gt;运行时&lt;/strong&gt;&lt;/span&gt;创建一个新对象，而不是使用常量表中的引用。&lt;/p&gt;
&lt;p&gt;虽然例子中的两个字符串引用所指向的对象包含相同的数据“someString”，但是这两个对象并不相同。&lt;/p&gt;
&lt;p&gt;这一点可以从输出看出来，&lt;em&gt;equals&lt;/em&gt;方法返回了true，而检查引用是否相等的“==”返回false。&lt;/p&gt;
&lt;p&gt;这表明两个变量指向的是两个不同的字符串对象。&lt;/p&gt;
&lt;p&gt;如果你想看图形化的表示，下面就是。要记住引用到常量池的字符串对象是在类加载的时候创建的，而另一个对象是在运行时，当“new String”语句被执行时。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1177828/201711/1177828-20171102171621451-1202329729.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果你想得到两个引用到相同对象的局部变量，你可以使用String类中的定义的intern()方法。&lt;/p&gt;
&lt;p&gt;调用&lt;em&gt;two.intern()&lt;/em&gt;后，会在字符串常量池中寻找是否有值相等的对象引用。&lt;/p&gt;
&lt;p&gt;如果有的话，就会返回这个引用，然后你可以把它赋给局部变量。&lt;/p&gt;
&lt;p&gt;如果这么做的化，局部变量&lt;em&gt;one&lt;/em&gt;和&lt;em&gt;two&lt;/em&gt;都是同一个对象的引用，并且在字符串常量池中也存有一个引用，就如同第一张图那样。这时，在运行时创建的第二个字符串对象将会被GC回收。&lt;/p&gt;
&lt;h3&gt;垃圾回收&lt;/h3&gt;
&lt;p&gt;什么条件下对象才会被垃圾回收？当一个对象不再有引用指向它时，这个对象就会被回收。&lt;/p&gt;
&lt;p&gt;有人注意到字符串字面量在垃圾回收时有什么特殊的地方吗？&lt;/p&gt;
&lt;p&gt;让我们来看一个例子，然后你就会明白。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ImmutableStrings
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args)
    {
        String one &lt;/span&gt;= &quot;someString&quot;&lt;span&gt;;
        String two &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; String(&quot;someString&quot;&lt;span&gt;);
        
        one &lt;/span&gt;= two = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在主函数结束前，有多少个对象可以被回收？0个？1个？还是2个？&lt;/p&gt;
&lt;p&gt;答案是一个。不像大多数对象，字符串字面量总是有一个来自字符串常量池的引用。&lt;/p&gt;
&lt;p&gt;这就意味着它们会一直有一个引用，所以它们不会被垃圾回收。见下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1177828/201711/1177828-20171102225012295-439954284.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如你所见，局部变量&lt;em&gt;one&lt;/em&gt;和&lt;em&gt;two&lt;/em&gt;没有指向字符串对象，但是仍然有一个字符串常量池的引用。&lt;/p&gt;
&lt;p&gt;所以GC并不会回收这个对象。并且这个对象可以通过之前提到的intern()方法访问。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;对于字符串字面量，下面的几条结论你可以记住。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;相等的字符串字面量将会指向相同的字符串对象（甚至是在不同包的不同类中）。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;总之，字符串字面量不会被垃圾回收。绝对不会。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在运行时创建的字符串和由字符串字面量创建的是两个不同的对象。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于运行时创建的字符串你可以通过&lt;em&gt;intern()&lt;/em&gt;方法来重用字符串字面量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;使用equals()&lt;/em&gt;方法是比较两个字符串是否相等的最好方式。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面的资料也一定要看：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/lang/String.html&quot; target=&quot;_blank&quot;&gt;API Spec for String&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5&quot; target=&quot;_blank&quot;&gt;JLS, §3.10.5 String Literals&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;关于字符串为什么被设计成不可变的可以参考：&lt;a href=&quot;http://www.cnblogs.com/justcooooode/p/7514863.html&quot; target=&quot;_blank&quot;&gt;为什么Java中的String类是不可变的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;字符串的创建和intern方法详解：&lt;a href=&quot;http://www.cnblogs.com/justcooooode/p/7603381.html&quot; target=&quot;_blank&quot;&gt;理解Java字符串常量池与intern方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;翻译如有错误，恳请纠正。&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 15:42:00 +0000</pubDate>
<dc:creator>没课割绿地</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/justcooooode/p/7670256.html</dc:identifier>
</item>
<item>
<title>依赖注入与控制反转 - 社会主义接班人</title>
<link>http://www.cnblogs.com/5ishare/p/7774624.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/5ishare/p/7774624.html</guid>
<description>&lt;p&gt;记得大学开的有一门课是软件工程，而且还是两个学期，可能实践的机会少有的理论可能也只是记住的，比如软件设计的六大原则:单一原则、里氏替换原则、依赖倒置原则、接口隔离原则、迪米特法则、开闭原则，但没真正的理解明白为什么要这样。现在毕业也3年多了，项目也接触了几个，还有一些开源的框架，记得在中软给华为做外包时帮悍马其他组的支援了几天，当时还不知道ABP框架，对IOC也只是听说过，并没有理解。当接触了ABP框架才发现，原来当时做的项目就是采用的ABP框架啊。其实像这些设计原则、还有模式这些，主要还是为了系统的高内聚，低耦合。最近在自学javaweb,学javaweb自然不能少了spring,spring的核心就是IOC和AOP，今天主要来说下IOC——Inversion of Control/控制反转。&lt;/p&gt;
&lt;p&gt;一、依赖注入DI—Dependency Injection&lt;/p&gt;
&lt;p&gt;1.依赖&lt;/p&gt;
&lt;p&gt;在说IOC之前先聊下依赖注入，依赖注入可以分两部分一是依赖二是注入。那什么是依赖?不是我自身的但没有就活不下去,人没了空气、水、阳光，那就活不下去。所以人依赖空气、水、阳光。下面代码定义了一个Person和一个CleanAir的类，Person依赖CleanAir。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_0958025c-4d26-4939-b765-82bf390122d1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0958025c-4d26-4939-b765-82bf390122d1&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0958025c-4d26-4939-b765-82bf390122d1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cyw.Model;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Person(CleanAir air) {
        
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.air =&lt;span&gt; air;
    }
    CleanAir air;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_8d7775e9-e722-460c-aa9c-4cebf4015a78&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8d7775e9-e722-460c-aa9c-4cebf4015a78&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8d7775e9-e722-460c-aa9c-4cebf4015a78&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cyw.Model;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CleanAir {

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 但是有这样一句话世界上唯一不变的就是变化。之前干净的空气不复存在，而Person依赖的不在是CleanAir，而是比CleanAir更有内涵的DirtyAir.如果还是按照上面的方式来，那就需要在增加一个DirtyAir类的同时，还要修改Person,这种强依赖有很大的弊端，一个地方变化引起其他地方也要修改，而且改变的只是Air，但Person也要改变。那怎么样能尽量减少修改的地方呢？于是面向接口的编程出现了。下面是先定义一个接口IAir，类CleanAir实现接口IAir，在Person中不在直接依赖CleanAir，而是依赖接口IAir，这样即使是DirtyAir也只需要修改给Person不同的Air就像了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_6cb6d1b0-5e6b-45c1-b526-0fb75c00d3d6&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6cb6d1b0-5e6b-45c1-b526-0fb75c00d3d6&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6cb6d1b0-5e6b-45c1-b526-0fb75c00d3d6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cyw.Model;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IAir {

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_2d8f45d1-cee7-49ec-b9ba-64e84933dcff&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2d8f45d1-cee7-49ec-b9ba-64e84933dcff&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2d8f45d1-cee7-49ec-b9ba-64e84933dcff&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cyw.Model;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CleanAir &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IAir {

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_2b68e2a1-fdbc-41a9-92a1-87ab647af9a9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2b68e2a1-fdbc-41a9-92a1-87ab647af9a9&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2b68e2a1-fdbc-41a9-92a1-87ab647af9a9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cyw.Model;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Person(IAir air) {
        
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.air =&lt;span&gt; air;
    }
    IAir air;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2.注入&lt;/p&gt;
&lt;p&gt;注入是啥？注入那它之前是没有的，而是塞给它。上面实例化Person的时候我们可以塞给它一个只要实现IAir接口的对象就可以，只是我们这是手动的给，这有点类似代理设计模式，要给代理设置具体对象。&lt;/p&gt;
&lt;p&gt;二、控制反转 IOC——Inversion Of Control&lt;/p&gt;
&lt;p&gt;上面依赖注入分两部分，当然控制反转也可分两部分。一是控制二是反转。&lt;/p&gt;
&lt;p&gt;1.控制&lt;/p&gt;
&lt;p&gt;像上面的不管是直接在Person中生命CleanAir属性还是创建一个接口，都是需要在程序New()一个对象出来,是程序控制Air.而IOC呢，它有专门的容器来管理这些对象，控制着他们的创建及生命周期，只要配置下，不用我们在new了。下次如果有CoolAir(冷空气)，那只需要增加一个类CoolAir并实现IAir接口就行，然后在配置文件中配置一下，这样多省事。&lt;/p&gt;
&lt;p&gt;2.反转&lt;/p&gt;
&lt;p&gt;有反转那就有正转。上面的那种通过new来获取依赖的对象，是对象主动找依赖的对象，而IOC是管理着依赖的对象，然后给对象找它所对应的依赖的对象并注入。获取依赖对象的方式改变了，一个是主动一个是被动的。而Spring就是提供了自动注入依赖的功能。&lt;/p&gt;
&lt;p&gt;三、个人理解&lt;/p&gt;
&lt;p&gt;依赖注入手动注入依赖也算是依赖注入，控制反转呢算是自动注入依赖。手动注入还是需要new来创建对象，还是适应不了以后的变化，控制反转算是更加包容，不需要new创建，只要实现某个接口，IOC会自动注入。如果再往下一步思考，IOC配置的依赖在XML中，Xml中保存的内容都可以理解为字符串，怎么让字符串转换成对象呢，那就需要用到反射。其实这些不管是Java还是C#，思想都是一样的，不管那门语言，只要理解了思想，学习起来也不难，很容易就能上手。&lt;/p&gt;

</description>
<pubDate>Thu, 02 Nov 2017 15:40:00 +0000</pubDate>
<dc:creator>社会主义接班人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/5ishare/p/7774624.html</dc:identifier>
</item>
<item>
<title>使用localstorage来存储页面信息 - 爱喝酸奶的吃货</title>
<link>http://www.cnblogs.com/yingzi1028/p/7774954.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yingzi1028/p/7774954.html</guid>
<description>&lt;p&gt;     今天小颖在跟着慕课网学习vue，不学不知道，一学吓一跳，学了才发现，我之前知道的只是vue的冰山一角，嘻嘻，今天把小颖跟着慕课网学习的demo，给大家分享下，希望对大家有所帮助嘻嘻。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://cn.vuejs.org/v2/guide/installation.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7-CLI&quot; target=&quot;_blank&quot;&gt;vue API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;       &lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/yingzi1028/p/6925387.html&quot;&gt;vue2.0+element+node+webpack搭建的一个简单的后台管理界面&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;npm install --global vue-cli&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/813088/201711/813088-20171102215407341-1876647040.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; vue init webpack vue-project&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/813088/201711/813088-20171102215919170-1699818764.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;然后：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/813088/201711/813088-20171102220652420-489205927.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;cd my-project&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;npm install    如果你配置了淘宝镜像，也可以用cnpm install&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;npm run dev&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们就在浏览器看到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/813088/201711/813088-20171102221548060-486485892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 但我们最终要实现：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/813088/201711/813088-20171102222055591-1047307156.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;1.将App.vue修改为：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;='vue-demo'&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;txt&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;='newItem' &lt;/span&gt;&lt;span&gt;@keyup.enter&lt;/span&gt;&lt;span&gt;='addItemFun'&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;v-for&lt;/span&gt;&lt;span&gt;=&quot;its in items&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{its.name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
import store from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./store&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  data() {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
      newItem: &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;,
      items: store.fetch()
    }
  },
  watch: {
    items: {
      handler: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(val, oldVal) {
        store.save(val);
      },
      deep: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }
  },
  methods: {
    addItemFun() {
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; _this &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
      _this.items.push({ &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: _this.newItem });
      _this.newItem &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;&lt;span&gt;;
    }
  }
}

&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
#app &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
  font-family&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 'Avenir', Helvetica, Arial, sans-serif&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  -webkit-font-smoothing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; antialiased&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  -moz-osx-font-smoothing&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; grayscale&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; #2c3e50&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  margin-top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 60px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;

.vue-demo &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
  width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;&lt;span&gt;

.txt &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
  width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 200px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 25px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 24px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
  border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 5px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;}&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于初学vue的同学，可能对于watch可能不太熟悉，那就麻烦大家移步到 &lt;a href=&quot;https://cn.vuejs.org/v2/api/#watch&quot; target=&quot;_blank&quot;&gt;vue API&lt;/a&gt; 或参考下小颖之前写的文章：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/yingzi1028/p/7702439.html&quot;&gt;vue——实例方法 / 数据&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;2.在与App.vue同级目录下，新建store.js文件：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
const STORAGE_KEY = 'todos-vuejs'&lt;span&gt;

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {

  fetch: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; window.JSON.parse(window.localStorage.getItem(STORAGE_KEY) || '[]'&lt;span&gt;)

  },

  save: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(items) {

    window.localStorage.setItem(STORAGE_KEY, window.JSON.stringify(items))

  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3.在项目中打开cmd窗口，运行：npm run dev,就完成啦嘻嘻。&lt;/h3&gt;

</description>
<pubDate>Thu, 02 Nov 2017 14:37:00 +0000</pubDate>
<dc:creator>爱喝酸奶的吃货</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yingzi1028/p/7774954.html</dc:identifier>
</item>
<item>
<title>Linux中main是如何执行的 - HarlanC</title>
<link>http://www.cnblogs.com/harlanc/p/7774882.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/harlanc/p/7774882.html</guid>
<description>&lt;p&gt;这是一个看似简单的问题，但是要从Linux底层一点点研究问题比较多。找到了一遍研究这个问题的文章，但可能比较老了，还是在x86机器上进行的测试。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.tldp.org/LDP/LG/issue84/hawk.html&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;开始&quot;&gt;开始&lt;/h2&gt;
&lt;p&gt;问题很简单：linux是怎么执行我的main()函数的？&lt;br/&gt;在这片文档中，我将使用下面的一个简单c程序来阐述它是如何工作的。这个c程序的文件叫做&quot;simple.c&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;main()
{
    return (0);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;编译&quot;&gt;编译&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;gcc -o simple simple.c&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;生成可执行文件simple.&lt;/p&gt;
&lt;h2 id=&quot;在可执行文件中有些什么&quot;&gt;在可执行文件中有些什么？&lt;/h2&gt;
&lt;p&gt;为了看到在可执行文件中有什么，我们使用一个工具&quot;objdump&quot;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;objdump -f simple

simple:     file format elf32-i386
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080482d0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出给出了一些关键信息。首先，这个文件的格式是&quot;ELF64&quot;。其次是给出了程序执行的开始地址 &quot;0x080482d0&quot;&lt;/p&gt;
&lt;h2 id=&quot;什么是elf&quot;&gt;什么是ELF？&lt;/h2&gt;
&lt;p&gt;ELF是执行和链接格式（Execurable and Linking Format）的缩略词。它是UNIX系统的几种可执行文件格式中的一种。对于我们的这次探讨，有关ELF的有意思的地方是它的头格式。每个ELF可执行文件都有ELF头，像下面这个样子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;typedef struct
{
    unsigned char   e_ident[EI_NIDENT]; /* Magic number and other info */
    Elf32_Half  e_type;         /* Object file type */
    Elf32_Half  e_machine;      /* Architecture */
    Elf32_Word  e_version;      /* Object file version */
    Elf32_Addr  e_entry;        /* Entry point virtual address */
    Elf32_Off   e_phoff;        /* Program header table file offset */
    Elf32_Off   e_shoff;        /* Section header table file offset */
    Elf32_Word  e_flags;        /* Processor-specific flags */
    Elf32_Half  e_ehsize;       /* ELF header size in bytes */
    Elf32_Half  e_phentsize;        /* Program header table entry size */
    Elf32_Half  e_phnum;        /* Program header table entry count */
    Elf32_Half  e_shentsize;        /* Section header table entry size */
    Elf32_Half  e_shnum;        /* Section header table entry count */
    Elf32_Half  e_shstrndx;     /* Section header string table index */
} Elf32_Ehdr;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的结构中，&quot;e_entry&quot;字段是可执行文件的开始地址。&lt;/p&gt;
&lt;h2 id=&quot;地址0x080482d0上存放的是什么是程序执行的开始地址么&quot;&gt;地址&quot;0x080482d0&quot;上存放的是什么？是程序执行的开始地址么？&lt;/h2&gt;
&lt;p&gt;对于这个问题，我们来对&quot;simple&quot;做一下反汇编。有几种工具可以用来对可执行文件进行反汇编。我在这里使用了objdump:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;objdump --disassemble simple&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果有点长，我不会分析objdump的所有输出。我们的意图是看一下地址0x080482d0上存放的是什么。下面是输出：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;080482d0 &amp;lt;_start&amp;gt;:
 80482d0:       31 ed                   xor    %ebp,%ebp
 80482d2:       5e                      pop    %esi
 80482d3:       89 e1                   mov    %esp,%ecx
 80482d5:       83 e4 f0                and    $0xfffffff0,%esp
 80482d8:       50                      push   %eax
 80482d9:       54                      push   %esp
 80482da:       52                      push   %edx
 80482db:       68 20 84 04 08          push   $0x8048420
 80482e0:       68 74 82 04 08          push   $0x8048274
 80482e5:       51                      push   %ecx
 80482e6:       56                      push   %esi
 80482e7:       68 d0 83 04 08          push   $0x80483d0
 80482ec:       e8 cb ff ff ff          call   80482bc &amp;lt;_init+0x48&amp;gt;
 80482f1:       f4                      hlt    
 80482f2:       89 f6                   mov    %esi,%esi
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看上去开始地址上存放的是叫做&quot;_start&quot;的启动例程。它所做的是清空寄存器，向栈中push一些数据并且调用一个函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Stack Top   -------------------
        0x80483d
        -------------------
        esi
        -------------------
        ecx
        -------------------
        0x8048274
        -------------------
        0x8048420
        -------------------
        edx
        -------------------
        esp
        -------------------
        eax
        -------------------
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;三个问题&quot;&gt;三个问题&lt;/h2&gt;
&lt;p&gt;现在，可能你已经想到了，关于这个&lt;a href=&quot;http://blog.csdn.net/qq_29343201/article/details/51252345&quot;&gt;栈帧&lt;/a&gt;我们有一些问题。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这些16进制数是什么？&lt;/li&gt;
&lt;li&gt;地址80482bc上存放的是什么，哪个函数被_start调用了？&lt;/li&gt;
&lt;li&gt;看起来这些汇编指令并没有用一些有意义的值来初始化寄存器。那么谁来初始化这些寄存器？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;让我们来一个一个回答这个问题。&lt;/p&gt;
&lt;h3 id=&quot;q1关于16进制数&quot;&gt;Q1&amp;gt;关于16进制数&lt;/h3&gt;
&lt;p&gt;如果你仔细研究了用objdump得到的反汇编输出，你就能很容易回答这个问题。&lt;br/&gt;下面是这个问题的回答：&lt;/p&gt;
&lt;p&gt;0x80483d0: 这是main()函数的地址。&lt;/p&gt;
&lt;p&gt;0x8048274: _init()函数的地址。&lt;/p&gt;
&lt;p&gt;0x8048420: _finit()函数地址。&lt;/p&gt;
&lt;p&gt;_init和_finit是GCC提供的initialization/finalization 函数。&lt;/p&gt;
&lt;p&gt;现在，我们不要去关心这些东西。基本上所有这些16进制数都是函数指针。&lt;/p&gt;
&lt;h3 id=&quot;q2地址80482bc上存放的是什么&quot;&gt;Q2&amp;gt;地址80482bc上存放的是什么？&lt;/h3&gt;
&lt;p&gt;让我们再次在反汇编输出中寻找地址80482bc。&lt;br/&gt;如果你看到了，汇编代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;80482bc:    ff 25 48 95 04 08       jmp    *0x8049548&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的*0x8049548是一个指针操作。它跳到地址0x8049548存储的地址值上。&lt;/p&gt;
&lt;h4 id=&quot;更多关于elf和动态链接&quot;&gt;更多关于ELF和动态链接&lt;/h4&gt;
&lt;p&gt;使用ELF，我们可以编译出一个可执行文件,它动态链接到几个libraries上。这里的&quot;动态链接&quot;意味着实际的链接过程发生在运行时。否则我们就得编译出一个巨大的可执行文件，这个文件包含了它所调用的所有libraries（&quot;一个『静态链接的可执行文件』&quot;）。如果你执行下面的命令：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ldd simple

      libc.so.6 =&amp;gt; /lib/i686/libc.so.6 (0x42000000)
      /lib/ld-linux.so.2 =&amp;gt; /lib/ld-linux.so.2 (0x40000000)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你就能看到simple动态链接的所有libraries。所有动态链接的数据和函数都有『动态重定向入口(dynamic relocation entry)』。&lt;/p&gt;
&lt;p&gt;这个概念粗略的讲述如下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在链接时我们不会得知一个动态符号的实际地址。只有在运行时我们才能知道这个实际地址。&lt;/li&gt;
&lt;li&gt;所以对于动态符号，我们为其实际地址预留出了存储单元。加载器会在运行时用动态符号的实际地址填充存储单元。&lt;/li&gt;
&lt;li&gt;我们的应用通过使用一种指针操作来间接得知动态符号的存储单元。在我们的例子中，在地址80482bc上，有一个简单的jump指令。jump到的单元由加载器在运行时存储到地址0x8049548上。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;我们通过使用objdump命令可以看到所有的动态链接入口：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;objdump -R simple

    simple:     file format elf32-i386

    DYNAMIC RELOCATION RECORDS
    OFFSET   TYPE              VALUE 
    0804954c R_386_GLOB_DAT    __gmon_start__
    08049540 R_386_JUMP_SLOT   __register_frame_info
    08049544 R_386_JUMP_SLOT   __deregister_frame_info
    08049548 R_386_JUMP_SLOT   __libc_start_main&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里的地址0x8049548被叫做&quot;JUMP SLOT&quot;，非常贴切。根据这个表，实际上我们想调用的是 __libc_start_main。&lt;/p&gt;
&lt;h4 id=&quot;libc_start_main是什么&quot;&gt;__libc_start_main是什么？&lt;/h4&gt;
&lt;p&gt;我们在玩一个接力游戏，现在球被传到了libc的手上。__libc_start_main是libc.so.6中的一个函数。如果你在glibc中查找__libc_start_main的源码，它的原型可能是这样的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;extern int BP_SYM (__libc_start_main) (int (*main) (int, char **, char **),
        int argc,
        char *__unbounded *__unbounded ubp_av,
        void (*init) (void),
        void (*fini) (void),
        void (*rtld_fini) (void),
        void *__unbounded stack_end)
__attribute__ ((noreturn));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;所有汇编指令需要做的就是建立一个参数栈然后调用__libc_start_main。这个函数需要做的是建立/初始化一些数据结构/环境然后调用我们的main()。让我们看一下关于这个函数原型的栈帧，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Stack Top       -------------------
                        0x80483d0                                 main
                 ------------------- 
                        esi                                  argc
                 ------------------- 
                        ecx                                  argv 
                 ------------------- 
                        0x8048274                               _init
                 ------------------- 
                        0x8048420                               _fini
                 ------------------- 
                        edx                                 _rtlf_fini
                 ------------------- 
                        esp                                 stack_end
                 ------------------- 
                        eax                                 this is 0
                 ------------------- 

&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据这个栈帧我们得知，esi,ecx,edx,esp,eax寄存器在函数 __libc_start_main()被执行前需要被填充合适的值。很清楚的是这些寄存器不是被前面我们所展示的启动汇编指令所填充的。那么，谁填充了这些寄存器呢？现在只留下唯一的一个地方了——内核。现在让我们回到第三个问题上。&lt;/p&gt;
&lt;h3 id=&quot;q3内核做了些什么&quot;&gt;Q3&amp;gt;内核做了些什么？&lt;/h3&gt;
&lt;p&gt;当我们通过在shell上输入一个名字来执行一个程序时，下面是Linux接下来会发生的：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Shell调用内核的带argc/argv参数的系统调用&quot;execve&quot;。&lt;/li&gt;
&lt;li&gt;内核的系统调用句柄开始处理这个系统调用。在内核代码中，这个句柄为&quot;sys_execve&quot;.在x86机器上，用户模式的应用会通过以下寄存器将所有需要的参数传递到内核中。&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;ebx:执行程序名字的字符串&lt;/li&gt;
&lt;li&gt;ecx:argv数组指针&lt;/li&gt;
&lt;li&gt;edx:环境变量数组指针&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;通用的execve内核系统调用句柄——也就是do_execve——被调用。它所做的是建立一个数据结构，将所有用户空间数据拷贝到内核空间，最后调用search_binary_handler()。Linux能够同时支持多种可执行文件格式，例如a.out和ELF。对于这个功能，存在一个数据结构&quot;struct linux_binfmt&quot;,对于每个二进制格式的加载器在这个数据结构都会有一个函数指针。search_binary_handler()会找到一个合适的句柄并且调用它。在我们的例子中，这个合适的句柄是load_elf_binary()。解释函数的每个细节是非常乏味的工作。所以我在这里就不这么做了。如果你感兴趣，阅读相关的书籍即可。接下来是函数的结尾部分，首先为文件操作建立内核数据结构，来读入ELF映像。然后它建立另一个内核数据结构，这个数据结构包含：代码容量，数据段开始处，堆栈段开始处，等等。然后为这个进程分配用户模式页，将argv和环境变量拷贝到分配的页面地址上。最后，argc和argv指针，环境变量数组指针通过create_elf_tables()被push到用户模式堆栈中,使用start_thread()让进程开始执行起来。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;当执行_start汇编指令时，栈帧会是下面这个样子。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Stack Top          -------------
                            argc
                        -------------
                            argv pointer
                        -------------
                            env pointer
                        ------------- 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;汇编指令通过以下方式从栈中获取所有信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;pop %esi        &amp;lt;--- get argc
move %esp, %ecx     &amp;lt;--- get argv
              actually the argv address is the same as the current
              stack pointer.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在所有东西都准备好了，可以开始执行了。&lt;/p&gt;
&lt;h2 id=&quot;其他的寄存器呢&quot;&gt;其他的寄存器呢？&lt;/h2&gt;
&lt;p&gt;对于esp来说，它被用来当做应用程序的栈底。在弹出所有必要信息之后，_start例程简单的调整了栈指针(esp)——关闭了esp寄存器4个低地址位，这完全是有道理的，对于我们的main程序，这就是栈底。对于edx,它被rtld_fini使用，这是一种应用析构函数，内核使用下面的宏定义将它设为0：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#define ELF_PLAT_INIT(_r)   do { \
    _r-&amp;gt;ebx = 0; _r-&amp;gt;ecx = 0; _r-&amp;gt;edx = 0; \
    _r-&amp;gt;esi = 0; _r-&amp;gt;edi = 0; _r-&amp;gt;ebp = 0; \
    _r-&amp;gt;eax = 0; \
} while (0)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;0意味着在x86 Linux上我们不会使用这个功能。&lt;/p&gt;
&lt;h2 id=&quot;关于汇编指令&quot;&gt;关于汇编指令&lt;/h2&gt;
&lt;p&gt;这些汇编codes来自哪里？它是GCC codes的一部分。这些code的目标文件通常在/usr/lib/gcc-lib/i386-redhat-linux/XXX 和 /usr/lib下面，XXX是gcc版本号。文件名为crtbegin.o,crtend.o和gcrt1.o。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;我们总结一下整个过程。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;GCC将你的程序同crtbegin.o/crtend.o/gcrt1.o一块进行编译。其它默认libraries会被默认动态链接。可执行程序的开始地址被设置为_start。&lt;/li&gt;
&lt;li&gt;内核加载可执行文件，并且建立正文段，数据段，bss段和堆栈段，特别的，内核为参数和环境变量分配页面，并且将所有必要信息push到堆栈上。&lt;/li&gt;
&lt;li&gt;控制流程到了_start上面。_start从内核建立的堆栈上获取所有信息，为__libc_start_main建立参数栈，并且调用__libc_start_main。&lt;/li&gt;
&lt;li&gt;__libc_start_main初始化一些必要的东西，特别是C library（比如malloc)线程环境并且调用我们的main函数。&lt;/li&gt;
&lt;li&gt;我们的main会以main(argv,argv)来被调用。事实上，这里有意思的一点是main函数的签名。__libc_start_main认为main的签名为main(int, char &lt;strong&gt;, char&lt;/strong&gt; )，如果你感到好奇，尝试执行下面的程序。&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;main(int argc, char** argv, char** env)
{
    int i = 0;
    while(env[i] != 0)
    {
       printf(&quot;%s\n&quot;, env[i++]);
    }
    return(0);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;结论&quot;&gt;结论&lt;/h2&gt;
&lt;p&gt;在Linux中，我们的C main()函数由GCC,libc和Linux二进制加载器的共同协作来执行。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;objdump                         &quot;man objdump&quot; 

ELF header                      /usr/include/elf.h 

__libc_start_main            glibc source 
                                       ./sysdeps/generic/libc-start.c 

sys_execve                      linux kernel source code 
                                       arch/i386/kernel/process.c 
do_execve                        linux kernel source code 
                                       fs/exec.c 
struct linux_binfmt       linux kernel source code 
                                       include/linux/binfmts.h 
load_elf_binary             linux kernel source code
                                       fs/binfmt_elf.c 
create_elf_tables             linux kernel source code 
                                       fs/binfmt_elf.c 
start_thread                      linux kernel source code 
                                      include/asm/processor.h

&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 02 Nov 2017 14:19:00 +0000</pubDate>
<dc:creator>HarlanC</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/harlanc/p/7774882.html</dc:identifier>
</item>
<item>
<title>京东口红top 30分析 - 飞基</title>
<link>http://www.cnblogs.com/feijiii/p/7774865.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feijiii/p/7774865.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、抓取商品id&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;分析网页源码，发现所有id都是在class=“gl-item”的标签里，可以利用bs4的select方法查找标签，获取id：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1231858/201711/1231858-20171102213935748-1933701641.jpg&quot; alt=&quot;&quot; width=&quot;872&quot; height=&quot;413&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;获取id后，分析商品页面可知道每个商品页面就是id号不同，可构造url：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1231858/201711/1231858-20171102214622201-826368159.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;将获取的id和构造的url保存在列表里，如下源码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_product_url(url):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;global&lt;/span&gt;&lt;span&gt; pid
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;global&lt;/span&gt;&lt;span&gt; links
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     req =&lt;span&gt; urllib.request.Request(url)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     req.add_header(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;                    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     req.add_header(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     content =&lt;span&gt; urllib.request.urlopen(req).read()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     soup = bs4.BeautifulSoup(content, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     product_id = soup.select(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.gl-item&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(product_id)):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         lin = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://item.jd.com/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(product_id[i].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-sku&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取链接&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        links.append(lin)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取id&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         pid.append(product_id[i].get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-sku&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;strong&gt;&lt;span&gt;二、获取商品信息&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过商品页面获取商品的基本信息（商品名，店名，价格等）：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         product_url =&lt;span&gt; links[i]
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         req =&lt;span&gt; urllib.request.Request(product_url)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         req.add_header(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                        &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         req.add_header(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, product_url)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         content =&lt;span&gt; urllib.request.urlopen(req).read()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商品页面源码&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         soup = bs4.BeautifulSoup(content, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商品名&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         sku_name = soup.select_one(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.sku-name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).getText().strip()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商店名&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             shop_name = soup.find(clstag=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shangpin|keycount|product|dianpuname1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             shop_name = soup.find(clstag=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shangpin|keycount|product|zcdpmc_oversea&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商品ID&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         sku_id = str(pid[i]).ljust(20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商品价格&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;通过抓取评论的json页面获取商品热评、好评率、评论：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1231858/201711/1231858-20171102215647076-605965211.png&quot; alt=&quot;&quot; width=&quot;1070&quot; height=&quot;308&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;获取热评源码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_product_comment(product_id):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     comment_url = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://club.jd.com/comment/productPageComments.action?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;callback=fetchJSON_comment98vv16496&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId={}&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;score=0&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sortType=6&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page=0&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pageSize=10&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;isShadowSku=0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(str(product_id))
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     response = urllib.request.urlopen(comment_url).read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gbk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ignore&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     response = re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(?&amp;lt;=fetchJSON_comment98vv16496\().*(?=\);)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, response).group(0)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     response_json =&lt;span&gt; json.loads(response)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商品热评&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     hot_comments =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     hot_comment = response_json[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hotCommentTagStatistics&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; h_comment &lt;span&gt;in&lt;/span&gt;&lt;span&gt; hot_comment:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         hot = str(h_comment[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         count = str(h_comment[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         hot_comments.append(hot + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + count + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.join(hot_comments)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 获取好评率源码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_good_percent(product_id):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     comment_url = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://club.jd.com/comment/productPageComments.action?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;callback=fetchJSON_comment98vv16496&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId={}&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;score=0&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sortType=6&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page=0&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pageSize=10&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;isShadowSku=0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(str(product_id))
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     response =&lt;span&gt; requests.get(comment_url).text
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     response = re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(?&amp;lt;=fetchJSON_comment98vv16496\().*(?=\);)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, response).group(0)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     response_json =&lt;span&gt; json.loads(response)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取好评率&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     percent = response_json[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productCommentSummary&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;goodRateShow&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     percent = str(percent) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; percent
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 获取评论源码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_comment(product_id, page):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;global&lt;/span&gt;&lt;span&gt; word
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     comment_url = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://club.jd.com/comment/productPageComments.action?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;callback=fetchJSON_comment98vv16496&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;productId={}&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;score=0&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sortType=6&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page={}&amp;amp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pageSize=10&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; \
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                   &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;amp;isShadowSku=0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(str(product_id), str(page))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     response = urllib.request.urlopen(comment_url).read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gbk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ignore&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     response = re.search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;(?&amp;lt;=fetchJSON_comment98vv16496\().*(?=\);)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, response).group(0)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     response_json =&lt;span&gt; json.loads(response)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 写入评论.csv&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     comment_file = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{0}\\评论.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(path), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, newline=&lt;span&gt;''&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, errors=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ignore&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     write =&lt;span&gt; csv.writer(comment_file)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取用户评论&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     comment_summary = response_json[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;comments&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; content &lt;span&gt;in&lt;/span&gt;&lt;span&gt; comment_summary:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 评论时间&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         creation_time = str(content[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;creationTime&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 商品颜色&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         product_color = str(content[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;productColor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 商品名称&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         reference_name = str(content[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;referenceName&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 客户评分&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         score = str(content[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;score&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 客户评论&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         content = str(content[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]).strip()
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 记录评论&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        word.append(content)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        write.writerow([product_id, reference_name, product_color, creation_time, score, content])
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     comment_file.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 整体获取商品信息源码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_product_info():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;global&lt;/span&gt;&lt;span&gt; pid
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;global&lt;/span&gt;&lt;span&gt; links
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;global&lt;/span&gt;&lt;span&gt; word
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建评论.csv&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     comment_file = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{0}\\评论.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(path), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, newline=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     write =&lt;span&gt; csv.writer(comment_file)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     write.writerow([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;颜色&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;评论时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;客户评分&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;客户评论&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    comment_file.close()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建商品.csv&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     product_file = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{0}\\商品.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(path), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, newline=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     product_write =&lt;span&gt; csv.writer(product_file)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     product_write.writerow([&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;所属商店&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;价格&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品好评率&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;商品评价&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    product_file.close()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(len(pid)):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[*]正在收集数据。。。&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         product_url =&lt;span&gt; links[i]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         req =&lt;span&gt; urllib.request.Request(product_url)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         req.add_header(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                        &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         req.add_header(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, product_url)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         content =&lt;span&gt; urllib.request.urlopen(req).read()
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商品页面源码&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         soup = bs4.BeautifulSoup(content, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lxml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商品名&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         sku_name = soup.select_one(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.sku-name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).getText().strip()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商店名&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             shop_name = soup.find(clstag=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shangpin|keycount|product|dianpuname1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             shop_name = soup.find(clstag=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shangpin|keycount|product|zcdpmc_oversea&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商品ID&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         sku_id = str(pid[i]).ljust(20&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取商品价格&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         price_url = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://p.3.cn/prices/mgets?pduid=1580197051&amp;amp;skuIds=J_{}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(pid[i])
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         response =&lt;span&gt; requests.get(price_url).content
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         price =&lt;span&gt; json.loads(response)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         price = price[0][&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 写入商品.csv&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         product_file = open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;{0}\\商品.csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(path), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, newline=&lt;span&gt;''&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, errors=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ignore&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         product_write =&lt;span&gt; csv.writer(product_file)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        product_write.writerow(
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;            [sku_id, shop_name, sku_name, price, get_good_percent(pid[i]), get_product_comment(pid[i])])
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        product_file.close()
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         pages =&lt;span&gt; int(get_comment_count(pid[i]))
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         word =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(pages):
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                get_comment(pid[i], j)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[!!!]{}商品评论加载失败！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(pid[i]))
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[!!!]Error：{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(e))
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;[*]第{}件商品{}收集完毕！&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.format(i + 1&lt;span&gt;, pid[i]))&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 的生成词云&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;         word = &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.join(word)
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         my_wordcloud = WordCloud(font_path=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\Windows\Fonts\STZHONGS.TTF&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, background_color=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).generate(word)
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         my_wordcloud.to_file(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;.format(pid[i]))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 将商品信息和评论写入表格，生成评论词云：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1231858/201711/1231858-20171102220235232-1931339141.png&quot; alt=&quot;&quot; width=&quot;1064&quot; height=&quot;441&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1231858/201711/1231858-20171102220312420-239344502.png&quot; alt=&quot;&quot; width=&quot;1060&quot; height=&quot;334&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1231858/201711/1231858-20171102220726560-945682418.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1231858/201711/1231858-20171102220407310-322554462.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1231858/201711/1231858-20171102220926310-1230876761.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1231858/201711/1231858-20171102220836123-845477820.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        在爬取的过程中遇到最多的问题就是编码问题，获取页面的内容requset到的都是bytes类型的要decode（”gbk”），后来还是存在编码问题，最后找到一些文章说明，在后面加“ignore”可以解决，由于爬取的量太大，会有一些数据丢失，不过数据量够大也不影响对商品分析。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 14:17:00 +0000</pubDate>
<dc:creator>飞基</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feijiii/p/7774865.html</dc:identifier>
</item>
<item>
<title>我的第一个python web开发框架（15）——公司介绍编辑功能 - AllEmpty</title>
<link>http://www.cnblogs.com/EmptyFS/p/7771065.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/EmptyFS/p/7771065.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　完成登录以后，就会进入后台管理系统的主界面，因为这个是小项目，所以导航菜单全部固化在HTML中，不能修改。一般后台还会有一个欢迎页或关键数据展示的主页面，小项目也没有多大的必要，所以登录后直接进入公司介绍编辑页面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先我们来看一下公司介绍页面内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/129385/201711/129385-20171102084025545-363060700.png&quot; alt=&quot;&quot; width=&quot;688&quot; height=&quot;599&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　看上去功能好像很简单，其实我们要处理的东西还是挺多的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从页面上看，我们需要有一个记录读取的接口，来获取公司介绍的内容，并展示在页面上。当然现在数据库里面没有记录存在，所以我们还需要向数据库的信息表（infomation）中插入一条公司介绍的记录，这样好直接进行编辑（因为公司介绍不会有很多条记录，一般定了后就不会再改变，所以只需要在数据库的信息表里插入一条就可以了）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　另外，从界面上看，我们还需要有一个上传文件的接口，可以上传图片和文件；还需要一个更新公司介绍内容的接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　还有需要修改几个地方，有上传文件，肯定需要有下载的接口，所以需要增加一个下载的路由（python与其他语言不一样的地方是，所有访问都必须通过路由，所以上传的或放在目录中的文件需要统一定义一个接口来处理，不然用户访问不了，虽然有点麻烦，但这样处理也安全很多，用户上传任何含有木马或程序的文件，它也无法在服务器端执行）；nginx配置文件也需要修改一下，增加下载路径规则，这样就可以直接通过nginx访问下载路径了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　向数据库中添加公司介绍记录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　运行pgAdmin连上数据库，然后按第4章的做法，打开sql查询分析器，运行下面代码添加一条数据库记录&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
INSERT INTO infomation(id, title)  VALUES (1, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;公司介绍&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　添加公司介绍记录读取接口&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/api/about/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback():
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    获取指定记录
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     sql = &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;select * from infomation where id = 1&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取记录&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     result =&lt;span&gt; db_helper.read(sql)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; result:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直接输出json&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(0, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, result[0])
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(-1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;查询失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　因为公司介绍id添加后不会再改变，所以sql语句直接绑死id为1，另外，执行数据库查询以后，返回的是列表，所以返回记录时要加上序号：&lt;span&gt;result[0]&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　启动debug（对main.py点击右键=》debug），将用户登录判断那两行注释掉（不然直接访问会返回-404，“您的登录已失效，请重新登录”提示），在浏览器输入：&lt;span&gt;http://127.0.0.1:9090/api/about/&lt;/span&gt;就可以看到返回结果（结果的中文字符是unicode编码，需要用&lt;span&gt;&lt;a href=&quot;http://tool.chinaz.com/tools/unicode.aspx&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;站长工具&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;转换一下才可以转为下载效果）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;msg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;front_cover_img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 1, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;公司介绍&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-10-31 14:17:45&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: 0}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　添加公司介绍内容修改接口&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @put(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/api/about/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback():
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    修改记录
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     front_cover_img = web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;front_cover_img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;图片&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     content = web_helper.get_form(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;内容&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, is_check_special_char=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 防sql注入攻击处理&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     content = string_helper.filter_str(content, &quot;&lt;span&gt;'&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 防xss攻击处理&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     content =&lt;span&gt; string_helper.clear_xss(content)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 更新记录&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     sql = &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;update infomation set front_cover_img=%s, content=%s where id=1&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     vars =&lt;span&gt; (front_cover_img, content,)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 写入数据库&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    db_helper.write(sql, vars)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直接输出json&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; web_helper.return_msg(0, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　因为公司介绍只需要一条记录就够了，前面使用手动方式向数据库添加记录，所以代码中我们就不需要写添加的方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　修改记录使用put方式接收：&lt;span&gt;@put('/api/about/')&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从界面图片中可以看到，有文章标题、首页图片和文章内容，因为标题不需要进行修改，所以我们修改接口只需要处理剩下两项就可以了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因为提交的内容含有HTML代码，所以使用&lt;span&gt;web_helper.get_form&lt;/span&gt;提取值时，需要使用&lt;span&gt;is_check_special_char&lt;/span&gt;参数，设置为不检查特殊符号，不然会接收不了。另外接收到参数值以后，我们需要对它进行防sql注入和防xss处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;clear_xss()&lt;/span&gt;函数是&lt;span&gt;string_helper&lt;/span&gt;包新增的清除xss攻击标签用的，它会过滤掉xss的攻击代码。详细代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;83&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; clear_xss(html):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    清除xss攻击标签
    :param html: 要处理的html
    :return:
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    tags &lt;/span&gt;= [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abbr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;acronym&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blockquote&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;strong&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
    tags.extend(
        [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;h5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;del&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sub&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sup&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
         &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;td&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;tbody&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;caption&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;blockquote&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;section&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
    attributes &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]}
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; bleach.linkify(bleach.clean(html, tags=tags, attributes=attributes))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;clear_xss()&lt;/span&gt;函数中我们使用了&lt;span&gt;bleach&lt;/span&gt;这个库（需要安装：&lt;span&gt;pip install bleach&lt;/span&gt;），它是一个基于白名单、通过转义或去除标签和属性的方式，来对HTML文本净化的python库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们在&lt;span&gt;string_helper_test.py&lt;/span&gt;这个测试单元中添加一个测试用例，来测试一下这个函数的使用效果&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; test_clear_xss(self):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;-----test_clear_xss------&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;script src=&quot;javascript:alert(1);&quot;&amp;gt;abc&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;iframe src=&quot;javascript:alert(1);&quot;&amp;gt;abc&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div style=&quot;width:0;height:0;background:url(javascript:document.body.onload = function(){alert(/XSS/);};&quot;&amp;gt;div&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;img src = &quot;#&quot;/**/onerror = alert(/XSS/)&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;img src = j ava script:al er t(/XSS/)&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;img src = j
ava script :a ler t(/xss/)&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;img src=&quot;javacript:alert(\'abc\')&quot;&amp;gt;&amp;lt;/img&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;img src=&quot;https://www.baidu.com/img/baidu_jgylogo3.gif&quot;&amp;gt;&amp;lt;/img&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;p src=&quot;javascript:alert(1);&quot;&amp;gt;abc&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;input type=&quot;text&quot; value=&quot;琅琊榜&quot; onclick=&quot;javascript:alert('handsome boy')&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;p onclick=&quot;javascript:alert(&quot;handsome boy&quot;)&amp;gt;abc&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a href=&quot;javascript:alert(1);&quot;&amp;gt;abc&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a href=&quot;/api/&quot;&amp;gt;abc&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a href=&quot;http://www.baidu.com&quot;&amp;gt;abc&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;marquee onstart=&quot;alert(/XSS/)&quot;&amp;gt;文字&amp;lt;/marquee&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div style=&quot;&quot; onmouseenter=&quot;alert(/XSS/)&quot;&amp;gt;文字&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;li style = &quot;TEST:e-xpression(alert(/XSS/))&quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;input id = 1 type = &quot;text&quot; value=&quot;&quot; &amp;lt;script&amp;gt;alert(/XSS/)&amp;lt;/script&amp;gt;&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;base href=&quot;http://www.labsecurity.org&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div id=&quot;x&quot;&amp;gt;alert%28document.cookie%29%3B&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(string_helper.clear_xss(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;limited_xss_point&amp;gt;eval(unescape(x.innerHTML));&amp;lt;/limited_xss_point&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　执行后输出结果：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
------ini------
-----test_clear_xss------
&amp;amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;javascript:alert(1);&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;amp;gt;abc&amp;amp;lt;/script&amp;amp;&lt;span&gt;gt;
&lt;/span&gt;&amp;amp;lt;iframe src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;javascript:alert(1);&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;amp;gt;abc&amp;amp;lt;/iframe&amp;amp;&lt;span&gt;gt;
&lt;/span&gt;&amp;lt;div&amp;gt;div&amp;lt;/div&amp;gt;
&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;j&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;img&amp;gt;
&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com/img/baidu_jgylogo3.gif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;p&amp;gt;abc&amp;lt;/p&amp;gt;
&amp;amp;lt;input onclick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;javascript:alert('handsome boy')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;琅琊榜&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;amp;&lt;span&gt;gt;
&lt;/span&gt;&amp;lt;p&amp;gt;abc&amp;lt;/p&amp;gt;
&amp;lt;a&amp;gt;abc&amp;lt;/a&amp;gt;
&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/api/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nofollow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;abc&amp;lt;/a&amp;gt;
&amp;lt;a href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nofollow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;abc&amp;lt;/a&amp;gt;
&amp;amp;lt;marquee onstart=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alert(/XSS/)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;amp;gt;文字&amp;amp;lt;/marquee&amp;amp;&lt;span&gt;gt;
&lt;/span&gt;&amp;lt;div&amp;gt;文字&amp;lt;/div&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
&amp;amp;lt;input &amp;amp;lt;script=&lt;span&gt;&quot;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value=&lt;span&gt;&quot;&quot;&lt;/span&gt;&amp;amp;gt;alert(/XSS/)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&amp;amp;gt;&lt;/span&gt;
&amp;amp;lt;base href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;a href=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;http://www.labsecurity.org&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; rel=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;nofollow&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;http://www.labsecurity.org&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;amp;&lt;span&gt;gt;
&lt;/span&gt;&amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;alert%28document.cookie%29%3B&amp;lt;/div&amp;gt;
&amp;amp;lt;limited_xss_point&amp;amp;gt;eval(unescape(x.innerHTML));&amp;amp;lt;/limited_xss_point&amp;amp;&lt;span&gt;gt;
&lt;/span&gt;------clear------
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　可以看到，对于富文本编辑器提交的代码，bleach基本满足了我们的防范xss攻击的处理需求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　添加上传接口（PS：我们使用的文本编辑器是百度的ueditor，因为它没有python的上传处理代码，所以我们需要动手编辑上传接口，以及html上也要进行对应的修改）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/evn python&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; coding=utf-8&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; bottle &lt;span&gt;import&lt;/span&gt;&lt;span&gt; post, request
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; common &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime_helper, random_helper, log_helper

@post(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/api/files/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; callback():
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    修改记录
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 初始化输出值&lt;/span&gt;
    result =&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FAIL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上传失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;original&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    }
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取上传文件&lt;/span&gt;
    &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; upfile为前端HTML上传控件名称&lt;/span&gt;
        upload = request.files.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;upfile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果没有读取到上传文件或上传文件的方式不正确，则返回上传失败状态&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; upload:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 取出文件的名字和后缀&lt;/span&gt;
        name, ext =&lt;span&gt; os.path.splitext(upload.filename)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 给上传的文件重命名，默认上传的是图片&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; ext &lt;span&gt;and&lt;/span&gt; ext != &lt;span&gt;''&lt;/span&gt;&lt;span&gt;:
            file_name &lt;/span&gt;= datetime_helper.to_number() + random_helper.get_string(5) +&lt;span&gt; ext
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            file_name &lt;/span&gt;= datetime_helper.to_number() + random_helper.get_string(5) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        upload.filename &lt;/span&gt;=&lt;span&gt; file_name

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置文件存储的相对路径&lt;/span&gt;
        filepath = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/upload/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + datetime_helper.to_number(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y%m%d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 组合成服务器端存储绝对路径&lt;/span&gt;
        upload_path = os.getcwd() +&lt;span&gt; filepath
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果目录不存在，则创建目录&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; os.path.exists(upload_path):
            os.mkdir(upload_path)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存文件&lt;/span&gt;
        upload.save(upload_path + upload.filename, overwrite=&lt;span&gt;True)

        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 设置输出参数（返回相对路径给客户端）&lt;/span&gt;
        result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = result[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;original&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; upload.filename
        result[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = filepath +&lt;span&gt; upload.filename
        result[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;state&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SUCCESS&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt;&lt;span&gt; Exception as e:
        log_helper.error(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;上传失败：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; str(e.args))

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直接输出json&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; result
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　PS：这里只做了上传文件处理，没有上传成功以后存储到数据库中统一管理，如果前端反复上传，会造成服务器存储很多多余文件的问题，大家可以自己发挥想象与动手能力，看看怎么解决这个问题。对于这个问题会在第二部分统一处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　添加上传文件存储文件夹：直接在项目的要目录下创建upload文件夹&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/129385/201711/129385-20171102165652107-83208712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　修改&lt;span&gt;main.py&lt;/span&gt;文件配置，并创建文件下载路由&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　导入的&lt;span&gt;bottle&lt;/span&gt;库添加&lt;span&gt;response, static_file&lt;/span&gt;这两个包，response用于设置输出文件类型为二进制数据传输格式，这样设置后，上传的各种类型文件都可以下载；static_file是使用安全的方式读取文件并输出到客户端&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; bottle &lt;span&gt;import&lt;/span&gt; default_app, get, run, request, hook, route, response, static_file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　在第26行插入下面代码，初始化上传文件存储路径&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义upload为上传文件存储路径&lt;/span&gt;
upload_path = os.path.join(program_path, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;upload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　添加下载文件访问路由，设置后只要放在upload目录下的文件都可以直接通过浏览器下载&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
@get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/upload/&amp;lt;filepath:path&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; upload_static(filepath):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;设置静态内容路由&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    response.add_header(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;application/octet-stream&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; static_file(filepath, root=upload_path)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　做完以上设置，上传与更新就没有问题了，上传的图片直接使用&lt;span&gt;http://127.0.0.1:9090/upload/xxx.jpg&lt;/span&gt;方式就可以访问了，如果想要使用81端口，也就是通过nginx访问，那就需要再配置一下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　打开nginx配置文件 ：&lt;span&gt;E:\Service\nginx-1.11.5\conf\nginx.conf&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　将&lt;span&gt;location ~* ^/(index|api)/&lt;/span&gt; 修改为&lt;span&gt; location ~* ^/(index|api|upload)/ &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然后在windows任务管理器（键盘同时按Ctrl+Alt+Del键，点击启动任务管理器），找到nginx_service.exe，右键=》结束进程树&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　重新打开服务（控制面板=》所有控制面板项=》管理工具=》服务），启动nginx_service服务&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前端页面相关修改&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　向&lt;span&gt;/lib/ueditor/1.4.3/&lt;/span&gt;目录中添加&lt;span&gt;python&lt;/span&gt;文件夹，将添加&lt;span&gt;config.json&lt;/span&gt;这个配置项&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　修改&lt;span&gt;/lib/ueditor/1.4.3/ueditor.config.js&lt;/span&gt; 配置项中 服务器统一请求接口路径 为 &lt;span&gt;/api/files/&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　本文对应的源码包里有ueditor编辑器最新代码（刚刚去百度下载的），去掉了多余的文件，大家可直接删除lib目录里的ueditor这个文件夹，使用源码包里的替换上去就可以了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　前端页面的javascript脚本添加了ueditor编辑器初始化、文件上传和表单提交等功能，可直接替换&lt;span&gt;about_edit.html&lt;/span&gt;文件，具体大家自己研究一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最终效果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/129385/201711/129385-20171102221542935-550998946.png&quot; alt=&quot;&quot; width=&quot;773&quot; height=&quot;497&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/129385/201711/129385-20171102221602107-114790080.png&quot; alt=&quot;&quot; width=&quot;759&quot; height=&quot;457&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　另外，联系我们的功能与公司介绍差不多，在这里留一下作业给大家自己尝试做一个联系我们编辑页面出来，下一篇会给联系我们编辑页面源码给大家&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://pan.baidu.com/s/1dFAi3F7&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;本文对应的源码下载&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;作者：AllEmpty&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;出处：http://www.cnblogs.com/EmptyFS/&lt;br/&gt;有兴趣的朋友可以加加python开发QQ群：669058475 ，大家一起探讨。大家有问题的话可以在群里发问，当然我平时工作也非常繁忙不一定会及时回复。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;本文为AllEmpty原创，欢迎转载，但未经同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 14:17:00 +0000</pubDate>
<dc:creator>AllEmpty</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/EmptyFS/p/7771065.html</dc:identifier>
</item>
<item>
<title>Vue.js之render函数基础 - nobody-junior</title>
<link>http://www.cnblogs.com/imgss/p/7774719.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imgss/p/7774719.html</guid>
<description>&lt;p&gt;刚才翻了一下博客，才发现，距离自己写的第一篇Vue的博客&lt;a href=&quot;http://www.cnblogs.com/imgss/p/6013663.html&quot;&gt;vue.js之绑定class和style&lt;/a&gt;(2016-10-30)已经过去一年零两天。这一年里，自己从船厂的普通技术员，成为了一个微型不靠谱创业公司的普通码农。发过一次烧，搬了两次家，没攒下什么钱。好，牢骚发到这里，接下来谈谈传说中接近Vue底层的api==render函数。&lt;/p&gt;
&lt;h2 id=&quot;一枚硬币的两面&quot;&gt;一枚硬币的两面&lt;/h2&gt;
&lt;p&gt;很久很久以前，前端的数据和视图居住在一起，在强大的jQuery的管理下，他们相处的还算可以。但是随着页面越来越复杂，DOM树的节点越来越多，数据夹杂在DOM中变得越来越难于管理。于是一声炮响，迎来了数据驱动视图的MVVM框架，数据和视图被一条天河划分开来，整个页面的数据状态开始变得整洁起来。而连接数据视图的鹊桥是虚拟DOM,关于虚拟DOM参看&lt;a href=&quot;http://www.ituring.com.cn/article/211352&quot;&gt;全面理解虚拟DOM，实现虚拟DOM&lt;/a&gt;。构成DOM的每一个节点在Vue中被称为vnode。（这段不严谨，大胆假设没求证）&lt;/p&gt;
&lt;p&gt;在我们生成真实的DOM结构时，可以写一个HTML文件描述文档结构交给浏览器去解析，同时也可以通过DOM 的api innerHTML告诉浏览器结构是什么，还可以用createElement来构建DOM树，以喜闻乐见的hello world为例，html和innerHTML api 对DOM结构的描述都是&lt;code&gt;&amp;lt;h1&amp;gt;hello world&amp;lt;/h1&amp;gt;&lt;/code&gt;，但是用createElement就变成了这个样子:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; h1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'h1'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; hw &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createTextNode&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'hello world'&lt;/span&gt;)
&lt;span class=&quot;va&quot;&gt;h1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(hw)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;body&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(h1)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就是描述一个DOM结构的方式，你可以用一个html文件，一个字符串，或者一段js代码，但是他们都是在做同一件事，就是告诉浏览器该怎么渲染你想要的页面。现在我们回头看vue,在构建vue实例时，我们要写一个叫template的属性，里面是一个html一样的字符串。那么，vue对这个字符串做什么了？肯定不是羞羞的事情。事实上，vue拿它构建了虚拟DOM。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vue.compile&lt;/code&gt;这个静态方法给我们展示了一个漂亮的字符串模板是怎么变成一个奇怪的render函数的:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&amp;lt;h1&amp;gt;hello world&amp;lt;/h1&amp;gt;'&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;//返回&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;staticRenderFns&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ƒ&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;render属性对应的是一个函数，在&lt;strong&gt;Vue的实例的上下文&lt;/strong&gt;中调用它会得到字符串对应的虚拟DOM节点,可以把下面的代码粘贴到Vue官网的控制台下面看看效果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Vue&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'&amp;lt;h1&amp;gt;hello world&amp;lt;/h1&amp;gt;'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//得到{staticRenderFns: Array(0), render: ƒ}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;r&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;render&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;))

&lt;span class=&quot;co&quot;&gt;//返回 VNode {tag: &quot;h1&quot;, data: undefined, children: Array(1), text: undefined...}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;于是我们抽丝剥茧，终于看到了VNode长什么样子，有tag属性，还有children，text...总之咋一看，还真的跟真实的DOM对象有几分相似，真实DOM中有&lt;code&gt;tagName&lt;/code&gt;,&lt;code&gt;children&lt;/code&gt;,&lt;code&gt;textContent&lt;/code&gt;...&lt;/p&gt;
&lt;h2 id=&quot;render函数&quot;&gt;render函数&lt;/h2&gt;
&lt;p&gt;上面我们看到了render函数和模板字符串不同寻常的关系以及通过Vue.compile进行转换，下面来看看render函数的具体构造。要注意的是，编译后得到的不是VNode树，而是生成VNode的函数。&lt;/p&gt;
&lt;p&gt;在创建Vue实例的过程中，如果传入的选项中有template和render两个属性，render会有更高的优先级：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;f&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//优先级高&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就表示，Vue在看到你要用render函数描述虚拟DOM时。会很高兴，因为它不用自己编译你给他的模板字符串来得到render函数，省力又省心。同时它会丢给你一个函数，这个函数是你构建虚拟DOM所需要的工具，官网上给他起了个名字叫createElement。还有约定的简写叫h,vm中有一个方法_c,也是这个函数的别名。&lt;/p&gt;
&lt;p&gt;下面我们先来说说这个构建虚拟Dom的工具，createElement函数。&lt;a href=&quot;https://cn.vuejs.org/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0&quot;&gt;参考官网createElement-参数&lt;/a&gt;，首先思考一个普通的html元素会传递给我们哪些信息，&lt;code&gt;&amp;lt;h1 class='foo'&amp;gt;hello world&amp;lt;/h1&amp;gt;&lt;/code&gt;,没错，我们可以得到3部分有效信息：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;这个元素的标签名--h1&lt;/li&gt;
&lt;li&gt;这个元素有什么属性/事件，class,style,onclick,name,id...&lt;/li&gt;
&lt;li&gt;这个元素有什么子元素，这里是一个文本节点 'hello world'&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上面提到，render函数和模板字符串是描述虚拟DOM树的两种方式,那么用createElement函数来描述就变成了下面这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;craeteElement('h1', {class,style,on,attrs:{name,id}, 'hello world'})
//这里，第三个参数还有玄机，接收的参数十分灵活，详情参考官网关于这三个参数的描述&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看到了吧，之前我们从字符串中得到的有效信息到了函数这边变成了输入的参数，而输出这是一个虚拟DOM节点。我们不妨叫他们createElement三剑客。&lt;/p&gt;
&lt;h3 id=&quot;大剑客&quot;&gt;大剑客&lt;/h3&gt;
&lt;p&gt;参数类型是一个字符串或者一个对象一个函数。像下面这样：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;st&quot;&gt;'div'&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//字符串&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;mounted&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//一个组件选项对象&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'div'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//返回上面两种&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;二剑客&quot;&gt;二剑客&lt;/h3&gt;
&lt;p&gt;一个数据对象，包括对根元素html属性的描述，和组件属性的描述，详情见官网，比方说你要描述这么一个节点：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;man class=&quot;color&quot; height=&quot;1.4m&quot; weight=&quot;50kg&quot; v-on:move=&quot;handle&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;需要传入的第二个参数应该是&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;'class'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'1.4m'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'50kg'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;，
    &lt;span class=&quot;dt&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;handle&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{}}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;三剑客&quot;&gt;三剑客&lt;/h3&gt;
&lt;p&gt;三剑客可以是一个字符串或者一个数组，数组就表示这个根元素不止有一个虚拟子节点了。还是举个例子:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;h1&amp;gt; &amp;lt;span style=&quot;color:red&quot;&amp;gt;hello&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;world&amp;lt;/span&amp;gt; &amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要给createElement传入的第三个参数(第二个参数，由于根元素没什么属性，可以省略)应该是:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;vm &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Vue&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;createElement &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'h1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;[
        &lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'span'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}},&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hello'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'span'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'world'&lt;/span&gt;)
    ])
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;vm&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$mount&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'#logo'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//$mount的意思是**附体**&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以把代码复制到vue官网的控制台看效果。有句话说的好，&lt;strong&gt;给我一个女人，我能创造一个民族&lt;/strong&gt;，用到这里是，&lt;strong&gt;给我一个createElement函数，我们创造出一课虚拟DOM树&lt;/strong&gt;。其实render函数和slot还可以擦出不一样的火花，就到下篇介绍了（心虚）。本篇完。&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 13:46:00 +0000</pubDate>
<dc:creator>nobody-junior</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imgss/p/7774719.html</dc:identifier>
</item>
<item>
<title>Android_简易的短信发送器 - 浮梦</title>
<link>http://www.cnblogs.com/AganRun/p/7774626.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/AganRun/p/7774626.html</guid>
<description>&lt;p&gt;这个随笔将介绍如何完成一个简单的第三方的短信发送器（不打开短信界面，调用android的api完成功能）&lt;/p&gt;

&lt;p&gt;1.首先，我们来做布局&lt;/p&gt;
&lt;p&gt;　　由于我这里写的是一个简易的，，短信发送，所以只是一个LinearLayout下放了两个EditText用来存号码和内容，还有一个Button发送按钮，如果想要更华丽的布局，有兴趣的大家可以再去添加奥。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&lt;span&gt; 2&lt;/span&gt; &amp;lt;LinearLayout xmlns:android=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.android.com/apk/res/android&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     xmlns:app=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.android.com/apk/res-auto&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     xmlns:tools=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://schemas.android.com/tools&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     android:layout_width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     android:layout_height=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     android:orientation=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vertical&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     tools:context=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.example.sendmessage.MainActivity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &amp;lt;!--
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.使用hint可以显示提示占位信息，输入时自动消失
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;2&lt;/span&gt;&lt;span&gt;.inputType是输入数据的类型，这里需要号码所以允许输入数字
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;      --&amp;gt;
&lt;span&gt;14&lt;/span&gt;     &amp;lt;&lt;span&gt;EditText
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         android:id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/et_phone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         android:layout_width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         android:layout_height=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         android:hint=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入号码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         android:inputType=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;number&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &amp;lt;!--
&lt;span&gt;22&lt;/span&gt;        &lt;span&gt;1&lt;/span&gt;&lt;span&gt;. 这里建议使用lines去控制输入的内容多少，如果把高度写死，不同手机不同大小的字体
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        可以输入的汉字的总量就会变化，而使用lines无论多大的字都是可以输入固定行数的字
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     --&amp;gt;
&lt;span&gt;25&lt;/span&gt;     &amp;lt;&lt;span&gt;EditText
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         android:id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;@+id/et_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         android:layout_width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         android:layout_height=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         android:hint=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入短信内容&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         android:lines=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         android:gravity=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;top&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &amp;lt;&lt;span&gt;Button
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         android:layout_width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;match_parent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         android:layout_height=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wrap_content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         android:onClick=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;send&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         android:text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发送&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &amp;lt;/LinearLayout&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;盐后，就是业务处理了，重点来了，可以拿板凳了啊，我们可以直接调用安卓发送短信的api，只需要两行代码，获取对象发送短信即可&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package com.example.sendmessage;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import android.os.Bundle;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import android.support.v7.app.AppCompatActivity;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import android.telephony.SmsManager;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import android.view.View;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import android.widget.EditText;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainActivity extends AppCompatActivity {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        super.onCreate(savedInstanceState);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        setContentView(R.layout.activity_main);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; send(View v){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取用户输入的号码以及短信内容&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         EditText et_phone =&lt;span&gt; (EditText)findViewById(R.id.et_phone);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         EditText et_content =&lt;span&gt; (EditText)findViewById(R.id.et_content);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         String phone =&lt;span&gt; et_phone.getText().toString();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         String content =&lt;span&gt; et_content.getText().toString();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接使用发送短信的api&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         SmsManager sm =&lt;span&gt; SmsManager.getDefault();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;         *  arg0:目标号码
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;         *  arg1:短信中心号码，null即可，写死了到换了地方不就没办法打电话了
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;         *  arg2:短信正文
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         sm.sendTextMessage(phone, &lt;span&gt;null&lt;/span&gt;, content, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（sendTextMessage第二个参数，大家如果有兴趣，可以打开自己手机的拨号界面，按下‘*#*#6436#*#*’，在选择‘手机信息’-&amp;gt;向下拉可以看到SMSC这个地方就是空的，所有程序中我们传了一个null）&lt;/p&gt;
&lt;p&gt; 　　然后我们怀着激动的心情点了运行程序，，输入了电话和密码，然后，，，，神奇的一幕发生了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1125090/201711/1125090-20171102203014607-1296371859.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;停止运行，为什么呢？？？？别怪我挖坑，我们先看一看报错信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1125090/201711/1125090-20171102204519498-1291431305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这就说的很清楚了嘛，没有发送短信的权限，那我们去AndroidManifest.xml中去添加这个权限&lt;/p&gt;
&lt;p&gt;在&amp;lt;application&amp;gt;之前添加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &amp;lt;uses-permission android:name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;android.permission.SEND_SMS&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/uses-permission&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这句话，然后重新运行&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1125090/201711/1125090-20171102212144451-754487820.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 终于成功了，事情结束了吗???还差一点，还有一个事情就是运营商规定一条短信最多只能发送70个字，那问题来了，生活中我们发几百字的甜言蜜语是怎么发出去的呢?那是因为后台程序已经把短信拆分成多条了&lt;/p&gt;
&lt;p&gt;同理，会收取多条的费用，那么运营商肯定不管拆分，他们只负责收钱，拆分就交给我们了，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接使用发送短信的api&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         SmsManager sm =&lt;span&gt; SmsManager.getDefault();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;拆分长短信&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         ArrayList&amp;lt;String&amp;gt; sms =&lt;span&gt; sm.divideMessage(content);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(String &lt;span&gt;string&lt;/span&gt;&lt;span&gt; : sms){
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;             *  arg0:目标号码
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;             *  arg1:短信中心号码，null即可，写死了到换了地方不就没办法打电话了
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;             *  arg2:短信正文
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;              &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             sm.sendTextMessage(phone, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 然后到这里就结束了。以上&lt;/p&gt;
</description>
<pubDate>Thu, 02 Nov 2017 13:32:00 +0000</pubDate>
<dc:creator>浮梦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/AganRun/p/7774626.html</dc:identifier>
</item>
<item>
<title>struts2（二）之配置文件详解与结果视图 - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/7772797.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/7772797.html</guid>
<description>&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;　　前面介绍了struts2的一个程序的大概流程，还有它的配置文件。&lt;/p&gt;

&lt;h2&gt;1.1、package元素&lt;/h2&gt;
&lt;p&gt;　　1）作用&lt;/p&gt;
&lt;p&gt;　　　　在struts2的配置文件中&lt;span&gt;引入了面向对象思想，使用了分包管理。易于管理动作类&lt;/span&gt;。便于模块化开发动作类。&lt;/p&gt;
&lt;p&gt;　　2）属性&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;　name&lt;/span&gt;：包的名称。&lt;span&gt;必须写。且必须唯一&lt;/span&gt;。&lt;br/&gt;　　　　&lt;span&gt;extends&lt;/span&gt;：一般情况下&lt;span&gt;需要继承struts-default包，但不是必须的。不过如果不继承的话，将无法使用struts2提供的核心功能&lt;/span&gt;。&lt;br/&gt;　　　　　　　　struts-default.xml中定义着struts-default这个包。而struts-default.xml是在我们的struts.xml加载之前加载。&lt;br/&gt;　　　　&lt;span&gt;abstract&lt;/span&gt;：把包声明为抽象包，抽象包就是用来被继承的。只要是没有&amp;lt;action&amp;gt;元素的包，就可以声明为抽象包。&lt;br/&gt;　　　&lt;span&gt;　namespace&lt;/span&gt;：名称空间。&lt;br/&gt;　　　　名称空间 + 动作名称 = 访问路径&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102152153607-1075350196.png&quot; alt=&quot;&quot; width=&quot;778&quot; height=&quot;158&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3）细说package中的namespace&lt;/p&gt;
&lt;p&gt;　　　　namespace的默认值：&lt;br/&gt;　　　　　　a.不写该属性&lt;br/&gt;　　　　　　b.写了该属性，取值是一个&quot;&quot;.&lt;br/&gt;　　　　　　注意：默认值不是/&lt;br/&gt;　　　　动作类的搜索顺序：&lt;br/&gt;　　　　　　第一步：先去找对应的名称空间&lt;br/&gt;　　　　　　在指定的名称空间下找到了：就执行第二步&lt;br/&gt;　　　　　　在指定的名称空间下没找到对应的动作名称：按照名称空间结构向上追溯，一直到根名称空间，只要在任何一级找到了，执行第二步。&lt;br/&gt;　　　　　　第二步：找动作名称&lt;br/&gt;　　　　　　先在指定的名称空间下，搜索对应的动作名称，找到了就执行动作类的动作方法。&lt;br/&gt;　　　　　　在指定的名称空间下没有找到对应的动作名称：前往默认的名称空间下，找动作名称。注意：它只找动作名称。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102152512810-1948402086.png&quot; alt=&quot;&quot; width=&quot;701&quot; height=&quot;556&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;1.2、action元素&lt;/h2&gt;
&lt;p&gt;　　1）作用&lt;/p&gt;
&lt;p&gt;　　　　用来配置动作&lt;/p&gt;
&lt;p&gt;　　2）属性&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;name&lt;/span&gt;：动作名称&lt;br/&gt;　　　&lt;span&gt;　class&lt;/span&gt;：动作类全名。默认的动作类是：com.opensymphony.xwork2.ActionSupport&lt;br/&gt;　　　　　　　是在struts-default.xml中定义的&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102152732951-1156239295.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　要想替换动作类，在应用的struts.xml文件中的package里&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102152912185-1824673451.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　&lt;span&gt;　method&lt;/span&gt;：动作类中的方法名称。默认是public String execute(){}&lt;/p&gt;
&lt;p&gt;　　　　　　要求：&lt;br/&gt;　　　　　　　　public的&lt;br/&gt;　　　　　　　　返回值必须是String&lt;br/&gt;　　　　　　　　没有参数&lt;/p&gt;

&lt;h2&gt;2.1、动作类实现的三种方式&lt;/h2&gt;
&lt;p&gt;　　1）动作类就是一个POJO（Plain Old Java Object 原始的java对象），非常简单的javabean&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102153109216-853849149.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）动作类实现com.opensymphony.xwork2.Action接口&lt;/p&gt;
&lt;p&gt;　　　　实现Action接口，重写excute方法，接口中就声明这一个方法。&lt;/p&gt;
&lt;p&gt;　　3）动作类继承com.opensymphony.xwork2.ActionSupport &lt;span class=&quot;Apple-tab-span&quot;&gt;推荐使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102153517513-1214616194.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　继承ActionSupport类，可以不必重写execute方法，只需要写自己想要的方法即可，一般开发中就使用这种方法，为什么呢？因为方便，&lt;span&gt;ActionSupport类提供了一些&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　我们所需要的常量，比如success字符串常量，内部还实现了execute方法，我们就不必自己写了&lt;/span&gt;。那么很多人就问，这不是多此一举吗？继承它跟不继承它的区别不&lt;/p&gt;
&lt;p&gt;　　　　大呀？哈哈，这样举个例子吧，你想追一个女孩子，有一天哪个女孩子哭了，擦泪的纸巾在女孩子的旁边，那个女孩子完全可以自己拿纸巾，但是你为了追她，体现&lt;/p&gt;
&lt;p&gt;　　　　自己好的一面，肯定是自己去拿纸巾出来递给她，虽然可能你拿比她自己拿更麻烦一点，但是这样让她对你更有好感呀， 那么&lt;span&gt;这个继承actionSupport提供的一些常量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　等，也就是这个道理。并且它还不止止这点功能，它自己内部帮我实现了很多接口&lt;/span&gt;，后面会有讲解到，现在就晓得，以后写的话就通过这种方式去写action类。&lt;/p&gt;
&lt;p&gt;　　注意：常量：给动作方法返回值用的。用常量可以使你的应用规范和统一。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102153453685-116545216.png&quot; alt=&quot;&quot; width=&quot;598&quot; height=&quot;229&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.2、动作的访问　&lt;/h2&gt;
&lt;p&gt;　　对于action访问的方式，在struts1中访问action，一般是带有后缀名为.do，而现在是为.action，为什么能这样写的原因在上面说明了，&lt;span&gt;default-properties文件中就有这样一个&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　常量来说明使用什么后缀访问。可以为.action也可以不写。&lt;/span&gt;所以在访问action时，一般为：http://localhost:8080/xxx/xxxAction.action 。&lt;/p&gt;
&lt;p&gt;　　但是写了几次helloworld之后，会发现一个缺点，&lt;span&gt;一个action中有多少个方法，那么就需要在struts.xml中配置多少个个action，并且每个action就method的值改变了，其他都不&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　变。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　1）动态调用&lt;/p&gt;
&lt;p&gt;　　　　在struts.xml中开启动态方法的使用。struts.enable.DynamicMethodInvocation = true&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102153853763-1611680896.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　那么就可以直接使用http://localhost:8080/xxx/xxxAction!add　　直接调用xxxAction中的add方法了，并且在struts.xml中的action配置中，就不需要配置method属性的值了。&lt;/p&gt;
&lt;p&gt;　　　　这样做就解决了写死method值的问题。&lt;/p&gt;
&lt;p&gt;　　　　举例：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102153942638-1913636401.png&quot; alt=&quot;&quot; width=&quot;666&quot; height=&quot;179&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）使用通配符&lt;/p&gt;
&lt;p&gt;　　　　举例：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102154155670-990190738.png&quot; alt=&quot;&quot; width=&quot;776&quot; height=&quot;238&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　优先级：绝对匹配优先。使用通配符的按照在配置文件中的先后顺序进行匹配的。&lt;/p&gt;

&lt;h2&gt;3.1、result元素&lt;/h2&gt;
&lt;p&gt;　　1）作用&lt;/p&gt;
&lt;p&gt;　　　　为动作类指定结果类型视图　&lt;/p&gt;
&lt;p&gt;　　2）属性&lt;/p&gt;
&lt;p&gt;　　　　name：逻辑视图的名称，对应着动作方法的返回值。默认值是success。　　&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102154623529-430002151.png&quot; alt=&quot;&quot; width=&quot;623&quot; height=&quot;196&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　type：结果类型，指的就是用什么方式转到定义的页面。默认是dispatcher。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102154706763-2143297315.png&quot; alt=&quot;&quot; width=&quot;660&quot; height=&quot;81&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.2、result元素中type的取值&lt;/h2&gt;
&lt;p&gt;　　type取值在sturts-default.xml文件中定义的&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102154938529-1353554426.png&quot; alt=&quot;&quot; width=&quot;1005&quot; height=&quot;235&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1）常用结果类型介绍&lt;/p&gt;
&lt;p&gt;　　　　dispatcher：(默认值)&lt;br/&gt;　　　　　　使用请求转发，转向一个页面。&lt;br/&gt;　　　　redirect：&lt;br/&gt;　　　　　　使用重定向，转向一个页面。　　&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102155055357-350562140.png&quot; alt=&quot;&quot; width=&quot;607&quot; height=&quot;139&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）redirectAction(注意：使用的是重定向)&lt;/p&gt;
&lt;p&gt;　　　　2.1）重定向到同包（同命名空间）下的另一个动作&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102155239060-1106054007.png&quot; alt=&quot;&quot; width=&quot;738&quot; height=&quot;230&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　注意：action2中的type没有写，说明是用默认的转发。&lt;/p&gt;
&lt;p&gt;　　　　2.2）重定向到不同包（不同命名空间）写的另一个动作&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102155438920-1841230273.png&quot; alt=&quot;&quot; width=&quot;754&quot; height=&quot;277&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3）chian（使用的是转发）&lt;/p&gt;
&lt;p&gt;　　　　转发到同包（同命名空间）下的动作&lt;/p&gt;
&lt;p&gt;　　　　转发到不同包（不同命名空间）写的另一个动作&lt;/p&gt;
&lt;h2&gt;3.3、result中的param子元素&lt;/h2&gt;
&lt;p&gt;　&lt;span&gt;　在转发或者重定向到不同包下的动作时，都用到了result元素的子元素param&lt;/span&gt;。&lt;br/&gt;　　param元素的作用：&lt;span&gt;依赖注入(Dependence Injection)思想&lt;/span&gt;&lt;br/&gt;　　我们通过struts-default.xml中的resultTypes元素中配置可以看出，每个结果类型视图其实都是靠一个类来实现的。而param元素就是将配置的参数，注入到该类中。&lt;br/&gt;　　调用的是对应类的setter方法进行注入的。&lt;/p&gt;
&lt;p&gt;　　例如：redirectAction结果视图&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102155858185-6537401.png&quot; alt=&quot;&quot; width=&quot;980&quot; height=&quot;37&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　该类中肯定会有对actionName和namespace属性的注入方法（setter方法）。&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102155943873-981163391.png&quot; alt=&quot;&quot; width=&quot;406&quot; height=&quot;209&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.4、自定义结果视图类型&lt;/h2&gt;
&lt;p&gt;　　通过前面的内容，我们看出，其实结果类型就是一个类，这些类都实现了com.opensymphony.xwork2.Result接口。&lt;br/&gt;　　或者继承自该接口的实现类org.apache.struts2.dispatcher.StrutsResultSupport。&lt;br/&gt;　　这些类都有一个doExecute方法，用于执行结果视图。&lt;br/&gt;　　综上：我们也可以自己写一个结果视图。&lt;br/&gt;　　例子：&lt;br/&gt;　　　　输出CAPTCHA图像的结果类型。&lt;br/&gt;　　　　CAPTCHA(Completely Automated Public Turing Test to Tell Computers and Humans Apart 全自动区分计算机和人类的图灵测试)————&amp;gt;简称：验证码。&lt;br/&gt;　　第一步：写一个类，实现接口或者继承接口的实现类（CaptchaReslult.java）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6e711666-662a-4c47-ba42-79e5550305a9')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_6e711666-662a-4c47-ba42-79e5550305a9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6e711666-662a-4c47-ba42-79e5550305a9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6e711666-662a-4c47-ba42-79e5550305a9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6e711666-662a-4c47-ba42-79e5550305a9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package com.jxlg.web.action;

import javax.servlet.http.HttpServletResponse;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.dispatcher.StrutsResultSupport;

import cn.dsna.util.images.ValidateCode;

import com.opensymphony.xwork2.ActionInvocation;
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 自定义结果视图：
 *     1.编写一个类，继承StrutsResultSupport类，重写doExecute方法
 *  2.在struts.xml文件中，声明结果类型
 *  3.在配置action时，type属性指定声明的结果类型名称
 * @author Shinelon
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CaptchaReslult extends StrutsResultSupport{

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doExecute(String finalLocation, ActionInvocation invocation)
            throws Exception {
        ValidateCode code &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ValidateCode(&lt;span&gt;200&lt;/span&gt;,&lt;span&gt;30&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用ServletActionContext对象获取response对象&lt;/span&gt;
        HttpServletResponse response =&lt;span&gt; ServletActionContext.getResponse();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;该方法需要一个输出流&lt;/span&gt;
&lt;span&gt;        code.write(response.getOutputStream());
        
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;CaptchaReslult&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　第二步：在struts.xml中配置结果类型&lt;/p&gt;
&lt;p&gt;　　　　name：对应的结果类型名称　　class：对应的是结果类型的执行类　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 声明结果视图类型 --&amp;gt;
    &amp;lt;result-types &amp;gt;
    &amp;lt;result-type name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;captcha&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.jxlg.web.action.CaptchaReslult&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/result-type&amp;gt;　　
    &amp;lt;/result-types&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第三步：在action配置时引用&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102160355513-423251325.png&quot; alt=&quot;&quot; width=&quot;721&quot; height=&quot;161&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3.5、全局视图和局部视图&lt;/h2&gt;
&lt;p&gt;　　1）局部视图&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102160722013-465674358.png&quot; alt=&quot;&quot; width=&quot;633&quot; height=&quot;148&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2）全局视图&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201711/999804-20171102160747060-707818789.png&quot; alt=&quot;&quot; width=&quot;687&quot; height=&quot;218&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 02 Nov 2017 13:24:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/7772797.html</dc:identifier>
</item>
</channel>
</rss>